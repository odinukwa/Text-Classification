Implementation: Your implementation is not bad, and so aren't the ones from other solutions. Although I don't like too much LinQ methods, creating separate classes or multiple loops for something rather simple as this "problem". I implemented a non-LinQ solution that requires only one loop over the collection, using the IENumerable.GetEnumerator() method. The logic is as follows: 

Yet, I don't see a property in your class, it's called there. That on the side, it means you perform a foreach loop on the of either TCP or RTU. You can extract that logic in a separate method and call it. Here's the extracted method: 

This way your code is shorter and cleaner which makes it easier to read and maintain. Use the keyword: Definition from MSDN: 

Now in case, where you're not combining a lot of variables it might be better to use the method instead of the . And that code will look like following: 

This makes that you have to check for different situations and so your if-statement cannot really be shortened to one statement. What you also can do is loop over the fields and do a count of the empty fields and validate this: 

There isn't much we can do on security since that is in the file that isn't included here. That being said: 1) Do not repeat yourself. The and inclusion of your db and lib files should be done in a separate file that is included once when required: init.php 

1) The class has functions that begin with capital letters e.g. and others that begin with small letters e.g. . Follow the PHP Standards Recommendations or pick one style and stick to it. 3) The and functions are poorly named. They should instead be named something more descriptive e.g. and or and . 4) Your checks for existing emails and usernames only need to be run if the email and username fields are set. 5) Your code stops the validation if an error is found. This is inefficient since you can run all the validations and check if an error has been found. 

Since you are using camelCase for variables make sure this is consistent e.g. , The line looks like test code and should be removed. If not, then it violates the PSR-1 requirement that files should either declare something or have a side effect e.g outputting html. The s should be saved in an array or string and returned by the function instead of ing them. Several variables are only used once and should not be initialized e.g , There is no check to ensure and are not null. The code assumes each model will be saved without error. The database saves should be wrapped in a transaction with proper error handling. 

In my opinion there are two sides of your story here: 1. Wrapping exceptions This can be useful in situations where different type of exceptions may occur and you want to distinguish them, certainly when you want to give specific error-messages for each type of exception. As you have read yourself, when doing so it's best to follow the guidelines Microsoft has given. This was just a small opinion-based point but for me when reading your question, following point is more important to me: 2. To Exception or not to Exception First of all, here's the definition of the exception in the .NET Framework (from MSDN): 

Correctly rethrowing an Exception Everywhere in your block you are rethrowing the exception with . This is bad practice since you'll lose the stacktrace. Just use to rethrow the exception. Implement it this way: 

Edit: Since you're not doing anything between the two if statements you can place the condition of the second statement inside the first one with an operator: 

Your code doesn't just compare candidates, it also creates new records. As such your function should be appropriately named e.g. . Comments are useful. You can declare a phpdoc style comment for your method and add comments to clarify any corner case e.g. the reasoning behind the code block. Searches with imply that unique identifiers are not being used. The should be removed if the fields are unique. If not, you should find a unique field or a combination of fields that is unique for each entry and use that instead. Two candidates in different parties and constituencies cannot share the same name i.e. a John Smith will not be created if another exists in the database. The criteria should be updated as in (3) above. Since you are using laravel you should stick to the PSR-2 coding conventions e.g. for control structures: 

You can then display the list of errors. 6) You are checking for empty strings but not for strings that only contain spaces. You are also not checking if the field actually exists in . Also there are multiple checks for this empty string. You can use a foreach loop. 7) The required and valid error messages for the email can be combined: 

And then do this for the other class as well. This is not the most ideal situation because when you want to change the order of the properties for the output, you'll have to change the method in all the derived classes. There's not magic automated way to do this I believe. 

A few remarks on your code; Naming: Names like or don't mean much, not to you, nor to others. Use meaningful names for your variables. The keyword: From the C# Programming Guide: 

Why create methods/functions/lines of code that do something that's already been made for you. If you want to get the filename without the extension, use the Path.GetFileNameWithoutExtension() method. 

StringBuilder instead of string concatenation The quickest way of adding strings together is pasting them together with a sign. Quicker isn't always the better practice, as is in this case. The better practice to combine strings is to use the . Instead of something like this: 

There is no easy or short way to achieve this as for each side/direction, the side values are not consistent in the same order (Not sure if I'm making myself clear.. :D). The only possible solution I seem to find is following: Create a method to initialise the dictionary. It takes two parameters: and