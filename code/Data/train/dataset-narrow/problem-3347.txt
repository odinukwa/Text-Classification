Download the 2017-04-10 raspbian image, copy the image via dd or windisk32imager on your SD card and modify the cmdline.txt (see your first link) echo program_usb_boot_mode=1 | sudo tee -a /boot/config.txt Boot the image from SD card which will enable the USB boot mode on your Raspi3 forever. Check with vcgencmd otp_dump | grep 17: 17:3020000a Copy the 2017-04-10 raspbian image via dd or windisk32imager on your USB stick Plug in your USB stick,remove the SD card and reboot. Your Raspi3 should now boot from the USB stick successfully :-) 

If you use Windows the boot partition will be mounted as soon as you plug in the SD card. Open any editor you are familiar with on Windows and create a file called 'ssh' and save it. That way your Raspi will enable the ssh port when booting :-) 

I have a very nasty issue with Jessie :-( Background: I wrote a tool called raspiBackup which backups and restores a Raspberry and because it works fine for me and helped me multiple times to recover from a SD card failure I decided to publish it. It's already used by a lot of people. Issue: When I restore the clone/backup of Wheezy created with tar the system comes up with an IP address. When I restore the clone/backup Jessie created with tar the system doesn't receive an IP from my local dhcp server. If I start the original image everything works fine. When I restore the clone/backup Jessie created with rsync the system works fine. Backup options used with rsync: -rlptgoDWDEHAXx Backup options used with tar: -cp --selinux --acls --xattrs I also compared the two logs /var/log/syslog from the original Jessie system saved with tar and the restored Jessie system which doesn't get an IP. Original image: 

You may want to look at freebsd-gpio (in Perl, Python, and Ruby) or fbsd_gpio_py (Python only, but it looks more active) on GitHub – judging from the Raspberry Pi entry in the FreeBSD Wiki this is the "official" way to do it using calls on . 

So, if nothing has changed, but something has changed it must be magic – or DHCP (which some would argue is the same thing). But seriously, from what you've described it sounds like the Pi's IP address may have changed and there is a machine (hence the rather than a timeout) at the Pi's old address that is not running . The reason that this has happened may be related to the three flashes of the ACT LED – according to @Dmitry Grigoryev's answer to What do system LEDs signify? the three flashes means that wasn't found – meaning that the SD card may have been corrupted. UPDATE: based on the OP's answer, stating that the SD card had been corrupted and that the flashes were faster than the Pi's diagnostic flashes, it is possible that the Pi was able to boot normally (and that what appeared to be three flashes of the ACT light were normal card access flashes during boot). However due to the corruption of the memory card the ssh daemon was not running and thus the connection was refused. This would be the likely explanation if you know that there wasn't another device responding the the ping. You could check that with which would let you see the MAC address of the device at the IP addresess responding to the ping. 

If your main focus is to enhance performance you can lower the allocated GPU memory, since you wont be doing graphical tasks. To achieve this you must define the RAM available to 16MB by editing , and adding: 

If your RPi IP is 192.168.1.10 and the Time Capsule is 192.168.0.212, they are in different Networks. and if you've set your RPi with a static IP make sure it is correct, just enter the following command, 

I used to have that problem, it means that your IP changed. To solve it, just check it by either going to $URL$ or like me, make this batch file: Execute, 

There is a way for you to achieve synchronous execution, it's called JACK. You can find more about it here, $URL$ It also explains how to install and configure. Hope it helped. 

Cron is very sensitive to large time shifts, in this case, i'll bet timezone, so just try to restart it. Type: 

Once the Pi is up and running, login – ssh, keyboard & display, or serial all work (for credentials use or you can also login with if you're on a serial line or the keyboard) and have fun. If you are doing a headless install it may be a trick to get to connect to the Pi. Find Raspberry PI address on local network gives some good techniques for finding the IP address assigned to your Pi. Once you have it: 

Look at the efficiency specs on the converter (higher is better) and get the lowest power rating that will do the job. Both of those will reduce the waste heat produced by the power supply. Is there any chance of either venting the space where the project is installed or putting the power supply outside of the space in free air? 

A lot has changed, for the better, since the early days of FreeBSD on the Pi. In my experience installing and running a recent version (11 or 12) is pretty painless these days. Here are the steps that work for me on the "big" boards – I don't have a Pi Zero so I can't speak to them: 

The exists a nice tool called pishrink which reduces the size of a dd image as much as possible by shrinking the root partition. If you start up the restored image the first time the partition is expanded to it's maximum size again. If you run Windows just use your Linux on your Raspberry to shrink the image. 

There exists a backup tool for Raspberries called raspiBackup. If you restore this backup on a different SD card you're actually cloning your Raspberry. 

Check whether your ssh daemon is up and running and listens on all interfaces. Execute following command as user pi on your Raspberry sudo netstat -tulpen | grep ssh 

The way to boot from USB has changed. The latest raspbian image 2017-04-10 supports direct boot from USB and you just have to copy the downloaded image via dd or windisk32imager to your USB device. In the past you used an SD card to boot and then switched the root device in cmdline.txt to /dev/sda2. That's the way for Raspi1, Raspi2 and Raspi3 to boot from SD card but run everything else from USB stick. Raspi3 doesn't need the SD card any more. There is one important step you don't have to forget when you want to use Raspi3 to directly boot from USB: You have to enable boot from USB only once in your Raspi3. It sounds you didn't do this. You wrote you want to setup a clean system. So I suggest to execute following steps: 

Yes, there is. Take a look at the Raspberry Pi entry on the FreeBSD Wiki and also this question and (especially the last) answer. 

The problem is that Stretch does not run Bonjour out of the box, so the name of your Pi is unknown. You should be able to connect if you: 

Check that your network is up and basically working by trying to ping a machine on your local net by IP address (). Check that you can talk to your router by attempting to ping the internal interface of your router by IP address (). Check that your router is routing by doing a ping to the external interface of your router by IP address (). Now try to reach your router's router by attempting to ping your router's default route by IP address (). Success means that you can reach a remote machine – specifically the machine that your router will be forwarding all of your Internet traffic to Now verify that it is all working with a to ping something far away by IP address (). 

Addendum: It's also new for me the new raspian image supports direct boot from USB. I have already some Raspi3 enabled for USB boot. I was keen to know whether the new raspbian image boots from USB and I just downloaded the new raspbian image, copied it on an USB stick, plugged it in and I was able to boot from the new image via USB immediately :-) 

Update 7/13: This is an important issue for me. That's why I posted the same question in this forum and consider that post as the primary post for my issue from now on. 

The exists a nice tool called pishrink which reduces the size of a dd image as much as possible by shrinking the root partition. If you start up the restored image the first time the partition is expanded to it's maximum size again. If you run Windows just use your Linux on your Raspberry to shrink the image. 

Under it you have the address, correct it (in this case 192.168.0.10) and save. Reboot the device and you are good to go. 

Next install inadyn, this is a DNS updater, what it will do is to make sure it maintains the DNS you choose, just type, 

Just Ctrl+X and save, and that should give you the option to properly shut down. Note: Most users leave the Raspberry Pi on all the time, as its main feature is the low energy consumption. 

Ctrl + X and save it. Now just run it using ./myip.sh You can also get a dynamic DNS, there is several ways to do this, I'll give you an example of a free one. Register in $URL$ and login. Go to Subdomains and create a free one. Next go to Dynamic DNS, you should have the subdomain you created there. Right click Direct URL, and copy the key that appears in the url. Like, 

I never used etcher. Whenever I prime a SD card I use the dd Linux command. Windows guys use win32diskimager. Anyhow: The etcher doc states it's checking the cloned images. If that's true then it seems the image you use is somehow broken. On the raspbian download page the sha1 is listed. Please use sha1sum to verify the sha1 of the downloaded zip file matches to the published sha1 and download the image again. 

QEMU has an ARM emulator. It's a SW emulator and you should have a powerful Linux box. I personally use QEMU to run a test suite on raspbian to test a shell script. I didn't try to run a web application. But I would give it a try. I published the steps I executed to create the QEMU image on my Linux desktop on this page. Hope it helps you to get a QEMU raspbian image up and running very quickly :-)