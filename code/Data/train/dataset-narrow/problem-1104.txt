Your algorithm could be more optimized - there's no need to count topic knowledge for a team if they know 7 topics together and there's only 6 topics left to check and the top team currently knows 14 topics. Similarily, there's no reason to store how much topics each team knows, only the teams that know the largest amount of topics, and the largest amount of topics you have currently found. However, I think that when we look at the loops, you can't really get rid of them. You see, there's two loops needed to make the teams (iterating people over people), and one loop needed to check the topics (iterating over topics). There are clever tricks you could use where you take the binary string and convert it to an integer, but when you do that, you're looping over the characters in the binary string - it has to read the string, after all. You just don't use a for loop. So we're doomed to have at least 3 loops. What you CAN do is take the counting loop and put it in a separate function. That would "get rid" of one of the loops. Your static analyzer is not built with the idea of such challenges in mind - to see a method with 3 nested loops usually means the method is doing too much work. 

And here you do it again! Although I must admit - there's one nugget of information here. A "currentWinningBid" is the "last valid bid" for a given item. But the rest is noise. It can go. 

Yes, there is: Since and and and are outside of the loop, you can precalculate this before going into the loop. That way you can save a small bit of calculating. 

I'm looking for a way to split up my MASSIVE parse function into something more manageable. Improvements on a smaller scale are also welcomed. 

Obvious comment, and thus not needed. What's for? That's something I'd like to know, but that part of the commentary is missing. If I go in blind, I'll get an back... telling me that my are invalid. That's ... not helpful. I guess I could read the nested exception, but it'd be great if you were to describe the constructor arguments in greater detail. 

Since you're only allowed to change one word, only one of these three changes is correct. The rest are not. 

Second thing I see is the rather large amount of blank lines. There are uses for blank lines - mostly for separating sections of code that need to be in the same block, but do different things. What you have here, however, is an if-elseif-else chain (before we shortened it to an if-else chain), and you shouldn't put blank lines between them. It makes it hard to see that the is an and not an . Imagine this bug-prone scenario: 

Be really careful with comments that explain how the code works. If you get them wrong or correct but in a confusing manner, they will detract from the quality of the code. For a bonus, wrap it in a function: 

This seems better to me because it writes the requirement "a cell stays alive it if it has 2 or 3 neighbors" much more clearly. 

if stepback occured, flag is true, and the if statement thereafter becomes always false. So turn it into an else. You don't make any other checks for , so now can be removed. 

Next, we first fill the output array with all zero's with , and then we iterate over it again to add values with the for loop. Why bother, just set the values in there straight away: 

You'd think the second if-block is on its own, but it's actually the of the first statement. Don't add blank lines in an chain. 

A minor bug: You get an for an empty list in . You don't have a comment stating you need to input a list containing at least something. Consider returning and adding a comment. 

That'd be easy to understand. But code can't NOT do something (confusing sentence). Maybe the comment should get reversed. 

Into a separate function, taking a username and groupid. Something like "isAuthorizedMemberOf" or something like that. 

Exceptions You're using exceptions wrong. You're throwing exceptions of type for things like passing null in, broken internal state, just not finding results... First, the exceptions should be identifyable by CLASS. That is, should only be returned if a requested object was not found. Java 7 has (), you can use that for null variables. For internal state failures, throw instead. Lastly, you might want to consider returning null if you didn't find something (but that's your call). ConcurrentHashMap The default amount of shards that the HashMap will be split in is 16. Do you intend to have 16 threads? Maybe you were looking for Collections.synchronizedMap instead? Note that if you do intend to have multiple threads, you can get from your find functions: They call the function, it's in the map, another thread comes by, calls remove, removes it from the map, and then you try to retrieve it in the first thread. . Naming Collection Variables 

The whole tick tock mechanism is not needed for your main loop. You've set up this elaborate contraption (it took me a while to understand) which measures how long your last "frame" took. Then, when deciding on how long you'll need to wait to get to the next frame, you retrieve that time, and subtract that from the current time plus how long you want to wait. All this is a very elaborate mechanism for this: 

As output on the screen, you enter a number, you get a square. Program 1 will print a square. And seeing something like 

I don't see much wrong, but then again, I don't have much C# knowledge. One thing I do spot however, is the following: might be replacable with . See this code snippet in MSDN documentation for usage: 

It's your choice whether you put or in the if statement for the checks - pick one that makes the most semantic sense. 

Allow the user to decide what pizza they want Make proper use of the builder pattern Take a look at your existing code 

I think you should also look into splitting the message handling cases in up into separate functions - it's a pretty big function with a lot of things happening, and if you could reduce it to a switch that calls other functions, it'd be easier to see what it does at a glance. You've also got a typo in the comments at the top: 

Personally, I would add this method in . Doing so would group related changes together (if you have to add a new shape, all you want to be editing is your shapes class/enum). 

You have multiple cases in your code where you have to "reset an audio element". This is done by calling and setting it's to 0. You should make a separate function for that: 

But we're not quite there yet. Why are we comparing with ? The values have no relation to each other. So let's rename to . 

In here, you should check if and don't exceed and respectively. That way you can either limit the printing, or you could throw an error with explanation, rather than running into . In the same way, you should check the size of in , because if the weights and the benefits are not the same size then you'll throw an error at some point, and failing fast is better. 

You could shorten in down to those 5 cases if you wanted to maintain original functionality. We can cut it down further; will be able to replace and . will be able to replace and . So, to preserve original functionality: 

Take N = 1000 with lucky digits 2, 7, 9. This one is easy. 1000 means we score all the 3 digit numbers (which is 3 + 3^2 + 3^3). The first digit does not match a lucky digit, so we are done. N = 1000 with lucky digits 1, 7, 9 is a tad harder to explain: First, we get all the 3 digit numbers because N is a 4 digit number. Next, since the first digit is a lucky digit, we need to score all the points you can make with the next digit. But because the next digit is not equal to or greater than a lucky digit, that score is 0. N = 1150 with lucky digits: again, score 39 for having 4 digits. Next, score 150, but without taking the free score for having 3 digits. Since the first digit of 150 is a lucky digit but not greater than a lucky digit, you get 0 times all the 2 digit lucky numbers. So 0. 50, however, starts with 5. 5 is greater than 1, but smaller than 7, so you get 1 * the amount of lucky numbers with 1 digit. N = 1150, score is 42. N = 1750: 

But you shouldn't be declaring a variable with the same name as an argument anyway, because it does magical things in javascript (primarily, redefining variables sets them to undefined, even if the code is never executed). So just use like this: 

This, or variations there of, show up 4 different times in your code! I think you'd be best off by making this a separate function. If you could identify several more areas like this, you could eventually reduce the noise and length of the function, making it easier to come up with a way to split up line parsing in general. Here's one way to do that: 

That first sentence is useless. - "The interface for a Bid Tracker." Autocomplete in IDEs tends to give you the first sentence and you've just wasted it. The second sentence is better and actually explains what a BidTracker ... Service... actually does. 

and it supports mountains and multiple dragons! Possibly the best thing you could do is take another look at your code, and remove the python element from it. Start in English, and convert that to python. I bet that's what the kids will be doing. Using an approach like this, the code is going to be a lot shorter and easy to understand. Yes, it's slower by doing all the checks all the time. But for these kids, it's probably going to be more important that they understand the code, than that it runs three times as fast. Computers these days are forgiving, and you can always teach them better optimizations later. Plus, if they were to shy away from programming because the code is too complex, that'd be a darn shame. And get comfortable with your code before the lesson. It would be best if you could do live editing in the classroom. 

It handles getting the first picked card and the second picked card, then passes them along to checking for a match. Let's go look at the function. 

I'm very much used to enumerations a la Java, where each value in an is a distinct object. You can call functions on these objects, and they're generally treated as most normal objects. Except ActionScript 3 doesn't have enumerations. So... I had to create my own. My hard requirements: 

This function is rather messy - there are three cases, but the comments only mention 2. And the random return in the middle there seems like weird flow. Let's fix it. First, replace the with . 

And these two pieces of text. If you could remove those differences, or somehow extract them from the section of code to another place, you could merge the two sections of code. Having less duplicated code is good, because if you would have to make a change, you wouldn't have to make it in two places. For this, I'd add a method to : . That way, you could print . Implement in as and in Human as, well... your choice, maybe it just returns , maybe it returns a string the player has entered at the start of the game. Then, you could use an array or a to do this: 

doesn't make for a very good class name because it doesn't follow the convention of styling. That said, it's a placeholder anyway. Your code has a bug; empty string gives you "space" as most occurring character. There is no need to keep track of and because you would be better off finding the highest character after you've counted all the characters in the string. Lastly, I don't know what the requirements are for when there are two most occuring characters. Like "aaabbb". You might need to return a list of characters. 

To me, this is far more readable. You have a bit that creates the , a bit that creates a , a bit that adds the and the and a bit that returns the textfield. Heck, you could even extract them: 

You're first getting the keys, and then you're using the keys to get the value. Maps have to get a set of entries, and then you can have the key and the value in one go. Also, "Your result map's pairs should be sorted in ascending order by age (keys)." sorting already takes O(N log N) time, so basically your instructors are expecting that you'll find a way to get N log N string concatenation which doesn't exist when you're not allowed to create arrays. 

I see this line and think "okaaaaay.... what do all these variables mean?". It's hard to understand straight away. You want to write the code in such a way that it is obvious how the code works. 

What you are looking for cannot be done. The type of the value to be retrieved cannot be determined as long as you store it all in a . Imagine you want to validate compile time that reads and writes use the correct type. The writing could be easily done; you can simply wrap and provide 3 methods for : , , . The reading could also be easily done, you just create a , and . What you CANNOT validate is, compile time, that should not be combined with . Similarily, it is also impossible to specify that for a CERTAIN RANGE of input values, these are floats, and these are strings, and these are... It cannot be done in a clean way. ... Ah. It can be done in a nasty way, though, by creating Enums to serve as keys. First, create an interface for the key... 

So when your boss or your teacher asks you to comment every line, there's not much to do about it. That doesn't take away that comments are usually used to explain "why" something was done in the code. Your teacher asks you to add a comment for each line, so explain "why & how", to show both your thought process and your solution. Specifically... 

That'd be hard to understand, wouldn't it! Except... you've kinda done the same thing with . You should try defining constants for directions. Let's use an enum for this. So define your directions at the top of your code: 

If you retrieve the iterator, then call on it, it fails. To fix this, you should set current to . Consider returning no iterator for empty arrays too. 

This is pretty much the same thing twice. If you could make and print "xxx's move: " then you'd be pretty close to merging the two sections of code into one... Specifically, the parts that are different are... 

The function is doing something else besides what the comment says (namely, running a while loop). What's the while loop for? Additionally, you should (this is a nitpick) write a comment why you use a annotation there. 

The only reason I can do all this is because your code used to work. If a bug happens, it could be in the refactoring we did, but far more likely that the bug ALREADY existed. So if a bug happens, don't panic; either the bug was already a bug or the refactoring is wrong. And the refactoring has step-by-step documentation, so you can test it step-by-step. 

I recommend hitting the auto-formatter in your IDE from time to time. Specifically; before committing to a repository and before posting questions to Code Review. 

Instead of putting the description of the tile in the comment, put it in the variable name. This binds the meaning of the variable to the variable. 

This guard clause can be done sooner. There's no need to convert to char array before checking the length. 

Now right now you're just comparing one int with another, so there's no reason to define as yet. What we can do, however, is remove duplicate code from branches. 

This is a possible design flaw, but understandable, I think. I'd love to talk about it some more, but the other issues are far more important. I wonder why being small matters, though. 

Style I'm sorry for making it personal here, camelCase, but the preferred styling for function names is that they're, well, camelCased. (Apologies for the bad pun). So not , but . Removing the Operations class I think your approach for implementation of is flawed. You're taking two Strings, converting them to numbers, performing a simple operation and converting it to String again. This by itself is not a problem, but...