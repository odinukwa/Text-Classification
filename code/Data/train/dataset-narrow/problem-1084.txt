Besides what Flambino wrote I have a small remark to (3): Why are you storing unnecessary information in the DOM? I would prefer a solution, where you use a simple variable to keep track of whether the button performs an action or not. So you wouldn't have to update the DOM twice for nada. The DOM is a bad place for storing the state of your application. 

you could "inject" a Dao via "constructor injection". If you take step (1) you will have to split your concerns: a) you need an object to represent the report itself and b) you need an object, which creates different kinds of reports. There will be the right place to inject your DAO. 3) What are these details about? 

Think of the simple case: Is it likely, that the caller of your method has the ID of a person or the complete ? Most of the times, I suppose is the former the case. Then you have to build a -Dummy only with the ID to use your method, which makes no sense. On the other hand, you could if you really really can't decide, which one is better simply use method overloading and offering both. But that would perhaps clutter your API. It's up to you. 

This gives you nothing in terms of performance. It would be optimized away by the browser. 2) Chain-calling 

is in fact a model with a key called "content" (e.g. {content:"blah!"}), which is used to render the template, so that <%= content %> is substituted with the actual content. And many more stuff to discover. Referring to your problem - you could abstract your problem with backbone like the following: Every tab you need to display is a view to which belongs a template to determine its html as well as a model, which represents the content of the tab. You could embed each tab in another view, such that you have one embracing view to control the whole tabbing system and nesting views, which represent each individual tab. You could write a custom show() method to show an individual tab and a method which coordinates which of the tabs is shown and which should be hidden. So instead of doing the annoying work yourself, it may be a good idea to use a library to help. Some places to start (besides the official API and documentation): $URL$ $URL$ $URL$ $URL$ 

You are not iterating over in you are iterating over , which are perhaps from a ; in the function (and for python) it doesn't matter what the source is, but you should choose an apropriate name. You make your and your peers life easier, if you try to write better, i.e. cleaner code. 

And the Class Region could be refactored to a simple Enum (as it goes along with your further domainlogic). 

So if I am getting it right: it puts, what it finds in values. I think, you have a lot of work to do. 

»If the book is or the book is blank throw an « Btw. Why did you you use the negative from: instead of just ? 

The Problem Given a list of dependencies where the first item has a dependency on the second item, construct a dependency graph and then 'flatten' it into a single such that no item comes after one of its dependencies. Constraints I am trying to improve my functional programming/idiomatic F#, so I want to avoid mutability. My Solution 

I also wasn't sure how to represent a circular reference without using an exception - perhaps a discriminated union with a case for circular references could be incorporated? 

I'd really like feedback on my use of closures, pattern matching, choices of list vs seq, and if anyone can think of a nicer way to implement the function I would like to see it 

Something else I don't like is the implementation of the closure - specifically that it uses a with two state objects: a sequence and a set of resolved parameters. This was the only way I could think of to iterate through a list of dependencies while passing in an updated set for each item and simultaneously preserving the order of the sequence returned. I realised that I don't need to pass the resolved set through the fold - instead I can just insert the previous results into the set (possibly inefficient?) 

The graph is transformed by the function from a into a . I am fairly happy with this function, it seems to be idiomatic F# to me. 

Once the root has been added to the graph, it is passed in to a recursive closure, , with two accumulators. is for tracking circular references; is for excluding repeated nodes. I don't know how necessary it is to have these two accumulators instead of just one but they do have separate responsibilities. 

This function that takes an (in the first case, a list of s) and produces a which is calculated by all the possible applications of a single arithmetic operator () to any/all pairs of expressions. 

All feedback welcomed, please bear in mind that I'm going for a functional approach here as much as possible! 

The function takes a "root" node that I use to connect potentially disconnected subgraphs. I don't really like this, I feel like it shouldn't be necessary, but it seemed to fit the rest of the algorithm. 

Countdown is a British gameshow where contestants compete in word and number challenges. During the numbers round, six numbers are chosen semi-randomly and the task is to combine them using addition, subtraction, multiplication and division in order to reach a target number. For example, the numbers might be and the target . One winning solution is Below is some F# code that I wrote to try and improve my functional skills. The function accepts an and an and returns an which is the closest it could find to the target. 

Finally, this clause seems overly complicated. I feel like there's probably some method on that I could use here. 

Finally the compute function which drives the calculation, iterating over all candidate expressions until a match is found or there are no more possibilities 

I have slightly simplified the function by merging the function into the resulting computation expression. I refrained from merging the function, as its functionality is distinct enough to warrant a separate function IMO. 

That's a simple point to start, but as mentinoed, the resulting array is very dumb, i.e. you have no semantics about what is what. You end up with a simple array. 2) Another way is using named tuples 

there should be no reference to a console at all. 5) Perhaps it makes sense to outsource the writing of a report to a report writing class. There you have a List of Writer which take a Report as an input and produce the wanted output. 

For this example, the use of is not necessary, but on the other hand gives you something like a lightweight object which could not only contain lables. On top is very readable. 

If you read, what I wrote above, you understand, that this is misleading. You are branching on the condition and returning in both cases : That makes no sense at all. Although the request itself is , the answer should be a . The same goes for: 

You have a instead of a plain variable. This helps you to encapsulate: 1) The name/filename (in case you need it somewhere else) With the constructor, you are free to define a naming scheme for your files. For the sake of the example, I simply used ".dat" as a suffix. 2) The actual datastructure (here for the sake of the example a list named »array«) 3) The calculation function This is, what OOP was invented for: keeping together data and functions, which work on that data. In the -function, you see, how you set up things: 1) the are made of a simple tuple, holding the name as the first element and the function as a second element 2) the configuration of your "variables" is done via list comprehension . For more complex tuples, I would go with namedtuple which allows you to reference the content of the tuple via proper names than indices, which would result in better readable code. But in this scenario, the indices do the trick. Your -function should take the list of objects as a parameter. And you are done. 

Supposing, splitting by \w+ gives in most cases, what you want. Another solution would be . Depends on your demands. Go play with it! 

It's been a while, since I've been on the ASP-Road, but I hope to provide you some help: 1) Read the Documentation of DataTables, especially the paragraph about Ajax source data. There you learn how to use Datatables with server generated data. Serverside processing might be of interest too. 2) You are free to use a html-skeleton (as you did), but you could use Custom Column Definitions 3) In order to get the Datatables Plugin to work you need a) an Element in your DOM, where the Datatable can hook on: does that; and b) you need data to display. There are two basic formats: I) You have loose data, which is represented as an of . Each representing a Row, which consists of an of columns as in this or this example. II) You have structured data, which comes as as in this example So when I get your example right: