Go to local companies and talk to the developers. The command-line interface is still used a great deal owing to its programmability and extensibility. My beginning students learn about the command shell. Also, Python has command-line arguments, which make programs you create in it far more versatile. The vi editor and gedit provide very nice syntax coloring. They also don't "spoil" the user with auto-completes early in their learning. 

Don't. America has developed a disregard for teachers that is revolting. There are too many great careers for people who are able at coding. Right now, reactionary state leges are stripping tenure, pensions, and benefits from teachers. Join the teacher corp today and receive an inferior deal. Sadly, I think this will get a whole lot worse before it improves. I think it is going to be incredibly tough for the next generation of teachers. 

Primitive type variables store their value directly (I say: "Primitive types point directly at their values.") Object type variables store the location of their objects in memory. I say: "Object variables know where their object is in memory. Java is a strictly pass-by-value language in this sense: functions get a copy of the value stored by the variable passed them. If you pass a variable pointing at a mutable object to a function, and the function changes that object's state (e.g. remove an item from an ArrayList), the object itself is changed. Why? Because you passed that object's location in memory to the function and the callee used a mutator method on that object. BANG! Object state is changed. In reference to the last item, you can treat variables pointing to primitive types as if they were pointing at immutable objects, since a copy of the variable's value is made and the original cannot be changed. 

My students love event-driven programming and GUIs. These become objects of fascination and obsession. And they are a great vehicle for teaching inheritance. 

I encourage my students to keep notes on paper, but I have them use their computers when we are experimenting with code. We do a lot of code examples in class. Standard practice is for them to open their programming environments as soon as they arrive so their computers are ready for business. Our kids have laptops. When I want them to take notes on paper or I want them to focus specifically on what I am doing, I say, "It's time to put your computer at 'third mast';" this means to put the lid down not all the way so their desktop session is undisturbed. Most studens find this combination to be effective. 

Python has a turtle graphics module that is quite a bit of fun to play around with. It is simple to use and you can have your students write functions to drive it and to draw custom graphical elements such as stars. Turtle graphics can be used to make looping visual. You can also add an event-driven element by making your drawing panels mouse-sensitive. The Python site has complete documentation. Tough exercise: Draw an American flag. Easier: Draw a Texas flag; making a five-sided star is a fun puzzle. You can incorporate this into your class and experiment with it a variety of levels. 

A stack can be used to verify that an HTML document is well-formed. You begin with an empty stack. When a tag opens (say <p>), the tag's type, in this case, "p", onto the stack. When a tag is self-closing, do nothing. When a tag closes, (say </p>), check to see that it matches the tag on the top of the stack by peeking at it. If there is a match, pop the stack. If there is a mismatch, emit an error message telling where the error lurks in the HTML file you are scanning. If, at any time in the process you find an empty stack, report an error. At the end: If there are still tags on the stack, you have unclosed tags; report an error. If the stack is empty, your HTML file has balanced tags. 

What is indisputable is that the ability to code is a career booster for someone in almost any line of work. 

Understanding binary, hex, and octal numbers contributes to insight on the workings of computers, although octal numbers are fading in importance in comparison to hex numbers. Here are a few reasons File permissions are managed with octal digits. The command 

The proper way to think about this is to ask, "What is a variable storing?" Variables of primitive type store a bit pattern that represents their datum. Variables of object type store the memory address of the object they are pointing at on the heap. When you pass a variable to a function, a copy of the value it holds is made and is placed in the function's local symbol table. This occurs whether the variable is of object or primitive type. Thinking this way, what we have here is pass by value. If you pass a variable pointing at a mutable object and the callee invokes a mutator method, the state of the object residing on the heap will be changed. If the callee reassigns the variable, there is no effect. 

I have found jshell to be very useful. It can be used to inspect classes quickly and easily. You can import any standard library class. You can also import user-generated classes using the command. It can be very helpful in generating test cases. You can save your explorations to a file by entering . You can place them in a method and you have documented the vulnerabilities in the class you created, so if something goes wrong down the road, you know where you don't have to look. I found it very helpful for teaching about workhorse classes such as the wrapper classes, , and . It also came in handy for teaching about polymorphism and interfaces. It will be a valuable asset in the toolbox in my classes. 

It's time for a little "code review." Have a student present his code in front of class and talk about how he made it work. Hey, this happens in the professional world. There is no time like the present to begin learning this vital skill. 

There is return value and there are side-effects. The function is pure side effect: it puts things to . In general, side effects are things that happen which persist beyond the lifetime of the function. Examples of these include files that are modified or created, or elements of a web page that are modified [JavaScript]. To have a return value, you must have a statement. Even in that event, a function might not be a "pure" function. Pure functions must return the same value every time when passed the same parameters. An example that does not meet this criterion: a random number generator. 

For testing, I give lab practicals. I write them so that they are very difficult to finish. Usually, I have 6 questions. This is a "performance based" assessment. 1,2 show basic proficiency. Get 'em and you have a B-. You can now relax and do more. These problems build confidence. This often gets more reluctant students to perform at a higher level. They stop worrying about performing poorly and begin to think about kicking some serious butt. 3,4 are good proficiency. Get one and you are B, get two, B+/A-. 5,6 have annoying features that lead to headscratchery. Get these and be in the A, A+ range. They usually have some kind of twist that requires a good degree of ingeunuity or familiarity with the docs to do. I allow the use of documentation. This is what professionals have. So I do the same thing. This occurs in a 90 min lab period. 

I recommend Python. Why? Strong but dynamic typing. Strong resemblance to English. But.... it is a tool students never outgrow. C is tricky. You don't want students bogged down in understanding the heap when they are trying to master stuff like recursion, looping, conditional logic, and variables. 

It is important to point out the existence of the two layers and how they work together. "Hedwig," the O'Reilly book on Regexes is great. 

6 = 4 + 2, so user has read/write permissions 4 = 4 so group has read permissions 4 = 4 so others have read permissions 

The changes are not huge. However, all of us will like JShell a whole lot. Java 8 was where the big changes occurred. I only forsee small changes in how I do things. 

In Python, Java, or JavaScript, I talk about the type system as an ecosystem of different species of smart data. Objects are self-aware chunks of memory to which you can send messages and which can do work for you. I will frame this discussion in JavaScript. Example in Node 

We teach that there are three layers to a web page: structure, appearance, and behavior. Structure is determined by the DOM, which is created with well-formed HTML5 markup. When we learn about HTML, we immediately begin drawing the document tree, so we can understand how elements on a page relate to each other. Appearance is determined by CSS, which accesses the DOM to format and style the page. This is kept in a separate file so that it can be shared by a related group of pages. HTML handles ad hoc situations using or . Using these makes maintaining pages easier, since the style for items bearing these attributes is made in one place in a CSS file. The third layer is behavior, which should appear in a JavaScript file. JavaScript never needs to appear on a page, save for calling functions from event-handling code. Even this can be attached in a JS file. Make sure your students know about events and early, so they can delay the calling of code until page elements exist. If you install Node, you can run tests of JS code at the command line, and develop test suites for the functions you have created. Separating the three layers keeps things neat and maximizes re-use of code. 

When looping through a collection, a loop is best. The collections loops in Java, JavaScript and Python prevent you from accessing indices that are out of bounds. Most of the time, they are the right choice for traversing a collection. The loop is mostly a "definite loop." The loop is at its most useful when some indefinite number of iterations is required to perform a task. For example, you might be asking a user for a specific type of output. IF the user fails to enter something valid, you nag that user with prompts until he does the right thing. 

From early on, show how programming can be used to accomplish cool stuff. Here is a very simple Python example. Get a text file with a book in it; the Gutenberg project is a great source. Open it and use to suck it into a giant string. Now see how many words the file contains. Is the word "syzygy" to be found? Can you figure out how many times a given word is used? Can you find out if a particular phrase is used? How can you use Python's string methods to explore it? Only very basic ideas are needed to do this. Give programming some punch by doing some "cheap parlor tricks" that will attract student attention. By the way, here is my musing on memorization. You end up memorizing only a small amount of stuff while programming. You need to know about the basic form of loops, functions and other programming constructs. But that's small stuff. You will wind up memorizing things you use often for the simple reason that it saves work and helps you to code faster. However, you should emphasize that Google and documentation searches can help you find more esoteric stuff. Python has turtle graphics. JavaScript has the wonderful Canvas object. Get this stuff out when you are teaching looping. You can have a lot of fun drawing cool art. There is a universe of fun and exciting toys out there. (Can you download a web page programmatically and search it for words?) Engage your kids in unearthing, understanding, and applying it. Above all, write tons of code in front of your kids. Engage their opinions and get them to contribute ideas and whole segments of code. Encourage a little friendly competition and get them to generate and discuss competing solutions to a given problem. CS can be tons of fun. 

The variable is like a phone number. It gives you a means by which you can communicate with its object. Assignment binds an object to a "phone number." On a deeper level, a variable knows WHERE its object is in memory and knows how to find it. Hey, that's like your phone. If you get on an airplane and fly to Des Moines, your mother can still dial the number and ring you even though you have moved. The key idea: A variable knows how to find its object. This is my initial explanation before I get into complexities such as scope. 

where a, b, and c are an octal digit. The digit a modifies user permissions, b group, and c others. Example 

Think pizza shop. You order a one-topping pie. Would you like pepperoni sausage? In common parlance, that's an exclusive or. 

One of the dangers of "playing without a net" and of responding to student input in real time is that of having something not work. This is a teaching opportunity. We ask: What went wrong? Can we use our suite of tools (browser dev tools, documentation, debugging technique) to deal with the brokenness? You want your students to see how you confront and overcome problems. This is a behavior that professional programmers engage in every day. 

Make sure you are having your students "spelunk" in the file system and have them draw some of the tree structure. Often, this visualization makes they way the FS works clearer. We spend a couple of days gaining an understanding of absolute and relative path. I teach this course using a LINUX server. 

If you are teaching Java, you need to start with the API guide early and often. Begin with the method section which answers, "What kind of work can I get an object to do for me?" As we progress through topics such as inheritance and interfaces, we keep going back to the guide and learn how those are reflected in the documentation. An important goal: A student should be able to read most or all of the documentation and use it to solve a programming program by the end of the course. It is the primo teaching tool. Students who take Java at NCSSM are generally good Python programmers. Early in the class we discuss the type system and compare the Javadocs to those of Python as well as comparing the types and how the languages are similar and how they differ (ex: duck vs. static typing). I use my own unpublished book for the class because it is uniquely suited to our program and it does not contain the lard, boxes, and nonsense that most committee-written leviathan tomes contain. It covers quite a bit of material on building GUI applications using the JavaFX8/9 framework. We do lots of "live" coding in class. Got a jam? Use the API guide to figure it out. We also use Java9's wonderful JShell a lot. It's an amazing teaching tool. 

Here is an amusing exercise. Have your students build an API for extended precision rational arithmetic, BigFraction.java. Ask them to javadoc it and to have all of the basic goodies (toString, equals, add, subtract, multiply, divide, pow, etc). Now take these APIs and assign as second project: Solve some problems with BigFraction (compute harmonic numbers, bernoulli numbers, etc) using another student's .class file (no they can't see the code) and their javadoc. This often has entertaining results and it cements the idea that documenting programs enhances their usefulness. 

User has read/write Nobody else has any permissions. To see permissions, use the command. The command changes ownership. You can only do this to files you own. Root can do it to any file. Here are the two guises 

Early in the process, you should emphasize using and applying documentation. Once the students begin to gain this skill, they can explore APIs and libraries that interest them. 

It is important to discuss the type system early, as it is the whole basis upon which objects interact. The type system is the species structure of the Python object ecosystem. Strings interact with string behaviors: + is concatenation, [] is substringing, and *(string,int) causes repetition. Numbers, in the presence of arithmetic operators, do arithmetic. The moral: type determines context and therefore regulates the interactions between objects. The cast expects an object that is convertible into an integer. If it is passed a floating point number, it truncates the number towards zero. If it is passed a numerical string containing a valid parseable number, it extracts the number value from the string. If it is passed a boolean, it converts to 1 and to 0. If it is passed something that is not a parseable into a number, it throws a . 

Many compilers will promote floats to doubles, do the calculation, and cast back. I see little or no reason to use floats unless one is dealing with huge matrices of floating-point numbers. I encourage my students to use doubles for most purposes. 

This is a big reason I like to teach about HTML and web sites before getting into a full-fledged programming language. I require my students to use the HTML 5 validator to validate their pages. From this, they learn about reading error messages, and they learn how to stamp out errors. This project specifies the student must use proper HTML. They can get 100% if they use the validator and extirpate all error messages. HTML error messages are far easier to read than those arising from programming languages. As a second benefit, we discuss HTML and the document tree. We then relate this tree structure to the tree structure of a file system.