None of the above. You set the SELinux booleans which allow httpd and vsftpd to access user home directories. 

IPv6 addressing is different than IPv4 is usually managed. IPv6 is managed by subnet, not by individual address as in IPv4 today. So in Amazon AWS, you need to first assign an IPv6 CIDR block to your VPC. Then you can assign individual IPv6 addresses to your instances. See Amazon's guides for getting started with IPv6 and understanding IP addressing. By default your instances will obtain IPv6 addresses automatically. If you don't want this, you can assign a specific IPv6 address to it. But unlike IPv4, with IPv6 you assign addresses to the network interface of the instance, not to the instance. Use to assign IPv6 addresses to your instances' network interfaces. 

Then install the resulting RPM. Keep in mind that this may require more extensive work to massage the source RPM to accept the new versions of libraries or may cause other issues down the road, but it's a starting point. In case this fails, you can manually build a source package, but then it becomes difficult to uninstall or upgrade it later, so build a source RPM if you can. 

Each in which you've used the IPv6 address requires a to be set. If you aren't using then you need to set the global . 

You installed the EPEL repository for EL6, but you are running EL7. Remove it and try again with the correct EPEL version. 

Works fine; I've run VMs up to kernel 3.9.x in a KVM virtual machine on an EL6.4 host. Make sure you actually are running the current update of RHEL rather than staying back at a previous service pack. 

As noted in the article you linked, almost everything has been stripped out of this image. BTW, unless you have a really strong overriding reason, you probably should just use elasticsearch's own Docker images. 

If you're writing your own NAT rules for your virtual machines, rather than allowing libvirt to manage them, then the virtual network to which the VMs are connected should be set up as a routed network, not a NAT network. You can fix this with and change: 

You can't on an address that your server doesn't actually have configured on one of its interfaces. And you said that that your server's network interface isn't configured for that address. To resolve the problem, add that address to your network interface configuration. You should also consider having nginx bind to any address, e.g. with . 

You used the option to tell mrd6 to daemonize, i.e. fork and go into the background. But you selected the systemd option. This option is meant for services which do not fork but run in the foreground. Instead, you should use . Remember to run after changing the unit file. 

You can't put a in an block, of course. What you can do is to put this code in a separate file and then it from each block that you want to apply it to. 

You are using an OpenVZ-based VPS provider. The provider must enable TUN/TAP in your container before you will be able to use OpenVPN (or anything else that relies on TUN/TAP). 

With the two machines in different datcenters? You can't. This scenario assumes that both machines in the cluster are on the same subnet; the VIP is also in that subnet. To do what I think you want to do, you would need an anycast IP address. Then you'd still have to run your own AS so you could add and withdraw routes as the machines go online and offline. This is at least a six digit investment in hardware, infrastructure and quite possibly an admin to babysit it all. Not what you had in mind, eh? Geographical redundancy is not easy nor cheap. The minimum I'd do here, since I would guess you are on a tight budget of no more than three or four digits, is to forget the VIP and write a custom fence that adds and withdraws A records from the DNS when the machines go online or offline, and host your DNS somewhere that has solved all these problems already (e.g. Amazon Route 53). You'll also have to STONITH, (and write custom code for that too) but withdrawing the DNS record ensures that visitors aren't directed to the dead node. Later, you should take a few hours and do some research to decide whether this is the right way to scale your application at all. If it's a web site, it might not be. 

A Windows program built with Visual C++ that uses the redistributable library is tied to that specific version of the library. They are not ABI compatible with each other. So, if you have one program that uses the 32-bit 2008 redistributable, and another program that uses the 32-bit 2015 redistributable, and a third that uses the 64-bit 2015 redistributable, you need to have all three versions installed. Note that Windows Update will provide security and critical updates for these runtimes, so after installing one, you should check for and install its updates as soon as possible. 

TLS certificates are issued for hostnames, not for IP addresses. Use the appropriate hostname in your URL. 

Your old passwords are not stored in plain text. Instead, your old password hashes are stored in by PAM. It then makes the comparison when you go to change your password, based on what has been specified in the PAM configuration. An example PAM config: 

The behavior you describe as happening is correct, if you want to receive mail from people outside your domain on the rest of the Internet. Only outgoing mail from your own users, destined for other places on the network, needs to be authenticated. 

Sometimes the relevant documentation is hidden away in configuration files rather than in, say, the documentation. So it seems with LVM. By default LVM will automatically attempt to activate volumes on any physical devices which get connected to the system after boot, so long as all of the PVs are present, and lvmetad and udev (or more recently systemd) are running. When the LVM snapshot gets created, a udev event gets fired off, and since the snapshot contains a PV, lvmetad automatically runs , and so forth. By looking at I was able to determine that lvmetad had explicitly run on the snapshot by using the device major and minor numbers, which bypassed LVM filters that would normally prevent this. The file contained: 

Use a filesystem which is capable of detecting and repairing corruption, such as ZFS or btrfs, or Windows ReFS. 

Never name your mail servers (or any other server) with the naked domain name. This will break a lot more stuff than forward confirmed reverse DNS lookups. Each server should have its own unique name which is a subdomain of your domain, and for which the reverse DNS points back to that name. 

For developing a new project from scratch, I would go with 5.4. It will have a much longer shelf life than 5.3 or prior versions. For deploying an existing project, including any open source PHP code you downloaded from the Internet, I would use PHP 5.3. The reason for this is that 5.4 has a few places where backward compatibility was broken, and some existing PHP scripts will need updating to be compatible with 5.4. In a few cases, the package would have to be completely refactored to work with 5.4. See the PHP 5.4 migration guide for all the gory details. 

nginx doesn't support abstract sockets (as of today). However an unofficial patch exists which provides this support. Once applied, you can refer to an abstract socket as . If you use this patch, be sure to read the entire nginx forum thread regarding it, as it refers to various changes made to the patch. 

You tried to mix name-based and IP-based virtual hosting on an IP address. This almost never has the results you expect. From the documentation: 

When you use the nginx real ip module, nginx places the actual connecting IP address in the variable when it does the IP address substitution. So you can pass this to your application by setting the header: 

You ran that on the same host that contains your nameserver, so of course it worked. Running it from anywhere else on the Internet, it fails. 

You're doing it wrong. Your point-to-point tunnel uses only two addresses of the /64, which is SixXS's end, and , which is your end. No other addresses in that /64 should be used. You should configure your local network (and rtadvd) with the separate /64 or /48 subnet that you were assigned, e.g. . (Also make sure you have in .) 

One's complement arithmetic was used because TCP was designed in the 1970s for 1970s computers, most of which used one's complement arithmetic. The rise of two's complement arithmetic, which modern computers use, didn't really begin in earnest until the personal computers of the late 1970s and 1980s. 

In future, be careful with manually removing files included with system packages, be careful with which third party repositories you use, and be especially careful if you mix packages from different Debian versions (e.g. stable and testing). 

Do you really need the directory structure in the tarball to be different than it is on disk? If not, then you can just tar them up as-is: 

This accepts ongoing traffic for any existing connections that we've already accepted through other rules. 

You have nothing to do to your server. According to Red Hat, the versions of Apache shipped with RHEL (and by extension, CentOS) are not vulnerable to this attack. You do need to provide this information to your PCI compliance auditor. 

Try naming your sample application when you copy it into the web root. Start by creating a simple hello world app as and see if it works. This will isolate any issues with IIS: 

It appears you've created a new directory outside the standard filesystem hierarchy to hold your web documents. When you do this, SELinux is not aware of your custom directory structure, and doesn't know that Apache (httpd) should have access to it. You will see messages in showing denials in this case. To actually fix the problem, you need to tell SELinux that Apache can access the directory. Do this using the semanage fcontext command: 

Funny, I just did exactly this the other day after finding my RHEL instance on EC2 only had 6GB or so of the 10GB space allocated to it... 

The PERC series of RAID cards do not directly support JBOD, but it can be simulated by setting up each drive as a RAID 0 containing only one drive. 

That is not a normal way to report spam. In fact, it's utterly bizarre. The generally accepted way to report spam is through the abuse@ email contact of the owner of the IP address which sent the email to you. In the case of email you sent through a firm in Berlin, such email would be directed either to them, or to their Internet service provider or datacenter from which they sent the mail. You would not see it until the firm forwarded it to you for appropriate action (e.g. unsubscribing the user). The other common way spam gets reported is through email feedback loops from large email service providers (e.g. Gmail, Yahoo, Hotmail, Yandex, etc.). When a user clicks the Spam/Junk button in these services, a report is generated. You would have had to opt in to receive these, and you would generally also get them delivered by email. In the old days, before abuse@ was a standardized thing, and before spam was a serious problem, we might pick up the phone and call the phone number listed in the whois record, but (1) it would be a human being calling, not an automated recording, and (2) that hasn't really been done since the late 1990s except for extremely unusual situations. And we'd end up having to forward a copy of the email anyway. I have no idea why you received an automated call, but if they weren't willing to send an email in the usual way, and weren't willing to have a human being talk to you, then I don't see why you should be expected to waste any time on it.