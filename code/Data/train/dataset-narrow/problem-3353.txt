OpenWRT/LEDE is now supported on most of the Raspberry Pis. It has a range of features and is designed around deployment to embedded systems. For example it uses the Linux OverlayFS in conjunction with a read-only root filesystem image to provide for robust operation in the face of Flash memory corruption and arbitrary power cycling. Whilst a number of features may also be achieved using a conventional Linux distribution on a Pi OpenWRT does provide a packaged reliable solution ready to go with a web interface. For general info in QoS on Linux see LARTC and for OpenWRT. To control queuing on Linux you'll need to use the command. E.g to show detailed info and stats on the current queue configuration for the eth0 interface: 

One can also find a full explanation of the two modes of operation (Managed and Roaming) for wpa_supplicant in it's locally installed documentation file - which can be viewed (an [older?] online version is here): 

OK, I've managed to solve the problem myself: In fact, I had prepared the sound output beforehand by using the ALSA audio API functions described in this tutorial, unfortunately including a call to the function, which engaged the sound output device. After studying the sourcecode of out123, I found out that out123 already opens the sound device when issuing the function â€“ by using , of course. However, I've still gotta find out how to make the necessary settings to ALSA when working with out123. 

When calling mpg123 from the command line, though, I do get line 1, but not line 2, and the line with is also missing in the debug output! 

At least I've now got a workaround now: I got the sourcecode tarball from Github and compiled it myself. I know this isn't a very clean approach (especially not not on production systems), but at least I've got a working mpg123 installation now. 

If you exclude XBMC, Redmine and Music Server, I have already done those (with the addition of a PostgreSQL database and Mozilla Firefox SyncServer) and I can tell you it works very well with 256MB RAM (240MB since the memory split won't take less than 16 for the GPU). Of course there is no desktop UI. It took me about a month or so, playing around in my free time.. To play movies you'll need at least 64MB RAM for the GPU, and the XBMC is very resource hungry (in all CPU-RAM and I/O ops) so it won't leave space for anything else in your 256MB so it won't fit. It's one or the other, you can't have both. You can use one Raspberry for all the server stuff (mail, webserver, cloud, NAS etc) and one more for the media stuff (XBMC mostly, maybe MPD as well). You may also need a powered USB hub for external hard drives or other peripherals, so consider this cost as well. An important note is that the poor ARMv6 and the humble bus of the Pi cannot compete with the multicore x64 all-in-one server in performance. Also, it will require significantly more time to have everything up and running and tweak the configs to get the best of it (unless you consider this a hobby, so it's fun :) ). Conclusion, attempting to answer the question. The all-in-one server will perform much better in all aspects, even compared to a team of 4-5 RasPis. The Pis are more fun and can do all the work but will be slower as much as they are cheaper. 

The return value of is then , but in the same moment, the status LED on my sound card (JustBoom DAC HAT) is switched off, and the card delivers no sounds any more (until I reboot my Pi, at least). The debug messages emitted when is called look quite strange: 

A brief look into the out123.h header file revealed 2 as the current API version. I've got libmpg123-dev from the sid branch, as the version from the stable branch lacks the out123 files I need. What's wrong here? Thank you for any useful hints. 

I'd like to play MP3 files on my Raspi 3B by using mpg123, so I added (among others) the following lines of code into my app: 

The default device is a JustBoom DAC HAT named plughw:0,0. When using mpg123 on the command line (by using the device name explicitly, or resorting to the default device), everything works fine, but when using the mpg123 library functions in client code, I always get such an error, no matter whether I set the device and driver names to NULL (which means trying out the drivers out123 knows and using the default device). I don't really execute mpg123 by using fork ()! What's the problem here? Thank you for your help. UPDATE: After switching to the recent mpg123 version from GitHub & setting verbosity to 3, I get the follwoing messages when issuing : 

Motion usually creates it's own user called and when you run motion as daemon, this user is used. I suggest you change the group of the folder and make the folder group-writeable so that both you (user: pi) and motion (group:motion) will be able to read and write to that directory without making it world-readable. As root: 1) Change the group of the directory to motion 

NOTE: To make sure which user is running the motion daemon use this command while the daemon is running. 

The file way is faster (it doesn't need to read the whole directory), plus you can edit the file anytime. The glob way is easier. Choose whichever you find more suitable. You can find a dozen more ways. 

The option can be used with the and not the . If pam_unix is installed in your Pi (most probably, it is), then this line will do the trick 

I've now got an Ultimate GPS board attached to the UART, and use both the GPIO pins, and the SPI interface by addressing the pigpio library. The pigpiod docs tell me that pigpiod would control the UART, too, but then it would probably interfere with the gpsd, which already controls the UART. Any suggestions? 

I've got the following tricky problem: I'm using pin #22 (GPIO25) of my Raspi 3B as a GPIO input and read its state by using the pigpio function , where is a pointer to the function called when pigpio detects a state change. After adding a JustBoom DAC HAT sound card, the input kept on working, but once I started talking to the sound card by using the function of the mpg123 library, I stopped receiving alerts from pin #22 without getting any error messages. The pinout description of the sound card states pin #22 as optional (for use with an IR receiver). I don't have such a receiver soldered to the sound card, so that I don't really understand why the card interferes with a pin it isn't using anyway. Low-level checks by using and did deliver correct resoluts: Once I pulled pin #22 to high, I received a 1, and a 0 when I pulled it to low. Any hints? Thank you for any useful information. 

As mentioned on the Pi NoIR specifications webpage it is only missing an InfraRed filter. So you can just buy a separate "IR-cut filter" (search on eBay or elsewhere) and use the Pi NoIR in daylight with such a filter as people have shown (e.g. here). There are also IR filter switches so one can switch the IR filter in for daytime use and out at night night time so it can see Infra Red (e.g. here and here). There's even commercial offerings (e.g. from modmypi) that provide this all built into one module. 

It explains that whilst the Managed mode just allows for connection to single configured WiFi network, the Roaming mode allows for connection to multiple WiFi networks with potentially different network configurations which may be controlled by adding the special option which is then matched against corresponding entries in the network config file - specified in the file. e.g: 

3) Optional: Give write access to everything inside the directory, in case motion wants to overwrite something (e.g. the timelapse video). Alternatively, you can just empty the directory and let motion create everything on it's own. 

With FTP you can change file permissions to something like 744 If you have shell access you can use this to read the error log in real time 

As you suggested, there are more than one ways to do that. The file way, where the counter is stored in a file: 

A cronjob will be more accurate for this sort of work. You can just remove all the time calculations and the loop. Then run to edit the crontab file and add this line to the bottom. 

I couldn't be sure without some logs, but my best guess is that nginx can't read the file because of restrictive permissions. You must make sure that nginx has permission to read the file (and possibly the directory too). Your nginx error.log will tell you what the problem is. On the default installation of raspbian, it is If you have shell access use 

You don't need the file at all - The default setup in Raspbian Stretch does not contain an interfaces file. So just delete/move/edit the /etc/network/interfaces file if you have created one. This just works as the wpa_supplicant service will just start up automatically if it finds its config file () and connect the WiFi interface () to the network. The default DHCP client dhcpcd attaches to all interfaces so it will then obtain an address. If you want to assign static IP addresses or do other fancier network config you may then need to create an file or modify the file. And if you want the device to be accessible via ssh then you can create a file in the directory (remembering that if you're doing this to the micro SDcard on another machine - the boot dir is mounted on the first partition e.g. /dev/sdb1, and root would be on /dev/sdb2): 

After a thorough check of the wires leading to the display, I found out that the soldering of one of the ground wires (which is soldered to the GND connector of a USB cable, which is itself plugged into the UPS of my Raspi) had gone loose (which was invisible at first glance). Unfortunately, it wasn't just some GND pin, but display pin #20, which must be pulled to GND for the display for its SPI interface to work. After resoldering this wire, everything now works fine. :) Shame over me!! 

As I'd like to play MP3 files on my Raspi 3B, I installed mpg123 together with the libmpg123-dev package so that I can call mpg123 from some host application. However, every time I call out123_open (), I get seven identical error messages, which read as follows: 

Apparently, when calling , the function is also called and switches off the sound card. How can this be? Does everybody know hot to prevent ALSA from shutting down the sound card? Thank you. UPDATE: Upon another user's advice, I found this when calling : 

To set up an Access Point using you need to set the following in the hostapd.conf file (the channel can vary between 34-165 - see output from iw list): 

So the "uni" network will use DHCP whilst the "home_static" network will use the static IP address 192.168.0.20. Though one doesn't have to use the option and the device will just use the defaults (see the doc file). 

Whilst you can't directly monitor the power consumption you can obtain information about the operating voltage of the: (default), , , and (see here for more details). 

FYI the Raspberry Pi 3B+ does support 5GHz - you can see the available Frequencies using this command: 

With the latest versions of OpenWRT the default queue is now the fq_codel which has been designed to alleviate the problems of "Bufferbloat". 

To get the WiFi working on a Pi Zero W only requires minimal config for Raspbian Stretch. The only file you need to modify is and this file needs to contain your WiFi network's SSID and password - which you add after the initial lines (the first 3 lines) that are already there so the file should look like something like this ( might be different for you):