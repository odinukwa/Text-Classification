Points 1 to 3 are user interface specific concerns. In an MVC approach they belong to the View and not in the Controller. Point 3 can be a user interface concern, if the texts are static, but can also be viewed as a data concern. The same way you get data from the database, you could collect all these static texts in a configuration file and only have to look at one file to change them across every View in your application. That could be considered a Model approach. Having said that, this: 

Consider all of the above as extreme nitpicking, your code is way past the point of obvious flaws. The real value of the answer, if any, was to point you towards the SPL. If you did consider it and rejected it, would you care to share why? 

This way a function to get cabin information is available to all your controllers, you don't have to rewrite it every time you need it. Don't repeat yourself. If there's any HTML / CSS or any other presentation logic in your Controller, and of course any persistent data logic, you are doing it wrong (in MVC terms). But MVC for small sites may be an overkill. It's a correct approach conceptually, but you will have to decide for yourself if it's the right one for your application. But if you decide it is, you should follow it as is. A very easy approach to separate presentation from logic would be to use a template engine. There are quite a few of them out there, and there isn't one that's better than the others. Using one is more important than which one. And of course it wouldn't hurt if you didn't try to reinvent the wheel and started using an MVC framework. Or if that feels too much, a micro framework. There's is an often quoted article by Rasmus Lerdorf that some people perceive as advocating against template engines and frameworks. It's not, the only point of the article is that you don't have to use them. In the article there's a very nice and tidy approach on how to get an MVC kind of structure out of the box, without the added complexity of any third library. If you really don't want to use any third library, you should copy Rasmus' style. 

When providing an object, I don't think it makes sense to pass the index into the callbacks. Rather, pass in the current key. Also, I think reads much clearer here: 

Use & . They're SO MUCH faster. Since you call every time you instantiate your plugin, you should probably move the call into your constructor instead. Public functions should be assigned to the prototype, so that we don't create a new function every time we create a new instance. Likewise, define a private function outside of the constructor, in the parent closure. Again, we don't want to have to re-create the same function over and over again. 

Are you sure you really need that selector? Wouldn't do the job just the same? While we're at it, why are you listening to the click on the elements, and then find the via ? Can't you just listen to the event on the s themselves? Is there any method to that configuration? I wasn't able to deduce any algorithm from what you've provided, but I'm sure there is. You'd be better off calculating it on the fly, if possible. 

This is my first foray into the wild world of jQuery plugin development. The plugin "ajaxifies" forms, which isn't particularly spectacular: 

Obviously, what's more important right now is to minimize that glorious readability mess, hopefully the (small) performance gain might be just the incentive you needed. Cache your jQuery objects You are using in and twice in . That's three times jQuery traverses the DOM to find , what you need to do is: 

I was trying to explain the mediator pattern to a new developer, and ended up writing a simple event mediator. Thoughts? EventMediator 

You need to add another css class to any of your paragraphs You need to change a css class to any of your paragraphs You need to convert a paragraph to anything else You need to change the text of a paragraph blah blah blah (there are a lot of other likely scenarios, but I think the first 4 are enough to illustrate my point) 

Don't know if this is just poor question formatting, or your style, but please indent properly, this isn't really good: 

You are converting multiple DateTime values to strings in order to parse them again (this should immediately raise a red flag). When you use the DateTime fields like they were meant to (i.e. containing both Date and TimeOfDay), you can get rid of these redundant conversions: 

After quite a bit of refactoring, we arrive at the below solution. If anything needs to be clarified, go ahead and ask. Refactored example All methods could have been made static, however I suspect you will change the base class - to which VariableDeclarationParser has no dependency at the moment - to a more useful one that provides a method that can be overridden. 

We simply ask the game for the current player and prompt them to make their move. Note the high level of these method calls... there's not much of an implementation visible here, just a high level view of how the program flows. We'll keep asking for a move until the user enters a valid one: 

Input Processing This will properly validate the input, and I made it a bit more readable by extracting a method for getting the next integer. I have to admit I'm not a big fan of but it was the simplest and most readable thing I could come up with. Note that each method has its own, clearly defined task: the method is all about validating the correct bounds (and doesn't know anything about your ) while the method is all about retrieving the next integer from . 

The code is equivalent, and will work (?) if you replace it in your script. Hope it clarifies things a bit. The overall quality of the code is bad, there are some hints of an amateur developer there, and you shouldn't really worry that you didn't grasp what the code does, since you are unfamiliar with the language. It's an incomplete and mostly poorly written piece of code, good luck with it ;) 

The first clause, essentially checks if there's an "old_keyword" index in the array (and whether it's or not), that's a pretty typical check for arrays. The second check, that executes if and only if the first one passes, checks whether what's in is not the same as what's in . I'm assuming that the author had some reason for that, but can't imagine what that reason is. Summarizing what happens here, if: 

As this is a learning experience, you should be concentrating on learning the language and its quirks. Java <> PHP, in quite a few ways. You shouldn't limit yourself in copying the Java interface, it's a good interface to clone but now that you've done that you should explore enhancing it with native PHP functionality. You should take as much advantage of native stuff as possible, the performance difference is noticeable. I have to admit that the ArrayObject was an off hand example, my primary intention was to point you towards the SPL. I did base something similar on an ArrayObject, but the requirements weren't exactly the same. Still bits and pieces of your code could be rewritten to take advantage of native functionality. For example, this: 

Notice that you don't need to hang on to an array or list of numbers; you can track the statistics as you add numbers. Please also note that all this code knows nothing about validation or input/output: all it cares about is tracking statistics. Next, we'll need a collaborator that validates our input. Because I'm assuming your validation requirements are likely to change, it makes sense to define an interface ( means there can be validators for any type of data, such as strings, integers or floating-point numbers): 

In order to find a more elegant solution, we first need to identify the problems; only then can we solve them: 

I hope you find this review useful. I've tried to clearly mark the parts that are purely based on my opinion. Having spent a couple of hours on this, I'd appreciate some feedback in the form of votes and comments. And sorry for not linking to the more advanced concepts I touched upon: you may need to Google a lot of things. I'll try to come back and put in some links some time. 

Doesn't really belong to the Controller as well. The easiest approach would be to have all your database specific functionality in functions in a separate file: 

Well, more of a factory method now, which is silly. But not as silly as . If you absolutely need to keep the class's signature as it is, go for it. If not, a PDO wrapper would be the better approach. 

This is not a Controller. The purpose of MVC is separation of concerns, more specifically the separation of domain logic from the user interface. Let's see where it fails: 

and avoid the costly call to . And do return something, tell the user if the operation succeeded or not, regardless of what the Java interface does. 

for brevity, readability and to not have redundant checks. is not that expensive, still no point in calling it more times than necessary. I'd advice against having HTML in your classes, as you do in . Simplest solution would be to create an array of your database results, return the array and construct the table when it's absolutely necessary - at the script you actually show it. Moving on to , is called every time is called, and that's absolutely unnecessary. Not really an expensive database call, still redundant, you can safely move it into , it's a call that only needs be done once, just after you connect. In general, avoid functions, they are essentially obsolete, kept around only for legacy reasons. Their use is discouraged in the manual: 

If you want to, you could even build that original array dynamically, which will make this much easier to maintain: 

If you find that you have to do this a lot, you can abstract it into a custom filter, which you can then use in your selectors: 

In the regex above, we're looking for any characters in the string that are not in the bracket group. If none are found, will return 0 (which when negated will result in ). If any of those characters are found, will be returned and negated to . 

Just keep in mind that this will query the DOM on every single !! Are you sure you can't somehow do this differently? 

The code above works, but the text is not associated with the radio button in any way. To remedy that, consider wrapping labels around your radio buttons: 

In addition, Crockford suggests that you put the calling parentheses inside the wrapping parenthesis. 

The method will traverse the DOM all the way up the chain. Rather use the method, which will stop at the first match: 

Performance The difference is huge (running without the debugger, compiled in release configuration, timed with a ; ). With eleven characters of input running one million times, is 7.5 times faster: 

Unfortunately, C# doesn't infer the type parameter of the output argument, so you need to specify it manually (in this case, ). 

The following method is called when the player makes a move. It replaces your three enormous if statements where the conditions spanned multiple lines. Even in this refactored version, some complexity remains. Basically, the approach is: 

If you're looking for something a bit more radical in nature, why not let handle several sequences at once? (Note that unfortunately, you cannot combine default parameters with sequence-unpacking in Python 2.7, which has been fixed in Python 3.) 

Finally, we again override , giving us the ability to output the game board. This is still a lot more complex than I would like. Ideally, this might be delegated to a separate class. 

It's concise — a one-liner. You could even skip the extension method and use the directly. It's readable — by wrapping it in the extension method, the intent of using the is clarified. It performs well — in my crude testing, it beat your and Sandeep's versions for both small and large input sequences. (Specifically, the based approach runs twice as fast as Sandeep's version for your original input, and at least three times as fast for very large input sizes).