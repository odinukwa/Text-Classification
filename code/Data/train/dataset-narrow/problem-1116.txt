Why are you creating a brand new variable to only have it destroyed in the next line? You should just merge the content of straight to the return statement, like this: 

Your function is just a function returning a class except for this one constant variable you define at the very top: 

I disagree with Tiago Marinho's point about ternary operators, however. I don't believe that it will have any negative impact on your code. With good formatting, this can actually make your code look rather nice, in my opinion: 

This is a big, big issue with your code: indentation. It is excruciatingly difficult to read code that is poorly indented. Here is how indentation works: 

I have bold-ed the first letter of every word to show the correlation between this and the metric system: the first letter of each word directly corresponds to a metric unit "type": kilo*, hecto*, etc. And, again going back to the chart, we can see that there are numbers associated with each unit "type" to show how many of the basic unit is in one of that unit type. For example, there are 10 basic units in a deka*, and 0.01 basic units in a centi*. 

Then, to call, just pass in an array of the various s. No, this will not making typing more easily (well, it will by a little bit). However, since the data you are providing is arbitrary, then there is no way you can do this with patterns and loops. However, this will speed up your code. Instead of calling a method 20+ times in a row, you are calling this method a single time and this method is using a loop 20+ times; a much more efficient task. 

Notice how the second copy doesn't have in the last argument. With it like this, you do not have to manually copy the character over afterwards as it will use the character from . Note that you can not do this as easily with as this function will copy the entire string, including the character. 

Now, the different levels of permission are stored in one convenient place. Instead of using strings to represent the different levels, you should now use something like this. But wait, there's more: With this, you could also make this method more efficient, along with future methods by storing the corresponding chat color with each enum. Here is what I mean: 

Is roughly what you'd have to do. I wrote out an implementation in C. If you'd like to see it, then leave a comment. 

After scrolling through some pygame documentation, your method for clearing all is a very good one for pygame. I am assuming that the excessive slowness is coming from having to paint the image to a surface every time. A faster way to do this would probably be to use an image editing library so that you don't have to paint the image every time; you'd edit the image in the background. I sifted through the PIL python imaging library and came across a convenient method call . This method will iterate through every pixel in an image, call a function (passed via argument) passing in the pixel information, and reset the pixel value based on the function output. This may or may not be slower than what you are already doing. 

You are setting up all these buttons and controls in your JavaScript code... wouldn't it be easier (and more efficient) to just put the buttons and controls in your HTML and then to bind functions from your JavaScript to them? 

Over-complicating input TamerCpp is right in his recommendation for how to handle input; you should definitely go with that. However, as a review for what you have present, you are seriously over-complicating how you receive input. There is already a function for exactly what you are doing: . In fact, with this function, you don't even need your function anymore. Instead, you would simply write: 

Fake for-loops and comprehensions At the beginning of your post, you say that you can't always achieve everything with looping in one line in CoffeeScript. When you say that, I assume you are taking about the : 

You shouldn't have to prompt the user twice for the row and column of the place that the user would like to go. 

This doesn't make a much of a difference, but it speeds up your code a little bit. Instead of storing the result of a calculation in , it would be faster to just pass the return value an arithmetic functions into the statement/function that you will it next in. For example, the end of the "1" (addition) section of the switch statement would look like this: 

Simplification with for/in loops Your loop through in the function you have for the variable is reinventing JavaScript's for/in loop which loops over and objects keys. Here's how you could simplifying that code: 

In your function, there is no point in calling as the variable passed in from is already a capital letter. 

pop up more times than they should. Are the returns of these functions changing at any point in the program? No. Therefore, the results should be stored in variables 

Don't check all elements Every time a new chat message is added, you are searching through all the chat messages on the page for messages to one-box. This isn't very efficient; you've already one-boxed the passed messages, so you only need to handle the ones recently said. You can do this using the . I can't get the docs up right now, but every time your listener function is called, some parameters are passed in that tell which elements have been, in your case, added. Once you get those, pass them to the function and have it only work on those elements. You could rewrite that function like this: 

In the beginning of your code where you delcare your and functions, I recommend that you put the parameter names along with their type. If your code were to be longer, it would make quickly glancing at your code easier as the code already shows at the top which argument means what in a function call. 

This will allow for a list of elements to be checked to be passed in and, if they aren't, it will check all the elements. As for when messages are edited, you may have to configure your a bit more (again, I don't have the docs up, so I don't know what you can do) 

You don't have any input validation. What if I enter a number like ? You're program is probably going to throw an error. You should do some checking on the input received to make sure that the numbers are in the bounds of your board. 

I'm a little confused by what your function is trying to accomplish. To make it simpler, just run on the position. It will return (which acts like in a conditional) if the user entered a string, rather than a number. 

You did not specify what assembler you were using, but if your assembler allows for creating macros, I recommend that you make macros for those "random" numbers that are in your code. These "random" numbers are called magic numbers; they've just appeared out of no-where. In the NASM assembler, you can do something like this: 

Your indentation is really off. That loop and everything inside of should be indented because it is inside a function. And, the case statements inside your should, too, be indented. 

This clearly illustrates each step of the game play, and doesn't have a repetitive line right after each one. In fact, you could simplify this even further. If you keep a list of lambdas that show/do each of the different game moves (, , etc.), then you easily loop through the list, calling each lambda. Here's what the list might look like: