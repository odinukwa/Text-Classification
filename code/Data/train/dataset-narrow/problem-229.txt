The Active switch is the one which is the current master of the stack. Priority 15 is the highest priority, and the highest priority will be the master. If the master fails, the next highest priority will be the master. A stack of switches acts like a single switch, and one switch is the master for the stack, but all the switches have the configuration, so if one switch fails, the stack lives on. All the switches are actually working. The switches appear as if they were boards in a single chassis. The ports are referred to as , like . The advantage of a stack is that you can lose a switch in the stack, and the stack still works. It's just like losing a board in a chassis - you lose those ports, but the chassis still works. 

Within the given time period of 1 second, each host will transmit. The circuit will have transmitted up to 10 Mb, and each host will have transmitted up to 1 Mb in that second. That means you can have a maximum number of 10 hosts on the circuit. TDM will divide the full circuit into a number of virtual circuits, and a host has exclusive use of a virtual circuit. If the circuit is 10 Mbps and the virtual circuits are each 1 Mbps, then you can only have 10 hosts using the circuit. 

A current best practice is also to keep a VLAN restricted to a single access switch, and not connect access switches to each other. This will prevent many spanning tree problems. Going further, it is also recommended that you run layer-3 to your access switches, to completely prevent spanning tree problems. In light of that, one very large VLAN across your entire network is really a bad idea. 

There are applications and appliances which can perform load balancing as you described, but it may be for resources other than servers. The load balancer will have a fixed, known IP address, and that is the address which hosts will use to access a resource on the other side of the load balancer. The requesting host will really have no idea which resource behind the load balancer is actually used. The load balancer will maintain session and state for the the duration of each connection. This is true, whether or not SDN is used, because the destination of host traffic to and from the resource is a single device with a single IP address. From the perspective of the network, all the hosts are connecting to a single device. 

You didn't specify the model or NX-OS version, but you should be able to SSH into an inband ethernet interface which has been configured for layer-3 and addressed. You will find the following in the Cisco documentation for 5K, 7K, and 9K Nexus switches, e.g. Cisco Nexus 7000 Series NX-OS Security Configuration Guide: 

Yes, you can. You just need to make sure that you are using compatible SFPs and the correct fiber for the SFP type. 

IPv6 is easy when it comes to this since you aren't really doing subnetting the way IPv4 does. Under normal circumstances, with very few exceptions, you have one subnet size (). All you need to do is be able to count in hexadecimal. An IPv6 address is just a single 128-bit number. There are two parts: the Network ID, and the Interface ID. Each is 64-bits. You only need to concentrate in the Network ID for what you want to do. The text representation of IPv6 is broken into words separated by colons for ease of reading. Some would call this oxymoronic when it comes to big, ugly IPv6 addresses, but try to read one without the colons. In Decimal, you count to . When you get to , the next step is to increment the next higher digit and start over at ( goes to ). The same applies to Hexadecimal, except that you count to ( goes to ). If you want to throw Binary into the mix, each four Binary digits equal one Hexadecimal digit. Hexadecimal <-> Binary is much, much easier than throwing Decimal into the mix the way IPv4 does. I think you are confusing yourself by thinking about blocks. In your example: 

This will errdisable access interfaces receiving BPDUs. It does not affect trunk interfaces unless you use the keyword. When you do this globally, you don't need to worry about configuring and changing individual interfaces as their roles may change. 

Don't confuse the well-know ports used in the destination with the source port your PC uses. Most of the time, your PC will use a random, ethereal port when initiating communication. For instance, when you browse a web page, your PC will use port 80 (well-know port for HTTP) as the destination port, but it will choose its own port (e.g. 53277) for the source port. A router using NAT will maintain a NAT table. When you initiate a connection from inside the NAT (private address) the NAT table will have an entry with the source IP address, source port (this is usually a random, ethereal port), destination IP address, destination IP port, and the random port number your router chooses to use to replace the source port. When traffic comes back to the public IP address and the random port the NAT assigned, the NAT will reverse the process, replacing the public destination address and port with the ones from the NAT table to send back to your inside host. 

The WLC doesn't do routing, and neither do switches. Routing is handled in a router (a layer-3 switch includes a router). You must trunk the VLANs to a router for it to route between the VLANs. VLANs and routing are very fundamental networking. An answer on how to do these is far too broad, and the possible answer far too large, to be answered here. I would strongly suggest that you hire someone who knows what to do to accomplish what you want done. You can connect WLCs and LWAPs like you do with users. In the diagram below, users can connect to any of the switches, as can WLCs and APs. Each switch can have one or more VLANs, or you could have a single switch with one or more VLANs. 

You have some real problems, and it seems to stem from a misunderstanding of how BGP works. Putting a network statement in BGP doesn't guarantee that the prefix will be advertised to neighbors. The exact network must exist in the local routing table before BGP will advertise it. It looks like you are trying to advertise an aggregate address without doing it correctly. If you use the aggregate address command, only one of the networks encompassed by the aggregate address need exist in the routing table. You have a layer-2 connection to SW1, so you cannot simply point a route to the management address of SW1 for networks which are not on the same network as SW1. SW1 would need to be a layer-3 switch, and then you would only have a single routed link between R1 ans SW1. You would also need to either have a static default route on SW1 or run a routing protocol between them. You should not be using static routes for any directly connected networks. That can confuse the router. Also, you cannot have the next hop for a network to be on the network for which you are establishing the route. That doesn't work, and it doesn't make any sense. You should remove the static route: 

Normally, you only tag on trunk ports between networks devices (switch-to-switch or switch-to-router). Most hosts don't understand VLAN tags, so access ports don't get tagged, and you only use one untagged VLAN on an access port. Some servers can understand VLAN tags, and they can be configured to use a trunk port. As @RonTrunk pointed out, you need a router (a layer-3 switch has a router built into it, so as @SleepyMan pointed out, you could use one of those) to route between VLANs. Switches switch on one LAN. VLANs create virtual switches, one for each VLAN. Routers route between networks (VLANs). 

That is because those are the default values. You will find that when doing on Cisco devices, the default values will not show up. Another example of this is to set the time zone to UTC 0. That is the default time zone, and it will not show in the configuration. If you set the time zone to anything else it will be in the configuration that you see. 

IPv6 allows, and often requires, multiple addresses on the same interface. The is more difficult in IPv4, although not always impossible. What it means is that a host configured with multiple addresses on a single interface will receive traffic destined for any of those addresses. From the perspective of a layer-4 protocol, e.g. TCP, the host can have separate connections using the same TCP address (port) on the same interface because the IP addresses are different. There are many reasons that this may be configured. If the networks are different, then someone may want the host to serve different networks, e.g. DHCP. If the networks are the same, then it may be due to the obfuscation of IP addressing by Privacy Extensions and Random Addressing that many OSes now employ. With Cisco, to use multiple IPv4 networks on the same router interface, you must use secondary addressing, and this has some routing protocol limitations. With IPv6, you can simply assign different networks to the same interface, and the routing protocols will work with them all. This doesn't replace the subinterface concept that is often used for VLANs because the different networks will all be on the same layer-2 broadcast domain. 

For inbound traffic, it is unlikely that any links are oversubscribed, and you usually have much more inbound than outbound traffic. You really don't have much control over the traffic from the Internet to your network. If a single request from a computer on your network starts another computer on the Internet sending 1 Gbps of traffic to your network, it can basically monopolize your inbound ISP connection. Someone wanting to disrupt you network can try to overload your incoming network connection in a DoS (Denial of Service) attack. 

A switch will learn a MAC address as soon as a frame enters the switch. It looks at the source address on the frame and adds to, or updates, its MAC address table with the interface where the frame entered the switch. If you connect a host to a switch port, and the host sends no frames, the switch will not learn the host's MAC address. 

You can use one DHCP server for both LANs, but you need to put in a DHCP relay in the router. For Cisco devices, that is the command. You place it on the interface of the LAN without the DHCP server, and you configure scopes for both LANs on the one DHCP server. Assume that the DHCP server is on LAN_1 at and that LAN_2 is connected to the router on . Your DHCP relay would look something like this on R1: 

Devices in different subnets can communicate. That is the purpose of a router. Routers route packets between different networks. Even if devices in different networks are on the same layer-2 broadcast domain, you need a router to let the devices communicate at layer-3. That is because each host will compare the destination layer-3 address and its own layer-3 address and mask to see if they are on the same network. If the destination host is on a different network, the host will send the packets in layer-2 frames to its configured gateway (router). The host must assume that the destination network could be across the world from its network, and the gateway is the host on the network that knows how to forward packets toward the destination network. 

You need to use one or both of the last two methods for a router to learn about networks not directly connected to it. The PC can ping a host, e.g. its router, on the same LAN, and it will have the router as its gateway, so it can reach any networks about which its router knows (the router's directly connected routes). A different router doesn't know about the network where the PC is attached, so the router has no way to know to send that traffic to the router for that network. 

This design doesn't follow best practices. Since each switch has two connections, both connections should be to the layer above. A best practice is to never connect access switches to each other. You also want to pay attention to the oversubscription ratio (maximum 20:1 for access to distribution, and maximum 4:1 for distribution to backbone). 

Even with Cisco MLS, each port is defined as a layer-2 switch port (with the command) or a layer-3 router port (with the command). You can have virtual ports call SVIs for the VLANs of which the layer-2 switch ports are members. In essence, a layer-3 switch is a layer-2 switch with built-in layer-3 routing. Remember that it is still a layer-2 switch, and the routing features may fall short of what you get with a dedicated router. You will also find hardware not normally associated with LAN switching (e.g., WAN ports) unavailable for most layer-3 switches. Cisco has moved routing features in hardware (ASICs) to ease the processor and memory requirements normally associated with routing. A simple search of the Internet for turns up a lot of hits, including Multilayer Switching Overview: 

Based on the conversation we had in chat, I really don't see the problem. There are many cases where you will have multiple routers with interfaces in the same network. You just connect them via layer-2: 

Edit: Based on your comment, it seems you need to step back and understand the functions of the network devices. Routers route packets between different networks, so traffic is only sent to a router if it needs to get to a different network. If the source and destination hosts are on different networks, the traffic will be routed between the networks by a router. Bridges, including switches and WAPs, switch frames on the same network. If the source and destination hosts are on the same network, the traffic will not go through a router. The traffic may be switched by a bridge (switch, WAP, etc.). 

Routing seems to be working from Computer A to Computer B, but not the other way around. Ping is bidirectional, and Computer B is getting the ping request from Computer A, but Computer B is unable to reply because it has no route to Computer A. 

If your cabling got wet in the flood, there is a strong possibility that it is ruined. Indoor UTP cabling is not waterproof, and it can easily be damaged by moisture. Water changes the dielectric properties of the cabling, and modern networking uses very high frequencies that need strict tolerances. Other than that, your applications, consumer-grade devices, and host configurations are all off-topic here. 

You are comparing apples and oranges (layer-2 vs. layer-3). You only use NAT if you really have no other option because of lack of IPv4 addresses, and that has nothing to do with layer-2 LAN connectivity. Switching connects hosts at layer-2, while NAT is a kludge that is designed to extend IPv4 layer-3 addresses until IPv6 can become ubiquitous. NAT breaks the IP promise of unique addresses for every host and end-to-end connectivity. Edit: 

RFC 3022, Traditional IP Network Address Translator (Traditional NAT) goes into more detail. With NAPT, the device performing the NAT must look at the UDP, TCP, and ICMP datagrams, and it must modify those, too. That involves a lot of processing, and it is resource intensive. NAPT really only works for UDP, TCP and ICMP. Other transport protocols have a problem with NAPT, and some application-layer protocols can break with NAPT. IP was conceived as an end-to-end protocol, where each host has a unique address, and NAPT breaks the IP model.