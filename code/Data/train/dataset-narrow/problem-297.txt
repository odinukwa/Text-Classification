As I have highlighted in bold, conwind and cwnd both mean Congestion Window. If you'd like to learn more about TCP/IP, I can't recommend TCP/IP Guide enough. It is an excellent book, and free too. If you do get good use out of it though I suggest you purchase a copy of it too as a "thank you" to the author. 

command on all of the interfaces. As the interfaces are currently configured as trunks and you've got PC's connected to those interfaces, the PC traffic will be hitting the switch on the native VLAN (VLAN 1) because they're not tagging their packets. You will be able to able to confirm this using one or both of these commands: 

Install Angry IP (or any other IP scanner) on an existing server which has an IP address. Find a spare IP on any subnet and assign it to a spare PC or server. You can then use this PC/server to perfom scans. 

Yes, this is possible. You need a device (e.g router, firewall, virtual appliance, etc) that does stateful firewalling. The way in which it works is that it watches traffic that flows from the "trusted" zone to the "untrusted" zone. When "untrusted" devices send traffic in response to "trusted" devices, the firewall will let the traffic through. However, if "untrusted" devices try to initiate a connection to "trusted" devices, the firewall will block it. I wrote a blog post about this some time ago which demonstrated how stateful packet inspection (SPI) works. 

In regards to graphing the information every 5 or 10 seconds, you could use monitoring software like Cacti to achieve this. References: 

The last hop to receive the packet before it hits the TTL limit would see the packet in its normal form. Once this hop (router/switch/firewall/etc) realises that the TTL has been reached, it will drop the packet. Therefore to view this packet before it is dropped you would need to capture the inbound traffic on the last hop, or SPAN (port mirror) it in order to view what it looked like before it was dropped. If the last hop happens to be a Cisco router you could use the Embedded Packet Capture to capture the traffic. 

Given that you're using a layer 2 switch I'd say the two PCs your pinging between are on different layer 3 networks and therefore need to send their data to the SonicWall which is then performing the routing between the networks and monitoring the traffic at the same time. 

The last command depends on what version of IOS you're using. If you need additional information I have just published a blog post describing how to achieve what you're asking - $URL$ By the way, what exactly does the event/log say? It should really give you all the information you need. e.g if it were a MAC flap, it should tell you the ports its flapping between. If it is a physical port flap, it should tell you the exact port number. 

You're right - it is like comparing apples and oranges :) For exmaple, RIP's maximum metric is 15 but doesn't mean anything when compared to an EIGRP metric of 30720. In regards to the EIGRP metric being so high - part of the reason is because EIGRP multiplies its metric by 256 in order to be backward compatible with IGRP (EIGRP's predecessor). As per this Wikipedia entry: 

If you've got access to devices like routers and switches, or a host on the same subnet as the mystery device you can easily identify it regardless of whether it has a firewall or not. Using the above mentioned devices you could monitor the VLAN's traffic and therefore identify all of the hosts on it without having to probe any of them with tools like nmap. The reason being that the mystery host would eventually send data and would therefore reveal its MAC & IP address in the process so you now know it exists even though it didn't respond to your earlier probes. Further to this, during your monitoring you would be able to keep tabs on what the mystery user is doing by viewing the contents of their network traffic (provided that it's not encrypted). This could then assist you in identifying who the user is. For example, if they use telnet you could get their username (and password, though passwords are best left alone). If the traffic was encrypted, you would still be able to view the destination IP address(es) of the sites they're visiting which you could then look up. Finally, you could also see what protocols they're using by viewing the captured traffic as well (provided that the software you're using to view the capture e.g Wireshark, has a decoder for the protocol(s) used). This shouldn't be a problem unless the mystery user has custom written the protocol. 

First off, recognize that TCP/IP Illustrated...while a great book (I have a copy as well), is quite dated at this point. In modern networking, talking about IPv4 address classes as anything other than an historical footnote is going to get you into trouble really quickly. So, think of the example this way: A site is allocated 128.32.0.0/16, and the site administrator assigns network numbers* within the site based on a 24-bit mask, or 255.255.255.0 in dotted-quad notation. Note that the internal networks need not all use the same network mask length, but we'll stick with them for this example. A 24-bit netmask includes the first 3 octets in dotted-quad notation in the network portion of the IP address, so any set of IP addresses that have the first 3 octets in common are part of the same network. This means that 128.32.0.x is a network, 128.32.1.x is a network, 128.32.2.x is a network, and so on, because all IP addresses in each network with different values of "x" still have the first 3 octets in common which is what the 24-bit netmask signifies. Note that, in the example, 128.32.0.0/16 is never actually assigned as a /16 network to any network segment, only various networks with 24-bit network masks are. 

A closed port is a port that doesn't have any software listening on it, so an attempt to make a connection to that port on that system will result in the system sending back a TCP RST packet. A filtered port, on the other hand is typically a port that is blocked by a firewall in the network path, so an attempt to make a connection to that port on that system will result in nothing coming back at all...not even a TCP RST...so a connection attempt will sit there until TCP times out the attempt to connect. 

Don't have much experience with ASA's, so I can't really answer question #1. Be careful with your assumptions about ECMP, however. Different equipment handles ECMP differently. I've seen ECMP implementations from the granularity of "per-destination-prefix" load-balancing (which almost isn't ECMP at all), to "per-packet" load-balancing. You're going to have to get a bit more sophisticated with your routing handling to make this work. Look for the DCI interconnect information that ioshints has published, that should help you figure out how you might design your network to handle this. Sorry I don't have a URL close to hand on this. 

First off, I would dispute the assertion that some others have made that OSPF converges faster than BGP, but more on that later. To answer the OP question first. You want both. iBGP is designed to run between loopback interfaces on routers and it doesn't (at least without tweaking and turning some knobs) change any attributes (which includes next-hop) of the routes that it's advertising. So what are the implications of that? Let's call your border routers router A, and router B and your for-argument's-sake three access routers router 1, router 2, and router 3. Router's A and B get full Internet feeds from your upstreams, with next-hop set to the upstream's interface address on the interconnecting link. When those routes get passed on via iBGP, again, unless you tweak, the next-hop of the route that routers 1, 2, and 3 receive is still the IP address on the far side of that interconnect link. Routers will do a recursive lookup to find the path to that IP address and then use that next-hop when the route is installed in the forwarding table. "But," you say, "I'll use next-hop self." See the next paragraph for how this works out. "But," you may also say, "I'm only advertising defaults down to routers 1, 2, and 3." OK, but that default route has to come from somewhere...if its an already existing default (say a static) it'll have a next-hop that'll get used. If its a generated default...it'll probably be using the loopback address that the iBGP session is running on as the next-hop. Again, this won't be seen as an interface, or directly connected route in routers 1, 2, and 3, so they'll still have to do a recursive lookup to find it. So, you need some sort of IGP running, such as OSPF, IS-IS, or EIGRP, or even just a lot of pain-in-the-backside-to-manage statics, for the reachability to work for the recursive lookups. "But," you say again, "I'll run the iBGP sessions on the interface addresses rather than the loopbacks. OK, but now your BGP peering session is dependent on the interface being "up" to work. So, for example, if the interface between router 1 and router A goes down, so does the iBGP peering session running on that interface. But router 1 still has the ability to send traffic to router A, it just has to do it via router B. So, you want the iBGP session to stay up, even when those interfaces go down, because your ultimate next-hop is still over yonder, and over yonder is still reachable through another path...OSPF (I use OSPF, but you can sub IS-IS and EIGRP anywhere you see OSPF here) will figure out that other internal path and take care of building the forwarding table correctly in that recursive lookup. So, yes, you can probably tweak enough knobs and get a pure iBGP setup working without any IGP setup...but please don't...it'll be a lot of work, it'll almost certainly be flakey. Do yourself a favor and turn on OSPF, or IS-IS, or even EIGRP if you're a pure Cisco shop (but please consider whether you really want to accept that vendor lock-in if you do...consider future potential decisions to use a different vendor's gear...even if only to try to keep Cisco honest on pricing with you). Turn it on for all of your interfaces between your routers, and also set it up on your upstream connection with the passive setting, and probably on your downstreams from your access routers with the passive setting as well. Then set up your iBGP peerings between your loopbacks. Consider route reflectors (probably on routers A and B) to cut down the configuration effort required...it makes sense at about 5 routers to start doing that. It really is the sanest way to do this. Now, to protocol convergence speeds. Most people think BGP is slow and OSPF (or whatever) is fast because of the common use cases for these protocols. People typically pull full Internet, or at least a significant fraction thereof, into BGP, while only handling internal routes in OSPF (10s to 100s, maybe into the low thousands of routes). So, let's assume you're pulling half of the Internet routes into BGP...try building an OSPF area with 250,000+ routes and let me know how that goes for you. Let's see if that converges faster than BGP does...or ever unless you have a really beefy control plane on your routers. BGP, for a given situation, can frequently converge, or reconverge, faster than OSPF and others, at least depending on how you measure it. If you include OSPF's neighbor discovery on a broadcast network, BGP is almost certain to win for a similar mix of routes. The other difference is that BGP will start putting routes in routing and forwarding tables before its finished (re)converging, which can be a benefit, while OSPF implementations will almost certainly wait until the very end before it starts putting routes in routing and forwarding tables. Sometimes having a partial route set converged can be useful. Sometimes not. 

If you feel that way you should try to find the answer yourself. The first result you get when Googling "tcp cwnd" is this Wikipedia page which states: 

It's impossible to say to give you a definitive answer. A router is like a computer. If you throw a big workload at a cheap, home grade one you're likely to hit its limits. However, if you use a suitably sized one it will have no issues doing what you need. In other words although your router doesn't seem to be able to handle your applications load it does not mean that everyone else's router would struggle too. 

Because it's a Layer 2 network. MAC addresses will be learned on every layer 2 device between the source and destination devices. If you're interested in finding out which MAC address belongs to which device, you can look up the OUI of MAC addresses in your output. For example, I can see you've got a few Cisco, Linksys and Netgear devices. 

As waza-ari pointed out, AS Prepend will do the trick. As to whether it's what other ISPs do, I cannot answer that question unfortunately. I labbed up your AS prepend query using the topology below: 

If this is an absolute requirement which cannot be changed because of limitations on the ISP's side, your only option would be to install a router between the modem and a switch. Once you have done that, you can configure the router to NAT all user traffic which is destined for non-local networks. In other words, your internal network would receive IP addresses from one range (e.g 192.168.0.0/24), but once they send their traffic through the router, their source IP addresses will be changed to 192.168.128.200. This results in the modem allowing the traffic through. When the return traffic comes in the modem will pass the traffic to the router and the router will "un-NAT" it and pass it to the host who originally requested the traffic. 

This is spot on. There are 32 bits in an IP address. As you've got a /30 that means 30 of those bits are "reserved" network bits. As you know, you're not "allowed" to change network bits otherwise you're more than likely end up with IP address conflicts. This therefore leaves you with 2 "Host" bits which you are "allowed" to play with. As you correctly point out, these 2 bits result in 4 addresses. However, when we use the 2 ^ n - 2 formula to determine the number of usable host addresses we're left with two addresses. As you already know, we subtract 2 in this formula to account for the first and last addresses in the subnet as they are the network and broadcast addresses respectively and cannot be assigned to a host. Now if I understand your question correctly you're asking can a /30 be used to create a couple of subnets. To calculate the number of subnets we'll get we need to use a formula which differs slightly from the one mentioned above - this formula is 2 ^ n (note that we do not subtract 2 here). Let's say we use the two host bits in this calculation - 2 ^ 2 = 4 subnets. However, as this uses all of the host bits we don't have any left to allocate to the wifi routers. Because of this it would be more appropriate to use only 1 host bit for the subnet and leave the other bit for the hosts. Therefore our subnet calculation would look like this: 2 ^ 1 = 2 subnets. However, we hit an issue here too. As as we've only got one host bit left we won't have any usable addresses because 2 ^ 1 - 2 = 0. Therefore the answer is no, you cannot subnet a /30. Note: OK I may be fibbing a little here... there are some situations where you can use /31 and even /32 addresses (for example, loopback interfaces and point to point links) but they're another kettle of fish. Now if you were asking about a /29 address instead, then the answer would be yes, you can use this network address to create two subnets with a couple of hosts each. Let's look at why: