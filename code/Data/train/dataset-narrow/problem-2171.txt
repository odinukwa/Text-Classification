12V can damage almost any modern CMOS chip. Typical tolerance for USB designs is 5V or less. So 12V is pretty damaging. How bad the damage is? It depends on which part of USB port was exposed, VBUS, GND, or data. None of common laptops have any overvoltage protection; at most, they have protection against short electrostatic discharge pulses (ESD, human and machine discharge models), but not from continuous (more than few milliseconds) 12V exposure. 

When a PC is turned off (soft-off), most desktop systems will have all USB ports in "hot standby", keeping VBUS voltage ON. This power comes from PSU standby voltage rails, and is used to wake the computer up from mice and keyboards. When a USB host goes off or goes asleep, the USB traffic ceases as well. USB has defined a special feature for this case called SUSPEND. When USB active traffic stops (start of frames are no longer there), every USB device is supposed to go into SUSPEND. It takes 3 ms to go into suspend state after the last active USB packet. In suspend state every USB device is supposed to enter then a "low-power" state and consume no more than 500 uA from VBUS, or less than 2.5 mW of power [excluding USB hubs, which can have 5X more]. There is a corresponding RESUME mechanism, and REMOTE WAKE-UP mechanism within USB framework. When a memory stick experiences the SUSPEND situation, it goes into low-power state (500uA limit). In most bus-powered situations (when power comes from VBUS) with memory modules the consumption of flash memory chips would exceed the 2.5 mW threshold, so USB-flash bridges would power the memory chip completely off, and lose all configuration data. Then the RESUME happens, system software goes all over of re-discovery of storage volumes. And yes, because of this extra power drain most laptops have deployed "cold SUSPEND" on USB ports and turn the VBUS power completely OFF on some or all USB ports. 

Please remember that these specifications are Marketing specifications, not technical. Whichever team was charged with responsibility for product marketing, they use whatever terms they believe are right. The relationship between the provided parameters is actually consistent. Let's take an example of i7-4790K. 

PCIe 16x has 16 lanes for data per a device (card), running in parallel. Each lane is running at 2.5Gbps/5/8/16Gbps (depending on implemented version of the interface, v1x - v4x). It makes the throughput of the latest PCIe 16x v.4.0 interface effectively at 256Gbps. Thunderbolt-3 is designed with two bi-directional lanes for up to 10 Gbits/s raw rate per lane, with up to total 20 Gbps full duplex over two lanes in parallel, and 40Gbps one-way for video display applications. USB Type-C is not "faster" than USB3.0. However, USB3.1 Gen2 data rate (10Gbps) is faster than Gen1 speed (5Gbps), all over a single full-duplex data lane. All these rates can be implemented over Type-C connector, including all USB2.0 legacy rates. So it is incorrect to equate "Type-C" with USB3.1 Gen2 speed alone. USB3 uses only one lane. So you naturally have 256 > 20 >10 >5 for PCIe16x ->Thunderbolt3 ->USB3.1_Gen2 -> Gen1 lineup of interfaces. What limits the data transfer rate over a single lane/cable? The maximum data transfer rate depends on quality/robustness of signal encoding in the channel (pre-emphasis and eqilization, link training, 8B/10B or 128b/132b encoding, etc.), and amount of effort devoted to quality of cable interconnect (uniformity of transmission lines, low signal loss, low cross-talk, and interface impedance matching across connectors). This means cost. For the PCIe all transmission line matching can be done at simulation level within a single mainboard with well-characterized slot connectors, all under control of one developer. With shorter trace length and standardized matched layout of add-on cards, this allows for faster data rate per channel, currently at 16Gbps (GT/s). When longer distances are involved, and third-party manufacturers (of cables) are involved, resulting reliability of transmission on realistic cable-connector combinations decreases, and the data rates have to be decreased. 

The Gigabyte 880GM-USB-3 motherboard is based on AMD 700-series chipset, which is nearly a 10 years-old design. The board likely uses a third-party USB 3.0 chip for USB 3 functionality. Ten years ago there were no functional USB 3.0 at all, and there were various odd ideas on how to blend USB 2.0 ports numbering into USB 3.0 port numbers, so massive confusion in architecture of drivers existed. My advice would be to get a modern board and do not waste your time debugging earlier prototypes of USB 3.0. Actually, asking generically if USB2 devices are compatible with USB3 or not doesn't make much sense, because every USB3 port is the old USB 2.0 port with extra USB3 Tx and Rx pair of wires on top, literally. They are run by nearly totally separate controllers. The USB 3-style connect detection is supposed to happen first, which is based on presence of terminated links. The host transmitter is supposed to send special pulses to detect the line load. If load (USB3 device) is not detected, USB3 should shut off completely, and listen to pull-ups on old USB2 wires. Then follow the standard USB2 procedures. This sounds as fail-proof, but apparently older USB3 designs had implemented the process in somehow deficient way. A USB2 device has no idea about any extra wires or any connect detect procedures, and fires the old-style USB2 connect signaling right away, or with some delay, depending on device. But the old Renesas/NEC host controller apparently doesn't like the premature connect on USB2 lines, and apparently fails to properly report the connect event to host system registers. 

The Z170 Intel chipset was a transitional design, one of the first to have only USB 3.0 xHCI controller, and lacks the more traditional EHCI host controller. Apparently there are some issues, so the most recent standard drivers for xHCI might have some compatibility problems. ASUS recommends to try a special hack called "XHCI hand-off" in BIOS, to enable it. Make sure you install the right driver for your hardware configuration. There could be a USB 3.0 controller by Asmedia, as the ASUS driver list suggests. Also check with USBTreeview utility what the actual USB configuration is, it might hint you where the problem is. 

From the description, it sounds like you have an issue with +5VSB (Stand-By) rail in your new Power Supply. It looks like this primary power rail can't work without minimal load. Normally this rail must be stable with zero load, but it looks like you hit an exception. PC mainboards usually have the USB VBUS fed directly from the +5VSB, such that your phone provides this minimal load. You need to check if the +5VSB is there when you attach the PC cord and flip the PS power switch (if present) on. Without +5VSB the computer won't start. 

Windows would disable a USB port only in the case of catastrophic failure to communicate, when a device would fail to respond with proper protocol after three attempts of a transaction (usually set in hardware). If the port error occurs, the controller will transition to "disabled state", See Section 11.5.1 of USB 2.0 Specifications. Then the host software will try to reset the port if it is still connected (maintains D+ = high), and if the reset doesn't recover the communication three or four times, the port/device will be assumed as dead, and no more attempts will be made. In case of "surprise removal" of a device the scenario is different: the port will sense a "disconnect" event. If in HS mode, the termination will be lost, and dual-amplitude reflection will set the disconnect flag during elongated EOP phase of SOF packet. In LS/FS mode the port has a timer that detects the state of "single-ended zero", aka "SE0". If the cable/device is gone, the SE0 line state will stay for longer than 2.5 us, and again the disconnect status will be reported to host. See Section 11.5.2. If a disconnect is detected, the port will automatically transition into "disconnected state". Then, if the pull-up is really lost due to physical disconnect, the port will time-out into "disabled" state. Since there should be a "disconnect" interrupt" instead of "port error/transaction error" interrupt, the host won't do any attempts to communicate with this port. See Figure 11-10 for the downstream port state diagram, and following descriptions of the states. 

The drive failure after cable disconnect from the drive side could be of a simple electro-mechanical nature. The micro-USB3.0 connectors are pretty mechanically weak, especially in shroud/shield mounting area, while the cable overmold is usually very stiff. Moving out the cable might happen in a bending manner, and solder bonds between the connector pins and internal PCB might develop cracks, preventing the USB link from proper detection of Rx termination in one or another link direction. But this kind of failure usually develops over time, and signs of "connection flakiness" should be noticeable before the final failure. Regarding electricals of disconnect from one or other end of a cable, unfortunately there are differences, but they would more likely cause a trouble with software end on the host, and unlikely kill the HDD. In general, unplugging a cable (possibly in the middle of essential directory management operation) is called "surprise disconnect". Due to uncountable variety of conditions at the moment of disconnect, USB specifications do not regulate this event, and system protection and recovery is "implementation-specific". In other words, all bets are off with the surprise disconnect. 

see, section 7.2.1.1. This means that the hub must have "high-side" power switches, and hub controller IC must have means to turn these switches on/off. If a USB host sends USB command to reset its port with hub attached, the hub must turn VBUS power OFF on all downstream ports. Unfortunately, vast majority of "el-cheapo" hub manufacturers ignore this mandatory requirement, and have VBUS power derived directly from host power, from the cable. It is very unlikely that you can find the "correct hub" on store shelves. I would say "never". This leads us to Case_2. CASE_2: You have a junk bus-powered hub with "captive cable", and it has an illegal ganged non-controllable power to its downstream ports. In this case you must have a computer that does have the power switching capability on its ports. This might be on many laptops, and maybe on few high-end industrial-grade desktop PC. Then, if you manage to perform internal port disable function on host controller, VBUS will be disabled, and hub power will be gone. Unfortunately this is very unlikely, since all ports are controlled by USB driver, which won't stop and will proceed with port enable, USB detection and enumeration, so VBUS will be enabled. So this is mostly a theoretical option. CASE_3: Yet another way to disable VBUS on downstream ports of a hub is to have a version of self-powered hub (with power coming from AC-DC adapter) that has built-in downstream power switches, usually with current-limiting function. See Section 7.2.1.2 and Figure 7-43 of USB 2.0 Specifications, and also Section 11.11. Again, a self-powered hub is allowed not to have these expensive switch ICs, so vast majority of hub manufacturers skip this option, and put no control over downstream VBUS. Funny, the USB speculations still have a clause saying, 

Ok, technically you you can implement the block you call "Adapter #2", but it cannot be a simple adapter since you will need to serve the hub as a host. Therefore the "Adapter #2" must be a sort of embedded computer, with full-blown USB host service. It is called sometimes as "bridge". Technically you can write some transport protocol across this bridge, with custom host driver, and channel USB requests and responses across. Now the problem is that if you want to utilize the standard USB stack in your server, you will need to provide low-level protocol responses within 1.7us time frame, to maintain USB framework. In essence, the trouble is that while TCP/IP protocol can tolerate very long responses to packets, the USB must receive ACKs/NAKs in 1.7us, otherwise the host will drop the port. More, I am afraid that you will need to design a special USB controller in that Adapter-bridge, since the normal USB controller handles low level USB protocol locally in hardware, so the bridge will not have any ability to relay these responses across the Ethernet link. In conclusion, it is practically impossible to make what you ask. 

What is the power capability of ports on your hub. Some hubs have built-in power switches with certain pre-set limits (which are subject to manufacturing variations), some have no control or protection other that "resettable polyfuses" that may have marginal threshold. You can do some experiments with your hub by momentarily shorting VBUS to GND (red wire with black wire in USB cable with, say, 5-Ohm resistor, to determine the port capability. The hard drive of 3TB size is definitely not a SSD. Mechanical drives have a spin-up current which can significantly exceed the USB port power capability. I have seen older drives that would normally consume 700-800mA during intensive RW operation, so USB3.0 ports should be fine. However, the spin-up current was in excess of 2 (!) Amps for a good portion of a second, which would cause port overcurrent and failure to connect. 

You don't need to reduce anything. The headset is designed with a particular internal battery that has particular charging specifications, and its circuitry will not take more than whatever it is designed for (450mA in your case), no matter how capable the 5V source is, 1A or 10A or 30A. FYI, USB cables do not "demand" anything. At most, if they have Type-C connector, they can inform the power provider and consumer about its wire gauge (current carrying capability). But you will be had pressed to find any of them yet. 

The part inside the black circle is a connector (of U.FL type) with a built-in switch. When a properly mated part is plugged in, the switch disconnect the signal path from internal PCB load/path, and re-route it into the attached cable. It is mostly used for debug/calibration/certification purposes. To use the U.FL non-populated spot, it is a challenge, because the connector is surrounded with non-populated L-R-C tuned network, and values of this network are unknown, unless you have full design documents. More, changing on-board RF path will likely require some configuration changes at firmware level, so your project has a very small chance to succeed. COMMENT: The design apparently uses a printed circuit antenna, in A_R1 area. The most promising path is to use WS1 connector-switch with external antenna. However, this is still a challenge, since all impedance matching and antenna tuning will be required. Without good RF instruments it will be difficult. 

Wiring USB ports "directly" carries certain risks, especially for USB 3.x connections. The thing is that USB 3.x channels are fairly sensitive to signal attenuation and deterioration along the longer cables. The no-hub headers are essentially passive extenders, and usually degrade signal quality quite significantly, up to the point that certain percentage of devices that were run successfully from backside ports might behave flaky or fail to connect in the front-panel extender. Please keep in mind than when a reputable OEM manufacturer uses passive cables to front panel in their computers, it may use two different controller drivers, one for back-ports, and another for front ports. Signal parameters in USB 3.0 PHYs usually can be tweaked at hardware level to provide different amplitude and pre-emphasis levels, so the extra cable loss can be well compensated, providing nearly perfect signal in accord with USB requirements. And receiver parameters (continuous time linear equalizer, CTLE) can be tweaked as well. So the differently-placed ports can have different PHY setups using two different drivers, and OEM has resources tweak drivers and BUIS/UEFI frimware to meet USB signal quality standards. When you make your own cables, you don't have a luxury of this adjustment. Therefore, it is much safer to get an active front-panel with embedded hub than use a questionable quality extender.