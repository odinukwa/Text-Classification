But what about for example the automaton with three states $q_0, q_1, q_2$, where $q_0$ is initial, $q_1$ and $q_2$ are both final and transitions \begin{align*} q_0 & \quad \mathrel{\mathop{\rightarrow}^{a}} \quad q_1 \\ q_0 & \quad \mathrel{\mathop{\rightarrow}^{a}} \quad q_2. \end{align*} This is not deterministic surely, but it is trim, it is locally co-deterministic but it is not globally co-deterministic as $a$ is the label of two final paths? 

The notions are from this book. Some thoughts of me, but I am not sure about them as they seem to use properties not mentioned in the book. If $\xi$ is accepted by the Müller automaton with $T := \operatorname{Inf}_{\mathcal A}(\xi)$, then by the property we have some $(u,v) \in \mbox{Inf}_{\mathcal B}(\xi)$ such that $\underline v = T$. Set $k := |u|$, then $(u,v) \in F_k$. We have to show that $\operatorname{Inf}_{\mathcal B}(\xi) \cap E_k = \emptyset$. I assume that we have two properties of the states in $\mbox{Inf}_{\mathcal B}(\xi)$, namely 

I see that for the notions of determinism both variants are equivalent (for finite and for infinite words), but for this equivalence it is crucial that determinism also requires exactly one initial state, but in general we have more than one final state. 

Lets give some obvious way to recover one "factor" of the product automaton. If $\mathcal A_i = (Q_i, \delta_i, q_{0i}, F_i), i = 1,2$ and $\mathcal A = \mathcal A_1 \times \mathcal A_2$ denotes the product automaton, then if we define $$ \pi_1( (q, q') ) := q $$ i.e. just forgeting about $\mathcal A_2$, or projecting onto the second component, we have $Q_1 = \pi(Q_1\times Q_2)$, also if we want to know $\delta_1(q,x)$ pick some $q' \in Q_2$ and compute in the product automaton $\pi((\delta_1(q,x), \delta_2(q', x)) = \delta_1(q,x)$, hence we can also recover the transition in $\mathcal A_1$. So if we know that an automaton is a cartesian (or external) product automaton, we can recover the factors easily. But I guess this is not what you have in mind regarding your other questions. Two questions arise here (in the following by automaton isomorphism I mean isomorphic as state graph, i.e. with no respect to initial or final states, as you said the language is not so much a concern here): 1) Given any automaton that is isomorphic to a product automaton (i.e. could be decomposed in some way) of some finite number of automata, is this decomposition essentially unique? (given that the factors could not be decomposed further, for otherwise obviously not). More presicely if $$ \mathcal A_1 \times \ldots \times \mathcal A_k \cong \mathcal B_1 \times \ldots \times \mathcal B_l $$ for indecomposable automata $\mathcal A_i, \mathcal B_j$ does this imply $k = l$ and $\mathcal A_i \cong \mathcal B_{\pi(i)}$ for some reordering $\pi : \{1,\ldots k \}\to \{1,\ldots k \}$. I conjecture that to be true, but I have no proof yet. 2) Given any two automata $\mathcal A, \mathcal B$, does there exists a third automaton $\mathcal C$ such that $\mathcal A = \mathcal B \times \mathcal C$. It is easy to derive necessary conditions for that to be the case, but I do not see any easy sufficient criterions for some automaton to be a factor of another. But lets generalise our initial example slightly, note that $$ \pi_1( (\delta_1(q, x), \delta_2(q', x)) = \delta_1(q,x) = \delta_1(\pi_1(q,q'), x) $$ for all $q \in Q_1, q' \in Q_2$ and hence $\pi$ is a state graph homomorphism of $\mathcal A_1 \times \mathcal A_2$ onto $\mathcal A_2$. So we define: 

I do not understand what he wants to say here. My ideas are, that with computable functions he always means total computable functions (otherwise the term property would not make much sense, and how I interpret the statemets). So, a property $\psi(x)$ is axiomatic if there exists some total computable function $f : \mathbb N \to \mathbb N$ such that $\psi(x)$ holds iff $x \in f(\mathbb N)$. So as $f$ is computable, it is given by some set of recursive equations (the axioms), and by totality we can successively "derive" the equations $f(1) = ..., f(2) = ..., f(3) = ...$ and so on, and if we find some equation of the form $f(k) = x$ we know that $\psi(x)$ is true, and if not than we will not find such an equation (or a "proof" of this equation). But now to his other characterisation: A property $\psi$ is axiomatic iff there is a computable property $\phi$ of two positive integers, such that $\psi(x)$ is true if and only if there is a positive integer $y$ such that $\phi(x,y)$ is true. For one direction, I guess what he means is the property that $\phi(x,y)$ is true iff $f(x) = y$, and this surely is computable if $f$ is computable. But just given such a property, how can $f : \mathbb N \to \mathbb N$ look like? Maybe he meant partial computable functions, then for each $x$ we can search for an $y$ which makes $\phi(x,y)$ true, and take some as an image, but then my first interpretation would not make any sense... So, could someone explain what Turing meant here? 

A language $L \subseteq X^*$ is non-counting of order $n > 0$ iff for all $u,v, w \in X^*$ $$ uv^nw \in L \Leftrightarrow uv^{n+1} w \in L. $$ A $\omega$-language (set of infinite sequences) $L \subseteq X^{\omega}$ is non-counting of order $n > 0 $ iff for all $u,v \in X^*, \eta \in X^{\omega}$ $$ uv^{n}\eta \in L \Leftrightarrow uv^{n+1} \eta \in L. $$ When talking about languages over finite words, i.e. subsets $L$ of $X^*$ every regular, noncounting languages of order $n > 0$ fullfills the following property: Let $u,v \in X^*$ with $$ P_n(u) = P_n(v), I_n(u) = I_n(v), S_n(u) = S_n(v) $$ and $u \in L$ (where $P_n, S_n, I_n$ denote the prefix, suffix and infixes of length $n$) then also $v \in L$, meaning if two words coincide in their prefix, suffix and infixes of fixed length $n > 0$ then they are either both in $L$ or both not in $L$. Now when considering subsets of infinite words (and so just prefix and infixes), i.e. $L \subseteq X^{\mathbb N}$, then this does not hold any longer. For consider $L = X^* 0^{\omega}$, then $L$ is regular and non-counting for each $n > 0$. Fix some $n > 0$ and consider $$ \xi = 0^n1^n0^{\omega} \quad \mbox{ and } \quad \eta = 0^n1^n0^n1^{\omega} $$ then $P_n(\xi) = P_n(\eta)$ and $I_n(\xi) = I_n(\eta)$ but $\xi \in L$ and $\eta\notin L$. The space $X^{\omega}$ is naturally topologized as the Cantor space, i.e. the space with the common-prefix-metric, or equivalently generated by the basis $v\cdot X^{\omega}$, $v \in X^*$. Now the set $L = X^* 0^{\omega}$ is not closed in Cantor space, for example $1^n0^{\omega}$ is in $L$, but its limit $1^{\omega}$ is not in $L$. So I conjecture that if $L$ is closed then the property from finite sets also hold for infinite sequences, i.e. if $L$ is regular and non-counting, then if two words coinside in their prefix and infixes of some specified length, then they are either both in $L$ or not both. A language $L$ is closed in Cantor space iff if it has the property that if $\xi$ is such that every prefix of $\xi$ is the prefix of some words from $L$, then $\xi \in L$. I conjecture that for closed sets $L$, that if $L$ is regular and non-counting, then membership could be decided by comparing prefix and infixes, but I am stuck with the proof, so any hints or suggestions for me? EDIT: There is a certain problem with the way it is stated, instead of locally testable use star-free, and instead of just presuppose a set to be closed I will presuppose it to be open or closed, so that the proposition is stable under complementation (which are the star-free and non-countable languages), see the comments. 

Let $X$ be a finite alphabet. Given two words $u, v \in X^{\ast}$ the shuffle operator is defined to be $$ u || v := \{ u_1 v_1 u_2 v_2 \ldots u_n v_n : 1 \le i \le n, u_i, v_i \in X^{\ast}, u = u_1 \ldots u_n, v = v_1 \ldots v_n \} $$ i.e. it is the set of all "interlaced" strings (notice its signature $X^{\ast}\times X^{\ast}\to 2^{X^{\ast}}$). For example $$ ab || c = \{ cab, acb, abc \}. $$ There is also an inductive definition \begin{align*} \varepsilon || u & = u || \varepsilon = \{u\} \\ au || bv & = a(u || bv) \cup b(au || v). \end{align*} This operator could be extended to languages. Now, for a language $L \subseteq X^{\ast}$ denote by $\mbox{perm}(L)$ the set of all permutations of words from $L$, for example $\mbox{perm}(\{ abc \}) = \{ abc, bac, acb, cba, cab, bca \}$. Now we have the inductive definition for $x \in X$ and $u \in X^{\ast}$ \begin{align*} \mbox{perm}(\varepsilon) & = \{\varepsilon\} \\ \mbox{perm}(xu) & = x || \mbox{perm}(u). \end{align*} which defines it for words, and then extended to languages. Now instead of all permutations, just consider the rotations, or the cyclic permutations, i.e. for $u \in X^{\ast}$ $$ \mbox{cycle}(L) := \{ vu : uv \in L\}. $$ For example $\mbox{cycle}(\{abc\}) = \{abc, bca, cab\}$. And similar the rotations and reflections, where if we define $\mbox{reverse}(u) = u_n \ldots u_1$ for $u = u_1 \ldots u_n$ with $u_i \in X$, then for $L \subset X^{\ast}$ the smallest set, called $\mbox{di}(L)$ such that $$ u \in \mbox{di}(L) \Rightarrow \mbox{cycle}(\{u\})\subseteq \mbox{di}(L), \quad\mbox{and}\quad\mbox{reverse}(u) \in \mbox{di}(L). $$ For example $\mbox{di}(\{abcd\}) = \{abcd, bcda, cdab, dabc, cbad, dcba, adcb, badc \}$. Now do the $\mbox{cycle}$-operator and the $\mbox{di}$-operator admit a similar inductive definition in terms of some composition of words, i.e. exists there some composition such that we can define them inductively like $\mbox{perm}$? 

For a given Büchi automaton $\mathcal A = (A, Q, \delta, q_0, F)$ we define a congruence on $A^{\ast}$ by $$ \begin{array}{llll} u \sim_{\mathcal A} v & :\Leftrightarrow & \mbox{for all }s,s' \in Q \mbox{ we have a path} \\ & & \mbox{from $s$ to $s'$ labeled by $v$ iff we have} \\ & & \mbox{such a path labeled by $w$ and} \\ & & \mbox{we have such a path which passes through a state from $F$} \\ & & \mbox{labeled by $v$ iff we have such a path labeled by $w$}. \end{array} $$ for $u, v \in A^{\ast}$. Now setting $W_{ss'} := \{ w \in A^{\ast} \mid \mbox{there is a path labeled $w$ from $s$ to $s'$}\}$ and $W_{ss'}^{F} := \{ w \in A^{\ast} \mid \mbox{there is a path labeled $w$ from $s$ to $s'$ going through a state in $F$}\}$ we have $$ [w]_{\sim_{\mathcal A}} = \bigcap_{\substack{s,s'\in Q \\ w \in W_{ss'}}} W_{ss'} \cap \bigcap_{\substack{s,s' \in Q \\ w \in A^{\ast} \setminus W_{ss'}}} A^{\ast}\setminus W_{ss'} \bigcap_{\substack{s,s'\in Q \\ w \in W_{ss'}^F}} W_{ss'}^F \cap \bigcap_{\substack{s,s' \in Q \\ w \in A^{\ast} \setminus W_{ss'}^F}} A^{\ast}\setminus W_{ss'}^F. $$ This equivalence is defined here and also in the the chapter Automata on infinite objects by Wolfgang Thomas in the Handbook of Theoretical Computer Science, Volume II. In this book it is said