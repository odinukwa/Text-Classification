Chances are you will need to roll your own if you don't like the idea of embedding a small webbrowser directly in the game or opening up one. You will need to setup your own server (but you would probably need to do that anyway). For rolling your own have a look at how web pages normally handle authentication. Your not going to get away with having them not create an account (otherwise what are they logging into), you can however make it very quick and painless. If there is no account with that username, ask if they want to register it and then just do it without asking a bunch of things like emails and so on (Reddit does that). If you want to ensure they can recover their password then make the email optional. Your not going to find a 3rd party login system that won't require to visit to their stuff to authorize things. Since the alternative would require the username/password to be entered in every single 3rd party program, it would be trivial for a malicious developer to capture that information (of course that's possible anyway since they could fake something like a Google login prompt). A few important key points if you setup your own: * Firstly make sure everything is done over encryption (SSL/TLS). This will stop man in the middle attacks. You will need to use a signed certificate. Either use the main certificate authorities (StartSSL does them for free). Alternatively if you don't want to bother with the certificate authorities you can self sign and ship the public side of your certificate as part of the game executable. If you don't use a cert then someone can do things like setting up a fake DNS on large lans and steal logins by acting as a proxy between the player and your servers. 

You could have a look at DNS-SD/ZeroConf/Avahi/Bonjour/mDNS. It's the stuff Apple use to share printers, iTunes folders and so on but it's been adopted elsewhere. Avahi is the opensource version that Linux uses (not sure if it's Linux only), not sure how portable the whole thing is (although there are implementations for most platforms). Having said all that, it's probably easier to just do the UDP broadcast. 

Udacity are launching an Interactive Rendering course. I'm guessing it's WebGL though. Not sure it's it's in JavaScript or has some Python bindings. 

Firstly, if your making games, are you sure you want to be making game engines from scratch rather than using something like Unity, Unreal's engine and so on? 

Perlin Noise can be done in 3D just the same as 2D. Heres a video of it being used with some terrain. Try making 3d perlin noise as a bunch of block clouds. But remove any blocks below a specific level of noise (the higher the level the smaller and more island like he landmasses would be). It might also be an idea to apply a kind of 3D blur to help prune out small single blocks. Maybe you might want blocks to 'fall' if there is a block within a specific number of blocks below them. Chances are you want to scale/'flatten' the noise vertically to ensure you get flatter landmasses. You can overlay several noise's at different resolutions/properties, that allows you to generate some large islands and little ones. Some will merge together too. More noise generations with other thresholds could be used to make different block types. Other another level of noise could forgot the flattening and produce mountains. Things like trees, water and caves entrances are a bit more tricky since you would need to check to see if they make sense placed where they are(ie trees/caves appear only on top of an island rather than floating in free space). It might be an idea to look at turning another perlin noise into some kind of probability point distribution, ie a higher value for noise means there is a %10 chance of a tree at that point. Once you have that point you trace down until you find a valid block where you plant the tree provided it meets the conditions required for a tree (ie there is enough space above it. It's on a dirt block, lighting levels, water nearby or whatever. Of course there are also things like biomes which would be more noise. Going this route you will want to be sure of of how fast you can produce perlin noise in the numbers you want since you will be making a lot of it. Also find out how much memory it will take, some noise can just be added onto the other noise but other types would require it's own separate overlay. It might be worth looking and seeing if you can generate the noise using Shaders, OpenCL , DirectX's Compute shaders, or CUDA if possible but if your planning on releasing this commercially you may be limited by what you can use depending on what requirements you want to support. Of course you can produce 2 different generators provided they both use the same algorithm. At the very least you probably want to thread it. You will also want some flexible noise manipulation functions like blur, stretch, recale values, subnoise. 

I'm not in the industry currently but I took a bachelor of game's graphics programming after doing a normal IT one. In my case it was at the same university so I could transfer credits and skip the classes I tool already. Both of them counted as an IT degree so technically I have 2 degrees for the same things. I just had to take a few game related classes like Real-Time Rendering (OpenGL). And then there where the gamedev specific classes was mostly team focused and included writing modules for Unreal, NeverWinter Nights 2 and a main project (it was open to what your group wanted to do, I did the all the programming of a game engine from scratch in C++ and OpenGL with Bullet Physics integration, simple QT UI for the editing, Lua scripting and such so it was a fairly heavy semester but fortunately it was the only class I was taking due to the course credits. The game it self was kind of crap but it was more of a technical demo and I learned a lot doing it. Personally I think you would probably be better of spending your time on putting together some projects that you can show prospective employers. Grab a copy of Game Engine Architecture (theres also 3D Game Engine Architecture which is a totally different book but not bad either) and read through and experiment with the techniques that are used. You can come up with a project that 1 person can tackle and get even paid for. Lots of of the game jobs are for phone apps now days. Otherwise you can go the indie route. What ever it is, keep it simple, if your mainly a programmer try and choose something with a minimal art style since doing both is going to be time consuming, play your strengths, don't over optimize (a simple game might not need any optimization), don't try and build an awesome fully featured game engine just come up with a game design and code what features are needed. Then when you go for a full job you have that to stuff to show people. Otherwise do some experimental coding and put some up on github of wherever, just things like some example multiplayer networking code, custom memory allocators, or whatever. Even if you end up not going for game jobs it's still basic useful programming (games tend to cover a fairly large chunk of programming concepts). Also think about if you want to write a game engine yourself. Many game jobs now days are grabbing something like the Unreal engine and using that. But those tend to reduce what a single programmer can do since most of the programming is done just leaving scripting. Maybe an engine that's a bit more DIY like XNA (MonoGame might be better since MS stopped supporting XNA), Ogre3D, Torque3D, libgdx or Unity (not actually sure how DIY Unity is). Those will stop you getting bogged down on the simple stuff like how to put pixels on the screen and allow you to do the higher level stuff without it being completely predone. Finally are you a programmer, is that what you want to do? Understand that many positions are more scripting rather than engine internals since they use prebuilt engines. Perhaps you are more interesting in things like gameplay, level design, the art stuff (meshes, textures, character creation and so on).