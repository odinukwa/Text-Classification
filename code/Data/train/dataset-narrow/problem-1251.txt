Then a presenter or controller, depending on the flavor of MVC, interacts with the view and responds to its events. This makes your code testable, but there are other benefits. It allows you to easily swap out one view for another without changing the controller. As it is right now, you'd have to duplicate a lot of this logic in order to implement a console interface. By making your view anemic and interacting through an interface, you decouple the concept of a from this particular implementation of it. 

Your execute find command excludes the order number it's given? How is that a "find" command. is for positive hits, not negatives. Granted, I don't have a better name for you, but think on it. 

I'm sorry, but wtf? How do you expect anyone to wrap their head around that? Null Coalescence has a time and place. This isn't it, and it's all over the place in this code. It's seriously harming readability/understandability. I'll be clear about it. There's nothing wrong with , but once you put that inside of an statement and call a method on it... it's.... meaningless. It becomes completely ungrokkable. 

This is a touchy subject. I personally don't like models that know how to save and load themselves. It feels like too many responsibilities to me, but I know many developers who prefer models that do have this responsibility. It may make some sense for MVVM architectured applications, but I'm not entirely convinced of that either. Anyway, it's kind of a holy war and I'll let you make up your own mind, but I prefer the Repository Pattern when working with MVP. I'd recommend looking into it. 

One last thought... If your entry point has become so large and complex that you're worried about testing the code directly, or are tempted to use a class, then your domain is likely missing some concepts. I think it would be useful to ask yourself why you want to test these conditions, and why is it hard to test them? Could you test them by just running the program under different contexts? Could you use a shell script to just run it with different inputs? Why not? Because you're testing embedded resources? Why not pass those files via args instead? Why don't your other existing tests inside of the actual domain logic test those embedded resources efficiently? Have you put a ton of time and effort into a problem that didn't need to be solved out of some dogmatic reasoning that everything must be tested extremely thoroughly? What benefit did it give you? Sometimes simpler is better and we need to know when enough is enough. I'm not saying that you were wrong to do any of this, I'm just asking you to reflect on whether or not you were. 

This seems to be in violation of the Single Responsibility Principle. It does two things. It prints a message to the user and returns the initial value. I would much rather see your main routine look something like this. (Remember, I don't know Java, consider it psuedo code) 

Brackets would have made it instantly clear that you were returning and not just letting the code blithely stumble on. Heck, even a new line after the statement would have cleared that up. 

You don't really need to do that. You could just fully qualify the names. In this case, you might want to give the namespace an alias to make fully qualifying names a bit easier. 

I haven't run the code, but are you sure it does as you expect it to for odd length strings? By padding the last character with a space, you get some... interesting results. For example, inputting will return . That doesn't seem quite right to me. I would expect it to return . I would do something like this. 

I made the same mistake once upon a time. The problem is that the function only works for types. Asking if a simple value type is missing just doesn't make sense, because they have default values. This MVCE should highlight what I'm talking about. 

And then call this subroutine from your main routine once for each sheet that needs to be processed. 

I'm afraid there's not much we can do to help with this kind of question. There's not much obviously wrong. You likely need to run the query analyzer and add some missing indices and keys. Regardless, there's still an opportunity for improvement, albeit not much performance wise... 

Using makes it clear to Mr. Maintainer that this check is not a typo or bug. I would much prefer this. 

I doubt anyone will be using the code in the year 2100, but you should know that your solution would be off by a day if it was being used in that far flung future. 

One empty interface could be considered a code smell, but can sometimes be useful for reflection purposes. Having two is nonsensical. An interface defines a contract that the type has to adhere to. Where's the contract here? I fail to see how these two types belong to the same inheritance tree. "Type" members also set off alarm bells in my head. They're usually an indication that there are missing interfaces. You could then just inspect the actual type, if you really had to. I would go with something more like this. 

Let's back up to your loop declaration. I think it makes more sense to say less than or equal to 100 instead if less than 101. 

I like that you defined some classes to help solve the problem, but your and have a pretty glaring issues. They're mutable. 

Now, you notice that there? It's there to force the Antlr to throw an exception if a SyntaxError happens. The implementation is right here. 

I know you've already received an answer to your question, but I believe you could benefit from some feedback on the code you wrote. You've numbered your squares oddly, and I believe that is the source of your problems. The squares in your grid should be referenced using (x,y) co-ordinates. Or row and column if you prefer. Storing your squares in a 2d array would probably make this entire function obsolete. However, I do see some issues within the code. The first of which is this. 

I'm not 100% sure this works in Ruby, but can you use constants with string interpolation? This string is repeated a lot. I doubt it will ever change, but if it does, it would be nice to only have to change it once. 

This code implicitly types the variable. Why? You already know that will be a type. Microsoft recommends against this. 

Remember those naming conventions I mentioned earlier? Variables should be camelCased. So, . However, I think it's easier to read as . The next thing I want you to do is start using in all of your vba code. It forces you to declare all of your variables. This will turn typos into compile time errors. It's wonderful. Trust me, just do it. Lastly, booleans default to false, so if you declare the variable using a statement, there is no need to explicitly set it to false. 

I find it's useful to define a few variables when I write my tests. These particular variables always have the same names, and . Doing this makes it really very easy to see what's being tested in our tests. Let's see what happens when we apply this to your code. 

Actually, completely remove this variable. It's not actually used anywhere. Okay, now let's replace that loop with a . 

I wouldn't want to maintain this code. Unless you have proven that this code is a performance problem, do the simple thing. Yes, the following solution will iterate over the lists 3 times. No, I don't care that it does. 

Consider the real world scenario a little bit. Does a car know what the speed limit is? Does it issue itself a fine if it's speeding? Or do the police do this? Assuming we're talking about the current state of things and not some near future world where cars do these things, police do. A more proper OOP approach would be to create a class with a method that takes a in as an argument. The would then be responsible for determining whether or not the car was speeding and issuing tickets when necessary. 

In that order. Let's see what we can do to make this code right. I'll try to be gentle, but prepare yourself. This might be rough to hear at times. 

Okay, so we're diving zero by zero. It's no wonder why we're getting a runtime error. Also note that suffers from this same issue. The least we can do is raise an error that sufficiently describes what actually went wrong, but I would carefully consider how you really want to handle this issue. It might make for a better API to just return zero, but raising this error is semantically correct. It's really a judgement call, but don't make the dev using your class dig into the code to figure out why their getting an overflow error. 

You're doing nothing with the result stored in . Either do something with it or remove the variable and block. ( is a pretty bad name by the way, if it stays, consider renaming it .) 

You have a HUGE problem, and I'm surprised no one mentioned it. What happens if your code throws an error after you've set , but before it gets set back to ? It remains off. You really need to put some error handling in there. 

But now that we've added a reference to the runtime, and we have a FileSystemObject, there's no reason to keep using . We might as well be consistent and use the fso. 

So, in any public member of your class that uses , you should check the new field and throw accordingly. For example: 

Lose the Systems Hungarian notation. The IDE/Code tells me what the data type is. That is if you... Declare the data types of the properties Use auto properties. There's way too much code here for how simple this is. 

I find it a little odd to initialize a bool to true, then set it to false if the code doesn't exit early. I would rewrite your method just a little bit. 

Now, I don't know much about webscraping, but I don't think there's much you can do to make this method of going about it any faster. You're restricted by how fast Internet Explorer can retrieve the website. There's also the fact that VBA is a single threaded language. So, multi-threading is out of the question.... or is it? I would tackle this problem a little differently. I would create a swarm of VBScript scripts to retrieve the data you're after. This works by using VBA to writing many VBScript files to a drive location and using a shell to execute them. Each VBScript is responsible for writing the data it finds to the appropriate cell in Excel. You can find a reasonable example of this (including a workbook with the code) here courtesy of Daniel Ferry. 

The class then takes in an object in and stores it as a property. I need the Output stream to be available to the local project, but I don't want to expose it to external projects referencing it, so I declared it at a scope (more on that later). UnitTest.cls 

is declared as . You know exactly how long it is, so is a better choice of datatype. Even better yet would be to declare it as an and let the RDBMS implicitly cast it so you don't have to later. This is a function that returns multiple fields for multiple records. Functions should only return a single field and record. This is better designed as a stored procedure. Scratch that. You used a table valued function. "dbo" stands for "Database Owner". The schema should be reserved for database maintenance tasks and data. Business data and logic should be kept separate in its own schema(s). 

You could perhaps write a stored procedure to contain the logic as well. While it could also be stored in your schema as a view, it seems a little silly to have a view that returns one record with one field. This one should also be a stored proedure that returns a single value. 

I like your function. You're evaluating the most likely situation first and exiting as fast as possible. You can explicitly declare the return type, but I see no further room for optimization. It's a well written function. 

Keep your disposables short lived and you'll never have to implement yourself. In other words, avoid keeping disposable objects as members. Always try to wrap them in a statement. If you do that, you'll find that your Unit of Work doesn't need to be disposable. 

That should give you a pretty good start. It might take a couple of iterations until you really have something manageable. It's completely possible that you'll find the variable is completely unnecessary once you've implemented the temporary table. 

This doesn't buy you much though. Just the ability to format your code nicely without making twenty lines long. Now, the more I look at your , the more I don't like this parallel array thing you have going on. I would create a simple struct (or perhaps a class) to hold this information in. Something along these lines. 

Awesome, but now the duplication inside of the method has become really obvious, but thankfully, easier to deal with. So let's refactor again. 

So... Yeah... Let's forget that and use to create a global default instance. Just like you've already done. Only instead of a property that returns a new instance, we'll use a function. I like to call mine . 

and ? Why do we have a stargate address and an operating system stored in those fields? TL;DR: Stop over abbreviating variable names. They make sense to you (now), but will they make sense to Mr. Maintainer? Remember, that poor confused maintainer could be a future version of yourself. 

If you don't like that, perhaps add the parenthesis to make it a bit more clear and explicit what is being returned. 

Some very good points were made already. The most important of which, in my opinion, being the very subtle difference between these lines of code. 

Use brackets friend. Always use brackets. Better yet, do away with the entirely and assign the result of an expression to your . 

And we now have a subroutine that fits on a single screen without scrolling. We could probably extract another method, but this is good enough for me. The code below does exactly the same thing your original did. 

Anyway, there are other completely different algorithms for this. Typically, when searching for all the prime numbers up to , we'd use the Sieve of Eratosthenes. Lastly, I apologize if my syntax is wrong or the code isn't very idiomatic. It's been a long time since I wrote any Ruby and I never was very good at it. Hopefully this still helps. 

Always use properties for access to instance variables though. All in all though, it doesn't hurt to use Private properties. It does insulate you from changes to their internals down the road. It's a judgment call really. 

Small note. In some places we're referring to the editor as or . In others we're referring to it as . We should pick one or the other. 

That's not how I'd expect the API to work. Typically, calling the resource without an will return all of them. 

A more robust way of doing this would be to make a second trip to Active Directory to query back the specific user represented by and let the AD library do the work for you. If performance becomes a measurable issue, you can implement a cache of all users & their managers that gets initialized when the program starts. AD information shouldn't be changing frequently, so a simple caching strategy would likely be fine. 

There are a couple of other little improvements to be made though. You need to alias this column. Otherwise you'll end up with a mile long name for it. (Depending on your RDBMS. I know SQL Server will name it with the expression string.) The second thing I would do is declare a variable for . You're using the same parameter in two places, so it makes sense to declare a variable. This will also make things easier if you should decide to wrap this query up in a stored procedure. 

I'll try not to duplicate advice, but seriously, use an error handler and make sure the application gets set back to a workable state. There's nothing more frustrating for a user than to end up with a "frozen" instance of Excel because screen updating has been turned off.