I believe Choosy will let you do what you are asking. There is an Advanced pane where you can specify custom rules which trigger e.g. on specific URLs, and one of the options is to launch the URL in multiple browsers. (You may have to do something funky to convince Choosy that your other app is one of the "browsers", though. Maybe you can set up a browser you only use to redirect to your app, Chrome Canary or Opera or something else you don't otherwise wish to use.) 

I reversed the order of the bytes so that it naturally increments from 0x8AC5C5CA to 0x8AC5C5CB but then the next increment will be 0x8AC5C5CC etc. The magic is to convert this to a sequence of bytes (had to look it up from $URL$ This will start at 0x8AC5C5CA and go to 0xFFFFFFFF, then wrap around to 0x00000000 and climb back up to 0x8AC5C5C9. If you have multiple candidate ranges you would like to examine in a particular order, maybe something like 

which is obviously a lot less efficient. With the Perl variant, I specifically rigged the script so that it keeps track of the line number for each input file separately, so you can use this more efficient syntax (provided your version supports it); whereas with the address 2 only matches the second line in the entire sequence of files, and so we are forced to execute one instance of this script per file anyway. 

You seem to be confused about how things work. You don't need a terminal to run a program. "Start so you can start a process and then exit " reduces to "start a process" and you can factor out entirely. I'm guessing you are looking for 

The United States (Apple) keyboard is the culprit. Setting the keyboard to standard US keyboard as default fixes the issue, with no apparent downside. 

In the past year, all of my computers have started having a behavior where heavy disk/cpu usage will block or cause input lag. The mouse will hitch, keyboard input will be super slow as if it's throttled. I have never seen this behavior before outside of very old PC issues where hard drives were running in PIO mode. It happens on all four of the machines I have access to. Two of them have SSDs as primary hard disks. One of them, a laptop, is running a completely new and fresh install. None of them have any viruses. This seems to be a new thing, as none of these machines behaved this way until fairly recently (the oldest machine is 5 years old, the newest is only 2.5 years old). There's no commonality in any of the hardware. (Macbook pro, core i7 920 system, core i5-2500 system, and a dell laptop with an older i5). My best guess at this point is some kind of change in windows itself with regards to input event handling, but that seems crazy to me. 

I have a laptop with a harddrive that spins down so aggressively (after ~10s of inactivity) that it causes performance problems in games and various other apps that have frequent but spread out drive accesses. The spin-up causes a two second pause in whatever app is initiating the disk access. I've found a half-solution which is to use hdparm for windows to change the drive's spin down timeout. But the problem is if the system reboots or sleeps, that value gets lost, and I have to run hdparm again. What would be a good solution to make this kind of fix permanent? I run hdparm via batch files right now, but that requires a security prompt click, so it can't really be properly automated. Is there a way to make the equivalent changes to the drive settings with some method other than hdparm? Specifics: Windows 8.1 MSI GS60 Ghost Pro 2PE-053 Hard drive in question is an HGST HTS721010A9E630 (Hitachi Travelstar 7k1000) 

You were never using or in the first place, and there was some other dead code in your script as well. 

I sometimes find myself in the same situation, on servers where I have SSH public-key login and thus no password at all (that I know), and struggle to remember what I did last time to recover. There is no need to kill the screen. Just disconnect the terminal you are running in, then open a new terminal window and reattach (). Maybe as a precaution, add to your so that the lock keystroke is unbound. In an already running , use . 

You can use , of course, but it is rather unwieldy. Perhaps encapsulate it into a function so you can avoid too many backslashes outside of the actually complex . 

(The :s are literal DEL characters, ASCII 0x7F.) The space in the place of a tilde at the beginning might be a hint as to what went wrong in the conversion, but this is wild speculation. ESC looks like the ISO-2022 code to "designate other coding system", but what does the stand for here? I'm probably too dense to understand the Wikipedia article without further examples, and everything else I could find seems very focused on some subset such as ISO-2022-JP. Does my analysis so far make sense to you? Can you help me figure out what happened, and perhaps even offer advice on how to revert the corruption? I have posted hex dumps of extended fragments of these two examples at $URL$ 

I will concur with the comments to add the user to the group instead to solve this particular problem. 

I am running Ubuntu 13.04 on a Macbook Pro (8.2). I have a faulty bluetooth antenna that I am not interested in paying to fix. In windows I have a usb bluetooth dongle and I just keep the built in bluetooth disabled. However, I am new to Ubuntu/Linux and I can't quite figure out how to disable the internal bluetooth adapter in Ubuntu, and setup the USB adapter in its place. The USB Adapter is an Asus BT-400, which apparently runs the BCM20702A0 Broadcom chipset. Which my limited googling suggests is compatible with linux. That being said, the primary goal here is to completely disable the internal bluetooth so that it's never active. Getting the dongle working is a bonus, and I can simply buy a different linux compatible one if necessary. 

Not sure what's up with this. But my default bind for ctrl-` in Sublime Text 2 doesn't work. I can rebind it to something else, that works, but the app doesn't recognize any bind involving the ` key. I'm on a late 2011 15" MacBook Pro and running Windows 7 via Bootcamp. One of the problems appears to be, after logging input, that when I hold the control button, Sublime Text believes that the input that was pressed was \. If I hold the Fn key, I can actually convince it that yes, it is a backquote. But once I started looking at this, I found all kinds of other weird little issues. Language is set to United States English, and the keyboard is set to United States (Apple). Any ideas? 

is executed using and the redirection syntax you are attempting to use is a Bash extension (and a fairly recent one at that; older versions of Bash only supported ). The portable way to append standard output and standard error to a file is 

If you can remove the hard drive and mount it from a different computer, that's an easy way to do it. With modern compact laptops, accessing the internal hard drive is not always easy, but if you are lucky, there is a standard 2.5" drive behind two X screws that you can access from the side of the case, or sometimes the bottom. It's been a few years since I last did this, but I recall creating a small partition for the installer, and then just copying it over with . This would have been back in the day of floppy-based Debian installs, but things may not have changed all that much. These days, I would create a bootable USB image and copy that over, mark the partition as bootable in , and go. If you can get a hold of a USB cradle for your drive, that makes things a lot easier. 

Instead of messing with your you could simply move it to (assuming this directory exists and is already on the default , and assuming the script is self-contained, i.e. doesn't also need to have libraries or data files installed). The prefix is used to refer to the current directory; you should omit that part to make the shell use your for locating the script or executable. 

I am having a problem getting a specific device to work, and I am trying to start from square one by making sure there are absolutely no leftover files from driver installs on my system. Specifically I'm trying to get rid of the UC-Logic drivers for a Monoprice 10x6 tablet. However, I have found copies of the driver files in the windows DriverStore\FileRepository. But windows will not let me delete any folders from that location. The best info I have found so far is to use pnputil.exe, however, since the drivers are not currently installed, it is not listed as an inf file that I can remove. I could, as a scorched earth policy, jump into OS X and just delete them from there, but I'm worried that this may cause me issues. I would much rather find the 'proper' way of doing it. 

Didn't see this exact question on here, so figured I'd ask anyway. It's simple, I do a lot of dev on a macbook pro, and now I'm using a bootcamp a lot as well. My muscle memory has me doing command-x/c/v for control and paste options. So I'd like to find a way to swap those keys in Windows 7. It's not part of a VM, just booting directly in to Windows. In bootcamp, the command key acts as a windows key, if that's any ehlp. 

I purchased an upgraded wireless card (Intel Centrino 6300) for my Dell Studio XPS 16, and need to know the correct antenna configuration. There were no install instructions for the wireless card, nor does the laptop itself explain the antenna configurations. The laptop has three antenna cables, black, white, and grey. One of them was not used on the old wireless module. The wireless seems to work with the assignment I've chosen, but I've been having some connectivity issues which are perhaps related to an improper configuration. 

This is somewhat obscure, but apparently means and . The package's file listing reveals exactly what it contains. As of right now (version 1.6.6-1) it contains the following files: 

A common arrangement for appending to files which require privileged access is to use . Its primary purpose, of course, is to write to two places, but you can discard one of them and use the side effect that gives you privileged append. So, something like 

As an aside, you should not use locking on a forwarding recipe, a trailing wildcard is useless, and the flag is the default; so I took those things out. 

The value is not standardized, but the way I read the spec, any value other than "no" should suppress bounces. I also threw in the option as a fallback; if it works, it could be useful by its own, as many mail servers will not generate bounces for messages which have an empty envelope sender. However, not all sites allow you to control this. 

(In case you are unfamiliar with Debian packages, the stuff in is just standard metadata for the package, and the are specifics for the package integrity checker, probably to say that it's okay for it to ship the same binaries as some other packages which also implement the legacy Sendmail command-line API.) 

Perhaps it bears pointing out that the shell (Bash, or whatever you are using) will expand the wildcards into a list of matching files before any commands are being run. (When there are no matches, the wildcards will be passed on verbatim, though you can specify the option to have it simply disappear in this case.) These are "glob" patterns, not regular expressions. Bash has an extended globbing facility which is closer to regex, but still not exactly regex; but that is not necessary for this simple task.