As said by RB in the comment, if $X_1 \cup X_2 = X; X_1 \cap X_2 = \emptyset$, then setting $B=0$ makes your problem equivalent to PARTITION. But even with the relaxed conditions: $X_1,X_2 \neq \emptyset, X_1, X_2 \subseteq X; X_1 \cap X_2 = \emptyset$ (i.e. $X_1,X_2$ not necessarily form a partition of $X$) the problem is still NPC: set $B = 0$ and it becomes equivalent to the EQUAL-SUBSET-SUM problem. I don't bear papers behind paywalls :-), so this is a quick sketch of an alternative simple reduction from SUBSET-SUM: Given non-negative integers $A = \{ a_1,a_2,...,a_n\}$ and a target sum $S$, let $k = \lceil \log \sum a_i \rceil$. 

Converted from comment: language inclusion is decidable for very simple deterministic pushdown automata ("On the Inclusion Problem for Very Simple Deterministic Pushdown Automata (1999)" by E. Makinen, 1999) and a restricted version of timed finite state machine ("On the Language Inclusion Problem for Timed Automata: Closing a Decidability Gap" by J. Ouaknine and J. Worrell, 2004). 

Each blue horizontal line corresponds to a different schedule time ($s=1,2,...$). On the left of the picture there is a complete assignment gadget for three variable ($x1,x2,x3$). The red nodes correspond to a $true$ assignment ($+x_i$), the blue nodes to a $false$ assignment ($-x_i$). A green node correspond to a variable $x_i$ and can be placed on the same schedule time of the red or the blue node, without afftecting the total cost of the gadget. The three possible combinations for $x_1$ are showed on the right. The number in the nodes represents the cost (the number of distinct parents). Both $x_1 = true, x_1 = false$ have a cost of 7 ($c=7$). Note that the last combination has a greater cost so it cannot be used. Now we extend the assignment gadget to "simulate" the clauses of the formula. 

While reading some articles on formal proofs (see also my previous question on cstheory about the length of ZFC proofs versus human written proofs), I came up with this apparent paradox. Let $M_{const}$ be a program that given Turing machine $M$ checks if there is a short ZFC proof $\Gamma$ of length $|\Gamma| \leq |M|^2$ that $M$ runs in constant time. 

If you have a two way DFA with one counter over a (semi)infinite tape where the input is given in unary: $\$1^{2^n}000...$ then the DFA can: 

It's a recent paper, but its title often comes to my mind: Giovanni Viglietta: Gaming Is a Hard Job, but Someone Has to Do It! Theory Comput. Syst. 54(4): 595-621 (2014) Viglietta presents some metatheorems that can be used to study the computational complexity of video games using common elements like destroyable paths, keys, doors, and so on; among the results, he applies those metatheorems to prove the NP-hardness of Pac-Man. 

On every gadget there can be max $4 + 2C$ corner points (1 generated by the enter interface point, 1 generated by the exit interface point, 2 generated by the extra turn on straight traversals and 2C on the inner zig-zag), the points used for the edges can generate max $2e$ corner points. Suppose that the original graph has $n$ nodes and $e$ edges, if we pick $C > (4n+2e)$, and $k = 2Cn$ as the number of corner points that must be used, then we force the "hidden" polygon of the puzzle to traverse every gadget; but every gadget can be entered/exited exactly once (through a pair of interface cells); so the problem has a solution if and only if the original grid graph has an Hamiltonian path. 

[An extended comment] I think that the "roots of verification" are already contained in Karp's milestone paper "Reducibility Among Combinatorial Problems" (1972): 

In this way you can build $\Pi_2$ setting the element $j$ of row $i$-th equal to element $j$ of column $i$ in $\Pi_1$. The assignment clearly vanishes both $\Pi_1$ and $\Pi_2$ and the constraints are met. 

Perhaps this paper can help you: New Worst-Case Upper Bound for #2-SAT and #3-SAT with the Number of Clauses as the Parameter by J. Zhou, M. Yin, C. Zhou (2010). And this one that studies the structure of the set of solutions of a random 2-SAT instance: Satisfying Assignments of Random Boolean Constraint Satisfaction Problems: Clusters and Overlaps by G. Istrate (2007) 

Note that $T=S$ and $T=\emptyset$ are trivial solutions. With the constraints $T \neq \emptyset$ and $S\setminus T \neq \emptyset$ the problem seems (unless the proof below is wrong :-) NP-complete. A possible reduction is from PARTITION: given a set $A$ of $n$ positive integers $A=a_1,..a_n$, can $A$ be partitioned in two sets $A = A_1 \cup A_2$ such that $\sum_{a_i\in A_1} a_i = \sum_{a_j \in A_2} a_j$? Let $M = \sum_{a_i \in A}a_i$; without loss of generality we can assume that $M$ is even. You can pick $S = A \cup \{a_{n+1}, a_{n+2}\}$ with $a_{n+1}= a_{n+2}=-M/2$; so we have $\sum_{s \in S}s = 0$ (right hand side of the equation of your problem). The original PARTITION problem has a solution if and only if your problem has a solution. $(\Leftarrow)$ Suppose that there exists $T$ such that $|\sum_{t\in T}t-\sum_{s\in S\setminus T}s|\le\sum_{s\in S}s$ = 0. So the absolute value of the difference of the sums is zero: $|\sum_{t\in T}t-\sum_{s\in S\setminus T}s| = 0$ $T$ cannot contain both $a_{n+1}$ and $a_{n+2}$, otherwise $|\sum_{t\in T}t-\sum_{s\in S\setminus T}s| > 0$ because at least one element $a_i>0$ must be contained in $S \setminus T$ and $|-M/2 -M/2 - a_i| > M$. For the same reason $S \setminus T$ cannot contain both $a_{n+1}$ and $a_{n+2}$. So $a_{n+1} \in T$ and $a_{n+2} \in S \setminus T$, and their contribution to the absolute value of the difference of the sums is $0$. So the remaining elements must be partitioned in such a way that the sum of the elements in $T$ equals the sum of elements in $S \setminus T$ in order to have an absolute value of the difference of the sums equal to $0$. $(\Rightarrow)$ If the original partition problem has a solution, then it is easy to see that if $T = A_1 \cup a_{n+1}$ we get an absolute value of the difference of the sums equal to $0$. 

This is only an idea that came to my mind while reading Marvin L. Minsky, "Recursive Unsolvability of Post's Problem of Tag and other Topics in Theory of Turing Machines"; in particular the famous theorem Ia: 

Kolmogorov Complexity and the incompressibility method. The incompressibility method - based on Kolmogorov complexity - provided a new and intuitive way of formulating proofs. In a typical proof using incompressibility method, one first chooses an incompressible object from the class under discussion. The argument invariably says that if a desired property does not hold, then, in contrast with the assumption, the object can be compressed and this yelds the required contradiction. See for example the proof that there is an infinite number of primes, the alternative proof of the Godel's incompleteness theorem, or the connections between Kolmogorov Complexity and Computational Complexity, .... 

The problem is known as "Maximum capacity path problem" or "Widest path problem" See the original paper: T. C. Hu, "The Maximum Capacity Route Problem", Operations Research Vol. 9, No. 6 (Nov. - Dec., 1961), pp. 898-900 or the linear time algorithm described in: A. P. Punnen, "A linear time algorithm for the maximum capacity path problem" (but I didn't download/read it) 

Your problem seems a special case of the turnpike reconstruction problem (for which no polynomial time algorithm is known). See for example: Shiteng Chen, Zhiyi Huang, and Sampath Kannan, "Reconstructing Numbers from Pairwise Function Values". Abstract: The turnpike problem is one of the few natural problems that are neither known to be NP-complete nor solvable by efficient algorithms. We seek to study this problem in a more general setting. We consider the generalized problem which tries to resolve set $A = \{a_1, a_2, ... , a_n\}$ from pairwise function values $\{f(a_i, a_j)\mid 1 \leq i, j \leq n\}$ for a given bivariate function $f$. We call this problem the Number Reconstruction problem. Our results include efficient algorithms when $f$ is monotone and non-trivial bounds on the number of solutions when $f$ is the sum.... 

The reduction is from Unary 3-Partition (which is NPC). Given $3m$ integers $A = \{a_1,a_2,...,a_{3m}\}$ and an integer $B$, does exists a partition of A in $m$ sets $A_1,...,A_m$ such that every $A_i$ have exactly 3 elements and their sum is $B$? Suppose that $max = \sum a_i + 3m$ We construct $S$ adding $3m$ base intervals $BI_i$ of length $3*max$ (red lines in the figure), on top of each base interval we add a marker pyramid of $max$ intervals of increasing length (green lines in the figure). To base interval $BI_i$ we also add $a_i$ disjoint unit intervals of length 1 (black lines in the figure). Finally we add a long interval $L$ to cover all $BI_i$ (blue line in the figure). Then we construct $T$ starting from a copy of $L$, then we add $m$ sum groups $G_j$, each one made with a copy of three stacked base intervals stretched in such a way that their marker pyramids don't intersect (see red+green lines at the bottom of the figure). Then we add on top of the three base intervals of $G_j$ a sum pyramid of $B$ intervals of increasing length (disjoint from the marker pyramids). Suppose that there exists a bijection between S and T that preserves the interval inclusion (in one direction from S to T). Then each marker pyramids of S must correspond to a marker pyramid in T (the only way to have an inclusion chain of $max$ intervals), so exactly three base intervals ($BI_{j_1},BI_{j_2},BI_{j_3}$) of $S$ must be mapped to each group $G_j$. Furthermore, the unit intervals of $BI_{j_k}$ must be mapped to the sum pyramid of $G_j$ and cannot be "exchanged" between different groups. In a similar way it can be proved that if there exists a bijection then the original unary 3-partition problem has a solution. 

LINEAR DIOPHANTINE EQUATIONS (given natural numbers $a, b, c$, are there natural numbers $x$ and $y$ such that $ax + by + c = 0$?) are solvable in polynomial time. QUADRATIC DIOPHANTINE EQUATIONS ($ax^2 + by + c = 0$) are NP-complete (NP-complete decision problems for quadratic polynomials). General DIOPHANTINE EQUATIONS are undecidable (Davis-Putnam-Robinson-Matiyasevich theorem). 

On the "NP-complete side" I came across these variants (I asked a similar question on cs.stackexchange, too): 

I think that a better way is to include the position in the key of the entries; in your example you'll have: 

It's not so hard to prove that the s-t connectivity problem ("Given two nodes $s,t$; is there a path from $s$ to $t$?") is undecidable for non planar graphs (using for example a set of "graph tiles" arranged to simulate the configurations of a two counters machine, in which the value of the counter $c_1$ is the $x$-coordinate, and the value of the counter $c_2$ is the $y$-coordinate). 

Build a "CUDA-SAT solver" and outperform the winners of the annual Sat competitions ! :-) Edit: I posted the answer quickly ... but - after a Google search - I found that my idea is not so original, see: NVIDIA CUDA Architecture-based Parallel Incomplete SAT Solver ... however I think that a public available project/source code of a CUDA-powered SAT solver that can be compiled and used on a standard PC (Linux and/or Win) equipped with a CUDA GPU graphics card would be very appreciated. As a second best, I suggest you to try to implement a parallel genetic algorithm and pick one (or more) of the many possible applications to show the performance gains due to the parallelization. 

I didn't check if the Bangye's solution is correct/simpler, but a quick transformation from RESTRICTED X3C (the name is the same used by Gonzales) to SINGLE OVERLAP RESTRICTED X3C (the name is invented) that should work is: 

The (undecidable) Peano Arithmetic (PA) is powerful enough to model Turing machines. Consider a standard first order axiomatization of Peano Arithmetic and a standard Hilbert-style proof system $\mathcal F$. 

We can also build a "super paradox" machine replacing step with a search at most linear w.r.t $|x|$ for a proof of $\phi = $"$M_i( M_{pdox} )$ halts in polynomial time" and "If ZFC $\phi$ has a ZFC proof of length $< \log(\log(|x|)$ then $\phi$": 

... I searched some patterns to build a reduction from a NPC problem, but didn't find a way to represent a "flow" with a "fork" ... So (after some work) this is a polynomial algorithm ... ALGORITHM The starting list can be viewed as an array of $N*2$ consecutive "holes". For each initial pair $(a_j,b_j)$, put the "element" $b_j$ at hole number $a_j$. Each pair can be viewed as a directed edge from position $a_j$ to position $b_j$. A move consists in picking an element $b_j$ at position $a_j$ and moving it to its destination position $b_j$ (the destination hole becomes an unmovable peg). We delete the edge, and proceed to choose the next move which will start from one of the two nearest reachable elements $b_k$ from position $b_j$ (only holes between $b_j$ and $b_k$ are allowed). We must find a sequence of $N$ consecutive moves. 

So we can convert a 3-SAT formula $\varphi_i$ in an equivalent string $U(\varphi_i)$ concatenating its clauses. The language $L_U = \{ U(\varphi_i) \mid \varphi_i \in 3-SAT \}$ is NP-complete. A 2-tape NTM can decide if a string $x \in L_U$ in time $2|x|$ in this way. 

I found that the problem has been used in a student programming contest. ... if you still want to try to solve it by yourself don't move the mouse over the area below !!! :-) 

From the comment above: in Stefan Kratsch, Pascal Schweitzer, Graph Isomorphism for Graph Classes Characterized by two Forbidden Induced Subgraphs: GI is polynomial time (trivially) solvable for $(K_s,I_t)\text{-free}$ graphs, but also (less trivially) for $(K_s,K_{1,t})\text{-free}$ graphs. EDIT: as noted in the comment, $K_{1,t}$ doesn't contain a cycle (I read the introduction of the paper too quickly). After thinking a little bit about it, it seems easy to prove the following (original?): NEGATIVE RESULT: for every finite set $\{H_1,...H_k\}$ in which every $H_i$ contains a cycle, the problem of graph isomorphism (GI) restricted to the class $\mathcal{C}$ of $(H_1,...,H_k)\text{-free}$ graphs is GI-complete. Proof: Fixed a class of $(H_1,...,H_k)\text{-free}$ graphs in which each $H_i$ contains a cycle, and given $G_1,G_2$, let $r$ be the length of the longest cycle of the $H_i$s. Replace each edge $(u,v)$ of $G_1,G_2$ with a path of length $l = \lceil r/3 \rceil$ adding $l$ new nodes $(u,p_1,p_2,...,p_l,v)$ (see figure below). By construction the new graphs $G'_1, G'_2$ are $(H_1,...,H_k)\text{-free}$ indeed the possible shortest cycles are those formed by a triangle that must have length $3\lceil r/3 \rceil + 3 > r$; and it is easy to prove that they are isomorphic if and only if the original $G_1,G_2$ are isomorphic. 

I don't know how your polygons look, but perhaps a simplified version of the Ramer–Douglas–Peucker algorithm is enough: 

Note again that vectors containing values $> 1$ can be represented in "unary" using a group of 0-1 vectors like showed in STEP 2. $Y$ has two disjoint $Y_1,Y_2$ subsets having equal sum if and only if $X$ has an even-odd partition. 

I found some alternate definitions of Universal Turing Machine in papers related to the universality of small Turing machines and other models. See for example the four definitions (the first 3 are equivalent and are similar to yours except that there there is also an explicit decoding function) in section 2 of Yurii Rogozhin, Small universal Turing machines, Theoretical Computer Science, Volume 168, Issue 2, 20 November 1996, Pages 215-240. For example the Davis's definition in M. D. Davis, A Note on Universal Turing Machines ; Martin Davis, The Definition of Universal Turing Machine . Journal of Symbolic Logic 35 (1970), no. 4, 590; bypasses the encoding phase: A generic machine (Turing machine, tag-system, ...) is universal if and only if its halting problem is r.e. complete. Probably you're not interested in them (and you'll probably know them), but there are also notions of semi-weakly universal and weakly universal Turing machines (in which the initial tape has an infinite repeated string on the left/right/left+right of the input). For further details see the work of Neary and Woods on small TMs.