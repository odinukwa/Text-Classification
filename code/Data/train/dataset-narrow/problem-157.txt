The nominal bit rate is the symbol rate. Some Gigabit Ethernet standards uses 8b/10b encoding, which inflates the line rate from 1 Gbps to 1.25 Gbps. For 10 Gb Ethernet, it normally uses 64b/66b encoding and shouldn't have such a high symbol rate, so I'd say there is an additional reason that inflates the line rate. 

I keep reading it is 2304 bytes. Wikipedia states it is 7981 bytes. On my WiFi AP, I can set the RTS threshold with a value of 0-2346 bytes (I guess it's MTU + the MAC/PHY header ?) Where does this 7981 bytes come from, and can we have a definite answer on the 802.11 MTU size ? Is it 2304 bytes ? If MTU = 2304 bytes, what is the total frame size of a WPA2 packet (assuming the MTU is fully saturated) ? 

The BRAS is the termination for PPP sessions. The customer modem establishes a session with the BRAS, gets authenticated and can then access the ISP's network and Internet. If I understand correctly, it is at the BRAS that the PPPoE and PPP headers will be stripped off the packet. 1) Are those headers added to packets coming from the Internet to the client before getting pushed to the DSLAM - modem, or are they only one way? 2) If they are added both ways, how does the BRAS know which session it is? Is it based on the client IP? 3) Do BRAS keep a session table, like a firewall would for an ACL or NAT for packet returns? In short, I just want to know if the BRAS adds PPP/PPPoE headers, and doesn't just strip them off packets. 

I've previously run a Cisco based network (Catalyst switches, ASA and PIX firewalls) which segmented a medium sized business network into 8 VLANs with little issue. I've recently started in a new company and have taken over part of the network admin, which includes creating a VLAN configuration to allow for a staff "guest" network and to provide for segmentation to test customer equipment, this time using a mix of D-Link switches, D-Link and Zyxel wireless access points, a Draytek Vigor 2830 router, and a pair of Deliberant APC 5M-18 V2 units in a wireless bridge configuration connecting two buildings. Setting up a VLAN network in the main office was fairly straightforward, tagging the ports on the primary D-Link switch (a DGS-1210-48) that connected to the Zyxel access point, and adding a second SSID to the access point and adding VLAN IDs to both SSIDs. Initially the Vigor 2830 caused problems due to it giving out the wrong IP address and DNS settings from time to time, apparently it's a common issue with using multiple VLANs on a single port so the Vigor was given two connections to the main switch, both ports on the switch untagged but with the appropriate PVID for the LAN configured on the matching router port. This works as expected, and has been up and running for a few weeks without any problems. Here is a very simplified (I've left out all the printers, servers, desktops, etc., to focus just on the main elements that are affected by the VLAN changes) diagram of the VLAN configuration so far: 

As an end-user, you cannot multicast across the Internet, unless using a tunnel. As a larger organization, like a video provider or an ISP, it is certainly possible to forward multicast packets across their domain boundary (i.e. across an Internet). How ? Essentially, to forward multicast packets within your own domain (or Autonomous System, AS), you use the PIM protocol and multicast routing. To forward those multicast packets to another AS (like another ISP), you would need a peering agreement with them and use the Multicast Source Discovery Protocol (MSDP), configured on both ends. While you won't propagate your multicast across the global Internet, crossing network boundaries with multicast packets is not impossible. PIM and MSDP are advanced, CCIE-level concepts. Here is a good Cisco white paper about it : $URL$ 

Here is the answer : I couldn't find this value of 7981 bytes anywhere, and the links on wikipedia were dead, so I edited it to 2304. The maximum 802.11 MTU is 2304 bytes. Here are the different possible maximum frame size of a 802.11 packet, according to the encryption scheme in use : MTU + MAC Header + Encryption Header 

If QoS is used, an additional 2 bytes header is added before the payload, increasing the frame size by 2 bytes. 

Note that the Encryption header is missing on the picture. It would be placed after QoS Control, inside the frame body, but would not decrease the available 2304 bytes for application data. In addition, the "Address 4" field of a 802.11 frame is often not used, effectively reducing the frame size by 6 bytes for most 802.11 MPDU. 

So it looks like i need to try to find some settings to change the "Forwarder timeout" and "Forwarder retries" 

The idea is that if my local server (10.110.176.12) becomes unresponsive, I can still get results from Google's public DNS. However, despite my configuration, it appears that the timeout is still 3 seconds, and the retry is 3. Clients which use this caching server will fail beucase that delay is too long for them, and therefore they will not be able to connect to Internet resources if the primary DNS server is unresponsive. Here is the debug (with cache operations removed) : 

I have configured a Cisco 1921 router to act as a DNS Caching Server by using the following configuration snippet: 

and my phone received "Greetings å, ø, æ, Ψ" Success! As it turns out it doesn't look like it is necessary to convert the Cisco router to 8 bit ASCII to be able to send messages containing these special characters, but I still thank Brett Lykins for his participation. 

Local name resolution works correctly - it times out after 1 second and moves on to the next server. It's only the DNS Server portion of IOS which is ignoring these values. Question - which values should I use for the DNS Server if it doesn't use the settings shown above? I have checked some online guides including this one: $URL$ and I've not been able to figure it out. Cisco1921/K9 running Cisco Version 15.0(1r)M9, RELEASE SOFTWARE (fc1) Update 1: I've found some more settings that I need to configure: