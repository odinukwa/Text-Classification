Yes, when you don't need it. This means that you should use object pooling when you profile and realize that a part of your code would benefit from object pooling. 

From what you're describing, you seem to be scaling a translation as well as your sprites. You should scale your sprites when you load them, then translate them around. Or, if you apply all your transformations at the same time, you must make sure that the translation is applied before the scaling. Another option for you would be to scale them offline and load these instead. This would be at the loss of disk space. 

Disclaimer: This is not a legal advice site. I am not a lawyer. For a definitive legal advice, hire one. 

This might be a bit more than you asked for :P If it is, please use the answer already posted by @dnk drone.vs.drones as it is a more generic and flexible way to tackle it than using pure inheritance as you were suggesting. 

P.S. Also, this is none of my business and it's really up to you, but I think it should be considered: on a phone, a higher frame rate means more battery consumption, so you should also probably test what advantages you gain by running at 60 FPS vs running at 30 or 45. (E.g. can you play twice as long with a battery fully charged at 30 FPS compared to running it at 60 FPS?) 

The idea is to keep all the points the user touched, then evaluate and sum the distance between each of those points to the line formed when the user releases the screen. Here is something to get you started in pseudo-code: 

Give an impulse to the player toward the desired direction; Disable the spring; Let the gravity take care of the rest. 

To determine the final position of a node, you compute the transformation of the node, then calculate the transformation of each of the parents, in order, up to the root of the scene graph. So you don't "lose" information, it's there and it's computed on a per-need basis. 

Your slow down is probably caused because you take the Math.min(speed, distance) when distance is lower than your speed (implying that you can't move by your speed each frame (since it's dependant on the delta)). Your code does not allow me to see what causes the issue with the turn you are describing. To find out where exactly is your issue, I would suggest you trace your variables by writing their content to the console to see there the bad behaviour comes from. Edit: Here is a fix for your situation (I haven't tested in JS, but it works in python) 

You may have had an issue with your tile-sheet. The question now displays a properly framed one. It looks like at 6*15 tile sheet. So... Instead of using a , which has the same value for the x and the y axis, I would suggest you use a vector2 instead: 

You might be interested in how games such as Quake 3 were built. The game is made in such a way that the single player game is in fact a server that starts locally, with a client that connect to it. This has the advantage that the multiplayer comes for free. So if you intend to have your game available as 'public' and 'local' multi-player, I suggest you make the server part of the game, without having another thing to download for your players. 

So the is at first a from which we want to find the . You submit a set of coordinates to the interpolation function (x, y), and it spits you a scalar (a single value). 

The City of New York The name of geographic locations cannot be trademarked, so the name of the city, the streets, the various plazas, etc. can be used. (This would really be hard for media creators to create content if every one had to go through a process to get the authorization to use a city name, wouldn't it!) However, even if the name of the city is not copyrighted, the way you use it can be. For instance, stuff like "I [heart] NY", New York City logos and such are most likely copyrighted and you should inspect each of these items with a lawyer before knowing what if it is copyrighted or not. 

However, in your parts of your two first scripts you rely on the values of or to be something else than "none". This is why only the first part is done: when it is ready to go for a second time (evaluate to in a second ), all the important values are set to "none", which causes the condition checks to result to . To fix your issue, I would suggest to place the code that resets your values after the three s in each of your parts of your methods instead of in your methods: TopLeft.cs 

Your question shows lack of experience. Which is not a bad thing, because we've all been there and you're taking steps to improve your situation by asking around and trying stuff. Kudos on that! My answer to your question is this: When programming, there is rarely a single best way to do something. It always depends on the situation, on the requirements and and the implementation. Plan a bit more what you want from your game, with all the edge cases, then try to implement it with what you're most comfortable at first. Then take a look at what went wrong with the way you chose, and figure out a way to improve it for your next game. And after you're done with your first implementation, you should take a look at the concepts of entity-component design. Maybe you don't need all of what's in there, but it could help you figure out ways to design your next game! 

Issues like this often come from the fact that the bullet gets through the target; frame A it's before and frame B it's passed it, and neither in frame A nor frame B you had a bounding box intersection. A way to solve this is: in frame B, you extend your bullet's bounding box from the position it was in in frame A. This would encompass 'all the infinite positions the bullet have been in' during the 'frame transition'. Edit: As per request, here is a pseudocode sample. Note that it is assumed that everything is axis-aligned, that the origin is bottom left, and that bullets are going from 0 to infinite in the y-axis. 

Unfortunately, there is a flaw in what you're suggesting. If ClientA starts the session, does stuff, then gets disconnected for any reason, then ClientB joins the session, who's going to send the stack to ClientB? You should store the stack on the server and send it to the clients as they join. This will have also the advantage of preventing around with messing with the stack. And you'll probably eventually filter out commands on the server for any reason. So you should keep you server as 'the authority'. 

As far as I know, copyright laws around the world protect content for so long that any digital game that has ever been created is still protected. If you think the copyrights have expired "because the company who made it was shut down", think again: the company's IPs have probably been transferred to another company, or a bank that seized their assets. Unless the company has explicitly stated that they give up copyright and made their assets available to public domain, you can't assume the copyright has expired. Also you have to keep in mind something: even if the game copyrights have expired, if the characters are still used somewhere else, they are probably trademarked, which would still prevent you from using the sprites of the characters. 

The cup-and-saucers in the following image each have their local space, just to give you an idea, and the 'central' gizmo shows you the global space: 

I think you've misinterpreted the formula. You should review the Section 2.1.7 - The Scalar Product. The dot (·) represents a dot product (or scalar product (please use one of these terms because it's what it is)). The scalar product is defined like this: with vectors a and b, and scalar value s, s = a · b = axbx + ayby And, as defined, it gives a scalar, not a vector. 

The image is composed with square sprites images; here is the colour coding (note that the first row, and the arrows, are just to illustrate what the original sprites look like): 

I would forget right away the option to create the sprites in order based on their coordinate as it will create a hell for you because it's not a flexible design. You look like you need a common way to handle the drawing process. You can achieve this using polymorphism. I would probably create a interface, which requires children to have and , and would derive all the things that can be drawn on screen from it ( and in your case). When you're ready to draw, get all your in a single vector, and sort that vector based on the . Once sorted, call the method on each of your drawables. For instance, if you have something like these base classes: 

Detect the collision between Dude0 and Dude1. Is Dude0 or Dude1 having his flag set? No? Decide who's going down (confrontation) and set the flag for the 'losing Dude'. 

You might want to try and make sure you 'de-overlap' them one by one right when you create them. Or you could try and push them only further away from the centre, never closer to it. 

Now what is considered "in front" or "on the right side" is quite vague, so you'll have to set angle ranges. Here is a code sample that illustrate the process. 

Extrapolation is used mainly for movement prediction. It is not needed by the game server, but the game clients need it to display a somewhat realistic and current vision of the state of the game in order to give a smooth visual experience to the players. 

Input Logic pre-physics -- react to user input and prepare stuff for your... Physics simulation -- Physics engine update here Logic post-physics -- Stuff that needs to be done in reaction to the physics simulation, namely trigger reaction, graphics positioning w.r.t. physics, etc... Render/sound -- they're the result of the current simulation frame. 

estimating and predicting game behaviour non-game logic behaviour; e.g.: rag doll, objects destruction 

I would suggest you ask a parent/tutor to create it for you. It might be a bit too much to ask them to manage all your stuff for you, but you could try and convince them to help you for the legal responsibility (c.f. legally-binding agreement), and you use the account the way you need to (and don't do stuff that would surprise them :P). 

As the documentation specifies, the first 3 values will specify the 3d position of the axis for rotating the light, while the 4th parameter will specify the rotation around that axis. For instance, specifying (pseudo-code) will have the effect of a light that will be rotated 45 degrees around the vertical axis (assuming that z is up), coming from the pivot location. Now the fact that if you don't specify a value for the w (the 4th parameter), it does not light the scene, it might be related to the fact that your light is a directional light, or a spot, and the default 0 value lights in the opposite direction of where the scene is. 

That one is easy and, yes, even after many years as a programmer I stumble upon this kind of situation. In you change values held by your : 

I think there are other ways to achieve this, but I can't think of one right now, but this method will get you started. 

Reset the transform matrix () Translate the image to have its center at the origin () Rotate Translate to the desired location 

Keep in mind: totally not tested, maybe very flawed... dunno! I'm just suggesting stuff from the top of my head. 

One of the reasons why there are protections is that reading the game state could allow bots to know the state of the game and act accordingly. For instance, grinding in a MMO: if the "bot" knows what mob is around, it can send commands to the game clients to select the mob, hit it until its life is 0, pick up the loot, rinse and repeat. With this, even if all the changes to the simulation are made/confirmed server side, some players may cheat. The commands could be sent via fake mouse-clicks or key-downs, or via memory writing. This is one of the reasons why MMOs use memory protection. 

Of course, the arcs depicted in the picture would be the arcs linking the nodes in the graph. Now, from the question it is not clear if the intersection nodes are spots where the ships could stay, but as it is designed as a board game, I assumed that if there is more than one dash between two cities, it is because it costs more to travel from one city to another (for instance you need a 2 on a dice instead of just 1). With this in mind, I assumed that a ship could stay on these spots (but not on arcs). If it is not the case, however, the intersection nodes could still be used for navigation purpose between cities. This would give squarish ship tracks, however, so perhaps another approach should be taken for that. For instance: edges could contain data describing how they should be travelled (spline, series of dots, etc.). 

To achieve that, you create a translation matrix, and an inverse of that translation. You then 'sandwich' the rotation matrix in-between these other two: 

Your does not work because you're in a static method, and there is no static version of the method. To fix this issue I see this option: Pass in the object that should receive the new child (Main?) and call on that object (). From what I understand from your question, this is a patch that could work for you. We're lacking a bit of information on what you're trying to achieve in there. 

By not making sure that the object is valid, the could be . According to some documentation, it's very dangerous to dereference the iterator. You can't be sure that the part will be (in fact, you can be sure that it will not be ; it will be garbage, that's c++). Also, you're not using the parameter you pass to the function: To fix this, modify your code: