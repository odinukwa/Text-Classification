you might need to add to kernel boot options if you've converted a fairly old ext2 to ext4, it might be lacking online resize capability with the only solution - create new ext4 fs and then move your files there (sad, but true) if you've converted a fairly old ext2 to ext4, you might notice a .journal file at the root. it does not appear on other mount points, since hides it automatically. Sadly it canot do the same to / mount point - you need live cd or any other running system to hide this node 

This clearly suggests that it is capable of utilizing more than 4 GiB of RAM, provided that it is used with the CPU also capable of 36-bit addressing. It is also worth noting that paragraph states that . However it is further clarified, that maximum usable RAM is limited to 8 GB. This once again declares the difference between addressable and usable as I was trying to convey in the CPU section. To conclude this, I'd like to note that two related chipsets have in fact huge difference in memory handling. Lets inspect Intel® Pentium® Processor Extreme Edition 840. It does support 64-bit instruction set, but does not support PAE. Which means that if run in 32-bit mode, it will be unable to use more than 4 GiB of RAM (please, correct me if I'm wrong with this assumption). Lets check the datasheet and table . Even though that this CPU is 64-bit capable, it is still limited by it's address bus being 36-bit wide, thus limiting it to accessible address range starting from 0 to 64 GiB. Now lets examine a more recent CPU. Take Intel® Core™ i7-7700 Processor for example. It is advertised to support up to 64 GB of RAM. Now lets check the datasheet of it. Paragraph convinces us that this CPU's addressable range is from 0 up to 512 GiB due to 39-bit address bus. Note that it is still far from the theoretical 16 EiB range for a 64-bit CPU. Surprisingly though it further clarifies that this CPU does support up to 32 GiB of usable RAM maximum (contrary to 64 GB on the website). There is also an image of interest here : 

I have a hint how you might isolate what characters those are: Save the Word document to a text file. Use a hex editor to "view" the odd characters. Have you ever used a hex editor? You will see the hex values for the odd characters and then you will need to look these values up in a hex table. 

Exactly how did you "intentionally throw in an Ä in the folder name"? You need to do that as ASCII, not as UTF-8. Display your script using the "type" command; I am sure you will then see the UTF representation like in the error message. Your editor is displaying the umlaut for you as you expect. The type command will [most likely] show the umlaut as two characters like in the error message. Ensure your editor is saving pure ASCII or ANSI. 

The HTTP server does not just dump the posted data into a file. The request-URI needs to handle the post-data and do something with it. The URI is not a filename of a bucket for receiving the data. The URI needs to run as a process and handle the post-data as input. The URI could be a script which parses the post-data and handles it in some way. To provide your own POST-handler script, you will need to choose a scripting/programming language and create it. I suggest that you work through some tutorials. Here is one for Perl: $URL$ And another for PHP: $URL$ 

Sadly, mentioned tools would likely not support 64-bit applications. However it is possible to write a custom interceptor using mhook library supporting both 32-bit and 64-bit API. 

It does a good job illustrating the issue with memory shadowing by PCI devices etc. Also it suggests a way of overcoming this issue by mapping a range from real RAM to upper address range within CPU-addressable range. Thus reclaiming that hidden memory for use. Note that this remapping is done by BIOS/(U)EFI upon hardware initialization and it is exactly for this reason I did include BIOS/(U)EFI in bullet-list above. I have taken Intel products as an examples, but the same is true for AMD. Now lets discuss how Operating Systems are involved. The Linux kernel includes full PAE mode support starting with version 2.3.23 and it is perfectly possible to have more than 4 GiB of memory usable with Linux kernel on a 32-bit system. However be aware of an undetermined issue with 32-bit Linux kernel on a system with more than 4 GiB of RAM on some hardware (in my experience it has something to do with TLB shootdowns). Anyway Wikipedia has a good information on PAE support. Interesting is how Windows XP is limited to 4 GB, whereas Windows Server 2003 Enterprise/Datacenter SP2 is capable of full 64 GB. Same is for other Desktop-Server Windows pairs. As you can see there are many combinations among components listed and in some cases replacing a CPU or OS might help. It is much harder to deal with BIOS/(U)EFI or MCU since the former is proprietary and built-in into the system and not easily modifiable, the latter is built into the CPU or soldered on board. 

Try uninstalling and reinstalling display drivers Firstly, remove old drivers by navigating to device manager, and double-click display adapters, select the driver tab, and select uninstall for your display driver. Then go download and install the newest display drivers from HP's website 

I would return it while you still can. In my experience when a disk starts getting bad sectors it doesnt last much longer. As @dave said this may differ as each person may have a different opinion but I dont think its worth risking it. I would return 

If the computer boots with a boot disk then the hard drive is almost definitly the problem Also if you have to replace the drive and recover data this tool works excellent! 

You should be able to go to the applications tab, right-click on the application, and click Go To Process. I tested on my machine, In windows 7 this process was explorer.exe. I killed that process and it closes it out nicely 

You will see your missing folders/files which were hidden by the virus. navigate through your these folders and just copy the files in them to a new location. If neither of those work try this data recovery tool 

While specifying new rule's application path, Windows Firewall tries to substitute parts of the path with environmental variables like , etc. That's nice, but eventually it may come up with , which might be confusing for a system service, not running with any particular user credentials, but system. Try and find yourself that very application starting with system folder or drive root or whatever! That's the case for Windows Firewall which could not find any application to apply rule to and as such no rule applied after all. Try to avoid using environmental variables by specifying path directly. 

It is possible to capture all network traffic for a given application by intercepting Windows Sockets API calls. These are the tools that may help. 

After creating a rule targeting specific application, nothing changed as if my new rule was just ignored. That is if my rule says to allow, but default is to block, application is still blocked. Should I disable Windows Firewall completely, the application in question could establish connection. 

The last item does not relate to the issue directly, but I've added it for a completeness sake. In a nutshell, all of the above components have to support more than 4 GB of memory in order to succeed. Central Processing Unit Lets start with a CPU. But first it is important to note, that a CPU does not have any magical ability to use any memory at all. Instead it could just access any address within its addressable space. Now here comes the bitness-thing. 32-bit CPU is capable of accessing addresses in range from 0 to 4 GiB. This range however has to accommodate not only the available RAM, ROM, SMRAM, Graphics Address Remapping Table but also all the required Memory-mapped I/O and many more, which might require substantial part of this address range. As a consequence it might be perfectly possible, that some memory addresses were shadowed by those uses and therefore are not available for operations on RAM. In order to regain hidden memory it is necessary to extend the CPU accessible address space. In case of 32-bit CPU Physical Address Extension could help. Which allows addressing up to 64 GiB. 64-bit CPU operating in native 64-bit mode is by default capable of accessing up to 16 EiB, which is rather huge and does not require such tricks. But on the other hand it is impractical for a 64-bit CPU to use 64-bit addressing, so in reality they are still limited by their address bus to a lesser range than 16 EiB. Memory Controller Unit Initially it was located in Northbridge, but was moved onto the processor die by AMD beginning with their AMD64 processors and by Intel with their Nehalem processors. Even if a CPU with PAE is capable of accessing 64 GiB by itself, it still needs a MCU to access RAM. Simply put: a CPU accessing particular address gets its reply either from PCI device, BIOS ROM flash or MCU, if the address requested resides in RAM, and so on. It is not uncommon however for a MCU (be it in Northbridge or in CPU) to support much less addressable space than 64 GiB for marketing reasons for example. BIOS / (U)EFI BIOS / (U)EFI are also important as it is their duty to configure the hardware before anything can actually operate. Among other things they are responsible for mapping the entire processor addressable space with memory ranges of hardware devices, buses, RAM and so on. Interestingly it might happen that the whole RAM split in pieces and mapped at several available non-contiguous spots. The problem with BIOS is that it's developers might not expect more than 3 GiB of RAM usage within their system and as such BIOS will not properly map all of the memory to be used. Most likely this will not happen to (U)EFI. Operating system Operating system should also support addressing more than 4 GiB memory. To be more specific, it should configure a CPU to use PAE. Some 32-bit OSes are perfectly capable of using PAE and accessing more than 4 GiB, others have software-limit on maximum memory, even though they enable PAE for enhanced security (Windows XP being an example). Once again 64-bit OSes naturally do not have such difficulties and normally support more than 4 GiB of memory. Application The last point is from a different world, since applications commonly operate in a Virtual Address Space, I have added it for a completeness sake. Nonetheless it takes some additional steps while compiling for application to be able to use more memory. By default 32-bit application only capable of using 2 GiB of memory. The same 32-bit application could address up to 4 GiB of memory, provided that OS does support that and has enabled CPU PAE. More specifically, it could use up to 3 GiB of memory, the other 1 GiB would be addressable as common libraries and OS kernel, but not writeable (ultimately this depends on OS architecture rather than application itself). Again, 64-bit applications natively support addressing more than 4 GiB of memory and do not have such troubles at the first place. To put all of this into perspective, lets consider several examples. Consider Intel® 82945G Memory Controller. Intel website states, that it does not support PAE and is limited to 4 GB of RAM. Lets consult paragraph of the datasheet. It has lots of information. Most interesting is : 

I have an hp pavilion dv6000 laptop that gives me this error 0x000000f when starting up. So I tried to reinstall windows using the recovery partition and that makes it to 11% recovery and then freezes and wont go any farther. I have tried memtest and Ive tried booting with only half the memory but it still doesnt work. Any ideas? 

Actually I would say the problem is with the hard drive itself especially since you say it made a funny noise. In my experience with this issue 95% of the time the hard drive ended up being replaced. Some things you can try to verify this: 

KeyTweak does a pretty good job of remapping keys and it is fairly simple. Ill let you decide if its simple enough for your needs but this is the best solution I know of 

It will run those things fine. It wont be the fanciest or fastest thing in the world but for someone on a budget it will fulfill your needs. I prefer windows 7 to Vista but for the average user (from your question I would put you in that category) Vista will work 

As it says, since it does not support PAE, it is ultimately unable to remap PCI and every other MMIO above 4 GiB, therefore some of the memory will be shadowed and unused. Which means that even if it is used with a CPU supporting 36-bit addressing, memory above 4 GiB will still be unavailable and some of the memory close to 4 GiB limit will also be unused. Conversely, lets consider Intel® 82955X Memory Controller, which is related to the previous one, but it is specified to support 8 GB contrary to the previous one! Datasheet paragraph suggests, that it does use 36-bit address bus to the CPU, which is a good sign. Paragraph has further insights. Compare to the one we saw before: 

Proxocket written by Luigi Auriemma. It intercepts API calls and saves captured traffic as Wireshark-ready .cap file in tcpdump format. Nothing is more explanatory than an image provided by Luigi himself: NirSoft has SocketSniff application which allows one to capture a traffic of a specific process. A picture is worth a thousand words as well: 

After a long struggle trying to establish IPv6 connectivity with Windows box (and failing) I noticed that Windows Firewall blocks a lot of ICMPv6 packets. Closest predefined rule I could find does allow ICMPv6, but only for connections, which is too limited compared to recommendations from rfc4890 dated "May 2007" (which is way before Windows 7 was released). Of course I did expand that rule to as well as tried adding separate ICMPv6 rule — both successful independently. It does a little difference for usual network activity, but gives a huge benefit for tunnelled connections (IPv6 tunnelled over IPv4 for P2P IPv6 direct connections for instance), which hardly operate otherwise. Am I missing something here or getting it wrong? If that is "by design", what is the point in limiting this rule to by default contrary to recommendations? 

The umlaut is being stored as two characters in the script. That is why you see it as two characters in the error message: 

I would imagine, you could set this up to run using key login. I assume you are running a command remotely and not actually logging in as user deploy. If so, then you would need to expand on this answer. 

Like Chris said, DNS 8.8.8.8 is google. DNS 4.2.2.2 is also a public DNS (Level 3 Comm.). My provider also does not have a DNS entry for c206.hsr.ch, so we can assume your target host is on an internal school network only. If internal only, then no public DNS will ever resolve the address for c206.hsr.ch. You mention in a comment that another classmate uses google-DNS successfully. I highly doubt that google is resolving that address for him. I believe he has another DNS entry in his configuration (one can often enter two DNS servers in a network configuration). You could try digging deeper into the network configurations of working PCs for more details. Look for multiple DNS server entries in working PCs. Therefore I would conclude, in your VPN you are using another DNS, an internal one. I assume the PCs which work in the WLAN have a second DNS entry of the internal DNS server. MS Active Directory provides DNS; maybe your Windows-using classmates resolve the address with the help of Active Directory (?). Ask the IT support if an internal DNS server exists. Please connect to the VPN and run the commands ping, nslookup, host and traceroute (like in the OP) and provide us with the output. You might see a working DNS entry... 

I know that the recovery tool is available on the product cd that your Norton install came on if you have that and its also readily available for download. See here Norton Recovery Tools. I have not heard of or have experience with making a bootable device straight from Norton but maybe someone else has 

Try GetDataBack. I have had great success with this utility. I have also heard Recuva works good though Ive never used it personally As far as a diagnostics tool, here is a link to the samsung tool. Note: Ive never used this myself 

Try Firebug 1.5a21, $URL$ Its a know bug and they dont know why it does that. Also Ive heard that after reinstalling it it will work for a while but thats more of a workaround 

I dont think the partition is recoverable unless someone knows something i dont but a great data recovery tool that might be able to help you is GetDataBack Simply download it on another machine and connect your drive to that machine and select that drive to recover from, then you can simply copy it to the other machine. Im afraid that by creating that partition over it you may have overwritten it enough that the files wont be recoverable 

I donT find a /J option in the docs? Do you mean "jobs"? You can find out what auditing info is here: $URL$ We would have trouble recommending options to you. For example, usage of /mir depends on whether you want to remove files at the destination or not (?). Remember, if a file gets deleted at the source, you may or may not want that file to be purged on the destination. The options you end up using need to fit what you want. We donT know that. 

Are you aware of the opportunities which sudo provides? Is sudo cool enough to convince you to not use the same account? With the sudo log you could record exactly what each other is doing. You could each connect with your own user accounts and then use Then in your sudo log you would have something like 

You might have reasons for wanting to stick with the array; however, just appending a string would achieve your goal of building a command line to execute. 

-n option, don't print all lines -e 'script' The first -e script matches if a line starts with and the second -e script matches a following a semicolon. means don't match any semicolons and means at least one non-semicolon (won't find empty values!), which effectively extracts your value between the equals and the semicolon. The parentheses enclose a positional string which is referenced with . 

This does sound like virus activity. I would run a full scan of Malwarebytes and see what that finds. Other scans you could run include: 

If you insist on downloading crap the only way to keep it clean is to reinstall windows periodically like once a month or so or whenever it gets slow 

Try using system restore to roll back your computer to before you updated ICQ. Keep in mind this will restore all data to the date that you select including any instant messaging you have done since. The link above tells you how to access system restore. This link gives you step-by-step instructions. 

Im pretty sure the disk you are talking about is for recovery purposes. If you want to insure your computer against a hard drive crash i would say get the disk. I know that as a pc tech it makes it alot easier on us to get your new hard drive running if you have your own disks 

I would cut your losses, save your data while you still can, and replace it before it completely crashes. For me if a disk has bad sectors I go ahead and replace it cause as soon as the sectors start to fail you know that the drive is on its last leg anyway and shouldnt be trusted.