Not Fast Enough - BENCHMARKS UPDATE: After benchmarking your code, against my suggestion above, I found your code was faster than I expected. This runs against my experience with Locks, which I have, in the past, found to be slower than synchronization due to the double-lock process (lock barrier going in, and again when coming out). I was expecting the plain-jane synchronzation to out-perform the complciated locking, and I was wrong. So, I investigated, and have the following thoughts on the results: 

Alternatively, if you need to create the full array for other reasons, consider the slice and concat: 

You have presented similar code to this before, and while some of the recommendations I had have been implemented, others have not... ;-) This is fine, presumably you have your reasons, but the one that sticks out is the method, which is redundant.... As for naming, I have a few recommendations: 

Other problems related to code-conventions (like the upper-case B in , and D in are not as significant). Case statements in Java are 'fall-through', and you need to break unless you want the following statements to execute as well. Timer In Java, the right solution for any timing problem, is to use the library timer functions. In recent Java versions, the right tool is the . This service allows you to schedule tasks in the future. I would build it something like: 

Your regex is not matching the value properly because the character may not be mapping directly to the regular character in your regex. You should use the 'whitespace' escape-sequence in your regex instead of , like Unicode string literals in python should be escaped with either the or escape, but they are different: 

This makes no sense because since you have declared the ObjectMapper as an exactly typed value, you may as well have a constructor that knows it is production instances... no need to pass in the class: 

Note, in the code above, I have added spaces to the expressions to make them more readable. Now, with that value, if your position is 0, the sum to the left is 0, and to the right is . If you move your cursor to the right, the sum to the left is now the value at element 0 , and to the right is the . So, you can loop until you find the match..... 

Assuming the number of calls are appropriate, and you're not missing anything, the only alternative is that the while loop loops often. This indicates there are many collisions. Collisions happen for two reasons: 

Your TlcException is.... unnecessary. You may as well just declare that your method throws a plain . If it was me, I would at least make the a so there are not checked exceptions coming out. Further, the constructor does not take a message, and is all on one line... ouch: 

Still, I imagine there is some other reason you didn't get the job.... not this code.... and, if it was the code, then you may not want to work there anyway ;-) All the best. 

Just reviewing the method since many of the Node and other constructs have been reviewed in other questions of yours, and there's not much changed since then... 

For any robust application I recommend using an uncaught-exception handler. This handler should log the uncaught exception to a logical place, and it should (or some other exit code). This may complicate things with threads that do not trap their exceptions, but that is bad pracitce as well.... See the documentation for the uncaught exception handler, and some tutorials. 

They are not essentially 1-line statements. Your assumptions are incorrect. An is a statement, and a is another statement. Thus, you have two statements there... now, the code segment: 

Posting a second answer to keep things clean. I think I missed one of the important concepts in your use-case, that you are 'gating' the access to the resource from the resource-side of things, not the thread side of things.... If I were to suggest the following code, I think it would add to this 'conversation': 

But, if the is removed, your code will fail. If is added, your code will fail. Requiring that the user adds stages to their stream is an invitation for problems in the future... 

Your instincts are good here, in almost all respects. Your basic algorithm is good, and your suspicions that you are changing too often between String an char is also good. Using the StringBuilder is the right thing to do, well done. Breaking the String in to chars is also good, but the way you do that is inconvenient.... In part that's because there is a convenient function in the standard Java class that you will find useful: With that function, you can throw out your function, and simplify the whole thing down to chars, strings, and ints.... something like: 

Threads were expensive to create in terms of time scheduling many threads was hard concurrency is hard 

is an array of the group values, and it is pulled from . is a constant defined in the class. is declared as an array in the class, but has extra data. 

Finally, I did not like the method you chose as the core await container... Instead of the I prefer the . I cannot defend that preference right now though. Not sure why I prefer it. Still, having thrown all that criticism at you, here's how I would probably do it. Note, the logic change for the await.... You have a single static lock. What I suggest is to create a 'completion listener'. In the case of awaitAll, each Event has it's own listener. In the case of awaitAny, they all share a single listener, so there's just one notification. The system below makes each an independent operation. The only signals are what's happening that's relevant to the completion service. This is untested, so go through and understand it well ;-) 

Just a thought, probably neither more efficient, nor more readable for a non-familiar person, but you do see code like that, and it's helpful to know your alternatives. 

Note that the fiddling you do with the newline is necessary because you can't "reverse" it too. Your mixing of both and in things like and is confusing. Use one of them, not both. is probably the better option. Also, you should be adding to the format strings (you don't need to do that for - but you can if you want). There's too much logging! You're not inspecting the error value for , and you're not closing the which will lead to "CLOSE_WAIT" sockets in the OS network stack. In general, though. I would rationalize it all down to: 

or, since you have primes already from your sieve, you can significantly restrict the data-set by doing: 

find the highest-set bit in the value with (which will be '32'). Note that this value will always be a power-of-two. find the power-of-2 larger than this value using the left-shift operator: (left shift by 1 bit, to get 64. get a mask from this value by subtracting 1. 

Cursors are a form of iterative processing that defies the design-goal of SQL to do set-based operations. As a general rule, if you need a cursor to do something in SQL, then you're doing it wrong, or your database design is not optimal. Your query is also using a temporary table for a single select result, which is also often an indication that you're doing things wrong. In your case, you should use a set-based join, remove the temp table, and select direct-to-output the results. The query would be something like: 

The Best-practice threading policy in Java is now to use the ExecutorService implementations found in the package. Before we go there, though, your current code should be improved. The method: 

I have read the other suggestions with interest, and, as a person who is somewhat new to Python, I was wondering whether I was understanding them all correctly. The suggestions I see are clearly significantly better than your current code, but are missing an alternative algorithm that would make the performance significantly faster. The solution is attainable in \$O(n)\$ time. Alternative Conceptually, the problem is simple: 

The methods take some input parameters that are not part of your specification. This is to ensure single-responsibility is maintained. The exception handling is still not great, but would need to conform to your overall system. Consider the methods... receiveFile: 

and two variables to contain the previous char and the previous char count, you could just go through each character in the string, if it's the same as the previous char, you increment the count. If it's different, you add the previous char and it's count to the StringBuilder, and reset the previous and count to 1. Then, when your loop is done, if the StringBuilder is smaller than the input, return the StringBuilder version. This type of compression is called 'run length encoding' by the way. 

That code takes each input word, and returns a Map keyed by each unique word, and each word's value is a list containing each instance of that word in the source. Now, you can use the length (size) of the value list to return your data with: 

it can use any number of positive-valued strides to get to the destination it is just a single recursive method. it uses an array of primitive ints to accumulate the current combination 

Creating a new Random inside the loop is a poor use of the class. Create a single random Instance, and reuse it: 

You should change the method name to trySetCRUDEnabled(...) what if the settings are currently enabled, and the user calls trySetCRUDEnabled(false) ... it makes the logic hard to understand.... in fact, it's broken because now it does not matter what the security-level is ... ;-) (you are changing the code in haste, and making mistakes). 

You can actually do something similar (though more complicated) for the initial two conditions as well.... ( and ) but for just those two cases, it may be simpler to leave as-is. 

The above will work because regex will favour matching the full before it starts on the . If you want to make it explicit (and I would, for the record), you can force a zero-width word-break anchor () in there, and write the pattern as: 

There are a couple of things in here that concern me.... but, the most concerning is: Use to compare String values Code like this: 

That findAny returns an Optional, which may, or may not contain a key, but it will only ever get there if it did find a key, because the stream is infinite.... So, we can just use it as our successful find. But, what about the multi-threaded requirement? Well, that's easy, just add as the first stream step. That will use all available CPU's and run part of the stream on each. Wrap that all up in a nice function, and you get code like: 

Similar things can be done with a Date, or Calendar instance from earlier Java versions. For a real simple 'hack', though, you can also do.... 

I have put together a simple SQLFiddle that shows this select in action. It assumes two sets of users, (some male names, some female names), and it puts the different users in to different MAIL_ID's. Once you have swapped out these nested statements, it will significantly shorten your query.... Your handling code though will have to change. Getting a CLOB back from the view is a big change.... and it is best to handle that in a different way.... Edit: About this operation as a general problem At an academic level, the problem you are experiencing is because you are doing a non-relational operation in a relational database. Data in a relational database is treated using set arithmetic. You have sets of data that you can intersect, union, filter, and otherwise manipulate. The problem you are tying to solve in this question is the conversion of a set of values in to a single merged value (with internal consistency requirements). This type of operation is not well defined in set theory. The standard/recommended mechanism for solving this problem is to export the data set in to an external application, and process the data from there. Any system you use in an SQL query to remove the set-like nature of the data is a 'hack', and that is why you are unsatisfied with the result you are seeing. The right solution is to not use SQL. 

With that tree, you can then compare matching values to see if they exist in the tree. To see if they exist, you: 

Note, the recursion is clear, the decision making in the recursion is clear. There are no Function instances, no Eithers ... either, etc. The problem is conceptually simple, but all I see is over abstraction. What is unclear is whether it was you who introduced it, or the interviewers. 

I know it is a minor nit-pick, but it does make a difference. On that note, you had better make sure that XOR_KEY is always positive... a negative XOR_KEY will cause the result to be negative, and break all sorts of InputStream readers. Now, you say the key should be as long as the message... that's not true. Even some of the best algorithms use 2048-bit keys (256 bytes). and many of them use much less (16 bytes...). Additionally, you hint that you know that storing the key the way you do is incorrect ... It should be passed in as a constructed value or something, and not hard-coded as a static variable. What you have is more than 'adequate', it is neat, and appears to be fully accurate... but, in order to be good, or great, it needs to do the bulk-operations... 

Regular expressions can be a good way of processing text input in situations like this. Your current process finds every digit in the input string, concatenates it together, and then parses the result. I doubt that this is a good solution because it makes examples like: "There are 10 people arriving at 9pm" parse as . Is that what you want? Even then, Regular expressions are probably a good solution: 

If your collector is used on a concurrent stream, there is no way for you to determine the order of the combination function calls: