I've got two racks, one each in two colocations in different cities, and I've had two others in another colo before. Generally speaking, you pay so much for a rack, and that rack comes with a certain amount of power. You can get more, but you've got to pay for it, because the colo only has a certain amount of power to give out. If you look at their specs, they are rated in watts per square foot. This indicates not only how much power they have running to their building, but what their redundant power infrastructure is capable of. They have to provide generators to backup that much power, and they've also got to have battery banks to provide the gap between line power and generator startup. This is expensive, so making you pay for power is their way of recouping it. 

You're not running your ethernet cable through or near the power conduit are you? How's your ICMP loss in a % / thousand packets? 

Alright, I've got two comments. First, the one you want to hear (although you're probably not expecting this). Gamebook Engine ($URL$ sounds like it might be what you want, since you're essentially talking about a "Create your own Adventure" kind of process. Go to page 45 if you're installing on Windows XP, page 26 if you attack the druid. 2nd comment: You're probably going about this the wrong way. What you should really do is write a wrapper for this installer that is intelligent enough to know your platforms and has specific instructions needed for that platform. It's (maybe) more work, but it sounds like it will save everyone time in the long run. 

Checklists and scripting For every complex task, there is a checklist or a script that will save your butt. If it's good enough for surgeons and airline pilots, it's good enough for us. 

Right now, I'm the only admin at my company, so when there is an issue, I get an SMS & email from the Nagios server that monitors the affected host. I'm soon to be hiring a junior admin, and when that happens, we're going to get to do on-call rotation (once the person is trained and ready, anyway). My cell phone is paid for (as will the new admin's), and we have a certain flexibility in terms of when I come in and leave. As long as I don't abuse it, it works fine. We're a small company with 17 people and somewhere between 50-70 servers that runs 24x7x365 automated processes. 

I think at the stage we're at now, unless you're running a laptop with a configuration that writes the data to the swap when it suspends/sleeps, swap should really be considered "last resort". Your best bet is to put enough RAM in a box so that it never pages to disk. That being said, a partition is probably the better way, performance wise, though a file is more flexible. Just make sure that it's on a 7200+ RPM spindle. 

Do you know what changes you've made to it? If so, the FAI ($URL$ looks to be full featured enough to "clone" a config, as long as you know what the config is. And honestly, you should make it a point to document a config to the point that you can use a tool like FAI anyway. 

Not really what you asked, but you might want to investigate running a Squid proxy internally there. It will at least cut back the duplicated traffic of everyone going to CNN, etc 

you can run "bg" to run it in the background. "fg" moves it to the foreground Note that bg and fg take job #s instead of PIDs, so if you've got multiple jobs running at once, use the "jobs" command to get the job numbers. 

Assuming you're not using an unlocked iPhone, neither of those devices you listed have AT&T as a supported carrier. I'm sure the iphone could roam onto those other networks, but what that would do to your bill, I have no idea. 

If you're familiar and comfortable with Windows, then run it on a Windows server. There's no major performance drawbacks, and you apparently aren't having problems with your current install. Why change what works? 

I'm answering this, and I'm making it a community wiki, since I am copying and pasting from an existing document. For the record, I use Amanda Enterprise as my backup solution, and I don't use the tape encryption that it provides, for the very reasons that you mention. I was researching tape encryption, and I came across a great whitepaper from HP talking about LTO-4 encryption, and included are many possibilities for key management. Here's a basic rundown of the available options that are presented: 

Do a mysqldump of all databases into a dated file, like servername-alldb-20090603.sql You probably shouldn't worry about your php.conf file unless you've got special things setup for some software you're running. 

Running my own DNS servers would require: 1) Redundant highly available infrastructure 2) Multiple sites for disaster recovery 3) In-depth knowledge of DNS service configuration and protocol I have the first two, but not the third, so I use EasyDNS Edit I should also note that this only refers to my external internet-facing DNS. My internal DNS is hosted on my Windows Domain Controllers. 

Hrm. That's interesting. What performance are you speaking of? WAN network performance? That might point to AD syncing. LAN performance of the machine being synced? That would make me question your AD size. LAN performance of the local DC? I'm not sure where I'd go with that, honestly. Or is it just taking forever? If that's the case, it may be inadvertantly querying a remote DC across the WAN. 

Question 1) Can I host it in one of the cloud services? Yeah, absolutely. It doesn't really matter what platform you're talking about, either. Win/Lin/etc are all able to be hosted. The Cloud Computing group in Google Groups has a good list of cloud platforms, if you're looking for options. Question 2) Will the cloud service be reliable over a long time? That's a harder question to answer. The end result is that we won't know until it fails, which leads to the logical conclusion that you should select a provider with a strong background of service and dedication to clients. One of my biggest concerns is making sure there's an exit strategy from whichever cloud you select. If you're rolling in the bucks (which nearly no one is), consider using two cloud providers much in the same way that you might have, at one point, considered using two data centers. If one fails, you've got a standby solution in short order. 

I would add the additional requirement of CAT-5 color coding standards, if your group adheres to them and will be at all responsible for maintenance or support of the installations. 

So, some research has been done on this. According to SSD researchers Michael Wei, Laura M. Grupp, Frederick E. Spada, and Steven Swanson, who presented the paper, "Reliably Erasing Data from Flash-Based Drives" (PDF warning), quote: 

Evan is right in that you're limited by the bus on the machine. IIRC, that machine does have an external SCSI interface, so you could probably pick up a used external SCSI array ( $URL$ ), throw drives in it, and use that. It's not free, but it's probably cheaper than an entire new machine. 

This is an interesting question. The host file itself doesn't support wildcards, as you mentioned. It would be pretty easy to setup bind on the apache machine and get that to be the auth dns server and point *.vm correctly, but that's a workaround (even if it's the "correct" solution). There's got to be a way to trick nscd into it, but I haven't figured it out yet. Give me more time, and I'll update this answer Edit Alright, your best bet, without resorting to the simple task of filling your host file with an immense number of virtual hosts, or the slightly more complex task of configuring bind to auth for that domain, is to use this vulnerability to poison the nscd cache: $URL$ At least, that's as far as I'm going to go today. Maybe if I get bored later I'll check the source to nscd and figure out how to directly inject the info.