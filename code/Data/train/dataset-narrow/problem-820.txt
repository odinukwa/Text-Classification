The first parameter indicates the starting address of the memory block you want to assign values to. The second parameter indicates the value each byte of the memory block will be filled with. The third parameter indicates the number of bytes forward of the starting address to affect. For example, if then all your s will be thanks to twos-complement. Beyond there are functions that allow values longer than one byte to be assigned to each index of an array, as other answers have mentioned. Copy-Pasta Bugs Copy-paste is a useful tool for repeated segments of code. However, I always ask myself if the code I'm about to copy-paste would be better off in its own function. One of the goals of writing efficient code is to reduce the amount of repeated code. The copy operation in : 

Be sure to assign after everything is done copying, otherwise indexing through the changed will be troublesome, and won't actually grow the array the second time its called. Re-inventing the wheel If your variable is one-byte in length (EG: or ), then the loop where the array of integers is set to a specific value: 

Its easier to review code if its complete, so please include the class declaration and full definition. However, working from the top I'll make some suggestions. Parameter lists If your declaration (header file) has a data member , then member functions don't need it passed in as a parameter, namely 

To solve the excessive collision issue just ensure is always a power of two by using the bitshift-left bitwise operator and bitshift-right bitwise operator : 

That will result in undefined behavior once is accessed again, and it also leaks the original 's memory. So just switch it around: 

The one defined at or the one defined just before the ? The quick-fix is to rename one of the variables, however another thing I ask myself when I'm about to copy-paste is if there are variables I'd have to hunt down and rename like that. If so the code is better off typed from scratch, plus you get to think about your logic a bit more as you type it out. Indexing The difference between and is significant, but the data in that gap is not. Also, going past will give an index-out-of-bounds/read-access error on , so: 

Streams implement IDisposable, and should always be disposed of when used. Typically this is done with block. 

EDIT What I think Mat is getting at, is that this solution is localised to this usage, and may not be suitable in an application that frequently needs to generate parallel lines. If this is the only place in your app that you create parallel lines, then keep using it (YAGNI). If however you need to create parallel lines a lot, you could make your implementation a little more general. One way of achieving this could be through extension methods. Consider the following 

Generating Permutations In the Haskell snippet you referenced, is generating the a list of all the possible permutations of the numbers 1 through 9. I'm not aware of any nice way of doing this in C# other than hand rolling it. You can write a pretty short generic recursive function to do this. 

The point of an interface is to abstract away the implementation details from the client. has the method which publicises exactly what the implementation is. This is called a leaky abstraction. When writing an interface, think about what other implementations might look like. One thing that you do know about all implementations is that they are going to need a file path. An alternative interface might then look something like this 

should almost always be avoided. Try to return from async methods so they can be awaited by the caller. A should be returned from and have it's method called. 

There is an abstraction that will automatically have any config updates when injected, so you don't need . I believe it is scoped per request, so changes to the config will not affect in-flight requests (you may want to double check this). To deal with updating the , you can write a small, thread safe that will always return the same client for a particular base URL. This would be registered as a singleton, and could be reused for all the clients in your app. 

Cool question! In addition to t3chb0t's great comments, I would suggest using a instead of a . It has additional support for blocking and bounding so you don't need to poll the queue manually, and you can limit the number of "in-flight" files. This could be used to make sure you don't read too many files into memory at once. 

Performance Bitwise operators are significantly more efficient compared to modulo and other binary/unary operations. For example, since is -scoped a second variable could be declared as part of . So when a is constructed, and after in just set 

Made me wonder if your function could be called instead of copy-pasting its loop. In this case you made the right choice to just inline the loop, but it's something to keep in mind. 

The dark side of copy-paste is the potential bugs it introduces. The variable gets redefined halfway into your copy operation. That will confuse the compiler and throws a monkey wrench into your copy-probing. Namely, which should the compiler use use here? 

This heap will be used for A* search pathfinding in my 2D isometric game engine. It uses lambda functions (instead of or ) to allow me to dictate min-heap or max-heap more dynamically. It also uses lambda functions for , , and so that the search key can differ from the compare key (for example: sorting by priority, but searching by name). Typical use: 

This works because is already scoped to so every member function already has access to . Then there's the bonus of not having to make a copy of the array pointer each time, which speeds up your code a bit. Variable Names More of an aesthetic point than a functional one, but would be easier for user's of your to understand if it were or the like. Two reasons for this: 1) The name is typically used as for template parameter types, and 2) itself doesn't really express what the variable is used for. This means well named variables add the benefit of making your code self-documenting. Storage Space Only one decimal place precision is checked for in , so a is more storage space than is necessary. would work just as well and saves some memory (on most machines). Memory Management Your code s the block of memory it intends to use for after its been assigned to , namely: 

so it must be freed as an array with (not ) otherwise will also be a memory leak because only its first element would have actually been deallocated.