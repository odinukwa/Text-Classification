The most solid option seems to be checking for overshoot and correcting. Note: The simple code I provided doesn't account for the movement speed lost when arriving at each tile. 

The site you referenced also has these and other techniques in its tutorial section, so you should probably reduce your world size so you get a testable FPS and start implementing these optimizations. Also you should measure performance not in FPS but in frame time: The time needed to rendered a single frame. FPS is not good, because it is not linear. 

First off, I think using the GPU is not suitable. Your usage defeats what the GPUs are made for: One program running on a lot of threads. Also GPUs don't support intercommunication and conditionals very well. But your expectations are quite low. 20Hz for lets say 10 000 computers. Nowadays you can count with a 3GHz CPU, with multiple cores. For simplicity lets assume you only have a single thread for this virtual simulation. I am also going to assume that the Lua code(or the one of your choice) is 10 times slower, than compiled C/++ code(Can be improved with LuaJIT, but will be worse due to constant switching between computers and cache misses, etc.). 20 * 10 000 * 10 = 2 000 000 Hz needed to simulate your virtual computers. or 2 000kHz. or 2 MHz. And you can safely assume a computer with a ~3GHz core. Please bear in mind that due to cache misses, memory operations, and because you probably underestimated your instruction needs you will need much more than 2MHz, but you are safe as long as you don't need more than ~1500 times more power. I think this idea is viable performance-wise. I would recommend using Lua, so you don't have to reinvent the wheel, and have a solid base to build on. Its also easier to program for starters(if you want your players to program them). This is pure speculation. If you want a real answer, profile it. As to whether you should research further or not, you should create a simple prototype(throwaway), which will test both if your game is fun and if its viable performance-wise. 

as a quick response to a very open question you need to decide why you want to learn these things if it is to purely make games in your spare time why not have a look at unity3d if it is to become a programmer / gamedeveloper you should first learn the very basics of c++ $URL$ or any other language you may choose. after that you need to start thinking about which platforms you want to target and types of games you would like to make. then i would start to consider your options in line with DirectX or openGL but always keep the options open to things like XNA, monogame or other libraries there are thousands of tutorials out there microsoft has plenty of DirectX tutorials, and reimers.net has some also 

not sure when you are running Mouse.GetState() as this is required to update the state of the previous and current mouseState objects what i would be looking to do is 

draw each separately and place on top of each other with the tile i would try to draw in order(topleft to bottom right), or define the the specific layer it should be drawn to (you can probably compute this from world coordinates (or tile index) i would imagine the solution may vary from engine to engine but this would be how i approached it from an XNA / MonoGame pov 

there is certainly a change in thought process when working with game development. so some practice there would be a requirement but ultimately like any form of creative work a portfolio would be your strongest asset 

I think you are over-using the component model. While what you are saying could be accomplished and would work, the general way of doing this is making the camera a global thing. Sometimes it is just much easier to make an exception than to try force everything into a rigid view of "everything must be a component". So I recommend making the camera not a component but rather a property of the RenderSystem. There you could even have a list of cameras, and the RenderSystem would have much more control to optimize the way things get rendered. 

Where the last parameter is how much to wait for an incoming event( can be a pakcet, but can be connection or disconnection request too ) You can use the documentation as a reference. Edit: As per request in comment here is how should your main programloop look like: 

To clarify things a bit: I want to create a kind of database for my game, that simply is a class that stores all game-state information like object positions, player scores, etc. The main problem I am facing, that the whole game is to be scripted, to the level of the (lua)script controlling what members should the database have. The reason for this is that I want to create a game that gives modders complete access to the game via lua scripting.(its one of the core features) For this to be viable I need to be able to add custom elements to the database. I want to avoid using a 'real' database and roll my own solution. For example I want to be able to do the following in the script file: 

Using the Component Based approach (c#) i have created a debug object that gets added as component to the Overall solution it is able to handle all debug requests that i'm interested in and draw them to screen by passing an object to the handler i have then wrapped anything that it does within the compiler if statements 

forgive me if i understood your question incorrectly, i have given this some thought in the past and decided that i would create an Enum for each action, and map each action to an enum for the controller method and an enum for the button /key press this would in theory allow you to use both controller and keyboard (and mouse for that matter at the same time) all you need to do is code the listening method to return the correct enum set when asking for the mapping of an action finally when in you update loop that key is pressed you need to fire that event and have any component that is listening for it respond accordingly. personally i would just create a wrapper class to do this for you and have the components talk to the wrapper (therefore maintaining separation of concerns a bit more) 

articles generally are not liked in Stack exchange but this is my go to blog post when trying to remember this $URL$ 

you can convert the spritefont into a Texture2D (RenderTarget inherits from Texture2d i think) as described in this article $URL$ 

where _time is the time since last frame. although down side of this is that it will not map actual path accurately just be sure the ball is not so close as to confuse it with the current ball 

I would consider P2P a good choice because the average internet connection is getting better and better, in the future P2P latency might not be a problem at all. Also much about P2P depends on the specific implementation. There is also some architectures that combine P2P with Server-client. 

Just as the title states, whats the best way to expose current settings like resolution to my classes? (I know this might have been asked, but I couldn't find anything) I was thinking of the service-locator design pattern, but I am unsure, as I read that it can be abused easily.( I mean it might not fit this particular use-case ) 

This seems like an optimization question. As such the answer, as always is to profile it. If generating the matrices doesn't take too much time on the fly, then it is simply easier to do on the fly, as you don't have to write and export/import of matrices, and add it to your file format. And perhaps you could simply use other file formats natively and not have to bake your resources. On the other hand if your application is very very animation intensive, it may be worth it to move the matrix calculation to the baking stage.(Tough I would seriously doubt that.) In the end this looks like a premature optimization to me. If you are interested, then you should profile it first, and if the results say you spend too much time calculating matrices, then do it. PS: If you do profile it, don't forget to post the results. 

store the location of the ball last frame and draw that, or if that is too close store the location 5 frames ago alternatively if you know the direction of the ball use 

Personally i have created a secondary GUI Layer and have a single class (c#) that handles all draw calls to this layer information is passed in text format along with the sending object and the class organises the data before drawing it to screen here is an exmple of the output $URL$ 

what you code seems to currently be doing is trying to compare two states (that are at the same state) and comparing opposing booleans but you should post more code for us to be sure 

there are a number of Camera Tutorials around that will show you how to go about creating a Matrix that will automatically move your camera to a position that you determine all you then need to do is pass it to the Spritebatch and everything will work as expected what you need to be careful with is then converting a onscreen event to a world position $URL$ code from article 

i think mortal online released a map showing locations of player deaths some time back, however why not think of it another way, give a few companies a call and tell them what you are doing and if they are willing to help, tell them anything you learn you will share with them, i'm sure some will be more than willing to pass some free work your way 

There can be multiple reasons for the Debug mode being slower. One of the most likely ones(that affect performance the most) is that you are still linking with a dll that has Optimization off(you can still generate debug info, but make sure to turn Optimization on) The second is because when debugging there is a special memory allocator used, that is somewhat slower, tough that shouldn't have such a high impact on performance, unless the application is extremely memory-intensive. Edit: In my experience the algorithm that parses large sets of vertices and optimizes them for vertex locality is extremely memory intensive, so much, that it takes 20x longer in the debugger even in release builds. 

Edit: From the video it seems you are overshooting the position you are aiming for. There are three ways to solve this: 

where is the device resolution and is the size of play area in meters( in this case the latter is ) Note: This is just a very simple implementation, and needs some refinement, but I hope that you get the idea. Note 2: I assume you are using floating point numbers to represent coordinates.(should be the case already with lua.) Edit: In the example above (the position of the object) ranges, which means . So for example an object in the middle of the screen would have the coordinates 

Basically its what @DanielHolst said, you can use negative coords and expand in all directions. As for storing your loaded chunks for fast access and checking you could use , Just , then your code looks something like this: 

note this is untested and you may need to alter the order in which colorsNew is filled, but this should basically do what you require 

depends on the license the song is available under, Creative Commons license has many guises some of which allow for usage so long as you nominate artist. the various licenses are explained quite well at 'open game art' $URL$ 

taking a different approach i would look to do something similar to $URL$ essentially find what is below the line and generate a color 

it depends on what the output of distance(v1,v2) is if it is a decimal (float or double) over a vector it is likely that distancesquared would be a lot quicker 

I would consider looking into a procedural generation solution for these. this would include the 'stats',and could possibly include the image. when loading up the cards you are not loading an image but loading up a 'seed' for the card which will allow you generate any information required on game load. this would save significant amounts of hard drive space how the seed looks and works would depend heavily on the implementation of the procedural generation all the caching and threading answers would apply to this solution also 

use Texture2D.getData() to extract the colors array then use this array to create a new Texture and add a pixel on each time increment you should be able to modify the below to your need 

the code doesn't do anything with it i can also wrap the draw method like this also whilst it maynot be the cleanest solution (it leaves a empty component in release mode) it does allow me to ignore any if debug anywhere else in the project.