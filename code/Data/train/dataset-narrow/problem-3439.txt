To explain: backgrounds a process, meaning the call returns immediately, before the command itself completes. Shutting down the system usually takes at least a few seconds before the final move, which is to tell the hardware to poweroff (I'm not sure how meaningful that is on the pi -- so the may just be an irrelevant habit). The then refers to the ssh login, so that will then be immediately disconnected properly. The way the timing works out is that on the other end won't have stopped yet, so no snags. Beware: 

Have you actually checked that it gets anywhere near this temperature? I have not maxed one out all night, but I occasionally do it for 30+ minutes while observing the core temperature, and even after an hour it barely rises beyond 50C. In fact, it seems to me that it stabilizes at that point. This is in a 20-25C room, no overclocking, no heatsinks fans, etc. I may have done it with a B overclocked to 800 or 900 Mhz as well. You should explore this before you assume that running at 100% will cause a steady linear rise in core temp. I do not think this is the case; it is more likely to be roughly logarithmic and plateau. Also, damage due to temperature in electronics is primarily caused by either: 

The system you are trying to reach is running a firewall configured to silently drop packets. That is not a good practice -- it is better for all concerned that the firewall explicitly reject a connection -- and you would have had to intentionally configure it that way yourself. There is no system on the network using the IP address you are trying to reach. 

What's happening is that because you are running , you are going through the configuration again, but instead of using the TUI based , you get to do it line-by-line -- at least for whatever bunch of lines it's decided this "oldconfig" updating requires input about. I've noticed this can be quite a few even from one minor version to the next, and I have my suspicions it is a little bit of a broken feature (but then I avoid doing it this way at any cost). If you create a defconfig and use it via menuconfig, then compile within the same tree, obviously there should be no need for this at all (so the fact that it may happen is a clue to the fact that the mechanism doesn't work properly). If you later down the road want to use that configuration with a new kernel version, just drop it in and run menuconfig; it will set any new options to a default based on the presumption that you are going to go through and look for them -- or not, as you wish. When you save the configuration and exit, even if you haven't done anything, those differences will be there. One way to check what they are is to save a copy first then them afterward. That "expert mode" option is in menuconfig too; I think it is in the "General Options". If you select it there, it increases the number of other options available (in case you are unaware, the configuration mechanisms never show you anything and everything, they only show you what makes sense based on the current state of the configuration). Put another way, I suspect your are using that switch cargo cult style. It's pointless and will take you on a steeplechase. Because menuconfig does the same thing in the background, unless you like doing things that way (and other things such as eating glass, staring into the sun, etc.), don't. You should never have to. Just leave that switch out. 

If not, try and see what that says (if it says nothing, run again and check). In my experience, the dongle runs a bit glitchy on the pi -- used on another linux system with the same driver, it's fine, but on the pi it seems to drop the connection occasionally. Also, on the other system the little blue led inside stays on -- on the pi it blinks. However, if your software compensates for the occasionally disconnect, it is not noticeable and works fine. 

Maxing out all four cores on a Pi 3 for several minutes, I have not seen it go over 60째C. Admittedly this is without making significant use of the GPU, but I still do not think it should get anywhere close to overheating unless defective or abused. You could get a heatsink, etc., but it is possible to go far enough down this road to mask the real issue. I have a couple of defective MCUs (not Pis, fortunately) that when plugged in, immediately begin to heat up until they are too hot to touch, even when they are not being used for anything. By attaching a heatsink and a fast, 9-12V fan inside a ventilated enclosure, I can keep the temperature stable enough to use them (i.e., so they do burn themselves out -- a normal microchip should not be too hot to touch), but this is not how they were intended to be used; the reason I have two is the second one was a replacement from the distributor, who admitted the manufacturer said it should never rise over 45째C. Which is no where close to "too hot to touch". After the second one turned out the same way I gave up on replacements, they are < $10 items anyway. Point being, you might be able to "solve" the problem by cooling but first you should check how bad the problem is. Install () and run it in a terminal so you can see exactly what your processor core usage is. Let the pi sit at around idle for a few minutes; with a GUI going and no web browser open, etc., one core or another may constantly blip up halfway, but at least three of them should be at <= 10% usage. If it is significantly more than this you need to figure that out. If, after idling for a minute or so, command says anything more than 50째C with no heatsink or fan, there is something even more wrong and the Pi may be damaged or defective. If the thermometer icon comes on but reports a normal operating temperature (really, that shouldn't be more than 45째C at idle), there is probably just a glitch with the GUI. Apparently it can be disabled by adding: 

These are not obscure -- apache handles a very significant percentage of total WWW traffic -- so you should have no problems finding resources and support. However, the fact that they are used for very large commercial applications does not mean that they are inviable for very small scale things as well. They are designed to be very very efficient and the amount of resources they require depends on what they are doing. So if you are doing something small scale on the pi, they won't hog an obnoxious amount of RAM, etc.