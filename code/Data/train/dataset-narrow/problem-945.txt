There's a couple of nice alternatives for you. Extensions If you don't need to encapsulate the instances, you could make your methods extensions for or whatever you've extended: 

I wouldn't presume the metadata information gathered from reflection as mentioned by w0lf will be handled completely if you reference the Model property directly from the lambdas. 

I don't immediately see any efficiency issues with your code. It's simple and concise. But I do notice that you don't follow all the best practices for plugin authoring described here: $URL$ I guess you'll do something else than alerting ten times in production? ;) 

Makes sense, but you should DRY up your concrete factory at least. Forgive me my rusty Java, but something like this: 

I've done something like this a few times (a lot even), but most times it was a complete waste of time. You will probably not earn the time you save by not doing WebForms markup, even if it's terribly boring. If you have like 100-200 entity types to display in similar lists, it might be a useful path, but if it's 10 - go with good old aspx/ascx markup. If you don't need a lot of business rules and/or scalability in some form, go for markup only with SqlDataSource and WYSIWYG listviews. If you need a fancy UI, go with Telerik. Given you actually have multiple customers with different list needs for the same entities in the same product, this might be "the only" way, though. With regards to your code, it seems slim and clean enough. But beware when going further with this - you might get a lot of conflicting requirements. As you say, it's a good thing to separate responsibilities, so keep doing that if you really want to make something "re-usable". (It won't be, but still..) 

Notice that I replaced your setter with an method. It's ususally good practice not to replace an entire encapsulated collection using a setter. Although you can validate the entries in the setter, a property should not do much logic other than returning or setting privates. If you have a look at the collections in the BCL, they all expose an method and a method to empty the collection. The method also gives you the option of adding multiple sets in turn. If you need different logic when stuff is added etc, have a look at the template method pattern: $URL$ If you need multiple base classes with differing logic, you could combine the inheritance with the extension methods, or another base class. :) 

I don't know much about making numbers random enough, but I have some other suggestions. Instead of checking if a range of integers contains a number you can just check if the number is >= the beginning of the range and <= the end of the range. So you can replace this: 

It looks good! I only have some minor suggestions. You might want to not have the LINQ expression all on one line. Right now I have to scroll to see it all. An alternative is to use to create a range of indexes: 

There are magic numbers everywhere. If you decide to change the size of your board, you are going to have to change a lot of numbers. Normally you can just declare them as constants privately in a class, but because they are used by multiple classes I recommend extracting the magic numbers into a class. You shouldn't have public fields. The following: 

I think your version three is still better than my alternatives, but you might prefer one of them. is nice for replacing loops, and query syntax is nice for declaring intermediate values (like ) and replacing nested loops. But the method that takes a lambda that includes the index as a parameter is very nice for this situation. With enough practice you can get to the point where your code looks like version three right away. I rarely write loops anymore. I actually find them tougher to write because they make you focus more on "how" than "what". 

A method would be useful and more efficient here. You can implement your own or find it in a library. I believe all the Project Euler problems have a solution that is a lot faster and more memory efficient than brute force. So you can try to figure that out for this problem next. For the later Project Euler problems, brute force is not an option. 

If you can only change a bool once, and the entire purpose of a loop is to set the bool, then you should just exit the loop after the bool gets changed. There's no point in looping more than you need to, and you also don't have to worry about the bool getting switched back. So you can write your example like this: 

As a sidenote, I'd look for another name than "BaseClass". It doesn't say anything about what it does. 

Even though the code is short and pretty enough, I think you'd benefit from reading about the strategy pattern and state machines. Go ahead and google it for a wealth of resources on good programming techniques. You'd also be much more confident in how it works and how to arrive at those patterns by employing unit-testing and test driven development. (JUnit is a good start) Good luck with your assignment! 

I just re-read some comments and realize you need paging too. Add a private int page, and a private int pagesize, then add the multiplication of those to foods[i] in CreateButtons, and swap foods.Length with pagesize. You can have as big an array as you want then. 

I would refactor it into a plugin that takes the content as an option. Then you will have two instances of "dialog controllers" each with its own events. Have a look at the "plugin with data" example in the jQuery docs. $URL$ You'd set it up like 

All good answers. I'd like to add my two cents to @deepee1's answer. If you keep the FoodItem class he provides (with a constructor), you can create a list of food items and then create everything else with completely DRY code. You can even easily move the definitions out of the code. Not to mention creating n different UI's with the same "logic". Here's what I'd do: (Forgive any mistakes, long time since WinForms :) ) 

AFAIK, you won't get client-side validation of VG2, but otherwise I can't see that it shouldn't work. (There is probably a client-side event and a method you could call to duplicate the behavior for the client) 

If you do this, you'll probably see some pattern emerge. I can already see two classes, or rather instances of a- instead of one. Maybe something like Strategy? 

Not entirely sure I got your schema right, but something like this should be possible. (omitted a bit of ordering, and I assume you only have one current year) 

The first thing you can do is assign all the properties for a thing in one line using an object initializer. The following: 

The only thing that changes for each statement is the index is incremented, so we can replace all of the statements with a loop: 

As D. Jurcau mentioned, you can move that first block of code outside of the if and else and only write it once, and you can handle the min or max checks with and . To combine the second block together you can write a Clamp method that makes sure a value is between two other values, like this: 

You can have a boolean as a parameter and select X or Y and Width or Height based on that parameter. You can declare the method like this: 

The braces should all be indented by four more spaces, and should not be indented more than the above brace. isn't a very descriptive name. I'd go with something like . Most of your loops can be replaced with LINQ, which is more concise, safer, and easier to read, in my opinion. For example: 

If you want, you can create a class to store a spell, its cooldown, and its cooldown number, so then you would only need to create one array. You can use modulo arithmetic to make sure a number is within a certain range. can be written like this: 

it won't get rectangles that are at the exact same X position. But that won't matter if it's guaranteed that none of the rectangles overlap. Then there's this code right after: 

Calculating and can also be done using loops. There are LINQ methods to make this even easier. This requires . 

Why does have three parameters but only use one of them? should be declared inside the loop because it's not used outside of it. You can assign it on the same line that it's declared. 

You can get rid of a lot of repetition in by storing things in arrays and accessing them by the . You can set up your arrays like so: 

This makes closed for modification (cannot change price / individual price), but open for extension (can add to price). (Naming and structure in my example could probably be improved, but it serves the purpose) The behavior is still possible to modify, though, so an even better solution would be to have some collection or set of rules you can add to, so you don't accidentaly override without calling . 

Here's a C# version using a cross of the template method pattern and the collector pattern. It'll pick up any issues from any derivative implementing the AddValidationIssues method. 

Instead of wrapping the proxy creation in a concrete service proxy implementation, I'd write a concrete service factory instead which in turn uses the ChannelFactory. The service factory class could also use an interface for creation, so you can have multiple concrete factories. $URL$ That way your code can continue to depend on the interface only, and you can change the way the proxy is created without writing concrete proxies. You could also have a "local service factory" which doesn't go over the wire. Usage would be something like this instead: 

This might be off topic, but if you use switch statements for more complex functionality, you should read this before going further. $URL$ 

Entity Framework implementation assembly References Model and the Entity Framework / System.Data.Entity assemblies 

I'd use enums. My suggestion presumes you are able to refactor your existing code a bit. If your control can be modified to keep the position value in one property of the following enum type, this will work. 

Property will expose the current value on postback by it self. You could also expose an event on your control that you refire in the ValueChanged event of the hidden field. 

Put the contents, or all of each if and foreach into their own functions. Unit test the functions. Put everything else into small functions too. In the end your main function should read like a small story: 

Overriding the property in modifies the behavior of . Which means you've broken the OCP. Besides, what do you expect to be if you have just set it to 10.0? (Does it even compile when you only override get?) What you could do is employ the template method pattern: 

Variable names should be lowerCamelCase, so should be . Method names should be UpperCamelCase, so should be . 

If you wish to keep the speed of your original solution and increase readability, there are many improvements you can make: 

Because rectangles with the same X position weren't matched before, won't contain , so if it has a length of 1, that 1 element will be a different rectangle, but only the original rectangle will get added as a group. In the inner loop, the body of the last only adds the initial rectangle, but doesn't do anything about the previously added s, so it's possible for the loop to add a bunch of but only add the initial rectangle. If you get a list of the rectangles ordered by their X position right away and loop through that instead of the original list, you can take some shortcuts in the body of the loop. Edit 2: You should add more descriptive names. I don't know what , , the nl in , etc. stand for. Short names are okay for lambda expressions and loop variables, but even then you should stick to , , , , or a letter that relates to the object. I think it would make more sense to use for a rectangle than . 

An alternative solution is to create a function to get take an item and get that item's sorting order and then use that in an . This method takes a collection of the tests for the front and a collection of the tests for the back and returns such a function. 

You only need one class, and then you can create four instances of it. Your "Spawn" methods can be extracted into a single method, with parameters to handle the differences. For example, because not the same for each obstacle, you can have that be a parameter or a variable in the class. 

Have a consistent parameter naming convention. has an underscore, but the other parameter names don't. I prefer to only use underscores for variables declared within classes but not within methods. should be lowerCamelCase. That is, . If will always be zero and will always be array length - 1, declare them in the method body. Don't make the method caller do unnecessary work. Use descriptive variable names instead of single letters.