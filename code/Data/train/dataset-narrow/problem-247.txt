Here the is representative of the network portion of the address, and the is representative of the host portion of the address, or as they called it back in the day, the "rest field." Combining that with what was said earlier about the most-significant bits, we have the following: 

This of course assumes that you don't want the user to be able to run any configuration commands. Another option is to make sure that when the user logs in and types they need to specify their privilege level rather than no privilege level, which defaults to 15. 

I've heard the term "route server" and "looking glass" thrown around here. What are they, and why should I care? 

According to the docs, you can bind multiple rate limiting policies to a single port, however once a matching ACL clause is found for a packet, the device doesn't evaluate subsequent clauses in the rate limiting ACL and subsequent rate limiting ACLs. As to setting EF, instead of doing that you may be able to commit to 25% of the 10Mbps and the rest can go to an EIR/EBS value. 

All loopbacks in OSPF are advertised with a 255.255.255.255 mask by default (see "LOOPBACK" network type), regardless of what you've configured the netmask as on the interface. If you want to announce your loopbacks with anything that's not a /32 you need to configure them as point-to-point ( under the Loopback interface configuration). EDIT: Since you've stated you've already done this, my next observation is that you've given the wrong network address for the command. If you want to announce the summary you'd need to announce it with the network address, ie Also be aware that any traffic to 172.16.0.0/24 or 172.16.1.0/24 will be blackholed. EDIT #2: @Christian's answer is also correct if you wanted to summarize just those two /24's into a /23: 

This would make sense ... for inbound. What about outbound? I can easily see this being a stupid bug, but figured I'd reach out to other folks to see if they'd seen this before. 

The second packet is sourced from an adjacent subnet which appears to have been learned via Quagga (this information would be relevant in your OQ). The interface has obviously received the packet, which is showing you, but it hasn't been handed up the stack to your application. The of each packet also gives some clues. Why is the second packet so much larger than the first? Does it contain additional information that your application is not parsing correctly? Also, the fact that the interface is in state is also problematic - it should be in the state. You could try to bridge and together (which is how interfaces are traditionally utilized), and then move 201.1.1.1/24 to the newly created interface. 

Now if you set up peering (also a colloquial industry term**) with AS6501, this eliminates the need to get bits from you to AS6501 via transit and vice versa, thus reducing your cost, AS6501's operator's cost, and also usually results in reduced loss/latency between your networks. Everybody wins! Now the path looks like this: 

Ethernet relies on a destination MAC address for frame delivery. The source MAC address will be the MAC address of the outgoing interface which sent the frame. This outgoing interface could be that of the originating node, or of an intermediate router between the originating node and the destination node. The "neighbor discovery" you're referring to, on an IP network, is the ARP process. Using the term "neighbor discovery" is somewhat of a misnomer here, because there could be multiple devices on the same physical segment that the end host or node is connected to. It all depends on what source host wants to send data to what destination host. All hosts will maintain an ARP table which is essentially a mapping of IP addresses to MAC addresses, which the host will use to send frames to, including that of a gateway, which is used to get traffic off of the local segment. I would suggest reading more about how ARP works on an Ethernet network. This is essentially an on-demand process that is used to determine the destination MAC address (which is used by Ethernet) that is associated with a given destination IP address in order to pass frames from one host to another. LLDP is used to provide additional information (other than information that would normally be obtained via the ARP process) between two directly connected nodes, whether it be switch to switch, host to switch, host to router, host to host, etc. 

FYI most of the open source routing daemons perform well at the control plane but how much throughput you're going to get is going to be largely dependent on how well you tune your OS and which NIC's you decide to put in the box. I would agree with the recommendation to look at Vyatta. BIRD and Quagga are also options, if you also need the box to participate in an IGP in addition to BGP. Quagga/BIRD both may do OSPF decently but AFAIK if you need ISIS many of the open source routing daemons are still working on that. 

So now the client's state of the connection is gone, and the webserver's TCP session is in . If the client used the "next available + 1" ephemeral port criteria, and used the same ephemeral port that it used previously to connect to the same webserver while the previous session was still in on the webserver, there would be a problem. Regarding the blocking of everything outbound but 80 and 443, that's again up to the person that manages the equipment at the edge, not the carrier. Carriers simply just don't do this. If I'm feeling like an extremely cautious or paranoid admin and I was managing the network infrastructure/WiFi in a highly public place, I would likely do the same thing. NAT is not a means of security. The ephemeral ports chosen for NAT can be and sometimes are obfuscated for security measures however, as you've noticed; an attacker can in fact do nefarious things if they have a means of easily guessing the next ephemeral port used in a transport-layer flow. 

It likely has to do with how the TCAM is programmed (see edit below - Brocade refers to it as CAM). I'd definitely be interested to hear why adding a completely separate ACL (vs just an entry in an ACL) would require you to "reapply the ACLs". Do you have a source for that quote? If you don't have an SE assigned to your account, I do have contacts that I can ask and get clarification on this. While not Brocade, I have had experience with vendor hardware where modifying an ACL "in place" would cause certain rules "further up" in the ACL to be completely ignored/stop functioning. Until the bug was actually fixed, the only workaround was to delete the ACL itself, and then recreate it with all of the rules before applying it to any interface. Edit: Turns out my original thought was correct - from NetIron documentation: 

You would need to create an ACL to filter the ICMP traffic (edit: referring to ping here - it's generally not advisable to filter all ICMP), and apply it to the desired interfaces, including the management interface. You would specify host addresses that match your router's management interface, as well as any addresses of routed interfaces. 

This depends on what OS the VM's are running. If they're running Linux or some other UNIX variant you can use to accomplish this. If they're running Windows (XP/7/8), whenever a new IP address is added to an interface, Windows will send gratuitous ARPs for that IP address for duplicate address detection by default, so you may be able to get the MAC address that way.