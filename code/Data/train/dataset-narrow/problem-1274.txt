Your friend is suggesting you have a class that does the common work, and then subclasses to handle specialized work. This is really core OOP. For example, your base class (say, ) might have an method like this: 

Layouts. Your biggest savings (in terms of line count) is going to be had by inflating XML layouts. By hardcoding dimensions in Java, all your sizes are going to un-scaled (so you're saying margin 30px somewhere - that's going to look wildly different on different screens). If you use XML layouts (per #1), the system will scale those values for you (assuming you use ). There are also ways to convert (e.g., ). Modularize. The upload and file creation logic, for example, would probably be better off in other classes with an entry point in your (e.g, ) Nest less. That for example might be more readable as a member, or at least pipe its functionality through smaller, more modular methods (instead of writing all the business in the overriden method of the anonymous instance, write a logical method on the (or a support class/instance) for that does the work, and the pipes to that method). Inconsistent variable conventions. Sometimes you prefix with , sometimes you don't - pick one or the other, but don't mix. Also variables like and are obvious candidates for replacement. 

Instead of sending a new network request every 2 seconds, I'd send it 2 seconds after the last one was complete. Put a method in to initiate a new request in 2000ms. You also don't need to run your time like that - has methods like and that'll handle that for you. I'd probably use a networking library like Volley or OkHttp instead of doing it manually, but honestly what you have is probably fine (although you should probably do more to anticipate and handle failure) 

I have a generic function that returns a list of objects based on the name of the desired type of object. This has let to an enormous case/switch statement that delegates out to the specific functions for the given type. I'd like use reflection or something similar to avoid this huge case/switch. I can't directly cast from the child types to . Here's the case/switch 

I'm fine with the performance of the method, as it's only called once. I'm mostly concerned with the performance of . 

Here's an example of one of the delegate functions. The delegate functions are different enough where it's not feasible to merge them into one function. It gets all the applications that are mapped to the parent record. 

I'm trying to create a grid of settings for the user to edit. I'm using a at the moment, but I'm open to alternative solutions. My two big issues are that I don't love the look of the property grid. It looks overly complex for the small number of properties that can be edited. Also, I dislike how verbose it is to add a new property. Which brings me to my second issue. The code for and are 99% duplicated. Is there a way to make them use a shared function (or something similar) and just pass in the name of the log? I also welcome any general critiques of style. I come from a Python background, but I'm trying to get in the habit of C#'s idioms. 

I'm working on implementing a library that can read/write from FoxBASE files in C#. I can't use ODBC for this, because it's not supported in .NET core. I've got the reading working, but it's incredibly slow. I've tried doing some profiling on it, but the performance report doesn't list specific line numbers or function names, so it's hard to tell where the bottlenecks are. This is the table class I have so far. 

Classes are usually named using PascalCase (you have lowercase). Also, convention is to use the word "Activity" when extending an Activity, so your class should probably be . The prefix is generally reserved for setter methods - methods that update a variable value and often do some pre- or post-processing work around that update. I would probably call something like or . You could break into multiple smaller methods. You probably don't want that whole method body in the block - figure out what's going to potentially and move the rest out. This is a bit of a nitpick and isn't critical for a fairly small function like this, but it's a good habit to get into. is a bad variable name - it's not clear what kind of object is being referenced. Your code might be a little easier to read with less nesting. I'd probably move the functionality in the to its own method, and call that method in the . Why is the variable and not a member variable? It's OK to do this, but there doesn't seem to be clear reason - you're using member variables elsewhere. Again, not a critical issue, but Android convention is to prefix variables with , so would become . Why is public? Always be as restrictive as possible. will default to so you don't need to set it. If an error is thrown, do you really want to print the stack trace? This might be fine if that's what you want, but I suspect that's either the IDE's decision or the result of a copy/paste... What error might be thrown here? What could be a possible source? What do you really want to do if that happens? If you're not using any methods, you don't need to cast it - returns a , which has a method, so the cast doesn't do anything.