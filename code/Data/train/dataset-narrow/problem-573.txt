is able to create the tablespaces. You can even change the location of the datafiles if needed. Check the documentation for more information since there are many parameters with this tool (REMAP_DATAFILES and REUSE_DATAFILES for example). 

means undefined and is a special value. You can only compare it with or . If you want to use it with then you need to use something like or where has the value instead of . Consider to give it a default value instead of in your table to prevent this. 

The best is to use a special field like you do for the Person data. As soon as you need a value that is not defined by yourself as PK then you should think twice on using it as a PK. About your ZIP code. Not all countries have a single ZIP code for a single city. As long as you only need cities in your country then this is not a problem. 

Problem is that the can be 0 in the statement. Create a sub-query that delivers the and totals per and then use this to do the calculation if the sum of is not 0: 

There is no field in so Oracle takes the one from . I tried the but this gave me only that there is a . I presume that this will generate some kind of Cartesian Product between both tables that result in a list of all the names in is returned by the sub-query. 

SQL*Plus is a client that is already available for a very long time. If you use then it does not use the . It connects to the local database that is defined in the environment variable. If you use then it will search in the file to find out the location of the database. 

If I understand well then you read the information from the database and display it. The user has the possibility to change it. The fastest way is to compare the information that you read with the information that you get from the user. If there is a difference then you update the information in the database. 

Do not see the problem. When somebody enters the email address a second time then this happens. Nothing to do with replication. This is what the is used for. If this error would break the replication then I do not understand how replication could ever work. Every user could easily break the replication by, in this case, entering an email address 2 times. I am not an MySQL expert but I think that the doc relates to errors other then maintaining data integrity. Perhaps somebody with more in-depth knowledge of clustering can help you on how to configure master-master clustering. 

When you use the server name (DNS name) then a change of IP address will be used by your clients as soon as all DNS servers have this new address. Since you change your subnet you must be able to 'reach' this subnet from your clients. The only 'problem' can be that you loose the open connections. 

We also have a lot of MVs that are refreshed with data coming over a database link. Do you do an atomic refresh? If you do then switch it off. An atomic refresh does a while the other option does a . The last option is faster but (nothing for free :-)) when the refresh fails you end up with no data in your MV. 

You can start by measuring the size that this table has and the number of rows. If you do this every hour/day/week then you get an idea on the growth of this table. 

The first field is the primary key. The second and third field make up a unique key. For there is to possible. For I would use for minor, for major, and 'space' for 'normal'. For both those fields you can make a to prevent wrong values to enter. Since there are not many rows in this table it be read completely into memory so it will not influence response times that much. If you do not like the 'extra' primary key then you can also use: 

Normally RMAN takes care of this. It will only make a backup of the archivelog files of which it does not have a backup. The restore just reads the archivelogs that it needs from tape. 

You can create triggers that are fired upon insert/delete/update in the table to write the data you need in a separate history table. You can then later query this table to create your reports. No need to change the application that is now responsible for maintaining the data. 

Also be careful. Your can hold bigger values than 99.99. These values will give ###### as a result and also the value will be rounded on 2 decimals by the command. 

In the second one only the field names are needed. No use to give them an alias. Or write 5 SQLs in the form: 

The parameter is used by the Oracle network layer to do character translation between the client and the database. This way the client can display all the characters in the database in a 'correct' way. Your should match the character-set of your database when you do an export. If you export a UTF-8 database in US7ASCII then you risk to loose information when you import this data back into a database. Why? The UTF-8 character-set can hold much more different characters then US7ASCII. The 'unknown' characters are replaced by a single character. In the past I have seen this happening that we lost all characters with accents. They were replaced by a '?' if I remember well. If you import then you must be sure that the is set to the value of your import file. Oracle will then do the mapping to the character-set of the database in which you import. 

Just keep one table. Then replace the other table with a view on the table. Now you should be able to insert/update/delete a row in either the view or the table. Normally this should work. If the insert/update/delete in the view cause a problem then you can always create triggers on the view that replace insert, delete, and update (). Check the oracle documentation for more information about the triggers 

I assume that you run this on the server that hosts the database and that you have set the to the one of the database that you want to access. You must run the application. This generates a file that holds the password. Check the documentation for the exact syntax. It depends a bit on the OS on which you host the database. 

This is not really database administration. The way you do it cannot be done in most programming languages too. Calculate the discount as 95% of the drink price: 

The solution is a 'normal' solution to generate a unique key. It is used when the database has no sequence or auto-increment option. You can also use it to become database independent. 

It shows you how many sessions are there at this very moment. If you need it for statistical/historical reasons then you need to create a procedure, using this SQL, that runs every x-time and store the result in a table. You can also install the Oracle Diagnostics Pack. This has the Active Session History feature that logs every second and 'dumps' the active sessions and relevant information about each of them. This is however an extra payable option. 

If you have multiple control files then you can try to copy another one over this corrupted one. Otherwise you need to restore it from an (RMAN) backup. 

You want information based information that is in the field. Not even the whole field but just on and . Unless you have an index on that information the database will always need to read every row of the table to see if the row fits the criteria. Adding an index on as a whole will not help too. The can be bypassed with (if it exists) but the needs a specific index. 

I would go for a 2 step solution. I use simple SQL. You can use the right names and fields. First I would update the existing rows: 

You can have only one Flash Recovery Area defined by the . If you do not want to use one directory then you can go for where you can create and use a disk group that can span multiple disks/partitions. You can also go for if you use Linux. This is simular to . Create a physical group that contains multiple partitions. On that physical group you create a logical volume and mount it to a directory. 

To me it does. This way you do not have to change the table nor your applications every year. If you would use the same 'layout' as your Excel sheet then the years would become repeating groups which does not comply to the first Normal Form ($URL$ If you need to store specific information on your indicators the You could create a table for the indicators with that information. In that case you can replace the column with the of the indicator. 

All files that were backed up to tape and are older than 1 day are removed from the directory and freeing up the . When I do a restore the tape storage delivers to me the archivelogs that RMAN needs. 

This will make it easier to enter or remove a from a / combination. All 3 fields should make up the primary key to prevent a double entry. If you need the in an array then you can always create a view for that purpose. 

Give the right to create tables in the database and connect yourself as to the database. Then all the tables that you create there are owned by . PostgreSQL has a different approach on this then Oracle. The schema and owner are 2 different 'things'. 

Normally Oracle no longer uses the file anymore. It uses the in the directory. This is a binary file. Tio change the parameter(s) you should use: 

If (like you said in your remark) has 2 phone numbers then it is a 1:n relation. In that case you need to store the phone in a separate table. You end up with: Person 

Add the fields that you need to the first 2 tables. The third () will hold the primary key of and for every combination that you need. You are now as flexible as you want. No double coding of a or and when a new arrives you just add it to the table and you can join them to all s that you want. No need to change anything. 

So change the DBID and unique name (Check the documentation on these subjects) and check the configuration files of sqlnet (normally in the directory) for references to server A. 

When you know the names of the tables and fields then you are able to craft attacks on their database. The famous 'SQL injection' becomes easier when you know how the data is stored. At the same time you see what information they store. Like they say: Data is one of the biggest assets of a company. 

The goal of a role is that you grant all grants that you need to it. After that you only need to grant this role to a user (or other role). If you remove the role then all grants to that role are 'revoked' so you need to do nothing else. The information on the roles can be found in : 

Take into account that the size you get also contains the empty space that is allocated to the table. When the table was just extended and only 1 new record is written in this extension then the information is less correct. But given the fact that you have nearly 2M of rows per day the space per row will be quite accurate. 

You should be able to resolve this by copying over since the first one has a higher version number. Make a copy of in case it does not work 

Do not think that there is a script for this. It needs to be decided/defined before the data is entered. Otherwise it might block your application from functioning. Normally a table needs 1 field to be unique. Only if you create a table to link 2 different tables (for an N-to-M) relation then you need both the M and the N key to make it unique. There are exceptions but it is up to the designer to decide what field(s) make up the unique key. The data can grow and so can the uniqueness. 

If they have access to the tables directly with insert, update and/or delete rights then they can corrupt your data. If you prevent this by limiting the access-rights or by an MS-Access application then they can/should not be able to corrupt your data. About business rules. According to Wikipedia: A business rule is a rule that defines or constrains some aspect of business and always resolves to either true or false.. These rules can be defined in the database as but are more often checked by an application. For example a company can give a discount to a customer only in special cases. Or a client can only be deleted if it has no outstanding payments. If the business rule is checked by an application then giving somebody access directly to the tables with update and/or delete rights can corrupt your data. 

Oracle 'clears' the deadlock by killing the session that caused the deadlock. This is fully automatic. You only get message in the logfile and the user gets an error message. 

Postgres is a database system that can very well store your aircraft data. If you already use it for your geo-spcial data and you want to query this with the aircraft data than it is easiest and fastest to store them in the same database. This will also make your life easier since you do not need to know 2 database systems and you need no (difficult) configuration of a link between 2 database systems. 

Select the user information from and look at the . If the status is then the user was deliberately locked. If it is then it is locked because of multiple wrong passwords. If you have set the then the user will be unlocked after this time is reached. 

I do not know exactly what you mean by 'updated many times' but I presume that you mean that the same can be present in multiple entries. In this case I would split it but put the in the entity. This way you are sure that all is the same everywhere it is used in . The rule is that you put all fields that are identified by a single primary key in a separate entity. This way you minimize the number of updates when one of the fields that 'belong' to this primary key changes. If 1 entry has only 1 entry and 1 entry has only 1 entry then the separation is not necessary. The only advantages are: 

Using those 3 fields for a primary key is not a good idea (or did I misunderstood your question). There are 3 reasons for that: 

Replace the with the schema for which you want to create the primary keys. You only need to write the output to a file and check and execute it. 

Check the file. The parameter is defined there. On windows I found it in the data directory so I guess it will be the same for Mac OSX.