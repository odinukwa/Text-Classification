this will turn off the display, but only somewhere during the boot sequence 2) add setting to your I found the follwing settings here: 

You might want to read my answer here. It describes how to connect to ssh using USB tethering and your Pi. Bonus: you can even add android's WiFi hotspot to that solution and connect more devices. If that's not enough, you can use adb to forward your SSH port with and From my experience, you will need a recent adb build, which you'll have to compile yourself as described in my answer here. 

this looks very familiar. I work with a large variety of linux machines which run at more than 100 service providers, so it happens from time to time, that their network is to some degree broken, especially if IPv6 is involved. You see that immediately when using -- the domains would resolve to a IPv6 and freeze right there. All IPv4 traffic was working fine. for my purpose, I just need IPv4, so I disable IPv6 on all machines during installation like this: 

I have been using it for monitoring network traffic since a few years. it offers live observation (with ) aswell as traffic stats over time (hours, days, months). Download 200 MB though your setup and then compare and ) Update: Don't forget vnstat updates its database only every x minutes (see ) Another remark regarding throughput speed in bytes/sec: In my opinion, this is a hard task to do accurate. Network traffic (especially when wireless is involved) can be very inhomogeneous, i.e. it might transfer 1 MByte/sec right now, then suddenly stop for 1 sec and then do 2 MByte in the next 1 sec, then go back to 1 MByte/sec. If your tool (vnstat, ifstat) is looking at a 2sec interval, you'd never notice that it was stuck for 1sec. So the refresh rate (interval) should be much shorter, like every 10-100ms. That's just one example why this can become tricky. 

At those ranges Gigahertz comms (WiFi/Bluetooth) won't cut it. Check the Pi in the Sky project , which uses 433 MHz comms by default. Depending on your range requirements you might want someone with an Amateur Radio license for ARPS on your team. Another alternative is to use LoRA , which shouldn't need a license. Using a distributed system like UKHAS will increase your chances of actually tracking your balloon properly. Read this article by Dave Akeman for more : $URL$ All in all i would manage my expectations. Datarates even in the megabit range are probably impossible. 

Since consumer SD cards use top-secret Flash Translation Layers and actually have more capacity than advertised to remap bad blocks or for general wear leveling this is impossible via shred. The writes to a file might not end up at the same place where it currently exists on the disk at all. You have four choices : 

Synaptic is a graphical tool. It should make it easier for you to manage and search packages on Raspbian where plain apt is too confusing. 

As of 2017 , Chromium has been modified to use hardware decoding for video on Raspberry Pis. 3D acceleration has to be enabled seperately via raspi-config ("Experimental 3D driver"). 

NOOBS contains a recovery menu. Press the shift key to enter rescue mode. You can now overwrite your existing install. This operation is destructive , all your settings and files will get lost. 

So in general: I'd avoid switching an interface on/off (using / ) and rather select the network interface you want to use in your code. And have some extra code which periodically tests any given interface for connectivity, you can find some ideas for that here. 

I was shocked once I found out, that some USB cables would not provide as much power as others to the Raspberry Pi. We have an Android phone connected to the Pi, and when its battery is mostly flat and its browser is rocking on 4G/LTE, then your battery could be drained faster than it can be recharged by the Raspberry Pi. So I bought a simple USB power meter and found out, that one specific noname USB cable was really a bottle-neck - the meter wouldn't go any more than 700 mA. I am using Anker cables now, and the meter is somewhere around 1,3 A with the phone plugged into the Pi. In my setup, there is actually 2 USB cables: 1) is supplying power to the Pi from a USB charger, and 2) is connecting the Phone to the Pi (data via and charging the phone). Obviously the cable 1) has approx. 250 mA more load (the avg. current of the Pi). Also, I would like to mention these settings in found on the Pi: 

Shrink your second partition with gparted to eliminate free space and use dd to only backup the parts you need. I suggest using a gparted Live CD (based on Linux) to modify RPi partitions. You can boot from such a disk without touching your Windows install at all. This is much safer. 

Your project sounds feasible , but will probably involve some programming. You might want to check out the CompoundPi Python library which has been designed for this specific purpose . $URL$ 

No , you cannot use PCI cards with any Raspberry Pi. No , you cannot "bitbang" PCI over the Raspberrys GPIO. 

Use readymade remote-controlled sockets. They should be tested AND work already. The hard part is replacing the supplied remote with a cheap 433 Mhz transciever , which might need reverse-engineering , see here : $URL$ 

Neither Debian 7 (wheezy) or Debian 8 (jessie) support the Raspberry Pi3 in AArch64 mode. Debian 9 (stretch) will very likely support the Pi3 in 64bit mode , though. Progress can be monitored here: $URL$ 

The cleanest way is to setup or reconfigure the existing DNS server on your company network. You need to instruct your company DHCP server to point to aforementioned DNS server. A competent Windows admin will know how to do this easily with Windows Server. Most cheap SOHO routers should have an easy way to to do this via web-interface too. Some even manage the "fake" .local TLD by default ! Sadly ISPs often hide router manuals or rebrand COTS routers in a confusing way. If you get stuck persitence in the search for manuals will be needed. Alternatively , dnsmasq is both a DHCP and DNS server for Linux and makes this very easy. You can even run it on a Raspberry Pi ! $URL$ 

I suggest to configure your tools, to use a specific network interface. Let's say you are currently using to make some HTTP GET/POST to a web API endpoint. Just add the option to curl, to make it use a specific interface ( or or -- use to list all available interfaces) for the network request. 

If your mobile 3G/4G connection expired, the data volume is exhausted, or the prepaid credits have run out, the curl result will be something entirely different or not work at all. By testing for an expected value, you can make sure whether your mobile connection is still able to access http websites. You could combine my method with or just use a curl options to control timeouts. This method is working with approx. 15 different prepaid mobile carriers world-wide. Update: You might want to use (Show document info only), this will not download the http response body. It will save you a few bytes on traffic and is a bit faster. Check the response header for . I mostly use that as a "ping" to measure how fast http response is. It's not accurate, since your mobile provider might inject his message into the response body. Most of the time however, they are redirecting you to their own site and you'd get a response.