Burn the resulting image to a new SD card partition With a new SD card that has been partitioned already, use the following command where newroot is the actual root partition on your new SD card, eg. sda2: 

Create a named pipe to store the filenames to be processed. Run a command in the background to constantly read from the named pipe and process newly created files. Call inotifywait to react to create events on the bluetooth folder and then send the newly created files to the named pipe. 

For a cluster to be useful you need to have a task that lends itself to parallel computing, ie. can be easily split down into small independent chunks. One common example is compilation and anyone with a couple of Raspberry PIs with Raspbian installed on them can benefit from this by installing and configuring the 'distcc' package. Distcc speeds up compilation by sending out files to be compiled to the different slaves. For example, compiling the kernel on a Raspberry PI takes a few hours using 1 PI but a small cluster can compile the kernel in minutes. I know little about simulations and mining but I think they would benefit from a cluster but gaming probably not. If you still have to buy a number of Raspberry PIs then I highly recommend you get the latest model - the PI 3 B+ as it has a faster network connection and can boot from the network. However they don't all need to be the same model although the really early models are so much slower that they would add little benefit to the cluster. Interesting links: 

My hacking instincts tell me it might be possible to connect to the PI without taking out the SD card. If you know the network name and password that the PI usually connects to then you can setup a WiFi hotspot on your smartphone (or another PC if you have access to one) with these credentials to fool the PI to connect to your phone. 

Simple answer: yes. Long answer: Processor architecture does not come into it at all as the link between the devices is not that strong, ie. is it only a network link. That means adding another device will certainly benefit the cluster but if that new device is a lot more powerful than a raspberry pi then it will end up doing most of the work. 

From my reading of the specification it doesn't look possible unfortunately although I have not tried it. If you use the 'iw list' command you should get a lot of output detailing the hardware capability with the interesting section being 'valid interface combinations' which gives this output: 

The firmware capability will be coming from the kernel. Where are you getting the kernel from when using buildroot? It could be that you are using an old kernel that needs to be updated with the firmware for Raspberry Pi 3 (device tree .dtb files under /boot). A good example of the use of buildroot for Raspberry Pi is berryboot, see the code for it here: $URL$ Hope that helps. 

I don't like answers that simply say install a clean image as if the OP wasn't aware of that possibility and it also disregards the work that the OP has already done on their installation. So to answer your question directly, here's how to remove the GUI: 

This is not really specific to the Raspberry PI but I'll answer it anyway. By default, no, the output from commands in rc.local will not be logged but there are many ways to achieve that. One simple way is to log the output from rc.local to some file by inserting the following commands at the start of rc.local: 

Post the output of that here if you are still unsure if it worked or not. That should tell you why it didn't bring up the AP. Also have a look at what is in /var/log/syslog when you are trying to bring up the network. 

At least it is available on Raspbian that way but I don't see any reason why it wouldn't be available in the Ubuntu repositories. What I don't know is how well the game plays on the Raspberry Pi but that's another question. As for replacing the CPU, no you can't. It's not possible. 

You certainly don't need any connection at all to the internet for a cluster to work and I haven't seen any that require an internet connection. It's also possible (easy even) to have only one PI with access to the internet. One of the PIs could use wifi to connect to the internet and the ethernet port can be connected to the other PIs via a switch. You're right about a cluster having a master and a set of slaves but there are a few misconceptions about what a cluster can and can't do. For example it's misleading to say that a cluster of 100 PIs has 400 cores and 100GB of memory because those cores and that memory are not closely linked and cannot talk directly to each other - one PI processor (A) cannot access the memory of another PI (B) except to send a message out over the slow network stack and PI B then has to accept the message, decode it and respond in a similar way. There are still 100 processors each with their own private memory and each one still needs to run it's own operating system, although the code base for that can be shared over the network for ease of configuration. A few quick notes might help with your understanding: 

I don't think Kali has been updated to work with the Raspberry Pi 3 B+ yet so I suggest downloading either Noobs or Raspbian directly and installing that at least temporarily until Kali is updated. There's a lot more support for Raspbian anyway which is important when you are just starting out. More importantly, welcome to Linux, Stack Exchange and the Raspberry PI - I hope you stick at it and have fun! NOOBS: $URL$ 

The first line invalidates a lot of packages that are then removed by the second line leaving a much reduced codebase although it will not be identical to a Lite installation. You can also use the tasksel command to remove top-level tasks which will consist of a number of packages. 

tvservice -M is used to monitor for changes to the HDMI status, ie. plugging or unplugging the HDMI cable. tvservice -s will tell you the current status including whether the cable is already plugged in. It will return a hex value, the least significant bit of which tells you the cable is plugged in (value 2) or cable is unplugged (value 1). 

Technically I don't see why it wouldn't work as long as it was powered independently of the PI but it would be a huge expensive waste of money because it would be so slow. All USB ports and the ethernet port on the Raspberry PI share the same slow USB2 bus so it really wouldn't be a good idea to cram the USB ports with external hard drives. Having said that if all you want to do is to increase capacity even though it's really slow then go ahead but even then there are cheaper and more elegant solutions than this. A simple powered USB hub with USB hard drives is a neater solution. It would help though to answer one big question - why? What is your motivation for wanting to do something like that? 

and then try installing hostapd again. There was a change recently that required the database to be updated. 

Buy a better power source. The recommendation is that a Raspberry Pi 3 B+ needs a power source rated for 5V at 2.5A so one that is only going to output 1A is definitely not enough. Standard USB ports only provide 500mA (USB 2) or 900mA (USB 3). 

Attach a keyboard and HDMI monitor (much easier than blindly guessing) and then stop the hostapd service and start it manually by calling hostapd directly giving it your configuration file: 

I'm using several Pi models all successfully booting over the network: Pi 3 model B+ - it cold boots correctly every time. I do have an issue rebooting it that other models don't but that's another story. Pi 3 model B - seems to work perfectly. Pi 2 - seems to work perfectly albeit needing an SD card with bootcode.bin file. Another difference is that I'm using dnsmasq as the PXE boot and TFTP server. Let me know if you have other questions about my setup. 

Be very careful when using the dd command because a mistake of one character can destroy the wrong partition! Your dd command above has blanked (insert similar catastrophic word - destroyed, zeroed, obliterated) your root partition - is that what you intended? The best way to do this in my opinion is to use rsync to transfer the contents of both the boot partition and the root partition. First, partition the second SD card with a boot partition (100M vfat) and a root partition (rest of SD card, ext4). Then use rsync to copy the contents. With file system copying you don't need to worry about the respective SD card sizes and it's also a lot faster. For completeness here's how to use the dd command but bear in mind that you also need the boot partition as well because that contains the kernel that belongs with the root partition (specific kernel modules in /lib/modules). Also I recommend you use a larger SD card to transfer to. This is slow and dangerous so I highly recommend using rsync method above instead. Burn your root partition to an image 

The new Pi3 B+ is less forgiving when it comes to power supplies. Try a different power supply, preferably one rated at 2.5A or more. 

I don't see any obvious issue but I do see some differences with my setup that you might want to explore. For example, my option 43 text is different and that might cause failure. For comparison I've included my output of the same command (with different mac address of course): 

This is certainly possible. One way to do it is to install berryboot on the whole drive, use it once so that the script to fill the hard disk is run and then resize (shrink) the second partition to create space for the third partition for NTFS. Two partitions are needed for berryboot (or Raspbian, etc) with one being the boot partition and the other being the data partition. If you are already booting the Raspberry PI from USB then you will know this but you will also need to edit the file /boot/cmdline.txt to point to the correct partition where the berryboot files are stored. Typically this is /dev/mmcblk0p2 but if you are booting from USB it might be /dev/sda2. 

Yes it's possible and easy to install chromium-bsu simply by installing it from the standard repository: 

You can't have two root folders, no. However what you can do is have separate partitions instead of separate folders. You will also need to start a different kernel as well. To boot to another distro on another partition, edit /boot/cmdline.txt to point to the other partition and then edit /boot/config.txt to use the different kernel and then reboot. What I don't know is whether that is sufficient for RISC OS. You'll just have to try it and see. 

This will put the image in the current directory. Replace rootpartition with your actual root partition device, eg. sda2. 

It's possible but it would be much easier just to get an adapter which are really cheap (probably £1 off eBay). The possible way to do this is to remove the card from the Raspberry PI, setup network booting (this is not trivial but there are lots of tutorials around including on raspberrypi.org) and then insert the card once the PI has booted. The PI itself can then be used to format the card.