This is the ARP Announcement, notice the THA is . The Announcement isn't really "answering" a question, so the THA/TPA fields are ignored. In fact, the ARP Announcement still has an OPcode of , technically making it an ARP Request. So in a way, the ARP Probe/Announcement sequence does not have an ARP Reply -- only ARP Requests. And in that case, then the Ethernet SRC and the SHA always match each other -- but there is no THA in a Reply to match against. Question 2: 

Both sites have two /24 networks. If SiteA is configured to list out each /24 individually, SiteA would have something like this in its Encryption Domain: 

Additionally, you will want to apply NAT Exemption properly. Trying to do it with this catch all Static NAT will work... until you want traffic to flow from the Inside to the Outside interface. 

For each direction of a conversation, TCP keeps track of the number of bytes sent, and the number of bytes received. This is done using a Sequence number (to track bytes sent) and an Acknowledgement number (to track bytes received). For simplicity, I'll proceed as if the SEQ# and the ACK# are a count of packets sent (in reality, it is a count of bytes sent). In addition, we will only keep track of the conversation in one direction, we won't bother ourselves with the conversation in the other direction. 

This can be done using VRFs (or even VLANs). But again this is simply a guess, and no definitive answer can exist without looking at the configuration. 

When the ASA finds traffic on the interface that matches a source of , send it to the interface and change the source to the IP of the interface. 

If you are running code versions 8.2 and before, you will need duplicate licenses, one for the Primary and one for the Secondary in an HA pair. If you are running code versions 8.3 and after, you only need a single license, and the Primary and Secondary firewall in the HA pair will 'share' the features. This change is outlined in the 8.3 release notes, which you can read here: 

The Router made note of the mapping between initial source port and post-translation source port, and uses that to correctly return the response traffic to the correct host. Had the Router NOT re-written the source ports, both Host B and Host C's return packets would have been to the same destination port: 

Remember, the purpose of the algorithm is to avoid everyone picking FD00::/48 so they can abbreviate everything with the double colon. (Or other "easy" ones like FDAA:AAAA::/48, etc). The section right above it (3.2.1) identifies that the formula in 3.2.2 is merely a suggested formula, not directed: 

To summarize: If BOTH interfaces support Auto-MDIX, then it doesn't matter what cable you choose. If only ONE interface supports Auto-MDIX, then it doesn't matter what cable you choose. In the rare case that NEITHER interface supports Auto-MDIX, consider the L3 switchport as a regular L2 Switch port. If your situation matches the very rare case that neither interface suports Auto-MDIX, you'll want to use the following cables: Layer-2 and Layer-3 switch -- Use a Crossover Layer-3 switch and router -- User a Straight-Through 

You could either use Identity NAT on the ASA to allow the traffic through un-natted, or simply configure a NAT Exemption for the /30 network. 

To elaborate on the other answers. Modern switches support Auto MDI-X, which allows the switch ports to automatically determine whether they should work as MDI or MDI-X ports, and therefore precludes the user from having to determine whether they should use a Straight Through or Crossover cable. But because of how Auto MDI-X works, it must be enabled/supported on both interfaces on either side of the cable it only needs to be supported on one side of the link. Thanks @Everton for the correction. To check if an interface supports Auto MDI-X, use these commands: 

With that established, lets see how NAT affects this packet. In particular, notice that the Source IP is a Private IP, and therefore must be NAT'ed when speaking on the internet. What we would want, then, is for NAT to change the Source IP on the Outbound traffic and change the Destination IP on the Return traffic. If NAT were to change the Destination IP on Outbound traffic or the Source on the Return traffic, the communication would never work. 

When you need crossover cables is often explained, but why is seldom explained. It has to do with the copper (often referred to as Ethernet) wire itself. In copper wiring, there are four pairs of two wires (eight total wires). The pairs are numbered 1-4. The entire copper cable is full duplex, which means data can be sent and received at the same time. But individually, each pair of wires is dedicated to only send or only receive, and some pairs are not used at all. The specifics differ with each specific standard, but for the sake of the rest of this write up, we will be discussing 100BASE-TX. 100BASE-TX uses two of the four pairs (the other two are unused). One pair of wires are used for transmission, and the other pair is used for receiving. PC to PC Specifically, a PC using 100BASE-TX wil transmit over wire pair #2 (TX) and receive over wire pair #3 (RX). The NIC in this setup that this PC is using is referred to as a Media Dependent Interface (MDI) NIC. But if we have two computers connected directly to each other. And they both try to transmit on wire pair #2, their signals will collide. Moreover, nothing will be sent on wire pair #3 and therefore neither computer will be able to receive anything. So, the cables in the wires are crossed so that on one PC, the signal sent on Pair 2 from the first PC arrives on the second PC on Pair 3: 

There are two values provided for the route to via : 30720 and 28160. Understanding these two values requires understanding two terms that EIGRP uses to describe cost. The first value is what is known as the Feasible Distance. This is the Total EIGRP cost to the final destination. The value we calculated of 30720 above is the Feasible Distance to the 192.168.2.0/24 network. The second value (28160) is what is known as the Reported Distance (also sometimes the Advertised Distance). This value represents the total EIGRP cost for my neighbor to get to the target network. This is the value the neighbor shares when advertising the route to the local Router. It is possible to reverse deconstruct the Reported Distance (aka, the neighbor's cost) value of 28160. We know the value for EIGRP Metric is 256 * (BW+Delay). If we take 28160 and divide it by 256, we get 110. Which means BW+Delay equated to 110. We also know the full path is two 100mbps links, so obviously the neighbors path to the target network is one 100mbps link, or a total delay value of 10. Which means the Bandwidth value must have added up to 100, which we know it does when factoring a 100mbps link. Which confirms the neighbor is one, 100mbps hop away from the target network -- which means the neighbor was directly connected to the target network with a 100mbps link. 

There will never be a case where I DON'T want to NAT between my Inside and DMZ, but I DO want to NAT between my DMZ and Inside. I'll either want to NAT, or not-NAT, between INSIDE/DMZ or DMZ/INSIDE, regardless of the direction or network where the traffic was initiated. So Cisco, to avoid making you configure NAT Exemption in both directions, chose to make it by-directional by default. And to leave ambiguity out, simply arbitrarily picked "High to Low" as the correct method for configuring NAT Exemption. Much like NAT is typically configured from "High to Low" security levels. 

ULA Address space exists to address 'internal only' resources, that will never need global route-ability, but might need internal route-ability. For example, many offices have Printers which operate on a network. There is no reason for the Printer to be accessible (or to be accessing) the Internet, as such, Printers are a good candidate for ULA address space. There are always exceptions, of course Or maybe an office has an internal only ticketing system (or CMS, or RMS, or People Portal, or ...) that should only be accessible from the internal, corporate network. If such a tool has no business being accessed from the public Internet, then these might be a perfect candidate for ULA address space. That being said, Ron is correct, in IPv6 there is no NAT. It was built so NAT could be omitted entirely. And if you properly implement IPv6, you will not be using NAT. HOWEVER, if there is going to be something NATed in IPv6 (despite best practices), it would be a ULA address to a Global address. It surely won't be link-local address space. Link-Local addresses (FE80::/10) exists only for local network communication... aka, you communicating with your neighbor, and potentially your router. It is, by definition, not meant to be used to speak to anything on the other side of a router. As such, intrinsincly, you should never come across or try to NAT a Link-Local address to a Global address. The IPv4 equivlent to the Link-Local address space is the 169.254.0.0/16 range. 

Before any host puts any packet on the wire, the first thing it does is determine whether the destination IP is on its own network, or on a foreign network. Let's run through it from the perspective of Host A. Host A know its IP (10.1.2.1), and its Subnet Mask (/24, or 255.255.255.0). With a little subnetting, HostA determines that its network spans all the IP addresses in the range of 10.1.2.0 through 10.1.2.255. (We'll leave out details of the NetID and BroadcastIP, since for the moment they aren't relevant) Host A also knows its destination IP is 10.1.3.1, which falls outside of the range of IP addresses within Host A's own network. As such, Host A would would come to the conclusion that the destination IP 10.1.3.1 is on a foreign network, and Host A could only reach a foreign network by speaking through a Router. Or more specifically, through HostA's default gateway. If HostA isn't configured with a Default Gateway at this point, then the process ends here with a general failure. HostA can not speak to HostB. If HostA is configured with a Default Gateway, it would send out an ARP Request (which is itself a Broadcast frame), asking for the MAC address of its default gateway -- NOT the MAC address of the final destination IP. The switch, having received the broadcast frame would flood the packet out all interfaces, to include the one HostB is connected to. HostB would indeed receive the packet, but since the ARP is looking for the Default Gateway's MAC address (and not the MAC address of HostB), HostB would simply drop and ignore the ARP Request, without ever sending any sort of response. HostA, then, would never receive a MAC address for its default gateway, and would therefore be unable to encapsulate the Layer 3 Packet with a Layer 2 header. The packet would fail there. You can see the ARP process illustrated in this video.