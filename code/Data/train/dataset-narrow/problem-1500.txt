further readings I made this section, because you want to write your own database access, and to not use ORM's like hibernate or eclipse's link. So this should interest you Maybe you'd like to check Fowler's list of eea patterns: $URL$ - especially the Data Source Architectural Patterns. And also the "dao" j2ee pattern from core j2ee patterns: $URL$ that's a very common one (which only decouples backend implementation, there's still a lot of other problems). Also, "Tom" from oracle has a lot of very, like very good blog posts about databases, not only oracle specific. Just google "ask tom " + whatever you want to know (about databases, of course). For transaction management and isolation levels, read this one: $URL$ (Keep in mind, design patterns can't usually work on their own and will not per se solve your problems. But it should give you an idea, how problems have been solved and you can apply that to your own design). Hops this helps. 

Expand what to include what? Why does the "Envelope MBR" - which you got from roads - must be expanded with "world.getMBR()"? 

Basically that means, you're very inexperienced in java itself and you can't provide an easy and well written solution for a rather easy problem. Why I wouldn't give you the job, if you were a junior with a degree (applies to senior, too): 

... it was an awful lot of scrolling to figure out what is. Guess what it was? A of course. It's logical. 

What are you clearing the email and the message? Looks important. I think it's only in the doGet. Maybe wrap it in a separate method which describes what you are doing here. And then the 'cookie-to-session-stuff' 

Other than that, the code is quite straightforward, the "stuff, which has to be done" is separated into subroutines. 

All these problems relate to having the node's level in , which is currently sort-of unused. If instead you kept there the height of the subtree rooted at a node, you would be able to: 

Update: The problem could be actually solved in a genuine one pass using a rolling checksum, at the cost of having false positives in (rare) cases of hash collisions. Just compute two rolling checksums while traversing the list, one forwards and one backwards, and compare them at the end. 

A small improvement - is . Of course you'll lose the nice indentation. IF you don't mind repeating elements (which is what you have in the original shell script), you can use : 

Just one more note, please post code that compiles, especially for CR, it's much easier to work with; see $URL$ 

I'm not sure about this. It's indeed weird and breaks the usual expectations that is a ring, although it's probably not a big deal. I'd certainly note this in the docs for the instance. 

If you don't need any user state, you can just ignore it. And the argument allows you to run your parser in another monad - is a monad transformer. If you don't need it, just use , which is exactly how is defined. You might be interested in using , a conceptually simpler parser bundled with GHC. Also this blog post about writing your own, simple parser, might be useful for you. 

Inserting a new element into a balanced tree so that the result is again a balanced tree. The signature of the function should look somewhat like 

Then, computing the maximum path can be expressed as folding over a list of lists that represents a triangle: 

Then comes for free from Foldable defined as . This allows you to use other monoids for which is less costly compared to of lists, for example or . 

, and instead of putting the listener and the consumer to the map, I use the consumer as key and value, wouldn't I achieve the same thing? If yes, I think you should be able to use this one: $URL$ 

... is badly named. I don't understand what it does, until I go and check the implementation of it. This is bad, because it's like having to open another tab, read a text, and go back again, it messes with the initial train of thought. Servlet.doPost This method is waaaaay too long. And you could easily take that a part. For every "" statemend, you can move the code within in a separate method, like "performAction" method. If you'd do that, a reader of the code sees in a few lines what the doPost is responsible for. And if you want to know what a certain part does, it's isolated in a separate method. The attribute : Remember what? This is a bit redundant: 

Is my use of Java Reflection an OK design? Well, no, the usage of reflection is usually an indication of bad design. Honestly, it is almost always. Actually, you have to change the question and ask, when is it okay, to use reflection. The answer is something similar like this: Use reflection, when you do not know how a class looks like during runtime. But this is your code, so, why would you increase complexity and make your code more error prone? 

It makes perfectly sense to make that not cachable. You want the result based on the actual exchange rate, and this changes every second. What I really don't like: Your interface has a HttpClient and is therefore coupled to implementation. This should be moved to the actualy implementation. The next thing: You're caching is also coupled to the technology. So if the backend changes, let's say you get it from a database, the caching mechanism is not reusable. I think it's okay for your case, and I wouldn't bother too much,... but, if you consider testing, you actually can't unit test the caching. 

Below is code based on the above ideas, with some more optimizations (to improve sub-list sharing), left as an exercise to analyze: 

Similarly to Learning Rust With Entirely Too Many Linked Lists, I'm trying to learn Rust by working with linked lists. Currently I'm trying to implement a function that takes 2 elements of a singly-linked list and swaps them. Any feedback is greatly appreciated! (Rust playground link here.) 

All your functions are in the monad. This goes a bit against Haskell's philosophy to keep side effects to minimum. requires the whole file to be read into the memory. This could be solved by using lazy IO, but I'd strongly discourage you from doing so. 

From the readability point of view, I'd suggest to keep some maximum line length, like 72 or 80 characters. Beyond that it's difficult to read. Also instead of having , declare your own data type with 3 constructors. Not only it'll be simpler, but the constructor names will also be more descriptive and it'll be easier to understand what's going on. You should also document the function better, it's not clear what the argument is without thoroughly inspecting the code. A small improvement is also replacing nested s with a statement. In general, I'd say that it's not really possible to make a genuine single-pass solution. Obviously we can't avoid checking the last element, if the list is a palindrome, and we need to have the first element to compare it to. So we'll always have to either get to the last element at the beginning, or keep the elements as we traverse the list, to have them for comparison when we get to the end, So we can't get to the situation when we just traverse the list from the beginning to the end, releasing the elements already traversed. In your case, you're also traversing the list twice, although it's somewhat hidden. The first pass is the recursive call to , which gets to the end of the list. And the second traversal is occurring in the line 

I also prefer a verb in my method names (they should have, actally, but in that case I think it's okayish), that's why I use 'with' as prefix; And I explicitly do not use not 'set' as prefix, to distinguish it from the setter of the User type. If you do it like that, the 'actual building' of the user is within the builder and not in the User - and the User type is kept quite stupid. It might seem a bit strange, that the 'build' method doesn't actually build, but non-persistent built types are often only used for unit testing. The sweet part about builders, you can expand them to persist your built types or other fancy requirements. 

I'm not 100% certain if that's the intention of your API, after I've seen the usage code, but alas, if I understood your intention correctly, that would be easier to read. 

First of all, it's very well written and I can easily understand what's going on. I also want to point out to another post which is similar to yours with a lot of good code, answers and comments: Object Oriented Design of Card Deck However ... What 'hurts' the most is the very long main method. A lot of things in the main method can be moved to separate types/methods, for instance, the loading of the Deck: Consider writing something like . It's still quite clear what you should happen, but it's written / summarized in one line. As others have mentioned, it's better to move the 'game itself' to its separate type. Why? Assume you want to provide a GUI for your game - what do you have to change? Yeah, a lot, because a lot of the code is not reusable. I think, with that in mind, you will have a total different approach of writing the game, its classes and methods and the control flows. And by how your posted code looks, and how you are already "thinking in objects", I think you can do that without me pointing out every single tiny thing I see - so I won't go into detail about what part of code you should refactor to where and why - which would really take a lot of time. Now, some smaller thingies: 

If you want to compare by Y in the opposite order, you can write . Now you don't need at all, and splitting them becomes simpler: 

Instead of two types, and , which were holding outputs of the different insert operations, let's have just one, parametrized by . 

For iteration inside you can benefit from and take the -th element of the output. Note that thanks to laziness, you don't have to care that further elements in the list are not defined. 

Not only this is much simpler; notice that now we've just reinvented a fold over the list! We're consuming the list, passing the rest for further processing, and accumulating a result. Since we're consuming the elements from the start, this is a left fold. So let's rewrite it as 

And I recommend reading various ways of constructing Serpinski triangle, it's quite likely that it's possible to build one straight from the top very easily. 

Both these functions are polymorphic with no coupling with . The final function is then expressed just as 

I quite like your aim for simplifying the function and factoring out the generic part. One solution (untested, just compiled) could be done using from : 

Definitely a good idea. You might later decide to internally represent the data type differently, for example in , and this way you can do it without breaking the interface. But depending on the expected usage, you might include such conversion functions. 

Somewhat old question, but still it's a pity it hasn't been answered :). Putting aside the asymptotically better solution suggested in the comments, and focusing just on the code: Pluses: Top-level types for all funtcions, that's very good, as well as comments. The code shows good understanding of various Haskell functions and idioms. My most general comment is that there is disproportion between code verbosity and complexity. Usually more complex code should be more verbose and more descriptive. Visually, most of the code is just simple read/write/swap ST operations, but the important part is squeezed into not-so-easy-to-understand and uncommon combinations of folds/scans/sequence/>=>/>>= etc. I'd probably separate the simple parts (read/swap) into helper functions and expand/simplify the complex parts a bit. Function somewhat mixes pure and mutable approaches. While it mutates its first argument, it keeps the scalar product pure and passes it as an argument in and out. This is somewhat confusing and complicates the computation of the minimum ( with ). If the product were a ST variable too, the code gets simpler (untested):