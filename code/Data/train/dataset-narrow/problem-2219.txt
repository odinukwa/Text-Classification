Feasibility: ​ uses the existential theory of the reals By Proposition 4.1 (on page 290), there is an algorithm (the same for each of the following) 

Slightly less obviously, when both parties are honest, it suffices to make sure they get the same value, since the protocol could be modified to start with one party choosing an element of {0,1,2} uniformly at random and then at the end, adding that to the inner protocol's output mod 3.) 

length at most ​ nd , ​ for all non-decreasing functions ​ S : {0,1,2,3,4,...} $\to$ {0,1,2,3,4,...} : If L's circuit-size in bits is at most S then 

Trivially, $\: 1\leq 1 \:$ and $1$ is computable. $\;\;$ By the Lemma, M is efficient and transcendental. 

the probabilities for each output are less than $3/(2\hspace{-0.05 in}\cdot \hspace{-0.04 in}j\hspace{.02 in})$ away from the original probabilities, and whenever the latter is greater than $1/j$, the resulting probability will be greater than $1/(2\hspace{-0.05 in}\cdot \hspace{-0.04 in}j\hspace{.02 in})$. 

Hardness: ​ ​ ​ Reduce from MAX-3SAT $\color{grey}{\text{or MAX-4SAT instead}}$ to the $\ell_{\hspace{-0.04 in}\infty}$ metric. 

NIZK proofs (of membership) can be established by: verifier commits a random string of the same length using statistically hiding commitment 

same number. $\:$ That obviously gives an equivalent instance, and makes the resulting target sizes equal. $\:$ If the target size is zero then return the empty instance of your problem, 

will need to use more than $\;\;\; \left((n\hspace{-0.04 in}-\hspace{-0.05 in}1)\cdot \log_2(n)\right)-3 \;\;\;$ bits for more than 3/4 of such DAGs. 

so dMCSP is in ​ $\mathbf{NP}$ . ​ ​ ​ Therefore ​ $\mathbf{P}^{\left(\mathbf{NP}^{\hspace{.032 in}\operatorname{dMCSP}[1]}\hspace{-0.03 in}\right)} \subseteq \mathbf{P}^{\left(\mathbf{NP}^{\hspace{.032 in}\operatorname{dMCSP}}\hspace{-0.03 in}\right)} \subseteq \mathbf{P}^{\left(\mathbf{NP}^{\hspace{.03 in}\mathbf{NP}}\hspace{-0.03 in}\right)} = \Delta^p_3$ . I'm not aware of any proof that either of those $\subseteq$s are equalities, and this paper gives significant obstructions to the possibility of dMCSP being ​ $\mathbf{NP}$-hard ​ under randomized Turing reductions. 

$t_{next}$ in $\Theta \hspace{-0.04 in}\left(\hspace{-0.02 in}M\hspace{-0.04 in}\left(\hspace{-0.02 in}2^i\hspace{-0.02 in}\right)\hspace{-0.06 in}\cdot \hspace{-0.05 in}i\hspace{-0.02 in}\right)$ such that $t_{next}$ is an upper bound on the time it will take to compute 

equal probability of going to each of 2 possible next-states: There are only polynomially many possibilities for the workspace's contents, so the automata's sizes are polynomial. ​ ​ ​ Each transition probability is in {0,1/2,1}, so by Lemma 6.1, (for $j$ given 

deniability, NIZK proofs instead have transferability. Related to NIZK but not otherwise related to your question: 

Thus STCON(n,k) is complete for [$\hspace{.02 in}$NL with k$\cdot \hspace{.02 in}O$(log(n)) bits of non-determinism] under logspace reductions and STCON(n) is logspace-complete. ​ Insofar as those classes are equal (either by regarding k as O(1) or by a slightly surprising collapse), the hardness under logspace reductions 

$\frac{4\cdot J}k+3\:$ are exactly those corresponding to $3$-partitions of $\left[\hspace{.03 in}j_0,j_1,j_2,...,j_{(3\cdot k)-1}\hspace{-0.01 in}\right]$ . 

the previous sentence, the algorithm will have B+2 distinct hard-coded field elements and output the ​ n$\cdot$(B+2) ​ results of replacing one of X's coordinates with one of the B+2 field elements.) Thus, you need to either consider fields of "intermediate" size, or allow polynomials of 

For all strings $y_0$ and $y_1$ whose lengths are at most the lengths of $x_0$ and $x_1$ respectively, $\operatorname{Pr}_{h\leftarrow H}\hspace{-0.06 in}\big[\langle \operatorname{length}(\hspace{.03 in}y_0),\operatorname{length}(\hspace{.03 in}y_1)\rangle = \langle \operatorname{length}(x_0),\operatorname{length}(x_1)\rangle$ 

In particular, no problems are "currently known to be outside class ​ NP ∪ coNP ​ but inside BPP". I'm also not aware of any languages L known to be in BPP for which 

If that succeeds and the oracle-circuit's output $y$ satisfies R(x,y), then output 1, else output 0. 

Clearly, any assignment satisfies at most one of those terms, and any assignment that does satisfy one of those terms also satisfies ​ $\color{grey}{w\vee \hspace{.02 in}}x\vee y\vee z$ . ​ ​ ​ Conversely, whenever ​ $\color{grey}{w\vee \hspace{.02 in}}x\vee y\vee z$ ​ is true, there will be a choice of ​ $a,\hspace{-0.02 in}b$ ​ that satisfies at least one of those terms. 

choice of $h$ from $H$ also corresponds to a weighted average, there is an $h$ from $H$ such that $\operatorname{Pr}_{\langle \hspace{.02 in}y_0,\hspace{.02 in}y_1\hspace{-0.02 in}\rangle \leftarrow \text{Automaton}}\hspace{-0.05 in}\big[\langle \operatorname{length}(\hspace{.03 in}y_0),\operatorname{length}(\hspace{.03 in}y_1)\rangle = \langle \operatorname{length}(x_0),\operatorname{length}(x_1)\rangle$ 

and that normal representation is decidable" is equivalent to "the equivalence of programs is decidable" 

elements $x_0$ and $y$ of their domain, if ​ $y\neq x$ ​ then $\;\;\; \operatorname{Pr}_{h\leftarrow H'}[h(\hspace{.03 in}y) = h(x_0)] \: \leq \: 1/(2\hspace{-0.05 in}\cdot \hspace{-0.04 in}j\hspace{.02 in}) \:\:\:\:$. 

The important thing is what "information quantity is additive" with respect to. Information quantity is additive with respect to concatenating messages 

under logspace reductions: s is the machine's starting state, t is "ACCEPTED", the other nodes are the other configurations of the machine from which the machine calls for a non-deterministic bit, and there's an edge from u to v if and only if there's a ​ $\Theta $(log(n))$\hspace{.03 in}$-bit ​ string such that [v=t=u or [v=t≠u and supplying that string's bits as the non-deterministic bits from configuration u is enough to make the machine accept] 

so I do not assume that. ​ ​ ​ Note that ​ L $\subseteq$ NL $\subseteq$ NC2 $\subseteq$ DSPACE$\hspace{-0.02 in}\left(\hspace{-0.04 in}O\hspace{-0.05 in}\left(\hspace{-0.04 in}(\hspace{.02 in}\log(n)\hspace{-0.03 in})^2\right)\hspace{-0.03 in}\right)$ . In this answer, "strings" without further clarification may continue infinitely to the right. The part of this answer between here and the at-symbol applies 

$- \: \operatorname{plaintextsum}(\operatorname{encrypt}(n_1,r_1),\operatorname{encrypt}(n_2,r_2))$ . 

$\text{and } \: \langle \hspace{.02 in}y_0,\hspace{-0.03 in}y_1\rangle = \langle x_0,\hspace{-0.03 in}x_1\rangle \: \text{ and } \: \langle h_0(\hspace{.03 in}y_0),h_0(\hspace{.03 in}y_1)\rangle = \langle h_0(x_0),h_0(x_1)\rangle\big]$ , ​ ​ so the probability of $\: \langle \hspace{.02 in}y_0,\hspace{-0.03 in}y_1\rangle = \langle x_0,\hspace{-0.03 in}x_1\rangle \:$ conditioned on $\langle \operatorname{length}(\hspace{.03 in}y_0),\operatorname{length}(\hspace{.03 in}y_1)\rangle = \langle \operatorname{length}(x_0),\operatorname{length}(x_1)\rangle$ 

Therefore the implication's in my question's body always hold. To get the same implication for other polynomial-length games, just 

$\log_2\hspace{-0.06 in}\left(n\hspace{-0.04 in}\cdot \hspace{-0.05 in}\left(n^{n-2}\right)\hspace{-0.03 in}\right) \;\; = \;\; \log_2\hspace{-0.06 in}\left(\hspace{-0.02 in}n^{n-1}\right) \;\; = \;\; (n\hspace{-0.04 in}-\hspace{-0.05 in}1)\cdot \log_2(n) \;\;$, 

For infinitely many n, $\;\;\; 1\hspace{-0.04 in}\big/\hspace{-0.07 in}\left(\hspace{-0.02 in}n^{2+j}\hspace{-0.02 in}\right) \; < \; \operatorname{Prob}_{\mathcal{O}}\left[A^{\mathcal{O}}(n,z^{\mathcal{O}}(n))\right] \:\:\:\:$. 

If ​ ZPP = NP ​ then NP ∪ coNP ​ = ​ ZPP ∪ coZPP ​ = ​ ZPP ∪ ZPP ​ = ​ ZPP ​ ⊆ ​ BPP ​ ⊆ ​ S2P ​ ⊆ ​ Σ2 ∩ Π2 , so as far as we know NP ∪ coNP ​ ⊆ ​ BPP ​ ⊆ ​ Σ2 ∩ Π2 could hold. 

NC2 can round the probabilities down to fractions with denominator $j$ and remove the denominators. ​ Since $j$ is in unary, logspace can reduce mod $j$, and thus sample "as close to uniformly as possible" from $\{\hspace{-0.02 in}0,\hspace{-0.05 in}1,\hspace{-0.03 in}2,\hspace{-0.03 in}3,...,j\hspace{-0.04 in}-\hspace{-0.04 in}2,j\hspace{-0.04 in}-\hspace{-0.05 in}1\}$. ​ ​ ​ ​ Note that ​ $2\hspace{-0.05 in}\cdot \hspace{-0.05 in}\lceil \log_2(\hspace{.05 in}j)\rceil$ ​ random bits are enough to make the error less than $1/(2\hspace{-0.05 in}\cdot \hspace{-0.04 in}j\hspace{.02 in})$. ​ ​ ​ For the same reason, logspace can use the list of [triples with integer left entries] and the element from $\{\hspace{-0.02 in}0,\hspace{-0.05 in}1,\hspace{-0.03 in}2,\hspace{-0.03 in}3,...,j\hspace{-0.04 in}-\hspace{-0.04 in}2,j\hspace{-0.04 in}-\hspace{-0.05 in}1\}$ to add the integers, stopping if/when the sum exceeds the element, and then [if that happened then output the eventually-periodic string indicated by the most recent triple's other two elements, else output $\bot$]. 

"Proposition 2" page, the matrices would actually have height ​ $\binom{n}{\hspace{-0.02 in}\lceil k/2\rceil \hspace{.02 in}}$ ​ and ​ $\binom{n}{\hspace{-0.02 in}\lfloor k/2\rfloor \hspace{.02 in}}$ . 

it's also known that if L is in ​ NP ∪ coNP ​ then ​ ​ ​ BPP ​ ⊆ ​ NP ∪ coNP ​ . "Is exactly 1 of these 2 polynomials identically zero?" ​ is "a problem currently known to be"