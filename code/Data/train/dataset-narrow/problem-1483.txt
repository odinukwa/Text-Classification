Front/Back The methods and should return references to elements (not pointers or iterators). This will make your type consistent with other container types (and thus interchangeable). 

Does not null the space before returning it. The content is quite random. This is completely a waste of time: 

This should improve performance considrable as you are not re-calculating string length all the time. Note 3: Always do timing after you have compiled the optimized version 

Apart from the bad idea of garbage collection. You are using pointers where you should be using references. Basically your code has no concept of Ownership Semantics. 

Anyway. You now have three objects that all container a pointer to Tile (the same pointer). When each goes out of scope there destructor will call delete on the same pointer. 

Now we just need a definition for a . This is basically an object that is convertable to and when used with reads a line of text. 

This is how I would write it: Note: This has NOT been tested so it probably will not work first time (add some unit tests). But it should get you close to what you want. 

But to be honest I am starting to like the uneven style and may change. But for now the matching open and close above each other appeal to me more. 

Then you make people explicitly fill in the length and they can not accidentally pass you an array that will cause problems. Alternative design One advantage of strtok() of your function is that it does not parse the whole string. It only fetches the next token. Thus in a situation where you only need the first couple of tokens it is much more efficient. I would change your algorithm so that it behaves in a similar manor. Retrieve one string (and store it in your data structure). Next call retrieves the next string etc (this would be a lot easier to change it you had made a modular design). Questions 

Even if you have a vector of unique_ptr it is still to easy for the derived class to break encapsulation and do something you don't intend. You should provide them with a safer interface. How you do that depends. If you know none of the members will be NULL then I would provide them with a function that returns a reference. 

That's a bit strange. You normally pass all values as parameters between iterations. If you need a defaulting starting value then you can either use a wrapper function that calls your recursive function and provides the initial value. Or have a parameter that defaults to the start value but internally you increment it (I choose the second here). 

But honestly its like 6 of one half a dozen of the other so I would not bother changing your code it's absolutely fine. Iterator Comparison 

But this is VERY inefficient. The most expensive parts of your code are calls to and the rest is trivial. And you make a call to for every new prime. A better technique would be to allocate more space than you need and only realloc when you actually run out of space. A very common technique is to multiply the currently used space by . This exponentially reduces the number of calls to though the cost is you have to keep track of two numbers now. The number of spaces used and the number of spaces allocated. Which brings us back to vector which does this for you behind the scenes. Make your code readable: OK. This is a bit sloppy but I can live with it. 

Why you ask is this second case a big deal. Well there is no constructor on Cont::iterator to create an object of type . So in the first test above there was no way to convert rbegin into the correct type. BUT there is a constructor on that takes an object of so in the second condition we could be in a situation where is auto converted into and the expression would compile. But luckily for us the designers of the STL decided that was a bad idea and made the constructor to prevent auto conversion and thus prevent the code from compiling. OK so why is in Dangerous Its also hides errors. The above code will generally generate a compiler error (so you spot it and correct it quickly). But lets dig in and build the code as suggested by @vinipsmaker. For this to work there either has to be a conversion from one iterator to the other or as he suggests a base class and a derived type. 

I would be OK if you used it to generate an error message. But as it stands it is just protecting the loop. You don't need to do that. The loop will just not be entered because will fail to read from an empty file. As discussed above: 

Anybody that uses your header file now implicitly pulls vector/list into the global namespace. This can have undesirable effects with name resolution. Don't do this in a header file. If you must be lazy then use scope so you are not forcing your requirements onto others. There is always a typedef to make things easier. Comments (or well named members) would be an idea. 

This is so dangerous that it has to be wrong. If a small sub-routine fails to create your array you are terminating the app. No thanks. If a small sub routine fails then I expect an exception that I catch and take appropriate action. This is so absolutely WRONG. Also this does not initialize the buffer. Yes you allocate space for the buffer. And if this is a class its constructor will run. But if is not a class then the members of the buffer are not initialized. Thus reading them before initializing is undefined behavior. What you want is to force zero initialization of POD data 

Note. When you give up ownership of the object you should not be using it from the original pointer again. The only way to access the render object should not be through the that owns it. If you have kept another pointer to the renderer that you are cheating ownership semantics. Writting a shard render object 

But you forgot the rule of 3(or 5). So you need to define (or undefine) the copy constructor and assignment operator.