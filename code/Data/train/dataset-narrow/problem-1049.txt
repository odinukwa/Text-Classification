And use instead of your string array. This will open up the possibility of many things, if you would like: You can match up your radiobuttons to an attendingstatus, by using a for example, which could reduce code duplication in the method by grabbing a RadioButtons corresponding AttendingStatus by using and using to get it's string version. I don't know your skill level so this might be a bit advanced for you, but if you are willing to learn, I really suggest that you start playing around with enums. You will love them :) Spacing 

Now, what if we transform the way we look for neighbors? To what I call "Chess style" (based on how a Knight moves in Chess). 

I tested your JSFiddle and I selected a couple of lines, thinking that it would add four spaces to each line when I pressed Shift + Space. However, it seems like the selected code got duplicated after pressing Shift + Space. I would expect selecting this part: 

Another minor nitpick is that your Scanner variable could be named either or instead. (Even though is a quite normal variable name for a ) #perfectionist-naming. 

Use English names for variables, especially when characters outside the range of A-Z, a-z, 0-9, _ are included (such as "ä"). The Swedish word "avgränsare" translates to "delimiter" in English. 

Without Java 8, no libraries If you are unable to use Java 8 and don't want to add Guava as a third party library to your project, there are a small part you can do to simplify your existing code: 

Overall, I disagree. This approach is actually very limiting as I can not create a new enum at runtime. What if I wanted to create a dynamic format? I might want to let the user specify how he or she wants to see the output. They can't create an enum at runtime. All possible formats must be specified at compile-time. Modern? Sure, enums are nice. But enums should not be used for this. Readable? Sure, it is quite readable. Maintainable? No. Disagree. Sure, it's easy to create a new enum if I want a new format, but it is quite a lot of boilerplate code needed. 

This is a part of my Factorio mod Visual Signals. This code takes a numeric value as input and returns a string for the value, for example: 

Technically, there is no such thing as if-loops. Your code is just a bunch of if-else statements (sorry, this was the language police speaking) What your code actually needs, is actually a real loop. Use an array or a list of a record, and loop through it. Your current approach allows a maximum of six products in one loan, it involves a lot of code duplication which in itself is a code smell, and it could be a bit weird if the values for Product 3 were set but not Product 1. My Delphi skills are a bit rusty, but consider changing into an or a instead of a pure . That way you could have the method as part of the object/class. This is some code for how I think it should look. It's been a long while since I worked with Delphi so this might not be 100% correct code, but it should get you started in the right direction. 

The extra step This is a slightly more advanced concept. Use it at your own risk, if you feel that you can understand it. Side note: It is possible to make this even better, by for example pass on a to the class and pass on when constructing the cards, and have your action listener call this . On the positive side, this will remove the need of exposing the in your class. On the negative side, this might be a bit "over your head" at the moment. 

I'd recommend using an outer table, and add an inner table to that. For the inner table you can then use to set padding and size. See the LibGDX Table documentation for an example of how to use percent values with . Btw, you can avoid the cast: 

Or, if you would like to reset the contents and create an entirely new Set, use the copy-constructor: 

Stream, Stream, Stream It seems to be quite common to create a from a , so why not make it a static factory method? 

In Foo you can then use your object which you retreived from the method to use that particular object. Note that one can take the "Tell, don't ask" thing even further, but with the code in your question this is what I think you need for now. 

If you want to ignore the requirement of using a , you could use Java 8 Streams to solve the problem. 

Efficiency I don't think that can be improved. You're only using two if-statements. This is as efficient as it can get, I believe. Cleaner Depends on if you consider the conditional operator clean or not. 

A comment like this is completely overkill. Make your code as self-documenting as possible. The variable name tells you that it is addition. 

I have no clue by looking at these lines what is and what is . I strongly suggest you rename your variables to and , or and instead. is slow You are currently looping through the cells until you find one that matches the . This is slow. As this is only called from , you can instead have return a . Or even better: to make the lookup much faster, because: 

There's no need to shorten the variable name a few characters. is a better name, but still says absolutely nothing about what it is used for. In this case, I actually have to say that I like the variable names that PHP uses. haystack. Can it be any clearer? Nearly everyone knows about the saying "Finding a needle in a haystack". So the name haystack is a quite good one. 

Grouping Here we notice that we can separate the numbers into different groups. How to do that is a bit opinion-based, but I would chose a 30-50 group, a 70-90 group and a 100+ group, which leaves us with these groups: 

O(n) as well. Best-case, worst-case, average-case, they are all O(n) here. You are always looping through the entire list once, no matter what. 

In the end, which way you choose is up to you. Other comments Instead of numbering your methods, use , this would allow you to write: 

I'm not quite sure why you print a new line (CR) at the beginning of your function (sorry, your "word"). IMO it's better to print a new line after each iteration. 

This is especially useful for values you change often without caring much about the actual value at the moment, such as changing a player's HP. (I personally often call methods such as or ) Designing an Inventory and Items I think you should look at how the API of Bukkit (the Minecraft server) has been made. Bukkit have a class for ItemStack and also an interface for Inventory. You can probably find a lot of inspiration from Bukkit, although you probably won't even need half of it. Here are some example classes that I think you could use: 

From what I can see, it seems like you are doing it correctly. On some exceptions, you might want to alert your user with a message about what went wrong (for example, "Connection failed"). Few users can read stack traces while using an app. I only have a few comments regarding your code style: You're inconsistent in putting spaces around -characters, and also with if-statements. There should always be a space after and before a As in, <-- insert space here. 

Then you just check for instead of . However, it might be better to use the fact that throws a to do this. I think it might be best if you use the following approach, without using it as a method: 

You don't need to "cache" the drawables yourself. Android does that internally, as can be seen in the source code. 

We will call this matrix . This matrix is for a graph with the nodes a--e (your star systems). And the edges (paths) as follows: a->b, a->c, b->a, b->d, c->a, d->b, d->e, e->d. Now, let's say that we want to find the shortest path from a to e. We check row a and column e and we find that no, there is no direct path. To find the paths of length two, you can multiply the Matrix with itself. So, Paths * Paths results in: 

I would prefer to have the parent activity call , which gives you the possibility of changing or adding some of the extras passed to the intent. I also find it better because you can in a parent activity call directly without the need for 

Other comments: Your code looks nice, the only thing I would improve would be some one variable name: can be named or or similar. No need to use a one-character variable name for that. A very minor issue is that your loop can start at , as you use index 0 already to initialize and . 

Now, to convert from Kilogram to gram, you can lookup the value for and then use . In this case, \$1 / 0.001 = 1000\$ Then, once you have converted to gram, you use your as normal and convert to that specific unit. 

You seem to be very inconsistent in using on the fields. Remember to use private whenever possible. It is standard practice in Java to keep all class-variables (a.k.a. fields) at the top of the class together. This makes a typical Java class have the order 1. fields 2. constructor 3. methods. 4. static-methods (where you place the static-methods can differ, but they should always be put together whenever there are any). 

It is possible to refactor those last three for loops as well, but I am not sure if it is entirely worth it. Perhaps I'll show how to do that some other time. 

Now you only have to use to make a move on button 4. If you use an enum, you could use . Once you have cleaned this up a bit, I recommend you post a follow-up question, as there is likely more things that can be cleaned up then. 

Even though you have some other answers already, I wanted to provide my re-write of the method (in Java, but should be easy to translate into Python), and also another little comment. I quickly realized that combinatorics played a big role in your question, and I enjoyed the challenge very much. I got stuck thinking in one way, so then I started thinking in another, which helped. The concept is the same as Gareth and vnp has suggested. One option for "pick same twice in a row" and one option for "pick different", this led me to the following recursive method: 

EightsCard I consider the method here a code smell. It indicates that there is some design that you can improve. The main reason for this class seems to contain two things: 1. Logic for checking if a card matches another card by suit or rank. 2. Give a score to the card. Put the logic for checking card matches and scoring a card in another class instead. There are some different levels to do this at: 

private final, private final, private final. All of those should be . The same goes for all your fields in other classes. 

is an interface and not a implemented class. By returning you can use the lovely keyword (Really, you should be happy you have that - Java doesn't). 

I assume that will be changed in your so that one should not be final. All fields that only get initialized once can be marked final. 

IMO, whether or not it's a member of the Hand class does not affect coupling. HandView is an interface, it is already loosely coupled. This method however, in your interface, provides some coupling: 

Always put a space after a comma! Just like when you write normal text, right? (Also rename these methods as suggested above, and after applying one suggestion below you'll not even need a comma here at all). Unnecessary throws declaration Your method is declared to there is no need to do this as all exceptions that can be thrown are s, which are not checked exceptions. Unchecked exceptions will be thrown anyway if needed. Only declare throwing exceptions when you need to. And when you do need to (the time will come when you need to), don't declare it as the general type Exception but instead one of the subclasses ( or whatever). Other comments 

Another option would be to use a Builder pattern Whichever way you go in, I got one more suggestion. Use the two-parameter constructor for Exceptions to provide "Caused by" information, this will give you a more detailed stack trace 

When reading this I first thought "Where did that five come from?" but of course it does only loop four times. However, I would prefer: 

They could be , , or etc. One thing that you might want to think about is the implementation of and . Let's say that you have a version and you bump the major version, does the next version then become ? In your code, yes, but in reality that becomes . So your should return and should return , so . Besides this, again: Very well done! For fun, I'd recommend that you implement support for classifier versions, like , otherwise I'd say you're ready for more complicated challenges because this one was apparently way too easy for you. 

and means "go to cell a/b". The number of signs to use varies with what number you want to generate. As we want to generate three different numbers, we can do this all at once with something like this: 

I am usually against creating a class just for the sake of creating a class. This can just as well be a static method: 

...Speaking of that, I would recommend that you change the functionality so that the user can input or instead. Entering 1 or 2 for yes/no is counter-intuitive. You want to make it simple for the user, even if it means it will be more complicated for you.