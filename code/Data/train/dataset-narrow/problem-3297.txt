When testing in sonic Pi I could hear the same (loud) hiss in the gaps between beeps -- I suspect you're only not hearing it during the samples because it's drowned out by the sample. Like you the volume and mute buttons didn't do anything. My tests were with some awful earphones in the onboard audio port. The fact that the hiss was louder with playing software suggests 2 sources. I don't know the topology but I would guess the DAC and the amp, with the amp always powered. As I'm into playing with the hardware, and have made some simple audio hardware years ago, I'd consider a hardware mute circuit controlled by a GPIO pin. Off the top of my head I'm thinking something like a 1K resistor to ground switched by a small FET (all per channel, but you could run them off the same GPIO pin). This is likely to be better than breaking the circuit using a transistor, as you may get a switch-off pop and increase pickup at the next stage (I assume amplified speakers). Of course this wouldn't help much if you have silences within your audio clips. It sounds like white noise (near enough) so you wouldn't be able to filter it (unlike mains hum), and I suspect it's loud enough that ramping up the output volume so you can turn down your amp/speakers wouldn't be enough. 

Without using encryption, you can't. Permissions can be used to make access difficult on that machine if the user doesn't need root and you're selliing either the hardware or an SD card image. I'd just put the SD card in another linux machine, do and access it all. If you start encrypting, you have to worry about where to store the keys, but unless the content is incredibly valuable (in which case you shouldn't be shipping it) a fairly crude encryption scheme will probably stop most users. 

Yes. As an EE you'll know more about the hardware side than I do, but I could design the hardware if it was my project. For protoyping if you're using DC motors I suggest you look at the Gertboard: here's a directory of links to the schematics, manual etc. For the final project I suggest you use the motor driver IC off the Gertboard (or a similar one in through-hole if it's easier), combined with GPIO pins for the limit switches (perhaps using the buffer/driver IC). Note that you may need to add a real-time clock/have network access if you want to operate at specific times of the day. This wouldn't be required if just a 4-hour pause is needed. Alternatively you could use a light sensor and solar time in this sort of application. Software-wise, python is easy to learn (that's the point). Like you, I knew VB when I started to learn Python, and I learnt it for a specfic project. There are python examples for all the IO you'd need on this project in the Gertboard manual or online at raspi.tv. Alternatively there are C examples if you know C and would rather not learn python. 

I’ve got a raspberry pi running headless, playing an audio stream through mplayer over wifi. Crontab loads mplayer on boot, as well as a couple scripts: 

I am working on a project that involves a raspberry pi acting as an internet radio client which the public can access by plugging their own headphones into a 3.5mm (1/8”) jack. They will have access to volume control and nothing else. The project’s constrains are: 

I am using a usb soundcard connected to a headphone amp to give me volume control, and higher quality sound. for the robust plug and sensing capability, the headphone out is connected to a breadboard which connects to a high quality 3 conductor 4 pin barrel jack and contains a circuit that interfaces with the RPi’s GPIO. The jack contains a switch which is normally closed, and is opened when a plug is in the jack. I’ve attached a link to the circuit on the breadboard. The circuit behaves properly when the headphone amp is not turned on, or when the sound source is ungrounded, such as a smart-phone, but when the soundcard out is used, or the headphone amp is on, the GPIO digital pin remains high. I think it is an issue with the relative grounds of the RPi and the headphone amp. I found the circuit I'm using here. I’m not very savvy with electronics, so I'm not sure what changes to make to get the proper behaviour, but it feels like I'm so close. Is there a simple solution? Here's the circuit I'm using: R1=100k, R2=50k, R3=10k, C1=0.1uF fritzing circuit schematic 

It works for a while, usually from 3 or 4 hours up to 3 days, but eventually it becomes unresponsive. the wireless goes down, and doesn’t come back up, It will not take input from the keyboard. It seems to have crashed. I’m using a wireless usb card with chipset RT5370. I’ve turned wireless power saving off. I’ve tested the current to the rpi with a multimeter. it is 4.9V. I don’t think it’s an issue with the wireless card or power. I’ve looked at the syslog and the kernel log, but I don’t really know what to look for, and can’t find anything obvious. What might be causing it to become unresponsive? ***Edit, more info: I've set up hardware watchdog, and also have Crontab set to email me when the system reboots. I now know it has been crashing/hanging when it is unresponsive. I've started systematically eliminating software and hardware, and it's looking like the problem lies in the interaction of Mplayer, the Wipi, and my bad wireless connection If I disable Mplayer, or use a more reliable internet connection, it doesn't hang or crash. I am putting this together for an on-site installation where I will have no control over the router, so it can't crash just because there is an interruption in connectivity. Here is what the cronjob for Mplayer looks like: 

There certainly are products using the graphics output. Here's a 7" screen at £31 that runs off 12V. This model is VGA but the with extra cost of an HDMI-VGA converter it still comes in cheaper than the HDMI version. Here's a 5" HDMI monitor with touchscreen (over USB) at £26. I'm thinking about getting a couple of these for my lab but haven't yet, so haven't tested. I assume that on this sort of thing you'll get $1=£1 or near enough, which would put both of these in your budget. A search term that seems to work on eBay or Amazon is "mini monitor" (with or without "HDMI"). 

is probably your problem. I suspect you mean . If you're testing in the evening you'd never trigger the nightlight setting with your conditional. 

We get accuracy of better than a second on several units using a public NTP server the other side of a complex and busy network. We also only need accuracy of the order of 1s (which the system clock can maintain for days while powered up). Check out the ntpd man page, but after configuring a server, making sure that runs on boot should be all you need. The gets you back to real time if the clock is way out, such as after loss of power. 

I'm designing a system that will power a 2B using an OKI-78SR-5/1.5. It's a switching regulator, pin-for-pin compatible with the classic 7805 linear regulator. I'll be using a 15V PSU (for a motor) and once connected it will stay connected. So after some fairly basic testing I'm just planning on being careful to connect it the right way round. This only does 1.5A, but do you really need more than that on the Pi PCB? If you've got further significant 5V power requirements I'd be very tempted to run them separately -- I've crashed a Pi a few times by connecting a not-very-big capacitor to the 5V line using the official 2A PSU, so inrush currents are something to be wary of. They happen fast enough that no reasonable fuse could blow/trip fast enough to prevent a dip in voltage for a big enough surge load so are hard to protect against. Even though I'm guilty of it, I don't recommend plugging anything in while powered up. I'm not sure what current the PCB traces and headers are rated for, but for large 5V loads you may reach the limit. So there are two reasons to separate the 5V supplies to the Pi and other hardware, even if it's not a situation where isolation is required. One decent 5V supply could even feed both the Pi and the accessories, but I'd run independent cables back to the power supply with capacitors at the power supply output and the Pi input. 

To clarify chuda's answer: You can get a 5V relay board to control bigger currents using the Pi. The Pi does not have enough to power that many LEDs, but you can use a mains adapter. If you splice the wires and connect them to a relay board, you can control mains using the Pi without damaging it. See this YouTube video, he gives a good explanation $URL$ 

Simple answer? No. Considering the Pi and traditional desktops nowadays use completely different architecture, there's no way you can do a simple 'plug and play' solution. Even if you were to consider it, you would most likely need to re-engineer the connections and the boards on both computers to be able to 'hook in' and that just becomes unfeasible because at that point you're better off just using a regular computer to do what you wanted to do. 

In this case, is your temperature in Celsius multiplied by 1000, i.e. . Sometimes, the top line will read instead of , in that case just wait a little while (10 seconds or so) and run again. I use a Python program to poll this file every 5 minutes which serves as a home temperature monitoring system. I believe the OS reads the device every 10 seconds or so. 

I use my Pi as a NAS and it works great. I have a 2TB powered external HDD where I store my HD movies. I installed Samba for filesharing. Streaming over LAN is incredibly quick, does not stutter at all. Over WiFi though you would definitely run into problems. My setup cost me £35 for the Pi and another £70 for the 2TB disk bringing the total to £105, cheaper than any other NAS solution I could find at the time. I have been using this system for about 6 months and it hasn't given me any problems so far (aside from the occasional SD card corruption that tends to happen with Raspberry Pis) 

The Pi uses 5W just for itself (5V and 1A). Therefore you need more amps to power a keyboard as well. Use and this hopefully will solve your problem. 

Then change directory In this folder if you run you should see another directory in the format . This should correspond to the ID of the temperature sensor. If you into this directory (protip: use ), you should see a file called . This is the file which holds your temperature data. You can run and it should return something along the lines of: 

You need to configure port forwarding on your internet router. I believe the default TightVNC one is 5901, though your config may be different. If you are unsure on what port forwarding is, see this $URL$ Then you can use your external IP $URL$ and the port to connect to your VNC server. 

If we assume a stable system, not connected to any network, and fully backed up, what damage can cutting the power do? Obviously it's a hassle to restore an image of the card, but a fairly minor hassle. Could the card be bricked (buying a new card is a minor expense but a more significant hassle)? Could the Pi itself be damaged? I'm going to be building a Pi+touchscreen into a piece of equipment, which will have a swicth that can cut all power, and I don't trust my users (starting with myself). 

If you had any form of audio sensors/microphones under the corners of the table, you might be able to pick up some parameters that were unambiguously a bounce (length of sound pulse, frequency components via FFT, but probably not amplitude as a smash will be very different to clipping the net and dropping gently). The reasons for attaching them to the table are: Keep them out of the way; enhance sensitivity to the bounce rather than ambient noise. For location you'd need to triangulate using timing data. The speed of sound in wood is ~10x that in air, so to get around 10cm accuracy you need 3µs timing precision. Given the number of sensors and the speed requirements you're not going to do that on a Pi alone . There are DSP ICs out there, some of which have development boards available but that could get expensive and difficult. Position sensing is best done by camera, but perhaps an audio trigger would let you know when a bounce occured, as this would be hard to pick up from a single camera looking down from aboce, as would be required to give a nice position indicator. 

I'd approach this as a pure hardware problem -- log the current coming from the power supply. To do that you need an ammeter with either logging or output (USB/serial) capability. You could either run the logging code on the Pi itself or another unit (the ammeter itself, another Pi or a PC) for more accuracy as running extra code for logging will itself consume power. Most modern bench meters have some form of digital output, though many need drivers that aren't available for Linux/ARM. Voltage loggers are more common and you may be able to log the voltage drop across a shunt resistor on the power input. 

I suspect the amp is still on after playing the first audio file. There are a few things you can try (some of which you may have tried already of course). 

Maybe. Pin 1 of the header (on all models I believe, but do check yours) provides 3.3V. It doesn't give much current (it's rated to 50mA but more may be available in practice, according to people who have looked at the components. I have successfully run two different micro water pumps (RS M100, RS M400 off this line (via a gertboard) for several days on end (while using HDMI and USB keyboard/mouse). I'm probably pushing it too hard but I haven't noticed the regulator getting warm or any misbehaviour. NB: I'm using a Pi 2, which has a switching regulator circuit; some earlier models used a linear regulator chip which would get hot under load. The limit for the 3V3 supply is no longer as clear as it was, but is likely to be higher. (official forums) As regards back EMF -- if you have another pump in the circuit it's probably a bad idea with the M100 pump I've linked. The M400 is brushless with its own control electronics - so won't act as a dynamo in the same way. I would assume that when we prime the pump by pulling water through, we spin the motor; this has't caused any problem with either pump. For longer term use I intend to put a TO220 (through-hole) LD1117 voltage regulator on a piece of stripboard, run off the Pi's 5V supply (2A in my case) and run the pump off that. If you want to switch it, use something designed for the job such as the open collector relay drivers used on the Gertboard (ULN2803A).