For Net A you are using a /22, but the chart shows each network is a /24. A /22 would actually look like: 

I wasn't able to paste this picture in the comments. Usually what you want is your full mesh connections to all be in the backbone area 0. Then you split off other stub areas that are all attached to area 0. So all of your WAN links would be in area 0, then the links on the router towards the local site LAN would be in its own area. 

If you want to avoid pointing your default route to your ISP (maybe you want to point down a tunnel instead), you will need at a minimum to create a host route for the tunnel destination IP address pointing to the ISP. 

What if you don't use a patch panel, then decide you have to move your switch further down the rack or you need to move the connection to equipment in a different location in the rack? Now your cable is not long enough to reach the new location. You are screwed because now you have to run an entire new cable through the walls. With a patch panel you would just grab a longer patch cable and be done with it. 

They don't actually need a direct physical connection between them, but the AS in not tied to geography. An AS can span the world. Who's to say that the Australian AS doesn't have a presence in the U.S., or vice versa? There are actually fiber-optic cables running on the seafloor all over the world. This has been true for many years, and the number of cables is growing. See: $URL$ 

You need to define the interface for each VLAN on the router. The link between the router and switch will be a trunk link. You will create a subinterface for each VLAN, and you will address each subinterface with the gateway for the VLAN it serves. If any VLAN does not have a DHCP server, then you will add a helper address pointing to the DHCP server. 

Yes, DHCP and HTTP are protocols, but they are also services. Those are protocols to speak with servers that perform a function or service for you: DHCP is used to communicate with a DHCP server in order to get configuration information for your host, and HTTP is a protocol to communicate with an HTTP (Web) server in order to get web pages. In general these type of protocols and services are off-topic here because they are applications or protocols above OSI layer-4. 

Just an additional note, you should modify the classification to match your environment and requirements. You can classify based on other criteria as well such as IP address. 

Look into enabling BFD. BFD is a separate protocol that EIGRP can subscribe to for failure detection. It can provide sub-second failure detection in a LAN environment, but you don't want that over a lossy WAN connection like the internet. You'll tune the timers higher for the WAN, but the advantage with BFD is you can configure BFD dampening. When you are on the border of a cell/sat connection you can get a lot of flapping back and forth when using low timers, if you configure dampening it will detect the flapping and stop the convergence for a time period to stabilize the connection. 

It's because R1 doesn't know how to reach those other interfaces (it doesn't have routes for those networks). You need routes on R1 pointing to R2 for the other two subnets. R1 of course knows how to reach 172.16.2.2 because it has an interface on that network. 

QoS will apply policies to different traffic classes as it passes through the device, such as giving priority to certain traffic. But it does not signal to the transmitter to pause. Flow control operates at the interface level and will send a Pause to an upstream transmitter telling them to pause transmission (assuming they also are set up to honor flow control messages). This can affect all traffic passing over the interface. There is an enhancement called priority flow control which applies flow control based on CoS class. The devices negotiate this using LLDP DCBX and exchange their QoS configurations, if they match, then they can successfully use priority flow control between them. Overview of PFC 

Some of the ICMP messages have sub-information. You will need to resort to other methods to get the information you are seeking. 

The ethernet frame isn't counted in the MTU. It appears your MTU is 8100 octets, based on what is in your question. Your Router LSAs, as depicted in your question, are actually a minimum of 36 octets, but they are variably-sized. A Link State Update packet header is actually 28 octets: 

The router uses the IP address and mask configured on an interface to determine what network is attached to that interface. That network and mask then become part of the routing table as a directly connected network. There are three ways a router learns about networks: 

Multicast is a version of broadcast, which sends the frames to all switch interfaces. Having said that, there is something called IGMP snooping that allows switches that support this to listen in on the IGMP conversations between hosts and a multicast router to see which switch interfaces want traffic from specific multicast groups. Switches that support this will only send traffic destined for a multicast group to those interfaces that have a destination interested in the traffic destined to that multicast group. Not all switches support IGMP snooping. It is not something that is required, and pure layer-2 switches will send multicast frames to all switch interfaces. 

If it supports LAG you can combine the redundant links into port-channels that are viewed as a single link. However, both of those links would have to connect to the same Cisco switch unless you are running VSS or Nexus vPC. 

If you want to see power consumption of PoE, you can use "show power inline" command which will display power usage per port, plus total power and available power. 

But if you have spoke routers that have dynamic IP addresses which aren't known, you can't create a host route for them. In this case you can create a front door vrf in order to use two default routes without breaking your tunnels. You place your external interface into the new vrf. 

You kind of answered it yourself. The advantage for each is an increased level of redundancy. The advantage of vPC is that is provides link redundancy as well as chassis redundancy. A dual-homed connection would be used for end devices that support port-channeling. For double-sided you of course need the downstream devices to also support vPC, such as a core layer of Nexus 9k connecting to a pair of Nexus 5k. 

Protocols at the Physical, Data-Link, Network, or Transport layers do not use names. Only applications need to use names, so DNS is an application-layer protocol because it allows the application to translate a name into a network address. 

The use of upper-layer protocol information deals with Neighbor Unreachability Detection. This deals with neighbors that have already been discovered, but something may have gone wrong. For instance, a the neighbor's NIC was swapped, so the MAC address for the neighbor has changed. You need to make sure that the forward path works. See 7.3.1. Reachability Confirmation, specifically: 

Configuration of your clients is off-topic. Clients get DNS server addresses from DHCP, or it is manually configured in each client. If your router is the DHCP server, you can change it to give a different DNS server. Other than that, you really can't change the client DNS server from your router. 

You are not really creating the VLANs; you are creating the SVIs for the VLANs. If your switch isn't getting the VLAN information from elsewhere, then you need to create the VLANs. From the global configuration mode, you use the command to do this. Once you have create the VLAN, you have some options, e.g. you can name the VLAN. You can refer to the Cisco documentation, e.g. Configuring VLANs: 

Tuning requires a bit of trial and error since all situations are unique. I would suggest the following as a starting point: 

There really isn't a "right or wrong" answer on how to do it. You have to weigh the pros and cons and decide for yourself. Usually a centralized model would be used where all of your security hardware is in the DC, so you backhaul a remote location which doesn't have a firewall or web proxy back through the equipment in the DC. This requires bigger hardware at the DC to accomidate all the remote locations as well as higher bandwidth MPLS circuits. Or the distributed model where you offload the internet locally would require firewalls at every location to secure this traffic, but then you may also be able to use some smaller hardware at the DC since it doesn't have to worry about that traffic. You could also use lower bandwidth MPLS circuits based on the traffic patterns. 

If you are using 802.1x on a cisco switch, you can configure the interface to fallback to an authorized vlan if the server is dead. 

MAC spoofing is more about LAN disruption than stealing information. I think you have a mistaken idea about routers. Routers do not route to MAC addresses, and on a LAN, a router is simply another host. On a LAN, packets are encapsulated in a frame, and are switched based on the frame. The packet doesn't contain MAC addresses, only the frames do. Switches are what really get disrupted with MAC spoofing since switches switch based on the MAC address, and switches maintain a MAC address table for which MAC address is on which port. As traffic comes in from a host, the MAC address table is updated so that traffic destined for a MAC address can be sent to the correct port (if there is no entry for a MAC address, it will be flooded to all ports). MAC address spoofing will cause the MAC address table to constantly change, and frames destined for the spoofed address will be sent to to different ports at different times, depending on which port is currently in the MAC address table. MAC filtering is really less than useless. If your switch has something like Cisco's DHCP snooping and ARP inspection, you can prevent the problem of MAC spoofing. You should investigate what you can do for LAN security (this is a huge topic with entire books written about it, and it is a topic too large for this site). 

You don't need fabricpath to run a vPC+ from a FEX. Fabricpath is really only useful in large data centers where you have a multiple tier topology (Core, Aggregation, Access). In a smaller setup using a collapsed core type design, vPC is simpler and accomplishes the same goal of getting rid of spanning tree. 

This depends on the model of device. Some of them have dedicated physical management interfaces. Others just use a vlan SVI interface. 

Now you can create a default route in the global routing table without interfering with the tunnel establishment. 

You can do a search at ARIN to see who the registered owner is for an IP $URL$ As for hijacking, I assume you mean that someone just picks a public IP at random and starts advertising it for their own purposes. If their local ISP is accepting any advertisements and not filtering them, the bad routes could potentially get propagated until they are filtered at some point. 

Yes you can, you just have to classify the traffic. Here is an example where we classify iSCSI into its own class. The class-default class will match any other traffic.