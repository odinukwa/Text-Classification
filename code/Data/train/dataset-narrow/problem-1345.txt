The use of the range-based-for is great, but you should use a reference there, since you only need to read one value of it. Otherwise each female would be copied as the variable . Furthermore you are creating a new object and copy that into your list. You should use the method in this case, which will directly create the object in the list: 

Includes I figured your has some includes for , , and stuff. While you might find that helpful to only have one header , it's rather bad practice. A header should only include the stuff it really needs, no more. Otherwise you might create false dependencies. E.g. your is the only one that uses , which it only gets through including that doesn't need it. So if you change the includes in you might break . Also every header should have include guards, to prevent double inclusion. Avoid using Don't use to print the end of a line to your stream. It flushes the stream unnecessarily and makes your output slower. Simply use . For more information see here. Don't use Your header has a somewhere. Don't use that, you are poluting the global namespace with a lot of simple and common names. It's also less readable that way. The name is the namespace is so short on purpose, so that's it not a hassle to write. Again, for more info on that matter read here. Don't use magic numbers You are using hard coded numbers in your code for specific checks (required age for reproduction and max population). While it's easy to see what they are used for it gets harder to change them later on, the more your program grows. Use named variables for them, so it's easier to understand and you can see where they are actually used. Don't repeat yourself Whenever you write the same code twice, you should ask yourself, how you can prevent that in the first place. There are multiple instance where you create random numbers in some interval or check whether an event happened with a certain chance. Make those two things functions that can be reused and more easily read. And while you're at it, replace the random number generator with a better one(you can watch this to see why is considered very bad)). You could write a small namespace for such utility functions, e.g.: 

In the name of all Javascript developers, I thank you for taking this very simple step! You have no idea how much is helps us and helps you! 

You aren't validating your images properly! This allows me to send you an image file with a webshell. Something like this: 

These are easily fixable. Fixing this may solve some quirks when you spice up your page, in the future 

(Due to limitations on the representation of whitespace, I've seen myself forced to replace all tabs with a 'indicator') 

This function should do 1 thing and do it well, not a bunch of them and doing it ok-ish. The already-mentioned readability Variable names should be descriptive. Example of variables you have: 

With the replacement as an empty string, you would remove the double-space in . Normalizing it to a single space will return instead of minifying into . 

This review will be entirely focused on your class. There's quite a lot to improve. Let's analize by method: __construct() Lets check the first victim: 

Also, notice that when you use on an event handler, jQuery runs and . Depending on what you are trying to do, you should be careful when returning anything in an event handler. 

Your validation is scaringly non-existing! You currently don't even check if has the method . You don't check if is an object! Here's how I would do that: 

Based on what I've seen on Firefox 53.0.3(32-bit), on Windows 10, my implementation is around 5-20% faster most of the time. You can try it bellow: 

It draws a 1-2 pixels high horizontal line, using the specified color. Some HTML engines and browsers use , others , others simply and others need the tag for coloring. And yes, using actually changes the color on some browsers and engines. Is there any other way to write this, but still keep it as compatible as possible with as many email clients as possible? 

Game Currently your game is just a bunch of methods. It should be a class that keepts track of its population itself, not by passing a list of bunnies. Now I can easily "cheat" the game, by manipulation the bunny list from outside. By keeping track of its own population you could also do things like running multiple games simultaniously, e.g. to compare experiments based on different starting conditions. This would eliminate the static variables in your bunny class. Seperation of concerns You should seperate your logic from your output. E.g the shouldn't do any output. It's the games task to do that. Update: Use as a default Currently you are using as your container for bunnies. While that sounds reasonable, in C++ you should stick to unless you have a very good reason not to. Especially since you are randomly selecting bunnies from you list to manipulate them, a is far better than a , since that can be done immediately, while for a list you have to loop all the way to that element. Bug As mentioned in the comments, the method doesn't do what you want. Through the method you are creating a copy of your initial bunnies that a normal. You then only iterate and manipulate this copies list of bunnies, not the original. So your vampire bunnies are not successfull at all. So instead of returning a list of normal bunnies, return the indices of the normal bunnies. And then randomly select ab index out of that list and change that bunny: 

Use when it's appropriate. E.g. in simply write No need to write something the compiler knows anyway. This way you can also change the container type without changing this part of the code. Unecessary copies In the following code, you're creating and copying too many objects: 

What did I say? Declare variables as close to where you will use them as possible. You should have this: 

The on the same line is target of discussion. In my opinion, it should be in a line on it's own but most people prefer this way. Other things like this: 

While you're doing right in using (the equivalent of) , you are forgetting that can be called, breaking your code. My suggestion is to use something like this: 

It isn't the prettiest thing on Earth, but may work for you. To call it, you don't have to change anything! Just remove that on . With some bitwise operations, you can cut down this code by a lot! 

Performance: Performance is quite satisfactory. It takes around 2.5s to search 9-bytes long repetitions, on a 8.58MB string, on my machine, using Google Chrome v47.0.2526.106. Using IE11, it takes over twice the time (around 5.6s)! Screenshots: Google Chrome, IE11. The time it takes is always around the same (with very small variations), which is a good thing. Running this code on a string that is 10% the size will take 10% of the time. That is, for a string that is 0.86MB it will take around 250ms. This is the code used to test: 

What, in the name of the Lord, is going on here? Why are you fetching an object instead of an associative array? What does do? Why is it called ? What is for? What's in it? 

Still, there is no validation of the data. And there's no way to pick 0.5â‚¬ (50 cents). You should look into that. 

It's easier to write and read. The same applies for creating a random number in some interval. And while you're at it, you can also exchange the random number generator for a better one. Simplifications Your method is rather strange. If you later decide to start your population with 100 bunnies instead of 5, you would require a lot more variables to fill your list. To initialize your list with a number a default created values, simply write . This will fill the list with bunnies, which should be some variable in your class. In your method you should use a range-based-for loop instead of your loop. That will make getting the iterator beforehand obsolete: 

I am especially interested in whether the code is pythonic and how it could be improved. E.g. the use of regexes to parse the instructions feels kinda hacky. 

Note that I already change the container type to . Otherwise the random access through would not work and you'd have to use again (or save the iterators instead of indices). 

I'm currently using the Advent of Code programming challenges as an opportunity to learn some python. The following code is my solution for the Day 8 challenge, where the task is to write a programm that reads a set of instructions which are then performed on registers. Registers start with a value of 0. Each instruction may increase or decrease the value of a register. The programm should return the maximum value in any register at the end of execution as well as the maximum that any register had during the whole process. An instructions looks as follows: . Where is a name of a register, is either to increase the value of a register, or to decrease its value. is a comparison operator. The instruction should only be executed if the condition is true, e.g. will increase the value of the register by 10 if the current value for register is less than 0. I read the input from a file called . An example input can be found here. The expected output for this input would be . 

This code was written purely for fun, but that's not an excuse to write it poorly. Still, I feel that there's something to improve on it. Besides of any performance issue that there might be, and some readability crimes, what else can I improve in this code? 

This will have the exact structure you wish. Simply use to access all values. And done! An alternative with 0 lines of code! 

Notice something? The use of jQuery just to retrieve the value of an . Just remove the jQuery from there! has the same effect at a WAY HIGHER speed, without ANY bloat. You have it right a few lines below, and I give you credit for that. 

Shows that it still takes 4-5 milliseconds, on Google Chrome (on my pc), while @Kruga's ES6 answer is a lot faster (0.9-2 milliseconds). Here are some improvements I've made, without any regards to keep the programming style integrity: 

Named as , I can access it as , which would execute the PHP code! Also, you even allow names like , which can be used to place executable code somewhere where an attacker can access. This can be solved by using , which returns the filename and extention. This is a tremendous hole! NEVER verify the mimetype. The mimetype is a lie! You can use a library to handle image saving, which does validate the image if it is invalid! One example of a library is WideImage. Here's an example, using WideImage: 

Knowing it is a rather large script, I've tried to split it into multiple functions, to make it easier to understand, read and maintain in the future. You can see the complete instruction list on $URL$ As far as I know and tested, this is working as it should. All it's functionalities function as intended and there seem to be no obvious errors. Regarding readability, error handling and readability, is there anything else I can improve?