For any algorithm, if you give it a large input it will fail to complete in a short time. For example, in the case of sorting algorithms, insertion sort is far less efficient than quicksort. But on a small array, insertion sort will finish almost instantaneously. On larger arrays, you'd see insertion sort get exponentially slower, and quicksort stay fairly quick. But regardless of the algorithm, eventually you can give a large enough input that it will take years to complete. To directly answer your question, I think insertion sort is a "textbook example" of a quick to think of but inefficient algorithm. There are certainly faster algorithms, but even they, on a large enough input, will fail to complete in a reasonable time. 

I'm going to be teaching a group of high school students about programming, and I have a general curriculum designed already, but I can't quite figure out how to introduce methods. I'll be teaching ruby specifically, but language agnostic answers are good as well. A general theme of my teaching will be allowing students to do things the "hard way" first, then showing them an easier way. For example, I plan on teaching them how to print to the console, then I'll ask them to print a word to the console 20 times. I'll use that to introduce looping. Is there a similar way to introduce methods? I'd like concrete examples/activities, along with general advice about how to use those examples. 

For while loops, you can also teach the difference between while and do while with examples, for example you can show your students an example of the format: 

I like to draw classes as boxes within each other to describe inheritance (ignoring multiple inheritance). So if and inherit from , I'd have a box labeled containing a box and a box. Inside each box, I'd have 2 sections: Public methods and private methods (and protected methods, which I won't talk about in this answer). Then, using this box drawing, I could indicate that the public methods can get out of the box and be made publicly available, whereas the private methods can't get out of their boxes. 

I'm teaching a student how to create website front ends. This student comes from a SNAP/Scratch/AppLab type environment where they learned basic programming concepts, but to position visual elements they had to either drag and drop or set an x and y coordinate. This student has an issue where they make every HTML element positioned absolutely, so they can specify x and y (with and ). This is not considered "best practice" in HTML and makes modifications to their work challenging, and causes other issues in their work. Generally, this is a bad habit I'd like to break them of. How can I get this student to understand and utilize the normal document flow instead of just thinking about it as x and y coordinates? 

To elaborate on why @RyanNutt said, a CS student should learn markdown and/or latex because they should be using those industry-standard tools to document their code. To teach them, you could integrate teaching markdown with teaching git and teaching documentation. If you assigned a project, you could assigned students to write documentation as extra credit or as a part of the project. As a part of this, you could ask that the documentation be in markdown because that is the industry standard. The students can then push their finished work to a git provider (like GitHub) and see their full project as it would be in the "real world." 

As someone who likes to advocate for best practices like correct use of VCS, indentation, sufficient commenting, and testing, I try and integrate them when I teach. But for all of these things, my students always ask me why they need to do it for projects of the relatively small size and short duration they're working on. They're right that it isn't necessary, but I don't know how else to teach it and get them to practice it. What ways do you find effective to introduce programming best practices? How do you ensure that your students continue to use them? 

And so on. This is not actually an example of an algorithm, but it acts as a good example to show why having a series of repeatable steps is better than simply going through each step each time. 

Ruby would be a really interesting language for you to work with, given your dislike of foreach loop. It provides an good way to think about a for loop. In ruby, the keyword does not exist. There's no way to actually create a for loop. But any collection () has a method, which iterates of the elements of the collection. For example: 

I am currently a co-leader of a programming/FIRST club at my high school, and for us the key has been project based learning. We are always working on something. It might not be relevant to our upcoming competition, but we always contextualize lessons in terms of what we're working on. That way everyone stays interested in the current project and sees the utility in the lesson being taught. 

I'm planning out a curriculum for my web development class next year, and based on a comment by Sean Houlihane I realized that userscripts could be useful as a teaching tool so that students can see results immediately, and actually make use of their front-end skills as soon as they know the basics. Before I would introduce my students to this, they'd have to understand the basics of HTML/CSS/JS. If my students already have basic knowledge, how useful could userscripts be as a teaching tool and what are some ways in which I could use them? Some potential issues that I foresee are: 

The best way to show your students that their work is vulnerable to SQL injection is to demonstrate it. I'd suggest that you challenge the students to "hack" each others projects using SQL injection. You could then give bonus points for the students who are able to find the most vulnerabilities and for the students who didn't leave that attack vector open. That would be a fun way for students to learn by doing. This activity could also serve as an intro to what SQL injection is. Students could discover what SQL injection is themselves, and have a fun time doing it while also getting feedback on how their own code is weak. You could then go on to discuss the broader consequences of SQL injection with the entire class and go into real life instances of SQL injection vulnerabilities. 

There really isn't a way besides practice to detect when a problem could be solved with a more efficient algorithm. 

These days, we've got all this fancy, new-fangled technology. We've got live coding, we've got presentations, we've got remote desktop adapted for classroom use. There seems to be a tool for every teaching problem. But when should we ignore the KnowledgeInjector2000TM and instead use the good old blackboard? More specifically, which concepts are easier to explain with a blackboard and how would you use a blackboard to explain them? 

I would teach the command line first. Both units 2 and 3 require use of python, which I wouldn't teach before the command line because it is normally run from the command line. I'd also teach the command line earlier because I find that it makes students more comfortable knowing it. It could also be useful because you could teach some command line utilities to connect to the pi and that we prepare the students to learn about networking further. Generally, teaching shell scripting opens many doors into computer science that I'm sure a few of your students will happily explore. Once you know the command line you can learn how to write command line utilities, explore networking, process management, and so much more. I think it'd be more effective to get this vital information to students earlier rather than later. 

To implement a traditional loop, you need to iterate over a range (in ruby the notation generates an Enumerable from a to b): 

If you are spending time thinking of test scenarios, you're doing TDD wrong. You should never just take time to think of test cases. You should think about how you want each new piece of code to behave, and then testing should be a way of writing down how you want it to behave. That's just good planning, and you should be thinking about that anyways. 

It's certainly ethical to teach the existence of such tools. It's only unethical if the teacher neglects to teach the legality of these tools along with their existence, or if the teacher advises students to use the tool in an unethical way. It's rare that a tool is not ethical, it's more common that a use of the tool is not ethical. It's ethical because the students could also find it on their own and get in legal trouble, or they could here it from you and at least know the risks in advance. 

What is the most effective analogy that you have used or have thought of to teach the object oriented paradigm? Hopefully the analogy can translate well to inheritance as well, and includes the concepts of instance methods, class methods and properties. Even better would be if it also includes the concept of singleton classes. A similar question exists on Stack Overflow. I would like to duplicate it here because on Stack Overflow it was closed an "Not Constructive." It also exists on Software Engineering, where is not closed but it has historical lock. This means that "it is not considered a good, on-topic question for this site." Again, it should be re-asked here. 

Working around these issues, what are some uses for userscripts as a teaching tool and in the classroom? 

I'd recommend that you look into sinatra or one of the tutorials that are linked from the ruby docs. They also have a specific tutorial in the docs for moving to ruby from another language. The reason I'd recommend sinatra is because it is an intro to what ruby is mainly used for in the real world: Web Development. A huge part of ruby is ruby on rails. A very interesting thing about ruby that you'll learn from the beginning is it's approach to OO. The simple phrasing is "everything is an object". Enjoy ruby, it's a pretty great language. 

What I like to do is to first teach them the code that will actually make the robot move/do whatever it's supposed to do, then from that point I'd teach them the structures that can be used to make it more interesting. For example, if the motor is represented by the , I'd first go with the simple , just to get them to have a moment where they actually made it do something. From there, I'd add things like looping and I'd teach it the same way I'd teach it to other students, but here the thing being done might be checking the controller for changes in input to change the power for the motor. Another route you could try (since the context is FIRST) is teaching first, then carrying on by explaining all the template code which surrounds it. The FIRST repo has a template of the code you can use, and explaining to students how it works could be a useful teaching tool. I also disagree with your premise that "there is a need to find ways to teach necessary concepts before diving into programming the robot itself." As someone on a small FIRST Tech Challenge team, I was the first person who actually learned to code the robot. The way I learned was first by copy pasting things from the various templates provided and using Android Studios suggestions. From there, I found out about how to do various other concepts from the google. 

Select the last word typed Check how similar it is to the other words that the computer knows Check how often the user has used each of these words Suggest the most similar and most used word If the user types a space, make the correction