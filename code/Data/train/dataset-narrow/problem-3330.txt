You can put your command to run the app in autostart for the lxsession manager. For example, I use the following to setup the autostart script putting with my command : echo "@lxterminal -e 'audioInjector.RCA.thruTest.sh'" >> ~/.config/lxsession/LXDE-pi/autostart The "@lxterminal" fires up an lxterminal to execute a bash script once the window manager starts. You can change that to whatever you want to start by first logging into the Pi or getting up a terminal there and : echo "yourCommand" >> ~/.config/lxsession/LXDE-pi/autostart This will add "yourCommand" to the autostart script. 

For a more complex example, consult the gtkIOStream example here. If you want to install it, the tutorials are here. 

Assuming that your card only supports 44100 Hz sample rates, then you can purchase a better sound card or use an ALSA plugin to do rate conversion for you in software. To get a higher quality sound card which plugs into the GPIO connector, check this incomplete list here. Regarding plugins : You can see the available plugins using arecord -L. For example in your .asoundrc file your can convert rate on the fly using the following setup : 

I can see that you are using the stereo Audio Injector card and not the Octo 8 channel card. This line : 

Yes you can. There are a few steps in doing this. They include setting up a sound card with audio input, constructing a relay board and setting up the software on the Pi to operate the gpio control of the relay board. Below is a more detailed description of each part. The Raspberry Pi has no input. So firstly, you would need a sound card. There is a non-comprehensive list of available sound cards here, some of which have audio inputs. You can then use a separate add on board (sandwiched with the GPIO sound card) which operates a double pole relay from a GPIO port. It is quite simple to put together such a system with a Relay (and snubbing diode), and a transistor who's base is operated by the GPIO pin of your choice. Connect the relay coil between the 5V power GPIO pin and the collector of the transistor. Connect the transistor's emitter to GND. For example, the kemmet UA2-5SNU could be a suitable relay which is 5V coil rated and is double throw. Finally, you can run a cron job. Run "crontab -e" with the following line to execute the task at 9 am : 0 9 * * * /home/pi/relaySwitch.sh Finally create the relaySwitch.sh script with your bash code to set the GPIO pin high (say GPIO 26) : 

You may prefer to use a standard name to change the control value. For example one name which is present on most systems is "Master" which is the master output of the soundcard. You can see the available simple controls like so : 

If you have to use the USB as the input, then you should set up an asym plugin (in your .asoundrc file) to allow you to read from the USB card and write to the onboard audio jack on the Pi. Alternatively, you could purchase a high quality sound card which does both input and output and simply use the one card. The advantages of using the one card is that there will be no clock drift between audio devices. There are other advantages, such as the ability to NOT use plugins and use ALSA more directly. A short list of available cards (with inputs) is available on eLinux here. If you would like to use the asym plugin route then setting up the asym plugin has been summarised on stack exchange here. A snippet from that discussion is to setup your .asoundrc file using your devices names, like so (which will playback on device 1, sub device 1 and capture from deivce 0) : 

You could create a cron job to execute a script every hour. $URL$ Then you need to work out how to make the noise ... perhaps a sound card or a PWM through a piezo sensor ? 

Here the target IP is the static IP of the receiver. You could use anything reasonable for the port, such as 1234. To playback you need to use a player, such as VLC or other. Here is an example using avplay : 

You can route audio from USB to I2S using Linux. For the Pi, start by working out whether you want to use the XMOS on the I2S side, or alternatively choose an I2S sound card, here is a list of some of the available cards. Next you will want to plug both sound cards into the Pi. Remove the PWM audio interface from the deivce tree by commenting out dtparam=audio=on in /boot/config.txt and putting the I2S card's overlay there so it boots on startup and it working. Finally, you will want to route the audio from the usb card to the I2S card. Imagine your usb card is hw:1 and your I2S card is hw:0. You can do this something like the following : arecord -D hw:1 | aplay -Dplug:dmix - You use the dmix plugin on the output (or instead dsnoop on the input) to ensure that clock drift is accounted for. Why clock drift you ask ? Because the two sound cards will operate with different master clocks and whilst they may both have the same sample rate, they will clock at slightly different frequencies. 

It most likely is a ground loop which is caused by the Pi's PWM line oscillating about a different audio ground to the USB speaker's audio ground. This problem can be caused by switch mode supplies (such as the Pi's 5V to 3.3V step down switching regulator). There are many solutions which would work in your situation, however you may only find one of them is suitable. Here are some of the solutions : 

You need to find what sound devices are available for recording on your Pi, to do that use the arecord -l command. For example on my system it shows like this : 

If the hat approach is acceptable, then there are various audio hats and addons on the market which can solve your problems. Take at look at this incomplete short list at eLinux. 

You need to edit your asoundrc file to join multiple cards to one. Note that you will experience clock drift if they don't share the same clocks ... which is most likely the case with USB sound cards. Here is an example : 

We have solved this problem on the Audio Injector forum, on a thread with the topic "Sharing the input". The solution is to make an asym pcm device which defines different playback and capture devices. Generally speaking because the closks of the Pi's audio system and the USB's audio system are slightly different, you will probably have to use the dmix and dsnoop plugin, or one of them. An example .asoundrc is: 

Yes it is possible. You should used the dsnoop alsa plugin. This will allow you to open the same device twice in different applications. Here is an example : arecord -Ddsnoop -f cd test.wav 

Your system is setup to have hw:1,0 as the USB device. I get this hw string by noting the output of aplay -l, where card 1 is the USB card and device 0 is the only listed device. You should be able to playback over the USB card using : aplay -D hw:1,0 Incidentally you may be interested in various other GPIO sound cards available for this Pi, check here for a short list : $URL$ 

For simplicity, I can recommend gtkIOStream's ALSA Playback class. It is in C++ however. For a dead simple standard setup, run like so : 

shows that ALSA has set up your audio injector card correctly. The "I2S SYNC error!" lines are part of the bcm2835 i2s driver and are standard - nothing to worry about. You should be able to see the audio injector sound card when you type aplay -l Similarly alsamixer will give you the mixer settings and allow you to change them. If you have onging issues, the Audio Injector cards have a support site forum.audioinjector.net 

I can see that I have "device 0" as my only option. If you have the onboard audio and the USB sound card then it is possible the USB input will be "device 1". If your USB device is device 1, then you will want to setup a default device for card 1 like so in your .asoundrc : 

As you are looking at a high quality audio ADC, my suggestion is to find a solution which uses the Linux ALSA SoC subsystem. The reason for this recommendation is that you will be able to use a myriad of pre-existing audio tools to work with your hardware for free. Also you will want a low jitter approach to collecting your audio data, which is difficult to do using i2c and spi driven ADCs. Here is a recommended approach : 

ALSA by default will now play through hw:0 and record through hw:1. The reason why you use plughw is to make sure both input and output can use the same audio stream specifications - even if their hardware doesn't support it. 

Yes, you can use the two systems together. The Audio Injector sound cards share the I2C pins only for setup and mixer settings. For audio signalling, the Audio Injector sound card uses the I2S lines. The ADC will share the I2C lines to gather ADC samples. You should be able to share I2C lines between the cards. 

You can investigate more about the capabilities of the sound card by investigating the proc directory : 

So for example if your receiver has the IP address 192.168.0.10 then you would use this on the transmitter : 

I think you should try one of two things. Firstly if you want low latency, you should ditch the USB approach which has more latency then one of these GPIO header based sound cards. This can take you from 3 ms down to 0.5 ms in ALSA latency. Now you have to worry about network latency. For network latency, you can also ditch the server and go directly for a rtp (real time protocol). For example us avconv (ffmpeg) to stream the RTP audio directly using their 'rtp' protocol and in your html5 you can simply play that rtp stream back. Another way to do it with close to zero delay is to just simply use analog ! Let the game do audio and set your sound card into 'bypass' mode which adds the analog input to the analog output of the sound card, whilst letting the sound card do its digital thing at the same time. This has zero delay. You can then take those analog wires directly into the room you are in and listen to it at the same time ... assuming the rooms are close enough to do this. Matt 

There are several issues relating to this noise. Part of it is probably bad isolation between the digital system generating the audio (pulse width modulation directly out of the chip) and the active system you have in place. A lot of people suggest to use USB sound cards, however there are some great GPIO header based sound cards available as well, such as these here. Some of these will have great analogue/digital separation with dedicated supplies for separation of noise. If you have a look at the Pi schematic here, you will notice that the aud_3v3 line is supplying the NC7W16 chip with power. The chip iteself is nothing other then a 1 bit digital buffer. This chip is also connected to digital ground. How the aud_3v3 supply is derived is not specified on the schematic. It is likely that it is derived from the digital supply simply with a ferrite bead which is a high pass filter. Based on this assumption, acoustic frequency digital noise is still present on the AUD_3V3 power and as there is no real segmentation of the power for the audio subsystem, this noise is still present on the analogue output, which you most likely hear. For that reason I have linked you to some sound cards, most of which will have specific linear regulators for dedicated low noise analogue power. Matt 

You can either use a USB sound card or a GPIO header based sound card, such as the ones mentioned here. By location, if you mean a different sound card, try using audacity and it will allow you to select the recording input device. If you want to record in different locations (with different Pis), perhaps you can stream them over the network ? Using something like the rtp from ffmpeg (avconv). Matt 

For Wolfram, there are various functions for playing back sound, such as Speak. E.g. Speak["variable"]. For hardware, you can use a GPIO sound card, HDMI audio or a USB sound card to make this happen. The Audio Injector Octo is the only available GPIO header sound card which can do more then two channels for the Pi. Otherwise there are countless USB sound cards which can do the job. If you have an HDMI audio system which can play 8 channels to 8 speakers then that is another option. It should be as simple as setting up the sound card, testing it with something like aplay and then using it from Wolfram. 

If the adapter you mention is a usb sound card, it will work. Alternatively you can also use a GPIO header based sound card, such as one of these. To record, try installing and using "audacity". Or if you want to use voice commands, try to use one of these already existing softwares to do that. This linke discusses the following 3 softwares which may be of interest to you : Jasper – Voice Recognition Software. Raspberry Pi Voice Recognition by Oscar Liang. Raspberry Pi Voice Control by Steven Hickson.