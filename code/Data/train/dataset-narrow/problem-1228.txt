As for existing solutions, check out . It's a pretty common library on *nix and even has a Windows port. As for a critique of what you posted: 

My improved version follows, taking most of these suggestions. I've tried to keep your code mostly the same and follow the same style. 

On the topic of heap allocations... It seems like every operation takes 2 s and does a new allocation for a return value. This is a bit subjective, but that seems tedious. What about an interface which takes two operands, where one is also a destination? (Like many assembly languages..) Or perhaps 2 source operands and 1 destination. (Like RISC.) Each operation could see if the destination is big enough and possibly call to grow the buffer. But the caller would decide to free the operands, and you'd probably get plenty of buffer re-use. 

can return . In this case the next line will dereference a pointer and crash. You should check for errors, then return some kind of failure status to the caller, which the caller should also react to. You also have a which does allocations but no corresponding which frees it. Come to think of it... Does really need to allocate? Maybe it should take a caller-allocated buffer. For example an interface like: 

As a general rule, having to do casts like this is often an indicator that you're doing something wrong. :-) When writing code and reviewing the work of others' I tend to try to avoid as many unnecessary casts as possible. A lot of times these mask bugs, for example casting a function to an incorrect function pointer type can produce crashes, or casting away may crash when someone tries to modify a read-only buffer. For reasons like this it's a good habit to watch for inappropriate casts when reading code, and be sure not to introduce them yourself; code like this should offend your sensibilities. :-) [3] In your case, the issue is that string literals have the type , so the compiler complains that you are passing this to something that doesn't have . So what you need to do here is: 

Your call does not account for the extra 0 byte (also called terminator) that must end C strings. You repeat this mistake in a bunch of other places. (To reiterate: if your string is size , allocate and set the last byte to 0.) will recompute the length of the string at runtime, by searching for that character. This is bad. Every concatenation will lead to another traversal, leading to an O(n2) kind of curve when concatenating lots of strings. I see the use of in pretty much any code as a sort of red flag. can fail. Check your return codes. A large part of writing good C code is being able to answer the question: "how does this code fail?" I feel like a lot of higher-level coders (usually Java and C#, but these days also objC) seem to fail to grasp this and code rather "optimistically" instead. 

This cast is suspicious. If I read your correctly, all this does is adds an extra . This means the cast is totally unnecessary. (Another general rule for anal-retentive types such as myself, by the way: casts are suspicious, especially with pointer types. If you can make your code work without casts it's always better.) I would say in general you don't need this . 

When I see a bunch of repetitive if statements of this kind, I often think "this belongs in some kind of tabular format". Even if that table is something simple like a struct array definition. Why not something like this? (Warning, my objc is a bit rusty; my C is much fresher.) 

Looks like you've successfully avoided the "leak on failure" issue that traps many newbies. (Update: Sorry, must have suffered temporary blindness, you do leak here.) But I think this is too verbose. Why do you need to maintain as a double pointer? You already have . 

Others have told you how to exploit this. In the spirit of advocating the right way to do things, here is a good way to execute with user input and not have vulnerabilities (barring of course some bug in echo :-)): 

can return on failure. In C you don't need to cast from to another pointer type. is also always 1. Further it seems that you've clobbered the parameter entirely, so there is no sense in having that as a parameter. Lastly, it seems like a really big file would make this allocation unlikely to succeed. 

You want to avoid repeat iteration over the 2nd string, which is O(N). Do this N times and you have an O(N2) algorithm. One trick you could use is to build a lookup table of the chars in . This would cost O(N) and some extra memory upfront, but then subsequent lookups in the table could be brought down to O(1). Here's a simple example. The trade-off is this takes a bit more memory and makes some assumptions about the range of . It also clobbers the buffer of : 

Footnotes and tangential comments: [1] If there are any English speaking people who might read your code, I suggest you come up with a better name than for that variable. [2] In the earlier example, characters of exists alongside any other members of the class. When using dynamic memory, there's now an extra pointer dereference going on to get to the characters. In most cases this won't make a difference but you can think of theoretical cases where the former is desired over the latter. [3] Side note: In my experience one way to tell that someone doesn't know what they're doing in C/C++ is the use of casts. A sloppy programmer will write code that the compiler rejects, and then to get it "working" quickly they'll introduce casts to silence compiler warnings instead of fixing the actual problem. If you are working on a team where people do this, I find it's sometimes a good indication to be skeptical of that person's work for other reasons. 

Again, I make no guarantees that this will actually be faster, but it's something to try. The last time I messed around with image manipulation (working in C and with by-now-very-old PC hardware) I did notice that the per-line approach was much faster than computing the offset for a coordinate for every pixel. I also agree with @Landei that is better than . 

Moving along the spectrum (from code that crashes given large input, to code that truncates the input, to code that errors out when the buffer in insufficient...), you might also want to dynamically allocate memory for this. 

If this is the code you're using, it probably gave you a warning which you ignored. returns . You should change the declaration of to . Also, the size of the mapping should be a multiple of the page size. I'd be sure to re-read the manual for , carefully read any compiler warnings, and make sure your code checks for errors. At any rate, if refers to shared memory, the following will not work: 

This next part looked kind of suspicious to me because its thread safety depends on the implementation of : 

starts out as the beginning of the string, the function searches for chars in , replaces the delimiter with a character and updates . So the caller would look like: 

As you can see, shorter, simpler code and no allocations. It's also not so hard to implement your more allocation-heavy approach in terms of this, either: start out by duping the caller's buffer, then iterate through this function. 

The C++ iterator syntax looks strange and counter-intuitive to many... Many people writing C++ don't really understand the benefits; I myself was writing C++ for a long time without really getting it. I think the turning point for me was reading Stroustrup's HOPL-III paper; as a longtime (ab)user of the "C-style" the parts about STL were helpful for me to clearly explain the approach, where it comes from, and the benefits. 

Failure in will return , not (usually I think expands to cast to a pointer, meaning your failure check won't work). As for style: This is just an opinion, but I think your style could benefit from the concept of a "cleanup block". For example, instead of this kind of style [paraphrasing your code, not doing literal quotes]: 

If this seems too complicated it's because for higher-level C++ code it probably is. will take care of all of this for you. Note though that the memory layout of your object will be substantially different with these dynamic-memory approaches.[2] Next up... 

The key benefit is that this call runs regardless of success or failure, similar to a block or a destructor in RAII. You can add more blocks at will and you won't have to add redundant cleanup code. Another way to do this is to use (if you are not morally opposed to it for silly reasons - it actually works well in C code for this specific purpose and you'll find it all over large projects, including *nix kernels.) 

Your use of looks a little weird. Don't MS's classes do this for you when you use an object as a hash table key? Also, why use a non-generic class like ? I see from MSDN that does not allow reads to be overlapped with a write in the same way that 's documentation claims, so maybe that's the reason... Have you looked at ? 

It's weird that you do in the statement, but in the loop. I would do in both places. (Seems also like you could fold the into the entirely...) 

It might be suitable for something like a homework exercise in a data structures class, but my biggest objection to this is you've tied everything to sorting the entirety of a . One of the strengths of the STL iterator approach and what you might find in the header is that you can fairly easily replace the backing data structure. If you specify the data to be sorted as a "begin" and an "end" iterator, you get all this for free: 

This has some undesirable traits in that it will silently truncate the string if the input is larger than the destination. If you are working on a system that has the non-standard , that has some cleaner error conditions: 

If you deal directly with the family of syscalls, you can pass unadulterated strings directly to the program without any chance that the shell will misinterpret them, because there is no shell in that case. Hence there is no need to escape. There are more potential security problems with code like this. Here are some that I can think of: 

Update on 2nd reading I don't like some of the repeated buffer size constants here, for example ... how weird to write out instead of , which would allow you to change the size without having to change it in two places. Taking (an O(n) operation) to perform the size check is also a bit odd. One common idiom in C code is to just optimistically start storing characters in the output buffer, and the moment you detect that you don't have enough space, that's when you return the error. (Think of an implementation of which has something like at its core.) Looking at your code though it doesn't seem like using that idiom directly will be convenient, but you can start using standard string functions in a way that will be more consistent with that. Maybe you should make the call write into a stack-allocated temporary buffer (and again, please pass something derived from as the size parameter, rather than writing an integer constant size twice), then feed the results into , which will take this approach. 

If you don't mind modifying the caller's input buffer, there's another style of doing this in C that results in fewer allocations. Let's look at , present in some C libraries as a less ugly version of the older : 

A few random points: I find it a little jarring that holds a as a member. In general when writing/reviewing C or C++ I like to be able to quickly answer questions like "who releases this object, and when?" By holding a potentially-dangling the way that you're doing, that ownership of resources becomes ambiguous, and handling deleting the objects in a safe way becomes tricky when you might have another thread working with it. I would consider a reference-counted smart pointer like . It's also a bit weird to me that is tied to method pointers. For more generality maybe should just be a template parameter that handles , then you can provide multiple implementations for this, including one that calls a method pointer. Maybe something like this: 

can be larger than the buffer allows.[1] In that case, your program will crash or worse, continue running while corrupting some other part of memory. To avoid that you should always use functions which let you track the size of the destination buffer and detect overflow. For example: 

The problem is that the object being used to synchronize is re-assigned. That means a subsequent caller will acquire a different lock. It's conceivable that two writer threads hit and each see a different lock, but end up adding concurrently to the same hash table, which is a harmful race condition. There are also more subtle problems if two threads are both calling and a third thread is inserting. You should do something like this: 

See the part where you type "" twice? Let's say you wanted to change the type of later on to some other struct. Now there's two places you have to update it. I would much prefer: 

Note in this usage, is only one functor that can be passed to . You can envision others in the future. (Say, C++0x lambda expressions -- although at that point I'd say maybe you should look into the new thread stuff that's in C++0x.) Then finally you would tie it all together with something like this: 

Not sure if you are using ARC, but without ARC this is a potential use-after-free bug. If you are not using ARC you should consider: 

This means that there can be only one instance of (maybe make it a static object in your file), and the memory overhead per is 1 pointer. (3 times less than your code). 

(This also assumes that the objects in the stack are s, but I believe makes the same assumption...) This bumps the ref count up so that the next line (which will cause the to release its reference to the object) does not end up deallocating the object. Update on second reading: Also, what do you do when is (i.e. too many s)? Doesn't seem like you've handled that case. 

I'm not sure what you're using this for, but my advice: Don't bother validating the filename. Just open the file. The system knows the rules better than you do, and by adding too much validation you can cause problems down the line. On Windows these rules are especially complex. Frankly you will never find them all. Here's a few you missed, off the top of my head: