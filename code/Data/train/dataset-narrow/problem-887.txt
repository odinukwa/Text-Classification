Input operator Sure this works. I would note that it has different semantics to the which imply reads one word. Also remember my note about capacity and size above. This function is very inefficient as it reallocates the buffer after reading every character. 

This is just a bad idea. I know it looks like you are protecting encapsulation, but you are not. What you are actually doing is binding your implementation to an expectation of what it needs to provide. What you should be doing is providing methods that use the internal members (that's what encapsulation is about). Is a triangle really 3 lines? 

This is because EOF is not set until you read past the end of the file. The last successful read will read up-to but not past the end of file. Thus you have no data left to read but the EOF flag is not set and thus you enter the loop. When you attempt to read the next item it will fail and set the EOF flag. So if you are doing it your way your code should look like this: 

But for testing it is nice to get the same random numbers each time you run. To do this initiate the random sequence at the same point. 

If your primary goal is the shortest program. Then you can use regular expressions for a much shorter program to find primes. So in python it looks like: 

If you want to do "move assignment" you will need to add another virtual in to cover the move assignment case. 

Walking along the edge just seems to be doing depth first left to right traversal. Its just messy and convoluted. It also requires the concept of a parent pointer. 

The only reason to use is to distinguish a member that has been shadowed by a local variable (like a parameter). The problem is that it is error prone. You must always remember to use to use the local member otherwise you will accidentally use the local variable. If you forget there is no compiler warning that will help you. On the other hand the compiler will warn you when you have shadowed variables. So if you never have a shadowed variable you can never accidentally use the wrong one. Thus it is discouraged to use as you are just setting yourself up for a hidden error. Rather make the compiler warn you about shadowed variables and use an appropriate name so it does not shadow. Prefer over 

That should solve your memory problems. Looking at your code we could go into your design of MyStack (but I think that is superflous). But some common rules: 

I would have lowercased the first letter on all these. The reason is that types are extremely important in C++. So you need to be able to distinguish types from objects. Use the Initializer list 

Does it work. Short answer: No Long answer: You have avoided deadlock by limiting the number of people allowed to eat. But when the philosophers are not eating they are supposed to be thinking (here they are stuck not thinking a condition variable waiting for a signal). Also your technique basically causes serial access to the table. Say you have 4 philosophers. By your rules only three are allowed to eat. So 1/2/3 make it passed the stage and grab there left fork. But only 3 can now grab the right fork (the other two are sitting holding forks but not eating and not thinking). So you have effectively serialized access to a parallel device (thus fail). Remember the dinning philosopher problem is a metaphor for access to real world devices. If you are not using the device you should be doing real work not wasting the CPU doing nothing (ie you should be thinking). Code Review Line way to long: 

Also this does not have the disadvantage of a macro. Which is a really confusing message if you add a comma anywhere in the code block. It does not compile: 

Stop Using NULL The problem with is that it is a type of integer and thus can change its type very easily. For this reason we don't use it in C++ (its a C construct). C++ has . This is a literal that represents the pointer. It has a type of and can convert to any other pointer type. BUT it will not convert to something that is not a pointer. Prefer "\n" over `std::endl The difference between the two is that flushes the stream. The stream will already flush itself when required. So you forcing a flush will only make the output operations less efficient. Bug 1 Lets start with the comment on this line. That is absolutely not helpful in any way. Which node am I adding (there are two of them). And the name of the function is and takes two nodes so I can guess this functions add's a node. **DO NOT* add useless comments. Now lets look at the names of the parameters: and . to me this looks like these are both already members of the list and you are adding in some way. You need to come up with much better names. But after reading the code that's not what's happening. You are adding the node to the list and putting into . WHY are and two different parameters!!!! 

Yes you can either do some work with templatizing the iterator and then defining a const and a non const version from that. Or you can define the base class that knows all the iterator movements and then have two derived types that provide the accesses interface (one class is for const the other non cost interface). 

Since this is only supposed to work on int(s). Then I would make it be a compile time error if you tried to use it with other types. You may also be able to do some compile time range checking when the inputs are literals. In the following: 

There are a couple of error messages from that are not unrecoverable. $URL$ EAGAIN or EWOULDBLOCK or EINTR (EINTR being relatively common). A whole bunch of those error codes should never happen (assuming your socket code works). There are error messages that should never happen here (caused by bugs in the code (bad file descriptor)) and there are error messages that are transient (network cable was unplugged). You should distinguish between the two types in your errors. Success failure as 0/1? C++ has a bool type. If you want to pass success/failure state use a bool rather than a number (unless that number has other meaning). And don't let an error code escape a public interface. Read All This implies a protocol so you know where the end is. 

You are implementing your own hash based dictionary (badly). You need to use the visitor pattern (rather than have a mark in each node). 

The full code is available here for reference. But this has mostly been reviewed. If you want to or have comments then please feel free to read it and comment on it. All The Code 

So please pick a language and stick to it. Intermixing the two is really bad idea. Looking at your code you are definitely still writing C you just happen to be using some C++ features which makes it impossible to compile with a C compiler and completely horrible C++. This is commonly refereed to as (a zone of badly written C++). 

Also prefer over . There are a few very specific use cases where list is better but on average it is best to default to a vector then measure and optimize later. Code Review Emplace Back You can simplify this: 

Also when object becomes more complex and they have constructors. Initializing them only when you need them can become a good savor of space time. Prefer pre-increment You seem to use post increment. This is fine when the type is an integer. But in C++ code you usually see this with iterators and here the post increment is slightly less efficient than the pre-increment. By using pre-increment you will always have the most efficient version and when your code is altered (and it will be) the person changing it does not need to go and check all the places where you use increment and change it from post to pre. 

You can probably do some meta-programming to determine if the destructor is but I don't have that in my head. Don't mark your destructor as noexcept. 

Remember macros don'y obey any scope rules and can quite easily obliterate code. Prefer to use functions rather than function like macros. With modern compilers and inlining you will not see any difference in generated code but have functions that behave well in terms of other language features: 

Comments on C functions C based functions for printing are dangerous, because they are not type safe. Prefer to use the C++ type safe streams. Comments on Data values 

You can actually just consider these two separate sorted arrays (one is ordered in the negative direction but that just means use -- rather ++ while iterating over it (we have an iterator for that)). So you just need to perform a simple merge into a destination (we have an algorithm for that). Once that is done perform the square operation on the values. This algorithm is O(n). Though you are making two traversals of the array. The only optimization is to perform the square at the same time you do the merge (A quick custom iterator solves that). Solution is O(n) but would be a single traversal of the array (and its not that difficult). 

You should define macros based on your conditional tags in the header file. Use the macros in your code. This should make it clear what you are trying to achieve. 

DRY Code DRY: Don't repeat yourself. There is a huges section of code that is repeated in both access functions. This should be refactored into its own method. String Literals in C++1 Literal string in C++ have been improved. You don't need to escape all those characters in your input string. 

prefer to return by reference. If you want to keep the object immutable return by const reference. Depending on usage it may be worth having two version a const and a non const version. 

Learn to write only C Or. Learn how to use C++ which probably means learning OO and the idioms associated with it. 

Code Review A standard naming convention (if there can be said to be one). Is that user defined types start with an initial capitol letter. Other identifiers that name objects (or functions) start with an initial lower case letter. This lets you find user defined types very quickly in the mess that is the C++ syntax. You seem to have all the variables (apart from user/password and port). Though some seem to be derived from others. A URI looks like this: 

But the question states that the input is one value per line. Personally I would validate that there is one value per line. Here you are calculating the factorial multiple times: 

A first look at the Variable base class: I assume this must always exist! Thus you should make it a reference (Unless there is some way to change this dynamically. Given the current interface I can's see a way to change it). 

Whether you use or upper case letters to separate words is very developer dependant. Just be careful not to use as the first character in an identifier (The rules about its use there are complex and even if you know the rules not everybody does). Why does the standard not follow this convention. The standard got written over a long period (it was not all there in one shot) and as a result has a mixture of conventions. By the time the committee realized it need a convention it was too late now. But in the standard everything is lower case. 

In int bt_encode_preorder(int * list, struct BTnode * tree, int index) You are using tree without check for NULL tree 

Allocate first. If it works swap with the current content. Then delete the old content. I wrote some articles on vector. These will help you do it better: 

Getting close to a release of generic server. Nisse Server: Part 1 Helper Functions Nisse Server: Part 2 Socket Layer Nisse Server: Part 3 Stream Layer Nisse Server: Part 4 Server Nisse Server: Part 5 Handler As a demonstration protocol (also for testing). Here is a class that pulls it all together. With this we can have a function server that implements the "Simple Protocol". The "Simple Protocol" (is something I invented for testing) is simply this. 

There are no ownership semantics associated with pointers. So After I call this I am not sure who is responsible for deleting it. Use a std::string internally and return a const reference to the string. Not sure why you would want two methods that look like they do the same thing. 

This creates a temporary object then copy constructs it into the vector (you may get a move if you have a move constructor). But you can get the vecotr to build the object in place rather than creating a temporary then copying by using emplace.