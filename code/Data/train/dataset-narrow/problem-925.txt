Init In its current form init feels dangerous and incomplete. Is it likely that the user is going to want to create a list without initialising it? It doesn't seem likely to me. I'd prefer to see something like this: 

You are creating a new instance of for over and over again. The only reference you have to these created objects is being overwritten each time you assign to the temp pointer, which means the memory is lost and can't be recovered. To achieve the same thing, with only a single memory allocation you could do this: 

This will probably be ok, depending on how long lived your context is likely to be. If your DbContext is going to be a long lasting instance, then it's worth considering how you want your application to behave / recover if the database connection is closed. 

As you're developing code you want to try to keep the amount of clutter to a minimum. That means not introducing new elements until you are ready for them and cleaning them up when you don't need them anymore. Duplication Keep an eye out for duplication in your code. It's a sign that there is scope to extract some functionality so that it can be reused. For example consider these lines: 

In this scenario, the first ace should be treated as 1 (giving a total of 15), not 11. A better strategy would be to sum all the values (using 1 for ace) and increment the ace variable you aren't using whenever an ace is encountered. After adding all values, you can then add 10 if ace > 0. Player1 and Player2 As far as the global players go, you've imposed unnecessary restrictions on your program by having hard coded player variables like . You've gone to the effort of creating a class for a to hold the cards, adding a class to hold the state would make it easier for you to make changes going forward. For example you could easily add a configurable name to the players, or work from a player collection so that you can have 1-n players instead of always 2. 

This first checks that is "truthy", and then checks that is a valid, non-zero number. If these are satisfied, then is assigned the value of the supplied property, otherwise it defaults to milliseconds, like in your example. 

I did a little preliminary research and was unable to find a class to create re-usable instances of template string literals, so I wrote my own. Below is the main file (slightly modified to remove exports) written in ES2016, along with a few examples of usage that show the convenience of the class. 

I would like a review of a library I've recently published. I realize this is a rather large request, but having looked on meta, it seems this is perfectly on-topic. I'll include a few choice samples from the library to demonstrate my approach, as well as a link to the full codebase for anyone interested in giving a full-breadth review. So to summarize, this library, called , is, as the title and tags suggest, an object-oriented approach at designing an educational tool for teaching sorting algorithms, which is why the sorting algorithms use generator functions to introduce interruptions in the control-flow in order to be visualized step-by-step. Here's a few of the classes needed to implement an iterative (bottom-up) merge sort algorithm: 

Here, we are mimicking the signature of the native API, which has one required argument and one optional argument. We simply expect a property to optionally exist on within this wrapper function. 

If you are at all familiar with using promises, then you'll recognize this pattern. While it is typically considered an anti-pattern, this particular implementation is written properly, and is also necessary in this case to take advantage of a convenient implicit race-condition behavior of promises that I'll explain in a moment. 

On Pokemon Fusion, I found it annoying that the webpage didn't automatically update the tab URL to the permalink when the fusion is changed, so I decided to write a UserScript to do that. After finishing that, I thought it would also be convenient to update the fusion whenever navigating through the site history as well. 

What are they for? Why would a client of the class need to know what has been used? I'd take one of two approaches: Approach one: Continue to use this as the public contract of the class: 

My initial impression is that this is a really bad way to have threads interacting. There's no real reason why either thread can't print out the next number. Assuming this is some kind of learning exercise and putting this issue to the side, I'd introduce a new mutex. At the moment, both of your threads share a single mutex which means that when one is done processing it unlocks the mutex which results in a thread being released. The thread released may be the second thread which is already waiting on the mutex, or it could be that the current thread manages to process the rest of the while loop and reacquire the lock. If you change it so that you have two mutexes, you can have the following pattern: 

Expressive names Think about using more expressive names. You're referring to the array of bools as both 'b' and 'array' in different parts of your code. One of the names tells your there's going to be more than one, whilst the other name hints at the type. Your method actually prints it to the console. If you get the names right, your program will be a lot easier to follow. 

Using for this also seems like overkill. I'd simply declare a char array of size . The buffer is only used locally to the function and is relatively small so can be declared safely on the stack. 

Consider replacing this with function lookup table, that way the invocation is a lot simpler (bounds checking may be required, although not for this case because of the source of the number): 

Terminal Size / Wall collision detection Collision detection didn't work as expected when I ran your program, currently you can run straight off the right side of the screen, turn around by going down and left and come back onto the screen. It turns out this is because although my terminal is only 80 characters, horizontal is set to 200, so it keeps going off the side. The terminal is capping the right hand printing, so the walls are printed correctly. Ideally you would either detect, or ask the user for their terminal size. You don't often see two breaks in the same case statement, maybe it should be: 

I'd appreciate any feedback on improving perceived responsiveness for the feature this UserScript adds to the webpage. I realize changing the URL after a slow image load within might make the URL change seem slow, but I also noticed that when calling or within a listener to or events, it appeared to cause the fusion image to load significantly slower. Though this UserScript still functioned properly either way, I'm curious if anyone can come up with an approach that improves responsiveness overall. 

You can write concise code without using cryptic variable names. Change to something more meaningful like or even just . One way to resolve pyramid code is to look for places where your logic can be decoupled or flattened. While it's possible to continue to use the dependency in order to achieve this, it's probably much easier to just use since you're already using promises anyway. This will also give you an opportunity to get rid of your global variable : 

While this is a relatively simplistic and deceivingly elegant implementation, insertusernamehere's solution is admittedly an order of magnitude faster, when using an array as a perfect hash table for non-negative integers instead. 

Inside the callback, we're rejecting the constructed promise with a , but keep in mind, if the function has already invoked or in its , this call is essentially a noop because the constructed promise has already locked into its state and cannot be "settled" again. Because of this, it is unnecessary to assign a reference to the timeout and call if those occur first. Conclusion If you've read this far, you've probably realized by now that the suggested code is compact because it takes advantage of a thorough understanding of the promise specification, and is able to safely make assumptions that keeps the code DRY. 

This part is pretty straightforward; we're creating a timeout given the amount of milliseconds supplied from or the default , and invoking the callback function in that amount of time.