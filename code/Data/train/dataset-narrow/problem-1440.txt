Now, a command should return if the session is supposed to stop after execution of the command. Yes, before in your string of statements, you had a whole block to if the user was in the group "admin". Since you don't have this anymore, just create a function for it: 

The only downside is the fact that this enum now takes up more space - if that bothers you. Combining lines This isn't entirely necessary either, but it takes away a line from your funtion. This: 

I recommend creating an object of constants that are the different types. That way, you won't have to keep writing, for example, 

This same idea can be used for the rest of your code, even in spots where, instead of the parameter changing, the object that is being acted upon is changing. And, if you come to a spot where the changing parameter/object name is not only changing by a single number, you can consider using an array to hold the different parameters/object names. Then, you can just easily iterate over the array and call the method with each element of the array. 

When seen without context, one would expect these variables to hold boolean values. However, this is obviously not the case: 

I did not test these out, so I don't know how much of a speed boost they provide (if any). However, feel free to try some of them. 

Indentation It's not necessary, but sometimes indentation makes things look nicer. For example, your enums could be indented: 

You have two entirely separate conditional statements just to add a single character? That's a waste, and it makes your code look ugly. Honestly, I don't think you'll even need to worry about that "s". 

The only local variable that is being created here is ; all those other variables are global. Experiment Run this in your console: 

Unix words in a dictionary that comes with Unix and Unix-like operating systems. Pro: It's just a file on the computer that has a single word per line, making it very easy to read. Con: Your user may not be using Unix or a Unix-like operating system. 

Your variable names should describe what the variable is used for and/or what it means; this allows anyone reading your code (that includes you if you were to step away from the code for a while). Having short, one-letter names or cryptic acronyms does only hurts your code. I wanted to review more of your code, but I could not understand a thing because your variable names said nothing. 

This is a little nit-picky. In the signature of , since you aren't looking for any command like arguments, you should put in the arguments space. 

Generally, in JavaScript, the singular version of the object being looped through is used as the indexing variable: 

This is highly debatable topic, but I have been taught by people that it is always better to use the pre-increment operator over the post-increment operator. By that I mean this: 

The other answers have already provided great information and great alternatives. However, I'm not too keen on some of their recommendations. For example, Flambino's solution is splitting a string and then doing string comparison; this can't be too fast, right? When I thought of this code, I immediately thought of JavaScript's ; this gets the last index of a string in another string. Using that method, you can now find if a string ends with another string with this: 

Notice how I added documentation to this error? You should add this to your function so you can describe what each argument means and what the return means. Also, so you can describe the purpose of the function. Now, you can use an instance of this class when you are throwing an error. Here is what that will look like: 

There isn't much more to say about your code, but I have an idea for future improvement: right now, your code will say even if the element is partially hidden on the screen. How do you plan on handling this? 

and the Windows code in the respective pre-processor statements. As for what actually goes inside the Windows code sections, I am unsure. Through some quick searching, I came across in the API index. However, I have not tested it out. If that does not work, feel free to explore the API for other possibilities. 

Your will call , which will iterate the array's elements one-by-one and apply (i.e. call, not await!) the passed function on it. It is now useful to mentally desugar your passed function from the aync/await syntactic sugar: 

I implemented an , whose operation returns a Promise. The additionally enforces a limit on the number of entries, so that returns a Promise as well. 

This is not quite right since JavaScript (i.e. ECMAScript) is not multi-threaded. Simply speaking, the VM executing the code has a queue from which it dequeues an action (e.g. "run this file") and executes it. This is done ad infinitum. It runs every dequeued element either to completion, to a (in generator functions), an (in async functions) or an (on a generator function). The only way your code can be interfered with (preempted) is using these statements. But even then no parallelism is created, the VM just switches the current queue item it is processing, e.g. to the caller of when the generator function just ed a value. I recommend you to read Concurrency model and Event Loop on MDN, which explains it in more detail and formally better than I can off the top of my head :) The effects of the execution model Endless loops cannot be avoided The following code will print and then hang in the endless loop. 

Quiz: forEachParallel with timeouts Will the following code hang? If yes, where does it happen (in , in , in neither)? What does it print? 

Exactly! guarantees that will be called and completed in-order on the array elements. In contrast, guarantees as well that will be called in-order on the array elements, but not that they complete in-order, too! 

After desugaring, it is now apparent that this is the reason why will hang on the second iteration. forEachParallel vs. forEachSequential 

Interesting use case! The core functionality reminds me a bit of my own AsyncQueue implementation. I admittedly did not have too much of a look at your business logic, though. I hope the following notes are still of use for you. 

I am writing a couple of functions accepting tables as input parameters. These tables constitute a range of options, which should either be given or inferred from default tables. Concrete use cases can be found in the unit tests below. The main question: Is the code idiomatic Lua â€“ especially the use of metatables? Code 

Several people and I explored this back then in a Flow-Based-Programming implementation for JS: $URL$ I'd consider the approach valid for small environments, but would prefer a different way on the global layer, e.g. 

Both classes use , which I also built using Promises. For the sake of brevity, I would like to restrain this question to the queue implementations. Usage example Excerpt from $URL$ 

Elaborating on the PSR-0 specification The spec defines mandatory requirements your autoloader must fulfill. They provide example inputs your autoloader must accept: 

Your code would be shorter and much easier to reason about if it was more functional. However, as JS is missing some functional concepts other languages take for granted (array comprehension, min/max in array by key function), this would require helper functions being a new, but onetime overhead. Are you using a third-party library like Lodash by accident? Then you already got many functional polyfills. Which methods does the you are using from SharePoint support apart from the iterative query interface with , ? If there is no built-in support, I'd suggest writing a generator function: 

This looks like a very good fit for JSONPath (initial specification, list of libraries). Of course, if you only have this single code part which has to do traversing/modifying in a JSONPath-like fashion, embedding an extra library is overkill. If you use a transpiler which supports ES2017, you can make use of the latest Object.values() method: 

Then again, inside a thread or a process, you can employ the green threads/fibers/JS-esque multithreading approach again - if you feel the need for it, e.g. because of easy reasoning about concurrency issues. 

I fear this might not be the best approach depending on the scale your server application is aiming at: 

Display wins, losses, and draws immediately In your game, when the game comes to a player winning, a player losing, or the players reaching a draw, the game does not notify the players with a "Game Over!" until the board is clicked again. To fix this, you should check to see if the player's move is a valid move and then place the marker before you do any win checking: 

Indentation isn't as strict in python 2 as it is in python 3, but you still want it to be perfect. In your loop of , your indentation is messed up: 

The CoffeeScript compiler treats parameters with a before them as a name of a property to set to the parameter. For example, will become: 

The method is looking for a string parameter (but, of course, can take a number parameter). Therefore, you are just fine leaving out the 

To add a controller to our directive, we simply need to add the property to the object that we are returning: 

In the future, I recommend that you add some sort of documentation for each subroutine you have. It doesn't have to be a lot; it can be something as simple as this: 

I say it is better to use the pre-increment operator because the value of whatever variable that is being incremented is immediately incremented; if you use the post-increment operator, the compiler may have to store a value (either the before or incremented) value for after the computation. 

And the only thing that is really changing is this thing that can't be blank. I recommend making a function so you can aren't repeating yourself as much. Here is what I came up with 

I threw in an extra method to format the object's properties in a way that made sense to output. This is not coding related, but I believe the correct word would be "content" rather than "context". 

Another simplification you can make is removing the second part of the remaining conditional (the part after the ). If there is no text, it's going to be anyway. Now your function looks like this: 

And, just like with , the conditional will fail with . The problem here is that still holds . This can be easily fixed by only setting if the conditional passes: 

Power (look-up) Table! Looking over your algorithm, I see that you are using a lot. While this is a nice method and it is helpful, it can be very inefficient (especially if used too many times). Focusing only on , your algorithm does this: 

Your game does not handle ties. It will just asking for a place to go (or randomly generating a place to go in the case of the computer's turn) and the program will never exit. You should add a function that checks for a tie. 

Game design Don't rush me Why do the letters disappear after a few a seconds? What if I need time to think? To me, this seems like a "hacky way" to hide the cards after two were chosen. Also, this even leads to a problem that occurs after a pair is found: the space I click on next shortly disappears, even though I just clicked it. After a pair is found, you should clear the timeout with so the next spaces that are clicked do not disappear. 

I added a statement into your code because the original code uses , so if a conditional were to pass, the rest would not be checked. 

(I believe) This works because, by removing the numbers from the array list, you are making sure that that number is not repeated again in that row, which would make a row invalid if it contained 2+ of the same number. Here is my implementation in Java: 

Set to 0 Increment to a limit, calculating each increment. Decrement back down to zero, calculating twice for each decrement (except for the first). 

Also, while I'm not that familiar with it, is it still good practice in FP when one of a method's inputs is the object itself? Either way, this could refactored to a separate function: