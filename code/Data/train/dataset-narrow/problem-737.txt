Indeed, you'd hope the optimizer would realize that only name and AnotherColumn are necessary to run the query, but I think that's the actual question here: what does the MySQL optimizer do when shown this statement? That'll depend on which storage engine is used for Table01, and which indexes are available on it. Ideally, this query has an index over (id, AnotherColumn, Name) so that the query is naturally satisfied from the index and won't need to seek back to the table for additional columns or perform a sort operation to satisfy the ORDER BY -- assuming the ORDER BY is honored. 

Sounds like the database really does exist, but is just not mounted; does it show up when you carefully refresh the object explorer in SSMS, or when you look at sys.databases? 

You can eliminate the overhead by frequently running OPTIMIZE TABLE on the table in question. I don't think you've got enough overhead to worry about; it's right around 1%, and shouldn't be giving you much trouble. Are you finding that a particular query is running slowly, or that you can't execute something as fast as you'd like to? If you can show the query that you're having trouble with, then you should post that query and describe the symptoms (as well as the table itself and the pattern of inserts you're doing). I note that you're using MyISAM. Have you considered using InnoDB instead? InnoDB has several advantages over MyISAM, and you might find it more appropriate for your application. 

This usually takes the scenario where both results are different, so as you might guess the script is being executed as a different user so this user might have different privileges. Then, you need to understand that whenever you try to connect to a shared folder. You'll be ask for user and password unless you are the same user as the owner of the Shared Folder. However, this can take you to a misunderstanding. What windows really does is try to connect to the Shared Folder with the same credentials your are logged in: 

Still, remember that going full onto normalization has drawbacks on performance as well. It all depends on the business and how you are trying to manage the data. 

Since I have to make this works, I have to make a plan and present it to the IT Department, so I need to be specific for what I need. What I believe is I need to change a few things: 

This is quite interesting since all permission are being overlapped again and again. Let me explain, Your Sql Job run as a different user you connect to the server (Some cases they are the same but that's the best scenario). You can check this by running this command on the Sql Server editor (enable the xp_cmdshell as well): 

Any solution to this yet? I'm hitting the exact same problem on a couple of servers, but not on others. I can restore the log backups "with norecovery" just fine, but if I try to do them "with standby=..." it fails on the 2nd or 3rd log. 

I've got a multi-site 2008 R2 WSFC with a file share witness. I noticed that the possible owners for the FSW is every node in the cluster. I thought the concept of a FSW was that no node of the cluster owns it. Its a witness that sits outside of the cluster. So what is the purpose of having "owners" of a FSW resource and what would be the effect if I limited the possible owners to just those nodes at the primary site? This secondary site of this cluster only exists to support a SQL Always On Availability group that's using asnyc commit for DR. Failover to the DR site will be manual. All nodes at the DR site are set to NodeWeight = 0 so they don't participate in quorum anyway. 

SQL Server does have 3-way set operations; the CONCATENATION operator accepts n inputs. Given, for example, ten tables: 

It seems like MySQL allows ORDER BY in a subselect where it shouldn't matter, like in this case. The outer SELECT doesn't have an ORDER BY, so the results of the query aren't guaranteed to be ordered. What three SELECT statements are you expecting to emulate, Jakobud? I only see one: 

We'll see a query plan that gets the rows matching (with predicate push down in the TABLE SCAN operator) then concatenates all the results into the operator. The reason that you don't get a plan merges then sorts is because it would be very slow, and the sort isn't necessary to implement the operation. In your BOO, FOO, and KOO tables, you've declared a primary key. When the CLUSTERED INDEX SCAN accessor enumerates the rows, they are produced in the order of the underlying clustered index -- guaranteed. Concatenating two sets then sorting the result is much slower than using the MERGE JOIN operator, and the MJ operator can be used very readily since both sets are sorted and indexed. 

When Windows tries to connect to the Shared Folder it uses the PC1 login (JhonDoe 123456) since this is your local login and then it compares with the remote login information and it matches exactly with the PC2 login (JhonDoe 123456). Just then, it let you access the shared folder without any prompt for password. However, when it faces this situation: 

I had a query that copies the backup to a Network Shared Folder hosted by the Backup Server but it fails to run since the SQL Server service is executed by a different user (sqlservice), I login to MS SQL Server with (sql_admin) and my Windows login is (DBAJhonDoe) I made a batch file and try to accomplish the same but nothing changes. It still fails for the same reason. I made a login for Sql Server with my Windows user with sys_admin privileges but the same thing happens. 

Actually, you could go a little further and take the Author out and having a new table named Authors and you could be more rigid and take publication as well. Book: