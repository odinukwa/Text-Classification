Which got the last of the symbols actually used by Room. Problems in I found the same problem in - the . So I deleted it. A similar solution applies. And at this point we come to an impasse, because your won't compile: 

First, let me say that I support the idea that the dungeon generator and the dungeon object should be different. The code to randomly create rooms has nothing to do with the code that decides whether a user has stepped on a trap, etc. So I like the idea of a separate class/object/function. That said, this is a very awkward set of calls. It doesn't "scan" well (to use a term from literature). I suspect that all these fine details need to be wrapped up into a single factory function that a user can call: 

This makes it possible to write code that can be a stand-alone program, or a module. You should prefer it always, because that means you can write unit tests that load your code, execute a small part of it, and evaluate whether it works, without actually trying to run everything. Note: you may not have learned about tuples yet, if you're doing this for a class. But since you have obviously learned about lists, I'm willing to suggest this just in case. Second, you may not know that you can compare tuples for equality. So, a good way to compare 2 numbers with 2 other numbers, if you only care about total equality, is this: 

First, get rid of the double-spacing. I don't know if that's an artifact of posting on this site, or if you really coded it that way, but fix it! 

If you want us to evaluate your code in light of the pseudocode, you'll have to provide the pseudocode, too. That said, it seems like you're doing a lot of extra work. Specifically, whenever you find an you're swapping the and values. The description you give of the pseudocode says to find the min, and then swap. That would be a single swap once the loop is done. You might need a separate variable to hold the index of the min, too: 

I somewhat like your objects, but I don't like your implementations. Ignoring your code, you have a made up of a series of parts. You might call the parts or . Each of those parts has one or more possible successors. You will want to balance showing a huge blob of text versus having single-successor parts ("page breaks"). You have a class called . This is IMO a mistake. Your parts have a variable number of attached optional transitions. These are your choices. But each transition can and should stand alone. These are links to the next page, each of which is a (or if you insist, but that's not much of a noun -- it sounds too verb-ish). I would suggest that you practice a little inversion of control and write your class to accept a decision-maker that will determine which links get followed. This can be as simple as a list of values. The other half of the equation is how to store the story. I would suggest that you invest a little time and effort into a simple text parser. Something like this: 

As you can see, this lets you send data into the generator, then pull data back out. You just have to start off by sending a to "prime the generator". This is relevant to you because you need to have a 2-way conversation. You want to send out some options, and get back a selection. You could do it like this: 

I think this code is much clearer, and easier to understand. I think all the code is at the same level of abstraction here. So if someone adds a chance, it should stay at this level of abstraction, which makes maintenance smoother. 

You could pass that to the constructor, but why? Suddenly you remember that a function call is a valid spot for a generator expression, and merge that into your set: 

There are some things that seem obvious to me, but I don't know how much benefit you will see from them. 

In cases where you know the endianness of the source data and target data is the same, you can sometimes just use a pointer cast: 

You are not handling the case of a zero-length vector. This would be an empty input, or an error of some kind. You are not handling syntax errors at all, really. What should your code be returning for something like ? You are using recursion when it is not necessary. Specifically, your function is really just a way to hide iteration. It would be better, IMO, to write your code to loop over the delimiters instead of calling a function and then recursing with the same tokens and a new delimiter. You are using recursion when it is not necessary. Specifically, your "right subtree" case recurses with the same delimiter, and . That's a sign that you can just continue your existing loop, after updating the parent node to a new value. (You will have to move your "new node" code inside the loop, though.) 3. 

It's a good idea to separate your private data from your source code, especially since you might be tempted to put your source up on a code-sharing site like bitbucket or github. This way you won't "forget" to scrub out the secrets when you post an update at 3am one night... You can set your api key during your initial startup: 

Edit: Based on your comments, you don't want lodash at all. You just want to sort an array by an arbitrary key. The key, in this case, is the order in which a value appears in another array of values provided by you. takes a comparison function as its argument. I'd suggest the following: 

That should be a single database call. Finally, you have to deal with the users. You existing code doesn't seem to allow for changing jobs: if you have Fred.Flintstone@yahoo.com working at Slate Rock and Gravel, there's no way for him to change jobs to Spacely Sprockets. Trying to change the company associated with a visitor's email will result in an error. I don't know if that's because of what you're doing, or if it's an oversight. You'll have to make the call. At any rate, you can do a similar thing with querying for email addresses already in the Person table, computing the set of emails not in the table, and doing a on those records. (You'll want to create a dictionary to map company names to records, first, using the results, plus maybe another query after the bulk create, or a rerun of the whole companies query.) Again, that should be a single database call. But this depends on your underlying database. The Django docs warn that there are limits on SQLite, so you may have to do your bulk creates in batches. Summary I believe you can improve your database availability, and the script performance, by doing the following: 

You are not using Python idiom for structuring your code. Please see this page (one of many duckduck search results) for an example and explanation. You should be using: 

With that in mind, what happens if you think of your program as operating against a single object - the register file - instead of operating with a collection of and objects? 

You can provide a class that moves by inputting numbers, and a class that moves by calling (or whatever). is a terrible name. Nobody expects the Spanish Inquisition. Also, nobody expects a to take a parameter. Make that a or or something. Every move is followed by a check to see if the board is in a terminal state. You might want to make your move function a boolean, or define an exception, so that you can merge those two operations together. Your function spends time calling . If you change your implementation, you can probably let the garbage collector handle that for you. I don't think does what you think it does. If I understand your class, you can get what you want just by shallow copying the list. You set parent in but you don't append to ? 

You create a and then throw it away after getting the stats. Why? Why do you keep the but discard the ? Aren't the criteria (and the stats), in fact, attributes of the I suggest that you merge those objects into the interface, and let it decide what or who to dispatch to. (This goes back to me not understanding what a is, and not understanding why you need one.) Laziness is a virtue In your class method you make some web calls. This is a bad idea, simply because creating an object doesn't guarantee using the object. This is demonstrated later in your method. The method sets by calling: 

Finally, I would suggest that instead of dropping into insert mode when a match is not found, you print a message saying "Select option 2 to add it" or something. For extra points, you can remember the last searched word and make that the default during add/remove operations. 

I'll start by saying that I agree with nearly everything on @ConorMancone's review. Read that first. With that said... Check your math I don't know anything about laminar flow. So I looked it up on Wikipedia, and I don't recognize the equations you are using. Maybe you have a special restricted form. Or maybe you're using something that's more advanced or more basic than what shows up on WP. Or I just skipped over the section containing your equation - it's not like I spent a huge amount of time looking. Regardless, you should check that your math is actually valid - ignoring the whole "implemented in python" part. Once you are sure your math is correct, please put the name of the equations and their formula in a docblock comment at the start of the function: 

I'm not sure how to review this, because I'm not sure what you're trying to do. So here's two partial reviews, instead. It's a program If you're trying to write a program that does useful stuff, this is a failure. The output is not in any useful format, and there isn't an interface that will let me get to the data on my own. Structurally, you spend a lot of your top-level code working with the interface. Given that the data are stored in text files (html), and there is no argument parsing, that seems ridiculous. Why do you put anything into a pickle file? What are you really doing here? If you just count the class/module references, this is a program about storage, not a program about parsing or reports. I had a look at one of your example html files. It appears to be dead simple - apparently, one "paragraph" in the report contains a handful (4? 5? 6?) pieces of data. Each paragraph is separate from the next, and while they do indicate begin/end events, there is no real connection between them - you need to determine that based on the field data. (It's not like there's a tag and a matching tag or anything that have to be paired.) I would suggest that you adopt the model of the module: take a file spec, or a readable object, as your object parameter. Parse the fields of the file. Return an iterable, or return a generator. Let the caller do everything else. 

You have not specified the behavior of your list, which makes it hard for us to reason about it, and makes it hard for you to reason about it. Because this is a module about a data structure, it's a good fit for Design-by-Contract, which I recommend you read about. Fundamentally, in DbC, each method or function has a precondition which must be met just prior to executing the code, a postcondition which must be met after executing the code, and an invariant which must be true at the start and the end of execution, as well as being true when other public methods or functions are called from within the code. Consider your operation: the precondition is that a node with key may or may not be present in the list. The postcondition is that the first such node will be removed from the list. (It's not clear whether you want to handle multiple nodes with the same key: do you?) You don't specify an invariant, but I'd suggest the invariant might be that points to the first node in the list, or is NULL for an empty list, while points to the last node in the list, or is NULL for an empty list, and each node's field points to the next node in the list, or is NULL when the node is at the end of the list. You should consider documenting these three conditions. The invariant is always true - you can document it once at the top of the module. You might even document it in code, in a private helper function you can call for debugging purposes: . The pre- and post-conditions will vary from function to function. I suggest documenting them in a block comment. With that out of the way, let's consider your code: