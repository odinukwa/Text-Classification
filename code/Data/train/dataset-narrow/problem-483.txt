Why do you have two separated tables? Your model is faulty by design. You don't need in this case two different tables. Just create one table for user accounts and a different one for user account type. 

Normalization are a set of techniques that, in a theoretical scenario, are intended to pursue consistency and ease of management and save costs. However, since you cannot work with a theoretical scenario, but with a real DBMS, you may find that a database with a certain high degree of normalization may be hard to use, and hard maintain in terms of coding and daily maintenance in a real-world scenario. Said that you may find that, under certain circumstances, you can achieve the same goal of normalization by means of other techniques while not compromising computation cost or maintenance cost, and with an acceptable increase in storage cost. This is why, along with Normalization, there is another technique called Denormalization. Of course you should do specific benchmarking tests and case studies to know which queries are the most common ones, so you can choose which columns to denormalilze. For example, if you have a country with several different country specific columns, and you have the country id (say, an INT) as a FK in the rest of your tables, as probably that id is meaningless (as intended, since it is an ID), you may foresee that every single query will need to join with the country table to retrieve the country name. So you may want to denormalize the common country name, which is used for daily reporting, while you may find that you don't need to denormalize the formal country name, which is used much less common. So analyzing the real use of your database you may try to improve their computational costs. After 17 years designing and managing databases, particularly in the DWH world, my rule of thumb is start at 3FN which to me is a good trade off between usability, consistency and computational, maintenance and storage costs. 

But what happens when there two conditions required, namely the joint combo of (TestId, TestSubId)? Ie, what do I do for the IN clause, the ???, in the following to show it has to be in the combos (10,25) and (11,22): 

The more I learn about about the great things you can do with mysql, the more I keep pushing to learn. I have two tables: Tests 

EDIT: I have made an edit below, adding more info. Do I have something missing in my file? (And also can someone tell me how to get details of the warning I am encountering below?) EDIT: Also note when I add to wampmanager -> MySQL -> my.ini, I can log in, but do nothing thereafter. (Note: if I go to any other page thereafter it goes to the login screen again where it fails as below.) However, on the right in I have the following: 

EDIT: Since posting this I have read some more and some people suggest changing within this file, but I do not seem to have this setting. Is this what is causing this problem? 

What I would do is to create a table with the stock_id (that can be the alphanumeric code or a integer), the timestamp of the measurement and the current value. That is your entry data, 3 columns. From that point you can add columns for calculations (the difference absolute or percent) with the previous value. Having all in the same table will simplify the model and ease your queries. Try to create a date (not timestamp) column and create a partition by it. It may lighten a bit the access to the table as long as you set it in your queries. 

ETL is not a tool, but the process or group of processes intended for data integration from a source system to the destination system, generally a Data Warehouse. So if you are doing an extraction, transformation and further loading of that transformed data, you are performing de facto ETL. Someone could argue that it is harder to maintain, and more prone to errors. And they'd be right. But a poor code does not convert it into something different than code. Same applies. The tricky part is the final load process in the sense of being moving Excel files in a file system. We use at work a MapR DB based on MapR FS made out of independent files and yes, we do data integration and we finally "load" those files into their final destination, despite they are actually just files. In the end they are accessed by a Query Engine. So in the present day I would consider it an heterogeneous database and your system an ETL. Don't see why not. $URL$ 

I have changed the password to 'abc' according to this link: $URL$ I have done exactly what is written here, even using localhost, not localhost:8080 in the things to type. There was a warning at one point, but it does not tell me what. It was at the point (I am version 5.7.9): 

We are told to watch out for things being set to null (we dont want) by using the IN clause in the following: 

What I need to do is count the number of tests a user is signed into and are not complete. It must include all Tests they have not resigned from. (This is easy). BUT it must also include all the Tests they have resigned from and another User has not taken their place. (This is the tricky bit). Another user will have been deemed to have taken the place of the User in question if they have an entry in TestUsers with the same TestNumber and the same UserSlot (note both), and they either have not resigned themselves (ResignedTimestamp='1970-01-01 00:00:01') or they have resigned but their ResignedTimestamp is later. Here is my SQL. 

As you cannot use the vendor name as identifier, since it may be duplicated (as it happens with the name of a person), you need a true identifier to be set upon creation. When someone identifies themselves in your system, they cannot identify by their name, since it is not enough to uniquely identify them. Thus you don't have any other option than assigning them any proper id when you create the record on your vendors table and identify them by that id. For this purpose you can create an ad-hoc column (filled in its most simple approach with an auto incremental series), or use a contact email, Tax identifier or any other key that you know is unique, instead of the name. 

The basic question I ask to myself or the user when I gather the requirements in order to create a model and solve your doubt is "How much information do we want to keep about this now and if it is possible to foresee, in the future?" If it is incidental information and you will not need to store much about it apart from the name, maybe you can keep it as an attribute of the corresponding entity. If you need to store specifically related information that, otherwise you would need to denormalize it heavily to be stored, then maybe better create a separated dimensional table with all the related information and then keep just the foreign key. Anyway, as you ask for the case of a SCD, in either case you can historicize your table no matter if you are storing the information as an attribute or as a FK of a proper dimensional table. So for me the necessity of storing such changes wouldn't play any role in the decision making of having it as an attribute or a dimension. 

The following SELECT with INNER JOINS works, but does not count it right. I have a tests table: Tests 

I thought User should be or something like that. ORIGINAL QUESTION: When I try to log into my phpMyAdmin on localhost:8080 I continually get: 

It gave the following (note I am localhost:8080 and not just localhost - could that make a difference? 

The Rank will only change about once a day. However, the page will likely be viewed maybe 1000 times a day. So instead of getting the database to calculate the rank for each of the 1000 visits, I thought it would be best to just fill the 'Rank' column once. How can I include an UPDATE to fill the Rank column, using my chosen way to rank people. (Note if two people are ranked 5, then the next rank is 7.) 

The result counts row (7, 25, 5, 1970-01-01 00:00:01) eight times, and adds to that (8, 25, 2, 2016-04-23 12:00:00) once. So it is giving me an answer of 9 when the answer should just be 1.