Getting back to , your code isn't equivalent at all. The original function is actually pretty efficient at what it does - it calculates what it needs to copy, then does that in a single operation. Your code doesn't perform a calculation at all - it counts row by row with this code (line continuations added for clarity): 

Using to access rows (and concatenating the index) is unnecessary - you can use and just provide your index directly: 

Performance As @RubberDuck noted, the biggest performance boost you're going to get is from not repeatedly opening and closing the Word document. Most of the other suggestions are spot on, so I'll limit this answer to the performance aspect of the code. Based on your existing code, it is apparent that there is only one line per person in your Word document and all of the lines have (or should have) the same structure. What you are essentially doing is performing a lookup on a Word file based on a key. VBA has an object that is designed to perform key lookups that are orders of magnitude faster than Word's method - . All you need to do is parse the document first as text to build your object. For example (with a reference to Microsoft Scripting Runtime): 

Where the width of #page would be device width. A responsive design cannot have a fixed width. A desktop responsive #page will have a max-width and a to center it in larger windows. For mobile the max width should be used in the viewport meta tag. If the max-width: is 60em, then the viewport is 16x or 60 x 16 = 960. 

At first glance I would first trim without a mask and then stringtolower inside before the preg_replace. 

I would rather see ENVIRONMENT equal to 0 instead of 'development' and 1 instead of 'production' This is so if it is undefined it will equate to zero with . 

the true condition should usually precede the false. so if I used the if else` this would be better: 

And it's not because of all the unnecessary bandwidth wasting white space either. 100% of what? Just by the nature of HTML it is going to always expand to 100% of the content. 100% of the Browser window? Why? If there is not enough content to fill the window, why fill it with 100% of nothing? Your page no Bootstrap or jQuery: Basically I changed the #loginBox CSS from to 

Consider using an extension other than . Even html is easier than php for users to remember. You could use the extension for the user to select the response type. For Example: In the Apache config or .htaccess 

Conclusion - Burn it. Burn it with fire. The premise behind the code is that there is a common set of operations that you can do to "speed up" code. In fact, this is never true. In reality, you are turning off Excel functionality that can slow down code. There's a big difference. If you approach performance issues by looking outside of code that you've written, you're starting out looking in the wrong direction. A catch-all "solution" for performance simply doesn't exist, so I wouldn't pretend to be be providing it. The best way to look at it is to imagine that any code under performance review to be copied and pasted in place of this... 

User Interface 1. doesn't display appropriate errors If the user simply hits "OK" when the is displayed, Excel shows this error dialog: 

You always cache the and regardless of whether it is necessary or not. I would guess that roughly 1% of all the code I've written requires this. Same thing with . Same thing with . Do I write another if I need that turned on? Or maybe ? None of this work is free, and it seems like a jumbled collection of "this will make your code go faster anecdotes" collected from SO comments. The cargo cult has found thier messiah in this wrapper. 

And read the User/Source Coding Rules, search the document using this search phrase: "User/Source Coding Rule". 

Check validity of all passed parameters. Then determine the best, most specific and user friendly response. The best user response is to fix the error when possible. If a parameter is missing, add a default. If you had an HTML error on your web page, do you expect it to render? Would you like it if a single HTML error returned a 404 response? If a Browser was that rigid it may not get much use, same goes for your API. 404 is not an appropriate response when the document URL (index.php) is correct. Additionally this will confuse some users as to why. They may just think your server is down and they go somewhere else. Consider using an alternate response such as 409. You want to make it as easily as possible for the user to understand what their mistake was. 404 should be reserved for an error in the URL Also for diagnostic and support issues, use various response codes for different issues and document them for the user. You could use a text header and a message identifying the specifics problem with an error message. 

Expand and Contract (ec) the one Section where multiple Sections can be Expanded or Contracted. Only one Section is Expanded at any given time. (ecp ec paired) 

...and a simple wrapper for calling it with string input instead of array input - note that this isn't unicode aware. 

Dim blocks Some people swear by them (some literally), but the last thing that I want to do when I'm reading code is scroll the code pane up to the top of a procedure to find the declaration. If you have any sort of non-trivial procedure, I find it much more readable to have the declaration immediately before the first use (that way I can see WTH the at the start of it means too). 

The second thing that I'd mention is a usability issue (and a pet-peeve of a lot of validations I run across). If there is more than 1 thing that is being validated, and the user has to pass all of the checks, let them know everything that was wrong the first time. It's possible to have no capital, no number, and be too short -- don't make the user attempt a password 3 times to figure that out (and don't assume they'll read the instructions first). 

While the intent may have been to group aliased members, you can make this explicit by just assigning aliases within the declaration itself: 

So if the intention is to enforce type safety, the better meta solutions would be to not use Variant types if they can be avoided or to use an IDE plug-in to make sure your assignments are type safe. If the intention is to simply replicate the functionality of the .NET List object, this is an entirely different matter (and one that is both useful and well executed, BTW). Nit-picking aside, let's get down to the "better /more efficient" side of things. Given that the object in VB6 isn't much more than a glorified array (4 methods - seriously?), I would just skip it entirely and just wrap an array directly. The vast majority of the class just uses the for storage space, and the fact that the intention is to ensure strong typing makes the memory management a lot easier. Note that I am not recommending an array of Variants, and am at risk of getting into StackOverflow territory. VB6 is based on Window COM, and uses a SAFEARRAY structure to store all of its arrays internally. This (vastly simplified) defines the size of each array element, tracks the number of elements in each dimension, stores a couple COM flags, and holds a pointer to the array data. Since VB6 is COM based, it also has a couple of undocumented functions like for pointer resolution and manipulation and can directly access the Windows API. This gives you the ability to do inserts and deletes into the middle of arrays with memory copy operations instead of iterating over the array or the a . You can get the underlying data structure like this: 

You could just add pairs to the HTML and this routine will automatically find the pairs of divs. There are just a few rules to the id naming convention. This javaScript routine works with between 1 and 100 pairs of divs. It could be expanded to more divs by adding more digits to the id The pairs must be the only divs where the id starts with "d". In the pair, one div must start with "d0" and the other "d1". The following digit or two digits are the pair number. id="d0x" is paired with id="d1x" where x = 0 through 99. This snippet uses the same id pair numbers as the previous snippet: d0x and d1x and pair numbers (x) are 1,2,3,4,and 99. The first part of the JS finds the div pairs The last part sets the height to the max height of the pair. 

While on the subject of parameters I would suggest using integer parameters over string whenever possible. Integer is compact keeping down the Request Header size, is the easiest to validate, and makes comparison functions faster. Example: On a string true false parameter , no need to do it's not there it's zero. And it resolves typing between numeric 1 and string '1' when it is used as an array dimension. Instead of this: