First, you should never be using in a action method of a controller. Generally, you shouldn't be using it in a web app at all. If you want to debug it, add a log or just step through with an actual debugger using breakpoints. Second, if you don't need the local half, why do you compute it at all? Third, you haven't validated that the email address even contains an . If it doesn't, this line will throw an exception. Validate your index: 

I think a couple of Role interfaces would really help here. You need to do two things with your configuration 

Vogel612 has already covered the performance aspect. I'd like to make a suggestion that will definitely be slower but has an elegance to it: 

Then you aren't limited to just integers. RemoveElements I'd say it's a good name You should return early to save some indentation: 

Notice that the second parameter is now an array declaring the names of the services/modules you require and finally your controller function (this is the recommended way). 

That results in a and this is the wrong site for that! Your problem is and because you've defined to just be you'll infinitely recurse. Use ReferenceEqual instead: 

I know that Hosch250 has already covered naming but I think it's worth letting you in on a secret... Most programmers would prefer "stupid" code that is well written, with good naming and consistent formatting to "clever" code with ridiculous names. I don't want to bash you too hard but ? I bet you my house, wife and dog that you won't have a clue what that button does next week just by looking at this code. I worked with a brilliant "stupid" coder a few years ago and something he told me really stuck. 

But it's a bit ugly because you have to do something to go from to a . I achieved that with a simple to force an implicit conversion. 

You're naming your parameters incorrectly. The naming guidelines for parameters specify camel casing. Your method declaration should look like this: 

Aside from the issue of s resolution/accuracy there's a lot of room for improvement in your angular. 

Which one is it? General Wouldn't it be easier to use if your prefix and trailing content didn't include the colon (:)? This looks like that rare problem that would be easier to solve with regular expressions! 

That in turn lets you catch exceptions for something really exceptional but use the result for control flow. 

That's all your card needs to know! It definitely shouldn't be depending on any of your UI elements. Your UI then needs a list of available cards which can be your class if you want. On to a review... 

In terms of simply making your code better (keeping with the brute force approach) there are a couple things you could note. 

Remove the parameter and delete the commented code. Also, don't bother with just . Naming You've used a sensible name for namespace and class - kudos! Prefer to - it looks nicer and is more standard. All local variables should be named in -> . Quite a few of your names are quite good - but can be tightened up in places: try to be as descriptive as you can. Other stuff Everything is - not necessarily a problem but some people get upset about that sort of thing. 

The class is too general - especially for this implementation that is only designed to work with the specific device you're working with. You should rename it. 

That second if statement can never be hit! If is null, then the call to will throw a null reference exception. A few quick notes on your code: 

Note that I've assumed that skipping was a mistake and that you want to set code 1,2,3,4,5,6 and set misc 1,2,3,4. If that's not the case you'll need to slightly modify the for loop to take into account this discontinuity. 

The code looks good, but I can see a couple of things that could be a bit cleaner: e.g. this method: 

Notice that I've removed the redundant and also changed the comparison to use (not operator) instead of comparing to . One additional warning I would give you is: are you sure you need a generic base class repository? I find that when I have used this pattern a lot of my repositories get methods they never use. It can also be argued that it's a leaky abstraction, see e.g here and here I prefer slim interfaces of only a few methods rather than using header interfaces. 

So your mediator simply looks up a handler and passes the message on and returns the result back. I haven't used it, but Jimmy Bogard has a library called Mediatr which is supposedly very good. Your buttons would simply encapsulate the rules about displaying themselves, your would have all of the stuff about what they should do. You also allow the handler to report back to the thing that called it - quite a useful thing to have. You can also add properties to your command objects to pass in additional information/context. Hopefully that makes sense and I haven't messed up the generics in my sample code... 

Look at that there - you're newing up an and an - neither are being injected! You've overcomplicated things a bit here I don't see the point in having a class. looks a bit like an adaptor but again, I think it's all a bit overcomplicated. Basically, you want to move everything that your class depends on into a constructor argument (which is the easiest form of dependency injection to use). Need a ? Pass it into the class's constructor! The point of DI is to have all your dependent services easily discoverable. Other notes All methods should be . should be isn't particularly random at all - for this sort of thing you'd be better off with System.Security.Cryptography.RandomNumberGenerator. Autoproperties reduce the amount of code you have to write: 

Method names should be a verb phrase. => . implements so you should be clearing up after them. is easier than using a regular expression to ignore case. 

Your current implementation also has a bug. You are assuming that the source text contains - if it doesn't you'll get an on the substring. 

You could write the above using if you'd rather. Go through your code and keep pulling out all of the methods aiming to get each one to do a single thing. For example, I'd probably pull out another method from the above () called and have that create the . Other thoughts or never in names. What you're doing with your parameter is very confusing. I'd have no idea what it was for a lot of your method. It's easier to use than calling / most of the time. You almost certainly want to log rather than just the message. You'll want the stack trace when you're tracking down problems. 

StringBuilder's append methods return the StringBuilder so you can chain calls. AppendLine also has a parameterless version. So this: 

I look at the code and think that the main purpose is to iterate the array. In fact, the whole reason for the code is writing the array to the console. That can be done like so: 

This might sound a bit mean, but your code looks ugly to me... Let me explain. Which is easier to read? thisfirstone or the second one Hopefully you'd agree that the second one is easier to read, the same is true for your code. Separate parameters with a space, do the same for operators: 

I don't think it makes sense for this to be an event. What you want to be able to do is pass in an additional processing step. An event is something that may happen in the future for you to react to. General code notes: Use of If the right hand side of an assignment makes the type obvious, use to declare the variable. 

I think the code is definitely much better! I wouldn't worry too much about registering the s in your IoC. After all, you're not going to have hundreds of menu items yet. Anyway, two very minor comments: 

All methods should be see capitalization conventions. Methods should contain a verb. is one example of a bad name, that's a noun! A better name might be as that's what you're really doing. Your method shuffles the array in place - you don't need to return the array. In fact, it's misleading to because it makes it appear that the input array isn't changed. I haven't done Windows Forms in years so I won't attempt to review that part. 

I don't have any strong objections to your code and the other answer does a good job of addressing some slight naming issues. My problem is on a much larger scale - I think your domain model is far too simplistic. Consider this CSS: 

I don't have time for a full review at the moment but something filled me with rage jumped out at me... Naming The code should be readable - you have 2 ways of making that the case, one is by naming things correctly (the second is formatting). So when I see things like this: 

You're assuming that filenames can't contain a period/full stop other than to separate the name and the extension: 

I can't answer your question about performance because I don't know where your bottleneck is. If one of the API calls is taking the time, you can't really do anything using your current approach. If it's you'll need to explain more about what's in each list. 

You'll notice that I've also declared the reader as an . It's generally better to code against an interface if you can. 

The naming convention for parameters in C#, which you used extensively, is . Now, on to the first line: 

You're mixing aliases and typenames. E.g. vs vs . Choose one and stick with it (and preferably aliases). 

Edit After reading a comment on RubberDuck's excellent answer, I decided to do a bit of very rough and not at all reliable tests for speed. This answer is only about 2-2.5x faster than the simpler solution (3 Linq calls). I looked at the reference source and see that they rely on a much simpler for and which appears to be a bit faster than . My testing also puts the OP at least an order of magnitude slower. I'd just use the 3 lines of Linq to be honest. 

I like the architecture - it looks sensible, flexible and extensible so kudos for that. There's not really much to criticise with the code either - it's clean and readable. I do wonder what benefit you get with the generics particularly if you're expecting numbers that could reasonably be dealt with using the whole way down. I also think you should initialise the property to an empty list in the constructor for . The only real concern I have, which may or may not be valid, is the order of applying the modifiers. At the moment it's a first in, first executed model. This means that adding the same modifiers to the attribute in a different order result in a different value. Say I have a defence attribute and I can modify it by putting on some armour (+5) and/or by drinking some special purple liquid (*2). If the base level is 2, depending on which thing I do first, I can end up with a modified value of either 14 ((2+5)*2) or 9 ((2*2)+5). Is that desirable, or should you have a more advanced ordering - e.g. additions always come before multiplications?