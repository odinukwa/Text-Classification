You can have as many terminals as you like. I'm pretty sure the actual error message you saw is not what you've put in the question. What you can't do is running several instances of running in parallel on the same installation. keeps information in several files which have to be updated coherently, so the first instance you run will create a lockfile preventing subsequent instances from running. 

Please run and check the output for correctness, especially the line. You don't seem to specify any users for your share in . A common mistake is forgetting to configure samba users which is done with 

You only need an ADC / comparator when you want to measure / detect a very specific illumination level. If you instead can make sure there's enough illumination difference to toggle between 0 and 1, you can connect it directly to a digital pin. 

If that won't help, check output for clues (e.g. use to search for keywords like "wlan", "mac", "firmware", "error"). Those messages are often clear enough to figure out what's wrong. 

Your program is stuck because you have made an infinite loop in it. By the time you get to the line, is guaranteed to be , and will always evaluate to . Perhaps you meant to wait until the button is released, in which case you want to update in the loop, by replacing with . 

As you can see, I'm checking if the user of the library tries to open , in which case I open instead. Then I will run the original copy-protected program as , and it will happily read my fake file thinking it's , while working correctly with the rest of the files. Note that if the copy-protected software includes kernel objects, it will be much harder to fool, as it could access hardware directly. However, such software will also only work with the kernel for which it was built, making it quite impractical to distribute. 

Water pipes are recommended because they are usually connected to the same metal structure as Protective Earth in your electric socket, so touching them sets you to the same potential as grounded electronic appliances. However, most USB power supplies are isolated, not grounded, so the effect is not as direct for a USB-powered RPi, but it still helps. Isolated electronics tend to settle close to protective earth potential due to leaks in power supplies. Touching isolated metal objects won't help, unless they are very large. In the absence of accessible ground potential, two things help a lot: 

Note that there are many image viewers (e.g. ) which can render images directly, without the need to start an X server and boot into a desktop environment. If you need to save boot time and SD card space, you can run 

If your goal is to install Eclipse on a Raspberry Pi, you should download it using the package manager: 

Here is a nice tutorial which explains how GPS time servers work in greater detail. Also check out this question. 

The reason you haven't found anything is that very few people would want a sensor installed in their toilet. More to the topic, I would go for a temperature sensor since it doesn't have to be in direct contact with the urine to work, and electronics work best when you don't expose them to corrosive environments. 

Try as root in a shell. denotes the actual values. replace with the wired network interface, but usually it is . To set up your nameservers, put them into . For debugging, first try for the proxy's IP address, if this works, with a known, external IP address. 

If you create two partitions on the new card (FAT32 and ext4) and copy the contents from the corresponding partitions of the old card to those from the new one, that should work without problems. Make sure you keep the correct permissions () and you do not copy the special directories , , , and . 

On the otherside, there is of course some overhead when settings up the system(s), as well as an increased power consumption. What I'd like to ask now is if there is some experience for separating the services onto multiple Raspberrys. Has anybody done so or thought about it? Maybe there are some additional advantages or drawbacks I didn't think of. 

Don't edit the cmdline. Don't use the ip address in putty but the raspberry's hostname, "raspberrypi". 

the random file is selected once in the beginning of the script, then it doesn't get changed anymore. you need to call the function each time the omxplayer is called. 

You need a second USB camera (believe it or not) IF you're using motion, you need a different config setup: 

Yes. Static IP on ethernet interface both on Pi and Laptop. Use a subet which is different than that of 3G dongle. 

(source: $URL$ Note that I haven't used network boot so far, hence I cannot say anything about filesystem consistency when accessing the same root file system by multiple Pis in parallel, etc. 

Running a pi here with web- and mailserver for a few users for 2 years now. No hardware problems encountered so far. The pi may actually be a bit oversized for that task... 

In my opinion, there is no need to upgrade to jessie, since your systems works as it is any you won't get any benefits from using jessie instead of wheezy. Nevertheless you should make sure to stay up to date with the wheezy system in terms of security updates. Security updates are supported for wheezy until May 2018 Feb 2016 by the official security team. For long term support, there is a separate group working on support until May 2018. 

Yes, there is the possibility to boot the Pi over network. While older Pis are able to load the root file system over network (meaning you still need to have an SD card for each pi), the RPi 3 is able to boot without SD card over network. The image from the last links webpage offers a good overview: 

A few days ago I updated to Debian Jessie, for which I created a new SD-Card and moved the mentioned services to that new card. It took a certain time, but worked in the end. Now, since I have a few Raspberrys lying around unused, I thought about separating the services such that each Raspberry serves only one particular purpose (mail, web, vpn and backup). IMHO, the advantages would be 

This wifi dongle uses the BCM43143 chipset (see your link), and according to other questions, hostapd should work (although possibly using another version of hostapd). Didn't test the dongle myself, but I would assume it works. 

Raspberry Pi does not have an orientation sensor built in. You can simply use of of the GPIOs along with a tilt sensor to detect the flip / Orientation. Here is are example of tilt switches. 

Master with daisy chained slaves: More scalable (adding slaves will not use additional pins) but will get more complex in operations. 

Try to open the file and check if APT syntax is correct. Here is a post that may be helpful in your situation. 

Your application doesn't need denouncing as there are no mechanical contacts involved. The pulse adapter board has no mechanical contacts, relays, etc. Debouncing is only needed if you connect mechanical contacts to digital inputs. From Whatis.com - "Bouncing is the tendency of any two metal contacts in an electronic device to generate multiple signals as the contacts close or open; debouncing is any kind of hardware device or software that ensures that only a single signal will be acted upon for a single opening or closing of a contact." Here is a excellent guide on debouncing. On the other hand, your application may need signal conditioning. The pulses from the adapter bard may be of different amplitude that the PI can handle. Or the pulses may need filtering, etc. You can read more about signal conditioning here. 

Download and image latest raspbian on SD card - Guide Mount the SD card in Linux (assuming your laptop has Linux or a VM with Linux) and edit the /etc/network/interfaces file assuming 192.168.10.110 is the IP you want to assign and 192.168.10.1 is your gateway. 

You need to put your script in /etc/rc.local. This script runs once when the OS starts. It runs irrespective of id any user logs into the system or not. Raspberry pi manual describes it in detail here. The .bashrc file is used to setup your bash shell environment when you login into bash shell. .bashrc does not execute if you don't login into bash shell. 

When the energy in the cap is fully depleted, the power draw becomes higher than what the power supply circuit (excluding output capicator) can store and deliver. Hence the load does not get enough power (P=V.I). This is my understanding of the situation. As I mentioned, a better analysis can be done by measuring current and voltage (output power of the power supply). OP has not provided any specifications about the power supply used. I have personally seen these dropouts happen when using cheap 500 mA power supplies that are labelled as 1A. I would encourage OP to use a 2A power supply with the V, I monitor, and report back if issue still persists. 

Connect your RxD GPIO Pin (GPIO15) to TxD pin of your USB to serial adapter. Connect TxD GPIO Pin (GPIO14) to RxD pin of your USB to serial adapter. Connect your USB to serial adapter ground to Raspberry Pi Ground (Pin 6 of GPIO connecter) Use appropriate serial terminal program (depends on your OS and choice) 

Yes, you can use command line tools to play internet radio streams. I have used omxplayer to play internet radio streams with no NDMI/video head. I created certain shell scripts for station choices like Jazz, pop, etc. I would ssh into the "headless" box and start/stop playing. You can improve by invoking shell scripts via GPIO buttons.