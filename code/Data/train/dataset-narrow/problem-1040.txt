Move the validity check into the constructors so you don't have to check everywhere you want to create one. 

For adding and removing single host names, I would use a simple without the . Initialize it with an empty map and drop the additional latch. Update: I really doubt you need to replace the list of hosts all at once, but here's the combined form anyway: 

Edit: If you're doing this once per team you can use a loop with to remove the first element and to place it at the end: 

Clarity For the most part your code is pretty clean. Once you make the names more expressive it would be pretty easy to see what it does. Here are a few points: 

The short answer is Keep related data together because it's generally easier to pull it apart than merge it back together. 

You are breaking encapsulation and the Liskov substitution principle by exposing the individual parameter objects to clients. I expect getting a value looks something like this: 

Whenever I see a giant block, I immediately suspect there are a lot of subclasses trying to break out. Each validation type should be a different subclass with an appropriate override of (and in a couple cases). You repeat twelve times which is a sure sign that this should be encapsulated in its own method. For one thing, you should check if the field exists using before grabbing its value. The idiom can be replaced by . The second line of thus becomes . Add some high-level comments explaining what is going on overall. For example, given its name I would expect to tell me if the value is required, yet it appears to mean that the value was passed in and must be validated. Shouldn't a "> 5" validation fail if I don't provide a value? If not, explain why or at least point that out. 

I've found over the years that it's best to start with the normalized form and denormalize as-needed to solve performance and usability problems. Without a full description of what stores, we're left to guess about a lot of details. 

composes an so it should not extend itself. It shouldn't even implement the basic interface nor because it doesn't truly support the operation. It should implement instead. As written, allows reading outside the buffer. Are you sure you want to support this? See (1) above. You don't need a class to hold an integer pointer given that it is internal to . A simple is sufficient. The modulo operator should handle negative values already (test this!) so could be simplified. 

Is unique for each ? If not--and there's a table--add a unique surrogate key to it and use that throughout as Eric S suggested. Avoid using data attributes--especially those that may change over time--in primary keys. Adding the x, y, and z positions to the PK will severely complicate working with these rows since you'll need to update the foreign keys every time the unit moves. Similarly for . Is this what one would normally call the "class" of the unit, defining its characteristics that are the same across all units belonging to that class? This information should be extracted to its own table. 

While it seems like you're just shifting from multiple parsers to multiple factories, it is generally preferable to code to interfaces rather than abstract classes. Abstract classes are great for filling out the most likely implementation of an interface which many concrete subclasses end up overriding. When you find yourself building an abstract class that has nearly all of the functionality and only implementing one template method, a factory or strategy may be a better fit. 

As simao pointed out in a comment, this is an example of the Factory Pattern--not the Factory Method Pattern. In fact, you usually subclass the factory to determine the class to instantiate rather than making that determination based on a parameter. Perhaps this example mixes in the Builder Pattern or another whose name I'm forgetting at the moment. The factory pattern defines an interface for creating instances where the concrete implementations define how to create those instances and what dependencies they require. Interfaces are used here because the factory's method is called by other classes. While related, the factory method pattern differs in that an abstract class defines a protected method that is called by the concrete subclasses--never externally. You can always replace the method-based pattern with an external factory to increase flexibility. Here's a simple example of using the factory method pattern: Abstract Factory 

You'll need to add synchronization to guard any access of the pointers and size. Sometimes you can merely add to the method, but this usually hurts performance. You want to shrink your synchronized blocks to the bare minimum; prefer using blocks over synchronized methods. Here are some other suggestions unrelated to concurrency: 

But if you really want to use the ternary operator here (), at least move them to the declarations, and move the assertion above. It's a micro-optimization, but I would assign array[j] to a temporary variable inside the loop since it may potentially be accessed four times. Plus it is more readable 

Non-Mocking Solution As you say in your comment, you want to execute the full AJAX call to your backend service. 

You could define it on itself instead of adding it to the prototype and exposing it to every object. This would parallel how works: 

You can avoid byte shuffling by inserting a for the size before serializing instead of performing an insertion after calculating the size. The key is that "write entry" should be an atomic "append byte buffer to file" operation which again I believe NIO provides. Here are some random notes I made while reading the code: 

I don't see what could be causing ever-decreasing performance since the only state outside the main loop is a counter, but adding calls to as @jsanc623 recommends would help with that. But you can definitely improve the performance by avoiding the loop over for every URL returned. Take advantage of PHP's array which is a hash table providing O(1) lookup. First, make the URL the key for the results array. 

You can use to grab the preceding character and check it against a space, newline, or empty string (the case when the cursor is at the start). But let's not stop there. 

You'll need to decide if you want to combine some generic not-null checks with class-specific ones (name is not null) or use solely class-specific checks and duplicate the generic checks for each. One simple refactoring of the above is to extract the checks to : 

Of course, if you alter the algorithm to always delete from the end, you can skip altogether and use a simple array of s and avoid the overhead of objects. So how can we do that? As long as there are friends left to delete, remove as many friends as possible from the end of the list while reading. The list should always be in the "no friends can be deleted" state: every friend is at least as popular as the next friend. The empty list obviously starts in that state, and adding the first friend maintains it. From them on when adding the next friend, keep deleting the previous friend until we find one that is at least as popular. 

Thread A calls and sees that the buffer is empty. Thread B calls which updates the pointer. Thread A calls again, but without a memory barrier the cached pointer value tells it that the queue is still empty. 

Encapsulate Separate and encapsulate some of the logic into custom classes rather than passing around collections directly. Doing so improves testability and reusability. One prime example is the character frequency map which could easily be reused in many other programs. Here's a simple implementation that provides only what's necessary for this program, but it could certainly benefit from methods such as , , etc. I also haven't bothered wrapping the exposed map/set in unmodifiable collections which would be advisable (though see below for another option). 

Now when two calls collide, it will always be for the same counter (e.g. ). Even if they have different new values, the worst that can happen is getting the lower value (perhaps you could pick the larger in your clause). The timestamp isn't necessary, but it's a nice feature. 

You don't need the join on since you can compare the user IDs in the question directly. Remove that join and in the where clause replace 

Since you're writing this in Java, you should encapsulate it all into a new class. Assuming this is a learning exercise, you could even go so far as to model it as an array of thirty-two s. 

In addition to the great points by palacsint and barjak I have a few things to consider. There are two ways you could increase the concurrency. The only thing that must be serialized is the head/tail pointer update. 

I find that I naturally tend toward structuring my unit tests like this when I write them first using TDD. I imagine BDD would have the same effect. This results in tests that apply to the class as a whole rather than picking apart each method. 

One thing I definitely don't like is leaking outside of . I think should return the node's name instead of the node itself. should be a static inner class of and entirely an implementation detail. Finally, as Banthar said, you need to look again at the case of removing a node with two children. It's hard to tell from the code, but it looks like you drop the right subtree instead of assigning it to the replacement. As well, you should be promoting the right-most (largest) node from the left subtree, yet I see you moving left in . A better name for this method might be since it should be removed from the left subtree. 

I find it's best to leave the type of collection out of the name. First, it makes it easier to change later. And second, you can see it and in any IDE hover over the method to see the required type. I might even drop the suffix from the last two above since this method only deals with intervals. Finally, there's no reason this method couldn't accept a list. It should respond just as it does when the list is empty: return an empty set. 

This is about the same length of the original, but it's far less complicated. Each action is easy to follow and clearly lays out what it requires. Miscellaneous And here are a few tips after looking at your linked controller and view code: 

Sorry, a deeper review will have to wait til I'm not on my phone. I will say that my gut says a recursive approach will yield a cleaner solution. Start with clean and clear and only refractor once you have good test coverage and can identify a measurable problem. 

One problem I see is that is shared across every click, but I suspect you want to bind it to each addition so that removing it removes the approach damage. To do this you'll need to store each value with an "added damage" object attached to the character stats. In order to remove it, you need a way to find it. If the UI works like a stack (removing always undoes the previous addition), you can maintain a global array. However, global state can be quite brittle and difficult to refractor later. Instead, embed the UI actions either in a UI controller (look up the MVC pattern) or the character builder class itself. If the player should be able to interact with each attack type independently, you'll need to separate the actions by type. The best model depends heavily on your desired UI capabilities so I can't recommend one over the other without more info. 

Since you're placing each URL into the array before making the GET request, the isn't even necessary. Separately, you can delay writing to the file until the end of the inner loop so you write one big chunk rather than one thousand tiny chunks. It may be that I/O is more costly, and perhaps you're getting killed by seeking to the end of an ever-growing file? Seems unlikely but maybe after a million writes it adds up. General Review There are a few things that could be cleaned up here as well. 

For safety, I'd recommend saving and restoring in the module's and functions. If you don't, any exception thrown in the test will leave the mock in place. Mocking AJAX While this does result in a lot of boilerplate sometimes, you can use Sinon's fake server to mock the AJAX responses. The beauty here is that it will match up the request to the response to ensure your AJAX calls (URL, data, type, etc.) are all correct and then supplies a canned response. Here's the same test above using a fake server. 

That's much easier to grok already, but let's tackle that complicated function next. What are its responsibilities? 

This forces to when the birth year isn't a leap year, even if is 5. It should be combined using or logic. 

SpellCheck You make a good effort at breaking up the methods and separating concerns, but I would take it a step further. The methods that build alternate spellings should not be responsible for checking the dictionary. Instead, combine all misspellings into a single list and search the dictionary in one place. This also allows you to remove duplicates and avoid wasted lookups. I would also completely separate all output, possibly to a new UI class to allow reuse. You did pretty well here, but should receive the list of suggestions instead of calling itself.