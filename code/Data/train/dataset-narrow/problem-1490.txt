I'll assume you're fairly new to Python; tell me if you feel this stuff is too basic, and I'll start criticizing you for things that you don't deserve to be criticized for. State Ok, so the first thing that made me go "eww" in the code was . In general, whenever you use , you're probably doing something wrong. If I was to write your function, it might look something more like this: 

This is ugly, and violates the DRY principle. What you are doing here is looking up a value, based on the value of the variable . The Pythonic (and sane) way of doing this is to define a dictionary (mapping) from the values of to the string that should be written to : 

You don't handle the case that someone gives you a file you don't know the mimetype for, I'd recommend checking before you try and set the header. General It's best to include a guard at the bottom of the file so that you can import the file without starting the webserver. I'd modify the last few lines to read 

I'm not a Tornado expert, so these comments will be general to Python web development. I'll first answer your specific questions 

Which is much neater, and doesn't mix up program data (the mapping from numbers to characters) and program logic (the writing of the character to a file based on the value of y). 

However, that is not the case, so don't get your hopes up. Regardless, there are still improvements to be made: 

However, that's probably just because I'm a Flask user, so I'm in love with decorators. Conciser using over explicitly calling the constructor of the super class (this may not be possible, due to complications with old style classes, though don't quote me on that). wins the word for the worst name for a database I've seen all year ;) BaseHandler Having a function that returns or is usually a code smell. If you want a function that returns and some value indicating the converse of , usually people use . In that case, you can rewrite the function as 

The last case is the most important; using your version of , when I call for the second time, it overwrites the previous and variables. This might not seem like a big problem; why would you ever need more than one map? but it makes it much harder to test things when they change global variables. We can do similar things to your other functions to avoid using global variables. The function currently uses the global variable, but we can replace that with a argument. This way we will be able to convert any map to a text map, not just the one stored in the global variable. One downside to this is that it does require more typing; I have to explicitly pass around all of my state. However, one of the core tenets of Python is that explicit is better than implicit, so get used to it ;) I should mention that people often wrap up their program's commonly used variables into classes, though that's probably more complex than you are looking for right now. Switch Statements Another thing that makes me feel uncomfortable about the code is when you have long chains of statements: 

Class Scoping So your comment afore your global declaration of mentions how you wish for to be accessible in all methods. If you want a variable to be accessible in all methods of a class, the conventional way is to assign it as a property of : 

I don't know about your regexp, but you have a serious problem with Q0Handler.get; when (as is the default parameter), the line will fail. I don't know if the code never gets called with the default parameter, in which case you don't need the default, but otherwise, you should probabaly change this to something like . I would recommend checking the DB. In general, I like to think of all user data coming under 3 categories: Untrusted, Trusted but not reliable, Trusted and reliable. In web development, we can think of cookies as Untrusted (i.e. the user may manipulate they at will), secure/encryped cookies as Trusted but not reliable (i.e. the user may not manipulate the contents without it being obvious to you, but it's not guaranteed to {be,stay} {there,well formed}), and the database can be trusted (i.e. if I put data in there, it should stay there, though I note you are using MongoDB, so that invariant may not be applicable here). 

That said, I don't see the advantage of being able to do over . Also, you could always eliminate the entire set of views and just serve your static content straight from the Nginx/Apache instance that is reverse proxying your application. Do Upload I would strongly suggest you look into reading the file in chunks; as it is, your server would be trivial to DOS. It might create nicer code if you reversed your condition, so the code looked more like 

When it comes to implementing those properties, I would say this: you need to handle the case where someone deletes a cookie (i.e. wrap in a try catch or test for 's existence before hand). You also need to deal with cases where people are logged in on two browsers; if you just get data from cookies, then these will have different scores, which could be frustrating for the user. So all in all, It would just be easier to use the database in most places. 

Global You're hard coding the URL to your Mongo instance; it might be better to load it from a settings file. You're also not performing any authentication, though we'll assume that you have your firewalls properly set up, I guess. Some people prefer opening a new connection per request, up to you I guess. I would say that global variables suck, but if you don't think your program will expand beyond a single script, then it could be OK. Static views You could combine all of the static views fairly simply; have one view that captures everything matching (or whatever the correct regexp would be), and then have a dictionary mapping from extensions to directories: 

There is no definite rule for when to write a function and when to write a static method; it's something you learn over time. The two questions I ask myself when deciding to write a static method are "Could I write this as a function?" and "Is this code very tightly linked (conceptually) to the class?". If the answer to both of those questions is yes, then I might write it as a static method. In this case, I think a function might be more useful. General bugs Just some little things I noticed: 

Potentially The function takes some data, and then performs an operation on it. It does not rely on any other state to decide what operation to perform, so it is a perfect candidate for being static. No, it does not need to be static; a static method is (conceptually) a function in all but name, so you could write it as a function. The main reasons to have something be a static variable is usually organizational or conceptual, so if you think that applies here, keep it as a . Otherwise, consider making it a bog standard function.