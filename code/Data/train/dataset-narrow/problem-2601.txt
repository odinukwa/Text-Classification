You should determine what side of the rectangle is colliding with the ball, and get the normal N of that side. If the ball movement vector is V, then the reflected vector is: 

is not used to cause problems. the greatest problem is class or struct name collision. if you have this: 

EDIT: If you are using the other method, your problem is the rotation You have to use a transform matrix and generate the rectangle based in (0,0) as origin. 

a) Ship: You have to sure that the origin point to the center of the ship. It seems to be the center of the texture. 

This way you can easily revert the simulation to an old state where everyplayer were sync. Every player that is sync with simulation will see the right animations, but player that is lossing packets will realize that is lagging because the inconsistencies in the animation. I think there is no matter with that. 

You are drawing all sprites in the same postition and same size, if textures don't have alpha channel you will only see one of them. Test this to draw a grid with 8 columns: 

When you resize, the backbuffer changes... so you have to recalc your control sizes... in the game class you can subscribe to this event to recalc your controls: 

I think you should divide origin by the scale... because spritebatch apply origin translation before the scale operation, so you have to invert the scale operation to avoid origin being scaled 

No. from an application standpoint think of an empty gameObject as a modifier that is modifying something, or nothing. I can create an empty gameObject, and then move it around the world/scene, and then I can rotate it, and scale it, but if it doesn't have any children nothing happens, but the changes are recorded. then if I take, and create a sphere, and make it a child of that empty gameObject then that child will take on those modifications, and have its own values stored with respect to its parent, but in essence of physical logic that empty gameObject is nothing (no size, shape, or anything), but it does have a transform, and can receive components. 

your right to a point. when I say the word grid most people think about drawing boxes, and having all of those boxes be uniform dimensions, but when we go to put things in those boxes all we really care about is a point in space (usually the center for 3D, but for 2D sprites top left) so if we take away the boxes, and instead only keep those points in space we still have a grid, we just don't have boxes. You can still use all your favorite pathfinding algorithms with points/nodes that you did with a grid, and more. Calculate the distance between them, and apply a weight to that distance (dijoksra, and A*), Allow the agent to consider multiply nodes at once (fuzzy logic), track the players movements through a set grid pattern, and then give a weight to a set of rules that correspond, and then have the agent chose a response based on the highest weight (exert systems). A grid is just a visual representation that the player may never see (unless you actually want to draw those boxes on the screen, in 2D ok, but if your in a 3D perspective that can get confusing quickly especially if the camera can rotate). 

You can launch a external debugger... you only have to add the line System.Diagnostics.Debugger.Launch() and you will can debug it. I think that you maybe need Visual Studio Professional or the .Net Framework Sdk to use this solution... it was needed with the old xna frameworks, now I'm not sure.. $URL$ Other interestig point, when you are debugging this way a processor, is that shouldn't assign the processor to more than one assset, because if it has not been changed, I remember be asked for debug every assset... it's not funny when you have asssigned the processor to 500+ assets If you want to launch warnings you have a Logger interface in your ContentProcessor context variable to let do it. $URL$ 

but yor not using moveSpeed, you are using speed to modify position. :? and you are adding speed in method named normalspeed ... I can't understand what are you doing... :( I'd do it this way: 

don't generate a plane from a normal, generate the bounding box and its corners... this way you will know what are the front, back, right, left, top and bottom sides, and the code is easier... if there are true AABB, you only need two points that keep min and max coordinates... and then knowing the intersection is much easier... 

This way the shape you show in your example, would have two bones... 1) the parent bone that translates the shape, 2) the shape that is a bone itself and can be rotated easily... or scaled or translated again relative to the parent bone of course... ;) This editor is quite old... I have a new version... but the video shows what you can achieve doing it right... $URL$ I hope this to be useful... ;) 

Why would you do this? I see no value besides having something that you can physically see in the editor, and when it comes time to run the game you wont be doing anything with these cudes as cubes, so why have them in the first place if your just going to take away their collision, and rendering. All you have left is a transform which you could have right away by having empty gameObjects. the easiest way to do nodes in Unity is to create empty gameObjects(mainly for the position), and then give them a script for all the variables you need, and then put all those nodes onto their own layer. EDIT (In response to request for more detail in comment): 

though I would have to mention that if you want a fixed frame rate have some debug write displaying the frame rate to make sure that your not getting to low of a rate. (then start optimizing), and realistically test your game on more then just one system even if you have min requirements. 

I am working on a game that will be a 3D-shooter (camera trailing player), and want to impose some architecture on the game being that a is composed of where each room can hold (the player, enemies, pickups, projectiles), , walls/floor, and (more on these in a little) my first concern/iteration is to get a single room functional, and then link rooms together in a later iteration(this is so that rooms to render are dynamically chosen to accelerate render times on larger level). my direct question for this iteration is what would be an optimal data structure for holding my for the room? keeping in mind that whatever structure I use needs to be searchable, removable(single/group of items), sortable(this can be given up if needed), growable, and possibly be able to take pointers to the . this structure would probably also be used for my doors. my initial thought was to use linked list though removing items from linked lists can be a chore, and if not done right can just create a memory black-hole. I keep bouncing back, and forth on putting walls/floor into the same structure as the as it would be mostly efficient for collision detection (i think), but I know it can cause a graphics nightmare (more things being rendered means longer it takes), so maybe keeping walls separate, and create a separate list of walls to be rendered vs collisions. the next part would be linking the rooms together by doors(see picture bellow where the joint between each room is a ) where my first though was adjacency list. I understand that the has an adjacency list that it uses though I don't feel that it would work in my situation as just rooms , and / don't work within a so would it be worth while to build a custom adjacency list (might need to see an implementation as I keep getting lost on connecting adjacent things that should be connected) 

You will have a bone hierarchy tree that seems to this skeleton, that way if you change athe forearm bone, scaling it, it will affect to the hand bone. 

Other approach is to compose the polygon with triangles, but that it's not worth. And the third option is not using spritebatch and triangulize as you know 

The Viewport class has two methods that are very useful for what you want... Viewport.Project and Viewport.UnProject, The UnProject method converts a screen space point into a point in world space, so if you calculate two points with different Z, you can build a ray in world space or in object space if you pass the right world matrix... Whith that ray you can calculate collisions with your triangles... $URL$ 

1) You can build assets at runtime if you have VS2010 installed. There was a ContentManager project that scan a folder to find new files and builds them automatically at runtime, but I can't remember the blog where was the code. But seems easy to code a standalone application to manage it, you need to use a FileSystemWatcher, built it again with a tool like the Xna 4.0 content compiler, or made by yourself (see Winform series ) And then if you have a Game running, you would comunicate both, the compiling tool and the game with an UDP socket to alert that assets have benn changed. 2) You can instance several content managers, so you can create a content manager per level, although it implies tht some assetes can be duplicated. But there is a project named Content Tracker at codeplex that lets you know the references count of an asset and unload it when there is no references to it, so it's easy to implement a solution for what you want. This is the link to the Xna 4.0 to the Content Tracker project 

I would appreciate if someone would look over mt deriviation I used $URL$ I would suggest to copy to a text editor that supports side scrolling in my notation I used q^(-1) to mean conjugate, and not inverse, and different identifiers, but I hope that it is follow-able. I think that the majority is right especially where on proving the real portion of the vector would disappear. 

I am trying to design the algorithm for my level generation which is a rule driven system. I have created all the rules for the system. I have taken care to insure that all rooms make sense in a grid type setup. for example: these rooms could make this configuration The logic flow code that I have so far 

take an existing open door and then pick a random room (restrictions can be put in later) place that room's center at the doors location move the room in the direction of the doors orientation half the rooms dimension w/respect to that axis then test against the 3D array to see if all the grid points are open, or have been used, or if there is even space to put the room (caseEdge) if caseEdge (which can also occur in between rooms) then put the door on a list, and remove it from the open list (placing a wall or something there). then to do some kind of test that both the start, and the goal are connected, and reachable from each other (each room has nodes for AI, but I don't want to "have" to pull those out to accomplish this). 

You can get the world matrix with Matrix.CreateWorld(Position, Direction, Up); Direction is the forward vector of your model... $URL$ 

but I'm not sure that it is what you need... usually is used to work with a camera, so the viewport is fixed and you change the camera... like if you were watching tv... the tv, (your viewport), is fixed..., but the camera is what you moves to show other parts of the film's world. 

Your movement vector is obtained substracting source position to target position and the angle usually in radians is 

The problem... i'm drawing polygons, in this case boxes, and i want clip children polygons with its parent's client area. 

you are changing the Diffusecolor in the same effect. there is no easy way to clone a model so the answer is before draw set the color properly for each model 

Usually is done with a stack of scenes or gamestates... when you push a popup on top of the stack it becomes the active component that get updates... You can get a microsoft sample about game state management here $URL$ Or you can get it done by yourself: 

and then you can get the axis rotation values from the quaternion you can extract it with this function 

The grid has a plane associated. It should be Y=0, if you want to get 2D coords easily, the normal will be Vector3.UnitY If you want to do zoom you should do it by modifying the camera view The Camera.World has not sense, it should be the plane world... or the transformations that you apply to the grid... if you don't apply it should be Matrix.Identity 

there are also general forums that are not specific to platform/engine/framework, but at some point that question may come up especially if your posting a job opening. 

for without fileIO: it would look about the same, but instead the would be replaced with a method calls that performed the creation of the objects. I have done this conversion in a project where I was paranoid about distributing my level files, but I realized that even though yes someone could go in and modify the files, and cheat in that regard I was not selling the game, and if they broke it trying to cheat that's their dumb fault. Though this process does work, whenever I look back at that program it just feels like overkill paranoia, and possibly even breaking object-orientation 

depending on your target (platform/engine/framework) there are full communities of people, and many times there will be a section in these community forums whose sole purpose is "help wanted" (where people either post their skill set requesting a job, or post a job requesting applicants) for Example 

This is technically a few questions in one (that do go together, and organically flow from one another), and I will break it apart to answer them. I will be paraphrasing: 

yes, and no. yes its the same in terms of physics, and rendering, but no in terms of the engines book-keeping. every fixedUpdate (especially in non-release mode) the system takes all components that a object has, and the same for its children, and puts them to be calculated, and then if any of those are not active throws it away. so its still trying to do stuff with the inactive components its just not that much. if you multiply this enough times it can amount to maybe an extra half second per frame, but that's probably up there. 

The problem is that the bounding box has the same Z in Max and Min, so there is no volume. Changing this: 

2) really you need to move the verticesd that way? When you draw a model is usual to pass a model transform matrix as argument to the shader, use it to translate your model. 

The View Matrix is the Camera matrix, i usually use: Matrix.CreateTranslation(-Position.X, -Position.Y, 0) * Matrix.CreateRotationZ(Rotation) * Matrix.CreateScale(Scale) * Matrix.CreateTranslation(Viewport.Center.X, Viewport.Center.Y,0); This is the projection Matrix used by SpriteBatch (source) 

This can do the trick, though if angle between forward and playerForward is 180º, it won't turn If you need the angle... you can use this: 

In this video I show how do it with code...the projection/view is isometric, but all calcs are done in 3D... $URL$ When I calculate the mouse ray, I check for collision against a plane... but the procedure is analog to check against a list of boundingspheres associated with your objects. The algorithm should be similar to this: 

I think you want something similar to this $URL$ I developed that for a 48h gamejam... you can donwload the code here... $URL$ I used something similar to your code to get the 3D coords... but I rotated the planet and the player was in the same pos, I think you are interested in the creature movement, is this: 

Use a plane or three planes to check collision against them. If the world is empty you need to collide with something... one easy solution is setting a reference plane... usually the ground... and check ray collision against the plane to get coordinates in world space... when you work with objects in an editor, the easier is working in world coordinates... and being independent of screen coordinates... Here is a video of the editor i'm doing now... where you can see how it is done... 

I have done a fair amount of play-testing, and those surveys tend to ask general what do you think of the game, and then go into specific details about specific things they are probably concerned about. if your concerned about what people think of the physics in a platformer then don't ask "how would you rate the physics" ask "what did you think of how the character jumped/fell" you can use scale values, but the data needs to be usable. if you just ask about physics, or graphics it is likely that Sallies Mom doesn't know what your talking about, or what it affects, and even if your giving a scale question then put something for "didn't notice" "don't know" some times if some one doesn't notice something as odd they will just think it is normal, and wont even register it. then by asking specific questions like "what do you think about X" if you get a high density of complaints then it is something you might want to take a serious look at. though remember that art is primarily for the artist, and then for the customer. 

I will not downplay the knowledge you would earn in college earning a degree even as a general developer/storyteller/etc.., but it depends on more then just these specific things many even small studios might not be to kind to a person who only wants to write stories for games they typically want someone who can follow the development process from story to gold, but this is more the job of the producer (many companies don't hand this out), but I would suggest maybe picking up some programming experience (game make can be a good jumping off point), or maybe some level design work (UDK can be a good tool for someone just learning) that being said I would say still right up a brief/treatment/script (sometimes when lumped together are called just the GameDoc, or script) for your game idea, and then send it in to companies (remembering to express confidentiality, and ownership of the idea). another possible rout is sites like $URL$ have a place where you can post game ideas, and if you follow through with it then you might be able to get a team together, and get it made, and even sent to retail (at least steam). but the first question that anyone is going to ask is "have you written the documents that define your game" (brief/treatment/script) you should be able to find the information that belongs in these documents, but if asked I could provide an outline (keep in mind it would be like an outline to a book which is unique to each book)