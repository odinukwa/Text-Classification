I started out like you, hating programming, and loving the other aspects. I failed the programming course the first year, but had to retake and get a positive grade to stay in school. I tried my best a bit harder that year and actually enjoyed it. Now 3 years later I'm about 75% programmer and 25% artist. There is one difference: I started with actionscript 3, which doesn't involve all the low-level headaches that c++ does. I actually hate c++ and low level programming in general. I think the conditions in which you were introduced to programming are not optimal. Try an easier language like actionscript or c#(xna), it's a big difference. 

Functions These are the basics for variables. let's move on to functions A function is sequence of code to be executed. drawCircle(x, y, radius) is a function that holds a sequence of code to draw a circle. A function can have parameter variables that you need to input. The drawCircle has x, y and radius as parameters. You can pass it values, but also variables of the given type into the parameter. x, y and radius are all of the type number. Let's move the drawing of a circle into a function now. 

Now is it normal to have such a dislike towards engine programming? Or do you (people who also work solo) enjoy programming the engine? 

Sorry for the strange topic name, couldn´t think of a good way to describe it. I´m basically trying to achieve the following: I'm placing items randomly on the screen, but these items shouldn't be placed near eachother at a given distance. This is the process I have in my head right now: 

In my opinion, the thing that adds most to isometric games is the 2D graphics. You are trying to simulate a 3D enviroment with 2D graphics, so it will take some workaround to get the 3D effect you desire (depth sorting, rotating the view). The game you showed doesn't use any 2D assets. So 3D seems like a more logical choice. 

I´ve got some questions regarding the loading of tile maps. I´ve got a world with several buildings in it that guide the user to a new map. This map can be a small room, but also a big area. To change the map it seems straight forward to change the current tilegrid to the tilegrid of the new map. But this seems pretty inefficient in some cases; 

Like mentioned above, it really depends on the way you wrote your code. But this seems like a general method that woudn't be too hard to implement: (Pseudo code) 

I'm not liking the fact that I have to use an if statement to check if any actions have been performed though. I would much rather use events. But create a delegate and event for each action seems sluggish. Is there any way to generate an event for every field in the enum? I know I could write my own event system, but I want to avoid mixing up c#'s build in events and my own events. 

I'm stuck between the following 2 methods: 1: Throw away everything in the level class and make a new one, we have to load an entirely new level anyway! 2: pause the game logic and physics, unload all currents assets, then re-initialize those components with the level data for the new level. They both have their pros and cons. Method 1 is alot easier and seems to make sense since we have to redo everything anyway. But method 2 allows you to re-use exisiting elements which might save resources and allows for a smoother transfer to the new level. 

There are events for bassicly everything, shouldn't be too hard to find online. The Event.ENTER_FRAME is very important for games. The function attached to the event is called every time a new frame starts (30 times a second default in flash). So if you add 1 to the x position of a sprite each time that function is called, the sprite will move :) Using keyboard events, you can add or subtract values from the x and y of a sprite. You can essientally controll it usin your keyboard! Sorry for the lengthy write-up. I remember how frustrating it was for me. Good luck! 

game development is not really bound to any programming language. There are certain techniques that you need to learn, wether that is in c++ or any other language is irrelevant. Back to the point, I'm learning c++ myself right now and these tutorials are incredibly helpful for understanding the basics. $URL$ 

I was thinking of loading only tiles that are in a certain radius of the players viewport. But entering new maps would still cause the entire viewport area to be loaded again. Is there a way how this type of thing is generally done? 

I've run into this scenario multiple times but could never think of a way to efficiently do this, while I do feel that there is a simple way to do it. Here is the implementation I have right now. I feel like I should use a while loop but I can't get my around how to do it. The code is in AS3 but that shouldn't matter. 

So your bank balance could be a variable with the type number. Note: You will see "int" and "number" both being used as numeric values. The difference is that int can't hold floating point values and is therefore calculated faster. Number can hold floating values but is slower. In code: (everything with "//" in front of it is a comment and is not executable code) 

Gamemaker is a very nice tool that doesn't require alot (if any) coding. It has a nice built in drop and drag system that will get you familiar with the basics; variables, functions etc. As you progress you can move over to inline coding at your own pace. 

Events Last but not least events! Events are as you might have figgured, events that happen during your application. There are events for when you click your mouse, when you press your keyboard, etc etc. You can react to these event with a function. It works likes this: 

I'm currently on my smartphone so can't provide a lengthy awnser right now. Implementing slowmotion is as easy as this : Leftbat.x += (leftbat.speedX * gametime.ElapsedSeconds) * 0.1; //0.1 is 10% of original speed You don't have to modify the elapsedtime variable itself. 

How is this usually handled in component based games? Most articles online only mention the use of components for gameobjects, and looking into other component engine source code gives me a headache. 

Take a look at $URL$ Very nice and relatively easy network multiplayer library with both flash and unity support. 

In short: add every loaded asset to an array. When you need to use an asset, check if it's in the list. Return the sprite if it's there, or load it and add it to the array if it's not found. 

Now this might sound like a silly question and I apologize if this sort of question is not suited for stackexchange. But I am genuinely wondering this, and I feel like I get alot more proffesional awnsers on here. I'm getting into game development and have only worked solo since my study is not primairly about games. I'm only interested at 2D games atm, so am not really in need of any external engines for physics and rendering and such. So usually write the engines myself. I absolutely hate writing things as quadtree's and pathfinding algorithims, most of the time I wish I could just skip those parts and move on to programming the actual gameplay elements. Things that happen in the background don't really interest me at all. But at the same time, I can't stand it I don't know whats/how everything is happening in the background. My dislike might be explained by my weak mathematical skills. My motivation gets me through, but it can take alot of time before I grasp the technical solution behind a problem. 

You have now created a circle shaped sprite with 10 pixel radius at the location's given in drawCircle (0,0). Flash's coordinate system begins in the topleft corner, so x and y 0 is 0 pixels from the top left. x = 10 woul move the sprite 10 pixels to the right. y = 10 would move the sprite 10 pixels below. Try it: 

Whenever I question myself questions like this I try to look at existing examples. In about every game you get a loading screen before the actual game starts -> the loading starts before the actual has started. So all the loading should preferably happen before the gameloop. When your running a game and a new object is created, which also needs a new resource(let's say a png file for a sprite). You could refer to the already loaded file to prevent loading at run time. Which files should be loaded before beginning a level should be defined somewhere in your level data. There are scenarios where you are unsure which assets you will use though (dynamically created world for example). I use the following method for this: [pseudo code] 

I'm currently working on creating an input-action system for my game. I simply wanted an easy way to map an ingame action to a certain key. I've managed to do so with the following method: Create a class that holds both the action and the key for the action: 

I understand the copy pasting without understanding, I had the same problem when I got my first semester in actionscript (failed miserably, then passed with a 9/10 next year). I will give you a very brief and basic explanation of all the things I found confusing. Variables Everything with a [var] notation in front of it is a variable. A variable is simple a holder for a certain value. A real world example of a variable is your bank balance - it holds your balance! Every variable has a type, just to name some: 

This is something I've been wondering for quite a while. When building games that exist out of multiple levels (platformers, shmups etc) what is the prefered method to switch between the levels? Let's say we have a level class that does the following: 

I apologize if the question is a little vague, It was hard to explain it in a short sentence. I'm currently writing a component based game, it's getting along great but I'm starting to wonder how tightly I should stick to "the rules". Actually, I'm not even sure what the rules are! It's clear that every interactive gameobject should be an entity. But what about the level elements? I'm using a tile based system, should every tile be an entity? I do have a GraphicsComponent ready with all it's displaying goodness that I need to display them. But coming from inherritance, it just feels strange threating a "gameobject" the same as a level element. It also feels like I'm dumping everything in a big empty space right now, there is no dedicated environment for different game elements. Where a tile normally is part of a map, and an object normally is part of a world. The tiles and objects are now thrown in the same place. Same goes for interface components, I was in need of animated button, and that GraphicsComponent looked very tempting again.