(note that all these numbers are what I can remember from the time I was/am playing those games) putting these numbers as a base you can see there still is a huge bandwidth usage server needs to handle (maybe around 1TB per month). 

this algorithm has features all similar to the previous one but it works better in wavy waters instead of calm ones. it your choice based on the sea you are simulating to use either one of them. in the end you've got a texture which tells you water level for each position, in the next step you've got to draw results somehow, the easiest way is to generate a mesh based on water level data. 

one is to use some circle shapes and connect them using distant joints. and the other one is to rectangles for the chain itself and then attach them using revolute joints 

the problem with the kinematic object is that physics engine doesn't check if 2 kinematic object have collision and even if it collide with a dynamic object there won't be any change in kinematic object's speed, so basically you have to set all your game objects as dynamic, on the other hand you have to define all your objects as simple as possible for performance issue, you have to use only rects and ellipses, and at most triangles, and there are too many games with your base concept available in iphone now (remember ?) 

you need to find some good values for alpha and beta(both are between 0..1), alpha value higher than 0.5 will move window to right, while lower alpha values will result in window to be padded to left. also beta value will determine how much window goes near bottom of screen. 

in this code represents a speed value in which your car is moving by a reasonable slow speed, let's say if you car can move by max 10m/s setting somevalue2 as 1 seems to be a good choice (although you have to test it runtime). 

If I understood your question correctly you just wanted to normalize a vector. let me break your question into 3 parts : 

As far as I can tell from your question, you want your window to have same distance from all sides of screen, that means it's always in the center. to be more clear, center of window and center of the screen should both have same coordinates. window has 3 panels, and all panels are squares with same size, so we can guess is 3 times larger than . you also want some padding, so there is some raw value for both width and height of window. let's say these raw values are equal to 85% of screen width and height respectively. using we can compute a new value for both width and height of window. the last step is to use minimum value from these generated values for width or height. here is a pseudo code: 

you really don't need 8 bytes of floating point number for position. Usually you can compress all those data into 3 or 4 bytes of fixed point numbers. you don't need 8 bytes for animation either, you normally don't have more than 256 different animations for your main character, and non of your animations contain more than 256 different frames, so you can store all the data in 2 bytes at most. I've put 8 bytes for reserve, so I will expect you to use those 8 bytes wisely (reduce them as much as you can!) you don't need to save replay at 60fps either, you can easily save 20fps and interpolate all the frames between them. I'm pretty sure user won't notice any difference. since you are suggesting your game consist of mini-levels I think 5 minutes is really more than a normal run in your game, though I won't reduce that either! 

I guess I would implement almost the same method as your 3rd, create some lines representing platforms and bridges. but the offset is no big deal, checking distance between a line and a point is really easy to calculate(just check the wiki page). 

client connect to server. client requests an authentication bridge. server connects to auth server, acting as a proxy between player and auth. server. client and auth server, form an SSL session over this newly formed bridge. using this secure connection over bridge, client logins into auth server. auth server tells game server whether the login was successful or not, over some other TCP connection. then disconnects it's bridge/login connection. client and game server can now resume communication (only) over already existing connection (which was used for authentication). 

Other than that your code seems to be fine, except I don't get what it's supposed to do, which is a little bit alerting. Seriously, did you even try compiling that code? You should get a compile error... 

every time I tried to simulate water I just ended up applying a lowpass filter on a texture representing water level. It's very simple to implement but it fails whenever you get massive changes in water level which may generate large waves. In this method there are some places where water always have some constant level, like river ends. in those cases you just over right color for that specific pixel. Pros: 

this may seem an odd answer but you can easily check for impossible events using compilers (for example c++)! let me explain how: you have exactly one header file for every stage. and game ends in file. whenever you can go from to , you just have to include file relate to in . whenever you get a new item in a stage you just define a value for that item. whenever you lost or use an item you just have to undef it. in the end in each stage you just have to use all the defined values for the items needed in that stage. here is a sample how to use this in code : a.h 

And then when closing each node you group them with number of their parents as a block. which might result in boxing as follows: 

you can change engine whenever you like, you'll just have to change your wrapper's implementation. this is especially useful if you think you might someday change your target platform. when you write a wrapper your whole game code will share similar coding style. for example you know all functions start will small letters or all classes star with capital letters or any other coding style that you think of. 

Civilization 5 had lots of lua scripts inside their assets folder. Angry birds also had a lot those scripts along side binary. Age of Mythology had lots of xs scripts for their AI. Civilization 4 had lots of python scripts. 

notice that when you are asking content system to load a texture, you should drop "content" folder from file name. 

Now look at these three states. assume that they have , and distance from the corner. Based on these values and the angle, we can calculate how much the distance is at those state. It's calculated as simple as (as shown in figure 2). 

I've once heard that is not very accurate due to the fact that these days processors may change their frequencies. But it worked fine on my coreI7 cpu so I guess that was not causing any problems. 

try tiled. it's a opensource level editor. and working with it is really simple. it's also opensource so you can easily implement your own file format for it. although many 2d game engines use tmx file format (it's an xml based format) and tiled have all tmx export options. 

I'm don't have any sources confirming it, but as far as I've tested till now, that approach provides better performance compared to using a texture of that size. I suspect the reason for getting better performance is the fact that with smaller texture there is less memory loopups gpu needs in order to render the texture, while it's still doing all the calculations needed to compute both texture coordinate (per texel) and fragment position. 

And here is why this algorithm works: We know logarithmic function tend to approach 0 when goes to negative infinity. So in order to make that logarithmic function become zero we should reduce Time to a very low value, or we can increase Time, and compute instead. based on the current argument, it's easy to see when gets very large, becomes real large negative and so becomes almost zero. And for the initial values: is your desired speed, and you can set it as you want. in the first cycle we want the to be zero, so should evaluate to zero. 

As much as I can tell you can use beizer curves to smooth the path. I know it's not physical at all, but just create a beizer curve with order of 2, from each three points in the path. this way character will not path exactly over all the waypoints but it'll move over a path which can be an actual physical shape's path. you can also check for the collision along the way to solve issues about the object moving through the walls, since beizer curves will go through the wall. 

in each senario you have got to have a ancher (which in my case was an static box). it's better if you lower the weight of rope parts (either you use circle shapes or rectangle shapes), for example to have more realistic physics I set their density to 0.1 and for the box connected in the end of rope I used density 10. another thing you need to worry about how your rope segment react to each other. i just wanted my rope to move freely in scene so I marked all rope fixtures as sensors. you may need diffrent approch. the next thing you have to worry about is the number of iterations you are pasing to the world update: for low segment of rope( maybe 8 at most) there is no need to use a high iteration value maybe 10/10 which box2d itself suggested is enough but if you increase the number of segment for example i tried 30 segments, with low number of iterations your rope seems to increase it's length more that it should, so you need maybe areoung 40/40 iterations to solve those situations. after some testing it seems box 2d is designed for scenes with object sizes of 0.1m to 10m and the maximum size suggested for large scenes is somthing about 50mx50m. so basicaly you need to scale your object down to match these parameters. in my case I first tried to pass pixel positions directly to box2d but it seemed like there was some speed limits preventing world to move as fast is it should, so I had to scale my scene around 64 times to have the best results. although i didn't test myself there are some limits in box2d that prevent you from using larger scenes. for example there is a defined value in file you can change box2d settings but it seems not recommended. 

I would suggest creating an animation and then use CCAnimate class to change frames repeatedly. creating CCAnimation Object is also an easy task, you have to initialize 2 frames using textures and then passing them to CCAnimate constructor. 

note that is a function which gets a vector as an input and returns it's length. for example if your game has a 2d world 

It's a guess, but are you sure you are retaining the sprite before detaching it from it's parent? when you detach an sprite (or any node in general), it usually get's deleted too. In cocos2d for every instance, it's counted how many objects, are depending on that instance to work. In other words, the system keeps track of how many times that object is retains. so when you stop using that instance, it's cleaned up automatically. Adding an sprite as a child results in that sprite being retained, and later removing it, results in it being released. In your case it's possible that removing that sprite from parent, which causes a release, brings "retain count" down to zero, and ultimately deletes the sprite. Thus when you later try to attach to another node, you are attaching a deleted pointer. Try this instead: 

Cocos2d-x can draw in immediate mode, it's way easier to be done in 2.x but it's possible in 3.x as well. basically you have two ways of doing that: 

all the other functions of the parallax node is same as normal node. you don't need to worry about anything else. 

Panda3D seems to meet all your needs. you can see user comments in DevMaster or check it's home page you can use these search results for more engines (a hint check only those with more than 30 commnets) 

you can use a part of cocos2d-x library, it's a gameengine developed in c++ for 2d games, but you can just use the CCTMXTiledMap class from that engine to parse tmx file for you. 

while in warcraft engine the battle takes place in real time, you can directly compute results in your game, as a note every variable with number 1 is related to player 1 and every thing I assume : 

It's pretty much expected to see that kind of frame drop... 8000fps translates to 0.0000125 seconds of computation time, while 2000fps translates to 0.00002s. Subtracting those two values, the difference is as low as 0.000075s, which is way low compared to the 16 milliseconds time span you have to render at 60fps. 

provides better performance only to render multiple sprites with same texture, so if player does not use same texture as other objects in the scene you can't use an sprite batch! but you can define player class to inherit instead of . this way you can attach it to the existing object. 

after that to check if it's inside the line fragment you have to check if is a negetive value, if yes you have a real collision if not the object is past from sides of your line. 

It's true that each image has an irregular shape, but you don't need to snap that shape. It also does have a bounding box, and you know where that bounding box should be in the solved puzzle. Note that those bounding boxes can collide but it doesn't matter at all! so you just need to check if the bounding box almost as it's rightful position, and if it is, you just need to move it to it's exact position and lock it. 

you can achieve it using a dummy box, create a dummy box and attach camera as it's child. then whenever you want to move camera, you just have to move the dummy box, if you want to rotate camera left and right you also have to rotate the dummy box but for other axis rotations you will have to rotate camera itself. 

I Guess you could use smartpointer idea to handle deallocations for you, in that case there won't be a need to keep a list of all entities inside your code. in some cases you need a list to iterate over all the objects in your game. this list could be simply a link list where inserting and removing objects from it will take exactly O(1) time. even to increase your speed more you can use some static array (possibly a vector). in that case you'll need to keep track of 2 linked lists inside same vector, one will iterate over valid objects and one will iterate over free objects. whenever smartpointer marks some place to be deleted you simply remove that pointer and add it's space to free spaces list. and whenever you add some entity you only need to remove first freespace fill it with entity pointer and then add it to valid objects list. 

Based on Unity script reference, Collision is a class representing all the information about a collision. It's a parameter passed to , and events. Collider on the other hand is everything that has a physical representation. So if you want to know whether an object is colliding with any other object in the game, you have to define a collider for both of them, and implement OnCollisionEnter event for the object you are interested in. 

there are two uses in multithreading, one is to enhance your program performace and the other is to let the program run when there is a large process in progress. for example when you are trying to load some data it's bothering if your program hangs up, so you may use another thread for loading and keep the main Thread free to continue main loop. enhancing performance using threads is on the other hand somthing really hard. since usually you do every thing in a linear process and that is something in contrast with parallel processing. and you always have to use your main thread for graphical device updates that makes it even harder to split tasks between threads.