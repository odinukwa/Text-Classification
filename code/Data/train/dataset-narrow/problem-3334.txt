The critical number here is -- also note that this version of may be newer than the default Raspbian one and show output in a slightly different format, but the concepts are the same. The OS will use free RAM for caching to improve performance, and this can be confusing with regard to the numbers. Here, I have 32912 KiB actually committed (), but the kernel has stashed 339652 KiB of page cache () and this is subtracted in the number, which other tools also use, possibly making it seem like running processes have used 360 MiB+ here. However, when more free RAM is needed the OS will ditch the cache, so the actual amount used by running processes is really just the figure (~32 MiB). is a sort of spin-off of a venerable *nix tool, , which may be more useful than the latter particularly on multicore systems. A few of the important things you can get from this: 

This may have more to do with how much new fangled C++ you use in relation to features implemented in the compiler. I think most if not all of C++ 11 was in the last jessie compiler, and implementation of C++ 14/17 continues. But you will be very aware of this if it applies. However, beware that forward ABI compatibility is generally not a goal with any library, so this could be an issue anyway. 

Contra Patrick, it does not matter how large or high quality a supply you use, without this set all models but the 3 will default to underpowering the USB ports, and things such as external hard drives will not work. The (older) A/B models will not power such a device no matter what you do, and you must use a hub. The newer +/2 models should be fine with the setting above enabled, presuming there aren't any other high power USB devices attached (keyboard, mouse, wifi adapter are okay) and the total supply is >= 2A. If the device then boots with the red power LED flashing, your supply is insufficient; if you are using a charger plus microUSB <-> USB cable, try another cable. They are not all created equal. You must reboot in order for this to take effect. Although it is not documented there, you can find out more about here. 

This is likely because those platforms provide hardware support for creating virtual bare metal instances of themselves, within which another kernel can run. This makes a significant difference to performance. While I believe some people have done it for various purposes, virtualization on the pi is more of a novelty trick than a practical reality. It is simply too slow to be worthwhile. 

Notice that's width by height (see here for the various ways to specify geometry). However, it won't warp a square gif into a rectangular one (maybe there is a way to force that, there are a lot of options). Also, resizing will probably make a mess of most animated gifs. You need to process them first: 

You only need to do that once. This is the same path you should use for various variables; there might be other/different/better instructions regarding this for that cross-compiler, which I have not used. The sysroot is important to the compiler if you are building things with libraries you have built, which is presumably the case here. 

There's some documentation for this here, but I imagine the simple two line example from the LXDE wiki should do for most things. 

Yes. The pi has a CSI-2 ribbon connector and the best way to do this is probably using the that with the 5 megapixel "raspicam" made specifically for it. They're about $25. It seems you can connect other CSI-2 compliant cameras, but I would do your homework first as you may end up needing to write a driver for it. You could also use a USB camera, but make sure that has a linux driver first. 

The problem with these is they look like x86 emulators, and methinks this will cripple the pi if you all you really want is a container. The most promising hit is this one: 

Probably not in the sense of causing physical damage to anything, as the voltage is internally regulated and it is over and not under that is more likely to burn things. Although I think current surges can be side effects of sudden voltage drops, the Pi will presumably shut down if things fluctuate that much. Note that if the system does shut down arbitrarily this way, when the battery has plenty of juice left but is overwhelmed during sudden bursts of activity, if the SD card is part of that activity, you may end up with filesystem corruption. But that is not permanent physical damage, it is just a hassle. So I intend to do it when I feel like it anyway and accept that risk, but I'm also willing to accept what I consider to be a much more remote risk of frying a pi (and remember, I said I was ignorant). To summarize: Don't expect to power the Pi 3 with a power bank and not have this happen. 

I'd recommend using wireshark on the windows box or any other computer on the network (the only thing it doesn't work on are mobile devices). It is probably going to be somewhere between confusing and gobbledy-gook at first, but the simple thing it might allow you to do is see the difference between when that computer works properly online and when it doesn't. With a "wired" only network it is also usually possible to easily see all the traffic from all other systems; with an (encrypted) wifi network it is also possible, but you have to 1) Shut the network down, attach the computer with wireshark and run it, then allow other devices to connect (this problem doesn't exist with unencrypted wifi, so if you really want to do this for a bit you could disable that), 2) Configure your wifi interface in a way it may or may not be capable of (though most of them are) and that windows may or may not make easy for you to do. Something like a DoS staging will I think be really obvious to anyone when it happens (and you can leave wireshark running perpetually, scroll back through and save the record). If you can do this for a while in a situation where most devices are idle (stuff like cellphones never completely will be, but close enough), what you'll see is just a continuous, slow (say a half dozen packets/minute per device) continuous stream of administrative things going on. If you suddenly start doing something with a web browser, something more drastic will happen. If the network itself shuts down, probably something very strange will happen before then and the nature of the observed traffic afterward will have changed dramatically.