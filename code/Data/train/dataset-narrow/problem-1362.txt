Default values This is a part I have to say. It's educated to me so I educate further but I'm not a fan of it. 

Method names do not start with a capital. starting with a capital is for classes. Fourth : You rely on users of your class that they close your connection. You will have memory leaks cause they will forget to close your connection. There are 2 possibilities what you can do. First : 

Personally I wouldn't do this. The reason why is when your field change name, your test fails because the field is hardcoded there and with refactoring this isn't persisted to the test. What should I do? Normally your is in the same package as your . When this is correct you could use a protected method. Example : 

Are now package private. Declare them private and if you need them outside provide getters and/or setters. So it should be : 

We start with that tab disabled. As the subscriber is created you can set the disabled to false and set the source of the include, so the tab will unlock. Another option, what I use in mine application is using the "visible" attribute. 

This field could be because you set it in the constructor and there is no setter for setting this at a later point. LogFileFunctions.java Javadoc preffered 

for the same result. Naming : While you have not many var's to call => I like that you already point to the bottle. Still I'm thinking could be a better var name. While loop : Well it doesn't make a big difference but for your own sake, use a for-loop. You don't forget to substract one then. 

Minor nit: I would have used a different name for this. perhaps. More important is what's missing, which is the docstring. The docstring is how you document what a function does. 

You did that here. What if is 0 or 1.75? You'll get a when your function performs in the case is 1.75, and maybe that's what you want. The function will return 0 in the case is zero. As others have noted, your function only works for . If you truly meant a base 2 function only, then you shouldn't promise that you can handle any base. An alternative to using log for this base 2 logarithm is to use the fact that python provides a function available on all platforms (even those that don't use IEEE floating point) that does exactly what you want: 

This does not do what you think it does. It creates a list of elements. If you're using C++11, they're all garbage because those elements are default-initialized. Fortunately, you'll never run across those garbage values. Your calls to allocate a new chunk of memory. You don't want to use a list. Use a vector. When I run your program on my computer, compiled with optimization level 3, I get timing results of 

There's a huge downside. One is that the compiler does not enforce your units. Your type names are aliases. You could pass a variable of type to a function expecting a . The only way to detect this error is via inspection. Your use of units give a false sense of security. Another is that it invites you to create a plethora of units such as , etc. This will get you in trouble. My advice: Except for input and output, stick to strict SI units. No millimeters or kilometers, no minutes or days, no grams or tonnes. Lengths internally are always in meters, time durations are always in seconds, masses are always in kilograms (except for star and planet masses, which are expressed in meters3/seconds2; see $URL$ Another way to look at it is to look at Wolfram Alpha. Dozens, if not hundreds, of human years of development effort went into this product -- and it still messes up with units. You are not going to replicate that effort. Using consistent units throughout is the easiest way to confront the units problem. 

So the result in the abstract class could be (You know what exactly the code does so make the names better for your cause): 

Scoping : In your controllers are all your services default scoped. In mine humble oppinion make them private, if you wish to have the default scope make getters and setters default scope. Why: You easily can forget the private before a global variable but getters/setters are mostly autogenerated public so normally when these are not public it's ment to be. Final's : What is looking odd is that in you don't have the marked as final as you do that in your other controllers. Error handling : 

edit : This last one is wrong cause doesn't implement . Or from java 7 you can use try-with-resource When you extend and implement the you can do the following : 

We all know what you are trying to do. But what happens if is magically turned 10? You have a bug that will not correct by himself. Let's say we do the following : 

All over : Nice readable code, as an outstander, who doesn't know the things the other classes need to do I still understand what this class has to do. 

The next class is the calculations itself. Because the UC is so little it stands open for interpretation like what do I have to do with all negatifs? In mine solution, an array of all negatifs shall work and spit out an array with 1 number. There is also no details to do when more subArrays are found with the same highest sum so I just return 1 of them. 

You are declaring this synchronised. So if 2 threads are calling this method, the second one has to wait until the first one is finished. Because you don't have an input variable, the output will always be the same, setting false. In this case there are no race conditions what could affect the outcome of this method, so I wouldn't make it synchronised. private static final : You are making a great use of the fields. What I'm not liking is the next step : 

What you have is a collection of key-value pairs of strings, and you're performing the same operation on all of them. A simple improvement is to throw them into a collection and iterate over it. 

Unfortunately the class treats (0,0) as the Top-left corner, whereas your boundary appears to treat it as the Bottom-left corner, so the creation of the rectangle requires the Y-axis to be inverted. 

I find it highly unlikely that the interview question is designed to be answered in Java. It is more than likely referring to languages that can evaluate non-boolean value types as boolean expressions. A possible solution in JavaScript could be: 

is doing a series of comparisons to verify the sequence of characters in your converted integers match; arguably this does not fulfill the requirements, but simply obfuscates it through an internal method call. 

seems to be used to make sure the expression matches the whole string, but there are better ways to accomplish this. In Regex, you can specify and as the start and end of the string respectively. You can combine the match and replace into a single expression, since the replace won't do anything if it fails to match. Then you can use Regex groups to capture the hours, minutes, and seconds. Finally, you can replace in your regular expression to the digit () character set, which represents the same thing. This is only really useful if you're interested in shortening the pattern; I don't think it improves readability. Putting everything together, we get the following Regex pattern: 

You can simplify your method by calling on the class and passing in the integer you wish to convert. 

There is a problem with your code and the code above, though: the query string is always going to start with an ampersand. A quick and dirty solution would be to build out the query string first, and then take a substring to truncate the first character before appending it to the StringBuilder. Another way to solve this is using Linq to filter and format the data, and then bringing it all together with a call, in which we can specify the ampersand as a separator. 

It's hard to say but if I get this with an interview, you will not pass. On the other hand, I'll find it good you come to here to learn. Number 1 is really red flags. Let's start with the review. 1. No with logic. I removed the comment lines to point it out. 

The intendation is correct but always use braces for if's. A lot of mistakes with if's comes from this. Example : 

I'm looking at this class and I'm confused. The reason why is that I'm doing web programming so a dialog can be asked on different sessions. In that case this class is useless. In stead of holding your and in your class as static variable, just return them in the method. Then your 

Summary: While I'm no c++ coder, it looks for the rest good. If you really want to score high you could use recursion for the for-loop. 

A bigger problem here is that you don't log the . It vanish in thin air cause you don't use the in the catch. Succes with finding the problem at that time. 

Or something like that. Let the method return the actionlistener, but in the creation of your actionlistener use also at least 2-3 methods. Edit : Your problem : Use instead of with your eventlistener. looks for multiple button clicks, so it will merge some events. 

You do not check if qc is null, what is possible when you get an exception. You have 2 options for this. 

Code should be self explaining, so if you need to put comment behind a variable name to explain it, there is something wrong. Mine suggestion is : 

You can do it a little more generic but I'm afraid you still have to test each. I don't know if your case is always changing to green or not. If not I suggest the following enum : 

Regarding how you are using views There are multiple schools of thought on what "views" are and how they should be implemented. One is that the thing being viewed should know all about the view. Another is that the thing being viewed should know nothing at about the view. Both can be correct. I'll give two concrete examples to illustrate. One example is JSON. There are seven types of JSON values: An object, an array, a string, a number, and the three special values , , and . The two boolean values can obviously be collapsed to one type, and a numerical value can be expanded to two types (floating point or integral). It helps very much to have different views on a value that implement the details. Most reasonable C++ implementations of JSON do exactly that. Since a specific JSON value can be of one and only one of those types, most implementations contains an enum value that indicates the type and a union of views, only one of which is active, the view corresponding to the enum value). The other example is very large multidimensional arrays of numerical data. There are a number of different packages that address this problem, and in a variety of ways. Very few use standard library containers. A is a phenomenally bad idea. Sometimes these arrays are so very large they will not fit into the memory of the largest of computers. Suppose you have found such an array of interest, representing years or even decades of data collected around the globe, but you are only interested in a couple of days worth of data over a tiny portion of the Earth. What you want is a view on that huge array that easily lets you slice and dice that huge array down to a very small size. In this case, the underlying huge array does not need to know that the view even exists. On the other hand, the view needs to know all about that huge array. You have obviously taken the first approach. Whether that is the correct approach depends very much on what you are trying to view and why you are trying to view things that way.