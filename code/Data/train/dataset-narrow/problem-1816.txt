Settings in /proc/sys are virtual files. To change them, you need to write to them like you would any other file, like so: 

Did you specify dom0_max_vcpus in grub? I saw this issue on my xen cluster for a while and I eventually discovered it was because I had limited dom0 to two vcpus. After I removed that I haven't seen it again. 

I haven't used procmail in a while honestly, so I appologize if this doesn't immediately work. First off, the nesting in the script you had was causing problems because it pretty much cut a recipe in half. They aren't necessary anyway, so I removed them. I also simplified the structure and set it up so it will never fall through to the local mailbox. 

TL;DR : Stopping your services is not necessary with LVM snapshots. +1 for XtraBackup. It is not required to stop the services. The LVM snapshot is equivalent to pulling the power, which means it is consistent, but the same as a crash. When starting the service from one of your backups, it will have to do crash recovery. The time needed to do this varies depending on the size of your InnoDB log files but can be several minutes. Once the crash recovery has completed, your service will be up and running again normally. By shutting down services before the snapshot, your recovery will start faster but at the cost of some downtime every time you run your backups. Also worth considering is that every time you stop services, you lose all the warm buffer pool, so you will also incur some performance degradation from having to read data into memory again. XtraBackup is designed to work with Oracle MySQL as well as Percona Server. It's a good option, though as with all things backup, test, test, and test it again to make sure it works before you find out you need it. 

Basically what this is doing is looking at the url of every request and if it is matches, inserting some config rules on the fly before the authentication and authorization stage of the request. To modify it, change the bit, the regex match , and the list of directives to insert. This will leave you with a user file to maintain, where the username is the directory name from the url. If you want multiple users per directory, you'll have to use groups and maintain that file as well. For that, change to and add . 

Ok, here's a quick and (very) hacky way to do this. Short story is, there isn't a way (that I know of) to dynamically do what your asking with the standard Apache tools. Extra modules or code is necessary. Someone out there may have already made a module that does what you want. I didn't go looking. Install and enable mod_perl in your Apache config, then put this block anywhere in your config after the LoadModule for perl. It doesn't have to be in any VirtualHost or Directory or anything like that. 

Again, that's not the right way to do it really, but it looks like it works, at least on my Leopard box. Didn't try it with Snow Leopard. Hopefully they work similarly and I didn't just lead you down the wrong direction. 

When you access /monitorix in a browser, you are accessing /var/lib/monitorix/www. Your Directory block allows access to /var/lib/monitorix/www/cgi, not /var/lib/monitorix/www. Either change the Alias to: 

Unless you have a somewhere, isn't going to match anything. Mod_rewrite looks at the entire url, including the leading /. Try: 

First guess, your script calls some other command and system startup has a different PATH environment variable. It would be really helpful if you could post the script. Otherwise, all anybody can do for you is guess. 

I would suggest that you redirect requests rather than make the same site available in two places. Either create a new VirtualHost to redirect traffic: 

The directive can be used several ways, depending on the syntax. To execute a file the way you want, you must use the full path relative to the DocumentRoot, preceded with a /. Otherwise, it's taken to be a literal message to be displayed, which is what is happening for you. Try this: 

Keep it simple. Use on your log file to filter out everything except the directory you're interested in. 

The macports apache comes with a LaunchDaemon file for launchd to use, so the "proper" thing to do is not use the web sharing option and instead run 

This won't work for just any package, but ruby seems to be pretty clean as far as dependencies go. No promises that you won't run into some obscure issue with other packages you might install from apt though. 

Hope that helps. Please comment if you have questions about any part of it and I'll try to explain. Or figure out how I goofed up if it doesn't work. 

This question's already been answered, but I'll toss in what I do anyway. If all you want is to see if files were created, removed, or changed, you can do this: 

This is the one place where I think APT really sucks. To be honest, I'd suggest taking the lazy way out and just install the debs manually. 

Hit escape and you'll get a menu of options. Go to the bottom and find the entry for entering a shell. You'll get a warning about returning to the installer, then you'll be dropped to a shell. Run to get a list of what drives have been found on the system. You should see one there that is pretty obviously the system disk. You'll want to use the one without any number on the end. Run to clear the partition table. Then restart. The installer should see it now as a blank and unpartitioned disk. 

The latest version if the ImageMagick port appears to include lcms, so it surprises me that it would build without it. First off, make sure your portfiles are up to date. Run and then . It's possible you have an old version of the portfile where it wasn't enabled. If that doesn't work, run then and watch for a hint in the log about why it's being excluded. If it looks like something in the portfile is responsible for it not building, you can modify it before it runs to change the options it uses. running will show you the path of the portfile. If you edit that file then run it will use the portfile with your changes. Beware, when you run again, it will overwrite your changes. If, after all that, it still doesn't work, I'd probably want to look at the output of and see if anything looks out of place. 

You should be able to safely include a yourpackage.cfg file in your package without risk of it being overwritten or clobbering something else. Any of those .cfg files are included after the main default file, so just be aware of that and plan accordingly. You will almost certainly also want a postinst script to run update-grub when your package is installed, and just to be safe since it is in /etc you should probably also include it in conffiles in your package. I think though that this will leave it behind unless a purge of the package is done, so dealer's choice on that part. For reference, /usr/sbin/grub-mkconfig on or around line 157 is what reads the default files, including anything matching /etc/default/grub.d/*.cfg. It seems likely to me that this situation is exactly why it does so. I wrote this based on Trusty. I don't know how far back in releases this is still applicable. I just checked Lucid and it is not there. It is there in Precise. 

The command you tried is to run as an executable, which of course is impossible. The "Permission denied" you're getting is because that file is not set as executable, not because you can't change it. You can see the current setting by reading the file: 

Take a look at the ULOG target for iptables, combined with the owner match module. It's not quite what you asked for, but if you create a user specifically for your testing and run only the application you're trying to watch as that user, you should be pretty close. ULOGD, at least as far as I can tell, will write a file with raw packets. I haven't done it myself so I can't vouch for it but it looks like it will do what you want.