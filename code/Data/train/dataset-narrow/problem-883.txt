I recommend building the filter in steps, starting with an empty object . You then add attributes according to the selected city, category and date. And finally, you convert it to a JSON string via : 

This has the added benefit of removing the dependency on jQuery. Now, looking at the returned array, it becomes evident that you are actually building a mapping from year to values: 

Unfortunately, if you e.g. desire to change just the number of total pages, this argument order still requires you to specify all arguments preceding the argument. Therefore, you might want to consider using default parameters in combination with destructuring assignment: 

Those are domain rules and should not be validated against text. I would recommend that you use a parser to build up a domain objects from the text and use those objects in your application. I just did something like that in of my own applications recently. Something like: 

First of all. Follow the guidelines for .NET. Your naming convention is off. Same goes for the indention (also discussed in the same web page, but a different section). 

Repository classes should create domain objects. The domain objects may or may not look the same as the DB entities. If you mean that you write your DAL by yourself (and not using a ORM): Stop with that. It's a waste of time. 

As already pointed out, you need a more sophisticated approach to testing runtime performance of runtime-optimized code produced by modern JavaScript engines. I compared the performance of your datastructure against the built-in as well as plain objects on the well-known performance testing playground jsperf.com based on the benchmark.js library and got the following results on Firefox 53 / Ubuntu: 

To improve code readability and reduce the perceived complexity, you need to reduce nesting, remove conditional branches, simplify if-conditions and switch to a more descriptive style. The following 'techniques' help to simplify your code sample: 1. Exploit the nested loop structure: The first condition checking for line-breaks becomes whenever the inner loop terminates. Get rid of the condition and move the statement below the inner loop body: 

I was just playing around with some code and had the idea about writing some kind of manipulator to delay the output of characters in a typewriter like style. The focus was mostly on how to use it and was inspired by or . Overall it works pretty well. I just want to make sure that I didn't miss anything that may backfire any time. The code is just for playing around and doesn't have a real use case (yet). 

As it seems my intention on what should do and how it works weren't very clear. So here is what the example will do as instructions: 

It is not obvious to me why the arguments and are given as instance properties and defined within the constructor function. By doing so, you create a stateful object which is more difficult to understand and test than e.g. a simple 'pure' function. Also, by setting the flag, the semantics of your method are no longer compatible to the meaning of . How about two methods and ? The suffix indicates that the return value is a complex object containing index and value, comparable to e.g. or . Those established methods iterate or return arrays instead of objects, so you might want to consider following this established pattern, too. Instead of passing an flag and relying on instance properties and I suggest a method signature such as and passing (or not passing) a delta argument. I would replace the many for-loops with a single . You would then have to lookup and and return either one depending on the given flags. Don't forget to test for the corner case when and consider handling it appropriately. If you had to handle more than 20 values, I'd implement a binary search and - if the number of queries for a given array of values is large, built a binary search tree first. This would improve runtime complexity from linear to logarithmic. But for just up to 20 values, the built-in or even an explicit for-loop is surely faster. 

You could and should read the user inputs into variables of types that represent what you are doing with them best. E.g. whether the user wants to invert or should be a boolean. For the operation I would recommend declaring an enum. I would also print messages about input errors directly where they happen. If a user already enters a wrong operation (e.g. "XOR") in the first question, why should you let him enter two additional values before you tell him. Additionally your messages can be more specific. Checking/Comparing user input that is not required to be case sensitive is easiest done by making the user input upper case (or lower case) and compare against the wanted/required values in the same case. This method is also less frustrating if you don't need to retype as you accidentially typed . If the user enters something invalid you can also force him to enter a valid value by using a loop that doesn't quit until something valid was entered. And last but not least you output. You can completely stream line the way you do it by "calculating" the values depending on the user input beforehand and output everything later. E.g. this line: 

don't belong on the same namespace or module as the random number generator as they are not related at all. Namespace: You use the object for unrelated things: 

If you modify your function to increment frequencies for string and decrement frequencies for string , you can simply sum the absolute frequencies to get the number of required deletions. If you combine that with a more descriptive approach by replacing for-loops with and , you get a simpler implementation: 

I recommend removing the inline event handlers from your HTML document for a cleaner separation of markup and logic / JavaScript similarly to how you separate markup and style / CSS. You can then add all event handlers with a few lines of code as follows: 

A bonus is that you can never type anything wrong or use values that are not allowed (which is the case with strings) 

imho you are using return values in the wrong way. For instance, the returns false for two different reasons which will make it harder to maintain the application. imho both cases are exceptional (the developer should make sure that the user do not exist before calling and the database is not likely to fail). Hence I would probably just have a as return signature and use exceptions instead. Same goes for removal. Using a indicates that the removal may fail as often as it will succeed. And that's not the case, is it? As for the tests, there are some patterns which are typically used. First of all I usually divide my tests accoring to the arrange/act/assert pattern to make the tests more readable: 

You asked what happens when you don't initialize in the loop body? Initially you create a single array instance . Then, during each loop iteration, you modify the content of this array and push it onto . So in the end, each index of contains a reference to the same array, similar to this: 

Of course, you might want to encapsulate above code in a function or even more versatile, a generator function and replace with . However, since you only have four different step-sizes of 1, 10, 100, and 1000 you can encode them manually and come up with an even simpler generator function as follows: 

Comparing the new code to a normal for loop with the same range actually shows us no difference in compiler instructions: 

is used to get the unsigned equivalent of as the function makes use of the modulo operator. Modulo operations on signed types is UB. Next is to get the difference between an and store it in the unsigned type. This is perfectly fine since will only return positive values. Also we are getting the absolute value of step. It doesn't matter if we are going from to in steps of or from to in steps of ... all we need is if we exactly hit when iterating. will give us this value. e.g. when using the last value we hit is which is short of . will give us this . What we need now is the value being signed again in the direction of step. will return if is negative and if step is positve. If there is no underflow we can just return the last we were provided with. Otherwise we need to calculate the next last that can be "hit" with . So we use to find the difference we need and add it to . Example: 

See also Is JavaScript a pass-by-reference or pass-by-value language? Now, if we look again at your implementation, we note that you already perform a regex test. We could perform a regex matching instead and get rid of all those redundant calls. I wrapped this new implementation in a documented function and ended up with: 

6. Replace the declarative loop with a more descriptive approach: Exploit built-in methods and introduce new named identifiers for self-documenting code: 

Now, it is much easier to see that the inner loop is actually just checking the existence of an element within an array. You can use the faster built-in method instead: