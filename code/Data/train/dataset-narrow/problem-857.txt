You have to write a complete parser (a simple one, but too complex for becoming a single answer) to avoid these issues. You can know if you have done everything correctly luckily: 

This is deeply different. Basically you can select which engines process which entities without having to resort to specialized components or without resorting to usage of Tags or groups. Basically when you spawn an entity, you have to select in advance which engines will see that entity. You can change that at any time by updating EntityViews in its descriptor, if there are missing components a nice error message will tell you that (I think you can implement that at compile time with C++, I done something similiar in past). Basically you may have X entities in your game that have a Position component, but you don't want to process your position the same, so in example static objects should not even have Systems updating them, so they could just have a method that returns the position without allowing to change it (that method does not implement any logic it just returns data). 

Is this really actual, working code? Also, you're not showing us ; I wouldn't be surprised if it doesn't need to be an "overloaded function with 6 type overloads". I also would expect a method called "Create" to return something, but that's open for debate. You could look into System.Convert and use that to convert the object to a value, but again: this depends on . I'd advise you to submit a new question and include those methods, and provide us with more background. 

I would also rethink names like "0to3" and "total_daysclose" if possible: these naming styles are inconsistent and IMHO bad; I'd much prefer "ZeroToThree" and "TotalDaysClose". "Gtrthan7" is even worse, since it contains an abbreviation and I really can't see any reason why. Note that I would also move column names to constants, perhaps even move those to a static class, e.g. 

Each of these should be their own method, and thus the body of this controller should be its own class, split into multiple methods. Look for instance at MediatR to "un-bloat" your controllers. 

I have completed a coding challenge from Free Code Camp. The challenge's user stories are as follows: 

The code returned in the view is messy. How can I tidy my code so that the styles applied do not take up space inside the main of the view, perhaps instead within a variable beforehand? How else can I optimise this code? 

Here is a demo: $URL$ Please can you review for any improvements to how I have structured and written my code? 

I would like to structure the app better by splitting this file into separate files but for the sake of this question I have kept it in one file. Demo (adapted for codepen without localStorage features): $URL$ Making this small app brought about some questions I have about Redux: 

I made a simple React + Redux app which allows you to add and remove recipes to a list. Here are the user stories the app fulfills: 

I have made my first app in Elm, a lookup of Github users. You type the name of the user into the search bar and the user's username and profile image - which has an anchor linked to their profile - appears below. Here is my code: 

is a horrible name. A property should never start with "GlobalVariables". Later on there's a , so now I'm wondering if is a typo. Even if that's the case, having a class called to pass data around indicates a bad design, and its properties don't seem to follow the capitalization guidelines: should be PascalCase. Also, shouldn't be called "List", even if it is a . Just call it . 

While there's definitely a lack of concrete numbers, the simple fact that you loop through several collections and do for each element is undoubtedly a major performance issue. You should do a single query and store the results in a , and then while looping fetch the necessary data from the dictionary (using ). If you'd started a SQL Server Profiler session you would have no doubt seen hundreds of queries; replacing those with a single one would already alleviate much of your server load. 

Yet before they can be used it is perfectly possible the method will exit due to . Keep such definitions closer to where these variables are actually used. 

User Story: All new recipes I add are saved in my browser's local storage. If I refresh the page, these recipes will still be there. Code: 

This is the first in a recursion exercise which I have needed to change the base case to accommodate how the rest of the code works. I originally made it so that whenever an is reached, it returns a substring from (because the following is irrelevant), but of course, this is useless when there are two 's adjacent to one another. I am still getting used to the idea of recursion, so I would like to know if this is a 'good' solution or not. Can it be made more efficient? 

I have an and function because there are only these two fields that get added by the form. Would it be better instead to use an and run this when either field changes? I see this as a benefit for when other fields get added, but less efficient because I will be running an onChange function for several fields that aren't changing. The naming of my action creators, reducers, and functions inside are usually the same. For example , action creator and function. Is there a better approach to this? In the function inside , I am validating the and values. Should this go inside this function, or somewhere else? In the function inside , I am dispatching many actions. Is this correct practise? 

Simply use EntityViews like in Svelto. This concept was introduced with that framework. And I really love it. Most ECS frameworks have this dull concept that Components are coupled with engines and every engine should loop all components of a certain type. They should not! Both for flexibility and performance issues! (there are even technical articles from AAA industries that use tricks like skipping updating Systems every X frames because they were basically looping too much). Everything in Svelto is decoupled. Most ECS frameworks have this concept: 

This gives an overview simplified of the design process. You continuosly refine things, because you can't predict everything. I Assumed objects have a position ok, but then after I defined the first piece of logic It was obvious that the bush was missing the radius for collision avoidance. It was not so hard to add it later. This kind of continuos changes are a real pain without an ECS system. And I added a Radius, without warrying if that could interefer with other engines, just because the engines are selected by the entity view, so there is not risk that adding the Radius to bushes automatically makes the bush processed by Radius-realted systems. Bushes are only processed by Systems interested in their EntityViews. If later I want bushes to be only slowing down player, I could altogheter remove the EntityView from the descriptor, and automatically I change bushes behaviour, without having to change engines, or without having to change the Bush. Honestly I think the final syntax in C++ will be quite different from C#, but I believe it is actually possible implement the same of Svelto in C++. 

What are these, fields of properties? If they're fields they should be private; if they're properties they should have a getter/setter. 

I note that you keep the Excel file open and then parse one or more text files. Have you tried closing and opening the Excel file for each text file you parse? Also, have you considered other ways to open and edit Excel files besides Microsoft.Office.Interop, like OpenXml? 

My main problem with this code is that it feels "rambling". Things happen in the right order, but it's all mangled. For instance: 

Your naming could be improved. The "MC" in makes sense in context, but why not write "MarkovChain" in full? and aren't clear to me, but I don't know the convention. 

Shouldn't that be ? The rest of the exception message is also wrong of course: . A similar error appears just above it: . It looks like you copy-pasted the earlier checks for and and didn't change everything that was necessary. 

IMO it would be far better to create a custom class to hold the necessary parameter data: the parameter name, its value and its type. You then pass a list of these objects to , and loop through the list to construct the parameters you need to pass to , making sure to also include the correct . Or perhaps you can simply use instead of a custom class, it depends a bit on how you've abstracted your db logic from your business logic. 

I have written a small app that fetches news items from an endpoint and displays them in a grid. I used React to create components and use them throughout the app. This is the first thing I have built using ES6 - mainly for syntactic sugar. I tried to match the BBC News page style, so it should look very similar. It's responsive and should look good on any size screen. Overall, I'd mainly like feedback for my React and ES6, comments on best practices or what I could do better. Here is my React code: 

I built a small app that gets data from a remote json file and displays it in a list of users. In each list item, an image of the user, their name, and their points tallies are shown. The list is displayed in two possible ways - 'all time' and 'recent' - depending on the user's choice. I would specifically like feedback for my SCSS and usage of React components but anything else is also welcome. PS: I tried working without semicolons - is this a good or bad idea? Here is a Codepen Javascript: 

I fail to see how (a badly named variable, by the way) can be anything other than or , so the second can just as well be an . But this code can be even simpler: 

Besides the two answers already given, I'd also suggest the following. Rename to . Same for . But most importantly, I'd rethink your entire . I suspect there are several errors -- ? ? -- but more importantly I cannot figure out the logic and I suspect you're missing plenty of cases. Try to document the behavior you expect to see, and implement that as simple as possible. Your method has four parameters, which IMHO is starting to become unwieldy. Can't you pass a class like this? 

Why do you have the class? Why not make life much simpler for yourself by making a , and having classes like implement ? You can then query your assembly file for classes where is implemented; that way you don't even need to fill "by hand": 

There is also the presence of several magic strings, which reappear elsewhere in your code (the ). This indicates to me that these values should be s in a separate class, so that should there ever be a need to change them you only need to do this in one place. I would even consider something like this: