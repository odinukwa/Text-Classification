You don't have enough line breaks. Throw an empty line in-between logical sections to help disseminate the code. 

But the API doesn't use any streams! It requires you to pass a , why not allow streams to be used? Then you eliminate that in and the in entirely. Let the caller deal with the stream mechanics. Next, why not allow the caller to get a back out? You still force the caller to deal with a in the end, we could eliminate that. 

Don't worry so much about the password sitting in memory. Yes, it's generally safer to keep it in memory as shortly as possible, but that goes along with Single-Responsibility Principle, the Principle of Least Astonishment, etc. Your password (and all variables) should be as short-lived as possible. (I.e. Don't do like the old C code used to with 100 variables defined at the top of the file.) I have turned this answer into a guide on my blog for further explanation. 

So at 120 calculations the chain from initial value exceeds the integer maximum. In an type this will become a negative number, which enters an infinite loop: 

The is a single-line statement. It must be on one line (unless in a line-continuation context) and will do the same thing as , but is much more succinct. I use them for guard-clauses like this a lot. The construct creates a character literal from the specified string (which should be one character only). The is the magic bit, you can remove it from everything if you like. 

Your code doesn't look too bad, you should fix your whitespace though. Generally a maximum of one line where it's necessary. 

I'm going to do my usual complaining about basic issues, things that as a good programmer you should never get away with. (I'm looking at you Dmitry and t3chb0t. >.>) 

Click the first line (assuming you have one) in the new portion of the window, then click 'Referenced Objects' at the bottom section of the window. It should show you a bunch of objects, find , and drill down into it. You should see several objects. Go ahead and hover each one, one will be your password. Of course, the object on the itself will also be a connection string and have your password in it. 

Technically, that's it. We rewrote for tail-call recursion very easily, but we still use . Now that we see the tail-call recursive example, it's easier to do the next step: integrate into the "" (I'm bad at naming things): 

All in all, here is the new version (with all the edits I recommend). Yes, it's longer, but it's also more robust, duplicates less, and should likely perform better. 

This is one of the (many) utilitarian classes I have that I use with my ASP.NET sites. The basis of this one is to make gathering certain tokens that I use periodically, to make URL's more friendly. It's pretty simple, and should be quite obvious. I use it to make URL's a little more friendly. () It returns and creates a dictionary for the remaining pairs of and . 

Readability issues I was reading through your code and couldn't figure out why it was so hard to read, until I realized you seem to be trying to adhere to a specific character-width policy. Let's not do that please. I would also recommend standardizing your method-chaining line-breaks, method parameter line-breaks, and the like. If you're going to break one parameter on a method into a new line, do it for all of the parameters on that method. Likewise, if you are line-breaking one method-chain in a group, do it for all of the chains in that group. Otherwise, the eyes have to jump all over the place. For example, I would rewrite: 

All-in-all this was a very well-written programme, I actually learned a lot from it and it forced me to think functionally for a moment, and helped me remove that mutable variable with a little effort. Very good job! :) 

Another variable naming nit-pick: you should always local and variable names: i.e. instead of . This is another best-practice. 

We validate all the numbers and reprompt the user if the number is invalid. We make sure the user only entered a basic operation for the intended operation. We make a list of valid operations at the beginning, which means if we add one we can do so easily. 

The first thing that stands out there is that the latency is 35-88 cycles. That means the result will be valid after that cycle-count passes. That's a lot. Let's look at : 

Personally (and I use this concept in my ASP.NET work as well): if I encounter an error with authentication/authorization, instead of throwing an exception (or / in your case), I have a custom error handler class that will send that data to a SQL database, the Event Viewer, and submit the user to a custom error page. Part of the security concerns are that throwing a default / message 

All-in-all this is a very good start for a beginner to C# programming, much better than my first entanglement with the language. I'm quite interested to see what else you manage to accomplish while experimenting in the language. :) Do note: any C#6.0 features require Visual Studio 2015. 

By using an accumulator, and making the call the very last thing the function has to do, it can now use tail-call recursion to optimize itself into a cleaner loop. I'm quite certain this follows the functional paradigms much more appropriately than the original. 

I cannot believe this went unanswered for 5 and a half years (I guess I can, it is a difficult question to answer) - I'm going to try to answer it from the respect of early 2012, and the respect of today (mid 2017). 

A lot of your naming could use some work. Public, protected and internal properties/events/methods should be . Private fields/properties/events/methods, parameters, and local variables should be . Some examples of violating this: 

This has a couple possible updates that would make life easier. First, let's use for the first like we did the second. 

Any comments welcome, though I would greatly appreciate any comments/advice on the design pattern itself. 

As far as and go, you should never repeat an value more than once on any page. If you need to include multiple elements that use the same CSS rules, always apply those rules to the , and always apply that to your , , , , , , , or whatever other tag you have. You can attach an or to practically any tag. So don't let those restrict you to only using or . 

Finally, : I hate the whitespace there, the way you indented that. Generally, if I have to multi-line things like that I line break and then start indentation. 

One of the improvements you can make is a on instead of using (which will always be slower). Another improvement would be to convert all those statements in the block to a . Third, you should be using instead of string constants. This way, if something gets refactored, the name change persists without needing to go through all the strings and look for names to change. (For example, will return .) Do note: this is C#6.0 only. Another suggestion is to create a variable to hold your delegate for comparison in. That way, you can create it once and run through each sort as needed. This does require you to create an extra and duplicate your loop, but it makes it a bit more maintainable (and likely faster) in the end. Fifth, I would recommend replacing and with loops. They should be faster (if I recall correctly), and you don't have a need to keep track of or in them. Another C#6.0 feature you can take advantage of is the null-condition check to remove the null-check in sort. will only call if is not null. Lastly, there's no need for . In C# you can directly compare strings with . 

More generics. Starting to get the point? Now, you'll notice that I replaced all that explicit record building code with a . That is part of the second interface we implemented, for it looks like: 

This actually posed a larger challenge than I originally anticipated, but in the end it was resolved pretty swiftly. Obviously I want comments on all facets, but especially the idea of the performance of the method, and anything related to the nature of it. I want it to be as lazy as possible, after all that's what good framework developers do, but I also want it to be robust. The code is actually surprisingly long, but I think that's my fault for not abstracting it to a class, and I really do not want to abstract this to a class. The method is as follows: 

I was wondering what a was, but then I realised it's , let's change that to a . Let's also make that puppy an extension method: 

Obviously both pieces need put together. You can do similar things with your methods that smell like arrow-code. (This is a pun on Code-Smell, if anyone missed it.) 

In my opinion, these are very reasonable requirements: there's no requirement of symbols/digits/mixed case, just a somewhat long length requirement, and it cannot have obvious insecure strings in it. There are two sections to this class: the C# class, and the F# module. The class is straightforward: 

So, this is all fairly simple in the end, but it looks complex. Please comment on anything I can improve. There will eventually be a crapton (that's metric) of values in the DB, and I want to make sure they're right from the beginning. Also: due to the importance of this, I will be offering a (or more) bounty (when it's eligible) to the best answer(s). 

I would recommend creating an interface to hold common elements between the , and . This will allow you to abstract out a little further, and create actual responsibility separations. 

Note: I'm not an angular.js guy, or a Javascript expert, so the above may need tweaking to work. This should help separate responsibilities of your code, and make it easier to maintain. 

Do not use for something like this. The handle is much more appropriate. Others may recommend using or , but I would personally recommend the over it. Concerning: 

There was an interesting idea brought up in The 2nd Monitor where one of our regulars was trying to split a bunch of strings into a specific format. The format should be similar to the following: 

Nope, same as x86. Damn. Well, on the bright side, we have completely disproven whether your method is better or not. It's neither better, nor worse. Until we examine the API. Do I do or (just to get a negligible speed increase)? I think I'll pick , sorry chief. 

Since you are already throwing your own exception, you should use instead. I know, you want to have an on your , but consider: what value does it add? It also only indicates a problem with one element, whereas if you use , you can indicate to the user all the elements that had problems. In my opinion, that's a much more helpful exception. Plus, catching and throwing is slow. There's no need to catch an exception if you can avoid it completely. You should also consider adding the appropriate attributes for (and the like). I find that I use this (and way more often than any others, but they require special attribute management. 

You should consider a parameter (or even setting value) so that isn't a "magic number." As it stands, if the user wants to use a larger or smaller buffer, it's impossible without modifying the actual code. 

All endpoints can use the same code and general implementation, and satisfy the file-type serialization requirements. All errors will be gracefully handled and returned to the user as a JSON object. 

A project I'm working on requires generating a random number of \$N\$ length to a very high degree of fair distribution between digits \$[0, 9]\$. That said, I used the in the .NET framework, and built my own window restriction / clamping. First, we have the clamping. This clamps the values to the range from \$[lower, upper)\$, allowing the user to specify what range of values they want. For me, it's \$[0, 9]\$. Mathematically speaking, using a cryptographically secure random number generator should yield a truly random set. The problem is clamping: if we simply take to reduce it to our desired \$[0, 9]\$ range, we'll find that we have a slight favoritism / bias towards numbers at the lower end of the set. In fact, we should have the most bias towards the set \$[0, 5]\$. To reduce, or even eliminate, this bias I took a previously working algorithm and modified it slightly to create a bounded number of loops. The idea is simple: to generate a random value in the domain \$[0, 9]\$ take the random value from the set \$[0, 255]\$ and test that it is within the range \$[0, 249]\$. If it is within that range, take \$value \mod 10\$ as the result. If it is in the range \$[250, 255]\$ then we draw a new number. This can be expanded to define the following general-purpose formula: $$upperLimit = 256 - (256 \mod modulo)$$ We can then define the number to take the modulo by as: $$modulo = upper - lower$$ We set the loop up to bound to a specific value, in this case I'm creating the loop So far, my results have yielded almost perfect distribution of the values \$[0, 9]\$, when generating \$1,000,000\$ values. I have run this several times, and each time I get a slightly different distribution, by a very small margin. That is perfect, as it demonstrates that the RNG is not predictable by any manner. 

Based upon a question from Stack Overflow, I wanted to expand on the answer I wrote and define a solution that would support ordering the strings (after processing). So this starts off with a basic , and you can guess what it's going to do: 

So that's easy. As you can see, I can still use , I just can't use . Then, I wrote instead of the method: 

Though, it is fairly difficult to break statements like that into multiple lines while maintaining readability, I find this much more readable than what is already there. Likewise, this: 

This is obviously a personal choice, but I would always use the all-caps style, as this makes it more explicit. It also makes it more difficult to find constants with Intellisense and the like. The all-caps constants stand out immediately. Typically, people coming from a , , or even background like myself tend to stick to constants, as they are generally the standard for such languages. While I agree with a large amount of what the says about naming, this is one of the few points I disagree with. Again, this is a personal preference. Were I writing the code, the fields would be instead of . Visibility/Access Modifiers Generally, it is best accepted to specify explicit visibility modifiers. Don't allow the access modifier to be assumed. (Yes, I know, that adds more text and can make it hard to read. But it also makes it perfectly clear what the intention was.) Readonly Fields/Properties As RubberDuck said, there's no need to have properties for the fields. It adds unnecessary clutter. Making the fields works just as well. Consistency Some of your statements with one line to be executed have curly braces, some do not. I have removed them from all the ones that have them and were single-statement 's. This is more a consistency standpoint than anything. TryFromDouble/FromDouble/GetNearestRationalNumber You were most interested in the and methods, so here is my comment on them. The method is the more important one, as uses it, so I dove into it and also investigated the method. In , you directly compare a to . This is generally a bad practice, due to floating-point error. I would, instead, pick an that you can use to compare it to. I.e. . There is also no need for the loop in that method, it would only execute once due to the early-return. You can change that to an . Tools Class Lastly, I would make public. You could also make those extension methods. ( and use it as et al.) This makes it easier to access. RationalFormatProvider You had a misspelling in (), I fixed this as well. Otherwise, it's a nicely put-together implementation. I like the simplicity of it and the consistency you did keep. Rational class: 

The biggest change I would make, speaking from a semantics standpoint, is to limit your whitespace and use consistent control structures. I.e. take 

I had some trouble getting back into the Java mindset for this, after having done C# and VB.NET for so long. Overall I think it was a successful adventure. Any comments on either code block are welcome. 

I created a local variable in each test for readability. Do note: it does not yet support multi-level properties. (It will use the method on the property to serialize it.) 

Micro-Optimizations One very micro-optimization you can make is, instead of subtracting numbers, add the negative variants. For example: 

I did not return a mostly because I'm not referencing any libraries that have a (this was built in the C# Interactive window), but also because it should be generic enough to just return a list of three values for the color. To address one of the comments: 

Regarding your naming (especially in ): C# members should always be named (first letter of each word capitalized).