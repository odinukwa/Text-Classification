An USB Null Modem Cable could work. It's for USB-host to another USB-host. Each end appear as a (fast) serial port to respective host. $URL$ 

To get the requested logging it's not enough configuring only the kernel, config.txt and cmdline.txt. You need to disable tty1 login in "init" config as well. My project Nard SDK does pretty much exactly what you want so you can copy the setup from there. $URL$ Edit: If you need the syslog to forever output everything to the UART in realtime; login and execute command "logread -f" in the console. 

My project Nard SDK has many of the features you want. It's not Raspbian but it has Raspbian binary emulation and are thus very close. With Nard you build everything on a PC and the process is very fast and reproducible. Everything is scriptable and can be done by e.g. a nightly continuous integration. $URL$ 

You could use my Nard SDK as a platform base. It doesn't use the SD card at all after bootup. One can even remove the SD card and the system will continue to operate just fine. $URL$ 

My project Nard SDK is the remedy for removed power cord problems. It's designed from ground up for embedded systems and use the SD-card only at boot time. Once up and running the filesystem is never used again, you may even hotplug the SD-card... $URL$ 

Please have a look at my project Nard SDK $URL$ which is quite robust against failed system upgrades. It is designed specifically for embedded projects and has precautionary measures to minimize failures in the event of a power cut in the middle of system upgrade. 

From the currently running OS; modify and issue a reboot. The option modifies which OS to load. Update with instructions: I'm guessing a bit here, haven't run Win myself. But I would be surprised if this didn't work: 

Likely you need a different distro to achieve this, one that runs from RAM. Otherwise you can't rewrite the entire SD card at once. My Nard SDK might be an option for this type of problem: $URL$ 

Have a look at Nard SDK if you need a robust system. It uses the SD-card only during boot. When startup has finished you can remove the SD-card at it will continue to operate just fine. $URL$ 

Install Linux first and copy to a USB stick. Install Windows. Copy from USB stick to (from inside Windows) Edit , add argument Reboot. Hopefully you get Linux now. To boot Windows, remove the from /boot/config.txt and reboot again. 

From these, it looks like it might be possible to get it running on the Raspberry Pi, though it is certainly marginal. Also, it is probably only an option on newer 512MB Raspberry Pi's than with old 256MB devices. I would suggest that you give it a go. It is possible that the Raspberry Pi will be fast enough to run it without a decent JIT compiler, though hopefully we will get that eventually too. You will also almost certainly need to need to compile or install your own copies of FFmpeg, libRTMP 2.4 and the Lame MP3 Encoder (v. 3.98). 

So we know that each Raspberry Pi taking around 10 minutes of labour on average, so at least Â£1 per device goes on workers wages, probably more (assuming not all of those 30 workers are on minimum wage). 

As such, although official DSI screens are now available, and there is kernel support, it is unlikely that that such support would extend to arbitrary other implementations of DSI screens. Given what the wikipedia page says about the protocol, DSI is hardly a smart way of doing things these days (the protocol is complicated by the need to support displays without on-board memory) and it is possible that any given GPU binary may only work with a limited set of specifically supported devices, rather than supporting any arbitrary DSI display. 

Obfuscation The option you suggest, obfuscating the code, messes with the economics above - it tries to significantly increase the cost to them (5 above) without increasing the cost to you (6) very much. The problem is that as with DVD encryption it is doomed to failure and if there is enough of a differential between 3, 4 and 5 then eventually someone will do it. Another option might be a form of Steganography, which allows you to identify who decrypted your code and started distributing it. For instance, if you have 100 different float values as part of your data, and a 1bit error in the LSB of each of those values wouldn't cause a problem with your application, encode a unique (to each customer) identifier into those bits. The problem is, if someone has access to multiple copies of your application data, it would be obvious that it differs, making it easier to identify the hidden message. Protection The only really secure option is to provide a critical part of your software as a service, rather than include it in your application. Conceptually, your application would collect up all of the data required to run your algorithm, package it up as a request to a server (controlled by you) in the cloud, your service would then calculate your results and pass it back to the client, which would display it. This keeps all of your proprietary, confidential data and algorithms within a domain that you control completely, and removes any possibility of a client extracting either. The obvious downside is that clients are tied into your service provision, are at the mercy of your servers and their internet connection. On the plus side, they are always up to date with bug fixes. Unfortunately many people object to SaaS for exactly these reasons. This would be a huge step to take though, and could have a huge cost 6 above, but is the only way I can see to keep your algorithm and data completely secure. 

You might want to consider a Linux distribution which was designed for read-only rootfs from the start. For example, my project Nard SDK $URL$ is a better fit for embedded use (but there are others too). The ones on your SD-card with a Raspberry logo is for desktops. 

The area 0x0-0x8000 is reserved for special purposes, like passing ATAGS and the kernel command line etc. from the bootloader. It does not occupy space on disk (there is a hole in the image). 

Does other Linux distributions behave the same, or is it only piCore malfunctioning? You may want to try out my project Nard SDK which is a "competitor". It too fits entirely in the Pi memory. 

Using an USB SD card adapter won't work if you need driver level access. If you really want to use Raspberry Pi one of the older models can mount a large SD card. An alternate option might be to instead use a laptop with built in SD card reader. 

With Linux you could try the framebuffer interface. It can be memory mapped as a buffer where you write your data. 

You may want to look at my project Nard which has a solution for your problem: 1) Each SD-card can be assigned an unique ID with a regular Windows PC as described here: $URL$ 2) Power on all your Pis 3) Disable the PC firewall if possible 4) Open a DOS prompt window and ping the subnet broadcast address 5) List the ARP table with Windows command "arp -a". In the list you will find the MAC and IP addresses of all nearby Raspberry Pi. 6) Connect to each device with telnet (usually available in Windows too). The welcome phrase will display the ID assigned in step 1. 

Your best bet is likely to adapt a "live boot" disto. My Nard SDK being one example. It always run from a ramdisk, even when SD card is present. The development version in Git will have best chances for network boot to work. $URL$ 

No it does not unfortunately. The client mode is only used when flashing the eMMC with a new image. When Linux has booted normally there is USB hos only. 

Yes there is. You might want to look at my project Nard SDK which has what you seek. Here is a link to the documentation explaining how to preset the SDcard static IP and host name with any standard Windows PC. $URL$ 

Practically, if the code and keys are on an SD card machine, they will be able to de-compile it, they will be able to discover the keys and they will be able to extract the sensitive data. It's like encrypting movies, a DVD has to include all of the information required to decrypt the movie so that it can be displayed to the viewer, so all movie copy protection mechanisms are ultimately doomed. The best you can do is change the economics of reverse engineering your product. Is encryption and/or obfuscation worth it? Now we have established that there is no way to completely protect yourself, the questions become 

But this isn't much to go on, so what are the benefits of using Arch Linux on the Raspberry Pi over the standard Debian build from the Raspberry Pi foundation? 

How likely is this to happen? What is the value to someone else of your algorithm and data? What is the cost to them of buying a license to use your software? What is the cost to them of replicating your algorithm and data? What is the cost to them of reverse engineering your algorithm and data? What is the cost to you of protecting your algorithm and data? 

The Raspberry Pi foundation has announced that The official Raspberry Pi touchscreen display is now available. This is a ten-point touchscreen, which connects to the DSI connector and has full kernel support, after an upgrade. Given that this has taken the foundation several years to finish, I doubt it is something that anyone could easily hack together from spare parts. Background The Wikipedia Display Serial Interface page says: 

If these produce a significant economic imperative to protect your algorithm/data then you should look into doing it. For instance if the value of the service and cost to customers are both high, but the cost of reverse engineering your code is much lower than the cost of developing it themselves, then people may attempt it. So, this leads on to your question 

It is difficult to calculate the manufacturing cost of a product like the Raspberry Pi. So much depends on where it is manufactured, what discounts can be negotiated on components for the volumes being produced, how complex the design is, how well it had been designed for ease of manufacturing, how much the tooling costs and over how many units the tooling can be amortised over. My suspicion is that the price was set based on the minimum volume the Foundation expected, with the aim that any savings from increased volumes could be ploughed back into the Foundation for future investment. With the recent move of manufacturing to Wales however, we can at least add a few more numbers to the estimation though. From Made in the UK! we can see: