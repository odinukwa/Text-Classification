I think ChaiScript would have been an even more simpler to integrate than Lua for your case. It uses a syntax more similar to C++ so it depends. 

My question is: is there a big disadvantage that I missed? Or maybe there are advantages that I missed and that should encourage me to just continue with only client-server game sessions? 

These locations assume that Windows is installed on the C: disk. Append your own directory with game name or game company then game name to these directories. 

In unix-based OS, the directory is automatically located at the user's home directory where user-specific data are located. This means that whatever the language, on these platforms you can access automatically this folder by using instead of using a OS-specific function. Also note that is the root path of the whole system, not a path to the root of the main disk. Append your own directory with game name or game company then game name to these directories. 

I'm making a game which have strong basic design based on multiplayer but also should provide a really interesting and self-sufficient solo game. A bit like a real-time strategy game. The events and actions taken shouldn't be as massive and immediate as in a FPS, so you can also think the networking like for an RTS. It's a PC game, targetting Windows, MacOSX and Linux (Ubuntu & Fedora). It's programmed in C++, using a variety of open source libraries, so I have great (potential) control over the performances. So far I always considered that just making the game work with two applications, client & server, even in solo mode was ok. However, as I'm in the process of starting the network code I'm having doubts about if it's a good idea. I'm not a specialist so I might be missing something in my analysis. I see these pros and cons: Pros: 

You can automatically get the right user-name-dependant address by getting the environment variable. Standard C (all compilers): 

Player's game data Apple's guideline is to locate save and config files there to make them saved automatically in the cloud if available: 

Notice that there is no , it's not relative to user's home but to system's root. Temporary game data: If the data don't need to be kept between executions: 

First, your code should display time in nanoseconds as you asked. If you want more help on what is displayed, show us the output. Second: 

I'm not sure if it's complete but I guess you can complete it yourself if you want/need: $URL$ Looks like there are TONS of pages *__* For your licence problem, a google search might be more useful. Also, from comments : I think the only thing you can do to make sure you got a licence not registered is to register it. The laws of different countries and other things makes it hard to check if you have legal rights on a licence you're creating a name for. If you can't find anything on google, check again, check variants. Then if you don't find, maybe try a legal move. They will tell you if it's already taken. Or they should. Contact a lawyer for details relative to your country laws and international laws. 

Boost users: at the moment I write this boost.filesystem (that is also a draft of the filesystem library proposed to the next C++ standard) doesn't implement yet a function to provide the right directory. However, there have been discussions about this before. Please feel free to update this section if things changed. 

Just know that in this case the files will not be saved automatically to the cloud. If you want the player to choose, use the platform's API to make him choose. Shared game data 

In unix-based OS, the ~ directory is automatically located at the user's home directory where user-specific data are located. This means that whatever the language, on these platforms you can access automatically this folder by using ~ instead of using a OS-specific function. Also note that / is the root path of the whole system, not a path to the root of the main disk. Append your own directory with game name or game company then game name to these directories. 

If you don't have access to Steamworks as suggested by Crashworks, one alternative is to build you own simple analytics system, as explained in this article: $URL$ 

I know a lot of logging libraries but didn't test a lot of them. (GoogleLog, Pantheios, the coming boost::log library...) In games, especially in remote multiplayer and multithreaded games, logging is vital to debugging, even if you remove all logs in the end. Let's say I'm making a PC game (not console) that needs logs (multiplayer and multithreaded and/or multiprocess) and I have good reasons for looking for a library for logging (like, I don't have time or I'm not confident in my ability to write one correctly for my case). Assuming that I need : 

performance ease of use (allow streaming or formating or something like that) reliable (don't leak or crash!) cross-platform (at least Windows, MacOSX, Linux/Ubuntu) 

There is none. All you can do is identify the specific needs you'll have for your event systems (there can be several different) and then use the right tool for the right job. I've implemented and tried to generalize tons of event systems and I have come to this conclusion. Because tradoffs are really differents if you make it compile-time or run-time, if you use object hierarchies or blackboards etc. The best way is to study the different kinds of event systems and then you'll have clues about which one to use in which case. Now, if you want the really most flexible system, implement a black-board system (runtime) with dynamic properties of events and you'll have something very flexible but maybe very slow. 

You can automatically get the right address by getting the environment variable. C++ Boost users: there is a simple cross-platform boost.filesystem function for this 

I asked this few months ago, the answer is : not at the moment. It's possible but it requires some changes. Currently there is a rewriting for the 2.0 release so maybe after it's done it will be possible to add this. As it's an open-source project I guess if there is a simple way to help the SFML author, you could propose a patch once 2.0 is done. source : $URL$ 

Wich logging library would you recommand? Currently, I think that boost::log is the most flexible one (you can even log to remotely!), but have not good performance update: is for high performance, but isn't released yet. Pantheios is often cited but I don't have comparison points on performance and usage. I've used my own lib for a long time but I know it don't manage multithreading so it's a big problem, even if it's fast enough. Google Log seems interesting, I just need to test it but if you already have compared those libs and more, your advice might be of good use. Games are often performance demanding while complex to debug so it would be good to know logging libraries that, in our specific case, have clear advantages. 

You can automatically get the right address by getting the environment variable. Standard C (all compilers): 

This is mostly to unclutter user's home directory, as well as allow users to run multiple profiles of an application if they deem it necessary. There are also other dedicated user-specific directories in the specification. Shared game data 

Boost users: at the moment I write this boost.filesystem (that is also a draft of the filesystem library proposed to the next C++ standard) doesn't implement yet a function to provide the right directory. However, there have been discussions about this before. Please feel free to update this section if things changed. 

I am implementing a type for Ogre 3D rendering engine to provide spherical coordinates. So far everything is working fine, until I try to build spherical coordinates from a cartesian vector. Here is the code I am trying right now, but it's not working correctly (changing phi and theta result in only half a sphere). 

If C++ template magic and potential long compilation times is not a problem for you and you already have Boost installed to work with: Boost now have an efficient (in speed and size) meta-state-machine library that have the advantage of letting you set the transition table separately from the states structures : you have a table that describe when to go from wich state to witch other state. You just have to read it to understand what's going on in the state machine. The other advantage is that it have been tested by several enterprises even in embedded softwares with high-performance software (see the boost mailing list for details). As the implementation is already there, it might be a good choice if you need a generic state machine implementation that Just Works(tm). It also support orthogonal states (parallel states) and other useful UML-based features. It also provide several ways to express the transition table, one being experimental but interesting on the expressivity side (although limited by current compiler performance -- too bad!) 

Google just released an early version of PlayN that does just what you want (on the paper) : $URL$ It's too early to say if it's useful or what. 

It happens. They are still "companies" so any kind of business move can be possible, including paying some foreigners to do a module of the game. A recent famous example are the boss fights in Deus Ex : Human Revolution. They were made by another company than the Eidos team. However, it is not common in the gaming industry, because it's harder to maintain coherency with a lot of people that are foreign to the core team. It happens mostly on very big projects where outsourcing graphics is not a problem for example, or outsourcing some modules like graphic rendering. 

The important point to understand is that it is good to have conflict in stories and games, but conflict does not mean fighting, war, killing or things like that. Also, collaboration (in conflict or not) is more rewarding to players on the long term. 

There are a lot of new (micro) consoles with Android inside coming soon or already there (OUYA for example). My question is: why use Android and not another OS as base for these consoles? I assume that there are pragmatic answers to this but I can't see any clear killer feature. For example, one can assume that any stable Linux distribution would work (like Valve seem to think). Android is primarily targetted at mobile platforms which mean it is built around the idea of being interrupted which goes against a lot of what console devs needs in new hardware - but is not killing Android as a platform for gamedev either as it's just a constraint. Why not another OS? What's the Android killer features that make micro-console builder using it instead of Linux or anything else? 

Source: $URL$ At the moment, if you want to keep using a cross-platform stl-like library usage, do like me, use Boost.Chrono instead. It works as expected and have a good granularity on Windows and other platforms. Using it, maybe with typedefs or 'using' instructions, makes you use the same interface as chrono but you can still switch to the standard library once you get the fixed implementation. (or use a different C++ implementation) One important thing to note though: standard library threading facilities for waiting (std::sleep_for/until, std::condition_variable and std::mutex members) are dependant on std::chrono. This means that if you want to use them you will have the same time precision problem using Visual Studio 2012/13 when using these synchronization tools. It might not be a problem for a lot of application, except most games, because slow downs dues to longer waits can easily be perceptible by the player. So if you decide to use standard threading facilities, and want high precision, use Boost.Thread and Boost.Chrono together. Boost.Chrono can't be used with the standard thread library, so you either have to live with the precision bug or use Boost.Chrono and Boost.Thread together. I'm sure it will be fixed in coming patches but don't expect such a fix before the beginning of 2014 (or the very end of 2013 but I don't count no it). 

You'll have to define AAA. For some people it's a budget scale definition, to others it's a team scale definition, to others it's a art-resources quality scale definition. Anyway, your question is too broad. Let's choose indie games. The variety of different games (that are often their own type) is bigger than in the industry and it's a lot more than most people even can imagine. How to answer your question knowing that? Anyway what you're asking for is more related to the alchemy between those factors : 

I have been searching for the right algorithm and I think I'm close but I can't figure out it correctly yet. My maths skills are not so good so I'm having trouble understanding what I'm doing wrong. Any idea how it should be done? 

Note that directories and files starting with will be hidden by default to the user. Most desktops now try to adhere to the XDG specification, which recommends 

So after several discussions like that I finally bought the book : $URL$ It presents all aspects of the subject to inform you enough to let you decide what to do for each case. 

For examples on time taken to make games (published or not) I recommend searching for Post-Mortem articles on $URL$ - lot of wisdom and feedback there. 

Instead of hardcoding rules in the game, just hardcore metrics recording, statistics. The achievements are only values of statistics that have to be matched to generate a "reward", or preferably, they are remarkable statistics. So what you need is only recording actions and events that are important in your game and then think later about what to make an achievement about. Then have a way to setup rules applied to those statistics, to trigger the achievements. Maybe some scripts to call sometimes, that would do the checks, or maybe a simple rule system where you set boundaries of specific statistics to be matched to trigger the achievement. 

How to manage different speed of actions in RogueLike games? What I mean is that turn based games may have actors acting at different "speed", depending on the action and some other characteristics. The actors then effectively do more actions/turns than others if they have greater speed, or not. How to determine when an actor should be able to act (turn scheduling?)? It looks like there is different ways to do it? Can you explain some with algorithms? 

If you are on Windows, using Visual Studio 2012 or 2013, there is a bug in the chrono standard library implementation that makes the high resolution clock having around 8 milliseconds resolution instead of something closer to micro or nanoseconds.