Which will save you a lot of rewriting if you decide to change the names of any of the properties down the line 

Therefore, I think you need to either increase the number of guesses to 10 (at the least), or chose a smaller set of things to guess, like A-F, 1-6, or something GUI based like Mastermind. 

With this, you can remove the first if/else and foreach loop entirely, by removing the ternary and using , like so: 

And you can delete the rest of your class. Edit: Using the new method would then allow you to add pieces of text at the specified points in your message, so your validation method that returns a State would use it as follows: 

Another thing you should be careful about is ing the same thing over and over, as it's usually unnecessary and can be replaced with a which will ensure that it's only loaded if it hasn't been in the current session. 

It all looks good to me, though you can simplify your NodeBase and methods if you use variable properties, like so: 

The first thing that jumps out is all the Strings you have which are reused throughout, those need to be removed and ideally put into constants so you only have to change them in one place if you ever need to rename them: 

Unless I'm missing something, you're ing the entire table over an over, then do exactly the same thing with it every time (except with different HTML class names). If that's the case, you can replace the whole file with this: 

If you want all your exceptions to follow this style, then you could have one parent Exception class, then make your application exceptions extend it, like so: 

If number of lines is your primary concern, then really all we can do with this is merge your array creation lines, and use to create temporary arrays which you can loop around, like so: 

Additionally, I'd suggest reading up on your SQL for a start, this whole thing screams out clause. In every case, your database will be more efficient at sorting the results than whatever programming language you're using them in (and certainly PHP). Such as: 

Then you can have your validation method return a state, and you can do your checking block after, like this: 

If the code will be distributed, read or maintained by others, you might want to look at your naming conventions as they're a bit inconsistent, for example sometimes you use underscore separated names such as , but other times you use sulkingCamelCase such as and in class case. Either one is fine, as long as you use the same throughout. Aside from your single line getters and setters, the function names you've chosen are not always indicative of what the function does. Ideally you shouldn't have to read the actual code to know what a function does, consider these changes: 

The report here says that it passed the test, but that QuickCheck didn't run as many tests as it wanted to because most of the random inputs it generated weren't in the desired range. (In fact, perhaps it's questionable to use QuickCheck at all for this, since there's only ten inputs of interest anyway!) By the way, this function (a partial version! boooo) exists also in : 

Actually, most of the changes we made to can be done here, as well. In the interest of totality, we'll change the type, too; it will return a (which we happen to know will be a singleton list, if anything) instead of a . 

This now has the magical special form of recursion that can be turned into a . Let's do so! See if you can spot where each piece of code from the above ends up in the below. 

As usual, the tests. Since the old function was pretty partial, we'll arrange to have inputs it knows how to handle, though our new one tries to give an answer even when you feed it garbage. 

It's common in cases like this where the trailing arguments to the function you're defining are also trailing arguments to a function in the definition to omit the arguments entirely. The technical term for this is , I think. Whether you choose to do this yourself is primarily a stylistic choice. 

Personally, I often prefer to , and the is complicated enough that I feel like it should be named, so I'd write it as follows. But this is an aesthetic choice that you may or may not agree with. 

There's a few things I find more satisfying about this: our base-case input is , a common base for s; our base-case output is , a common base for s; and there's no duplicated code in the two branches of the . Finally, I think I'd choose to replace the -- with a pattern match, noting however that this function has a slightly different behavior for negative numbers. Since we were never really doing the right thing for negative numbers, this doesn't bother me too much. 

In fact, there's even a function that squashes those two things together. Veteran Haskellers will prefer to spell this function in its infix, polymorphic form as 

If we're feeling fancy, we can choose to use instead of two separate calls to and ; and we can unroll the definition of ; but I think neither of these is terribly important. Nevertheless, they're idiomatic, so: 

It's secure, but it's really chunky and tedious to write. I'd do this by overriding the magic method to trick GSON into thinking the methods exist, like so: 

Obviously the on every iteration is inefficient, however as I need to maintain a counter, an enhanced loop means keeping a separate counter and performing a check on it every time like so (list declaration skipped for space): 

I have a array and a of a custom object and I'm needing to loop around and perform an operation on both but only as long as one of both is available, the original method is as follows: 

I put as a method as it isn't clear whether you're using this design pattern elsewhere, but I assume so as you're connecting to something and there's usually other exceptions that can happen later. If you aren't, you can just stick it back into the catch block of . Additionally, if it isn't clear, the ternary is so you don't have to manually type in the message to attach a cause to an unknown exception being wrapped. And I took the liberty of replacing the generic message "connection" with the stack trace of the exception that caused it being passed to your logger, as this more detailed information will be useful should you wish to debug the cause of it. 

What I have so far seems to work fine, apart from the aforementioned issue, though the amount of code for what sounds like such a simple function is far above what I'd hoped, so I'd really appreciate any ideas on how to reduce it. 

Though even this is pretty sloppy, depending on the amount of time you have I'd probably go deeper and write out the standard s and es they're looking for with these tests: , (for all the validation methods), , , etc. 

You do a lot of mapping from parameters to arrays and vice versa, which you could simplify by storing an array of the parameter names and whether or not you want them trimmed, for example: 

Additionally, you have made and into optional parameters by making them auto-initialise to empty arrays, however you cannot have an statement without specifying at least one field and value, therefore instead of making them optional array parameters, you should use type hinting to ensure they are arrays, and then check to make sure that the arguments are correct before you send the query off to the server, something like this: 

You can increase the readability and reduce the number of checks required in your if block by performing each of the four booleans you get at the start, then checking against them instead of performing it over and over as well as separating out the check then reveal logic into its own method, like so: 

I have two pieces of they which do almost the same thing. They both return the most common base class of two types. They differ in two aspect: 

While you are working on it, why not put all code inside a static class, removing the need for one instance and making your code much shorter? 

Which code is more readable? When it comes down to those differences, should the code: a. return . b. return . c. throw an exception? 

Your code looks pretty good except for the . More about that later. Unsafe code has a few things that can make code go faster, like pointers to arrays and arrays on the stack. A pointer to array would make code only faster if the code is iterating through that array. does iterate trough , so yes, this part could become a little bit faster. We are talking about microseconds. You are also iterating through an the table array inside the constructor. So creation of this table could also become a littel bit faster. Personally: I would not use unsafe code in your case. About the static You have a static table, but when you create a new instance of it will recalculate all the (same) values. (Talking about performance loss!) If you have two instances of with different polynomials, then one of your instances will calculate it CRC's wrong, because they both share the same table (since it is static). How to solve this in a faster and safer way? Use a static! (Huh?) Yes, a static but another one: This will store all calculated tables. In your class use a local field: This one will hold the (already) calculated table. If the table was not calculated, it will be calculated and stored inside . You also use this mechanism to store hard coded calcaulated tables, as Jesse suggests. In that case you would assign your hard code table to the dictionary inside a static constructor. Your code could become like this: 

If one of the arguments is , code A returns and code B returns . If one of the arguments is an interface type, code A returns and code B returns . 

This is a revised solution. It is way faster than my original posting. I replace the by a which had a little performance boost (hinted by Jesse). Also, I used recursion with an early out algorithm. 

First, you are mixing statics and non-statics in a confusing way. Please seperate those. A singleton should only be created once. Your class does not have a constructor, so it can be initialized everywhere. Give your class a private constructor. This why, only the class itself can instantiate one. You lock the creation of the GlobalData to prevent problems in a multi threaded environment. Why not put your initialization inside a static constructor or initialize the static field directly, which prevent any problems with multiple threads. This also gets rid of the . The keyword is only required on changing values in a multithreaded environment. Your reference to the will never change after it has been initialized.