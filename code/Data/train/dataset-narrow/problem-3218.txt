Welcome to Stack Exchange! it appears your problem is a simple spelling error. When you login to your rpi with the pi user, you land by default in the home directory, or . And when you type commands on the command line, when you give a file location, such as , if you don't put a in front, it appends that location on to the current directory. So when you type , what it is really trying too edit is , which is not what you want. so redo the command, this time typing 

and make sure you formatted your sd card as FAT32 before you wrote the os to it.(I recommend using a tool like etcher to burn the image.) also, if you have an ethernet cable, you can connect your raspberry pi to your router with an ethernet cable, ssh into and add the file to it over ethernet, then disconnect it and reboot it so it connects to the wifi. 

Welcome to stack exchange! Use the and commands. to give the everyone(the default user) access to the folder, simply change into the directory(folder) the folder is in using the command line(terminal), and type 

I normally use on the raspberry pi to update/install/etc., but I like just plain better because of the better interface and text coloring, etc. I can't seem to find anything on google that says if you shouldn't use apt for raspberry pi, but all the raspberry pi tutorials and things all use . I know on other Linux dists(like ubuntu) is used much more often, so why do all the raspberry pi tutorials use ? 

Yes, that converter should be enough to give you good audio - at least it should make the audio sound like what it's supposed to sound like. Of course, you get what you pay for, and if you wanted stunning hd audio, you would have to invest in really good speakers and an even better converter. But for normal applications, that should be fine. Just note it will not be plug and play - there will be a small amount of setup, which should be pretty easy. 

please reasearch your question before asking on stack exchange. your question could easily be solved with some google searches. On to your question: if you would like to program a very simple 2d game with input from sensors, your best option on the raspi would be to learn and use python, pygame, and GPIO. python is a programming language that is the main, most popular language on raspberry pi. pygame is a library, or module, for python that allows the creation of simple 2d games. GPIO (General Purpose Inputs/Outputs) are the pins built into the raspberry for interfacing with sensors, which you can control with a simple python module. I would recommend first trying out some basic python if you don't know it already. just do a google search for 'basic python tutorial', or something like that. then learn how to use pygame and make your game. finally, learn how to use the RPI.GPIO module, so you can incorporate sensor input into your game. hope this helps!! feel free to ask more questions if you need help. 

then run it by typing .(you have to have a GUI(desktop) running.) Hope this answers your second question, I'm not positive this was the answer your looking for... 

Your image is working, the green led flickering means that the rpi zero is successfully booting... so the problem is probably in your display mode or cable. Try this: 

insert the sd card into a computer open the 'boot' partition on the sd card. this partition will have files like , , ... It will likely be the only partition you can access. open the file . find the line(near the top) that says: 

as @DaveJones said, the command is only for cameras plugged in via the header on the rpi board. for standard usb camera, you can either use opencv or python pygame. your best option, though would be to use the package, which you can install with: 

Cool program, however, that is definitely incorrect syntax. You are mixing up your programming languages(python is very different from other languages). This is one way you could get what you want: 

to clone the repsotory. I don't know which tutorial you used to learn how to use the command line, but when you read an example of a command, you never put a in front. the just stands for the command prompt, you don't actually type it(for example, look at the end of your prompt: it probably looks something like , the is already there.) so retry your command, and this time, just type 

simulate this circuit â€“ Schematic created using CircuitLab Ths would work like this: the positive output from the adapter(which flows through the resistor, which reduces the current) keeps the transistor switched on, which supplies ground(negative voltage) to the GPIO pin. Then, when the power disconnects, the transistor switches off and the 1K pullup resistor takes over and supplies 3.3V to the GPIO pin, which activates the shutdown. I have never tried this(I came up with it just now), but I think it would work. If you have worked with transistors before, this should be pretty easy to implement, if you haven't, it would be a little harder. If you decide to try this, let me know if it works, and I hope this helps you! 

Any electrical switch will work with the raspberry pi, it doesn't matter what it looks like... so yes, those will work just like any other switch. just insert two jumper wires into the terminals at the bottom, screw them tight, then plug the jumper wires into whatever pin your using on your raspberry pi! 

and uncomment it so it reads this will set the HDMI mode to "failsafe" settings. If you can not find that line, just add 

in answer to your second question: You can use to copy an (expanded or not-expanded) filesystem on a 32GB sd card onto another 32GB sd card. just install it with 

First of all, PIR sensors are very sensitive. When you first activate your script, you should add a 30-45 second delay at the beginning to wait for the pir to initialize itself - to "learn" its environment. During that delay, move out of the room or at least move away from the pir sensor(you can also cover the pir sensor up with something) and don't move until the 30-45 seconds is up. When you start your program or plug the pir in, it will most likely activate for a few seconds, then, once it is used to its (non-moving) environment, it should deactivate and start working properly. Second, notice the yellow jumper on the corner of your pir: this sets the trigger mode for the pir. You can read about the different trigger modes here, but I find that my pir works better in "repeatable trigger" mode, which is not the mode you have yours set at. Lastly, make sure you have your delay time set as low as it can go: adjust both potentiometers(the orange knob things, sensitivity and delay) fully counter-clockwise. I hope this helps you figure out your pir. I recommend reading this article to help you understand PIRs. ps. I would change a part of your script to read 

Then, after crontab will save any output(and errors) to the file . Check after boot to see if there are any errors in this file. Also, you could try running (notice the added )to give everything execution permission. Lastly, try adding a delay(to make sure an internet connection is established) and text output(to make sure your script is running) to your script, like this: 

on raspbian, you can access logs by typing , or to save the logs to a file, you can also look in , especially . not sure if this will work on your os, hopefuly it does! also, I think to get more logs on at startup you can install bootlogd with 

to your second question: yes, Flask would be a very good framework for this kind of thing, because you could set it up very simply, something like like this: 

Why don't you create your own bash script that starts retropie in the background and then kills the desktop? create a script, which contains 

I have a variable power source(5V, 6V, 9V, 12V, etc...) with a usb plug which I had powering my pi 3B a few months ago, but one day (a few months ago) I accidently had the power source set on 6V(it might have been 6.5V, I forget). The pi was running normally, but I noticed it was running extra hot. Probably about twenty minutes later, I noticed my mistake, immediately shut the pi down and set the power source back to 5V. Since then, the pi has worked perfectly(as far as I can tell), without any noticeable problems. My question is, 1.) Would this have reduced the longevity and lifespan of my pi?, and 2.) What overvoltage protection parts(if any) does the pi have? Does it have an onboard voltage regulator/monitor? 

Or you could use cron, as @Fabian says, which would schedule the script to run on a certain day: en.wikipedia.org/wiki/Cron $URL$ running cron specific day of the month Hope this helps! 

(please note the hour will be in 24-hour format, so means 1 pm, means 2 pm, etc.) then in your code, you can check every minute to see if and match the hour and minute set for the alarm to go off, and if it does, you can activate your alarm. However, please note that if your raspberry pi is not getting the correct time every startup, you will need to troubleshoot that, which should be pretty easy. You can check by typing on the command line, and if it returns the correct time, your good to go. 

then in alarmClock.html, you could have a link to set the time that went to . I reccomend checking out this tutorial to learn the basics of Flask, and this tutorial to learn how to build a GPIO web interface with it. hope this helps! In response to your comment: answering your first question, if you would not like to use an rtc, you can just get the time from your raspberry pi, which gets it from a ntp(network time protocol) server. to get the time in python you can use the module: 

to the bottom of the file. Also try un-commenting(removing the ) or adding a line that reads . This will force HDMI output. save the file, eject the sd card, and plug it back into the pi. turn the pi on and make sure you have the right input mode slected on your tv. You most likely have multiple HDMI plugs on your tv, so try scrolling through all the input options(by pressing he button) on your tv(ie HDMI1, HDMI2, ANALOG, CABLE, etc.), until you find the one your pi is plugged into. 

right-click in a blank space on the taskbar, or on the clock in the upper right corner. click on slect the tab. select in the list, and then click on to the right. in the box that pops up, click , navigate to your image and choose it, then click , then . 

Here's an explanation of the errors you were getting: permission denied errors are typically caused by one of two reasons: either you don't have permission to run that file(in which case using should fix it) or the file simply cannot be executed. files are not executable, that is, they are simply data files. The second error you got, too many arguments, was caused by running the command with 3 arguments: , , and . This throws an error because requires only one argument: the directory to change into. So your problem is simply not understanding the instructions correctly: After renaming to and putting it in the directory, you need to execute the following commands(seperately): 

Just making sure you know this: BOARD numbering is not the same as GPIO or BCM numbering. you are using BOARD pin 37, which is the same as GPIO/BCM pin 26: Make sure you are connecting the input to the pin labeled GPIO26. Also, You say "i tested input 38,37 and 36, they all seem to be low all the time, nothing changes". What is wrong with that? your using a pulldown, they should be low when your not pressing the pushbutton. It appears that the problem is in your pushbutton, not the GPIO pin. Test to make sure that the pushbutton output goes HIGH when you press it. Ps. is it a typo that you're missing an ending parenthesis at the end of ? 

I have no idea how you could ssh into something with a web app, but if you hosted the web app on your rpi, you wouldn't even need to do that. when you say web app, I assume you mean an app built with HTML and javascript that runs in your browser. if you host(serve) that web app from your rpi, then your controlling computer would connect to the rpi to access the web app, removing the need for an ssh connection. this would be how it works: you have a simple python script running on your raspberry pi which hosts your web app on your lan(local area network). you access the web app on your computer by typing your pi's ip address into the address bar(for example $URL$ or whatever your pi's local ip is. you can find the pi's local ip by typing into the command line and looking at the result that says ) Then, there is a button on the web app that you press to launch your script. since the pi is hosting the web app, it knows when you press that button, and launches the script! This might sound complicated, but it's not really... If you would like to use this approach, I would recommend using the Flask python framework to host your web app. Here's a great tutorial for building some internet-controlled leds, which you could easily change to control a script instead: Here would be your script that you'd run on the pi: contents of /home/pi/webApp/droneServerScript.py: