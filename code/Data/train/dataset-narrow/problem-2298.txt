Here are some references, not a self-contained answer to the question. For self-contained answers, see other people’s answers and comments. Assuming that symbol ℕ in the question denotes the set of nonnegative integers, your problem is called the feasibility version of the change-making problem. Chapter 5 of Martello and Toth [MT90] states that it is NP-complete, attributing the result to Lueker [Lue75]. I have not checked the report [Lue75]. Even if symbol ℕ in the question denotes the set of positive integers, the problem is still NP-complete because the nonnegative version can be easily reduced to the positive version. References [Lue75] G. S. Lueker. Two NP-complete problems in nonnegative integer programming. Report No. 178, Computer Science Laboratory, Princeton University, 1975. [MT90] Silvano Martello and Paolo Toth. Knapsack Problems: Algorithms and Computer Implementations, Wiley, 1990. $URL$ 

I do not know if this satisfies your requirements, but Bill Gasarch’s blog post in July 2010 asks about languages in SPARSE∩NP which are not thought to be in P, giving an example from Ramsey Theory. Any such languages belong to (P/poly)∩NP. Related to this, For any language L∈NP, the language TL={1n: L contains some string of length n} is in TALLY∩NP ⊆ SPARSE∩NP ⊆ (P/poly)∩NP. Depending on the choice of the language L, TL may not have an obvious reason to belong to P. 

Without loss of generality we can assume that |S|=2 in every constraint, because a constraint with |S|>2 is equivalent to the set of constraints where S runs over all pair of elements in the original set S. Therefore, the ℓ0 constraints can be visualized as a graph G with d vertices. Using the graph G, the constraints can be restated as follows: the set of the vertices corresponding to the coordinates i with qi=0 must be a vertex cover of G. Assume that the distance is defined by ℓ22 or some norm. In this case, any point q can be transformed to a point q′ that satisfies for every i, q′i∈{0,pi}, simply by setting $$ q'_i = \begin{cases} p_i, & q_i \ne 0, \\ 0, & q_i = 0, \end{cases} $$ and this transformation never increases the distance from the point p. In particular, if the distance is the sum of coordinate-wise distance (as in the case of the ℓ22 distance), the problem is exactly the same as the minimum-weight vertex cover. 

The problem is NP-complete by a reduction from the set cover problem. Set cover Instance: A finite set U, a family C of subsets of U and k∈ℕ. Question: Is there a cover D of U in C with at most k sets, that is, a subset D of C with |D|≤k such that the union of D is equal to U? Given an instance (U, C, k) of the set cover problem, let U={a1, …, an} and C={S1, …, Sm} (n=|U|, m=|C|) and construct a DAG G with four layers of vertices: 

In a rule Aβ→γβ, β is called the context because it does not change by applying the rule. Applying a rule Aβ→γ changes the β part completely, and therefore β is not a context at all. In this case, β does not have a name. It is nothing more than one of the many substrings of the left-hand side of the rule Aβ→γ. If I have to call β as something, I would just call it “the string obtained by dropping the first symbol from the left-hand side of the rule.” In a comment, you stated that this name does not convey your intent, but it is natural because you did not explain your intent. If β has a special meaning in your paper (or whichever use cases that you have in mind), then you should probably come up with a name which describes that special meaning concisely. 

No. Feige and Verbitsky [FV02] showed that for every n, there is a game G (with finite sets of questions and answers) such that v(G)≤3/4 and v(Gn)≥1/8. Because your formulation generalizes games with finite sets of questions and answers of any size, parallel repetition (of any finitely many times) cannot decrease the value of a game from 3/4 to 1/8. [FV02] Uriel Feige and Oleg Verbitsky. Error reduction by parallel repetition—A negative result. Combinatorica, 22(4):461–478, Oct. 2002. doi:10.1007/s00493-002-0001-0. 

Completely classical case (MIP) If the verifier is classical and there is no prior entanglement among provers, your class contains BPP∪NP and is contained in MA. It is trivial that BPP is a lower bound. To show that the class contains NP, consider the standard two-prover one-round interactive proof system for 3-colorability with perfect completeness and soundness error 1−1/poly. If you want to reduce the soundness error to a constant, combine this with the PCP theorem. As for the upper bound, the following stronger statement holds: MIP with the restriction that the total message length from the verifier to each prover is O(log n) is equal to MA. This is because a strategy of each prover can be described by a string of polynomial length. Interestingly, another upper bound exists when the system has perfect completeness. Namely, multi-prover interactive proof systems with perfect completeness with O(log n)-bit total communication recognize at most PNP[log], and this holds even if we allow unbounded soundness error. To prove this in the case of two provers, let xs be the concatenation of all answers given by the first prover when the concatenation of all questions to the first prover is s, and define yt analogously for the second prover. To be accepted by the verifier with certainty, these variables xs and yt must satisfy certain constraints, and note that this is a 2CSP. There are at most poly(n) choices for tuples (s, t, xs, yt), and for each choice, we can use the NP oracle to test whether the verifier rejects that tuple. Therefore, with the NP oracle, we can list up all the constraints on the variables xs and yt in polynomial time. Finally, we use the NP oracle once more to test whether there is an assignment to these variables which satisfies all the constraints. Although this algorithm uses the NP oracle polynomially many times, all the queries except for the last one can be made in parallel, and therefore this can be converted to a PNP[log] algorithm. The case of more than two provers is analogous. This upper bound implies that although every MA system can be turned to one with perfect completeness, we cannot hope for a multi-prover interactive proof system with perfect completeness with O(log n)-bit communication unless MA⊆PNP[log]. I do not know how unlikely the inclusion MA⊆PNP[log] is, but I just note that Complexity Zoology states that there is an oracle relative to which BPP⊈PNP (and therefore clearly MA⊈PNP[log]). (In the case of single prover, Theorem 2 of Goldreich and Håstad [GH98] implies that IP with the total message length O(log n) bits is equal to BPP.) Added. A necessary and sufficient characterization is as follows. To explain this characterization, we need a variant of the notion of Karp reducibility (polynomial-time many-one reducibility). For two decision problems A and B, let’s say that A is FPBPP-reducible to B (I know, this is an awful name) when there is a deterministic polynomial-time Turing machine M with access to the BPP oracle which maps yes-instances to yes-instances and no-instances to no-instances, where we allow “non-smart” oracle access (meaning that M can make a query to the BPP oracle about an instance which does not satisfy the promise of the BPP problem, in which case then oracle returns yes or no arbitrarily). Then it can be proved that the following conditions on a problem A are equivalent. (i) A has a multi-prover interactive proof system with O(log n)-bit communication and two-sided bounded error. (ii) A has a two-prover one-round interactive proof system with O(log n)-bit communication, exponentially small completeness error, and constant soundness error. (iii) A is FPBPP-reducible to a problem in NP. (Proof idea: Implication (ii)⇒(i) is trivial. Implication (i)⇒(iii) can be obtained in a similar way to the above proof in the case of one-sided error. Implication (iii)⇒(ii) follows from the PCP theorem because the class of problems satisfying condition (ii) is closed under FPBPP-reducibility.) Classical verifier with entangled provers (MIP*) Next consider the case with a classical verifier and entangled provers. In this case, the class with bounded error again contains BPP∪NP. Kempe, Kobayashi, Matsumoto, Toner, and Vidick [KKMTV11] shows that every problem in NP has a three-prover one-round interactive proof system with perfect completeness and soundness error 1−1/poly where the total length of messages is O(log n) bits, and the soundness holds against entangled provers. Therefore, MIP* with total message length O(log n) bits and bounded error contains NP. A later result by Ito, Kobayashi, and Matsumoto [IKM09] (shameless plug) reduces the number of provers from three to two. The case of constant soundness is open at the top of my knowledge. It is not known whether MIP* with total message length O(log n) bits is contained in the class R of decidable problems or not, and this question is equivalent to whether MIP*⊆R (another open problem) by the padding argument. References [GH98] Oded Goldreich and Johan Håstad. On the complexity of interactive proofs with bounded communication. Information Processing Letters, 67(4):205–214, Aug. 1998. $URL$ [IKM09] Tsuyoshi Ito, Hirotada Kobayashi, and Keiji Matsumoto. Oracularization and two-prover one-round interactive proofs against nonlocal strategies. Proceedings: Twenty-Fourth Annual IEEE Conference on Computational Complexity (CCC 2009), 217–228, July 2009. $URL$ [KKMTV11] Julia Kempe, Hirotada Kobayashi, Keiji Matsumoto, Ben Toner, and Thomas Vidick. Entangled games are hard to approximate. SIAM Journal on Computing, 40(3):848–877, 2011. $URL$ 

The construction is optimal in the sense that $\binom{2n}{n}+1 \leadsto n$ cannot hold. Indeed, it is easy to see that c-to-k coloring matrix exists if and only if there are c subsets A1, …, Ac of the set {1, …, k} such that no distinct i and j satisfy Ai ⊆ Aj. (For the “only if” direction, take Ai = R(M, i) for a c-to-k coloring matrix M. For the “if” direction, set mij ∈ Ai ∖ Aj.) A family of sets none of which contains another is called a Sperner family, and it is Sperner’s theorem that the maximum number of sets in a Sperner family on the universe of size k is $\binom{k}{\lfloor k/2\rfloor}$. This implies that $c \leadsto k \iff c \le \binom{k}{\lfloor k/2\rfloor}$. 

According to Information System on Graph Classes and their Inclusions, these graphs are studied under the name “geodetic graphs.” 

This is a partial solution. Such a matrix exists if n is a prime power. Let F be the finite field of order n. We construct an n×n(n−1) matrix whose rows are labeled by F, whose columns are labeled by (F∖{0})×F, and whose entries are in F as follows: the i-th row of the column labeled (a, b) is given by ai+b. In words, each column corresponds to a degree-one polynomial in F. Then each column contains each element of F exactly once, and no two columns have equal entries in more than one row because the values of two distinct degree-one polynomials can coincide at at most one point. (If you want a matrix whose entries are in {1,…,n} instead of in F, replace the elements of F with {1,…,n} arbitrarily.) 

I answer the learning-related aspects of the question. This problem seems to be called “DFA learning” in the literature. Gold [Gol78] showed that it is NP-complete to decide, given k∈ℕ and two finite sets P and N of strings, whether there exists a deterministic finite-state automaton (DFA) with at most k states which accepts every string in P and none of the strings in N. The paper [PH01] seems to discuss problems related to this motivation (there may be many more; this just came up when I tried to find relevant papers with Google). References [Gol78] E Mark Gold. Complexity of automaton identification from given data. Information and Control, 37(3):302–320, June 1978. $URL$ [PH01] Rajesh Parekh and Vasant Honavar. Learning DFA from simple examples. Machine Learning, 44(1–2):9–35, July 2001. $URL$ $URL$ 

I think that whether p>0 can be decided in polynomial time. The problem in question can be easily cast as the edge-disjoint paths problem, where the underlying graph is a planar graph consisting of m+1 layers each of which contains n vertices, plus m degree-4 vertices to represent the possible adjacent swaps. Note that the planarity of this graph follows from the fact that we allow only adjacent swaps. If I am not mistaken, this falls in the special case of the edge-disjoint paths problem solved by Okamura and Seymour [OS81]. In addition, Wagner and Weihe [WW95] give a linear-time algorithm for this case. See also Goemans’ lecture notes [Goe12], which gives a nice exposition of the Okamura–Seymour theorem and the Wagner–Weihe algorithm. References [Goe12] Michel X. Goemans. Lecture notes, 18.438 Advanced Combinatorial Optimization, Lecture 23. Massachusetts Institute of Technology, Spring 2012. $URL$ [OS81] Haruko Okamura and Paul D. Seymour. Multicommodity flows in planar graphs. Journal of Combinatorial Theory, Series B, 31(1):75–81, August 1981. $URL$ [WW95] Dorothea Wagner and Karsten Weihe. A linear-time algorithm for edge-disjoint paths in planar graphs. Combinatorica, 15(1):135–150, March 1995. $URL$ 

Theorem 5.14 of Khanna, Sudan, Trevisan and Williamson [KSTW01] gives a dichotomy theorem for the gap versions with perfect completeness for the boolean MaxCSP problems. [KSTW01] Sanjeev Khanna, Madhu Sudan, Luca Trevisan and David P. Williamson. The approximability of constrant satisfaction problems. SIAM Journal on Computing, 30(6):1863–1920, 2001. $URL$ 

But I do not know if this is a common practice or not. Also I do not know if it is suitable for teaching. The problem is that we sometimes want to define Ω() by liminf instead (as you did in the first definition). For example, when we say “The probability of error of this randomized algorithm is 2−Ω(n),” we do not mean that the error probability is exponentially small merely for infinitely many n! 

Added: After reading Per’s comments, I think that this answer is just a (poor) variation of the Tillich-Zemor hashing algorithm which is already mentioned in the question. I withdraw this answer, but I leave it hoping that it (and the comments) may be informative for some readers. 

Although I have not checked details, it seems that any spherical 2-design gives a solution attaining this lower bound. Incorrect connection to SIC-POVMs in quantum information In earlier revisions, I stated: 

I am not familiar with the notion of universal predictor, and I did not follow everything you wrote; in particular, I did not follow your sketch of the proof of existence of a universal predictor in E. But assuming that there exists a universal open predictor that belongs to E, the answer to your question is positive. And I am afraid that you will probably be disappointed by the reason. Edit in revision 2: I changed the construction in response to the added restriction in revision 2 of the question, but the general idea is the same: mix a hard language into a universal open predictor in such a way that the definition of universal open predictor does not notice the difference. Let T = {0|x|11x: x∈{0,1}*}. Note that every word in T has an even length. An important property of T is that no word in T is a proper prefix of another word in T. This implies that if the symmetric difference between two languages V and W is contained in T, then for every infinite sequence s∈{0,1}ω, there is at most one n such that χV(s<2n)≠χW(s<2n), and in particular V is a universal open predictor if and only if W is a universal open predictor. It is easy to see that there exists an EXPSPACE-complete language which is a subset of T. Let L be such a language. Let V be a universal open predictor that belongs to E, and hence also to EXPSPACE. Define a language W = L ∪ (V∖T). Because V is a universal open predictor and the symmetric difference between V and W is contained in T, W is also a universal open predictor. It is easy to see that W is EXPSPACE-complete, and therefore PW = NPW = EXPSPACE. This concludes that W satisfies the desired property. 

(This is a slightly more detailed version of my earlier comment, in response to the asker’s request by email.) Since ΔkP=PΣk−1P by definition, it should be clear that the following problem is ΔkP-complete: fix some Σk−1-complete problem L. (For example, L can be the special case of QBF where there are k−1 groups of consecutive quantifiers of the same kind and the first quantifier is existential (∃).) Then given a Turing machine M with the L oracle, a string x and a tally string 1t, decide whether M accepts the input x in time at most t. (A tally string simply means a string on the unary alphabet, that is, a string of the form 1n.) I would not mind calling this problem a “canonical” ΔkP-complete problem, but this may not be what you are looking for. In my earlier comment, I removed the input string x and assumed it was always the empty string. This variant is also ΔkP-complete because you can hardwire the input string into a Turing machine.