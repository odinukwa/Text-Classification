This is a project I've been working on and released on GitHub here. The purpose of the module is to provide sessions, which can be used in situations where access to sensitive data needs to be restricted. A session can be implemented alongside your normal code flow, or by subclassing . 

client.py Disclaimer: I don't know Kivy, so I can't tell if you're following Kivy best practices. General 

I don't get the point of . It handles the case where the current working directory has been changed, and it's called for each comic to download. That seems pretty pointless to me. Instead, I would only create the directory once, in : 

Preamble What you're looking for is a way to obfuscate your code, not a way to encrypt it. The issue lies in the fact that the interpreter needs to have access to the unencrypted source code. This means that you have to store the key somewhere and decrypt the file before runtime, which defeats the purpose of encrypting the source code in the first place. It's almost impossible to properly protect Python code and there's lots of decompilers out there. 

Private attributes It's good that you marked as private. Why not do the same for and the helper methods? This clearly tells other developers: 'I'm not part of the API. Don't rely on me for backwards compatibility.'. (Added bonus: you don't have to document private functions). 

References 1 PEP-8: Indentation 2 PEP-8: Function and variable names 3 PEP-8: String Quotes 4 PEP-8: Maximum Line Length 

I believe my code runs in \$O(n)\$ complexity and running it on my Android phone on takes about 9 seconds: 

Performance I don't currently have the time to do a full review on performance, but I suggest you run a profiler to see where you can optimize. The problem is very likely to be I/O-bound, but the debugging can have a noticable performance hit. If you want to squeeze a little bit of extra speed out of , you can use a object, which: 

This eliminates the need for a 'key' procedure, because the key is passed as an argument to the functions. In case you haven't covered functions yet, be sure to return here later and improve your code with functions. This may not be your biggest concern right now, but is not cryptographically secure, since it uses the Mersenne Twister as random number generator. The Python 3.6 release introduced to the standard library. If you want to stick with , try . You assume that user input is well-formed, but this doesn't necessarily have to be the case. For example, may break if is not numerical. By the EAFP (Easier to Ask for Forgiveness than for Permission) principle, you should wrap it in a block: 

Some very nice code, overall. There's some minor points I think could be improved, but your general implementation is good. Nitpicks I'd like to point out some small 'issues' regarding best-practice and code style: 

However, neither of these apply here. Using global, non-const variables makes your code harder to debug, and is a burden for anyone reading / updating it in the future. You can avoid global state here easily by passing variables as parameters. In my opinion, is a bit overkill. I'd make it a constant instead (). The loop in can be improved: 

As a response to your concern about the way you're declaring variables, it's generally a better idea to do this at the top of the file (but below the imports). In your function, you could- well, I'll just rewrite it: 

Interesting question. We can solve the problem (at least partially) by changing the order of the statements. I'm assuming you'll want to add more conditions in the first clause, which means we can 'fall through' early: 

Learning Python 3 is not hard if you already know Python 2. Some things have changed only a little, like being a function in Python 3, while others have been rehauled entirely, like how strings are handled. These differences are easy to pick up on, however. If you don't know where to start, this Python Wiki article is a good read. 

Rewrite Putting everything together (I've changed names, reordered some functionality and added comments explaining certain changes): 

The error message is a bit vague. Why is the value incorrect? Maybe something like 'Error: expected a number. Try again.' would fit better. 

... this works because a container's method returns if it is not empty, and otherwise. When catching an exception, if you don't need access to the exception instance itself, you should leave out the part. If you do need access to the exception instance, most people use: 

In , you don't have to use the keyword to refer to . If the Python interpreter can't find the name locally, it will then search for it globally. If it still can't find it, a is raised. The only two reasons to use are: 

... which returns if the container is empty, and otherwise. This also works for strings, for example: 

You don't need the clause here, since the clause stops the program if executed. In fact, you can simply return there. Putting this all together: 

really confuses me. Type checking is the way to go for readability. On top of that, if you need to accept new types later, all you need to do is add an statement. In my opinion, if you absolutely want the brevity of , accepting multiple types of arguments is fine, and so is returning multiple types (as is the case with many builtin and standard library functions). It is important that you mention this in the documentation, though. 

While Python 3.6 offers a secrets module, I am unsure about Python 2.x. Please, however, don't make the mistake of using random for generating passwords. Right now, it seems that your password generator is quite weak. The password entropy remains low, which means you must resort to using and asking the user to provide enough entropy. 

Basically, any method, property, or attribute that isn't useful for end users, should be private. OOP could be a . A static method does not receive an implicit first argument. You should make a method static if it doesn't interact with the instance of the class, but is still strongly related to the class. I'd then rename it to : 

You use two spaces for indentation. PEP-8 recommends 4 spaces (most code editors have the option to automatically convert tabs to spaces, which I highly recommend). While on the subject, PEP-8 also recommends two blank lines between top-level functions. In general, the use of globals is discouraged. There are some exceptions: 

First things first, I really like your idea and I think with a couple of small changes it would be a really nice utility to use! To start out with, here's a couple of suggestions regarding code style: 

Simplifying game logic To shorten the length of the main game logic, you could put the second part in a boolean variable: 

References 1 PEP-8: Imports 2 PEP-8: Naming Conventions: Descriptive: Naming Styles 3 PEP-8: Blank Lines 4 PEP-8: Other Recommendations 

Try to comply with PEP-8. PEP-8 is the name of the official Python style guide. Complying with it makes your code easier to read. Ultimately, developers can more easily collaborate on a project. 

I don't think speed should be your primary concern in this case. The only thing I could come up with as an improvement is to change : 

Alternatively: using If you run the rewritten code, you may notice the program takes a couple of seconds to shutdown after (reportedly) having downloaded all images. This is because the last thread started doesn't necessarily end last (that's the whole point of threads, after all!). To avoid this, and to get rid of some of the boilerplate code, we can use and . I've created a GitHub gist here which uses together with , which reuses the underlying TCP connection, potentially resulting in even better performance. 

I know you used the windows-tag, but you might reach a broader audience by making this platform-independent. and only work on Windows platforms. If I run the program on MacOS, I get a . Even if I could patch that, the call would print out an error message instead of clearing the screen. There's three partially satisfying solutions: 

Don't use for error messages. If you want to warn the caller they passed an illegal value, raise a : 

If you're starting out with Python right now, learn Python 3. There's a couple of reasons to do this: 

In , you're shadowing the built-in . To avoid shadowing a variable, by convention, you should add a trailing underscore (as in ). If you find that ugly, you can also spell it out, or abbreviate further: or (the former is more desirable). You don't need parentheses around -statements and -statements. The idiomatic way of checking if a container is empty in Python is to directly use it in an -statement, in this fashion: 

In my opinion, no, this isn't any better than just making use of the tools that provides out of the box and a class is overkill. operates in a very similar way, so it should be just as easy to call it straight-up: 

Use whitespace more efficiently, especially in your palindrome() function. Instead of converting n to str() in your palindrome() function, use numbers.append(str(x)). This way you can reuse palindrome() and have it take n as a string by default (or use an assertion / try: except: statement). Rewritten: 

Ultimately, it's up to you. PEP-8 also lists some examples of acceptable styles.1 Use for function and variable names. Only use for constants.2 Don't mix single and double quotes. I prefer double quotes, because they're less likely to cause clashes with quotation marks in flowing text.3 Limit the line length to 79 characters.4 

Using Phew! Now for the actual challenge: improving performance. You don't need asynchronous , threads will do just fine here! By wrapping the relevant code into a function, we can spawn any amount of threads to do the work: 

According to the Wikipedia article on IPv6 addresses, there are alternative ways of representing IPv6 addresses that you are not taking into account with this approach: 

Good job, this is some very clean code. There's some small things you could improve, but for the most part this is readable and to the point. I'll be going over some smaller issues first, and then cover your main question. 

This makes the code look slightly cleaner and allows for other early-return clauses. It's hard to tell what the context of this piece of code is, but another solution may be to call helper functions, e.g. 

Very clean code indeed, there's not much to be said here. PEP8 I'm sure you've been lectured on this before, but there's an official style guide for Python called PEP8. It states that module-level class definitions should be separated by two lines: 

main() function and input / output In the above example code, you may have noticed I got rid of the program's output. The reason I did this is because in general, it's easier to keep most in- / output in one part of the code (main()). This way, it's easier to use ~switch-case~ statements and to efficiently evaluate user input. Bad code: 

Some of your code is right on the edge of the 79 characters border (one line is 116 characters long). Look into shortening your lines to improve readability. 

It can be a pain to do this every time you want an integer, so you may wrap it in a function for future use: 

Note how and are not at all involved in the 'decryption' process. Strange, don't you think? I think it goes without saying that this is insecure.