If $G$ has an isolated node, the permanent will be equal to 0. If you know that permanent is 0, it tells extremely little about the number of vertex covers in $G$. You can take any graph $G$ and construct $G'$ by adding an isolated node; the number of vertex covers in $G'$ is exactly 2 times the number of vertex covers in $G$ – which can be virtually anything – while the permanent of $G'$ is 0. Conversely, if you know the number of vertex covers, you can't tell if the permanent is 0 or not. For example, you can take any graph $G$ with a non-zero permanent and construct two new graphs: $G_1$ is $G$ + a triangle, and $G_2$ is $G$ + two isolated nodes. Both $G_1$ and $G_2$ have exactly 4 times as many vertex covers as $G$. However, $G_1$ will have a non-zero permanent while $G_2$ will have permanent 0. 

Put otherwise, the task is to find a labelling $x'$ such that $x'$ is as close to $x$ as possible (minimise the number of elements that differ) and the labelled trees $(T,x')$ and $(T,y)$ are isomorphic. Variant 2 The same as above, but only leaf nodes can have non-zero labels. 

Suppose there are $n$ bins each having $k$ objects. Assume that capacity of each bin is also $k$. Now we want to rearrange the objects such that each bin contains $k$ objects but this time if $x,y$ belong to the same bin, then $x,y$ were in different bins in the original arrangement. Questions: 

I know that it is possible to calculate the minimum vertex cover of a bipartite graph, However, i want that the minimum vertex cover which contains vertices from only one partite set, which will be given as input, Any ideas how to design the algorithm ? Note that the answer to the above question might contain more vertex than the minimum vertex cover but all those sets would contain vertices from both partite ! 

It remains NP complete even if the properties are hereditary. Now clearly a solution of the above problem for a graph also provides solution for the induced subgraphs. But upon taking union of graphs of same family as G might not be solved using that solution. For example partitioning general graphs in disjoint unit interval graphs is NP complete but upon taking union of all possible edges (making the graph complete) solves the problem trivially. 

While it is not a typical core-TCS journal, it seems that ACM Transactions on Database Systems sets a very good example: 

Motivation: A coauthor edits a manuscript and I would like to see a clear summary of the edits. All "diff"-like tools tend to be useless if you are both moving text around (e.g., re-organising the structure) and doing local edits. Is it really so hard to get it right? 

However, something to keep in mind with any approach. As you can't identify an arbitrary set of missing events with 32-bit labels, then you might have different kinds of weaker goals like these: 

I am not sure if anyone has yet explained why the magical number seems to be exactly 1:2 and not, for example, 1:1.1 or 1:20. One reason is that in many typical cases almost half of the digitised data is noise, and noise (by definition) cannot be compressed. I did a very simple experiment: 

Motivation: a boring metro trip, and a poster that shows the "locations" of the stations at the resolution of one minute of travelling time. Here we are minimising the error that people make if they use the poster to look up the travelling time between stations $i$ and $j$, averaging over all pairs $i<j$. 

You can use the following idea. Maintain a graph,say $G^{'}$ similar to the graph that you are constructing,(say $G$) but the edges being reveresed and an extra dummy root node with a directed edge from that to last inserted node. Now when a new node comes,say $f$ in do a Breadth first search from the dummy root on $G^{'}$. Whenever a search node, say $v$ is found during BFS on which $f$ is dependent create an edge in $G$ and update $G^{'}$ accordingly. The idea is similar to you but if implemented properly runs in linear time( in number of nodes). Hope it helps. 

Does there always exist such a rearrangements? why ? What is the official name of this problem in the literature ? 

I think only those vertices corresponding to triangles sharing an edge with boundary or holes of the polygon will be of degree less than 3. Now the number of triangles in the triangulation is fixed. So you can always get the exact ratio of the number of degree 3 vertices for a polygon. If the polygon has $k$ vertices and $l$ holes vertices and the number of triangles in the total triangulation is $N$ then the upper bound should be $(N-K-l)/N$. 

Edit: Now a natural question is whether there is an approximation algorithm – for example, can one always find a feasible solution $s$ that is within a constant factor of the largest feasible solution. However, this does not seem to be the case. It seems that it is actually NP-hard to find any non-trivial solution (i.e., a solution $s \ne \emptyset$), at least for certain values of $p$. The construction is a bit messy, though, but I can try to work out the details if needed. Anyhow, it seems that to get anything positive (with provable performance guarantees), you need to relax your constraints a bit. 

Well, certainly I can define it, but I would prefer to draw an illustration that defines the structure of $T$. I would prefer to keep the illustration as compact as possible, yet unambiguous (that is, the illustration alone is enough to define $T$). I would rather not name the subtrees $X_i$, $A$, $B$, ...; they could be just some anonymous nodes (?) in the illustration. Sure, I could come up with my own notation for such illustrations, but when I tried to depict recursion I realised that using a well-known standard notation might be a better idea. Hence the question: 

Consider the following language for an alphabet $\Sigma = \{a,b,c\}$: $$\{a,b\}^* \cdot b \cdot \{a,b\}^n \cdot c$$ In words, this is the set of words that contain precisely one $c$ and for which $n+1$ characters before the $c$, a letter $b$ can be found. The language can be seen to be accepted by a 2-way DFA of size $n+c$ for some constant $c$, but we need more than $2^n$ states in the DFA in order to keep track of the last $n$ characters from the prefix input stream $\{a,b\}$. The 2-DFA would start by cycling in the initial state and would reverse direction upon reading a $c$. Then, it waits $n$ steps (by following a chain of $n$ transitions) and finally checks that a $b$ is read. While this is not precisely a formal proof, it should be no problem to make one from it. Note that the dual language can be shown to need more than $2^n$ states for every NFA, whereas the 2-DFA stays to be of size $n+c$ (possibly +1). 

The algorithm should minimize the number of calls to the oracle $f$. It can be assumed that the number of direct successors or predecessors of some element is constant and "small". 

The new version of the problem is indeed NP-hard. Reduction from set cover: Subsets are $S_1, S_2, ..., S_m$ and the universe is $U = \{ a_1, a_2, ..., a_n \}$. Construct a node-weighted directed graph $(N,S,c)$ as follows: 

Now, is this doable? It might be tempting to use a counting argument (there are more states in $W$ than in $C$) and say that it is impossible. But this is not necessarily the case! Let's assume that our cellular automaton is totalistic. Then what we can do is we simply let $C$ be the right half of our grid $W$, and let the initial configuration of $C$ be a mirror image of $W \setminus C$, so that everything is symmetric. That's it. Start the automaton and see what happens. The current state of $W$ will always be equal to the state of $C$ + its mirror image. That is, merely inspecting $C$ is enough to tell what is the state of whole $W$. (Of course here the computer interacts with $W$, and affects the future state of $W \setminus C$. But that's what happens in the real world, too.) 

For a chordal graph $G$ there is a clique tree such that its vertices corresponds to maximal cliques of $G$ and there is a edge between two vertices iff the intersection of the corresponding cliques are also their minimal vertex separator and for each vertex in the graph the cliques containing it, induces a subtree. Now my questions are:- 

Suppose there is a set of convex polygons ($\mathbb{P}$) on the plane. For each convex polygon $P_i$ there is one "facility" $f_i$ placed on the boundary of $P_i$. The distance between a point $p \in \mathbb{R}^2\setminus \mathbb{P}$ and a facility $f_i$ is the distance of the shortest path between $p$ and $f_i$ avoiding interiors of the convex polygons. My question is: Is there a known algorithm to compute the voronoi diagram ($\mathbb{V}$) in such settings ? I found something similar in Aronov's paper which deals with geodesic voronoi diagrams inside a simple polygon. Since, the paper does not considers holes inside the polygon it does not solve my problem. Edit: The problem I stated can also be formulated as follows: Consider a large rectangle ($R$) containing $\mathbb{P}$ as convex holes inside it. The point sites are placed on the boundary of the holes. Now the geodesic voronoi diagram would be same as $\mathbb{V}$ bounded by $R$.