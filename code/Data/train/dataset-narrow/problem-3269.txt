I agree Millways saying in chat that it should be PNP transistor input module： I guess the circuit is something like below: 

I found that KY-019 has a trigger level of 2.5V and 0.1mA. This signal is amplified by the NPN transistor to 50mA, high enough to engerize the coil to activate the relay. 

# Introduction # The OP would like to use Rpi to safely control a bank of 5 Sparkfun's Beefcake relay module. He had a problem because Rpi GPIO logic level is 3.3V, but his relay uses 5V logic control. He wants to know how to modify Rpi to get around the logical level disparity problem. His choices including the following: using the transistor BC5468 to drive the relay coil; getting an opto isolation relay and drive it using ULN2803; using a source driver such as UDN2981, ... After investigation, I now suggest a couple of solutions, with their respective pros and cons. The OP can choose a solution after trading off risk, reliability, cost etc. # Contents # Solution 1 - Modifying NPN transistor's biasing resistor Solution 2 - Using UDN2981 to shift up Rpi's 3.3V GPIO signal to 5V Solution 3 - Using 74HC03 and 74HC04 to shift up Rpi's 3.3V GPIO signal to 5V Solution 4 - Using 74HCT125 to do logical level convering Solution 5 - Using TXS0102 to do logical level converting Soution 6 - Using 2N2222 to do logical level converting Solution 7 - Using 2N7000 to do logical level converting FAQ1 - How to power Rpi and relay module and tie grounds together FAQ2 - How to avoid floating input problem FAQ3 - My relay is always on, whether High or Low input, is it because the Rpi Low signal is not low enough? FAQ3 - My Rpi GPIO Low signal cannot turn relay off, but setting GPIO as input would do. Will I hurt my Rpi if I do so? Hardware Troubleshooting Suggestion Software Troubleshooting Suggestion References # Solution 1. Modifying NPN transistor biasing to make it 3.3V compatible # The are two general types of solutions: (1) modify the module's 5V logic level input circuit to adapt to 3.3V signals, (2) use a 3.3V to 5V logical level converter to shift up Rpi's 3.3V signals to 5V. I now start with (1). Investigation The Sparkfun's Beefcake relay module has an NPN transistor 2N3904 (Q2) driving the coil (U1). It is designed for Arduino's 5V logic signals. 

I checked your photos and found the optocoupler 817C, and the reistors 1k and 512R. So I guess your connection is something like below. 

I first googled to find that the rpi I2C pins have built in pull up 1k8 resistors. Using a multimeter, I found that at boot up the SCL pin read 3v3, meaning that by default it was pulled up. I connected a 1k2 from SCL pin to ground, thus forming a 1k8 + 1k2 voltage divider. The meter read 1.3v. 

I am assuming OP's relay module is similar to this below. sainsmart 8ch 5-v relay board And the photocoupler similar to below. el354 photocoupler Below is a summary of the photocouopler. 

Your pictures don't labelled the connections. Perhaps you can let us know the wires connected to the relay modules. 

Perhaps you can connect all three together: HX711, HS110, and Alexa! TP-Link Kasa Smart Wi-Fi Plug with Energy Monitoring HS110 (USD30) $URL$ Kasa app smartphone, Scheduling (automatically power on off) , Energy Monitoring (real-time and historical power consumption report), Amazon Alexa or Google Assistant compatible 

# Solution 3 - Using 74HC03 and 74HC04 to shift up RPi's 3.3V GPIO signal # Using UDN2981 to drive a relay module is a big over kill, because they are designed with built in fly back diodes to directly energize relay. The UDN2981 is not common and not for beginners to experiment. For beginners, the very common and cheap logic gate ICs, 74HC03 Quad NAND gates, and HC04 Hex Inverters can do the same job as UDN2981, shifiting up 3.3V logic signals. I have successfully verified HC03 and HC04 shifting up 3.3V logic to 5V and found it working for both transistor input and opto isolated high level trigger modules. 

I have also connected all the grounds together, just check out if there is any bad effects. Measuring Relay Switch Noise/Interference After skimming through a couple of EE SE and electro-tech-online.com forum discussions on relay noise, I have the feeling that relay noise is a complicated thing. The hardware guys suspect the noise feeds through the AC line. I have been playing only 5V/12V motors, and I dare not to play with big 220VAC motors for now. So I will start with light DC 1A loading, to see if I can find any spiking noise. 

B. SainSmart 8-Channel 5V Relay Module Rpi Wiring Diagram C. SainSmart 8-Channel 5V Relay Module Schematic and Spec 

I found a relay module similar to Sainsmart, and has optocoupler, and with a limiting resistor of 1K. In other words, input drive current is only 4~5 mA. So I can use rpi to directly control this module. 

Roller Ball Tilt Switch Perhaps you can make use of the SW-520D basic tilt switch which detects orientation. Inside the can is a ball that make contact with the pins when the case is upright. Tilt the case over and the balls don’t touch, thus not making a connection. You need to make some sort of lever with one end connected to the tile sensor and another end to a ball which floats and tilts the lever when the water level reaches a particular level. Magnetic Tilt Switch I never heard of this switch mentioned in the comment. So I googled to know more. Float Level Switches & Sensors with Magnetic Reed Switches are accurate to 1/8 inch. When the liquid level rises or falls, a stationary sensor detects the change of the magnetic field of the floating magnet and the accuracy can be as small as 1/8 inch, ... Mercury Tilt Switch I read the Arduino Mercury Tilt Switch Tutorial and found mercury switch is very similar to roller ball switch. The disadvantages I know about mercury switch is that mercury is toxic and the glass container is not that strong comparing to the roller ball metal container. 

UDN2981 controlling High trigger, opto-isolated relay modules The OP also considered using opto isolated relay modules because they are safer. I have successfully used the same UDN2981 to control 4 High level trigger, opto isolated relay modules (MK055). 

I. Mechanical Relay Primer J. Relay Arc Suppression For AC powered applications, you can put a Metal Oxide Varistor (MOV) across the load terminals of the relay in order to protect it from voltage spikes. An MOV will not remove the entire arc, but it will be helpful in circuits up to several hundred volts. You can buy an MOV from any electronics distributor, like this MOV from Digikey. For low-voltage AC applications, a bi-directional transient voltage suppression diode ("transil diode") that is rated for higher than the AC voltage of the circuit can be placed across the relay terminals in order to protect it from voltage spikes. You can buy one from any electronics distributor, like this Transil Diode from Digikey. K. Sain Smart Story L. Sain Smart relay manuals M. RLTS80 Transformer 

A not so stupid idea is to use a cheap HX711 based break out module from eBay, AdaFruit, or Sparkfun. HX711 24-Bit Analog-to-Digital Converter (ADC) for Weigh Scales $URL$ file:///C:/Users/user/Downloads/HX711-Avia%20semiconductor.pdf $URL$ You can also get a 1kg to 5kg load cell, kit from AliBaBa or TaoBao. (search keywords = 压力传感器, 压力传感器套装, 称重传感器, 电子秤模块) $URL$ $URL$ The most interesting is the Alibaba's USD20, made in Shenzhen Robotlinking AE064: Newest DIY 5kg Precision Jewelry Electronic Scale Suite With HX711 + 1602 IIC + Uno R3 + Dupont cables $URL$ 

N. Low Electromagnetic Noise Emission Solid State Relay news Two kinds of emissions: Radiated emissions - low with standard solid state relays Conducted emission noise: with standard Solid State Relays, conducted emission noise is emitted by thyristors and at 150KHz you reach the highest level. Standard low noise SSR on the market are limited to low switching current of 5A for domestic applications or to low inductive loads, while lots of pure resistive loads applications have high emission noise. EMC stands for Electromagnetic Compatibility. O. AC-DC Power Supplies - Using Wall Warts Page 5 of 9 - Output Voltage vs Percentage Load (Switching Supplies) P. Varistor ZOV10D471K Datasheet Q. 20mA coil operating current relays R. Circuit Design of 2N2222 Driving a Relay .END 

Q.E.D. Google says that some gpio pins have 50k pull up, and some pins no pull up resistor at all, and that at boot time, some pins are pulled up by default, some pulled down. You may like to test other pins. 

MCP3208 mux ADC can handle 8 inputs. You can use HC138 demux to select 1 of 8 MCP3208s. So using one rpi, you can sense 64 inputs. Actually you can easily use just 3 gpio pins to select up to 8 HC138. In other words, 1 rpi can select 1 of 8 HC138, each of which selects 1 of 8 MCP3208, each of which selects 1 of 8 channels, each for one sensor. Total = 1 x 8 x 8 x 8 = 512 sensors! 

Actually UDN2981 can be used to control any kind of High trigger modules, no matter NPN transistor or opto isolated types. However, for Low trigger modules, whether PNP transistor or opto isolated, source driver UDN2981 does not work, ULN2803 or other sink driver should be used. ULN2803 controlling Low trigger PNP transistor input or opto isolated relay modules I successfully verified ULN2083 sink driver can control 4 Low trigger opto isolated relay modules. I first tested manually blinking 4 LEDs, then used the same python function above to test the 4 modules. The results was also good. 

Up shifter using 2N2222 And if you want to entertain only one relay module, then the 4 shifters in 1 chip HCT125/HC04 is a waste or overkill. Then you may consider single transistors (such as BJT NPN 2N2222, MosFet 2N7000). I tried 2N2222 the other day and found it OK. 

I am interested to know more. But don't expect too much, because I have never used MCP4725 DAC before. Neither have I used any induction motor. I once used RPi python to play with another I2C DAC called pcf8591 which is easier because there is no EEPROM with it. I am a hobbyist programmer with about 200 hours Arduino C++ DIY project experience, so I can read your C++ program, but I found it a bit complicated. I think the first step for me is to read the datasheet and understand the operation. So I downloaded the datasheet and skimmed through it. I am now making a testing plan and you may like to give me any advice on this plan. First I would like to tell you my general principles and approaches. 

I have a similar NPN transistor module KY019 which can be driven by Rpi's 3.3V signals. So I checked out its input signal requirements to find why KY019 can entertain 3.3V signals but Beecake can't. 

Then I connected 4 Rpi 3.3V GPIO pins directly to the 4 UDN2981 channel inputs. I used the following python function to toggle 4 relay modules at 25 cps. 

Disconnect Rpi GPIO from input S. Use a jumper wire to connect input S to 5V, relay should turn on, with an audible click. 

You problem can be explained voltage divider rule. I did the following quick and dirty test to show how the pull up resistor confuses you. My test is on the I2C SCL pin.