The GameLoop is ran within loop that is configured to run at 60FPS. You can see this in this code block here: 

due to the fact I pass in a pointer to converted integer. However if I don't pass in a pointer I get this error: error C2664: 'SDL_Surface *TTF_RenderGlyph_Blended(TTF_Font *,Uint16,SDL_Color)' : cannot convert argument 2 from 'const char *' to 'Uint16' Any help would be greatly appreciated. 

From what I can see it doesn't matter where you recreate the classes, it will work. Is this due to how the classes are being initialised? My first thought is that it would be this line: 

I have been building a pong clone. I've been using a mixture of peoples different code to understand the way they structure their games as well as reading on game patterns. Currently I've gotten to draw a paddle on the screen and the player can move it with the keyboard no problem. The issue comes when a player presses a button that is not 'Up' or 'Down'. For instance when the player holds the 'Up' key the paddle travels upwards, but if they simultaneously hold the 'Right' key it causes the paddle to fly downwards at a much greater speed. My keyboard checking code is: 

I am trying to get a "highlighter" circle to follow around a sprite, but I am having trouble, I thought I could use the onUpdate method that's available to me in SequenceEntityModifier but it's not working for me. Here is my code: 

This is my first android game, sorry if my code is bad, any advice will help. I am trying to find ways to improve performance on a game of mine, I'm using AndEngine GLES2. I have a basic question about how to actually load sprites. I have 6 player sprites that actually use the same jpg as it's image, the way I've been loading them is like this: 

When onUpdate is completely commented out, the sprite moves like I want it to, everything is ok. When I put the onUpdate in, the sprite doesn't move at all. I have a feeling that I am overriding the original onUpdate's actions? Am I going about this the wrong way? I am new to Java, so please feel free to advise if this isn't going to work. UPDATE: The player2 is the sprite that I'm trying to get the highlighter to follow. 

I created two of these class objects to hold the image that is created from the players score variables. Issue is that the first time these objects are created, they are not shown on the screen. It's only when the objects are created again that they are shown. In gameloops constructor class: 

The program checks the points of the objects rect's to see if they have passed any of the paddles and then applies changes to the balls public variables. Here is the ball update code: 

I'm unsure of what is causing the paddle to behave so strangely. Any insight given into this problem or even just the way I've approached this problem would be appreciated. 

I've been working on a pong clone, i've made games in the past but they have all been very hacky. This time I was trying to go for a better approach in terms of using OOP or patterns. So far the games not posed many issues, I am however having problems thinking about the collision system and ball physics. In my main loop the collision code is as follows: 

I had a few issues with the performance of actually moving a camera, and switched to a SmoothCamera which increased performance, and looks so much better. Hope this helps: $URL$ Update: This may not be the most recent version of this code, but SmoothCamera is available in GLES 2 also. Just switch "Camera" to "SmoothCamera", I believe it takes some different parameters upon configuration, (like MAX_VELOCITY, etc). 

I am making a simple american football game, and I'm having an issue with the onSceneTouchEvent function, I have this code: 

Do I have to create an atlas and a region for every player that I have? Or can I somehow use the same resource? All the players are viewable simultaneously within the camera. I run these load* functions via a for loop, passing in i each time. Each set of players is performing different actions (SequenceModifiers) and I make the Sprite arrays like this: 

No. What would be the point of that? The physics simulation in a game engine is not a real simulation in the sense that everything is done with the correct real-world formulas and reproducible. Doing so would require massively more computing power. Most of the time, you can't even exactly reproduce the same physics simulation in a game twice in a row. Edit: This of course depends on the exact implementation, but I just checked in the unreal engine and this is the result of repeating the same drop of a cube on a sphere (sorry for the bad image quality): 

All four screenshots were taken from the same perspective. As you can see, sometimes the cube bounces far away, sometimes it stays close. 

I don't think there is a general answer to that, just do what feels right for you and your team. I personally try to only expose stuff to blueprints or c++ if it is absolutely needed, but sometimes I expose my stuff anyway out of lazyness ;) 

Inside hike() I set hiking to 1, so that theoretically, the player should be able to click anywhere to hike the ball, (all the other sprites start moving and the ball is not thrown). Then on the second click the ball is thrown. But with one click on the emulator, the ball is hiked and thrown at the same time, I also see this in the log (after only one click): 

I made each of these 2 different arrays, because generally each player from each array are doing similar animations and actions. For example, I make all the wide-receivers "run" at once. 

So it appears that it's triggering three times on one click? Why is this happening? How can I make it only run the code once per click? Update: Perhaps I could just prevent any events by using a timer? Like disable the listener for a second after the hike? I'm hoping there is a better solution though.