Pretty simple, I didn't pull all your code as I didn't need it, I just needed a mock. Within our transformation system we need to find a method dynamically, sorta. We want to find the method that has the return type of our input parameter. Of course I should mention that the final API call will look like this: 

I'm trying to refamiliarize myself with Java and working with it, so I've implemented my own version of a . Basically, it's an array of integers that maps 32 boolean values to each integer. This means an array of 32 boolean values only takes 4 bytes of space. I was attempting to implement a Sieve of Eratosthenes and I figured I should implement a at the same time. So, the class is as follows: 

It's been a while since I've touched ASP.NET MVC 3, but in 4 and 5 you can directly manipulate the , and use or . I do this on various validation methods to remove that responsibility from the controller, and reduce the call to: 

When tracing the chain, I found that the chain produced by my version is identical to the chain produced by your version, except it doesn't break when tested against the criteria that broke your version. 

Now that we've done that, we can pretty easily read your code. It's still cluttered with comments, you don't really need the massive amount of comments there. Your code should describe what is happening, you don't need to comment on that. Your comments should say why something is happening, if it's for a non-standard reason. (You don't need to say 'check for the special case of username == token, I can tell that's happening, and if I have any basic knowledge of the application I know why you did that.) If we remove just the self-explanatory comments, we'll find we have the following: 

In a very specific application I have, I needed the ability to easily convert between different data sizes. I.e. when I give an input of 1,048,576KiB, I needed it to say 1GiB, etc. So, I built a for it. It's pretty robust, includes operations for subtraction, addition, multiplication and division, and , etc. I'd like to think it might be useful for others as well. First bit is the : 

The next thing we can do is replace the result of with an , and change it to an function. This allows us to be lazy in our implementation. We simply whatever value we have at the moment. 

This isn't really a bad workaround. In fact, I wouldn't even consider it a workaround. It is now part of the business logic of the application. The only reason it feels like a workaround is because of your and comments. Remove those and this is no longer a workaround. I see the following method: 

We're going to put this before our statement, since C# and EF behave in a very predictable way. If there is no record matching the ID, will be null. We're going to modify our to account for that. 

Now AES uses only a private key as both encryption and decryption. This is known as symmetric encryption or a symmetric encryption algorithm. What you are discussion requires something else, known as asymmetric encryption or an asymmetric encryption algorithm. These algorithms come it two major variants: those that use the public key for encryption and the private key for decryption, and those that use the private key for encryption and the public key for decryption. The option you pick depends on your use-case. In the case of something being shared from server -> client, you would pick an algorithm that uses the private key for encryption, since the server is entirely under your control. You can keep things on it a secret. You cannot keep things on the client a secret, so it should get a public decryption key. Then to send data back you should have a second algorithm that does the opposite, and uses the public key for encryption. The next option is to have the client establish a connection to the server, then use a public key encryption algorithm (such as RSA - where the public key is the encryption key) to send it's AES key. Then you can use AES for the remaining communication between the server and the individual clients. This is the most common type of scenario with RSA, as it's very expensive to use for encryption and decryption. If you're using HTTPS, however, there's no need to build a sophisticated mechanism to further encrypt your information. HTTPS already provides a secure communication session between client/server, though it doesn't hurt to add more security in general, it can have drastic performance impacts if done wrong or 'over the top'. 

Is spelled like that? Not ? Also, with what this and the property above it do, I would consider wrapping them in a function call that will do that conversion, that's a lot of code to have in an initializer. 

Now, you might say "why would I want to write a sequence generator for an array?" Consider you have a huge array: 

Review In C# we prefer the alias instead of the type. Other than that, I have no real issues with the structure of your code, but I do have an issue with how you solved the problem. 

As always, all feedback appreciated. If it's possible to make this take and in an input, I would love an example of that. Otherwise, it does everything I want and more. 

I assume is an , so you should structure your code as such. Create a method for it, and call the event in that method. (This means you don't need to null-check everywhere you call the event as you are right now.) 

1: The term 'good' here is subjective, there are two major alternatives to throwing exceptions already present in the language: 1. Use parameters; 2. Return a ; Either of these are 'good' in certain lights; I'm simply attempting to draw out another possible alternative. 

Now, to demonstrate how this works I defined a very ugly method, so do not review it please, that goes through all the possible features of this struct: 

The block in this just prevents the last line from being ~2x the size of previous lines (which can be the case if there are high-code-point UNICODE glyphs. Finally, I assemble the entire result in a method: 

I get the distinct feeling that this should be a set of extension methods instead of a constructor or regular method. It has that about it. MSDN Reference of Extension Methods Also, you should use more proper naming conventions. ( instead of , etc.) And you don't need those blocks. Lastly, you seem to be missing the attribute. Take your initial code 

Then call it as . Much simpler, straightforward and to the point. You still have the other method, in case you need it for other things. 

In our chat you state you were told to use when matching against a simple boolean (there's no specific reason to use it over , or over it for that situation, so I'll not comment on that) but you can rewrite that with one instead of a with a nested : 

The method should only be responsible for saving (and maybe clearing) the buffer. If you move the check outside to the method, you remove a (minor) bit of overhead. A better style would be to create a method which does the -check, then calls which actually saves the buffer. You have a: 

The above code is invalid, because the argument is expected to be the array, and the argument is the int, and the array is expected to be the int argument. 

This screams for a proper ORM, or at least a fake implementation of one. You also mention in the comments: 

That keeps it really simple. (It'll probably be slightly slower, LINQ is usually slower than a hand-written loop, which is why I leave it up to you if you like it or not.) You have this method: 

You're thinking about this the wrong way. With a functional language everything can be considered part of a function. Instead of creating a 'shared object', simply map the filter to a function. You're adding a whole new level of features, so this modification will become quite large. The first modification: 

Best-Practice Concerns Concerns about your are pretty obvious as well. You have, unfortunately, fallen into a bad-practice here. Using a field to store all the information, and merely is a poor idea. Why? Because there are certain features you can no longer get. 

Bam. Now we've built a much more robust API that can be tested more easily as well. It should be trivial to implement this, in fact, we only need to change a few parts of your original code. 

All the answers focus on using in the method, which isn't necessary. We can speed this up by eliminating the random from that method entire. What's the one, absolute truth about our desired task? The order will never change. We can build the order of our numbers in the constructor, and create an index field instead of all the code being in the method. We can also make this run in \$O(n)\$ time (right now you have no big-O run-time, your method could be running infinitely). Code: 

First, I want to comment on the naming, simply from the fact that I'm currently building an ASP.NET app which is very large, and I've learned through the process that the name becomes cumbersome, and is partially a lie. I've begun to name my 'View Models' as 'DTOs' instead, that is: Data-Transfer Object. This has begun to make my code much more clear, as it's now obvious that the DTO can be a two-way object: data can be fed to it from the back-end or from the UI.