I believe you are experiencing $URL$ In short, uses the word "file" in different ways depending on context. In your first "Number of files" count it counts everything. In your second "Number of files transferred", it does not count symbolic links and directories as files. Example: 

This shows two example packages on my system. The "Automatically installed" field shows if it is manually installed or dragged in by a dependency. This information is available to APT, as you suspect. Depending on which tool you like to use, it will be found in different places, but it will most likely be called "Automatically installed" with a "Yes/No" value. 

When the terminal size in pixels is not an even multiple of the individual character size ("cell size"), there will necessarily be unused space somewhere (bottom and right, in this case). I can only assume that this was originally thought of as something that "shouldn't happen" (try to resize a terminal window and you'll see that it only resizes to even multiples of the cell size (or at least it should)), but when some WMs e.g. maximize the window, it does indeed happen. used to just keep this area "blank" (as the terminal background), but that resulted in a bug when resizing the window in e.g. Awesome which left cruft in these no-man's-land borders (see $URL$ Now this is taken care of by letting 's borders fill this gap. To mitigate the problem you could set the border color to something less eye-catching than clear red or make sure that the window is an even multiple of the cell size. The biggest question with your image seems to be: why is your terminal pixel size not a multiple of the cell size? This in itself might be a bug somewhere. Try resizing and finding out why this is. 

To count path depth, you could try to just count occurences of '/' in the filename. A caveat could be that is equivalent with , but won't output unnecessary multiple slashes, so it will be alright. 

accepts connections gives a password prompt after a specified delay logs user+password if one is interested in that and denies the login after a specified amount of time. 

You can use a Jabber transport to connect to MSN users (with some service limitations) as mentioned in $URL$ Since this announcement, it should also not be an impossibility to communicate directly with MSN contacts through XMPP (though Microsoft is as usual not really following "standards", as per what developers of e.g. BitlBee say) and thus Google Talk. I have not seen any direct Google Talk guides using this, though (and personally I solve it with the before mentioned BitlBee). See the earlier linked Microsoft developers' blog for more info. 

I pressed Enter and sat there looking at the command, which should have taken a second at most. After a bit longer time asked me if I wanted "to remove the write-protected file 'something'".Quite quickly I felt the chills and softly and very controlled I pressed . ~Half of my was deleted, but I managed to get everything of value back through above described grepping and some more or less current backups. I had some personally very valuable (read: time consuming) and very recent measurement data on disk that was lost, but I had made quadruple backups. One disappared here, another due to system outage at school, another was corrupt, and at first I couldn't find the fourth, since I by mistake had put it in the wrong folder :-D . Had not got stuck on a write-protected file, the fourth would have been eaten since that folder was mounted via sshfs in my . I'm a lot more careful about that kind of stuff since. 

I did a quick fix for this once when I wanted to crowbar this behavior into an existing rsync script that only transferred to a specific folder: I made a catalog of symlinks for this purpose on both sides and told rsync to dereference links () during transfer. On my side, the links were dereferenced into their contents and transferred to the directory on the remote side, where they were put into the symlinks that pointed to the directories where I wanted them. This is actually not the worst way to specify files for backup. It is versatile and easily customizable without changing configuration files (well, the structure of symlinks is the configuration file, in a way). This specific example is not a good solution if you want to not dereference links for transfer in certain cases, though. 

to see if there is a suspicious process there. In that case, kill it. If the problem persists, try manually looking through the output of to find possible processes there. If it still won't work, you can check 

This applies the command (which formats the current line as with ) on the entire buffer, without taking customized mappings into account (to avoid problems if e.g. has been mapped to something else). See 

I can note that I had tried, in order, to change PSU and graphics card without any long-term benifit (it was very annoying to find that "yay, new PSU made it work!" to see that it failed on the next reboot, and so on. Not the best spent hours of my life). 

In practice it adds up to at maximum ~1% of TCP usage (look at the specifications of header length and data length in a packet), or "more or less unnoticeable" (10MB per 1GB). You also have resent packages and the like from collisions, ACK packets and other things. It is nothing to be concerned over. And as was said: headers and everything mentioned above is also data. If you have a bad cable at home so that many packets have to be resent, why should the ISP give this data "for free"? You are charged for data, not "effective data" as per some unclear standard. 

$URL$ - it is a warning message that according to Linus himself (second message in thread) will be disabled in then future, now probably current, kernels. The discussion above concerns only 3.x kernels, but perhaps the patch had been incorporated in the 2.6.32 branch as well. In any way, it gives clues on what the message is related to. If you don't see any symptoms other than the line in the log, you can probably ignore it. It is most probably fixed as per above thread with a newer kernel version than yours. To find more information: search for 

The other parts should be self-explanatory. See for a more complete listing of the format. See for more information on the meaning of the different statuses. 

and on Windows you probably just need to replace with . makes division use floating point instead of integer division as default, which is expected of a calculator. This is not needed if one uses Python 3 (which is what the part means). imports all math functions into the main namespace, so you can do instead of . 

A hackish solution would be to extend your desktop to dual X displays on your main machine, with being your main screen and being to the right. Run to share display 1 and then run a barebones client on the laptop with a VNC viewer that connects to display 1 over Ethernet and projects it full screen. 

Files that are called with relative paths in will be searched for relative to the current working directory from where the script is executed. Probably your script currently only works if it is executed from at the moment. One way to solve this is by giving absolute paths to the included files (but then the script needs to be updated if the wanted files are ever moved), or you need to figure out the absolute path dynamically with , e.g. 

and if you run web/FTP/database servers and so on, their content as well (for me that means , and ). All the files in are probably what you call system files, as well as the other directories in the system. The exception (at least on Debian based systems, and many others as well) are the directories which contain programs and other things you have installed outside the package system, which you might want to save (but probably you have the installation files for those programs as well). Save a list of installed packages for easy reconstruction. If you use backup software that only copies the portions of the files that have changed (e.g. as you mentioned), the traffic load will be minimal, except for the occasional full backup that you do to make sure everything is in order. 

All these mentioned differences are specified through [2], but in practice as I mentioned not everyone adheres to the registered port assignments. You'll find almost none of the common game server ports (e.g. 27015 for Counter-strike, 6889 for Starcraft) listed, and there are in practice conventional system ports (411 for Direct Connect) that also are not registered. The superuser binding requirement on ports <1024 is also just an OS restriction. IANA keeps the authoritative list on port number assignment [2]. 

Will find files at maximum (and minimum) depth 1 (i.e. files directly in the given directory) that does not start with a period and execute with the matches as arguments. Try it with a simple echo or something first to not shoot yourself in the foot before you understand exactly how it works for you. This addresses your question about keeping all hidden files. Your topic is a bit different, but the find command is easily modified to instead just ignore files named . 

This alternative is as per Ben's suggestion in the comments, and is more straightforward than the original solution, which is saved below since it might fit better in other similar circumstances due to the regular expression matching ability. In the "match all lines" case, it is unnecessarily brute, though. 

Driver download at Lenovo's home page (first Google hit for "Lenovo B460e"). Under the heading "Networking: Wireless LAN" there are two drivers for Windows 7. They seem to be the same though (same version number, same size, just a slightly different name), so just download and install anyone of those. 

Since will swallow anything, you'll have to first match "not the character I want" and then "the character I want". So, in you could store 

The left-most column is the partition label that you need later (assumed to be below - just change accordingly). The right-most column is the file system on the partition, and with we only pick those partitions that are NTFS. Then, for CentOS 6, condensed from $URL$ 

Since Google Chrome's tabs are trapezoidal, they use a specific function in the driver called "trapezoidal acceleration", which is supported in hardware by newer Nvidia circuits. On older circuits without this support, there was a bug that showed up in combination with upgrades to X.org 1.11 (where I guess X.org started supporting direct trapezoidal rendering) which made trapezoidal rendering much slower than it should have to be (much slower than it was with earlier driver/X.org server combinations). I run a GeForce 9400 which is one of the affected circuits. The Debian bug report. The Nvidia driver fix announcement in 290.03. Personally I had this issue with even newer Nvidia versions (295.40), which persisted through a restart, but for some reason just launching fixed it. Chrome is still a lot slower than e.g. Opera in tab switching and creation on my machine, but it no longer induces delays of several seconds. From all I can tell, it is back to the speed it was before the bug introduction. 

For completeness: to increase the resolution on your laptop you would have to buy a new laptop panel that is compatible. This is most likely not available, unless you are in real luck and your laptop is part of a series where a higher resolution model is available. It would still be a bit of a gamble to find a new panel unless you can find trustworthy verification of the specific panel model working with your specific laptop model. 

The last command prints the "return value" of the previous call. A return value of is "the shell way" of saying "the command executed successfully". A return value of something else indicates an error. If encounters a return value that is not 0 (which some programs give on help messages, since the program did not technically run), it will return "false" in the PHP context and thus trigger the part and terminate the PHP script with the given error message. In shorter words: your command probably does not return a successful status, and you have told PHP to if it doesn't. 

To test this pattern (or commands in general), a useful technique is to insert before the actual command to see which commands are to be executed, i.e. change to . 

There are more convoluted solutions that would test the contents of all files, e.g. the utility in combination with and then :ing the result for video files, but it would be many magnitudes slower. File name extension guessing is a coarser mesh, but will probably hit all files anyway. 

With the exception of the remote server being offline at the execution time, this would be reliable over remote server restarts and other things. 

Open your with a text editor and edit out the section that gives you the error. If you don't know where the error is, either paste the contents here or try removing your additions line by line, save the file and start a test terminal to see where it starts failing. 

in a terminal (a command prompt if you are on Windows) to get the resolved IP address printed. This is the easiest way I use in practice, and it is more or less universal. Otherwise or are more "correct" for the task, but might not be available, and might give more info than you want.