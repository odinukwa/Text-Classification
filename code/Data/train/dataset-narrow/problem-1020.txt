Having user/pwd in code, especially in clear text is a bad idea. If you still want them in the code at least encrypt them in some way. As they currently stand anybody can with a hexdump program read them. 

The while loop's expression says it should quit when c is not a digit but after that you do not handle the case if c was EOF. Should you then return EOF or 1 ? Personally I get a bit confused by the function name, when I read getInt() I expect it to return an int instead of getting the value via an argument but that is just me. 

There are several style guides (e.g. google has one), it is up to you pick one or do your own but there is no universal style guide. Important is just that you are consistent in your code so that you don't use different styles in different files, that is confusing (irritating) I find your code looks fine from the style point of view. Normally one would avoid (if possible) to include the headers like Hangman.h and CharReader.h in your header GameManager. Instead you declare them as pointers in the header and remove the headers. 

other than that i find it was quite clever way of calculating atoi, it took me a moment to understand it -- sometimes it is better to let the compiler optimize the code for you than try to write too clever code. 

You class contains a number of raw pointers e,g, LineCodeGenerator* which could be replaced with smart pointers to make ownership clear and memory handling easier. 

There are magic numbers in your code 2,3 etc. try using constants for those values with descriptive names. The function is arguably a bit long and has quite a few if-statement levels, better to split into several functions that you can parameterize. You may also want to present public functions to the user that do not have all the arguments then leave the original protected e.g. 

It might be useful to have options for multiple parameters (similar to how the tuple is). Though it might not be feasible to have all combinations of multiple (im)mutable arguments. 

Note: The calls were needed on all invocations to ensure that the intersections are actually generated. Run on my machine with multiple collections: 

Calling any function in general will give you a small (miniscule) performance hit. Recursive functions (AFAIK) cannot be inlined so that can't be optimized away. LINQ revolves around calling other functions so that's the worst choice to make if you want to write good performing code. I've said it before, LINQ is not for writing fast code, it's for writing concise code. This is a simple algorithm that doesn't need to be bogged down by that. * It doesn't help if you don't use LINQ correctly, you have a number of no-no's in your code. If you want the fastest approach (without resorting to mapping out all possible values in memory), you'd stay away from these and do a more direct conversion. To be the absolutely fastest, you have to get down low-level and use (unmanaged) code. I won't go there. On the other hand, if you want fastest managed code, you'd want to do this iteratively. In any case, my proposal is not a claim to be the fastest implementation, it could very well not be but I don't know, you would have to profile it to find out. We're doing a base conversion from base-10 numbers to base-26 "numbers". I don't know if there's a faster algorithm to do this but here's a straight conversion using a as a buffer. 

Any time you have multiple independent boolean variables representing a state, consider using a bitfield through the use of an enum with the applied. That way you don't need to maintain multiple variables to represent a single state. 

that may make its use less confusing than keeping track of all possible argument combinations. You may also want to include the stream to print to as an argument to , that way if you can alternatively print to a file instead of . 

memory ownership is not easy to follow in your code avoid using raw pointers. By using smart pointers ownership is always clear and you dont need to bother about where to delete. 

always make a habit of initializing all variables when you declare them, it is good practice. when you use runtime functions you should check the return value e.g. scanf returns the number of argument it has successfully parsed based on the format specifier, if it returns 0 you know something went wrong and can do something about it instead of having a potentially uninitialized variable to deal with. personally i prefer using fgets/sscanf/atoi/atof for input, fgets is simple to use and can not cause stackoverflow if user enters something unexpected. even though you have split up your functionality into functions you shouldt go one step further and split it further. It may also be useful to create an enum for the account type e.g. 

with less versatile I mean that if your class does not throw exceptions the user of the class cannot take any corrective action if something goes wrong or give out custom error messages in his own language. 

in use instead to get the real error from the OS instead of "can't open" e.g. i also agree with Emanuele that seems a bit ... vague? better with in if you run out of memory you silently return, it would probably be good to return some kind of error code instead allowing for a user of the function to take action. This applies also to exit(), doing an exit in the middle is not a good strategy, better to return with an error code. Let the caller determine what to do e.g. write an error message. in you but there you do not check the return value. 

I was debating whether this would be more useful as a or an , considering all the operations you were trying to add to it. A struct would have been a safer bet. However enums are much more lightweight and the way you're using it, it doesn't need to be more complicated than that. 

After thinking about this again, I think it would be better to just group them all at once in the beginning instead of partitioning at every step. Here's an alternate implementation: 

There are many improvements to be made. If you think of the months as indexes, it will simplify everything. You shouldn't have to loop n times just to figure out what the n'th month is after January, a simple addition should be enough. By doing this, this will allow you to remove many of the redundant operations that you currently have. First let's start with the extensions: 

And to a lesser degree, a call to with parameters should be printed a single line at a time. The newline characters sprinkled in the format string makes it less clear how many lines this will print out. Do this: 

Your code is very difficult to read. (To give you an idea of how difficult it is, I've been looking at this for the past 2 hours so far) 

Don't parse it through string manipulation, use the XML libraries in the framework. I'd recommend LINQ to XML. Parse it and make your changes. 

Adding up all the sizes that are less than some factor Counting all those that are greater than that factor multiplying by that factor. Adding the previous results 

Your method is removing a collection of entities that exist in some set. When I see , I'd say it removes a single item from something. Now if that collection actually existed in the set, then it would be perfect, but alas it's a collection of items to remove. One thing to consider, assuming you're making an extension method for the EF5 , it already has a method that removes a single item, I think an overload to remove more items doesn't sound like a bad idea to me. On the other hand, LINQ to XML defines a method on enumerables of . But that's an extension on the collection of entities, not the parent set. I'm a little on the fence on this one. , while better as it indicates we're removing many items, doesn't fit well with me. It mimics by name but I'd associate the "Many" part with a projection, certainly not with a remove operation. I'd avoid that one. 

Furthermore, It segfaults on me when I give it lines longer than 119 characters. (But this is probably system dependent). 

Finally, you have several magic numbers. To make code maitenance easier, define variables for constants like colors, strings, and timeouts. 

If we consider these two buttons a state machine, we see that there are six simple states (not including hover). 

Your logger configuration doesn't seem bad. It's a little verbose, but it is open to further extensions if those ever come along. I don't know your requirements, but if you're only ever going to have one file logger and optionally a console logger, you could change your list into an object like so: 

Acknowledging the state machine, look at the "want"/"want again" button. The text will always say "I want to do it again" after the done button has clicked. Essentially we can boil it down to this: 

I have little experience with python, so I can't offer critique on the finer points of your code, just the big picture. That said, several things stick out to me. First, you have some large chunks which are duplicated two, three, or even four times (see lines 198-215). Scour through the code and extract these into their own functions. Second, several of your functions are massively too long: (161 lines), (97 lines), (228 lines). , once you get rid of the previously mentioned duplication, could easily be broken into two functions: the finding and the scoring. is too long simply because it contains all of the input handling. The section within the block starting at line 435 absolutely should be its own function, if not more since it clocks in at 144 lines. Finally, and this is more observation than critique, your classes do nothing but operate as organized data structures. This isn't necessarily a wrong approach, but it would look good if you were to refactor your code to be a bit more object oriented, especially since this is intended as a code sample. 

Using a little bit of LINQ here could make this more readable IMHO. It's easier to think of it as "looping through the list of candidate records" rather than "looping through all records and skipping some of them." Personally, I would write the last set of conditions as I have shown using the conditional operator. You may or may not like it this way or this structure so your choice with that part. 

Now there's some minor style issues in your code. You can follow these if you wish, it's just personal preference. But it could help other people read your code easier with little chance for confusion. Your variable declarations should go on separate lines and the initializations of the variable should occur in the declaration. I'd also pluralize the variables since they are used as counters. In your head, if you read out the values of the variables what makes more sense? "I have 5 ," or "I have 5 ? The comment was off a bit, we're not initializing here, just declaring it. Do this: 

You could also condense the conditions a bit if you recognize that values of are considered and non-zero is . You're testing if they're equal to so you could just write it as 

This looks a lot cleaner to me. Should also showcase how much more helpful it is when you give more descriptive names to your variables. 

To splice the string in general, this would be faster and more efficient then using LINQ or other methods. 

Well here's my take on it. If you want efficient in terms of speed, write a loop. LINQ is not for writing fast code, it's for writing concise code. is just a collection of the memory counts of all the machines that are on. You then essentially partition those machines by some to do some calculation. The call to , while somewhat helpful (you do the filter/projection once) isn't really needed. You can perform your calculation in one pass and therefore don't need it at all. Look at the following lines in your calculation: 

Lot of code but here are some comments. class Card Personally I put private parts of a class at the end of the class, those are implementation details. The public parts OTOH are more important for the user of the class. (IMHO) Use scoped enum for the card suit, as it is now you use char so any char can be accidentally assigned. assignValue assignValue depends on the order of when the member variable m_card was defined, it would be better to make it static and take as argument the card otherwise this can be an error source in the future. A std::map could have been used to hold the values of the cards e.g. map constructor you do not initialize all declared variables, std::string is initialized automatically to empty string but it is good nevertheless to show that you initialize it for clarity. one day you may change the type of the variable and forget to add it to the constructor nameCard you seem to have omitted the King. your switch sets a string for 0-3 but forgetting to call this function will forget to define that variable, you could instead make sure the card has a textual suit by defining it in the constructor same time you assign m_suite. again the mapping from value to some string could be held in a std::map both for suits and for the textual values like "Ace". that would make things like Deck::fillDeck smaller. Deck Use a smart pointer instead of a raw pointer to the cards, that you do not have to worry about memory leaks. 

in general it is better to write functions that do not force the user of them to look at the implementation in order to figure out how to use them. your function allocates memory and returns a buffer that the user needs to free. this fact is not obvious from the function name (it could have returned a ptr to a static buffer for instance, or a pointer to a global array whatever). 

You are caching , but really, it's not complex enough to warrant caching. I did some quick and dirty testing and found that you save about 10ms per 1,000 executions. That is not worth anything here. So, to reduce code size and bug potential, I suggest removing all caching. 

The path is one of these two options. In the first path, done is clicked first. In the other, want is clicked first. 

Finally, we have to consider when to make each button active. If we clicked the done button first, then done will be active when the done count is greater than the want count. The opposite is true if the want button was clicked first. As a special case, no button is active if the want count and done count are zero. 

"want" / "did" "want again" / "did" (active) "want" (active) / "done" "want again" / "done" (active) "want again" (active) / "done again" "want again" / "done again" (active) 

Variables and parameters should not be capitalized unless they represent a class. As such, the parameter in should be . 

Brief aside: If this script is only to list the instances for you, you might find it useful to check out the and the tool: 

Generally speaking, anonymous (unnamed) functions are completely acceptable within the land of Javascript. They are used frequently and without prejudice, so don't be afraid of them. That said, I'm not a fan of the second code sample. Without an understanding of the jQuery API, I don't really know what the two functions do to the hover call. Are both called, one after another? Perhaps something else happens? The name doesn't really give any clues here. I think a great option here would be to combine the two samples. Use the anonymous functions of the second with the explicit naming of the first. Furthermore, it should be noted that according to the docs, is shorthand for and , not and . I'll let you read over the docs and decide which of the two you decide to go with, but ultimately I recommend going with something like this: