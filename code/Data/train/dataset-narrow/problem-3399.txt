Thanks! PS...If it helps, I can post a picture of the configuration. I also have connected my USB to TTL Console Cable so I can connect to the pi without having to use my awful screen. 

That's basically it. Arch Linux is probably the way to go, combined with the features Fred mentioned, as I said before. Arch is a very minimal OS and may not be the best thing for a beginner to use, but if you have experience in Linux, then go for it. It just takes a bit of setting up, as it comes with the bare minimum to install and that's it. Hope your project goes well! 

Well, I don't why, but after letting it sit all night, it works again. Thanks for the help @Milliways, but it solved itself. I'm thinking something might have tripped the F3 polyfuse as several of the components were really hot, including the fuse (as in burning my skin hot for the fuse). 

Second Method Use a transparent proxy This method is a bit more complicated and uses a squid proxy combined with regex. I haven't actually used this yet, so I simply copy/pasted this answer from Ask Ubuntu (you can read the original answer [here]( 

To improve on Enes' answer a bit, the Pi has regulators that will kill the Pi to protect the circuitry if a surge is detected. Hot-plugging (plugging in a USB device while the host device is running) will cause a sudden jump in current requested, which often will trip these regulators. This is a known issue, especially with a less powerful PSU. You can combat this by using a more powerful PSU, one that has a higher amperage because a higher amperage is a stronger current; stronger current means better chance of continuous power when more power is requested. Another thing you can do to stop this from happening is to use an externally powered USB hub, externally and powered being very crucial. This method works because instead of pulling power for the Pi's components (SoC, Ethernet, USB ports, etc.,) all of the power can be used for the USB devices. 

You could do this via the file, however, this method can be easily over-ridden with the right knowledge and file access. Beyond the file, there are two methods that I know of, both using Proxys. These answers were originally for Ubuntu, but they should work just the same on Raspbian (or possibly with a bit of modification,) as both Ubuntu and Raspbian are Debian-based. 

This was resolved in the comments. It turns out that the OP, although the Pi was connected to the local network - it wasn't actually connected to the internet. Thus, when they tried to , they received in response. This confirmed that their Pi wasn't actually connected to the outside world. It was connected to their network, but not the actual full internet. If it was, it would be able to ping sites such as google. 

So, the Potentiometer isn't for safety, it is to make the LCD usable/readable! Basically, if you want to use this tutorial, you have to have a potentiometer, otherwise the LCD will be out of contrast, and thus useless. Potentiometers are usually pretty cheap and you can get several for a good price, as you can see here. This Potentiometer is the one they use in the tutorial, and is only $1.25, while this one is a little less pretty and is only $0.95. Both should work fine and both are from Adafruit (supplier for that tutorial). 

user236012's answer is helpful, but as Kozuch pointed out, having a list of components to get would be very helpful for an absolute beginner. I thought I'd just point out that there is a kit, known as the CamJam EduKit, released by Jamie Mann, of The Pi Hut, and Mike Horne, a CamJam organizer, that comes with LEDs, resistors, jumper wires, a button, a breadboard, and a buzzer. 

OP decided in chat that it would be easier and take less time to simply re-flash and move files back on afterwards. I'm just posting this until the OP creates a self-answer. 

I'm surprised nobody has mentioned it, but you could try out VNC. You won't get the greatest performance out of it, as most of the CPU/RAM will be going to XBMC, but if you look here and here there are a few places you can get instructions on how to do this. I'm not totally sure that this will work or how to set it up, as I've never used XBMC on the Pi, but it seems to be a common enough request on the RPi forums, so I just figured I'd mention it. You can find other instructions, sites, etc. by just googling . Should bring up plenty of sites. 

NOTE: This doesn't answer the OP's question as it is posted. This is merely a work-around. Check on the GitHub NOOBS page. While it doesn't actually allow you to clone the installation, you can just bypass the splashscreen and boot automatically into the selected partition. From the page: 

I am currently bread-boarding two LEDs with 560 mOh resistors connected to the RPi over a ribbon cable that connects to the breadboard with a Pi Cobbler. The problem I am getting isn't with the hardware, it's with the script. When I run it, I get this error: 

As for compiling your own kernel, just search on Google. You'll get plenty of results. Here's the first one, the eLinux RPi page on the topic, to get you started. 

To improve on Some Random User's post: First off: That's 5 devices. A Pi, even a B+, can't handle that many - only 4 ports. Moving on. The Model B Pi has regulators (as Milliways mentioned, ~1A polyfuse) that will kill the Pi to protect the circuitry if a surge of power is detected. Hot-plugging (plugging in a USB device while the host device is running) will cause a sudden jump in current requested, which often will trip these regulators. However, those regulators also control the flow of power, causing there not to be enough power for both running the Pi and powering the USB ports. This is a known issue, at least with the Model B. You're using the Model B+, which has a new power circuit which is much more efficient and saves ~.5A - 1A so you can now supply more power to the USB ports and crashing your Pi via power surges is much less on an issue. However, as you are already doing connecting one Arduino and a Mega at that (as well as an RFID tag, I agree with Some Random User. You're gonna need the extra power a powered (powered being key here, otherwise you're still just drawing from the Pi) hub can provide if you want to run 5 devices. The devices may still run, but they probably won't be getting the full power they need, so they will probably end up running below average, if they don't crash out-right. 

I have a 512MB Model B (2012 edition I believe, possibly 2011...china made) and recently my power cord was partitally chewed through. Obviously, the Pi wouldn't boot up, as I noticed when I tried to SSH in. So, I swapped out the power cord, but nothing happened. I watched the Pi as I plugged in the power cord and the red PWR LED simply slowly died, and nothing would come up on the screen. So, I thought, I'll just give it a rest for a day, seeing as it was up as a Spigot MC server 24/7 for quite some time. I let it sit for a day, and then booted it up again. This time, the PWR LED stayed on and the green ACT LED flickered, showing activity, but when I tried to SSH in, I got . I plugged in a screen via HDMI and I get the boot, but it seems different. Other than that the rainbow splash doesn't show up at all, I'm not sure what is different, but it is most definitely different. Must be the router not recognizing the Pi, not sure why, but whatever. I swapped out the ethernet cable, but still nothing. I watched the Pi during a reboot and the Ethernet LEDs didn't come on and the Pi's static IP (which I know works, it worked for quite a while) wasn't displayed. So, I was going to get some data from the Pi (eg. see if I could ping the router check if my static IP setup was still in place, etc.). However, neither my Bluetooth keyboard (which does work with the Pi, have used it before) nor my Mechanical keyboard connected through a powered hub (also works, hub is confirmed to work and I have used it successfully before) were recognized. So, I went a hunting and on the R-Pi Troubleshooting e-linux page, I found this: 

I don't believe having an faster SD card is going to help all that much, as this slowness is probably because the Pi is a relatively low-spec piece of hardware (as I'm sure you know.) The Pi simply can't process and load the data from the SD card for the application fast enough. 512MB of RAM (at 667 MBps) and a 700MHz ARM1176JZF-S ARM11 core within a Broadcom BCM2835 media processor isn't going to be that fast without any changes (overclocking). When you overclock you don't just speed up the CPU/GPU, you are also speeding up the RAM, which should help some. However, the issue still remains that the Pi is a low-end (speed-wise) device and it isn't/wasn't made to be a gaming device. 

I am working on a robot using an Arduino Uno R3 and I wanted to have the ability of controlling the Arduino wirelessly, like stopping the Arduino without having to pull the power-plug every time. I want to know the safest way to connect my Raspberry Pi to the Arduino, without huge risk of voltage going either way badly. I looked at using i2c and Serial, as per these pages: $URL$ & $URL$ I have yet to look up USB. The reason that I'm asking this question is that on the i2c post it said that I should look out for the voltage difference: 

This is most likely because something (by the looks of that command it is the BASH shell and SFTP-Server) is/are accessing the root filesystem. During boot nothing is accessing anything in yet, so it can be set to read-only. However, once boot-up is complete, some software may want a lock on the filesystem or some files are being changed within. Obviously, as all the files that Raspbian uses - software, personal files, logs, etc. - are within the root filesystem. Thus you get the error. If you were able to kill both BASH and SFTP-server and then run the command, I suspect that it would work fine. However, because BASH is the way you are entering the commands, and BASH is stored on the partition, that can't happen. 

So, I figured oh well. It's just a sample, it's not important. So I kept going and then they had me enter 

The issue was solved in the comments, the OP's account didn't have the group permissions required for the networking. He ran and then rebooted and the issue was solved. 

Yes. Since Epiphany has been officially released for the first time, it is now in the official repositories and so any future updates will be served from there. If you remove the Collabora line it just means that apt-get won't look there for updates; the software will remain installed. 

Python is the language of choice for the Raspberry Pi (the Pi in the name is a take on Python) and comes pre-installed on Raspbian, so the example I'll provide will be in Python. This will be a very basic Q/A Python script. If you want more in depth features and more control, I suggest checking out Learn Python.org, Learn Python the Hard Way, or Codecademy's Python Course. Teh Codez A basic Q/A script written in Python 3.3, you can run it via 

That's all I'm going to share, I don't want to give a full lesson on Python code within the bounds of a Stack Exchange answer. Again, if you want to learn more about Python, follow those links I gave above. Hope this helped! 

Can anyone see the problem in my code (included below). I wrote the script myself and I'm rather new to python so I probably will have a few problems/code that could be done better. I wrote this with a class so that I could change around my projects with different LED configurations. This is the code: 

Yes. You do need to install Apache and jQuery as well, because otherwise the PHP and jQuery scripts have nothing to run on. In the case of jQuery, the scripts can't be interpreted by without the necessary libraries. PHP I believe can run without Apache, but it could be a pain to set up. Granted, I have never attempted this myself, but from what I have used PHP for, you still need an Apache (or lighttpd, a lighter web server, perfect for the Pi) to display anything ed or ed from the script. You probably want to go with over Apache simply because it's faster and lighter, which is good for the limited resources on the Pi (512MB RAM isn't exactly a world class server.) To install lighttpd on the Pi, check out this post. It explains the basics of setting up lighttpd as a server and installing PHP5 and MySQL. As for jQuery, setting it up should be just the same as with any other server. Download the software and then link to it in your scripts. Hope this helps! 

and I get the exact same error, except with a different address. Does anyone have any clue why all of these errors are occurring? I really want to try out SonicPi, but I can't with these. 

The NOPASSWD option makes it so that if you enter sudo as the default Pi account, or any other sudo-capable account with NOPASSWD enabled, you don't have to actually enter your password when running something via sudo. If no-one has access to your account, it is a matter of convenience. However, should someone get a hold of your Pi and you are logged in, then they can run root commands however, and whenever they want. However, if you are logged out and the person gets your password, the NOPASSWD option doesn't do anything. Essentially, the NOPASSWD only de-creases security if you manage to lose your Pi, whilst logged in to a sudo-capable account. If someone steals your Pi and manages to crack your password, they A) Have your Pi (which stinks) and B) Have your password, so NOPASSWD isn't going to change what they do, just how fast they do it. Personally, I just leave the option on. For me anyways, the Pi is just a testing platform that doesn't have anything of importance on it and is easy to fix any issues people cause. Thus, NOPASSWD is convenient. But it is all personal opinion. 

As for the partition you are going to be using, my guess is that it will be , though I can't be certain, as your installation is going to be different than mine. To find out which partition you are on run , then run . This is example output for within parted: 

I am currently attempting to set up PPP between my Pi and my Ubuntu 13.04 Toshiba Satellite A105 via the Serial Cable, as per this site: $URL$ I successfully (I think) started PPP Daemon on my pi via it worked for a second then gave me this: 

Slow read/write (I/O) speeds. So you using a faster SD card will help, a Class 10 card will be substantially faster than a Class 4 card. I misunderstood how SD card classes worked, and that has been pointed out quite clearly in the comments, my bad. Actually, a Class 10 card will be faster than a Class 4 card for large file transfers such as HD video and whatnot. Apparently Class 4 performs just as well with smaller files. Again, my bad, but hey, we all learn now and again. A bogged-down init sequence. If you have lots of software that fires up during the boot phase, the boot-time is going to be slower. More software starting == Longer boot time. Thus, if you need a fast boot, cut as much software from the init sequence as possible. You can create a simple script (or I'm sure there is one out there) that will launch software after the main boot sequence completes, spreading the load out a bit more. 

We (@RPi Awesomeness and @Dam Underscore) resolved this in the chat. None of the tutorials or answers he was trying were working, so we tried to figure it out and we did. Turns out the OP was using NOOBS and thus couldn't find the cmdline.txt file required for the tutorial he was following. So, I told him to download Raspbian & go with that. Whether or not that allowed him to set it up headless or not, I don't know yet, but this has him ready to keep going w. the tutorial. 

Hope this helps you! If having the command as simply doesn't work, comment back here and I'll see if I can't figure out why! Best of luck!