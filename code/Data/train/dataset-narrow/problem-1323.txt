This is pretty clean code, good job. I'll be reviewing each file in order, and then I'll you some extra advice at the end. server.py General 

Unless you plan on extending the class with methods, is superfluous. A is enough. Move to the body. Try abbreviating names less. While abbreviating is customary in other languages, in Python, developers should be as verbose as possible (within reason). Make functions and attributes private when it makes sense. Especially when you're designing a public API, you want to hide away all the unimportant / difficult to comprehend stuff. For example, in , all the arguments should be private attributes, because developers should not be allowed to modify them after initialization. Add docstrings to public functions and classes. 

The following two points only apply if you want your UIs to be dynamic, and you need to create reasonably complex applications. 

My goal was to create a simple-to-use CLI program for drawing directory trees (what does on most platforms, basically). I'm submitting my 'backend' program for review because I think it makes more sense to review the actual algorithm, rather than reviewing an interface on top of it. 

I'd appreciate any feedback regarding performance, usability, coding style, documentation, or anything else! 

As @Ludisposed suggested, you don't actually have to convert the entire string to lowercase, would do. 

The use of is generally discouraged and isn't needed in this example. You can leave out and the code will function just fine. 

You forgot to define . I'm not sure if this is a quirk of my terminal emulator / MacOS Sierra, or if it's present regardless of setup, but the bounds checking in doesn't do its job: I can keep moving the pointer down forever, which causes interesting screen glitches.6, 7 This isn't strictly a bug, but if a user presses anything other than △, ▽, or return, the program crashes. 

What follows is a list of things I think you could improve on. I am not a C developer, so feel free to correct me if I'm wrong. 

It's hard to track where they are being used and modified. This problem becomes very prominent when using threads; Loading a global variable is more costly than loading a local one; If you design an API and have lots of global variables floating about, when someone performs a wildcard import, their global namespace will be cluttered. 

Others already provided great answers, but I'd like to add something about portability. I see you used the python2.7 tag, but I feel like (at least for this snippet of code) there shouldn't be a reason to limit it to Python 2. If you're learning Python from scratch, I strongly recommend learning Python 3. Support for Python 2.7 will be dropped soon and version 3 future. 

The program begins by applying some mixins to Groovy and Apache POI classes. Then, it opens the Workbook using the added method . This method takes care of opening the Workbook and closing it when the Closure exits. The core of the process happens within the Workbook Closure. 

With some meta-programming you can add a method to the InputStream class that would allow you to move a line ahead of another using concise code like this: 

The new property , which is maintained by the and methods, takes care of saving the current resolved client to the GORM store (database). With that value persisted you can use it in GORM queries: 

How it works It's actually quite simple. The method signatures are gathered from the class's MetaClass. Then some hefty formatting is applied to write the method signatures correctly. Also, final methods are excluded. Example 

Templates Ideally, you'd have two templates: one for the class and one for the methods. That would avoid the clunky JSP-style programming. You can read more about Groovy's template engines here. 

In this example, is an interface with four implementations, (only one of which I coded), one for each of the possible directions. The methods accept a and any other necessary parameters which are not part of the . The implementations can then get , , and from the . Sure, this breaks some object-oriented programming rules, but as the adage says: some rules are meant to be broken :) Note that it still involves passing the current state of the . Alternatively, you can implement as an abstract class containing and the equivalent of the methods as abstract methods. Then, you can remove all together and implement four s; one for each direction. 

On the Groovy side, it would still be best to use the method because the property can get out of sync if changes. 

In order to resolve the client with a GORM/Hibernate query you basically need to persist the resolved client value. Based on your method I'm assuming your domain class model goes something like this: 

The meta-programming You can start with a Groovy Category that adds the method Writable moveLine(Object, Object) to a class, such as an InputStream. 

The first pass is similar to your File.eachLine() loop except it's done with Collection.inject(). The inject() method Closure returns a List containing two items: the line which matched the sourceMatcher regular expression, and a List of the entire file with a null inserted as a place holder for the destination of the matched line. The second pass is actually not executed right way. Instead, a Closure coerced into a Writable is returned for later use. The returned Writable contains the code needed to write out the changed file. Using InputStream.moveLine() With the Writable on hand, it's now possible to write the file with the line moved. But to even use the InputStream.moveLine() method the Category in which it's defined needs to be made available. the Object.use(Class) method does this. 

There's some things I really like about your code. For one, you used , which is in many ways superior to -formatting. You also included docstrings, which help others better understand your code. The other answers already covered most major problems. I'll be answering mostly in terms of design choice. Object oriented programming (and why it doesn't apply here) Classes should be thought of as containers that capture 'state'. Methods can act on that state and properties can be used to query it. A die, however, doesn't have any sense of state. A good rule of thumb is that if a class has only two methods, one of which is the constructor, then it shouldn't be a class. I'd go further and say that you shouldn't consider creating a class if you are not confident that there is a sense of state in your program that could be grouped together. If you want to know more, there's this well known talk on when not to use classes. Python 3! Python 3 rocks, and you should definitely start using it right now. Python 2 only has so much time left, and switching to Python 3 isn't that hard. The only changes that affect this code: 

Note: the class as implemented must be initialized with a matrix and breaks if an empty iterable is passed for . 

Yes and no. Your approach works, and it is easy to understand. If, however, you want to keep track of what type of exception was raised, it could be improved. What if you have some super complex function that can raise 10 different exceptions, and you need access to the exception traceback if something goes wrong? You'd need 10 instances. In that case, you should use a instead, which is thread-safe (untested snippet): 

Strictly speaking, there's no need for and , so you should do away with them and make implement the context manager protocol. On the other hand, nothing strikes me as odd about the current implementation (although if you really wanna go overboard, you should create a class to avoid violating the single responsibility principle) and as long as it works for you, just keep it the way it is! 

Most of the code is docstrings, so I'd appreciate if anybody has remarks regarding the documentation. Also, the security of a session depends completely on the implementation of the developer. Is it worth the trouble designing a truly 'encapsulated' class, or is this design okay? 

will do. Python will provide an implicit constructor to call the baseclass. Type annotations can refer to user-defined types. is pretty much useless, since all other types derive from it. Use string formatting instead of string concatenation. It is clearer to read and most likely faster. By directly casting to , without checking if the response is numerical, if a user (acidentally) enters a non-numerical string, the program breaks and prints a pretty unhelpful traceback message. You could try catching a in a / block. If you find yourself repeating the same pattern many times, maybe write a function, which repeatedly asks for input until a numerical response is given. In a function, the keyword can be left out if the -clause returns (or exits the program, for that matter). While it may seem insignificant, this can improve readability (less indentation). Don't use wildcard imports. They clutter the global namespace and can easily cause name collisions. It may work for personal projects like these, but once you start doing the same with external libraries and frameworks, all hell breaks loose. Apart from avoiding name conflicts, by explicitly listing every item you want to import, other developers can see at a glance where an object comes from. I would move the call from to . Subjectively, constructors should not be concerned with starting the game (and doing IO). 

Putting the JSONArray aside (given I don't know the fully qualified name of the class), here's a Groovy-er version: Working example 

In addition, since in the JVM is immutable, concatenation can create temporary objects which the JVM must then dispose of. It's typically better to use . Testability To make the code testable, meaning that it can be executed via a method call and the output can be validated, I placed most of the code into the method. As a consequence, I converted the closure into a method. I know the challenge states If a map is invalid, STDOUT 'Invalid map.' (That includes if the map is unsolvable). However, I disagree with using the same error message for multiple problems. That's one reason I replaced these messages with insightful exceptions. The other reason is to keep the Groovy Console from exiting. 

If you were dealing with two properties that were in the then you'd probably be able to use a derived property. But since one of the properties in an association, a derived property won't work. Instead, you can do this: 

one to determine what to move and where to move it to, and another to re-write the file with the lines moved. 

Since , , and are public, you can just pass the to the instead. Also, has so much functionality that it might as well be a class rather than an enum. In fact, it would be even better if it's an interface: 

This makes use of to handle most of the building, instead of looping and appending to . The only comes in during the case of 3 or more items. Revised It's possible to knock out one of the cases like this: 

You can use Groovy to generate the Groovy source code. The source code generator Here's an example source code generator. 

If you're interested in creating some Groovy mixins, you can make your Fizz Buzz program quite simple, while getting some reusable Excel functionality out of it. The Fizz Buzz Program Here's the business logic of the Fizz Buzz program: 

You'll see the use of methods throughout. It's a practice common in Groovy that reduces the changes of leaving resources, such as files, open. You'll also notice a lack of for-loops. The and methods do the same thing; and in the case of , the index value is set for you :) Inner classes are also gone because Groovy supports multiple classes per file. The Mixins Here's the magic you can use to make this program clean and simple. 

How it works The method iterates through the and calls a closure with an object to aggregate with and the current item in the list. Iteration begins with an empty as the aggregated object, which remains empty unless the un-matching countries are found. When a mismatch occurs, it is recorded in the . The closure purposely returns the because the output of the closure is what's fed back in during the next iteration. Finally, if the resulting is empty, then all of the countries are the same. Otherwise, the contains one or two keys indicating what the problem was. If all you really need to know is whether all the countries matched or not, you can simply use : 

Functions You can greatly improve your use of functions. For example, you could wrap the game logic into a function called and call that. The same goes for your 'main' loop, which can be wrapped in . Improving 

Using wildcard imports () is discouraged for a number of reasons. For one, using wildcard imports can cause conflicts if two symbols with the same name, defined in different namespaces, are imported into the global namespace. Secondly, for other developers, there's no way to quickly tell where an object was defined. PEP-8 proposes sorting statements alphabetically. Unless you have compelling reasons to use Python 2, switch to Python 3! Version 2.7 will only be supported until 2020 (see PEP-373). 

Your code Ram Chandra Giri covered most issues with style conventions. I'd like to point out something: 

I've written a primitive Python script which "draws graphs" based on a list. It works, but it's a lot of lines for what I am trying to reach. The idea of the script is to function as a module that can be imported for a quick visual representation of data. Here's nextgraph.py: 

I'm looking to get some feedback on the current state of the project. What do you think of the setup of classes and functions within the file? Is there a way to significantly shorten the code, without decreasing functionality? -Any other feedback- GitHub GitHub guide I have included a code sample below: 

Your 'main routine' isn't encapsulated in a function, which means it's hard to to test / explore functions individually from a Python interactive session (or from a separate file). I suggest putting all this top level code into a function: 

is already defined in the module as . It is strongly discouraged to use non-English vocabulary in code (including variable names, comments, and docstrings). You should always assume people from all over the world are going to collaborate. In this particular example, it's okay, since the script is for personal use, but keep this in mind for larger (open-source) projects. The code isn't reusable. Because you put everything into the top-level namespace, as soon as I try to import it, I get a bunch of output and an input prompt. We can solve this by separating the code into dedicated functions, in pseudocode: 

Sure. It's hard to judge exactly what you mean by 'proper', but it works, and I don't see any major caveats with this approach. Binding the callback to the button and calling works just as well, but your approach makes more sense. Think about it: Does the callback apply only to the button? At least in the case of the quit-callback, no; no matter what widget has focus, pressing 'q' should quit the application. Some other remarks: 

As is, if I import the module, I get a bunch of text printed to the console. This can have nasty side effects. It's best to assure that part of the code only runs when being run from the command line. Here's where a name guard comes in handy: