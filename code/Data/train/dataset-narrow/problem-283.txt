Overlapping fragments shouldn't occur for "normal" traffic. They are usually a sign of someone trying to circumvent some security system. You are right that there are different ways to reassemble them. Different implementations behave differently, which is why the attack can be used to circumvent firewalls and make those different systems "see" different things. Another way to do that without overlapping fragments is by sending a TCP packet with a TTL that is too low to reach the destination host, but which is high enough to pass the firewall. The firewall will see the packet, but the destination host won't. If the firewall is naive in its implementation it will cache what it saw. Then if you retransmit the same TCP packet but with different data the firewall will think it's a normal retransmit and not examine the packet again, but for the host it will be the first time it receives that TCP data and it will use the second version. There are many ways to mislead firewalls. Overlapping fragments is one of them. A good firewall should detect such behaviour and block the session. 

Most ISPs have to buy service from other ISPs to be able to reach every part of the internet. That is called "transit". If you start a small ISP you usually buy transit from one or more bigger ISPs. They will have connectivity to the whole internet, and they will sell that connectivity to you. You can also set up direct connections to other networks. This is called "peering". Usually those are the networks you exchange a lot of traffic with. Paying a transit provider for the packets you exchange can be a waste of money if you can easily connect directly to the other network and cut out the middle man. Sometimes other networks want you to pay them to set up a direct connection, but in many cases the peering if settlement-free. The problem with setting up direct connections is the number of network interfaces you need, pulling cables between routers etc. Because of that there are "Internet Exchanges" (IX). An IX is basically a large switch (large IXes are more complex, but from the outside they function as a large switch) that many internet providers and enterprises connect to. That way they can all talk to each other, if they want to. One connection to an IX can let you set up direct peering with hundreds of networks. As you can see there is a reason you pay your ISP. They invest in routers, connections, and very likely pay larger ISPs to transport part of their traffic. You could set all of that up for yourself, but be prepared to invest tens of thousands of dollars/euros/etc for equipment and connections. And then you'll probably pay more than you pay your current ISP for the transit costs, as you won't be able to negotiate lower prices for buying in bulk. 

Putting multiple IP addresses on a single interface (and thus a single MAC address) is quite common for servers. For example: if a server has multiple roles and services running on it, it might be a good idea to give each role/service its own IP address. When you later want to move a role/service to a different machine you can do so without disrupting the other roles/services on the first server. 

That would result in . And if you don't want to make the address dependent on the MAC address you can also just give it a fixed address: 

I have seen this behaviour before. It tends to happen when you set the M (Managed) flag in the RA (Router Advertisement) but have a DHCPv6 server that doesn't provide the client with IA_NA (basically a DHCPv6 server that doesn't assign addresses). The client will go into a loop requesting addresses over and over again. If you don't assign addresses with DHCPv6 then you should make sure the RA doesn't have the M flag set. If you need the M flag for some clients then it usually helps to rate limit the other clients. They retry immediately when they receive a DHCPv6 advertise that doesn't give them what they want, but they wait for a timeout when they don't receive a response at all. I don't know why firewalling doesn't work, it should. But remember that the clients will be using multicast to reach the server (group ff02::1:2), so you might need to adjust your filters to take that into account. 

Home networks and mobile devices are usually the first to get IPv6. This is because the devices running those networks are often provided and managed by the ISP. ISPs use lots of IPv4 addresses so they feel the pain of running out. They will need to share IPv4 addresses (NAT, CGN) between their customers to be able to provide connectivity. Those big central NAT boxes are expensive, and by providing IPv6 as well as IPv4+NAT they can lower the load on those NAT boxes and reduce their dependency on them. That will lower their cost so they have an incentive to provide IPv6. Translating outgoing connections from IPv4 devices to IPv6 servers on the internet isn't possible either. An IPv6 address is 128 bits long, an IPv4 address only 32 bits. An IPv4 connection therefore only has 32 bits to use as the destination, and there is no way fit in all possible IPv6 destinations. The other way around does work, and is used in many mobile networks. Every device get IPv6-only connectivity and the DNS server for that network puts the 32 bits of IPv4 destinations inside a special block of 128 bit IPv6 addresses. The client connects to that IPv6 address and a special NAT box in the network recognises the special block, extracts the original 32 bit IPv4 destination address, and makes the IPv4 connection. So keeping home and mobile clients on IPv4-only won't work. Making them IPv6-only can work in specific cases like mobile devices. Unfortunately there are still some devices that need IPv4 in a home (not that many really. PCs, tablets, phones and printers are usually fine without IPv4, but e.g. game consoles like the PS3, PS4, Wii and Wii-U currently still need IPv4) so IPv4 will be around for a little while longer. So home networks will be among the first to get IPv6 next to IPv4, mostly to keep the IPv4 cost down and to avoid performance and dependency problems with large scale NAT devices inside the ISP network. IPv4 will start disappearing in homes once the last devices like game consoles update their firmware to add IPv6 support. Mobile networks have already dropped IPv4 connectivity to the device and make it possible to connect to IPv4-only destinations with a DNS64+NAT64 setup. PS: The Xbox One is the happy exception on the home network. It is built completely around IPv6 and will use backward-compatibility tricks to work on network with just IPv4. 

On a normal Ethernet there is nothing that can prevent devices on the network to interfere with each other. Tools like DHCP can assist in preventing accidental conflicts if used correctly, but malicious or misconfigured hosts can still cause problems. Some things that are common: 

Yes, ULA (Unique Local Addresses) are the way to go. The site-local addresses were deprecated because every site would use the same addresses, which would cause conflicts when setting up VPNs or when e.g. merging companies. ULA was designed to solve this and replace site-local. 

Node-local scope is mostly useful for inter-process communication. The sender and receiver can be different processes on the same node. 

If your firewall does NAT (it really doesn't have to do that to provide security! NAT != Security) then your session will look different on every segment: 

Going from classful addressing to Classless Inter Domain Routing (CIDR) was an improvement that made the address distribution to ISPs and organisations more efficient, thereby also increasing the lifetime of IPv4. In classful addressing an organisation would get one of these: 

It drops all the traffic that doesn't have a more specific route. It is used to prevent routing loops and to put routes in the routing table permanently so they can be announced with BGP. 

The reason that it doesn't have to leave the LAN is that IGMP (or MLD if you use IPv6) only talks to the multicast router on the LAN. The multicast router will take care of the routing.