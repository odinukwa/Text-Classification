I've given no code in this answer, but I think you're getting the ideas. One comment though on chosen algorithm, is that you calculate the value when on the correct depth, but you don't actually use it before you've traversed all child trees and then hit the end parenthesis.This isn't a problem in the current specification, but if it changed to sum up all values on multiple depths, it would fail miserably. My final comment, is that your code does look clean and tidy with good names. If I'd change anything I would possibly add a little more vertical space, and some comments as to what the method is doing. 

In this code I've also added a few comments to explain what is going on, which was missing in your original code. And I used a little longer, but more descriptive variable names. Note that this method has the same space complexity as yours, as it creates a string to be returned, but the time complexity has been halfed as it only traverses the string once. Performance comparison I did a simple comparison test at repl.it (see complete code), running the reversal of a given list of domains (including your samples) 10 000 times, and taking the time. Your version clocked in at around 0.024 seconds, whilst mine clocked in at around 0.013 seconds. That is almost half the time of your code, or a 50Â % improvement. Addendum on memory cost It has been argued by LokiAstari that my solution is not the fastest one, which is a claim I haven't made, and that the cost of memory allocation is more important than traversal costs. When comparing mine versus the OP solution, the memory cost is almost identical as both solutions uses a as input, and not a mutable string. And timings clearly indicate which solution is the faster. If you change to a mutable string, and does an in-place edit, faster solutions does exist, where one is presented here. This does use the double reversing method and in-place editing, but is even less readable and understandable than the OP version, from my point of view. This solution claims to be 3 times faster than my solution (half-heartedly transformed into an in-place edition). 

\begin{align} 1 & \rightarrow 1 \\ 2 & \rightarrow 2 \\ 3 & \rightarrow 3 \\ 4 & \rightarrow 2 * 2 \\ 5 & \rightarrow 5 \\ 6 & \rightarrow 2 *3 \\ 7 & \rightarrow 7 \\ 8 & \rightarrow 2*2*2 \\ 9 & \rightarrow 3*3 \\ 10 & \rightarrow 2 * 5 \end{align} 

you have non-unique ids! This is against spec and you will find that many tools and libraries have problems when using non-unique ids. Instead you should use 

I realize that a service and some sort of inter-process communication (whether windows inter-process communication, HTTP, or something else) is more standard and reliable but I have a frequently changing team and don't want to add another step that is necessary to run the app. This seems to work but I've only launched it in a dev scenario. Am I missing anything that would cause problems in production? That's a System.Threading.Timer by the way. 

A direct answer to your question: Just remember what dropdown controls have been initialized and hide those. 

While this is the simplest and is certainly acceptable architecture it is always a good idea to also consider Composition over Inheritance So instead you might do something like 

where your clicker span gets a class of and your gets the class of . You could just use directly, but I find to be somewhat more descriptive. 

This is honestly pretty good. I usually use to set the paths and configurations on require (it's going to grow a lot as you add things like shims, urlArgs, etc). You will also probably want to reuse it in several places. See my blog article on how I recommend doing this. The general idea is that you don't use to bootstrap things, you instead have a request for the configuration file and another to actually bootstrap the specific page of your application. Next, I'll ask why bother injecting and manually into ? Injecting dependencies is what RequireJs already does. app.js 

Javascript Javascript naming convention are to use with no underscores. It's not a big deal but it's pretty standard. The only exception is to use for variables that are intended to be used with the keyword (which you don't have here). To a lesser extent than php, but with the javascript community where it is, its probably time to start considering choosing a javascript framework (like angular, backbone, knockout, or the like rather than using jquery directly. In my opinion you are over-specifying your selectors, no need to do when id is already specified as unique, no need to when holds no semantic nor structural meaning. Consider that all this stuff is indexed in the browser so by adding more selectors you might actually be slowing things down however slightly. You don't need to use to select, you can just say Your scope management looks pretty good, I'm happy to see you using - another syntax which achieves the same purpose and you might find flows better (or not) is . You've got inline styling and html. Why? Just put the element on your html page and show or hide it from javascript. Finally, just about everything you're doing in js is handled in a very elegant manner by the jquery.form plugin. Just use that. 

Look into using named tuples and/or classes, i.e. your main character could be well served using either. That would allow for coding like or . Which in turn could use a namedtuple with x and y coordinates. Using a named tuple for coordinates could also make some of your logic easier, as you could use loops to check for all the different positions, instead of large amounts of blocks. You also use some anti-patterns, as they are called. I.e. followed by . First of all this could be written like followed by , but the second part is redundant, as has only two values. So you could and should use followed by . A similar anti-pattern is setting the in each and every if statement. Set it once to before all the if statements, and let the statement reset it to . Looks nicer, and is easier to follow. Regarding all those if statements, you could also benefit from combining them using statements in between. Or even better to make a position class with a class method so that you could do stuff like: . That would look a lot nicer... Lastly, I would look into print formatting which could simplify print statements to: . Or if using named tuples or classes: . The manual seems OK, but I would most likely manually word wrap at around 72 characters, to make it read easier most places. But that kind of depends upon where and you are displaying the text. This is not a complete review, but you should have some pointers to get you started on refactoring your code. You are very welcome to post a new question with your revised edition of your game. 

Other than these your variable and function names are OK. Regarding improvement on your algorithm here are some other comments: 

Here I've also renamed the class to , as it seemed kind of strange to use the class to stuff... I've also removed some temporary variables to avoid clutter. I also added a second constructor allowing for providing a different to the constructor. This way you could change the entire functionality of the encode/decode by providing a different properties file. Code is untested as I don't have access to do the resources thingy using my online java compiler, but you'll get the gist of the idea. PS! Using the try-with-resources as Vogel612 exemplifies in his answer, is most likely a better, more up to date way to do the properties reading. 

This solution still only loops through the original just once, but divided into three different parts. 

This is of course fairly advanced coding but it is possible and probably only about 10 lines of code. Like I said you can look at Automapper for some of this functionality out of the box (though I don't know how well it would do with windows/web forms). I will say that what you're looking for is similar to the functionality provided by the MVVM pattern so if you're doing windows forms you can look at Truss. If you're doing web forms...well I wouldn't do web forms, this functionality is already in ASP MVC and silverlight which are both like a million times easier to work with but I remember there being some buzz about the ASP MVP project that would help with those issues. 

For the above reasons I would recommend against using this as a general utility function. However, if this is going to be a specific utility (for example you're trying to create a simple data-binding framework where you know you won't have to worry about the above) this might be the rare legitimate use of the controversial with statement. 

Ok, so I just recently arrived at a way of doing this sort of thing that I actually like so let me share. In my opinion, the if statements aren't really the problem, its more that they are not really pertinent to controller code. Actions should strive to contain code only about major decisions of what code path will be executed. Solution: You take advantage of the fact that a Linq query returns an IQueryable to store the query logic along with the model and an extension method to give it a nice DSL like interface. Similar to the pipes and filters pattern. This is what the action is going to look like: 

It's not really a problem, and I like to gently prod newcomers into learning features like lambdas. That being said, I don't think that your url duplication int the first case is anti-dry, its a perfectly acceptable method extraction and it's private. Within the scope of private methods you can do pretty much whatever you like and it's not going to offend anyone too much. Another possibility that you might consider (though it would be a greater scope) would be to extension method the url so you can do url.ConfigureUriVariable("foo", "bar"). The above would be a bit clearer if instead of a string you used a dedicated Url class. I recommend the built in Uri or make your own. But really, I think you're all good. BTW - the lambda is still compiled to a delegate so the generated CL is pretty similar using either of your techniques. 

Code restructure I've restructured your code to accomodate the already commented issues, and some more style related issues: 

Just an extra note related to using string concatenation or not. The entire block could be replaced by this: 

Note than when checking for multiple colors, you can only return if the loop matches, and keep the empty return after the loop. In addition notice the simple but subtle naming differentiation between and which makes it easy to distinguish between the list and a single element. 

I'm contemplating how to read an int using , and at the same time ignore the rest of the line or flush the input buffer to be ready for inputting the next number. Typical usage would be to read a number where the user is likely to add units or similar after the number, and I want the scanner to be cleared out before I output a new message and ready for the next number. In the following code I firstly use to read rest of line, and in the second I attempted to use the to detect if anything was present. But it originally failed, so to get it to work I had to add a bug-fix related to writing the text "quit". The third read is just to finish off with a final read of an integer. 

For a similar description (and most likely better descritption) of various test levels, see $URL$ second line on "Test levels". Note that the lower test levels here has a higher cost in terms of resource use, and time usage. As such, one tends to automate the upper levels and execute those rather often, whilst the lower levels are executed closer to delivery of the software. Related to Your Question The point I'm trying to make is that your question needs to take into account at what level you're testing. For a Unit Test I would test the function of , but for Integration Test I wouldn't test that particular function but more the overall function of your class. Whether this violates the SOLID principles or not, is yet again dependent on your focus of testing. To properly unit test the details of a class, maybe some of the SOLID principles will be violated internally to the test framework, but in the integration test they should not be violated. For example, in multiple larger projects the firm I've worked for has used the Friend Assemblies (C# and Visual Basic from Microsoft. This allows an Unit Test project to access the inner workings of a befriended assembly/project. Aka it allows the Unit Test to access the members of the class. This could be argued that it violates the Open/closed principle and the Liskov substitution principle, but the benefits usually far exceeds the limitations. It does however imply that if you change internal details like from using an Array to using an Simple Linked list, this will require recoding of the Unit Tests (but not the Functional or Integration tests). Factory or not One of the advantage of using a Factory approach like you do in Option 2, is that allows for abstraction on a different level. This could be in accordance with the Single responsibility principle and the Dependency inversion principle of SOLID. It could also shift the test responsibilities over to the factory implementation instead of relying on testing the inner working of your current class. Using a factory could also allow for different integrations at the switch of configuration. This of course comes at a cost of introducing another layer in your software, and hiding some functionality within the factory. Then again, it also forces you to conform to some standard handling of the data structure (or whatever you're using the factory for), as you only can access it through its public interface). Related to Your Code Depending on the size of the structure using a factory to instantiate it would allow for specialization of it depending on size, speed or other important criteria. Imagining a scenario where this structure holds a large amount of the actual implementation of the structure could change from being held within memory, to accessing databases, using files, using a neural network (if going to the extreme). And done correctly, your code wouldn't know the difference at all. That could be a rather neat feature. If however, you're always talking about a really small structure, this could be an awful waste of resources. Regarding your statement: "although in that case, there's no way to test it", well, that is wrong. By introducing a factory implementation, you reduce the Unit Tests on this class, but should introduce another Unit Test of the factory class. It would also introduce a Functionality or Integration Test on the combination. To Summarize Firstly, I would strongly advice you to look into Friendly Assemblies, as they provide a great tool for unit testing the internals of your code, without exposing functionality outside of your library. Secondly, using factories or other means, to extract the internal implementation of the , depends on various factors like speed, size, complexity, connectivity, and so on. In some cases, it will really help your implementation. Thirdly, if you choose to factorize , it can still be tested, and in some cases it can even enhance your overall system as you have restrained access to the Cells structure, and thusly limited wrong usage of the structure. And the tests can ensure that the public interfaces does what it should, and nothing else.