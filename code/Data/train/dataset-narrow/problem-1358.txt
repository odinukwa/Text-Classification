One of the projects I am currently involved in requires to have a view that is similar to one in the Excel, except that most of the cells are read-only and the area is much more limited (the maximum size is about 300 rows x 10 columns). Based on some parameters, some aggregated values are fetched from the database (or cube), the user is able to change some data and some figures are automatically computed (just like in Excel). One solution is to work client side only (Angular), but I will have to deal with chained evaluation of formulas. An alternative I have tried is to have a virtual Excel document (using EPPlus) on the server side. Server receives changes from the client side (usually one cell is changed), changes the virtual Excel document, gets the changes and reports them to the client. To achieve this I have defined the following classes: 1) Dirty tracking for a single cell 

What happens if your dice changes into a larger polyhedral one? Your ifs statements will not handle the value at all. So, a reasonable version is to use something like 5) Encapsulate your damage simulation in a class Since main is much slimmer now, we expect that everything is handled by a special designed class: // created new class to separate things 

7) Merging counter reset in one place. Also, all the printing will be clearly separated (maybe you want to write the data to a file, database etc., so its easy to see where to change in the future). 

2) Error handling function does not handle any incorrect formatting. Any line which is not in the format name=value will not be imported correctly. You can explode into an and check if elements are defined and exactly two. 3) A more powerful config reader This is a good exercise, but ini files have a more complex format that seems to be handled by parse_ini_file function. 

This is a late answer which already applies some of the previous answers suggestions. However, it will concentrate more on architectural aspects, rather than technical ones (there is a lot of dust on my C++ skills). 1) use classes - since you are working in C++, it is better to encapsulate anything in a class, that does a specific thing (Separation of Concerns). So, your main function should be very slim and delegate the actual work to an object: 

I have considered a simple back-off where I start with a certain period and multiply by a factor. 3. Simple test 

There are several issues with your program, some of them rendering it non-functional. As it is a very simple one, it does not take much time to fix it, but as already specified by Edward, you should submit only working code that requires reviewing. 1) Code aspect You should try to keep you code as organized and homogeneous as possible. Usually, it is not required for homework, but it is good in a programmer's life: 

Besides the naming that should more C# friendly (PascalCase), the application should have a clear separation between data models and view models. Data models are usually generated automatically in database first scenarios or POCOs classes defined by the programmer (code-first approach) and should be separated from view models or data returned by the service layer which usually consists in aggregated information. Ok, for your particular case, data model is : 

Your C# code looks fine, but using non-cached sequences instead of IDENTITY (which would be much easier to implement in Entity Framework) does not ensure a gapless incrementing identifier. According to this Microsoft article, sequences can generate gaps in some scenarios: 

Other aspect is the harcoded number of possible graphs. Are they so different that they must be defined one by one? Do they share common functionality? 

Having the methods above renders almost useless. Even if it kept, it can be safely implemented in the class, as it is expected to look almost the same for all repositories. Also, I would not force s in the repository itself. Maybe the service only wants some ids and not the whole data, so you should leave it the change to include or not data as needed. I would remove from the repository and allow it only in the UnitOfWork. While it might be useful there, in most of the times you must be certain that persistence is transactional, so repositories cannot persist data in their own transactions. 3) DBContet injection in the repository Since you are using DI, even the context can be injected (i.e. MyDbContext : IMyDbContext). 4) Unit of work can be extended with some useful functions, as well. Also, database context can be injected. 

Other repositories can be added here and, if DI is used you should never instantiate this class yourself, so that all constructor parameters are injected. So, your flow should be like this: 

3. Colors can be declared in a separate array Although, chess classic colors are black and white, this does not mean that you will always display them as pure Black & White, so it would make sense to define them in a place to be easily changed (maybe configurable in the future): 

2) avoiding repetation - see DRY principle - as you have already notices, some things are repeating. One way to model your characters actions is to use abilities. E.g. normal attack and howl attack are using the same logic, so they can be unified: 

1. Function name seems to be misleading. It returns true if no repeating character is found, so I find to be more appropriate. 2. Basic input checks - when I began trying your function, I set up a few tests (included in the final code) and some of them crashed. Your code should handle at least basic input values such as null, empty string, string with spaces. 

Defense and CrackShot logic can be separated, to have separate Defense concern from attack concern. Also, all assignments have been contracted (++, --, +=) and reduced number of accolades. It is a matter of taste, but I think that accolades can be missed when if statement is very short and of course, the logic is a single instruction. All the code (not really tested): 

Part of my job is to maintain an old application written in Silverlight talking to a WCF service which in turn fetch/persist data into a SQL Server database and in a BI cube. Most of the security is specified at database level using database roles, users are authenticated using Windows Authentication (integrated security) and no user can access table data directly, only through stored procedures. For persistence user defined table types are used (as input parameters of procedures). As most of the code performs data table construction and reads data quite messy, I thought of developing a small framework to work more object oriented. In order to standardize how data is fetched and persisted, I have created some helper classes and attributes. The vast majority of fetched or persisted data does not go beyond hundreds of rows, so performance is almost never an issue. Also, data can be fetched from both SQL Server and Analysis Server (via ADOMD.NET) Ok, enough talk. Let's see the code: 1) Base class for all data contracts used to fetch data and sent to the WCF client 

' advice is applying DRY principle to your code. It can be extended to also cover and functions, since they are almost identical: 

[later edit] It is recommended to catch exception and also log the detailed information somewhere. Ideally, end user should receive a friendly message and context details should be logged in a file, database etc. Context details may include username, IP, hostname, call stack. For .NET, one of the most used libraries is NLog, which is quite easy to setup and use. e.g. may have the fail for two main reasons that have different exception types: 

So, as you can see, the view model hold the properties required by the view, which are aggregated from multiple data models. Getting data model extra data One method I found convenient (although not exactly orthodox, since it pollutes data models) is to extend the data model with properties that provide extra needed data, like this: 

3) Put clauses on separate lines for better readability First statements could be rewritten like this: 

5) The service that allows the consumer to define document ranges to be tracked, to push and get changes after formula computation 

2) * usage in SQL scripts It is recommended to avoid usage in SQL scripts and provide the actual columns. If columns are added to the table and your code does not need them, their selection is useless. 3) Unhandled exceptions Your code does not handle any of the numerous exceptions that might arise from the operations (I will not go into the actual exception types, but illustrate in natural words possible problems)