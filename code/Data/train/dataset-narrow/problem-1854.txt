Looks like what happens when you have a misconfigured PPTP server and a client disconnects. PPTP server should never use a real assigned IP as its server IP. 

UDP src/dest can easily be mistaken by Snort. Without knowing more about what the traffic is it's hard to say. That UDP portscan rule misfires all the time on VoIP traffic, DNS requests and other things. If you don't have any port forwards or 1:1 NAT to that internal IP, then it's not traffic sourced from the remote IP, it's from the local IP. 

You can with hardware that supports bypass mode in its NICs. That's uncommon in general, but many appliance platforms focused on firewall/other network security roles (from Lanner and others) support bypass. There may be some PCI/PCI-X/PCI-e NICs you can buy that offer the same capability. Can't say I've heard of any offhand, but I've never looked. That's strictly dependent on the hardware and doesn't have any relation to the software. It's controlled in the BIOS setup in all the systems I've seen that have it. 

I'm guessing your listing of LAN1 and LAN2 as both 192.168.1.0/24 is wrong given the capture shows one is 192.168.16.0 and one is 192.168.67.0 apparently, hopefully both /24s. The static route filtering option has no applicability here. I'm guessing you either have overlapping networks (not a /24 mask on both, maybe /16 on some hosts), or one of the affected systems is dual homed on both networks which causes asymmetric routing. 

It depends. As mentioned by others, some applications work better on 32bit OS vs. 64bit OS. The reverse is also true. As mentioned by others, 64bit OS allows for more RAM access than even 32bit with PAE enabled, although PAE enabled OS can general access a lot of RAM. What I have found, much to my dismay, is that the chipset/BIOS puts a limit on the maximum memory I can use. Even with 64bit Ubuntu, my system still can only access 3.2GB of RAM. I decided to return to the 32bit version to take advantage of better compatibility with some consumer applications 

I think you could add the disks to the array and then use something like Partition Magic (or Partimage) to increase the size of the partition on the array of disks. Regardless, you need a backup. RAID is not a backup strategy (as has been written many times in this site). Schedule the system downtime for immediately after the backup has completed, and be ready to restore. 

The InQuira Intelligent Search product allows for the creation of decision trees - they call them "Process Wizards" in part because they include some dynamic functionality. The InQuira product is geared for call centers and includes natural language search, content management, and analytics. 

Some VPN clients are capable of enforcing such a policy. The Check Point VPN client added this feature around 2000/2001. 

I have configured my built-in Windows Firewall (Windows XP SP3) to allow this box to serve as a local FTP server (FileZilla server). The configuration was working until <insert some recent date>. Specifically, I had configured these exceptions on the Windows Firewall -> Exceptions tab: 

The L2TP is strictly L2TP, not L2TP+IPsec which is what iOS requires. L2TP+IPsec is not supported in pfSense at this time. PPTP and IPsec will both work no problem with iOS. IPsec is more complex but not all that hard. $URL$ PPTP is basically impossible to not configure correctly. The fact it doesn't work suggests you either have basic WAN-side connectivity problems, or are using a 3G/4G carrier whose CGNAT doesn't pass GRE, which is common in many places and means PPTP cannot function on that 3G/4G network. IPsec has no such issues. 

Depends on what you need to permit outbound from those servers. Assuming you're using the default of filtering on member interfaces and not the bridge itself, just make sure you're not permitting traffic to your LAN subnet on the DMZ firewall rules. If you need to permit some outbound traffic on DMZ to any destination, add a block rule above all your pass rules with the destination of your LAN subnet to ensure those rules can't apply to LAN-destined traffic. 

They should really route you the second subnet, assigning it to their routers is dumb and a waste of IP space. That doesn't change things too much either way though. A VIP on WAN will suffice in that circumstance unless they did something really stupid with your new subnet, like putting it on an entirely different router and forcing you to route that through it. Have your provider route you the second subnet, then add the routed block's IPs as type Other VIPs. I wrote about this in much greater detail in $URL$ 

Decision Trees look at lot like mindmaps. Freemind is a great tool for creating mind maps very quickly, and the maps can be easily exported to the web. 

Recovering user data, for example, if they delete a file by accident or have a hardware failure. Time Machine or rsync can help you there. Restoring a system from a failed or damaged state into a usable state. This is mostly about getting the OS and any needed applications reinstalled. Damage can be anything from hardware failure to malware infection. I prefer disk/partition images for this. 

Profile the network traffic. Try out some actual monitoring tools: $URL$ You're looking for Top Type of traffic (likely HTTP, but who knows), Top Talkers (should be your servers, but who knows), and potentially Malformed Traffic (large amount of TCP retransmissions, malformed packets, high rates of very small packets. Probably won't see, but who knows) At the same time, work with your management to develop a network resource usage policy. In general, business terms, what business needs does the computer network exist to meet, and what are appropriate uses of the resource. This thing is costing money, so there has to be a business justification for its very existence. Your company has policies for handling the "petty cash" drawer, and I would bet your network infrastructure costs a lot more that. The key thing to focus on is not catching people doing bad things but rather watching for potential malicious activity that is degrading network functionality (i.e., the employees' ability to get their work done). Southern Fried Security Podcast and PaulDotCom Security Weekly cover information about creating appropriate security policies. @John_Rabotnik idea for a proxy server was great. Implement a proxy server for web traffic. Compared to traditional firewalls, proxy servers give you much better visibility into what is going on as well as more granular control over what traffic to allow (for example, real web sites) and what traffic to block (URLs made up of [20 random characters].com) Let people know - the network is having a problem. You are monitoring the network traffic. Give them a mechanism to register network slowdowns, and capture enough meta-data about the report so that in aggregate, you might be able to analyze network performance. Communicate with your coworkers. They want you to do a good job so that they can do a good job. You are on the same team. As a general rule, block everything, and then allow what should be allowed. Your monitoring from step one should let you know what needs to be allowed, as filtered through your network usage/security policy. Your policy should also include a mechanism by which a manager can request new kinds of access be granted. 

You can't have two untagged VLANs on a single switch port, and wouldn't want to do that regardless. You'll likely need two NICs in your machine, one on each VLAN, if you can't route between the VLANs. If your OS supports VLAN tagging and treating that as a separate interface, you could have one untagged and one tagged VLAN configured to do that on a single NIC. 

CARP is like VRRP, HSRP and most other routing redundancy protocols, you must have 3 static IPs in the same subnet. That may change at some point in the future, but it's true for the time being. 

Proxy ARP isn't going to break anything (assuming it's configured correctly, it's possible to screw up any type of IP configuration and break things), CARP and proxy ARP are just two different means of accomplishing the same end result. If you have redundant firewalls, or want to add a secondary in the future, use CARP. If you need anything running on the firewall itself to bind to the addresses, you have to use CARP (or IP aliases in 2.0). If you don't have a secondary and don't ever plan on adding one, and don't have a need to bind anything on the firewall to those IPs, it doesn't matter either way. Sometimes proxy ARP is preferable if you never want anything on the firewall to be able to bind to those IPs, you're strictly using them for NAT. The various virtual IPs and which to use where are covered in much more depth in $URL$ 

I am expanding my rescue usb flash disk. The USB's partition is bootable, and I have installed GRUB to the MBR of the jump drive. It works pretty well - I can boot Freedos and run some utilities,and I can boot PING. I would like to add the Ubuntu 9.10 LiveCD to this rescue usb drive. I have a working jumpdrive, so I can pretty easily copy over the files. I could hunt down the needed entries needed for GRUB, but the Ubuntu LiveUSB uses a fairly complicated syslinux configuration. Besides, I would like to keep as much of the current LiveCD/LiveUSB look-n-feel without porting the syslinux config over to GRUB. At the suggestion of ~quack I tried a entry of: 

Start the capture running, filtering on a windows box. Launch thunderbird. See what comes up. Start a new capture running, filtering on the linux box. Launch thunderbird. See what comes up. Iterate, filtering out stuff that seems obviously not related to the differences between the IMAP connection between the two machines. 

I think that some of the enterprise desktop search products have a management interface for auditing where files are stored, where duplicates of files are kept, and even where older versions of existing files are stashed away. 

It worked. I got a text based set of install menus. I actually prefer seeing all the output when the system boots, so I also successfully used: 

Yubikey? I haven't tried to install it in conjunction with a RADIUS server, but the token is much easier on end user. There are some instructions here: $URL$ 

If you're referring to a DHCP server on the WAN side, you're probably blocking DHCP traffic. Check your firewall logs. 

Probably pieces (maybe more than just dirname) of stock FreeBSD that we don't include in pfSense as they aren't needed for firewall or related purposes. You can just copy over from a stock 7.2 release for 1.2.3. 

There are some overzealous signatures Snort enables by default that are probably blocking it. Check which is getting triggered. They're probably one(s) you want disabled anyway. 

Looks like you're missing a route, or have incorrect policy routing on your LAN rules forcing that traffic to the Internet, the traffic is going over the Internet rather than the VPN. 

You said you have fixed IPs, but mentioned renewing the WAN. I'm assuming it's DHCP, with your fixed IP assigned as a reservation. Not enough info to offer any suggestions. What's the status of the interface before you renew it? What's in the system log when it's trying to renew its IP? Likely either your connection briefly drops out and your modem assigns you a private IP that can't get anywhere, or your DHCP lease fails to renew for some reason. 

You don't want it allowing external DNS lookups. The built-in DNS Forwarder and Resolver are strictly for providing name resolution for your internal machines. If you want a public name server, use something that's designed to be a public name server. The BIND package if you must run it on the firewall, best to use a service provider or something on a separate server. Your note on another comment that you switched to DNS Forwarder and opened it to the entire Internet means it's only a matter of hours likely until you're being used as part of a reflected DNS amplification DDoS attack, because you opened a recursive DNS resolver to the world. Take that rule off WAN so no one from the Internet can reach port 53. And you'd be better off switching back to Resolver, Unbound replies with "query refused" for good reason - its built-in ACL capabilities help ensure you're not able to make yourself open to flooding garbage traffic as part of a DDoS.