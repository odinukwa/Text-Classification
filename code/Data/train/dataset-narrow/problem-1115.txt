You're doing a copy in most of those snippets: if it was possible to do without a copy, it could be faster. Libraries such as Boost often offer two version a specific function: one which copies and another one which modifies in place. is enough, you don't need : 

Use logging instead of this verbose check. This allows you to log unconditionally and logging will decide to print or not depending on the configuration. The module is a bit hard to set up but is worth it. 

You could try profiling but the code is simple enough that I think you're spending most of the time in PyPDF2 code. Two options: 

Style Please use braces everywhere, removing them hurts readability and makes it easier to produces bugs. 

You don't need and : is already a float. Context Another thing to consider is the 'context' of this function: is it called only once, or do you call it for every subject and topic? If that's the case, then it would be better to do the similarity search for all topics and questions, and then display only questions with the same topic and subject. You would go from many SQL queries (one per topic and subject combination) to only one. All Pairs Similarity Search The problem you're trying to solve is called All Pairs Similarity Search. There is a scientific paper and an implementation from Google if you're interested in the research problem. The research applies to sparse vectors but it's possible to turn your sentence into a vector of the size of your vocabulary: a cell i is 1 if the word corresponding to cell i is in your cell, and 0 otherwise. Such a vector is sparse because most cells are 0 for a given sentence. Feel free to ask more questions if you want to try this out. 

Your code is hard to review, since one would need to exactly understand the underlying mathematics, then understand your code, then propose meaningful abstractions. I do hope someone will do it, but I can't. I also believe that for complicated code like that, it's OK to repeat yourself, since it's often hard to encapsulate and to modify without having to understand the whole thing. What I can do is provide some comments on the code itself: 

Use mkdtemp. If you switch to Python 3, use tempfile.TemporaryDirectory which can be used like and the context manager will handle errors for you. 

PEP8 mentions that top-level constructs like functions should be separated by two lines. Hanging indents should have only one level of indentation (lines 43 and 61). Be careful about trailing whitespaces (lines 61 and 89). I love functional style myself but it is often frowned upon in Python, and or will be considered unreadable by some, and elegant by others. Otherwise your code is awesome, well-written with beautiful docstrings and clever ( to drop empty strings, and to the call to ). Thanks for sharing! 

I also used a list instead of a tuple to check for endProgram since it's more idiomatic. I don't think there's much more to do at this point to reduce size. You could find a smarter way to compute the shipping cost (see Kolmogorov complexity) but that would make it harder to change the rules for no good reason. The block which compute amountCategory isn't too nice but since s are not expressions in Python you can't write . You could use a function if you wanted. 

Your indentation is a bit funky, but at list seems consistent, so that's a good point. The ordering of the methods is important, especially when the reader has no IDE (and I think most PHP developers don't use IDEs), and especially for APIs that are intended to be used by third-party developers. Whenever your users will have errors, they will look at your code, so don't confuse them about internals such as or . (I don't even know what does right now.) 

If a specific part of the file is supposed to change a lot, then refer to Krzysztof Adamski's answer. You also need to look at the size of base64 images: storing an image in base64 takes more space than in a file since (about 33%). For large images, it can be a problem. This is where CSS sprites can help: you only use one file to store multiple iamges. If your project is going to get bigger, then you should use the module pattern and a tool like RequireJS to manage depedencies. This is explained in the Learning JavaScript Design Patterns online book. 

Your code is hard to read, and a few test cases would be nice to know what this should handle. For example, to you want to allow multiple lines? Do you want to replace things that are not "amp", like ? Are you sure this will correctly sanitize your inputs? It seems to me that you only want to replace (ampersand + space) by . This version works 1/ for any kind of whitespace 2/ across multiple lines: 

Looking good, congratulations! You can improve your error handling. Trying something and just failing if it does not work is not really helpful, and does not improve on the default behavior, which has the advantage of showing you a traceback. So maybe a first step is to just remove all those try/except? For small scripts, it boils down to personal preferences. Don't use whitespace before colons, and ensure not to use more than 80 columns. See PEP 8, pycodestyle, flake8 and yapf to help you with this. 

Unfortunately, no. Neural networks are not implemented like this in practice. Neurons are not considered individually: the libraries model all the weights of the connections between one layer and the next, because it's much faster to train, and speed is crucial. 

Why don't you ? Comments Your comments are good! I especially liked the comment of the main agent, which helps to understand the state machine. Code Tail Recursion Section 2.2 of the async paper mentions a way to define that is elegant, concise and efficient. You should consider replacing the ugly loops with nice tail recursive functions. :) States I don't like all those "in-between" states, they make your actor look super complicated and don't seem natural. I have little experience with actors, so I can't tell if this is recommended or not. 

Please document your records: types help but I also want to know that the first integer is the document id, and that the second integer is the score, and I want to know it in the record definition. :) Also, watch out your indentation for the last brace. Names: describes the container, but not what it contains: be more specific. The same applies for , I think you could name it or , but I'm not sure. Names are hard! In , I wouldn't alter the logic of your call just to remove the score of . I would pass the whole tuple to , and remove the score after the sum has been made. More generally, it makes sense to have function interfaces that get one or multiple 'document' rather than just document ids just because you need that right now. Defining a specific document type, for example, would help too. If you changed to get a full document including its score, you can call to retrieve scores and to get the sum. That would probably be easier to read but would require two passes: that's up to you! 

I think the way SE displays the code doesn't help. This one is borderline code obfuscation. It's better in your repository (without the comments). :) Consider using a temporary variable. 

You don't need all those here. In CSS, will select your subsections and will make explicit the relation between the big section and the subsections. This also frees your HTML from unnecessary clutter. 

Yay! Only 3.2 seconds in . Removing another 80% But hashing is still not the most expensive part. It's now the computing of RandomData (0.5 + 0.2 seconds in base64 encoding, 0.4 seconds in urandom, and so on). @cHao is right, you only need to compute that RandomData once and find the count that provides the correct sha1 hash. Let's move it out of the while loop: 

(Personal state: I don't really like this pattern where you have braces in the first branch but not in the second.) 

PHP is at its core a templating language, which is why it works so well, and even though you could implement something else, it would provide no benefit. For larger programs, you would however separate concerns and use a framework encouraging you to have a view whose only role is to display HTML (CodeIgniter is a good example). Finally, don't use , it's not secure! Consider using prepared statement in mysqli or PDO. 

Never Trust User Input. Sure, you provided a drop-down, but nothing prevents anyone from sending something else. can be anything: you should check that it looks like a city. 

nitpick: Cleaning at the ElementTree would prevent your filesystem to see two different versions. Say at some point you decide to use watchdog, the callback will kick in before you have a chance to run , which could cause subtle bugs. Answering your questions 

From this point, you know that both keys cannot be pressed at the same time, so you can continue with: 

Edit: about the new method, I'd say Graphics2D is a bit overkill (look at Konrad Rudolph's comment for another opinion). And you don't use the max parameter anymore. Does it stretch the image? The original method is better, but you should have a real : resizing the image twice is a hack. It would look like this: you just have to fill in the . 

The code looks good (it's short, which is always a good thing). Make sure to follow PEP 8. A recent revision of PEP 8 allowed 99 characters lines to "improve readability", but your comment would still be easier to read on small screens (or on CodeReview!) if splitted. An issue I often deal with myself in statements is naming properly and when you really can't provide distinct names. I don't think is a good choice. I'd suggest , while renaming to or something similar. PEP 20 says "Explicit is better than implicit." very early. Your comments could be improved too: a common advice to beginners is to avoid stating what the line i (eg. ), but say what it means (eg. ). You're actually doing both: you just have to remove the useless part! 

How slow is it? Did you measure it? Do you have a lot of nodes? A performant way to store hierarchies in databases is the nested set model. Also, why are you doing rendering in the model? Did you read CodeIgniter tutorials explaining how Model/View/Controller works? 

Note that Tkinter is not considered a very nice Python library anymore, but I don't know what is the recommended one nowadays. Please rewrite your code considering what I have said already, and maybe resubmit the result on Code Review when it's done. 

Your function code does not seem to work. The issue is that is never going to be true, so you'll never assign a new value. You want to write instead. Your code becomes: 

Simply use in the login method. is enough, since is the default redirect type. Since you're doing a , is probably "dead code" here. Use CodeIgniter's Flashdata instead. should be handled in the view, the controller only needs to say there's an error. For example: Trimming passwords is dangerous: what if my password starts with a space? Also, a space will look like a real character in an HTML password form, it makes no sense to trim it. When the validation fails, redirect to the login form and use flashdata to explain what got wrong. 

I would not recommend using here - it's less efficient than List for small collections of elements and is way slower and less natural than sends the accumulator first, so you should not fight, but accept it, by writing: 

Notice that you never use because you always go from the Input to the Synapse, not the other way around. So this is nice object-oriented code, but I think this is overly complex: most of the code ties the objects together: you could get something much shorter: 

First of all, notice that declaring in is confusing. It doesn't make the function "local", since you can call it outside of too. It's hard to tell where the bottleneck is! You only have one visible loop, but who knows what , , or do? Do they have loops? Do they query the database? Did you benchmark the time taken by your function? Do you know where you spent most of your time? Usually, the best option you have is to make sure there is no request to the database in inner loops. Do all your requests beforehand and only work on PHP data. You should also make sure to avoid mixing displaying and computations, since it will make the optimization easier to reason about. 

As you said, if you need something in a pimpl class from another class, then something is wrong. If you can't abstract away the differences, then you can't hide the differences and shouldn't use this idiom. Don't you think it would be simpler to put in ? Each version (Linux/Windows) would have its own pimpl and there would be no need to try to find an abstraction or to try to access private data. Otherwise it gets a bit messy, since your Linux/Windows implementations of will need to accept only the correct implementation: I don't know how easy it is to do this at compile time. 

First make sure the script work: proper indenting, shebang, correct logic. When the user enters 170$, you give him free shipping only because evaluates to which evaluates to true, so it seems simple to just say "otherwise, it's free". You also don't handle errors. I decided to handle the "wrong country" error, but many things could go wrong when inputing the total amount. As other said, first separate printing from application logic: 

My suggestions won't make your code faster, I focused on idiomatic and clear code. It's already quite nice as it is. :) 

This takes 0.035s on my machine and 0.003s when compiled: a 10x speedup! This is a space-time tradeoff. Another optimization allows you get a k-speedup with a 2^k precomputation, but it might not play well with the cache. Now, to get maximum performance, you probably want to get down to C, given the relative slowness of integer arithmetic in OCaml. 

San4ez has the best implementation, and Winston Ewert raised valid points. I'd still like to add a few comments. To answer your question, you should not use on strings, since this means trying to change your string, and strings are immutable in Python. simply creates a new string, also named w. Note than recursive functions are not Pythonic, since there is no tail call optimization, which means it would have been impossible for your recursive call to be optimized anyway. A simpler implementation: 

I understand that those comments help you as a Python beginner, but they should be avoided in real code. As the PEP 8 section on online comments says, inline comments that state the obvious are distracting. You're also breaking the 79 characters rule. 

Style The first thing to do is to follow PEP 8: it's a style guide that says how you should indent your code, name your variables, and so on. For example, prefer to . Files Opening files in Python should be done using the idiom: your file is then guaranteed to be close correctly. now becomes: 

Don't store account and password in your source file. You could move them to a configuration file (that would not be tracked if you used git or svn) or retrieve them from the environment (but then they would show up in your shell logs). Don't Repeat Yourself 

This would make things way less confusing because it would be closer to how and the standard work. Your coworkers would be able to pick your code faster. You would do and only redefine the functions you want to redefine. Your probably can't expect a perfect compatibility, but at least the basic API would be the same. I don't have much to say about the implementation of the functions apart from the return type: ugly but I did not find a way to make things better. And yes, it's quite easy to understand them. 

Thanks for the interesting question. Since you already have an answer focusing on the code itself, I'll focus more on the high-level bits. Why Consul? First, as you noted, containers bring many benefits, but they also bring new problems. Configuration and service discovery are two of them, and Consul solves them both. However, there are many other problems to solve. In the future, you're likely to need to: 

I think looking at this is a good way to review your code. First, what you did is not different, congratulations! The differences are mostly about optimizations, because speed is really important in neural networks. Let's look at the differences: 

The code looks good, but as always, there are always issues one can bring up. I don't believe them to be important though. Your code seems to be getting the job code in a concise way, and if your XPath expressions are robust, there's no need to worry.