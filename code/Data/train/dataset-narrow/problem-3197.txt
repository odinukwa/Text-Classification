I can recommend Elonics E4000 TV-tuner. Here are some links: $URL$ $URL$ Last I checked they’d gone out of production, but may have returned due to demand. Many which claim to be E4000 are some realtek nonsense. Use to see what you have, or take it apart and look at the chip. Calculate PPM with , after installing the rtlsdr package. You will need this offset in various SDR software packages. PPM will drift as your dongle heats up, so heatsink the E4000 chip, and place it in a grounded, shielded box - even wrapping it in (grounded) alufoil will help. The Pi doesn’t generate as much EMI as a laptop, but you will still see a difference in reception quality if you use a linear 5V supply instead of a 5V SMPS. For what it’s worth, the RTL2832U is a perfectly fine SDR dongle, it is just a bit less sensitive, and covers less spectrum. Adafruit sells these at a huge profit, and you are better off getting one from eBay. I use mine with a little dipole, though I had plans to make a yagi for it. Plans... Note that with a USB repeater cable, you can get much improved range in where you place the dongle. It has no noticeable quality loss. Update: The default PPM report interval is much too low... I recommend using , which every 5 minutes will yield an averaged value of the PPM offset. An antenna should be connected when calibrating. 

You don't need to choose between arduino and learning python. On a PI you can make very fast code with WiringPI, in the same simplified flavour of C++ as used for arduinos. You get the benefit of much more memory and faster CPU, networking and a tolerable operating system. The GPIO pins on PI are less rugged, so be more careful. Source (as a rule) only 8mA per output. The pins use 3V3 logic. It's plenty for driving transistors, logic-level MOSFETs etc. WiringPI is available here. It is very well documented. 

Since your PI doesn't even get to outputting a HDMI signal, we know it doesn't read config.txt, or even read kernel etc. Your SD cards are good. Your PI is dead. You baked the CPU with an erroneous connection (or several). The GPIO pins are cleverly connected directly to the CPU, with no protection circuitry. It has nothing to do with the USB WiFi adapter. RIP RPI 

To stop offending processes, as root . It is usually something automagic, like dhclient or wpa_supplicant, and it may try to restart, so begin your aireplay-ng session immediately after doing this. 

Note that the 10ohm resistor in series with the trimpot is not necessary, nor is the momentary button and voltmeter. To completely eliminate noise, you should also use a grounded metal casing, and a battery supply so your Pi is floating. But you’ll discover if it’s necessary. If a LM350 does not fix your problem, you can buy an expensive power supply designed for use with audio equipment, as they have anti-hum/hiss/whine filtering in their designs. I am not into music, but then look for a SE forum for a recommended supply. You should also shield your SDR in copperfoil and connect that to Pi GND. For the Pi itself, I recommend the FLIRC aluminium case, since it keeps my overclocked Pi very cool (it attaches to the CPU/GPU with a thermal pad, and radiates heat away). Here are a few eBay examples, which cost about the same as a FLIRC case: 

I always try to stick with class 4 (or lower) microSD cards, and have never had this problem. Do you supply enough current? Do you have some USB gadget that pulls >100mA? Insufficient power is a nasty microSD cause-of-death. My Pi2B+ gets 2A. I am not putting much faith in the 'use highest quality samsung/knownbrand SDHC' lore. All my cards are noname and cheap. I leave a bit (15-20%) unallocated, since I expect they will degrade faster. Just rename the resize script to autoresizeforfuturereference.sh and move it to /root before booting a freshly imaged microSD card to prevent the autoresize. If your application requires heavy disk I/O, use a USB harddisk with a USB Y-cable, and power it from a sufficient source. 

Sand it a bit with grain 2000 and solder a thin layer of lead-free solder onto it. Do this every few months. The stuff underneath is glassfiber, just be careful around any IC. I'm much in favour of the idea of only powering a moisture sensor briefly, and then turning it off until its needed again. 

You can’t use a voltage divider for this type of load, and using e.g. a LM1117T would only give you ~800mA. And it surges a bit when it is powered up. Don’t feed 3V3 directly to the Pi. More likely the culprit is the 5V SMPS you are using to power the Pi, and not the regulator itself. Use an LM350 to supply power... You may still get the 50/60Hz humming from your antenna, but it will reduce noise considerably. You can use sox (it will run on your CPU and cause a small delay on audio) to filter the humming, but a hardware filter is better. Google. The LM350 accepts an input voltage up to 35V, can output 3A, and can deliver an output voltage of between 1.25 and 33V. It will enter a temporary coma if overheated, and really requires serious abuse before it dies. As a voltage regulator of the old school, it does require some heatsinking, but heatsinks are cheap. It is best to keep the input voltage as close to the output voltage as possible, since the formula: ‘P_dissipate = ( Vin – Vout ) * Iload’ tells us that for e.g. (12V – 5V) * 0.5A = 3.5 watts must be dissipated. And that’s for the standard effect of a USB2.0 port, regulated down from 12V. For P_dissipate = ( 6.5V – 5V ) * 0.5 we get 0.75 watts, a more reasonable amount of wasted energy turned into heat, and that will easily be dissipated. In your use case, something like max 1.5A perhaps: P_dissipate = (6.75−5)×1.5 = 2.625W. Very moderate, considering that a current draw of 1.5A is probably not going to be constant. You can use a 40x40mm heatsink, but note that copper is ~3X times better than aluminium. This matters if you want to keep it compact. 

Run a dhcpd like dnsmasq, and optionally avahi/bonjour/rendezvous/bleh (mDNS) on your laptop, and connect the PIs to your laptop via a switch. Set the hostnames of your PIs to foo.local and bar.local, they'll be easy to interact with. 

Install aircrack-ng package, and use a command like . I believe the default write interval is 60 seconds, it may be lowered with a flag. Parse the files as you please, it makes more sense to use python for that than for scanning (though scapy is awesome). 

Use calmwm (cwm), and in your startup script invoke a program which fills the entire screen (Ex. something written with python's Tkinter). Add your functionality there. Without a keyboard you can't get at calmwm's controls, ex. C-M-? and similar functions. Ensure that your fullscreen app respawns if it dies for whatever reason. You need a touchscreen, of course. You can use vanilla Xorg, or some other WM, but cwm is 'invisible' by default, and completely customizable. 

In places where your circuitry touches the board, use a plastic insulating material (it can be bought in sheets, typically black). Be careful to clip away sharp bits. Use 3mm and 2mm screws as appropriate. IIRC, the Pi boards all use 3mm, whereas PTH boards typically use 2mm. A hard laminate is more rugged than a pure type of wood - always predrill with a 1-2mm drill, directly through the board’s holes if you don’t like rulers and pencils. The advantage is very clearly that - in addition to wood being a great insulator - that you can use old school wire wrap to supply various voltages ad-hoc. $URL$ If you use nails or screws, strip some wires, wrap the copper filament around the nails/screws, and solder it a bit to fix it in place. If you need to route some wiring nicely, use small nails to make corner posts. Contacts etc can be embedded in this material even more easily than in ABS plastic. I personally use plexiglass, which is a bit brittle, and requires care when drilling. But it looks a lot less cr?pp?. Usually I just lay out the bits and get approximate X, Y, then have a goon at the hardware store to cut it for me. 

You can use a PN532 or MFRC522. The Elechouse PN532 is cheap on eBay. Doesn't have stellar range active-to-passive, i.e. when reading or writing tokens, but may have much better speed and range with a mobile phone. Pay attention to voltage, 3V3 for SPI and 5V for I2C. Use libnfc, plenty of samples on Google. $URL$ Note that the Adafruit shield or breakout board (with its hefty pricetag) is only slightly better in terms of range, 1-2 cm. 

It will not usually be recreated, though if it is missing or corrupt it may be - even if corrupt it should not be touched. Paste it, and we'll see. Try as well. Did you play with permissions? 

To check if you've popped it, just use an ohm measurement. You also do not have to waste a day or more praying that your polyfuse has saved you. Or add your own polyfuse: 

The server is the one running a service, any service. In this case smbd. Anyone using this service is a client. The Pi3 is more than capable of serving SMB/CIFS, though if you get jitter, try doing it over LAN connection to see if that's the cause. 

Not an answer to the original question, but relevant to the problem. There is no 3G dongle in the world that requires only 100mA to work properly. These devices need more than 0.5W. Show us the datasheet. What would happen if your dongle didn't get enough current? It would freeze or otherwise malfunction in obscure ways. The Pi3 can source more current on a USB port, otherwise the solution will be a USB Y-cable. Try sticking the dongle into a linux laptop, connect as you would on your Pi2, , and issue . What does it say? 

The receiver should be powered with 3V3 for best reception. The transmitter can do well up to at least 9V. Remove the coil if you add another antenna, and remember that l = 300/f, and f = 300/l . 

Power one male jack from a 3A power supply, another goes into the Pi. Expect 1-1.5A per drive to operate without problems. If you can’t readily or cheaply get such a high current supply for 5V, get a nice buck converter and use it with a laptop power brick. 

Use mkchromecast. It supports both audio and video. Get it here. It is a python script which calls various programs. It will never use as much memory as chrome, but you may need to overclock and heatsink your Pi. 

Consider using externally powered SSD or spinning disks (depending on how much data storage is required). Have a look at external 5.25” drives in enclosures with good reviews. I would personally use a Synology Diskstation, which will you upload backups to a RAID1 mirror on your LAN. You should script a full backup (with for example ) to run daily, at 1AM, or whenever load is expected to be minimal. If using flash memory locally on the Pi, leave 10-20% of space unallocated for TRIM. Gparted will be useful for you to do this. 

. It will periodically spew out captured arp packets. If your Pi doesn't receive arp traffic from a local area network, you are offline. 

You need mDNS service(s) running. It’s called various things; bonjour, rendezvous, whatever. Try running as root, and see if port 5353/udp is open. It’s multicast-DNS for discovery and identification of resources on the local network. Samba should be able to handle it, but if it doesn’t, use and see what you can work with. Of course, look for mDNS related settings in /etc/samba/ ... Since it has worked, you either changed something, or (equally likely) the service has just stopped working. Perhaps after an update, perhaps for no apparent reason. Check in /etc for relevant configurations, see the output of (IIRC). 

This is (largely) automated with OpenWRT, by adding some packages and configuring them via LUCI webinterface. I did something like that long ago. You can search for and install the packages from LUCI - it is almost as sleek as WebGUI. I set up some DLNA stuff IIRC, without using ssh to login once. Samba is in their repository, as are some afp/nfs packages that work almost automagically. I have not looked at OpenWRT, but it is worth looking into for the Pi3 alone, since it costs less than a 'new' router, and likely has better support for e.g. RTL8187. Whether that works in HostAP mode is not something I've looked at, but if the onboard wifi of Pi3 is not yet supported, it will be SOON. Good luck! 

TL;DR: 3-5 hours at moderate load. They use the Ah rating for the li-ion batteries at nominal 3.7V. You can always stick semi-expensive panasonic 2800mAh 18650s in there if the vendor has lied about the capacity. I use some from a golfcart in my USB batteries. Gung-ho. So you have 3.7V*2.4Ah=8.8Wh. Assuming a boost efficiency of 85%, you have 7.5Wh. In my many tests, I’ve had Pi1 and 2 far below 2.5W, usually peaking at 1.5W (I don’t overclock). 7.5/1.5=5 hours. EXPECT less, maybe 3 hours. Can’t recommend the USB ampmeters, use a DMM set to ‘A’, and measure current in series with a pair of clip-on probes. For power longevity, you can do a few more or less invasive things, like cut off LEDs, use memory filesystems, and use google to find powersaving tricks for Pi. I’ve seen libraries for a greener Pi experience. It is better, however, to use a car battery instead, with a quality step down converter to 5.1V. Stepping down voltage is always more efficient than boosting it. Use a LVCO of 11.6V, you’d need e.g. a TLV431 with vref 1.25 for this... $URL$ BTW: The TLV431 can be used with Li-Ion batteries - like venerable 18650s - a recommended LVCO is 3.3V for a parallel bank, or 6.6V for a parallel-series bank. A nice 90Wh S/LA battery is cheap and small. About the size of a baby’s head. A big battery of about 720Wh is the size of lady ada’s head (but not pink or purple), and would let you run at MAXIMUM POWER, SCOTTY! (12W I assume) for <=60 hours... 

You can interface $_anything to mkchromecast, by opening it as a process you pipe data to (e.g. perl's , ) . IIRC it uses keys to lower and raise volume, and is itself a python script - so it is easy to modify these keys. You can get it here: $URL$ As for the dimmer, you don't have an ADC on the Pi, but you can use an arduino and 433MHz module to send to the Pi. This would cost about $5. Or perhaps a HAT. Find some point in the dimmer device that outputs a voltage that correlates nicely to light level, and if necessary drop it with zener diodes to below 5V at maximum brightness. Edit: The Chromecast supports (on TVs that support CEC/AnyNet) at least play/pause/stop, and perhaps also raise/lower volume. 

Use continuity/<=200ohm test on your DMM to ensure you solder the wires correctly. I used a small metal file on my female jack so the solder would bind better. It helps to use 400° and be real quick about it. I’ve often done this on TRRS audio jacks, and if you delay too long the plastic insulating the different connections will melt. This happened on my first try. Best to test it on some of these TRRS jacks before you do it on your Pi. GND will sink more heat before you can solder it, so use leaded solder for that connection. In fact, it’s best to use leaded fluxcore for all these connections, not the unleaded hippie stuff. Use as big a tip as is practical, and to ensure you haven’t made a cold-soldered joint, give it a wee pull when you’re done. I use a tip like this (for a TS100): 

This has been asked and answered many times, but my specific question is not in the list of results when I search. I have a nominal 2.6A supply here, and it remains stable at 5V up to exactly this amp load with no voltage drop. It’s quality. So I would just like to know if I need to do some resistor magic/short-circuit on the TX/RX lines for it to work perfectly with my pi3. I’ve observed on most quality 5V supplies that RX/TX are shorted, and I am aware of apple’s weird voltage divider circus on their iPhone/iPad PSUs - but this is a Pi - does it even pay attention to RX/TX signal lines? My expected max load is 1.5-2A, not more. I’ll pull an extra 5V rail from this PSU for something else nearby. Let me know if I need to clarify. Note: I’ve used a 2.1A iPad charger up to now, and it does not work well at all. Even when I observe a load of only 1.3A, there are not-enough-power indicators when I attach 50mA USB peripherals. A standard off the shelf charger at 2A has no issues... But I need the extra 5V rail for something else nearby. TL;DR: I am connecting 5V/GND to a male microUSB breakout board, and need to know if using resistors or shorting the data lines (the aforementioned RX/TX) will in any way affect the Pi’s operation. If so, how? Update: The PSU wasn’t the issue; I was using too thin, too long a cable. At the Pi I measured 5.10V when it was turned off, but ~4.85V when on and loaded. So I should read 5.25V at the Pi when it’s off:/