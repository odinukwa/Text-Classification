This method needs about 0.0002 seconds to find the solution (or it's non-existence) in all three test cases (sum = 1000, 928, 1001). One note regarding your function name: It might be unclear what is "special" in . Also the "Coding Guidelines for Cocoa" recommend the "get" prefix only for functions that return some value indirectly. A better name for your function would be something like 

While this could all be fixed, it probably isn't worth the effort because there is a Foundation class which already does exactly this: 

The dispatch group has a “counter” which is increased by and decreased by . waits (with almost no CPU usage) until the counter reaches zero. In our case this mechanism is used to start the next page request only after the previous one has completed. Another option is to use a “semaphore”: 

Enumerating UTF-8 characters: Your code uses two nested loops to encrypt letters (based on the UTF-8 code): 

is a operation. In contrast to other languages where a "character" is a fixed-size object (and accessing the n'th character of a string a operation), a Swift represents a "Unicode grapheme cluster" which consists of one or more Unicode scalar values, see e.g. Strings in Swift 2 in the Swift blog. That makes 

Improving the performance: Your algorithm has two nested loops traversing through the list, i.e. the time complexity is \$ O(n^2) \$ as a function of the list length. This can be improved by sorting the list first. One option would be to sort the numbers in increasing order, e.g. 

instead. Note how string interpolation makes the expression more concise and readable, compared to your original 

The parameter is an array used as cache. But in , the same name is used for both the caching array and the computed number of steps. For more consistence, I would suggest to use for the number of steps only and a different name for the caching array: 

because the compiler automatically creates a operator for tuples of comparable elements, implementing the lexicographical order. In your case we have two criteria as well: provider and location. First we need some type to describe and compare the desired sorting order for both criteria. That could be just an , but an integer-based describes the intention more clearly: 

But the real question is: Why does this return an optional? It would return if one of the enum cases is not covered in the dictionary. Let us assume that you add another case in the enumeration and forget to update the dictionary. Now returns . What string do you send to the server? One possible approach would be to force-unwrap the string, so that this programming error is detected early: 

The reduced the execution time for my test code from 0.37 sec to 0.28 sec. The array in this function holds redundant information, memory can be saved by replacing it a by an array of booleans which marks all numbers which have been found to be composite: 

would be stored as the vector . Binary multiplication of the matrix with a "string" (i.e. a 0/1 sequence of length ) is then simply done by XOR'ing those columns of the generator matrix for which the corresponding bit in the string is set. For example, the product of the above matrix with would be 

As a further simplification, combine the optional bindings into a single statement (attribution goes to @Knight0fDragon who reminded my in a comment): 

Update: As @hashemi correctly said, the point would also be reached if the function is called with an empty array. Actually that would also happen if the function is called with a non-empty array but the sum of the given weights is zero. These situations could be considered as a programming error on the caller's side and can be checked with a . @hashemi also suggested to use instead of as data type for the weights. This is more natural because the weights must not be negative (and unexpected results would happen for negative input). Then the function looks like this: 

and the same applies to the properties of . The creation of the fetch request can be simplified with the factory method 

Never use 86,400 seconds as the duration of a day. "Most" days have 24 hours, but in regions with daylight saving time, a day can have 23 or 25 hours (when the clock is adjusted one hour forward or back). Another problem is that you compare the difference in seconds between two days in order to decide if they are on the same day. Then for example "April 3, 10:00" and "April 4, 09:00" will be considered the same day. There is also a bug in your final loop: The loop is exited if two dates are more than one day apart, instead of continuing to search for a longer sequence of consecutive days. I would start by computing the difference in days to some reference date first: 

It remains to find the longest sequence of consecutive numbers (ignoring duplicates) in that array, i.e. no date/calendar calculations are needed from this point on. This should be done in a separate function, which could look like this: 

is quite complex, I would split it into two conditions with /. Putting it all together, the function would then look like this: 

determines it from the table itself. Always computing width and height from the table would be one way to remove this inconsistency. Another way would make the table “know” its width and height. In other words: make it a class with attributes and consequently, make the global functions instance methods of that class. The Python way of printing an object is to implement the 

Here some remarks and suggestions which are not related to the error handling mechanism: Swift uses upper camel case names for types, and lower camel case names for enumeration cases (compare API Design Guidelines. So 

All characters are shifted by the given amount so that a space becomes a quotation mark, and some letters are transformed to non-letters. Also 

this makes \$ N/2 (N+N) = N^2\$ iterations, where \$ N \$ is the length of the array. There are small improvements possible: In the k-loop, if a matching element has been found, you can break-out early: 

Then the unit name and corresponding factor is defined together, and it is less error-prone if units are reordered or renamed. The combo boxes would then be populated with 

I'll cover just one aspect of your program: How a series of network requests is handled. This “polling” 

Here an "array slice" is created and then reduced. Note that this does not duplicate the element storage. Instead of appending a single-element array 

What if the difference is exactly one month and 0 days? The first two if-conditions should therefore be 

prints the winner's name using the method, and you can adopt that to your needs without affecting the rest of the code or the image resource names. 

which returns an array containing the non-nil results of applying the transformation to all sequence elements. For example 

which is “only” by a factor of 5 slower than . Another possible bottleneck is the array bounds check on each access. This can be bypassed by accessing the element storage directly: 

crashes at runtime, because the unicode scalar value is shifted to an invalid value. The traditional Caesar Cipher transforms only letters in the range A...Z, and rotates them, so that shifting "Z" by 2 becomes "B". Lowercase letters can be transformed to uppercase, but other characters are usually ignored (either removed or left unchanged). Here is a possible implementation with an inner function which transforms a single letter. This inner function is used as argument in 

This returns a dictionary of type where each key is a date representing a start of the month, and the corresponding values are the dates in that month. Then 

The Swift standard library defines many methods for the protocol and not for concrete sequences like , examples are , , , ... You can do the same with your method to make it more universally applicable: 

As a bonus, the code now works not only with integers, booleans and strings, but with all types (provided that they are “UserDefaults compatible”). 

You are catching the error and throw your own error code in the failure case, so the actual error information is lost. Better just call the and let an error propagate to the caller of your function: 

Another problem is that transitions from and to daylight savings time are not taken into account in your code (as far as I can see). 

But actually you don't need the index, only the characters, and iterating over all characters in a string can be done more simply with a range-based for loop (added in C++ 11): 

and here is inferred as , so we don't need an extra variable for that. The variable name is also meaningless, that might become 

We are only interesting in the count of matching elements. To improve the performance, determine the count without creating an intermediate array: 

Then you can copy/paste the given data into this file and load it at runtime, so that the main function becomes 

(From $URL$ This also works "Unicode-correct" in the sense that all other Unicode characters are preserved. It is less flexible than your approach however, since you cannot simply change the "offset" from 13 to any other number. 

Is the case really needed? It serves as a "fallback" in if an unknown string is received from the network. But it is not listed in the mapping dictionary, i.e. it can not be converted back to a string. My suggestion is to remove that case, and use a failable initializer for the conversion from a string: 

I am not sure why you need to define custom , , ... types (or type aliases). , , etc are available on all Apple platforms (macOS, iOS, tvOS, watchOS). But if you do so then the names should conform to the Swift naming conventions: 

However, the impact of this change depends on the line length, and I could not observe a significant difference in my test. In order to find further performance bottlenecks, I profiled the program now with Xcode/Instruments (using the input file generated by ) This immediately revealed that most of the time is spent in : 

then the force-cast operator will cause a runtime exception. The correct way is to use conditional casts and optional binding: 

You already use different exit codes to indicate success or failure of the program, which is good. In addition, it is helpful to print some message (to standard error) in the error case. 

The can be avoided, either as @Janos suggested, or by replacing by if the latter is smaller. Your function would then look like this: 

This is already much faster, but you don't need a loop at all! It suffices to compute the number of perfect squares below the lower resp. upper bound, and return the difference: 

Storing the numbers in an integer array is a good choice, as working on a Swift string directly would most probably be much slower. But I would separate the conversions into separate functions: