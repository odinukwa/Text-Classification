I just installed glib in Raspbian(Debian version). I want to read a config file using glib. I am trying to write a C application in Codeblocks and I use the header 

Download geckodriver from below location and add it to your PATH veriable. $URL$ Exit existing command line and reopen the same. This should help you. 

I installed rvm and Ruby 1.9.3p194 on a Raspberry Pi using Debian Linux. When I installed pry using , everything installed perfectly but typing pry in a terminal didn't work: 

What's the proper way to run pry in this Linux? On Windows and Mac OS X I can simply type pry at any command prompt or terminal. UPDATE: Here's my : 

After hardly rebooting my raspberry pi 2 running raspian it does not work anymore, when I turn it on everything works fine until this error message shows up repeatedly. The machine then goes to emergency mode. I didn't find any answer online, any ideas? 

Ubuntu: ou can add the command in the script that is executed at the end of startup. Write the command before . Anything written after will never be executed. Raspbian: to execute commands "at boot", if autologin is enabled (since what it really does it execute them when the pi user logs in), i'd suggest editing the file wich is in the directory. just add these two lines at the end of the file: 

I've got a Raspberry Pi 3 running 24h/24h at 100%: it is costantly at 70°C.. I'd like to know if there are simple and cheap solutions to cool it down. 

it's absolutely possible to use a single board machine of some kind to create a network security system. Here is an example: $URL$ and an instructables project showing exactly what you are looking for: $URL$ 

P.S. you need to have root permissions to edit Python: if you want to execute commands in a python script just do this: 

it probably is a power supply problem. The allowed voltage range is the normal one (for 5V logic) 5.0V ±5% so its a the range between 4.75V and 5.25V. Note that the lower limit of 4.75V is more a matter of many USB devices not working below that value than it is that the PI itself is that sensitive, especially as much of it (including the ethernet/hub chip, and the SD-card) is working from 3,3V through a regulator on board of the PI that will keep working even with say 4.0V. Also note that many 5V logic devices will be damaged by voltages of 6.5V or higher! Therefore there is a protection device on the PI (D17) that will short the 5V supply if about 6.0V is supplied! Then the (poly)fuse will blow out to protect D17 from burning up! If you do not power the PI through the normal micro-USB port then you are actually bypassing that fuse! there is a section of the PI Wiki at $URL$ dedicated to boot problems like this. 

USB power banks vary, but mostly they will have a single 3.7V cell and a boost converter to bring that up to 5V. The cell will be charged to, say, 4.2V and decrease to, say, 3.1V. The boost converter takes this varying voltage and boosts it up to 5V for use by USB devices. The power level is a function of the voltage of the cell. The output voltage will stay the same regardless until the cell is discharged and it shuts off. Unless you take the power bank apart you won't be able to measure the cell voltage from the output. Some power banks do have a few LEDs to indicate level, so you might be able to interface with those, or if you want something more accurate use an ADC (analog to digital converter) to measure the cell voltage. If you've gone that far, you might be better off just using the cell and finding something like a lipo shim rather than designing your own circuit (I don't know off-hand of any that do give more than a simple low battery warning). 

As Milliways suggested, it may be outside of your code. A 10 second cycle is quite long, so monitor for other processes while it's running and also if the core temperature is increasing enough for frequency scaling to kick in. 

4-20mA sensors are designed to work with analogue current sensing rather than digital or analogue voltage sensing inputs you'll more commonly find interfaced to the pi. You are probably better off finding a different sensor, unless you also want to get a 24V supply for it (you might be OK with 12V with that one though), a current to voltage converter, then an analogue to digital converter to talk to the pi's digital io pins. 

The guide you posted tells you where to supply power (DC jack or Wago connector, 'Description..' section 2), and to connect the motors ('two output connectors' 'Description..' section 3, 'two pin motor output connector' under 'H Bridge motor interfacing') As the chip is four half-bridges, each half bridge is controlled by an input (). I would imagine that the inputs labelled AL and BL are the half bridge inputs for the left motor and AR/BR the inputs for the right motor. They do not seem to have exposed the two EN inputs, so you won't be able to do free-wheeling PWM control, only switch between 'run' and 'brake'. On this assumption, the effect of the inputs should be: 

I am using a python script to access my NoIr Pi camera module via the "picamera" package. Yesterday everything was working fine. Today everything is still working fine, however whenever I close my python scrpit, the red LED stays on, and it appears that the pi is still trying to use the camera. When run my script again, it is unable to access the camera due to lack of resources (I.e the previous closed script still has access to the camera) After a quick reboot I can run my script again, but its getting a little tedious having to reboot every time I make a change when trying to debug my script. Any idea's? Update - Code as requested 

I am using my Pi2 to run some Python scripts that are heavily use the CSI camera (being pulled with the picamera module), being processed with OpenCV, and draw a GUI to screen (using the PyGame module) I would like to improve the speed/performance in these areas, which is why I plan to split my memory (giving more to the GPU), but before I do this, I wondered how much of my code is likely to actually be processed by the GPU. I understand the GPU is for all graphic tasks, however the code that performs these tasks run concurrently and are presumably being processed originally by the CPU? and with regards to pulling frames from the CSI camera, I have no idea if this would be a task for the GPU or not? So I suppose my question is, in these two areas, is it worth putting all my eggs in the GPU basket, or just going for a even split? Thanks. 

Apologies for the late answer, but hopefully someone will find this useful. I am using this python package on my pi, and its fantastic! Uses the google recognition engine (the one used in chrome and "okay google") which is arguably the best for accuracy, as well as supporting free form dictation which depending on your needs, could be a real benefit (would allow for example googling a non pre-determined phrase) Only drawback is that it requires an internet connection, and the API key is only for personal use and development, so if you are planning on launching a commercial product, this will not be viable for you. Hope this helps.