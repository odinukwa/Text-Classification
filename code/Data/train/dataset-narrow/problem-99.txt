Notice that the VXLAN interface, has multiple VNIs, just like a trunk has multiple VLANs with tags. Basically, a VNI on a VXLAN is like a VLAN on a trunk. You shouldn't expect that an access interface allow any frames from tagged VLANs, nor should you expect a trunk interface to allow VLANs other than what it is configured to allow. Neither should a VNI have any traffic other than its corresponding VLAN, nor should a VXLAN interface allow traffic for VLANs for which it is not configured. You really, really don't want frames with any VLAN tag coming into the access interface . That could lead to security problems like VLAN hopping. One would hope that frames with VLAN tags coming into an access interface would be dropped as malformed. Also, on interface , the instructs that all incoming frames except those tagged as VLAN 100 or VLAN 200 be dropped, and no frames except those in the two allowed VLANs be sent. Frames tagged with other VLAN numbers will be dropped. The interface will send and receive traffic for VLANs 100 and 200, just like the trunk interface . 

If you are reloading, you want to replace the startup configuration, not the running configuration. Otherwise, the device will start up with the old startup configuration, which is stored on . Replacing the running configuration is always problematic, anyway. You end up merging what you have in the file with the currently running configuration, not completely replacing it. Something like: 

That will send any DHCP requests on the network to the DHCP server at , and it will send any responses from the server back to the originating network. If you have the proper DHCP scope configured on the DHCP server, then everything should work. Doing this removes the need for the DHCP server to have an address on the network, so you can remove the secondary addressing. If you want the secondary addressing on the DHCP server, then you need to set it up with a trunk interface on both the switch and server. 

When used as the equivalent of ARP in IPv4, Alice does not know Bob's MAC address, so Alice can't send anything to Bob's IPv6 address. Alice needs to resolve Bob's IPv6 address to his MAC address in order to be able to send anything to Bob. Alice does this by sending a request to the solicited node multicast address, based on the last 24 bits of Bob's IPv6 address, so it is likely that only Bob will receive the request. Contrast this to ARP in IPv4 where ARP requests are sent to the broadcast address, interrupting all hosts on the LAN. 

Distance doesn't have any affect on bandwidth. The bandwidth is how many bits per second you can send or receive. It may take the initial bit longer to get to the other end with a longer distance, but, if the bits are sent consecutively at 100 Mbps, they will arrive at 100 Mbps. 

You problem is that you are confusing and . The direction is from the router's perspective, so your access list, outbound from the router to VLAN 600 is denying anything from VLAN 600 out to VLAN 600 in an address range not on VLAN 600. You should normally place extended access lists inbound and as close to the source as possible. If you want to prevent addresses on VLAN 600 from contacting addresses in another range, you should place the access list inbound on the VLAN 600 interface. One problem you are going to face with allowing addresses in a different range to access addresses on VLAN 600 is that most things are bi-directional, so something from the other addresses could send something to VLAN 600, but it could never get a reply. 

You should tag frames on trunks between switches. Most end-devices don't understand VLAN tags. Some servers do, but, again, you tag the frames only on a trunk to such servers. Access interfaces don't tag frames. The reason to tag frames is so that a trunk with frames from multiple VLANs can distinguish which frames belong to which VLANs. Access ports only have one VLAN, so there is no reason to tag frames on an access interface. You only set the VLAN for the access interfaces, but do not tag frames for those interfaces. 

With Cisco devices, you do not need to configure a native VLAN, and it is recommended that you do not configure one. Traffic that is local to the link (CDP, VTP, PAgP, DTP, etc.) will still be sent and received untagged, and it will work correctly. This traffic will never be sent beyond the link, even with a native VLAN configured. Having a native VLAN configured can present a security risk, as can the use of VLAN 1 (the default VLAN and default native VLAN). If you don't have a native VLAN, then any traffic spoofed to be on the native VLAN will never travel beyond the single link, and that limits any damage which may be done. You can never delete VLAN 1, but you can limit which VLANs are allowed on a trunk with the command, and just not allow VLAN 1 by excluding it from the list. 

Not really. A SPAN interface is primarily used as a one-way interface; copied traffic goes out. The monitoring equipment on the SPAN interface has no real need to send any traffic into the switch, so there isn't much, if any, traffic that would be redirected from the SPAN interface. 

QoS is a very large and complex subject that encompasses everything from classifying and marking packets, to performing some sort of action (shaping, policing, queuing, etc.) based on the classification/marking. End-to-end QoS involves classifying and marking packets at the source and having comprehensive and consistent QoS policies of how the various classifications/markings are treated from the packet source to the packet destination. 

RFC 4541, Considerations for Internet Group Management Protocol (IGMP) and Multicast Listener Discovery (MLD) Snooping Switches, Section 2.1.2. Data Forwarding Rules places that decision squarely on the switch vendor and network administration: 

From what I can glean from the user manual, HP considers CDP a mode of LLDP. The manual calls it "the CDP compatibility of LLDP." You need to enable LLDP and CDP both globally and on the port. 

OK. You have a couple of problems. First, you need to make sure that the channel is a trunk. VTP only works on trunks. On both switches: 

That is what a layer-1 switch does. You cannot convert a layer-2 switch into a layer-1 switch. A layer-1 switch lets you physically connect different ports through configuration. A layer-2 switch simply doesn't have that hardware. Yes, there is a large price difference, but you will need to get the correct equipment for the requirements. There are several manufacturers that make layer-1 switches. Unfortunately, product or resource recommendations are explicitly off-topic here. You could try asking for one that meets your specific needs on our sister site, Hardware Recommendations SE. 

An ethernet connection such as you describe will only connect at 100 Mbps (FastEthernet). You are incorrect that the cost of is because it connects at 100 Mbps, then the cost is . For STP, a switch looks at the cost on its interface for the link because the cost of a link is the same on both ends, there is only one cost for the link. You only add costs for multiple links to the root. 

There doesn't appear to be any hardware method to reset the software to the factory default. According to the manual, you will need to connect to the switch and reset it through software: 

You don't. VLAN tags are used on trunk links in order for the devices (usually switches, sometimes routers or servers) on each end to be able to tell which frames belong to which VLANs. Devices incapable of understanding VLAN tags should be connected to access ports which do not tag frames. The access port itself is configured for a particular VLAN in the switch, but it will not add VLAN tags to the frames exiting the access port. 

The host in the middle of two networks, both using , would have no way of knowing that is on one of the networks by itself unless you have a specific route for that. You should also make sure that no hosts on the other side have that same address, or the address of . The isolated host () would not be able to send or receive anything except to , and nothing on the other side would be able to communicate with the isolated PC. The obvious solution would be to select addressing for the left side which doesn't exist anywhere else on the right side. You could use a point-to-point link with a mask length since it will be only need two addresses. There are a lot of address blocks which probably won't be used, such as TEST-NET-1, TEST-NET-2, TEST-NET-3, etc. Look at RFC 5735, Special Use IPv4 Addresses, Section 4, Summary Table, for candidate address blocks. In fact, addresses from the Link-local bock () may be ideal for this since those addresses are forbidden from being routed. You also aren't supposed to change the mask size from , but that doesn't really matter for your application. 

The command places you in . If you are using this to back up your configuration () you are writing a copy of the configuration to a file in the file system, not RAM memory of the switch. 

First, Wi-Fi (IEEE 802.11) is not ethernet (IEEE 802.3) any more than token ring (IEEE 802.5) or any of the other IEEE LAN standards other than 802.3 are ethernet. The frame headers are different for Wi-Fi and ethernet. Wi-Fi, ethernet, token ring, FDDI, etc. are all LAN standards for OSI layer-1 and layer2 which encapsulate datagrams for upper layer protocols. Each can transport layer-3 protocols, of which IP is merely one. You are free to create your own or use one of the existing layer-3 protocols for one of the IEEE LAN protocols, but you will need to have the frame for the LAN protocol which you choose. Don't expect to be able to interoperate with any device which is not running your protocol stack, nor can you expect it to run over any routers which don't have your protocol stack (this means no Internet which uses IP). Bridges like ethernet switches or WAPs will transport your upper layer protocols since they work at layer-2, so you could create a LAN. You will need to have the frame header for the type of LAN you are on. For one thing, how does one host actually send to another host without the layer-2 address in the frame. I think you are basically going back to serial communication like RS-232 which has no frame or header, but it relies on extra wires for data control. 

As a locksmith friend of mine once told me, "Locks only keep honest people honest." The bad guys will always find a way; your job is to make it not worth their efforts. If you provide enough layers of protection, only the most determined bad guys will spend the time and effort. You have to weigh the risks with the resources (primarily time and money, but lost productivity, too) that you are willing to put into securing your network. It may not make much sense to spend thousands of dollars and many man hours to protect that garage-sale bicycle you bought for $10. You need to come up with a plan and decide how much risk you can tolerate. 

There are some NICs that perform offloading, if configured to do so by the OS and drivers. This is not universal, and it can cause problems. 

A * is an extension of the Dijkstra algorithm that used by some routing protocols, e.g. OSPF and IS-IS. It is certainly possible to create a new routing protocol that uses A *, but it would really need to add something new to find any acceptance. 

PAP uses a two-way handshake for authentication, CHAP uses a three-way handshake for authentication, and MS-CHAPv2 adds mutual authentication. How you actually configure these depends on your router model, which you have not detailed in your question. 

IPv4 has the DSCP (formerly ToS) field, and IPv6 has the Traffic Class field. Those are just fields in the IP headers. IP itself does not have any QoS. QoS is implemented by network devices, often based on those fields in the IP headers. The fields are to facilitate QoS, but QoS in not part of IP. For example, a VoIP phone could mark its packets as (Expedited Forwarding). The network routers could then be configured with QoS and priority queues for traffic marked , but the routers may not have such a configuration, so even though the IP packets are marked, there is no QoS. You define the QoS on your network to have the policies that you want. You could even place packets in a low-priority queue if you want. Everyone has a different view of how QoS should be implemented, and that is why QoS doesn't work over the public Internet. 

Cisco has documents explaining this command, e.g. Using the Extended ping and Extended traceroute Commands. You can search for on the Internet. 

Based on you comment, I think I see what you mean. You can have a total of four supervisor interfaces. With a single supervisor card, those are all on the single card, but with dual supervisor cards, you split the total of four active interfaces between the two supervisor cards: the first two interfaces on each card are active, but the last two interfaces on each card are inactive. This is because a supervisor card can only handle four interfaces, and only one supervisor at a time is active. It doesn't matter if the interfaces are used as SFP (1 Gbps) or SFP+ (10 Gbps); that is just the way it is. The idea is that you use the four interfaces as uplinks, and when you have dual supervisors, you want the uplinks split between the cards for failover. 

You really need access to R2 to see what the routing table is as you make these changes. As it stands, I don't believe that R2 has routes back to the networks on the other side of R1, so your pings from those networks should fail to R2. 

An IPv4 address is a 32-bit number, and it doesn't matter if the mask is different, all 32 bits are the address, so if they are the same then it is the same address. The mask (or mask length) simply determines which portion of the address represents the network, and which portion represents the host on the network. The network address is a subnet of the network. That means the network is part of the network, but the network also has other addresses not part of the network. The single address is part of the network, and by extension, part of the network that contains the network. The address is the same address, regardless of the network mask (or mask length). The IPv4 packet headers do not contain any mask information; they only have the address, so there is no way to determine from the packet, which network you mean, so yes, you have two hosts with the same address. 

Your WLC should be able to provide this information, or you may need to hire a company to use equipment to check on this for you. You could try to look in the WAPs to see if there are any of those channels which are being skipped, but you are really going to need to know what you are doing. DFS is something that will happen in the hardware. You could only see anything in a capture if a WAP was using a DFS channel with associations, and it detected a radar signal, then it broadcasts an 802.11h channel-switch announcement. That is not something it constantly does, so the timing of the capture is important. 

Simply put, you don't. You are comparing apples to oranges. OSPF, a link-state routing protocol, uses cost, but neither RIP nor BGP use cost. RIP is a distance-vector protocol that uses the hop count as its metric, and BGP uses a variety of properties to determine the direction to send traffic. I would politely suggest that, because you had to ask this question, you simply do not have the skills to properly configure BGP. BGP is a very complex protocol, and you really need to understand it. It connects different ASes (Autonomous Systems) that are managed by different entities, each of which maintains its own routing policies. BGP can suggest something to a different AS, but the other AS is completely free to ignore that and route how it wants to route.