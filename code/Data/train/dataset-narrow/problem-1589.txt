1.) The 7300 series was discontinued a long time ago. 2.) The right box between the ASR1K, 7600 and ASR5K and ASR9K (each an option, but not an exhaustive list) is going to be determined by the features and scale required. Are you trying to terminate 100 sessions or 100,000? Are you trying to do large scale NAT or similar? Scale-out requirements? Any crypto in the mix? Protocols in use? This is usually a much larger question around the types of products and services you're selling. I'd suggest rephrasing to address your requirements more specifically. 

You're conflating two different issues - the category rating (Cat5e vs Cat6) refers to physical properties of the cable itself, specifically the bandwidth (in MHz) that can be successfully transmitted within a given noise/interference window. The physical implementations of various Ethernet specs take this into account (thus 1000BaseT vs 10000BaseT, etc). The order of the colors is a wiring specification. There are two common versions in use: EIA-TIA 568A and EIA-TIA 568B. In general you want to make sure that both sides of a given patch cable are using one or the other. If you make a cable with one side A and the other B you'll have a crossover cable (not generally necessary with modern auto MDI ports and NIC's). The same logic applies to jacks as well, of course, and best practice within a given cabling plant is to choose one spec and to stick to it. Also keep in mind that the order here is more than just cosmetic - keeping transmit on its twisted pair (..and separate from the dedicated twisted pair for RX) is crucial to noise rejection techniques, etc. 568A and 568B are both equally performant, but splitting pairs is most definitely not! 

Run to see if you do, in fact, have a key fully generated and registered under a non-default name. If there is, then you can tell the ssh process to use this key with . If the first command doesn't show anything useful then I'd say you can go ahead and generate a new key. You don't list your complete ssh configuration, so it's hard to know what to remove. Try to see what's in there. In general ssh will start to work as soon as the process has a valid key. Remember that you may need to add authentication and, possibly, vty configuration if they aren't in place. 

A hash algorithm is in use to deterministically distribute traffic across the two links in your channel. This algorithm might be using src/dst MAC address or L2/L3/L4 information in various permutations. For purposes of this discussion let's assume that it's MAC based and that to achieve a 50/50 split we can simply take the final digit in the destination's MAC address and if it's an even number (0,2,4,6,8,A,C,E) it goes on link 1 and if it's odd (1,3,5,7,9,B,D,F) it goes on link 2. If the destination hosts in question have MAC addresses ending in 00 and 02 then they will both (correctly) be placed on the first link. The actual algorithms in use aren't exactly like the pidgin version above, but the effect is the same - over a sufficiently large population of addresses the distribution will approach 50/50. On much smaller samples, however, there's also a 50% chance that all of your traffic will be driven into a single link. The best suggestion I'd have is to try different hashing algorithms. In practical terms your odds get better if more information is figured into the hash - so L3 addresses, L4 port numbers, etc all improve the probability that your traffic will be more evenly distributed. As an interim troubleshooting step you could also try changing the MAC address of one of the receiving hosts to observe if you can influence the hash appropriately. 

Yes - this is expected. A given sequence number can be either a permit or deny and changing from one to the other doesn't eliminate the contents. As to the contents themselves (i.e. match statements) you're essentially telling the route-map to perform a logical OR on the two tags. If you want to only match on 20 then you should issue "no route-map s1 permit 10" 

1.) A given BGP-speaking router is presented the same prefix from multiple peers then it will propagate only the best of those paths (as per BGP's path selection rules). In your case, this means that if some remote router sees both the plain and the prepended route that it will only pass on the plain route to its neighbors. The announcing router will have both paths in "sh ip bgp a.b.c.d" but its neighbors will not. 1a.) The fact that you can't see the prepended route doesn't mean that the backup won't work. The router that has both the prepended and non-prepended route in table will normally only advertise the non-prepended, but if the non-prepended route is withdrawn/times out then the prepended route will immediately be offered. Try this command on your backup router: to see exactly what is being sent to your provider. 2.) It's hard to say what effect the iBGP peering will have without knowing how you're originating (and processing) your prefix. Is there a reason you need an iBGP peer between these routers? 3.) The command will cause a particular prefix to be advertised based on the presence of another prefix. An example might be to advertise 10.128.0.0/16 whenever 10.0.0.0/8 is present. Similarly, will advertise a particular prefix when another prefix is not present. Neither should be required for a basic multi-homing setup. Ultimately the best test is going to be taking time to shut down your primary route to confirm that the backup will take the traffic. Oh - and BTW - are you advertising truly PI space or is the prefix in question part of one of the provider's aggregates? Longest-match trumps everything else. 

The route distinguisher (RD) is used to uniquely identify the provider edge (PE) router originating a given route within an MPLS VPN (RFC 2457bis) network. The RD is a BGP extended community (i.e. 8 bytes) and is typically utilized by remote PE's as a prequel to a standard 32-bit IPv4 route (..or a 128-bit IPv6 route). By convention the RD is supposed to represent a globally assigned BGP ASN and a locally assigned administrative value but there are alternate mechanisms. How do you test an RD? It's an attribute on a route - traffic generation and such really have no bearing on it at all. To see it in action set up an MPLS-VPN network. The various PE's will need to have a mesh of multiprotocol BGP sessions. Depending on the platform(s) in use you'll need to find the command that lets you look at the raw routes being received from a particular peer. These routes should contain both the RD of said router as well as the route being advertised. One of the novel (and handy) aspects of these sorts of setups is that two routers within a given site can advertise the same route, each with its own RD, which means that the PE's routing table can actually contain parallel routes without actually having enabled multipathing. I'd strongly suggest taking a step back and familiarizing yourself with both BGP routing and MPLS as well as the particular implementation of your router vendor of choice before embarking on a mechanism to test something like this. The above may make a lot more sense afterwards. There are a number of great books on the topic but one of my favorites is Yakov Rekhter's "MPLS: Technologies and Applications." 

Run 'netstat -an | grep :161' - if you don't see the address of your Ethernet adapter (i.e. only 127.0.0.1:161) then you need to configure agentaddress in your snmpd.conf. 

I would start by taking a look at your masking. If the general hosts are in 172.17.0.0/16 and your VPN subnet is in 172.17.7.0/24 then it's entirely possible for there to be some uncertain connectivity situations. A general host in 172.17.0.0/16 when sending a packet to a VPN host in 172.17.7.0/24 will attempt to ARP for the VPN host's address (rather than sending it to a gateway). The VPN host, in turn, tries to send a frame to a host in the general subnet. It's going to send via its gateway. If this gateway is a member of both the /24 and the /16 then you've got a similar problem - either it's an illegal configuration or the packet is actually being bridged rather than routed. It's possible you have proxy-arp configured - that would cause a routing device to answer ARP requests in the larger subnet for a host it has a route to, but this isn't clear from your posted materials. It's also possible that you have bridging set up somewhere in the mix. This could yield some strange situations as a standard ARP would work in one direction but in the other some sort of gateway would be called upon to forward a nominally routed frame back out the receiving interface - which, again, might work in some circumstances but isn't good (nb - this could be a source of duplicate ACK's). Can you put your VPN hosts in a non-overlapping subnet? Say give it a 172.18.x.x address and then configure routing between the gateway for this new subnet and the default gateway for 172.17.0.0/16? At a minimum this would make the whole thing simpler to troubleshoot and it very well might fix things. 

Yes. Label assignment is significant only to a particular interface on the box. The LFIB is actually a tuple of inbound interface/label number which maps to the label action (swap, pop, etc) and an outbound interface. If all the labels along the way were identical it would be fine - in fact, there are some instances in which statically defined LSP's have been used where it made some sense to render the ID's the same. The issue of efficiency is actually a bit different than your question implies. The problem with 2^20 label ID's is actually that particular implementations try to keep cycling up through the ID's as paths are set up and torn down, with the intent of not reusing the same ID's. This can yield a situation known as label exhaustion. This is (was) a problem reserved for very large networks and there are now knobs (at least for the bigger players) to ease the reuse restriction. 

1.) You're putting eth0 and eth1 into a bonding group and you're bridging them into br0 - you can't do both. Have you tried putting bond0 in instead? 2.) Also - why do you have STP on? Unless you're trying to bridge external segments together in a redundant topology or are you trying to connect a bonded interface to your VM's? Turn it off unless you need it. 

The included cable is likely DB9 to RJ45. While most Ethernet uses some variant of the RJ45 not everything that uses RJ45 is Ethernet (older digital PBX phones come to mind). Make sure of what you are plugging into - damage can occur (although it is uncommon). 

The link provided suggests that there are three levels of software switching: unmanaged, Web-based L2 and managed L2. The common point to all of these options is that the device doesn't support routing. So - what this means is that any of these switches are going to happily pass frames, whether IPv6, IPv4 or IPX (just picking out a random non-IP example). What these switches won't do is route between different subnets (i.e. the switch won't act as the gateway for the subnet). If you happen to connect an IPv6-enabled router (...to include the Araknis example you've mentioned) then it will be able to communicate with hosts on the L2-only switch to provide connectivity between subnets (..or to the greater Internet, if so equipped). If v6 isn't working at your location I'd suggest focusing on the router configuration to see that there's both upstream connectivity and appropriate configuration on the interfaces. After this the question becomes proper support for RA, routing to the upstream, etc.