On a Cisco Nexus device - depending on the model and the NXOS version it runs - you can get access to a bash shell, a Linux container and/or a Python interpreter (with possibility to import pure python modules). E.g. for NXOS 7.x on the nexus3000: 

Edit1: reading Wikipedia's definition it seems that I had a slightly different view on what a collision domain is, so if you go by wikipedia then items 3-6 in my list above are only collision domains if those ports are operating in half duplex mode. If they are in full duplex then only items 1&2 are collision domains. Edit2: to further clarify, my initial thought (before edit1) can be visualised like this: 

No. In the SYN, the client does not provide any information about its other ip addresses, so the server only knows the ip address that was used as source of the SYN and so it can only respond to that ip address. Wikipedia has a nice article about how this works including this visual representation. 

I think you're 100% correct, and that the problem is not on the upstream router but on the USG. There is a big "If" at the start of your question; it sounds like the USG is not really doing NAT. Personally I don't know this specific product but it seems extremely likely that just adding a static route is not enough, i.e. it is not by default doing NAT for anything arriving on its "inside" interface, probably only for the directly connected subnet. So you will have to somehow tell it to do NAT for 172.27.0.0/16 as well. 

That's a lot of questions, so let's take them one by one. What exactly is 802.1X Port-Based Authentication? From Wikipedia : 

What you might be able to use is a kind of portable femtocell but as wikipedia explains this requires an internet connection so this would probably not help in your desert or jungle scenario (it's more targeted at e.g. basement offices). Theoretically I suppose you could hook it up to a satellite based internet connection, but you would also need to power both the femtocell and the satellite setup so you'd need big batteries or a generator, making it less portable. If this would work at all, as I can imagine that the lag on the satellite link might cause issues. And if you're going to use satellite technology anyway then why not simply use a satellite phone in the first place... BTW this is purely theoretical, I do not have practical experience in this field so am curious to see any comment or other answers. Edit: slightly off-topic as it's slightly larger in scope but perhaps still an interesting read is this article about cellular service at Burning Man (an event in the Nevada desert) and the technical details. 

mDNS is used (amongst others) by Apple's Bonjour service, so if 192.168.0.28, .89 and .240 are Apple devices this is normal, if they are Windows devices running Apple software (e.g. iTunes) this is also normal. The wikipedia article about mDNS also mentions other zeroconf implementations use mDNS, such as Avahi in Linux. I hope this answers your question "is mDNS normal?"; if you would like help troubleshooting the actual problem I suggest you post a separate question for that, with more details about the network (make and model of the network devices, their configuration, a topology drawing) and more details about the problem. 

Yes that is correct, you do not need any software on the devices that communicate through the tunnel. Of course you need to make sure your routing is ok but that is usually not done on the hosts. And you may need to consider that a tunnel potentially decreases the path MTU, see e.g. this doc for an extensive explanation and potential issues. 

However if you actually meant that LAN_B needs to have connectivity to the WAN/Internet, then (in addition to the above) B would need a default route with A as next hop, so on B: 

Assuming this is a client-side capture, you need to take into account that there is a round-trip delay between your client and server, so these timestamps show when the client sent/received packets, not when the server received/sent them. E.g. if client sends an ACK at T=0ms, it arrives at the server at T=50ms, suppose that even if the server responds in less than 1ms the response is sent at T=50ms and it arrives at the client at e.g. T=110ms (since the delay may not be constant and can also vary per direction). So in your client side capture you would see ACK at T=0ms and next data at T=110ms, but that doesn't mean the server waited 110ms to respond. It simply means that the total time of (transmission of ACK + processing on server + transmission of data) = 110ms. So to know for sure, you would need to capture on the server (preferably at the same time as a capture on the client). Without a server-side capture we can only guess, but it seems quite likely that you have a delay of around 20ms between your client and your server, and hence a RTT (round-trip time) of around 40ms (but again, the delay can be different for each packet). Edit: the above values of 20/40ms were based on the timestamps you mentioned, 15:40:31:864 to 15:40:31:901 (which is actually only 37ms), but really you need to look at the first ACK (sent at 15:40:31.862, frame 33) and the data packet in frame 47, received at 15:40:31.922 so the RTT there was 60ms. 

The most trivial example is when router A has a static route (for a certain network) that has router B as next hop, and router B has a static route (for the same network) with router A as next hop, then you have a loop. So router A: 

Configure static IP addresses on the PCs of the 5 users or configure the DHCP server with IP address reservations for those 5 (based on their MAC address, always assign them the same IP address). Then on the ASA you can simply put an ACL on the inside interface allowing only traffic from those 5 ip addresses. Note that this is the most basic solution, but: 

You should not need to add a route on the Sonicwall, as it already has a connected route when you give it an ip address in that subnet. (Edit: well maybe you do, I have no idea how a Sonicwall works but generically speaking if it acts as a router, you shouldn't). What you do need is to make sure that the 192.168.129.x network can reach the 192.168.100.x network. So you should either: 

Then this implies that the port to which the router connects, is an access port in vlan 10, so you could simply configure: 

I see 2 possible solutions (apart from adding a router/l3 switch behind the ASA as Roy suggests in his answer): 

Note that this will also enable other forms of to-the-box traffic (SNMP, SSH, etc.) over the tunnel. See Enabling Management Access 

Note that if the WAN is the public Internet then A would also need to do NAT. Edit: I was assuming A already had a default route to the ISP, which I should not have assumed, so @Gadeliow's answer is correct in that A also needs 

It depends how secure you want to be (and how paranoid you are, or to look at it from another angle, how severe the impact would be of a security breach), and how well your hosts are secured. 

Based on the timestamps, it looks like the device 192.168.1.13 has an ARP cache timer of 10 seconds. So after 10 seconds it flushes the entry from the ARP cache, and (if there is traffic to be sent) it sends a new ARP request. 

Well the way I see it is that they route 4 public IP addresses to you, and you decide whether to use them as one /30 subnet or as two /31 subnets or as 4 individual (/32) IP addresses - or even a combination of one /31 and two /32. In other words if your ISP says they're routing the 10.0.0.0/30 subnet to you then they actually mean that they're routing the ip address range 10.0.0.0-10.0.0.3 to you. Edit: adding an example to (hopefully) clarify further for those that do not understand. Assume this scenario: 

Note that this displays the source and destination ip address, in that order. Since you wrote I'm not sure if you want them in that order instead, I'm not sure if that is possible. If you also want source/destination ports then you may need to tweak the argument a bit. Also note that I'm in no way recommending to use tshark, for all I know it could eat your data; I'm just stating that it has the options you are looking for ;-) 

Theoretically, if the IOS version on your device supports EEM, you could write an EEM script that pings the IP addresses and releases them if there is no response. However this would be much more complex, and I think it might cause duplicate IP scenarios in some corner cases where the router reclaims an address and the device still thinks its lease is valid. In other words, yes I think it is (theoretically) possible but I don't see why this would be better than setting a very short lease time, so unless I'm missing the point it's not worth the trouble. 

From the comments I understand that you mean you have a CA, it's just not reachable by the VPN peers. (If you do not have a CA at all, things are different). As you mention yourself in the comments, installing the CA certificate on each side is enough to be able to valide the peer's certificate, and access to the CA is only required if you want to do revocation checking (i.e. download the CRL). There are multiple ways to solve this: 1) If you control the CA, you can configure it to push the CRL out to a separate HTTP server that is accessible from the VPN peers, and include that server's URL as the CDP in the certificates. 2) If you control the CA, you can configure it to issue certificates without a CDP. 3) On the VPN peers, you can configure "crl nocheck" under the CA trustpoint. Obviously, solution 1 would be the most secure as it still allows revocation checking. 

When you use a TCP socket, as the name "SOCK_STREAM" indicates you are not writing individual packets to the socket, but a data stream, and the way TCP handles this is transparent to you. So if you write 1461 (or 1,000,000 for that matter) bytes to the stream, at the other end you will be able to read 1461 (or 1,000,000) bytes. TCP automagically takes care of chopping the stream op in segments (this is where the MSS comes into play), retransmitting lost segments, re-ordering segments that are received out-of-order etc. If you do a packet capture (e.g using tcpdump or wireshark) then you will see (part of) that, but to your process using the socket it is all invisible. 

Edit: you could also have a look at cefcFRUPower and everything below it, for more info about the po 

create a new profile (containing the new name) and distribute this to your users somehow out-of-band (e.g. email it to them or email them a URL where to download it) create a new profile on the ASA and tell your users to ignore the certificate warning (just this once :)) so they are able to connect, which will automatically update the profile.