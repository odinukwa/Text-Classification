The replication topology that you are describing is known as the Central Subscriber Model which is comprised of two or more Publishers replicating to one Subscriber. The dilemma you are having is how to go about initializing the Central Subscriber, which is a common conundrum. I have talked about this in detail in my post Central Subscriber Model Explained and have found through experience that the best way to initialize a Central Subscriber is with a snapshot, utilizing horizontal partitioning, static row filters, and setting the Action if name is in use article properties to Delete data. If article has a row filter, delete only data that matches the filter. If you have anymore questions please let me know. I hope this helps. 

The reason the round trip is not occurring is because your subscription from Server B to Server A has its @loopback_detection property set to TRUE, which is the default setting. As we can see from sp_addsubscription, @loopback_detection specifies if the Distribution Agent sends transactions that originated at the Subscriber back to the Subscriber. If set to true, the Distribution Agent does not send transactions that originated at the Subscriber back to the Subscriber. If set to false, the Distribution Agent sends transactions that originated at the Subscriber back to the Subscriber. I'm aware that the documentation states that this property is used with bidirectional transactional replication, however, I have reproduced your scenario and it appears to be being enforced with plain vanilla transactional replication as well. Dropping the subscription and adding it back with @loopback_detection set to FALSE alleviated the problem and allowed for the round trips to occur. Technically your topology can be considered Bidirectional Transactional Replication since both servers are publishing and subscribing to and from each other, even though the articles are different. Keep in mind that you will need to drop and add the subscription back with @loopback_detection set to FALSE since sp_changesubscription does not allow you to change the @loopback_detection property on the fly. I hope this helps. 

After executing sp_addarticle, execute sp_addsubscription to add the article to each existing subscription. Then generate a new snapshot. The Distribution Agent should then copy the schema and data for the newly added article to the Subscriber(s). 

It depends on your workload. As a baseline, use Performance Monitor and log the network counters when not using Log Shipping or Transactional Replication and measure for 1 hour. Then setup Log Shipping and use Performance Monitor to log the network counters for 1 hour. Then setup Transactional Replication and use Peformance Monitor to log the network counters for 1 hour. The network bandwidth that Log Shipping and Transactional Replication consumes is the difference between the collections and the baseline. The same can be done for memory and I/O. 

The snapshot folder is configured per Distributor. The stored procedure sp_helpdistributor returns a column directory which is the snapshot folder for a specified distributor. 

You have probably read that you are able to deliver the initial snapshot via FTP. This is covered in Deliver a Snapshot through FTP. It is possible to replicate two SQL Servers across a VPN. This is covered in Publish Data over the Internet Using VPN. Once the VPN is setup, you should be able to connect and authenticate as though the servers are on a LAN or WAN. If you have anymore questions please let me know. I hope this helps. 

Your Snapshot Agent process account does not have sufficient permissions to access the snapshot folder. In the section Permissions That Are Required by Agents in Replication Agent Security Model, the Snapshot Agent process account requires db_owner in the distribution and publication databases and needs read, write, and modify permissions on the snapshot share. Have a look at Lesson 2: Preparing the Snapshot Folder for more information. 

To do this without recreating the publications and subscriptions - backup the publication, msdb, distribution, and the master databases. Then restore them on the new Publisher that has the same name as the old Publisher. Use the keep_replication switch when doing the restore. A DNS flush may be required but afterwards the Subscribers should begin synchronizing. This may or may not work for you. I highly suggest testing the migration out in your test environment prior to production deployment. I would also like to add that you may have to back up and restore the Service Master Key to the new Publisher as well. The is tied to the distributor_admin login that is created for the linked server when you Configure Distribution. If this doesn't work for you - you can you can configure Distribution on the new Publisher/Distributor, and recreate the publication and subscriptions from backups. The subscriptions could be configured as replication support only if done during a maintenance window with no changes occurring. This would avoid sending down a new snapshot. If not done during a maintenance window, run a data validation to see how out of sync you are with the Subscriber and use tablediff utility or SQL Data Compare to bring the Publisher and Subscriber back into convergence. Reinitialization is an option as well. Also, if you are upgrading the Publisher SQL Server version then there are considerations to make which are covered in Using Multiple Versions of SQL Server in a Replication Topology. It depends on your replication type. 

The recommended approach is to have replication agents run under Windows accounts, not the SQL Server Agent service account, and the accounts should be granted only the required permissions. Create a dedicated Windows account for the Log Reader Agent, grant it the appropriate permissions covered in Replication Agent Security Model, and use this account for your Log Reader Agent Security. 

Then, grab the snapshot files from the publisher and compress it. For example, on my server I compress the snapshot folder found in C:\Program Files\Microsoft SQL Server\MSSQL10_50.MSSQLSERVER\MSSQL\repldata\unc. I then copy the snapshot folder to the subscriber using file-copy or FTP and decompress it in a folder called C:\TEMP\unc. So looking at this on the Subscriber I would see this for the snapshot folder: C:\TEMP\unc\PACIFIC_TESTDB2_TESTMERGEPUB1\20130207200123 Then from the command line on the Subscriber, run this: 

This is a very good question but at the moment, initializing a subscription from a backup stored in Windows Azure Blob storage is not currently supported. I believe this would be a very cool feature for replication and I'm sure the folks at Microsoft would agree. I suggest proposing this idea on UserVoice. However, since you've already restored the backup, and the schema and data are already in place at the subscriber, try executing sp_addsubscription with the @sync_type of 'replication support only' and see if that meets your needs. More details for initializing a subscription manually can be found in How to: Initialize a Subscription Manually. 

Please follow the steps in Create a Snapshot for a Merge Publication with Parameterized Filters to generate a new snapshot. You must first generate a standard snapshot, then generate a Subscriber-specific partitioned snapshot. After generating the snapshots, mark the Subscriber for reinitialization and start the Merge Agent to pull down the schema and data for the filtered subscription. 

There are cases in Merge Replication when parent and child rows can be processed out of order on synchronization resulting in constraint violations and conflicts. To understand how and why this can occur and how it may apply to your specific scenario, I recommend reading through: 

The Snapshot Agent process account used to connect to the Distributor must be db_owner in the distribution database and have read, write, and modify permissions on the snapshot share. The account used to connect to the Publisher must be db_owner in the publication database. The Log Reader Agent process account used to connect to the Distributor must be db_owner in the distribution database. The account used to connect to the Publisher must be db_owner in the publication database. The permissions required by the Distribution Agent process account depend on whether you are using push or pull subscriptions. For push subscriptions, the Distribution Agent process account used to connect to the Distributor must be db_owner in the distribution database, be a member of the PAL, and have read permissions on the snapshot share. The account used to connect to the Subscriber must be db_owner in the subscription database. For pull subscriptions, the Distribution Agent process account used to connect to the Subscriber must be db_owner in the subscription database. The account used to connect to the Distributor must be a member of the PAL and have read permissions on the snapshot share. The is all covered in the section Permissions That Are Required by Agents in Replication Agent Security Model. 

Adding an a new article involves adding the article to the publication, creating a new snapshot, and synchronizing subscriptions to apply the schema and data for the newly added articles. Reinitialization is not required, but a new snapshot is. Your steps are correct if the publication only has existing push subscriptions. If the publication has existing pull subscriptions, you will also need to execute sp_refreshsubscriptions. And you are correct, to generate a new snapshot you can use the View Snapshot Agent dialog, or you can execute sp_startpublication_snapshot. To avoid generating a full snapshot when adding a new article, publication properties @immediate_sync and @allow_anonymous must be set to 0. Execute sp_addarticle, then execute sp_addsubscription. If the publication has existing pull subscriptions, you must also call sp_refreshsubscriptions. Then generate a snapshot and only a snapshot for the newly added article will be generated. Note that this approach is not necessary but is typically used when Administrators want to avoid generating a full snapshot when adding a new article. Please see Add Articles to and Drop Articles from Existing Publications for more information. 

There isn't a built-in or easy way to do this with Web Synchronization. You're best bet is to programmatically monitor Merge Agent sessions at the Publisher/Distributor using sp_replmonitorhelpmergesession and sp_replmonitorhelpmergesessiondetail. You can script this out and poll on a schedule.