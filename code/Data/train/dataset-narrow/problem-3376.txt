I'm using latest version of Raspbian from $URL$ I've made changes to this image, can an image copy be taken which includes all OS changes made to Raspbian and copied to another MicroSD card ? So if current one fails I use card used to make copy ? 

I'm imaged sd card with latest version of Raspbian : $URL$ This comes with version of iptables. However there are no rules configured. Do I need to add a rule in order enable connectivity between multiple pi's on network on non standard ports such as 7077, 6066 ? 

I've tried allowing all traffic via iptables. But not sure what else I can try ? I can connect to service on PI1 from PI2 running on port 8080 : 

I'm awaiting delivery of RaspBerry PI2 and have created an SD card with Noobs by extracting : Version:1.4.0 Release date:2015-02-18 from $URL$ So top level SD card folder structure appears like : 

I;'ve just purchased a raspberry pi b+ and the Noobs card. I've inserted the card into the slot on device and heard it click. But I'm able to remove the card easily without re-pressing the card into its slot (which ejects the card). Is this is expected or should the card be locked into place until pressure is applied to eject it ? 

When I login to PI (SSH via Putty)from multiple machines using same account (PI/Raspberry) will memory be shared among the different login's ? I assume some memory overhead will be required to maintain the connection to multiple machines but the memory required for the login session will be shared (which includes any running programs for that session) ? Update : I require minimizing memory usage of PI, so want to ensure memory is not wasted managing multiple user sessions 

Noobs apparently comes with software that I may not use. I just require ability to SSH (via putty) and upload files to PI using FTP. Also I will be installing java. So should I still use Noobs or use a custom installation ? I'm not too worried about wasted disk memory but I want to keep the 1GB of RAM as free as possible, so will some Noobs unused software waster RAM ? Is there a more RaspBerry PI2 OS that I can use which just contains following : 

I am trying to control the ESC (Electronic Speed Control) of my Traxxas RC car with my raspberry pi (rev.2). I have been looking through the internet and while I can find some projects that seem to have done it, none seem to be explaining: pin connections, init sequence on the PWM and how to program the control software. The XL-5 has a 3-wire connection going into the micro receiver unit: a black one (ground), red one (power, assuming 5V), and a white (control).. this is as much as the Traxxas documentation provides. I found that the ESC can get its power from the car battery connection so I am not sure whether the red/black is actually required. I plugged the white wire into GPIO-18 and put it in PWM mode using the GPIO utility. I understand that an ESC expects an initialization sequence to start but I can't seem to figure it out. Any idea? 

I have resolved this. Thanks varesa for the note. Your information is correct but there are 2 elements that I think miss in all of the documentation I've ever found on this. 1) The pi is not the right PWM controller to do this if you need it to do anything else at the same time. Maintaining control over the pulse frequency requires its own controller. I added a PCA9685 board to the setup (Adafruit has a good product). That chip can control 16 PWM devices simultaneously. You communicate from the pi to the 9685 through I2C and the pi does a very good job with that. I use a 3.3v pin of the pi to turn the 9685 board on and off (it also gets 5V from a USB battery). The 9685 has its own set of challenges but you can find pretty good doc on that. Basically, it runs a clock at 25Mhz. You set your frame size using a formula available in the doc. Remember that 20ms frames = 50Hz. It's a 12-bit controller so your values range from 0 to 4095. If your pulse need to be 1ms in a 20ms frame, that's 1/20 of 4096, which is roughly 200. 2) The second issue is that this ESC can be turned on in many ways. The documentation says you need to press the 'on' button until you get one red flashing light for full ON forward, full on reverse. If you keep your finger pressed, you then get 2 flashes and it goes into race mode, which is full ON forward, and no reverse. Then there's a third mode ('training') with 3 flashes for half forward, half reverse. Here, the trick is to just keep your finger pressed until the light turns green and then release. Surprisingly, green means it is just ON. As soon as you will initialize the PWM controller and arm, the light will turn red, which means it is ready to move. Really kinda tricky. The basic arming sequence is to turn on on idle, go to max forward, back down to max reverse and back to idle. (I actually don't think my code does this anymore as it just works) I posted 2 small update videos on youtube if you want to see the product. It is very very far from what I want to do but it's a bit of progress. $URL$ and $URL$ I've been using github for my code, if you're interested. $URL$ 

Is this what you typed in? If so, this is messed up, and you should replace it with Gort.py Exec=/usr/bin/python/home/pi/Gort/py 

I know this is very old, but I will answer anyway. I think you damaged one of the parts the Raspberry Pi uses to run the SD card's filesystem. 

I have a B raspberry pi and I want an OS that works well with small screens. The raspian OS isn't working well with my 5" screen. The graphics is the correct resolution, I don't need help with that, but the windows and text are too big. Can someone recommend a solution(preferably a OS specifically designed for use on small screens) I know how to do this and already have done it: 

Okay it seems like there are a lot of misspellings here so I am not sure but I am pretty sure the problem is one of these: Comment= Gort Pi Status Info --------------^ The space will mess it up. 

Sounds like you are using sh instead of bash. sh does not do the last command thing. Just try typing in bash and it probably will work. Edit: The ^[[A thing is just the up key in some kind of terminal special key(space, control, F1 - 12 keys, etc.) thing :P 

How can I make my Windows 10 give out an Ethernet connection to my Raspberry Pi, and what do I have to do in my raspberry pi's files? P.S. I don't know where else to put it, mods, please direct me to a better place if there is one. 

to output from it and take input(same thing except with GPIO.IN instead of GPIO.OUT) or use a ground pin. These are the pin numbers 1-26 (pi 1 pins are all you need): $URL$ GND are ground pins and for output use the GPIO# ones Question 1: Probably not, because of the resistor and transformer, but you might want it as a precaution Q2: Yes, you should 

I think it is safe. I tested it on my B and A and it seemed to be fine. It didn't seem to save power though. 

Smething with t permission is something that can only be moved or deleted by that object's owner, the directory owner, or the super-user. 

If you connect your wires directly to the GPIO your raspberry pi will explode in sparks or maybe something less direcly harmful to it. No joke. Good that you have the transformer and resistor. You should wire it to a pin and then use this code: