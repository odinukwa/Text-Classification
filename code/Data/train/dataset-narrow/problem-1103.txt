Naming something "current" makes me wonder what it is. From your code, I have no idea, so it forces me to spend time on looking around and getting clues, for what should be made clear right up front. 

"A service per controller" sounds like a bad architecture. A good service should 'know' nothing about controllers and presentation details. Controllers should be thin, and any repeating code there should be abstracted into general purpose services not specific to controllers. "UserViewService" should never be a name of Controller! And comments are not there to fix the confusion created by bad naming! In Angular, there are , , and - these are your Angular templates. You can have and , then your template can be called . Having inside your Controller looks like a "code smell" to me. Controllers are only executed once upon initialization, and their purpose is to glue your data to your view (via Angular's (which is in the layer). The data should be either ready or you should get it from a service. Any other work like object creation is bloating your controller with too many responsibilities. Further, it is Angular's job to create Services for you, so no need for whatsoever. This function naming is misleading: 

If instead function's name tell me what it does, I can understand the line without even checking the function's definition! 

You are using the non-standard package which requires at least some explanation or code or better both. 

I would avoid using hard-coded "magic" numbers inside your code, including ids like etc. The main question to ask: 

I suspect is not specific to Job Applications, so a more generic name could be more helpful. Why ??? is prob better to name 

Also it does not feel right to do DOM manipulation with jQuery-style, maybe use dynamic property instead. If having additional elements in DOM is really a concern, there are also and . Though I personally prefer exactly because this way I don't have to rebuild the DOM. To put this into perspective, I have tried using on my site 33hotels.com, which does rebuild the view every time the route is changed. That felt in considerable delay. Instead I have all my Views inside my DOM at all times and only them depending on the route. The performance difference is dramatic - it now feels instant. Finally, both templates have common fragment, which does not make code feel DRY. Upon any change you'll have to edit each of them. I would simply keep the common part outside any directive, and put the dynamic part inside whatever. Also note that the HTML tag has semantic meaning, not presentational. That is, it marks your main header. Any presentation adjustment should be done via CSS. 

First of all, for a better user experience, I would avoid pagination in favour of infinite scroll. Here is a simple Angular infinite scroll implementation I presume you are aware of minification-proof technique , so won't go into that. Next, I see many fields like , , ..., mixed with , which can lead to namespace conflicts as the app grows. Hence I would gather all data-related fields into one object like . Then you can simply pass the whole object from your service instead of assigning one-by-one. The hard-coded declation is mixed with others provided by the service. Perhaps it belongs to a Config service together with other hard-coded properties. Also I presume you are aware of the difference between using vs in terms of their interactions with parent and child scopes. EDIT. Unless you know what you are doing, a recommended practice is to use . That way, in a child controller, you have both read and write access to it. If instead you use , then changing it from a child controller will add a variable on the local scope but won't change the parent scope as you likely intend, see here. EDIT. See also Misko's video on best practices, including putting the dot inside your property. suggests that you are using service just for one function. I would gather those functions into one bigger service like . You already have lots of dependencies for your controller, so lowering that number can be a good thing. Similar for . I am not sure why you define filters inside a controller, rather than with as common. Usually filters declared via update themselves, so no need for watchers. 

or even better avoid side-effects mutating variables outside your function by making them instead return all the necessary data: 

If it is performance you are after, the scroll till you drop directive by Angular UI may help. A common mistake is to throw too many array members inside your DOM via , but you are already limiting your input... You may consider using custom filter instead and making sure it is fast. 

I get no clue what the function does from its name. So I am forced to scan the rest of your code for its definition, which costs time. You could help me by giving it a name that would give me a rough idea without the need to go elsewhere. Another thing I see is the use of inside controller, which is an anti-pattern. It sadly appears in many tutorials, yet it breaks one of the most fundamental principles of clean code - the single responsiblity principle. Your controller is responsible for gluing your scope (ViewModel layer) with your View, but not for pulling data from your Model layer. That is the job of a dedicated . 

If the freedom wins, any of these numbers is a recipe for future bugs. And even if the numbers are engraved in stone, every marking element needs a reason to be there. So what is the reason for ? 

Are the files you provide correspond to ones used by others? The best practice is to write the actual file name at the top of the file in the comments, otherwise there is no way I can find out. 

Using is an anti-pattern and sign of bad architecture. What if you code changes together with your parent chain - it will instantly break your code. Also, have you thought about how you are going to test it? 

The latter creates a global variable that I have to remember and maintain and carefully watch not to misprint. 

There is a lot of repetition in the code. and similar after every switch can be replaced by single Every time a data object is created, which deserves to be outsourced in a dedicated service. So is the server request - NO inside a controller. Controller's responsibility is only to glue the data from services, not to do more. has way too many argument, a single object argument makes it more readable. Also usage is preferable. 

To have a clean readable code, you want someone looking at it immediately see the meaning. What is the meaning of this object? - 

First I wouldn't name the directive and an attribute the same The attribute can be better named like or . Next, is not defined on your controller. This is counter to the basic MVC structure where View reads from the Model, which is here the ViewModel defined by Angular controller. It works but makes the code fragile and harder to read. Ideally the view should not write into Controller, but rather use commands defined by the controller to update the model. I don't see your filter and its purpose. But normally you would either create a dedicated Angular Filter and put it into the view, or let a dedicated service do the filtering and the counting and anything else. There are several responsibilities here and it is better practice to separate them, rather than put all the logic into one directive. 

You seem to separately download your file from Google, and then upload to Parse. So the "transfering" in the title is misleading. Having said that, the code is well-structured but the naming is bad. 

That way the scope is properly encapsulated and will not clash with other controllers via inheritance (unless that is what I am after). Also I am renaming to (Main Controller), which protects against change of (e.g. inside event listeners), and make every property look exactly the same inside HTML and the Controller, which makes things very readable. 

If the only reason is to avoid a few more DOM elements, this sounds like an overkill to me. It is so much easier to use or hiding/showing depending on the class like it is done in TodoMVC: 

Last but not least I have changed the way controller's list is linked with one of the service. That is 

Your code is sensitive to how behaves. You seem to expect error if it fails but what if silently returns or without failing? It would go through another loop and overwrite the previous setting. I would also encapsulate the loop inside a function that I can both test and debug. Also I would make sure that function returns a unique failure result, not dependent on the browser. 

That tells me as reader a lot and leaves vast room for future changes without breaking the rest of your code. Further, if you want to make your code readable for others (or even for yourself after a while), I would recommend to use descriptive names for your functions and variables. When I read 

Ideally your code should be easily understandable where you read it. The buttons says "Go to edit", then is better readable as . Also the is not a class, so general convention is not to capitalize it. But what is ? I don't see where it comes from, so I'd rather avoid it there. If it is already on your scope - it is already accessible inside your controller - no need to pass it again. Also it looks strange that the same Button leads to different things - that may be confusing to the User. I would not put different routes inside the same function. Either put clickable links to different routes directly inside your HTML, or use dedicated functions to update the location. 

Now you will catch all errors. Finally, I find your too small and too big with too many dependencies. It plays a role of a "Manager" that has many responsibilities. You can't always avoid it but you want to keep Manager's jobs at high level and as simple as possible. Imagine a stupid manager that knows nothing other than how to give basic commands :) 

because right now your method runs on every iteration. Even better to use more compact functional way like 

I find it semantically confusing to call your functions like . This tells me nothing about what the function does. Now, when I'm reading the line calling this functions, I have no clue what it does. On the other hand, I already see where it is called, so this name is more redundant than helpful: 

A proof of concept app to run the same query on both Google and Bing. For instance, if one of the engines takes too long on a slow connection or the results are not satisfactory, the same query can be run on the other engine with single button click. The whole app is small single file with < 200 loc. Can be saved and loaded locally with the protocol in the browser. is used to display all labels, forms and buttons with equal gutters inbetween. Perhaps can be improved. Can be tested here: $URL$ I am interested in any advice on improving the code and/or layout or any other suggestions. 

This way your data are completely separate and decoupled from the code. You can edit, add, delete your questions without making a single change in your code. Also you don't need to number them as those can change but your code won't break. 

Now I can easily see all the ingredients used by the directive. Even if I don't know anything about your code, I see that this directive has an API accepting a string, and 'Event' in the name hints that this string represents an event. What more, now it is re-usable - you can put it anywhere to listen to any event. Also note that putting it as attribute instead of class is better for readability - now you can easily tell it is directive and not a class used for styling. (It is unfortunately still used by Angular UI but they realised this way is bad and promised to remove it.) BTW, you provided a long CSS file in this question about Angular/jQuery, I could not see any reason for that. If JavaScript is the focus of your question, you would help your reader by completely removing all styling classes. 

Here is a simple reusable I came up with to initialize Google Maps Asynchronously, which somehow does not seem to be supported by major libraries (see below): Following Google's guidelines I am using global callback function (which seems to be unavoidable harm), that resolves a dummy , which is the only API returned. Then maps can be loaded anywhere by simply calling 

Hardcoded "magic" numbers like . Anything other than , , , , , is considered "magic constants" that are better not to leave hardcoded. Give them meaningful names instead for both testability and readability. 

You are using the verbose raw JS way to handle XHR, whereas libraries like would do a lot of heavy lifting for you. If for any reason, you prefer not to use third party libraries here, you can still imitate 's encapsulation architecture, so later you (or whoever will use your code) will be able to quickly change to . 

It doesn't look to me like proper Unit test. You are injecting the real dependency but are not mocking. Unit test is about testing your single Unit of functionality in isolation, with all it dependencies mocked. Here is example from of my own test code. This is a proper mock - I am producing a fake Constant: 

Since you are loading before , your Angular will have all properties provided by , so this is perfect way to use on top of Angular. This is also how you would wrap a plugin inside an directive, but see also the jQuery Passthrough directive that does exactly that. What would be a bad use of jQuery is using (as you mention) to refer to a DOM element. That would break the encapsulation provided by directive, since the inside of the directive should not know anything about the DOM structure, beyong what is provided by Angulars API. However, your event listener inside the directive does break this encapsulation! The event is not provided by the directive's API! (Which also makes your directive less re-usable.) Instead it is sent via another channel that is not visible from your template: 

Also this way of using promise is not recommended - notice that your second (error) function will not catch any errors inside the first (success) function. A better way is: 

Then import it from your general helper library. Also why is it so deeply nested? Any plain JSON data objects I would store separately and import into your module. The module should not depend on any specific data for better testability. Pure functions without side-effects are even easier to test, so I would put there as much code as possible. That will help you to simplify your module by importing those functions. Also I would import all globals such as as parameters, the fewer dependencies the more reusable and testable is your module. 

The name should tell roughly what function does, so I can skip this function's definition and still understand the rest of the code. This is a standard "getter"-function and should be name like that: 

As general note, your functions are doing too much, search Robert Martin aka Uncle Bob advices on clean code and single responsibility. Use pure functions to prepare your request objects and the more convenient wrappers ( or on the server) than . You can easily test those functions without ever touching the ajax. Assembling HTML inside JS is a big anti-pattern, especially concatenating strings. At worst, you should assemble arrays of strings and into strings at the end with single operation. 

Then you can still loop over all object properties or specific ones. Lodash is a great library for those tasks to shorten your code. 

which is however not a good practice, as it is the business of controller is to pass things, not to perform things. There is yet a shorter Angular-magical shortcut :) putting right inside HTML: