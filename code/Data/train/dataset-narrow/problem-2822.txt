In a similar fashion, you can add stuff like treasure rooms, shops, libraries, temples, etc. as long as there's still room in your dungeon. 

Now your dungeon is almost finished. You're still looking to get some stairs down or a boss room? Easy! 

You might want to add some friction as well (maybe even make it velocity dependant) to lower acceleration over time. 

You can, but you'll need permission from the original copyright owner - there's no way around it, unless there's some license attached allowing you to do that specifically. It doesn't matter whether you modify or edit the images (or any other copyrighted work). Some legislations got special rules for such, e.g. it's possible that something is so obvious or simple that noone can claim any rights on it (for example a simple red dot without anything else). But as with most legal questions, ask a lawyer. Some might even agree on helping you with simple/basic questions for free. Don't trust random internet people, because they might as well be the ones just waiting to sue you seconds later. ;) 

If you can do synchronous gameplay (i.e. playing together in realtime) you can always do asynchronous gameplay as well. The only deciding factor is whether you're able to establish the required connection at any time. 

They won't necessarily. It doesn't depend on the actual mass. The important part is their elasticity as well as the applied friction. The mass would come into play, but only if the difference between the balls and the surface are rather small. So if you assume the ground or wall has infinite mass (i.e. it won't move), then the mass of the balls won't play into this at all (or, realstically, almost no effect). Of course, everyone knows some piece of metal will drop faster than a feather, but this is mainly due to different shapes (air resistance!). In a vaccum everything accelerates (and falls) with the same speed (9.81 m/s² on Earth). Given the same impact speed and elasticity/restitution, both would bounce back with the same force and therefore fly up the same height. In the real world this isn't always exactly true, even if you ignore air resistance, since the different weights can modify the actual impact (for example, the heavier ball might squeeze more upon impact). How about some terms? If you want proofs, just look at the actual free fall: 

In the end, there's no "best" approach or complete list. It always depends on your actual needs, which is also the reason for all those games using different formats, implementations or interpretations. For example, if you don't need skeletal animations, don't even worry about implementing skeletal animations. If you don't need submeshes, don't even think about them. 

As mentioned, this is impossible, so I'd try another approach: If you don't have a dedicated server, elect one participating client to become the host (this can be transferred if the need arises to). The host will now perform all important game logic, like hit detection, AI controls, inventory handling, etc. as well as time tracking (i.e. dictating game time). The other clients will just try to stay in sync to the host, trying to estimate or approximate the expected value. If lag increases or there's packet loss, things might get choppy, but it's trivial to catch up, essentially just waiting for the next update. Most games (especially FPS) hide this fact by doing their own local calculation for the player's own movement, shots being fired, etc. to avoid the game feeling laggy. Everything is still corrected based on server data. This can lead to some confusion, e.g. you see yourself shooting the enemy, but the same moment you drop dead (without the enemy taking a hit), but it's still a far better approach than full synchronization. 

Update: Not 100% sure since I can't try this right now, but I'd say something like this in your function might be enough: 

For the last thing to check, the easiest way might be creating two strings, one based on your solution and one on the current state of the game: 

There are lots of games to list for this and they all rely more or less at least on limited tile mapping (for example to fill empty areas). Thinking a bit about this, two games are coming to my mind immediately, mainly due to them providing an experience making it hard to notice tile mapping (at least it's not that obvious) and using lots of unique graphics in specific areas: 

In their game's launcher, there's a button labelled "Exit". In the German version the text is "Ausfahrt". While the basic dictionary translation is correct, the meaning behind the word is not the same, since "Ausfahrt" is an exit ramp or gateway – so they even used a noun rather than a verb here! These are only three words in this dialog screen. It's far from being story rich or complex to begin with. With just 1$ you can usually get these professionally translated into 2, 3 or even more languages (based on quotes). Yet they either decided to use machine translation or just looked it up in a dictionary (or whoever worked on it, didn't have the slightest clue). The result? In this case, this got me to immediately change the game's language to English, essentially making the whole translation pointless/unused, while also lowering my opinion a bit about the quality delivered by the developer. Why? Because such problems add up and can make games far less enjoyable. Even if there's just very little text, misleading button texts can be confusing (especially for new players). Unfortunately this is really hard to explain, when using the English language only. E.g. think of a city builder game. After selecting a building, you have to click the button "boot" (which might be the result of translating back/forth from "start" to "start up" and then "boot" without caring for the actual context). Unfortunately, especially in the mobile market, there are tons of games having localizations worse than what Google Translate spits out. And that's a really sad state. Will a translation influence monetization? Definitely, but once again this is just my opinion. For some mobile apps it's very tricky (or even impossible) to change the app's language independently from the system one. So with a bad translation, your players might be stuck with a game they don't understand or don't want to play. This automatically leads to them not spending any more money (assuming they even did so), and/or possibly causing them to leave bad reviews. So, just to repeat myself again: 

This is a tough question to answer, cause it really depends on the actual game. Usually there are many tricks involved to make a game feel responsive. The classic Mario games on consoles are often considered still being some of the best platformers due to awesome controls and responsiveness. They've got their own issues, but there are many things you can learn just by looking at them for a bit. Here are some things to notice: 

Each valid position is one node and nodes are linked with each other (using connections) to form valid moves or directions: 

You should debug your program line by line to find the exact line the crash happens. It's been a while since I've used Allegro, but from what I see this should work. 

However, I have to disagree with some of your pros/cons, because there are ways to limit/neutralize these without actually changing the mechanics: