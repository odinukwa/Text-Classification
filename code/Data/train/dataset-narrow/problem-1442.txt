I have a problem with your code, in that the code seems unrelated to the problem statement you give at the top. You say you are "working on a REST API, where I currently create python objects from the JSON data returned by the server. Though not all attributes of the created objects will be called upon in user code." None of your code involves REST, or JSON. So while it's an interesting demonstration of certain parts of Python, it doesn't much address your issue. IMO, the feasibility of what you are discussing is going to be determined by the nature and character of the JSON data, and the REST API. Parsing JSON is generally a one-shot deal. If you get JSON data like this: 

The next obvious thing I see is that you require three of your fields to be unique. That's another good candidate for a filtering generator: 

You don't specify how many new records you're adding. But you did mention in comments some trouble with the "database getting locked", which I'll interpret as "database bogging down because you were hammering it with this script", and so I'll assume you're inserting a lot of records. If you're doing that, and you're not stuck on an old version of Django, there are some bulk data commands to help you. More on that later. First, though, let's talk about your constraints. You are applying a very strict uniqueness constraint to company names: a company name is assumed to be totally distinct. I don't know your context, but I'm from the United States. In the US, corporations are managed at the state level: you'll hear things like "ExampleCorp, a Delaware corporation, ..." Also, businesses other than corporations are managed at the county or city level (depending on the state, and the size of the city). So I can go down to my "county seat" (the town where the business of the county is conducted, usually containing the jail and the county courthouse) and register a "DBA form" (DBA means "doing business as") that creates a "name" for my business. So you might go to your county seat in county 1, and register "TomCo". And someone else named Tom might go to the county seat in county 2 and register "TomCo". And they would be totally legit. So, again, I don't know your use case. But you might need to re-think the whole "company names are distinct" thing. Perhaps you could attach an email domain, which is guaranteed to be globally unique, to the company record? Regardless, there's also the chance that your batch of users might include the same company multiple times. For example, if your Django app is some sort of SaaS and you are bulk-loading a new customer, maybe all the new people are from the same company. So I think it behooves you to cache that information. Next, there's the chance that your users are in the input file more than once. So you might as well filter those out. Next, there's the concept that your users must have a "first name" and a "last name" and that's it. Seriously? That's very Anglo-centric, but not very realistic. What about people from Brazil, who generally go by a single name, like "Ronaldinho"? (Although they come from the Portuguese tradition, so they might have 4 names if they get formal: "Ronaldo de Assis Moreira"?) What about my all-time favorite bandit, "Tuco Benedicto Pacifico Juan Maria Ramirez"? At least your database uses a single name field, so that's good. And finally, you should process the new user creations in bulk if possible, to minimize the number of database calls and the number of transactions. Let's take a look: 

If we look at this code, what's in the value? It's the key from the dictionary. But the artists dictionary was built like this: 

(Sadly, there's no good way to spell except for .) For your explicit validation, you have totally bungled your code: 

Finally, what does mean? What does mean when returned by ? Could you use or there? Or some other constant? Why do you divide your time intervals by 100? Is that the speed of sound in microseconds per centimeter? A nice constant would help... 

This code runs faster than the original version, but that doesn't include the computations I have to do for the state_asbits array. I think that's pretty cheap, but I don't know how often you are updating it. 

Bug: If, during the "pick a sigil" part of the game setup, player 1 simply presses , the game will play empty-string vs. "X". It looks bad. Your code has several problems. Let's start with the most basic: 

Here we have a comment after the code in question, which is annoying in its own right. But what does it do? It explains why some other questionable code is alright. You had written: 

1. Comments Your comments aren't very good. But conveniently, your code is structured so as to make this critique easy: 

Python 3.x provides which includes Abstract Base Classes useful for defining classes that will emulate certain Python container behavior. As you have written it, your tree class appears to behave like a more than anything else - you can insert and remove items, check for membership, and iterate over all the items. I suggest you implement the interface. You might also try , and you can certainly include some other iterator types (pre-order, post-order) as specially-named methods. 

It seems to me that the type is part of the . So there's no reason for that to be visible outside the SLL. I suggest making it a nested/private/hidden/secret class. (There are many ways to hide it, pick the one you like.) Your method names are confusing. The namespace has any number of collections defined. Pick one of them, and model your naming on that. For example: has a method that returns the size. It also defines and . Alternatively, also defines and . You need to pick a usage model for your SLL, and then choose method names compatible with it. What, no iterators? 

I vote for the latter. (Of course, see my comment about the operator above, and you won't have that line of code at all.) 

There's no reason to call it . Just call it since the word appears right next to it. You are using as the base class for your other three classes. But you are not calling in your initializer function, and not taking advantage of inheritance. Try this: 

You know it's a generator because you see . Twice! Generators don't return a value when you "call" them. Instead, they return a object. It's like an iterator - it's an object that you can call on and it might return multiple values: 

One thing you should have learned about classes/objects: when you construct an instance of a class, it should be ready to go! There are few exceptions to this, and all of them are awkward. In your you are breaking this rule. Your constructor sets and and leaves all the other instance data unset. There are several ways around this. The most basic of which is to pass in all the instance data as parameters, or compute it based on parameters. For instance, would be a computation, while passing as a constructor argument would be passing it in. Alternatively, you could depend on some (sub)class specific methods to return values you need: Don't use , use subclasses If you're writing OO code, and you find yourself using a case statement, there's a good chance you need a subclass of some kind. Not always - your method might switch on some kind of external data - but if you're switching on internal data to change your behavior, you could probably use a subclass to get that result. In your case, you're switching on , which is doubly expensive since you are re-running a pure function each time with no caching of the result. Instead of doing that, create subclasses. Push the majority of the "real" code into the and classes, and use to provide the string description, numerical stats, and any special attack text that is needed for the game: 

FWIW, I actually think this last bit would be a bad idea, simply because it relies so very much on hidden behavior. It's not at all clear, just reading the code, that there's a bunch of secret-squirrel things happening in the background. With a C++ string class, that's okay - with C strings, secret accounting is surprising. 

The setting of the array leaks implementation details out to , which should not know them. Instead, I suggest encapsulating the grid construction in a function, (or whatever you like) that just returns the appropriate value. This will let you change how the grid is implemented (see below) without having to know about it in . Change the grid implementation Your grid stores both separator characters and cell contents. Worse, it also stores white space with the cell contents. It would be better to handle the formatting of the grid in the actual function (since that is its job!) and leave the grid data structure to just store data. Get rid of and You maintain two variables that supposedly describe the termination status of the program. You do a bad job of checking them: 

that's much clearer. And already has a fine set of dundermethods for comparisons. Finally, consider your implementation of the parsing. You write: 

I would also suggest that you utilize instead of your string. This case is pretty much why it exists - to express the idea that nothing is available. Except for the next suggestion... I would also suggest that you write your code expecting to return multiple values. Actually, to generate multiple values as an iterator. So your code wouldn't check for a sentinel value meaning "I got nothing." Instead, it would iterate over all possible values, and possibly special-case the empty sequence: 

Instead of making an , what if you make it a class? You can then have return what you want without having to cast it. What's more, consider what you are doing: you immediately decode the direction into an X or a Y offset. You then either adjust the variable or . Why are those two variables different? What is ? What is ? Aren't they part of a greater whole, called (or or something)? If you had a type, you could just have instead of and . You might have to adjust and , but probably not, because should be a vector. If is a Vector defined as then you can define addition of a and a in the obvious way (x+δx, y+δy) and then simplify your code: 

And if it matters, you should be intersecting your with the set of inputs () to make sure you're not carrying any extra baggage... 

Which brings up the question of why you need a function to decode circles and crosses from an integer. You don't, if you put the character value in the enum. Instead of reading in the move, not validating it, then checking for failure when you write the move, consider writing a loop ( or or something) that will not exit the read function until a valid move is entered. Your function contains undefined behavior. You are allowed to point 1 element past the end of an array, but not more. And you certainly are not allowed to access outside the bounds of an array. I suggest that you create a table, where each row is a "valid winning line." That is, each row of the table contains the 3 (x,y) addresses of a line of winning points. If all of the points in a row contain the same value, that player wins. You can iterate over the rows, then iterate the values, looking for the winner. 

What do you think the output sequence should be, starting from 5? I think it would look like: 5, 3, 2, 6, 7, 1, 4 since you scan from 0..size in your adjacency matrix. (That is, 5 would find 3 before 7, etc.)