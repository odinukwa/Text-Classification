Unless performance is somehow critical, you'd do far better by just making use of String.Split on '1' after getting a binary representation. Then you can search for the longest string in that array. The current implementation is very low level and hard to easily understand. A programmer who sees the code as it is now would have to invest time to understand how it works, whereas relying on (even if slower) a few library calls can make an algorithm easier to understand for programmers, thus being of more value than the faster, low level algorithm. It's also faster to write such things and less likely to contain bugs because most of the actual work is done by the standard libraries, which are thoroughly tested by other programmers. 

Same thing here, no unit. Actually, if you combine the two, they should probably be "current" and "max" fuel. Keep your terms related. And I'd sort them around so that the "current fuel" definition comes before the "max fuel" function definition. That way it reads easier. 

This method sets the bitmap to a bitmap pointed to by the supplied ... or, in the event no is supplied, it sets the bitmap based on the current ! That's undocumented behavior. 

Exceeds what? Comments should be clear and precise. Comments should detail the why as well. Any interesting differences in the working of your code compared to similar code (how does your SList differ from ?) could also be valid comments. I'd add a comment to your class stating that it's 1-indexed; that is, you start counting at 1. 

It's not possible to have a collision with indexes 1, 2 and 3, right? Only a snake of a head and 4 segments or longer could collide, so why not save some performance by only checking collisions from segment 4 and onwards? Except... what happens if we put the snake in reverse? You get one crumpled up snake. 

That all said, you... clearly have a design issue going on. A string goes in, and based on that you're doing checks? Huh? First, stringly typed code should be replaced with Enums. Second, having to check every single time if the user has a set of general rights is ... weird. These should be migrated to a different place; then all you're interested in is if the user has generic read rights, + the few things that are file specific. If instead you're relying on class variables in these "generic" checks (like ), then... well... then I still think it's worth splitting these checks up into "generic" and "file-specific" checks; if you're ever going to be looping over a directory, you'll want to be checking the generic parts only once, and not all the time. 

To me, these two methods hurt the most. To start with, these methods shouldn't have been implemented by you. Use Objects.requireNotNull: 

From the documentation, it turns out that represents a number of weeks (that some action has to be taken). If you add this to the variable name, like , then the meaning of assignments and usages becomes more obvious. Specifically this part in : 

Here, however, there's no reason to have this construction. You can just return boolean comparisons like so: 

The resulting code prints "155156556 nanos", so took 155 milliseconds in total to run. I did a few more attempts and got durations in the range 120-145 millseconds. When you say "have taken too much time to code the solution for this problem", did you mean "I took too long programming this"? Because there's no way to write code faster once it's written - the time has already been spent. 155 milliseconds for the largest inputs, for me, is fast enough. I do not see any real opportunities for performance improvements. You could, in theory, do this: 

can be . for , it's silly to subtract 0 as it does nothing. can be instead. In fact, that's how I write my for loops: for , consider using instead. 

Bug: on empty list in . You don't have a comment stating you need to input a list containing at least something. Consider returning and adding a comment. 

as a classname sounds really weird. It's a verb. Verbs don't make good class names. Try a noun like instead. Location also seems to be suffering from "Feature Envy" of sorts... you ask the about the 's location? And you ask the about the 's orientation too! And then when you need to reposition a , you ask the to do this! Here, take a look at your own move command. 

They're practically the same! I'd make a method like this (I'm not really familiar with C# syntax, so let me know if I made a mistake) 

Possible bug: If you get the value, is initialized. One can then set the value to something that is not a . Like . If you then get the value again, you'll get the old value of recasted to . Seems to me that this violates what and are supposed to do. 

Comments should describe why your code needs to do what it does. Comments that describe how your code works should only be used in complex code segments (and even then people argue you should just clean up the code instead). So a comment like 

Stop. That's not . That's . If that sounds too long winded, that's because this method is doing too much. Eventually, you'd want to see a method that calls methods for validating the users, updating the users, and sending mails. 

Additionally, checking if is empty is not needed. You're free to the list regardless of whether it has content or not. Other functions 

The default behaviour for a TreeMap is that the contents are sorted based on the key, which explains why this works. Use for the last case - it'll be equal to or greater than any other number. You can even use a built-in function for this: 

Wrap it in . Your main code should read pretty much as a state machine; "if the next node is of type A, pass it to the type A handler, if it is a type B, send it off to the type B handler", etc. Maybe get used to using different words to refer to a single "condition" and multiple "conditions". Personally, I used and when I needed such a thing in my own code. 

This is missing braces which you should add because they are a sanity check - missing braces means unfinished thoughts means unfinished logic - at least for me, and I freak out whenever the braces are missing. 

That's not the correct way to wait for the . will get called whenever a file has been successfully read, so you can check for there, and call the rest of the function as needed. Right now you're spin-looping during at least partly CPU intensive (base64 encoding) operations. Which is a huge waste. 

There, looks good. Now, normally I'd convert the other half into a separate function as well, but then we have to go deal with the part where the array size might not be large enough, and that'd be a bother. 

I'd say both of them could use an improvement: You use a class member variable . This means your functions are no longer thread-safe. Consider passing it in as an argument... Next, you can use a trick used for reading files: . What that does is "set line to the next line, then check if line is not null." In your case, this would be 

Why would you first check the sign, and then perform parameter validation? It's a waste of cycles. If you reorder the code, you can migrate your checks to a separate function: 

I think that if you're in a rush, you should make use of automated helpers as much as possible. I get that if you don't have a lot of time, you can write code with 1 pass only, and that's it. It's not a sustainable practice, but if you need something done TODAY, so you can ship it, and then improve the code whilst the release is being "tested" by customers, well, that could be a viable business practice. However, that (in my opinion) does not excuse you from using something like an auto-formatter and whitespace. Whitespace is free - provided you place all the braces, you can insert spaces and newlines where you like. So lets haul it through a formatter. 

Final code I can't fit the whole thing in here, obviously, but here's the helper function, and the segment: 

The reason it looks 'cramped' is because you are putting some of your resources in code. This section, 

It still looks messy and it's not cleaned up all that much. I'd roll this one back; the duplication is gone but the code is twice as messy. It's harder to follow, now. I left it in the answer so that you might get ideas on how to clean it up; I think if you could somehow supply the person and remove the change, it could be easily wrapped in a function. 

If you combine these two ideas, you could come to the conclusion "an Ocean holds a single state, and when a simulation advances via a timestep, we get to the next Ocean, which is a new Ocean". This would be a wrong conclusion. They have stated that an Ocean is described by its size and the initial placement (of things). Thus, to state that you'd get a new Ocean would be to imply that the initial placement of various objects has changed. This is not the case. My conclusion would be that an Ocean changes over time. I hold this conclusion to be correct, for it is an accurate representation of the real world - the placement of objects changes over time(steps). The rest of the sixth paragraph continues to force non-functional implementation details on to you: "Therefore, to obtain correct behavior, you will often be working with two copies of the ocean simultaneously; one representing the ocean at the beginning of the timestep, and the other representing the ocean at the end of the timestep." They're basically saying there's no correct way to simulate the ocean without using two instances. At this point, I would just have made a Timestep, added a , an and called it a day. I wouldn't even have called it bad design. It would have been what the problem statement said, it's probably what your professor/teacher is looking for (they wouldn't keep using this word if they weren't, remember, identifying objects and concepts). But I have more experience with these kinds of things. That experience isn't really relevant, but it does enable me to make the following observation: Recreating an Ocean for each timestep is contradictory to how real life works. And why does this happen? What could have gone wrong that they are required to make a new for each timestep? I'll tell you what went wrong. They defined an Ocean as... 

How would you go about solving these issues? Personally, I take a whiteboard and start by drawing the domain model classes. These are things that are mentioned in a problem statements. You have the disadvantage of a biased problem statement. Here's the bias: 

I have absolutely no idea what's going on here. If there are no kids, make new ones... Okay, that's the create part... And then... (not an ip address, so what is it?) is ...? 

It's not a very fair betting machine, because the stake does nothing. You could bet 0 money and the machine would still payout 50 if you were correct. Similarly, you could stake 500 per round, and you'd lose even if you won! Aside from that, you should split your code up into separate functions. Take getting a number, for instance. You managed to spot that they're three separate segments, by labelling them with a comment. But what you could do is just make them separate function calls: 

Except that, looking at the conditional, there is no need to compare to 0, you can just compare to other values. 

So what I'd do is instead make a single array that describes the lowest dry box in a column. Because if a box gets wet then so does the box beneath and the box beneath that... So if box 2,10 becomes wet, then we say and put in the column if it is higher than the value already there. Add the difference to the sum variable whilst changing the array. 

You have a lot of those in your function. How about storing it in a temporary variable to increase readability? 

Is repeated three times (minus the printing function calls). Looking closer, there's a tiny difference in each of them, but couldn't you wrap the largest part into a single function? The differences can be applied after the function. This would reduce your code quite a lot and make it more maintainable. It would also make it easier to understand, because the duplication is making me go "yeah, I've seen that" when in fact I have not, which could and probably will lead to bugs. 

You seem to comment the function bodies well. What I don't know (because it's not in the pasted snippets) is whether you comment your function headers. Commenting function headers is a good idea because if you do it properly (javadoc-style), most IDE's will add the commentary as a tooltip when either mousing over the function name, or when selecting the method in a auto-complete dropdownlist. This helps you in your development. Additionally, the first thing I read when I'm trying to understand what a function does is the commentary on the function. In particular, try to comment your methods - these are the ones that will get called in other files, and these are the ones that people will generally be interested in. 

We STILL haven't seen any real code doing anything. All I have shown you right now that actually does anything is the method. The rest just structures the game flow. Function lists right now: 

This cast here is not needed; you already know that you're going to get out of the keyiterator. Looking up a bit, you declare , but only use it for the iterator. The variable name doesn't add anything to understanding the code, and you might just want to say 

fails. That is, there is a special case in which partitioning a list in partitions equal in size to or greater in size than the size of a list to be partitioned does not equal a result with 1 partition. 

Should only shuffle cards, because that's what it says it does. Create new methods , , , and possibly others. Assign these methods to the class that they should belong to. 

Were created each in their own function. Right now, populating the view is a messy place, and by stowing these elements into separate functions you can keep the menu items and the management of menu items apart. 

Try to reuse the result of here. You call it three times in a row and that can't be good for performance. 

You should also take a look at the flow of execution, there's certain places where you do things only to throw them away. Like here, 

Let's say we had projects later - will there also be ? What methods will it contain? The same? Mostly the same? This leads to code duplication, which is really bad! In your HTML page you use a table, and for that, will do. But for non table situations, like a stackexchange profile, you have graphs for reputation, lists of answers and questions, it's partially sortable, some are numbers, others are text, some of the numbers are rounded (reputation is shown as ##.#k, rather than a 5 digit amount)... All of that is either HARD or NOT POSSIBLE just because you're following the dogma of "You should never have Getters/Setters near your code.". Such an idea is DANGEROUS in this case! But you link to more than just 1 article of this guy, so maybe you really like what he says and I won't get through to you by just pointing at your code. Let's point at his: 

In the you could handle the exception. Then, in main, you could say "well, if input is still null, we didn't instantiate properly and we ought to shut down". 

Every car has a different milage, and yours is infinite kilometers per liter, provided the car has a liter of fuel to start with, and that the trip doesn't go over 25 kilometers. I've got about a 20km commute, so that's great. I REALLY want one of these cars. Joking aside, integer division is a real problem with this sort of thing and that's why distances and amounts of an item of which there can only be many (such as water or fuel, you do not have 1 fuel, you have 1 liter or 0.5 or 0.05 liter of fuel), tend to be floating point numbers. Real numbers. You'll probably have to use for them. 

A similar thing can be done to the "too high too low part". But here's another special case... If a number is not equal to and not lower to a certain value, then obviously it must be higher than that value. So the code 

What the... This is clever abuse of language mechanics, and I don't like it for that specific reason. Do it the proper way. Have one class that keeps track of the tasks and one class that does the tasks. Not this self-forking madness where you keep a reference to the main instance by a enum variable.