Edit 1 Thanks for the update and diagrams. Good stuff. I'm not certain that I understand the difference in performance between the IIS and Apache server. Can both be contacted via the gateway on port 80? Have you added the logging statements? That will help. I will review everything in detail again later this evening. Edit 2 Oh, it sounds like the DNAT doesn't work. Previously, it read like you were having trouble communicating internally between your gateway and your Web servers as well. Try replacing: 

I would consider this stepping into the realm of security through obscurity. If you consider the path being revealed to the local user a risk, I would recommend reconsidering as to whether or not the user having access to the system is a greater risk than the justification for them to have access. It is also notable that Apache will often disclose riskier data than the file system paths as the result of application errors. If you insist on obfuscating the path in the logs, there is no native support for this in Apache. Nevertheless, you would be able to create this performance by piping Apache logs through a script or potentially sed using Piped Logs. If you would like to further harden the local system against local users, there is a variety of more tangible methods that could prove to be helpful. The list below is focused on local hardening and is not comprehensive but should be a useful starting point. 

You could store the database on a RAM disk, such as . This could potentially risk the data, depending on the implementation, so you would need to design to compensate for this. One potential solution would be to have a readonly slave replicating to a RAM disk and the data there could be disposable. MySQL Clustering (NDB engine) is designed to store data in memory. However, MySQL clustering is best suited for small datasets accessed with simple queries. A favorite solution is memcached these days but this requires application architecture to support the technology. This is a fairly big question. High Performance MySQL is a fantastic book that covers high level MySQL implementations. 

The files are the binary logs, which are typically both for either a transaction history or for the purpose of replication. To disable binary logging, you can comment the lines in the cnf. should be commented too if enabled. files are part of InnoDB's tablespace, which is specified with the setting. I wouldn't recommend deleting unless you have no InnoDB tables and first disable InnoDB by using in the cnf. 

If you truly do not want them accessible to the Internet via HTTP, you should move them outside of the Web tree entirely. You can also use filesystem permissions. For example, if Apache runs as the user, but you want the files only accessible via SSH by you can have secret* owned by and not publicly readable. Of course, there are nearly endless additional options here. Groups, filesystem ACLs, and more. For ACLs, you can use mod_authz. It's best to keep the configuration in the conf and not in . Having them in introduces more exposure and possible for manipulation with lesser privileges. mod_authz documentation 

The options are going to depend on your situation. Do you have two separate source trees as where the kernels were compiled? If so, the file in the top level directory of the source will reflect the configuration. If I had to guess without enough details, I'd suggest that you may not have selected the appropriate drivers for the disk controllers. On the kernel that boots, if the necessary options[1] are compiled, you can reference /proc/config.gz. Unfortunately, this will not help you much as one of the kernels will not boot. Nevertheless, it could help to compare what is compiled on the working kernel, however, and you could update the broken configuration accordingly. Certain distributions include the config for the compiled kernel with the package and put it in /boot. [1] These options: 

is the classic method to do this in . Also, you can specify using flags as . Earlier than MySQL 4.0.2, most configuration options were set using this method. This is depreciated and even removed in MySQL 5.5. Most options can be set using their actual names in the my.cnf. If you need further help, please be more specific. 

Do you really need a Web interface? Externally: a public Web server serving a directory accessible by a CIFS share, which users can e-Mail out. BasicAuth configuration for password protection, if necessary. Client side tools for encryption. Tons of options here in general. Internally: wiki and general file sharing solutions such as NFS and SAMBA. Again, tons of options. Have you looked through Freshmeat and Sourceforge? 

If the connection times out it will not be the MySQL settings. What router and firewall are you using? Are you sure the NAT is configured properly? Is the MySQL server able to route to the router? 

Yes. It depends on your PERC controller, however. Here are my notes but it may not match your version. Dell tends to switch brands frequently and between versions in the same generation. 

dnscache is literally that: a DNS cache. If you wanted to specify (forward resolution) records for a domain under your control, you would need to run a full-featured DNS such as BIND or djbdns. To respond with an IP when a NXDOMAIN response is sent, you would be breaking the RFC. NXDOMAIN rewriting is a controversial practice that is not recommended and generally not supported, as it breaks the RFC. Neither djbdns nor BIND have native support for this. From what I understand, there are only commercial solutions currently implementing this. This includes Barefruit and several others. This is an interesting post from a mailing list where someone who appears to be Keith Mitchell, the ISC Director of Engineering, states that he doesn't want to introduce support in BIND. If you have a legitimate need, we might be able to be able to offer you an alternative technical solution. 

specifies the nameservers for resolver lookups, where it will actual use the DNS protocol for resolving the hostnames. Typically the file is used for administrative purposes such as backend and internal functions, which is substantially more isolated in scope, as only the local server will reference it it. specifies the lookup order with the entry. If this does not answer your question, please clarify further. Look at the following manpages: HOSTS(5) RESOLVER(5) 

Edit 2 I personally like to have postmaster, mailer-daemon, abuse, root, hostmaster, and webmaster. The aliases, of course, are based on what type of servers I typically run. You could argue root is superfluous but I like to do it anyway. postmaster, abuse, and mailer-daemon are always a requirement in my world. webmaster and hostmaster are dependent on whether or not you run DNS or a Web site. These days, if you're responsible for an Internet domain, chances are these will apply to you as well.