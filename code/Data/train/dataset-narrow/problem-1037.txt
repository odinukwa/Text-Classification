Use the same value in the query param as the ID of element in the HTML so it can be directly used as selector If you don't want to change the query param value and ID of checkbox, create a mapping of param value and the selector 

Unique parent selector + descendant selector In this, there will be a main container element and using this all the descendant elements can be targeted. Example: HTML: 

: Match a digit : Match either a space character or hyphen and add it into first capturing group : Match digits n times. : Match whatever is in first captured group(see #2 above) 

If using latest browser/environment that supports Arrow functions, the code can be made even smaller 

when working with strings, work as string concatenation operator and operands will be implicitly casted to string. Thus, in is not required. Note that, the code is not equivalent to , this is code and is equivalent to 

Rethink your function Instead of using if statements you can store the points in an array and then the current player variable could be an index for the array (so not a string value, use and integer instead). Try to think in numbers instead of strings. Code example: 

But I think that you don't really need that function because you can just use the % operator and your code would be cleaner and quicker to understand. Just for future consideration. Hope this answers your question. 

Then if you want to you could wrap it in a function and call it with the conditions array and number of loops as parameters. You can also shorten your divisible to: 

You could just have an array of the tank parts and then iterate through them using a for or foreach loop. Using this method you also make your code more expandable, for example if you want to add more parts like different tracks for the tank. You should also try to generalize your code, the hull part should work the same as the gun part or turret part, this will make it easier to iterate through them aswell. Example (Code not tested): 

Eight Digits Digit-Space-Three_Digits-Space-Two_Digits-Space-Two_Digits Digit-Hyphen-Three_Digits-Hyphen-Two_Digits-Hyphen-Two_Digits Two_Digits-Space-Two_Digits-Space-Two_Digits-Space-Two_Digits Two_Digits-Hyphen-Two_Digits-Hyphen-Two_Digits-Hyphen-Two_Digits 

RegExp Constructor vs RegEx Literal is used to create a new regex. This form of regex accepts a string as the first argument and returns new regex. This is used when creating regex from a variable. Since this uses string, the backslash is used to escape following character. This will produce unexpected results when regex itself contains a backslash. Example, will return . When using a backslash in this form, they need to be escaped . This is not necessarily difficult but requires to take care of escaping. Passing regex literal syntax to the constructor is same as literal syntax to create regex. So, is same as . Mistake The regex for object doesn't work for all cases. means to match anything which is not AND . If the key of object contains , this regex will fail. Check this demo. Removing solves this problem. Not a mistake, but a validation. Using quantifier instead of . says, match zero or more of the previous pattern. For example, will match which you might not want to match and process. Better use of capturing groups The regex will match the string starting with to the literal and put the complete string in first captured group. Then inside , and are again replaced 

I have no clue why you escaped the . Of course it doesn't need escaping, since you didn't escape the other one! 

The only other comment I have is about, well, your comments. I notice that you have some comments in English, and some comments like this one: 

You should probably stick to one language. (Although I suspect you may have translated all the comments, but just forgot this one.) The other thing I suggest is that you remove some of the commented out code, and also remove some of the excessive blank lines (like the ones towards the end of the first class). 

I can give you some feedback on your regexes. First of all, you don't need the parenthesis in some of these. These two: 

The first capture group was equal to the entire matched group, so you just use (which you appear to be doing already, except for the one line). Now the same thing applies to this regex too, but you can also remove one set of s: 

Improvement Here is the Demo of jfriend00's answer. Although, this is correct, this can be done without jQuery at all. Note: Here, I'll use old markup provided in the question. can be written in CSS as 

A simple improvement is to use instead of multiple s. Taking out common statements in the each of statement. 

This has better effect as compared to jQuery counterpart as it will not show flicker when CSS is included in . And the can be written as below using pseudo-class and Adjacent Sibling Selector 

can be moved to CSS. This will be better UX and user will not see any flickr on the screen if page take long time to load and thus hide the element by JavaScript. 

As some of the features are only available in latest browsers/nodeJS version and some are experimental, see the MDN link embedded for browser support and polyfill. This, by any means is not polyfill for . This is just another version of the OP's code. is overriden with assumptions that only the provided input format is used to log in table. The horizontal lines are not perfect. They can contain less/more depending on the min and max length of key in the object. 

I like regexes, so I can review the regex. (The only experience I have in Go is with regexes.) It's pretty large, and you have numerous unnecessary characters. Look at it: 

You are inside a char class, so most of the normal meta characters loose their meaning. You could use: 

This cuts it down to 18 steps. That's a HUGE improvement from the original 427. It's also shorter and more readable than your original. You can get the matches by using: 

It can be further shrunk if you use character ranges, but this is not very legible when it comes to special characters: 

As it is written, the regex takes 427 steps to find a match in your example string (according to regex101.com). There's no compelling reason to be using look aheads for "house-" here, either. It will just be eaten by by the , so you might as well just extract it: 

As can be seen from this jsperf, is faster than . So, your code is already efficient and expressive. 

which basically says, when hover on , select next sibling and it's direct children , having class. Demo:Although, you cannot see images, you can see it works as expected when hover over an image. 

Global Variables: All the variables defined are global, which is bad practice. Avoid declaring global variables. Wrap the code in IIFE and define variables using keyword. Naming Conventions: The names of the variable should give indication of it's purpose. The names should be in camelCase format. Caching: Cache the DOM element reference and use it. This will save the time to dive into DOM again. Missing Semicolons: Although, this will not cause any errors since JavaScript's Automatic Semicolon Insertion(ASI) will add the semicolons, it's good practice to add them. Also, depending on ASI can cause the semicolon to add someplace where the symantic will be changes. Ex: When declaring multiple variables if we forgot a comma, the successive variables will be declared as Global. Comparison: To compare variables use strict comparison operators( and ). Loose comparison will cast the operands before comparing variables which could lead into unexpected behavior. Using ladder: For mutually exclusive conditions, use . If the condition is satisfied, the next conditions in are not executed. Or statement can also be used. Nested : Use nested loops to iterate over the and update the values of each cell.() Appending Markup: Instead of appending markup(like element in ), IF POSSIBLE, add the markup in the HTML and only update the text-content of the element through JavaScript. This will avoid adding multiple nested elements if the function is repeatedly called. Comparing Variables: is equivalent to which is more readable and easy to understand. Also, this will save an operation(Logical Not). Using string parameter to : Don't use string parameter to the and functions. You can pass the function reference as Un-Needed Code: In first variable is assigned to zero and then it is compared with zero which is always going to evaluate as . The condition is not necessary there. Similar Functions: The functions and are similar. Both are redirecting to some page. This can be combined into one function accepting a parameter as redirect URL and redirect to that URL. Same is with and functions. Logical Error & Dead Code: The expression will always produce value between one and seventeen. So, the code written for comparing it 18 through 22 is dead code, which can be removed safely. Or, if you want to generate the random number between one to twenty-two replace the by in that statement. Binding Events: Use to bind events on elements. As in the current code, no event binding code is shown, if inline binding in HTML is used, use to bind events. 

This cuts it down to 391 steps, but it is still getting hung up in the portion. Looking further into your code, it seems that you just want to get the two values after it: . Your other regex already does that, so you can just use it here, instead. The other thing I would suggest is using , which ensures that there's a word boundary (so the following will not match something starting with "penthouse"): 

Next, there's this regex, and two others like it. I have added spaces so you can see the repetition: 

already matches (underscore), and does not need to be escaped if it appears at the beginning or end of a character class: 

I can give you some feedback on your regexes. There are a number of times in Java regex, where you cannot avoid using the "evil escaped escape", but you can refactor most of them out in your case. First of all, you don't need any backslashes in these three: 

Less DOM interactions. Using this code, there is only one DOM dive to get and set the updated innerHTML. Single regex to replace multiple strings has better performance than multiple replaces with single string Shorter code 

The RegEx will match a single non-line-break character and check if that is followed by the same character any number of times. here is the complete match and is the first chaptured group value i.e. the character. 

Adding quantifier also has positive effect on the number of steps taken to match characters when the characters in the character class are consecutive/adjacent to each other. Here's the demo on RegEx101, without quantifierScreenshot and with quantifierscreenshot applied on the same data. Note that in these demos, PHP is selected as the steps taken to match is not shown for JavaScript. Also, the regex is different, it also contains lowercase counterparts of those special characters as flag is not working with PHP and don't want to apply (Unicode) flag as it is not supported in JavaScript. These demos are created only to show difference when is applied on character class. The effect should be similar in JavaScript. Note that the (two underscores) are redundant as is already added in character class and with flag it'll remove all occurrences. Method Chaining As returns a string, any other string method can be called on it. Multiple calls to can be chained. 

You could make some sort of struct or class that stores the text printout and the number i should be divisible by. Then you just need to create as many instances of the class as you need and loop through them. One other approach is to have a hashtable and store the keys in an array that you loop through. You can use whichever one you feel makes the most sense but the first method should technically use up less memory because you only store the text once for each condition. I might be wrong though, I don't really use Java. Example (Not tested and not written by a Java developer): 

I'm guessing there's more to your function than this, but you probably want to have it in a loop of some kind and then ask at the end of the function if the user wants to keep rolling, if they don't want to keep rolling you can change the current player index. More about your functions Make the rool2Dice function simpler, does it really need that many parameters, you are passing the exact same most of the time. If you have any more questions just ask away, good luck. 

The advantage of this method is that you can use any selector. For example, if you want to use class selector for one of the checkboxes, just use as the selector in mappings and it will work. 

Lodash Do you really need a library for this functionality? The Same functionality can be done without Lodash or any other library. If Lodash is only used for this functionality, it can be removed. Missing Semi-colons Although, a small thing Automatic Semicolon Insertion can lead to unexpected behavior. The usage of the semi-colon is not consistent. I'll recommend using JSLint/JSHint. Alternative I'll recommend the use of and String methods to make the first character uppercase. 

The events bound on are not needed to be wrapped inside . Also, multiple statements can be chained and function reference can be used directly as handler. 

UPDATE: After editing by OP. Both the approach will work for the other functionality too. So, the answer will cover those cases too without updating it. OP just needs to write similar code for other functionality.