Create a L3 interface and route over that interface to the firewall using a routing protocol or static routes. 

In global configuration mode, typing will clear the interface's configuration in the running-config. 

It really depends on your deployment scenario. 3560/3750s are great switches, have decent buffers, and they usually work fine for most applications. If your data center sees traffic flows that require larger buffers, you should be able to pull statistics from the switches, like buffer usage and packet drops. Convincing management to drop the switches that are dropping their packets shouldn't be too much of a challenge. I think. 

If you are getting memory allocation errors, a reload should be in order to clear up whatever is going on, at least temporarily. It looks like you are running out of memory (Cause: Not enough free memory). I would look at perhaps upgrading the memory, which is the cheapest option, or if this router is important enough, even upgrading to a new platform that can more readily support your needs. Also, try upgrading the IOS. It may be a minor memory leak. 

Because they have the same Bridge ID, the Port Priority will be used to determine which port to block, blocking the port with the higher Port Priority. In most STP implementations, the lower port, in this case port 1, will have a lower port priority unless port priorities are explicitly configured on the ports. 

If it's 877 you need to put QoS configuration on the VLAN interface (SVI), not physical FE ports. Also SVI doesn't support HQoS, so you'll need to simplify it for SVI. 

Well, every link transmits only either 0 or 1 at any specific moment. So if your router connected to 2Mbit/s link receives first 250 bytes packet, and assuming that it doesn't have anything at the moment to send, it will pass the 250 bytes into the interface driver, and then serialize it (meaning put 0s and 1s) onto a link. The next packet, even if it's just milisecond later, will wait for the first packet to be transmitted. This may incur delay in sending (alone) of 1 milisecond, but that's just theory - in reality, there will be some additional, minimal delay depending on the way your router works. Take a look here for additional writeup. There are techniques to fight with serialization delay (take a look here), but in todays networks and with your 2Mbit/s link, you may find them unnecessary. You shouldn't have to use them, as even with 1500 bytes segments, with proper priority queue implementation, this link shouldn't incur delay that's visible for typical IP-based applications. 

Well, actually BGP NHT can use BFD to speed up neighbor problems detection, and it's usually the best scaling mechanism, because BFD is often offloaded in hardware. Running BFD for both IGP and BGP may be good idea, depending on the scaling capabilities of your gear and hardware acceleration/offload. It's the configuration that has to make sense from logical standpoint. So, your decision boils down to this: if you wish to tune both IGP and EGP protocols to try tu run at the same time ( and BGP BFD NHT), which may lead to problems, oscillations and so on, or you'd like to focus on achieving fast IGP convergence and with presence of multiple forwarding paths, let BGP linger a moment longer just to make sure your IGP converges ( with or without BGP BFD NHT). That last approach usually makes more sense, and that's why NHT delay by default is set to 5 seconds. If your IGP converges in 200ms (or generally, under second) tuning BGP NHT to 1 second may make sense. 

The Cisco 2960 switch is a L3 capable switch. Today switches are usually no longer confined to L2 and the router/switch delineation is blurred from the traditional definitions. You are missing the command from your config. If you add this command you will find that the VLAN SVIs can route directly between each other on the switch. More information on this feature can be found here: Configure InterVLAN Routing on Layer 3 Switches However I do not see any routing configuration or default gateway configured on your switch whatsoever, so I doubt that the switch itself could reach any remote network assistance. I suspect that proxy-arp is what is being used here and the major classes are what is 'choosing' the VLAN. Proxy ARP 

As NS3 is built to replace NS2 it would seem to make sense to use NS3 for a completely new project. There are a number of legacy problem with NS2 that NS3 is set to resolve. However as more people are familiar with NS2 finding support will be easier in the short term, but this is a very short sighted view as this paradigm will soon change with the tide. If your project is new and you plan to support it long term NS3 would seem like the better option. Here is a short comparison of the two: $URL$ 

On a general note: not everything that is present in parser, will actually work on given platform, or even makes sense. In that particular case, you can enable spanning tree if you have either IRB (integrated routing & bridging) configured on ethernet ports, or you insert the integrated switching module (WIC-4ESW) into the router. Then, those ports are L2 by default and actually it makes sense to run STP on them to avoid loops. 

Testing that kind of features using GNS3 is simply waste of time. You're emulating at run-time complex software, and on top of that, you're adding complex features. There's no sense in 'trying' 7200 as 7200 are long EoS: $URL$ Download CSR 1000v and test in on some decent hypervisor, you may get better luck, but on IOS-XE you'll have different configuration templates. 

Adding reachable IP for VLAN is potentially dangerous from security point of view. It's also an threat from stability point of view, as traffic towards the IP (including ARP, IPv6 ND and so on) hits the to-CPU queue. If you have simple VLAN with L2 only, there's nothing apart from L2 protocols (haha) that can influence the situation of the switch and it's control plane. If you add L3 reachability information, suddenly you're dealing with what's L3 has to offer, including routing protocols, blackholing, limited FIB entries, potentially also different QoS models possible when dealing with L2 vs L3. In any way, you're adding complexity to the network. Complexity is bad. As KISS rule says, you DON'T "automatically" add SVI to L2 VLAN. If it's for L2 operation only, I'd even add it to the 'description' of the interface. 

I am not sure what your topology looks like, or what exactly your requirements are, but I noticed that there are IP addressing overlaps. 

Tunnel interfaces have many uses, including participating in a larger VPN configuration. A VPN setup usually has many parts, including encryption, authentication, routing, and finally, the tunneling. Tunneling is also used for IPv4/IPv6 coexistence setups, such as encapsulating IPv6 packets in IPv4 headers, creating GRE tunnels, and multicast tunneling. The point is that while tunnels may be part of a VPN setup, they do not necessarily represent the entire VPN configuration, but only the traffic encapsulation between endpoints. 

The feature you are most likely looking for is known as local authentication. This is implemented using Lightweight EAP, or "LEAP." Essentially you create a local database of users on the controller, and this database is queried directly when authenticating clients. Instead of configuring another type of EAP such as EAP-TLS or PEAP and specifying a RADIUS server, you configure the SSID to use LEAP. The specifics of this vary between controllers, but with the above information, finding more specific configuration instructions should be much easier. 

SNMP is very handy for this type of monitoring. For just one router, you can download the free version of PRTG and set it up to monitor the interface's bandwidth. On your router you are going to need to enable SNMP access. To do so, enter in global-configuration mode. Setting up PRTG is quite simple as well, and there is plenty of documentation on their website regarding the specifics. 

The description is misleading, and it's something we need to fix/standarize (I'm with Cisco, will reach out to doc guys to fix it). In reality: 

There are a couple of things not readily clear. First of all, in the 'update' session, you're noting some changes - please post complete, current config. Next, policy-maps work at INPUT, not at output. In other words, on your outside interface (fa0/1) you're trying to match for incoming traffic, which doesn't make any sense - the private IPs are coming in from internal network, so you should attach the route-map to internal interface. The next part which isn't clear is what's the VPN for - is it only for WWW traffic, or for all traffic matched by ACL 154 that defines traffic interesting for crypto as being all IP from 192.168.30.0/24 to 192.168.10.0/24? Decide, then configure. To clear this mess up, I'd setup a Tunnel0 vpn interface that will separate routing from interface configuration and work in this mode, here's example of that kind of conifg: $URL$ 

The 'Idle (PfxCt)' status means this specific session exceeded maxium-prefix set and was reset. In your configuration you have 'neighbor 222.222.222.57 maximum-prefix 125000' which means the session was up for some time, then it exceeded 125k of prefixes and was reset. Fix the limit and then we can check if the flow is correct from your point of view, once both sessions are up. 

Again, without knowing what your topology looks like, I can't say for certain what the issue is, but IP overlaps can cause problems like missing routes (they are missing because of the way the protocol operates, not necessarily because of an error). 

The hosts in 10.0.1.0/24 will not be able to communicate with any other hosts in any other subnets of 10.0.0.0/8 without a default-gateway. The hosts in 10.0.0.0/8 will be able to communicate with all hosts in 10.0.0.0/8, which includes 10.0.1.0/24, but only one-way if the hosts in 10.0.1.0/24 do not have a default-gateway with access to both subnets. 

Besides VRRP not being proprietary, there are a few minor differences between the protocols as well: 

This sounds very similar to this question and answer. Basically, you need to translate all addresses on one end to another range, and vice-versa, with a NAT device in-between. This is sometimes referred to as "outside source nat" because you need to translate the source of packets coming from outside your network to a range that does not overlap with yours. 

The problem here is that the device is interpreting the first as the delimiter between the credentials and the FTP server address. Perhaps configuring the username and password in global-configuration mode and then redirecting the without specifying the credentials would do the trick. Otherwise, and I know this is a wimpy solution, changing the password to not include that one character may be the easiest and perhaps most secure way of working around this issue. 

I'm not aware of what Red5 in particular is/how it uses the bandwidth, but with voice and videoconferencing, bandwidth itself is just half of the story. You need to check for jitter and delay, which are critical for that kind of applications. If jitter is high, you'll experience what you're describing: "choppy". If you have Cisco routers at customer, you can use IP SLA[1] to test for video/voice, along with very detailed analysis of performance data. Measuring bandwidth is not enough. [1]. $URL$ 

Well, both OSPF and IS-IS use two-level hierarchy and that's it (for single process) - you have backbone area (Level 2 in IS-IS, Area 0 in OSPF), and "leafs" - Level 1 in IS-IS and Areas !0 for OSPF. All areas connected to leafs need to somehow connect to area 0 also to avoid routing loops. Is this design/configuration question or just theoretical question? You can have multi-level hierarchy by (for example) putting different instances on different levels of hierarchy and do redistribution between them. 

Basic information about how to interpret tcpdump output can be found in the tcpdump man page. Just do on your machine and read (and make some notes, there's a lot of stuff there). Next, you may find google and query helpful, as again - a lot of information shown by tcpdump will be protocol-specific. Couple of good, introductory tutorials: 

When planning an IPv6 strategy is it possible to have link-local only addresses within the core transit network (sort of analogous to a BGP-free MPLS core)? If not why not? If yes are there any disadvantages to using this model; maybe the potential of making troubleshooting a little more difficult, such a traceroutes not working? Are there similar deployment models that should be considered (such as a ULA core)? 

If you think about it you already know the answer. To spur you along it is easier to think of optical cabling than copper to think through the example. With optical cabling there is one core for Tx, and one for Rx. This alone should be enough to answer your question, but with Wave division multiplexing it muddies the waters. In answer to your question all information sent across an Ethernet network is sent serially. Multiplexing of any sort is sending multiple serial communications over the one core and is done by sending different channels over different wavelengths of light. However a fibre connection from an end device such as a server will generally only use one wavelength (e.g. 850nM for SX) to send all data serially over the wire. The same is true for copper connections. For up to FastEthernet 4 wires are needed as you have one pair for TX and another pair for Rx as they are electrically balanced. Gigabit Ethernet over copper is slightly different as the signals are modulated over what is known as 4D-PAM5. What this means is that there are 4 signals over 5 voltages and 2 bits are sent at a time, however this is still classed as serial transmission, only with more information density. $URL$ 

You can take a look at the CVDs for Mobility: $URL$ I wouldn't put 200 people on one AP. Try to keep the number low (~30 maximum), and in general with different use charateristics of various WLAN clients, you should get good performance. 

Edit after Mike & Saran comment: Stub network LSA (Router ID LSA with Type 3) is added to router LSA for loopback interfaces and any p2p or multipoint interfaces which don't have OSPF neighbors. Additionally, stub network LSAs are added to Router ID for p2p interfaces (links) even when there's existing neighbor to describe the links. Mask on the interface doesn't matter. Also, OSPF cares only about OSPF neighbors, it can't detect non-OSPF neighbor and then decide it's actually non-stub - OSPF looks at the world from it's own point of view. (my old answer dealt with stub areas, which was not the actual question - sorry for that!) 

IP routing interface to IP routing interface (no MPLS, no labels of any kind); router will do lookup in the FIB to find best path and forward IP packet to the next-hop; with current generation FPGAs/ASICs it's done in a very efficient manner, with FIB being structure that's usually hierarchical and very fast to look up. IP routing interface to MPLS enabled interface or vice versa; here You'll do additional lookup to check if label imposition or deposition is needed; Pure MPLS to MPLS switching - you're looking at incoming label and based on it, You're swapping the label to different label.