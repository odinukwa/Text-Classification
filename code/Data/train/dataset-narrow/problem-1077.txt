Now, looking at above, we can easily spot that many of the things are use multiple times in the same sub-pattern. Can we combine/reuse them? For simplicity, I'll use single backslash from here onward. You need to escape it by prepending another backslash to escape it in string. When I say nth road, it'll refer to the nth path in the above diagram. Review: The first road is straight forward. Match eight digits. Simple! The second road, . As you've used , similarly we can write as . Cool! It'll now become . The third road similarly can be written as . For fourth and fifth road, same can be used. Second and Third roads are similar except the separator used between digits. Is there any way to combine them? Back-reference. How can back-reference be used here? I'll show you: The character should be captured in capturing group and refer it with back-reference whenever needed. 

is the character matched by and is character matched by . Using ternary operator, correct value is subtracted from the charcode. If arrow function is supported by target environments, the code can be shortened to 

Now, the statements using these colors are dynamic and can be moved outside of their respective statements. After making all the common things dynamic, there need to add special conditions for case 1, 3 & 4. 

Note that and in the diagram refer to respective capturing group. Demo on RegEx101 Although, this answer only explains about one RegEx, other RegExes can be modified in the similar way. 

The first part can also be removed by using quantifier on the first captured group. By doing this, we're making the optional and thus will be empty and will match eight digits with no spaces between them. So, Final RegEx is 

RegEx vs which is same as (space followed by a star) matches zero or more occurrences of space. This is not flexible as it only allows users to use spaces. If user use tabs, this regex will fail. Use , which matches all the space characters. Quoting from $URL$ 

This also requires changes in HTML of elements on which event is bound. As can be seen from the code, custom attribute should be added with value as same class. Example, on this element adding custom attribute will be . This is required as there can be multiple classes on element and taking a particular class can be cumbersome or long trail. 

There still is repetition in . This can be added in group and repeated twice . Since, back-reference is used, it's not better to use non-capturing group.(You'll know why in the 4th and 5th road). Similarly, for fourth and fifth road, the regex will be 

I don't see any problem in your code except using of equality and inequality operators. Use strict equality() & inequality() operators. 

Common attributes can also be added and selected using Attribute Equals Selector [name=”value”]. However, this can be slower than class selectors. 

Note that inside event handler refer to the element on which the event has occurred. We're ready!!! Now, to bind event on all three elements, we'll pass them as comma-separated list of selectors just how we use in CSS. Here's the code of the first three event handlers 

This can be done using which returns an array of keys. Then can be used on keys array to join the array elements by glue- in this case. So, the new code will be 

Targetting elements is generic selector and will select all elements on the page. There might be some elements which are not needed to target for this functionality. You can target only required elements using 

I'll suggest to move the styles in CSS classes and add/remove the classes using JavaScript. If ES6 is supported in the target environment, you can take advantage of its features like template literals. 

Can we make this code dynamic? To make it dynamic, we need to first check what all things are different in them and by accessing them dynamically these three functions can be combined. First, we need to add some custom attributes on element on which event is bound. To take example, I'll use below element 

As Barmar explained in his comment, you can use the function as argument to and . These methods iterate over all the elements matched by selector so, there is no need of . Also, -multiline flag is not required in the regex and can be removed. Final Code: 

To check if an element have a class, can be used instead of . The methods can be chained but there is better way to do this. To toggle the class on an element, can be used. This also accepts callback function. 

: Optional or sign before number : Match one or more numbers : Optional decimal point. denotes non-capturing group. flag: To get all matches 

Just in case, if the case(uppercase/lowercase) is different from the one used in regex, use flag to make the match case-insensitive. Here's Live Demo: 

That is too much code for such a small functionality. I've rewritten the code. See the explanation in the code comments. 

is the actual expression inside delimiters here. Similarly, other two methods can be written. Other small improvements: 

will join the array elements by , thus giving which is valid selector and can be passed to and any method defined on prototype can be called on it. 

I think, the code i.e. HTML and CSS are minimal. Storing the tooltip on the HTML elements is correct way rather than storing it in JavaScript. So, NO. You should not only concentrate on JavaScript. 

also accepts list of classes separated by space. If the element have already applied one of the class from it, will remove it and add other classes. Now, the code will become, 

Here, we're adding CSS selectors as it is which are to be hide when this element is clicked. To access this from JavaScript when clicked can be used 

Default Parameters This will allow to use the assigned value to the parameter as default value if no value is passed when invoking the function. Now, ES5's default parameter notation 

Same logic can be used, in your case. As will add the glue between the elements of array, the prefix and suffix need to be concatenated. The selector can be created using 

The code, is in both and block in all three functions. This can be moved outside of them. Also, I'll suggest to use instead of applying CSS explicitly as it is more expressive and easy to understand. 

I'll suggest you to combine all the replacement strings in one and create a single regex. Also, use the with callback function. 

I compared the , and efficiency using utility. And found that is faster among the three for the same . Here's fiddle to test out this. 

Miskate I'll point a miskate in the HTML. The second and onwards, the element should be closed first and then. But, in your markup is first closed and then which is semantically wrong. Here's the formatted HTML for second . 

As pointed out by Heslacher, you're repeating the code. The value of can be cached and used in following statements. To get the value of param value, use RegEx. You're using which will fail if there are other params followed by for example, . 

can be used to create an array from array-like structures. To iterate over the DOM elements selected by , can be used. 

Moreover, the array contains space before numbers and an empty string at the end which is not required. 

Getting attribute value jQuery provides method to get the value of the attribute value. Core JavaScript has property that allows access to data attributes. 

By making the some... part dynamic, we can make this code common for all conditions. For the message, we can use either object or array(in case of numeric keys) and store the message on that key. The colors , & can also made dynamic using below condition. 

Remove some class from some elements Toggle some class on clicked element Hide some element Toggle some element depending on a condition 

Looking at it carefully shows that this only create a string of values separated by tab. can be used for this. But again, as the objects are inside array, it need to be iterated over and then values can be extracted from object. New code using this function will look like 

This regex will match only string contained in and . Thus, removing the need of those two replace statements. The same thing can be used for the other two regexes. With above improvements, the regex will be as below: 

Above solution assumes that the value from the filter array always exists in the object. If this is not the case, you can first the array and then use on it. 

If the expressions do not contain spaces in between them, can be replaced by (one or more non-space characters). JavaScript => => n * In the three functions, you're first using to get the matches then iterating over it and using inside it. This is not at all necessary. Simple is sufficient in this case. Rewritten 

If second parameter is truthy, element will be disabled. If falsy then element will be enabled. Putting it all together 

jQuery will take care of iterating over elements matched by selector and do appropriate action, in this case. 

What if I say you can avoid loop completely. Yes, you can avoid loop by letting jQuery do that for you. jQuery accepts multiple comma-separated selectors and internally iterate over each selector and perform operations. is an array of elements, this array elements can be joined with as glue, to create the selector. Let's say, we have an array and we want to add a class to all these selectors. We can iterate over the array and add the class to each element individually or we can combine the array elements somehow to create a comma-separated string and pass this to as selector.