Shutting down the Pi properly can be done using either the GUI or the command-line. All the GUI does is invoke the proper command-line command. Different OS's and different users will have different setups as to whether the Pi boots to the GUI or to the command-line. Raspbian defaults to the GUI since it endeavors to be user-friendly for new users not familiar with Linux. As mentioned in one of the comments, this can be changed back and forth using the utility. 

Here's what you should change: At the very beginning, set to none. The only way this will change is if your finds the watch. 

This naming scheme was developped for the original Raspberry Pi which went through incremental changes in said order. The major revisions (RPi2 and RPi3) only added more processing power, more RAM and onboard WiFi and Bluetooth, and kept the most common configuration of Ethernet + 4 USB ports, since that's what most users were wanting, which corresponds to the "B" or "B+" versions of the original RPi. 

is best used to run things on a timed schedule, it sometimes doesn't behave as expected at boot time. To run things at boot time under Raspbian Jessie, your best bet is to use by following this tutorial. 

Your cables are "male" at both ends (pin sticking out), and the GPIO pins on the Pi are male also (those 2 rows of 20 pins). You have 2 options: 

That being said, the repo also mentions that the assembly section was completely rewritten in C, however this is not reflected in the changelog. I would contact the author and ask where this is or which version has all C code. 

Normal behaviour for a RPi3 during boot is to have a red LED on to indicate it has electrical power and tyo have a green LED on (right next tot he red LED) to indicate SD card activity. I suspect your SD card was not flashed properly. Follow the instructions here. 

As mentioned in the comments, there is no easy logical explanation right off the bat. Both the RPi2 and RPi3 use the same USB controller (LAN9514, see here). Unless there are material differences between the actual USB ports between the RPi2 and RPi3 (which I doubt), this may be an OS issue. Which OS's are you running on both? 

Not all power supplies are created equal in terms of output voltage stability. And the rating of the power supply (2100mA vs 6600mA) isn't what the power supply will output, it is the MAXIMUM it can output. It is generally accepted that a naked Raspberry Pi 2 or 3 will use about 10W of electrical power. 

You need a more recent Chromium browser by following this tutorial. then you need to install Pepper Flash following this other tutorial. Adobe Flash itself is not available for the Raspberry Pi. 

Yes it is. Get a Raspberry Pi 3 B, as it has onboard WiFi and Bluetooth and has the ability to setup a hotspot. With the RPi3B, you will not need a USB dongle, it's onboard. 

Raspbian is a platform-specific minimalistic fork of Debian and includes drivers for the Raspberry Pi hardware. I doubt that it includes the drivers for any non-Raspberry hardware, therefore it will be unable to boot your netbook. 

Pulling the plug ona Raspberry Pi that isn't shutdown through software first has a high likelyhood of corrupting the SD card. Reformat and reinstall is your best option to fix this, learn how to interrupt a program when it hangs is your best option to prevent this from re-occuring (CTRL-C, CTRL-X, CTRL-Z, open another console (CTRL-ALT-F2) and run htop to kill the relevant processes). 

Look at this discussion on the Raspberry forum. Looks like gadget mode on the compute module requires a patched dwc2 driver. 

The RPi3 has built-in WiFi, but I wouldn't expect it to have much range with only a circuitry antenna. You could always use a WiFi USB dongle on the RPi2, one with a large physical antenna, but again, my experience with the RPi is that network speeds aren't what you would expect them to be. 

You need to install all dependencies. All those warning messages, error messages, and "no" checks need to be addressed. 

I have heatsinks on both chips for my Pi3. I don't know if it really needs them or not for my usage, but better safe than sorry. The last thing I need is for the Pi3 to throttle itself back and leave me wondering why it's slower than it's supposed to be. Heatsinks are only a dollar or two. 

The general topic your are asking about (in case you need to Google more detailed info) is "job control." Basically, shell commands and are what you will be playing with: lists processes, and kills them. You would have to parse ("have your script read and search") the output of in order to find the processes you are interested in, and then issue the command for them. 

Different OS's are best at different things. But if you are wanting to do web browsing, the Raspberry Pi isn't a very good device for that. The GUI bogs the Pi down, making browsing painful. Raspberry Pi's are best used for command-line accessible processing power. 

This is what a driver board is. You would have to get one to use this screen. Personally, this ebay listing looks suspicious for all kinds of reasons and I would pass. 

Try this. to install it, then to snap a shot. There's a bunch of settings you can set to, like resolution. 

Running Android (or any OS) in a "sandbox" on another OS is called "emulation" or a "virtual machine." It works, and it has it's uses and it's purposes, but always at the cost of performance, and there are always limitations to how far can the emulation go. For example, running a Windows 7 virtual machine on my Ubuntu laptop, I do not have access to whichever version of DirectX I wish, I am limited by the emulator. As far as the proprietary graphics drivers go, it isn't as simple as running a script. Running a script happens at the OS level, drivers happen at the kernel level (deep down under the OS). Drivers are hardware and OS specific, and since the ones for the Pi are proprietary, we simply do not have access to them or their source code. Someone will have to reverse engineer the drivers, meaning we need someone who is familiar with the graphics hardware at a very technical level. 

Sure you can, you just need to install a compiler for it. One such compiler is called mono. See here how to install it (). 

I'm willing to bet this is a new Pi with a newly flashed SD card and that you haven't installed any packages with it prior to this. Reflash your SD card, and try this project again. 

Do not pull the plug until the OS has shutdown completely. If you do, you risk corrupting the SD card and then needing to reformat and re-install. You can power down from the menu, once the green activity light goes off permanently and your display is off, you can safely assume the OS is done powering down and you can pull the plug. If you fancy the command-line, there's a command () that will blink the green light 10 times once it's safe to unplug the Pi. 

What you are looking for are called PiHats. These are expansion boards that plug into the Raspberry Pi's GPIOs and have neat little things on them, like GPS, blinking LEDs, real-time clocks and whatnot. Here is a supplier of them. 

Your best option is to remove any packages that you do not require with the command . The system should then offer to remove other packages that will not be needed. It is not adviseable to only update some packages that are installed and not others since most packages depend on other packages being at a certain version date. 

You are setting to the bluetooth address of your watch. Then you are getting into that , and if you are finding your watch by name, you are setting to your watch. If you don't find your watch, you're not doing anything to , which was already set to your watch at the beginning, and still will be set to your watch even though you didn't find it. Then you're getting into you last . At this point, has been set to your watch whether it's been found or not, so your code will always report the watch as being found. 

The general conensus is that a 64bit kernel will not increase performance on the Pi, since the only 2 real benefits of a 64bit kernel are: 

You are using a Class3 SD card. They are too slow for the normal operation of a Raspberry Pi, they are even too slow for the normal operation of most digital cameras. Get a Class 10 SD card or faster, they are common and rather inexpensive now. The reason the compressed video works fine and the raw video does not, is that the compressed video, although needing an extra processing step, has much less data to write to the SD card than the raw video. 

Most OS's that are made for the Raspberry Pi do not have as a valid username to login with (the root account is disabled). Try username with the same password, those are the default login credentials of Raspbian. Also, NOOBS isn't an OS, it's an installer for a group of OS's. Which specific OS did you install? Raspbian? 

Is your SD card write protected? This would prevent your changes from taking effect, and the command would not necessarily give you an error message. Are you actually changing the password for the correct user? It may sound silly, but double-check which user you are changing the password as, and make sure you haven't switched to root just before hand (for example, by running ) Does your user have SSH privileges? Try the command Is SSH really turned on? The SSH deamon is what you turned on, correct? 

On many electronics boards, GPIO pins are set to a "floating voltage" (not on, not off, just somewhere in the middle) until the pin actually gets initialized or used for the first time. Remember, when you turn the Pi on, it has to load a bunch of kernel modules and drivers, including the ones to use the GPIO pins. The pins are part of an electrical circuit, so unless and until the controls for that service are in place, their behavior can be "random". It sounds like this is what you are describing. 

Basically, if speed is of the essence for your application, stay away from OpenFace. And unless you have better OpenCV abilities than the OpenBR team, you should stick to using the OpenBR solution. It has a port specifically for Raspbian too. 

Change this entry for your numbers, obvisouly. Here's the wiki for Debian networking if you need more. 

is specifically for Raspbian, whence the name. Try these instructions for setting up a keyboard layout for OSMC. It involves installing a few packages and reconfiguring one, all from the console. 

Well, first, it's not impossible. A number of people independently got Android working on the Raspberry Pi, including these guys, who got Android 7 working on the Raspberry Pi 3 and are providing images for download. The difficulty with running Android on the Raspberry Pi is the proprietary graphics drivers. The are not available for download to the public, meaning you can only really run the official kernels that have been released, or suffer through unaccelerated graphics. 

at the end of the line, after , add on the next line, add save, exit, then run , then run your installs again 

The general consensus is that clusters are a waste of bandwidth. Yes, your cluster will have access to the sum of all the processing power and RAM, but you are introducing network latency into your performance equation. If you are focused more on RAM than CPU, you could build a RAM-heavy desktop for the same price as your Pi cluster. You mentioned 20 Rpi2 devices for your cluster. 20 x $35 = $700. If you go the AMD route (less expensive for the same performance level as Intel), you could build a desktop with 32 GB or RAM for that same dollar amount. Also, the RAM on the RPi (LPDDR2) is running at 400 MHz and can be accessed at a rate of 800 MT/s, whereas a (AMD-based) desktop uses RAM (DDR3) that runs at 1066 MHz and can be accessed at a rate of 2133 MT/s, about 2.5 times faster. All things considered, yes building a cluster of Pi's is a cool project. But if your aim is to access better performance, a desktop with better specs is a better solution. 

Try burning the image again, and make sure you expand the filesystem. This sounds like a corrupt filesystem or a corrupt SD card. 

The output from will also tell you how many cores you have. RPi3 has 4 cores. You could have an outdated OS that doesn't have the proper drivers for the CPU, causing it to not getting recognised properly. Which version of which OS are you running? Where did you get the installer from? 

To install any software, simply run the command: (this updates the list of repositories and which version of which software is available) followed by the command 

Since you are talking about building a case and there is already a power LED on the Pi, include a light-conductive rod (clear acrylic might do) in your case to carry the light from the existing LED to the outside of your case. 

Having a script running continuously just to keep an LED on is going to use a lot of the Pi's ressources. Here are some alternatives: 

Well, here's a video taking you through the steps of installing Ubuntu Core on a Raspberry Pi 3. Basically, from what you are saying, you are stuck at configuring what us old timers would call the . Here's a few bits of information to help you figure out what you need to put in here: 

This sounds like a power issue. The Raspberry Pi 3 is very sensitive to both voltage and current. Try a certified power supply. 

There's lots of micro-controllers out there, each optimized for a different use-case. There isn't a single one that is well-suited to everything, so whatever your project is, pick the micro-controller that is best-suited to it. Some have more RAM, some have more CPU power, some have more GPIOs, some are physically smaller, some are less power hungry. 

Open a terminal (look for an icon called Term, the icon is often a black rectangle) Change to the directory where the file is, using the command. Start with and press enter. For subsequent sub-folders, you won't need the first slash. Once you are in the folder where the file is located, type Some people use , some people use , some people use . If the text editor doesn't launch, try instead of , it's for programs with a GUI. 

Basically, those statements are assigning human-readable names to the GPIO pins, as documented for the Pi. See the official documentation, scroll to page 90. 

You can't build much without the proper building blocks :) However, the Pi is a good platform to learn programming, especially Python and C. One thing you could build would be something to do with networking. For example, there are utilities (nmap is one of them) that allow you to discover other devices on your network, with their IP, their MAC address and their hostname. You could write a script that periodically checks for new devices on the network (or devices that leave the network, or both) and send you an email about it. This is useful to determine if and when a device stops responding and may need a reboot. 

SD cards are flimsy little things. I had a similar issue with a fleet of BeagleBone Black. Since you've tracked down the issue to the SD card itself, and reflashing the card didn't solve your issue, replace the SD card. They are cheap. 

My gut feeling is that WiFi would be a better choice for your application. And rather than putting a big heavy antenna on your balloon, you may wish to have a big powerful antenna on your router instead, where weight and electricity should not be a problem. 

Basically, the WD power management and Xbian drive management don't work together, at least on beta2. Look at this post. Disable the disk's internal power management and let Xbian run the show. 

Make sure you have a Raspberry Pi 3. Compare yours to the picture below. Check the markings on the chip and the PCB.