More in general, this class is doing too much. This is the code-behind for , it seems, which should be an effector class (handling what the user sees). Make another class containing the helper methods like , , etc., for the business layer, and refer to it from . 

Why is this here? If it's because you're waiting for the client to connect, this is a bad idea because you don't know if the client might actually take longer than 1 second to connect. Instead, you should execute the next line inside the event handler: 

String replacement If you've got a lot of replacements, or you plan on adding more, try an extensible solution instead of all the calls: 

What sorcery is this? You've conjured a string from thin air! Where did that come from? You should avoid magic strings where possible, instead assigning them to a or of commonly used phrases within your application. The same can be said for in the call: what is 1987 and where did it come from? Assign it to a resource list. Client.cs Code Analysis Says: Implement correctly. Your class nominally implements , but you've only written half the implementation. You also need a method, called by . If called as , it should also clean up managed resources; if it's you should only clean up your class' resources. You also need to tell the garbage collector not to run the finalizer on your class because you've already implemented . In this case there's no difference that I can see, so a few simple modifications: 

Don't prefix your names like that. If you're adding a prefix, it should still follow all the rules of variable naming for C#. For private fields, variables are named in , with the underscore before it. Public properties are named in . So, you can rename a number of variables, for example should be . Server.cs I do believe I've found an error here. 

Generally, attaching event listeners in markup should be avoided. A couple reasons off the top of my head: 

Main thing is the first issue, the listener has to be in the global scope. I recommend either or the jQuery to listen for the event on the elements. 

Nice work. You can make a lot of headway by using attributes. These are attributes you can add to any element to store whatever you want in them. They will be available on the property of the HTMLElement, and will always have string values. For instance, given the following HTMLELment: 

Four inputs is not that many, so, doesn't really matter. But, if it grows or if you might have to change it often, probably better to loop through the inputs as I have in the jsfiddle. 

In , the leading unary operator () is used to convert the string values to numbers. Just a side note. 

You'll notice I'm using classes of the form like , that's because it's nice to separate CSS class names that are used purely for JS from those used for styling (more info). The full JavaScript: 

2: Slicing the string is fine. If there is more to the question, then please elaborate. 3: Use of the variable to store the match is not too clever. I recommend against assignment inside the condition, though, it's just something that can be error prone, in general. Down the road you may make an edit and forget to have only one , or something like that. It's usually considered against best-practices, but is not invalid or anything. 4: As I'm not a compiler guy, take this for what it's worth (there is probably obvious conventional wisdom that I don't know about). Using a single token type for these four operations seems fine to me. They all have similar characteristics. But, it will likely be an issue if you broaden this usage to operators that have different characteristics, like the unary (e.g. ). Having said that, you may end up keeping these four operators under one type. You may end up wanting to group on precedence, though. 5: Not a question. One thing I want to note, the and methods are organized in a way that is a little strange, to me. You consume a token (move forward), then when you are getting the next token after that, check the type of the previous token. I like to have separate methods for the various tokens I have. For instance, you might have and . Each of these can attempt to consume the correct type of token, and if it fails return . The method that called them can decide if that is an error or if another type of token should be attempted, like . As a side note, a scanner I wrote for a DSL: JavaScript and Python. It uses a mix of regular expressions and character comparisons for consuming content. The scanner has a property and a property, and any time a token is created the content spans from to . Then, is moved forward to . 

I've written a userscript that pops up a dialog before you take a moderation action (closing, deleting) with some pro-forma comments, so that you can add one of those before you cast your vote. I'm pretty happy with how I wrote it, but what's clear to me is unlikely to be so to others. Is there anything in this that I could have "phrased" better, or that could be optimized more? Comments on style (or, for that matter, anything else) are also welcome. It also occurs to me that this isn't as extensible as it could be: it's not easy to add new comments. Is there anything I could do to facilitate this? I've also put this code in a gist, if you want to see it there. 

Did you just... catch a generic exception? And ignore it? You need to work out what exceptions to catch and what to do with them. In this case, you're most likely to get a or , assuming your arguments are constructed properly so you don't get an or . So instead of catching a generic exception, catch both of those and tell someone about them. Something's gone wrong and this program doesn't work, I want to know why. 

and its equivalent on the next line, is redundant: you should only use when you're passing in a delegate, and even then not always. Rewrite those two lines: 

can just be , because range starts at 0 by default. The syntax is essentially - the only mandatory param is . Filename parsing If you want to parse filenames by yourself rather than using a library, then while your current solution: 

Running Code Analysis in Visual Studio on this code throws up a few issues, with which I shall combine some of my own remarks. Program.cs