on the PI before switching: apt-get install btrfs-tools 2. From a linux computer: btrfs-convert /dev/sda2 In change to In change to 

Here is a diagram showing a similar connection I made once to an an AVR to show the pinout of the MCP3204: 

I maintain a distro that runs chromium called FullePageOS. I added gpu acceleration, but now mp4 video crashes the chromium tab when its viewed (mpeg works). How can I fix this? Alternatively how do I figure out exactly what is causing chromium to crash? More info: I am using kernel 4.4.34-v7+ and Chromium Version 51.0.2704.91 Its a bug I can see on FullPageOS RC1, here is link to the bug with conversation on github. Update: Terminal output is: 

I am building a raspbian-based distro (FullPageOS), and it seems like on boot of the latest Jessie sntp service is running, internet connection is established, but sntp is not updating the clock to the current date. This is particularly annoying because all the https certificates become invalid because of this. I know that running this fixes the issue from the commandline: 

Force removal of a package. This is the command you will reach for to just wipe the package from your system and reinstall when reinstalling alone isn't enough. 

Getting Started Arch Linux provides package management facilities similar to those found in other modern Linux distributions. This is a guide to common package management operations. Before proceeding further, make sure your package databases are up to date with: 

... You can use pacman -Qlq | grep bin to find all files in that package that are in a bin folder (and thus are likely executable files). This is handy when the command associated with a package is different from the package name. 

Then you can then follow a pacman guide almost exactly but using instead of pacman. The following guide was taken from $URL$ and got me started: 

Both tools are in the AUR, so the easiest way to install them will be with a helper like yaourt. Note: The ARM is an unofficial project and has been closed in the past, so it might be a good idea to avoid clearing your cache in case the ARM goes down or changes locations again. If you would like to roll your own ARM, there appears to be a NodeJS project on github. Removal Remove a package, provided nothing is depending on it. Leave its dependencies installed. 

I thought I might experement with btrfs as the root partition to see how it handles file corruption during power cuts. But I can't get it to boot. What I did: 

For a 3D print server you can try using OctoPi. Its a distro for the Raspberry Pi which currently supports uploading and printing gcode via a web interface and time-lapse videos using a webcam. Slicing on the Pi is a problem due to lack of memory, but it might be solved in the long run. 

Ok, It seems like I found a way. First, make sure the spi module is enabled. In the file comment out the line: 

I have an MCP3204 12-bit Analog-to-Digital Converter (ADC), and a Raspberrypi. Does anyone know what I need to plug where to get them to communicate? Is there an SPI python library I can use? O am looking to use the onboard GPIO spi which is faster than bit-bangging. Schematic of MCP3204 Pin Diagram of The PI: 

Arch Rollback Machine The Arch Rollback Machine is a collection of snapshots of the official Arch Linux mirror. As of this writing, it goes back four months. The ARM is currently hosted at $URL$ though this could change in the future. ARM packages can be installed remotely using pacman -U . 

Unfortunately, it doesn't display the version of the package in the repository, so you won't be able to tell how out of date each package is. If this is important to you, you might want to look into 3rd party package managers or write a script that ties together the package version obtained from pacman -Qi and pacman -Si. You can get the version from pacman -Qi or pacman -Si using a regular expression. 

Sometimes you might want to just download a package for archival purposes without installing it. pacman -Sw will download a package to the cache folder. 

Searching Favoring brevity over intuitiveness, most package management operations in Arch Linux appear in the format: 

But running it on X autostart does not seem to have the same effect, I assume because the internet is not ready yet. What would be the best way around this? EDIT: I understand systemd uses systemd-timesyncd, how would I make sure it updated on boot when internet starts up? 

Download FullPageOS RC1 (md5) (or you can build devel branch) Set up wifi/connect to ethernet After boot vnc, or press ctrl+tab to open a new chromium window (Chromium starts at boot) Put the URL: $URL$ 

Expected: video should play Result: get an "awww snap" page Notes: if you add the tab to FullPageDashboard, and the tab is not selected, you can hear the video playing, but once you switch to it so it becomes visible it crashes. Note: I also tried runnign with and look in chrome_debug.log, and could not find something about the crash (I am not sure what to grep for) There is also a thread about this bug in raspberrypi forum Here is the status of chromium in the gpu tab: 

... While pacman -Qi provides information about installed packages, pacman -Si queries the database for the most recently retrieved information about a package. 

Pacman provides a way to upgrade all of your packages at once, but it is not recommended because Arch is a rolling release distribution. If problems arise, it can take time to determine what the causes are. 

If pacman -Qi is passed no arguments, it returns all packages in the system. You can search this output to get specialized information about installed packages. For example, if you wanted to get each package and its size: 

IMPORTANT! is insecure and deprecated according to the wiki: $URL$ While @Jivings answer was best back in `12, I would recommend installing one of the more secure and feature rich arch package managers (and I suggest someone update @Jivings answer as it has the most visibility). I am using and dig it. Has all the features, is secure, and the cli works almost exactly like pacman. To install: 

You could do that, using android's USB tethering. On android 4 this option should be at (option becomes enabled when you plug the USB to the PI). Then you need to set up your PI for this: 1) add the following to /etc/network/interfaces: 

Vcc and Vref to +3.3 Analog Ground to Ground SCLK to SP10 SCLK CS/SHDN to SP10 CE0 N CH0 to some resistor (or what you want to measure) Digital ground to ground Din to SPI MOSI Dout to SPI MISO 

The file is not created. It is inaccessible. I will note that if I connect the powered hub to my laptop, with +5V removed it also shows up as . So this probably not a Pi specific problem, but due to it I can't access this drive with my Pi, as I would like to. How can I get this drive to work with my Raspberry Pi. 

Upgrading from 56.0.2924.84 to 60.0.3112.89 and using Debian Stretch seemed to have solved the problem. You can download a distro and see its working with version 0.8. And how it fails in version 0.7. Here is the current gpu tab: 

It isn't exactly convenient to browse the ARM for older packages. Fortunately, there are tools that make this easier: 

Downgrades Arch Linux does not officially maintain deprecated packages. Instead, you will need to rely on your package cache and places like the Arch Rollback Machine. Cache Every package downloaded with pacman is stored in /var/cache/pacman/pkg. 

Remove a package, provided nothing is depending on it. Remove its dependencies that aren't required by anything else. 

Upgrades Since pacman revolves around the idea of "syncing" a package with the remote repository, will upgrade a package if it is already installed. Pacman can list packages that are out of date. 

... The package name on each line can make the output more difficult to use in a script. pacman -Qlq (i.e. "pacman query list, quiet") will not print the package name. 

If you want color highlighting with pacman -Ss, you can uncomment Color from /etc/pacman.conf. It highlights different things than pacsearch, though, so you might want to try both and see which one you like better. 

I am trying to build a 3D printer farm with the pi, and I need a large USB hub. I found this hub. But don't know how to evaluate if its any good. 

you should use in python to join the path of a file OS-independent. The error might be because the image has no size when you are trying to show it. 

I got a 2.1A power supply for the USB hub and now it detects it correctly. I guess the drive draws more than 1A of power. 

I have the following configuration: A Raspberry Pi model B connected to a powered USB hub, with the +5V detached from it (otherwise the hub powers the Pi due to backfeed). They work fine together and I can plug in many hi-powered devices, such as wifi adapters. I want to connect to it an unpowered external western digital harddrive. When I plug it to my laptop it shows up as: