About performance As a forewords, I'm not sure you should be obsessed with performance as a beginner (actually I'm pretty sure you should not but surely others will disagree). Consider reading : $URL$ With that said... In the Employee class : As said by coderodde, your can't be made faster. In the EmployeePicker class : isn't made with performance in mind. Seeing your code there is no point in using this class over a and I'd really recommend using a over anything else. If you really are obsessed with performance, may outperform a when you have over 20_000 elements for your specific use case. However, if you are really really obsessed with performance and you know all the employees as soon as the program starts (and then only have to retrieve some of them after that) then you should consider using an array that you sort once... it'll also be the most space-efficient solution of the three. With less than a hundred elements, I'm pretty sure you can consider all solutions equals in performance. Conclusion : IMO use unless you have good reasons not to :) About code format You should make the fields of Employee and and create getters for them. When a method have multiple parameters, you should always follow the comma with a space (makes code more readable). The indentation in is really confusing. 

What does CNRG mean ? ^^' Please search for the good practices in naming classes ;) is only written once so it should be ... actually it should be a constant. Same goes for the field. The extension is also part of the filename IMO. So in the end that'd be : 

Once you have tested the basic properties of the matrix's operators do 1 or 2 tests for each operators with constants matrixes ; for example testing the result of matrix [[1, 2] [3, 4]] + matrix [[17, 42] [42, 0]] (with no random value) Here are some tests examples : 

With this simple line, we now have the number of occurence of each elements of your list. This is still not enough as we want to consider the maximum number of occurences. We want to have the number of occurence if it's below a threshold. Collectors (again) comes to the rescue : 

We won't use the first solution, it's verbose, unpractical when dealing with exceptions and... just booooring ^^ So in the end the code should look like this : 

3) Do not close your in the try block, indeed if an exception is thrown it'll never be closed, use the finally block for this. 4) Do not catch Exception to simply use , it's bad practice as the calling method won't know if (nor how) the method failed. If the methods cannot manage the exception... they should rethrow it. If having a general object being thrown around does not suit you, you may wrap it inside an IOException for example like this : 

I used lambda here as it's simply less verbose. is needed as must be for the closure to work ;) Also isn't a very good idea.... It's over 10 millions years you know ? ^^ 

TreeSet are guaranteed to always be sorted so maybe can take a TreeSet as an argument ? If you want to only manipulate then I'd recommend you to copy the input into another variable and then sort it. 

Avoid declaring two variables on the same line, also does not correspond to the java recommended notations. Java uses lowerCamelCase for variable (and method) name so you should write as . Also is not really clear as a variable name IMO. Maybe you should consider . 

You are modifying the argument in an equals method !!! ALERT !! :) If you make the Fraction method immutable this will be solved. ;) 

For the add,sub... methods I'd have made them object method myself but that's really up to you in the end ;) is a poor name for the boolean parameter but, aside from that, it's ok. Your method is good (formatting aside) but you should consider making a short javadoc for that not-so-easy-to-understand method. [EDIT] : it's better when hashCode give the same hashCode for two equals objects, as such you should only use reduced number for your hashCode calculation, the implementation given in my code is thus error-prone ;) if you make your object immutable, you'll encounter the following problem 

This code is very good looking:) Some nitpicks about the main code : 1) factory methods : There are quite a lot of factory methods here, you should consider putting them in an outside class ( or ). 2) Random : you should avoid using when possible because it : 

makes for a weaker random variance (the entropy comes from using a lot, creating a new Random instances don't have much entropy as it is based on current time) is harder to test cannot be subclasses with a better randomization algorithm (the period of the default Random implementation is only 2^48 :/ ) 

The code is pretty clean, if you started coding very recently, you can be quite happy with it. But please note that some of your variables names start with an uppercase letter, as a reminder java use SCREAMING_SNAKE_CASE for variables, CamelCase for class name (or object type if you prefer), and camelCase (aka lowerCamelCase) for local variables, fields and method name. Also if the user input only one word then your code fails (which is not necessarily bad nor wrong)... silently (which is bad). You should print a warning message in such case. 

Writing to the console is incredibly slow.... it also bit me in the past :) Console is not really meant to print such big data anyway. What's your use case ? 

sounds like a complete sentence which you should avoid for a class name. Consider renaming your class to , , etc... 

You can correct the first point by using the class ($URL$ You can correct the following two points by using more injections. The following code snippets show a potential combination that answers all previous points : 

SendRecord have multiple problems, the main one being : it does way too much. The others problems that come to my mind is the fact that it's a singleton (making mocking in your tests a royal pain), and the fact that the constructor is starting an executor... constructor doing too many things is a bad practice for some (me included :)). I think it's that big because you wanted to have a cache shared between all policies and because you wanted to handle the retries of message in it. If i'm right : you should address the first point with dependency injection in the various s, I'll propose a solution for the other problem a bit below. Thirdly, I think you should abstract the addresses in an class, manipulating feels really awkward. The objects may be nothing more than a wrapper around a long, but they will be responsible for ensuring that their wrapped value isn't complete cr*p. Modify the accordingly ;) Then, I'd probably create a PacketSender/PacketWriter interface... making it Closeable (I think it suits your use-case) like this :