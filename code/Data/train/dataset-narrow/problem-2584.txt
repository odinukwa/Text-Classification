The real answer is: enough to give your player a smart opponent, and as many as you can get away with whilst giving your player a high quality experience. But that's probably not going to help yet since you can't really calculate moves in any decent amount of time. What it's going to take to make a smart AI You can't afford to evaluate every possible result of every possible move. Only seeing two moves ahead makes for a slightly unintelligent AI in a game where it's often said the player who can see the farthest ahead will win. Former world chess champion Garry Kasparov is quoted here: 

If you want to erase part of the line when you drag the mouse over it, there's two ways: The cheating way Have a background with a solid color, and have the mouse create lines/shapes of that color over your existing line. The player will be given the illusion of the line having been erased, though this approach might fall down on its face if you're trying to do anything reasonably complex. You could also have a background with a texture, and give it an identical foreground (which is completely transparent, and mouse clicks add to its transparency mask). The non-cheating way Detect where the mouse has intersected the line and break the line in two pieces, leaving you drawing multiple lines after multiple erasures (all parallel). To detect this, each frame, you should determine the vector between the mouse's current position and its position in the previous frame and determine if the line of this vector intersects with the line you've drawn. If so, split the line on the intersection point into two lines, then shorten both slightly (otherwise your erasing will appear to do nothing, since both lines are still perfectly joined). 

Use a 2D array that links a set of coordinates to a map object. When you get down to it, the only operation you'll be performing here is "get me the map at coordinates (X,Y)" and a 2D array is in a very literal sense made for that. Each map should also know its own coordinates so that when the player exits right, you can say "get me the map at coordinates (X+1, Y)". To make it easy to move maps around, map objects should not know their own coordinates until the first time they're requested from that 2D world array. At that point, the 2D world array tells it its coordinates. A space concern Since you seem to be making a winding cave network, you may become concerned once you run into a situation like this: 

I'm not sure what you're doing and I'm not sure you're sure either. The language in your title ("Help, I can't reference my vars!") being completely weird and not making much sense in the context says a lot. After all, you can get at your variables just fine apparently, it's just that you've got weird behaviour, so I'm not sure what you mean and you're probably not sure either. It seems you're out of your depth and you don't really understand what you're doing very well, so the best advice I can give you is go back and complete some basic tutorials on Java programming. It looks like you're struggling, and you're missing a lot of basics. You could really, really do with learning those basics, so go back to basics and learn them. Do a tutorial. 

where a and b are the difference along the x and y axes, and c is the total distance between the points. In Taxicab geometry you don't need to square it. It's extremely simple. The distance between one point and another is just the sum of the distance along each axis. In 2D: x difference + y difference = Manhattan distance The fast method to calculate this Create a function which takes two points and calculates the above. If you don't know how to do that, you need to go find a tutorial and start learning your programming language through it. 

My ultimate advice would also be that you should not use PHP at all, and instead should create this game in anything else: Python webservice, ASP.NET, JavaServer Pages, take your pick. PHP is an incredibly bad language in all the ways a language can be bad. This is not me having a language bias and hating on a language like how some people hate C++ or Java. This is different. PHP is actually just bad. 

Now the answer What you need is to get the Camera's rotation matrix: the exact direction it's pointing. If the classes you're working with can return that from the camera itself, great! If it can't, you can calculate it based on the camera position and target - see here for one way to do that. Once you have the camera's rotation matrix, you can just set up the movement vector then rotate it to point in the camera's direction using its rotation matrix. The advantage of this approach is you can instantiate one general movement matrix, throw in all the vertical, horizontal and forward movement for your character in that update, do all the calculations you'd like on all of it then you do one rotation to face the camera and make that movement happen all at once. I have no idea which language or framework you're using so I'm going to be using some C# and XNA here. 

You can then access this with and , which would equal 39 and 204832 respectively in this case. Your other option is submitting this as POST data (form data) and accessing it using . I don't know of a way in PHP to send POST data other than to have form fields on your page and submit that form ( would come in handy here). The only advantage here is that your variables aren't exposed in the URL, but it is does not make anything more secure. I am not a security expert, but don't trust any information your client gives you. There are a lot of security checks you might want to do and only you (as the game's designer) would know which ones need to be asked. Some likely examples: 

Everything else is probably a variation on those same instructions: the coral isn't rotated much, those two shells/stones are probably only placed if the terrain normal is pointing roughly upwards (i.e. the terrain's flat). Final Notes Since a commenter asked: I create these images in Adobe Photoshop (shrunk on here by 50% for crisp lines) using a Wacom Intuos3 tablet (which lets me draw freehand and naturally, and vary my line width etc). 

Citizen Media Law Project, an American site, confirms that violation of a person's right of publicity would lead to tremendous legal trouble: 

So you're actually trying to instantiate the Java AWT Image class, which is abstract, so no wonder you're getting that error. I'm guessing you used your IDE's suggestion to import a namespace. Slick2D's Image class is located in the namespace, which you never import. The Slick2D Image class simply doesn't exist as far as your code is concerned - but the java.awt Image class does. and you'll be fine. 

Yes, of course. The devices are communicating data so they're both kept up to date on each other (or at least, on the information you choose to share). They are not necessarily keeping absolutely in synch, and nothing is saying they must use that data in the exact same way. There's nothing stopping you from displaying that data completely differently between the two apps - just program your app that way. Each device has its completely individual app running, completely separate from the others, and it can do what it wants. After all, how could you possibly have, say, a multiplayer game with fog of war if your games weren't displaying data differently? As for the "more than two" - I don't quite understand what you're implying since you're not communicating well, but again it's just a matter of what data you want to share and what you want to display and how.