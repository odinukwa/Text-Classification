(Ignoring statements like "Java is clearly a more powerful platform") Short version: The focus is on Javascript because that is the whole point of the HTML5 everything. To allow browsers to do things like play video, audio, and render graphics without needing a plugin for it. The biggest problem with Java as a browser game option is simply that there isn't any support out there for it. Browser game portals simply don't accept Java games, and pretty much all the money is going to Flash games (and to a lesser extent, Unity, in a few cases, HTML5/Javascript games). With Flash 11 just being released, it's possible to make full 3d games using the Flash plugin, so Java's main advantage there is gone. And with a much higher market penetration of Flash vs Java, it's better overall for people to focus on Flash development. Minecraft is kind of a rare exception, albeit a very well known one. The main focus for Java-based games right now is actually Android, but for mobile browser games, Javascript or Flash are still the best option (and really, native games are still the best for performance in those cases) 

The problem here seems to be that certain speakers just aren't very good, I'm not sure if there's a solution, since there's no way to check if the user has a set of $1,000 5.1 surround sound speakers plugged in, or is using headphones, or if they're using the generally crappy built in speakers on a laptop. This is actually a problem for pretty much anyone, since even if you could check their hardware configuration, the user might have their hardware configuration set up wrong, or they might occasionally switch out their 5.1 speaker system for a pair of crappy headphones because it's 1am and they don't want people calling the police for noise complaints (or they don't want to wake their roommates/parents/etc). So, the best solution would be to make sure your sounds sound good on a decent pair of speakers, and they all have an equal volume between themselves. Basically, no sound is ear drum breakingly loud, or whisper quiet when compared to the other sounds. If your game has speech, then include subtitles so users can play with the sound turned low, or muted entirely. Include volume controls so users can set the volume themselves (including a mute button because that 30 second music loop is starting to get annoying). In short, you can't control if someone has bad speakers, so don't worry too much about it. If sound is vital to your game, then include a note at the start saying so. Sidenote: there's probably some fun stuff you can do in audio editing programs to fix some the issues with lower or higher pitched sounds, but all speakers have a maximum and minimum frequency range, and there's very little you can do to check that, even if you were making a native game (except for mobile development, where you know the range in advance) 

I think there's a few reasons behind 3d platformers declining in popularity, and thus, declining in sales (and since sales is the defining metric for what types of games are made, you can draw your conclusions from that). First, Jeff's comment about people simply not comprehending 3d too well on a 2d screen. Now, you could argue that FPS games are 3d on 2d screens, and they've been around for ages. But the key factor there is the camera position. People can translate a first person view better than over the shoulder camera. Now, there's open world games (GTA/Just Cause, etc) that use an over the shoulder camera, and they're still around. But how many times do you need to do precision platforming in those games? Rarely, if ever. So, the camera is a problem, especially combined with precision platforming that is the stable of most platformer games in general. Which brings up the question of controls. You need good, solid controls, otherwise your game will be considered hard, or frustrating, or just plain bad. This is a problem with any game, but it's definitely true of platformers. Finally, all those games mentioned in your original question likely were too much. Specifically, I'm talking about Donkey Kong 64. It's a game with too many bad worlds and too many characters who have little to no variety in control or theme. Overall, it's a chore to get through and there's very few 'good' parts. For the same reason adventure games died because of terrible puzzle design, 3d platformers died because they were all collectathons. Now, all of that said, they're not completely dead (Mario Galaxy has sections of 'true 3d'). But creating a good 3d platformer is hard, and the asset creation time would be better spent on creating a more popular game type (like an FPS, at the moment). 2d platformers (even 2.5d like Shadow Complex) are still cheaper to make, and it's too much of a risk to make a full sized 3d platformer at the moment. 

There's two major "types" of game testing/QA. Publisher and developer. Publisher QA is like AttackingHobo's comment, where you're mostly sitting in front of a game in a cubicle with tons of other people around you, and you're turning the game on and off to make sure it doesn't crash. Or you're running into every single wall to make sure there's no seams in the geometry. And you're doing this for 12 hours straight, and getting paid $8/hour, and you better show up early tomorrow if you want to keep the job. This is the game industry equivalent of a retail position. Low pay, long hours, not much chance for advancement unless you're promoted to manager of the team. It's often a temp job where you might not work for 3 months because there's no games to test. Developer QA is more in line with the automated software tester position you have now. You work with the team who is developing the game, pointing out major bugs, being able to provide useful feedback that could impact the game, and possibly deal with build issues, or other things. Developer QA is generally full time, salaried, and will be hired by studios like all the other jobs. You're probably not going to find too many QA positions at small indie studios, but a "larger" studio might have openings. This is just a broad overview, and as always, there's going to be differences depending on your location and other things. Josh's answer covers salary and job prospects fairly well. Realise that the game industry is competitive, and less stable than a typical software job. 

Start small. Clone pong, breakout, or tetris. Or make a simple game where you explore an island (Myst, anyone?) If you want a challenge, make an FPS, or a on rail shooter game. If you want to do something really fun and crazy, make a racing game where you can make the car better not by buying a new engine or upgrading the car, but by adding lightning bolts and flame decals. Or make a game from your favourite genre (favourite genre may vary, fans of MMOs or Dwarf Fortress may go insane trying to recreate their favourite genre) 

In general, most games opt for the much easier and predictable method of scripting their AI, or use noise for terrain/content generation. Most games tend to avoid evolutionary/genetic programming because, frankly, it's often too expensive to implement, or too random for most players to understand. Outside of a few mostly experimental and niche games like Darwin's Pond or the Creatures series, I really can't think of any games that use EA or GP. Black and White used the Belief-Desire-Intention model as the basis for it's Creature AI, but the game got a lot of negative response due to the Creature's behavior seeming to be random. It's likely that the second Black and White game used scripting for the creature AI. 

In terms of the humble bundle itself, all the iterations have made over $1,000,000 each (divided among charity, the "humble bundle company", and various developers). The Humble Bundle #4 has made about $1,758,970 as of this second. According to the humble bundle #3 stats, it brought in $2,169,341.93. So, the numbers say that the bundle itself is doing well. Will it be successful in the long term? That's actually something that is up for debate. Opponents of the bundle idea make claims that the money brought in with bundles is actually quite lower than what a game would otherwise make, and it's lowering the expected price point for indie games. It's impossible to say if the bundles are a good thing or not, and anything else is mostly going to be speculation. 

It's probably this. TF2's server is written using C/C++, and thus, is going to be faster than node.js (which if I remember correctly, uses Javascript interpreted in Java) Google's WebGL based Quake uses java for the server, and the source code is found here: $URL$ It might be worth looking through that to see how it's done. I also wonder what you mean when you talk about having a framerate on the server. There's no reason to render anything on the server, it should just be there for processing commands sent by the client. Finally, the rule "do not trust the client" is more important than offloading expensive calculations onto the client in hopes of improving performance. Especially something as important as collision detection. Doubly so when your game is Javascript based, and thus fairly easy to hack (compared to something like TF2 which is compiled). I know this isn't much of an answer, but hopefully it'll point you in a few directions that might help improve performance. 

The Angry Birds title. In some ways, it's a bit more confusing that you can click on the "Play" in the middle (if you don't understand English), but at the same time, the word "Play" is in the centre of the screen in bright, bold letters. It's hard to miss, and the actual selectable area includes more than just the letters. There's also four buttons at the bottom, using symbols (which is great if you don't read English, but can be confusing to work out exactly what they do until you click on them). The left and right are the Options menu and a "promote the game" menu (this is true of the Chrome Angry Birds, I don't have the iPhone version to double check). Again, having an options menu is useful if you don't want to have sound going off while playing on the toilet or riding the subway. There's also Leaderboards and Stats/Achievements (again, these are best guesses in this case...), useful if you want to show off to people how much better you did at a certain level of the game. So, what can we take away from all this? The key feature of a title screen is an easy, recognizable Play button, possibly a separate one for each game mode if your game has that. Other things to consider are Options, Stats/Achievements, Leaderboards, Level Solutions, and/or Promote the Game. Some of these are more important than others, and some of them might not even apply to certain games (Level Solutions is a good idea for a puzzle game, but useless for an FPS). It is important to not clutter your main menu, lest users get confused, but if you design it well, you can include all of these options and still make it obvious which one takes you to the game itself. 

Board games. Or card games. Or games that don't require computers at all. In some ways, these are easier than computer games, because you don't have to spend time in the code if you want to change the rules, you just change them. It's quick and easy to make a game using tokens or random craft stuff, and all you'd need is friends to play test the game. Ideally, friends who like board games or whatnot (if you don't have any such friends, search for a local board game group or similar)