But we know that the can potentially fail. So why go to all the problem of cascading threw the tree if will eventually fail. So you may as well do this up front and then only try and add the node if you can allocate it. 

Change in style. Unlike @vnp I am not worried about recursion when using binary trees. The whole point is that its not going to get that deep anyway (that's why you are using a tree). But even in the worst case and it goes linear you are unlikely to break the stack unless you are solving some big data solution and then you already know that and take precautions. Sure this works. But I prefer a more functional style. 

Also by using this style re-balancing dynamically does not get that much harder. This again I would use a more functional style: 

Looks like this loop is trying to reverse the string in place. Which will fail as by the time you overwrite the first half the second half is a copy of the back half. Luckily it completely fails because you don't actually use the variable. 

Hate the use of assert. It means that production code runs and behaves differently from test code. In my opinion code should behave the same way no matter what (otherwise things become hard to diagnose when things go wrong). 

You use the recursive technique to call . I personally prefer the iterative approach. This uses an initializer list. 

This is a list that holds pointers to and as such the items are correctly polymorphic. The container takes ownership of the pointers and will correctly destroy them when the container is destroyed. And finally the container exposes its members via reference to the underlying object and thus works very well with the std:: algorithms. 

Every time you encounter a path to a destination node you update the destination node with the shortest distance. But this also means you have to re-sort your whole priority queue each time you change the distance. This is not very efficient. This is why the destination node and distance are supposed to be stored together in the priority queue (sorted by distance). Then you will always find the shortest distance to a node first. Then duplicates will be quickly removed by the . Checking the flag here is an optimization that I don't have in my example (that can be added). But putting it here is not enough. You also need to check the flag before you start processing the current node Otherwise each copy on the frontier list will push all its children on the frontier list thus growing it exponentially. 

Also you are returning the result by value (and thus copying) when you could return a const reference achieving the same affect without copying. I am not sure what is. In computer science terms a Handle is named resource (thus allowing the resource to be moved and the handle to still refer to the same thing (commonly implemented as a pointer to a pointer to the resource)). I handle you violate the "DRY" principle: this code (or simple variations of it) are reeated multiple times.: 

Your descent of the the chain is manual and repeated in any every class. This should be automated in the base class. Each derived class should simply perform the action that you wan them too. This will remove programmer error when a new developer creates a chaining task. Your creation of the chain elements is not consistent. It would be easier to have a method then force every new task to join the chain rather than force every class to have a boiler plate constructor (that can be done incorrectly). You do not always want to chain all the way to the end. On of the handlers should be able to say I have done the final processing stop searching the chain. No memory management (but that was covered by @Mantosh Jumar). Also note using smart pointers helps you with another design pattern (Separation of Concerns). 

Some compilers allow it because it is C90 extension. But its not really portable. Use std::vector (or std::array) instead. Don't put code on the same line as the close braces. I dobt anybody is going to like that style even the people that want to save vertical line space. 

Don't like it. But it may work. The principle of "Separation of Concerns" your class should either "business logic (card stuff)" or "Resource Management (card container)" The question you need to decide is if is doing business logic or resource management. 

This is exactly like your class. Usually I would expect you to pull these types from the parent rather than defining them independently ( unless there is a good reason). So I would have expected: 

We don't want to add anything to the clause. Thus following the error message indicates we need to use aggregate functions (in the select probably). Try changing the select: 

They are also extremely dangerous (they basically tell the compiler to shut up and do what your told as I the programmer am god and know better than you the simple compiler). In reality this is usually wrong the compiler always knows better than you and telling it to shut up is usually hiding an error message. As a result C++ has its own casts. There are actually four of them: 

Just need a local customer iterator. This squares the values and pushes them into a container on assignment. 

Secondly by specifying you are limiting yourself to only sorting vectors of int. That are lots of things than can be sorted. So you should generalize this to sort any type. 

Note: . Type is still the most important thing of a C++ object. But the exact type does not matter just that it has a specific type and that you can determine the interface of the type at compile time. 

If there are multiple threads that could enter this function then between the signal from the producer thread and this thread waking up from the wait another thread could have stolen the object. Thus you need to recheck the state you were waiting for and go back to sleep if it was stolen. This would have been fixed by the MutexLocker above. But the code as it stands leaves the lock locked. 

This is not transferring ownership. It retains ownership but clones a new car into the garage. While we are here those names are truly terrible. The fact that you have in the name. I would expect something like. 

The standard erase-remove idiom does not need to do this because it works out what it needs to remove first. Thus saving this cost (even if it is very small). This does not work on all container types (in pre C++11): 

This makes it hard to do comparison move forward backwards etc. I personally just store the number of seconds since midnight. 

So it goes out of scope at the end of the constructor. Which means the destructor is called. Which means that std::terminate will be called if the thread has started. If the "thread of execution" has not started (ie it is not joinable) then it is just destroyed and no "thread of execution" was ever created. So either this will cause the application to terminate or no thread will be created. Code Review Lets not place a huge function in the middle of the constructor. Lambdas' are nice but there best for one liners. If you have a whole complex function run then move that code into its own method and call it. Don't use an if statement to return true/false. Just return the expression you are using for the test. 

But if the mutext failed to lock what are you going to do. If the mutext fails to lock there is probably something fundamentally wrong so you should probably stop the current action by throwing an exception. You can't conditionally return a value. You must always return something from a function that expects to return value. 

A couple of notes on the direct translation that I would change: If you are not going to return a meaningful value (and we notice from usage that the return value is ignored). 

So all children of must accept a and object. They will then construct themselves reading the data directly from the stream. RequPackage.h 

Declare variables as you need them at the point where you are about to use them. Note a lot of these object have constructors that run code. You don't want to run code for an object that is never used. So only declare them just before you use them (and then use a good constructor). Also by declaring them close to the point of usage it is easy to quickly see there types (without having to scroll to the top of the function). Be specific with error messages. 

You wrap your global variable in a function and make it a static member of the function. Then you can retrieve it with a call to the function. It is created on first use (so side affect it is lazily created) destroyed in the correct order and its construction is Thread Safe. So lets look at your situation 

Now that we have the basic algorithm we can use some of the standard algorithms: So now replace the main loop: 

Vector - Resource Management Allocation Vector - Resource Management Copy Swap Vector - Resize Vector - Simple Optimizations Vector - the Other Stuff 

Remove that line. It is not needed. Note: Here you are returning a copy of the value in the your stack. 

I agree with @Edward. I would just use the astandard stream functionality rather than regex to parse the stream. So my input operator would look like this: 

No real reason apart from tradition I suppose. But it does show tail recursion more clearly. The compiler can easily optimize tail recursion into a loop for you. But it also makes it obvious to the human eye where tail recursion is. A static member of a recursive function!!! 

Since you should be using RAII for you locking anyway (See below) the signal is going to fall inside the lock stratergy unless you do something complex. Also you should pass the parameter by const reference rather than value. Normally front() is going to give you a reference to the front object. 

You must also exit the function by returning a value. Not doing so is UB. If the stream fails to open your code fails to return a value. 

Sure you need a print. But why limit it to printing to std::cout. Sure you can make that the default but you should be able to print to any stream. You can also add an output operator to allow you to use to print the stream. 

The specialization is broadly considered a mistake. It is optimized for size (unlike nearly everything else in C++ which is optimized for speed). Because it optimized for size it has several drawbacks and does not act like a normal (which is why it is normally avoided). Now if you think you need to optimize for size then fair enough but normally people prefer to use Simpler Issues Sure. 

Review Issue My first issues is that using your shared pointer is not safe. Once I give you the pointer. You are responsible for deleting it all situations (especially when exceptions happen). But if the call to fails. ie it throws BadAlloc then you will leak my object. So you need to watch out for that allocation and delete the pointer immediately if you throw. Missing Feature You have not implemented move semantics. This is absolutely essential. Your object is missing a swap function. Design I don't think the class buys you ay functionality or makes the code any easier to write. nullptr Prefer to use over as the non existing pointer. is a number and can easily be converted to other things when you least expect it. of and can only be assigned to pointers and is not auto converted into other things. General grumbles I think the assignment operator is overly complex. It would be much simpler to write this as using the standard copy and swap idiom. 

I think you will find that keeping track of the parent node will make the code harder to write. But lets see! Sure this is a find method to have: 

But I think it will cause problems if used incorrectly. The pointer still points at the chain of elements. So you can still accidentally use this and cause real problems for the other allocator that just took ownership of the memory. The standard way to implement this is using swap(). See my implementation above. This handles situations like this in a safe way. Same comments about the move assignment operator. But this looks weird. 

My concern now is that you make multiple calls to get the actual distance. Every-time you do that then you incur the expense of the operation. I suppose it depends on the exact use case of your application which happens more often. But if this is for general code that could be used a lot in either capacity. I would add another two fields to indicate if it was dirty or not and cache the result so you don't have to recompute the actual value each time. But that has the side affect of adding a conditional branch into the get which can also be expensive when looking at micro optimizations. 

This same technique can be applied to all the other comparison functions. Saves a lot of time fretting that you got it correct. Normally you write then define in terms of . It really makes it very simple. 

Each time you create a new one. Best to only create this once (it is relatively expensive to create). I would even inject the random device into the object rather than let the device create its own (then you can control the randomness for testing). Easier to read this