Your issue isn't BGP. If you can get IP connectivity, you can get BGP running. Instead, your issue is that IP unnumbered is for use on point-to-point interfaces, not shared segments. If you wanted to set aside specific VLAN tags for the transit links between R[1-3] and R[4-5] you could use unnumbered, and would generally base it on a loopback (not necessary, but probably the most typical). Put another way - VLAN A would include [R1,R4], VLAN B would be [R1,R5], VLAN C would be [R2,R4], VLAN D [R2,R5], etc. That said, if you set aside different VLAN's for each link then you wouldn't have to worry about any kind of conversation between R4 and R5. If you want to run on a shared segment then you'll need some kind of addressing to disambiguate what traffic is bound to where. If you want to keep clients from talking to one another on this shared segment then you'll need some mechanism at L2 - likely PVLAN, but I suppose there are other (likely more labor-intensive) ways to accomplish this. For what it's worth the problem you're describing is pretty common in a lot of IX's: tons of routers from different organizations on a shared IP segment that should only be allowed to talk to one another according to a very specific (if frequently changing) set of rules. Based on your design and the requirement to keep R4 and R5 independent I would look in this direction if I were you. 

By using managed switch with VLANs and AP that support VLANs. Or by using AP and Wireless controller that tunneling traffic between them. Cost of solution can differ depends on chosen equipment. But anyway radio planning and cabling planning is required, specially if You planning to use multiple APs. UPD. Try to make more specific in project. 1. How many AP is necessary? One AP can work from 10 to 100 meters, depends on AP, Wi-Fi standard (g ,n ,ac), walls, desired speed, AP antennas and other parameters. Reinforced concrete make good isolation, so at least 1 AP on floor. One of way is set test AP and try, how far from it phone work acceptable. 2. How many active users must be served simultaneous? (active mean do something on network or internet) In 2.4 GHz band only 3 channels simultaneous possible. And more 15-20 active users on single channel in single interference area can make problem with performance. If it problem meet, use low power AP that have less coverage and less interference area, and possible use directional antennas. But then more AP required. And/OR use 5 GHz band where more channels can be used (8 - 12 depends on country), if enough client devices support it. If not, You can try use long range higher power AP. 3. Where it must be placed? There some different solution possible. It somehow like box packaging. Some AP can have directional antennas and make far coverage in one direction and short in other. It can depend on wiring limitation (maximum 100 meters of twisted pair) and on AP choose. 4. What AP you choose? Hard question. For example: Ubiquiti UniFi is nice, but requite controller (PC software or "UniFi Cloud Key"). And if one or more switch is used it must be VLAN capable managed switch. And there no directional AP that support multiple SSID (if not do reflash to non native firmware). Mikrotik - any wireless can be controlled AP or work without controller. Any router can be wireless controller (limited only by planned load). More flexible router, for my taste (but less trivial). Meraki, Ruckus, Aruba ... - can do anything of above and much more, but several times more expensive. And I lack expertise in it. 5. What router to use? How much traffic must handle the router? (In Your case - What planned speed of internet connection plus estimation of inter-VLAN traffic?) 

Under normal conditions only the root ID and bridge priority of the VPC primary will be sent via VPC downstream links. Within VPC links only the operational primary transmits or processes BPDU's (nb - the secondary forwards rather than proxies). In the case of non-VPC links the actual ID's and priorities will be sent, thus allowing STP to continue to function as expected. Best practice is that the lower (better) root priority should be on the VPC primary. If it isn't the case and the seondary has a better priority then downstream VPC connections will still receive the ID and priority of the VPC primary - even though it's the worse of the two. If the VPC primary fails (loss of peer link + peer keepalive) then the VPC operational role shifts as the VPC secondary assumes the role of primary. In this instance you are correct that a new root bridge has appeared and STP needs to run throughout the topology - with attendant interruption of service. This is where the peer-switch feature comes in... When enabled the peer-switch command actually causes the two VPC paired switches to create a third (common) virtual root ID that should always have the lowest priority in the topology. This means that both switches are going to send BPDU's with the virtual ID as the root of the topology and their respective physical bridge ID's as the candidate for designated forwarder. So - Any downstream non-VPC switch will see a common root ID and two potential candidates for designated forwarder with distinct ID's but identical priorities (nb - strong suggestion that VLAN STP priorities be equal on VPC peers) and will pick accordingly (..generally choosing the lower bridge ID). For VPC downstream switches the BPDU created by the VPC primary will just see a neighbor of the new virtual root address. In the event of a failure the secondary will maintain the identical advertisement - same ID, same priority... so zero STP convergence required. 

Logicaly, this make same result. Wireles controller usually configure APs for desired SSIDs, frequency, VLANs etc. 

It depends on l2tp setup. If it use BCP (Bridge Control Protocol) PPP extension, then l2tp works like Ethernet (forward L2 frames), so your first assumption is right. If it plain l2tp (which forward L3 packets only) it forwarded by routes or by combination of routes and arp manipulation (Arp Proxy or some other), then your second assumption is right. 

If You need all nodes to work in one subnet and one L2 broadcast domain, add bridge interface, enable rstp on it, assign IP on bridge interface and add physical interfaces to bridge. /etc/sysconfig/network-scripts/ifcfg-br0 

bandwidth or throughput is / where implied - data is received by destination and frequently implied - data is application data (at least L2 or upper) All protocol overhead count there. transmission rate or bitrate is similar, but data just transmitted but no warranty on receiving by destination. And it not count protocol overhead. It L1 speed. 

How many devices need to be connected? If not too, crazy solution to connect network cards directly by patch-cord. But PTP require ultra low jitter, rather latency time. What with network adapter buffers. 

In practice. If operator deliver SMS only over GSM network, but not over 3G network and support 3G for data transfer. Some 3G phones connect only by "better" 3G protocol and cant recieve sms quickly. Until it switch to lover protocol because of low signal or no 3G coverage. Possible it related with operator network misconfiguration or bug in phone software or both in combination. 

That isn't really a canonical spine-and-leaf network, at least not as typically conceived in current networks. Take your diagram and delete the core nodes and all of their connections. One pair of leaves can be set aside as border leaves, meaning that they're responsible for external connectivity. In truth for most implementations there's no particular reason a given set of leaves can't both host end-node connectivity and provide external links, but this can vary. The basic reason for this is that a given leaf has more bandwidth to every other leaf than does any given spine. Spines should be incredibly simple in their configuration and do little more than provide connectivity between leaves. So.. this changes some of your questions, but I'll try to address them: 

Bluetooth devices are assigned addresses similarly to Ethernet - an organizationally unique identifier (OUI) of 3 bytes followed by another 3 bytes assigned by the vendor. The Bluetooth address of a given device is almost certainly independent of an Ethernet MAC address. Bluetooth OUI lookup tools can be found on Google. Each device on a Bluetooth network has its own HW address (just like Ethernet). The Bluetooth specification actually lays out both L1 and L2 and, like Ethernet, allows for multiple upper-layer protocols to be mapped (ex: audio streaming, serial, etc) as well as capability negotiation, etc. Bluetooth ends up defining a number of upper-layer protocol functions as well (device naming / discovery, for example). To your final question - yes, IP can run over media types that don't use MAC addresses. In the context of WAN connections, for example, there is no notion of MAC addressing in point-to-point connections. Similarly in multipoint connections (ATM, FR, etc) there is a direct mapping from IP address to DLCI/PVC. There are similar accommodations in technologies like IPoWDM. 

AP can handle multiple SSID and bridge it to different VLANs to separate traffic of SSIDs. And router handle different VLANs with correct rules. AP can make some kind of L2 tunnel to central device (wireless controller or roouter). 

If You don't have public IPv4 on the server and can't get IPv6 from ISP, then You can get IPv6 for Your LAN from IPv6 tunnel broker (search any working) 

In ring topology RSTP is much better. STP in ring topology can enter in infinite topology rebuilding. RSTP in linux supported as rstpd daemon, but Im not sure it well supported and newer configure in in generic Linux. In Linux kernel based RouterOS, RSTP work perfectly. 

In theory is possible to use link-local IPv6 as gateway address, but IPv6 link-local accessible only from local subnet (it nonroutable), so then how to access equipment for management over IPv6 form other subnets? 

Overlapped subnets is unnecessary clutter configuration, making some implications (different subnets communicate on L3 only and through router) wrong. For example: In logs on host PCA we see connection from IP 192.168.1.3. This IP belong to what subnet? It same risk as place two non overlapped subnets in one L2 segment (broadcast segment). hosts really can communicate in L2 by using non IP protocol or by tweaking IP configuration (add static route to other subnet over interface). 

The and commands are mechanisms to initiate routes into BGP, either statically (with a backing route) or coming from another dynamic routing protocol. As mentioned in the notes there are certainly differences between the two mechanisms (origin types being an example) but the underlying function of route initiation is a common element. Route aggregation creates a supernet route within BGP as a function of other BGP routes - so, for example, the presence of one or more /24 subnets in a /19 can cause the /19 to be advertised (with or without the component /24's, depending on policy). There are a bunch of knobs typically available within route aggregation (AS sets, bundling attributes, etc) but the basic notion of working completely within the context of BGP (vs initiating an altogether new route) distinguishes it from and 

So the trick here is tying user ID's to source IP's within your network. If you assume that a given user's traffic all comes from their PC and, in turn, that their PC's traffic is only attributable to them then it's fairly straightforward to come up with long-term DHCP assignments and simple substitute IP's for user-id's. Heck, at the most trivial level you could give the user PC's machine names that correspond to users and just run DNS resolution for the source IP's in your report. Beyond the trivial case, though, it becomes a lot harder. Dynamic IP's? Multiple concurrent devices? Multiple users coming from a single IP? Application proxies on-site? This is where it starts to get ugly and is why there isn't really a truly generalized case. If you had some kind of ironclad way to associate user devices with login/logout - say 802.1X on both wired and wireless connections - you'd likely end up with RADIUS accounting logs that could include IP's in use, connection times, etc. This could be correlated (via a script) with the firewall traffic logs to associate Internet bandwidth use. It's basically something close to an ISP billing problem. Another option might be to require users to register with the firewall before using the Internet. This might provide a shortcut that's easier than the above - check this article on AD and ASA single-sign on integration for some ideas that might fit and be a lot cleaner than the general approaches listed above. 

Cat7 socket exists. $URL$ Cat7 required to make 10 Gigabit Ethernet over 100 m of copper cabling If You really need to achieve this, socket category and proper grounding is important. 10GBASE-T, or IEEE 802.3an-2006 ... Category 6a is required to reach the full distance of 100 metres (330 ft) and category 6 may reach a distance of 55 metres (180 ft) For 1000BASE-T Cat5 is enough. 

Any router that can build L2 VPN between them solve this problem. Better to be able to filter L2 traffic to solve problems with unnecssary broadcast/multicast flood and add flexibility. 

If You "like" cheap unmanaged switches, You can use separate unmanaged switches for users and cameras. And connect NAS and switches to different ports of router. But unmanaged switches for untrusted users can be bad idea anyway. Look at cheap more or less managed switches like Mikrotik or Ubiquiti if You need PoE. Without managed switch or using separate unmanaged switch per isolation group only fake isolation posible. By assign multiple subnets on single router port. And only in one dynamic DHCP possible. It can depend on router features. What is Your router? 

I can decide - problem most probable in routing from A to C (on A node) Checking routing tables Im found incorrect route to BC network. 

To survive VPN server IP change, on Pi use dns name to connect rather IP. Buy domain, or use some free domain (many dynamic dns there, but hard to advice). (Personally I as Mikrotik consultant, prefer cheap USB powered RB. Prise is comparable to Pi. But Pi more flexible and it Your choose.) 

SPAN is actually Cisco-specific terminology. The generic is just called port mirroring. There is huge variability in terms of the behavior of port mirroring implementations across different hardware. As an example - in a surprising number of platforms (across different vendors) oversubscribing the amount of traffic being mirrored to a given port can actually cause packet loss on otherwise undersubscribed ports. Keep in mind that mirrored traffic often won't include packets with errors (..they get dropped at ingress on most switches) and that there's also no guarantee that packets will be delivered in order or that duplication will always be suppressed. There are also limits as to the number of mirroring sessions, the number of ports/VLAN's being mirrored and whether the sources are monitored bidirectionally (ex: some switches might allow mirroring input from all 24 ports on a switch not input+output). 

So the functional distinction between hardware and software is actually a lot less than you might think. Most - if not all - switching and routing functions are first specified, implemented and debugged in software implementations long before they're adapted to run on a piece of dedicated silicon. This is, of course, because the process of changing, fixing and debugging software is cheap and easy while doing the same in hardware for dedicated ASIC can literally cost many, many millions of dollars and take months/years to accomplish. As an example - it's absolutely possible to take a standard PC running a fairly standard OS (Linux is the most common nowadays but hardly the only one capable) with a bunch of NIC's and run software to bridge and route packets. You can use a bunch of crossover cables to hook up end stations and then connect an additional port to an ISP, turn up NAT and - surprise - you have a complete LAN and WAN solution without having purchased a single piece of dedicated hardware. Heck, throw in a wireless interface or two and have it run as an AP to hook up wireless clients. Turn up firewalls, QoS, VOIP, etc. Seriously - just about anything function you can turn up on a dedicated piece of network hardware can run on a general purpose PC running a mostly stock operating system. Heck, arguably there are things you can do on these platforms that would be tough to achieve on dedicated hardware! Here's the thing, though - the solution I just described above is going to be orders of magnitude slower and generally substantially more expensive (on a unit basis) than dedicated hardware. It's also going to lack a ton of supportability. Ethernet switches are cheap and fast and if you're trying to solve the problem of physically connecting machines then they're superior in almost every way. Things start to get muddier when you move to situations where density and performance requirements aren't as stringent. An example of this would be the use of virtual firewalls, load balancers and routers in a virtualized/cloud environment. Increasingly the major vendors are making their products available as software-only offerings. As an example a Cisco CSR (same IOS-XE software as the hardware-based ASR1000) can be spun up quickly in a cloud environment (AWS, GCE or local virtualization) to provide VPN termination, full routing integration and the like. It's literally an order of magnitude slower than the hardware ASR but that still means it can move gigabits of traffic - which, honestly, is more than sufficient for its intended use-cases. Remember that the concept in these environments is to scale out rather than scaling up - so deploying 5-10 slower virtual instances in parallel is more useful than buying a huge piece of dedicated hardware. The key here is to retain all the function and enough performance while gaining the capability to quickly spin new virtual devices up- and down- as needed while still retaining full commercial support. This is the way in which a lot of folks want to consume the offerings of the big networking vendors and, as such, it's increasingly an option these vendors are providing. Now - as to VMS? It's basically reiterating the above - taking the services you'd traditionally get out of purchased pieces of hardware (specifically including aggregation routers, firewalls, load balancers, IDS, etc) and running it as a service. Behind the scenes it may be some combination of hardware and software but to the end consumer it's a pre-integrated, well-managed solution that can be bought as a subscription. The customer might still want to buy dedicated hardware at the edge of the network but, again, it's at least technically possible to accomplish a full end-to-end network using virtual routers running as clients on a hypervisor.