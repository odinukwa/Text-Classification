This hides D's routes from C so you don't become a transit AS and makes B's routes look an extra couple of AS hops away (even though the AS number is the same). You'd need a mirror configuration on B. Key search terms for future reference: Route map AS Path BGP Metric AS Path prepending 

The newest small campus access switches are 2960X switches, and they still have DTP enabled by default. Nexus switches are designed for datacenter use, not for user-facing ports. DTP is also enabled by default on 3850s, 3650s, and every other switch I get my hands on. I'm still waiting on a global disable command for it - a 'no dtp run' or similar. For the time being, it's still strongly recommended to hardcode your port as an access or trunk port, configure "switchport nonegotiate" on the port, and for trunk ports, configure a dead VLAN as the native (I like to use 999 and make sure it doesn't exist in my VLAN database). 

The basic answer to your question is no, the different switch versions don't matter. As long as you're running the same VTP version on the server and client, both are configured for the same VTP domain and password (optional), and the link between switches uses 2 correctly-configured trunk ports, you should be good to go. 

You could use DHCPv6 to send them IPv6 addresses, but your best bet is going to be the same approach with IPv4 - static IP addressing for management interfaces. Also, consider using a different and unique VLAN for your management interface and applying ACLs limiting access to the management interface. $URL$ 

It is typically the IP address tied to the physical interface, but not always. JunOS from Juniper, for example, sends the Router-ID which can be a loopback and not tied to a physical address. Source: $URL$ 

1) Yes You can connect a computer to two networks. The practices is commonly called "Dual-homing" and requires a bit of a trick to make it work. Your computer that's on both the wired and wireless networks will need to know which network to use a default gateway on. In your case, since your wired network uses statically assigned IP addresses, it's pretty simple; don't put a default gateway in when you're typing in the IP address for the wired NIC. The computer won't pass information from one network to another (providing wifi access to the wired computers) without some additional configuration, so you shouldn't need to worry about that. 2) No, but the risks can be mitigated. Once an attacker gets into one computer on a network, they'll be able to access the rest. This would mean they would need to gain control of the dual-homed computer before they could talk to the rest, but once that step is done, they're home free. You can mitigate this risk by installing a host-based Intrusion Prevention System (IPS) on the dual-homed computer, by installing a software firewall on the dual-homed computer, by using strong security on your wifi connection, by protecting your wifi with IPS and/or firewall, or by protecting the wired networked computers with IPS and/or firewall, but without an air gap, there's always the possibility of compromise 

Single click on the computer's name. A text box might pop up (worked intermittently for me in 6.2) where you can input a new name. Click on the computer, go to Config, and change the display name. 

It's all about the timers. There's an advertise interval and a master down interval (hello and hold time in HSRP and GLBP). The master sends VRRP advertisements according to the advertise interval. This lets the backup know that the master is up. If the backup doesn't receive an advertisement within the master down interval, it will transition to master. The key to keeping connections alive is tuning your intervals down to sub-second failover. When the backup router takes over, it sends a gratuitous ARP message telling everyone to use its MAC address for the virtual IP. 

Per Cisco's documentation, they recommend you place a workstation in the same VLAN as the phone and use that for ping, etc. "Determine if you can ping the Cisco CallManager server from a device on the same subnet as the nonfunctional phone. If you can ping the server, you have a minimum level of IP connectivity between the two devices. This allows you to see all the packets that the phone sends and receives during the boot and registration process." $URL$ 

We have a redundant path for some of our communications through a.) a Metro-E provider and b.) two routers forming an L2TPV3 tunnel. We have Cisco 2960 switches at both ends running RSTP to prevent switching loops and prefer (through costing) our L2TPV3 link over the Metro-E link. Twice now we've experienced switching loops that took down the network until one link was unplugged. Will a switch bring an RSTP alt port back up if it quits receiving BPDUs on that port without seeing a physical link change on either port? Our logs reflect no physical link loss on any ports. 

You could have your MPLS provider configure a L2VPN for you across the MPLS network. This allows you to have the same VLANs at both ends and actually communicate on a frame-by-frame rather than packet-by-packet basis. Once you have that up and running, you can configure a First Hop Redundancy Protocol (FHRP) like VRRP. This would leave your interface IP addresses at your primary site until the site went down (or the link between the two went down) at which point the router at your DR site would start answering ARP requests for those IP addresses. The problem you want to make sure you avoid at that point is split brain where the link between the sites goes down and then both sites think they're active. Just one possible fix. You might also want to look at load balancing (active/active sites) or using DNS for failover. 

Your process is correct, and assuming you get the same version number for all of them, you should be fine. If you're connected to the stack master, a "dir" should show flash file systems matching each switch (flash-1:, flash-2:, flash-5:). Remember these when you're copying the files over, but I don't think you'll need them when you go to configure your boot statement - you should be able to just say "boot system switch 1 flash:", "boot system switch 2 flash:," etc. The flash on those switches should be big enough to hold a second copy of IOS. I'd recommend retaining your current version of IOS in addition to the new version to make roll-back easy. 

I would recommend looking into how to implement QoS with your equipment so that the phone traffic has priority over the regular data traffic. Once that is in place, there are a number of ways to pick an internet link. One of the easiest is to find a reliable internet IP to ping (think Google/Level3 DNS server or something), set a static default route out one ISP based on the reachability of that DNS server, and a second static default route out your secondary ISP with a higher administrative distance. This would make the first ISP primary and fail over to the second. Other ways involve using some form of WAN load balancing. There are a number of vendors who provide hardware (usually firewalls) that can take advantage of multiple ISPs. These can often function in highly available pairs, so that you have two physical firewalls acting as one logical one, leaving your traffic available if one fails. 

Have you considered making a loopback interface on the distant end router/firewall (whatever the other end tunnel device is) and monitoring that? You could make it an RFC 1918 address and only accessible via the VPN tunnel. That should give you something to monitor that isn't affected by equipment/network instability at the distant end. 

Not with different subnets, no. You can use the same subnet, same VLAN, and same SSID on both APs and you'll be able to roam between them. If you try to use a new subnet, the client will need a new IP address or you'll risk duplicate IPs when they roam, plus you'd need some crazy NAT or VRF setup to talk from one side to another. 

802.1Q tracks VLANs based on ID (number) not name, so this would be an awkward way to program a switch. Example: Customer A is plugged into VLAN 10 named "Clients" on Switch A. Switch A and Switch B are connected together and share all VLAN traffic. Customer B is plugged into VLAN 20 named "Clients" on Switch B. Customer C is plugged into VLAN 10 named "Soap" on Switch B. Because the 802.1Q tag is number based, Customer A and Customer C would be able to communicate while Customer B would not be able to talk to either other customer. I'm not sure about the Juniper method of assigning VLAN tags but I hope this helps clear up why you shouldn't rely on autoconfiguration for that. 

Yes, there's a problem. Your default gateway needs to be in the same subnet as your device. By setting the subnet mask to 255.255.255.255, you've told the computer that nothing else is in its subnet. A more appropriate way to do things would be to set your device IP to 10.0.0.2, your gateway to 10.0.0.1, and your subnet mask to 255.255.255.252. 

A will learn C's routes directly through eBGP. A will learn D's routes through B using iBGP. A will prefer C's routes because they were learned through eBGP. B will learn D's routes directly through eBGP. B will learn C's routes through A using iBGP. B will prefer D's routes because they were learned through eBGP. To make sure return traffic goes the way you want it to go, you need to do a couple of things. A needs to advertise all routes to C and B needs to advertise all routes to D. You need to make sure you aren't advertising C's routes to D or vise versa through your network. When A advertises B's routes to C, A needs to prepend AS100 once or twice to make it look like a less desirable path. Similarly, when B advertises A's routes to D, B needs to prepend AS100 once or twice to make it look like a less desirable path. This is all done using route maps. On A: 

If I understand your question correctly, you are at least partially right. For HA failover, you'll need the same ports to have access to the same VLANs. You'll need to trunk VLANs 172 and 192 between your two EX2200 switches and you'll need to make sure both VLANs are available to SRX-1 and SRX-2. For pings from R1 to R2, it sounds like you're trying to use VRFs which should actually keep them from talking to each other. If you want them to talk, they should be in the same routing instance. 

Is it possible to point a route to a next hop that isn't directly attached to my router? For instance: Router A owns the subnet 10.10.10.0/24 Router A and Router B communicate on the 10.0.1.0/24 subnet Router B and Router C communicate on the 10.0.2.0/24 subnet Router C has learned the 10.0.1.0/24 subnet from Router B with Router B as a next hop Can I put a route for the 10.10.10.0/24 subnet on Router C and point it straight to Router A? Is Router C smart enough to figure out that it would need to send to Router B to get to Router A? I know the normal practice is to tell Router C that Router B is the next hop for Router A's subnet. 

I'm no expert on bus topology, but I'll do my best to answer this: All frames/packets in the bus network will have a source and destination address. All systems in the bus sniff every frame and ignore the ones that aren't destined towards them. Most of this work can be done by a decent NIC. Where my system is connected to a bus, I will see: Message 1: Destination: John, source: Sheila (I'll ignore this) Message 2: Destination: Sheila, source: John (I'll ignore this) Message 3: Destination: Me, source: John (I'll read this and respond if necessary) Etc. 

Nope, sorry. That's why I prefer daisy-chaining to stacking, even though I lose out on some bandwidth and a couple of ports. There are some helpful hints on the upgrade here, though: $URL$ 

You'll need another physical interface on your router that runs at the same speed as your existing physical interface. Once you have that, you can create an etherchannel/port-channel/lag between the switch and the router and you'll need to move your IP address and your sub-interfaces (if you have any) to the new port-channel interface. Here's a guide on how to get it up and running: $URL$ 

What you need is a DNS server that does health checks. There are both on-prem and hosted options available from multiple vendors. These can serve up DNS responses based on (among other things): Getting an HTTP 200 (OK) code from the servers Round robin Client count balancing Client physical location Server response time Ping Word matches on pages (more accurate than just the HTTP 200) Since this is basically PBR's cousin, I feel it is on-topic for this site. 

There could be one of at least two possible things going on here: 1.) You don't have a strong enough signal from your monitor to the client. The AP's antennae are better at listening and sorting out background noise than your PC is. You might need to move closer to the client you're trying to listen to. 2.) Your NIC doesn't support promiscuous mode. There are many out there that are hardcoded to ignore traffic they aren't supposed to interact with or see. The only workaround for this is to purchase a NIC that supports promiscuous mode. You can probably search around for your current NIC model and the term 'promiscuous mode' to see if other people have had similar issues. 

You can have more than one MAC address on a switch port if: 1.) You have a switch connected to it. Could be another managed switch (like a Cisco) or an unmanaged switch (like a consumer Netgear or Linksys switch). 2.) You have a virtual server host attached to it with multiple virtual machines sharing the NIC. 3.) You're using a VoIP phone to carry data for a computer. In this case, you'll have a trunk running to the phone from the switch and a second ethernet cable running from the phone to a computer.