You should specify exactly which s you are catching. If you don't, then every single raised under the block will be ignored, including ones caused by errors in your code. Ideally, you should also output to the user what exactly went wrong. Here's an example: 

Nitpicks You have two variables, , and . Rather than creating condition variables, I'd just write the two statements like this: 

This also applies to your function. can be changed to . Also, I noticed that you're returning either or in your function. Do you mean to be returning or ? This also applies to your function as well. Finally, in your function, the below block of code can be changed to this: . 

First off, the general naming style in Python is for functions and variables, and for classes. On the note of style, you should also have two blank lines between top-level functions/classes/code blocks. Secondly, are you sure that you want to be using , rather than , as you did here: ? The function "counts" the objects in the list starting at , not , which means if you're using it to get indexes, it'll be off by one. Other than that, there's not much else that really needs to be improved here! Good job! 

While doing something like this in a minuscule codebase probably won't affect much, doing this in general can result in some bad issues: 

A slightly more detailed description of what the class/function does. An (optional) description of how the class/function does it's task. A description of the class/function's arguments. 

It's generally considered to be better to use plain / values in loops rather than what you've done here: 

I'm often frustrated by the lack of ability to obtain simple size metrics about code projects I'm working on, like total lines of code, or character count. To fix this, I wrote the following PowerShell utility: 

If there's anything else you want me to review, just mention it in the comments, and I'll see what I can do. 

This is really cool! I do have a few small tips though. First off, rather than creating an entire function, in this case, , that returns configuration data, I'd store it as a public getter, like this: 

You should also be using docstrings to describe your functions, not regular inline comments. Here's an example of a docstring: 

If you've added this to allow for the reading of the private field, but not writing, then you can simply turn into a property with a setter, like so: 

You can also remove the as well since there's no real need to be able to expand and minimize four lines of code. 

By using a context manager, resources will be properly freed even if your program crashes or unexpectedly exits. 

Instead of giving your variables names like //, you should give them names like , , . Other names like or . Should have better names. You need some space between operators. For example, you have this condition in your code: . Stuff like this can be expanded to . Variable definitions should also not look like this: , but rather, . You should add some more comments, e.g, describe what the functions/code blocks do, and how the processes behind them work. Finally, just a small nitpicky thing. Both of your functions should be in . One of them is in . 

Your code is actually pretty good! I do a few suggestions for general improvement, specifically regarding PEP8 and such. 

These are a bit of code smell, and are not really necessary, they can be removed. (You may have to define these functions again above .) 

First off, you have a bug. On the line , you used the operator instead of the operator. This line should be changed to . Secondly, you have some spacing inconsistencies. For example, you wrote in some places, and in others, when it should be , and/or . You also have stuff like this, , or this , that can both be typed like this: . Try to find inconsistencies like these and change them. Finally, you have some indentation issues. The general style is that lines should be indented by one tab, or four spaces if they're in a block. 

Finally, add some comments to this code. You don't need comments everywhere, but you should add some in places where your code may be slightly harder to understand just by reading it. 

What can I improve? The header is my custom OpenGL loader, which can be found here: $URL$ The header is simply my implementation of a four-component vector. 

OOP Design It feels like you're not using object-oriented-programming correctly, as your methods seem to be doing way too much. As the name implies, the magic method should only be used for class initialization, and nothing else. Right now, you're treating the method like the "main method" of your class. The best way that I can think of would be to do two things: 

I've been fooling around in JavaScript again, and I've come up with this simple physics simulation. I think it has a pretty simple setup, here's "psuedocode" of sorts to explain it. 

If you really want to add comments to these, then I'd recommend not inlining them, and placing them like this: 

Disclaimer: I'm not experienced with this field, but this question definitely needs some activity, so this is my attempt at an answer. If there's anything that you want me to cover that I don't mention here, just tell me about it and I'll try my best to see what I can do. 

Using to print lists Rather than iterating over a list and printing each individual element like this: 

If this is intended to be a Python utility that can be imported with , then you don't need the following shebang line: 

Whether you use string literals for paths or choose not to, just remember the important rule of be-consistent. When I was first looking at your code, I came across these two lines: 

Starting with Xcode 4.5 (and Clang 3.3), you can use an Objective-C literal to access an item in an rather than . For example, if I had an of s, I could do this: 

The way you're styling lists is odd as well. While it isn't required, I'd recommend doing it like this: 

In the case of integer input, you want to setup a - block, that will check to make sure that the user enters only valid integers. Here's what that might look like: 

There are many other places like this in your code, so I'm going to recommend looking at PEP8, Python's official style guide, on how to correct these. Finally, in all your conditions, are just conditions. If you're not using , then all of these conditions will be evaluated if they are true. Are you sure that you want this? 

This line can be shortened from to . There are other places you could do this. This syntax also supports other operators, like , or . Finally, I find it to be clearer to declare variables on separate lines. For example, the line would become two separate lines, , and . 

There are many things that you're doing wrong here. To start off, your main method needs to be in a separate class from , as is intended to model a phone and not run code. You should create a separate class like this: 

Design As it stands, your current design is very rigid, and not extensible in any way. The best approach for a situation like this could be to use Object Oriented Programming, but in accordance with the Python talk, Stop Writing Classes, all of your code can be shortened to one function. 

Examples The following two videos are very simple, small examples of what one can do with CLIGL. However, they are only the bare minimum. Anything from a 2D game to a full-blown 3D renderer is theoretically possible. 

I'd go with the first one, unless you can come up with a better name on your own. In addition, rather than creating your own specialized implementation, why couldn't you have just created a subclass of , like this: 

From a personal standpoint, I think this method is fine. You might want to re-work it a little. I'd recommend creating an array with possible intersections, and looping through that array and checking user input against those. For example: 

Proper integer conversion Right now, as it stands, you're just converting any user input to a integer, using the function. What do you suppose happens if the user enters something like ? What you need to do is set up a - block, like this: 

I also noticed that you're mixing English and Russian comments. I'd recommend sticking to one language or the other. In the class you have a "private" method named . Is there any reason why the contents of this method can't just be part of ? You also don't need parentheses around Boolean conditions. For example, would become . Finally, I noticed that you're mixing a lot of naming styles. Variables and functions should be , and classes should be . If a variable is a constant (un-changing value), it should be in . 

I've been doing some 3D graphics in OpenGL lately and I needed a way to work with 4x4 matrices. My implementation supports the following operations: 

Now, while this is something that you can do, in the case of your code, there is no need to manually define the getters and setters in your properties. You can simply define an auto-property, like this: 

Variable and argument names should be in , not or . If the variable is constant, it should be in . Method names should also be in . You should have two blank lines between each method, rather than one or none. 

I've always been bothered by the fact that there weren't any built-in functions that could replace multiple substrings of a string in Python, so I created this function. Essentially, you supply it with a string, a dictionary of keys (substrings) and values (replacements), and then a few additional options. 

I've thrown together this simple chat program, and while it works. I think it could certainly use some improvement. Here's how it works. 

You have way too much code in your function. Try and see if you can separate the logic out into separate functions, each with their own arguments. For example, the below code block: 

I also decided that defining a base class with methods like the character would be useful if I ever need to create entity-like creatures/NPCs. 

Other than those two nitpicks, there really isn't much else for me to review here. As far as I can tell, you've followed the language specification just fine, and produced some readable code. 

As, again mentioned by @JeroenVannevel, there are just too many issues to consider when trying to validate email addresses, here are just a few of those issues: 

You need to be sure that you're properly validating user input, and making sure it isn't invalid. The best way to do this when parsing integers is to use a / clause. A simple example might look something like this: 

For those interested, I've completely revamped this with a new, extensible version that you can find here. 

Why do some of your classes have an inline comment, , and then a docstring describing the exact same thing? Here's an example of that: 

This docstring is too long to be a one-liner. Preferably, it should be expanded out so it's easier to read. 

It stores one value, and nothing else. Even if you intend to add more fields to this , they should all just be static fields that belong to the class, as things like make sense when they're stored in the Game class. In addition, with the struct, you're always going to have to add a qualification whenever you need to access info that pertains to the game. This will begin to make your code look somewhat cluttered and ugly. As mentioned in an answer to your previous Rock Paper Scissors question, this would be better named : 

Constructors All of your classes that represent something, like a or a are missing something rather important - a constructor. A constructor allows you to initialize the values of specific properties or fields when the object is instantiated. For example, here's a representation of a class using auto-properties and a constructor: 

In addition, there's no need for the parentheses when declaring a class in Python, as you've done here: 

In short, the only "good" way to check if an email address is valid is to ensure that it contains an character. 

Do you really need a comment above every line? There are a few good comments like , but comments like are really not useful. They add no value to the code itself, and can be removed. Preferably, you should only be using comments when parts of the code are unclear. Secondly, your function alias is fairly unclear. I'd recommend renaming it to something like . Also, if you're creating aliases for functions like this, I'd also recommend creating one for , and other functions like this. Finally, I'd recommend renaming to something like , like how it's described in the comment above it.