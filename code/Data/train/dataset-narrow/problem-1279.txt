The main difference is that and now take an argument instead of referencing global variables. Also, do the same with ... 

Note - my JS is a little rusty, but this should illustrate the idea. Update: Per our discussion in the notes, I am suggesting changing this code: 

If is zero for some , then is it possible that will be 0? If so, the result of the division will be a NaN. However, as I mentioned above, this code is unnecessary, so you can just remove it. 

First of all, the class describes a player in the game, so maybe reflect that in the name of the class, e.g. . In that respect the name name is good because it gives clues to the reader as to how the object is used. Secondly, if I read and correctly, you are just returning a copy of an object. Surely there must be a more idiomatic way to create a shallow copy of a JS object that doesn't require explicit looping? Or, how about just returning and hope that the caller doesn't modify it? Or, why do you do even need to expose ? I don't see where you call it. And for you don't need to expose the entire object - you just need to know if a player has a weakness for a specific user name. In the class , just expose this function: 

An advantage of this approach over splitting each line is that if there are large chunks of your program which do not have any comments they will transferred to the list in one piece instead of as separate lines. Update I would also try using a regexp replace approach - it could be even faster: 

The other thing which will help is to keep in mind that the type represents a a combinator which is able to memoize a function whose argument type is . So: 

which helps to describe better what it is doing. Anywhere you can use the alias instead of will help the reader. In fact, I would even write the signature this way: 

First of all, there are so many pitfalls associated with programming that I prefer to write all except the most trivial scripts in a language like perl, python or even awk. I realize that availability is a concern, but all of those languages are pretty standard now. If you write the script in a better scripting language you can get rid of the duplicate call to which is one thing that I presume bothers you about the code. If you must write in /bin/sh, then run your code through one of the following static analyzers to help you find potential coding problems: 

Nothing really wrong here, but I have a suggestion... it is customary to repeat the key if it isn't long enough for the entire message. I.e., if the key was and the message was , you would repeat the key as many times as was needed to cover every letter of the message. The key used to encode the message in this case would be . You can use the function to repeat a list forever: 

returning a list of tokens? I'm not sure there is a lot of value in parsers which return except, perhaps, for testing purposes. Most of the time you want to run a token parser incrementally, but has to consume the entire file before it can return anything. There should be a function which just returns the next token. This will come in handy in conjunction with the next comment I have... handling dedents at eof I would find another way to handle implicit dedents at the end of the file. I'm sure this can be handled at the grammar level. The code to add them is extremely messy - don't you agree? Have a look at how the package does it: $URL$ The function returns just a single token. The lexer has state, so when it reaches EOF it checks the current indentation level. If the indentation level is > 1, it decrements it and returns a . Otherwise it returns an EOF token. 

The only drawback is that explicit bounds have to be determined for each level function. This approach computes in about half a second. 

The only thing I have to say is that the use of and means that the output will depend on the current locale setting. This may be a bug or a feature depending on what your original intention was. Also, the use of seems rather small for today's processors. The only way that is going to fail is if it can't fit all of the output in the buffer. Since memory is cheap, you might as well make it or . This kinda of ties in with with the question of whether you expect to use this with custom locales. Alternatives: 

Database service, take the config out of the service, and store it in a config file. otherwise you need to edit the code when you deploy to a different server. Would a join work better here 

The dump function, why do you throw an exception if the session doesn't exist, but not anywhere else if the session doesn't exist? I would re-write it like a guard clause rather then having a return halfway through the function. 

It looks reasonably well thought out to me, although I am not sure how much it would be used beyond practice. There are a few small things that can be improved. Comments are inline 

Then for showing the gallery we could use a data tag instead of class names to identify the links and galleries, then you could easily extend the code to include more galleries, with no extra js 

If you can get all the shift ids in advance and do something like this. This is just some pseudo code to give you an idea 

I haven't read the book you mention, although it looks good so I might buy it and have a read. A few things for me There are echo statements in the code, I am assuming that is for debugging and you are going to remove them. In a couple of places you use die(), and then elsewhere you throw an exception. Personally I would throw exceptions and let it bubble up to somewhere that can handle them properly. Your class is called fileImporter, but it also has a download aspect to it as well. I am wondering if fileDownloader should be separated out. You have a private getter function 

The security aspect of things looks fine, but there are some areas for improvement, I have provided inline comments where possible. The whole quiz could be coded as a class, and would be a lot nicer, however I didn't want to go too far from what you started with so you can see what changes I have done. Overall, I have split the code into functions, and tried to make each function do 1 thing only, and renamed variables for readability. This will become more important when you go to maintain the code. The first bit of code is what I used to test all the functions and catches exceptions that occur. You could improve by adding more error checks after each prepare and execute, but I will leave that to you, as they are only really necessary if the database structure doesn't match the sql. 

Have you tried using this function before? It does a fair bit of what you are trying to accomplish. $URL$ Failing that, I would try learning regular expressions, as they can make a lot of your strpos more concise. Its a handy skill to have in the toolbox. $URL$ I also find the a,b,c thing incredibly cryptic You could use constants 

Another useful function you might add is get_once. I do something similar for when I store an error message in the session, then redirect to a new page and display the error message. After that the error message is no longer relevant so I remove it from the session. 

The StudentRepository is all about database, and shouldn't know about $request and $response objects, that is the job of the controller. What if you were fetching data to put in an excel file, then you can't use the StudentRepository as it was to fetch that data. 

Check $trackCols against a list of valid column names you are expecting, to stop me doing things like I have below. 

If that is the case, then why re-declare then, why not use FILE_DOWNLOAD_PATH and FILE_ENTRY_SEPARATOR directly in your code If you do want to allow them to be overridden, then you could extend your constructor 

On a final note $lang->xlate may sound like a nice function name, but after a while you will get sick of typing it, $l->x is cryptic but shorter 

Well if you want to split hairs, you could do a couple of minor changes (commented below) Honestly, I can't see any advantage in making it recursive, it works fine as it is 

There also appears to be no way to overide these private variables which are set to constant values. 

Personally, I would just stick with what you have already got. You could try something like this, although too me it doesn't look any tidier. You would need to profile it against your database, to see if it performs any better. 

I have been using php for over 10 years and never found a need for a session wrapper, but maybe you find it easier/better. There are a few improvements that could be made with your code If we are checking to see if the session has a key, a simpler test is