Probably your ISP is firewalling outbound port 43. As a workaround, find a web-based whois service, or a proxy which will allow you to use a different, unblocked outbound port and have it rerouted to port 43 at the destination. 

You basically need shell access on the mail server in order to run Procmail there. If you do have the required privileges, doing what you are asking is simple, though your requirements are mildly unclear. I'll assume that you want to add to messages from if it's not already present. 

There are dedicated clients for all platforms, including various versions of Windows, but basically, just and type in the domain name you are interested in. The result will be a referral, i.e. a pointer to another server you should connect to to obtain the final result, or possibly yet another referral. There is a large number of web-based whois services; most domain registration services offer one, or you can try e.g. $URL$ 

Delivering to a directory only to have an elaborate system to monitor that directory is rather awkward. If your Java program can read standard input, just pipe directly to that. 

You'll notice the addition in a few places. This accounts for a possible newline () followed by a whitespace character (tab or space, ) followed by anything, repeated zero or more times. (As an aside, this would perhaps be slightly easier to debug with scoring: 

A common workflow is to () and then perform your tasks on the visible region. Then () to expose the rest of the buffer again when you are done. 

There is no universal solution, but two common partial solutions. Your browser sends an header which indicates your language preference. This should be configurable in your brower's preferences. Here is a link to the W3C's guideline for how to do this in many popular browsers: $URL$ and here I excerpt their instruction for current versions of Chrome: 

There are many situations where actually breaks functionality. There is absolutely no situation where you want to do this. 

This doesn't allow you to interact with the background command (but neither does closing the so I guess you don't need that); if you want to be able to do that, consider or which lets you run the program in a virtual terminal you can disconnect from and reconnect to later. 

There are sites which offer what is known as passive DNS lookup. They build up a database by monitoring DNS traffic, and keep track of the results. Normally, DNS lookups only provide limited IP to hostname lookup services. If the owner of the IP space bothered to set up reverse DNS (rDNS) it can tell you that there is one mapping from to a single host name, but this is not necessarily the whole truth, or even the truth at all. In practice, it is quite unremarkable for there to be no reverse DNS information, or for it to give you a result which does not match the corresponding forward DNS information. And typically, a web hosting service will have hundreds or thousands of web sites living at the same IP address; there is no regular way to find out what they are from the DNS, given the IP address as input. (Reverse DNS is what the answer with the code will get you.) Passive DNS looks at the results from DNS queries, typically by living on a high-traffic DNS server and observing the results it obtains. So if somebody -- who is being tracked by this service somehow -- looks up and obtains an IP address as a result, the result is stored in a database of mappings from IP addresses to hostnames, which can subsequently be queried. See e.g. $URL$ and/or $URL$ 

Only binaries named exactly will be considered when you type at the shell prompt. If you want to execute , the simple way to accomplish that is to set a function or alias in your personal shell startup files. You absolutely mustn't make point to system-wide because this will break some OS and third-party tools which require to be Python version 2. The two are mutually incompatible languages (or dialects, if you prefer). To review what's happening here, when you type at the prompt, the shell iterates through the directories in your and looks for an executable file named exactly in each, until it finds one, or runs out of places to look. It will simply ignore any files with other names, even if they would happen to be similar, like or or . If you have an alias or a function, that will be used instead, though your will perhaps then be consulted to locate other commands called by your alias or function. 

You have incorrect backslashes. The expression does not match a literal left broket -- an unescaped matches itself just fine, but with the backslash, you change it into a left word boundary zero-width assertion, which can never happen next to a slash; so the expression can never match anything. With some minor refactoring to also fix other merely superfluous hypercorrectness, a fixed script is 

What you need to understand is basically that a symlink is more like a text file than like a directory entry which contains a file. So if you 

It's not clear what sort of preprocessing you are looking for, but I'm guessing something like this. 

It looks like you are trying to use itself as a maildir folder. I cannot imagine a situation where this makes sense. Normally, should contain a bunch of personal mbox folders, each named after its owner. You would obviously then configure Procmail to write mbox (not maildir) format to this location. For example, 

Depends on your use case, really. The "binary files are different" output is usually more useful than seeing the precise difference, but sometimes you do want the exact, precise difference betweeen two binary files; and sometimes, you want to bypass the heuristics which decide whether or not a file is binary (a file with text in some unknown encoding might trigger the "is a binary" heuristics when it shouldn't, for example). 

Incidentally, is not a valid regular expression. As you have discovered, an empty search expression matches all input lines. A regular expression which matches all non-empty input lines is ; in regex, the dot is a metacharacter which matches one character, any character except newline. The kleene star is a suffix operator which allows for zero or more repetitions of the previous regular expression, so you frequently see the regex for "anything at all", but in this context, it is redundant, as you are already matching nothing at all with the empty search string. Finally, it is considered bad form to a single file. Instead of you save a process and perhaps some scorn by having read the file directly; 

Not all variants support and some (notably *BSD, including MacOS) require an empty argument to the option, like The address expression matches the second line and the regular expression matches the beginning of line; so we are saying "replace (the empty string at the) beginning of line with this text on line 2". I am obviously interpreting "add to the second line" as inserting this static new text before the existing contents of the line. There are other operations you could perform, such as inserting a new line, or replacing the existing contents, or inserting the new static text after the current contents of the line. All of these are easy to do with , but the syntax can be slightly different on different platforms. If you don't have at all then maybe look into using Perl instead. 

However, some sites annoyingly ignore or override your preference e.g. based on your apparent geographic location. As a possible remedy, you can use an anonymizing VPN; some are free, and some allow you to set which geographic region you would like to appear to be in (though many are either non-free, or lack this facility). However, perhaps also note that some sites also serve different content based on geolocation; so they might show you offers which are not valid in your region, or fail to show you offers which you would be eligible for if they were able to figure out where you are. 

If you have a already, it may well already contain a statement which you can amend instead of adding a second one. 

Your first line in the desired output contains a leading space but I assume that is simply a transcription error. The following will find at the beginning of line, and replace it with nothing, and similarly replace at the end of a line with nothing. 

The flag says to modify the header by filtering through the pipeline in the action; the means the action applies to the header only (to reduce the amount of data to copy unmodified back and forth); and the says to check that the action is successful. The special regex token causes the match after it to be captured to the special variable . Because dot and left square bracket are regex metacharacters, we need a backslash to match them literally. The word boundary ensures that is not a partial match in a longer address (say ) though it's not entirely foolproof (it would still match on for example). Anyway, you'll need to replace the first condition with something which matches exactly on a header in the messages you are targeting. For example, the one here doesn't match (because the regex doesn't contain an expression to skip the text up through the character). The rest should be trivial to understand, I hope. 

It bears pointing out that the regular ZIP command in the Info-ZIP distribution has an option to attempt to repair broken archives. $URL$ shows how to use it on a Mac, but Unix will be identical, and Windows fairly similar (if you have the WinZip command-line version; look for ). 

The system doesn't care if exists at all, it's just a piece of text which gets put into the symlink. When something tries to open the symlink, that's when the system tries to resolve it. If you are using a shell with file name completion, this feature can confuse things by allowing you to complete a file name relative to your current working directory, even if you then end up using that as the target of a symlink in completely another directory. 

This will run with the current directory set to every night at 03:42. (The commands in could be arbitrarily complex, but it makes sense to write them into a script if they are more than just one or two commands.) 

and again, you might want to try without first to see what the output looks like. Also, your might not like the option, or might not support reading a script on standard input; perhaps then simply save the output from the first invocation to a temporary file and then give the temporary file name as the file name argument to . Notice that this will require the tags to be non-overlapping -- if you first replace A with B and then B with C, the end result will be as if you had specified "A" "C". A workaround is to switch the order so that B gets replaced with C first, and only then A with B. 

Extract the tarball. Look for a file named or similar. If you find one, it probably reiterates or supersedes the rest of these instructions. The file could also be called , though this is often a file with generic installation instructions which are not really specific to this particular project. If there are files named something like you might need to be able to run to proceed. If there is a file named which is executable, run that. It will try to figure out what components you need to install in order to be able to proceed. If it runs successfully, you can proceed to the next step. If not, you need to understand why it failed, fix the problem, and goto 4. If there is a file named something like (so for Linux, for *BSD, for Suxix, etc) try running where obviously the name of the Makefile needs to be the correct one from the ones you found. Otherwise, if there is a file named (or perhaps or ) run just . This performs the actual compilation using the compiler, libraries, and auxiliary toolchain utilities which picked up back in step 4. If this fails, you have more work to do, probably way over your head unless you are familiar with writing portable programs in the language used in this project (commonly C or C++). An error message from simply indicates that something that tried to run did not succeed. If you need to ask for help, the lines immediately before the error message from are more useful diagnostics than the final laconic "something failed" message from . Success. There might now be an opportunity to run to check that the binary does what it's supposed to do, and/or to copy it to a system-wide location. 

Or 3. Their infrastructure requires some server resources to be available. If their DHCP server is down, your computer cannot register with their network. If their DNS server is down, you cannot resolve host names. If they use a HTTP proxy server, you cannot connect to external web sites when it's down. Etc. However, any serious ISP would have managed their infrastructure so as to avoid Single Points of Failure. In other words, a properly planned network has a fallback in place for when an individual piece of equipment fails. If outages are a recurring problem, you may want to shop around for a competently managed ISP instead. 

More generally, I was trying to use an application with this problem; it turns out that the build had been reconfigured to no longer support Windows XP. Getting an older build which still had the XP compatibility fixed it for me. So, getting a 32-bit build is not a sufficient fix if the build is not also configured to use the toolset. The error is kind of insidious because the "Access Denied" error message is somewhat misleading and common google hits on this error message suggest the download was corrupted or something. 

which starts as a background process (because of the ) with output going to and error messages to . If you don't care about output or the signal handling with , you might simply just want 

The GNU Info-Zip package includes a utility called which allows you to edit file names inside a zip archive as well as manipulate file comments ("notes"). 

I find over and over again that weather applications and web sites default to temperatures in °F and wind speeds in mph. My local standard (which is "local" in most of the world, I believe) is °C and m/s. Is there any standard for specifying this? The regular locale settings do not seem to have a slot for this. (Some American weather sites "helpfully" convert mph to km/h but that's pretty useless. A codified standard would help them do the right thing, too.) 

You need to set up the server to use TLS if that's what you want. You are not revealing which MTA you are using, but the log message looks like Postfix. See $URL$ for instructions; maybe post a new question if you have trouble interpreting the guideline. 

... assuming can read standard input, and end up producing the result on standard output. (You will want to prevent noisy commands like from producing any output on standard output; is your friend.) You'll notice that you can have an abitrarily complex snippet of shell script between the single quotes. There doesn't need to be a program if you prefer to put the entire command line of the individual commands between the single quotes, like in my first example; but you might want to anyway, because a self-contained script is easier to debug and maintain.