The first time is executed it causes to run in a repeating manner: wait couple of seconds then once per second until canceled. Each subsequent call of has the same effect, but the earlier ones are never canceled. Each time runs it calls (and ) triggering an additional call of to occur each second from then on. As a result you quickly have many parallel requests each calling on a regular schedule. This will cause the score to increase at an exponential rate. 

This logic seems to be a little off, for example you are only assigning if the angle is exactly equal to 45.0f when really it should represent a range of one eighth of a circle. I would use the following to convert any given angle in radians to 8-way movement: 

Some games define rectangular area of the screen that the player can move about in without causing camera movement. Any movement outside of this area will cause the camera to move to compensate. This allows the player to make small movements (e.g. adjusting position on a block or jumping on an enemy) without shifting the camera. Shaun Inman has posted a great demonstration of this technique at mimeoverse.com. Some other games have several camera states that can be invoked as needed. As an example Super Mario World has at least the following vertical camera movement modes: 

Kenneth Hurley has a very comprehensive list of bad words included in the ElementalEngine2 repository on GitHub. The author has indicated these can be used freely. 

It is a common technique to rotate a point about a pivot by translating to a coordinate system where the pivot is the origin, then rotating about this origin, then translating back to world coordinates. (A very good explanation of this approach is available at Khan Academy) However you are not storing your rectangle corners in world coordinates so we can tailor an approach to suit the data you have available. 

For the target frame rate to be applied in the editor it is important that the vsync is disabled. This can be changed using the Quality Settings GUI by selecting "Don't sync" or programmatically: 

You can then assign a value to this variable from anywhere, so you could include this line just before leaving a level: 

However this approach leads to a fair bit of work if you require support for all of the collider types. Instead I take the following approach: 

The licensing agreements for these engines (and most software generally) will contain clauses similar to this: 

If for some reason you are unable to determine the hex's orientation using one of the transform's axes, you could calculate it by comparing the hex's position with the center of the planet. 

This still leaves the problem of overshooting if the frame's movement is greater than our distance from the target. For this we can check the distance to the target and if it is less than the usual movement for that frame set the our position equal to the target. 

Thanks for posting image below. It appears that you have the prefab "linked to itself" and when cloned at runtime these clones are also "linked to themselves". As such any changes to state will propagate from one generation to the next. In your case when you call and then both are referring to the same object. As you are cloning a partially destroyed GameObject the resulting clone has unexpected behavior. Here is a discussion of this (self referential prefab) issue on the Unity forums. There are a couple of solutions and workarounds discussed. Two of these options are: 

Setup the last level as a non-gameplay "You Win!" scene with a different exit condition or; Manually check you don't exceed . 

Chaining and using a progress counter is a very rigid approach. You will find it difficult to modify or extend. You may find more adaptable. On each frame it will hold the ascii value of any keys pressed since the last frame. It could be used like this: 

Aras Pranckeviƒçius explained this issue, more clearly than I am able to, in a post on the Unity Forums: 

Is a RigidBody (or RigidBody2D) attached to it's GameObject, if not it is considered Static. If it has a RigidBody, is it marked Kinematic? Is the Collider marked Trigger? 

Your first approach fails to account for the width of the object, while your second approach fails to account for the difference between screen pixels and world coordinates. 

For dynamic content I add the GUIText or GUITexture to a child gameObject. Then on this child I attach a script with code like this: 

The normal for a vertex is generated by taking the mean of the normals for each face that contains that vertex. As such if a mesh contains two (or more) triangles that share vertices they will be displayed with a smoothed edge. If you use separate vertices (they can have identical positions) then they will be displayed with a hard edge. There is some coverage of this topic on Morten Nobel's blog post on procedurally generating meshes over here. 

How best to implement this, and the values to use for thresholds, will depend on the other systems already in place. One approach with Unity that would allow for easy fine tuning would be to use an AnimationCurve. 

To answer your question directly, it is possible to set the scene/game windows to enable gismos for your colliders but they will only be displayed when that gameobject (or a parent) is selected in the hierarchy. This can be improved by attaching a script that implements , as an example here is an implementation that would visualize a BoxCollider2D: 

In the future one of the easiest way to do light debugging of issues like this is to print the value of you variables to the console. If you add the following line to the end of this method you will be able to see is the code is being built correctly or not. 

Camera.WorldToViewportPoint() can be used to map from world to viewpoint coordinates. For static content the following line could be added to an method. 

By "endless levels" do you mean that there is no limit to the number of waves i.e. the waves keep coming until game-over? If so then you need to develop an algorithm that takes the wave number as an input and returns an set of enemies suitable for that wave. The most trivial of these would be to take the wave number and return a number of enemies or as peudocode: 

If you have posted all of the code that handles these variables then that means that "" is evaluating to under some circumstances?!? Are you detecting a bounce, or the effects of some other code that is manipulating it's position? If the latter then maybe you could reset the flags in that other block of code rather than checking for its effects. If there is other code manipulating these flags one approach that is guaranteed to provide insight is to change the variables to properties, then apply a breakpoint to the setter. This will allow you to step though to the code that call calling the setter and examine the circumstances of that call. 

One approach that can be taken with multiple color transitions is to leverage a Gradient. By exposing a public variable of this type a developer an use the Inspector to launch the Gradient Editor to design a gradient containing any number of colors. This editor allows you to use a the unity color pickers, fine tune placement of the color/alpha keys and save/load gradients. 

One approach to this issue is to examine the Collision Normal. This is a vector that describes the direction along which the other object is pushing back. 

This will allow you to control both the magnitude and direction of the force applied for your jump by changing the values of and . 

Object hierarchy Then place your holding as children of the with and call . You can then call whenever the total should be updated. 

If you are rolling your own sprite animations you may need to track elapsed time so that you can control how long each frame is displayed. A common approach is to use an accumulator e.g.: 

GameObjects are very closely linked to Transforms. The GameObject could be thought of as a container to hold a set of Components e.g. scripts, colliders etc. Meanwhile the Transform holds properties than connect the GameObject to the the world e.g. position/scale/rotation and any parent/child relationships. Parent: When scripting you can access the parent GameObject like this: 

The camera will normally render with an aspect ratio equal to but this can be overruled. This script will have an effect similar to taking 16:9 image from the camera then stretching it to fill the screen. This will of course cause some distortion. 

However you have opted for an int based approach but the implementation does not seem to store the previous button presses to build a complete code. I would expect the following change to help: 

An Inventory class with a matching field on the abstract class Creature seems best. You can perform a null check against this field to see if a creature has an inventory. This also allows you to reuse the inventory class as a field of non-creatures like bags, chests, rooms or anything else that suits your game. 

It looks like you have your score working using as the counter. I thought it may be helpful to explain what was happening when the code in your question is executed. 

Looking at your video it appears that the cloned object has an as the value for the variable . I suggest ensuring that the prefab has the prefab as the value for its variable . 

One approach to handling the composite objects (collections of components that will move as a single object) would be: Create a script to store the weight of a component. 

I have a class hierarchy with an abstract parent class. I would like to have a field of this type exposed to the inspector but it appears to not display. This test code: 

It is declaring and assigning a value to a local variable. It will only remain in scope for that clause (the if block) and the value will be forgotten next time the method is called. 

This will allow a ground check that travels with, but does not rotate around, the player. Note that the actual value of will need to be modified to suit the size of your player. 

As lealand raised "width" and "height" are somewhat vague terms. Here is a straightforward approach to finding the width and height of the AABB: 

Move the prefab into the resources folder, change the variable declaration and Awake() to something like this: 

If you have the normal vector for the "top" face of the hex and the vector for the directional light it should be easy to determine if that hex is facing the light. Note that this will check if the hex and the light are facing each other. This will not detect of another object is in between casting a shadow over the hex. 

When facing this problem I found that I wanted the character to move forward at a velocity roughly proportional to how close they are to facing the target. When facing away from our target we "turn on the spot" (Red), when facing directly towards it we walk straight towards it (Green), when somewhere in between we will may walk slowly while turning (Blue & Purple). 

While a little out of date at this point I find the Mono Compatibility page form the 4.10 documentation to be useful. It lists IEnumarable.Where() as compatible with both .NET 2.0 and .NET 2.0 Subset. 

However stepping the values of a vector towards another is a common problem and unity has provided a convenience method to help us with the heavy lifting: 

Your is a child of the player and rotates around the player when the player spins. The 's primary function is to provide a position to use when calling . This means it could be replaced as follows: 

For the example given in the question we would also require a offset to account for a quadrant straddling the zero angle. This offset also requires wrapping the angle value to ensure that it remains between and 

Here is a minimal example of the concept. You will likely want to tune the condition to suit your needs (at the moment a corner collision may be erratic where ). 

As Sean says you are really just using the accumulator to enforce a fixed time step, this is likely to look very jumpy in comparison with the rest of your game. This would be one approach that applies movement on each update: 

If you look at a circle with the angles marked you will see that corresponds with i.e. straight down. By convention degrees are marked as acceding in a counter-clockwise direction. They do however form a loop and as such (purple arrow) can also be expressed as (orange arrow) i.e. a quarter turn in the opposite direction. The coordinates that you provided correspond with both and depending on how you choose to express this angle.. The documentation for for .Net 4.5 states that it will return value is the range , after converting to degrees this is . To further explain the expected results here is a table with the results of the following formula with the corresponding values of and . 

While verifying that the tag manipulation performed by the script is correct I am manually setting the tags via the GUI and then triggering script by saving a trivial change to the file. This is clearly a clumsy workaround, is there a better way to force Unity to reload editor scripts? 

As you can see the field for the abstract class is missing. How can I expose a field of an abstract type to the inspector? 

Bias: If we set a bias towards heading in the current direction and only switch direction when a new direction is much more desirable we should have a more natural result. This will have an about of back and forth between headings abut the bias can be tuned to reach the desired result.