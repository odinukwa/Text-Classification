Separation of concerns and improving testability. Ideally you should be able to unit-test your entire game with locally running Java tests and no UI necessary whatsoever. This however requires you to separate your Game instance from your activity - something I'd highly recommend either way. Making your game modular and plugging it together in the form of components (this architecture style is a matter of preference but lends itself quite well to games) 

Variable naming: I'd recommend using camelCase for variable names as well as methods as per the Java naming conventions UI text: Ui text should be kept in the appropriate language file (strings.xml) and not be hard-coded in one language. This facilitates internationalization and re-use of UI text I'd recommend using Google's FusedLocationProvider as described here this way you'll receive updates to locations in a continuous fashion, as per your requirements (interval, displacement, accuracy etc) you can also use it to request one-time locations 

Note: the following refers to native Android development, I am not familiar with xamarin. About the approach It depends on what your aim is. The downside of using AsyncTask is that it's tied to the Activity you're calling it from. I recently implemented continuous location tracking, where AsyncTasks were not an option, as the process of continuous tracking is not tied to a particular activity. So I opted for an Android Service implementation instead. The Service was in it's own class and while you could bind to a service in a given Activity I instead went for the EventBus pattern (there are other options though) - meaning every time the LocationService obtained a new location it would cache the most recent location and propagate an Event via the Eventbus. This way subscribers (such as Activities) would be informed of location changes and could update the UI accordingly. However, if you only want to query for locations within the Map Activity, then an AsyncTask may in fact be enough (I would put that in a separate class file though so it's reusable). The downside of this approach is, that since you only start asking for locations once you enter the Map view, it may take a moment to obtain a viable location. 

Line #1 is the prefix Line #2 will give Line #3 will add suffix to make the selector valid. With this, the code will be 

There is no need of wrapping the code in for binding events on . Use ternary operator Use with second parameter to add/remove class based on a condition. 

If using latest browser/environment that supports Arrow functions, the code can be made even smaller 

Adding quantifier also has positive effect on the number of steps taken to match characters when the characters in the character class are consecutive/adjacent to each other. Here's the demo on RegEx101, without quantifierScreenshot and with quantifierscreenshot applied on the same data. Note that in these demos, PHP is selected as the steps taken to match is not shown for JavaScript. Also, the regex is different, it also contains lowercase counterparts of those special characters as flag is not working with PHP and don't want to apply (Unicode) flag as it is not supported in JavaScript. These demos are created only to show difference when is applied on character class. The effect should be similar in JavaScript. Note that the (two underscores) are redundant as is already added in character class and with flag it'll remove all occurrences. Method Chaining As returns a string, any other string method can be called on it. Multiple calls to can be chained. 

The following makefile builds my classwork for my various college classes and builds pdfs to hold the notes I took during class. I would like feedback on my directory structure and any optimizations that can be thought of to help improve it. I've been using and updating it for the past 18 months. I know that I should probably document it a bit better The directory structure of the classes is as follows 

I wrote a simple script to retrieve the logs from my website, and place them in a subdirectory called . It fetches the logs using sftp. I would like help with the error handling. I'm sure that there are errors I did not see, and I would like to make it so that it fails gracefully. 

Maybe use a generic function to set the css on change if you don't have anything other than colors. It also helps with dry. 

I am writing a search indexer for a site I built. It counts the number of times a word is used in a given story allowing one use of the word per chapter. I have also attempt to weight words in the titles and the descriptions more heavily by including them in every chapter that is indexed. I would like to know if I am handling transactions properly for this, and preventing dead-locks while the update is performed on the database. I would also like to know if I can clarify the sql statements any or if there is a better way of concatenating the columns. 

Use the same value in the query param as the ID of element in the HTML so it can be directly used as selector If you don't want to change the query param value and ID of checkbox, create a mapping of param value and the selector 

The RegEx will match a single non-line-break character and check if that is followed by the same character any number of times. here is the complete match and is the first chaptured group value i.e. the character. 

Using with value accepts second parameter which will be converted to Boolean internally and depending on the value, the action will be taken. So, the and statements in the question can be combined as 

I don't see any issue with code other than below two things. First, I'll suggest is to use instead of contains and then add/remove class. See browser compability and if target browser does not support method, use polyfill from MDN. 

Using common class Sometimes, adding all the elements under a container is not possible. In such cases, adding a common class to all the elements will allow to select elements using class selector. 

Here's live demo of regex The regex can be further improved by using character class which will make the matches faster than OR conditions 

If this is a private project, where you're free to use alpha-staged libraries I'd strongly recommend you take a look at Android Architecture Components. A great talk about the subject was given at the recent Google I/O. Restructuring your app's architecture and using Android Architecture component - the LifeData and LifecycleObserver in particular will very much ease the problem of having to deal with LifeCycle events (such as screen orientation change). If you're writing a game, then the Component-based Architecture may be interesting for your purposes. You'll very likely come across it when investigating architectures suitable for Games (render loops etc). The general idea is: 

Permissions If there is a chance that permissions are withdrawn at runtime, possibly causing Permission related exceptions then I am not sure there is a way around asking for permissions on each query. Separation of concerns Your activity does a lot of different things. I'd try to pull out the entire Permission Handling as much as possible and put it into it's own class/component. The same I'd suggest for the content of the methods track_my_ride and getDirections - btw you're mixing naming conventions :) - see Other points#1 but at the very least, stick to one principle. Extracting permission handling code This is a refactoring task. Basically I see two options (there may be more though): 

Lodash Do you really need a library for this functionality? The Same functionality can be done without Lodash or any other library. If Lodash is only used for this functionality, it can be removed. Missing Semi-colons Although, a small thing Automatic Semicolon Insertion can lead to unexpected behavior. The usage of the semi-colon is not consistent. I'll recommend using JSLint/JSHint. Alternative I'll recommend the use of and String methods to make the first character uppercase. 

Eight Digits Digit-Space-Three_Digits-Space-Two_Digits-Space-Two_Digits Digit-Hyphen-Three_Digits-Hyphen-Two_Digits-Hyphen-Two_Digits Two_Digits-Space-Two_Digits-Space-Two_Digits-Space-Two_Digits Two_Digits-Hyphen-Two_Digits-Hyphen-Two_Digits-Hyphen-Two_Digits 

Improvement Here is the Demo of jfriend00's answer. Although, this is correct, this can be done without jQuery at all. Note: Here, I'll use old markup provided in the question. can be written in CSS as 

The advantage of this method is that you can use any selector. For example, if you want to use class selector for one of the checkboxes, just use as the selector in mappings and it will work. 

The function will give the timestamp from the given string. This timestamp can be used in the function for comparing with other dates. 

which basically says, when hover on , select next sibling and it's direct children , having class. Demo:Although, you cannot see images, you can see it works as expected when hover over an image. 

I'm working on a text based rpg game and a couple of commands make use of a target and container pattern. So I wrote this function to split the string up on a given word and put it back together. I'm not sure how efficient it will be in the real world, but I think that it can be improved. An example of such input and output would be: 

It should be noted that the default application for open svg files should be set to a browser of some sort. 

I'm using a lambda function to generate the callback handler for each list page in a group of routes, because the sql is very repetitive for each of these routes. The lambda function uses a callout to a formatter to generate a sql statement. I wanted to know if anything I'm doing is bad practice or a vulnerability. 

I attempted to recreate the github code frequency graph(example) with a daily granularity using and . How did I do, and what improvements can I make? I know that I should try to reduce the frequency of keys on the x-axis, but I have no idea how to do that and maintain scale. 

Things you could improve You could return a code to the operating system to indicate that the files do not match, this would make it more useful, as you could add it to a shell script workflow. See the snippet below. 

Replacing HTML jQuery accepts a function which will receive the current of the element on which the method is called as parameter and replaces the returned content to the element. The code can be written as 

Global Variables: All the variables defined are global, which is bad practice. Avoid declaring global variables. Wrap the code in IIFE and define variables using keyword. Naming Conventions: The names of the variable should give indication of it's purpose. The names should be in camelCase format. Caching: Cache the DOM element reference and use it. This will save the time to dive into DOM again. Missing Semicolons: Although, this will not cause any errors since JavaScript's Automatic Semicolon Insertion(ASI) will add the semicolons, it's good practice to add them. Also, depending on ASI can cause the semicolon to add someplace where the symantic will be changes. Ex: When declaring multiple variables if we forgot a comma, the successive variables will be declared as Global. Comparison: To compare variables use strict comparison operators( and ). Loose comparison will cast the operands before comparing variables which could lead into unexpected behavior. Using ladder: For mutually exclusive conditions, use . If the condition is satisfied, the next conditions in are not executed. Or statement can also be used. Nested : Use nested loops to iterate over the and update the values of each cell.() Appending Markup: Instead of appending markup(like element in ), IF POSSIBLE, add the markup in the HTML and only update the text-content of the element through JavaScript. This will avoid adding multiple nested elements if the function is repeatedly called. Comparing Variables: is equivalent to which is more readable and easy to understand. Also, this will save an operation(Logical Not). Using string parameter to : Don't use string parameter to the and functions. You can pass the function reference as Un-Needed Code: In first variable is assigned to zero and then it is compared with zero which is always going to evaluate as . The condition is not necessary there. Similar Functions: The functions and are similar. Both are redirecting to some page. This can be combined into one function accepting a parameter as redirect URL and redirect to that URL. Same is with and functions. Logical Error & Dead Code: The expression will always produce value between one and seventeen. So, the code written for comparing it 18 through 22 is dead code, which can be removed safely. Or, if you want to generate the random number between one to twenty-two replace the by in that statement. Binding Events: Use to bind events on elements. As in the current code, no event binding code is shown, if inline binding in HTML is used, use to bind events.