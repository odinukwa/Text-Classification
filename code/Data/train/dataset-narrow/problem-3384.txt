The number of pins you can control will depend on which model Pi you have (17 user controllable pins on 26 pin Pis and 26 on 40 pin models). There are several ground pins, and at least two dedicated power pins (5v and 3.3v, 40 pin models also have 2 DNC -do not connect- pins) the remaining pins are user controllable and can be set to high (nominally 3.3v) or low (0v). Note in electronics, unlike in residential/industrial wiring, we don't generally use the term negative as a synonym for ground. 

If you don't need the graphical capabilities of the full Raspbian distro, I would recommend Raspbian Lite. Raspbian, has the largest user base and hence the most projects and tutorials available. The large user base and community support can make developing and troubleshooting your projects a lot easier. Both are available for download from the Pi foundation website. I am not sure if Raspbian works on the Orange Pi (the site appears to be down at the moment). 

Given that the kiby site contains instructions for installing it on the Pi. The answer is yes, and following their instructions should work. if not I would suggest getting it to work without the PiTFT first to rule that out as a cause of the problem. I would also suggest that you are more likely to get an answer on their site as they are likely to have had more experience with tthis specific combination of hardware and software. 

Then select: 3 Boot Options then B1 Desktop/CLI Select your desired boot mode: B1 Console Text console, requiring user to login B2 Console Autologin Text console, automatically logged in as 'pi' user B3 Desktop Desktop GUI, requiring user to login B4 Desktop Autologin Desktop GUI, automatically logged in as 'pi' user and finally, click: OK Reboot your Pi to confirm it is working. 

You may be able to power a Pi3 from a USB port, but it is not recommended. The USB 2 standard specifies an output current of 0.5 Amp (USB3 can supply up to 1 Amp), well below the recommend rating for the Pi. This can lead to a variety of hard to track down issues (e.g. freezing of the Pi, SD card corruption, networking issues), a quick search of this site will turn up several more issues resulting from an insufficient power supply. You could use a battery pack to power the Pi, but that does not really solve the problem as the battery will need to be recharged somehow, and is likely to lead to a subpar user experience when the battery dies mid movie or game. One alternative may be to purchase a power bar (that has high Amp USB charging ports built in - these typically supply > 2.0 Amps) like this one 

I have no experience with the Matchbox Window Manager, but I always use the Ratpoison Window Manager (package "ratpoison" in Raspbian/Debian/Ubuntu) for such purposes. Ratpoison makes any window full-screen by default and only adds a 1 pixel border by default -- but it can be configured to have no border at all. Putting into should suffice for that. 

In the O'Reilly book "Raspberry Pi Hacks" there is Hack 40 "Make Your Pi Water-Resistant (Without a Case)" in which they describe how they make a Raspberry Pi temporarily water-resistant using Rustoleum's NeverWet paint. Then I got my hands on a (not so limited?) matte-black Pimoroni Pibow Midnight case. But as can be seen on this image the green PCB of the Raspberry Pi shines through. So I wondered how it might look like if I'd paint the Raspberry Pi in matte-black, too. Hence my question is: Is it safe to paint the Raspberry Pi in a different color and if so, is there (preferably matte-black) color/varnish/coating which is (preferably explicitly) non-conductive and could be used to give a Raspberry Pi PCB and its chips a different color? So far I only found this thread on the web but most replies seem to be about wrapping stuff in tape to hide the PCB. Another web page touches the topic, but only lists material, no actual product or so. Side questions: Anyone did something like this already? Any side effects on the cooling? 

Today I stumbled upon the WDLabs Media Stick for the Raspberry Pi Compute Module at the ModMyPi Online Store and was immediately reminded of the Intel Compute Sticks or the ASUS Stick PCs. But the WDLabs Media Stick doesn't seem to be powered over HDMI as it still needs a 5V input over a Micro-USB socket according to the (very short) PDF manual. So I wonder: Is it possible with some intermediate board to power a Raspberry Pi Zero or a Raspberry Pi Compute Module from the HDMI port of a TV? (I imagine this intermediate board to be similar to those Power-over-Ethernet adapters you can get for the normal Raspberry Pi.) There is an rather old thread on this topic on the Raspberry Pi forums which says it's impossible. But given some of the comments in there about e.g. the MHL standard and the fact that the Raspberry Pi Zero didn't exist back then, I expect that most information in that thread is outdated. Also the claim that HDMI sinks can only provide about 50mA (which is about the amount of power two keyboard LEDs consume) seems to invalidated by the pure existence of the Intel Compute Stick. But another not so old thread on Quora comes to the same conclusion: HDMI only offers 50mA. Or is maybe my assumption wrong that the Intel Compute Stick and similar devices are powered over the HDMI port? Because they're usually advertised as "just plug it into an HDMI TV or monitor and start working" which suggests that no additional power supply is necessary. Then again, MHL seems to provide between 500mA (MHL 1) to 2A (MHL 3) over an HDMI connector. So in theory it should be possible to power even an Raspberry Pi 2 over an MHL connector if there's an intermediate board which takes care that both HDMI signal and power are connected to the correct sockets or GPIO pins on the Raspberry Pi. Anyone already did something like that? Or is there already a ready to use board/HAT/pHAT for that? Actually the ZeroStem follows a similar idea, just with USB instead of HDMI, i.e. making a USB stick out of the Raspberry Pi Zero. At least the thought of having a Rasperry Pi Zero W with a Bluetooth keyboard and mouse which just connects to the MHL-enabled HDMI port (and really nothing else ;-) of a TV to start working sounds like a really nice setup. 

The Pi does not have any analog inputs, you will neeed to add an ADC and connect your sensors to the ADC. Adafruit has a nice tutorial using the MCP3008. Tutsplus has a tutorial using the MCP3008 with a moisture sensor. 

You should now be able to import the package into your code. I am not a Mac user, but I would be willing to bet the solution is similar. 

No a heatsink is not required, The Pi3 has been reported to generate more heat than previous models, but the heatsink is not required. You can install it for some extra thermal protection, but the Pi will throttle the clock speed to maintain a safe temperature. Heatsinks are included in many of these kits to increase the perceived value. 

When you visit a website part of the info your browser sends to the webserver is the user-agent header. You can view the user-agent header using this webpage. Assuming you are using the default browser it should look like this: 

From the graphical file manager you can select Show Hidden from the View Menu, or via the keyboard shortcut: ctrl-H. 

You can pass the --no-osd flag. This tells omxplayer not to display status information on the screen. You can find info like this using the man command: 

most 26 pin headers will not clear the extra pins on the newer B+ and Pi2. The method used to enable I2C, spi and other kernel modules has changed. the software (drivers etc.) may not work with the newer OS images. 

Try this place the Pi in the case with the HDMI side down so it will slot into the matching holes for the HDMI, USB and power, and line up over the pins that match the holes in the Pi. You can then push down firmly and the board should push the little hooked bar out of the way alowing the pi to sit flat in the case, (the little hook is designed to hold the pi securely). if necessary you can use a small piece of wood or plastic to push the little hook back out of the way while doing this to make it a little easier. As you can see in this photo: 

You can satisfy the missing dependency by doing the following: install the libffi libraries needed by cryptography 

You should see two directories a boot directory and a directory made up of a long string of letters and numbers (this may also be called root). Change to the non boot directory: 

You could tell the syslog daemon (on Raspbian the package rsyslog is used by default) to write according log messages also to which is the currently active text console under Linux. (This assumes that no X is running. If you have X running, there is a tool called in the package x11-apps which shows these messages in an X window.) Additionally you might need to either disable screen blanking permanently (may damage your screen) or make the screen unblank in case of such an event. The commands to control screen blanking are under X and the on the Linux text consoles. I though do not know how to trigger a command if a specific message is written to the syslog. One solution might be to also pipe these log messages into a script which checks every input line for the according messages and calls the above mentioned commands if a match is found. 

is usually declared in . If you haven't deleted that file or its symlink at or removed the directive in it, that's where the directory is configured. If you've put your into , but haven't called afterwards (which will create an according symlink in , it won't be recognized. 

It seems you initially installed Raspbian Lite which does not come with a GUI by default. You at least need to install the package xinit (e.g. using ) so that can find . But you very likely need to install more packages to get a usable GUI on Raspbian Lite, e.g. . 

The "small multi-colour square â€¦ on the top right side of the screen" is an indicator that the Raspberry Pi is not getting enough power over the MicroUSB socket. This potentially could cause followup issues. For the Raspberry Pi 3, a 2.5A power supply is recommended. (For the Raspberry Pi 2, a 2.0A power supply is said to suffice although a 2.1A power supply seems to be recommended.) 

There are not really enough details in your question to find the source of the failing graphical login, but usually something important for the X session doesn't start up properly and hence the session setup fails and you're back at the login screen. To debug such issues further, have a look at the end of the log file . Maybe you want to add your findings to the posting retro-actively so you can get better fitting and less generic answers. One guess though: Did you make the default , too? Because that's not supported by since its compatibility mode is not good enough for such a purpose. 

You are not closing the emergencia.txt file and not checking if it is already open. Change this line: 

and remove the "#" from the beginning of the second line, and replace the "ntp.your-provider.example" with your Macs name or IP Address. Next change the following lines (note that your lines may not match exactly - server names may be different): 

You can check the list of of RPi verified peripherals, specifically the USB Wi-Fi adapter section. Consulting the list it does not appear that this adapter is listed as working. This does not mean that it won't work (since it is not included on the problem section of the same list), but if you are new to Linux and the Pi I would not suggest it. You might be better of choosing one of the verified working adapters - even if it costs a little more. Edit: after doing a little Googling, I came across an Amazon UK page. Where someone asked this exact question, and received a "Yes it works with the Pi" from two different users. If you do buy this adapter and verify that it works, I suggest you add it to the verified peripheral list as working. 

These two youtube videos do a good job of describing how an optocoupler works: How an Optocoupler (Optoisolator) Works Using Optocouplers with the Raspberry Pi Note: that while the too optocouplers used in the above videos are different (and have a different number of pins) the functionality and operation is the same. 

The tutorial you linked to only works with the Pi Zero and Pi Zero W. It does not seem to be mentioned explicitly in the Adafruit tutorial except in the title, but the original tutorial makes this clear: 

A common anode LED should have the common leg connected to 3.3 volts and the others connected to 3 seperate GPIO pins. Connect the common pin to 3.3v, then wire the other three legs of the LED to the desired GPIO pins. In your code pull these pins low to light the individual colors. The resistors should go between the LED color pins and the GPIO pins. Here is a quick check connect the common pin and one color pin with a resistor and wire the common pin to 3.3v and the other to the Pi's ground pin. If you have the polarity right it should light one color. if it does not light switch the ground and 3.3v wires. Once you are sure the polarity is correct connect your chosen GPIO pins to the LED's other three legs (non common), including current limiting resistors. The voltage and specific resistor values don't apply assuming you are using the 3.3v pin to power your LED, but the image below should make clear the difference between common anode and cathode, and how to wire them. Note that the picture shows the three color legs connected to a single pin, but you need to use three pins to control all three colors.