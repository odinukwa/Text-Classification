Learning to better help yourself is a wonderful thing, it helps you the most! With most things programming, doing a simple Google search first is typically the best route. Then there's the option of reading the documentation for the thing you're working on. Often they have helpful tutorials or manuals to help you. Once you find a good source for documentation, it's typically best to look there first. Finally, you can ask a question on a forum specific to the thing you're working on (but remember to always search the forum for an answer before asking a new one!), or if your question is more general, on a site for more general development in the field you're working in. Specifically for your question: 

There are a few different techniques at work here. Such as estimating an average plane, performing "half-edge collapses" and more. There are numerous publications available that discuss implementing a decimation process. For further reading: $URL$ $URL$ $URL$ $URL$ 

Of course you can adapt this to whatever rules you've made up in the past. Keep in mind that this is just one type of "rule sentence" table. You can have multiple tables to choose from when creating a new rule, all with a different sentence format. Note: For the above table, you can have a rule that says that columns 3 and 5 must be different entities. 

Empirical testing. The physics are revealed to you when you play the game, you just need to collect numbers for what you're seeing. For each game you want to emulate you need to collect: 

That'll give you Core Animation FPS, but also loads of other stats about your application, which is probably more helpful to you if you're trying to assess performance issues. 

Since you apparently don't want this for the end user, I'd suggest just running with the performance monitor. With your device connected try running: 

Unique identifiers are a good option. However, they don't need to be used in game, only when writing and then reading the data from a save. Hopefully you'd already have some way to differentiating between entities you can use, otherwise you can make something up (typically an or ) Pick a unique ID for each entity, then proceed to writing the entities. For each entity, write its ID and when you write its components, add that ID as a header to the component information. Also write the ID for any target info. Then, when you're reading back in, you can use something like a dictionary to store the entities in, referenced by their ID. Then when you read a component, you can get the ID and index into the dictionary and add that component to that entity. When I read and write entities, I write all of the entities first, without their components. This makes it much easier when reading in the components later because you have all the entities available to you. It avoids the situation where you're reading in an entity that has a component that targets another entity, but you haven't created that target entity yet because it's deeper in the file. 

Additionally, in my case I didn't want the player to see caves that hadn't been discovered yet. I implemented a feature where only 'air' cubes that were connected to the outside world would be visible. This was done at terrain generation time. I'd walk all the cubes connected to sky and mark them as 'found' along with any solid cubes touching that air. Whenever mining happened I'd start a new walk from that location to see if it reviled any 'hidden' pockets (like caves). Any cubes that were not found show up as a black void texture. Where the found cubes would have the texture appropriate to their material type. This was all done with a custom build engine. I haven't used shaders in Unity so I'm not sure what pointers to give you for implementing this in Unity. 

As far as I know, there's no existing algorithm for this, you'll just have to create one. You're already on the right track. For each cube, check the surrounding cubes to see if converting the current cube is reasonable. For example, say we're looking at cube #5 on a hill side. (green is solid, while is air). 

This sounds like an input problem. You need to check your inputs to see if you've already processed a key press. Keep the state of the keyboard from the last frame and check it when you're on your new frame. Only move if the key was not being pressed in the previous frame. Similar to responding to the event of pressing the key instead of the key being down. For example: 

You can still generate meshes per chunk, but to ensure the edges line up, you need to access voxels outside the current chunk. So, your chunks need to know about each other. When accessing a voxel in a chunk, have it access the 'world' level to retrieve the voxel. The 'world' level shouldn't care about which chunk a voxel is in. So inside your chunk it would be something like: 

You're checking each agent against every other agent more than once. For example, consider a simple list of 3 agents, there should only 3 checks, you're checking 9 times, and that gets much worse with larger numbers. At 100 you're checking 10,000 times instead of 5,050. When you iterate like you're doing, the comparison happens like this: 

Or TortoiseSVN shows images side by side. The bottom line is, if you're hosting this repository yourself, you're going to need a lot of extra storage for graphics diffs. Because, like you said, it's not like a source code file where you only have to store the differential, you're likely going to end up storing multiple copies with only slight changes. 

You'll probably have to look into PropertyDrawers to get what you want. These are custom property drawers for Unity. The Unity inspector doesn't know how to render a lot of things by default (and some things it's not very good at rendering, like arrays). With a custom property drawer you can tell the Unity Inspector how to display your interfaces. Property drawers also allow you to change the way other types are displayed. 

Look at the stack trace it will tell you exactly which line has the null pointer exception. You need to invest in learning to use the debugger too, these are simple problems to debug and you can solve your own problems much faster than waiting for a reply here. From your code I'm assuming that 

Yes, creating lots of objects can create performance problems down the road. The alternative is using fewer objects. In this case, fewer objects taking up the same amount of space means larger objects. You can, for example, create a texture that looks like 4 or 8 blocks side by side, then create one object that's 4 or 8 times longer than a regular block. 

Another option is to use one of the built in scripts called "Smooth Follow". On your light object, in the Inspector, click on the Add Component button. 

If you're using velocities for this, the "jump distance" will be handled automatically. The distance on the X axis traveled during the jump is the product of the time in the air, and the X axis velocity. Say your jump takes one second to complete. If your character is traveling at 10 units per second on the X axis, during that one second jump, they will have traveled 10 units. If their speed is 4 units per second on the X axis, they will have traveled 4 units during the jump. If you're experiencing otherwise, make sure you're maintaining the X velocity when changing your Y velocity for the jump. 

Two basic steps here, detecting when a button is pressed, and rotating the object. Both are pretty simple. Create a new script, or insert the following into your existing script that is attached to the object you want to manipulate: 

As you can see, this entity has fewer components attached to it. By looking at the components it does have, it looks like it could be a static item like a rock. It just has a position and a sprite. It's not going to move and it's not going to be affected by any health changes. This entity would produce a key of 1010. So what systems operate on this entity? Lets check: Against our movement system: Nope. Looks like the movement system doesn't care about this entity, because it doesn't have the components required. Against our drawing system: Hey, that's a match. This entity will be operated on by the drawing system. The drawing system will draw the sprite at the position defined. 

These are examples of cellular automations and what they can produce. Essentially I'll create rules for different races. Some examples of rules would be: 

Holding down the arrow keys to move characters can also be implemented in a few different ways. Likely what you're doing is something like: 

Obviously you'll want to tweak the starting values, rate of independent increase of amplitude and frequency until you get something that looks closer to what you want. You'd want some randomness thrown in to make it interesting. Additionally, as your example shows, very light objects with high surface area could actually go up near the edges of their waves. So, waves above a certain amplitude should start to factor in a sweeping up value, with a small capped max value. The less mass and more surface area an object has, the more you increase the amplitude and frequency of the sine wave. The more mass and less surface area should result in a decrease of amplitude and frequency. 

This means it's the amount of time since the last time the update function was called. It's a . Getting from a will give you the time in seconds. This is likely to be a pretty small value, since updates happen very fast. 

Add your trigger code to the method in your script. This method is called when the trigger is first touched by another game object's collider. 

That's not adding the origin back, that's adding your offset rotation to the initial values. Adding the origin back looks like: 

While the letter X is not copy protected, the specific cross used on the controller, along with the other shapes: , are trademarked. Using your own art to represent the buttons (as in your example image), should be OK under fair use, specifically nominative fair use. Where the qualifications for nominative fair use are one of the following situations: 

Additionally, you might want to consider notifying the scripts when they're no longer selected. This means when you set the bool to on one script, you should set it to on all the other scripts. 

While you don't really have to scale the x axis (since the gradient is along the y axis), we're just ensuring the function works for all types of gradients. If you were to pass in values outside of the 0 to 1 range, you'd just get 0 or 1 for return values. You can always create the gradient function with the size of your world , but people usually like to think in normalized values. 

The source code is available as a compressed file here. You'll have to use an unzip tool to extract the files, something like 7zip would work, since I assume you're on a Windows machine. Keep in mind it looks like this code and its associated files were created on linux, so some of the files won't have extensions and it'll probably be somewhat confusing if you haven't see that before. Good luck. Check out the folder, it's where you'll find all the code. 

My game uses an entity component framework and uses scripts to define entities (this doesn't directly define behavior, I'll talk more about that at the end). The scripts define the actual components to be used for creating each entity. It uses a simple scripting language I created. Here is a simplified version of one of my scripts: 

I haven't used JBox2D, but I think this is accurate. I looked at the source for the project and learned a lot (and you can too). Primarily that body contains a , and that the contains the position. Since all those variables are public, it's likely you'll be able to access the position from: