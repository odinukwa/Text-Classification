The following two block are nearly identical, consider moving them into a format/structure that reduces the repetition: 

UserScripts should follow the format, so that TamperMonkey, GreaseMonkey, GoogleChrome and the other installers can pick up on the fact that it's a UserScript, the GitHub file does not. 

, rounded down to a whole number For leftover positions in queue, transfer and go through until you fill up the queue. 

Then, add to check that your string is a valid object property, in which case that it isn't, you can throw an error. 

Build it with DOM Elements. Store the HTML template in an external file and use a replacement helper to replace the placeholders with your values. 

: Some people aren't particularly a fan of and if your build's target audience can't support ES5, then you either need to use a polyfill or something else. Personally, I'm an advocate of . As it's a prototype of , you can't directly use objects. But you just suggested an object... has a handy function on it that gets all the keys in the object as an array. By traversing this, you can use the first parameter only in : 

Ideally, you'd want to just mirror the definition for , instead of re-using , as it more cleanly symbolises the symmetry 

First of all, you're only referring to once, and never use any further. The quick solution would be to iterato over instead: 

Which also saves us pre-compiling a regex. More readable, I think. Any are fine, but I think the is the easiest to look at. Using that: 

You load all files into memory at once. This is expansive. Rather not. Let's assume that there are no cross-file sentences going on (at least I hope not!). 

Wow, we saved a few lines of code. If we're lucky, it's also going to gain us some performance. Next, you have . This can be replaced by (as that's how dict containment checking works). Furthermore, can be replaced by . Furthermore, you write followed by . You can simplify this to . 

Suggestion: if you do in-place sort, make sure it is documented that the function modifies the input array. In general, I would prefer not returning the result, as to limit confusion. I can't really see anything wrong with the implementation itself, but I'm not familiar enough with insertion sort. Using is fine for short lengths, but as this is a list-sort, you don't really know the values will take. Maybe use instead? (Or better: upgrade to Python 3!). One thing I would really really like to advice is switching to Python 3 for learning. Python 2 is only supported up-to 2020, and a lot of people would be happy if more people learn Python 3 instead. 

Note: This code DOES not map multiple, I am not asking how you can map multiple, I am asking for suggestions on my working code. 

Like @IsmaelMiguel said, using massive strings like that is bad in both practise and efficiency, and can majorly reduce the minified version's effectiveness. I would suggest using Option 1, because it is much cleaner and easier to maintain, however if you decided for Option 2, you could use GreaseMonkey's function to access the template file from another source. The first part of the structure in DOM elements: 

Method I'm not particularly a fan of your method. Checking for DOM updates before scanning through everything all over again. It would make more sense to simply inject a stylesheet to override SE's stylesheets. Much more labour performant. 

Imagine you're a contractor coming in to improve this plugin and you accidentally remove the after 's assignment. All of a sudden you've got a bunch of troublesome globals. Sticking to adding the keyword on every line is a practise best kept early. 

The comments for the and are really trivial. You can easily drop them. Please do. Consider what your comments add to the code. If they detail how it's implemented, try very hard to find a way to remove them without reducing the clarity. The following is just as clear. 

And be done with it. There's probably a lot that can be cleaned up further in the rest of the code, but I just wanted to give a short overview of how to fix the . 

In general, no, this would not be the fastest approach. However, assuming that all the lines are quite small, I think you won't do better by the 'general' fast approach. You could use . 

I'm also a bit uncertain if your implementation of the algorithm is entirely correct, but I'd need to look that up a bit more. 

And similar for match2 and match3. However, the real complixity in your implementation lies in the determining of the error message to show. I would suggest building a dictionary mapping the display error to internal errors: 

Security: When using a fixed salt, if they managed to break the compilation of the code and retrieve the plaintext salt, it would render the encrypted password down to a matching of common hashes. Use a different salt for each user (make a random integer, more than 10 digits even), and store the salt beside the password inside the database. 

File system: Instead of using files for each listing, and seperating each file by line, consider using JSON instead (with a single file). By using JSON, you can easily serialise the data into dictionaries which can be easily accessed: A theoretical JSON structure for you may look like: 

: is a bit weird and can cause issues as it iterates over prototypes as well. Considering you're testing that the properties are array items anyway, you can just use instead. 

You shouldn't have individual functions for each role, and a user probably shouldn't be assigned more than one role. Especially seeing as you can't be all three 

your implementation is to much procedural. You do all in the main method. You should put the logic in Elevator class and call it via main method, after instantiating the Elevator object. You should avoid static members, too. your implementation have to much ifs, that let your code bigger and polluted. see anti-if. elevatorUp and elevatorDown methods are almost the same. you should avoid code duplication. See DRY. 

I made an re-implementation of your elevator simulator. I change the methods elevatorUp and elevatorDown to one unique method, to avoid code repetition and to put off some ifs. 

I'm taking and Android course and I would like to refactor the code for one of the exercises. The complete solution done by tutors is here. When I was doing this exercise by myself I was annoyed by those with and by the fact that class containing too much logic. Also, due to the fact this code used to be common at most apps, I think it should be moved to a different class. This code set the summary of each preference in a preference screen (see the image below). To illustrate that, here is a picture from my phone running other simply preference screen. I have created a simply factory class () an interface (SummaryResolver) and a bunch of implementation for each type of Android preference type (, . I couldn't eliminate the "" it will be doing only once within factory class. 

Of course, you'll need to play around with the sizes of the grid to match what you want. However you'll find that this method is much faster. 

this is confusing to read and would be better explained through a simple temporary variable. Spacing You should be using spacing between binary operators, like here: 

Game Structure: While your game seems to flow somewhat well, question -> answer, play again, Your, or perhaps, the usage of s is kind of annoying. I always found s like forcefully delivering a message, you want to be delivering it peacefully and in a nice dialog, thus, I would suggest creating a dialog box, or using a dialog plugin. Additionally this will allow you to deliver the content better and add an end game button for when you want to end the game mid-game. Beyond that, I would consider implementing a score check, and from that a check to make sure you don't ask the same question twice in the game. 

But now, the whole generator-function is a bit annoying, and I'd like to switch to ... (drumroll) Generator comprehensions Defining lots of separate generator functions can be really annoying, especially when the body of the generator is quite small. There's a solution for that: generator comprehensions. 

I know that threading is a bit of a problem anyway here, but I would just like to comment on this specifically: by writing you are waiting on the thread to finish before starting the next iteration. This gets read of the threading all together, as there will only be two threads alive at a given time: 1 worker thread, and the main thread waiting on the worker to die. I'd suggest writing it as: 

Not going into the question as to whether or not this is a good idea, I can see very little wrong with the solution. One thing I would very much like to suggest is the following. Instead of 

(One advice I personally have: When somebody ever asks you to do something for 2 items, try to keep in mind that they will later on think of asking you to do it for 3 items instead, because 'what is just one more'. Keep that in mind when writing algorithms. Sometimes you'll be worse off, but often replacing 2 with ' with ' in your head gives you inspiration for better algorithms. Count "0", "1", "many".) 

I'm a bit confused by that, grammatically. is a more complex function (in my mind, at least) than , but it has no documentation. 

Using : You shouldn't be attaching new functions to primitive prototypes. What happens if in ES7, they add a function to the array prototype called ? And your code is sitting mixed in with production code. Then Bobby Maintainer tries to use s functionality, and finds it doesn't work the way he expected, because your version is overriding the language specifications' version. I would avoid using s on primitive types unless it's just practice, don't ever use them in production code. With the exception being polyfills, of course. 

: You're reusing a lot, consider using a function and processing the array operations there, and then simply calling it when necessary in your code. 

In the following code snippet, checking and are literally the same, exact thing. If the content isn't empty, then it's set. Also, you shouldn't be checking for every item in . You can take the request method check out the front, and return false in the case it doesn't meet your conditions. 

ps. ListPreference, CheckBoxPreference, PreferenceFragmentCompat and other misses classes are Android SDK stuff. 

Please, review my code about any aspects you think is relevant. One question about performance: these object creation whenever user change a property is a risk to performance? I like this way of doing things (creating objects) I think in java this is not so problematic anymore. In Android maybe. thanks in advance 

This is my code review. I don't read others much of others answers, it's likely they have point almost the same issues. 

So it will run both the programs asking by 3 numbers, that will be: 50.000.000, 60.000.000, 70.000.000. I put a time counter in your fillPrimes method to compare it with the time taken by the entire execution of Solution program. If you run this version of DivisorPrint you will get something like: 

I made this password generator I'll use in a simple Android App. I want that it generates a password using a truly random number source, but I don't have idea how to do it by now, so a let a seed parameter to generator class that will be created by that numbers source. I used the decorator pattern to compose the source from which the chars will be picked up. So if I want a password in which the chars will be picked up from a source of numbers and lower case letters I will decorate it with NumericDomainRange and LowercaseDomainRange, but there is no warranty that the password generated will be composed of number and letters. It must calculates the password entropy based on some algorithms, I have not implemented anything yet. Please, review its overall design. root package: 

Yeah, that's exactly what it's for! Mozilla Developer Network says that the element is for representing heading elements, specifically even quoting usage designed for a wrapped section's header. 

structure: Building on my point above, if you used a structure, you can extract most of this logic into separate parts, and use a generator to fetch the next page instead of a incrementing the page param. 

It may look really nice to indent everything like that, but it's just plain wrong. And also, there shouldn't be a space before the comma in an argument list. 

If you've got that many elements, it might time to use a library (like jQuery, Ember, Angular or React) to manage your data and make the HTML layouts for you. However for just a normal HTML file, line breaks aren't necessarily bad. Extra lines don't bloat the files, so you don't need to worry too much about the files being bloated. Like I said before, code readability is an intensely personal thing. While I (and any other reviewers) can take a look at code at tell you how readable it is, you're the one developing it, and it's your creation.