But I also get those earlier, other, explanatory error messages. Maybe you are getting so many of that latter that you can not see the former. You could try saving the output with to save the stderr output to a file. You could end up in this same situation if at least one other process deletes a file between when find prints its pathnames and when cpio opens it for reading. This is a race condition. The race is started by find (when it reads the directory, finding a particular pathname exists (eventually printing its pathname)) and contestants are cpio (wins when it successfully opens the pathname for reading) and some other process (wins when it deletes the pathname before cpio opens it). 

By default, the key binding table has all of C-v, Page Down (), and Space bound to as well as both M-v and Page Up () bound to . You can check your bindings with . If these bindings are missing you can reestablish them by hand (e.g. in your ): 

SI/SO VT100 Control Characters The garbled characters are likely due to the terminal getting a character (Shift In; ASCII 14; Control-N). is a VT100 control character that can cause the terminal to switch to an alternate character set. Many real terminals (e.g. an actual hardware device, or just the text-only console of an OS) and terminal programs honor this escape code. The direct way to switch back to the normal character set is to send a SO character (Shift Out; ASCII 15; Control-O) to the terminal. Recovery Because the character set is switched, you may have to type the recovery commands “blind” (without relying on seeing what you have typed). Usually the command will be useful. Often you can type E C H O Space Control-V Control-O Enter / Return to get the terminal to see a Control-O (the Control-V tells the input-side of the terminal that the next is to be passed literally, otherwise the input side will ‘eat’ the character before it gets the the shell and thus before it can be sent back to the output side of the terminal). If you can assume a reasonable shell with a builtin (or no shell builtin and a reasonable external command), you can use to send a Control-O to the terminal. 

There is usually no nice, clean, built-in way to hook into (or be notified of) a particular application's launch. But it is easy to combine launching iTunes and starting a playlist in an AppleScript program: 

(Or Prefix to respawn the current pane.) This may not do what you expect, though, since tmuxinator seems to always create “default” panes/windows and then “type in” your configured command (i.e. the command restarted by will be a plain shell, not the command configured for the pane in your tmuxinator configuration). You may want to run your command in a loop instead (in your tmuxinator configuration): 

There are actually multiple “runtime directories”. Use inside Vim to see the directories involved. Any of them should work, but probably the easiest place to use would be the per-user directory , which should be first in your Vim's . 

If you stopped at the end of the word (maybe via C-a M-f M-f), you could use M-DEL H i. You might do something like to find other interesting bindings. Consult the readline section of the bash man page (or the readline parts of the bash info pages) for details. 

With that output (name, device number, device name), you can maybe get a better idea of what is going on. Or, maybe you would like to see the major and minor numbers in addition of the raw device numbers (compare these to what you see in (e.g.) ): 

One must be very careful when passing strings through different environments. I run 10.4, so my ‘tfork’ script always opens a new window instead. It should be easy to adapt it to use a tab: 

In general, you do not need to match “eight or more”, since if you already know the line is problematic if it has eight (whether it has more or not). If you actually need to match the entire line (e.g. because it is part of a operation), then you will need to keep the last part (); if you are just using the regex to find the “eight or more” lines, then you can leave off the end. Also, I advise only trying to match one “side” of the pipe inside the group that that you repeat. This simplifies both thinking about how the regex matches lines, and how the regex engine itself executes (it eliminates a source of backtracking). 

(Though, I am not sure how this will affect actual screen instances, which also use a TERM that starts with .) When you are outside of tmux, the TERM environment variable is probably an -ish value, and Vim will probe for the xterm version by using the control sequence. 

The format variable can be used with conditional formatting to adjust bits of the various format-using status options. You could add in a blue background to the end of : 

If you are familiar with building Unix-oid tools, building fondu should be easy. For the Perl bit, you should be able to use the cpan tool that comes with most installations of Perl (or, if you are familiar with the layout and installation of Perl modules, just download the AppleSingleDouble.pm file and put it in an appropriate place). 

The output (the new session’s name) is then given to . If you do not have tmux 1.8 you might have to rework it a bit (e.g. make the function take a mandatory argument that names the new session so that you can pass it to both and ). * You would have two status bars; it is complicated to type tmux commands to the inner session; and it may do odd things if you switch the inner client to view the outer session (think: hall of mirrors). † Maybe the warning should be suppressed when using … 

Or, you might be able to find a comfortable non-zero value. If you really do have a value of around 2000 (i.e. 2s), then I would guess that it is being set in . If you want to disable repetition (or change the timeout) for all your sessions, then set the global value with this command: 

It is possible to create a new column view window that is rooted at the “list of volumes” through AppleScript. It can also copy the target and selection to the new window. 

You can define a mapping to reset the option just before executing (and restore it afterwards) like this (in your ): 

Use “Grouped Sessions” Instead of attaching to a session, you can create a “grouped session” by giving to : 

This may be easier to integrate into your setup if your command’s output has internal sections and you want to limit them individually (i.e. cut the title off at 10 characters and the artist off at 5); although it might be better to break something like that up into multiple uses of and give each one a limit as in the first example: . If your is the only thing in your , then you could just use instead: 

When you run in a normal terminal environment, your SSH client (the ssh process on your local machine) will request a psuedo-terminal (pty) from the server. GitHub has always denied pty allocation. Older versions (prior to 5.6) of OpenSSH’s ssh will “fall back” to no-pty mode if the server rejected its pty allocation request. Newer versions (5.6 through 5.8) of OpenSSH’s ssh abort if the server rejects its pty allocation request. The latest versions (5.9 and later) of OpenSSH’s ssh will take the former action (continue) if the pty allocation was done automatically, and the latter action (abort) if there was an explicit request for a pty ( given or equal to /). You can tell ssh (either old or new) to avoid requesting a pty allocation by using the option: 

Unbind ⌘F and Remap It You can “unbind” ⌘F (Command+F; written as in Vim) from the Edit > Find > Find… menu item with MacVim’s command and then map it with a normal command. 

I used to use swish-e, but that was about a decade ago. Development seems to have stalled since then (sometimes stalled means “stable”, not “dead”), but it might work for you. 

Note: This will override the default Prefix+w command (). as a “target-pane” is a way of referring to the next pane in the current window of the current session. See the manpage description of “target-pane”. 

Unfortunately, tmux only supports single 8-bit values in its key bindings. If you were using a (fixed length) 8-bit encoding (e.g. ISO 8859-1, ISO 8859-15, etc.), then the binding should have worked. If you are using UTF-8, however, your ù (U+00F9) is encoded as two bytes (C3 B9), and tmux rejects it as a unknown key name (if a key is longer than a single byte (after stripping its modifier prefixes), it is processed as the name of a special key e.g. , , , etc.). 

Most terminal emulators only generate special output for a restricted set keys when used in combination with the Control modifier key. The apostrophe key is one of the keys that does not generate any special output sequence (it ether does nothing or just outputs a regular apostrophe). See Wikipedia’s “ASCII control characters” and “How control characters map to keyboards”. You can check to see if your terminal emulator generates any output for Control-, by typing it into , or at a shell prompt (in most common shells) after typing a Control-V. If it does generate some special output (not just ), then you might be able to bind it in tmux if the control code/sequence is known to tmux. The list of keys names that tmux recognizes is in its manpage under the “Key Bindings” section. tmux will only recognize special keys if the terminfo entry for your TERM outside of tmux defines them (see for the “capability” names and for the ones your TERM defines); if needed, you can extend your system’s terminfo entry just for tmux with its configuration variable (or recompile your own custom entry with ). If it does not generate any special output then you would have to somehow reconfigure it to do so (if that is possible); you might have it generate the same code as , or the sequence for “F20” (if it is defined in your TERM’s entry when outside tmux). 

Sessions that are grouped always have the same windows (new (closed) windows are linked into (removed from) all the session in the group), but they each have their own session options, including the current and previous window values. If you and your friend each work in a session that is part of the the same group, then you can each work in different windows but still have easy access to the same set of windows, or even work in the same window (if that is appropriate). Example Create an initial session: 

If you have a ~/.MacOSX/environment.plist file, check it to see if it provides a default PATH value. If it is in XML format (plists can be in many formats), you can edit with any text editor. Check it with if you edit it by hand. Or, you can use commands like defaults or PlistBuddy to make controlled modifications to XML or binary format plist files. 

The most recent “shrinkable” match gives up bits of its match and tries the rest of the regex again. This happens one character at a time in this case (since will match any single character). This backtracking proceeds until the rest of the expression can match (or until it backtracks to the beginning—which is the only way it knows the line does not match the expression!). 

Incidentally, the bit does not represent the value of the option (which you can get with the statusline item, if you want it). It is mostly just a static string (there is some code to make it look like (also , , etc.), but it looks like you would have to manually enable it). 

You might look at SpiderOak (2GB for free). I have not used it, but it looks like it has sync features akin to, but more flexible than, Dropbox. But some FAQs indicate that it may not do local copying like CrashPlan or (recent releases of) Dropbox. 

The tricky bit is that they go to the start/end of the previous visual area, not the current one. So, you could do something like this: 

The robustness comes from the fact that the NUL byte that both extensions use to terminate pathnames is the only disallowed byte in just about all (Unix-oid) OSes. 

Major releases often contain incompatible changes. Feature releases introduce new features. Maintenance releases contain bugfixes. master is almost literally a merge of the latest maintenance release and the current accumulated features for the next feature release. The output of is based on the output of git describe on the commit that was used to build the binary (see GIT-VERSION-GEN). The output from git describe adds extra information to better “nail down” the specific version when you are based on a commit that is not explicitly tagged. 

You could use , to truncate the currently viewed file. But as others have noted, it may not work correctly (e.g. if the application writing to the file holds the file open instead of opening/writing/closing for each entry). You might also try , which will move the file out of the way then recreate it. Either way, I see some strange behavior from less when trying these. (R does not refresh from disk, G does not seek to and display the current EOF (usually used to “pull in” new lines without going into ‘tail mode’), hqG reads in new lines from the file, but appends the entire contents of the file to the end of the buffer instead of just adding the new lines to the end (file has lines 1, then 1/2, then 1/2/3, etc. over time, less might show 1/1/1/2/1/2/1/2/3/1/2/3/1/2/3/4/1/2/3/4/1/2/3/4/5 if I was doing “hqG” twice after every new line)). These same problems seem to happen with the “use v to truncate-by-editor” method, too. 

You can temporarily stop launchd from trying to start that program by entering the following command in a Terminal window: 

The problem arises because (without enabled) tmux and your external terminal emulator have a different idea of how many columns are used to display each multibyte character. tmux expects a multibyte character to take up multiple columns (one for each byte), but your external emulator is probably configured to recognize it as a single UTF-8 character and thus will render it in a single column. The problem is especially visible in a zsh prompt because zsh is careful to track where the cursor is so that is knows when the line will break and what it needs to do to properly redraw the prompt. Unfortunately, the mismatch between (non-) tmux and the (UTF-8 configured) external emulator causes tmux to report a cursor position that is several columns to the right of the expected position (one extra space for each extra byte in every multibyte character in the prompt). Enabling in tmux fixes the problem because both tmux and the external emulator will recognize the sequences for each multibyte UTF-8 codepoint as taking up a single column. Reconfiguring your external emulator to use a single-byte encoding would also fix the discrepancy, but at the cost of not being able to properly view UTF-8 encoded data (although such a view does basically show you what tmux is “thinking” when is off). 

Although it is optional, the target window specifier that tmux window commands accept (i.e. for their and options) can directly specify an window in any session. The syntax for a target window works like this: 

With the above configuration (in both tmux instances), you can type (e.g.) C-k C-j c to create a new window in the nested session. 

You might look at CrashPlan, the free version provides unlimited backup by using storage attached to the Internet-connected computers of "friends and family". You could run the software on your server to provide the storage space (your server is the friend/family) and then also run the software on your "client" machines. Note: I haven't used it, I've just been researching online backup stuff lately.