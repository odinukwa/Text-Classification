I noticed from looking at your code, that you only use the function from the module/library. Rather than importing the entire module, you can just do . In your block at the very end of your function, you have a after you raise an exception. Raising an exception will exit the program, so this can be removed entirely. You also mention in a comment by the block, that this will never happen. If it never happens, then why do you need it? It can be removed as well. I did find something odd about this function. Underneath the comment you have an expression that's evaluated, but you don't return the value of the expression. Preferably, this line should be changed to . Finally, using to find the new appropriate indices is really the only good option, right now. You can always do , but that's horridly unclear. Just stick with . 

By using the constructor to initialize values, it means that you don't have to initialize properties/fields like this: 

Disclaimer: I'm not a CMake user, so this review may be shorter, and mostly focused on style and readability. This questions needs some love though, so I'll do my best. 

This is not a desired behavior, so we should fix this. In order to ensure that the user enters the right input, we need to validate it using a / clause, like this: 

If you need to support pre-Python 2.5 for some reason, then you'd have to write some hacky code using and . You'd end up with something looking like this: 

Generic methods You can use generic methods for something like this. Rather than having to type out methods for each individual integer type, you can use a generic method for your methods, like this: 

You should have whitespace around comparison, mathematical, binary, assignment, and comma operators. Anywhere where your code should be indented should be indented by four spaces, or one tab with a width of of four spaces. You don't need parentheses around conditions in statements. For example, this: should become this: . Functions and variables should be in , classes should be in , and constant variables (unchanging values) should be in . Your naming is not so great. There are many not so great names, but here are a few that'd I'd change. 

In addition to that, the method is completely useless. I can just refactor 's setter to something like this: 

You should also also have two blank lines between functions, not one. You should also read PEP8, Python's official style guide. 

First off, you need space between operators. You need to have one space before an operator, and after it. For example, and equals comparison would look like this: , or a variable declaration: Secondly, you have a lot of extra, unneeded blank lines. These can be removed, as it makes code look inconsistent, and not so great. You're mixing to curly brace styles, choose one, or the other. Don't mix the two styles, as, again, it will look inconsistent. Finally, on style, you have a lot of extra spaces. Remove these. 

The above code is placed within my file (my PowerShell profile), which gives me the ability to use it straight from the PowerShell command line. Here's some example usage: 

As mentioned by @JeroenVannevel, there really isn't a good way to do this. The best you can do is something like the below. Essentially, I have one function, , which returns if an character is found in the email address. 

You also have other places where generator expressions could be used, like here, as a simple example: 

This pollutes your local namespace with everything in , and it can lead to some name conflicts, especially if you're using a library like . There's a good reason it's named and not . It's easier to prefix everything with rather than . 

Design This is not a very extensible design, again, I'd recommend creating a function that allows you to create custom games, like this: 

There's no need to worry about the arguments of the constructor having the same names as the fields, the in and the in will evaluate as the constructor arguments, rather than the fields. In short, the class, after a few other minor changes, the class will become this: 

There are also three commands that are used. , , and . Each command argument is double colon, , separated, and look something like the following: 

Style You're a little inconsistent about how you're placing your s. Sometimes, you place them like this: 

While this is a small chunk of code, if an exception occurs between the file opening, or closing (while the file is being read, for example), the resources used to open the file are not released. If you want to ensure that the resources are properly released, you need to use a context manager by writing out a statement. Your above code would become this: 

While there's not much that's inherently wrong with doing this, it's almost always better (and safer) to use a context manager to open files. This means that the above code, using a context manager, would become this: 

3.x Compatibility If you want to make this compatible with Python 3.x, you'd have to do a few things. First off, in Python 3.x, has been renamed to , so at the top of your file you might want to do something like this: 

That compiles to something sort of like this (This isn't how your code seems to compile, but I couldn't understand it, so just try and work with me): 

Finally, when getting user input, you don't need to convert it to a string using the function. You can just get it like this: . 

Whitespace. It looks nice, and is important. Use it. There are many areas here where you could insert some whitespace, and then the code will magically become much easier to read. Here are a few areas where whitespace is needed. 

Opening files While it's a small nitpick, it was bothering me a little. On these three lines, you're opening a file, reading it and then closing it: 

A Good alternative might be to do something like this, although pattern-matching the line to make sure it doesn't contain illegal characters might be better: 

There are a fair amount of things that could go wrong with this, so I'll just prattle off a few of the major ones: 

Finally, for those who are interested, the GitHub repository for CLIGL can be found here. For those who would like to see example usage, see here. 

Properly opening files The generally accepted method for opening files in Python is to use a contest manager, as seen below. If you use a context manager, the file is closed implicitly, and you can guarantee that the file is closed properly if the program unexpectedly exits: 

Why is the variable in the method prefixed with two leading underscores? The variable is local to the function, so there's no need to make it "private". Finally, add some docstrings to describe your functions/classes. Docstrings are special comments that you use to describe your functions. An example docstring looks something like this: 

This code is pretty well written, although there are a few things that really bug me a little. First off, inline comments, like the one you've positioned inside that loop, are eyesores to look at. Preferably, comments should stay on their own separate lines. Secondly, your naming could be improved. For example, what does the variable do? It's name doesn't give any hint as to what it does, nor do it's contained items, and . Variable names should be descriptive, and describe the purpose of a variable, all while not being too long, or too short. Finally, use braces around your statements. Have you ever heard of the "" bug? That's what happened in a bug with Apple SSL. The error, in question, looked something like this: 

That's about all I can think of for improvement. If there's anything that you want me to comment on, just tell me about it. I hope this helps! 

Comments should describe hard-to-understand parts of code in detail, but only if needed. If the code is clear enough to understand, then don't use a comment. 

Style Your docstring at the top of the function should be moved underneath the function signature, like this: 

First off, indent your class/namespaces. It makes things look a whole lot clearer. Even it's not necessary, you should still do it. Secondly, do you need all those s? I don't see you using , , , or . You can get rid of these. Finally, you shouldn't be trusting any user input. If you want user input to be converted to integers, I'd use , rather than just . 

I'm not really sure what you're asking here, but if you're trying to go for an Object-Oriented approach here, you should be doing it like this: 

Is there anything that can be improved? Are there any potential pitfalls or problems that can occur? 

While I can often understand the performance reasons behind using fixed-size arrays to store vertex, triangle and UV data, I've often found it annoying because it makes dynamically generating meshes somewhat difficult. In order to fix this, I've built a small helper class to make the process much easier. It currently only supports vertex, triangle and UV generation, but that's really all I need at the moment. 

Secondly, the two variables near the top of the file, , and , should be in one docstring, at the very top of the file, above the import statements. Using , or is not very portable, or cross-platform. At the moment, the most portable/cross-platform way to clear the screen would be this: . Add some docstrings to these functions. Preferably, these docstrings should also be fleshed out with useful information on what these functions do, and how they do it. Most of your naming is okay. You do have some odd names like , or . Preferably, variables with multiple words in their names, like these, should be named like this: , . In terms of how names are styled, functions and variables should be , and classes should be . If the variable is constant it should be . You don't need to include two parentheses after . By default, you can write a class declaration like this, , and by default, it will inherit from . Only use the parentheses if the class is inherited from another class, like this. . You mention in the variable, that the user shouldn't enter punctuation of any kind. This is sort of a hacky way to get user input, so I'd recommend using to remove punctuation. Here's an example that removes periods, commas, and apostrophes. 

To start off, I'd highly recommend that you check out Python's official style guide, PEP8. From just taking a quick glance at your code, I can see quite a few glaring issues regarding style. Here's a list of the major ones: 

You have a ton of code in your function, making it lengthy and hard to read. I'd also recommend using an object with string values as keys, like the below, rather than creating large chains of // statements. 

There is no need for the variable in this scenario. It's just extraneous code. You could write these two lines as one: 

There is no need for the inline comment, , it should be removed. On the note of comments as well, docstrings are generally written like this, with newlines: 

If you're interested about Cactus, you can visit the new repository, the /r/CactusEngine subreddit, or the official chat room. 

Variables/function arguments should be in , and constant variables should be in . Functions should be in as well. Classes should be in . 

This, literally does, nothing. The method essentially just returns the dictionary, and again, is useless. The only thing this class accomplishes is making the code harder to read, and harder to maintain. You also have a few minor PEP8 violations. In case you didn't know, PEP8 is Python's official style guide. 

That's about all I found that seems like it should be improved. If there's anything else that you want me to cover, just tell me and I'll see what I can do. I hope this helps! 

That's about all I can come up with. If there's anything else that you want me to cover, just mention it in the comments, and I'll see what I can do. 

The first value of each list is the diameter of the circles, and the rest are positions. The nice thing about this is that it's easily expandable, rather than having to add a new or statement each time you want to add a "side". In addition, thanks to the tips from @Jonah, I'd also recommend the following things: