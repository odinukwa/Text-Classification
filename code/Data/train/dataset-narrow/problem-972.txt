Update As usual, the solution was staring me in the face. I am confident that the values you extract to and are not character positions but offsets, that may be passed directly to . It was your comment "subtract 1 from end of exon because its 1-based index" that threw me So it is the gaps between the letters that are numbers from zero at the start of the string. Like this 

I have altered your program, following the guidelines above. I hope you agree that it's preferable this way 

so they are and , forming an intron . The calculation in your program, and in my code that produces the same result, gives , which is fine, but , which I don't understand. It is the last character of the intron and the first character of the exon Can this be right? I have put exactly the values above into your code and mine and get the same result 

I have a program that seems to work and produce the same results as your own code. However I have a problem in that the intron doesn't seem to be defined properly Suppose my sequence is the alphabet and the exons we have are defined by 

Discussion: first of all, please note that the above code is rather a proof of concept and not a full solution. Besides the missing effects (which you can add if you choose to extend this example ;) ), it can be improved in many ways (e.g. not putting game state and functions into the global namespace, but rather enclose them in an object). That said, let me point out the advantages of this solution: 

This will return . However, is misplaced here, because it should be at position , and it is, instead, at position . To be honest, I don't really know what would be the best solution here. I can imagine the following: 

Although lines (1) and (2) do look right on first sight, due to indentation, they are breaking the if-else statement. This kind of issue can be avoided by always adding braces. 

Out of scope The quality of the hash-functions used for testing is out of scope of this review. (I know there are much better ones, but for now I focused on the data-structure itself.) However, if you know a way to e.g. better organize them, and avoid repetition (but without making that global!), that would be very appreciated. The code 

Here's my solution The main reason yours is so slow is that it's reading the HG38 file line by line, which means it has to upper case each line and append it to the sequence up to 4 million times per sequence That's very slow because the repeated appending will mean that the string will frequently become too big for the space allocated to it, and it has to be copied to a larger space before it can be expanded. Copying such a huge string thousands of times takes a lot of processor work I have written it so that a whole chromosome is read at a cctime. Then all that has to be done is to remove the newlines and set it to upper case, just once I've also printed the each chromosome's name when it is encountered, to give some confirmation that the process is progressing. (You can stop this by removing the statement.) The time taken to test the introns at the end is minimal As I said, this code produces the results 492784 /499504 that you expect, but I'm still concerned about the end pair of bases. Please let me know if you have an explanation 

Alternative While the recursive approach is elegant and easily understandable, it might be less convenient for very long inputs. I suggest another solution, based on the idea, that if you want all permutations, then each character can either be part, or not be part of a permutation. This gives us 2^N possible permutations, where N is the length of the input. So, you can just generate this number (2^N), and then iterate from 0 to 2^N-1, and calculate the corresponding perm. for each number. So, if the number is represented as binary digits, then 1 means that the character at the corresponding position should be part of the permutation, 0 that it should not. (If you do not need the empty perm., just start the iteration from 1, instead of 0.) With your example, 'AA2', this would work as follows: N=3, so iterate from 0 to 7 (=2^3 - 1). 0 corresponds to the empty set. 1 = 001b, so '2' is part of the permutation. 2 = 010b, so only (the second) 'A' is part of the permutation. 3 = 011b, so the perm. is A2, etc. Remarks: 

In summary: Your code will likely not do what you expect it to do in many cases. You should generate more diverse test cases. (try instead of in your example file and report what happens). Several parts of the code are redundant (all the map-iterating loops) and at the same time they might be very time costly for large input files (since the map might grow rapidly). 

Since you do many index lookups on these arrays turn them into lists. Numpy is not good at single index lookups. 

Instead of assigning the array elements to , , etc., use them directly. Since later comparisons are not executed if earlier one already return this might save array lookups: 

Your algorithm is of time complexity in . If your current code needs for , then one could estimate the time for to be roughly . Even an improvement of the most inner block's execution time by a factor of would yield an execution time of about . I guess this is not good enough. So you should better try to improve the algorithm itself. However I do not really understand the problem the function is trying to solve and I couldn't come up with a better solution on the spot. Also I haven't looked at numpy approaches, because you seem to have no vectorizable calculations in there. Nonetheless I tried to make improvements to the code as is. I came up with the following: 

For the record, I checked in this code into my github repository, and probably I'll improve it based on the answers from here. Trie.java 

I think the logic for getting the minimal distance between the points would work even without the explicit check against MAX_INT: 

Leave it as it is: all output is shown, some of it might be on the wrong place. Overwrite the the end of the first string with the second one (i.e. ). Overwrite the beginning of the second string with the first one (in this case: ). Throw an exception. 

For the second part, I suggest factoring out the mapping logic from inputting the date (or at least, the date should also be read in the function itself -- but receiving it as a parameter, and then reading it again is very messy IMHO). So this would look something like the following: 

Is this a correct implementation of the data-structure, or do you see any flaws? Is there a way to make the implementation more optimal? (E.g. is there an elegant way in to jump out of the if we encounter a bit not equal to ?) Related to the above: is there a way to make this code more idiomatic? (I.e., conforming to Clojure best practices.) Can you think of any missing tests? Or some other edge-cases which are not covered?