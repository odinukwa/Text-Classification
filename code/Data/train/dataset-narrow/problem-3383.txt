I managed to idetify Bluetooth speaker. I have "paired" it, as far as Bluetooth is concerned it is connected , to the Pi 3B and was directed to "audio menu" to actaully select the speaker as audio output. Found under "preferences" item "audio device setting" but there is only one audio resource available , hence I cannot select the Bluetooth speaker box. Running current, and upgraded OS. Please answer the following questions: 

My boot goes thru color screen, flash screen ... and ends with 4 raspberries in upper left corner of the monitor and bunch of text with last line saying something about "kernel panic..." And that is where the boot stops. I have NO I/O devices connected and tried two SD with same result. No unusual power indicators - red stays on , green flashes and it quits. I am convinced the RPi is dead. 

Where ( header file name ? / config ?) ) do I assign I/O pin as "general I/O "? I can see on Pi 3B schematic GPIOx and in parenthesis specific function , for example I2W. I just need few outputs, but I like to keep them in specific area of the P8 as common bus between several pieces of hardware. I do not need dedicated functions as shown on schematic. 

BCM2835 datasheet clearly documents register structure and access to the device. I have not found similar document published by Bradcom for BCM2837 , but would assume it allows similar manipulations of internal registers. Not being familiar with actual implementation of "canned" GPIO functions - YES there are numerous function each and every GPIO port can have, not limited to "canned" configuration, can someone point me in the direction of Raspberry load process and actual code implementation of these function(s) ? Since some on this forum have hard time interpreting my QUESTIONS, here is a different verbage for same - where is the "Open source" code for implementing such functions, and I not need "in github" (duh) as an answer. I like to have, if possible to save me time looking, the real source file where such function is executed. But if it is not of common knowledge of some designer here, I'll just keep looking. Bonus question - why do my post DO NOT format the way I wrote them? 

You should use hight quality SD cards so it will not worn out too fast. But if you are still worried, you could add a USB disk and only use the USB card to boot the machine and use the disk for all other things. 

or what tells you to do. You could also open another terminal window on your machine and there write this command to see what you get when starting and accessing the server. 

Try to reboot with the machines. Doing this from top of my head, so look at this like a out line of the procedure. 

Use the external USB disk as root partitions and other and only use SD card as a boot device, but store all data on USB disk. Use the external USB disk as data disk, but keep the root partition on SD card. So use USB disk with partitions for , (created for servers storage) and others. 

The USB standard are host based. That means that one device has to controll all communication with the connected devices. Clients can be a simple device or a hub. The hub is a host proxy for the clients connected to the hub, and communicates with the host (or hub) it's connected to. As the original design of USB looks, you can't connect two hosts together (your PC and the RPi). There are extentions though, USB On-The-Go, which allow a USB connection to see if it is connected to a host or a client, and adjust it's role depending on that. To this to work, you have to have support in the hardware. I don't belive the RPi is designed to do that. For more information, look att $URL$ or even $URL$ In short, I don't belive that it can be done. 

Along with the append mode for file I/O (as answered by others), you can also try using screen command. This how, you are able to put any task into separate "screen" and don't need to worry about connectivity problems when doing stuff remotely. I would also recommend using some other logging method, like SQL database (e.g. MySQL with Python), if there is a lot of logging going on. SQL data can easily get exported (e.g. to CSV file) and also any big data management is faster, like (conditional) searching, updating and deleting the data. 

1. solution: USB style Is your attention only to extend program memory? Then, as @Gerben already said, buy/use USB SD-card reader. But than you don't need RAID 0 configuration. It is meant to be for improving performance while using data striping, but major drawback is fault tolerance: if one element in array dies, whole array is corrupted. 2. solution: network style One solution could be to search for any (free) hosting, like ftp, http, etc. Then just copy user data to web storage. Or use your own server, like wamp. You can use ethernet or USB (e.g. USB WiFi dongle, USB Bluetooth, etc.). 3. solution: GPIO style There are also some GPIO pins already on the board with various protocols: UART TTL, SPI, IIC. Those can be directly connected to other external devices via TTL pins. So, the only limitation is your imagination ;) 

If your intention is to make your own power supply, take one of the step-down switching regulators, like LT1076-5 or LM2593, which can handle 2A at 5.0V. Those are around 5-7EUR for Minimum Order Quantity = 1 (plus a few EURos for essential components). As already mentioned, linear regulators have big thermal issues, specially when large voltage drop (input to output voltage difference) is present. 

If you add yourself to the group you can look into logs without the need of sudo to the command. If you need to activate modules, you install the right package and then use command. For more information, see , and . Also look in Debian Wiki and The Debian Administrator's Handbook. 

As Raspbian (I assume you use that) is a Debian distribution you should copy to and change the contents of that file to suit your needs. Things you would like to change are which IP-addresses/interfaces to use (Like in ), domain-name of the server (like and ) and where the files are stored (like ) the locations of the access and error logs ( and to and ) etc. I usually put them under the directory as the directory is supposed to be server data files. But anywhere you like will do, as long as you use a system. Dont forget to set up the file rights and user/group for wherever you choose. The when you have it set up the way you like, you need to enable the server, and that is done with the command : 

I would say that it should work. Use the Powerboost 1000 battery charger to power the RPi and all things connected to the RPi. Notice that it just delivers 1000 mA and that all connected devices must not use more than 5 W. The screen could be powered from the RPi 5 Voltage pin out (if that is within the specs for RPi), from the RPi 3.3 Voltage pin out (also see the RPi specs) or directly from the Powerboost 1000 Charger in parallel with the RPi. The GSM SIM Module could be wired to a RPi and getting its power from the RPi:s 3.3 Voltage output, as per this link from Ada Fruit. No, I have not tried this, but see no reasons why it shouldn't work, except that the marginals could be a bit slim with 1.0 A max output from the Powerbooster. 

I am troubleshooting possible power issue with my externally powered D-link USB hub. If I remove the power and insert 2 or three flash drives they get detected by lsusb / lusub -t after power down / reboot. However, after I plug it the power and reboot the Raspberry I do not see same output using the lsusb lsusb -t . I am using vendor supplied power source ( 5V 3A) but suspect it is not working under load. I can only see changes after Raspberry Pi reboot / repower. Removing / inserting USB flash drive does not change anything so it appears that the USB bus power power change is not being detected. Question - is there a command I can use to reset the Raspberry USB hub? No, I do not have another %V supply I could USB try at the moment. 

After removing Eclipse from RPi I did fresh install. Command apt-get install eclipse-cdt "cdt" option to enable C/C++ development IDE. Eclipse 3.8 starts without any C++ sample projects, there are no C++ options on the initial screen. Eclipse 3.8 installs as Java IDE, not as C/C++ IDE. Any attempts to do "Available updates" from within Eclipse 3.8 fails because of missing CDT dependencies. 

This site advertises access to more resources $URL$ I like to try that, but cannot find nowhere how to restore Raspbian BACK to to the original . 

My task is to use my PC for software development and use Raspberry Pi as a controller of hardware. I have the network working. Now I need to implement samba. Have a stupid , basic , question - who is in charge of this networking? AKA who is samba server and who is client ? PC or Pi ? In my terminology - PC Eclipse work space should reside in Raspberry Pi, probably on shared external USB drive or Desktop - whichever is allowed by Linux security or is simpler and can be executed in Pi. 

Please, tell us your exact SD card model. Anyway, if you ask me, I would recommend using high-speed SD cards, i.e. class 10 would be ok, considering you barely save any money if you use low-speed card. You can check performance of different cards here: $URL$ Btw, how many I/O operations do you make to you card? 2 weeks seems a little bit to low for reasonable temperature logging (once every second?) regarding flash memory corruption. Do you have any other "suspicious" conditions, e.g. high temperature in the room, RF, EMI noise, to high humidity etc.? Also, whatever you do, always try to gracefully logout from console before plugging the power out of your raspberry; this how, you won't get any in-the-middle-of-operation interruptions. You can also check your dmesg. 

I see at least 2 points to consider. 1. Efficiency of power regulator If you are using battteries, you are probably worrying about power consumption of your Rpi. Rpi uses unefficient linear regulator (typical power efficiency of those are around 30-50%. But I am not sure for Rpi lin. regulator!). Linear regulator dissipates energy as heat to obtain desired voltage rail, i.e. 3.3V. The general rule regarding power line translation, e.g. USB@5V -> RPI@3.3V, is: the larger the input voltage, the larger is the dissipation on regulator for same working conditions. On the other hand, swithing regulator provides higher efficiency, typ. 80-85%, even up to 97%(LM2651). And it is more suitable (but also more expensive!), when you have need for larger voltage drop, e.g. battery pack's 12V or 24V to 5V. You can find lots of tutorials to replace the original Rpi regulator on the Internet. 2. Battery type You can make your own battery array using LiPo batteries to suite your project and then you can adjust dimensions, capacity, min. voltage and current specs, etc. You can purchase different types of LiPoly on frequently used e-markets, like eBay or similar. In addition to capacity, you should be careful about max. and standard dicharge current(needed if using high-power devices along Raspberry like UMTS modems), cycle life(typically 200-1000 for cheap LiPoly) and safety and protection specs(discarge, short circuit, overvoltage, undervoltage, etc.). I used LiPoly batteries in many projects due to good availability and performance vs. price ratio. You can read more about LiPoly on RC forums.