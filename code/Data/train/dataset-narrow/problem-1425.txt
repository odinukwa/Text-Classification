This brings up the following idea: if you have a list of your answers, you only need the list of the other words, right? 

This will be a list of "don't"s, since your code is very readable, but contains some code smells. It doesn't actually solve the puzzle, but more on that later. is not a hashtable I just want to get something out of the way first: isn't a hash table. A hash table needs a function \$\text{hash}: A \to I\$, where \$I\$ is some finite, bounded and integral set with \$|A|\gg|I|\$. An efficient hash map/table uses buckets and provides a best case \$\mathcal O(1)\$ access if implemented correctly. only provides \$\mathcal O(\log k)\$ access, since it's implemented as a tree. That's why you need the constraint on almost all functions in . However, it's still a nice data structure for this problem. Python's dictionaries on the other hand are based on hashable functions. Don't give names to things you won't use 

What's missing is . Now, we know that there is , which is almost correct, but we would end up with instead of . But there's also .* Therefore, we can write 

That function does not exist, though. A perfect building block for would have the type signature , but that's missing from the standard library. Others packages provide functions with that signature, but none does provide our needed functionality. But we can write that function ourself: 

Sheriff voice: Halt! You are breaking the laws! Your monad breaks the right- and left-identity law of : 

which is essentially what you've tried, at least as far as I know. The problem is none So let's get back to the drawing board. We have our register value , and we would like to extract certain bits, let's say the first five bits after an offset of 3 (3-7; inclusive), which in our case encode the number of active lines in a system (0-15). We have several possible solutions now, all with their advantages and disadvantages. For example, you could write 

We begin with the "loop". is . This has not necessarily the same effect, since is not the same as when using floating point arithmetic, but it's fine for our cause. It also works like the Python code, which was your original intention. We now have 

Prefer pattern matching over / Your and both use and . This can lead to empty list errors if you accidentally swap the lines: 

That's easy to read, and more likely to be correct. Either way, I assume you know that, so let's get started with the actual review. Try not to shadow existing names We return to : 

's scope is too large, by the way. It's just necessary inside the loop, so we can limit its life time, but we need to in this case: 

Type signatures Good job on providing all type signatures. Unfortunately, you forgot one: . Always include type signatures on top-level functions. Remove unused imports You use neither , nor . Prefer character comparison instead of In , you compare characters by their values. That's not easy on the eye. It's a lot easier to read if you just compare the letter with characters: 

Use appropriate types But is still not optimal. We never return in our list. Therefore, there is no reason to use as a result type: 

While we're at it, add some documentation. and are only some lines away from each other, but that might change later. The after is Doxygen specific, you can ignore it if you don't use Doxygen. Declarations and initializations You use C99 and therefore can declare variables as late as you want. Whenever you declare a variable but set it a lot later, try to rewrite it as initialization at the right point. For example, isn't used until . We should keep it's scope limited. That way we cannot accidentally reuse variables. If we follow this suggestion then , and get limited in their scope. We will have a look at that later, though. And since we already renamed to , we could also rename to . You can of course choose other names, but again: there is no need to abbreviate. Disk space isn't expensive anymore, so choose names that you still understand after several months or years when someone calls you in the middle of the night. Input and usage may not return . That can either happen if you're at the end of the file or if an error happens. You should check the with or if that happens. We stay at . While it's unlikely that you change 's type, it's usually good practice to use or . If you ever change to , you don't have to remember to change to . State machines and repetition Your loop is essentially a state machine. The state machine itself looks fine. However, there is a lot of repetition. We have 

From a beginners perspective, your code is fine, by the way. Some will tell you to use instead of parentheses in your lines, but that's a personal preference. The only two real problems where the suboptimal , and that you don't actually check user input. Bonus: Short alternative Well, the data type and so on is an overkill. We can check the initial decision a lot easier if we simply don't convert the result of into a number (or another type): 

That's not necessary by the way, you could have defined a function inside of , check whether the "local" key is and then start over: 

Seems familiar, doesn't it? "repeat-an-action-n-times". This time, it's . Since we don't want to throw the result away, we use (note the missing ): 

Overall, good work. It's a solid first number guessing game. The good You're using type annotations. That's great. The type inference actually needs only two annotations (one of , or , and ). The bad However, your program fails if the user does not enter a number: 

You could get rid of the "hack" with and , but that's left as an exercise. If you really want to use , remove the . It just introduces an additional error source: 

However you wouldn't export all your helper functions either way, so lets keep the variant. By the way, I've used since my keyboard is slightly broken, but it's the same as . , and other standard library functions Sometimes re-inventing the wheel is fun, but usually we want to try to get the most out of our standard library functions. 

I'm not kidding. That's the whole logic behind your , written in a double-ended queue. Note that this is still not optimal, since you will usually only change a single element. I guess that a with an additional index will be more cache friendly, but that's up to benchmarking. Either way, now that you have a container, you can use all algorithms, iterators and other nice things. Be aware of global state I get it. It's just Snake. So there's no harm in using global variables, right? Wrong. Here's a little experiment: let's say you want to save and load all necessary variables for your game, so that a player can save it to disk, and continue later. Can you identify all those variables without scrolling in your code? Is it likely that you forget one of those variables? Remember, make your functions easy to use, but hard to use wrong. For your game, I recommend you to create a small class that handles all this data for you: 

in my own old Snake game, but I'm not sure whether that's best practices, to be honest. My old Snake game used a single-linked list, too, by the way. Overall Your code mostly suffers by missing consistency and global variables, but apart from that, it's just the length of the individual functions that tarnish the overall experience. But that's just nitpicking. Keep in mind that you've just completet your very own Snake game. Well done. But keep on pushing and eating those fruits. Good luck! 

Your code is very hard to read since there is so much empty space. Even if we don't remove all of them, the following variant is a lot easier to read: 

There are more tests one can come up with, but those are left as an exercise. User friendly interface You use quite a lot. However, that leaves a user with unhelpful error messages: 

Use better names and do not use in headers The name is rather arbitrary. or is a lot better. That, by the way, is a perfect example why you shouldn't use when you write a header. There's already , so a would conflict with . Since you're writing a template class all your code will reside in a header at some point, so is out of the question either way. Use a smarter data store Use or instead of raw pointers for the memory. Or re-use , unless you want to practice writing a completely by hand. Use instead of Instead of return or a custom enum in . If I want to store elements in a circular buffer, I need to know whether worked. I cannot check stdout for error messages. Sizes are positive Use for sizes, not . Check all return paths Return (C++11 or higher) or in if the queue is empty. However, a pointer at that point is dangerous: the user must make a copy at some point, or they might end up with another object. Use if you have C++17 at hand instead, or 

Keep in mind that that function won't work with if they are a array. To put things together So, was your algorithm correct? For positive numbers, the answer is yes. But as soon as the user is allowed to input negative numbers, the answer was "no". However, the greatest weak point of your program is that it is a single large function. You don't need to split it into too small functions, but the actual counting algorithm kind of gets lost in the noise of the rest. So for a future exercise, try to write 

So most of the time is used in . It's allocating most of the data. However, that's a little bit of a red herring, since is inlined at this point, and poor is merely allocating the list that will be generated lazily. Getting stricter However, we're not strict enough. In we create a large chunk of intermediate data: 

Therefore, you're not calculating the "usual" fourth of a circle, but instead a circle with a fourth of the original size (\$\pi(\frac{1}{2})^2 = \frac{\pi}{4}\$)). Luckily, it doesn't matter for the convergence. A real test that checks whether a point is in the unit circle is tremendously easier: 

Either way, back to the code. Several functions are partial. Usually, you want your exported functions to be total, e.g. they never return (an infinite loop, an error, ,...). So instead of the above, we could write 

Getting rid of Now to your block. Don't. Use. . You want to repeat the block until you didn't get . We can do that with a simple : 

We therefore just check which one is the first list in that can be prefixed by . If we the indexes with the we're able to write as a list comprehension: 

However, we're sorting. Therefore calling the comparison function a predicate is a misnomer. A predicate is a function , whereas is a comparison. But doesn't convey its meaning by its type. Do we return if the first shall come first in the sorted arrangement? Or do we return ? Will sort ascending or descending? Those questions are easier to answer if we use instead. This signature follows 's, so we have a pretty good feeling what means, namely that holds true. If we keep that in mind, we can write the following variants: 

Your code doesn't have that error as far as I can see, but you can keep it safe by using more often: 

Easy-to-use function at global namespace, and function that can possibly get used in a wrong way hidden away in . Which brings us to your new : 

Instead of , we use to construct a default value of the given type. Now your works with other types than integral or floating point ones. Hide implementation details Your is an implementation detail of . It shouldn't be exposed to the user. Also, it can be simplified: 

We end up with five calls of the base case, which is what you would expect. But if we count the in-between calls, we get calls for , calls for , calls for . The number of calls increases by a factor of \$1.618\$. This is called an exponential time algorithm, because its runtime has the asymptotic behaviour of \$\mathcal O (1.618^{n})\$. The recursive variant looks great on paper, and it's how Fibonacci numbers are defined after all, but the run-time is ungodly. One can speed the recursive variant up if we would remember the values; if we calculate , we can remember the result of that we need in for our later use in . That process is called memoization, but it's an overkill and not easy to implement. Instead, write in an iterative fashion: 

So when you use , other Haskellers will try to figure out what monad is currently getting used. However, you don't use a monad at all: 

You destructor is fine too, although you don't need the . Also, you don't want to print text in a destructor usually, except for debugging. Note that I'm using the new described above here: 

Point-free programming isn't always best practices. It's clever, but you really don't want to fix something like that in the middle of the night. Compare your code to 

Now the user doesn't know that there is any kind of node. After all, your public interface of never exposed those nodes in the first way. Your constructor is fine: 

That function was hidden in by the way. Exercise: How would you have to change to almost get ? Why? Now is just a combination of our previous, rather generic functions: 

You could add a proper error message, but that's left as an exercise. Note that if we have an at that point, we know that it's also a valid one. That's a big win compared to the previous situation where we had to check whether the was valid in every function. 

Using type annotations in or clauses can be misleading. The in 's type is not the same as the one in . Here's an example that shows that both s differ: 

I had a quick look at CIS194, and think that you cannot be expected to know the tools that make it a lot shorter yet. One thing that comes to mind is that you can make most of your functions general. None of them need to be for and , you could use them on any , if you didn't use throughout your code: 

Your program executes a total of 49,487,884,719 instructions. Only 16,380,206,099 of those originate from your , the rest originates from other functions. We only have (semi-)direct control over 30% of the used instructions. That's bad. Bottlenecks Unfortunately inlines , and all functions. Just to make sure that doesn't take a large part of the program let's remove for a second and check again: 

There are several things going on here that can go wrong. For one, you forgot to set . For another, you use and , which are both not necessary and can lead to memory leaks if you accidentally use : 

Your code uses names from your imports. is a function defined in , so it makes your instance slightly hard to read. You use only once, so it makes sense to inline it. 

In , you can simply copy your s. Don't use an underscore on global scope names An underscore at the start of an identifier at global scope is reserved and yields undefined behaviour. Also, is considered bad practice. Prefer range-based -loops over Your loop is not really easy too the eye: 

Our line got a little bit shorter. Great. Now let us have a look at your accumulator. Avoid repeated Your results looks like this: 

Use pattern matching In your function, you've checked 's length. However, that is not necessary and is very expensive. If you want to check whether a list is empty either use or pattern matching. With pattern matching, we end up with 

We went from 16.14ms to 14.77ms (0.89 of original time), or if we extrapolate this to your 110s to 98s, which is closer to Mathematica's time. 

Also, you have a nice little function to check whether a list is empty. Use it. And is somewhat misleading. You don't have a temporary head, you have a temporary last element or tail. But since we focus on only one node at a time, let's call it : 

always returns , and always changes a into a . Furthermore, is a nop, so it's not clear why it's there. Next, you usually use instead of in names in Haskell and hide the functionality in local bindings if you don't want to reuse functions, e.g.