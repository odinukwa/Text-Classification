Because rectangles with the same X position weren't matched before, won't contain , so if it has a length of 1, that 1 element will be a different rectangle, but only the original rectangle will get added as a group. In the inner loop, the body of the last only adds the initial rectangle, but doesn't do anything about the previously added s, so it's possible for the loop to add a bunch of but only add the initial rectangle. If you get a list of the rectangles ordered by their X position right away and loop through that instead of the original list, you can take some shortcuts in the body of the loop. Edit 2: You should add more descriptive names. I don't know what , , the nl in , etc. stand for. Short names are okay for lambda expressions and loop variables, but even then you should stick to , , , , or a letter that relates to the object. I think it would make more sense to use for a rectangle than . 

The only thing that changes for each statement is the index is incremented, so we can replace all of the statements with a loop: 

Unnecessary checks In convert, you check if both group 1 & 2 have been matched. You only really need to check if one of the values has matched in order to perform your branching logic, so one of the matches could be removed. Alternatively, for consistency you could check to ensure that 3 & 4 have matched before using them in the clause. 

On the whole your code seems pretty concise and clean. I've just got a couple of side points. Scope creep This is a real problem in production code, where developers implement stuff that isn't really needed. Your specification you've posted says 'take an exact string and an exact filename'. You've allowed a regular expression to be passed. The original requirements could have been met by just using which would have made the code quite a bit smaller. You've used extra time and added extra complexity, is there a real benefit? The scope creep also means that I can't pass the basic string "\n" into your parser and have it find it as the '\n' is interpretted by the regex parser. So, with grep I can do: 

Parameter Validation It may seem trivial for such a small class, but depending on the use case you should consider if you need to add validation to your constructor. Is it really valid to construct a with a or empty string for example? As has been said by @Rick Davin, do you really want/need the setter for and to be public, does it make sense for a object to change its name? If it does make sense, then again, you should consider if rather than using the auto property you should be performing validation in your methods. 

You can use the code from the horizontal method and modify the property calls to use the boolean. For example, you would replace with and with . It can then be used in your previous methods: 

You only need one class, and then you can create four instances of it. Your "Spawn" methods can be extracted into a single method, with parameters to handle the differences. For example, because not the same for each obstacle, you can have that be a parameter or a variable in the class. 

Why does have three parameters but only use one of them? should be declared inside the loop because it's not used outside of it. You can assign it on the same line that it's declared. 

If you wish to keep the speed of your original solution and increase readability, there are many improvements you can make: 

An alternative solution is to create a function to get take an item and get that item's sorting order and then use that in an . This method takes a collection of the tests for the front and a collection of the tests for the back and returns such a function. 

The thing that sticks out to me the most is there is a lot of similar or duplicate code. Let's look at the code for assigning the reactionTime: 

However, if I was going to do it, then for consistency I'd consider adding additional defines for the other two elements of the file (replace with something like): 

You check the random number against the likelihood of a potion being dropped, then afterwards, only if the item has been dropped you adjust the likelihood based on who is being fought. It feels like the likelihood should be calculated before the chance of it having dropped is checked. Again, if the drop likelihood was an attribute of a Mob/Create class it could be calculated during construction of the class. Let's go shopping Items in the shop have attributes (name, cost, impact the item has on various attributes). If they were attributes on an class it would make it easier to simplify your functionality. This would make bugs less likely and easier to fix. As it stands for example, you're adjusting the players after an item is purchased, however there is no check to make sure that the player has sufficient funds before going ahead with the purchase. Bracing Whilst the language supports statements without braces, it can lead to bugs being introduced, particularly during maintenance / feature enhancement. Consider this section of code: 

As D. Jurcau mentioned, you can move that first block of code outside of the if and else and only write it once, and you can handle the min or max checks with and . To combine the second block together you can write a Clamp method that makes sure a value is between two other values, like this: 

Variable names should be lowerCamelCase, so should be . Method names should be UpperCamelCase, so should be . 

Since the loops are similar, you could extract one into a method and then replace them with two method calls. I'm going to replace the loops using LINQ. This requires 

LINQ's method syntax (which uses lambda expressions) is not that good for this problem because the problem has nested loops, and it would be nice to store intermediate values. LINQ's query syntax is great for both these things. First we create a helper method for calculating the product of a collection of integers: 

It looks good! I only have some minor suggestions. You might want to not have the LINQ expression all on one line. Right now I have to scroll to see it all. An alternative is to use to create a range of indexes: 

Naming As an aside, if you haven't already you might want to read some of the C# naming conventions. Although they generally only apply properties/methods, it's fairly unusual to see even private methods that don't use Pascal casing for their names. 

Typo in method name? looks like it should be called ? insert_at_middle The method name doesn't seem to match what it actually does. It looks more like it's . It also looks like it has a memory leak, what happens if you attempt to insert after a value that isn't currently in the list? var is not a good name for a variable, it is totally nondescript. It is even worse when it is declared at a global/file scope where it's declaration isn't even visible. You appear to be using a global variable in your insert methods, however have a local in your method. This is confusing. Variable should be named after what they represent from a logical perspective. You should also try to avoid using the same name for variables in nested scopes. main Your main looks mostly ok as a test harness, however it's rather inefficient. Since your list doesn't maintain a tail pointer, inserting at the end is much slower than inserting at the beginning. Similarly, inserting in the middle is relatively slow. It would be more efficient to insert everything from the end to the front, rather than from the front to the end. I'd also personally store the arrays to be inserted in the order that I wanted them to be in the list (not backwards), then iterate through them in reverse order. I know this has the same effect, but when I look at the code I would then be able to see the list rather than having to mentally flip the arrays. 

Method names should be UpperCamelCase. In C#, the standard way to allow public access to variables is using properties. Your class would look like this: 

A method would be useful and more efficient here. You can implement your own or find it in a library. I believe all the Project Euler problems have a solution that is a lot faster and more memory efficient than brute force. So you can try to figure that out for this problem next. For the later Project Euler problems, brute force is not an option. 

Calculating and can also be done using loops. There are LINQ methods to make this even easier. This requires . 

The first thing you can do is assign all the properties for a thing in one line using an object initializer. The following: 

There are magic numbers everywhere. If you decide to change the size of your board, you are going to have to change a lot of numbers. Normally you can just declare them as constants privately in a class, but because they are used by multiple classes I recommend extracting the magic numbers into a class. You shouldn't have public fields. The following: 

Have a consistent parameter naming convention. has an underscore, but the other parameter names don't. I prefer to only use underscores for variables declared within classes but not within methods. should be lowerCamelCase. That is, . If will always be zero and will always be array length - 1, declare them in the method body. Don't make the method caller do unnecessary work. Use descriptive variable names instead of single letters. 

On the face of it, what you're suggesting seems like it should work (although it may be implementation dependant since it depends on the OS socket API). It also depends on what you mean by 'stripped down'. Obviously, if you're doing something with the received packets that might throw an error you'll need to handle that as well. Your catch would be better written as: 

This would make it easier to handle errors (by throwing?) if you make it out of the for loop without finding a duplicate. At the moment, you'll return which could be misleading, since you're using s, not s in your array and -1 is a valid answer. 

I honestly have no idea from your code what it is that it's supposed to do. I've run it several times and am still no better off. Naming Naming is an important aspect of coding. It makes your code much more approachable / self documenting. Almost none of your names give me any kind of hint as to what they represent or do. They may mean something to you, but they don't to me. Put them together and you get this line . Give your variables meaningful names. Your method names are similarly abstract '', check what? '' which seems to replace '*' with '#' for some reason. Give your user a chance You may write the best program in the world, but if you can't convince people to use it then it has almost no value. Your program needs some information from the user, however they aren't told what it is. You simply start scanning characters from stdin. Maybe this is ok because stdin is always redirected from a file, but if not tell your users what you're expecting. Ask them for input, then try to get it, don't just assume they're going to know what's expected of them. Bounds Checking Some of your bounds checking looks off to me. You create a then do this: 

You can get rid of a lot of repetition in by storing things in arrays and accessing them by the . You can set up your arrays like so: 

Alternatively, you could have functions as parameters for selecting the properties, like using a lambda expression in . Edit: as for the first method itself: In the following line of code: 

it won't get rectangles that are at the exact same X position. But that won't matter if it's guaranteed that none of the rectangles overlap. Then there's this code right after: 

If you can only change a bool once, and the entire purpose of a loop is to set the bool, then you should just exit the loop after the bool gets changed. There's no point in looping more than you need to, and you also don't have to worry about the bool getting switched back. So you can write your example like this: 

The braces should all be indented by four more spaces, and should not be indented more than the above brace. isn't a very descriptive name. I'd go with something like . Most of your loops can be replaced with LINQ, which is more concise, safer, and easier to read, in my opinion. For example: 

Which honestly at first glance made me ask the question 'have they done something funky with exception filters'. Exceptions You don't actually do anything with any of the exceptions that you catch. If you don't need to access the variable, then you can simply catch the exception: 

Unless you're stepping through the code, the local variables just add to the noise. You have a method . In my head, Get methods don't change member variables. The first thing the method does is call which updates the . This feels wrong to me, but could just be a style thing... 

As you have no doubt noticed, given your follow up post, whilst your current lock is thread safe, it isn't reentrant. If you perform a double call to from the same thread, the second call will fail to enter the gate (because it's already locked) and become deadlocked against itself. 

A couple of things that jump out... Constructors I'm not a huge fan of passing Node's into linked lists. Besides exposing the list implementation it opens you up to confusion. Consider these two methods: 

I think you've missed the point The code that you've presented isn't what I would have been expecting given the assignment that you've described (I'm assuming there's probably actually more detail to the assignment than you've included). Stepping back from the code as written, you've been asked to write a server that uses multiple threads to service a client. The threads should be managed by a semaphore. Threading has a cost, so based on that description I'd be asking why do I need multiple threads to handle a single client. The reason that springs to mind is that the client can supply multiple requests to the server, which should be able to handle multiple requests concurrently. For this to be worthwhile the server needs to do something that takes some time to process (otherwise you might as well be handling it on a single thread). Note, the code supplied below isn't production quality, I've taken short cuts by making variables global and skipped error checking, it also hasn't been extensively tested but should illustrate my points. client.c Firstly, I'd have changed your client so that instead of sending a single message it was capable of sending multiple messages and processing the responses asynchronously. To do that in the code below I've created a second thread. So I have one thread responsible for reading from the console and writing to the FIFO and a second thread responsible for reading from the FIFO and writing to the console. This gives the following basic client: