Adding or subtracting monetary values is a common task. How can we add two amounts of the same currency? Simple addition. Let's add a method for it. Note that I add the method to the Money_Currency class, which can be discussed. If I do not want to do this, I'd need an independent class that does all the math. If you have such a class, try this different approach. If not, continue following me... 

(we started with the 50 USD object from above, the conversion rate is completely arbitrary). What have we got now? We can add amounts of the same currency. We can convert an amount into a different currency. We can also add amounts in different currencies via wrapping them into a converter first. That's pretty much all currency stuff should do. Now how do you get this nice converter? It is simply a call to a class that generates it for you. This class should only deal with generating the proper conversion object when asked to provide one for conversion from currency A to B. To fulfill this, it needs access to a resource of knowledge, but this resource could be anything. For example, a HTTP client. But the client cannot be universal, it has to be customized for the web service you are using. So in reality you need to create something like a factory that is able to make a request for converting currencies to a certain web service. This call triggers a basic HTTP request with some parameters. Caching should be done as decorator pattern as well. Decorating an HTTP call with a cache means that in the decorator you see if there is a matching entry in the cache that is still valid (might expire to fetch new updates), if not, it forwards the function call to the real client. I apologize for not going into details for these tasks at this moment. I hope you got the idea of how to split up responsibilities between classes from the currency conversion example. 

Output from keys Because of the changes above, the keys are the pairs so use list() and explode() to unpack the pairs. 

Then another area that could be simplified using arrow functions is the end of the function - specifically this block: 

See forked fiddle here. Note: and are not supported by older browsers - e.g. IE 10 or earlier. Refer to the Browser Compatibility sections for let and const. See this edited version of the forked fiddle. Also you mentioned it not working in IE 11 - I tried the original version and noticed errors related to jQuery. I tried porting it to jsbin. I noticed there were still errors with jQuery and updated the jQuery version to 3.1.1. That seems to help. 

1 When the array has numeric indexes, then there is no need to setup the counter variable and increment it at the end of each loop: 

I have some criticism on details you didn't ask, but which should be addressed: Autoloading Make use of it! There is no need to make manual calls to . There even is a standard: PSR-0, which defines how you should structure your class and namespace names together with the directory and file structure. When I look at your code, I see some issues: Because the underscore was used as a separator before PHP got namespaces, it is considered a separation character in class names. Namespaces Make use of it! I cannot see a reason why the exception \DH_MVC2_Application_Exeption is located in the root namespace, and not called \dh_mvc2\application\Exception. It would be so much easier to simply inside the "\dh_mvc2\application" namespace. Whitespace and coding style Endless debates might occur, but I really don't like yours. Especially the inconsistent placement of parentheses. Personally, I'd rather prefer not to use that much spaces, but if you really have to, use them everywhere. For example, if you want to find the function "set_ini_default_paths", and want to make sure not to find "set_ini_default_paths_directory", you'd search for "set_ini_default_paths(" - which will find only function definitions, but not usage. To find these, you'd have to search "set_ini_default_paths (". Dependency injection Doesn't take place. Objects are created inside your class. There is no way I would be able to change for example the Config object if I'd use your class, I must use yours. I even cannot change the config filename! Include path Be careful what you add here. If a PSR-0 autoloader is used, there is no need to add anything to the include path. In fact, you'll get a good amount of performance if you include as few directories as possible, preferably only ".", to be able to include files with a relative path. 

Gerardo pointed out the mix of and usage. If you wanted to keep the strict usage of then that container could be declared using . Then after that, a function can be defined that sets the opacity 

After thinking about this a little more, I feel like one could utilize Object.entries() with a recrusive assignment function and more es-6 features like Array Destructuring to avoid the operation: 

Note: the variable didn't appear to be used, so if that is necessary, you will need to update that. And those can be used to clean up the code to fetch the lists of items: 

Cast to same type? The name and city local variables have data type nvarchar(50). Those don't need to be cast to nvarchar(50) when used in the INSERT statement 

I find it weird that the bootstrap class actually changes the configuration. Configuration to me is a read-only value storage. It gets written in the config object only once in the life cycle of the application request: When it's read from it's permanent storage. The AppController for some weird reason has dependencies on a session manager, a configuration object, and TWO database connections. None of them should be the business of a controller. The controllers task is to be the combining layer between the incoming request on the input side, a number of models that act upon the data in the request as the processing step, and passing data back to the response as the output. Analyzing the input data from the request usually is done by helping objects that represent HTML forms to do validation (none of the controllers business). The models usually make use of some database access or session, but this also is not for the controller to know. Preparing a response means to push some values into the answer, which might actually be rendered by a template, but this also is not really the business of the controller. When I look at your AppController class, I see that it offers a whole lot of methods that have nothing to do with controller tasks, but with implementation details of a concrete application. I see methods like , , , that shouldn't be there. I especially wonder why does not use the to terminate the session. It was mentioned before, but I want to underline that if you force all the application classes to be extended from your frameworks classes, you make it hard for others to use your framework. For example the - for some reason they have to be extended from your mother helper class. A much better approach would be to only force the implementation of an interface, and offer an abstract helper class that already has a basic implementation that can be extended if there is no need to build from scratch. 

Bear in mind that the object would thus be passed as the start parameter to . ParseInt without radix I see one line that parses the response from the user: 

One solution to allow multiple functions called when the page loads is to add a callback using EventTarget.addEventListener() for the DOMContentLoaded event. 

Consistency Why mix native JavaScript (e.g. getting the elements with class name mySlide: ) and then use jQuery later on (e.g. getting elements with class name dot: ? That first block to loop over the elements with class name mySlide could be re-written in jQuery style: 

Remove closure just to call function The resize callback can simply be the name of the function - i.e. 

Similarly, you could make a constructor for a triangle. The constructor doesn't appear to accept any parameters, though it could accept the number of sides, in which case the triangle constructor could pass that in as an argument to the call to , but for now, the property can be set after that call. 

I must criticize your tests. They are not part of your question here, but available in your github repo. Your SlotTest does not test slots. It does test the page. Why? 

Although it does plenty of things, it has no answer to the problem of how to actually recognize which currency any amount is in. Adding two amounts might be valid, because you add GBP and GBP, but might actually be invalid because of GBP and USD. Your variable would only contain the integer or float value. So split it up. First create a class that actually represents an amount of money in a specified currency. This can be as easy as making a class with two public values, $amount and $currency, but usually you do not want to allow write access to these, so the two values should go into the constructor, stored as private properties, and be accessible via get methods. 

Foreword Bearing in mind that this post was created more than 4 years ago, you likely have changed the code and learned more about PHP features - perhaps you don't even use/maintain this code anymore. I honestly have never played Minecraft, nor had any reason to monitor server statuses. But I wanted to give some feedback to this question. Feedback The code looks pretty sophisticated. I honestly haven't used before. That is neat that the class can function as a stand-alone CLI tool. Suggestions Utilize member variable instead of passing The methods and make calls to private methods like , and , which all appear to be private methods. Instead of passing the hostname and portnumber to those methods, the methods can utilize the member variables using . That way, the member variables don't need to be passed around. Mapping Character to colors The statement in could be replaced by a lookup in an array. 

Reading the tests, I do not really see how a single slot is to be used. I only see how multiple slots inside a page are used. Also, I only see tests for several GET methods. If I want to verify that the results that are coming out are correct, I somehow have to read the config fixture file - a secondary source of information. This situation actually is bad. I want to be able to read the tests, and actually CHANGE some input values in a certain test method to see whether or not it changes the output and breaks the test. If I cannot see the input, I cannot play with the values. One final improvement: If you include files, they can actually return a value. You do not need to define a global variable that will transfer the config values. 

Storing value in The first line of the method assigns to the property (I.e. ) that property appears to not be used elsewhere, other than the two lines where the value is re-assigned and then returned. Unless there are other methods that would use that property, it could be eleiminated and the lines with could be simplified by removing the assignment (e.g. ). Useless loop It seems that the isn’t really needed. It could simply be replaced with a check for the operator in the second array index... Radix for parseInt If you are going to use parseInt(), it is wise to specify the radix using the second parameter - unless you are using a unique number system like hexidecimal, octal, etc. then specify 10 for decimal numbers. 

It converts currencies. It validates currency identifier. It fetches HTTP resources It caches fetched HTTP resources. 

Easy. And completely unrelated to your currency conversion so far, but it solves a problem you might have, unless you are only offering a web service that inputs amount and currencies and translates this to the other value. What about currency conversion? What about adding two different currencies? Decorator pattern to the rescue! You can build a decorator that implements the same interface, which wraps around a currency object and does the calculations for converting the currency. Let's fix the interface stuff first: 

Bonus: It is easily extensible should new fields appear. Negative: Still a lot of code duplication for three basic comparisons... But we will address it: Extracting all basic functions into separate variables (an array would work here, too), and adding the field that should be compared to this function, you get an almost universal arsenal of comparison of object properties.