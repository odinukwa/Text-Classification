This will display any packets with IPv4 address values returned in the responses. However, because address and subnet mask are passed back in the same format, you will have to be able to discern which are real addresses and which are subnet masks. In addition, you can break out the addresses (and masks) into their own column, then sort them in order which should leave all of the subnet masks at the bottom of the list. First: Right Click the specific field you want to build into a column, in our case it's the IpAddress Value: 

So, correct me if I'm wrong in interpreting your question, or if it doesn't make sense - I'll be happy to update my answer. You want to match on, your neighbor (AS20) whether AS20 does prepending or not, and ANY neighbor of AS20. Your regex would need to be: 

This guide gives way more detail into DHCP features - Cisco DHCP Client Configuration You should note that there are additional commands to the ones I listed, but they are optional. 

Yes, IPv4 implementations require a minimum MTU of 68 bytes per RFC 791. See Peter's answer for more detail. 

It fails because that OID is a table, no specific information tied to .1.3.6.1.2.1.31.1.1.1.1, it is just a container for the rest of the information. There are more than the 3 methods I mentioned, like and others. Which method you use could vary depending upon what you're trying to accomplish, but I suspect will work fine. You can see examples here. 

This is actually default behavior. The only way a local login will even be attempted is if all other authentication types fail (TACACS and/or RADIUS). So in your case, the only time your local password database will be consulted is if the TACACS server(s) fail to respond to any requests. If you attempt to login, but TACACS rejects your password, the local database is NOT consulted. From: Juniper Authentication Order Methods 

The cool thing about traceroute is that, it has no idea if you're trying to hit something 20 hops away, or just 1 hop away - it needs to be able to adapt to any of those situations. So it will behave no differently than it would at the last hop in a 20 hop traceroute. If you traceroute your next hop, your probes would look the same: 

However, auto-bandwidth does in fact count as setting a bandwidth value, despite it not being present in the configuration. When auto bandwidth is enabled, RPD will begin monitoring bandwidth consumption. It will assign bandwidth values based on utilization, and then the "load-balance bandwidth" statement in RSVP will immediately begin attempting to keep the traffic ratios within those subscriptions (35, 35, 26, 5 respectively). The problem with this is that it never gives auto-bandwidth the chance to adjust evenly, because the "load-balance bandwidth"s goal, is to keep the traffic as close to those ratios as possible. This makes sense when they're set of something like, 10, 30, 20, 40. It is essentially a race condition between "load-balance bandwidth" and "auto-bandwidth" After removing: [edit protocols rsvp] load-balance bandwidth Traffic adjusted (with a slight hiccup, seen below): NOTE: This is an example from a different router that was affected by the same issue. 

The picture above is a snippet from the new version of Wireshark sniffing a TCP segment. Here's how it correlates to the older version. Window Size value This is the value present when window scaling is disabled in the older version. Calculated Window size This is the value present when window scaling is enabled in the older version. The major difference being is that the newer version contains both values and not just one or the other, so disabling the window scaling option isn't necessary. 

So all you need to do is: Right Click one of the TCP segments => Protocol Preferences => uncheck Relative Sequence Numbers. 

We HAVE a DNS record cached. There is a very small difference here, but I'm going to include the whole thing so you can see the comparison. 

NOTE: Yes the opposite neighbor was configured properly, this is just to give you an idea - the previously installed ASR had the peer Established. We ended up getting it working by setting the authentication directly on the neighbor, without a key-chain, see below: 

First, let's bang out some terminology. DPC: Dense Port Concentrator - This is an older line card architecture, it predates MPC. MPC: Modular Port Concentrator - This is the newer architecture for line cards, MPC's also have many "sub-architectures" as well (MPC Type 1, Type 2, etc.) SCB: Switch Control Board - These are fabric cards, they are what connect the FPC's together. Here's how the DPCs and SCBs fit together: 

FYI: Ignore the filters, I just did that to make it more aesthetically pleasing. They have nothing to do with the option selected. EDIT So to address your comment: In the older version of Ethereal it has the option to disable relative sequence numbers and window scaling. When the window scaling option is enabled in the older version you first mentioned (Ethereal aka old school Wireshark), it simply calculates the current window size against the current window scaling factor to give you a total. When it's disabled, it only displays the current window size without the scaling factor taken into account. 

Will convert all dynamically learned MAC addresses to sticky MAC addresses so that you don't have to statically define them (like if you had a couple hundred hosts). 

I found a neat little behavior on a Juniper box I was working with today. We were migrating from a Cisco ASR to an MX and all of our internet exchange peers that had authentication configured didn't come up. We received log messages on the MX480 implying that our local authentication wasn't set, even though it was. (See following labbed config) 

Configuration: The LSP configuration is a single destination from R1, just as an example. All LSP's are configured exactly the same way (again, with either 2 or 4). 

It's not necessarily that a single VPLS domain ONLY signals with BGP and ONLY discovers with LDP, it's the fact that you can interoperate within the FEC 128 standard (and FEC129). I definitely think you're usually going to select one and run with it, but there are all kinds of environments out there. FEC128 on Junos will support running individual mesh groups inside of a single VPLS instances (1 or more group of LDP signaled PE's, 1 group for BGP signaled PE's). You can configure them to interoperate by configuring a border PE to be a member of both the BGP signaled group, and LDP signaled group. That way if you are signaling with LDP in one area, and you want to introduce BGP in another - both can work together. Here's some extra material/examples, if you're interested: $URL$ $URL$ 

Yes, you can boot JUNOS from a USB drive, and an EX2200 will work. Booting an EX Series Switch Using a Software Package Stored on a USB Flash Drive Follow the documentation and it should work fine. Chances are your flash isn't permanently corrupt so you can reinstall JUNOS and get everything back in working order. 

I'll try to answer your question directly without going into a huge rant about TCP v UDP. Basically you need to understand that both HTTP and DNS are completely independent applications/protocols. Sometimes you need to actually send a DNS query to a DNS server, sometimes you don't (if the DNS record is cached locally on your PC/Server). 

1. What goes into setting the MSS? In the question you referenced it stated this, the MSS is derived directly from MTU. A typical Ethernet MTU will 1500, but IP and TCP headers must also be taken into account - each of them are 20 bytes. Note: Just an FYI, MTU can be different sizes - see Jumbo Frames for an example. We end up with: 

Where I'm confused is the multiple instances of inside a single (I do have multiple that aren't shown.) What purpose does each serve while inside a single ? Does this break the split horizon rule for VPLS? Couldn't I just make multiple VPLS instances in JUNOS? Please let me know if anyone needs clarification. 

They're not, here is a list of the common IEEE TPIDs. To be more specific, the default is 0x8100 because 802.1Q is used WAY more commonly than 802.1ad/Provider Bridging. To be even more specific to what I assume is a quote from the JNCIS documentation, is just really poor wording. I believe it's saying that the default TPID is 0x8100 (to imply that 802.1q is default). 

You have a syntax issue, you need to indicate the syslog message ID, not the message itself. There may also be sub messages under "FW-6-DROP_PKT", so you might have to change multiple IDs. 

You also had switches in the network, looking at your diagram it looks like your average switch, these will not participate directly in MPLS, and therefore are transparent to the network. This barely scratches the surface, if you want to learn more about MPLS you can start reading this in addition to the other resources you listed. 

You are correct, these are not the same thing. "Interface Filters" / Firewall Filters The command is used to show what firewall filters are applied to each interface, and in which direction. Firewall filters are supported on just about every Juniper hardware platform. 

I'd like to emphasize something you mentioned, you are 100% correct in stating that the MSS for the TCP connection is established during the 3 way handshake. Should either side of the connection want to adjust its MSS, the TCP connection would have to be torn down and re-established. Before going any further, we need to clarify that a "receive MSS", what you're thinking of is the TCP receive window. This is not the same as the MSS. 2. Do other factors go into the calculation of one side's MSS? So remember, the TCP MSS is established during the TCP handshake along with all of the other session options. The vast majority of the time the agreed upon MSS will be the largest possible payload that can be sent in a TCP segment without fragmentation. The last part is key, this means if a client and server are trying to establish a TCP connection, and the client has a smaller MSS size set, the connection will choose the smaller of the two values to avoid said fragmentation. As it should be noted, it is possible to manually set MSS if whoever is running the application/service doesn't care about fragmentation. 3. What factors does a Client or Server use when they state "I want you to send me TCP segments in maximum chunks of X bytes?" Is it solely based upon the MTU? The bottom line is that TCP will try to squeeze as much data into each message as it can to maximize network efficiency. To be clear, a single un-fragmented TCP segment's payload (headers, data, options, etc.) CANNOT exceed than that of the MSS, if that single TCP segment is one message, or a piece of a fragmented one is irrelevant to TCP - that's what it's designed to handle. It's not solely based on MTU of the end hosts, but as previously mentioned it is derived from it. Things like a lower "Path MTU" (see Path MTU Discovery (PMTUD)), can affect network performance. Other factors can affect network performance as well, but not necessarily only MSS. You can check out things like TCP Tuning, if you'd like an idea of what else you might think about when designing an application or service around TCP. 

The reference to "standard network firewall policies" is pretty much a direct comparison to the above mentioned "firewall filters". Let me know if this isn't clear, and I'll happily edit my answer. 

As Ron said, this is a pretty simple thing to test - you should give it a try if you haven't already. In BSD systems traceroute will use a range of high, unregistered UDP port numbers as well as TTL. The device originating the probes will send 3 probes, they will look like this: NOTE: The port numbers won't necessarily be exact in your tests. 

When using the authentication-key-chain, etc. the packet capture didn't give me the TCP authentication options I'd expect (I can provide full captures if necessary): 

Part of it comes down to what's supported, you might have PE's running older code that don't support FEC129. 

As you can see, MD5 is explicitly called out in the capture. Now as I mentioned, we don't care if we use key-chains or not, it was just very curious when I did mismatch the configs, (see below) - they wouldn't enter ESTABLISHED even though it would seem they should: 

The power of 2 requirement varies per vendor/hardware/software. Cisco had (has) a pretty bad stigma against them with a lot of the earlier catalyst switches capable of 10G. The problem comes with how the software hashes (or "balances") data over the multiple ports in the port-channel (this is agnostic of PAgP or LACP). This post does an excellent job of simplifying the problem in finer detail. This is less relevant today with hardware/software improvements, but again, it varies - so just check your hardware requirements and make sure you're not buying older hardware that falls victim to this problem. $URL$ 

Now let's say that second set of probes will reach our intended destination. The response we will get is (and this is a portion directly from tcpdump): udp port 33437 unreachable Now what does this mean? It means we've reached our destination, because only our destination can say "No this port is not available" (as we would expect from the higher unregistered UDP port range). 

Great, now we have it working - we didn't have any particular attachment to using key-chains. I decided to fully lab this out, and pull packet captures to see what the difference in TCP/BGP options were. Below are each of the scenarios I tried (it's all Juniper, I don't have a Cisco box in the lab): 

Resolution Guide - MX - Troubleshooting Fabric Planes Instructions to Offline/Online MX Fabric Plane and MX SCB 

This doesn't because %FW-6-DROP_PKT is not a valid ID. If you can paste the full syslog message(s) you're wanting to change, I could edit my answer to be a bit more helpful. 

If you're seeing different behavior, check for the following configuration statement (be aware it has sub-options, for more info see Configuring Authentication Order): 

Obviously replacing $mac-address with the appropriate MAC. If you want to view the configured MAC addresses vs. what is actually being learned (or not learned) by each interface, you would have to use (as @ParlorTricks mentioned): 

No, not without seeing the configuration. You receiving an address inside of 10.100.19.0 255.255.255.0 doesn't mean the entire range is going to be used. The administrator could have done any range within that subnet. Example: 10.100.19.10 - 20, or 10.100.19.100-254. Typically one or more addresses will be reserved for network connectivity for that subnet. i.e. the typical ".1" you use for your gateway, or if he has something like VRRP setup, maybe he has .1 .2 and .3 reserved. Also, if you're looking to take some IP's from that pool, definitely have him assign the addresses to you. If you set 10.100.19.25 for your device, and it goes down later, theres nothing preventing the DHCP server from giving that address away to something else. 

Choose optic based on distance requirements - See here. (Doesn't have to be Cisco obviously, but the optical standards are the same.) Choose fiber based on optic. 

In the condition that the we're NOT tracerouting to the next-hop, you will see the following message from the next device: Time to Live Exceeded This is what we would expect, to see as traceroute progresses, the next device's probes would look like this: 

You can use show . The following is taken from, Configuring MAC Limiting (Official Juniper Documentation). Configure: 

Ryan is correct, you can do absolutely anything from root. JUNOS is built on FreeBSD and inherits that behavior. But to be honest, it's rarely used directly. The biggest practical example I can think of offhand would be to collect core files from devices without another type of authentication, whether its due to a configuration issue or maybe you have redundant routing engines or a virtual chassis setup. Non-master members don't authenticate with the network, so should you need to get into a member device to collect files, you could use root access in the shell to get those files. When you first start up any Juniper device, you CANNOT commit your first configuration without root-authentication set, so you are forced to have a root password set. I guess you could think of it as a failsafe, should everything break. However, you can disable your users from starting a shell with root privileges with login classes. $URL$ There are a couple of ways to do it, but one example would be: set system login class class_name deny-commands "(^start shell$)" Another: set system login class class_name permissions permission_bits_to_set If you EXCLUDE "maintenance" as a permission bit, they will not be able to become the superuser (root).