I decided to stop there. You don't validate if is a number. What would happen if I run ? And ? It continues executing, without any validation what-so-ever. I expect it to throw an exception or or something. 

Well, that won't work. What you have there is a CSS selector. Fear not, just remove the . But a few lines below you have this: 

Still on the same , you forgot to indent it. Indentation is important to check what belongs where. Code is read far more times than written. Improve it's readability. 

You have "magic" classes. These should be declared at the top, to avoid any kind of problem. An example: 

It accepts anything that can be converted into a string, and expects the length of the substring to be found. The length must be withing a certain range and must be a valid number. It will be converted into a 32-bit signed integer later on. This will be part of a larger project, and just want to make sure it is as polished as it can be. 

Since the is a really heavy check, we put it at the very last. Since SQL supports short-circut evaluation, this positioning may result in faster queries. The slowest checks are the last ones. It was really hard to follow if everything is 200% correct, but I hope I've nailed it. Please, comment if you see something innacurate. 

For some reason, this code seems to look a little like jQuery to me. If you have jQuery, this fits in 1 single line: 

getLastLoginDate() Seriously, USE LOCAL VARIABLES! And why in the love of God are you fetching the information again from the database, when you could store it all in a session or similar? 

It is a pretty straightforward CSS, without many complications. But, remember that it suffered a rewrite. Replace your CSS with this: 

You should declare your variables as close as possible of when you will use them. One example is this: 

This can and should be written as vanilla Javascript. The use of jQuery isn't justifiable here but that is an exercise for the O.P. to try. 

Since that expression will return a boolean value, you can send it directly. Also, I've added a to the filenames, because one could name a file and it would validate. I don't think this is the right way to check if those parameters are met, since you may have a file named and it would fail, even though it is a perfectly valid extension. Even would fail! Java isn't my beach and it really is outside my confort area, but I recommend a method where you itterate over all the elements and check, with a Regular Expression, if the extension is indeed valid. 

This has the side-effect of changing the array! To combat this, you can make a shallow copy using the method. 

If you see something innacurate, please tell me. I haven't touched on the remaining functions, but I'm specially worried about the function. 

This stores and re-used the created, instead of always running a useless . And since I've already subtracted the magic number, there's no need to re-calculate it here. 

Which can and should be all in the same line. You should only split the methods in new lines if and only if they look too wide. 

As the title says, this batch script installs the XignCode Bypasser. Xigncode is a software bundled with games to analise running programs and prevent cheating. (Sometimes, it prevents the game to load at all on the newest Windows releases.) For this, a bypasser was created that disables this check, allowing players to run the game (if they couldn't), mod the game (One Click Tool, for example) and (if you want) cheat. Copying the files manually is a boring task that can lead to mistakes (copying from the wrong location, deleting the Bypasser by mistake, ....). For that, I've made the following batch script that does all the copying and extraction: 

I'm really sorry if I said something that might not fit at 100%. I'm not 100% confortable with C. But I hope I've helped you. 

Something to consider is that you are navigating to a page that triggers the error 404 I would recommend adding to the URL, being it now , which will be registered as a real attempt to get a 404 page. Or you could look for alternative method like creating an empty with your code there or a popup. 

The (or ) allows you to create an alias to the jQuery object, being it passed as the first parameter. You can read about it on $URL$ 

Your use of seems kinda shady. Perhaps you're trying to remove tags? This causes huge usability issues, like, not being able to have a symbol anywhere, which can be fixed by using the function . If you try running: 

Completely remove this line. All that replace can be made into the following regular expression: This should be the very first regular expression. Since all the other rules handle whitespace, one only needs to normalize it. The rest of the replacements will dictate if it needs to be replaced or not. If the whitespace is simply removed, it will lead to removing needed whitespace. Here's an example CSS: 

This would speed-up your code by a very small bit, but it is important to notice. And to squeeze a tiny bit of performance, you can change: 

Your code is really easy to understand, and there's not much wrong with it. I promise I'll go easy on you. 

It seems like you made an attempt, but it didn't worked. Since these 2 lines aren't doing anything, just remove them. Anyway, you are using jQuery below! 

I'm not accessing the property directly because it may decrease performance. Accessing a local variable is always faster than a property in an array/object. Also, since starts in 0 and your elements' id starts in 1, I had to add 1 to , to match the right element. Using an array, you also don't need to re-re-re-repeat everytime you need to add a point: just add a new element inside the array . 

As a sidenote, I recommend that you use Javascript, taking advantage of XHR to upload the file. If you send the data as JSON, you can parse it easily and you have a better-looking interface, with better handling. You can make a tool to crop the image, apply effects and rotate between others. (Those things can also be done using WideImage!) 

I'm sorry but I have to start with the obvious: your indentation is barely non-existing, making your code needlessly harder to read. Indentation is important (but not mandatory)! 

While fiddling around, I've made a very simple and naive function to retrieve any repeated sub-string within a certain string. 

But not everything is bad. You heard me about bad naming and missing whitespace. But now you have a new problem: too much whitespace! Look at this: 

These comments contain old code. Just remove them! They won't kill you. And that can go away as well, since it isn't useful to make the code work. It may be in debug. But wait! You have this line: 

There aren't many things wrong. And the code itself is surprisingly short. But this will be a really long review. The first thing that bothers me is that you talk about JSON, but you show an object. That's fine, but you should show how you decode the JSON into that object. But, within the scope of this review, I'll refer to it as an object, which is what was presented. Not to mention that all the links point to s. Now, lets tackle the code! Javascript: The indentation of that object is really off. Not to mention that you have mixed quote styles. 

I always suggest wrapping the code on a , but I leave it for you to decide if it is worth it or not. 

clearLimits() and clearLoginHistory() Why do you use ? Again, create a local variable! is the 'default' name for query results, since it returns a . 

HTML: The HTML is pretty basic, but there's still plenty to improve. Lets look at it on it's original state: 

Currently, your code is next to unreadable. The variable names are too cryptic. Names like and don't tell anything about the context of the variable. Please, use descriptive names. 

You are calling jQuery just so that you can pass an instance to move the tile somewhere? You know, you would be better off without jQuery inside that handler. Like this: 

The idea here was to skip checking as many characters as possible, and only checking the characters inside the needle if strictly necessary. To test the speed of the function, I're ran the following code a few times: 

You have unterminated HTML entities. Through all the code, you have repeated over and over again You should use it like that --> (notice the missing ) You're closing your s in weird places An example, way at the bottom: 

A good variable name will give us an idea of it's content without having to read through all the code. The name for (instead of ) is the standard name used for an increment. Since you have below, it is a good name. 

But in a more readable way. I can't make it more readable than that. Repeated handlers. Yes, your handler is the same, with a very small difference, that is fixed by checking the event type and the . Just store the function in a variable and you are done! Like this: 

See the mixed quotes? You have inconsistent quotes. All your objects have different quote styles. The same object has properties with quotes and without. Pick one, stick to it. Unnecessary code. Observe the following example: 

You don't need the there, since all methods are by default (since, at least, PHP5.3). You should use type hinting. This basically limits the received value to a certain type/class. This is how you should've done it: 

The characters , and will have a special meaning. They have to be replaced with their URL-codes. works on URL-encoded strings and leaving those characters unchanged would cause all sorts of bugs. The order of the elements in the array is VERY important. Here's how it works: 

They don't vary much, and their differences aren't that big. It's up to you to decide which one you like the most. It is easy to make a 3rd version to allow array-like objects to be passed as the 2nd parameter. I hope this helps you. 

Another way to improve the performance is to use and instead of , but the difference is neglectible. This final version, using the do...while loop takes exactly the same time as @Kruga's ES6 answer. 

The first thing I saw when I looked at your code was the obvious disregard to any kind of indentation! It is nearly unreadable! There's no excuse to have a code without any indentation. Throwing the code into any PHP online formatter should suffice. 

I've decided to stick with the first option since it is easier to use. Some may disagree and prefer the second option due to separation of tasks and avoid surprises if they forget the 2nd parameter. 

Adding on Flambino's answer, I just have to say that your code breaks on IE9. Since you didn't specify which browsers you want to support and which versions, I will assume you want to support all modern browsers plus IE8. According to the MDN page about , this method is only supported on IE10+. Currently, Windows Vista SP2 is supported (until 11th April), which only supports IE9. IE9 can still be installed on Windows 7, and may be the default browser for some. Also, devices with Android 2.1 will throw errors, since this isn't supported.