You check whether the index of the tab equals the position. If this is the case, use the selected icon, otherwise use the unselected one: 

I don't like the idea of modeling a common set of properties (or as you say "... for just about every API call..." probably a mostly common set of properties) as a superclass. IMO inheritance should be used to capture common business aspects, not common technical aspects. Or in other words, this feels somewhat like identifying a set of real world objects which have a lock, and then creating a HavingLock superclass with subclasses House, Car, Desk, ... - this simply does not sound right. Then, the CommonRequestCommand has the ring of something that is a pure data holder. It has a set of parameters and maybe even a specific execution logic that is tied to the service you call. Tying this this to the lookup logic in your own application will make this a hard-to-test mess. Thus, I agree that an immutable class will probably be the best, and furthermore recommend that you make that immutable class just a field in your commands. For the mutablility, you can always create a copy. All in all: 

Then for showing the gallery we could use a data tag instead of class names to identify the links and galleries, then you could easily extend the code to include more galleries, with no extra js 

Unless you know for sure there is no html or user editable content, you should really html escape it 

The security aspect of things looks fine, but there are some areas for improvement, I have provided inline comments where possible. The whole quiz could be coded as a class, and would be a lot nicer, however I didn't want to go too far from what you started with so you can see what changes I have done. Overall, I have split the code into functions, and tried to make each function do 1 thing only, and renamed variables for readability. This will become more important when you go to maintain the code. The first bit of code is what I used to test all the functions and catches exceptions that occur. You could improve by adding more error checks after each prepare and execute, but I will leave that to you, as they are only really necessary if the database structure doesn't match the sql. 

Data structure: First of all, choosing an ArrayList as the data structure for a queue is suboptimal to say the least. A remove(0) on an ArrayList always copies the remaining elements to the beginning of the list (see remove implementation in ArrayList - sources are available). Use a LinkedList instead, which has constant removal time. New Files-API: Usage of try-with-resources is good, but manually creating a FileReader and a BufferedReader is quite old-fashioned. Simply use java.nio.Files.newBufferedReader instead. Method signature: Your LimitedLengthQueue.add method has a boolean return which is always true and never queried. What for? If you don't care, simply make the method void. 

You have a lot going on in one middleware. Keep in mind a middleware runs for each request so it needs to be reasonably well optimised. I have split the logging bit out into PlatformLogger class, that seemed like a logical separation. I have also removed a lot of the } else {, to me they just add noise and in most cases you return anyway, so the else will never get triggered. PLEASE NOTE: The conditions below where I removed the else's may not all be the equivalent to the sample provided, it is just to show you what it would look like, you would need to check and make those changes yourself if you choose to do it that way. Also check your if conditions, and do the cheapest test first as they might short circuit the if statement and you won't have to perform the other slower test that involve database access for example. 

Variable scope In your loopUntilExit(), you declare the input String outside the loop - why? This should go to the minimal acceptable scope, that is in the line where you call sc.nextLine(). Law of least surprises I don't like abusing the toString() method to create a multi-line screen menu. This is not what I'd expect of toString(). Thus, I suggest you create another method to do this, and call it explicitly. One afterthought In 20 years of programming Java, I have never seen the use of Scanner in real life (TM). Is it really necessary, that every teacher seems to love this object and base their classes on it? Yes, it is simple, straightforward to use, and probably an easy-to-explore way to teach other principles without the input getting in your way, but it does not hold any practical relevance (at least as far I am concerned.) 

Database service, take the config out of the service, and store it in a config file. otherwise you need to edit the code when you deploy to a different server. Would a join work better here 

Another useful function you might add is get_once. I do something similar for when I store an error message in the session, then redirect to a new page and display the error message. After that the error message is no longer relevant so I remove it from the session. 

I haven't read the book you mention, although it looks good so I might buy it and have a read. A few things for me There are echo statements in the code, I am assuming that is for debugging and you are going to remove them. In a couple of places you use die(), and then elsewhere you throw an exception. Personally I would throw exceptions and let it bubble up to somewhere that can handle them properly. Your class is called fileImporter, but it also has a download aspect to it as well. I am wondering if fileDownloader should be separated out. You have a private getter function 

In the generalFizzBuzz method, replace the inner loop with a call to that function. Naming: "map" is a no-go-name. This is like calling start and stop "numberA" and "numberB". The map has a logical purpose, so you should reflect this in its naming. 

The most important problem I have with your code is, that it totally fails to achieve the goal you set yourself. This is not dynamic at all. Basically, you take the "normal" method body and put it into a lambda, but this lambda now is a complex function, which contains all of the business logic. Dynamically, you'd need a collection (probably list for being ordered) of lambdas, which each check a single input value and return an appropriate string representation (i.e. "fizz" or "buzz" or "whatever" or the empty string) and a method to apply this complete list on a single input, accumulate the results and perform the final check whether to output that string or the integer itself. Thus, start out with something like: 

The dump function, why do you throw an exception if the session doesn't exist, but not anywhere else if the session doesn't exist? I would re-write it like a guard clause rather then having a return halfway through the function. 

Personally, I would just stick with what you have already got. You could try something like this, although too me it doesn't look any tidier. You would need to profile it against your database, to see if it performs any better. 

Have you tried using this function before? It does a fair bit of what you are trying to accomplish. $URL$ Failing that, I would try learning regular expressions, as they can make a lot of your strpos more concise. Its a handy skill to have in the toolbox. $URL$ I also find the a,b,c thing incredibly cryptic You could use constants 

This basically boils down to a grouping problem: you have an input list and want to group it by date, which yields a per-date list of a given length (1 to number of departments). Then, these list's contents get added to a collector list chosen by the list's size, i.e. add all contents of list with size 1 to collector 1, add all contents of lists with size 2 to collector 2, and so on. Using the stream API, you already have the grouping, the rest is a little footwork: 

OK, the data-structure looks a little wierd here, because your list consists of map-entries, but this was the main work. If you print this result, you already get (format added manually): 

The bulk of your code looks fine, I have made what are (In my opinion) a few usability enhancements, but take it or leave it as you see fit. I don't think you can really make the xml processing any less ugly. Comments are inline 

Check $trackCols against a list of valid column names you are expecting, to stop me doing things like I have below. 

If you can get all the shift ids in advance and do something like this. This is just some pseudo code to give you an idea 

There also appears to be no way to overide these private variables which are set to constant values.