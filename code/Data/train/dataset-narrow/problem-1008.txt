Is this used for anything? Repetitive Code You have a few places where you repeat code. Typically programmer's aim for minimal repetition. For more information read up on the principal (stands for "Don't repeat yourself"). This: 

OOP Object-Orientation when done right can help make your code quite a bit more readable and intuitive. This is effectively how I structured my code when I did the exercise myself. Main 

I created this data structure a while back and it's been in use for a while without error (to my knowledge). I'm currently at the end of phase one of the project so I'm doing some clean-up and wanted to see if there were any ways to improve the structure. CacheStore Structure 

If you are using the variables for debugging purposes you can type "result" into the watch window and it'll display a result (reference here, VS2013+). Simplify 

Final words I noticed you have a for your grid. One thing you could do is make it a jagged array (i.e. an array of arrays) this way you can make each point at its coordinate position (i.e. Point[x][y]) for quick and simplistic access conceptually. That said you have a working solution so unless you're having trouble conceptually keeping track of your current solution I wouldn't change it. I hope that you find this helpful. 

The important part of binding is the element and how to check the element's validity. So we're going to have the bind function take both the element's selector and a function it can execute that returns true/false of whether the element is valid or not. Example Usage: 

Just some minor suggestions to add. Double Initialization You're initializing your lists twice. First on declaration, then when you call the function on the next line. Just initialize to the functions. e.g. var (As Disappointed suggested) This is mostly preference but is less keystrokes and simpler as without reducing any information/readability. Naming Typically in C# it is convention to use PascalCasing for class names and members and camelCasing for local variables. Consistency is always helpful. So since you're already calling a(n) 'uids' then why include those ugly underscores? 

I agree with Knais that the key question is whether you really need to indicate failure. If you do, then either a tuple or an out param in the form of a TryGetChildren function would be appropriate. I disagree with him in that I don't think that using an out param is a bad idea, at least not if done in the TryXxx pattern. I would NOT suggest using an out param for error message, as that is a bad idea - if you need more than the bool returned by the TryXxx pattern, then you should be using an object that is acted on, not a variable that is changed. It's just as easy to do the simple stuff, and it makes it possible to do more complex scenarios if you need to. And you should be doing it as a separate validation check, not an exception. But in 9 out of 10 cases returning a valid but empty collection, is the right thing to do, as you don't really care why you're not finding what you are looking for, you just want something to use in a for each loop. 

You ask if moving fizzbuzz outside of main is overkill, I would say yes and no. No, because main should not be doing complex logic, it should be short and simple. If there is complexity, that should be handled elsewhere. Yes, because you moved the WRONG THING out of main. Fizzbuzz has three components, a loop to be executed some numbers of times, a calculation on a given value, and printing the result of said calculation. You move all three of these out of main into another function, but you don't actually gain anything by doing so. Turn the calculation into a function that returns a result. At that point, you will probably want to have the loop stay in main, but either way, it will be a better program. 

I know this violates the SRP, and it might look to be introducing some coupling between the Presenter classes and Spring, but it seems to me that it's not really coupled any more than it was before, it's just now type (and typo) safe, while living in a somewhat weird place. If I stop using Spring, I simply replace this call with whatever else gets used instead. Am I missing something that makes this a really bad idea? Is there a better way of avoiding the usage of strings? Should I just suck it and make sure I don't spell "clsPresenter" as "classPresenter"? 

var keyword: It isn't uncommon to make use of the keyword. Particularly in cases where it is obvious what the variables type is. e.g. this way you don't have to type 'List' twice. 

Updating a Single Liberty You need a function that does the / update that you do 8 times in your function. Something like so you don't need to copy/paste the if-statement for checking a single liberty when you have 4. 

Here are some minor suggestions in addition to t3chb0t's: Using var could easily be and not lose any readability at all. Nesting All that nesting can sometimes make it hard to follow scope. In some cases you might choose to flip your if-statements and return early. This doesn't work perfectly for all cases but I think it would work just fine here. would become and now your entire try-catch is no longer nested further to the right. 

As JonathanR suggested, check if their lengths match, if not then there is no point in doing all that other work. 

I commonly create a method to call this. The only slight caveat to this is if you ever need to change one of the actions calling it (not that common, but it happens sometimes). View So to elaborate on what I said before about making the SortProvider a parameter to the action. 

Sometimes it seems unnecessary when you're doing OOP in a scenario in which you could easily do it all in one function but it helps significantly when debugging, reading, or maintaining (or in this case when other's are reviewing your code :D). 

In addition to the already existing answers I thought it be wise to add some things they may indirectly affect your application's performance. What I mean is these suggestions don't necessarily help your performance but they can make it a lot easier to understand and debug your program a lot easier (both you and others). This can allow you to evaluate the performance much easier and faster. Naming doesn't quite tell me anything about what it's purpose is other than determining if the state is 'happy'. Something like or is much more clear in its purpose. Which you already have a variable for so why not use it and subtract the final day before you print (or even after the loop). Hungarian Notation is quite unnecessary additionally you're only using it for two variables. is just as clear in its use and purpose as (as the 's' implies a collection) your functions and classes shouldn't be so long that you need such a naming scheme. Intuitive Try to keep your code as intuitive as possible so that others (or you 6+ months later) can understand it quickly. These suggestions might just be me but I think at the least they can demonstrate what I mean. The goal is to compare the plant to the one at its left. So why not start at the second and go until you've reached the end? Here is some pseudo-code to demonstrate/explain what I mean about intuitive code: 

The key thing you need to keep in mind is that a method should do just one thing. I could have combined sumInts and multiplyInts, but they are mostly independent concepts -- so, keep them separate unless there's a performance problem or you need something a bit more abstract (ie you have a list of operations you want to apply to the elements of the list). I would suggest that you consider variations on the above revolving around "reportResults"...there are two variations that should be fairly obvious. 

Totally new to MVP and Spring, and I have what seems to be typical MVP application that uses Spring, where the presenter is instantiated like: 

What kind of performance are you getting? Is it acceptable. If it's not, then I'd look for changing your algorithm, and not minor tweaks. In particular, I'd look into NOT splitting the string and recalclating each time. Instead keep track of the state (what line and the number of characters on that line, whether it's a paste or a delete), and do the right thing based upon that. Adding an additional character at the end of a 5k block of text, adds one more line at most, if the last line was 1 character long, then unless the key being pressed is the enter key, it doesn't even do that. But before doing anything, sit down and see how well your existing function works, for your typcial data, and then for some extreme data. 

I would suggest changing the return type to a pointer to the list, and drop all of your error messages -- they aren't relevant. If passed in null, return null. In general you should seperate your logic from your UI as much as possible -- and this function needs no UI. Even if you consider this a form of error/exception handling, you should not be doing it in this case as there's no reason to allow this code to fail -- you are not allocating new memory, the only thing that can go wrong is not enough stack space, which happens before your code runs. Elsewhere you may care about whether the list is empty or the pointer to the list is null, but not in the code to reverse the list -- it should be foolproof. 

Psst...You have a typo: should be . Consider making a list/array of the texts you use for dialog so that it's easier to see the text as a whole, then loop through each one adding it as you loop (see below). Then you could do something like this: 

From this line we quickly see "Downloaded Applications Remove all". So does this really add any value to your code? It seems like that comment just adds clutter. Clutter & Variables used only Once You want to reduce your for-loop there's a few things you can do aside from the typical suggestions you're going to find (i.e. Modularize into functions). One of them being reducing the number of declarations you have (if conditions allow). For example, both and are only used once. If you know you are only ever going to use them once in this scope/context just remove the declaration and use the value where needed. Another quick note, I noticed you're declaring , , and towards the top but not using them until the bottom half of the for-loop. Why not just declare them right before you use them? That way it's obvious where they are being used. RuntimeDetails A key place you can reduce the amount of code in your for-loop is your instance of . appears to be getting its data from 3 core places: , , and . 

Formatting. This could have been just because of copy/paste transition, but in case it wasn't, your setInterval area of your code is a painful eye-sore. Try something more attuned to this: 

I probably got the purpose of the magic numbers wrong, but I think you get the point. Make them have a meaningful name. Worst case scenario you give them as good of a name as you can think of and place a comment above the const/variable declaration describing its purpose. Minor Suggestions 

Naming As BKSpurgeon mentioned, your naming is going to make it hard to understand this code in a few months (maybe even weeks). 

Most of these suggestions are style-based, but I think they can be helpful to you either way. Code Consistency Your if-statements have a mix of inconsistencies.