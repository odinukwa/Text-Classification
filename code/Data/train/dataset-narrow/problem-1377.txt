I'm not really sure, but somehow I feel like this can be an instance of a refused bequest, or some sort of breach of contract. I think you have few options here: 

I don't know what field represents, but I kept it. However, due to the fact that it's not readily understandable, you should reconsider why it's there in the first place. In any case, notice that there are only getters for this class, and no setters. This is because, like I said, objects most likely won't need to change, there's no point enabling the state transitions in them. Rules Integration I missed a critical aspect of the problem you're trying to solve with your code, which is the rules engine primarily geared towards not-so-technical people. However, I still think that having those rules in the system does not mean we should completely forget about good OO design. I believe that rules should augment your design, not hijack it. Since having a enum is quite restrictive, my idea is to define it instead as a value object: 

Admittedly, I don't know much about Drools, but guessing from how the rules are defined here, using this class, rules can be defined like (this is not Drools syntax): 

Hopefully there's a way to make this work both ways. Anyway, I don't expect to get everything correctly here, but I hope somehow I raised interesting points regarding your code structure, and domain design 

Haskell is great for it's declarative style programs and most of the first hundred Project Euler problems are easy to write in such a way. First of all, this problem is about ratios, so let us import module. 

Now you just squares of digits and get index to precomputed cache of chain results. Here is the full code which on my machine is 15 times faster than the original one: 

As lazy IO is considered deprecated, it is better to use iteratees/conduits/pipes to work with IO effectively and in compositional style. Here is an example using pipes: 

Note that in Haskell there is no single element tuple, so parentheses around are redundant ( but not ). 

I switched arguments in because this allows to define function more concisely and it is also correlates with update/insert from : they have collection as a last argument. Now it is possible to skip directly to and implement it in couple of lines: 

Maps as arrays In you are taversing heights 200 times. It is possible to emulate array with and do this in one pass: 

It is really better to have many small and named functions with type annotations. This not only documents code but also helps to localize type errors while developing. Please note qualified imports. It is considered idiomatic to modules like , , and some other. This prevents name clashes with Prelude. 

Using is justified only for big numbers, in your case using is enough and could be a bit faster. Here is another solution: 

As for the restriction about what their names can be, since it's not very convenient to use enum, then I'd suggest using a plain text file of comma separated values, added in the classpath. For example a file in the directory could look like: 

My personal view in methods like this is that instead of making them setters/mutators, you turn them into actions/features. So instead of having a that takes a from a client component, I think it would be a bit more sensible to have something like: 

This way, the code structure itself imposes the rule on what values are valid. In addition, by doing this, you won't have to specify the validation rules elsewhere. As for your class, I think that it should be something that captures some form of playing strategy. It can be as simple as one move player like what you have here essentially, or something more complex. The simplest modification I have for this would be to restructure it the following way: 

If we're speaking of actual efficiency (as in performance) though, I don't know how much more efficient pattern matching is compared to iteration of characters. However, this is much more readable. In any case, notice that the actual translation logic is wrapped inside the condition that the input string does not contain a number. This way, you return from the method as soon as you determine the input is unacceptable. To check whether the input string starts with a vowel, you can also use pattern matching like: 

You can read more about it here. And of course it is better to use instead of simple lists if the code is full of lookups. 

creates cycle from a list. skips some characters and returns list starting from . Try it in ghci ( is infinite so be careful with it). 

It is really nice that you provided domain-specific type aliases. This makes type signatures more readable and allows to easily change underlying data representation as in this case. 

Note that I'm using strict version of left fold (see here about vs ) and strict . This means that map of height counts constructed in single pass without thunks. 

( is the result of the last computation in GHCi.) There is a function in Prelude that captures such a process of applying some function to the result of applying that function to the .... and so ad infinitum. 

This is pretty nice code. I have two main concerns. The first one is about handling errors. You are mixing tree approaches: , throwing explicit , throwing implicit (as in ). It's better to stick to or â€” they are explicit and you can handle them in pure code. The second one is about dividing your program in meaningful functions each having single responsibility. Such functions are simpler and you can more easily compose them. For example, checks if dictionary is not empty, adds to pattern and matches pattern. It is better to split error handling from data processing (in this case by lifting dictionary check to ). Another one is : it parses string into list of digits and implicitly checks for nondigits (throwing useless 'no parse' error). You can skip this as you check for invalid symbols in . 

Ideally, class should be itself the , but since Drools seem to rely on POJOs and, the constructor for can't be made private, I think this is an acceptable compromise. With this, there probably won't be a need to have separate rule for validating unless there are expected, more complex checking. Also, since the application is checking an external file for values, there isn't a need to recompile or rebuild the code when a new Move like Jedi is introduced into the system. As for the rules on game proper, I'd say they should have been applied to a and not to separate players. The system doesn't even seem to be interested enough in Players to give them names like "Player 1", or "Player 2"; they merely carry a Move in them. A contains 2 objects, each from 2 opponents. The fact that there is a class seems to suggest there should have been a class to begin with. 

To me, this is a very simple construct that captures the essence of what a Player is: an object that returns a when it s. With interface like this, you can define many different types of Players, like, for instance, one that plays randomly. For example: 

This way, you have more control over the internal state of a given class within the context of a given method, while limiting the method's behavior to something that's more specific. It also makes the code a little more traceable in that if there is no requirement that says a completed can go back to being non-completed, you don't have to enable such state transition. I think it's also somehow more "poetic" to have an invocation like compared to . 

While generating walkers for the next journey you traverse list of subsequences twice. This could be not very efficient as there are subsequences for the list of length . Here is less readable but more efficient approach: 

Also have to note that I like your coding style: domain-specific type aliases and short functions with descriptive names make code easy to read. 

(Btw, why "movie"? we were talking about "films" all the way.) I'm using partition from to extract matching movie(s) from database. Also there is funny syntax I'm using to update movies: 

replaces letter by searching for another one positions away. I'll implement this literally by creating cycled alphabet and searching for letters in it. This is inefficient but allows to get taste of laziness. 

Now, when you have all of the expansions, you need to filter and count those with numerator longer than denominator. 

Snap catches all exceptions thrown within handlers and converts them into responses with HTTP 500 code. So error handling in your code is pretty fine (if you are ok with converting "postgres is down" or "invalid query" into HTTP 500 code). Side note 1: You are setting at the top of the handler. It is easy to forget to add/remove this code if you are modifying some part of handler that is actually writes response data. It may be more convenient to define helper function: 

Side note 2: Some libraries export functions with quite generic names (like or ), it is easier to read code when you have some explicit pointer about were function comes from. You can import library with alias: