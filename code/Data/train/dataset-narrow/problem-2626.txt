Question: Is there a way to achieve what I'm doing for any angle I choose such that I can create one building tileset (of 6 tiles) and create dynamic cities? Or, do I have to sacrifice the angle of my choosing and go with the simple 45 degrees? Thanks 

I'm creating a single player Web rpg that will store a decent amount of information about the player, items, map, npcs, etc. I have been developing html5, javascript, php, and the mysql database approach and saving/retrieving with json. Someone mentioned for my purposes, using 'localStorage' persistent user storage would remove much complexity and help with performance. Is localStorage the better way to go here? If I wanted to find out information about my players, or ensure that esch player profile is saved... can I rely on localStorage? What are the pros and cons of each? 

I'm building a game using Tiled tilemap editor. I was originally creating tilesets to stamp around and create my map in Tiled. Id prefer to create the base map in a Adobe Illustrator and stamp in the whole map as the level. Then stamp in trees or whatever on more layers as needed. What are the implications on performance doing it this way vs creating the tilemaps and stamping them in tiled? Example: Tile: 

While doing this gains an oblique perspective from the other way, it does change the vanishing point to be in the center of the map, versus towards the top left. Is this style of mixing perspectives common? Does it ruin the perspective or add to it? I thought that just maintaining the point of origin at the top left the whole time would be monotonous. To be clear, I wouldn't keep the two styles together. It'd be either like the buildings on the river or the buildings in the northwest. Thanks 

I'm creating my first tilemaps. Tutorials usually do 32x32px (example), but this tutorial did 128x128px, which made it easier for me to see without zooming in so much. In tiled, I did a 40 x 40 tile map at 128 x 128 px, and the map was 5120 x 5120 px big, versus the same 40 x 40 tile map at 32 x 32 px giving me 1280 x 1280 px in resolution. I'm making a web game from the typical HTML 5 (with canvas), JS, CSS3, and melonJS engine. Does it matter if I make 32 x 32 px tiles vs 128 x 128 px? Will it affect performance? 

I've created a playable oblique-styled adventure game in HTML5, using Tiled for tilemapping. I have a storyline set up, and am ready to make my final draft map. The game world will be loosely based on areas of East Asia. The issue is, my game is more dependent on player interacting with NPCs than on locations. How do you go about designing a map? Should I throw down the loose representation of a city, and then fit my game into it? I guess I'm not sure how you'd go about creating a meaningful map for an adventure game or of any special considerations. While I'm looking for an objective answer, opinions can help a lot too. 

I found an efficient way to build a city fast (or whatever you're trying to build) is definitely to go modular, and make indexed fittings for your buildings. For example: Single buildings, referenced as A, B, C, etc... 

I'm writing a browser-based RPG in JavaScript, HTML5 with Canvas, EaselJS, etc... I'd like to develop the back end data saving/user profile aspect now. This is a single player RPG where the player will interact with NPCs to solve quests. It is not online. I've developed a website in PHP before where I saved my own data in a database, and loaded the images to the page via MySQL and PHP. For a RPG, how would this process be? In my mind... I will try: 

But am not sure how to go about implementing this in my game. The overall world is 100x100 64x64px tiles, but the viewport (red box) only shows a small portion of them: 

But doing anything other than 45 degrees limits how deep my building is (how far back the building top goes)... so this seems to force me to create additional buildings if I want to make the top reach back further... Which adds complexity 

I tried selecting my next frame layer for my sprite and duplicating it, but it only ends up duplicating the first frame. How can I add my selected layer in my Layers to the timeline? 

But my tile appears completely distorted, and the 'isometric' map just appears as a top-down grid rotated 45 degrees: 

I'm creating an RPG / Adventure game with an educational foundation aimed at 7th-12th grade. I'm having trouble balancing quests and storyline with the foundational nature of learning. Meaning, since this is a true video game, and is meant to immerse students in a game world, it's challenging to implement the necessary repetitive nature of education/learning while ensuring the game itself is not repetitive. So, if you have a certain concept/chapter you want to engrain into the mind of a student, how can you design seemingly non repetitive/non linear quests to encourage review of those concepts. This question is inspired by my own interest to design an EdTech game, but also from Ted Talks like Gabe Zichermann's How Games Make Kids Smarter and Jane McGonigal's Gaming Can Make a Better World. Gabe brings up several sources, like Gamification By Design, but I'd like to know more sources that you can recommend that explain the components of an engaging EdTech game. 

I'm using Tile Flipping to reduce work. I thought this may be the issue, so I tested out a few tiles by themselves: Tiled: 

I am creating 64x64 px sprites for my game and want to test the animation play before saving the sprite sheet in game. I watched this video to learn, which told me: 1) Click Window->Timeframe 2) Add selected Frame 3) Click duplicate frame, then Tween frames in between. These icons on the bottom left of timeline: 

I've been creating an adventure game using 45 degree angled tiles to create a 3D illusion- aka oblique style. Using 45-degree angles... 

I'm making a map in Tiled. I quickly ran out of room in the north of my map and would like to "shift" the tiles down. I'd prefer not to have to redo each of the tile layers. Is this possible? This is a picture of my minimap. I'd like to move them down around the red square. 

I'm making a 2D, oblique-styled sprite based RPG. My game does not live in a 2D matrix (like Tetris), rather it's sprites animating over a tilemap. I am trying to set pathing rules for NPCs. I've considered a few methods to do this but am not sure on the path I should take (no pun intended). The NPC's trajectory is set by calculating the angle between origin coordinates and next coordinates and moves at that angle. I'm sure this will lead to blocky movements as they move along an array of coordinates along their path. So, to set pathing rules, I was considering the following approaches and would like some direction given my style of game: 

Or, I could generate a pixelated version of the in-game sprite within a grid to begin with, so I would already have the mappings, like so: Minecraft Pixel Art I'm not sure: 

I'd like to separate a 64px x 512px spritesheet into eight 64px 64px images in Adobe photoshop cs 5 so I can use a Texture Packer image atlas rather than a fixed spritesheet. 

It was also suggested using the Rapidly Exploring Random Tree algorithm, but again... not sure if this is overkill for my game... and what the performance hit would be. Here is a snapshot of my map. The red arrow is a sample path. The blue lines are collision rules defined around map objects. 

I'm making an RPG and want to make npc ai to navigate the city. I am using polylines for collision detection, and my map is 2D, but oblique styled. I am considering using the A* algorithm to help them navigate. 

The player can then choose to attack that given body part. To do this, I was thinking of adopting the "grid" method, and put my image within a 2D array... with each region of the body mapped to a certain square, like so: 

I think I found the best way to do it with the least amount of tiles... All you need is 6 distinct tiles, composed of polygons: 

Hi, in your example (here), your Tiled grid is angled down. As you can see, mine appears Top down. How do I configure this?