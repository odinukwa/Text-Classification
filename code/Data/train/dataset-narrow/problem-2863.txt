I know that this does not really answer you question, but bear with me: Why not (pretty much) every format? Use Assimp: $URL$ There's examples of loaders using DirectX - I found one here: $URL$ In addition to the Assimp Viewer shipped with the Assimp project. That should get you started using all the formats Assimp supports: $URL$ It's probably possible to serialise the meshes as XAML - I bet there's code for that out there.. 

The domestic market is huge in the U.S. and thus it's much easier for any company/industry to succeed. In Europe, you have to cross borders to get a market. It's not really directly related to the game development business. 

May I suggest that you buy the book Artificial Intelligence for Games by Ian Millington - it's excellent! :) $URL$ The source code is at Github - MIT license. Of course, if you're not using C/C++, then this might be less relevant. But really an awesome introduction to the world of Artificial stupidity/intelligence. Things you're going to need from it are steering and state machines. For starters. 

Unity3D is developed using Mono, so of course you can! Just be careful. Like the others said: test your code as often as possible on 'the other OS' - and by that I mean daily. Unity is available for Windows and the Mac, but since Mac essentially is unix, I guess it's only a matter of time/effort before Unity can target Linux.. 

$URL$ Check section on attribution. It appears you do not have to show the Unreal logo at startup, just mention you used the engine in the credits. 

Unity is pretty smart about keeping stuff around that you need in the future. What's more difficult is telling it when to get rid of stuff you don't need anymore. So yes, once this texture is loaded, it will recognize that and not load it again provided something hasn't removed it from memory in the meantime. 

Ok, I think I have it. Set the Canvas to use "Expand". No messing around with text box sizes or anchors, it just seems to work. To be absolutely clear, I am still using the Aspect Ratio Fitter to force my Panel to maintain its aspect ratio, and it's set to Fit In Parent, which is the Canvas, and that is always the size of the screen. 

The Debug.Log is just there temporarily, to verify that the sounds' loadState is "loaded". It is, every time they play. But the first time they play on my iPhone, there is a noticable delay before they start. After playing the first time, they work fine. What am I supposed to do to get these sounds to preload properly? I have their "Preload Audio Data" boxes checked in the import settings, and they're set to "Decompress on Load". 

My advice would be: Do! But only if you have a use for it. No need to create a DSL if you are just going to use it yourself - internally. Galaxy is the scripting language which the Startcraft II editor is using. It's a prime example of a domain specific language. It targets game designers rather than programmers: 

Take a look at this OpenGL getting started page: $URL$ You'll see that The Communist Duck is right: it's just a matter of downloading a header or two from the extension registry: $URL$ However, as he also said, it might be easier for you to download an extension handler which does all the gritty work for you, like GLee - or GLEW: GLee : $URL$ GLEW : $URL$ 

Sample Tutorial Lisp is the perfect language to use to create domain specific languages, but there's other options, of course. Like Boo. That way your designers/modders don't have to learn programming, even if it's just Lua, it's still programming. Edit: Let me add that a DSL can be implemented in a scripting language - it's not synonymous with not using a scripting language. Especially if you are using Lisp or similar, since it lends itself extremely well to create domain specific languages. 

Use the profiler to do detailed checks on these things. But you're best off using primitive colliders unless you really need to be able to shoot a bullet between someone's arm and his side, and possibly miss. For most purposes, a simple pill shape is good enough for character collision. 

This, as far as I can tell, takes the ground normal, rotates it around the y-axis so that it shows the proper perspective given the camera's facing. Then it tells that parent object to look in that direction, which aligns its z-axis with the rotated ground normal. This works, except the object I have also rotates around the y-axis depending on the orientation of the camera. I thought that I was throwing that information away in the second step by keeping only a Vector3 aligned with the ground normal rotated for the camera position. So I want this: 

But if I say "Best Fit", the texts aren't the same size, because the boxes are big enough to allow the shorter text to be bigger. The only way I've been able to fix this is to adjust the sizes and anchors of the text boxes by hand. Is there an automatic way to do this? 

$URL$ I agree with these remarks and think it is a stellar discussion of why DirectX is better than OpenGL. That journal is in response to David at Wolfire. I hope that serves to balance it out a bit. ;) But in general, if you're using a cross-platform, cross-API framework: Use DirectX on Windows and OpenGL on *nix. 

I have problems with that too, actually. Let's say you have a Game. Instead of making 'Game' a state like 'Loading', 'Main Menu', etc. - IMO it's better to let Game have several states: "Loading" - "showing menu" - "paused", etc. The Game is still running, but when it shows the main menu it would be in 'show menu' mode. And when Game is not in any particular state, it's just running. It makes much more sense, at least to me. :) 

The best way of having your programmer art replaced by real art is to carry on making a great game. Pimp your game as often as you can - concentrate of game mechanics first - then I am sure that you'll attract some artist types - maybe even for free (join the team). This approach is probably the only one if you're short of cash, and/or want to stay free. Programmers art could make sure that you concentrate on the most important aspect of your game: the game itself. There are of course places where you can grab models and art under an open license, but I would just carry on making a game if I were you. Don't bother spending too much time trying to learn how to be an artist yourself. That skill takes years.. 

TCP guarantees delivery, and when there are problems that aspect will cause hangups as the whole thing stops to make sure everything got through. If it's going to be just a few dropped packets here and there, UDP will keep your speed up. 

Put the profiler on it. Try a huge sheet and a small one. Measure the difference. This is the very best way to answer these questions, since you don't want opinions: you want answers. Doing this test yourself is the best way to get an answer, since it will be for your actual use case. 

Your TryToCreateNewMiner function can call it again. If your RandomPercent calculator keeps returning true, the callstack gets deeper and deeper. TryToCreateNewMiner->Miner->StartDigging->TryToCreateNewMiner 

I have a Panel with an AspectRatioFitter on it. In there, I have a vertical layout group, with three buttons, Standard Mode, Speed Mode, Chaos Mode. I have the Layout Group's anchors set to keep its size relative to the parent Panel. The problem is that the text doesn't resize when I change the screen resolution. You can see it's cut off to say "Standard M" in the bottom image. 

A good resource manager is key to how well - and how flexible - your game 'engine' is going to be. Not only does it solve a lot of problems with low level resource management, but it also helps to ensure that resources are loaded only once, and then reused if they are already loaded. If the resource system is abstracted well, the underlying details can wary between file system, physfs storage, sql even... You just request a resource, and it's given to you. No need to worry about resource IDs and stuff like that. Duplicate resource conflict handling, etc. Let the resource manager sort that out. Depending on how you design it - if C++ then make friends with your scenemanaging class(es) to ensure that ownership is properly handled. Resource pool ? No problem. Forgetting to release resources? No problem. Same interface to resources no matter where they are: memory, disk, archive, network. No problem. Do you want streaming? Threading? Let your resource management hub take care of that. And you can rest assured that it will inform you when the resources are ready to be used. Ogre 3D has a very flexible resource management system, but I am sure there are others 'out there'. 

If you are 100% sure that the NPC's level will always be enough to specify their stats, then level in db/calculations on client is a good option. Less hitting the db means your game scales better with the number of players. However, it locks your design into this box. There are ways to patch on differences not related to level at a later date, but this could cause problems as the rest of your game might not be coded or designed with this in mind. So this decision depends on how likely it is that the current design will be the final design. 

Getting legal advice on GameDev.StackExchange is not a great idea. Having said that, if a work is truly in the public domain, you can do whatever you want with it. 

The function returns regardless of whether or not the components intersect. However, the two closest points returned overlap when they intersect. I think this is a bug in the function. Have reported it to Epic; we'll see what they about that. This works very well for rectangular solids, spheres and cylinders (the three types of PrimitiveComponents).