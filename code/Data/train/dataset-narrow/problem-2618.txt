If this was not the answer you're looking for, and you actually mean something more complicated by an "arc'd jumping method", then please elaborate! 

It's full of emergent gameplay! Empower the player to be able to build and break anything, give them a loose goal (survive the night) and the means to do it any way they see fit, and everyone's experience is different. This is in stark contrast to the majority of games today. I think it also helps that it can be played in the browser as an applet. You can tell someone about Minecraft, and then show them just by going to minecraft.net and clicking a link, from any computer (with Java installed). Don't underestimate the power of ease of access. I think this is what helped get it started, but now of course everywhere you turn there's an article or a YouTube video about it and it might not be as important any more. 

jQuery and MooTools are awesome JavaScript libraries; I prefer jQuery myself. Either one will assist you in your JS game development if you use the DOM. If you go with Canvas rendering, I still think you should use one of those libraries, but you will need to learn the Canvas functions. Here is a tutorial which introduces you to canvas by creating a Breakout clone, so it might be exactly the kind of thing you're looking for (and it uses jQuery). Animating sprites is a matter of changing an image src, or preloading several images and swapping them out, or in a canvas just drawing frames of an animation. The above libraries can help with any of these cases. The libraries also help with input (look into events such as onkeypress and onmousemove). For preloading resources, I've seem some games that use a single "sprite sheet" image (here is the one for Google's Pacman game). I believe they basically create a DIV of one tile size, with the CSS background-image property set to the sprite sheet and the background-position property set to the offset of the tile on the sprite sheet. I haven't seen a library that will do this for you, but jQuery or MooTools can help you as far as dynamically creating the DIV and manipulating its CSS. Otherwise, preloading images is a matter of creating tags of the images you want preloaded, and not adding them to the page (or adding them invisibly). Here's a blog post that has some code for a function using jQuery to preload images for you. SoundManager 2 seems to be the JS sound library to use; I know Vanthia uses it, and Google's Pacman used something similar (or at least the same technique, of using a hidden Flash file on the page to play sounds). For networking, jQuery can handle AJAX for you, or if you want much more real-time networking (and have the server to do so), look into JavaScript sockets. I don't know if there's a stable library out there for it, but you might look into this or this. Essentially it uses a hidden Java or Flash file on the page so that you can do true socket communication with JavaScript, which is much quicker than AJAX polling and slightly more efficient than "AJAX Push". However, most likely, AJAX Push will be what you want, and APE (Ajax Push Engine) is probably the library to use. Also, here is a Google tech talk about "Building a JavaScript-Based Game Engine for the Web". It looks neat. 

Lastly, don't take this advice as absolute truth. I haven't written a multiplayer backup system. I am working on an online "game", which is why I have thought of this and wrote out my thoughts above, but I haven't gotten to the stage of implementing this yet. So this is written without actual experience, but after lots of reading and collecting knowledge about the topic. 

I can't vouch for iPhone, but in Android, a simple application with an Activity that just has one WebView would do the trick. The activity would look something like this: 

In your constructor, try , and you might also need . If that still doesn't work, instead of giving the frame a null layout, try giving it a border layout and add in the . I wonder whether ImageIcon is not returning a proper image; try following the trail on Reading/Loading an Image. Looks like you're using BufferStrategy correctly. You could try commenting out , but I think that's correct. 

But that's obviously not quite what you're looking for. Unfortunately I've never heard of any official name for it, but I'm not an AI expert by any means. All I know is that I most commonly see it spelled "aggro", which is of course short for "aggressive", which has two g's, not one like you spelled it. 

If you're making a Vector class, then I presume the class will store the description of a 3D vector. 3D vectors have x, y, and z magnitudes. So unless your vector needs an arbitrary w magnitude, no, you won't store it in the class. There is a big difference between a vector and a transformation matrix. Given that both DirectX and OpenGL deal with matrices for you, I don't typically store a 4x4 matrix in my code; rather, I store Euler rotations (or Quaternions if you'd like - which coincidentally do have a w component) and x,y,z translation. The translation is a vector if you'd like, and the rotation technically would fit in a vector as well, where each component would store the rotation amount around its axis. If you want to dive a bit deeper into the math of a vector, a Euclidean vector is just a direction and a magnitude. So typically this is represented by a triplet of numbers, where each number is the magnitude along an axis; its direction is implied by the combination of these three magnitudes, and the magnitude can be found with the Euclidean distance formula. Or, sometimes it really is stored as a direction (a vector with length=1) and a magnitude (a float), if that's what is convenient (e.g. if the magnitude changes more often than the direction, it may be more convenient to just change that magnitude number than to take a vector, normalize it, and multiply the components by the new magnitude). 

(the above is, of course, pseudocode) So the users table is where user details are stored - username, hashed password, etc. The dreams table is added to by the designers, and you can make a nice designer-friendly form that lets them write dreams and submit them into this table. And then the userdreams table is what ties the two together; each night you insert one row into this table per user, which has their userid and the id of the dream the user has (or more likely, when an user logs in you check if they haven't logged in since the previous day, and if not then assign them a dream and pretend as if the dream had been given to them overnight - but that's an answer to a different question). Does this sound like the appropriate answer to your question? If not, please try to clarify a bit more. As I said, it's difficult to tell exactly what needs answering. 

Scott Bilas worked on Dungeon Siege and wrote a paper, "The Continuous World of Dungeon Siege". While Dungeon Siege is not a MMO, it does have a world, and he talks about player positioning in his paper. I found it to be a great read. Here is the relevant section: 

It is important to note that Flash cookies (or Local Shared Objects, as they are called) are different from browser cookies stored by webpages and JavaScript. From the Wikipedia article on Local Shared Objects: 

Well, the keyboard doesn't exactly have a "rollover" since it's not a mouse. But you can use the keydown event to change the image to the rollover image, and the keyup event to change it back to the normal image. Then put your code (which you pasted in the question) into either keyup or keypress. This should make the behavior you're looking for. By the way, what happens when you press backspace before entering any numbers? I suspect a JavaScript error will occur; look at your . 

Well you already listed good examples of casual games with good background soundtracks. So play those games and pay attention to qualities of the music, such as the instruments used, tempo, volume compared to any other sounds in the game, notes/chords (major vs minor), and so on. Really pay attention to the subtleties that set the music apart from other background music; you might want to play other games where the music is distracting or the game is more action-oriented, and compare those qualities to see exactly what makes the social game music better for concentration and calmness. Then apply these qualities that you have now noticed to your own music composition, or your search for background music, or convey the qualities to the person you are looking to hire to do your music. 

Well, it's certainly nothing game-related, but it technically is possible to take multiple (2D) photographs of an object and use Photosynth to approximately recreate the object's 3D space. It's pretty neat, you should check it out. Otherwise, there are 3D scanners but they are typically pretty small-scale. You certainly can't scan a large area with one of those. There is also such thing as a stereo camera, or a camera with 2 (or more) lenses, which can therefore capture "3D" data. But I don't think these have progressed as far as being able to create 3D models out of the dual images they create, and even if they did, the models would only be from one viewpoint so they'd be incomplete just as Photosynth's are. I would think the latest 3D movies use stereo cameras when recording in order to capture this effect, but they could be using something else (a camera with a sonar attached or something, maybe). The best thing to do is to create it from scratch. Take pictures of textures and unique objects (signs, etc.), take note of dimensions, and take whole-scene pictures for reference. Then have a 3D artist sit down and recreate it in 3D. Any automated large-scale 3D model creator, if one exists, would be wildly expensive. 

Programming Role-Playing Games with DirectX walks through creating what the author calls a "Mad Lib Script System", complete with the editor and the module of the engine that is created over the course of the book. It would surely take some tweaking and doesn't generate LUA so it might be totally unrelated to what you need, but on the other hand, its functionality sounds a lot like what you describe: It takes a dictionary of different possible actions, and then scripts can be created which are just lists of the actions with the blanks filled in, like a Mad Lib. It's made to be extremely user friendly. Here is a screenshot. I could not find the code online but it does come in full on the book's CD-ROM and of course is explained over the course of one of the chapters of the book (Chapter 10). (this is a Windows executable, but I ran it in Wine to take the screenshot, thus the Mac titlebar and old Windows 2000 look)