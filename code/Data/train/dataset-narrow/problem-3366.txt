---------------------------EDIT--------------------------- Could the differences be the OS? I made it as minimal as I could get (1.6 GB on a 8 GB sd card) but I saw a screen shot of someone playing a game on a NUC running ThinOS getting solid 55 FPS? what could this be.. ---------------------------EDIT2--------------------------- This is what I mean with my problem ---------------------------EDIT3--------------------------- Upon experimenting with a different VM (newer version running Windows server 2012 r2) I found to still have the EXACT same problem but the FPS was skyrocketing on a solid 30/40 FPS, so FPS is out of the equation... here, beneath this edit you will see the terminal output of the test on the Ws 2012 r2 version compared to the ws2008 r2 version ---------------------------Comparison--------------------------- Left = 2008 r2 (locally but in same building) Right = 2012 r2 (locally but in same building) 

I have a problem with my raspberry pi, the screen I'm working on with 1920x1200. The issue is that when I enable overscan using set_overscan from $URL$ it goes well at the start, but when I restart the whole thing resets itself. Also sometimes it does save and sync but when I reboot the issue returns, how can I sync/save it so it remains? I use a raspberry pi 2b and my os is Ubuntu 14.04 

Use directly after plugging it in. Ensure the phone can establish a data connection over USB - you may need to enable debug mode in Settings. Compare /dev filelisting before and after to see all device files for your phone. , plug it in, wait 10 seconds, , then . If in doubt whether the phone even registers on the Pi, issue . Pi1+2 will not be able to supply enough current for charging, and that may foil your worthy endeavour. 

Use a TP4056 IC with a DW01A chip. It will have a microusb port and power input, a battery charge output, and a battery output. It will protect against overcharging and overdischarging. It even has current limiting. IIRC the SG90s use 450mA loaded, which is no problem for this IC. 

Each relay uses ~0.3W when closed (NC). That's ~2.4W, so you need a power supply of at least 5V/500mA, but more is better, up to 1A. You may need to power other stuff. Use a phone charger with a stripped USB cable. Connect positive lead of power supply to VCC, and negative to GND on relay. Use common ground, i.e. connect the Pi's GND to the power supply's GND. Do it on the relay board. You can also shift a jumper to avoid needing this. Since this board is 5V logic, use a MOSFET/BJT to turn on each relay, each using 5V on C-E or D-S, and 3V on B/G. Or use a levelshifter. It will take you 30 minutes to solder a perfboard with 8 switchers, and several days to get a hold of a level shifter (if you don't have one), so that's up to you. The board has optocouplers and diodes, so you don't need to worry about flyback. Example: Connect 5V signal to positive terminal of relay (S+) and from relay GND, connect to DRAIN of a 2N7000 N-MOSFET. Wire SOURCE to GND. An N- MOSFET likes a 4K7 pull-down resistor, but a BJT (like the venerable BC239 NPN) doesn't need this. For that you need a 1K resistor to BASE. Use what you have. Let me know if you need clarification. 

---------------------------EDIT4--------------------------- Second test for today, I was interested to see if maybe the Desktop environment (LXDE) was taking too much Ram/ Video ram from the pi and thus caused the visual glitching, so I restarted, this time using the Ubuntu 14.04 minimal image like before but only installing openbox for a true minimalistic OS, this has proven succesfull in a 3 minute test so far, going to monitor it longer for today ---------------------------EDIT5--------------------------- SUCCESS! for now atleast, the raspberry pi (which i am using to post this edit) running citrix receiver, connected to XenAPP Running windows server 2008 r2 is working solidly for now, going to test it the rest of the work day to see if there is any 'anomoly', the funniest thing? it uses almost as much of ram and SD card space as the custom fully fledged Desktop OS. I'll be posting updates spread of the rest of the day, one now, one at 2 PM and one at 5 PM (when work is over so can be a tad later) and ill decide tomorrow if this was to solution or not STAY TUNED FOR UPDATES! --------------------------- Update 1 --------------------------- Still works, still going strong, hurray --------------------------- Update 2 --------------------------- I got it working it seems like LXDE used too much? I don't know... from my results from my system scanner (it shows everything of the system like ram hdd usage etc etc, it shows that openbox alone with tint2, citrix receiver and firefox use 1.2gb HDD space and 264,2 MB, guess.. that's that? --------------------------- Conclusion! --------------------------- My conclusion is that somehow LXDE (even though with XFCE4 it was heavier) uses too much Video memory, this mean that not enough memory can be passed to the citrix receiver thus causing the visual glitching. --------------------------- Advice! --------------------------- The glitching can be very annoying and on top of that reduce productivity of your employee. if you want to use the raspberry pi as a Thin client, don't do what I did, wasting many precious hours trying to figure out a problem while the answer is right infront of you, if you want to use this, ONLY install Openbox, firefox and citrix. 

RPi3 support for OpenBSD is incomplete. Not even old Beagle has USB code, after 5 years. Expect the same with PI3. Use FreeBSD flashed images you can find here. Many things work for RPi3. NetBSD works 99% IIRC. See here. Unless you need something specifically *BSD, Raspbian is better. On the FreeBSD images, SSHD is enabled on first boot, so you can immediately login and resize fs, add packages etc. Good luck with that. 

I’ve used a lens from quality sunglasses over the lens of an outdoor installation, and after 3-4 years it has suffered no noticeable loss in picture quality (detail, contrast, colours). So, as the above answer suggests, a rudimentary filtering out of the useless UV would be helpful. Have a look at outdoor CCTV cameras for industry use (factory perimeter e.g.). The polarized glass is one thing, but these cameras stay online for a decade in all weather. It’s just a 640x480 streaming ethernet (I think I used wget+curl to grab jpgs, and perhaps vlc to grab the stream) camera with manual focus, so installing the overlay (the sunglass lens) was trivial. It faces direct sunlight max 5 hours per day. There has been no noticeable degradation in the images. I have not made a baseline with an unfiltered lens. Google UV lenses for CCTV cameras; your wide lens needs something bigger. Trivia: the PV / solar panel crowd have done a lot of interesting research into what diminishes the effect of their panels... I would test a filter over a 5V cell, and see the current with a multimeter across a low-ohm power resistor. Anything that gives high transparency, but very low current - compared to the unfiltered baseline - would probably be a good filter. Glass with a metal component alone diminishes effect a lot. Also know that professional installations often utilize a small heating element (a power resistor would do, or some nichrome wound around a ceramic element) to ‘push’ out dampness and condensation. It would be prudent to use a thermocoupler (MAX6675 on I2C is ok, and low-power) to turn that heating element on/off w. a MOSFET (IRF3202 is very good, but perhaps overkill, needs 10V to gate for full on, NTD4906N is logic level and a better choice), or a DS18B20 (onewire?) A DHT22 (I2C) would let your system know both temperature and humidity, and then trip heating element based on ambient humidity. Essentially, humidity is dissipated if internal temperature exceeds external temperature. I heard this from an electrician who installs camera systems. To further protect electronics, they can be coated in nail polish (Great scott made a youtube video about this), or embedded in epoxy. Brought to you by the Awful Hacks dept. 

I have a problem running Citrix receiver on my raspberry pi 2B running Ubuntu 14.04 lxde custom spin off (it litteraly only has the core essentials of LXDE and firefox that's it oh and lightdm) It was designed to be a Thin Client (I know its possible), so I installed Citrix Receiver. It connects, disconnects reconnect you are able to use the apps inside the VM (XenApp) (Windows 2008 R2) The problem is when you ALT+Tab to a different window (full screen to full screen) you only see parts of the new window and the old one, when you press the new window bit with the mouse the old part disappears. So I ran a test to see what was troubling it, the CPU is only 54.2% under load, the screen response time is 72MS (im used to way more so no worries there) the receival of the data is OK aswell as sending it, but what bothers me is the FPS, the max fps I got on a HDMI to VGA converter connected screen was 14.0 FPS, and on a direct HDMI TV of the same resolution I had 20 FPS Max, I tried everything posted on the Citrix forums already, so I turn to you guys, maybe you know what the solution to this problem is? These are the results of the citrix test 

In each example, I'm left with a sysroot folder or toolchain folder which is different to that in the tutorial, which ultimately prevents me from configuring a Device/Kit in Qt Creator. Does anyone have a recent cross-compile guide, that they've managed to use successfully in the last couple of months? The above guides are all fairly old, and no matter how many attempts I make, I just cannot get it to work. I've been writing the steps I've taken as I've gone, so I fully intend to post an updated how-to guide once I've got it working, but I'm going to need some assistance to get there. Thanks! 

G'day, I've been attempting to setup a cross-compile workflow for the last week, and have not had any success, despite the numerous guides and how-to's online. My host machine is running 64-bit Ubuntu 16.04, my target is a Raspberry Pi 2 running Rasbian Lite. I've tried each of the following guides numerous times, wiping and reinstalling both Ubuntu and Raspbian Lite each time: 

My web-based application utilises HTML5 for various dynamic elements (img, video, etc). I'm hoping to be able to use RPi's for system deployment, but I can't seem to find a suitable mix of browser/file format which allows for HTML5 video playback. I've searched this issue extensively online, and the 'new' epiphany web browser was/is supposedly the answer. I've tried 'testing' file format compatibility over at html5test.com, but haven't been able to play any of the 'compatible' files on any of the 'compatible' browsers (I've tried both .mp4 and .webm [both local files and URL-linked] on Midori, epiphany, iceweasel, etc.). The best result I've had has been in playing a ~10Mb local .webm file in iceweasel, which was able to manage ~1 frame of the video every ~3-4 seconds. I've increased the allocation of memory to the GPU, which hasn't offered any real improvement. I'm starting to think that the RPi just isn't up to the task of playing HTML5 video under Raspbian? Would installing one of the Ubuntu OS options for the RPi offer any benefit? 

Have a look at the Ubertooth One from Great Scott Gadgets; it accepts 2.4GHz antennas with RP-SMA connector - the type usually found on SoHo routers... $URL$ $URL$ At a glance, current consumption ranges from 90 to 220mA, so if not using a Pi 3 you may need a USB power injector, like this one: $URL$ 

Unload the bluetooth drivers with if you're concerned. Stop the bluetooth daemon etc first. Make the scripts concerned non-executable, or use / to permanently disable bluetooth. 

Use a voltage divider, or a 10V zener diode. My 10V zeners drop 9.49V, and would in your case yield 2.51V; a HIGH on PI. Optionally use a PNP+NPN pair to close the connection from the 12V line to the Pi when polling the voltage, or there will be a bit of leakage. 

Any 5V buzzer will do. I use one from a dismantled microwave oven in my desk alarm clock. Here’s a link to a good one: buzzer It’s the exact same one I use. Pardon me, but those smaller buzzers you mention are cr?p. Microwave buzzers are always louder, cooler, and look sweet. When singularity is achieved, I’ll be sporting a gatling laser on one of my bionic limbs, and I’ll be using a microwave buzzer to alert raiders/others of their impending doom, when they jump the queue in the supermarket. I CURRENTLY use one on an arduino with the toneAC library (which can be trivially made to work with wiringPi), but you don’t strictly need it. It will make it last longer, using a weak AC current. Use a N-FET, like 2N7000 (S-G-D), or NPN like 2N2222A (E-B-C). For the 2N2222A, simply connect 5V in series with a 100 ohm resistor to a buzzer pin, the other buzzer pin to COLLECTOR of 2N2222A, and EMITTER to GND. Use a 1000 ohms resistor in series with a GPIO pin of your choosing, and on the other side of the resistor connect this signal line to BASE. When you bring that pin HIGH, there will be a loud buzz. I had to use a 150 ohm resistor to make the buzzing less annoying. Enjoy!