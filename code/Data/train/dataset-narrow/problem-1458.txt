Since I wrote this post, I have learned a great many things, including that R# is very helpful when learning better programming skills. 

Most queries don't indent the any farther than the and put the in its own line as well. Otherwise, this looks good to me. 

Right here, I adding a small padding so the font would have a small amount of space between it and the border: 

I have more menus to account for, but I haven't implemented going back to them yet as I do not have them fully implemented. What is really going on here is I need to programmatically select a menu to open it so I can select a menu item within it. If I do not open the menu, will not have , so the app will crash. This is : 

This is important for many reasons, including keeping your variables from leaking information to other sections of the program, releasing memory when you aren't using it, and more. 

For reference, these are the test cases that must pass: Attributes with parameters (no results): and Attributes without parameters or parenthesis (no results): and Attributes without parameters and with parenthesis (results): and 

Also, I should merge and as they are doing the same thing, although it will become a monster method that way. If I really want to keep them separate, I should at least merge them and only put the statements in their own methods. 

Ten, you can use and in loops. will exit the loop, while will evaluate the condition and start at the beginning of the loop. Using these statements can help you remove some of your flags. For example, instead of using to exit the loop when the condition is re-evaluated as the last statement in a successful loop, you can use . 

Methods This is a pretty straightforward program, but you should start separating unique components of your program and creating more methods. For example, you could create a method for input, a method for calculating the answer, and a method for output. Enums Another thing you should look into is using an to designate the selected operation. Using is clearer than , and there is a very limited set of data that allowed, which is demonstrated and enforced by the , which only accepts the allowed set, and is not enforced by an . Bug Your division operation has a bug: 

This is my basic C# calculator; I'm sure there is much that can be improved. This design is based on Bjarne Stroustrup's C++ calculator, a purposely be-bugged version of which can be found at his website. 

Finally, for your UI, you most likely want to label your radio buttons as what they are, and perhaps change your UI a little to accommodate the labels and still look good. I would recommend a ComboBox if you have trouble adjusting the UI to look good. You could then bind the or to a value in your VM and use a converter to change the value as needed. 

Second, please indent your code following the standard indentation levels of (usually) 4 spaces per indent level, with the inside of classes, methods, loops, statements, and a few other instances adding one indentation level. Third, be consistent with your styles. Right here, you use braces around a one-statement block: 

You have excessive, unnecessary comments. You wrote your code clean enough that you don't need them. 

Thread Safety Your threading is so messed up I don't even know how messed up it is myself. Sorry if I seem harsh, but threading is very, very hard to get right, so please understand I'm not blaming you. For example, you are adding clients in one thread here: 

First, you should have each function do one thing, and have it do what it says. In your function, you get info for the entire class, and you also print it out, which prevents you from just getting the info and doing what you want with it without printing data out. Given the name, this function should only be getting the class subject. Second, you have doing way to much. should only be used as the entry point to the program, and it should delegate the work to other functions. Third, this looks like a good place to bring C++'s OOP into play. Why don't you look into making a for the class' data, professor, students, etc.? You could also make a for the students and keep a list of all the students in the class. Finally, you still have the magic constant in your code: . That should be a named constant variable in your code. Additionally, your code will be easier to read if you use spaces around your operators. 

Another thing you could do to improve the code is use better names. You have the inputs named as and . They do not represent users, but Roman numerals as strings, maybe would be a better name. also does not represent a total, but an Arabic numeral converted from a Roman numeral: . Finally, you do not support 'D' (500) or 'M' (1000). If you support these, you should probably add support for "CM" (900) too. Otherwise, your code looks pretty good to me. 

Both are s, and both have the same values. This tells me you should probably merge these into one enum. 

In your method, you have three options, and you check two of them with a statement, and put the default outside the statement. statements have a built-in method for this situation - the case: 

Finally, since you are writing all the values into the log file, and are not removing any of them programmatically, I would probably not log to the screen. If you really want a notification, just set a Boolean value and write to the screen once after everything is done and logged. 

First, you aren't cancelling this (what if someone s it when it is ? They will if you let them). If someone s the when it is being used, what's going to happen when something checks to see if cancellation has been requested? The cancellation token source you are using has been disposed, right? Well, due to reference-type semantics you actually just gave overwrote the old instance, which is presumably now free for garbage collection, with the ed-up new . Now everything that references this actually just starts using the new cancellation token source. Believe me when I say that this can be the root of an interesting, confusing bug if you aren't thinking; I had it eat several hours of time once. Currently if you a cancellation token source without ling it it reports that cancellation was not requested. This is unlikely to change given it has been the given behavior for so long, but may or may not be part of the specification. If this was me, I'd check to see if the state is and if it is, not do anything if a is requested. You may need to have more custom handling here if/when you implement as well. 

First of all, you can figure everything out if you know the distance between the values of , , and . 

I don't like how you do all your work in . Move your work to dedicated, reusable methods that do a single thing. 's job is to start the program, not to do all the work. 

Second, rather than creating a new variable and iterating backwards, I would write my second loop like this: 

Use more vertical whitespace (newlines); your code is hard to read because I can't see which parts are logical blocks. Optimized code doesn't need to be (and shouldn't be) hard to read--leave that for obfuscated code. 

This follows standard Java brace formatting, although some programmers place the on a separate line. I am sure your code can be improved in its execution as well, but these are more pressing issues for now - make your code easy to read, and you will catch more bugs and be able to improve it on your own, as well as getting reviews on content instead of style. 

First, you are usually good about naming your variables, but you still have a few single-letter variables in here, , , and , to name a few. These should be more descriptive of what they are. Second, your code would be a bit more readable if you put spaces around your operators, like . JSLint says you should do this too. Third, I think your algorithm can be improved. The very highest number that can be created is 2^18, which can only happen when you have 2^17 in one of the corner squares, and 2^16, 2^15, and 2^14 along one of the edges. Then, you need to 2^13 above 2^14, 2^12 next to 2^13, and so on: 

You have one letter variable names scattered around your code: . Please change this to be more descriptive. 

, , and are just s of s (they can't be s because they are bound to XAML objects that need to know when they are updated): 

Kill dead code, don't comment it. Next guy along to read your code will wonder why it is there, whether someone is in the process of fixing a bug and the code shouldn't be touched, or worse, was in the process of fixing a bug and never finished. If you need to remember this code for some reason or other, use source control. 

Not used variables You don't use , , or , so you can remove them. Naming Your variables names should tell the reader about itself. doesn't tell me anything about what the variable is or its purpose. Indentation Your indentation is somewhat sporadic. You should indent one level for each loop, if, function, etc., which will help improve readability, which helps prevent bugs. I'm not an expert on VBA or Excel, so I'll leave everything else to the experts. I just learned what I know by working on the Rubberduck VBE addin. 

That is not a good comment. A comment should say why the code does something if it is not clear and the code should say what it does (if the code is unclear, you can use a comment, but this is also a signal you should write clearer code), this comment is just plain noise. If you are using the comment to remember what the code does, not just because some teacher/book said to, a comment here is perfectly fine: 

After the block, I have the code to select the item that the user wants to go back to and set the navigation flag to false: 

Also, use braces. VS 2017 automatically offers to put them in, so you can fix everything in the project at once and just use them in the future. 

This isn't really an issue, but I would probably initialize first because you write the coordinates as {x, y}, so this keeps that order: 

First, your loops are evil to read. It took me several minutes to figure out what the condition did. Essentially, you loop N times, where N is the Nth instance of the character in the string you wish to find the index for. Each time you loop, you find the index of the next occurrence of the character in the string, update the position to search from, and continue the process until the index is either -1 (no Nth instance), or until or , based on which side you are searching from. A simpler way to write this algorithm is as follows: 

My main concerns here are: A) Am I following best web practices, including my MVC structure? B) Is my choice of MediatR for the action system good? C) See anything else I could change for the better? 

Take the next character from the first string Count all instances of that character in the both strings by iterating over them. Compare the count of the character in each string. 

Sixth, you might as well use HTML5 formatting. This would change the into a . Then, just change the name of your style to: 

This will make your user enter a value until a valid entry is entered. However, this will only work when the value entered is in the form , where is an integer and is a non-integer value. If the user enters , , or it will only input the part and leave the other part in the stream. To validate against these values, you can test the input more rigorously: 

ItemList, Back, and Forward are just s of MenuItems (they can't be s because they are bound to XAML objects that need to know when they are updated). 

It wouldn't help the code run faster, but it would certainly be easier to read if you used proper indentation: 

If there is no block and the block throws, the does not run until the exception is caught. It can be caught anywhere up the call stack, but it must be caught or the application will probably crash. If does not throw, the will be guaranteed to run, and if it does throw and the exception is not caught, your application will probably crash. Because of this, you should either place a catch in there or the block is not needed because both statements will run in order. 

Other than the fact that it would be somewhat expensive to add or remove a set of users using these extensions, rather than getting one DB instance, updating it, and running once, is there anything I should be doing differently? 

In the Minimax object code, you use good variables names. Not so much in the Board object code. Otherwise, this looks good to me, very clean, neat, and well documented. 

First of all, why do you have as a private field? You never use the value anywhere else other than this method. You should scope that tighter to show exactly where it is used. Also, even if you did use it somewhere else, the value is only refreshed when you click the button, so you have the potential to be working with outdated data. There is a similar problem with and --even though you update these every time a button is pressed, you only use the value you read in the method for that button, and no where else; these too should be local variables. Second, guess what happens if I type in the textbox? will crash. You should use instead. Thirdly (naming again), how do you expect me to know that this method is for the add function without reading it? Suppose you just hired me, and I was handling a bug report (coming up in just a bit) in the division method? I now have to spend four times as much time finding the bug and fixing it if I start at the top of the file and work my way down, instead of just reading the method signatures. Fourthly, your button handlers are all incredibly WET. You should consider doing something like this: 

This looks very clean and simple, which is always* a good thing when programming. First, you don't save state, nor do you have long functions--each function does what says in a couple lines. One nitpick is your naming: 

Excess spaces don't do anything except make your eye scan more of the page to find the next statement. Data Your data looks awful long and similar. Is there any official source you could pull it from instead of hard-coding it? If there isn't, why don't you set up a separate JSON file for maintaining the data that your program reads from? Footnote "Child" in plural is "Children", not "Childs". 

There are a couple things you could improve here. First, you should specify a character encoding for the document, like this: 

You will need to assign that a value before you use it, possibly from the constructor. Another possibility, although I do not think you need this here: