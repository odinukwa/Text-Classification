The Pi is limited to the 50MHz "high speed" mode because it's slot voltage is fixed at 3.3V and the higher speed modes require lower voltage. I haven't personally tried a UHS-II card but it is supposed to be backwards compatible, so it should work (assuming the card manufacturer implemented the spec correctly). 

The comments on the security tracker entry you linked indicate that the vulnerability was not so much fixed as "not applicable". 1.0.1e-2+deb7u21 was released months before this question was posted but because there are no point releases during lts it was never transferred from the Debian security archive to the main Debian archive. I guess this is why they used 1.0.1e-2+deb7u20 as the "fixed" version in the security tracker. 

ribbon cable with IDC connectors. Good option if you want to bring all the pins to another board using a single cable. Downside is that the IDC connectors have wide sides which means you must use one that completely covers the header. single pin crimp sockets. These are commonly found on jumper wires and often used for prototyping. Not a great soloution for final systems though as connecting and disconnecting the Pi is a pain. crimp pins in larger housings. These are readilly available from large electronics suppliers but the crimp tools can be a bit pricy. You can also sometimes salvage them with wires always attatched from scrap PC cases. These can be a good soloution if you want to connect to a group of pins but not the whole header or if you need wires going off from the header to a variety of places. various styles of board to board connector including ones with long square pins that allow stacking. 

You want to use "DNAT" for this. You do DNAT in the PREROUTING nat table. Probablly something along the lines of iptables -t nat -A PREROUTING -i tun0 -j DNAT --to-destination <destination ip> 

In this particular case we patched the openssl package to enable arm assembler optimisations, some time later Debian did the same so we no longer needed to modify the package locally in Raspbian. Other than the version number, the extra changelog entry and obviously being built in a raspbian environment Raspbian's 1.0.1e-2+rvt+deb7u21 is the same as Debian's 1.0.1e-2+deb7u21 P.S. note that around the time this question was asked version 1.0.1e-2+rvt+deb7u21 was replaced by version 1.0.1t-1+deb7u1 which was in turn replaced in Febuary 2017 by version 1.0.1t-1+deb7u2 . With these versions there was no need to bump the version numbers in Raspbian since in dpkg version ordering 1.0.1t-1+deb7u1 > 1.0.1e-2+rvt+deb7u21 . * It has also been used in at least one case to bump a version number so it was higher than the version number of a package shipped by the raspberry pi foundation. 

BTW dsa is considered deprecated due to the 1024 bit key length limit and due to it's extreme sensitivity to bad random number generators. It is generally recommended to use rsa with a keylength of at least 2048 bit. 

Unfortunately every brand has it's own names for these things, so finding them in supplier catalogues can be a bit tricky. 

You didn't make an image of the whole card, only of one partition. If you were using a noobs based install then all you copied was the noobs data partition, you didn't actually back up your system....... If you were using a non-noobs based install then you did back up the main linux partition. You would need to create a suitable partition table on the target device, restore the image to partition 2 and set up a fat partition with the raspberry pi boot files on partition 1. 

The first thing I would do is plug it into your multimeter and see what readings you get. Note that current clamps (with very few exceptions) have to be clamped round the live wire only. Clamping round the whole cable will not work. You may be able to get a larger (and thus easier to work with) reading by looping the live wire through the clamp more than once. Then you will need to build an amplifier circuit, probablly based on a low noise op-amp. I would probablly use an AC coupled inverting amplifier design to minimise DC offsets on the output. This would then be followed by an envelope detector to convert the AC to DC. And finally a comparator to compare the DC voltage with a reference and provide a signal to the Pi. 

This is a known issue with the version of mono in raspbian (currently all releases), it is belived to be related to an incomplete implementation of the arm hard float ABI. It appears to have been fixed in more recent versions of mono upstream. There is a repo I put together with more recent mono packages. I believe they fix the issue with the windows forms textbox but there are some compatibility issues with other software. $URL$ 

Copied from my answer at $URL$ I think you have a speed mismatch issue. Unlike most twisted pair ethernet equipment gigabit media converters are usually single speed devices. I'm not positive as to the reasoning but I think there were substantial changes on the fiber side that made supporting both systems in the same media converter difficult. This is a problem as the ethernet controller on Pi models up to and including the 3B is a 10/100 device while your media converters are gigabit devices. I see four possible soloutions. 

It's difficult to tell for sure but I would suspect some kind of current surge on connection, likely related to one or more faults in power supplies and/or mains wiring. First off the mains wiring, for your own safety and the safety of your devices you should make sure that the earth (ground for americans) pins in all sockets feeding earthed devices in your setup are actually solidly connected to the buildings earthing system. If it is really impossible to make sure that the earth connections are solidly connected to the buildings earth you should at least make sure the earth connections of all devices in your setup are solidly connected to each other. Secondly power supplies (whether seperate or built into equipment). You need to connect an AC current meter capable of measuring very small currents between the signal ground on the output of each power supply (or for built in power supplies) and mains earth. I'm not exactly sure what the limits are for commercial devices but on any power supply of reasonable quality the measured current should be well under a milliamp. 

In the old days of TTL it took far more current to pull a pin low than to pull it high. So a pullup resistor could be higher resistance (and hence less power-wasting) than a pulldown resistor. It doesn't matter with modern CMOS but old habits die hard. 

Update (20171002 01:38): The fixes for raspbian Jessie and Stretch should now be in the public raspbian repo. The fix for raspbian buster should follow in a few hours. I do not know if/when there will be a fix for wheezy. 

Unfortunately apt's error reporting sucks. When it gets a redirect that leads to an error it tells you the error code but it doesn't tell you that it followed a redirect first or where that redirect took it to. I brought this up with the developers of apt but apparently it's difficult to fix due to design issues $URL$ Attempting to retrieve the url that gave the error manually with wget will often give you more information on what is going wrong. Sometimes it's a redirect to a bad mirror (if so please post details over on the raspberry pi forums). Sometimes it's something on the local network messing with the traffic. In the case of 404 errors it can also be outdated package lists (run apt-get update and check it suceeds) but that shouldn't cause a 403 error. If the problem is a bad mirror then replacing mirrordirector.raspbian.org with archive.raspbian.org or a manually selected mirror in /etc/apt/sources.list is a usable workaround. 

It depends on what you mean by "same dimensions". The PCB dimensions, location of mounting holes and location of existing connectors have not changed. As usual since components have been changed and rearranged, the board with components will not be exactly the same size and shape as before. This shouldn't be a problem for the vast majority of cases but there may be a few out there that place their mountings way too close to the board. Furthermore an extra connector has been added to support the new POE hat. This may foul existing add-on boards or cases that assume only low profile components will be found in this area of the board. 

The version of libc6 depends on the release of raspbian you are running, right now wheezy has 2.13-38+rpi2+deb7u10 jessie has 2.19-18+deb8u3 and stretch has 2.22-4 I would guess that your problem is you are trying to install packages intended for jessie on a wheezy system. 

Are you using a noobs based install? if so it sounds like you may have the correct video settings in the config.txt on the recovery partition but not in the config.txt on the boot partition for the individual operating system. 

Use a USB gigabit ethernet adaptor on the Pi. Use a gigabit switch between the Pi and media converter. Replace the media converters with 100 Mbps models. Replace the Pi with a "raspberry pi 3 model B+" which has a gigabit Ethernet controller. 

A boardcom bluetooth/wifi chip has been added connected to the SoC over SDIO (for the wifi) and serial (for the bluetooth). The LEDs and run header have been moved to make space for the wifi/bluetooth circuit (on the bottom) and it's antenna (on the top). The SoC has been replaced with a new model that sigificantly increases the clockspeed and replaces the A7 cores with A53 cores. This in principle supports 64-bit operation but no 64-bit kernel is available at this time. 

That message means that apt can't find autoconf in it's package lists. The package definately exists in the raspbian repositories so it seems like you have some kind of local problem. First if you have not run "sudo apt-get update" do so and then try the install again. If apt-get update gives errors post them so we can advise further. If apt-get update succeeds without any errors but the apt-get install still fails then post the contents of /etc/apt/sources.list 

Yes The pi is pretty much link any other linux system in this regard. It's difficult to give further advice without knowing more details of your setup. 

On a 256MB Pi it should theoretically be possible to replace the chip with a 512MB one but it would not be easy. You would have to carefully heat up the PoP stack and then somehow seperate processor from ram chip. Then cleanup the mess of old balls and solder down the new ram chip. Theres also the question of whether the firmware would cope, 512MB models have different ID codes burned into the OTP on the SoC from 256MB models and i'm not sure if the boot code would work properly if things didn't match. On 512MB BCM2835 based pis no upgrade is possible, the memory controller was designed to support 1GB but there was a bug that stopped it working properly at that size. On The raspberry pi 2 Mdoel B and raspberry pi 3 model B 1GB is the limit, the design of the bus strucure and memory controller in the Soc simply doesn't support more. If we see a 512MB BCM2837 based Pi (e.g. a Raspberry pi 3 model A) then I expect an upgrade to 1GB will be theoretically possible but again BGA rework would be needed (though you wouldn't have the fun of PoP) and I don't know if there would be firmware issues.