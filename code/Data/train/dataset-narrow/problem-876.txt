See also Is JavaScript a pass-by-reference or pass-by-value language? Now, if we look again at your implementation, we note that you already perform a regex test. We could perform a regex matching instead and get rid of all those redundant calls. I wrapped this new implementation in a documented function and ended up with: 

Since the worst-case runtime complexity improved from quadratic to linear, we see major performance improvements. The runtime is dominated by read query maximum retrieval speed. 

Filtering your operands with leads to strange effects such as returning for inputs with a zero such as and returning for input . Parsing: Instead of I recommend using the unary plus operator which is "the fastest and preferred way of converting something into a number" according to MDN. To split an expression into operands and operator, I recommend using robust regular expressions. A regular expression makes it much easier to understand which input strings will be accepted as valid and which input strings will be rejected. Implementation: First, the available operations are declared. Then, the input is parsed. For valid input, the result of the operation is returned. For invalid (non-matching) input, is returned: 

That's it. I don't see how we can leverage any other built-in method to shorten above task. Using JavaScript's built-in gets us pretty far, but it is missing timezone offset and millisecond options and introduces unwanted separators: 

Now, we re-introduce the matches against team wherever a team would have to play against itself (the red squares). We also have to fix the opponents of team to reflect these changes. This practically means that for each round we swap with where denotes the self-matched team (the red square): 

Your solution is a bit wasteful by generating and testing all integers in the desired range while you actually only need a handful of them. A big improvement in terms of performance is to avoid modulo arithmetic and increase the step-size tenfold whenever you finished iterating a sub-range 1-9, 10-99, 100-999 and so on: 

don't belong on the same namespace or module as the random number generator as they are not related at all. Namespace: You use the object for unrelated things: 

The test that almost precisely repeats the code under test indeed does not provide much value and is tautological. 

P.S. Many programming languages that have functional traits don't push a developer very hard towards writing functional code. This is especially true for the languages that acquired these traits as a result of evolution (like C# and latest versions of Java). Developers can still write imperative code even in Scala, the language does not prevent that. Obviously, there's no silver bullet in programming. There will always be bugs out there, no matter what king of programming language we're talking about. It's the human beings who write the code, and we are not perfect in it. Realistic expectations may help a lot to achieve satisfaction instead of disappointment. 

but what if the read asked for a block of characters instead of a single character, and then iterated through the characters one-by-one? Usually, it is way more efficient. However, the documentation says that the data is being read from the buffer, so there may not be any performance improvement at all. I'd still give it a try for the sake of curiosity. Another thing which might be slow is . Again, I'm not sure whether it's really expensive in node.js but it might be, since it deals with I/O. Try benchmarking your program without any console output invocation. If it works faster, you may collect all the messages in memory while doing the job, and dump them all at once when the program is done (since your input is really small -- 360 words). Minor performance improvement There's no need in three s, and es in . Assuming that all node objects in the provided array are in a good shape, you can sort using a fat arrow function that relies on simple subtraction operation. This approach is very commonly used for comparison. 

One thing that pops up in my mind when I see code containing repetitions of almost exact copies of structure is how can we achieve reusability? DRY principle is a very powerful thing that helps identifying and fixing code issues, until gets to the point where the other principles are abused. 

Of course, you might want to encapsulate above code in a function or even more versatile, a generator function and replace with . However, since you only have four different step-sizes of 1, 10, 100, and 1000 you can encode them manually and come up with an even simpler generator function as follows: 

I recommend removing the inline event handlers from your HTML document for a cleaner separation of markup and logic / JavaScript similarly to how you separate markup and style / CSS. You can then add all event handlers with a few lines of code as follows: 

Style Instead of I suggest the more self-documenting as the length can never be negative. Also, don't needlessly mix vs. for strings. Specification Right now you are returning a distance of when there is no path and a distance of if equals . I suggest following the common definition of path length and return and instead. You might also want to pass the alphabet as a parameter instead of having a hard-coded 'magic' constant in your function. It can easily be computed from your dictionary as . Also, you currently allow any word for while must be part of the dictionary. I recommend allowing non-dictionary words in both cases for consistency. Performance Your main performance bottleneck is the function. If you keep track of a set of open words which you haven't visited yet, you can replace that function call with a simple . Set lookup time is constant and thus much faster than iterating the whole array. You then have to pass the set to . The map is no longer needed. Another performance drain is performing string splitting via in the inner loop of . You can push that to the outer loop. Also, you currently treat as a special 'shortcut' case. You could generalize this to . Sample code Applying all those modifications to your code yields: 

To improve code readability and reduce the perceived complexity, you need to reduce nesting, remove conditional branches, simplify if-conditions and switch to a more descriptive style. The following 'techniques' help to simplify your code sample: 1. Exploit the nested loop structure: The first condition checking for line-breaks becomes whenever the inner loop terminates. Get rid of the condition and move the statement below the inner loop body: 

It's better in a way it helps avoiding OBOE. And by the way, another thing you can do is define it as an extension method in a separate static class, and will be able to invoke it as : 

This may be a bit more compressed at the cost of readability, which I provide as an option rather than recommendation: 

Syntax-wise I only can suggest a little improvement if you have a luxury of ES6. Screw the old school endless chains. They don't allow immediate assignment to the target variable/constant. In fact, that construction enforces using or instead of a (which helps avoiding bugs). 

Notice that may be implemented in many various ways, I just used the simplest formula that came to my mind. Here's a test console app: 

Instead of that you could rewrite your range function as a generator function (at a "cost" of it not being an arrow function anymore): 

If you are not planning to add the function that disables "moving" of an element, you may even not need a local variable holding the reference to a : 

P.S. As a minor side note, I want to mention that some devs like to explicitly mention the //... interfaces in the class' clause. I am not sure whether it's very helpful or a big deal, but at least the compiler will complain if the is missing while class declares that is implemented. 

used to be a field that is assigned in three different places: one in and two in . Each of these places could have a bug, and this code was scattered. Now it's calculated on the fly: 

Unfortunately, this is also less functional on its own (notice that the code uses a variable...). Worse than that, you can only 

, , and similar names are meaningless/hard to decipher. TypeScript just like JavaScript follows naming convention. Stick to it. I.e. should be , -- , and so on... 

There's nothing (obviously) wrong with your code. You deal with observables the efficient way, IMO. Cache is good. The fact you're constructing a "base" observable in constructor without subscribing to it there is good as well... There are only a few things I can point out: 

PS: Above code should translate pretty easily to coffeescript, but as I am not very well versed in that language, I chose to give code samples in vanilla JS. Edit: Instead of you probably want to use . 

Also, I use inline comments to help the reader and my future self to understand complex statements such as 

We can then replace the large string concatenation expression by leveraging one of those array's or method: 

In addition to the remarks given by Blindman67, I'd like to suggest the following: Passing options: The first few lines of your function are some kind of configuration block: 

Instance method vs. class method vs. function: You declared a constructor function whose instances all come with their own individual method. Since the method doesn't rely on other instance properties, it should probably be a class method instead. In JavaScript, a class method is simply a property of the constructor function: 

4. Invert the negative condition: You can get rid of the explicit comparison to zero by switching your and statements: 

Now, it is much easier to see that the inner loop is actually just checking the existence of an element within an array. You can use the faster built-in method instead: 

If you modify your function to increment frequencies for string and decrement frequencies for string , you can simply sum the absolute frequencies to get the number of required deletions. If you combine that with a more descriptive approach by replacing for-loops with and , you get a simpler implementation: 

However, unless your will have additional properties later on, a simple instead of a class will do the job just fine. Instance properties and side effects: Within your calculate method, you create new instance properties such as , and holding the result of the calculation. This is called a side effect. Pure functions without such side effects are easier to understand and debug. Also, those property names are not very descriptive. Consistency: For different inputs, the values of and the return values of are inconsistent: 

Below is the code that is built around an instead of an . As you can see, pretty much all of the operations are now "pass-through" one liners. Including the which you said got pretty long in the original code. 

State represents the final cell the robot needs to reach, and the arrows in neighboring cells show the direction of the move. States and show how the neighbors referred in can be reached. States , , , and show the same for the neighbors referred in and . This picture can go on and on, but there are three (four?) more special cases: 

Instead Of Intro I am a .NET developer who has recently moved to front-end realms. Unit testing was never a strong side of mine, but what I learnt is that the test code has to be of highest quality possible (follow DRY, SOLID, etc). Otherwise, the code faces rapidly increasing risk of rotting since test maintenance becomes burdensome. Not having experience with JavaScript/Jasmine makes me write C#-ish code in real system and tests. Getting some feedback should help in long run with keeping project in a good shape. Code Class under test () declares several methods which are made public for now. Each method is essentially a pure function, so it's really easy to test each of them independently. 

Yes, you can do this, and the garbage collector will do the job well. This is very close to your original code (snippet 1), but notice the parameter clear instructions. 

Extract the conditions into tiny predicate arrow functions. Use those arrow functions in a ternaries chain. This will allow you to have a united declaration together with an immediate assignment. 

If you really want to stay away from , you can use as you do in the original code, but I don't see why it is necessary. 

Context and Existing Code I am trying to "promisify" a third-party authentication library (auth0-js) written in JavaScript. Right now it uses callback functions and there are no plans to expose an friendly API. So, I'm writing a wrapper, to avoid callback hell in my own code. Here's a callback factory function which is actively used for creating Promises.