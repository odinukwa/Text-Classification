You can pair a master to 7 slaves in one piconet, but in a time interval a master is only connected to one slave. So actually you can not accept input streams at same time. But since Bluetooth does frequeny hopping very very fast, with a proper setting it can accept from one then accept from other then other again, but I don't know if it would be efficient in terms of quality since some of the data might be neglected. Some sources : Bluetooth Essentials for Programmers , How Bluetooth works 

Another solution is making your program not-executable, you can do it via command , simply typing should work and your program will not be an executable anymore, so it won't run at startup. You can also type or or , either of them would make your program not-executable with different permissions of read/write to different users, you can check this site for understanding them all : $URL$ 

on the final stage of the boot process of raspberry. The start.elf loads kernel.img which is the binary file containing the OS kernel and releases the reset on the CPU. I have two questions 1 does the kernel.img file loaded to physical @0x00000000 or 0x00008000, because i read somewhere that the entry point is located at address 0x00008000, 2 when the entry point specified by the linker script is different then 0x00000000, for example 0x00008000, what happened to the space between 0x0000000 and the entry point (0x00008000) in the binary file kernel.img, does the file include this space on it's size?, and does it copied to the RAM at 0x00000000 address? 

I'm developing simple blink led for PI without OS (bare metal) when setting the variable inside the , the led still on and doesn't blink. but when setting variable global (outside ) the program run and the led blink I think in the first case the variable is in the stack and second case in , but why cant blink when this variable is in the stack ??? tim local: 

For turning on or off through Raspberry Pi I would connect Gate pin of a FET(field effect transistor) to a GPIO pin of it. I'd choose a transistor which requires low gate current to get into active mode since GPIO pins can supply little current. So it'd be like when you turn that pin high, load will get current(on), when low, no current(off). Then I'd connect the switch parallel so when you turn either of them on, the lamp will turn on. For understanding if the lamp is on or off a photocell can be used as a cheap sensor and according to analog value you can understand if lamp is on or off, but it wouldn't work well if other lamps also illuminate the sensor which is only supposed to sense the lamp of our subject. Of course there are tens of other ways for doing such a task 

witch copy the kernel.elf object file and generate the file kernel.img what's the difference between the two file?? I noticed that the output of kernel.img is a part of kernel.elf. so what's omitted (elf headers, sections???) and what's kept. 

I want to communicate between android phone and Raspberry via Bluetooth, the Raspberry can discover the android phone tutorial code . but the android didn't discover the Bluetooth dongle on RPI neither on ubuntu. on Windows the Android phone discover the dongle (windows installed automatically some kind of driver). 

I'm developing simple bare metal program for Raspberry I read many articles witch state that the entry on linker script should be at address , but it boot with any other address. so is this address useless?? 

I want to create shared libray on RPI. this is successfuly done in ubuntu desktop PC, but not on RPI (Raspbian) shared.c 

Is there a limitation by hardware or software for Pi to be used by a number of different users? For example when I ssh into Pi from my computer with my user, I can keep working on Pi also in root user without interacting with other by monitor and keyboard. I think by some other modifications port 23(telnet) and also other ports can be used to connect and work on Pi. Partial solution after testing According to Joan's answer I've ran a test and by checking htop|top output figured out each ssh instance was occupying ~3KiB of memory by daemon sshd. So it can be concluded as there isn't a software limit but a hardware limit regarding memory. Also if other equivalents to sshd are used it might take more or less memory so one can have more or less simultaneous connections, a different user took ~4KiB memory via sshd so again most probably there is only hardware limitation. 

I'm trying to read temperature form DHT22 using Raspbian patched with xenomai real time system. I'm following steps of datasheet page 4 using gpio4. . the circuit is correctly wired(I can read with existing codes). but I get false result (temperature about 80000). my question is, since xenomai is hard real time, did it's function take really the given amount of time???. the max latency is about 30us (tested in parallel with command which take 80% of processor. ( program) or did the datasheet not specify exactly the communication (signal) steps??? 

this program is supposed to blink led when I press button, but the led start blinking with the start of program and never stop. button wired to gpio 17 and ground (0 in wiringPi map) led wired to gpio 4 and ground (7 in wiringPi map) 

I'm trying to build some kernel modules on RPI, the work fine for some times, now the command crash each time I try to insert a simple module. the kernel module compile without any error or warnings, and I'm not using any pointers. I used instedd of and still getting same error I got always this message, not matter what the kernel module contain 

Since you weren't looking for a Graphical solution and since I couldn't find any other I have written a Bash script for this . It doesn't echo your password when you type it so its kind of secure and it prints all visible networks around you and gives you a chance to choose one. Then it replaces with info you enter(SSID and your password) for the interface. I didn't add and a second wlan, but by time I think I'll add them and other features such as sorting by quality, channel and other stuff. Hope this will solve your problem : $URL$ You just need to make it executable, for that you can use or (any one of the numbers in parenthesis). Then you basically run it by typing : Make sure to back your previous up so that you won't lose it.