you should use adapter that already has linux support, preferably debian (easier to port the packages) or any other flavour of linux. make sure you have an adequate power supply, hi-power wifi modules can easily consume 1-2A, so you have to aim for a 3-5A capable (or better) power supply, which are rare, but still possible to find. 

it's very unlikely you'll be able to resize the partition using RasPi without any other linux-running computer. basically you have to issue: 

you may enter this command in "crontab -e", which will install this as a cron job for your user (no need for root). if you don't like "vi", use "export EDITOR=nano" to set your favourite editor to be used when editing the cron file. ps. just don't touch ntp, it works perfectly as it is =) 

can you try to connect your header pin 13 to the 3.3V POWER (not directly, of course, but through a 10k resistor), and see if you get any reading? if there's nothing, you might have fried that particular pin during your experiments, and would be better off choosing another pin you haven't used before =) 

most probably you've copied SD cards wrong way or the copy SD size was smaller than original. anyway, watchdog is the visible problem, but there are definitely others you don't see yet. get a new set of SD cards and/or try to copy again. 

In short -- you cannot. Please, bring your Pi to the internet connection you have and download everything directly, moving files manually is a reliable way to mess up your OS installation. 

9V battery has about 500mAh, since your Pi consumes about 700mA, you're looking at run times about 40 minutes, more or less depending on the type of the battery (a good quality panasonic industrial type has 570 mAh.. low end type probably more like 400). running Pi with 9V battery and a linear voltage regulator is very inefficient, you basically turn almost half of the energy the battery has into the heat. you should have considered running off 6V battery pack or with DC-DC converter. 

schematics is plain wrong, 7805 does not have "Adjustment" pin, it's supposed to be tied to the ground, the resistors R1 and R10 (using binary encoding, aren't we? =) are unnecessary. if you convert 12V to 5V using 7805, expect to dissipate about (12-5) = 7V * 1A of heat, that would require a good radiator, or 7805 will overheat and cut the power. 

Sorry you cannot, unless you create some kind of hardware device, that watches if your TV is switched on or not by checking the current in the power cable or by looking at the screen through the web-cam, and write appropriate scripts to process the data and shutdown at the appropriate moment. 

any plain old text file would do. still there are two things you should watch out for: don't forget to use your file in open/write/close sequence. people often tend to forget about the "closing" part, they open a file and keep writing until something happens (crash, reboot?) leaving incomplete file. if you use python, this should take care of it: 

Go to ebay, get any cheap wireless transmitter in 430Mhz range, connect it to the serial port and have fun. It's like wireless serial port -- whatever you send from one end, will appear on the other, and vice versa. From my experience, you should avoid any transmitters that cost less than $10, or you may need to implement a heavy garbage filtering software scheme. If you prefer your data nice and clean, stick with something like CC1101-based transmitters. Sometimes these are sold in pairs -- just exactly what you need. And, finally, choose wisely. Transmitters come in 5V and 3.3V varieties. Most probably you need the latter for your RaspberryPi to match GPIO voltage levels. 

as a minimum you'll need a relay switch and a transistor (because you cannot directly plug relay into the Pi). schematics might looks like this: 

If you don't mind programming in C, there's a working audio generation / playing sample in the folder: 

Check the frame rate, the former video is clearly NTSC (23.976fps) and the latter two are PAL (25fps), your might be trying too hard to convert the frame rate to fit your TV setup. Regarding the OpenElec part, I'd recommend you to find the "middle ground" and start from RaspBMC distribution, that is based on Raspbian but on the other hand is well known as a stable and fast video player. 

your python script tripped over an UTF8 characters in the youtube video file name or title. you should try something else that has ascii-only characters in the title/name and see if your installation works, then you may proceed to fix it for international characters by contacting the author of the original script or by fixing it yourself. 

why do you need to set the system clock exactly at 2AM ? install "ntpdate" package and forget about clock syncing, it will be done totally automatically. the problem you need to solve is to send a command to your devices to set their clocks, and that command would be, as you wrote, something along the lines of: 

is always preferred interface over wireless, you will need to issue command to see your routes and then probably change default routing using: 

there's only one SD slot on the Raspberry Pi, so you'll need some external hardware, and as far as external hardware goes, you cannot beat a good HDD with a pack of old and faulty flash cards. and regarding the power consumption, contemporary 2.5" HDD consumes about 0.15-0.2A on average, that's about 1/4-1/5 of what your Pi consumes, you can hardly go any lower than that using powered USB hubs and all this stuff you'll need to access your SD reader cards. 

there's a short-circuit protection polyfuse, that's supposed to trip when the current drawn from the power supply exceeds 1.1A (constant, or a little bit higher for the short bursts). considering the RasPi consuming about 0.7A, your project may safely draw about half-an-ampere. if you shorten the polyfuse, you may get higher currents, provided your power supply can handle them, but you may eventually burn and damage PCB tracks depending on how high you'd go. also, earlier versions of RasPi included separate 150mA polyfuses for every USB port, you may check for these if your board is not a recent one. 

using the power of you may easily find that Bluetooth can connect up to eight devices simultaneously. 

signal.settimer() seems like what you're looking for. please, tell us if for some reason this won't work for you, we'll dig deeper. 

Long story short -- there are a few waterproofs, you may even make your own using an acrylic sheet and a bit of glue. But there's no real solution for the solar battery power, the reliable solution that survive at least a few rainy days will include the truckload of batteries and dozens of square feet of the solar panels, driving the cost into the thousands. Your raspberry consumes about 0.7a * 5v = 3.5W every hour. Two rainy days and you need 48 * 3.5 = 170Wt-hour, that is about 4 of average (Lead-Acid 6V 7.2Ah) batteries combined. Factor into this the fact that battery does not like to get totally empty, that results in 6-8 pack, just to cover 2 days. To recharge this monster in just 8 hours (an average light day) you'll need about several amps of power, and most DIY solar panels provide only about 100-150mA, so you'll need plenty of them. And don't forget the charger -- the very important part, that will monitor your battery status and avoid overcharging, do the trickle charging and other interesting things. From my point of view, you will need an internet connection to see your chicken, why don't you just lay another +5V wire along with the network cable?