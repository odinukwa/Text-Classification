You have a conflicting package, which you need to remove first, before replacing it with the third party package. Start over: 

This is a blind probe for PHP web application vulnerabilities. If you have a PHP web application which somehow executes code from untrusted input, from any of the query parameters given, then the script will die and print in the web page output. If this happens, then the prober will come back later (maybe seconds later) to exploit the vulnerability for real. 

You need to remove the lines from the two blocks, and move the to within the block, not the block. This is one of the most common nginx misconfigurations. 

Beginning with Docker 1.10, set to be released in the next few days, you can specify a static IP address explicitly when starting your container, with the and options, to specify IPv4 and IPv6 addresses respectively. These can be used with and and persist as long as the container exists. 

Wait for Dell to support it. Try the Server 2008 R2 drivers. They will probably work, though this is probably vendor-unsupported. 

You were in command mode. Thus you were sending those commands to the telnet client, not to the open connection to the remote host. To switch back to the open connection, press Enter (alone) at the telnet prompt. (And press Ctrl+] to switch back to command mode.) 

You shouldn't turn off IPv6 functionality generally, but if you're deciding to accept mail only from a limited set of hosts, then it's reasonable to list only that set of hosts here. You should remove the line which permits mail to be delivered from all IPv6 addresses, and add the individual IPv6 addresses of the hosts from which you want to receive mail. 

Or, you may find that the people who built the kernel (Zetavault?) did not actually build in this module. In this case you need to take up the issue with them. 

The script will identify many different types of hypervisors and container technologies. It's pre-packaged for most major Linux distributions (e.g. or ) and its output is suitable for use in shell scripts. It correctly performs its detection from inside the virtual guest. 

Before you ran you changed to a directory that no longer exists. To resolve the problem, change to a directory that exists, and run it again. 

Because of this, only URL paths which start with will be processed by the enclosing . This is not what you want. Instead, you should have all URLs processed, with 

The hashbang tells Linux to execute the script with rather than the default shell. And remember that the script must be executable before you check it in (but I think you've already done this). 

Though sometimes that wasn't even enough, and I'd have to shut down running services to free up enough RAM to install packages. Let me tell you, THAT was fun. 

Aside from upgrading PHP to the latest version, which should have the fix for the bug you're experiencing, you can also have PHP generate its own error logs. For instance, I have a system where PHP logs to syslog. You can control this with the directive in php.ini. 

When using , by default it only matches against the command name (i.e. ). This won't match when the pattern you're searching for appears in the arguments. For this, you need to use the option as well: 

By this convention, you can change the serial to and if you always follow it, the serial will always be larger than it was previously. 

I don't think that that is supposed to be in there. In a working configuration I would have expected to see something like: 

It's actually an error page, and gets served because is missing. You should find it somewhere in the vicinity of 

Red Hat has not provided an updated package which provides this functionality, though there is a workaround available. Edit the file and add this line to it: 

OpenVZ is container-based, and as such, uses a shared kernel. Containers can only change a very small, restricted set of sysctls (which ones, unfortunately, aren't even documented). If you need to do this, you need to be using something other than OpenVZ. 

This is not generally done by pinging or ARP trickery. It's done by paperwork. Every request for IPv4 address assignments requires detailed justification, showing that existing addresses are fully utilized and that (in the case of ARIN) the new assignment will be 80% utilized within 30 days. See the ARIN Number Resource Policy Manual for complete details. RIPE and APNIC have similar policies. The justification typically consists of a report stating what all of the existing IP addresses are currently used for, and how (and if applicable, for whom) the new IP addresses will be used. The rules have been significantly tightened up in the last couple of years, now that IPv4 /8 blocks are exhausted. On the other hand, you can give out IPv6 like free candy, and you should do so. Give everyone enough IPv6 subnets to last them for decades, and strongly encourage them to use their IPv6 allocations. 

The long-term solution is probably to stop using OpenVZ. I have yet to find a single public OpenVZ provider which manages to run a decent configuration. 

Your nameservers are unlikely to change unless your registrar is exceptionally stupid, but you will probably lose your glue records and have to set these up again with the new registrar. Do this immediately after the transfer, or while the transfer is still in progress, if possible. There's not likely to be any immediate impact, since the root nameservers generally cache glue records for quite a while, but it's still not something you should delay. Of course, a good registrar will regenerate the glue records for you automatically, but since you haven't said who your registrar is, it's impossible to comment further on this. 

Thanks for posting the additional info. I did quite a bit of looking into this, and couldn't find any way to reproduce this issue. I found that iptables doesn't actually have any command line options that would cause it to read a user-supplied file. Nor does its SELinux reference policy define any need to read arbitrary files. My suspicion at this point is that some files on your target system are mislabeled. This could happen if, for instance, someone was editing a copy of iptables' configuration file in a user home directory and moved it to instead of copying it. Moving a file preserves its SELinux context, and so it would have the wrong context at its destination. Copying a file creates the new file with the default context for the new location, which is almost always the correct context. If it is mislabeled files, then running should fix it right up. To be sure, I'd just relabel the whole filesystem. You can do this without rebooting by running: 

This particular daemon comes from the package shipped with EL6. This is Apache Qpid, an implementation of Advanced Message Queuing Protocol. Interestingly, none of my CentOS installations had this particular package installed, though I did my installations using CentOS install CD. Are you sure you did an actual "minimal" installation, or did you install a virtual server based on someone's "minimal" (so they claim) template? Perhaps someone's pre-made EC2 AMI? The other item listening on localhost port 25 is postfix. In its default installation, it only listens for mail orginating from the system, and cannot receive mail from the network. It's generally safe to leave it in that configuration, though you may want to set it up to forward all server-generated mail to some other email address, so that you actually receive it somewhere convenient. 

You added your rules AFTER the rules which LOG and DROP your traffic. Those rules should be the last rules in the table. Just rearrange the lines so that they appear last. 

IIS is rejecting the client certificate. This generally means that your server doesn't have the CA which was used to generate the client certificates. You will need to obtain this from the client and install it on the IIS server. See this Microsoft KB article: Error message when you visit a Web site that is hosted on IIS 7.0: "HTTP Error 403.16 - Forbidden" 

So far I can find no evidence that nginx supports this functionality, nor of any unofficial patches. Nor, from a quick look, did I find anything relevant for Apache or any other web server. I am sure it will be added eventually, but if you really need this soon, I would suggest asking on the nginx mailing list. 

ReiserFS does not appear to be supported at all in RHEL 6 / CentOS 6. No such package exists in the CentOS repositories, nor is filesystem support available in the kernel. 

Get a Dynamic DNS service. There are many such services available from various places on the Internet... 

First thing I would do would be to update the client. What is happening here is an attempted protocol downgrade. That is, the client is trying to downgrade from TLSv1 to SSLv3, or from any higher version of TLS to a lower version. (Exactly which is not clear from the logs, and would require more verbose OpenSSL debugging to be enabled, but that particular detail is not really relevant.) The reason that the protocol downgrade is failing is that your server has protocol downgrade prevention (TLS_FALLBACK_SCSV) enabled, as a mitigation for the POODLE attack. So, the first thing to check is to make sure the client is up to date; that means at minimum Thunderbird and its supporting libraries. After that I would check the protocol list. I'm concerned that you didn't specify TLSv1, TLSv1.1 and TLSv1.2 explicitly. While this shouldn't make a difference, as these ought to be enabled by default, it might help. 

The fact that a username was given in the log means only that the client passed a username (and presumably a password). It does not necessarily mean that it authenticated successfully. In fact, we can see from your log entry that it did not; nginx returned a 444, an internal error which means nginx dropped the connection without sending anything. 

I see intermittent DNS failures when trying to resolve your domain name. So let's start at the beginning. I see in your whois record: 

Use an actual mailing list for this, instead of the ad-hoc stuff you're doing now. The mailing list software will then catch bounces and deal with them for you. 

You're right that isn't a real filesystem type. But, the point of that parameter isn't as much to define a filesystem. It's to define what goes into the partition. In this case, instead of a filesystem, the partition contains an LVM physical volume. On that note, you may wish to study LVM a bit closer. The point of it is to create logical volumes, i.e. block devices, out of arbitrary physical devices. While your only PV may be one partition of one disk, it's possible for space on several physical disks to be used to create logical volumes which use all of the physical disks. Which brings us to . This is just a random number, used within the kickstart file, to uniquely identify LVM PVs during installation. It's not used at all post-installation. Continuing with our study, logical volumes exist within volume groups, which are groups of one or more physical volumes in which the logical volumes will be created. Let's take a look at my workstation. As you may know, if you do a manual installation, a kickstart file will be generated which represents the installed system, which you can then use to repeat the installation. When I open this up, I have: 

Those instructions aren't for Amazon Linux. You should not expect them to work. And in any case, most yum-using distributions already have php-oauth packaged, so you don't need to do any of that. On Amazon Linux, the package name is .