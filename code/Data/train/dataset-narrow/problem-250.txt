The Extreme Summit X450a is actually a L3 switch, not a router, so your problem is most likley that spanning tree is putting the second (VLAN3) inter-switch link in blocking mode. When you disconnect the first (VLAN2) inter-switch link, STP transitions the second link to forwarding mode making the second station reachable. Instead of two links carrying one VLAN each, you should be using a single tagged or trunk port between the two switches. 

Possible to connect each switch to the router and to each other? Yes, but it isn't as simple as just connecting them. To get the operation you describe ("internet traffic will go directly from either switch to the router, but LAN traffic can go directly in-between switches")? No, not without complicating the configuration of end devices and making maintaining the network exponentially more difficult. The interfaces on the router will either be L3 interfaces (which would require separate IP addresses per interface) or L2 bridged interfaces (which is not recommended - see below). With L3 interfaces, each interface would have a different IP address. The devices connected to the network will only have one of them configured as a default gateway and all internet traffic would flow through that one L3 interface. The only way to get it to work as you describe is to do something crazy like manually configure GW1 on devices connected to SW1 and GW2 to devices connected to SW2. With L2 interfaces, spanning-tree should work to provide a loop free environment (L2 loops are bad). This means that all the traffic will either flow from switch to switch then out one router interface or all traffic between switches will flow through the router. Personally, I would connect both switches to the router and to each other, but simply for redundancy. Use L3 interfaces and run VRRP between the interfaces. Each L3 interface has it's own IP address and then "float" an IP between them, which would be the gateway. If you have a problem with one link to the router (one of the switches dies, cable gets disconnected, etc), then internet traffic will still be able to flow out the other L3 interface. Finally for the note on bridging; bridging is discouraged by the vendor (at least for some Edgerouter platforms): 

While both UDLD and BFD are designed to detect issues between devices, UDLD is a L2 mechanism and BFD is a L3 mechanism. UDLD is designed to detect failure on a single L2 link. BFD is designed to detect failures in between two L3 peers. This can span more than a single L2 link. This leads us to your next question. 

First, an IP address is specified in bits, not bytes. Since humans tend to have a difficult time with binary, it is often converted into dotted decimal or bytes. This is an important distinction. For example, two hosts share the same network of 10.10.10.0/23, they could have IP addresses of 10.10.10.3 and 10.10.11.3. They share the same 23 bits, but they only share the first two bytes, however the first two bytes will also include hosts that are not part of the network such as 10.10.255.3. As to what the shared bits are called, this can be a number of things. Typically it will be network or net or subnetwork or subnet with or without ID or prefix appended (for example network ID or subnet prefix). I am sure I have probably seen it called other things as well, but those combinations seem to provide everything I can think of at the moment. 

In any case, I do know that Google does limit the amount of ICMP traffic arriving on their servers and this can causes false positives with people who monitor their Internet links by using ICMP to Google servers (I have seen this in at least three different locations in my personal experience). 

Wireshark uses pieces of code it calls dissectors to analyze packets and provide the information given in the packet details. These get added to and updated regularly by the community and developers of Wireshark. You didn't give the version of Wireshark running on your Ubuntu install, but my Ubuntu apt-cache shows the newest version of Wireshark available is currently 2.2.6, although I am using 16.04LTS as opposed to 17.04. If you will check the release notes between version 2.2.6 (or whatever your installed version is) and 2.4.1, you will find a number of Bluetooth related dissectors that have been added and/or updated. Specifically in 2.4.1 "BT LE" is updated and based on your screenshots appears to be one of the dissectors in use. The end result is that the newer release of Wireshark is better able to analyse the captured data for you to view. 

There are many ways of addressing this and which one you choose can be dependent on the situation. Let me go over some of the more common ones. 

It should definitely be able to operate in a 802.11g environment as 802.11n requires 2.4GHz support. However, 802.11a operates in 5GHz and 802.11n made 5GHz support optional, so there are two possibilities: 

Duplex mismatch with a connected device - the connected device would have to be configured for full duplex or auto-negotiation is failing. A loop on the network. Many devices on the collision domain; the more devices you have the greater the chance of collisions occurring. Network design that violates the 5-4-3 rule. A device that is defective/malfunctioning. A newer device that does not behave correctly in a half-duplex environment, sometimes related to a driver issue. 

CRC errors are often cabling problems. Here are the things I would check next before swapping out hardware: 

Now, there do appear to be exceptions to these statements. Ron has been able to show that the ACL does have an effect, at least in some cases. I haven't found any documentation to back this up, but perhaps a device with L2 functionality such as the ISR that he used behaves differently? I sometimes can get access to a non-production 7600 so if I get a chance to test with that I will update with my findings. Here are the results I can get consistently across the routers in my lab (1800s, 2500s, 2600/2600XMs, and 3825) across a variety of codes. I will also note that I did cut some lines at points to reduce the length of the output (some of my extra play/testing, interface output not relevant to this test, etc). To start, let's establish some basic information by showing the serial interface on this router, the loopback on this router, the cdp neighbor showing the neighbor router, routing to the loopback on the neighbor router (which includes IP from serial on that side) and a basic ping to set the baseline: 

No matter what you choose to do, after you are done make sure you re-certify the cable with a tester to make sure it meets your standard (Cat5E from your post). 

The way the address fields are used in an 802.11 header is determined by the status of the "To DS" and "From DS" flags. Address 1 will always be the receiver address (RA) and address 2 will always be the transmitter address (TA). This provides a consistent way for radios to easily determine if they need to receive the frame. If neither of the "To DS" or "From DS" flags are set, this is a management or "station to station" frame. In these cases, address 1 is is the destination address (DA) in addition to the RA. Address 2 is the source address (SA) in addition to the TA. Address 3 would contain the BSSID (so radios not in the BSS can filter it) or be set to broadcast (all F's). Address 4 is unused. If only the "To DS" flag is set, this is a frame bound from a station to a DS. In this case, address 1 is both the RA and the BSSID, address 2 will be both the TA and the SA, and address 3 will be the DA. This makes sense as while the station needs to send the frame to the DS, it is actually destined for some other host on the network and not for the DS. If only the "From DS" flag is set, this would be a frame from the DS (or AP) to a station. Address 1 will be both the RA and the DA, address 2 will be both the TA and BSSID, and address 3 will be the SA. Again this makes sense as while the DS is transmitting the frame, it was sourced from another device on the network. If both the "To DS" and "From DS" flags are set, this would be frames sent from one DS to another DS, such as you would find when using wireless access points to bridge traffic for other devices. Address 1 will only be the RA, address 2 will only be the TA, address 3 will only be the DA and address 4 will only be the SA. 

Keep in mind that a "reserved" resource is not an "assigned" resource. Just because it is reserved doesn't mean that it is intended to be used for anything, at least at the current time. Rather it has been set aside and should not be used, unless otherwise specified. From RFC6335: 

Radio frequency is a limited resource that is managed individually by various organizations geographically. In the US, the government entity that regulates the use of RF is the FCC. As of February 2013, the FCC did agree to additional frequency for unlicensed use and the current allocation is as follows (I apologize as I forget from where I saved this image and when searching came across it in several locations so can't attribute properly): 

However, this won't work well when you do a DNS query for an IP address, such as 1.2.3.4 mainly because unlike a host/domain/URL, the most specific information point is at the end. So DNS changes things a bit and asks "what is the server and domain of host 4 in 3.2.1.IN-ADDR-ARPA?" which may look more like this (simplistic): 

This is often a confusing topic for users new to SVIs as it does seem to work a bit counter intuitively. Most people have a tendency to look at the SVI as some sort of "gateway" and that traffic leaving the VLAN should be outbound and vice versa. However, it actually works in the opposite way because the SVI is a virtual router interface. It can help to think of the SVI as a physical interface on a physical router connected to the VLAN. From the perspective of this router, traffic arriving on the interface (the SVI) from the VLAN is inbound. Traffic from the rest of the network to the VLAN would be going out (or outbound) from the perspective of this interface. As an example, take for instance the following SVI: 

This would be entirely up to the Tier 1 and their strategy/business model and each one may handle this differently. Redundancy is about preventing loss of service first and preventing degradation of service second (and often a distant second). This means that the focus needs to be on avoiding anything that provides a "single point of failure." Lets look at your example of the submarine cable. Yes, they could have redundant devices, but it might be more common that they have a single device with redundancy built in (multiple SUP/RP, redundant power) connected to multiple fiber pairs in that cable (probably tied to different line cards/modules in the device). This provides you with most of the redundancy of multiple hardware platforms. However since the cable itself is a possible point of failure, instead of a second piece of redundant hardware on both ends tied to the same point of failure, it would be better to spend that money putting hardware on a second alternative path (i.e. another submarine cable following a different route). Or to plan for and depend on peering partners that have an alternative path. While this path may be longer/less efficient/lower bandwidth or less desirable for a number of reasons, it provides an entirely different alternate path should something happen to the cable itself. 

Web authentication is really more of a means to limit/allow guest access on a clear network that requires no additional client configuration to connect. It is not meant as a way of providing secure access. So, unless the client only uses encrypted sessions (HTTPS, SSH, SFTP, VPN, etc.), then they are far more secure using a PSK than web authentication. Edit for the expanded question: Generally speaking a client connecting to the network in any means is not "capturing" any traffic in the air. Attackers capturing traffic will not be connected to the network. If a client device is connected to a SSID that has no encryption, anyone in the area could "listen in" while there is data going to/from the client. Any of that data that is not encrypted by other means would be easily decoded by someone who wanted to do so. To be entirely clear, "L3 web authentication" provides no encryption. Specifically to answer your question, yes, anyone can capture traffic on an open/clear SSID using web authentication, whether they have a username/password or not making traffic like your example HTTP or print traffic vulnerable. A PSK is not actually used to encrypt the data, rather it is used as a common frame of reference (or starting point) to allow to devices to negotiate the keying material used for encryption. Having the PSK will not allow you to decrypt the data. However, as BatchyX pointed out, if you have the PSK and capture the handshake, since you have the same "starting point" as the other device (i.e. the PSK), you will be able to get the keying material and decrypt any data using that keying material. This provides much less visibility for an outsider to capture data, as they would need both the PSK and the handshake to do so. One without the other will not suffice. As for getting the PSK by capturing the handshake, this is a bit more involved, but can be done. Basically, this is a "brute force" type of attack where the attacker uses different PSK values against the handshake until they find one that allows them to understand the full handshake. Once they have this value, then they will be able to easily decrypt any other connection that they capture the handshake for as well. While this is a simplistic description, if you are using WPA2/AES without a "common", short, or dictionary PSK, know that this is very unlikely to occur. If you wanted a better way of doing this without client certificates, then the most common one is 802.1X based WPA2-Enterprise using EAP-PEAP-MSCHAPv2. This only requires the server side certificate, but is a more involved process to configure the client (although this has gotten much better for many devices in the past couple of years) to authenticate against a RADIUS server. Not only does this make the keying material different for each user, but different for each session as well. In your coffee shop scenario, I would recommend using WPA2-Enterprise SSID for "company" devices. As for customer access, a second SSID with either web authentication or PSK provides a mechanism for limiting access. Normally most public places go with the web authentication because they can have a mechanism for providing a "Terms of Use" agreement to cover themselves in a legal sense. They leave it to the customer to provide for their own protection of data.