Sadly, mentioned tools would likely not support 64-bit applications. However it is possible to write a custom interceptor using mhook library supporting both 32-bit and 64-bit API. 

As it says, since it does not support PAE, it is ultimately unable to remap PCI and every other MMIO above 4 GiB, therefore some of the memory will be shadowed and unused. Which means that even if it is used with a CPU supporting 36-bit addressing, memory above 4 GiB will still be unavailable and some of the memory close to 4 GiB limit will also be unused. Conversely, lets consider Intel® 82955X Memory Controller, which is related to the previous one, but it is specified to support 8 GB contrary to the previous one! Datasheet paragraph suggests, that it does use 36-bit address bus to the CPU, which is a good sign. Paragraph has further insights. Compare to the one we saw before: 

The last item does not relate to the issue directly, but I've added it for a completeness sake. In a nutshell, all of the above components have to support more than 4 GB of memory in order to succeed. Central Processing Unit Lets start with a CPU. But first it is important to note, that a CPU does not have any magical ability to use any memory at all. Instead it could just access any address within its addressable space. Now here comes the bitness-thing. 32-bit CPU is capable of accessing addresses in range from 0 to 4 GiB. This range however has to accommodate not only the available RAM, ROM, SMRAM, Graphics Address Remapping Table but also all the required Memory-mapped I/O and many more, which might require substantial part of this address range. As a consequence it might be perfectly possible, that some memory addresses were shadowed by those uses and therefore are not available for operations on RAM. In order to regain hidden memory it is necessary to extend the CPU accessible address space. In case of 32-bit CPU Physical Address Extension could help. Which allows addressing up to 64 GiB. 64-bit CPU operating in native 64-bit mode is by default capable of accessing up to 16 EiB, which is rather huge and does not require such tricks. But on the other hand it is impractical for a 64-bit CPU to use 64-bit addressing, so in reality they are still limited by their address bus to a lesser range than 16 EiB. Memory Controller Unit Initially it was located in Northbridge, but was moved onto the processor die by AMD beginning with their AMD64 processors and by Intel with their Nehalem processors. Even if a CPU with PAE is capable of accessing 64 GiB by itself, it still needs a MCU to access RAM. Simply put: a CPU accessing particular address gets its reply either from PCI device, BIOS ROM flash or MCU, if the address requested resides in RAM, and so on. It is not uncommon however for a MCU (be it in Northbridge or in CPU) to support much less addressable space than 64 GiB for marketing reasons for example. BIOS / (U)EFI BIOS / (U)EFI are also important as it is their duty to configure the hardware before anything can actually operate. Among other things they are responsible for mapping the entire processor addressable space with memory ranges of hardware devices, buses, RAM and so on. Interestingly it might happen that the whole RAM split in pieces and mapped at several available non-contiguous spots. The problem with BIOS is that it's developers might not expect more than 3 GiB of RAM usage within their system and as such BIOS will not properly map all of the memory to be used. Most likely this will not happen to (U)EFI. Operating system Operating system should also support addressing more than 4 GiB memory. To be more specific, it should configure a CPU to use PAE. Some 32-bit OSes are perfectly capable of using PAE and accessing more than 4 GiB, others have software-limit on maximum memory, even though they enable PAE for enhanced security (Windows XP being an example). Once again 64-bit OSes naturally do not have such difficulties and normally support more than 4 GiB of memory. Application The last point is from a different world, since applications commonly operate in a Virtual Address Space, I have added it for a completeness sake. Nonetheless it takes some additional steps while compiling for application to be able to use more memory. By default 32-bit application only capable of using 2 GiB of memory. The same 32-bit application could address up to 4 GiB of memory, provided that OS does support that and has enabled CPU PAE. More specifically, it could use up to 3 GiB of memory, the other 1 GiB would be addressable as common libraries and OS kernel, but not writeable (ultimately this depends on OS architecture rather than application itself). Again, 64-bit applications natively support addressing more than 4 GiB of memory and do not have such troubles at the first place. To put all of this into perspective, lets consider several examples. Consider Intel® 82945G Memory Controller. Intel website states, that it does not support PAE and is limited to 4 GB of RAM. Lets consult paragraph of the datasheet. It has lots of information. Most interesting is : 

Lately I've noticed that I can't compose a new email, nor reply to an email using the GMail web interface. I run GMail in a private browsing tab/window in Firefox 56.02 on Windows 7 64. I also tried Firefox ESR 52.6 on windows 10 64 Enterprise with a similar set of security extensions and got the same result. No decentralyes though, as its not compatible. For a long time I didn't send much email, but lately I've started using email again and this is becoming bothersome. I found that if I use the HTML view, I can compose and reply. However, the modern view gives me the problem. There is no longer a way to force GMail to use HTML view all the time, though as recently as a few years ago, if you used it more than a few times, you would be given the option to permanently switch. On a side note, GMail consumes about 100 - 120mb of RAM per tab, while HTML view uses 5 - 15mb per tab. I found a variety of people complaining about this issue over the years, but no solutions or things to try to fix. 2008, 2010, and 2014 come to mind, though it was the other day when I searched for a solution. Regardless, any fixes from more than a year or two ago won't even apply, and I did not find anything recent. I do use a variety of security minded extensions to keep Google's (and others) tentacle's at bay. Noscript is allowing all scripts on the page, though I am using Decentralyes to replace some javascript so that I don't leak IP address information. What it does in a nutshell: 

After a long struggle trying to establish IPv6 connectivity with Windows box (and failing) I noticed that Windows Firewall blocks a lot of ICMPv6 packets. Closest predefined rule I could find does allow ICMPv6, but only for connections, which is too limited compared to recommendations from rfc4890 dated "May 2007" (which is way before Windows 7 was released). Of course I did expand that rule to as well as tried adding separate ICMPv6 rule — both successful independently. It does a little difference for usual network activity, but gives a huge benefit for tunnelled connections (IPv6 tunnelled over IPv4 for P2P IPv6 direct connections for instance), which hardly operate otherwise. Am I missing something here or getting it wrong? If that is "by design", what is the point in limiting this rule to by default contrary to recommendations? 

you might need to add to kernel boot options if you've converted a fairly old ext2 to ext4, it might be lacking online resize capability with the only solution - create new ext4 fs and then move your files there (sad, but true) if you've converted a fairly old ext2 to ext4, you might notice a .journal file at the root. it does not appear on other mount points, since hides it automatically. Sadly it canot do the same to / mount point - you need live cd or any other running system to hide this node 

It is possible to capture all network traffic for a given application by intercepting Windows Sockets API calls. These are the tools that may help. 

I can't scroll up, I can't type, I can't do anything in the window that i would expect to be able to do. I can close the window, but since I can't get this text any other way, I'm forced to scroll line-by-line until I hit the error (separate issue). The command I gave was . I believe I also tried and got similar results. I looked in the PowerShell modules folder, but don't see anything new. 

A friend gave me an old laptop to play around with, and it's exhibiting a peculiar symptom: it has to charge up the battery for a few minutes before it will turn on. The battery does not have much life in it and you cannot run the laptop on just the AC adapter. I've never seen nor heard of a laptop that would not run with its battery removed; this is a standard troubleshooting step, even on HP's support site where people are making similar (but not the same) complaints for this family of laptop. HP bought Compaq some time ago if you didn't know. These laptops apparently had issues with their batteries, and I can find some on Amazon for less than $14, but I am still perplexed about what's going on with the laptop. Once the battery has charged up enough, the laptop will boot and run just fine. I've got it running Ubuntu. I can't find anything else wrong with it, save the damaged USB port. Thinking it was a BIOS setting, I looked through the BIOS menus and did not find much besides a boot order and to enable or disable virtual machine support. What could make a laptop not boot from it's AC adapter only and require a battery? Edit The laptop lets you know if it's ready to boot or not. If it's not ready, the charge LED will blink. If it is ready, the charge LED will remain solid. There is a period of overlap where the charge LED is solid but the laptop will not boot. The process of getting the battery ready takes 5 - 20 minutes. 

After creating a rule targeting specific application, nothing changed as if my new rule was just ignored. That is if my rule says to allow, but default is to block, application is still blocked. Should I disable Windows Firewall completely, the application in question could establish connection. 

It does a good job illustrating the issue with memory shadowing by PCI devices etc. Also it suggests a way of overcoming this issue by mapping a range from real RAM to upper address range within CPU-addressable range. Thus reclaiming that hidden memory for use. Note that this remapping is done by BIOS/(U)EFI upon hardware initialization and it is exactly for this reason I did include BIOS/(U)EFI in bullet-list above. I have taken Intel products as an examples, but the same is true for AMD. Now lets discuss how Operating Systems are involved. The Linux kernel includes full PAE mode support starting with version 2.3.23 and it is perfectly possible to have more than 4 GiB of memory usable with Linux kernel on a 32-bit system. However be aware of an undetermined issue with 32-bit Linux kernel on a system with more than 4 GiB of RAM on some hardware (in my experience it has something to do with TLB shootdowns). Anyway Wikipedia has a good information on PAE support. Interesting is how Windows XP is limited to 4 GB, whereas Windows Server 2003 Enterprise/Datacenter SP2 is capable of full 64 GB. Same is for other Desktop-Server Windows pairs. As you can see there are many combinations among components listed and in some cases replacing a CPU or OS might help. It is much harder to deal with BIOS/(U)EFI or MCU since the former is proprietary and built-in into the system and not easily modifiable, the latter is built into the CPU or soldered on board. 

Firefox 49.0.1 Windows 7 Pro 64bit SP1 I no longer see eBay as a search engine in Firefox and can't seem to add it in or restore it back. It's also missing from another Firefox based browser bundle. 

I've started to notice a blue selection bar when I mouse over a file in Windows Explorer (aka File Explorer). It's a blue bar that is around the filename, and all of the white space to the right of the file up to the next column. I have configures Explorer to show me list view. I have Classic Explorer installed, but to my knowledge it doesn't have this as a feature. This is a new-to-me feature, and I'd like to turn it off. Searching The Internets, I find plenty of lists of things Windows 10 breaks and how to "fix" Windows 10, but I don't find anyone else complaining about this, nor discussing it. Therefore, I don't know the name of the feature either. How can I turn this off? 

Ping-Host lets you set a timeout in milliseconds, presumably in an attempt to speed things up. 's timeout is seconds, not milliseconds. It's reeeeeeally slow, even at 1. What got me going Ping_Host wasn't any faster than Test-Connection or Test-NetConnection, so I kept looking. I settled on this script: $URL$ 

Is there a way to prevent Lastpass from logging me in to a website while in private browsing mode? Ideally I would like to keep autologin turned on for regular browsing mode, but turn it off for all sites by default in private browsing mode. Windows 7, Firefox