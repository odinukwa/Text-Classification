The first thing I see is concatenating a string in a loop. This will create a new string every loop. You don't want that. Instead use a StringBuilder: 

Instead of using a fixed order of filling in cells you can first take the cells with the least amount of options left. In other words if you know that cell 5,8 can only contain 5 and 6 then try each of them now and reduce the possibilities of the other cells instead of having to come back millions of times just to find out that the cell can't be filled any more. This requires that you track the number of options in the board. With a bitset it's doable, though un-setting a square is harder because you need to readjust all affected squares. 

The keyword will do nothing. Current day compilers are smart enough to find a good register allocation themselves without you running in its way. Why ? you initialize the values through anyway so no need for the zero initialization, will work fine. Speaking of you need to free what you allocate otherwise you'll get a memory leak. You should only need to allocate a single extra array for the merge. When the amount left to sort is small () you can switch over to another sort that is more efficient for small numbers like insertion sort. Finally brace position on your else is a bit odd: 

You could create the index list explicitly each step by using the function in the wikipedia article You can change comparator to not do anything if either of the 2 indices are out of range and round up the array length to the next power of two when initializing. 

I suggest using a specialized priority queue of some kind to store the pending events rather than a ordered linked list. There are several options but most have worst case a insertion and popMin. One of the things you will want is a time until next event query. This allows you to put it in a sleep() to save power (if you are willing to be less accurate). 

For a state machine I expect the "event" to be independent of the current state (coming from an input). This means I would expect the transition function to take an parameter. I don't like the use of globals. Instead put all the mutable state in function scope. This means that the new state should be returned from the transition function. The signature then becomes: and the transition function then uses a switch to decide which state is the next one. then becomes: 

Speaking of the field, consider flattening the field so the field has size and you index into it with (which you can put in a helper method). will happily go out of bounds and not notify you about it. The for loops in and are 1-based while they should be 0-based (leads to an overflow). is not well named, or would be better, a explicit and wouldn't go amiss either. You should allow the program to query the field state using a method. So its not bound to a command line program. 

After reordering the operations it's now clearer that they are opposites. Especially after extracting the range as variables. 

on a linked list is slow. Prefer instead. However queue has a method for taking out of the queue and returning a special value if it was empty: 

You can combine and into a single group You can pull in the negation sign with a is equivalent (usually) to and can be pulled out to the end (or use the api than only matches the entire string. 

This means that you'd need to find it again in the priority queue and shift it up if needed. So you may as well remove the for loop and change the name to This can be more efficient by first collecting all changed neightbours to outside the loop over all neighbours. And then submitting the collection of changed vertices. This saves you the loop over all vertices in the open set to once per . Even that loop can be saved by using a secondary index (like a HashMap) that will let you find the index of each changed vertex in constant time. 

Having said that, lets you slice out the internal nodes and splice them into another . So implementing that functionality yourself is not needed and using will simplify a lot of your code. 

Your implementation requires Automatic Reference counting. If you have disabled it (for whatever reason) then you leak the ; you should release the things you allocate and don't return. That is add before the return. 

Basically moves the null test into the recursive call. However this version requires it to be called as . But it has the advantage that it can deal with a null root in a transparent way. 

is declared synchronized but that it the only method that is. But there is no protection against calling it twice in a row, nor do any of the operations need to be guarded like that. 

Same in stack don't expose that it deals in nodes and don't let calling code access them. That way you have more control over the lifetimes. 

There is not need to go to streams at all for a piece of functionality already implemented in the member function of . 

The memory model of the jvm doesn't allow double checked locking like that to work like you think it does. The jvm is allowed to assign the object before running the constructor. 

This is basically the same as just calling (or call) In other words you aren't quite there yet with making this properly asynchronous. It does let you set a timeout on the get simply by adding the timeout parameters: 

There are 2 functions that will help you with this class: java.util.Arrays.binarySearch and java.lang.System.arraycopy. The will search and copy the data much more effectively than what you are doing now: 

However just finding how many whitespaces are at the end of a string is easy enough to allow for a utility method of the form. 

When you update the vertex' estimated distance you should signal the openQueue to update it's position in the backing array. 

Creating new threads each time you need to query is expensive instead create a . You can get one from the static factory methods in Executors. This allows something like: 

you can improve the time management by adding a millisecond counter and testing against that. This allows other things to run/animate as well while the sprite is waiting on the next frame. is usually a very bad idea for timing when doing interactive programs or when multiple things are being delayed. 

Instead of creating threads use an ExecutorService and use . This will return when all calls are done or the timeout expires whichever happens first. Tasks that aren't completed will be canceled (which can be checked by the property of the matching in the return value). This will mean you will need to change the s to s but that just means returning null in the call method.