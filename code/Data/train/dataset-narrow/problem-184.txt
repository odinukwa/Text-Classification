Other than that, you obviously do want to keep it well ventilated like you mentioned, which is pretty easy as its such a small device, just don't close it in a cabinet forever. Make sure if you are wiping it down for dust, you're just doing it with a cloth and not something like Pledge. And to comment on the note of powering it off every night, that's not going to help it last any longer really, your telecom guys are right. These things are designed with the intention that they can run for years. 

If you want some good information, check out the Juniper Documentation. Application Firewall The other command you referenced, relates to SRX's application firewall feature. The full feature set of application firewalls can get pretty unwieldy, but in short they do a much more thorough analysis of the traffic. If you check out the Application Firewall Overview you'll see the following text: 

Well it's going to be roughly the same concepts as any device, take a look at the datasheet - vendors do pretty extensive testing into how long things would last, and their optimal operating environment. You might want to ask your telecom guys if you still have support through Juniper on the device, just because your company doesn't directly support it, doesn't mean they can't do you a favor and call Juniper should something catastrophic happen. Here's the SSG5 datasheet - $URL$ 

I type "$URL$ into a browser, and hit enter. [Layer 7] Your PC/Server will generate an HTTP GET request to send toward your specified webserver, in this case we're talking about google.com. So if you look above, we have that GET request, which is considered "data". HTTP is a layer 7 protocol, we're going to add that header. Because there is nothing else to do at this layer, lets pass it down to layer 6. [Layer 6] We can think of layer 6 as how the data should be formatted, for a website nothing is really going to happen here, but an administrator/developer/engineer could do something with this if they chose to. Our PC/Server is still going to add a header on top of the layer 7 (HTTP) header, and send it down to layer 5. [Layer 5] At this point because our PC/Server knows we're trying to contact a webserver, we need to make this request in a format the application as a whole can understand, for this we use an Application Program Interface (API). This is what manages the applications session, this is so the web server will know what "stream" the data is a part of. Let's add our layer 5 header, and pass it down to Layer 4. [Layer 4] Network engineers care about all data, but this is where it starts to get very specific for us. Layer 4 is our transport layer, this is where we decide how our data gets there, not the path, but how - i.e. TCP or UDP. In this case, our PC/Server needs to establish a connection with the web server. I'm going to skip over some things for simplicity, but this is where your typical TCP 3-way handshake would happen. We encapsulate what we currently have in a TCP header, this contains things like source and destination port numbers, sequence and acknowledgment numbers, and TCP windowing information. [Layer 3] Here's the other layer we as engineers really care about, the network layer. This is where packets are addressed to their destinations, we need IP addresses to get to places on a network. Our PC/Server will add its source and destination IP address. Not only will the packets get to the right destination, but that endpoint will use our source IP address to send it back to us when it needs to send us data of any kind. Now, something to note here is that even PCs/Servers can have multiple interfaces, so we need to send the data to the correct place. Our PC/Server will have a routing table just like routers, typically if your a host of some kind, your packets will be routed to your default gateway in the hopes that it will know how to get the packet to its destination. Lets add that IP header and hand it off to the data link layer. [Layer 2] Our PC/Server's network interface card (NIC), doesn't know how to speak IP on its own, so it uses media access control (MAC) addresses to move that data. Your PC/Server is going to have ARP entries for each IP it can reach, so in this case its going to have an entry for your default gateway. Your gateways IP address, will correlate to a destination MAC address. So let's add our L2 header that destination MAC address, this header also contains our PC/Server NIC's MAC address as the source. Now we have everything we need to put that data onto the wire as bits. [Layer 1] As you mentioned in your question, this is where the data flows over the wire, it's where we see the raw 1's and 0's. Now there isn't a Layer 1 header per se, if you look at the diagram on layer 2 you'll see that. The data that is up until now which has all of the headers from L7 down to L2, will be converted to those 1's and 0's. Now we have bits on the wire, on it's way to your gateway router. Up until this point, your PC/Server has done ALL of the work encapsulating the data that bound for google.com's web server. 

is effectively a recursive search on whatever OID value you target. actually executes multiple operations to determine the contents of the table, because that table might vary in size, or change over time. For example, if I wanted to retrieve all OID entries for (my particular MIB defines that as ) 

Also too, since you're configuring the MAC's to be allowed on any of the interfaces in that VLAN, if you wanted to know which interface had a specific MAC entry - you'd use: 

The boxes in green are the SCB's, they provide 2 fabric planes to each of the line PFE's on the line cards. DPCs/MPCs have either 1, 2, or 4 PFE's - obviously the example is assuming the DPC's have 4. Also note the 2 grey boxes, they act as spare planes should any others fail. Juniper has a couple Knowledge Base (KB) articles that helps troubleshoot fabric problems that are a bit less obvious, this is just for future reference (I'll post them below). Looking at the output you provided, it just looks like one of your SCB's rebooted, either by an administrator or just a potential hardware fault. If the same SCB has rebooted 2 or more times (and it wasn't an engineer intentionally rebooting it), you should open a case with JTAC and see what they have to say. You can verify why it rebooted by looking at the logs ("show log messages"). In addition to that, I see that two of the planes are offline (this corresponds to the alarm/offline planes), seeing as you have 3 SCB's, I believe you should see 6 (4 Active/2 Spare). From what I see, it appears that your 3rd SCB has been disabled, or is just down for another reason. 

So just because you're trying to get to a webpage you do not have to send a UDP DNS query. DNS is independent, visiting a webpage is not the only time you'd need to use DNS. Feel free to comment if you need clarification. 

The more appropriate topology would look like this: In this example, each device has the following roles in MPLS: 

I was searching for an easy way to do this over the last few days and found that there wasn't a SIMPLE way to do this. The majority of the answers were: 

You can build as many terms as you need for each port you need to service. Be sure to also adjust your security policies with the new application and anything else that might be required. 

This implies that regardless of that feature being configured, that no equal cost load balancing will happen if you do not statically set a bandwidth value on an individual LSP, like so: 

So in your configurations case, you statically defining those MAC addresses is just redundant, anything learned on that port will be converted to a sticky MAC anyway. 

All in all, what could account for the difference in the captures for the "same" options? If anyone needs clarifying information, just let me know. 

Older version of JUNOS used to only have , and the newer versions contain as well. So it was decided that it should stay for those who don't need to specify a family other than IPv4 (inet). It does seem a bit backwards, but if you're not already, I would advise sticking to one style just to keep configuration as clear as possible.