Since consumer SD cards use top-secret Flash Translation Layers and actually have more capacity than advertised to remap bad blocks or for general wear leveling this is impossible via shred. The writes to a file might not end up at the same place where it currently exists on the disk at all. You have four choices : 

Yes it is possible to overclock the GPU and yes , this leads to a performance improvement. Look at following resources: 

Since the Raspberry Pi has no consumer-grade video inputs , your project is - as defined - impossible. If you allow at least some additional components , it might be possible (Composite and HDMI USB framegrabbers , if expensive , do exist). Note that still leaves the software question unanswered , that is , if those devices work on Raspbian Linux in a satisfactory manner (or at all). 

Turn the Zeros into USB "Ethernet" devices (a matter of loading some kernel modules on Raspbian) and use Ethernet emulation to communicate with them. You can now use SSH , MQTT , HTTP/REST or raw sockets to "talk" with them easily - and they can answer back. $URL$ 

First of all, if you're running the script from you don't need to execute commands with because they already are running with root privileges. It's redundant. Have you confirmed that the commands you are attempting to execute are actually installed? Try running them manually from the command line. A simple way to allow debugging is to simply insert print statements in your code: 

Method 1: Blank the screen without turning the power off to the HDMI port. You might need to set the screen's default state to blank (I didn't): 

You specified in your question that does not exist, but I don't think it's supposed to. If does not exist, however, you need one. You can recreate it by putting the SD card into a linux computer and using a text editor as root to fill in the basics: 

Method 3: This does not apply to RPi 3 with standard Raspbian, but some specialized situations and the original Pi might be able to use this alternative (depreciated?) method. Find out what the monitor's name is by running: 

Replace the call to @epiphany to a call to @lxterminal. Epiphany is a browser and obviously the wrong program to execute bash scripts. LXTerminal is the Terminal program of LXDE, the Lightweight X Desktop Environment. LXDE has been heavily customised but is still the foundation of the "Raspberry Pi Desktop". 

The MPEG-2 key is bound to the hardware , not to any kind of operating system. It will work with any software which is tailored to the Pis HW acceleration APIs (mainly OpenMAX IL). 

P.S. I am not a lawyer , i am not your lawyer. This answer does not constitute legal advice. Please consult a legal professional if in doubt. Laws and applicability vary by jurisdiction. The opinions of the Free Software Foundation expressed herein are solely their own. 

The Raspberry Pi 2 and 3 do support hardware virtualization via KVM or Xvisor (a type-1 hypervisor) . Furthermore , Docker is officially supported , even on the RPi1 and Zero. $URL$ 

All other models do not support USB device or USB-OTG slave mode. Please note that on all models except the Compute Modules and the Zero , it is impossible to transfer data over a Micro-USB port. 

You linked to a very outdated tutorial on how to setup a Tor relay not a Tor proxy. From your question, I'm gathering that you want to set up a black box that you connect through to get all your network traffic routed over the Tor network. That's a Tor proxy. There is a good diagram on that tutorial which shows how Tor networking works. The three nodes between the two users are each relays. The diagram does not clearly indicate the proxies, but both of the users have a proxy on their computer. You are talking about making a Pi operate as a separate Tor proxy. Now, with semantics out of the way we can get on with hardware concerns. I see three options: 

It's probably better to have your code wait for the state to change with an event handler, but this is just a start for demonstration purposes. Your HTML might include a body tag like this: 

They should show up in a system log, or you could redirect them to someplace specific by modifying the line that calls your script in like this: 

Neither Debian 7 (wheezy) or Debian 8 (jessie) support the Raspberry Pi3 in AArch64 mode. Debian 9 (stretch) will very likely support the Pi3 in 64bit mode , though. Progress can be monitored here: $URL$ 

gedit is a graphical text editor similiar to Windows' notepad.exe. All software in Windows and Linux can be started from the commandline irrespective whether they are commandline applications or not as long the graphical environment is running. gedit is no different. Whether a piece of software is a "command" therefore depends solely if it resides in the PATH or not. Both Linux and Windows work with a PATH variable. Learn more here. Please note that gedit is not preinstalled. Use leafpad instead if you don't want to download new software. 

The image effects are built into the closed-source firmware and likely a low priority feature. All camara APIs and libraires interface with this firmware, which finally controls the camera. You can apply any post-processing you want with NumPy or Pillow yourself, though. 

I just used a fresh install of to try it without any additional updates. No no or anything. This single command makes the Pi discoverable and pairable. Without an agent to control who can connect, it just lets anyone: 

There are many complex things you can do with tor, but just insert this configuration into to start. 

Tap your home button. Tap your App drawer button. Find and tap your Settings app. Tap the search button (magnifying glass). Type in "Hotspot". Tap "Mobile Hotspot and Tethering" or something similar. Turn that on, take note of the network name and password. 

I'm not allowed to comment yet, so I'm posting this "answer" to ask for clarification. We need more context and source code. BlueZ is very tricky to deal with and makes a huge difference if you're using BlueZ 5 vs BlueZ 4 or older. Also, there's methods and methods and methods of accessing the bluetooth device. This is a topic that interests me because I am currently working on a project with bluetooth and have dealt with many problems. The method I used is based on the one at $URL$ because it worked best. Your error means that you are attempting to access the "BluetoothSocket" attribute of a "BluetoothSocket" which makes no sense. I can't say more without more context though. 

The foundation has now published instructions on enabling USB Boot (Raspberry Pi3 only). Please note that this feature is in the beta phase. $URL$ 

The MiracleCast project can turn a Raspberry Pi into a Miracast reciever or transmitter. See here for a success story on a Raspberry Pi. $URL$ 

If you are engaging in commercial redistribution of GPLv2-licensed binaries , you must offer/mirror the sources to your customers and third parties yourself. You cannot point everyone at raspbian.org / raspberrypi.org . This is because the GPLv2 was written before the WWW was established as fast and common distribution mechanism. Furthermore , as you correctly stated , you have to include " [..] the scripts used to control compilation and installation of the executable [..] " as long they were part of a GPLv2-licensed project. The easiest way to satisfy those requirements is to use apt-get source on all installed packages , so they reside on the same medium as the binaries. Sources: 

The Raspberry Pi 3 and the Raspberry Pi Zero W use the BCM43430 as combined Bluetooth and WiFi transciever. It is connected via SDIO (for WiFi) and UART (for Bluetooth). Sources : 

Raspberry Pi 3 has built-in Wifi and Bluetooth, so you could make it a Wifi hotspot or setup Bluetooth tethering to allow other devices to connect. You could purchase a USB to Ethernet adapter and daisy-chain the Pi between two devices. If you aren't conserned about local snooping, you can just connect the Pi to the same router the other devices connect to. You won't be able to use the Pi to prevent leaks though. 

Manually set the time to be somewhat accurate. NTP sometimes won't update if the time/date is wildly wrong. 

I see you prefer Windows IOT, but since you didn't require it in your question I'll go ahead and point out that in Raspbian you can run a python script as a daemon which listens for GPIO events and simulates a keypress. The easiest way to simulate a keypress in Raspbian might be with uinput. Then you can have your javascript (or jQuery) respond to a regular keypress event with an handler. There probably is a similar technique in Windows IOT, but someone else will have to chime in for that. Since this is a technique I've used before with some success, I'll provide an example. 

The Raspberry Pi foundation has been endorsing GPGPU on the Pi since 2014 , shortly after Broadcom released documentation for the QPU units inside the GPU. An experimental OpenCL compiler was created by Simon J. Hall (the winner of the tightly related 2014 10,000 $ competition to make Quake run acceptably without using the GPU BLOB) : see here. 

Neither Debian 7 (wheezy) or Debian 8 (jessie) support the Raspberry Pi3 in AArch64 mode. Debian 9 (stretch) will very likely support the Pi3 in 64bit mode , though. Progress can be monitored here: $URL$ 

NOOBS contains a recovery menu. Press the shift key to enter rescue mode. You can now overwrite your existing install. This operation is destructive , all your settings and files will get lost. 

Did you consider 2D Game engines/libraries ? Because OpenGL/OpenVG are very low-level and don't do font handling , the added "belt and suspenders" of those libs will make your life much easier : $URL$ $URL$ 

If Swing uses plain X11 as backend , it should be impossible for Java to detect a missing display since the X Server runs fine without a physical display. This will "just work" as long you always let the desktop running. 

Install Tor on the Pi. There is an Adafruit tutorial at $URL$ which describes the steps, starting with basic install commands. 

In all these methods, the part about is redundant if your terminal is visible on the display you are trying to control. Best of luck! 

Make sure you replace "Your SSID Here" with the name of your phone's hotspot and replace "YourPasswordHere" with the password it gives you. You can wrap it in quotation marks, as in the example, if you like. After that, there is probably a way to get wpa_supplicant or networking to reload properly, but I've never had great success so I just reboot the Pi: 

The part is important because that is what passes the event information to your function, which you must define elsewhere with your javascript similar to this: 

Ideally, you could set a static IP address for your Raspberry Pi either through DHCP assignment in your router or by changing your Raspberry Pi's configuration. Having said that, would ping work to answer your immediate question?