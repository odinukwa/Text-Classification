plug it into a LAN with internet (or internal upstream WSUS) access and sync it. down and unplug it and carry it to the security lan connect it there and let clients update and report 

I don't have a bad feeling with these settings. The only suspect is No auto-restart for scheduled updates with logged on users. However, for the observed behaviour, a user must have been logged on at yestreday 3 a.m. until today 4 p.m. (or possibly several overlapping sessions). Sifting through the ocean of Security Event Log, I did indeed find: Three events #4634 (logoff), two for Administrator RDP sessions (type 10), one for Administrator console session (type 2), all in the very same second as the event #1074 above! But what is cause and what is effect? Or how come three sessions got killed simultanuously? 

Issue Are the names returned your two or four nsX.domain.com servers? Or are they name servers of your registrar/provider? For each name server from step 1 issue 

In the course of migrating our internal CA we first the old server up and running in order to allow clients to download the CRl from the URL hardcoded in already issued certificates. Meanwhile the old server has been removed completely and there is merely a little virtual webhost active with its name with the sole purpose of delivering the CRL to clients. I hope that this construct will become unnecessary when all old certificates are replaced (in a year or so). However, it would be nice to speed this process, e.g., by issuing new certificates ahead of time where applicable. To thius end, I would like to find out: When I see (from the web logs) a client retrieve the CRL, I can conclude that the client wanted to verify the validity of some (old) certificate. But how can I find out (not at the CA, but at the client maybe) which certificate the client wanted to verify? 

Note: The fourth step disrupts connectivity from TEMPDNS to your 192.168.10.* LAN, but your remote session is stillworking because it is actually originating from TEMPAD in the 192.168.11.* LAN In step 6 the following magic happens (I hope): The machine asks its configured DNS server 192.168.10.2 (i.e., TEMPDNS) for the address of an AD server. It gets as a reply your original AD servers in 192.168.10.* and 192.168.11.200 (i.e., TEMPAD). Connection attempts to the 192.168.10.* AD servers fail, so ultimately 192.168.11.200 is tried (as I said, it may be better to avoid the attempts to connect 192.168.10.* by crippling the DNS on TEMPDNS). The connection to 192.168.11.200 succeeds: We have a working forward route 192.168.10.36 -> 192.168.10.1=TEMPDNS -> TEMPAD and backward rout TEMPAD -> 192.168.10.200=TEMPAD -> 192.168.10.36. Once all repairs have completed, don√Ñt forget to undo all the crap above. 

The problem is that is the absolute path translated from the URL, that is, for $URL$ it may be something like (depending on how your web server is setup). I suggest you use pattern matching on the URL as in 

The first option is problematic as it leaves quite a large attack surface (i.e., someone might trick or coerce said CA into signing a malicious cert for your host). The second option suffers from this to a lesser extent, but more importantly the intermediate may suddenly be different when you renew, thus bricking your site (unless you used a backup CSR for the renewal). The third option is most specific, but requires you to change the HPKP header obeying very specific timing and planning ahead for a month or whatever timeout you use with the HPKP header. I wonder if cross-signing with a personal (untrusted) CA could help, that is: Would the following scenario work out? I obtain my cert AAA from the widely known and trusted CA XXX, who use an intermediate YYY to sign AAA. Also, I cross-sign my AAA cert with my obscure and totally untrustworthy and never-heard-of CA ZZZ. Now I configure my webserver to issue HPKP headers with AAA,SSS,ZZZ, where SSS is a safely stored backup CSR used for disaster cases. Upon renewal, I do the same with my new cert BBB, i.e., I have it signed by a trusted CA (possibly by a different one, say XX2 and intermediate YY2) and sign it with my own ZZZ; and I adjust the HPKP header to read BBB,SSS,ZZZ. (Actually, the HPKP header might be left at SSS,ZZZ from the beginning and never change) Why do I think this should work? Let's say a visitor comes by after the switch from AAA to BBB. The TLS connection can be initiated because my server is configured to use BBB and the intermediate cert YY2 as well as ZZZ. The client is fine with this because at least YY2 is signed by XX2 and that is among the client's well-known CAs. Next it checks against the HPKP header. This is either fresh and contains BBB,ZZZ,SSS and so is fine. Or the older version AAA,ZZZ,SSS is reused, which is also fine because of ZZZ. Question: Is the method described above feasible? Will all HPKP-aware browsers work with it? Or is this even explicitly forbidden by specs? Additional question: How yould I actually execute the above plan (in terms of commands and configuration)? 

We have setup a Cisco Identity Services Engine to manage WLAN access for our users. Access should be granted to users from a specific Windows Active Directory group. This works fine for users having a username consisting only of ASCII letters. However, user names having e.g. an umlaut fail. The live authentication log shows an error "22056 Subject not found in the applicable identity store(s)". Any idea what could be wrong? (And, no, renaming all non-ASCII users is not an option) 

Thanks for all suggestions, but noe of them matched. I have no idea why the observed and decribed pattern of malfunction (and temporal development of malfunction) occured, but the culprit is hidden in what I described as 

There were actually two problems. Firstly, in the presence of loopback policy one must be careful with rsop.msc because just using the default (i.e. ticking "jump to the last page of the wizard without collecting more data" right after selecting user and computer containers) may not reflect the true policy results. One must at least tick loopback on the second page (and replace or merge) to obtain realistic results. Being careful here helps diagnozing correctly if the script would be run at logoff. Secondly, creates values if they don't exist before, but it does not create non-existing keys. Therefore, must be issued in the script (for the record, does create non-existing keys recursively, but of course "HKCU\SOFTWARE" is already there).