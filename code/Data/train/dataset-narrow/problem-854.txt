The next step would be to DRY your code. The answer given by @atmd is a good step in this direction but it can be taken farther. It looks like there are two things your checking: 1) whether is and whether its the or the . So you can set up a few checks and remove all of the nested s. Taking the click event and making it a stand alone function (like above) will help with debugging of the code later. Here is a click handler function: 

So in the above statement, we are passing as , as well as the and objects (for a slight performance boost) and, to deal with older browsers, making sure is actually . The next thing you could do is cache your jQuery selectors. This will improve the overall performance because selecting an element in the DOM is one of jQuery's slowest performing functions. Your are using ID's which help but caching them is even quicker. We want to do this as soon as the DOM is ready. I usually create a single function for everything that has to happen there and then call the single function. Also, since we will be referring to these selectors we will declare them immediately inside of our IIFE. I have also included the reference to create the piecharts: 

This will make these values accessible to all of our functions but, because of the IIFE, wont pollute the global scope. We should also create a function that will kick off everything. 

The first thing you might want to do it put all of your code into an IIFE to create a private scope for yourself that way you aren't polluting the global namespace. Since you are using jQuery, you can pass that into the IIFE to make sure that always refers to . 

The only real difference is we have to get the parent element first. I have created two fiddles. For the first option, you can use this fiddle and the second one is this fiddle. Hope that helps. 

A lot of what you are doing is repeated code so you should DRY it out. For instance, is the same code except for the values of and . We can also simply all of our checks by setting them up as s. So that could be re-written like this: 

Basically, if you are going to use it more than once, then it should be cached. If multiple functions need to access it, you should probably add it at the top level of your private scope so its available to all your functions. So the top of the code would look like this: 

I would also recommend not using the classes. Just removing the class should be sufficient. If you additional CSS in the class, then you should create a class called (or whatever make sense) for styling. Next, you need to DRY your code. In your functions, you are repeating a LOT of code. These repeated calls should be their own function. For example, you do the same manipulations on the in each set of code. Move that code into it's own function and just call it where ever you need. Third, you should cache all of your selectors. As a general rule of thumb, if you use the same selection more than once, you should cache it. So create a variable and use the variable everywhere. 

Here is an updated code sample based on the above. Note: I call an function on to kick off the functionality. 

Although that is perfectly valid, it is the same thing as which is shorter to type if nothing else. You definitely need to cache your selectors as well. Diving into the DOM to get the element each time is very resource intensive and one of jQuerys worst performing methods. So caching the selections into variables will increase the overall responsiveness of your page. For example: 

That's a simplified explanation. But you see we are passing in jQuery but we refer to it in our function as . 6) In your function, you are creating all these events on the same element. You can simplify this as: 

The first thing I would do with this code is wrap the entire code in an IIFE. This will create your own private scope and not pollute the global namespace. Also, since you are using jQuery, you can pass in the jQuery object as to ensure that it is correctly mapped. 

One other big change you need to make is to not update all four pie charts every second. There is only one chart that needs updating that often (seconds obviously). You should only update the minutes chart every minute, the hour every hour and the days every day. That way, on almost every interaction you are only updating the one chart. Another way you could improve this code is to DRY it out a bit. One place that would greatly benefit from this is the function. We need to make changes here anyway to help out with the problem mentioned above. Let's take this code: 

Much more concise. I have updated your fiddle with the changes above. Also, in the fiddle I reduced the speed to 200 because I'm lazy and didn't want to wait that long :) FIDDLE Let me know if you have follow up questions or comments. 

Last, although you haven't supplied any HTML, there are probably ways you might be able to simplify your code. For instance, if all of your items have the same parent container (ex: ), you could add the click event to this parent element instead of each individual area. You can figure out which area was clicked by using . 

In this function you can cache all your selectors, create the initial state, etc. A lot of your code is repeated or very very similar. You can DRY them out a bit. For example, both and are the exact same function. Also they return a value just so another function can update the screen. You can combine all of that into one function: 

In this you have consistency around each input. They are given a attribute which is needed when sending the data to the server. s are used for labeling the input. Default placeholder text there to show the user what kind of input you are expecting, etc. By having this consistency it will make it easier to manipulate with code if you need to. 4) Always your variables. You did this on all your variables except . Maybe just an oversight. 5) You should encapsulate your code in what is called an IIFE or Immediately Invoked Function Expression. It's a fancy name for creating yourself a private scope. This will help you avoid clashes between your code and code written by someone else. It's very easy to do: