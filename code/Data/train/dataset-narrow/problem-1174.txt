I made an re-implementation of your elevator simulator. I change the methods elevatorUp and elevatorDown to one unique method, to avoid code repetition and to put off some ifs. 

It's a implementation of Transformation from Picasso library looks for the first different pixel color in both sides, in the vertical and horizontal, and crops the bitmap from there. Here is the Bitmap class doc from Android library. 

So it will run both the programs asking by 3 numbers, that will be: 50.000.000, 60.000.000, 70.000.000. I put a time counter in your fillPrimes method to compare it with the time taken by the entire execution of Solution program. If you run this version of DivisorPrint you will get something like: 

I'm taking and Android course and I would like to refactor the code for one of the exercises. The complete solution done by tutors is here. When I was doing this exercise by myself I was annoyed by those with and by the fact that class containing too much logic. Also, due to the fact this code used to be common at most apps, I think it should be moved to a different class. This code set the summary of each preference in a preference screen (see the image below). To illustrate that, here is a picture from my phone running other simply preference screen. I have created a simply factory class () an interface (SummaryResolver) and a bunch of implementation for each type of Android preference type (, . I couldn't eliminate the "" it will be doing only once within factory class. 

EBCDIC is a myth made up to scare children during holidays, so here is the ASCII-dependent version, as suggested in a comment by JPhi1618. The main imrovement is to efficiency, by avoiding std::string::find, which is probably implemented as a linear search. Unicode is not a myth, unfortunately, so don't ever try encrypting the string "Zurück". 

Here's a version of your code which works with C-Strings by using to turn any array arguments into pointers. This also uses perfect forwarding in the recursion, to preserve argument types, just in case unconditional conversion to a const reference is inappropriate. I'm making this Community Wiki, because it's more of an answer to your question about C-Strings, rather than a code review (ok, little review: is usually so poorly implemented, you should use something from , like , otherwise, thumbs up!). 

I tend to agree with Loki's comments if you wish to duplicate . But, finding a "safer common type" is way more fun than having a common type for all arguments right from the start. For this, you could use a trailing return type with to make each expression-returning template function return its expression's promoted type, rather than whatever type the function's first argument has. The example below is kind of ugly because each function's expression appears in the function body and in the decltype, so there is room for improvement, but it demonstrates the basic idea. This prints on both lines, where the original would print , then , because the second call's first argument is an . 

Just some general thoughts. Are your field by purpose? Do prevent creating a do tight coupling of your components while development you should start in general with and only increase the visibility where necessary. On the other hand if you "never" plan to add additional operations to your data object, make them public and skip the useless getters. Are the comments only for us now, or are this your real comments? 

Assuming that there is no other code in the class that you deleted here, I'm not sure why you store all the connection details in the object. I recommend to inline into the constructor and drop the now unused fields. After this inline there is also no usage of your method and you can drop it, too. In general I would not work with string identifiers, if you are not forced to. If you rename you field to you have to keep in mind the string and fix it to. Not all IDEs will support you here. The following code will do the same as yours: 

This is my code review. I don't read others much of others answers, it's likely they have point almost the same issues. 

ps. ListPreference, CheckBoxPreference, PreferenceFragmentCompat and other misses classes are Android SDK stuff. 

Name conventions: you have to pay attention of Java widely used name conventions: Java code conventions 

your implementation is to much procedural. You do all in the main method. You should put the logic in Elevator class and call it via main method, after instantiating the Elevator object. You should avoid static members, too. your implementation have to much ifs, that let your code bigger and polluted. see anti-if. elevatorUp and elevatorDown methods are almost the same. you should avoid code duplication. See DRY. 

What could be improved in this implementation? I think I could eliminate one of this methods: getLastNonWhitePosition, getFirstNonWhitePosition using Java 8 and functional programming, but I cannot do that. 

You can skip the same optimization in your method. In addition to that in Java you usually don't pass arrays around the system and modify them. If we make the the method private and keep the issue local, I think we can live with this for the moment. (List as parameter and new list as return values would be more common) 

As you see, a lot of magic. If you write your own ORM let me recommend to automatically generate some abstract classes between your entity classes and your model and add all the getter to this abstract class. The getter itself can then call and you get rid of all this name guessing. Of course it would be easier to use an existing ORM. 

Of course you can take advantage of all the arithmetic power of BigDecimal and define a specific rounding mode etc. EDIT: Just to prove that the float approach will fail (tested in Java 6): 

So... the Solution.java algorithm solve the problem in about 2 milliseconds. Your optimized method alone took 12 seconds in the first iteration. Even if in the subsequent iterations it taken about 0 millisecons if the subsequent inputs are all covered by the numbers in map, it would only tie the game after about 6K iterations! The problem is what this type of optimization don't work very well in this context: in the Solution.java code the programmer has used only primitive types and keep the calculation very simple. That map and lists you've used and the related operations, all the autoboxing and unboxing needed, are to much expensive compared to the use of the purest java. 

I did a little modification in the class DivisorPrint and in the class Solution if you run both again you will understand why the first is slower. I change the scanner instantiation to do the process automatically without the need to enter the numbers manually. 

Unsigned subtraction (and automatic mod 2^32) will always give , even when , and as long as the actual elapsed time doesn't overflow the tick count (it isn't greater than 49 days). So you could replace the original with the following code: 

Your code includes the optimization of evaluating only odd-valued candidates (by iterating with a step size of 2) because the even-valued candidates are known to contain a factor of 2, and are therefore always composite. This candidate-skipping optimization can be generalized to include prime factors greater than 2, by varying the step size in a certain way. I made a version of your code which skips candidates (values of ) containing factors of 2 and/or 3. This is done fairly cheaply by alternating step size between 2 and 4. Extending this optimization to even greater primes gives diminishing returns for two reasons: The step size adjustment calculation becomes more complex (and slower), eventually costing more time than what is saved by skipping candidates; and higher prime factors exist more sparsely than low ones in the candidate population. Skipping 2 alone catches 1/2 of the composite candidates, and skipping 3 alone would catch 1/3. But if used together, half of the composites 3 would skip were already skipped by the 2 skip, so skipping 3 just catches an additional 1/6 of the composite candidates. Including a 5 skip would only eliminate an additional 1/30 of the composite candidates, and a 7 skip 1/210. I experimented with replacing the floating-point call with an integer approximation, but it turns out that is very fast (at least on my machine). And then I gave up entirely after seeing Vedran Šego's optimization, which is brilliant, especially because as gets bigger, the gaps between calls to become larger, to the point where it doesn't really matter much how slow your calculation is. So, I had to add this to my example, thank you Vedran Šego. One other thing, the loop must terminate. If is signed (like ), it will overflow and wrap around to a negative value. This is a completely pathological situation -- calling with a negative number, plus other things, depedning on optimizations employed. Even for unsigned , duplicate primes will be added to the vector until the process crashes when it runs out of memory. So my example terminates before overflows. I also defined a type, to make it easy to switch the integer type used for calculating and storing primes. I use in my example, because it gives results a larger maximum value at no extra cost compared to . Try if you really want to see the program continue for much longer than you will be willing to wait. 

If you stay with an procedural style (totally fine for such a task), you could anyway try to split your main method into smaller well names methods. Nevertheless, after this initial objectifaction or extracting of a method like 

In general it is a good idea to replace ifs that covers the whole function by a guard condition. So you get rid of a level of nesting. 

Assuming your array is already sorted, you can just overwrite the values every time. Skip the inner if. 

If you want to put the whitespace trimming in the callback and as you don't need to escape , you could even use 

If I get your code right you are creating random cards while dealing. I would move this at the beginning to make your dealing cleaner. I'm no ruby guy, so I have to offer some pseudo code: 

Please, review my code about any aspects you think is relevant. One question about performance: these object creation whenever user change a property is a risk to performance? I like this way of doing things (creating objects) I think in java this is not so problematic anymore. In Android maybe. thanks in advance 

I made this password generator I'll use in a simple Android App. I want that it generates a password using a truly random number source, but I don't have idea how to do it by now, so a let a seed parameter to generator class that will be created by that numbers source. I used the decorator pattern to compose the source from which the chars will be picked up. So if I want a password in which the chars will be picked up from a source of numbers and lower case letters I will decorate it with NumericDomainRange and LowercaseDomainRange, but there is no warranty that the password generated will be composed of number and letters. It must calculates the password entropy based on some algorithms, I have not implemented anything yet. Please, review its overall design. root package: 

It is in general a bad idea to run SQL queries in a loop, so try to create one join for all your queries. Now the simple Controller (index.php) 

In later case: Is this adding any value to the reader? Just find a suitable variable name, as you did here, and skip the comment. Some of your method are pretty long, maybe you can extract some well name method to improve readability. Also reducing the nesting level that way, might make it easier to maintain the code. 

I think there are two major issues you should address right in the beginning when you start with PHP. Separation of Layout and Logic This means in general that you shouldn't mix HTML and PHP code. Later this will lead you to the MVC-Pattern. index.php 

As you see, there is no much "logic" left. I get rid of a bunch of ifs and could split the bigger problem in two smaller own. Now you could write tests independently.