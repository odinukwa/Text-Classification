You can solve this problem in one of two ways - starting with , or changing your loop to use and intializing it to , like you currently do. This will have value be stored in the index of the array, so all values will be set to once all the numbers in the range of 1 - 99 have been entered. 

Note also that I renamed the variable to so it demonstrates better that the program is just waiting for the user to input a value to continue. However, with all these pauses for input, maybe you should explain that to the user so they don't wait for the program to respond and wonder what is going on. 

If you do this, you may want to make your variables global so you don't have to pass them to the method - both methods will just be able to access them. However, as a general rule, try to keep the scope of variables as tight as possible. Also, instead of having different variables for the different tax values, you could create an array of tax brackets with all the values: 

Continuing with my web-based checkers game, this question is about the actual playing system. I'll ask for a review on my UI system in the next post. First, my BoardController.cs. Note that I have references to a class here and in other files. I consider this part of the UI, and will post it later. In fact, that is part of the reason I want a dedicated UI post--so it is up front and center. 

What happens when the input is formatted incorrectly? Does your program handle this use case? While this program may not need to have intensive error handling, many programs do, so this is a point worth mentioning. If the user left out one of the numbers in one of the arrays, it appears your program would throw an exception when you are filling your 2D arrays: 

Generally, we want as little whitespace as necessary. I don't ever put whitespace after a or before a unless that body is blank, and I don't ever use more than one line. 

Start a Timer. Whenever the text box changes, the user presses a key, the event occurs, etc, start the timer. If it changes again, reset it. Create some timeout that, after which, the file validation would occur. (200ms would be plenty) This has the obvious benefit of reducing the number of IO requests you do, and it helps keep responsiveness up. You can also make it asynchronous, and only hold the UI when doing actual updating. As far as your code goes... I would add braces in your condition. I used to omit braces whenever possible, but I encountered more than one bug as a result, and it's just as easy to add them. There's really not much else to comment on; there's not a lot going on here and it's quite clean to begin with. 

If you notice, we got rid of entirely. Instead, we're using an to only return lines as we process them. This means that if we're only looking for the first , we aren't processing the entire collection, but instead only process until we find . (I'm not going to write an example of this at this time of night, but it's pretty cool.) The only other change we need, is add to the call: 

Magic. ;) I am betting that the performs fastest with my method because does all that casting to and such. If we remove that, we get a slightly different result (still favours my version): 

There is no need for to be as many lines as it is, we can shorten it into one. (ALL the variables are used in one location.) 

This is actually a good case for C# 7's pattern matching feature. I'm not as familiar with this feature as I would like, but it should look something like this: 

Wait a sec--why does your game player know when the program ends? What if you had two games, and the user was just exiting this game? Only should know when the program ends. 

Continuing the series of Code Explorer posts, here is the collection of view models for the tree nodes: 

Sure there is. Check the input and notify the user, and let them try again. And do it in a dedicated method. Maybe you can modify the stub method I gave you into and make sure it is within the ranges provided. This is a perfect example of extracting similar logic into a more generic function. 

I created a board editor for my Checkers game. This allows the user to create any board position and copy the FEN string representing that board, which can then be used to create a game from that position: 

Comments should say why the code is the way it is, not a generic comment that doesn't tell us anything constructive. If there is an issue with the code being slow, document why it is slow, and maybe state why you haven't been able to fix it for future reference. Spacing 

is not valid, the correct attribute is There is a pretty bad UI problem here. When you click the buttons as follows , the calculator reads , whereas it should reset and only read because you clicked the button. 

is by design, as I only need to be able to access the s out of this class. This method gets the trees stored in the second level so I can get the items in the third level. returns the menus stored in the top node(s) based on which version of tutorial the user wants. gets the s stored in the deepest levels of the tree based on which version the user is in and which menu they just opened. These methods are the part I do not like, partially because there is no easy way to search the tree for a value. P.S. I'm not sure if this is more of a tree or a file structure as I need it to be able to have multiple nodes at any level, with the true "root" being the variable holding it all together. 

The idea with these last two suggestions is that doesn't really need to care how the XML is structured for each , it only needs to care about how to get the document to for construction of the . 

Obviously replace the names with something more meaningful. This allows you to, in the future, if technical concerns require/allow it, to change the values or make them properties and configurable, etc. 

In an effort to create ever-improving code, I've written a that takes a generic type parameter to be acted upon. It's pretty trivial, so it should hopefully be easy to review. In order to do this, I had to create two interfaces: and . 

This class allows for easy management of the of an XNA game. It provides a simple, easy-to-use API for interacting with the Keyboard and getting key-presses, via a few (trivial) events. As far as I can test, it works as intended. GitHub Link (for future reference) as of this version: . 

I was reading this question, and the answer that mentioned streams, and a thought had occurred to me. In many cases (at least in my usage) I want to determine if a sequence (or ) has at least a certain number of elements, or has no more than a certain number, etc, that all match a predicate. As it stands now, we have the method, but it will enumerate the entire before returning. In some cases, we know we only care if there are certain numbers of values. (Such as exactly 8.) As a result, I've built out a set of new extension methods to , that add some functionality for counting only as needed. That is, if we care that we only have at least , we can now deal with that in particular. 

Naming Yes, naming is hard. However, bad naming is going to make your code prone to bugs (what does stand for again?), hard to maintain, hard to read, and all sorts of other things. Style Poor indentation (which scope does this snippet have?): 

After Ben Rudger's suggestion to use a , I realized that if the menu is closed, there is only one instance of a in with the matching . Because of this, all I have to do is iterate over until I find that matching value, choose that value, and exit the loop, so becomes this: 

My naming is off. I should name my method parameters using camelCase, so will become , etc. This will help the readability of the code because my brain will automatically know what group a name is in. Private fields should be named with _camelCase, so will become . I can make my Mutexes , which will prevent me from assigning them from any instance except the constructor or place of declaration. This will guarantee that they will never be reassigned to incorrect values by accident. I should use instead of the type name when declaring variables. It will reduce the amount of text to read, and I can tell what type is being assigned by the value assigned to the variable. This is not always possible, however, such as if I created a variable and did not assigned it immediately or assigned it with . is an unused variable that should be removed. The alternative would be to use it in the following line, rather than the direct value: 

First, you should use descriptive variable names. 'test1' is not very descriptive of what it is used for. Second, instead of initializing 'len' to 10, you should initialize it to -1. This would be better because it is an impossible value for a string's length. 

This does exactly one thing: prompt the user for a number and store it in the array. We won't store it in the array in our sub-method, but we'll extract the prompting out. Let's create a new method: 

Before I write the tail-call recursive example, I want to go over some issues I see with how you do things. Your and can be far improved, and you can stop relying on that exception to fix your up in : 

You should be (pun intended) your and objects. They are for a reason. Lastly, your namespace: you should name it to follow along with what it is meant to represent a collection of. Likewise, your should have two interfaces: , . Otherwise, there's nothing glaring to me. 

Notice how and don't even use ? It's just there for type-inference. With that said, we can still make a more fluid API: 

Boy is that a mess. You use a loop (not F# idiomatic), filter in the loop and return either or , then use a on a to filter only the values and return the actual value. You use a , which is a synonym for (which is the preferred method), and the worst part is you use it on a list that could have already been filtered. 

It takes \$O(1)\$ memory, and runs in \$O(n)\$ time where \$n\$ is the number of characters processed until the correct sequence is found. No matter now many invalid characters are entered before a valid pin, there is no lockout procedure. Test code: 

I have an application that needs to validate user passwords to a very reasonable custom validator, which is heavily based on NIST-2017 requirements. The validator intends to satisfy the following restrictions: 

I recently added Pool Checkers to my Checkers game. My main concerns are about how I manage calling the correct variant in my functions. Because this is a library, any public-facing method in can be the starting point, and because I use pure functions, I have to get the information in every function. I'm not sure if I managed this very well, or if I can improve it. The game rules are in PoolCheckers.fs: 

Otherwise, I see nothing wrong with your code, you use reasonable variable names, you use braces around your s and loops, and you indent your code nicely. 

This makes fewer (by half) the lines of code to maintain, not counting braces. Also, notice how I put braces around my code to help prevent errors. Romoku also make very good points about renaming your variables to reflect what they are doing better. 

You are triggering logic in the constructor? Never, ever do class logic in the constructor! The constructor is for creating an object only. In this class, you shouldn't even have a constructor. 

Most of the code in is duplicated - more functions would really help here. Early exit As mentioned in the comments in the previous (deleted) answer, you can early-return as soon as you know which value is sorted higher. For example, sorting "aa" against "bb" should be able to return after checking the first character of each, while "aaa" vs. "aba" should be able return after checking the second, and so on. 

In F#, you typically don't use statements, except for choosing a path based on the value of a boolean literal, and I only do that when I can use it like a C# ternary. I would write the in your second function as: