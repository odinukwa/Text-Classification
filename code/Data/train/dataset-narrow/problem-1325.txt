You have over-indented the lines, and there shouldn't be a space before your semicolon. To convert this into a working statement, you could do the following: 

Magic Numbers: What is 14? And why are you dividing it by the amount of results? Magic numbers should be moved to another variable to increase readability. 

Future gazing This isn't usually a review point I add, however, I think you could add support for other fields, and make a handy dandy dialog box to choose which you want to hide. That'd be a StackApps worthy creation in my eyes. 

I wanted to practice functional programming (fp) without using any library but using vanilla JS only. So I took the a problem from project euler: 

Is there a better way to write it in FP with pure JavaScript, i.e. no additional FP library? I have problem with the lookuptable . Everytime I "add" a new element to the scoreboard, I had to pass the new scoreboard along. There is probably no other way around this in FP since FP functions have to be self-contained, i.e. every new value that needs to be calculated have to passed along. But I still wonder whether there is a nice FP solution to that. Any other improvement suggestions are welcomed. 

You probably knew this already, but omitting a direct comparison in an statement tests the boolean; so, the following is redundant: 

Reviewing your current structure: your could be improved: it should / could be inside the statement as a case. 

That kind of format is better for linking functions and variables, which then you can use to store internal variables, just like in your HNQ constructor. 

UserScripts should follow the format, so that TamperMonkey, GreaseMonkey, GoogleChrome and the other installers can pick up on the fact that it's a UserScript, the GitHub file does not. 

I wanted to practice functional programming (fp) without using any library but using vanilla JS only. So I took a problem from Advent of Code (the 2nd part of Day 2): $URL$ I'm doing the 2nd part of Day 2. You can only access the 2nd part once you solved the 1st part. To access the 2nd part type in this number or check out the solution here: Advent of Code Day 2 (1) in Functional programming (FP) 

I got 2 while loops that are nearly identical. Is there a way to refactor them? I tried to refactor them into one function. But that function takes and returns 4 parameters: 

This also means you can store the greek characters and potentially other languages in an external JSON document. 

Also, you should seperate the new-line characters into new strings and just concatenate them in. This makes for much clearer readability: 

I see a lot of statements that could be improved upon. Ones like these for example, are returning a boolean variable depending on an if-else statement with nothing else inside. In those cases you can return boolean values directly. 

Using : You shouldn't be attaching new functions to primitive prototypes. What happens if in ES7, they add a function to the array prototype called ? And your code is sitting mixed in with production code. Then Bobby Maintainer tries to use s functionality, and finds it doesn't work the way he expected, because your version is overriding the language specifications' version. I would avoid using s on primitive types unless it's just practice, don't ever use them in production code. With the exception being polyfills, of course. 

Running this code with in normal mode will create a . I had to "cheat" by running this code in : (node 6 supports Tail Cail Optimization (TCO) when the flag is turned on). I also tried to cache the but this didn't help either. I got the feeling that big size Input is the limit for FP. 

Is there a better way to write it in FP (without any libraries and with vanilla JS only)? Also any improvement suggestions are welcomed! 

I wanted to practice functional programming (fp) without using any library but using vanilla JS only. So I took a problem from Advent of Code (the 2nd part of Day 5): $URL$ 

I find it better to stack things alphabetically, or alphabetically in groups (for example: , s, s, ), or, you can stack them by line length. This point also applies to JS as well. 

I would consider taking a look at Caman.JS, a image manipulation library with similar features to the one you've made. 

You shouldn't have individual functions for each role, and a user probably shouldn't be assigned more than one role. Especially seeing as you can't be all three 

It has the same usage as your version (). Consider also instead of using as your element, instead passing the parent element in the form of a selector string as a parameter. 

Is there a better way to write it in FP with pure JavaScript, i.e. no additional FP library? Any improvement suggestions are welcomed. 

Is it possible to solve this problem yet still be consistent with fp, i.e. no mutations and no loops? And of course: Any other improvement suggestions are welcomed. 

I wanted to practice functional programming (fp) without using any library but using vanilla JS only. So I took a problem from Advent of Code: $URL$ 

Is there a better way to write it in FP with pure JavaScript, i.e. no additional FP library? Any improvement suggestions are welcomed. 

I would think that a major time complexity comes from the usage of Regex which involves 'steps' in the processing of the expression, meaning the complex the statement, the more steps it can take. Instead of using a Regex for when is false, a normal can be done. And instead of using a Regex for the global checks, I would suggest using a polyfill like the following: 

According to PEP8, Python's official style guide, your code has 255 violations of best practice, primarily cause of the extraneous whitespace: 

In the following code snippet, checking and are literally the same, exact thing. If the content isn't empty, then it's set. Also, you shouldn't be checking for every item in . You can take the request method check out the front, and return false in the case it doesn't meet your conditions.