This approach should reduce the size of your code by quite a bit, and make it easier to maintain as well. Misc 

Yes. Prepared statements are the only reliable way to prevent SQL injection, and you should never write any SQL statements without prepared statements. It is bad style and very insecure. Misc 

Null checks You have quite a lot of null checks, which leads to deeply nested statements and thus hard to read code. The first thing you should do is return an empty collection instead of null in . That way, you don't need because if the result is empty, the for loop will just not execute. It's not that clear what returns, but I would guess that you could also change it so that is not needed. The method should also return an empty array instead of null, otherwise you will have the same problem in the calling code (although it's unclear if it returns multiple moves as the method name suggest, or a single move, which the return type suggests). Misc 

Depening on your - current or future - limitations on , this is open to SQL injection. You really should always use prepared statements, even if you think the data may be safe. If you need to think about this each time, you will eventually make a mistake. Misc 

A user will probably not be able to hurt your server. You do open your system up to SSRF which might cause a problem, depending on your system. There might also be a possibility to DOS your server as you keep connections open for 60 seconds, which is a rather long time (I'm not quite sure about this, but you should definitely test this). You also provide your users the possibility to attack other systems using your server. They may exploit vulnerabilities in other systems that can be exploited via GET, and they may use your server to scan websites because you allow a keyword search. It may also aid in DOS attacks. You may or may not be liable for damages causes by this, I personally wouldn't risk it. At a minimum, I would disable the keyword search, limit the amount of requests a user can do, and change the user agent to something more honest (eg , and provide an option to opt-out). Regarding your code: It's generally good. A couple of points: 

Goto Honestly, I didn't even know that PHP supported labels and goto. But this is how the manual for PHPs goto starts: 

static Student count Using a static field like like this is bad practice. I would create a class, which could look something like this: 

Defense in general Looking at your code, it seems that you are not really sure what you are defending against, and are just using a couple of functions in the hope that it works. This is not the correct approach. I think it would benefit you greatly if you just tried out the most common vulnerabilities (eg XSS and SQL injection) yourself, so you know how they work, and what can defend against them. Regarding the various functions you use: 

One thing that directly jumped out at me is that it's really hard to see how you make the sounds of different instruments. It seems to depend on the passed in . The call of that depends on the order of instruments in the constant, and that it is in the correct order regarding , and displayed in the same order inside the GUI. It's never a good idea to put that much weight on the order of different lists being correct (because those lists work independently of each other). I would introduce an explicit class, which has a and a (if key is the technical term). I would then pack the whole thing into a class as well (because of my lack of music knowledge it's hard to say how. Some ideas: Could a list of s be part of an instrument? Or could there be s which each own one instrument?). 

But I would rethink your whole approach. What if you want to add ? It's hard to say how exactly your code could be rewritten without knowing how the classes look, but I would assume that it should be possible with lists, etc. Misc 

The default should be fine. Most of session security is about server configuration, and for a shopping card you probably don't need stuff like regenerating the session id regularly, binding it to ip and/or user agent, etc. 

Structure Right now, you can only create a skyline for this one type of input format. To fix this, shouldn't be part of . Instead, should accept a list of objects (which you created somewhere else, eg ). Output In your problem description it says: printing a list of points , but you are not formatting it like this (which makes it a bit hard to read the output). Scanner Class I think it's good to have a class to parse input, but it is quite obvious that you didn't really want to have such a class. Your variable naming is generally good, but in , you have names such as , , and , which make the code hard to read. itself is also not a good name, would be a better fit. could also be better named: move what next? To the next word/number/pair of numbers? Your method also moves to next, which seems a little odd to me. I would try to rewrite the code so that it does not do this. You might also want to include some kind of check/error handling for malformed input (although that's not too important for a throw-away class like this). Comments A comment or two wouldn't hurt your code. They are not strictly necessary, but it would help a reader to faster understand your code. For example: 

In this case I would create more functions. This should increase the readability and reusability of your code: 

It looks like your class is in the same file as the code above and below it (the include and the call to the class). This isn't how it's normally done. You put a class in its own, separate PHP file. The way you are doing it, you cannot use your class anywhere else, because as soon as you include it, all the other code gets executed. General Approach Is there a reason that the content of a post is inside a textfile instead of the database? If you didn't want/could use a database, I would understand, but since some important information is stored in the database, why not all? Your current approach seems a bit inflexible. 

Classes Right now, your class is responsible for the bot related functionality (connecting, sending/receiving messages), as well as managing commands. I would create a class that manages all the command related functionality, you could call it . Reflection [if you have a good reason to use reflection, like allowing users to add new commands without recompiling, ignore the following] I wouldn't use reflection like this. The only advantage you gain is that you do not have to add a new line of code when you add a new class. The disadvantage is that it is not very flexible (for example, you cannot easily ignore one subclass of ), it is more complex and thus more error prone, users can add custom commands (only a downside if you don't want them to), it might be a security risk (this is speculation, but as the bot is exposed in the constructor, a user created command class probably could insert custom commands into the database or send messages), and it is slow (maybe not too much of a concern in this case, but still). Naming Most of the time, your naming is good and your code is very readable. But then all of a sudden, the reader is presented with variables like , , , or . I would change them to , , , and respectively. Also, sometimes you use camelCase, and sometimes underscore. I'm sure that there is a reason, but I wasn't able to figure it out. For example, why is using underscore while is using camelCase? Repeading Code Your and methods look pretty much exactly the same. You could rewrite it like this: