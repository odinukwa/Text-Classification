Regarding this, the output is 3A. So, it must be ok. Personal approach to this: I do recommend get some 3S (11.1V) or 4s (14.8V) lipo battery, which will give you much room (in terms of current) for powering the leds, but you'll need to get a lipo charger (can be found for about 10â‚¬ some times at chinese websites) If the game is permanent and doesn't matter how much it weights (ie: not a handheld device) I'll recommend get a car-like battery. There are some with a small footprint than can provide lot of current, but I'll go with the lipo 

In this stack overflow question it said that the issue is caused by " a conflit between two DNS servers : isc-dhcp-server & udhcpd" and it's been solved: 

Here you can find an example on how to drive one or multiple arduinos using i2c. It's really well explained there, so, I don't see a point on duplicate the info here. Please take a look at the link and, if you have any doubts, I'll be glad to help you out. There is a couple of steps to do, but basically yo need to configure i2c as master on the pi, then configure arduino as i2c slave. You're supposed to add a level converter in between, but most people is getting ok results without it, and bad result with it, so... I don't know what to say about it. Benefits on i2c are that you can connect up to 112 nodes on an 7 bits i2c bus. So, just need to use 4 wires from pi to arduino 1, then 4 wires to arduino 2, etc. Also, you can add i2c sensors and actuators as well on the bus. 

I run two Pi2s and a Pi3 headlessly (i.e. remotely, with no monitor/keyboard) and they're left on 24/7. The Pi devices are great for this type of use-case as they use a fraction of the energy of a full-size computer. If you have a Pi3 and you'll be leaving it doing very long CPU-intensive tasks, you'll want to use a heatsink and maybe a fan, but it's only the Pi3 that gets toasty and then only when it's stressed. (I use heatsinks but not fans.) Do some reading on how to properly set up your Pi for remote access. I would recommend setting up key based authentication for ssh, which enables password-free login from your own - trusted - devices. Once that's working, either disable password auth for ssh altogether, or set up as challenge response on top of your regular password. Either option will prevent brute force attacks from being a problem. 

When you plug in to the router, the router will (probably) be handing out an IP address and gateway details, DNS server details etc to the new client device, via DHCP. If you're connecting directly, you'll need to manually configure both clients with static IP addresses within the same subnet. Something like: 

Yes, the best way to do it is to use a transistor. Look for logic level transistors. Probably all the MOSFETs here with 2.7V and lower Vgs "FET Feature" will do the work. 

It depend on what your programming skills are. I'll go with python and pyserial and picamera. It'll work both for usb and gpio serial. Basic code will be create a python script that start at reboot using crontab. That script will wait for a serial input from the serial port and read whatever comes. If the message is "TAKE A PICTURE" then, run code to take a picture using picamera. In arduino, you'll need to create a sketch that send the message at certain event. It could be time based, user input, or sensor input. You can get rid of the arduino anyways and handle everything from the pi. If you want to take the picture when some event happend, like reading from a sensor is a certain value, you can read those from the pi itself. 

There are some USB hubs with active power management that when they are plugged into a computer try to negotiate power consumption with every device, so they cut out the power to every device to start plugin events. These hubs (which are otherwise very nice hubs and work fine for every other use) will not work to power the RPI and act as a hub for it at the same time. the two workarounds are to add a really big capacitor (or battery) to the RPI so that it will function through this power interruption, or to steel power from the hub's power supply instead of the hub. It would probably be easier to just use a cheaper hub. 

increase the source voltage: if you lose .4v over the wire increase your source voltage to 5.4 volts so that you get 5v at the point of use. You must measure your exact voltage loss. increase conductor diameter. decrease cable length. This is easy enough, if you use an ac extension power cord you can place the power supply close to the rpi. 

So, you will need to check out current consumption of all devices. I've found online that the servos consumption is between 0.25 to 0.75 A. Led consumption depends on the led itself. The current needs will be modified by how much resistance it will face. Raspberry pi depend on what are you using. Assuming Typical bare-board active current consumption will be 400mA. So, you'll be drawing, at minimal power consumption 250x2 + 400 + led_number*led_drawing. = 900 + LED mA which gives you only 1.5A for the leds, which I assume is too low for powering the 5 meters of the led strip. 

EDIT2: I don't know if this will work, but seems to me like the better aproach if possible: Create a software serial port under GPIO and wire the hardware serial port to the serial software port, then, create a python script that starts @reboot and reads the terminal TX and print it on the screen. EDIT3: I've found this. Seems to explain how to create more uart ports. 

I'm relatively new to the compilation of kernels and modules etc... so it's been a steep learning curve trying to get this working - and I'm still not sure if I've succeeded or not! 

You should then be able to communicate/ping between the two devices. When I've done this in the past, I've used a crossover cable rather than a normal Ethernet cable... but I'm guessing one or both of your devices have 'auto uplink detection' which is dealing with that for you. 

I currently use a Pi 2 as my OpenVPN server at home. I bought a Pi 3 to see if it was much faster, especially because it should have hardware accelerated AES crypto (hardware crypto features are included in the ARM Cortex-A53, I believe). I think I've succeeded in compiling and installing the kernel module, and I think I've managed to build a working OpenSSL which uses the cryptodev engine. But the results of speed tests are confusing. Do they look right? How come the (hopefully) accelerated version has such short times, if it's supposed to run for 3 seconds? First, the stock openssl, as provided in the latest Raspbian Jessie Lite: 

Following this link, .xinitrc in your home directory will be read and executed. Otherwise, you can place your script under /etc/X11/xinit/xinitrc (I don't know what OS are you using). So, both ways are supposed to run the script when X server starts (again, don't know what OS you're using) 

The pi A has a micro usb cable for charging, just use any micro usb b type to power it, using the pwr in port. 

I've found this, although it's for ubuntu, debian and derivates... but might work. Try configure X for every one: 

Never used that kind of screen, but this is supposed to drive it. EDIT: how to read and write data from and to terminal in python. You'll need to import os: 

You want to reuse the controller? You can use a usb snes controller. If not want to use a usb controller, you can wire the snes controller to the gpio, there is how to here. 

Relays have three pins: COM, NO, NC standing for Common, Normally Open and Normally Closed. It will depend on how you want to interface with the relay or relay module, you'll need to change your wiring. Usually, you will cut one wire coming from the power and pass it to COM of relay, after that, grab the other side of the wire and put it on NO or NC. Applying or removing V on the correct pad (usually labeled as INx on modules) it will change the state of the relay, thus, changing the "state" of the thing connected through it. 

As rasbian and umbutu are both debian based, they have a lot in common, including typical apache configurations, so there are probably no problems following for one on another, other than the wisdom or lack thereof of the author. 

Not all VNC servers support file transfer, specifically the original realVNC server used on debian and the raspberrypi does not. The tightVNC file transfer extension is not well supported on anything but windows. 

The longer the wire and the smaller the wire the more voltage you loose. That is a plain and simple fact. There are basically three ways to compensate for this: 

Use of a password with sudo. This is hard to do, prone to mistakes and seldom provides any benefit. Allowing full permission to the web server. The www-data user only needs to run one script for this to work. It does not need full root access. This can be done easily with sudo. 

Cron may not support backtick command expansion. put your commands in a script and run that from cron instead. much easier to debug. 

The PSU recommended is 2.5A for the pi3, so, you'll need to increase the current. You'll need to find a battery that is suitable to output high current. I know, for example, some 18650 batteries can output 20A on stable discharge. It will depend on the specific properties of the battery model used. 

Does the driver need to have a network to install? if not, you can place it under the boot partition and install it. Also, you can convert your pi zero into a usb dongle and connect it using this tutorial by adafruit. From that link: 

I've powered up a raspberry pi 2 and the official 7" screen with a 3.7V lipo battery and a powerboost 1000C by adafruit successfully without any power issues. The schematic is available, so you might want to take a look at it. 

There is different ways of connecting to the pi. You can use a usb to uart (serial) interface to communicate. Here is a good tutorial about how to use it. It's for the Pi Zero, but I assume it could be used for the pi 1 as well. Also, you can configure the pi to appear as a ethernet device. It's explained here. For me, the best way to do it is to connect the Pi to the router with an ethernet cable and power it using the usb. Then, configure the network settings on the pi to a static IP and then access using the mac terminal over ssh. I don't know if the speed is important to you, but the pi 3 is much faster than the pi 1 and the pi 2, so, if you're going to use it a lot, I do recommend upgrading it. 

I've worked it out now, partially due to @Jacobm001's answer - thanks! I have /mnt/video mounted to an NFS share on my NAS. I have a cron job which automatically downloads (large) videos and places them in this share. When I ran the command, it listed folders on the NAS (subfolders of /mnt/video, as far as the Pi is concerned), so I did before I ran again... Second time around, there was still a huge folder within /mnt/video. It seems that at some point, the share wasn't mounted when the cron job ran, and it filled the local disk (i.e. the SD card) at /mnt/video until it ran out of space. When the share was subsequently mounted, the contents of the NAS were shown (as expected), which was why I couldn't work out where the space had gone. With the share unmounted, I was to copy the files from the Pi to the NAS (using ) then delete them from the Pi, so now I've got my free space back: 

Most display managers can be configured to have multiple X servers and on boxes with one or no monitors using Xvnc works well. The setup that I use has the advantage of using the main X configuration with out using xdmcp. I use xdm because it is the most configurable. here is my /etc/X11/xdm/Xservers file 

Feel free to change the geometry to what ever you want. You would just need to generate a .vnc/passwd file and adjust the path to match. If you don't want a local X server comment out or delete the :1 line. Other display managers will probably work, but the configuration would be different. 

I personally like sudo or super for this when combined with a traditional cgi, and security can be managed to minimize risk (this can be done securely). The main criticism of cgi for large scale projects is because it forks for every request it does not work well with large numbers of requests. This criticism does not apply in this case because the main limit of bandwidth to this cgi script is what is connected to the gpio pins, and forking allows the script to run in different security context then the web server. There are some common mistakes that should be avoided: