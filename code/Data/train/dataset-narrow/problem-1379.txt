I'm guessing that your boss's argument is that a well named function would make the code more readable, and I agree with that in general. I often do that myself even when the function contains a single line. In this particular example I would not bother though. The comment above the json-call says the same thing as the function name would, and there are no obvious advantages to make a function for a single call. So if your question is specifically for this example, then I agree with you - keep it as it is, but if you want a more general answer, then I agree with your boss. For example - if this one-liner is something that you use in more than one place, i.e. if calling the "processKeyVal()" function in more than one place makes sense. Then I say you should make a function of it even if it would contain only one line of code. Or to put it another way - it is not (always) the number of code lines that should determine if you make a separate function of a code snippet. 

Readability is extremely important, particularly in large projects with many programmers involved with the same code. What you do, using local Boolean variables to clarify potentially complex conditions, is a very good way of improving readability that I try to imprint on my co-workers. That said, in your example, if I wrote that method from scratch, I would do it similarly to your first re-write. However, if I just happened upon the existing code, I would do just about exactly as your second re-write. It is good enough, and I do not really like to change other peoples code unless it is either incorrect, or directly violates the coding standard (which it incidentally does two-fold: The conditional line is too long, and our standard also tells us to place sub-conditions on separate lines). So, in my humble opinion: You have it right - I like how you do it, and you should take pride in writing readable code. But do not waste time on re-writing working code when a simple re-formatting is good enough. 

I'm not quite sure what you mean by "abstracting out the call...", but given that the "production module" actually looks like that, then I'd say that you have a perfectly valid little test there. It is good to hear that you really are interested in making sure that your test cases are testing the right things. Unit tests are too often something that programmers write simply because they are forced to do it, and they are therefore happy enough when the tests don't fail - not pausing to consider that it might have passed because the test was incorrect, tested the wrong criteria, or did not in fact test anything at all. Using fake data is what you normally do at this level of functionality, so you are good there. You might generally want to consider using more than one set of test data, but in this case I would say that it is not necessary. 

After a significant amount of optimization, I got it... mostly. The main looping variable for the While Loop is still clunky (still working through BuiltIn's method of accessing Robot Framework-style variables), but it's about 1/6 as long as the original with the same functionality, and runs significantly faster with less overhead. I'm now working on nesting the While loops. 

I'm not trying to be too critical of your variable naming but I do have to be for completionism and for other future Robot Framework users looking for how to write readable code. Because (it appears) that you're using the Python version of Robot Framework, I'd say it's good practice to keep to the Python convention of naming variables, which is for local variables or for global variables and index variables in loops. Also, shorter, more descriptive variable names are perfectly acceptable for this size of program. Re-written for that, your variables should be , , , , , and . Mechanically, I'm assuming it works fine as-written, but there's a few optimization problems. First, having a custom keyword for a single action is usually redundant (unless you want to simplify a repeated action with a lot of parameters to a single word for readability), so you could re-write your For loop as follows (using the re-formatted variables): 

Given one of the main highlights of Robot Framework is readability, I'll show my suggestions to improve that first and then go into my mechanical suggestions. First, good readability practice in Robot Framework is to line up your cells by tabs (or sets of four characters depending on your IDE) and capitalize each word of your keyword uses. So, your code as sent would look like this. 

I don't currently have the code available to me, so I don't feel comfortable investigating the dictionary or sub-functions, but that's the result of the small optimizations suggested. It already looks much cleaner and shorter, at least on the bottom half. EDIT: After more editing, I've transferred everything over to an array-style implementation, further shortened some of the logic, and divided the code into sub-methods. Still interested in any further optimization suggestions anyone might have. 

This methodology seems very inefficient to me. By the end of the program, I've looped through my list of keywords once statically and around 4 or 5 for every iteration of the loop itself. This is why I'm looking for algorithm suggestions. In addition, I'd like to get away from using to delineate lines, but unless I figure out how the compiler takes Robot Framework's code and says "this is what it equates to in Python", that probably won't be happening. Here's my code as it currently stands: 

That makes the keyword unnecessary, making your code easier to maintain. Finally, as another good practice, Selenium2Library is outdated. You'll need to download it separately, but ExtendedSelenium2Library is more robust, contains more keywords, and includes code to deal with Angular applications. The final code after formatting and optimization looks like this (I also took some liberties on comments that are either unnecessary or too wordy for what they describe): 

Check boxes These check boxes are built with all possible values, of a given attribute (), within one of the layers (MidScale/Water Mains - Block View -- it is the last one inside layer1), so they should filter that layer. Here is how those values are fetched. 

Please, let me know if I can improve the question in any way. I thought about posting this on other StackExchange sites (SO, gis), but I decided to post it here because it involves a larger code review; I'll also appreciate if someone explains that I should do otherwise. 

Filter the layer Here is where one of the problems is located, the method fails with the message . I know that this is not supposed to work, here, is just a placeholder for whatever I've got to put there. 

This function is called when an event is fired up, which connection was defined on a callback function. How to reach the target layer from here is kind of obscure to me... Example If a user checks the box with the number , the result should look like this (taken from ArcGIS webmap viewer). 

After getting the data from the toggled check box, I can't reach the layer in order to call the method that would filter it. How to hide/remove layer0 and layer1 (labels and check boxes) from the layers list? More generally, how to format this list? After selection and filtering, how to give different colors to each filtered polyline? 

Background I am working on a WebGIS application using JavaScript and ArcGIS JS API. I am new with js, so please bear with me. While learning and developing with js, I am trying to follow some rules, such as Asynchronous Module Definition (which ArcGIS JS API encourages), Revealing Module Pattern, and the Standard Style. Certainly, I still fail at following them correctly. This code is built on top of this responsive template: github.com/Esri/bootstrap-map-js. Objective This app consumes some ArcGIS REST services (MapServer). Assume that I don't have any control over them (I have access to server, but that is another thing that I know nothing about). One of the functionalities is to filter a certain layer (Feature Layer with Polyline geometry), according to a selection that the user does using check boxes. When a check box is checked, only some parts of the layer should be visible. If multiple checks are done, the visible parts of the layer must have different colors. Code I set up an example of this application using one of the example ArcGIS services. It is available in this repo: $URL$ (sorry, I failed at making a jsfiddle out of it) Below I make a brief description of the relevant parts of the code (file app/js/map.js) Add the layer When the map is added, all layers on the service are automatically loaded and placed in a tree with checkboxes.