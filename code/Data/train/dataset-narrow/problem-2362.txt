Another good reason to believe $NP\not\subseteq QP$ is that $NP\subseteq QP$ implies $EXP=NEXP$, and the latter is thought highly unlikely. This implication can be proved by a padding argument, see, e.g., in the proof of Proposition 2 in the following paper: H. Buhrman and S. Homer, "Superpolynomial circuits, almost sparse oracles and the exponential hierarchy," Foundations of Software Technology and Theoretical Computer Science, Springer LNCS Vol. 652, 1992, pp. 116-127, pdf 

It is well known that many important graph parameters show (strong) concentration on random graphs, at least in some range of the edge probability. Some typical examples are the chromatic number, maximum clique, maximum independent set, maximum matching, domination number, number of copies of a fixed subgraph, diameter, maximum degree, choice number (list coloring number), Lovasz $\theta$-number, tree width, etc. Question: Which are the exceptions, that is, meaningful graph parameters that are not concentrated on random graphs? Edit. A possible definition of concentration is this: Let $X_n$ be a graph parameter on $n$-vertex random graphs. We call it concentrated, if for every $\epsilon>0$, it holds that $$\lim_{n\rightarrow\infty}\Pr\big((1-\epsilon)E(X_n)\leq X_n \leq (1+\epsilon)E(X_n)\big)=1.$$ The concentration is strong, if the probability approaches 1 at an exponential rate. But sometimes strong is used in a different sense, referring to the fact that the convergence remains true with a shrinking interval, yielding a possibly very narrow range. For example, if $X_n$ is the minimum degree, then, for some range of the edge probability $p$, one can prove $$\lim_{n\rightarrow\infty}\Pr\big(\lfloor E(X_n)\rfloor\leq X_n \leq \lceil E(X_n)\rceil\big)=1$$ which is the shortest possible interval (as the degree is integer, but the expected value may not be). Note: One can construct artificial exemptions from the concentration rule. For example, let $X_n=n$, if the graph has an odd number of edges, and 0 otherwise. This is clearly not concentrated, but I would not consider it a meaningful parameter. 

That is, we are looking for a cluster, in which at least half of the neighborhood of every internal vertex stays internal. The mere existence of such a cluster is obvious, since the whole vertex set $V(G)$ always has property 1. But how hard is it to find the smallest (nonempty) such cluster? Is there a standard name for this problem? What is known about its complexity? 

Instance: An undirected graph $G$ with two distinguished vertices $s\neq t$, and an integer $k\geq 0$. Question: Does there exist an $s-t$ path in $G$, such that the path intersects at most $k$ triangles? (For this problem a path is said to intersect a triangle if the path contains at least one edge from the triangle.) 

If $L\in \mathsf{NP}$, then $Tally(L)\in \mathsf{NP}$. The reason is that one can witness $1^n\in Tally(L)$ by an $x$ with $|x|=n$ and $x\in L$, along with a polynomially sized witness $y$ for $x\in L$. Then $(x,y)$ can serve as a polynomially sized witness for $1^n\in Tally(L)$. While $L\in \mathsf{NP}$ implies $Tally(L)\in \mathsf{NP}$, yet $Tally(L)$ cannot be $\mathsf{NP}$-complete, even if $L$ is $\mathsf{NP}$-complete (assuming $\mathsf{P}\neq\mathsf{NP}$). This is because $Tally(L)$ is a unary language, and it is well known that a unary (or even a sparse) language cannot be $\mathsf{NP}$-complete, if $\mathsf{P}\neq\mathsf{NP}$, due to Mahaney's Theorem (the unary version was proved earlier by Berman). At the same time, it also seems unlikely that $Tally(L)\in \mathsf{P}$ for every $L\in \mathsf{NP}$. This would mean that for every $\mathsf{NP}$-property we could decide in polynomial time whether there is an $n$-bit string with the property. Or, similarly, for every graph property in $\mathsf{NP}$, no matter how complicated, we could always decide in polynomial time if there is an $n$-vertex graph with the property or not. 

Constant time is the absolute low end of time complexity. One may wonder: is there anything nontrivial that can be computed in constant time? If we stick to the Turing machine model, then not much can be done, since the answer can only depend on a constant length initial segment of the input, as farther parts of the input cannot even be reached in constant time. On the other hand, if we adopt the somewhat more powerful (and more realistic) unit-cost RAM model, in which elementary operations on $O(\log n)$-bit numbers are counted as single steps, then we may be able to solve nontrivial tasks, even in constant time. Here is an example: 

What is the complexity of finding the maximum number of geometrically disjoint $s-t$ paths? How about the special case when the edges are restricted to be straight lines? 

Question: what is known about this subject? That is, when is it easier to verify a solution for a problem in P, than finding the solution? 

Therefore, the assumption that every Karp reduction can be made injective and lenght-increasing implies $P\neq NP$, so it is likely very hard to prove. On the other hand, it might be easier to disprove because that does not seem to have such a dramatic consequence. It is also unclear, what happens if we drop the length-increasing assumption. 

Many natural NP-complete problems exhibit phase transition in this sense. Examples are numerous variants of SAT, all monotone graph properties, various constraint satisfaction problems, and probably many others. Question: Which are some "nice" exceptions? Is there a natural NP-complete problem, which (probably) does not have a phase transition in the above sense? 

(This is to answer Sasho Nikolov's comment, but it is way too long for the comment field, so I post it as an answer.) The two examples in the original question are special cases of LP duality. There are many similar examples, but one can argue that they all inherit the asymmetry from LP duality. Weak LP duality is easy to prove (it provides the "trivial obstacle"), while strong duality is deeper, proving that the trivial obstacle is the only obstacle. In this sense, the examples that are "children of LP" may be viewed that they are only different incarnations of the same core example. Here are, however, some other cases that (to my knowledge) are not related to LP. The examples below are all from graph theory, but other fields probably also contain similar patterns. 

Is there any natural problem in P for which the best known running time bound is of the form $O(n^\alpha)$, where $\alpha$ is an irrational constant? 

Since these conditions can be checked in constant time (in the unit-cost RAM model), the Theorem leads to a constant time algorithm in this model. Question: What are some other nontrivial examples of constant time algorithms? 

Let us say that a language $L$ is P-density-close if there is a polynomial time algorithm that correctly decides $L$ on almost all inputs. In other words, there is an $A\in$ P, such that $L\Delta A$ is vanishing, which means $$\lim_{n\rightarrow\infty} \frac{|(L\Delta A) \cap \{0,1\}^n|}{2^n}=0.$$ It also means that on a uniform random input, the polytime algorithm for $A$ will give the correct answer for $L$ with probability approaching 1. Therefore, it makes sense to view $L$ almost easy. Note that $L\Delta A$ does not have to be sparse. For example, if it has $2^{n/2}$ $n$-bit strings, then it is still vanishing (at an exponential rate), since $2^{n/2}/2^n=2^{-n/2}$. It is not hard to (artificially) construct NP-complete problems that are P-density-close, according to the above definition. For example, let $L$ be any NP-complete language, and define $L^2=\{xx\,|\, x\in L\}$. Then $L^2$ retains NP-completeness, but has at most $2^{n/2}$ $n$-bit yes-instances. Therefore, the trivial algorithm that answers "no" to every input, will correctly decide $L^2$ on almost all inputs; it will err only on a $\leq 1-2^{-n/2}$ fraction of $n$-bit inputs. On the other hand, it would be very surprising if all NP-complete problems are P-density-close. It would mean that, in a sense, all NP-complete problems are almost easy. This motivates the question: 

For example, looking at graph problems, can a maximum clique in a graph be found faster (though possibly still in exponential time), if we know that the graph has a unique maximum clique? How about unique $k$-colorability, unique Hamiltonian path, unique minimum dominating set etc.? In general, we can define a unique-solution version of any $\mathsf{NP}$-complete problem, scaling them down to $\mathsf{UP}$. Is it known for any of them that adding the uniqueness assumption leads to a faster algorithm? (Allowing that it still remains exponential.) 

I looked into whether there is a generally accepted hypothesis in complexity theory, which implies that there must exist an NP-complete language that cannot be accepted in polynomial time on almost all inputs (as defined in the question). Interestingly, the most "standard" hypotheses do not seem to imply it. That is, it does not appear to follow (unless I overlooked something) from P$\neq$NP, P$=$BPP, NP$\neq$coNP, E$\neq$NE, EXP$\neq$NEXP, NP$\neq$PSPACE, NP$\neq$EXP, NP$\not\subseteq$P/poly, PH does not collapse, etc. On the other hand, I found one, slightly less standard, hypothesis, which does imply the existence of the sought NP-complete problem, albeit not a natural one. In the theory of resource bounded measure the fundamental hypothesis is that NP does not have $p$-measure zero, denoted by $\mu_p($NP$)\neq 0$. Informally, this means that NP-languages within E do not form a negligible subset. For details, see a survey here. In this theory they prove, among many other things, that $\mu_p($NP$)\neq 0$ implies the existence of a P-bi-immune language in NP. A language $L$ is P-bi-immune if neither $L$ nor its complement has an infinite subset in P. Such a language satisfies our requirement in a strong way. However, it still remains unclear whether an example exists that represents a natural problem. 

For any language $L$, let us define another language $Tally(L)$, as follows: $$Tally(L)=\{1^n\;|\;\exists x \;\mbox{with}\; x\in L \;\mbox{and}\; |x|=n\}$$ That is, $Tally(L)$ encodes whether there is an $n$-bit string in $L$ or not. (Remark: there may be a standard name/notation for this construction, but I am not aware of it.) $Tally(L)$ seems interesting for the following reasons: 

The famous Isomorphism Conjecture of Berman and Hartmanis says that all $NP$-complete languages are polynomial time isomorphic ($p$-isomorphic) to each other. It has been an early attempt (published in 1977) to prove $P\neq NP$. It is still open, and if true, it indeed implies $P\neq NP$. However, the proof of this implication is essentially trivial: it is proved by referring to the fact that if $P=NP$, then there are finite $NP$-complete languages, which clearly contradicts to the Isomorphism Conjecture, since a finite language cannot be $p$-isomorphic to SAT. While the above proof is technically correct, I find it somehow disturbing that to prove the implication one needs a finite $NP$-complete language. Question: Let us consider a weaker version of the conjecture, stating only that all infinite $NP$-complete languages are $p$-isomorphic. Would this still imply $P\neq NP$? Is anything known about this weaker version of the conjecture? 

Consider two NP-complete languages that are polynomial-time isomorphic. If we know that one of them exhibits phase transition (with respect to some order parameter), does this imply that the other must also have phase transition, with respect to some (possibly different) order parameter? Intuitively, I would expect that the answer is yes. The reason is that p-isomorphmism means that the two languages are "essentially the same," apart from a polynomial-time re-encoding. It would appear quite surprising if one of them has phase transition, while the other does not, despite their p-isomorphism. But how can the implication be proved formally? 

Is there a (preferably natural) NP-complete language $L\subseteq \{0,1\}^*$, such that for every $n\geq 1$ $$|L\cap \{0,1\}^n|=2^{n-1}$$ holds? In other words, $L$ contains precisely half of all $n$-bit instances. 

It is known that approximately counting the independent sets of a graph is hard, even if randomness can be used, and even if we restrict ourselves to bounded degree graphs with degree bound at least 6. Specifically, if an FPRAS exists for such a graph class, it is known to imply the unlikely collapse $\mathsf{NP}=\mathsf{RP}$. My question is: what happens if we are satisfied with a PRAS, rather than FPRAS? That is, in the same setting, we only require that the algorithm runs in polynomial time for any fixed error parameter $\epsilon>0$, but does not have to be polynomially bounded in $1/\epsilon$. Is there any hardness result known with this weaker assumption? 

Following up Mohammad Al-Turkistany's answer, it seems that many of the polynomial-time solvable unweighted problems could be turned $NP$-complete in the weighted case, if we ask whether there is a solution that has exactly a given weight. The reason is that this may allow to encode the Subset Sum Problem into the considered task. For example, in the case of Exact Weight Perfect Matching, we can take a complete bipartite graph as input, assigning given weights to the edges of a particular matching, and 0 weight to all other edges. It is easy to see that this weighted graph has a perfect matching of weight exactly $W$ if and only if there is a subset of the weights that sums exactly to $W$. (If there is such a subset, then we can take the corresponding edges from the fixed matching, and extending it to a perfect matching with 0-weight edges, using that it is a complete bipartite graph.) I think, a similar simple trick may work for a number of other problems, as well. 

Consider the following variant of the MAXCLIQUE problem. Instance: A circuit $C$ with $2n$ input bits, and of polynomially bounded size in $n$. This circuit implicitly determines a graph on $2^n$ vertices, such that each vertex is identified with an $n$-bit string, and two vertices are connected with an edge if the $2n$-bit string that is obtained by concatenating the two vertex IDs, is accepted by $C$. Let $G(C)$ denote this graph. Note that it has exponentially many vertices in $n$, but is still determined by the polynomial size description of $C$. Question: Does $G(C)$ contain a clique of size $n^k$, where $k$ is a fixed constant? Notes: 

Let $G$ be an undirected graph, given with a planar drawing. We do not assume $G$ is a planar graph, we just fix a planar representation of it, such that each vertex is represented by a distinct point in the plane, and each edge is represented by a continuous planar curve between its endpoints. Assume that no other vertex can lie on such a curve, but we allow unlimited intersections among these edge-curves. Let $s,t$ be two distinguished vertices in $G$. We say that two $s-t$ paths are geometrically disjoint, (with respect to the given drawing), if their geometric representations do not share any point, other than $s$ and $t$. Note that it is a stronger requirement than being (internally) vertex disjoint in the graph theoretic sense, because they may be vertex disjoint, yet they may share some intersection point of the curves that represent the edges, when we follow through the paths as geometric curves. Questions: 

Note: In general, $L'$ does not have to remain NP-complete. For example, if each witness is constructed such that its second half is only a dummy filler (such as all 0), then $L'\in {\bf P}.$ 

There is an order parameter $r(x)$, which is a polynomial time computable, real valued function of the instance. There is a threshold $t$. It is either a real constant, or it may possibly depend on $n=|x|$, that is, $t=t(n)$. For almost every $x$ with $r(x)<t$, we have $x\in L$. (Almost every means here: all but vanishingly many, that is, the proportion approaches 1, as $n\rightarrow\infty$). For almost every $x$ with $r(x)>t$, we have $x\notin L$. For almost every $x$, it holds that $r(x)\neq t$. (That is, the transitional region is "narrow.") 

Another example: given an undirected graph, does it have a minimum cut in which all the edges are disjoint? If so, find one. At first sight this might appear hard. It becomes easy, however, if you know the result that an undirected $n$-vertex graph can have at most $n(n-1)/2$ minimum cuts, and they can all be listed in polynomial time. It can be extended to nearly-minimum cuts, which are larger than the minimum cut, but at most by a constant factor. Their number is still bounded by a polynomial. (I did not search for a reference, my recollection is that these results are due to D. Karger.)