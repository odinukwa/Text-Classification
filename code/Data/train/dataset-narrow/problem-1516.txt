You are asking about your tests but there are issues in your code that should be addressed before you start testing. 

To make this actually work there is a set of extensions for creating elements and adding attributs within general extensions: 

The last part to change is the . It needs two constructors. The default one that the designer needs and another one that requries a level and that you can use at runtime to create the form for the chosen level. In this new form the (this needs to be fixed) method raises the event so that the implementation can handle it. It is passed a new type of : 

Naming mistakes The classes and method names are not optimal e.g. the has a method called and the a method called . If I saw them for the first time I expect the to have a method and the a method. If it's updating something then it should be an or otherwise it's really very confusing. 

Preserving line beraks is also relitively easy. You just need to change the into a and use an enumerator that you can pass to the method that will continue reading line break chars. Unlike your method, this one will also consume line breaks at the and of a string. 

Your nesting is so deep that I need a scuba tank to keep diving ;-) To reduce it you should return from the method as soon as the condition is false and there is no else rather then nesting another inside. 

Why do you invent new names for the parameters? Isn't it easier to just copy/paste the one you already have for the columns? Besides with so many colums consider using an array and build the query dynamically. You can create an array with a collection initializer like this: 

As the use case is very simple and I also don't need to parse any complex styles so are the extensions, just a simple regex with some string manipulation. I update the style by grouping by the and pick the last one if there are mutliple ones, if there is none yet, then a new style is added. If the value happens to be or then it's removed. 

There is one more thing about the ComboBoxes that will signifficantly simplify the rest of your code. Their items can be complex types and not only strings. This means you can add or as items and set the to something like or anything else you are showing now. When you apply this to 

You could also use a but an has the advantage that its indexer will return an empty collection instead of throwing an exception if a key does not exist. Now you can also rename the to so the usage is even easier to read with the s 

There are a few things that you should refactor to be able to optimize your code better. Currently everthing sits inside the event handler and it's too much to handle there. You are not able to focus on particular task like that. You should separate the operations and create new methods and properties for them. Here's how you could start. It's not 100% perfect (like the hard coded picture box ) yet but it should give you an idea how to start refactoring your current solution. 

After all partial views are rendered and all styles are inlined my RESTful service is sending them via email. I implemented this feature with a . This middleware dumps the response body and uses it as the body of the email. I pass the recipients and the subject via the property from the controller to the middleware. It uses the element in the for sending emails. 

The class that contains the above methods is . I think it's not a good name. Even though they are extensions you should try to find a name that better describes the functionality the class contains. Here I find the name good because this class is a factory. It creates expressions. Consequently need its methods also new names like . implies you already have it somewhere and just retrieve it which is not the case here. 

Why do you need them? They are not only but also . If you cannot access them from the outside how are you going to use them? You didn't include the complete class definition but just a small snippet so it's hard to give you more feedback. 

You cannot initialize or rather create an instance of becasue there is an infinite loop in the constructor - the by default you set . Is this intended? 

General To me your code contains waaaay to many es. I'd do without them. Sometimes you even mix the conventions and use as well as an underscored fields like: . Level class It contains a lot of public fields that look like they were some constants but neither of them is marked as or . There are lines that use magic numbers like: 

I'd say this is more secure as you work with an entity that really exists, in case someone tried to post an invalid . Less work becasue EF handles tracking and ataching the entity thus less error prone. 

Refactor the main method and get the connection string from the connections-string section and not the app-settings. Create the downloader, the parser, the repository and let them to their job. 

but this is still casting the result with so we're back at the beginning... this method is unnecessary. 

So what should you do instead? I suggest implementing each file type that you need to de/serialize separately. This means that you should create such classes as: 

With such a lengthy parameter list you can use their names and write them in separate lines to improve readability. 

Nested classes Nesting classes is usually a bad idea. I would try to avoid. FTPFileJob You have created this class to group some data about the upload... then you should be consistent are reuse it where appropriate instead of splitting it and passing each property one by one. 

Logging The user of the downloader should not need to call the log methods. Logging should be invisible and ideally you should use dependency injection to pass the logger to the downloader. Currently it's not only tightly coupled to the console but also to the file system and even hardcoded file names. This is all bad for testing. 

This time I'd like you to review my unit-test helpers for binary operators. I wrote them because I'm often to lazy to test these operators because writing those tests is so boring. My little helpers are based on the and are built as extensions for . They start with a class that introduces the extension. 

I have rewritten the multiple times and this is its 5-th incarnation. It became a that now works with a so that I don't have to load the entire csv-file in order to parse it. I removed the GOTOs and extracted the new method that now contains the logic. There is also a new helper method that now advances the current position. I tried to create an enumerator for the stream but it does not support an API so I dropped this idea. 

don't get along well. A public field with an underscore? I'm more then surprised ;-) But not only by that. If I can access this field directly, there is actually no need for me to want to use this method: 

Excepiton handling Almost all of your blocks are meaningless (at least those with only ). If all you do is to rethrow the exeption then it's better to do without them. But in your case however they are even harmful. Instead of just doing you do which distroys the original stack-trace and creates a new one so debugging your code wouldn't reveal the real cause of the error. 

Classes should have singular names. They also should not be static if they don't provide some stateless general purpose functions. This one however isn't stateless. It works with private static fields. If would be called by multiple threads strange things will happen. 

You have two s and you use user-controls but why do we create user-control actually? So that we don't have to repeat ourselves and so that we can reuse them. They are nearly identical. Keep only a single view but make its parts optional so that you can disable them. For example you could use the and disable the second file for the first instance. 

The expressions are created with a simple factory to reduce redundancy when creating other operators. 

I solved this problem by creating a new type that I call . It has two properties. always returns the original value and gets serialized. returns the updated value and can be used at runtime. has no public setters. You use to actually override it and under the hood it sets the new to . 

Zip I don't know any extension that could do the same job but I think this one could be expressed cleaner by first producing the results and then zipping each result with the corresponding item that lead to this result using the extension. I also think that it's nicer to use rather then 

Both these constructors do the same thing and initalize the same variables. You can chain them with so that you don't repeat yourself: 

I never really liked them but now that I'm experimenting with expression trees I thought I rewrite these sequences too to get rid of the lambda parameter. This is not such a huge change but I think they are much easier to use now without having to specify the binary operation that could have been changed to something else even if an addition was expected. There was no way of controlling it. Here the operations are burn into each class. I've added an interface and removed the method. Concrete sequences must now only implement . 

I'm not sure about these two variables if they are not recompiled each time the method is called. It might be better to put them outside the method and make them static. 

This is wrong because it returns if either object is . It should return true only if both objects are really equal: 

The first step is to register all components in the container. In this case you can use tuples to define your interfaces, their implementations and base-addresses. Then you loop over this list and register each component. At the bottom I also register one of the users that depends on the . 

The wrapper is very simple but I'd still change a few things to make it prettier, more reliable and more useful so these are my suggestions. 

I cannot look at it. You treat a XML like it was a normal text file. This is insane. You should parse it with the , find all the and elements with LINQ or XPath and then check the value if it matches the pattern and if necessary call and resave the file. 

I think this is the most inefficient part in your code because the method is a O(n) operation. There are two alternatives for it: either use a s or the extension that 

Naming Then comes the naming. What's with the prefixes , , ? In C# we don't use the hungarian notation. You should use either the camelCase or PascalCase naming where appropriate. 

In a perfect solution you should not have to cast anything. Getting rid of the and replacing it with real types would allow you to remove all the quoted code above and just check the actual values, not their types or even existence. You could assure that they are defined during object construction already and later assume they are correct. 

Finaly you want to print the results. Let's do it in . If you decide to write the output to the console you now just have to adjust this small function. 

With your current solution you don't need the helper variables and the constructor at all. All properties are read/write so you could just use the object initializer to create a : 

On its own this is not very useful yet so I have a few extensions for it that help me to create keys which are tuples so that I can use their comparer that compares all properties and not the object reference: 

SqlClientProvider This is an example of a sql-client-provider. It overrides the method to use its own types and the parameter prefix. 

I one of my tools I use the user can define grouping for a . The criteria are known only at run-time. To achieve this I use a with a custom dictionary comparer that the extension cosumes so that I can aggregate the groups. This works pretty well but I was wondering if there is still room for improvement. The number and names of columns can change. There is nothing known about the until a JSON configuration is loaded. This is an example of such a configuration from one of my unit tests. 

You use linq's , why not the extension? The loop is huge and the printing along the way makes it hard to maintain and to read. We turn it into an extension that returns each partial result and of course we remove the printing. There is another thing I don't like about the original solution. Most of the time it's not such a good idea to modify the original array. So I make a copy of it and sort the copy. The loop can be turned into a loop that already supports an index which is easier to handle then with a . We start looping at the element backwards. The final result is: 

Actually not. They are not the responsibilities of this class. Validation is injected and provided via a service so it's fine. I would worry more about its design. The constructor requries two parameters but their corresponding properties are not so you could just use them. More appropriate would to use fields or make the properties only and private. 

I have this little class for parsing, comparing and sorting semantic versions. I did my best to implement the specification at semver.org with one exception - it doesn't support the build metadata. Now you can tear it apart ;-) I removed all parameter checks to make it shorter. 

Calling on this is counterproductive because this method returns directory names one by one (in a deferred fasion) as you go and request them. By using you go over directory names twice. First creating the array and then in your loop. The is a perfect candidate to be used with or with . For example this is on my machine with 20k empty directories faster by approx 3 sec then the normal loop: 

Just make sure to cache the generated for each because takes some time and it will otherwise become the bottleneck of your utility. 

If you create the array with the names in the right order (like in your excel sheet) you can even reuse them to populate the parameters. Here's the complete example. 

The first thing that strikes me is the repetition of the three constants in the code and in the tests: 

This is my final implementation where I use the WPF's , a decorator for composition and two factory extensions to chain the commands. 

You've removed most parts of the application leaving only three one-line event handlers without context and a notifier that is not yours. There is nothing to review anymore and I don't know any reason why you shouldn't use DI. 

This examples lacks a lot of error checks. For example what if a currency code does not exist or is too short or too long? It'll crash. To prevent it you can use the method of the dictionary. You'll still need to add one more class for reading from the console. Yes, you should encapsulate this too. By building it this way you can now easily write tests for each unit. Additionaly you can add another constructor to the class so that you don't need a XML in tests. 

The name in this method suggests it's only for debugging but it's not decorated with the . Don't you actually write tests for this purpose? I find this method is unnecessary. 

I usually don't like the but in this case it looks like a perfect example where I think you'd be much better off if you used one instead of the (that I'd name ). The already can do all the equality stuff so you don't need to write it yourself or you can derive your class from the so that is supports the operator. 

Another issue is that your code isn't consistant. Once you use full type names and another time just . Why not use everywhere? Then you mix PascalCasing with camelCasing for your variables. You should also use variable names that better describe things they hold. or don't say anything about the content of the collection. or sound much better.