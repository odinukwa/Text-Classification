My instant reaction: Ugh. Being a shameless fanatic of LINQ, I decided to rewrite the code using LINQ. 

They essentially do the same thing. I'm thinking first one is better from the standpoint of "Write more code only if you have to" and the second one is better from readability aspect. I'd use a switch statement with default case but I'm using a old version of JDK.. so I can't use it on Strings. Which one is better? 

The confusion is probably compounded by the fact that I'm working overseas. People here speak little to no English here. Which method should I stick with? 

This is the original version of code written by my coworker that replaces every null cells with an empty string. 

I found about 5 things that can be improved, or maybe it's more accurate to say that I did 5 passes over the code in my efforts to improve it. Here's the changes I would recommend, in the order that I encountered them. Better Names The first change was mostly cosmetic, but it was very helpful laying the groundwork for more changes later. 

There's really not much we can help you, given the low level of detail in the question. There are somethings you have in this code snippet that are generally considered a Very Bad Idea, so I'll give what help I can in that regard. Null Checks There are a bunch of these types of checks in the posted code: 

Halt. Stop right there. This assumes the script is located at some specific location. happens to be always in the same place, but this assumes the script to be in a place relative to . On what OS do you intent to run this? If it's Linux-only, you could replace it by: 

I've been thinking about a function which would accept data in JSON and maps it to such functions and which keeps execution order by the position in the JSON (list). However, such a function is way beyond my current skill level. 

I highly doubt it's idiomatic Lua, so I'm open for suggestions. As far as I know mixedCase and 2-space indentation are the way to go for Lua, but feel free to prove me wrong. 

Much simpler. Premature Optimizations If you ever have enough members in a room for the optimization to gain you anything, you'll probably be exceeding the length of the Mongodb query. This needlessly complicates your code. Ironically, any gains are lost when you forgot to use rather than , which needs to iterate through the lists you just made to avoid iterating through the lists. It looks like the accessors for the attributes already return values, so this can be much more readably rendered like this: 

The basic premise is that exceptions are exceptional, so they should never be swallowed. Refactored Version 2 

Normally, I'd suggest trying to get rid of as much mutable state as possible. That's not really possible here, the circular reference to the parent pretty much guarantees that something is going to need to be mutable. Vanilla Version Without deviating much from your original design, there are a few cleanup suggestions that I can make. First, as suggested by @Carcigenicate , could use some naming fixes. In the version below I used , but it could have been any number of choices. I also inlined the creation of . 

There's a lot of code in your while the isn't actually necessary. If the gets triggered the program will terminate anyway, so all following code is an implicit . Note that you ask a question while not checking for a answer. You're also not checking for , and more of such variations which one may expect to be valid. One way to solve this is by repeatedly asking the user for an answer until you get one you're willing to handle. One way of doing this would be: 

Yes, it goes over 52% at times and I'm sure it can go even higher. Let's take a look at what colours are caused by what. 

Yes, I know 1 of my lines is slightly too long according to PEP8. That's the result of the function failing the Single Responsibility Principle and lack of helper functions. If that gets fixed, the offending line will probably be fixed in the process. That's also the reason there are no docstrings yet. The function structure as-is is flawed, even though the current function names are very descriptive. I've tried putting the results in a dictionary, like this: 

Without thinking twice about it, I switched to the any version because .Any() is more readable for me. But a coworker of mine sees the change and asked why I did it. I explained that this improves readability but his objection was the following: 

And then I'd just get my device id by DeviceInformation.DEVICE_ID. Same goes for type and home_id. But this approach just doesn't seem elegant. Turn the initializer into a static one? Still, I feel like there's something wrong with this whole approach and I just cannot articulate it. How can I improve this class? 

This is probably a really simple question. An embedded device I'm working with will store the device information in an xml file. In my code, I want to read this xml file and freely reference to it wherever I need to, so I made a simple helper class: 

However, I vaguely remember you're not supposed to use in JavaScript unless absolutely necessary. What would be the more idiomatic approach for this loop? 

Whether you do this for 2, 3 or 100 numbers is quite irrelevant, just as the actual value of the result. 

Above would replace your method and is the most Pythonic way to solve this. This is called extended slicing and has been added since Python 2.3. Slicing is a very easy to use method when handling array-like data. The following illustrates how slicing and extended slicing can be used, executed in the interactive Python IDE: 

Yes, there will only ever be 7 in a classic Tangram. Yes, it still looks hideous. A piece is called a by the way, so you could use that in your variable naming. is a construct I expected to see in your solver. 

What's happening is that you are avoiding having to check for the mod 15 case by combining the mod 3 and mod 5 cases. This is fine if that's all you'll ever have to worry about, but if you intend to add cases later it's better to be explicit about things so you can be more flexible in your later rules. These two changes will replace un-modified numbers with 'Zazz': 

You've got a nice idea, planning for extensibility. There is one issue that I see with the way you've implemented it. 

This has a major weakness. Tail recursion lets us work with large s, but a is a singly linked list, and they do not append well. To fix this, I created the list in reverse, then at the end reversed the result. I was not particularly happy with adding this complexity, but it was necessary to gain access to tail-call optimization and avoid blowing the stack with larger lists. Program to the Interface The best way to remove the unnecessary complexity introduced in the last step was to switch data structures. This would be more difficult if this had a bunch of code that called it, but it was simple to modify the signature and use a instead, which has excellent append performance. 

There's good news and bad news. For beginner code, this is fairly well written. The graphics are intuitive and the controls straightforward. However, the site you've used (trinket.io) allows a kind of Python I haven't seen before. Your code will fail both in Python 2 and in 3. Before we do anything else, let's make sure it works on at least one of those versions so you're no longer restricted to an odd flavour from an odd site. Note: If anyone happens to know more about this flavour of Python, please leave a comment. This will be a review in 3 parts: 

Indentation Your code isn't indented. Indentation is a major step forward in readability. Spaces A single space goes before and after operators. There are also spaces after commas. Semi-colons You are missing a here: