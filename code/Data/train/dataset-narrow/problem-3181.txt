Primary step: get another power supply just for the relay. Connect the ground of your Pi and the ground of the power supply together. WARNING: Refer to your datasheets when choosing the correct voltages. In this answer, I'm using an NPN (N-channel) MOSFET connected as a low-side switch. Assume power supply is 5V. Make sure your MOSFET is rated above your power supply's voltage for safety (i.e. don't get a 5V MOSFET if your power supply is 5V). Assume I'm using a logic-level MOSFET for simplicity sake. You can also get a logic-level MOSFET for simplicity. Assume my mechanical relay will switch at 5V. 

Open up with your favorite editor. Search for a line that says . It should be on line 67 if I'm not mistaken. Uncomment it. I assume you know how to uncomment since I think you know scripting. Profit. 

Yes. knows how to check for unneeded packages and usually doesn't mess up while doing its job. It saw those packages and knew that they aren't needed anymore since no other packages need them. Plus, you'll gain 4,053 kB of disk space when you let remove those. It's good practice to run and after installing/removing/upgrading/downgrading packages. It gets rid of the clutter. 

Yeah, it's available. It's over here: $URL$ Take note that this product is already phased out. You may have some luck on eBay. Instead of the Gertboard, you will want PiFace instead. 

As stated by Steve Robillard, VNC does not work over USB. The best route would be to connect to your local network and set a static IP on each of your Pis (don't forget to connect your pis to the network too). After that, depending on your VNC viewer, you can set it to always connect to a specific pi (identified by its IP address). If ever typing an IP address is not your thing, avahi (zeroconf implementation) is available on Linux. Here's a quick guide on how to do it (Step 2, bullet 2: "The flexible way") 

Along with the append mode for file I/O (as answered by others), you can also try using screen command. This how, you are able to put any task into separate "screen" and don't need to worry about connectivity problems when doing stuff remotely. I would also recommend using some other logging method, like SQL database (e.g. MySQL with Python), if there is a lot of logging going on. SQL data can easily get exported (e.g. to CSV file) and also any big data management is faster, like (conditional) searching, updating and deleting the data. 

1. solution: USB style Is your attention only to extend program memory? Then, as @Gerben already said, buy/use USB SD-card reader. But than you don't need RAID 0 configuration. It is meant to be for improving performance while using data striping, but major drawback is fault tolerance: if one element in array dies, whole array is corrupted. 2. solution: network style One solution could be to search for any (free) hosting, like ftp, http, etc. Then just copy user data to web storage. Or use your own server, like wamp. You can use ethernet or USB (e.g. USB WiFi dongle, USB Bluetooth, etc.). 3. solution: GPIO style There are also some GPIO pins already on the board with various protocols: UART TTL, SPI, IIC. Those can be directly connected to other external devices via TTL pins. So, the only limitation is your imagination ;) 

If your intention is to make your own power supply, take one of the step-down switching regulators, like LT1076-5 or LM2593, which can handle 2A at 5.0V. Those are around 5-7EUR for Minimum Order Quantity = 1 (plus a few EURos for essential components). As already mentioned, linear regulators have big thermal issues, specially when large voltage drop (input to output voltage difference) is present. 

Don't forget to enable IPV4 (or V6) packet forwarding. I wasted a month of my life figuring that out. 

Use a USB-Ethernet adapter. Use an SPI-Ethernet adapter (the same one people use on the Pi Zero). Raspberry Pi people prefer using the one with the chip on it. Use both of the above, get three ethernet ports (two above + 1 built-in) 

I have heard that the serial interface on the Pi 3 may have problems (something to do with Bluetooth), but I haven't encountered it in recent times. It may have already been fixed. $URL$ 

There is no "best" Micro SD card. It all boils down to pure performance, compatibility, and your needs and purposes. If I were to decide what is the "best" card, it would be a Samsung Micro SD PRO+ 128GB. Ridiculous, isn't it? Some cards perform best with small operations, others with large operations, and others are best for continuous data streams. Like I've said, it depends on your needs. Start reading the fine print at the back of the packaging. 

Partly no. Based on what I inferred(guessed) from your question, no. Plugging in the Pi to a computer via USB using the micro-USB port will not provide you the chance to send data over it since, from what I've guessed, you're trying to use the Pi's micro-USB port. That port is strictly for power only except on the Pi Zero, one is for data and one is for power. Nevertheless, all Pis can only work as a host (you cannot plug it into a USB port and use it as a device or "slave"). You'll need adapters like a USB to serial adapter and some programming skills to pull it off. So, yes. 

I see at least 2 points to consider. 1. Efficiency of power regulator If you are using battteries, you are probably worrying about power consumption of your Rpi. Rpi uses unefficient linear regulator (typical power efficiency of those are around 30-50%. But I am not sure for Rpi lin. regulator!). Linear regulator dissipates energy as heat to obtain desired voltage rail, i.e. 3.3V. The general rule regarding power line translation, e.g. USB@5V -> RPI@3.3V, is: the larger the input voltage, the larger is the dissipation on regulator for same working conditions. On the other hand, swithing regulator provides higher efficiency, typ. 80-85%, even up to 97%(LM2651). And it is more suitable (but also more expensive!), when you have need for larger voltage drop, e.g. battery pack's 12V or 24V to 5V. You can find lots of tutorials to replace the original Rpi regulator on the Internet. 2. Battery type You can make your own battery array using LiPo batteries to suite your project and then you can adjust dimensions, capacity, min. voltage and current specs, etc. You can purchase different types of LiPoly on frequently used e-markets, like eBay or similar. In addition to capacity, you should be careful about max. and standard dicharge current(needed if using high-power devices along Raspberry like UMTS modems), cycle life(typically 200-1000 for cheap LiPoly) and safety and protection specs(discarge, short circuit, overvoltage, undervoltage, etc.). I used LiPoly batteries in many projects due to good availability and performance vs. price ratio. You can read more about LiPoly on RC forums. 

Please, tell us your exact SD card model. Anyway, if you ask me, I would recommend using high-speed SD cards, i.e. class 10 would be ok, considering you barely save any money if you use low-speed card. You can check performance of different cards here: $URL$ Btw, how many I/O operations do you make to you card? 2 weeks seems a little bit to low for reasonable temperature logging (once every second?) regarding flash memory corruption. Do you have any other "suspicious" conditions, e.g. high temperature in the room, RF, EMI noise, to high humidity etc.? Also, whatever you do, always try to gracefully logout from console before plugging the power out of your raspberry; this how, you won't get any in-the-middle-of-operation interruptions. You can also check your dmesg. 

The best answer would be for you to get a DAC (digital-to-analog) converter and use that to measure the voltage of said LBO. I recommend the MCP3008 chip. Then, you could have a script that measures the voltage there and shutdown when it goes to the minimum you specified. If you want a quick fix, you could just make a voltage divider and arrange it such that 5V on the LBO is 3.3V on the GPIO. The low threshold of a GPIO pin is about 1.1V or lower. So if the LBO+divider is at 1.1V or lower, the Pi will see it as a low. It's up to your script how to handle that. 

Additional info: Take note that adding repositories aside from official ones may present some security risk. But, I hand picked that one so it should be safe. 

First of all, make sure you use the proper kernel headers. I assume that your kernel headers and source code are more updated than the kernel you're running. Try to do an then reinstall the module. If the problem persists, triple check that your kernel headers match your current kernel, recompile again then try to install. 

I assume you're working on and its subdirectories. If not, simply change to the correct directory (in you case, ). I recommend you use the default and move your files over there. Not sure how got write permissions there but here are some pointers: 

Any disk utility that's not file system specific (raw backup) should do it. I think Disk Utility does it. Take note I don't have a mac (not anymore) And besides, how hard could it be to type on a terminal? 

Also, consider proper shielding from heat, since your Pi and batteries are in a car. If you really want to use your own batteries, consider this. Oh, and this one definitely supports AA batteries.