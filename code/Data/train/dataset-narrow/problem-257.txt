Keeping track of the Feasible Distance as well as the Reported Distance comes into play with a loop-prevention mechanism of EIGRP known as the Feasibility Condition. If multiple EIGRP routers share information about the same network, the Reported Distance of each incoming route can be compared to what the Router already knows as its best Feasible Distance to determine whether the newly learned path includes a routing loop. 

When the ASA finds traffic on the interface that matches a source of and a destination of , send it to the interface and change the source to the IP of the interface and change the destination to . The difference is crucial: The second NAT statement only matches when is speaking to . The first NAT statement matches any time is speaking. As a result, all your inbound traffic (ie: crossing interfaces to ) will have return traffic that matches your first NAT statement. Hence, the NAT is asymmetric -- the configuration treats the traffic coming inbound differently than it does on its way out (in so far as NAT). Remember, this is a Dynamic NAT (also known as a PAT), which by definition can only be unidirectional. Traffic will flow from inside to outside (or to ) but not the other way around. 

The Selective ACK Option can specify more than one "block" of received traffic. Here is what the option looks like on the wire (taken from RFC 2018, Section 3): 

As such, HTTP can be considered as a L5/L6/L7 protocol. I've seen this abbreviated as a L5 protocol, or L5+, or L7. It all means the same thing. But again the OSI model is not perfect, and everything doesn't perfectly conform to a particular layer. For example... 

You've gotten a lot of good answers regarding the "what" of "private addresses" in IPv6 (ULA address space). But I just wanted to add a quick note about the why. ULA does not exist for the purpose of NAT. It might end up being used that way, (I'm hoping it doesn't!) but the original purpose for ULA address space was for internal only resources. For instance, there is a good chance your network printer does not need to be reached from the other end of the Internet. If so, that makes it a perfect candidate for ULA address space. Or maybe your company has an intranet portal, or HR management system, or knowledbase wiki, or ticketing system, or any other slew of applications that have no business being accessed from the Internet. These too, are perfect candidates for receiving ULA address space. Note, having a ULA address does not preclude you from having a Firewall protecting your network. ULA (like RFC1918 IPv4 private addresses) aren't meant to be routeable on the Internet... however, that isn't something magically built into all Routers, it is simply a function of access-list filtering dropping traffic from a source/destination of a Private/ULA address -- and not something you should assume your ISP is doing. Do it yourself, on the Edge Router/Firewall you control, so you know for a fact no private addresses are coming into your network from the external world. Look up Bogon filtering for more details. 

only works in PACKET MODE The default mode for an SRX is flow mode. You can set configure packet mode by deleting ALL of the configuration under the security stanza and then running 

Example The below shows the interfaces are all in the default instance except fe-0/0/6.0 which is in a routing instance called 

You are interested in lines 2 & 3. Below, mine show that the device is in packet mode for IPV4 traffic and flow mode for IPV6. 

The first 3 parts I understand fine. It's the last one that I wanted some clarification on. The website goes on to show and example where the BPDU frame is being sent from a switch (SW3) on interfaces Fa0/3 and Fa0/4 to another switch (SW4). SW4 chooses it's port Fa0/1 because that port is connected to Fa0/3 and 3 is lower than 4. 

We have equipment stored in two data centres. Currently we have a layer 2 network that spans both centres. This layer 2 network is provided to us by our ISP and they also run transit on top, a single IP range that also spans both centres. This forms essentially an active/active connection Both sites have the same default gateway This means I can use 

We have a straight forward internet connection which has a small /29 IP range. The connection is Ethernet and our default gateway is the first IP in the /29 range. Our ISP has just given us a secondary IP range, a /28. They have told us that we need to use the first IP of that range as our default gateway. Now the device it's connected to is a Juniper SRX. Initially I thought this wouldn't be an issue but it turns out it's more tricky than I thought. 

I have a SRX 220 cluster running Junos 12.1XD46-D30.2. My ISP provides me with a /27 public IP range. Lets say 80.0.0.64/27 The way this is configured is that they use the first two available IP addresses for a VRRP redundant router setup. These are our default gateway IP addresses. I have configured my SRX interface reth0.0 to use the IP address 80.0.0.71/27 

In Junos you can add a route to point at your next routing table. EG If you wanted to route 0.0.0.0/0 to your routing instance called untrust you would use this syntax 

Has anyone done this before and did they get it working on a SRX? Have I missed something? According to the examples there isn't much config needed to make this work. 

Once that is done there is no performance impact from the apply-groups statement on the running system. Obviously logging itself will have an impact on the performance of the device. (check out the CPU use for eventd) I personally use both methods. If the device is a low end device or processing jitter sensitive traffic then I tend to only log in the required policies rather than everything. On other devices I will use the apply-groups method to globally log everything and then use the apply-groups-except method where I don't want to log certain traffic. 

You could use either a Static NAT if you want each IP in the 10.1.1.0/24 to map to something unique in the 22.1.1.0/24 network. Or you could use a Dynamic PAT if you want the entire 10.1.1.0/24 network to appear as a single address (aka 22.1.1.200). Either way, the OTHER side will only need to know about the 22.1.1.x network -- they will NOT have to know about your internal 10.1.1.0/24 network. 

As long as you use something with at least as much randomness of what is outlined in 3.2.2, you will be fine. The suggested formula provides two starting values: the current time, and the local system's MAC address. This creates two seed values for the final random output. If you were picking your own values, you would want to pick a value that would be different every time you generated a new /48 (like the current time), and something that would be different if two people on opposite ends of the world happened to generate their ULA address space at the exact same second (like their individual MAC addresses). So what MAC address? Whichever you want... your phone, your home PC, your work PC, your buddies VM on his hypervisor, etc. So long as you pick one that you would likely not pick again if you are faced with generating another ULA address scope in the future -- even a random series of 48 bits would also do the trick. 

This accounts for picking from one of the four netflow capture points to cover the forward traffic (host X to Host Y) as well as the return traffic (Host Y to Host X), without capturing duplicated traffic in the process. That said most production networks are significantly more complex (and rightfully so!) than what is pictured above. But you can still apply the same concept to determine the best place to set up your Netflow captures with the goal of capturing both forward and return traffic, and not duplicating any packets. 

We were able to come to the answer in the chat room. It appears this is a symptom of StrongSwan itself. From their FAQ: 

And to answer your last question. Whether HostE gets its address from DHCP or not, the process flow would appear as above if HostE did not have an entry in its ARP Cache for Router2's MAC address. IF, Router2 was the DHCP Server (which it doesn't have to be). And Router2 just assigned HostE its address. Then theoretically, HostE would know Router2's MAC address. But ARP entries don't last forward, particularly on clients. For example, my Windows 7 laptop keeps ARP entries for only 34.5 seconds (see below). So even if Router2 was the DHCP server, and gave HostE its IP address, sooner or later HostE's ARP cache would time out, and it would have to run the broadcast ARP request all over again, just like if HostE had always only had a static IP assigned. 

which will list all interfaces and their routing instance (See example) which is going to show the configuration of any routing instances you have, you will need to check out the interface stanza Check the routing table and see if the routes from your interface are being shown in another routing instance. 

Overview I am trying to setup BGP based ECMP to two end servers that sit on separate subnets/VLANs and advertise out the same IP address to a SRX firewall. The end nodes are linux boxes running BIRD and have a simple NGINX web server running on them. I would like to load balance traffic based on source IP and source port equally over the two end nodes. Current Status 

I was reading about how STP determines which port to block. I was looking at this url $URL$ explicitly this section 

Now it looks like the SRX is sending ARP replies but can't actually route the traffic to the correct interface due to the proxy arp entry/routing rule. 

Interesting if I now revert the convert back to the original because the upstream router has cached our ARP entry for 80.0.0.90 everything works until it times out. I will post this now while I wait for the ARP entry to timeout (hopefully not 4 hours!!). Does anyone know what I'm missing? Normally this isn't so hard as your ISP gives you a /30 PTP link between them and you and then they just route all traffic down that link leaving you free to do whatever! 

For more details see here: $URL$ Note: It took a JTAC engineer a few weeks to work this out after building it in a lab and testing it. He is going to try and get the documentation updated to note it only works in packet mode! 

I have a Juniper EX3300 switch that has a 10Gbps connection to our upstream provider. Our upstream provider (lets call them Provider A) passes us various connections on tagged VLANs over this single connection. Transit and interconnect etc. We now have a 3rd party provider (Provider B) who has a pop in another data center that we need to pull into our network. It was agreed that Provider A would run a L2 interconnect to their pop and then pass their traffic tagged down our 10Gb trunk. This was all fine until the requirement has changed. Provider B now needs to send us their customer traffic tagged on various VLANs. This means that we need to somehow accept VLANs in VLANs (Q-in-Q). It looks to me like the EX3300 can only use the dot1q-tunneling options within the vlans stanza and you can't mix and match VLANs using dot1q-tunneling with VLANs that aren't. Does anyone have any ideas of how I might be able to run both on my trunk port? EDIT1 ProviderB is passing us Customer1's traffic tagged on VLAN 1201. ProviderA is passing us all of ProviderB's traffic tagged on VLAN 1755