You should use here. is for when the arguments are bad. What's bad here is the internal state of your object. Alternatively, remove the check here and put it in the function. That way you don't get bad internal states. 

Why did you include when it doesn't seem to be doing anything special? To me, it seems you've just used as a replacement for checks. Which is what it is intended for, but it doesn't give you any real benefits. I'd just do away with the . As for naming, and and is how you'd do it. This to prevent word soup like . 

Your code starts halfway. Presumably inside a do-while loop. You return output, then the function continues with more code. 

And now we have three clear segments. Declarations, print menu, input choice... some of these segments might even be extracted into separate functions later. By using blank lines properly, you split your code into logical segments that make it easier to understand. Use too much blank lines and it's. Like. Putting. A. Period. After. Every. Word. And then other programmers don't understand you anymore. 

You're not closing the output stream! If that doesn't fix your issue, you'll have to post more contextual code, because after you free the output stream, the rest of this method should just free its resources after it is done. 

A with a for loop and stop on first number greater than or equaling the number to find will solve your problem. 

The method Records a bid for a given item. Duhhh. It's redundant. The bid is the bid to record (you know, "recordUserBid"), then item is the item to bid on ("OnItem"). This is all just duplication. Also, it throws InvalidBidException when the bid is invalid. ... All of that information you have put in the documentation was literally IN the method signature! Look at it! 

Edge cases You don't handle negative integers very well. Specifically, the modulo operator, when performed on a negative integer with a positive divisor, may return a negative value. And when this negative value is something like, say, , then you get , which results in setting a high bit instead of the bits for 0-9. Duplication You currently have duplicated the code for and . By making use of smaller methods, you can get rid of the duplication: 

This should take care of most of the issues with minimum effort. The rest, I opt to ignore because I think them too rare to occur. Alternatively, I'd rewrite my application flow so that I don't get into all sorts of crazy start-stop-start-start-stop situations. I'd prefer to change the flow to use Application only once per instance - a simple lifecycle of "start, stop, remain dead". 

Failing all that, if you just want to improve your current setup, at least use overloading for that. Rename to , ditch the type checks in , and make 3 overloaded versions of which take a Integer value or a String value or a Float value. That'd at least get you type-safety for value writes. 

That said, you might wanna put a comment there. It's not a trivial line of code. Looking up a bit... 

"Cleaned" version (will probably not compile; check syntax around try-with-resources and the multi-catch): 

They are the same! So checking both is not needed, which is the warning you're seeing. So the IDE is correct, the second half can go. This warning probably made you wary to implement the suggested changes all the way, but most of the stuff I pointed out earlier is present in your code in the same way. Specifically: 

This for loop looks weird. It looks weird because it's a while loop where you've taken advantage of the ability to declare a variable. I think it'd be better as a while loop: 

Beyond that, this program seems trivial and there's not much else to say about it. There are, of course, various minor improvements we could make, such as... 

This comment has typo's and a grammatical issue. I recommend instead. Clarifying what is wouldn't be a bad idea either. 

There! Except the naming is flawed; this should really be called . Adjust your interface as needed here. is a really weird construction. 

So you have a node reference, then you get the key, and pass this into the method. Then, in the method... 

You're doing something that looks very much the same 4 times in a row. Would it be possible to just pass the values into a function? Or there's here 

This isn't the smartest move. Constantly rearranging strings, searching for delay characters... Better would be to have a loop like this: 

You never allow to get below 0. can't return a value lower than 0. Thus, the second condition will never evaluate to true. Additionally, when shuffling, you don't reset to 0. Is that intended? Naming is a typo, I think. It should be . Names with typo's are hard to remember as you need to remember which way it is written exactly. Use of built-in functions 

For this sort of stuff you should use . It reads better. The JVM will handle inlining if it is needed. I can't really find any other in-code improvements. 

Wat. That's some evil math right there. It seems there's two choices. Here I have to say that I'm biased. My original own assignment only used N W E S neighbors. I was able to make the argument that if we ever needed diagonal movement, it would be a pain to add in a 2D array. It would be easy to add in a mesh network. So I opted for the mesh network. This is where you use experience to make a choice. Possibly even implement both in a proof of concept, and see the pros and cons, and pick the one you like. How do we simulate the timestep? Again, multiple options. 

Yeah, we can. What else can we do? Well... doesn't change throughout the loop. And neither does . So we can cache . We can also cache . 

JavaDoc Class documentation should tell you what it is. Function documentation should tell you what it does. Variable documentation should tell you what it means. And any in-code comments should tell you why it does. These statements generally hold true. You seem to follow these statements, ... mostly. Be careful of comments like this: 

This snippet contains "John" twice, which I think is strange. You already have the person's name stored in the person, so why does a have a name? The security role having an id is more plausible, but I don't know what you're going to use it for. There's no mention of it in the requirements, so I don't know why you put it there. 

Your controller could store a "padToLightUp" value. Then use (where 1 is the pad number, so it could be 1, or 2, 3, 4...). This gets rid of the need to find a pad in the dom to light up. Similarily, you could store the audio references all in an array, so that you can hook a function to the pad's , in which you play the audio file. Lastly, instead of wrapping everything in , make them actual functions that stand separately. Then you can use , which means that the use of timeout affects your code structure far less. 

For this sort of stuff, will do. Also, no need to put all the way at the top if you're not going to use it until later. Put it where you are first going to use it instead. If you do that it makes the encapsulated conditional look a lot nicer: 

I didn't implement the full thing, that's something you'll have to do, but this will give you the benefit of object equality combined with the ability to reference instances (). I also opted for here, because that's the format you store numbers in. Even if the API only exposes Strings, that doesn't mean you are stuck using Strings. will give you a String, and will give you an integer. is used to prevent there being two threads both calling at the same time and creating two objects for the same values.