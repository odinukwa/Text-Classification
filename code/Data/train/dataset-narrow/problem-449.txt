Invoice number Date Requester Reference code 1 Reference code 2 Purchase order code purchase order date Credit terms(days) Bill to ( Company Name, City , Country , Zip code , Telephone ) Ship to ( Company Name, City , Country , Zip code , Telephone ) Items ( there will be more than one items ) [ Item Name, Item Description, Unit of Measurement , Quantity , Unit Price ] Total amount Terms and Conditions ( this will be a 3 line sentence, it can be anything , it will be a text .. example below ) [ stock available/ not available / 2 -3 weeks delivery period / cash on delivery / 35 days credit ] Created by 

Quotation Id ( will be automatically generated) Date Requester ( alpha numeric with space ) Reference code ( alpha numeric with space ) Quote valid for ( alpha numeric with space ) Bill to ( Company Name, City , Country , Zip code , Telephone ) Ship to ( Company Name, City , Country , Zip code , Telephone ) Items ( there will be more than one items ) [ Item Name, Item Description, Unit of Measurement , Quantity , Unit Price ] Total amount Terms and Conditions ( this will be a 3 line sentence, it can be anything , it will be a text .. example below ) [ stock available/ not available / 2 -3 weeks delivery period / cash on delivery / 35 days credit ] Created by 

I am trying to develop a small business web application for my friends business. I do have some php,html experience so I have done the interface and all. Now I am trying to work on the database. The whole process is simple , the user creates a quote and once the quote is approved , he can use the quote to create an invoice. Here are the items in the quotation page ( I will call below items as variables/columns) 

Secondly, since your outline mentions customers, be wary that customers can be a company or a (physical) person. You seem to have that part covered based on your diagram, so let's move on. If your next step is to add anything related to accounting, such as an "orders" table, be wary that anything accounting related is tied to a company, a contact, products, prices, etc. at a given point in time. These details can evolve in all sorts of colorful ways, and a frequent design mistake is to create the perfect normalized design and assume that you'll just update the tables as needed. Big no-no. If the taxman asks you to print out your invoices, and your IT says company XYZ at price P when accounting booked company ABC at price Q, you're very, very screwed. And don't get me started on archived/closed yearly accounts and reports that change due to similar design mistakes. Thirdly, be very, very, very wary of UI/UX issues that you might introduce by normalizing too much. If it does not work like the apps that typical users have in their hands (read: Outlook), you'll be a poorly trained secretary away from changing the company of every employee at XYZ to ABC when Joe gets a new job. I've actually seen this happen and it was not a pretty sight. (She kept her job, in case you're wondering.) Lastly, don't get me started on merging the inevitable duplicate companies, contacts, and so many other colorful things that couldn't possible turn up. Keep those in mind and make sure that your schema is very, very forgiving because it will happen. Now... in practice... Personally, I've come to actually turn a blind eye on normalization in this case. Contacts/Companies is one of those cases where DB design and beautifully normalized data as taught in school is a recipe for trouble in the form of resource hogging, over-complicated queries and ludicrously complex UI. It is, imho anyway, not the right thing to do. Start by creating a contacts table, complete with fields such as first and last name, display_name if needed, company_name, address, phone, cell_phone, email, email2, secretary_name, secretary_phone, etc. If it's available when you create a contact in Outlook, it probably belongs in there. You'll note that I didn't mention a companies table. That's because you usually don't want any strong ties between your contacts table and your companies table. If you need one, add one, and add a copmany_id in addition to the company_name. But then, make it a foreign key on delete set null. And be sure to keep it very, very loosely tied to company_name at the database level. Maintain it at the front-end level -- not anywhere else. This will keep a secretary from inadvertently changing the company of multiple contacts. Keep things sane. Anything that might reasonably show up in a list (i.e. select * from contacts where ... limit 10), be queried against, or be useful frequently ought to be in the table. No joins, nada. Query, iterate through the result, done. If you've really want additional garbage in there, you've two options. One is to create an extra_contact_details table. It can be an EAV table, or the full load of company_name, address, phone, etc. fields, or a hogwash of normalized bits and pieces. Whichever option you take, don't over do it. Either will create additional (potentially complex) queries, and heaps of thorny programming issues down the road when you create the UI. What's absolutely key here is, if you go this route, a secretary who has always worked with Outlook needs to make sense of it. The other, which I'll actually recommend upfront, is to add a text field called "extra_contact_details" in the contacts table and begone with it. No normalization at all. One set of primary details. Frequently used secondary details. Anything extra as plain text. Secretary gets it. End users get it. Done. Lastly, if you need to store a version of any data at a given point in time, be sure to duplicate the value of any key details -- read: whatever you need to print it exactly as it was when it got inserted. 

Check to see if /var/lib/mysqld exists. Remember this. Install Mysql RPMs (the post-installs automatically create /var/lib/mysql if it doesn't exist - you can't really stop this from happening) If (1) was "doesn't exist": 

I'm a long time user of MySQL, and have historically used Puppet or Ansible to install it onto boxes. I can automatically remove the test accounts/db, set a root password, add some application and monitoring users and databases and then hand the system over for application deployments, knowing everything's setup and ready to go for them. Since MySQL 5.7, I'm not sure how to approach this. On installation it generates a random root password which it writes into a log file. Obviously, getting that out and working with the restricted account to get it set to the required password is difficult with a script (or config management system). I've had a go at hacking the mysqld_pre_systemd script (on Centos 7) and have that create the data files, then start up mysql with a --init-file option, which I point to a bit of SQL that sets the password as I want. Once it's running, I then connect to it and run 'SHUTDOWN' to stop it, then let systemd carry on as it was to start it up normally. This all seems like a crazy amount of work (although quite possible with Ansible etc). As I've now got to get it going on Centos 6, is there a better way? One thought: Is there a way to specify the root password before installation? 

Ensure Mysql is stopped (the RPMs don't start it, but just be sure) Delete /var/lib/mysql/* run /usr/sbin/mysqld --initialize-insecure --datadir="/var/lib/mysql" --user=mysql (which is what the init.d script does, if /var/lib/mysql is empty, except we're using 'insecure' which means no root password is generated) Start mysql Use mysql client to log on with empty password and set the root password to whatever you want. I'm really not a fan of using Ansible or whatever to delete database data files. Even though this method has suitable checks to make sure it doesn't delete a live database, it still seems like you're creating a dangerous situation here. However, it's another possible approach. 

On a personal note, in the case of a ticketing system, I'd have my eye on full text search functionality and bitmap index scan (i.e. the ability to single out the one or two disk pages that might contain rows that fit for idx1 and idx2 and idx3) functionality much more than raw performance. But that's just me -- ticket searches in trac, lighthouse, redmine etc is just dismal in my experience. By this criteria, as well as performance, Postgres fits the bill quite nicely. (And it's available on heroku.) 

Yes, it does. For all sorts of reasons; in particular because it caches plenty of things for faster lookup when plenty of RAM is available. The more RAM, the less HD access, the faster. 

Usually, you don't want to do this. Have you given second thoughts to this? Else, pg_crypto is your friend. But as the above-mentioned slides suggest, it isn't necessarily a panacea. 

Some insights from having actually built a couple of apps with contacts and companies. Firstly, you're missing several use-cases in your outline. Among the colorful ones I've run into over the years which you don't necessarily cover: 

Some organizations have sub-organizations, be them divisions, subsidiaries, you name it. Some people belong to several organizations. As in VP whatever of XYZ, chairman of ABC, and self-employed CEO/consultant -- each on a part time basis, hopefully. Some people can be contacts for an organization without actually belonging to it. E.g. when a high profile consultant is temporarily hired as a project lead, he could possibly become the primary contact for company XYZ without actually belonging to it. People can have sub-people too. And the latter can be in the same companies, or not. For instance, our VP of XYZ might prefer that you go through his main primary secretary over there, unless you contact him regarding ABC in which case that would be his assistant; or personally for consulting work -- a very busy person indeed, but there are people like that. Some organizations have no contacts associated with them. This can happen, for instance, in an app that outputs lists prospect companies (for sales people) in which contacts have yet to be identified. Conversely, contacts can have no organizations. For instance consumers. 

I guess the last approach is to petition Oracle to allow setting a root password during installation (maybe via an environment variable that the RPM post-install picks up, or a magic file somewhere that contains the password that the post-install looks for. That would make life so much easier ;-) 

This isn't much of a solution, but it's possible to put the data files in place on the system before installing the RPM packages. That is, on a dev system, install MySQL and set the root password as you want it. Shutdown Mysql and make a copy of the files/directories in /var/lib/mysql (maybe put them in a tar file or something). On a new system, before installing the MySQL RPM packages, take a look and see if /var/lib/mysql exists - if not, create it and untar your files into it. When the RPM installs it won't overwrite those files, and so will start up with your previously set root password. This seems like quite a cheesy option, and probably won't work when versions of the RPMs change (even dot release changes might break because they'll need an upgrade process on the archived data files). However, it's a possible way forward. Another (less than ideal) way forward is something like this: 

I'm getting a Postgres 9.3.3 install sorted out. My application is Drupal (so read/write), but low-traffic, so all application traffic is sent to the primary master. I have two sites (main and secondary) with two machines in each (again, main and secondary). let's say machines 1 and 2 are in the main site, with machines 3 and 4 in the secondary site. Right now, 1 is the master, and 2,3 and 4 are all hot_standby slaves of it (the master has a DNS CNAME, which is in the recovery.conf files). I've been told that if I wanted to flip between sites, I'd need to promote 3 as the master (by touching the /tmp file), and then can update the DNS to point to machine 3 instead of machine 1. I can then restart each of the slaves and they'll magically start replicating from 3 instead of 1. This sort of strategy absolutely won't work with MySQL, but can it work with Postgres? If needs be, I can stop Drupal from accessing the database while I do this sort of work, to avoid any writes being made. Could it work then? Is there another strategy I should be using to make changing sites (or machines in a site) relatively easy? Could cascading replication from 1 -> 2 -> 3 -> 4 maybe make more sense? I could then promote 3 (and have 4 as a slave of it), but then have to rebuild 1 and 2 to become slaves of 4.