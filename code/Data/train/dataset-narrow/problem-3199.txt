Since you can write unencrypted data to an SD card you can use an SD card USB adapter to connect the unencrypted SD card to your Raspberry Pi. Below is a picture of one such card. Here is a link to a web page that describes this adapter in more detail. 

This works for me on my Pi. I'm using a version of Mono that I compiled back in December before the patch for hard-float and Mono was released. Here's the output I get. I suspect that the issue has to do with the internationalization of the decimal point character. Here is the output of : 

This is the answer to the 2nd question asked, namely what is . This is the 1st partition of the SD card and the file system is mounted on that partition. is the Raspberry Pi's boot partition. If you run you will see all of the partitions on your system, here's what's on my Pi: 

Update: Success! I've recreated your problem! I get your results when I run using LANG=de_DE.UTF-8, see below: 

The timelapse option says to take a picture every milliseconds. By using you're specifying to take a picture every ~999 seconds. Try using a smaller number such as to take a picture every second. I do know that there are issues that cause the camera to hang such as specifying a very-long exposure, see $URL$ for more details on that issue. 

I have a self made Isolation Board which consists of 2 Relay Switches and provides a kind switching function to cut off the power supplied to a Sensor Device on the other side of this Board. The sensor device is battery operated and in common scenarios will take the power from the Raspberry Pi 2 via the Isolation Board. Current Specifications in general for Raspberry Pi-2 and the world standard for USB-2.0 is rated approximately . This creates a problem since the Sensor is battery operated and the ratings on it are . This means when the battery of the sensor is completely drained out and if I would like to get the Raspberry Pi to start charging it for me- 

According to the Official Documentation is disabled by Default on Raspbian Jessie. You will need a Screen and Keyboard to enable using: 

One more thing is that not a lot of people realize that appropriate channel selection for WLAN is really important. You should definitely first do a scan/sweep on your vicinity and see which Routers or hot spots are using the same channels. Do a and go through all the channels and chose an appropriate channel for your ad-hoc network 

Especially the line. You shouldn't have to but you may have to hard-code the default gateway by adding the following to the interface in : 

As @Iamyrus suggests, put into your file. However, since the Acer H243HX monitor is native 1920x1080 and since CEA mode 5 is listed when you edit your display's EDID block I would recommend setting the following in your : 

You get a message that you try to install a virtual package and you have to install a concrete package. You find a list of concrete packages. Install the concrete package 

Even though the PIR device should assert a voltage or ground depending on the state of the device, you should try to add to your call as does one of the examples I found using Python. In fact, the C code you link to appears to also do this (although the C code sets ): 

As previously stated you need a DC-DC converter, this DROKÂ® Electrical DC-DC Buck Voltage Converter 4.5-40V 12V To 5V/2A Step-down Volt Transformer Stabilizer Voltage Regulator Module Power Supply Switch Inverter Board with LED Voltmeter 5V USB Charger should work for you: 

The source of my problem was that I was overclocking my Raspberry Pi. According to the RPiconfig wiki overclocking can cause file system corruption on class 6 and class 10 cards. I turned off overclocking completely and was able to perform extensive writes to the SD card using With overclocking turned on I would get a write timeout error a few minutes into the write test. 

So is it possible for instance, to remove the drivers from the wireless chipset and compile the in the Raspberry Pi? If so are there some useful links or hints to achieve the same. 

As far as I know the is enabled automatically on Pi's boot depending on if you have enabled in your . If you want to add a wait period try adding: 

handle takes into consideration that will trigger once the Pi is rebooted. You can schedule tasks very 5 Minutes or every 12 hours or Sundays at 12:00. Here is a link which will help you with Cron Jobs on RPi If you are the programming geek type you can use schedule PyPi Module where you can schedule tasks by programming it. Note Since you mention that the Power supply may not be constant, chances are that your time on your Pi will start varying to your real time. Example, if today is Tuesday 12:00 PM and if you Pi was off for some time then the time on your Pi may vary Monday 14:00 PM in this case you can use your Network's NTP server to sync back the time or use an RTC module which maintains the time even when the Pi is switched off. Your Queries 

You don't give any details as to what format the video file is and what type of server you host the video file on, but if the server supports HTTP you should be able to do the following: 

Java 8 is available as an early release for the Raspberry Pi. This includes JDK8 and JavaFX 8 early release. Checkout $URL$ 

According to this article you can add support for HFS+ (Apple's proprietary file system for MacOS) by executing the following command on Raspbian: 

Without any additional work this may result in the file system being mounted read-only which may not be a problem is you are just interested in reading the existing files. From what I've read the Linux software for HFS+ doesn't support writing to a journaled HFS+ file system and journaling needs to be disabled using MacOS. Once you have the file system mounted read-only you should be able to use Samba to share out the drive to your Windows PCs. Here's a article that describes how to do that. You will need to perform the Samba installation and configuration steps described in this article beginning with: 

My first idea was to use OpenVPN client and OpenVPN server to have your remote Internet connected Raspberry Pi VPN into an OpenVPN server on your home network. However after reading some of the details to get this working I decided to look for a more simple solution. I found this article that shows how to use OpenSSH installed on the remote Raspberry Pi to SSH into a machine on your home network and then have your home computer create a local TCP port (2222 in the example) that would automatically get forwarded to the SSH port (22) on the Raspberry Pi. Here's another article that describes the same process and even shows a recommendation to have a CRON job create the SSH connection from the Pi every 10 minutes in case the connection every breaks. Of course, the computer on your home network needs have an SSH daemon installed and your home firewall needs to allow that computer to receive in bound connections. You should be able to easily configure your home firewall to forward some unused TCP port such as 9099 and forward that to port 22 on your SSH "server" on your home network. Then you would need to use that port with the option on the SSH command running on your Pi. For the 2nd article the command would be: 

Working if both scripts work well, all you have to do is attach to the Session and navigate to each Window using the hot-keys (usually CTRL+B+window_Number) Script Here is a what your script would look like (called ): 

Device: Raspberry Pi 3 Model B Firmware: and for Wireless Access Point Creation using service. I have successfully created a Wireless Access Point on the Pi and can easily connect my Android Phone and a couple of Particle Photons. Through the firmware on the Photons I can view what their IP addresses are. However this is the client perspective. What about the Raspberry Pi as a DHCP'ish Server. Does it have a log of all the Devices it gave the IP addresses to? for example, A log file where the MAC Addresses / IP addresses of the connected devices? I tried following This Unix/Linux SE query but it actually doesn't give me any information at all. Thanks. 

Hi I tried this Patch for Raspberry Pi 2. I have a Raspberry Pi 2 Model B and I followed the README manual and My WebIOPi actually works. This will definitely work according to my assumptions. NOTE : This will work for WebIOPi-0.7.1 on a Raspberry Pi-2 Model B with 1 GB RAM 

My answer assumes that the question is how do I connect to a Raspberry Pi using an Ad-hoc wireless connection. I found this posting that gives an example of how to configure a Raspberry Pi to connect to an Ad-hoc wireless network: 

There are many remote control quadcopter, drone, etc, projects that use the Arduino family of single board computers. Here are three links to one that has fairly detailed instructions and parts lists. You should be able to get ideas from this and other projects to help you develop your project. $URL$ $URL$ $URL$ One comment, since you say that your electronics experience is limited you may want to consider following some more simple Arduino or Pi interfacing projects such as interfacing to distance sensors. Here's a link to some simple interfacing projects from SainSmart that helped me. One challenge you may have is that the Raspberry Pi GPIO pins are strictly 3.3 v while many of the sensors and relays may not support. You may also want to consider using a Raspberry Pi and Arduino in combination, with the Arduino handling all of the interfacing and the Pi doing all the CPU intensive work. There is a GertDuino board design by Gert van Loo to be an Arduino board designed specifically to interface with a Raspberry Pi. 

According to the page for Mosquitto It is dominated by a Configuration file which is . According to the page for the : 

This is what I can make of from your situation. I suggest getting updated to Jessie or atleast Wheezy 7.10/7.11 for proper functioning of Ad-Hoc networking. Also one thing is switch off your of your WiFi dongle in order to avoid making your dongle sleep when Idle. 

I read through your Logs which you have posted for your Pis. Here are some bits that I would like to point out: 

However if you want to compile the kernel on your own following the aforementioned Source link. The steps tend to be quite tedious, so it is good to perform it on a new SD card or make sure to back up the data from the old one. For building a Read-Only version follow the steps on this Source:2 

ULA for IPv6 can be assigned to each Pi for Unicast purpose. They start with . For instance, a Pi can have an ULA address: and another pi may have . To get more information or generate a random ULA for an application, refer to Unique Local IPv6 Generator 

You need to checkout this tutorial that covers controlling a DC motor using a Raspberry Pi. The Pi's GPIO pins are for very low current applications such as controlling a transistor or controlling an LED (with resistor). Here's quote from the tutorial: 

Reading more on this you may need to set . This this comment for more information on when to use versus : 

Searching using Google I found the Utilite Standard device which has 2x GbE, 2 GB RAM, and a Freescale i.MX6 dual-core Cortex-A9 @1GHz CPU. It's available on Amazon for $159. 

Once you connect this USB adapter to your Pi with the SD card inserted you should be able to access the information on the SD card as a FAT file system on the Raspberry Pi. You can also just connect your Raspberry Pi OS SD card to your work PC, however, without modifying the standard Pi OS SD card layout you will only be able to write files to the FAT file system. You can also repartition the SD card and create a second larger FAT partition and file system for large file transfers. However, by using a second SD card and USB adapter you should be able to move the SD card between the Pi and your PC without having to power off or reboot your Pi. That being said you would need to unmount the SD card from the Pi before removing the SD card from the Pi. 

The command would specifically tell you which driver module is available for WLAN e.g. for Pi - 3, or for external dongles. Note: 

I am really not sure if you should be using really high . Yours is which is extremely high. Chances are that this signal might cause a lot of interference on the channel if there is some wireless activity going on. I suggest you reduce it something like this is an acceptable value. Also if you are using Edimax 7811UN adapters and using Raspbian Wheezy with versions less than 7.10/7.11 then there will definitely be an incompatibility issue, since the older Raspbian versions did cause a lot of problems when running the Edimax in ad-hoc mode. (I did some experiments and this was evident for me). However in Raspbian Jessie or Wheezy 7.10 and 7.11 this compatibility driver issue is resolved and the adapters work in ad-hoc mode If you are not receiving any DHCP offers chances are likely that your Pis are on two different frequencies of the spectrum. I strongly suggest creating a small bash function in your where you atleast set initial parameters the same. 

You can use your Link-Local addresses to interact with the pis in general. A smart way to know your local network Pis can be to use: