Set up a class forum for your students It's a pretty standard thing for online courses that there is some form of online many-to-many communication platform that students are required to participate in as part of their grade. I've had to do it on two or three occasions, and while I hate it, it's what takes the place of "class participation" in the brick-and-mortar classroom setting. I suggest setting one up (they're pretty cheap and easy to manage, and you can wipe it between years pretty much at the click of a button; heck you might even want to look into Stack Overflow Channels). You don't have to make participation mandatory, but you can tell your students "if you need help with a problem, post on the class forums. Browse other student's questions and help them out." If it isn't mandatory, you can offer a few points of extra credit. The number of times I've written up a problem and gotten ready to post it to Stack Overflow (or other online community) I've realized "Dang, what an idiot I am" and solved my own problem. It's a variant of Rubber Duck Debugging, which Ryan Nutt has already answered with, but in the case that simply trying to explain the problem it isn't solved, its there for anyone to answer. Just don't forget to look through the board yourself and answer a few questions. ;) 

I was at this camp one summer, and it was a programming camp for building models of different systems. I was super excited - I'd already been programming on Khan Academy and Codecademy. So I walk in, and they say that we'll be using this language called StarLogo Nova. We open our chromebooks, go to the site - and I begin questioning things, because I figure out pretty quickly that it's a drag and drop language. I had (have?) a dislike for drag and drop languages - I had tried Scratch after doing what I considered "real" programming, and I didn't like it. However, that class changed my mind. We created a model of an epidemic, a model of an ecosystem - and I was hooked. I literally still occasionally take a look at those programs when I'm in the mood and add new features. The about-face was because, I think, it felt useful. I felt more able to create something cool in StarLogo Nova than Scratch. So I guess, I'd say to first, pick a good, fun DnD language, and second, build something cool in it and show it to them. You might also go into the idea of higher vs lower level programming languages, with DnD languages just another step higher than something like Python. Assembly is no more "real" a coding language than Python is. (If anything, it's the other way round =P) All this being said, don't stuff beans up your nose - your students may not even be thinking any less of DnD languages and may have quite a bit of fun without you saying anything at all. 

The default implementation puts a single item (the block itself) into a list and returns it. BlockGrass would put dirt into the list instead. BlockStone would check to make sure that is true and the put cobblestone in the list. BlockDiamondOre checks and , putting a different number of diamond items into the list, even determining how many based on the supplied. And so on. There are roughly 100 different methods in the block class to handle all of the possible functionality. Update ticks (crops), neighbor updates (observer, torches), interaction (doors, chest, furnace, crafting bench), whether or not a block has a tile entity (chest, furnace), and on and on and on. Most of them are blank and do nothing, entirely up to the derived class to add to, if it needs it. The same goes for items, some of which (like sticks) don't even have a derived class of their own because they do nothing special. They just exist and do everything any item can. This is why the are so many mods for Minecraft that add so many new things: no one1 has to implement anything special in order for everything to Just Work. 1Well, except Minecraft Forge, who maintain the official unofficial mod API. But Forge is a special kind of magic that isn't important here 

I said earlier in this, "even if there was such a thing". I don't believe there is such a thing. I don't exactly have evidence to back it up. I just have two reasons. 

I've been in groups before, and multiple people were supposed to code. It was a system where you had to be on the same computer for it to work. It fairly well approximated pair programming - we were discussing out loud, and one person was watching the other giving suggestions, and the other was coding. The people in the group that I was mostly working with weren't annoying, and a couple were semi-friends. It was terrible. I'd programmed before the class and the other student hadn't, so I was a bit better. That made it even harder, because the other student was less likely to, say, use a function, or make some aspect simpler, or whatever - so I felt like I was taking over too much to fix something, or suggest a better solution, and I ended up doing more of the coding. There was a time limit, obviously, so since I was faster at coding (and I also could keyboard, whereas the other student couldn't), the other student often was like, "hey, we need to get this done, you obviously know how to do it - just do it". The teacher stepped in and put the other student at the keyboard, but since a. the other student couldn't keyboard, (just pecked) and b. both of us now felt even more rushed, because the rest of the group had finished some of the mechanical aspects (we were in an engineering course creating a "elevator" type thing), the whole thing just got worse. 

Although "gifted" is broad, it has been made far too clear that potential (implied by the student being gifted) is not enough. They need intrinsic motivation. This is fairly straightforward: The only way to make such an activity work is to get the student to be enthusiastic about some field of their choosing. Many gifted students have ADD\ADHD (Correlation, and not causality), which means that sitting with them to get them started is no easy task. But it can be done by appealing to their strengths. If they have shown special affinity or liking of some field or subject, or have been "always interested in ...", then one should start by suggesting that field or subject. If the student seems interested, one should proceed with explaining that research is a necessary part of the activity. From this point the student should be fairly independent, and the teacher should only be checking in from time to time. (obviously a deadline should be set...) 

Plus, showing interest in what your friend is learning is nice, and no one1 ever got hurt from learning something new in an unrelated field. To elaborate on what I wrote as above: The sanity check and telling about what you learnt are also useful, because ideally, you'd lower the stem of details. You'd want to keep it to examples and simple explanations. This is extremely good for your own learning2 because as you explain the material, after reducing the number of details and making it simple, you focus on the core of what you learnt. It might be difficult at first, but that's why you each have 15 minutes. Don't be afraid to extend it to 20 if need be. This is a very important part of my suggestion. Over time you'll be able to extract the core of the material more quickly, and that's a useful skill, unrelated to learning in pairs. I highly recommend this technique (you can modify it to your hearts content; I won't hold it against you ). I employed this method with a friend and, although we were both studying CS (but different branches; I was studying machine learning and statistic approaches and he was studying networking), it was very useful (also self-learners ) to both learning the subjects and the aforementioned skill. 

All of the below is meant to be thoughts/analogies/illustrations to help explain the difference (meant to be said to students) but in reality, this is all dependent on the level of your students. 

Well, depending on how many papers you have your class write, you can give them a quick crash course in $\LaTeX$ and have them write the papers (or whatever other written material) in it. As others have said, another good idea is to write documentation in markdown or $\LaTeX$. Also, depending on the class, using $\LaTeX$ might be nice so you can read the math equations more easily (this being for more advanced, theoretical classes) when grading. I started using $\LaTeX$ because on Physics.SE when I edit, I needed to figure out the commands for various symbols (there can be some quite math heavy posts, and sometimes newer users don't use any MathJax at all, or post a picture), at which point I found out about Detexify, and then from there TeX.SE, and - well - I figured out I really enjoy it. From there I started teaching myself and now I can do some passably nice documents. So that's another thing to consider - some people in the class may start using it due to your classes and find that they really enjoy it so they learn more on their own. One resource that may be useful if you do start using $\LaTeX$ more regularly is ShareLaTeX which is an online editor, which also has documentation for basic tasks in $\LaTeX$, and - more importantly for a teacher - sharing and history abilities, though I believe the more advanced ones require some sort of premium account. You can also put documents in a Github repository or pull them out of a repository, I believe. 

I would go about detailing how much profit a white hacker can get, seeing as many security companies hire them as test attackers. If any of the kids are tempted be unethical things, then explain that far greater profit can be achieved with greater ease if one chooses to use their learning for good. So that's that (for any student saying "But I can make a lot of money from hacking") Now, appeal to their sentiment. Ask them how they'd feel if someone could simply type some stuff in some place, and then gain access to ALL their personal information. This includes but is most certainly not limited to: 

J. Conditt, "What happened to all of the women coders in 1984", link D. Sims, "How Apple and IBM Marketed the First Personal Computers", link D. F., Smith, "Did the Computer Science Gender Gap Begin in 1984?", link 

As a special lesson, I would like to show students the very basic idea of genetic\evolutionary algorithms. I let them play a bit in a genetic algorithm online game, to get the idea. Then I teach them the main concepts (Population, individual with genes, mutation, crossover, fitness etc.) and I introduce the Traveling Salesman Problem. Then I go through solving TSP with genetic algorithm with them, so they see it in action and in practice. However I'm out of practice exercises. So, I am looking for problems that have a solution which can vary in its "goodness", and its goodness can be judged by some requirements. To explain this, take the example of a timetable for tests over a month. a solution is a random time table. a good solution is one where tests are suffeciently spaced so that students have time to revise. in the game, a solution is just any vehicle, but a good solution, is one that gets far. Note: I am not necessarily looking for an answer that shows any previous knowledge about genetic algorithms (though it is appreciated ), just any problem as described above. What kinds of exercises\problems such as those are used? The students are high-school students learning in java, and they are familiar with OOP. 

Have them explain what's going on there. Then move on to more "real" programs and see if this helps. The purpose is just to get them thinking about what they're doing and what the computer's doing. It sounds like something that can be remedied by just making them think. 

All "joking" aside, foreach loops are super useful - I use them all the time. They're the difference between 

Sites like hack this site are completely legal and allow users to experiment and learn about vulnerabilities (in this case, using them to solve levels and challenges, but it will teach them how to avoid them in their own code). You do need to create an account to access any of the challenges, but it's a great site. I'm pretty terrible at it, but it's fun to try to figure out. Multiple challenges in the basic level involve SQL injection. Let them try it on their own programs or on a dummy website or two that you set up. 

I'm going to be honest - I'd question them first. Maybe suggest tutoring to see if they like it, and really trying to get at what they want to do. If they want to teach at a university and also do research, that's one thing. If they want to teach at a highschool or middle school, that's quite another. An example: I've emailed a professor at a university near me. He does extensive research, especially in molecular computing and so forth, and he emailed me apologizing for not responding sooner because he had been working with a colleague in Spain on a research project. (::jaw drops in awe::) He also teaches a few classes at the university. This is at a pretty good public university. In contrast, I've taken a class under a teacher in my middle school in engineering/robotics/programming. It was a pretty good course, I must say, but I should point out: he taught three engineering/robotics/programming classes a day, three math classes, and then had a prep period. He also supervised the mock trial club and the robotics club, and I think he might coach a sport too. He as far as I know does not do research. This is at a really good public school. Quite different. If your student wants to do the latter or the former, fair enough! Both are good pursuits. Just make sure they know what they're getting into. Things might be better or worse depending on whether the school is public, private, what area it's in, etc. Also, maybe they really just want to do research, or maybe lead a team in industry. On the other hand, it's perfectly okay to change careers - I know multiple people who have done it - so maybe they want to do one thing and then another. That's all fine, but just make sure they know that they want to do, and that they've tried doing it. Also, point out that they might want to take some education focused classes along with their main classes. 

I'm not as familiar with Python as I am with other languages, but I'm sure your students have played Minecraft. If you haven't, I suggest taking a few minutes to find some introductory "Lets Play" videos on YouTube first. Let's talk Blocks. Minecraft has dozens of blocks. Dirt, some, water, colored wool... All blocks can be broken, picked up, placed, stacked, stored in chests, and crafted together. But not all blocks do just those things. The chest let's the player store items in it. The furnace smelts some blocks into other blocks. Grass, when broken, drops a completely different block. Stone doesn't drop anything at all unless dug out with a pickaxe. Minecraft can do this because of all of those basic methods that subclasses inherit and override. Take this method (not pulled from source, just based on): 

After reading the answers here I'm left thinking... What about doing classroom code review? That is, have the students take the assignment they've completed, print it out, hand it to someone else, then have the students review the code they now have in front of them. When everything thinks they're done, have them switch papers yet again, getting a third set of eyes on things (one coder, two reviewers). Each reviewer would write their name on it as having reviewed it as well. I hear tales of how marvelous code review is, but I've never had to participate on it in any sort of official setting (i.e. for a job, as a classroom assignment...) but I think this would be a good way to introduce the concept. It's often hard to spot mistakes in one's own code, so having to look for errors in someone else's tends to be easier, as well as letting people see alternative approaches to problems ("What's this syntax here, ? I've never seen this before"). 

Senior students in the computer science major at my school work on a project which is supposed to be relatively big (i.e. just a graphic calculator isn't enough). I was wondering (for next year; it's too late for this year) what might be gained if we teach the students about Version Control (probably git). Naturally, this makes the project easier to track and has all the advantages that vcs offers. But given that these students aren't taught about correct\good design concepts and such, if we do attempt to teach about vcs, some students might be confused. So, what advantages might teaching vcs to these students (so that they use it to organize their projects) have? An option is to make the lesson optional (i.e. enrichment). 

I think that naming conventions are very important. It can be useful to explain that it makes the code much easier to understand. In the beginning (1 or 2 tests after introducing the convention), you should take just a few points off if the name of a variable or method doesn't tell you anything about it (e.g. calling the sum of an array or instead of or preferably ). You should tell them that you will take a few points for it. After a short amount of time, you'll find that you don't need to take points off for bad naming, because students will learn that it is important. Again, just one or two points for bad naming should do the trick. However it is necessary to explain why it's important for their code to be easily understandable).