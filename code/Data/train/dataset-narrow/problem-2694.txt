$URL$ Edit: Sorry for the french reference but i haven't find any date on the english wikipedia. The translation is: 

But I don't know if I can deferred pass rendering from a same technique instead of using them one after the other as in the previous example. Here is an example of what will probably happen with the solution I try to build: 

Input.GetButtonDown is fired during the frame when user pressed the button. The function return true only one time when user pressed it. From the Unity Script Reference: Input.GetButtonDown() 

It seems that the UDK only support iOS for the moment and so there is no way to make it works on Android: $URL$ As you say Dungeon Defenders was built with Unreal Engine and not with the UDK. According to Epic Game some problems such as performance and app size issues on Android prevent them to release an Android version of the UDK. 

I'm creating an application which allows the user to manipulate 3D models. I would like to draw 3 axis representing the world coordinate system in 3D in order to give the user an idea where he is. These axis are represented by a 3D model. Now I want these axis to be always shown at the bottom left of the screen. I know how to draw them but not how to project them at specific coordinates on the screen. How can i achieve this? EDIT: I use XNA. The axes have been created with 3DSMax, each axes is a cylinder surmounted by a cone. When I load the 3DSMax file, I get an instance of the Model class. 

The smallest increment you can do on a float in C# and have a significant value to be different from 0 is float.Epsilon. From MSDN Single.Epsilon 

Yes GLUT is obsolete and not under developement since 1998 with the release of the 3.7 version. From French Wikipedia: 

I'm trying to implement an axis-aligned bounding box with center/half-size instead of min/max. And I have some problems when it comes to create a method to detect if the aabb is visible or not. I try to do the same as on this website at "Method 5": $URL$ I'm trying to implement this formula: 

If you don't have a WP7 and only a desktop computer the best solution is to use the WP7 Emulator. You can find more informations here: $URL$ If you have installed the latest version of XNA, the WP7 emulator is installed at the same time. If you don't have it, you can get it from here: $URL$ You can also read this post on AppHub, someone else had had the same problem as you: $URL$ 

When you try to call the Effect property of your ModelMeshPart you get an Effect instance and Effect is the base class for all effect. So you can't cast an Effect instance to a BasicEffect because BasicEffect inherits from Effect. Furthermore you don't need to cast it to a BasicEffect. Your line: 

I am refactoring some parts of the game engine I am working on. This engine is made in C# with XNA. The part I have trouble with is shader/material and the render queue. In the new version I will give ability to indicate differents render states per pass within a technique (blend state, rasterizer state, ...). In my engine, all renderables have a material and each material is associated to one technique (thus to one or more passes). Later, when the game will be running, I will add renderable objects to the render queue and then sort it based on the pass used by each material. What I want to achieve is to reduce states changes between draw calls by first grouping same passes together and then passes with nearly identical states to be as closed as possible to minimize changes. But this solution seems to be problematic when it comes to use technique with more than one pass with completely different states. Passes within a same technique can be completely separated in the render queue and not rendered one after the other. If I say that it's because I have always see multi-passes technique render in a loop and all passes rendered immediately like that : 

_signPlane is an array of Vector3 using the following formula and applied for each plane once per frame when the frustum is updated: 

it seems you're not the only with this problem : $URL$ This exception occurred because there is a missing folder "testdata" and a file "alphamap.png". This file is used by test classes of Slick. Have you downloaded the full distribution or only the library? When i download the full distribution i can find a testdata folder inside the zip file. You can find it here: $URL$ You can find a link to download the full distribution in the menu at the right of the page. 

EDIT I've made a huge mistake in my previous explanation. GetButtonDown() is fired only during one frame when the button is pressed as well for GetButtonUp() when the button is released. So to know if the button is hold or not, you have to check state changes when GetButtonDown() or GetButtonUp() are true. For example, you have a variable "buttonDown" wich is a bool(true, the button is down / false, the button is up). When GetButtonDown() return true, you can assume that the button is hold by user. So you assign true to "buttonDown" and you only change the value of "buttonDown" when GetButtonUp() return true. 

I would say you're approaching the issue in the wrong way. Firstly try and tackle the XNA issue, because it is likely that as the MonoGame project is all about doing XNA as an open source implementation that it will use similar or the same file types in the same manner. Although MonoGame is not dependant on XNA installing correctly (see edit - Thanks Josh) here are some things to check for XNA issues: 

You are on the right track with the rig needing to be the same. If you are using one character mesh and model you can reassign textures in Unity3D as needed. One thing to check is the Unity documentation: $URL$ It covers importing and exporting from MAX including "Exporting Bone-based Animations" which may be of use. I'm not sure how you would go about applying that to the existing models in Mecanim but if you can apply them in blender/MAX then it should import nicely into Unity3D. Edit: It looks like others have had the same issue: How do I import asset and maintain textures To quote: 

Just to extract an answer from the comments: Zophars Domain shows you a list of tools that you can use for NES ROMs including Graphics Extractor and Inserter which allows you to extract and insert tile graphics from the ROM. To use this you need the Extractor executable and the Inserter. Use the extractor to get the tiles first, edit them in your editor of choice (MS Paint ftw) and then use the inserter to pop them back into the ROM. Make sure you create a backup in-case it corrupts the ROM image. 

If your platforms are isolated use Tags. Each object and prefab in the Unity game world can be interacted with differently depending on the tag they have. 

Please excuse the roughness but I hope this gives you a decent idea for structure. Formatting your XML a little better you can then create a parser to create the scenes and the requirements in them, here is an example of both the scenes above in one: 

Firstly, you need to use a switch case statement and decide which direction overrides the others, for example, if they press all four buttons, which button should be listened to for input? This gets put in order within the switch statements. Edit: For clarity about the above statement. You do need to use a switch case statement (or similar structural logic) to stop the following from happening. 

To approach the clusters of unbroken shapes you can simply iterate through each tile and check if it is connected to any of the previously iterated tiles: 

This will stop you getting stuck in a wall as well as switch your direction depending on the wall face you contacted. What you'll need to do is put 2 collision triggers on a wall to differentiate the direction you jump or run. 

So we can mark it as answered I've reformatted the details you have put up. Can you please revert your changes in your question so future viewers can see what changes were made if they have the same issue. Also I noticed you have a lot of logic redundancies (like your if (z>5) and if (z<5)) as they can be condensed into an statement with a smaller random range, considering is used for nothing but a Rand comparison. C# Version: 

is an explicit command to remove the object from the game scene immediately* or after a set time increment. As soon as you call it - the item is destroyed in context of the scene. Garbage collection will take it as soon as there are no more when it is ready assuming there are no more hard references to that item. However, this is not controllable in Unity without calling the GC system object. Unity3D - Object.Destroy() * clarification - immediately meaning in that frame. After the Update loop the item is destroyed, it will always be done before rendering 

Alternative (I would choose this): Use events and subscribing to listen when your actor is removed from the scene and get your attachable actors to then detach from it. 

STEP 3: Now we have are scripts, but where do they go? Create an object. Like, obj_screen, objScreen, o_screen, or whatever, and do the following: 

I got this fully functioning in Unity on an empty game object, you need to make sure you make the list with the new statement and also ensure you have the imports correctly defined. 

This will destroy the object after three seconds. Put this in your script after you have sorted out your text and GUI related stuff and you're sorted. 

It will allow you to restrict physics but within Unity's scope and physics engine. You can jiggle around with the script to make it lock only one object to be moved etc but this should get you started. 

The main value we need here is the Distance - 4. Setting this to 4 will create a third person camera (Although with units other than a marine, you may need to edit this). 0 will create a first person camera. The same goes for the Target - Z Offset - 1. A taller unit will need a higher value to raise the camera up some. Global Variables A few global variables are needed, the names and types of which are indicated below (Name - Type - Value - (Description)): 

EDIT: Going back on my answers I realized this is not up to scratch and needs the tutorial content. Here it is: STEP 1: Choose the scale you want. Use a view for every room and have the port W and port H scaled appropriately. So, for example, if you were using a scale of 2... it would look like this, in GM's room editor. It is important that this is consistent for all rooms. If you have lots of rooms, it might be easier to do this via code*. I prefer to do it that way, because then the values aren't constant and I can support multiple different scales. STEP 2: Create 3 scripts, screen_init, screen_begin, and screen_end. Here is what goes in each of the scripts... Quote from: screen_init