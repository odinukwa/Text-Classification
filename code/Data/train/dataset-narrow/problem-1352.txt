You can see the type at the point where you are using the variable. When an object has a constructor/destructor they are only being run at the point where they need to. If you exit early then the constructor is not even run. 

This is dangerous (if T is not a POD). If destroying an element results in an exception you are left with an object that is in an invlid state and have leaked memory. The standard order to avoid this is: 

As you go through the array just record the letters you have seen. So if you have seen them before you can remove them. There are only 26 letters so an array of 26 characters should work. If you want to catch all variations than an array of UCHAR_MAX (all valid characters) can be used (usually around 256 on some rare systems 512 but is directly related to CHAR_BIT). 

This condition may not be met in all graphs (if there is a subset of nodes not connected to other nodes). Also Dijkstra uses two lists. 

So you only check this node and its children!!!!! If so this function seems to be named incorrectly. Searching a tree is normally recursive. The function should check the current node then RECUSIVELY check each child. 

You can simplify this even more by using an extra helper function. Objects Why is this a free standing function? 

Now I can change the key bindings without making the code look weird. If I change the left right to 'o' 'p' the code still contains comparisons to and . Also note the all uppercase identifiers are by convention reserved from macros. Please don't abuse that it can lead to some complicated issues. Please use the more modern randum number library. 

It is more C++ like to use first and one past the point you consider end. It also makes the code look neater try it and see. 

Overall Wow. Correct implementation. Your the first person to post what I would call a proper implementation. Good Job. Code Review Prefer NOT to use 

Print the list where? Usually when you print something you are printing to a stream (std::cout). Usually you want to make sure you can pass in a different type of stream so it can go to a file or be serialized to a string for transport. SO I would have expected a print statement to take a stream object so the stream could be printed. Also in C++ objects are usually printed via the << operator. But it is acceptable to put a print method in the class to act as a helper for the operator. The stream operator may be something that will come latter in the course. 

Got bored writing a review on an HTML parser and decided I wanted to try. So I threw this together to see I could parse an Amazon page. 

On a first read looks good. Would use named functions in a few places to increase readability. Some other minor things: It is more traditional for user types to have an initial uppercase letter. 

If you are using dynamically allocated memory you should be using some form of smart pointer to indicate the ownership of the object. If the object is not dynamically allocated then you can use a reference rather than a pointer. But in this case I would not even expose this interface as it introduces coupling (by exposing the internal implementation of the class). Your internal structure is exposed as a public class and you return a pointer to this type of object via . This means you will need to support both of these indefinitely. This may prevent you from improving the class in the future (as both of these will need to be maintained to keep old code working). The internal structure of a class should be kept private. This will reduce coupling with external code and allow you to change the underlying implementation if you discover a better technique without having to modify any of the code that uses your class. Naming conventions. There is no absolute standard for C++ (so take as you require). But a common convention is that user defined classes begin with an upper case letter. The names of objects (variables/functions) begin with a lower case letter. This makes it easy to quickly identify what is a type and what is an object (which is very useful in a language where type information is paramount). Your comments are bad. Comments need to tell me something that is not obvious from the code. Also the code should be self documenting. Thus usually comments should tell me why (or describe in detail the algorithm that is being used). I can read code so the comments should not repeat the code (otherwise you have to maintain the code and the comments to make sure they say the same thing (and that is extra work)). The worst thing in development is finding code that does one thing and the comments say something else. Which is correct (the comments or the code). Which do I fix? So minimize your comments and only write stuff I can not tell from reading the code. Code Review Why are you publically exposing methods that can break the state of the object. 

In addition to efficiency concerns you have issues with correctness if the object contained is for a type that can potentially throw during a copy or move. Luckily your type is limited to so there are no issues there yet. More efficiency problems. 

Stuff to make it more concise: The same code can be used for both black and white. You just need to set a direction variable: 

Template traits class. The templatized version holds nothing (see ). But the code depends on particular values being there. So if you try and use it then compilation will fail. Thus to use the code you need to actually declare a template specialization explicitly for your class (see ). make_X function template functions can deduce their type based on the parmaeters passed to the function. While a class can not. So you can use template functions to create objects of the correct type without having to be explicit about it. 

But you don't actually use words after they are input. You can fix the limitation (and a potentially serious bug) by not using the concept of a line. Just read characters. In the code just read characters: 

The original version is deprecated so use rather than and you can remove the . The return value can also be simplified. 

Yes I can see what you are doing. But will everybody! Casting a to a stream (not correctly by the way). Then reading the value from the stream into limit and checking that the read worked in one statement. Unfortunately you got it wrong. But it's still a valid statement. What is happening here is you are taking the pointer and shifting the bits of the pointer right by limit (currently undefined). The resulting pointer is then cast to a string stream (creating a stringstream object). This is tested with the and since you have not read from it will always return true. This is a good point to advertize that you should increase your warning level well beyond normal. All warnings are logical errors in your thinking. Your compiled code should not generate any warnings. I think the minimum warning flags should be: