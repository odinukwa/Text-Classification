One important thing to note however, is that the Shannon-Hartley theorem assumes a specific type of noise - additive white Gaussian noise. The upper bound will be lower for other, more complex, types of noise. 

The bandwidth of a channel depends on the physical properties of the channel, so a copper wire will have a different bandwidth from a wireless channel and from an optical fiber. Here, for example, is a table from wikipedia, specifying the bandwidths of different twisted pair cables. If our example channel has a bandwidth of 1Mhz, then we can fairly easily use it to send a signal whose bandwidth is 1Mhz or less. Signals with a wider bandwidth will be distorted when passing through, possibly making them unintelligible. Now let's get back to our example signal . If we were to perform a Fourier analysis on it, we would discover that increasing the data rate (by making the bits shorter and closer to each other), increases the signal's bandwidth. The increase would be linear, so a two fold increase in the rate of bits, will mean a two fold increase in the bandwidth. The exact relation between bit rate and bandwidth depends on the data being sent as well as the modulation used (such as NRZ, QAM, Manchseter, and others). The classic way in which people draw bits: is what NRZ looks like, but other modulation techniques will encode zeroes and ones into different shapes, affecting their bandwidth. Since the exact bandwidth of a binary signal depends on several factors, its useful to look at the theoretical upper bound for any data signal over a given channel. This upper bound is given by the Shannonâ€“Hartley theorem: 

Let's make each chunk of 25000 bits long, giving us a total of 800 chunks. Let's suppose the media has a propagation delay of 10 milliseconds. Start-Stop protocol: Protocols using a start-stop technique send each chunk and stops until an acknowledge returns, in that case and supossing zero errors, to send each chunk of 2500 bits takes 20 milliseconds and give us a bandwith use of 125 Kbps. In that fashion it will take 16 seconds to transmit the file. Sliding Window protocol: A sliding window technique allows to send chunks one after another and receive acknowledgments in an asynchronous way. Ssupposing a window of 10 then the sender put 10 chunks on the media. It takes 100 milliseconds and before sending the next one, the acknowledge for the first chunk must have arrived. If everything is right and there are zero errors, it will be 110 milliseconds for 25000 bits giving us a use of 227 Kbps ( more efficient that the first case). It will take 8,8 seconds to send the file. A bigger chunk (5000 bits) can give us 455 Kbps and a transfer time of 4,4 seconds. All this supossing zero errors. The bandwith is a limit but the data transfer is a result of the protocol used, the propagation delay and the errors in the media. 

The only good reason for port forwarding is to allow incoming connections to reach a server which is behind the NAT. For instance, if you are running a normal web server, you will want to use port forwarding (programmed in the router) to allow port 80 to be forwarded into your web server's IP address. Note that this can open security holes; if your web server gets hacked it will have access to the rest of your network unless you set up a DMZ by using two routers - one with port forwarding into your web server, then another to hide the rest of your network. 

in both directions. then you can use scp for encrypted transfers. For Windows you can use WinSCP. Get the PuTTY suite and look in the directory and you will find it. This makes it simple because it can run both as scripts and as tasks. Once you exchange public keys it will not prompt you for a password. 

It connects you to the Internet very much the same way your home network connects your PC to the router, using IP (Internet Protocol). The ISP doesn't have any magic equipment; just more of it than you are likely to have at home. i.e., at home you may have just a few computers, but the ISP services hundreds or thousands of users. You are free to buy your own routers and such, but your ISP will want some way to charge you for the service. For a modem it might be a password. For a cable network the ISP will likely lease you a combination modem/router as part of the service. Their systems recognize the address of your device so they know it is you. 

Packets are long streams of binary numbers ( and ). The and are usually changes of an electric signal, specifically voltage changes. To simplify, suppose that is 0 volts and is represented alternatively as 5 volts and -5 volts. Then a long string of zeros and ones will look like this in terms of voltage variations in the cable: 

A device only knows its own subnet mask, and it helps the device to calculate which network it belongs to. Everything outside the network must go through the default gateway and everything in the network must be discovered using ARP. In your example Device 1 has the IP . a) if the subnet mask is then: The network is from to . Everything outside that range goes to the default gateway. However, b) if the subnet mask is then: The network is wider (from to ) and again, everything outside that range goes to the default gateway. 

The table is the place where the MAC addresses are stored. It is used by the layer 2 control to forward incoming frames to their destination ports, something like this: 

CAT5 cabling is able to manage speeds up to 100 Mbps if everything was installed according to the standards. 

64 customers with 256 addresses. Remember that 256 = 2^8. It means that to allocate 256 addresses you will need 8 bits. From the full 32 bits of an IPv4 adddress, 8 bits will go to host and the remaining 24 will be network. Then each of the 64 networks should use /24. 

The difference in prefixes usually comes from the professional background of the people counting. Electrical engineers have a strong professional background in physics and just like physicists, they tend to use powers of ten. Computer science professionals, on the other hand, tend to count everything in powers of two since it makes more sense in their context. Since the standards for the bottom two layers (Physical, Data-Link) of the OSI model are mostly written by electrical engineers (e.g. IEEE / ITU-T), the standard units of measurements in these layers are usually powers of ten. This is why gigabit Ethernet works at a nominal rate of 1*10^9 bps, not 2^30bps. The other layers of the OSI are often standardized by computer scientists/software engineers (e.g. IETF) which tend to measure things in Bytes, or powers of two, which is 2^3 bits. This is where powers of two start coming in. This indeed creates conversion problems. The same conversion problem is encountered in hard drives - electrical engineers build devices that store 1,000,000,000,000 bytes and call it a Terabyte drive; while the operating system, written by software engineers, reports that the same drive can hold only 931 Gigabytes. Add to that the fact that marketing people like to write best case, round numbers in ads, and you get a pretty confused picture. I hope that somewhat clears the picture. What I suggest doing, as good practice, is using binary prefixes for units that are power of two, and not overriding the term "Kilo" to mean both 1000 and 1024. In the last few years the usage of these prefixes increased and you can find them in use in many documents and user interfaces. This is especially important in documents that contain both powers of two and powers of ten. In such documents, a note regarding the difference between SI and binary prefixes should be provided to the reader, and all units which are a power of two should be written with binary prefixes. 

The first 7 bytes are the same: . The last byte called the Start of Frame byte is slightly different: . The preamble is not officially counted as part of the Ethernet frame. The frame begins immediately after the Start of Frame, without a gap. As the preamble is a fixed and known pattern, it is used by the receiver to "lock-in" the clock and from then it can easily understand the incoming frame. 

10BaseT and 10BaseFx are standards of connectivity for Ethernet. 10BaseT defines the use of twisted pair cabling (UTP / STP) for Ethernet, that includes cable features, male (in cable) and female (in wall boxes) connectors, max distances, etc. 10BaseFx defines the use of fiber optics for Ethernet, including type of fiber, max distances, connectors (in cable and in wall boxes), etc. 

So, each time the PC needs to communicate to the server, it will send the IP packet to the default gateway MAC address. If the switch is a layer 2 switch it will check the destination MAC address and redirect the packet to the port where that MAC resides. If the switch is a layer 3 switch it can check the MAC but also the destination IP address and take the decision to route the packet directly to the server. 

If you are using static IP addreses there is not a single advantage of filtering by MAC because there is a one-to-one relationship among them, except if the device has a single interface and more than one IP address. In that case we're talking of a "one-to-many" relationship. In DHCP environments it could happen that an IP address is used by a device now and by another later. In that case is useful to filter by MAC so you can follow the behavior of the same device despite of the IP adddress changing behavior. Keep in mind that MAC addresses are local. IP packets coming from other LANs through a router, will have the original source MAC replaced with the router's MAC address. 

No. Bandwidth is not something the cable contains. It is simply a physical connection medium. 10mbps is the speed of data flow, not the quantity. The original Ethernet specification limits the individual copper cable lengths to 100 meters, because of the latency time of getting a packet from end-to-end then getting the returning ACK before timing out. To go further than that you need a bridge. None of this should affect the speed of the cable. But it can affect total throughput. For instance: when you are transferring 10 MB of data, longer cables will be a bit slower to transfer that total amount than shorter ones simply because the signals travel at about 2/3 of the speed of light in copper. More length means more latency. Adding bridges will also slow down the total throughput a bit because of the latency involved in receiving packets, acknowledging them, then regenerating them to be passed along to the next segment. 

I have done this with no problem. I obsoleted the need for the cable by using WiFi before the cable ever could become a problem. But while I was using it I had no problems. The trick is to not just bury the wire. Enclose it to keep water away from it. Since this is for home use, I would suggest that you bury it inside a length of PVC pipe. Get the smallest that will work for you, and put on elbows and such so it comes up at each end then angles down before the cable goes through a wall, so rain stays out of it. I spray-painted mine black so it was barely noticeable, mounted on the wall. Be sure to plan for failure because this cable is not designed for this, so have a second one in the pipe with the first one just in case. Maybe also make a third one you keep in the garage in case water does cause a problem with whatever is in the pipe and you have to pull them both out and blow it clean. Like with any conduit-type installation, make sure you pull in a draw string along with the cable(s). Connectors on each end for easy swapping, of course. In any case, give it a try. The worst that can happen is that it will work for a few months then fail. You have the cable, and PVC pipe and fittings are all very inexpensive. Not all the PVC joints will need to be glued, but the elbows that go underground definitely should be. Good luck with this project. 

Suppose this scenario: The sender and the receiver share a 1 Mbps bandwith media. If the sender needs to send a file of 2 Mbit, in an ideal world it will take 2 seconds using the full bandwith. But in the real world we have two problems: 

A little trick: In this case, the 4 bits for host part, means that you will have 16 address on each subnet. Then divide , if the division is exact without decimals then is a network address and can't be used. 

Circuit switching networks as X.25 or Frame Relay use a mechanism that opens a virtual channel from transmitter to receiver before the data transmission begins. For example: If using Frame Relay you want to communicate from London to Paris, your communication device has to send a signal to its next Frame Relay switch indicating that you want to open a channel to Paris, and that switch sends the same signal to the following switch and so on until the signal gets to Paris switch. Now that the channel is stablished the communication begins. Each frame from London to Paris goes through the designated channel and when the communication ends the switches close the channel. Packet switching networks as TCP/IP don't open a predefined channel before sending the first frame of communication. In the same example using London and Paris, your device sends the first frame and the next switch will have to decide what is the best next hop for that frame and every network device will do the same until the frame gets to Paris. For each frame the switch decides the best next hop so sometimes the frames will go through one path and sometimes through another depending of traffic, congestion, availability, etc. Packet Switching networks are more flexible than Circuit switching networks because there is not a designated path from start to end.