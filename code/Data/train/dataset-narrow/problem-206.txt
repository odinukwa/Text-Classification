Matt, good question! Bridge and switch are almost same things. Bridge, now(in 2014 ;-), is a basic function of the ever modern OS, so this is software. Lets look on bridge architecture(bridge operations are described in ieee 802.1D), bridge must have: 

Is it possible to do that without VLANs ? yes, but why, you have good switch?! ;-) How should be configured MikroTik WiFi router ? In what mode the WiFi router should work ? If your switch is in default config, then you just need to connect wifi-router ethernet1 port to the switch. This will be "wan" for wifi-router, add address to this interface for. example 192.168.1.254, set gateway 192.168.1.1. It will works. If you want to limit connections from 192.168.2.0 to 192.168.1.0, set acl on mikrotik. But, if you want, to permit 192.168.1.0 to 192.168.2.0 and deny 192.168.2.0 to 192.168.1.0, both, you need: 

We have a number of Cisco 891 routers configured with dual WAN links. All of these routers are running Cisco IOS 15.x In some cases, we use policy based routing to force particular traffic down one link. I use PBR a lot with Dual WAN setups, as the customer generally wants certain traffic to go over a particular link. For example, I will often need to have real-time traffic such as VOIP go over one link, then general internet to go over another, and typically will use PBR to route the traffic according to source/destination IP, VLAN, or whatever fits. Obviously, it is best to still offer a degraded service if the dedicated voice link should go offline. I tend to use with an IP SLA tracking object in order to allow the traffic to still fail-over to the other WAN, should it need to. My question is: Is it at all possible to do the same config (wth a tracking object to verify availability) when using PBR to set an interface, instead of a next-hop? There's a couple of reasons for this: 

The NCS6k is designed to operate as both a stand-alone chassis, as well as connect to a separate chassis that holds only switch fabric cards. As a standalone system, the switch fabric still interconnects all the linecards, but the fabric cards are on the "back" of the chassis and have only internal-facing interfaces. In a multi-chassis system you have a set of "linecard chassis" that all interconnect through a different set of fabric cards to the "fabric chassis". Essentially, the fabric chassis allows you to build an even larger system than you could with a single chassis of 8 linecards. 

(it might actually be "input" or "output" instead of "ingress" or "egress" but with a little question-mark magic you'll be able to find it. You'll have a whole bunch of output that shows you all the policer rates, actions, and token bucket depths. It's actually a very useful little command. ;-) 

I'm fairly new to the concept of vPC but I don't seem to be able to find a Juniper equivalent for this technology - other than stacking the ToR switches with Virtual Chassis technology. I'll probably end up using Virtual Chassis if I can't do it any other way, but I'd like to try and keep the ToR switches un-stacked, if I can. The only other option I know of is to use MSTP to balance traffic per VLAN - which is probably OK given that we use 1xVLAN per customer and each host can do 2 Gbps max, but a port channel seems much simpler to configure and maintain. Am I missing something? 

I've just lodged a request with upstream to clarify some specifics of their recommended BGP configuration. Currently, I will be dual-homing with my upstream via PI addresses. Advertising via BGP with my own AS, and have requested they pass me a default route. Their recommended configuration is to have two cross-connects, one from each of my primary/secondary router, connecting to their primary/secondary router, respectively. My primary would their peer with their primary, and my secondary with theirs. This is all fine (aside from the potential no-connectivity scenario if my primary is down, and their secondary is down). But my confusion is this: My provider is suggesting that by taking only a default, I am going to have an active/standy configuration, and that I need a full set of routes for active/active. My understanding was that if I'm only homed via a single ISP, then a full-feed becomes effectively pointless, since all traffic is going the same path either way. What am I missing that would cause this to be an active/standy configuration? Surely the secondary router, if traffic hits it, is going to prefer to send out it's local default gateway, as opposed to first sending traffic to the primary? Taking it from another perspective, I can't see how full routes is going to change the behavior (ignoring possible traffic engineering scenarios), since both routers would have the same set of routes from upstream. 

forwarding proccess, forwards frames. learning proccess, writes incoming frames source addresses to the fitering database filtering database, holds info about what host can be found behind what interface, used by forwarding proccess. 

you have 655 throttles, so there is two major reasons: cpu overload, buffers overload. and you have 338 errors ("149 overruns" + "189 ignored"), i guess this is (too) caused by overload of your router. details: overruns, ignored and userfull cisco pdf about drops troubleshooting it is very interesting for me, to see output these commands: 

It depends on your device model. For instance CE (cloud engine) switches, AR and N40 routers are supporting OPS technology (Open Programming System). OPS is quite similar to Cisco EEM and, in addition, it might be able to process python scripts. Hope this helps. 

All this operations are uses CPU, which is shared by another OS proccesses, this is an important. So what is typical switch? Switch, as usual, have multiple (!)different type(!) processors: 

We are a managed service provider running a small sized network in a single datacentre in Sydney. We've recently deployed a new POP inter-state in Melbourne (both are on the east coast of Australia), and for the first time I am having to face real-world challenges in terms of traffic engineering. My hope is that I can get some guidance here on how to get some level of control over my iBGP paths. I will likely be posting a few inter-related questions, but in this case I am specifically concerned about internal traffic engineering. I'm finding it surprisingly difficult to figure out how to get iBGP to make optimal routing decisions. The main goal to me is that need to find a way of giving iBGP some concept of a boundary and a distance per POP. So I can distinguish between a POP that is in the same city, vs one that is inter-state, vs one that is east vs west coast. Then optimise inbound/outbound routing based on this. I know that there will be a lot of case-by-case scenarios, but I'm hoping I can develop an iBGP routing strategy that works maybe 80% of the time and the rest I would have to deal with special edge cases in the config. Context 

So, when switch forwards frame, it is uses just ASIC, and in theory, CPU can be overloaded, but switching will works fine. ASICs and CPU are separated, ASICs even haves own superfast memory(CPU have typical RAM). When you are send configuration command to your switch oven ssh\telnet, CPU recieve commands from ssh\telnet process, and send them to the ASICs. Switches architecture is very complex, and it is vendor-specific, IMHO, modern switch this is true-engineering-excellence. 

@PHLiGHT, hello there! your cisco 861, imho, has overloaded by ingress traffic. Lets look on your cisco iface counters: 

But, I`ve disabled usage of logged user creds. So, if user creds are correct, i have this message in /var/log/freeradius/radius.log 

ps very strange is to see 76 runts, as usually, it caused by collisions(can be only in simplex mode), but in config we have "duplex full". imho, clean counters, do not change duplex mode, wait some time, runts are shouldnt increase. pps i guess, this situiatuion cant cause serious problems, because you have "only" 1 error on each ~500000 packets, it is not too bad in most cases, really ;-) 

You've assigned the network address (where all the bits not masked are zero) which is not allowed. For your subnet, the interface address can be anything OTHER than zero (the last 8 bits are all zero) or 255 (the last 8 bits are all ones). The most common convention is to have the router be the lowest numbered address of the IP block. Try this: 

Sorry I don't have a system actually in front of me to get you actual output, but look for "show qos interface ..." and that should have the configured hardware values for all the QoS parameters. The CLI is going to be something like: 

So in the strictest sense, "IP over Ethernet" is exactly what it sounds like, it's the encapsulation of IP packets (datagrams, formally) in standard ethernet frames. For much of the networking universe this is just "normal" IP as so much of the transport has migrated to Ethernet nowadays. Somewhat more specifically speaking, IPoE is often used in comparison to PPPoE when discussing how services such as residential broadband are delivered to the end user. This can be a little confusing as PPPoE would more accurately be described as "IP packets encapsulated in PPP, which is in turn encapsulated in Ethernet"... but it's just broadly known as "PPPoE". The use of either "PPPoE" or "IPoE" in the context of residential broadband also almost always implies other components of the service delivery system, such as address allocation, authentication, accounting, etc. Authentication is normally a RADIUS server or sometimes Diameter. The exact rules on how authentication is performed and what devices can/can't connect are usually set up by the specific service provider. Broadly speaking, "IPoE" is more common in cable access networks, and "PPPoE" is more common in DSL and dialup access networks: although this is by no means cast in stone. I found the document below to be relatively useful: $URL$ 

My Goals Essentially, I want to be able to achieve optimal routing between POPs as we deploy them. But right now I am not able to achieve any level of control over how iBGP is choosing it's paths. My current design 

I thought this would work pretty perfectly, be a pretty elegant solution, and is exactly the type of solution I am hoping to get to. I wrote up the configs in a couple of hours and deployed. But scratched my head until I realised that iBGP does not support AS path prepending. 

(As an aside, we're currently using a Linux router - 8 cores + 8 GB RAM, and it handles just under 1000 individual IPTables rules without breaking a sweat - though the throughput is < 50 Mbps). 

Even if I could get this working, it seems like it would never be a supported solution. What I'm considering