Here you go, with comments. Obviously, in production I would have only a handful of comments and not the exhaustive ones I put here. However this is the sort of points I might make during a code review. When I write code I optimize for it for communicating to a human reader what I intend the code to do. In other words - I want it to read like an essay. Therefore, I extract anything detail-heavy into small helper methods at the bottom of the script. The idea is that someone should open my script and the first thing they see should give them a top-level overview of the general flow of logic. I didn't comment at all on your solution itself, instead just cleaning up the algorithms that were already there. 

What about taking advantage of the (stupid) fact that the context parameter inside a function invoked without call or apply will be the window? 

My comments are inline starting with the . I also very much encourage you to look at async libraries such as Q. 

One comment on the code: you will find your constructors easier to maintain if you use constructor chaining protected BaseCache() : this(Guid.NewGuid() ) { } Now my possibly ignorant comments on other things. 

Hmm well according to the datepicker source code it doesn't use the jquery ui widget factory, which is a bit annoying because it's not standard. But global defaults should be set how ChaosPandion suggested. However if you don't want to do global defaults how about your own defaults object? My favorite way of doing that is with jQuery.extend. 

I realize that breaks with the "single point of return" wisdom but I'm not a big fan. When you have small functions like this one, it doesn't make all that much sense. Refactoring step 2, with that cleaned up it's easy to see how this fits into a simple LINQ query 

Ever since LINQ came out I've been talking about how the syntax is really awful. It looks friendly at first but it completely hides what is really going on which is really useful to understand. Here is the much shorter way of writing it with the extension methods off of IQueryable along with a few other adjustements. 

Speaking of which, the class is probably not the best named. you could imagine making a diesel-punk version of this where you use border-radius to have round (not boxy) spaces. Instead name it for what it is. My recommendation would be I'll stop short of saying that you should avoid ids altogether but only use them when you're really really sure that the element is the only one on the page with that name (including any other components built from composite uis). Next - this is a bit of personal preference but I think you're overusing divs. proper html elements can give good semantics to your document. I would probably structure the stuff as since these are part of a series. Other valid possibilities might be (as in article of clothing NOT a blog post article) or elements. I would also say you can make this significantly more lightweight by using a javascript templating framework like Handlebars or a an MVVM framework like Knockout or a full javascript framework like Angular. Your mounds and mounds of html will then collapse down to just a single definition. Runway probably doesn't need to be an element at all. You can probably just tag the the appropriate class (like ) and use css3 gradients to create that stripe. 

I absolutely agree with @Schism that more context is needed for a really good review but I made a few other observations inline. One that also jumps out at me is this whole relationship between and how you're selecting by name. Without more context I can't say for sure, but it seems like maybe you can have with the name being the key and that would make everything much simpler. You do need to think if sounds need to get disposed of or what happens if you invoke a method for something without a name, or if there's two things with the same name. Also, as always, I'm going to go ahead and say the prodigious use of here is probably entirely unnecessary and you can just use a factory method instead of a constructor. Also, it's 2015, can't we just start using es6 already? 

By the way in javascript you place curly braces on the same line, not on a new line. This is not just a matter of style because as Douglas Crockford has pointed out over and over, placing braces on a new line can occasionally cause your program to have strange silent errors due to semi-colon insertion. 

First, unless the module is about force times distance in a physics simulator, it is a terribly over-generic name! What does the name communicate to someone who is sitting down with your application for the first time? Name modules after what they do and be as specific as possible but not more so. Second, if you're only exposing a single method in that module just return that method directly, no need for an object. Next, won't your scrolling handlers depend on a specific structure being present already? You might want to make it explicit. I can't really make a recommendation how without understanding better how you plan to use this (I'm really confused what could possibly do). As for where key navigation should go, it really is all about naming. So if you view the arrow key navigation to be a part of the grid scrolling then yes, it should be in the module that sets that up, otherwise it should not be. Finally, What if you have two grids on the same page? seems like you're trying to apply a lot of stuff globally? Perhaps your modules can accept the grid you want to modify as a parameter? 

Finally, a couple notes on your specific files - you probably want to name those top-level functions even when returning immediately env.js 

Php I'm not a big Php guy so I can't be too thorough in this section. The biggest thing is that you seem to be writing ... well ... a php script. While that absolutely works it's incredibly old-school and doesn't do anything as far as guiding you into the pit of success. So first bit of advice: use a framework. At time of writing, the two I've been hearing most buzz about are Laravel and Codeigniter. This is constantly changing but just pick one which you've heard about and use it, that will help you learn enough concepts to make an educated choice next time you need to select one. Second, at the bottom you seem to have some invalid php. You have some missing braces in that if statement toward the bottom and it has two clauses in a row. I'm not sure if that will cause an error but it will definitely never run the third clause. Finally, your design leaves open a huge security hole if the site is ever opened to the public. You accept the message as an input parameter, much worse, you accept the email. Think of what happens when someone does a query to and again, and again. Spammers love finding unsecured services like this! A much better approach is to have the emails (and maybe message) stored on the server already in the database or a text file. Then you could supply parameters like indicating "email the person with id=1". Having this behind a login page is not a (good) defense either. Someone could easily put the above url in the src of an element and every time someone who had recently logged into your site visits a page they put that on (like a comment or forum page) you will be sending spam! To defend against this make sure that page does not accept the Http GET verb (in this situation POST would be appropriate). This is exactly the kind of error that a framework shoudl help defend you from. Finally, I see what you're doing with the ajax flag but that's not the typical thing to do. Whether the operation succeeded or not should be determined by the returned Http code (200 for success and maybe 400 for error). Whether you should be returning json or html should be determined by a concept called content negotiation. This is again, something that your framework should be handling for you. Html is not a valid attribute for the element. But also don't put ids on things unless you absolutely know there will be only one of these elements on the page. The spec says ids must be unique across the page and lots of javascript libraries cause errors when the assumption is broken. In this case can you guarantee there will not be two elements on the page at once? What if you have 2 offices and each one wants its own contact form? What about elements with or ? A better approach I think in this case is to use a class. That is not to say that you should never use ids but in most cases the benefit isn't worth the risk. Next, you don't technically need , it's optional but submit is the default behavior. Finally, I'm not 100% sure of the spec for but I don't think it works by associating the label with the following . Instead you have to use the attribute and s (which I've already argued is bad). Or do what I recommend, something like: 

Finally, you might want to check if returns null and maybe log a warning then as that function returning null would cause a cache miss every time. Now to answer your specific questions. 

Some quick advice since this already has an accepted answer - you will make things quickly less confusing if you use a few other javascript libraries. 

Seems to even work when wrapped in a . That being said, you might have legitimate reasons to want to test for this but I can't think of any. Edit: Added check for 'other' window. You could probably add some finagling to check that eval isn't a stub that always returns . So if it returns true for example you could generate two random numbers, add them together, and then pass them into the eval string and have it add those numbers and confirm the result is indeed accurate. Let's be honest though, that's stupid, if someone wants to trick you that bad, they'll find a way. 

In short. No. The mapping between object properties and fields on the form has to be somewhere. What you could do though is to set it up by convention. So if the field on the form had the same name as the corresponding property on the object you could use reflection (or a tool like Automapper) to do that shifting. In pseudo code (because I don't have a set up .Net environment in front of me right now) it would be something like: 

I'll say it, the generic implementation is better. is a great trapdoor when you get really bogged down with generics or anonymous types and there's neat things you can do with it (see Dapper) but it still has some gotchas. For example, I do not think your function with will work in most cases. expects and returns types meaning all types are being downcast or boxed. Therefore, if your function returns a object, what is stored is still an and what is returned from the cache is downcast likewise. Therefore your property will not be available until you cast, even though it's dynamic. Yes. The generic version - with some subtle yet real differences - will run as if it was written for the type you're filling with. The dynamic version will just be a "value" and let the DLR figure out how to invoke members (which again, unless you're calling or , will fail). will also be slower as the runtime binding has to be done every time, though admittedly this is unlikely to be any sort of bottleneck. Obviously I'm going to say always use the generic version in this case. 

Don't use ids at all. (You almost never should be using them. Ids get to be really problematic once you have composite views and/or multiple people on a project) Place a few appropriate classes in your html. And use the jquery composite and relative references to do it all at once. 

** The above code is untested but it should be enough to get you on the right track ** Feel free to ask questions in the comments area 

That both makes it clear from within what module you're in, the fact that you expect it to be used with , and will generate nicer stacktraces. I'll also point out that - it's a matter of style but you're on CR so I consider it solicited - hardly ever is code made more bugproof or more legible by using constructor functions. reader.js could just as easily be the following and not depend on someone remembering to use and always bind functions. 

As for similar methods, as you start to understand the above format you can start to understand lambdas and expressions, you don't have to understand them very deeply, but you can learn that they are simply another syntax for creating certain types of objects. Therefore you could refactor to this (using a refactoring plugin like CodeRush/Refactor Pro or Resharper will help immensely): 

You can get really far cleaning this up by just creating some private functions and bumping them to the bottom of the file so that they can be hoisted 

In prepping to teach a workshop on recursion I wrote this code that uses a maze-building algorithm. In doing so I found it really natural to use generators a lot. I feel pretty happy with how the code turned out but its also pretty unusual and I wonder what yall think of it. This is meant to run on latest chrome (partial es2015 support, no destructing assignment, no modules yet) 

As mentioned in the comments the question that you are asking is actually off topic as you have not implemented it yet and there are many solutions (you could for example do everything as percentage or vh/vw units rather than pixels). What you're asking for is a concept known as responsive design. I will however review the code that you have. First problem I see 

is already visible from eventListener. It is in fact visible from everywhere inside the immediately invoked anonymous function. Try putting in there and you'll see. This is due to the concept of closures which in technical-ish terms means that when a variable is not found inside a function's context, it looks in the parent context (the context the function was in when created) and so on all the way up to the window object. In plain-english terms this means that you should forget all your Java/C#/Php training and the variables visible inside a function are exactly those that you intuitively think should be. That being said, there is going to be only one instance of for this block of code, so if the is ever attached to more than a single element all instances of the listener will be referencing the same . There are plenty of ways to skin this cat and you really did not give enough details on what your trying to achieve to give advice on best practices but let me try to give some advice anyways