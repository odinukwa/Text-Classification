One thing I noticed is that calls with exactly the same arguments. So you don't need two separate methods but just 

is more efficient, it computes both numbers in a single call and gives you integers instead of strings. But here we can do even better: There is a dedicated method to check if two dates are equal down to some specified component: 

First to find a terminating newline character, and then again to determine the length. This is not necessary because returns the number of characters written to , i.e. a newline character can only be at position : 

This means that you can pass an directly to and conditionally cast the return value from back to the enum. The Swift runtime automatically wraps the value into a class. (AnyObject not working in Xcode8 beta6? on Stack Overflow contains further information and links.) So this is everything you need: 

You can get rid of the "unsafe bit casts", an can be bridged to (resp. ) directly (tested with Swift 3 and Swift 4). If you know for sure that there is at least one line with at least one run then it would be: 

The animation runs with approx 60 frames per second both on an 1.2 GHz MacBook and on an iPhone 6s. To give you a rough impression of what it looks like, I took a screen recording with QuickTime Player and converted it to an animated GIF with ffmpeg and gifsicle: 

the former being a wrapper for the latter. But that wrapper method is not used at all. If you remove it then you can also get rid of the explicit type annotation in 

Now it is no longer possible to call any database method without having opened it. For better type safety I would define a custom type with a private property. could then be a method of this type. You have two methods 

1 is not a prime number! By definition, a prime number is an integer greater than one which has no (positive) divisor other than 1 and itself. Both the iterator and the function – correctly – produce as the first prime. But then in , the number is inserted and I see no reason to do so. 

Note how is used to avoid array reallocations. Performance comparison: The test was done on a MacBook (Retina, 12-inch, Early 2016, 1.2 GHz Intel Core m5 processor), with the program compiled in Release configuration: 

But a better way is to cast the to a Swift array of Swift dictionaries in the first step. Then you can use array enumeration and don't need any casts later: 

The "integer square root" of a non-negative integer \$ n \$ is defined as the largest integer not greater than \$ \sqrt{n} \$: $$ \operatorname{isqrt}(n) = \lfloor \sqrt{n} \rfloor = \max \{ k \in \Bbb N_0 \mid k^2 \le n \} $$ It is for example needed in prime factorization, as an upper bound for the possible factors. A simple approach is to compute the floating point square root and truncate the result to an integer. In Swift that would be 

in the Xcode source editor. This is useful to avoid typing errors in the image name, and to visually check if the right image was chosen. You can even double-click on the image icon and choose a different one. 

benchmark reports that the data is written with about 50 MB/s. This can be improved by calling with a larger byte array: 

That works, but it does not take advantage of the "object-oriented" aspect of Objective-C. Here is an alternative implementation: Each can be dumped as a property list. The default implementation just prints the keys and the value: 

The repeated creation of mutable arrays consumes much time. This can be avoided by modifying the existing arrays ( and ) before entering the recursive step, and undoing the modification on return. For the beads array, you can remove the first element and later add it at the end, so that it is not chosen again: 

because the number of possible combinations of divisors is just \$ 2 ^ {\text{number of divisors}} \$, which can be computed as 

Finally an alternative approach, which might be simpler for the usage as a table view data source. The initializer (introduces in Swift 4) 

This is slightly more code, but no if-statements at all, and it can easily be extended if you need a special "treatment" for some object types. 

(see for example What should main() return in C and C++? on Stack Overflow). The final statement can be omitted, there is an implicit . Performance improvements After reading a line from the input file, the string is traversed twice: 

A final note about using : You can access properties and methods of the current class without using (unless there is an ambiguity, e.g. due to a local variable or function parameter with the name name, or if is captured implicitly in a block.) Whether you use or not to access properties is a matter of taste and programming style, but in any case it should be consistent in your code, which it currently isn't: 

would be a correct way of sorting an array with respect to the last name first, and with respect to the first name second. This can be simplified to 

is an array of dates in that month, this can be used to compute the number of rows in a section and for the method. 

Using a custom extension for the conversion to a string is not really necessary, the same can be achieved directly with 

But why use a common variable at all? Are you hoping to save some variable storage? Better prefer clarity and use separate variables: 

Some remarks concerning the performance: Each key lookup is done by a linear traversal of the array. For large dictionaries this can become a problem. The project from the referenced blog post solves this by maintaining both a dictionary (for the key/value pairs) and an array (for the ordered keys). The advantage is that a lookup is fast. But adding a new key or removing a key still requires a linear traversal of the keys array. Whether this is acceptable or not depends on how often keys are added/removed compared to key/value lookups. One could store the key/value pairs in a tree structure to improve the performance (e.g. AVL tree or a red-black tree). Of course that increases the complexity of the code. 

Then you can configure the specific properties inside the switch statement, and the shared properties outside the switch statement, thereby avoiding the code repetition: 

Always use curly braces with if-statements, even if the if or else part consists only of a single statement. That helps to avoid errors if the code is edited later. 

will crash if there is no key/value tuple for the given key, instead of returning , because accessing requires that there is at least one element. This can be fixed as 

In particular, implicitly unwrapped optionals are treated as regular (strong) optionals in many cases, which can cause confusion. So you should declare the user properties as non-optionals or as regular optionals, depending on whether they are required or not. A possible choice would be 

In my test this ran twice as fast as your code (approx 0.2 vs 0.4 seconds on a 1.2 GHz Intel Core m5 MacBook). Further suggestion: It might help to estimate how large the remaining value can be. For example, if we already have the prefix then at most can be subtracted, and reaching the target value is impossible. This would allow to shortcut the recursion in many cases. 

this allows better error checking than . (When you create the action in interface builder, there is an option for that.) Using all the above stuff, the method becomes 

The solution is to embed the call to into a Core Animation transaction so that the frame and mask changes are synchronized with the view layer's animation, see for example 

There are various ways to make this faster. For example the observation that with each divisor \$ i \$ of a number \$ n \$, \$ n/i \$ is another divisor (see for example Find all divisors of a natural number). That allows to reduce the number of loop iterations to the square-root of the given number, and could look like this: 

There is no need to store all lines from the input file in memory. For each line read from the input you can append the string and write the result to the output file. This would save memory for large input files. You should also check if opening the input and output file was successful, otherwise your program will silently do nothing if the files could not be opened/created. 

fails, or does not return a , then you did not configure the table view correctly in the Storyboard. Such cases should be detected during development. Therefore it is better to abort with a runtime error instead of "hiding" the problem and returning a plain . This is a valid use-case for a forced cast: 

Note how a "enhanced for statement" can be used to iterate over the array elements, instead of a for-loop or a while-statement for the array indices, as in your code. There is also no need to use a or floating point literals when doing an integer remainder calculation.