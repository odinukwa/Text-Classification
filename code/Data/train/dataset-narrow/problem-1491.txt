Even worse - what you just implemented yourself can have unitended side effects if the row object has additional properties with special meaning, which coincidentally collide with (not actually ignored) keys in the passed data. So your logic can be written more compact and less error prone once again: 

This function is simply wrong, for multiple reasons. Let's step through them one by one: The return statement is sometimes unreachable Check your indentation. Currently the return statement is only reachable if . Numbers >=1,000 and <100,000 do exist Your forgot to handle the case when the number doesn't contain the term "hundred". The same issue exists with numbers >= 1,000,000 and <100,000,000. Writing the same code 3x in a row, with the same mistakes You are using different constants, but the logic is mostly identical. The copy & paste is pretty obvious. And it had exactly the effect you would expect: You copied the mistakes as well. This would have been easily solved by extracting the common parts of the logic properly. 0 is a number While you don't say "zero hundred" or "zero thousand", "zero" alone is a valid number and should be supported properly. 

When you say , the parameter should either be actually just a domain (without protocol identifier), or you should just specify the full URI. When in doubt, you shouldn't hardcode . As for the task of status monitoring - testing the database connectivity is certainly not wrong, but keep in mind that far more can go wrong. If you really want to check if the site is working, don't test against a minimal test script, but a real page of that site. Preferably one which does involve as many systems as possible, and check if the output is the expected. Why? As I said before, there are more possible errors than just the database connection. Commonly you can also run into problem with the session storage, failing server side caches (APC, memcached and alike), resource shortages (e.g. PHP going OOM), and various more. You should probably also record response times, not only response status. If your server fails to respond timely, it's a warning sign that you should react to immediately before there is a complete outage. Last, but not least, don't just test a single status page. If you have access to it, rather check the error logs if there were any events in the past interval. Especially during load spikes, not necessarily every request is going to fail. But an accumulation of failures can be easily read from the logs, and should be dealt with. Make sure your application does log warnings and errors properly. 

Ok, yes that is 80686 assembly but you get the point. It's a branch and function return. All, of course, my .02 USD 

First, I applaud your effort - I must confess: this is definitely lacking in the js world. A few things come to mind: 

Get rid of the REST/persistence/dao layers you have Refactor your services to use the Spring Data events So you're would become an handler for the looking like this: 

Here is how I would simply this: First, I would create a reduced method for getting "body" in fixture as such: 

Shorten the code Create a type of factory method for these "fixtures". This may not be appropriate for your case but with no other context that is what I would do 

The idea is to decompose it, apply the filtering and then reconstruct it. part of the problem is this code mixes development paradigms: it uses and and 

And literally the only thing you need to do is implement business specific event code. The caveat here is that, by default, spring is going to produce a data format called - if you have a requirement to certain output formats you can create and register a and register it for and remove the one defined for 

And now, a line is gone and your code flows naturally and doesn't abruptly exit the function. Finally, this thing where you put your 

This is already a disaster waiting to happen. is an array of pointers, and you should only treat it as such. Try to imagine what happens one of the pointers in is actually the ? That's perfectly legit with the original array, and also when using the old C functions such as to sort the array itself (given that the predicate is aware). As a matter of fact, using on the referenced values as you just did isn't even semantically the same as applying original straight to the array. You are copying around values while the array remains unchanged, whereby would have resorted the array while keeping the values constant. 

Performing calculations directly on input events goes against the fundamental principle of the react framework. You should have stored in the state instead, and only perform the actual calculation during the method. Is goes without saying that updating the DOM inside this callback is completely off limits. 

I assume your variable was actually supposed to indicate the fill level of the original inventory tracking mechanism. Please try to name it properly the next time. There is also a second problem with , you made it even though any external modification to this variable would break the integrity of your implementation. 

Yes, or at least mostly "yes". You still have to distinguish whether a method or property should be private by design, or if you are just not using it publicly yet. In the latter case you may ignore the warning, but in the first case, IntelliJ is most likely right. Simple rule: High inner, low outer connectivity. Your classes and packages should only expose the bare minimum to the outside, and keep the implementation specific details hidden. 

In general, any math on doubles is slower than on integers. In addition, you have repeated downcasting from double to int which also incurs a hit. You know your decimal value is up to 10 digits -- just a smidge too many digits to guarantee you can move the decimal and represent it as an int, but you can represent it as a long which is just as good because java and modern hardware architectures are 64 bits. So, any math on them will be really fast. Why not convert the decimal to a long 

It's a lot to explain here, but in a nutshell, I would simplify all of this using spring-data-rest and do the following 

You don't need to explicitly call or any such non-sense. When it exists the event handler function(s) it will save for you You would stay the same but your would become a spring CrudRespository - the implementation is trivial. You can actually look here for an example. With this, you can: 

I don't know enough about android but in Swing, for example, a combo box took, in it's constructor an 

by shifting the digits left, performing your digit selection and bucket sorting, then outputting them back in decimal form? Like, take your random set and first convert all of them. I would expect better overall execution time. 

If by "finished" you mean the executor is ready to be destroyed? That is already the case. Otherwise if you just mean to wait until the pool runs empty? Well, you do have in there. All you really need now, is a second condition variable: 

As for your implementation, you don't need a linked list. In fact, you don't need to store the input nor the output sequence at all, at least not for the algorithm itself. Take a look at the problem carefully again, and try to think about how you can rephrase the operations, when do you need to consume input, and what the earliest point is, at which you can create output. Last but not least, how long do you even need to store each specific piece of information. The first observation: Whenever an operation has finished, the value at is no longer mutated, and no further insertions or deletions occur prior to . The second observation: During an operation at , no value other than has an effect on that operation. At most is either removed or added in. The third observation: As all numbers are guaranteed to be natural numbers, even must hold. Which means that in any case, is always output in the same operation as which it is mutated in. 

I must assume the world state, respectively the list of updates is not buffered, so this reads from the live game state? Writing out all changes to the game state to a transaction log (with all dangling pointers resolved, implemented as a list with a single producer and multiple non-consuming iterators), and then walking the transaction log for each active connection asynchronously removes this load from the main loop as well. There is no good reason why this should be allowed to stall the main loop. 

I would also suggest that you might be able to make use of Java 8 streams to improve your performance on large numbers. 

You're using ramda for currying and nothing else? Ditch it and implement your own currying; it's not hard. Since usability is of a concern to you then making this an actual nodejs stream would be hot and also not difficult. Integrating it with iterators/generators would be handy A more natural usage would be 

People generally took this to mean a String[] as that is what they saw in the dropdown. But ask yourself: Why Object[] then? Assume we transpos your case to Swing for a moment. You could pass in your Object[] into the constructor and override the toString() in your enums to display something useful as that is what would show up. Then when the selection is made you receive the callback telling you what it was (as an Object). But you know it's your enum. So, you downcast it and blindly call the 'attempt' method on it. If you have something similar in your arsenal, consider it. What you have here, actually, is an example of the Command Pattern 

Your variable names mean zilch to me. You HAVE to give them a better name. Also, create them up in groups of 2. This code here is also problematic.