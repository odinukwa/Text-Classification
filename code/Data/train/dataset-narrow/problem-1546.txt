The utf8_german2_ci collation is only available in MySQL 5.6 or higher. Previous versions of MySQL do not contain it. 

You need to include Google's SPF record in your own domain's SPF record, to indicate that Google's mail servers are valid senders for your domain. For instance: 

Also redirect the output somewhere. will simply display the entire file without pausing and then exit if standard output is not a terminal. For example: 

If you're connecting directly to the server via SMTP then you should use its hostname (or localhost) and port 587 to send mail. 

This warning is silly, and borders on absurd. You can quote me on that. The CVEs given have absolutely no relevance to the situation the warning describes, and what it indicates most to me is the strong possibility that the vendor is incompetent. You can quote me on that, too. Anyway, the "problem" is that your nginx configuration explicitly adds an apparently unnecessary header which gives a tiny (and almost worthless, unless you're debugging the server) amount of information about your reverse proxy, fastcgi, or caching configuration. If you search your nginx configs, you will eventually find it: 

You've specified two s in your block. When one fails, you get the error you are seeing in the logs, and then nginx tries the other one. Since this apparently connects successfully, you are not seeing user-visible errors such as 502 or 504. I would guess that you converted your PHP-FPM setup from TCP connections to UNIX domain sockets, and forgot to remove the old line. If the errors bother you, then feel free to do so. 

In Puppet Enterprise the puppetmaster should be listening on a dual stack IPv6/IPv4 socket by default. Though PE has some other IPv6-related brokenness (my site) you'll have to work around. In open source Puppet, such as you may have obtained via EPEL, you need to set the explicitly in the section of : 

In this way you can pull out anything that is repeated among your blocks, and include it wherever you need to do so. 

You can use kickstart's ability to include files to accomplish this. Use your section to write a file containing the packages you want, and then include the file in the section. For example: 

You installed the package from EL6. You need to replace this with the one for EL7. Since you already have the EPEL repo installed, it should be sufficient to do: 

You don't need to bundle dependencies. If the end user doesn't have Internet access, that's their problem. Such places have a variety of methods for dealing with this, such as using the installation media to install and update packages, maintaining a local mirror of the distro, etc. 

You can't necessary believe anything in the headers, except the one that corresponds to the mail server that directly spoke to your mail server. These are trivial to fake. However, the one added by your own server is certainly real enough. Reading this, I would believe that the valid Received: header corresponding to receipt by your mail server is this one: 

Check the permissions of the root user's home directory, . An example of working permissions from a live server: 

Congratulations, you've managed to use nearly all of your swap space. The first obvious problem here is that you went very deep into swap. This is probably what's causing the system to thrash so hard (lots of time spent in system, I/O wait and software interrupts). First thing to do is to reduce the number of Apache processes that are running. You don't need that many for a small site, and it's just going to throw you deep into swap and kill your performance...which is what already happened. I would recommend you start very small and increase when it becomes necessary. An example: 

I see that you are located in Iran. Due to US law, companies in the US are prohibited from doing business with Iran, and sometimes this gets enforced rather aggressively (for instance, simply downloading free software from a web site might be blocked). If your VPS is also in Iran, this might be the cause of the issue. To find out whether this is an issue, try connecting to a mail server in a country which is more friendly to Iran, such as Russia: 

In addition to ClamAV, consider using Maldet for additional malware detection. According to the docs, it has the ability to integrate with ClamAV, though I haven't personally set this up. 

Use in your to get the actual host that the client sent. You can also use that variable in directives to split your logs by hostname. 

CPU affinity masks are ignored inside OpenVZ containers. You will not be able to get this to "work". 

You tried to connect directly to an IP address, rather than a hostname. So there wouldn't be any point to SNI, as you didn't provide a name. You're meant to use the hostname. For instance: 

Contact the provider who assigned the IP address to you. Unless they have delegated reverse DNS to you, then they will have to set it for you. 

While I still don't know exactly why this happened (and would welcome explanations!) it seems to be fixed now. 

The security downside is that now your user has no password, and anybody can log in to it without a password (or a key)! To resolve the problem, the account should not be locked, but should have a password, even if nobody ever uses the password. Set a random password for the account, and make sure the ssh keys are working correctly. 

You don't appear to have enough PHP worker processes for the traffic you're receiving. The obvious solutions are: 

The list of names that nginx serves is stored in a hash table for fast lookup. As you increase the number of entries, you have to increase the size of the hash table and/or the number of hash buckets in the table. Given the nature of your setup, I can't think of any way for you to easily reduce the number of names you're storing in the table. I will suggest, though, that you not "restart" nginx, but rather simply have it reload its configuration. For instance: 

Note that only NetworkManager pays attention to this setting, so if you've disabled NetworkManager and are using the old network script, it will be ignored. You can also make the equivalent setting in the NetworkManager GUI. 

Because the partition on the new server will be slightly smaller than the one on the old server, you'll receive a spurious message at the end of this. However, since you shrank the filesystem at step 1, this doesn't matter. Resize the filesystem on the new server to the size of the partition. 

This address specifies what IP address on that server which MySQL listens to and receives connections. It should either remain unset, to listen on all interfaces, or set to the IP address of the server it's running on. 

The values you have selected for Primary WAN downstream and upstream bandwidth are just about exactly the speeds you are getting with the speed tests. These should instead be set to approximately your actual bandwidth. 

SELinux is denying you access to the file, since you moved instead of copied it from somewhere else on the filesystem into its final location. Thus it kept its original security context, which didn't allow Apache to access it. To resolve the issue, relabel the file (and probably all the rest of your files). For example: 

Assuming of course that you're using an SELinux-enabled Docker (RHEL/CentOS 7 and Fedora) then you shouldn't need to do anything aside from make sure that SELinux is enabled and enforcing on the host machine. 

If that isn't defined somewhere, then all requests will be denied long before it ever gets to your .htaccess file. 

Amazon replaced the PHP 5.3.20 package with a newer point release (for security fixes, etc.). Just update to it instead: 

ELB doesn't seem to have any option to do this. You're almost certainly going to have to aggregate your logs yourself. 

This isn't likely to be causing a crash, though as noted the performance of TCP connections may suffer slightly. Red Hat backported a fix into its kernel for RHEL 7.4, but Debian probably has not done so. And besides, as Red Hat also says: 

No, and it's not possible with any other monitoring system I'm aware of either. They simply download a URL and check it for specific headers or content. They do not support JavaScript. This is one of the many down sides of building a single page app purely in JavaScript with something like AngularJS. It's also the same reason why your page doesn't rank very well or show the results you want in Google. There are various ways of dealing with this in your application, all of which involve rendering the content server-side. You'll want to pick such a method and implement it. (Of course this doesn't take care of the users who disable JavaScript, an ever-growing number post-Snowden, and the only thing you can do there is throw out everything you've written and try again.) 

Yes, this is true. Some NetworkManager frontends will silently fail if presented with an unknown or self-signed certificate (such as the ones usually used with FreeRADIUS). Distributing the certificate to affected clients is probably your best bet. 

As for a 'security audit', there really isn't enough info here to give you anything meaningful. Just double check your security group. 

"Client denied by server configuration" means that the request was blocked by a Require directive (or in older versions of Apache, the Allow/Deny directives), by a rewrite rule, or by some other Apache module. In particular it means the request was never passed on to an external handler, so the exploit could not have a chance to run. The client was just immediately served a 403 Forbidden error. 

That's because it's generated by the system at installation time, and later managed by the sysadmin (that is hopefully you) or NetworkManager. 

It is also subject to the compression scheme in section 4.1.4, so in a typical DNS response you're most likely to see the full name in the question section, and a pointer to it in the answer section. The part you explicitly point out in your question is one of these compressed values from section 4.1.4. The high two bits are both set to 1, and the remainder of the value points to the byte in the response which is referred to. In this case byte 12 (0x00c), which appears to be "www.the_nacketgeek.com" (which was the QNAME in the question section). 

You need to specify the absolute path to the document you want to serve. Otherwise it is treated as a path relative to the URL that was originally requested. 

IPv6 support is available as of V5R2. If you can update, that might be an easy solution. Another option is to place the beast behind a NAT64/DNS64 gateway. You may need a different device, as the last time I looked, NAT64 was not well supported on OpenWrt. 

Yes, this should work fine. The RAID configuration is stored on the card and on the disks themselves, and is not dependent on the motherboard. If you don't reconnect the drives in the same order, then you might have to reimport the array, but that's pretty trivial. The most probable way to lose data in this scenario is by dropping all the hard drives on the floor. 

Use the CF-Connecting-IP header which is set by CloudFlare in your nginx real_ip configuration. For example: 

410 Gone is the canonical error to return for content which no longer exists and is known to never be returning. In particular, it also tells search engines this, so that they can lower the ranking of, or delist, such URLs. One additional thing you can do is to provide an for it, to explain to people who visit the site what is going on. Without it, all they will see is an uninformative "410 Gone". For instance: 

If the browser implements RFC 6265, which any modern browser should be doing at this point, then a cookie set for will have the leading dot ignored (section 5.2.3), and the cookie will then be sent to the naked domain and to all subdomains. Don't rely on this behavior if you have significant traffic from older browsers; this RFC only dates to 2011. 

So you should run one opcode cache, and one only. And, this may surprise you, but you need to get rid of APC, and keep Zend OPcache. The reason is that APC is very, very crashy. It alone may well be the cause of your PHP crashes, as it was for me and many others. Unless your new commerce portal is truly bizarre, it should work fine with Zend OPcache. 

The commands you gave don't work because they are not a part of netfilter nor of the Linux kernel. They are unofficial patches which have never been included in Linux. As for what you can do to fix this, that depends on what it is you are trying to accomplish, but you were far too vague on that point to offer any advice. 

If the value of the header contains spaces, you must surround it in double quotes. Your examples already do this, but your intended new headers do not. For example, you tried: 

You have not configured Postfix to accept mail destined for the domain, but you have configured the MX record to point to this mail server. Postfix has no idea what to do with this mail upon finding that it has received the very mail it is trying to send. To resolve the problem, you need to tell Postfix to accept mail for , for instance by adding it to or . 

If you aren't serving any zones from this DNS server, shut it down and use the DNS servers provided by your hosting provider, or public DNS servers. If you really want to run your own recursive DNS server, use to restrict where it accepts queries from. Uncommenting and removing the wide open option you have now would be a good start.