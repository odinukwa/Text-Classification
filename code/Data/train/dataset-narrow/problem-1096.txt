NO. Absolutely do not use pointers like that. Prefer to use references. This way you don't need to check for . You also express your intent much more clearly so there is no confusion on the ownership of the pointer. 

Keeping const correct is a good habit to get into. You need to apply this to your SieveHelper. Also for simple helper functions like this I like to make them structs 

If you expect your code will ever be used from C++ (which a lot of C code is) then you should not use any identifiers with a double underscore. 

But writing your filter like this (or as a separate function) is always a good idea. It makes your code more readable. This is called self documenting code. If we look at your original code and replace the test with a functor it make it more readable: 

In this case it is probably not what you want. You are making a copy of Enemy that you are using. What you probably want is to pass a reference to the enemy. This way of you damage him you damage the real enemy not a copy. 

OK you are reading a file. But that sorts of limits reuse. Why not read from a stream (then you can pass as the stream but also any other type of stream. 

This is not exception safe. You need to use RAII to make sure you can never leak resources even in the presence of pointers. 

With this code your most significant bit is at location 0. This gives you no room to expand the number. Put the least significant bit at 0 and the more significant bits at higher locations. This will make it easier to do the standard maths operations in the long run. This looks like a switch: 

If there is no usage I can not contrive of a situation where this would happen. As the must be constructed before the because you add add during the construction. Also I would argue that should be everything automatic not static. 

As Jeff points out a new string is created every time you do += on the string. And thus correctly explains why the complexity is O(2) The key point is the java.lang.String is not mutable. 

Here simply printing the string. But by changing std::string here I can modify how the output is printed. Thus encapsulating and changing the printing behavior. 

By doing it this way. You force the code to initialize the member with the default constructor. Then you reinitialize it with the assignment operator. Best to just initialize it once. 

WOW that's a lot of code to implement Dijkstra (is my first thought). Maybe you want to use C++? Prefer not to include header files in header files unless you need to. 

Since this is never modified it should be marked . Also since you really only want to build the structure once just mark it that way you only build the structure on the first call. Also there is a convenience function called make_tuple 

But the std containers (including string) provide iterators (and more importantly reverse iterators) 

Now your sort is generalized for any type that supports iterators (a pointer can be used as an iterator into a C-Array). But you can now also sort vector's lists and any other standard container type. Don't Declare variables before you use them 

If we assume that the average size of a number is half this length (so 10 characters). Then the size of the file is: 

Don't know what that gives you. Note: an named r-value reference is treated liked an r-value when passed as a parameter (because it is named). You would still need to call on it to make it bind to the r-value reference function. 

These two basically do exactly the same thing. The difference is that the first one default constructs the object type T into the array. You can re-use the code of the second one to do this; just bind a default(ly) constructed object to the second parameter. 

Next you always copy the objects into the list. That's fine but you should also think about moving objects into the list and emplacing them (building them in place). 

My first comment is its named badly. dynamic_array implies that I can use [] operator on it and get a value out. You have owned RAW pointers in your structure. 

Note: Also reusing the word array to hold the definitions is bad style. Use a new varaible rather than re-use the same structure for multiple things. This is all part of the main section of the code. I would separate this into its own class so that you read the words and definitions all in one go. Assuming we still use the same definition file (but don't replace the space with underscores). 

I am not convinced that calculating and saving all the powered values is going to save time. Also you don't need to save the same result four times. Rather than have and and and have a single array . It is the index into the array that is important. Also don't manually allocate this space with new use a . The question is a memory lookup faster than or slower than doing 4 multiplications (or callling std::pow(x, 4)). That is something you will need to time and find out. 

The problem with your design is that you assume the URL is actually well formed. In my experience (writing web crawlers) we found that greater than 80% of URL's on the web are badly formatted the biggest offender is the first that separates the attributes from the target (this was often a ). Now if you URL is badly formatted like this: 

Like the destructor. I would destroy the members in reverse order (so it behaves like the built in array). Bug 1: Does this loop terminate 

Should I call delete on this? Yes if it is a file. No if it is . So not a good solution. Also std::cin is not a file stream so casting it is going to do nasty things. You should never cast things (it means you have something wrong with your design (or you are working at very low level (which most people should not be doing))). But they are both . So you could do this. 

Why do you need a getter? When you see a class that has a bunch of getters. That get information from the class do some operation then put a value back into the class it is usally better to put that functionality into the class (as a method). In your case you only have a getter for printing. So it would be better to have a printing function. 

Also smart pointers are very hard to get perfectly correct. The standard ones took years and thousands of people looking at them to get correct. So It is usually preferable to use one of the standard smart pointers rather than a home grown one (especially one that is not being reviewed). So who owns this pointer? 

Vector is a relatively common name (as is vector 2/3 etc). So you may need to make your include guards a bit more unique. I always put my stuff into my own namespace (which happens to match a domain I own to make things unique). I then include the namespace as part of the include guard. Alternatively you can generate a GUID that will also make sure it is unique. 

Protected does not really give you much. Stroustrup even indicated that he now thinks this was a mistake. To access it all I need to do is inherit from your class. If I really want I can then expose it publicly for others. Thus it really provides no protection. 

Note: The is not used with as you destroy the internal content as part of the move operation. You don't want to delete in display(). Also the display can be marked const as it should not change the state of the object. 

Pointers have no ownership semantics associated with them. Ownership is the concept of who is responsible for deleting a pointer (releasing a resource). If you have a pointer you can't tell (without reading the code/documentation) who is responsible for freeing it (or how to free it or if it is even freeable). In the above interface I can quite easily break the program by doing: 

It also shows more clearly you are using non idiomatic C++ (the -1). Ranges in C++ are expressed in terms . ie. is one past the end of the container. This is done everywhere in C++ code; breaking from this idiom is going to cause you a lot of confusion with other C++ developers. Compilers Job Don't do work the compiler can do for you: 

Either you have a (which is bad). Or you have included the header file for () (which is icky but OK) or you have included the ) (yay) and are getting lucky (as it is implementation dependent if this is in the global namespace for C++ (Note: it is always in the namespace)). RVO and NRVO and move semantics. 

Putting the literal into your code is very readable and people know what it means. The macro may seem self explanatory but I would go look it up. The function assumes the list is NULL terminated. 

You don't do memory management correctly anywhere There is already heap functionality in the standard library. There is also a priority_queue that is based on this heap functionality. Dijkstra usually has a start and an end (not just a start). Is Dijkstra() really a method on the graph? I would have made this a standalone function. Your vertical spacing is very dense it makes it hard to read. 

What happens if I type 'fred<enter>'? Personally I have forgotten if the variable is even changed (its in the standard somewhere). But the stream has its bit set. This means any further attempt to read from the stream will result in nothing happening so you can't even do it in a loop. 

I am sure if you play around with this you should be able to get it working. Sorry I can not be more exact but that would require using the same product as you. 

First you have it the wrong way around. You should not use the mutating version to supply data to the non-mutating function: 

Another potential leak. If realloc() fails then the original buffer is not affected. So you will need to release it if you return NULL. 

You are going to break somebody else code by putting this in the header file. I don't like you using this in a source file (unless you scope it very closely). But putting this in a header file is a define no-no. If I include your header file in my source file you can potentially cause breaking changes in my code that are nearly undetectable. As a result you will find most project will refuse to use your code because of the potential danger to their code base. If you don't mind messing your own code up (obviously your don't) put it inside your own namespace so at least it does not affect my code. Parameters Use them correctly. 

It is also an anti-pattern (in all languages). The problem is that is not doing what you think. When you read a file it stays good until AFTER you read past the end of file. The trouble the last successful read will read UP-TO the end of file (but not past it). So when you have read the last line of the file (ie there is no data left to read) still returns because you have not read past the end of the file. This means you enter the loop and try and read a name (this will fail) and set to and thus to but you still increment . To fix this you should always test that the read operation worked. 

Its a good habit to use braces on all nested code blocks. There are some corner cases where you may accidentally modify the code and a subsequent statement is not inside the else branch (and it is hard to spot (say inside a macro). So for maintainability please get into the habit of using 

Please split variables up 1 per line. Yes the new syntax allows {} for list initialization. But these are not lists so it seems confusing to me (this one is more personal bias so feel free to ignore). 

Technically you can still use the iterators returned to modify the object. So these should not really callable from a const version of the object. From the const version of and end you should return a const version of the iterator that allows you to read the container but not write to it. While we are on iterators you should also add and that always return const iterators. 

QueInfo: Data used and manipulate by each thread. Both the main thread and the owning thread access this object so all access needs to controlled via locks. 

Also I don't like the two line call to realloc(). I would declare and do the assignment in a single line: 

class matrix The class matrix does not own the pointer passed in the constructor. So you should do something to make that clear in the interface so that people don't accidentally pass you dynamically allocated memory. There is nothing in the standard so I would create a class that represents a raw pointer. Its not 

I always think getters are wrong. They break encapsulation. Looking forward in your code you use them for two reasons. 1) Printing. 2) To test if the account has enough funds for withdraw. In both cases you should add explicit methods. 

BUT: The move constructor should also be marked (except that your move constructor will not throw). This does not do anything for the class itself. But it allows for optimizations in the standard library if you put your class in a container. Example: When resizing a it will use a move constructor if it exists otherwise it has to fall back to the copy constructor to provide that strong exception guarantee. Assignment This is wrong. I missed the copy caused by pass by value in the parameter 

There is no indication that anything was removed from the list. There is also the possibility that might be multiple objects in the list that match the input requirements. So even if you remove one item this does not mean there does not exist an item with the same properties. Here you have two options: 1) Add another bool parameter (that defaults to false) to indicate that all matching items should be removed from the list. 2) Return a boolean that indicates if anything was removed from the list (this allows the user to manually loop until all matching items have been removed if required). In method again I would have used a for(;;) loop. You can also do one small optimization by not calling Call() on the actual head node (as you using sentinal that does nothing no point it calling the sentinal). 

Looks wierd to me. But this is a style thing. See you local coding conventions for rules. If you had put it on the front I would have been a lot more complainey about it. System is hard to use cross platform. Especially when you do system("pause"). 

This may be what you want but usually I would expect to see you return a reference to the object in the stack. That way a user can potentially modify the value. If they want to make a copy they can also do that by assigning it to an object (but it is not required). As a result you also usually want to versions of this function. A normal one and a const one. 

When we get a connection on the port(16382/16383) a new object of type is created to handle the request (more on these objects in an upcoming post). Of course nothing is ever that simple and you may want to parameterise your handler object. So the call can take a second parameter that is passed as a reference to the constructor of the handler type. An obvious example is the HTTP Protocol and how servers like handle it. The same type of effect for NisseServer can be achieved like this. 

Nobody expects people to do this. Its just confusing. Move the code in the destructor into another method and call that. Broken link If sombody inserts a NULL pointer into your smart pointer you are asking for trouble when they de-reference it. 

I don't think you have a succeeded. I think this code just makes the code more obscure by hiding the actions in a separate file. 

Also and are absolutely awful names for variables. Make them readable. Try and search for all occurences of the variable 'i' in the following code. You can scope the loop variable to the for statement.