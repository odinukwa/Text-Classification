Ports are labeled "10/100/1000" to show their compatibility - a port like this will link with another port at the highest mutual speed. This is a good way to upgrade your network as you go. Many started with 100 Mbit/s, or even 10 Mbit/s, and by replacing devices over time, these begin to link at higher speeds. However, the PHY standards are only single speed: 10BASE-T, 100BASE-TX, 1000BASE-T, 10GBASE-SR, ... There's no mandatory compatibility for a 100BASE-TX port to also support 10BASE-T, but it is optional and extremely common. So, a port with multiple speeds is compatible with several different PHYs. Perfect downward compatibility often ends with 10G ports which very commonly only also support 1G and no slower speed. 

Port numbers are used as subaddresses on a host. That way, multiple services can run on a single host and numerous connections can be made at the same time using the same transport protocol, e.g. HTTP over TCP port 80, FTP over TCP port 21, SMTP over port TCP port 25, ... With source NAT - translating many local IP addresses to a single public IP address (or small number) - the NAT router often uses a different outgoing port than the local client did so there are no resource collisions. 

Rows 78-80 seem to be the frames of a single, fragmented packet (note the dots). Judging from the size, there's a problem with the MTU, just a few hundred bytes is unusual. The HTTP payload comes wrapped in a TCP segment which in turn comes wrapped in an IP packet which in turn can come fragmented in several frames. You only display the highest layer of each frame, so the first fragments display as just TCP and with the last fragment is displayed as HTTP. 

10BASE-T or 100BASE-TX always use one pair for each direction, two pairs in total. A hub is a simple repeater, working on the physical bitstream. Since it receives and retransmits at the same time there can be no other communication (within the collision domain). Full-duplex communication is not possible - this is a limitation of the repeater, not the cable. 10BASE-T and 100BASE-TX are full-duplex capable (in contrast to inherently half-duplex PHYs like 10BASE5 or 10BASE2) but full duplex requires a switch or a direct NIC-to-NIC link. 

You need a wireless access point capable of client mode. It can connect to your existing wi-fi network and bridge between it and the wired Ethernet ports. 

A router is a layer 3 device, it only cares about the IP packet. TCP is a layer 4 protocol and as such it is "invisible" to a router. TCP sequence checking is up to the local IP stack. What a firewall decides to do is entirely up to the firewall and the stateful checks it performs. Reasonably, it shouldn't drop out-of-sequence TCP packets but simply forward them. However, if multiple ISNs are received on a socket, the firewall should detect and filter this. 

Essentially, a packet in flight is wrapped in a frame addressed to the next router (hop). Only in the final segment is the frame addressed to the destination node. 

All modern interfaces use DMA transfers. The IN/OUT opcodes are ancient, mostly used in the 16-bit era. Those hardware registers aka I/O ports have nothing to do with network ports as in hardware interfaces (ie. where you plug a cable into). You might also be referring to TCP or UDP ports which are yet something different. These are subaddresses of a host that services are bound to (like TCP 80 for a HTTP web server or TCP 25 for an STMP mail server). 

Usually, the server doesn't send a random port but a free one from a defined (by installation) range/pool - for the client this looks random. This port needs to be forwarded at the firewall which requires defining a range. Unfortunately, FTP is ancient. I guess, the ancient servers couldn't distinguish multiple clients' data sessions except by port. Generally, it's better to move on to more up-to-date protocols where everything is neatly packetized within a single socket session. 

That depends on the exact protocol. Each VC protocol has some mechanism for establishing a connection that results in either all parties learning the global VCI or each partner pair establishing the VCI used on their link. 

I've omitted some details for simplicity (forwarding decisions, IP senders ARPing the next hop's MAC address, different line codes/PHYs, ...). 

Linux traceroute uses UDP by default, so - depending on the routing policies along the path - different routes may be chosen for traceroute and ping (ICMP echo request). Even with the same protocol, different routes may be probed due to traffic or other parameters. Sometimes you can see multiple routes being used within the same traceroute call. 

This is not possible with M/R/STP. RSTP, MSTP, or RPVST reconverge very quickly but not instantly. Reconverge time is minimal when the root bridge doesn't change (which is probably the case in you scenario). When the root bridge changes it should only change once, set your priorities accordingly - connect the new root with default priority and once it's integrated, set the priority lower than the old root. For an instant L2 replacement you'd need shortest path bridging, TRILL or similar (and probably some fiddling). Another approach is to use routing over redundant links, these can be rerouted without delay. 

The TCP/IP or DoD model is a somewhat simplified approach that centralizes on the network layer. Lower layers are just the "link layer" which IP doesn't care much about. The OSI model is an attempt to structure everything into layers, from the cable to the application and transported data. While it is/was used in some areas, it's sometimes simply not practical to adhere to it completely. In reality, the OSI model is a good approach to the lower levels but beyond layer 4 it often starts to become unpratical or somewhat blurry. But even the OSI model doesn't catch all subtleties: the physical layer and the data link layer are often divided into several sublayers in order to structure development in several fields. E.g. in Ethernet, many physical layers for the same speed use the very same physical coding sublayer (PCS) and just differ in the physical medium attachment (PMA) and the physical medium dependent (PMD) sublayers. Why do we go to these lengths you ask? Well, the beauty of it lies in the combinations that you can use right out of the box. You can connect your smartphone through wifi, bridge (L2) that connection to Ethernet on the access point, route it (L3) onto DSL (L1 & L2) to your ISP, we-don't-really-know-what-happens-there, eventually the same data comes out on the other end of the world where it turns out to be a photo you've sent (L7+). We have no idea what media were used on the way (fiber, copper, radio) and don't even really care - and this is the neat trick. 

using Q-in-Q tagging you can use inner and outer tags where the inner tags have no interaction with the outer tags - requires expensive/current switches) on a trunk interface, you can translate the untagged VLAN from one switch to the other - this might preclude the use of MVRP/GVRP or MSTP) use a port loop on a switch that has one VLAN ID untagged on the one port and the other ID untagged on the other port - precludes STP and works on some switches while it doesn't on others, depending on the inner workings of the VLAN-MAC table 

Make sure you've got your spanning tree set up, so that a central switch is the root. If you don't configure spanning tree priority, a random switch becomes root (the one with the lowest MAC address) - if that's a phone switch or any other 'peripheral' switch you're bound to have unexpected reconvergences. We've set our core switch to priority 4 (16384) and the other central switches to 6 (24576). The priority of the edge switches stays at 8 (32768), so they won't ever become root. Additionally, you might want to protect the root ports on the edge switches so that no rogue switch can grab the root. 

The network address and the broadcast address are different things. The network address is used to refer to the subnet as a whole e.g. in a routing table. The broadcast address is used to address a datagram to all hosts within the subnet. Sometimes it's possible to use the all-zero address for a host as well. This isn't well supported though and should be avoided. 

A "router" always forwards a packet when it can, ie. has a routing entry to apply. It doesn't care about the L4 protocol used nor its state. It depends on what your understanding of "router" is. A simple router just forwards but with firewall rules, NAT and other functions applied, forwarding may or may not occur. 

Frequency-division multiplexing uses multiple frequencies/channels/bands to use a single medium for multiple messages simultaneously. Usually, the transmission is modulated onto a carrier frequency - think of radio broadcasting with many stations. For optical transmissions, wavelength-division multiplexing means the same thing. 

because matches either source or destination address. That way you can simply match both directions. 

A router usually doesn't use just a default gateway. It has multiple interfaces, representing multiple, local routes. Additionally, it often 'knows' about remote routes. These can be manually set up using static routes or learned from another router through a routing protocol such as OSPF. If the routers in your example would exchange routes in this way, each would learn the remote networks that the others see. The default gateway on a router is only used for the Internet or, in a larger network, for the next higher level router. 

It's unlikely your ISP can/will do something for you. They can't simply ramp up the power, usually they're already running the maximum power allowed (depending on link quality). With wireless, your best option is to install a directional antenna, increasing both receiver gain and effective transmitter power. Make sure you get an antenna that's most effective in the band you're using. If the scenario permits a good antenna will solve the problem. Alternatively, you can look out for other connection options. Maybe LTE isn't the only one. 

Assuming that the Huawei ONT is the only WAN gateway. You'll need a router to connect both subnets. If you can't/don't want to change either the ONT's or the Cisco's config/address you'll need another router. You could use the Windows server with routing activated and an address from each subnet on the NIC. However, with a router in between, the ONT would require a route back to the 192.168.100.0/24 subnet. You could also reduce the subnet mask to /16 so everything becomes local but then again, you'd need to do that on both the Cisco and the Huawei as well... Zero config change could only be done with source NATting from 192.168.100.0/24 to 192.168.1.0/24 and that would be really ugly. 

Well, you could at least supernet 192.168.56.0/24, ..57.0/24, ..58.0/24, ..59.0/24 into 192.168.56.0/22. 192.168.50.0/24 through 192.168.53.0/24 would go into 192.168.48/21 (including some collateral damage). 192.168.90.0/24 through 192.168.92.0/24 could go into 192.168.88.0/21 (again, somewhat more). If you don't require default routes for the Internet, you could use those as shortcuts: R1: 192.168.52.0/24 -> 192.168.51.2; default -> 192.168.50.2 R2: equivalent R3: two routes to left subnets, default -> 192.168.90.2 and so on. Alternatively, you could at least aggregate consecutive even/odd subnets into a single route. To your question: if you don't mind non-optimal routes you could actually have the edge routers route in a circle by default gateway and only let R3-R6 use educated routes. 

Even the non-G, Fast Ethernet models feature SFP ports at gigabit speed. Those require running a fiber in between or alternatively, using 1000BASE-T transceivers that only need Cat-5e cabling - I believe GLC-T would fit. If you're already on gigabit, the only alternatives are either aggregating multiple ports as Ron's described or replacing the switches with faster models. 

uses fake UDP requests with short TTL and interprets returning ICMP messages to find out the routing hops, three attempts per hop. finds out the routing hops and then pings (ICMP echo request) each of them 100 times (default) to help locate packet dropping hops. Depending on the hops, both outputs can look vastly different. The reality can be something else still.