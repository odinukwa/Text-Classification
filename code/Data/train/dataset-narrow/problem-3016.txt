That doesn't take any inputs or return anything. I guess, what I'm saying is - I think the two are so different, I'm not really sure there's a ton to be gained by exploring the contrast. A function in computer science is a module of code that can be called, perhaps with inputs, and does some stuff, maybe returning something. A function in math is a very strictly defined thing: you put something in, and you get only one thing out. 

Don't talk about them until far, far into the course. By the time I found out about GOTOs (inadvertently, reading some algorithm in a paper) I was already very used to loops, and I was able to see an easy way to rewrite that part of the algorithm using a list comprehension (Python). In the same way, don't introduce GOTOs in the course until your students are well able to use other techniques that can be used to rewrite code with GOTOs. Maybe spend some time rewriting code using GOTOs so they get used to that and the fact that there's nearly always a better way to do it. Another option is to teach mainly using a language like Python, which doesn't have a built-in GOTO function. 

This might be an interesting way to do it, but here goes. Give your students a blank sheet of paper. Have them write out "3". Then have them write out $2^{10^{1000}}$. Most will probably stare at you blankly. A few clever/sassy ones will just write out the exponential notation. Tell them that just as they write out numbers a little differently depending on size, the computer stores numbers a little differently depending on type. If a number has a decimal point, it treats it differently from a number like 1 or 2, and it treats that differently from a really large number and it treats all of these differently from something like a string. This is the whole reason that you have to convert between types when you ask for a number as in python and then get a when you try to add it - instead you must add or . It's the computer's way of making life easier for itself, just like we make lives easier for ourselves using exponential notation. Also, by now hopefully they've realized that the world of math doesn't directly translate to some of its uses. Math is a very abstract thing, though it describes many things remarkably well. Pure math is very different from most math they've seen, and I think they understand the difference, for the same reason they understand the difference between and $x = x^2$. It's a different context, so it has a different meaning. 

In an introductory course, start with the practical stuff, and build up or down as needed. All the theory in the world will do you no good if you cannot apply it, and while bits, bytes, and logic gates are all very well and good, it is hard to see the forest for the trees that far down. History can also help provide context and motivation, so weave that in with the practical stuff ('this method was discovered/invented by so-and-so') but remember, again, the practical stuff is your meat and potatoes. 

Foreach loops are the main type of loop in Python. Python is the awesomest. Therefore foreach loops are important. 

My second thought is pointed exercises. Have them access variables in a dictionary in a myriad of exercises. After quite a few exercises have them access a part of a string. They'll probably unthinkingly do brackets - and it won't break. Be nearby so you can point this out. Do more exercises with different variable types and point out the connection each time. Do this with other things besides the brackets. Ask questions like, "Where is this syntax familiar from?" or "Have you seen this technique before?" or "Does this look familiar?". Eventually, they'll catch on. Have them do something completely different (like nesting loops, etc) and watch while it doesn't break. Encourage them to experiment. 

One day a week is for learning and sharing, another day is for programming. Advantage - 50-50 split, people would learn a lot. Disadvantage: kind of annoying for people who want to consistently work on a project. Have the club start with a couple of days coming up with project ideas and forming groups to work on it, work on the projects for about a month or a set length of time, and then spend a couple of days sharing. Advantage - lots of time programming, people get to share their work. Disadvantage - not really a space for people talking about non-project related things. A mix of the above - #2, but when someone wants to talk about something really cool they've learned/discovered, some period of time is set up where everyone can learn about it. 

A kind of fun one might be to have a little kit of electronic components handy - transistors, LEDs, a couple of batteries, as fits the size of your class. You can build logic gates and then use these to build, say a half-adder, or whatever, and start abstracting from there, to introduce computer architecture, or you can use it to solve some sort of simple problem, or introduce truth tables, or whatever. It's also a fairly compact thing to store for those unfortunate occasions. 

Shown, complete with the explain xkcd article can provide a nice, humorous introduction that will get them to start paying to attention. 

I (barely) remember when the first iPhone came out. I remember playing this skeeball app on it, and really enjoying it. I thought it was so cool, and fast, and I thought the phone was sleek and small. Fast foward - I use that iPhone as an alarm clock (it can't do much else - we took it off our "plan" or whatever it's called a while ago). I've played the Skeeball game since then. It's slow as all get out, and it looks much thicker and uglier than the shiny new smartphones common among teens now. I remember using an older Mac computer that was my mom's when I was younger. Now I have a chromebook that's pretty fast, and dual boots Linux and Chromium. I have an arduino the size of your hand that can run LEDs and motors and whatever else you want it to do. You can buy a raspberry pi for \$30 (of course, you have to hook it up to a monitor, keyboard, and mouse, but still). The chromebook we got on sale for $100. I remember looking up prices for old computers and being shocked. Even in your student's lifetimes (they're older than I am!) they'll have some memory of computers getting faster, cheaper, nicer, better. Tell them to extrapolate that back a couple of years. And then a couple of years more. Show them where they fell on a graph of Moore's Law - and ask them to imagine the start of it.