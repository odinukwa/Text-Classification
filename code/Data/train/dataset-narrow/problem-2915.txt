I am trying to make a 2D game engine using OpenGL ES 2.0 (iOS for now). I've written Application layer in Objective C and a separate self contained RendererGLES20 in C++. No GL specific call is made outside the renderer. It is working perfectly. But I have some design issues when using shaders. Each shader has its own unique attributes and uniforms that need to be set just before the main draw call (glDrawArrays in this case). For instance, in order to draw some geometry I would do: 

The performance drops to 47 FPS only due to this single change {just by multiplication with ONE vector} (FPS measured using xcode instruments and OpenGL detective). Any ideas what is going on ? Thanks. Edit: I've also tried stripping off per vertex color attribute: 

(Please excuse my C#/XNA style this was copy/pasted and tweaked, shouldn't be to hard to adapt to C++) 

It depends how many you have and how many of those would be in use at any given time. I would break it down as follows: For each "sprite" I would have one sheet, each WxH section is a single frame. If there are only a few states, I'd keep those all in the same image file, and just make a map of 

What I'm wondering is how complete your design documents typically are before beginning the implementation of a project? I'm talking about medium to very small projects with a very small team here where even fully fleshed out the entire document may only be a few dozen pages. Do you start with a rough framework and start fleshing out the details at the same time implementation is starting? Do you completely flesh out every section completely before any implementation is even started? If so, what percentage change have you seen after implementation starts? If you have experience with one of the two scenarios I outlined, I'd love to hear your opinion on what issues going that particular route caused and what obstacles you feel it helped you avoid. 

OnApplicationPause(bool state) is called when the user pauses and unpauses the game, normally by hitting the Pause button found in your game (which you need to implement the functionality for - by setting ). Sometimes it's called when the application is put in (or comes back from) the background too (user hits Home button for example). But this behavior differs on each platform and you cannot safely rely on it. OnApplicationFocus(bool state) is called when the app goes into (or comes from) background, usually because the user hits the Home button, and/or switches to another application. This behavior should be consistent on all the platforms. In order to be safe I believe it's best to implement both functions. 

In general, your copyright notice should be either using your name or the name of your company. If the name of your company happens to include the TLD of your website, so be it. 

Does the code labeled "Game1" occur in the method? If so, the problem looks as though you draw a different question each frame not that you need to draw slower. If you draw the same thing every frame, there should be no flicker; I would adjust the code like this: 

It really depends upon what type (and quantity/size) of data you're talking about. If it is a small bit of data that can be safely kept in memory for the duration of execution, something like a static class would be my recommendation. 

But even after setting content factor it is drawing pretty poor quality polygons with jagged edges as shown in the image below: $URL$ Is there any way to set the resolution to 960x640 instead of the default 480x320 ? Please note that I can not use "someImage@2x.png" because I am generating images at runtime in the render buffer. 2) Second problem I am having is this warning message: 

Thank you for your time. Edit: Problem solved. Set contentScale before allocating render buffer memory, i.e: inside GLView, not AppDelegate. 

It is running at 52 FPS for 700 sprites (a gain of only 5 FPS). So this is not interpolation, seems like the multiplication is extremely expensive. Just this ONE multiplication? 

You must engineer your background just like any other object in your scene. Create a Quad, place it behind all your other GameObjects, orientate it towards the camera and enlarge it to cover the whole view. Then add your background Sprite to the Quad. 

Using this method you can modify your rotation to ignore one or two axis. Or, you could use the same aproach when working with the headings: 

Looks for all GameObjects with the "Enemy" tag. It should find them no matter of their parent. My guess is that your Mobs prefabs do not have the "Enemy" tag applied. 

Sadly there's currently no way to make Unity's keyboard navigation to use instead of . However, EventSystem -> Standalone Input Module exposes an Input Actions per Second variable. The default value is 10 seconds. If you change it to a lower value, like 3, you will slow down considerably the scroll to bottom speed. Because picking a low value for this setting will limit your in-game input, you might want to set different values in your menu and game scenes via code. $URL$ 

The answer depends on your target audience. Do you want people to play your flash game on their Netbook and/or their flash supporting Playbook or Android tablet? If so, then memory usage over and beyond 50 MB is likely going to be an issue. If you only expect your game to be played on tricked out gaming rigs, then taking up 100-400 MB memory is likely not going to be a problem. The issue, may be Flash's ability to address this much memory quickly. I'm not a flash developer so I don't really know, but if your game needs this much memory it probably has a lot of supporting code, which is where, even on "gods-own-machine," you may run into issues. 

Luckily the error message is quite self explanatory. The solution to this problem is to check Convex for all the Mesh Colliders found in the project. Only the Player GameObject should have a Mesh Collider in this project. So check Convex, and make sure that Is Trigger is checked as well. 

Caution: having Colliders without a Rigidbody is never a good idea unless the object in question is static. If an object without a Rigidbody moves, it's Collider will not move with it! 

Unity Documentation: AssetBundle.Unload When unloadAllLoadedObjects is false, compressed file data for assets inside the bundle will be unloaded, but any actual objects already loaded from this bundle will be kept intact. Of course you won't be able to load any more objects from this bundle. When unloadAllLoadedObjects is true, all objects that were loaded from this bundle will be destroyed as well. If there are game objects in your scene referencing those assets, the references to them will become missing. 

Provided that your interface is intuitive and you don't price yourself too high, I don't think its too much at all. On the contrary, I feel that the tower defense genre of games is mature enough even with casual gamers, that they will not be intimidated by these new features. 

Without servicing both goals adding achievements is not worth the effort. As long as you have a nice linear progresson of difficulty for achievements you'll have some that are easy for everyone, the middle ones will be hard for beginners (but they'll keep playing), the hard ones will be super hard for beginners (but they are served by the easy and medium achievements) but they will be difficult for even advanced players, giving them something to work towards. Most big games on Steam appaer to have achievements, and the list of them is public along with a percentage of players who unlocked them. I'd recommend checking out some of them. For example, see Left 4 Dead: only 0.6% of players obtained the least obtained achievement and even the easiest (based on percentage) only at 76% of players unlocked it. If you step back and look at the trend of player percentage unlocking a given achievement, its pretty linear from roughly 0% to 75%. 

Yes, you are stuck with needing a child object for each individual sprite that makes up your characters. It's not as tricky as it sounds though. You can create one generic "Humanoid Character" prefab with child objects like "Body", "Helmet", "Weapon", etc. You can then use this prefab for both PC and NPCs. Layers Pay attention to Sprites layering. Almost certainly you'll want the "Helmet" sprite to be rendered on top of "Body" sprite. There are two levels of ordering: 

My suggestion is to have the whole Character on the same Sorting Layer. You can then use Order in Layer to sort the individual parts which make up the character. 

After upgrading the official Space Shooter Tutorial to Unity 5, collisions stop working. Additionally, the following error is reported: Non-convex MeshColliders with non-kinematic Rigidbodies are no longer supported in Unity 5.0.