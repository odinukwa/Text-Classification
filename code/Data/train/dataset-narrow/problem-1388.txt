You obviously don't do enough encapsulation. I see at least three classes with no behaviour (, and ), your "main" class () contains only static method... it does not seem like good OOP for me (and when we are talking C# we should mostly talk OOP). Let's try to fix it, one thing at a time. 

With exception of that still need improvement, and where you can apply same process, it seems to me that we've done pretty good work here. But I must repeat: with exception of one operation (moving inside instance) all we've done here is a function-based refactoring. As it's already said here, we might be as well programming in C or JS. I would highly recommend you to rethink your approach into more object-oriented one. 

And now, thanks to this, all our code operates on . So we can safely move it to instance method, because all this processing is coupled to single instance of . Let's call this method (of course, all the code inside it does not use , but uses implicit . Now, all that's left of yours is: 

A collection should be plural, and names should be in English. Here we see and example of what I said 

The names 'txtX' and 'txtY' don't say anything about the domain as 'line', or 'length' do. Someone would need to see how are you using that variable to figure out what it is. If you want to make the code more readable, make explanatory variables and helper descriptive methods for example 

Not only did we eliminate the need of a comment but also we increased the readiblity. In my head it goes like "if m_firstMove" (...what was that?) "// first move" (ah if this is the first move) you are making the reader stop and think what was the variable with the weird name used for. but if we read "if isThisTheFirstMove, then play the first move". Easier for the reader an cleaner code, showing intent and maningfull name. You should take a look a the book "Clean code" by Robert Martin. You could improve method names, Take a look at your method and variable names. Another piece of advice that I could give you is this. Consider, 

Make an enum and a new property of the enum type - i.e. Create a new class and encapsulate it - i.e. like the example does with Person and Business. Create a new class in the inheritance tree - i.e. 

And every time you come with a new classification like city vs. country, there are several options including: 

I reviewed your code. I wanted to give you some feedback and share my approach to the problem. Your code relies on some advanced data structures such as Queues and Dictionaries, and I am fond of those things, but in the interest of readability, maintainability, and simplicity, I took a class-based approach, with advanced data structures as required. One of the main principles I follow in object-oriented programing (OOP) is "Let the objects do the work." First let's review the output of your program: 

Which is a LOT clearer and you don't need the comment because the method speaks for itself! The next else, 

If a name needs a comment to explain it, it's a bad name! What does m_move mean? "cpu's move" isn't a good comment. By the way, there should be as little explanatory comments as possible and "cpu's move" does not explain what is the variable meaning. Does it say if it is the CPU turn? or does it say how many moves has the CPU done? No one can tell. 

Regarding the code style I have some observations. This is based on the book "Clean Code" by Uncle bob and my experiences as a software engineer. 

you can sort of guess what is . Is it the position of the text area? why just don't just put and , not perfect (I mean, for sure there should be a better name) but at least it improves a little the readability. In the book "clean code" you can find "A name that makes you go into the code to see that it tries to identify, is a bad name" That's all I would recommend based on the book and experiences I've got as a developer. Happy coding! 

I have also improved the logic that determines if an Account has a credit or debit balance, and to avoid plunging further into rounding madness, it now ignores balances of +/-$0.01. 

The amounts that people owe and the amounts people pay are incorrect. The total of all the transactions is $900, so how can C alone owe $900? D owes 1/4 of the $100 breakfast she participated in, not the full $100, and she winds up netting $900 on the deal (as highlighted). When I first reviewed your code, it was unclear how it was solving the problem. When I ran it, the output showed that it wasn't. The key thing I think you're missing is calculating each participant's liability for each transaction. I see that you are grouping by Payer, but what's missing is calculating the liability per participant. Rather than pinpoint the bugs in your code, I figured that demonstrating my approach would give you some food for thought. I invite you to review my approach. I wanted to solve the problem with classes, and respect their autonomy - i.e. avoid manipulating their data from outside, ask them nicely to do things, etc. For the sake of anyone first encountering this post, this is the 4th iteration of my solution. The first two suffered from my own lack of properly reading the problem. One thing that tripped me up initially was the fact that D paid for a cab for B & C, but did not ride in the cab, so should get all their money back instead of paying 1/3 of the fare. Here's the output: 

If you did that with every awful-to-read if statement, the method would be less than 10 lines and would be easier to read. There is a LOT more to cover, but I would spend my entire night doing it. However, this hopefully gave you a starting point of improving your code readability, please take a look at the book and Happy Coding! 

Note that we won't need a comment to explain the variable because its name does it! One of the advantages of this is that whenever you see the variable you see the complete information. Compare 

When I read the last one, I had to figure out "how" you were doing the thing to know "what" you were doing. Note that I did not write the method but you get the Idea of what is happening. Considering . Is it necessary to know that the initial col is 2? or Should I only know that you are moving to the next line if the line wraps? It reads more like "well written prose" (as Uncle Bob in his book 'CleanCode' says) You can do similar with the block. In the method , I think the correct name for the parameters is and instead of or given that they are not changes but just absolute values. This statement in the update method could be its own method