Unnecessary comments Don't repeat your comments; especially when the original comment is very near. In this part of your code: 

It seems that you are trying to do some comparison here (considering this is in a -loop). However, you are using the assignment operator so this will always evaluate to ) 

Here's a list of everything you need to do to figure who won When I've made TTT programs in the past, I always thought that the best way to determine a winner was with a list/array of all the possible win conditions with a 0-based, linear board. Here's what I mean: 

The functions itself can just use find the length property itself because it is getting the actual array from function parameters. However, I still believe that it was smart idea to check that was less than , which was the of the array rather than just checking if was less than the the array because it is unnecessarily efficient to constantly access the property of an array. Here is what I mean: 

Honestly, this code is so poorly indented that I'm not sure I can even continue the review; I don't want to give any false information based on my interpretation of what I can read of the code. However, I will try to at least point a few more things out. 

If you are trying to skip over the first element of the photos array, why don't you just start at 1? That way, you won't have to constantly do conditional checking, which probably safes speed and efficiency. 

Excuse the poor variable name. See the pattern? The keys are simply the part after in the original array, and the values are the parameter passed into . Now, to create the object/map of elements, we simply need to create a loop that stores these keys and values into a new object/map. Here is what I came up with: 

This can be refactored into an array and a loop. The array would store what is currently these five similarly named variables, and a loop would be to set the array values. Now, I'm not good with PHP, but I think that code would look like this: 

So, if the limit ends up being 10 in this case, you would have called 28 times. A way to speed this up would be to create an array and store all the s in it when you are first incrementing up to the limit. Then, when you are decrementing, simply reference the table for the value. This would reduce those 28 calls down to only 10. In your first loop: 

Right there, one after the other, you are matching a regex to a string. It would be simpler and faster to instead only use the match call: 

I did something a little different in this function than what you did that allowed me to reduce this function to one line. You were checking if the square was equal to it's default value ("[1]", "[3]", etc) and I checked that the square was not X and was not O. Now, let's go back to . Let's re-write it using : def compturn(): 

This review was just mean to point out practices. I had trouble understanding the content of the code (a better documentation probably would've helped). 

I'm not sure how much of a difference this makes in efficiency (if it makes a difference in anything at all), but the part is unnecessary. If the conditional passes, will run and skip over everything else to go back to the top of the loop. If it does not run, it can just call down to and exit the loop. No needed. So the above code snippet will become this: 

Why is this setting separate of the function creation? Just move the function up one level to the line above it and you won't have to name it. It also makes your code cleaner: 

Moar built-ins... MOAR (and a look-up table)! It is great that you are using the built-in method for style sheets here: 

This may not be true; it was a little hard to tell with the snippet. When someone first opens up your webpage, all the pictures are going to be seen for a second, and then they will disappear. To rid of this, set the class to be hidden by default on start-up, and then, instead of looping through and hiding them all, just make the first one visible. 

This is kind of a dirty way to populate an object. It's just like creating a blank array only to populate it's indexes in the line after, like this: 

There are many unit testing frameworks out there. Honestly, I'm not that familiar with jQuery, so my suggestion may not actually be your best bet (although, the jQuery website does make a reference to a unit testing framework: QUnit). A framework I would recommend is Cheerio. My main reason for this is because it allows to easily load HTML into a virtual DOM and perform any normal DOM operations on it. This means you could load some test components, run your sorting code on them, and use Cheerio to read the DOM and make sure they are properly sorted. 

Again, like "tag", "fn" means nothing to the variable; I know that it is a function. The variable name does not have to tell me. You have two options here: 

The user clicks the "play" button in the top right corner. A prompt pops up with a question title in the center of it. This question title is one of the HNQ titles listed on the side. The user then tries to guess which SE site this question is coming from by typing in its name. The user is told whether or not they were correct and they are asked if they want to play again. 

Now that we're done relying on these three pokemon variables to be in the global scope, we can clean up this part of the code, too. We don't need to explicitly store the three pokemon variables anymore with their variable names; those can just go straight into the array. However, when we do that, we can no longer access the pokemon by name so it would be best to create a map/object for this situation: 

Looks to me that is just a 1-based array. It would be easier (and it makes more sense) to use an array, instead of an object. But don't change how you are asking the user for input. You want to translate the user input one number back, so if the user enters "1" for box number 1, just subtract 1 from the integer version of the input and then pass it to . 

Use a boolean state Right now, to determine if you set the element's display to or not, you do a string comparison with the element's current display value. A faster solution would be to have a single boolean variable that tells the state of the element. For example, you could call it this: 

I'm a little confused by this question. Right now in your code, when you recieve a connection, you do handle the recieving and the sending in a separate thread. This is fine, and is a good idea. After you close a connection, there is no connection to slow down. And yes; this is fine. Since your server isn't going to do anything more after it has sent it's response, then there is no point in keeping the connection. It'll just bog your server down in the long-run. 

The single DOM element is returned from . This can make working with the return of this function especially difficult if you don't know what the input is like. An easy fix: 

Are there any types other than "User" and "Computer"? If not, then you should turn this property into a boolean value something like this: 

In the function of the function of the function , you have a parameter to catch the event that is fired when the function is fired. Although, you don't use that event variable any where in that function. 

That's a little gross looking, right? It would look a lot more clean if you just setup the property as soon as the object was created, like this: 

However, this creates funky-looking and difficult to work with URLs. Really, you should aspire to use , but this calls for some server configuration. Read more at the docs. 

I understand that this violates the programming challenge requirements, but this is just as a future tip. I think it would be better practice to accept the array of strings rather than a string with the words separated by a space in it. Your code will be a lot more versatile if the caller can determines what is and what isn't a word themselves, and can use your function however needed for their data set. For example, if the caller has a string like this: 

Your code has really, really poor indentation. Luckily for you, you are using JSFiddle to write and run your JavaScript code. That means that, if you look up at the top of the screen, you can click the button, which will go through and properly indent and space out all of your code. Then, as practice, look at the difference between the ed code and the original code; what has been indented and what stayed the same? Locate patterns so in the future, you could write your code with correct indentation from the start. 

Whoa! Where did that come from? All of a sudden increasing a value that was not previously declared anywhere? That's not good. I have no idea what you are trying to do here, but it looks like you meant to use the variable . 

Instead of hard-coding the array as the array that your function is checking, write over with this as a new method. Then, you can refer to the array to check as . Here is roughly what I mean: 

Notice something about ? The 4 numbers in signal are the second number of the 4 times you are logging to . I didn't include the first number since the first number was the same for each option. Now, to further simplify the switch statement, we are going to want to create a function that sends the 4 signals over to that uses our new enum. Here is what I came up with: 

If there was some sort of error while making , the rest of your code isn't going to work. At this point, you just exit the function and return something like -1 to symoblize an error. 

Taking for a Your spin function looks good for the most part. As I am not that familiar with jQuery, I don't know any other way to spin an element other than to use CSS animations (like you did). I've made some minor changes to this function: 

Nice code! I'm going to start off my review with your code, and I'm going to end it with an alternate solution. 

See how your big was reduced to this? I figured that, since return the button that was clicked, you could just access the button's properties from that. Then, I saw that and had special cases so I created specific cases for them. I also made one more improvement: rather than storing 

where the first line has the completed time, and the second line has the user who achieved that time. Then, in your script, you can simply read from the high score file. 

Yes; it can. The constructor function is just that; a function. In fact, it doesn't even need to be: if you move the logic from into the constructor (which seems like a valid decision), then there is no point in this being it's own class. To move the logic into the constructor, just move it up a scope: 

Now, there's no need for recursion - that means there is less interaction with the stack - and, rather than switching to a loop, this nice solution can be used. 

I also made a small extra change; I moved the function call so now, when the game is ed, the game will start after that extra set-up. KeyboardController class This class doesn't seem to serve it's full purpose. All it does it set up two event listeners that store some information from the event. The main problem is that the class is doing this class's job. As in, the class is doing a lot of checking of the key presses. To me, that seems like the 's job. Getting and setting From my knowledge of Java, it is common practice to have ters and ters, rather than leaving the fields open for anything to touch and change. You do do this in some places, but not in others. Although, do not create too many getters and setters. For example, if you have a two dimensional array, you don't want to have a getter and setter for each individual array member. Disclaimer: I'm not sure if the same practice applies to JavaScript. Indentation Judging by your post, you come from a C++ background. Also, I can tell by your indentation. In JavaScript, it is common to put the on the same line as the signature, if/else statement, etc. Comments You don't have any, and that can become a problem, especially with games where you do a bunch of crazy arithmetic on different numbers, coordinates, and other doo-hickeys. You shouldn't over comment, but at least explain lines that aren't blatantly obvious. 

And, if you feel that the user will always start with 0 points, just remove the points part from the argument list. 

Is this really necessary? You have (or you should have) all the information you need to turn off the exact slides/links that are activated. For setups where there are a lot of slides and links, your current solution can get slow. Well, we know the current slide number and we have an array of slides and links... 

This is not the point of IDs. IDs in HTML are meant for specific, unique, and special elements. If you have to create a bunch of elements that should all have the same ID and to circumvent it you are just sticking a number to the end of the ID, the you're doing something wrong. Here, you should instead be using a class . Then, you can get all the elements with this class using 

The above regex should only pass for either y, n, Y, or N. Also, it may be better to compile the regex in the main method itself. Then, in your code, instead of having the loop, you can simply write: 

This bit of code is a small game to see how long you play a game of FizzBuzz without messing up. Code: The top of the code: 

should have scope identifiers. Judging by your use for these properties, I'd say you should give a modifier, and the rest modifiers. 

has a very un-descriptive name. I would call it something more like (or something along those lines). By the way, this was a very nice method that was easy to follow even with the lack of comments. 

These 4 functions "take in" two integers and give out another integer. For this, we could create a class that holds this logic: 

I'd fix this up by moving a line break after the first and then indenting the body of the loop. That would look like this: 

Don't just throw a string as an error: create your own error object. I recommend calling it as the reason why the error would be thrown is if an invalid operator was passed into your function. Here is what the class would look like: