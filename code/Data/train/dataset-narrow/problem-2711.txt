I just wrestled with this myself -- how to create a simple component/entity framework for XNA. Here's what I did; my goals were: 

You can do something similar for the y coordinate; essentially, you're creating a wrapper object and setting coordinates manually to some offset (so the circle is always positioned correctly relative to the rectangle). 

PCG is hard to get right. There are always balance issues, because you always have a variety of gamer types (casual, hardcore, etc.) to balance between. Since other answers are deep and technical, I'm going to provide a simple answer, inspired by the game "Warning Forever": keep track of what types of enemies kill your player and spawn more of that. Also keep track of what types get slaughtered by the player, and spawn less of that. For example, imagine you have three types of monsters (, , and ). In the first wave, you spawn ten of each. At the beginning of the next wave, you notice that: 

One issue I grapple with across many of my games is trying to decide how many levels to put in my game. This is across genres and platforms. In general, constraints that may decide -- although they are not applicable in my case -- can include: 

As mentioned in the comments, their site already explains what the three systems are and what they can be used for. 

I'm researching Monogame. Their goal is to allow "easy" porting of an existing XNA/Windows game to mobile. Does this mean you can have one solution (theoretically) with shared code, and it works on all three platforms (PC, Android, iPhone)? Or do you need to port your game from PC to Android, and then again to iPhone? I'm sure "write once, run anywhere" works 80% of the time, I'm not worried about that other 20% like support for GPS, acceleratometer, etc. which doesn't exist on all platforms. 

I already tried to support different screen resolutions with scaling the sprites. But if I scale my sprites from 800x480 to 1920x1080 pixel, then the sprites look blurry. I want to use different sprites for each resolution to avoid the blurry effect. How can my game choose the right sprite for each resolution? How can I do that? How can I calculate the right measures for every sprite? For example, I use a 64x25 pixel sprite with a 800x480 pixel resolution. If I change the resolution to 1280x720, what should then be the measures of the sprite? Can I calculate the measures like this? sprite measures(1280x720): Width = 1.5f*64= 96, Height = 1.5fx25= 37,5 Should I round up or round down the height(37,5 pixel) of the sprite? I create a Windows Phone game with Monogame, and I want to support every resolution from 800x480 to 1920x1080 pixel without scaling. 

But it's still not working. I get the following result if I don't use scaling: $URL$ Why is the DebugView drawn on another position than the sprites? I found out that if I change something in this code block, then the DebugView is drawn on another position, but I don't know how to change this code block so that the DebugView is drawn on the correct position(on the same position as their corresponding sprites). I know that it's not working because I use a Camera class, but how should I change this code block so that it works with the Camera class? 

UPDATE: I tried to solve the problem like described in Gamefreak0's answer, but it's not working. I created a ShadowChecker object and I check in a foreach-loop if it collides with a platform. If it collides, the variable ShadowPosition gets changed. But it's not working correctly. I made a picture, and in this picture you see that the shadow isn't on a platform. Why is the shadow not getting drawn on the pink platform? The character(black rectangle) is above the pink platform, so the shadow should be on the pink platform. 

Flash can do all this, but it's expensive (and heavy to install). Is there a free alternative that I can use? This is NOT for pixely, pixel-style art. 

This shows that there are a lot of people interested in, and actively using, XNA. I tried many, many different tools and platforms before eventually coming back to XNA. 

It's very simple: if you're getting the same map three times in a row (or more), it's because you didn't randomize the seed. What does this mean? Computers are inherently deterministic (non-random), so they simulate randomness. It's actually repeatably random (that's why we call it "pseudo random number generator"). How does this work? When you create a random number, you have the option of giving it a "seed." The important thing is if you always use the same seed, you will always get the same sequence of random numbers, in the same order. Always. This can be good or bad. In your case, it looks like you're not seeding the random generator, and by default, you're getting the same seed -- it probably uses some component of your date/time. Hence, I recommend you randomize it. As Gusatavo mentioned in his answer, you need to call random.seed(). The docs state that "if X [the default parameter] is omitted or , current system time is used." This should be sufficient. 

I'm coming from a background of Android. I would like to figure out what kind of iBlah device hardware I need to support for iPhone game development; something like Android's OS distribution stats, but for iBlah hardware. From my research, it seems that I need to support both iPod and iPhone. But which versions of hardware? is 3G still used? What about 3GS? For example, the -S phones seem to have dual core instead of single-core CPUs. I also worry about performance. In Android, I had a severely low-end phone, which meant pretty much anything that ran okay there ran okay on other phones. For iPhone, how do I figure out what to support in terms of performance? 

I wrote a shader in XNA and I want to use it in a Monogame Windows Phone 8 project. I converted my Effect1.fx file to Effect1.mgfxo. But the program doesn't work correctly. The screen of my emulator is always black if I run this code and I get no error message. Why is the code not working? Why is the screen always black if I try to run my shader? Am I loading the shader correctly? How can I use a custom shader in my Monogame Windows Phone 8 project? My shader code: 

I created a 2D tile-based jump and run game for Windows Phone and I want to draw a shadow under the character. How can I do that? The shadow must also be drawn on the tiles if the character jumps. The character and the tiles are rectangles. How can I draw a shadow under my character? The shadow should look similar to the shadows in this picture: 

I created a breakable body but the pieces are not flying around if the ball touches it. What is wrong? Why is the breakable body not breaking into pieces? I made a video and I enabled debugview, so you can see the bodies: $URL$ 

I have a camera in my 2D side scrolling game and I want to implement the GUI. How can I do that? For the moment, I draw everything like this: 

When I create a revolute joint in Farseer, then there is always a tie point in the center of each of the two bodies. Is it possible to change the position of a tie point? For example: I created a revolute joint but I want to change the tie point of the Windmillsail1 body. Is it possible to change the position of the point to the lower edge of the Windmillsail1 body? I marked the position of the lower edge with a red arrow. 

In any case, about your original problem: I suggest you use a dynamic class like here instead of a flat array. Why? 

As Josh mentioned in his answer, asking for proof is pretty much the only thing you can do -- something like a screenshot of purchase confirmation, or the email they send you when the purchase goes through. Better yet, next time, you buy it and send them the license key. Better still, put something in your contract next time if you don't trust them -- some sort of penalty/punishment/contingency. Since it seems like you don't trust them, I would go so far are putting a clause like "you get paid when the app successfully makes it to the app store, and not before." (Of course, you will probably still need some sort of good faith down payment.) 

After using several entity-component systems, especially CraftyJS, I more or less got the answer to my question: yes, you can reuse components (especially sprites or images and mouse-click handlers in 2D games) for the GUI. Much of the time, you only have access to the ECS, and not the underlying systems (eg. drawing system). In this case, it's okay to use components, since you have no other choice. If you do have access to the underlying system (eg. Ruby roguelike with direct access to Curses), you may find that drawing/rendering directly on that system is more effective (less code, less fragile, more natural) than using a bunch of entities and components. 

I've started down a line of art asset development that will allow me to (hopefully) reuse and improve assets for several games. But how do I go about storing and finding them? Let's say for example I decide to focus on RPGs for ~2 years. I would create items, monsters, etc. and store them somewhere. How would I categorize them and make them easier to search later on? Is the best solution "use directories with broad categories like landscape/items/monsters/etc.?" 

I made a little Windows Phone game with XNA and Farseer Physics engine and I want to port that game to iOS and Android. Is Monogame the only software that I can use or are there alternatives? I don't want to change my entire code. It should be easy to port the game. Is it possible to use Unity to port the game or is it better and easier to use other software? 

I created a little Windows Phone 8 game that supports multiple resolutions. If the resolution of the device is less than 720p, then the sprites and their corresponding Farseer bodies need to be scaled down. If I run my project with the 720p emulator, then everything looks fine. But if I choose an emulator with a lower resolution(for example WVGA emulator), then everything looks weird. In this picture, I use the 720p emulator: $URL$ In this picture, I use the WVGA emulator: $URL$ If I use the WVGA emulator, then the Farseer collision shapes are drawn on another position than their corresponding sprites. In addition, a part of the red ball sprite is drawn in the blue rectangle sprite, but their corresponding shapes are drawn differently(the ball shape isn't in the rectangle shape). How can I scale the Farseer bodies so that everything works correctly? Here is my entire code: Game1 class: 

I have a body named PersonA. If PersonA collides with another body, the width and height of that body should be saved. I tried it like this but I always get error messages that "Width" and "Height" don't exist. 

UPDATE: I changed my code and tried it without scaling the sprites and Farseer objects. In addition, I changed my code in the Camera class to: 

$URL$ I downloaded the current version of Visual Studio to develop Windows Phone apps, but I don't know how to add XNA. I tried to install XNA, but it's not working with Visual Studio. How can I use XNA with Visual Studio Express 2013 for Windows? 

You should follow the official libGDX setup instructions. There's a section about where you execute a JAR file. This provides you with a GUI project builder, which will allow you to configure some options like: 

I'm looking for a vector art tool for gameart, similar to Flash, but preferably free. It just needs the following capabilities: 

Some projects have all of these things. Most have a few. Some have nothing, other than maybe the actual software project itself. Is OpenTK one of these? Because it seems like: 

Disclaimer: It may be that I'm already doing all the "right" things, but just don't have enough traffic for it to pay off with people giving feedback. My question is: how do you attract early and quality feedback into games, from end-users? Ideally, I'm looking at a model where the seed of an idea comes from you (or from them, even) and you build it into a game, molding it along the lines that people tell you are best. Because you're just one opinion. And game developers have a reputation for doing weird and sub-par quality stuff, sometimes. I'm currently practicing the following: 

Once you have this done, it's just a matter of passing this data from view to view. When you pass it to the world map, it'll create the right sprite and render the player location, and allow you to move him. When you pass it to the battle view, it'll recreate the right sprites, display health, turns, etc. So the answer is not "new class" or "subclass," the answer is "extract your data from your current view and pass that around instead." 

( can easily be ; as 100% alpha, I think; can be a real angle (small in the image) or zero (the orb itself). 

In general, per pixel collision detection is much more expensive; so as much as possible, use rectangle collision handling. (Even for per-pixel, use rectangles first to check for overlap.) When I implemented collision detection in Radiant Wrench, this is precisely what I used. Alternatively, you can try Flat Red Ball (which I used to use before), which uses polygons for detection (which is quite performant). You can use basic types (rectangle/circle) or create your own polygon from verticies. They don't support per-pixel collisions though.