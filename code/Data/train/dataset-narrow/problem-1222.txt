Boolean queries return booleans, not integers! You are trying to do two things here: see if the author exists and return the ID. I am okay with you putting that in the same method but you're putting the focus on the wrong task. Instead I would name it and return if no record was found. Although I might just skip this altogether and use . 

The naming of the tests.. I wouldn't put the [ExpectedResult] part as a DateTime since it just forces you to compare it to the [Scenario]. I think plain English "ShouldReturnSameDate" will be more effective. 

I wrote an introduction to unit testing a few hours ago, give it a read because there is certainly room for improvement! I do like that they are rather small and that you separated the AAA stadia. 

I'm not familiar with the library but isn't there an event you can subscribe to instead? I notice something like but there could be others too. Either way I would decrease the delay to, say, 100ms for better responsiveness and no difference in performance. 

Always put brackets (), even if it's for oneliners. Save yourself the inevitable headaches of having to find an error only to find out it's because it wasn't in the scope of an or block. 

A new diagnostic has seen the light of day! This one will alert you when you have a call where the formatting placeholders are in the wrong order. The right order is defined as: 

Ideally this should be returned in two different methods, if possible. This follows the Single Responsibility Principle. 

No abbreviations[1]. Change that to and . [1]: almost none. Some very specific ones like I can live with. 

Turn it into a parameter with default value 3. That way you can always decide later that the user can change this without much trouble. 

I don't like using and then implementing on activity level. You end up, as you do, with one big click handler while you might as well just create a method dedicated to that button. It will be clearer and easier to find as well (when you have 20 buttons, you would have them all laid out in your IDE's class view window). 

There's little point in storing this in a variable: it's never going to change anyway and you're not clarifying any of the intent. I'm fully aware that is a space and is a left curly bracket. 

since you should just overwrite that variable with . Ultimately, your code would look something like this: 

You'll find that you can configure this a lot and add restrictions to the table that gets generated but I'm too lazy to look them up myself; mapping isn't my best side. This should give you an idea though about how you can get rid of those not-so-pretty intermediate tables. 

Use the appropriate methods: -- this way you don't throw away information that might help you diagnose a failed test. 

seems like a more proper name for a selection changed event handler. Event handlers are typically in the form of . 

What are and ? Magic numbers are values which look like they're being put there randomly without any context as to what they mean. The solution to this is to put these values into variables which will make their intention clear: 

You are now manually setting to true, although this is actually a computed value based on whether or not is or not. It isn't unthinkable that someone might forget to do this someday so I would make this implicit: 

Using is a very, very expensive action. By defaulting to it everywhere instead of using an intermediate type you're incurring heavy costs on yourself. 

You can now happily change the display of your itemslist and easily add more menus. If a new page has to be added you can create a new enum value, initialize it to point to the correct displaytext and add it to each page that should have it. 

Code fixes are typically boring though. Show us the analyzer! Analyzers are where the real work is done and where all the edge cases popup. I can see many edge cases: 

Instead of using 0-based pages and then adding 1 to the presentation, I would consider using the reverse: 1-based pages and subtracting 1 when determining the pages to display. In essence this would turn your loop from , becomes unnecessary and in your controller you use instead. 

Maybe it's just me, but I'm a nitpicker and it doesn't have much feng shui to it. I would prefer to read 

You've got a lot of properties with explicit backing values when that isn't needed. I assume you do this because you want to instantiate the collections? When you don't have any additional logic you can just use the automatically implemented properties and instantiate them in the constructor: 

Return instead of . It tells whoever reads your code that you really did intend to return an empty string and it wasn't just a typo. 

Your code is cluttered with casts of and to integers. I would strongly encourage you to change the backing field. If that is not possible then at least use a temporary variable in method scope. 

I don't like that both filenames and extensions are in the same array. If you have 1 extension and 5000 files that have to be excluded, it will iterate over 5000 files (if you have bad luck) for no reason. 

already tells me. Yes, you specify that it's about buttons but that's very minor. This, however, is a good comment because it is less obvious from the code: 

Your code is not extensible to more (or less) than 3 parameters even though this shouldn't be so hard. Below is an example how I would do it with 3 hardcoded parameters: 

You can apply the above commentary to books and topics as well. Note that this might indicate appropriateness for a generic method! It will take some setting up but in the end, each of these 3 aspects do the same things so it should be doable. Your approach is the right one (only one?) so there's no remark on that. Once all these changes are implemented I think you'll find your code to be very easily readable and extendable. 

What exactly is ? I would connect it to a uniqueness factor of an object but here it is.. some way to describe what action to take? How do I know what and do? Use an to describe the purpose: 

I really don't like it when people use the method outside of debugging situations. Sure, sometimes it is a useful representation of the object but that is its entire contract: represent the object. It does not say what data it shows and as such, can be changed in any new release. If you have the option available like for example or then you should use these instead. 

It's just a bit easier to read. Likewise for your method: the indentation is all over the place; maybe something went wrong when copy-pasting it here? Keep your statements in this format: 

I have made changes that take care of the added test cases which you specified later. Alongside that it also takes care of the culture-specific notation (dot vs comma) and floating point errors. It's more lengthy than your solution but it is also more robust code and a lot easier to digest. This takes care of the following testcases: 

Use instead of to indicate an empty string. It conveys your intent without ambiguity (i.e.: nobody will think you forgot to enter something in the string). 

The tests speak for themselves but just to summarize: when I don't specify their ID (which is your usecase), add them to the DbContext and flush it to the database by calling (the flushing is important since that's when the IDs get generated), the original objects have their ID updated to represent what is in the database. This means that you won't have to query the database again just to get the generated ID; you can simply use the object you already had. 

Right now you're hardcoding the menus. This should be saved in a resource file so you can centrally access your content and easily add multiple languages to your application. More keywords to google: localization and globalization. 

You're setting to before you've even started initializing anything. I would do this at the very end to indicate that everything is finished and succesful (I don't assume you want to mark things initialized when in reality the program crashed). 

For such a small sentence, I would allow inlining that multiplication. The meaning is still conveyed clearly. 

What's that, commandtext? Something more descriptive would be helpful, perhaps just "command" or "query" would be okay. 

The best way to discuss performance is by measuring it. I suggest you use BenchmarkDotNet and never roll your own solution. Onto your question: it is safe to assume that LINQ will in most cases be slower than the iterative approach. Not only does it allocate more (for example through lambdas) but it's also more expensive in runtime because of interface dispatching and other aspects. There is obviously a balance to be struck between readability and performance -- if you have no performance issues then LINQ might very well be the best option although I would argue that in this case the iterative approach is very readable as well (if not more). Something you can consider: use a instead of a if your usecase allows it. Performing is O(n) for a list but O(1) for a Set. 

It doesn't read very fluently if you specify the namespace everywhere. I would suggest removing this for brevity. 

I have setup agenda tasks to periodically retrieve and possibly insert new SE sites and tags in my MongoDB database. Some things that bother me in particular: 

Do not print to the console from your domain, leave that to whoever is calling your method. Now you're printing and returning data. 

You're returning a in the statement of your . I would use an exception (like ) to clearly signify that exceptional (and incorrect) input has occurred. 

Considering there is almost no code to review, this will be purely stylistic. Remember that criticism is a sign of love. 

It's good practice to validate arguments as the first course of action in the body. Therefore I would suggest this instead: 

You are correct in feeling uneasy about the hardcoded URLs: I would put them in a config file. By hardcoding them you will be forced to rebuild the project should you change to a different server while using a configuration file you can change it whenever you want and it will get picked up automatically. 

Don't shorten names: it's Public properties are UpperCamelCase No need to spell out since the type is already obvious from the name You only use this field once so there's no point in assigning it to an intermediate variable 

This is a pointless delay. Why start your program and immediately put everything on hold? You're not waiting for anything to load but if you are then you should make that very clear (both to the user and the programmer). 

Can you see yourself busy when your author has 20 fields? I would suggest using a mapper tool like AutoMapper to create a new object or at least move the responsibility of this to a method on your class. 

Iterator If you want your class to be able to be used in a loop, you could implement . Generics Your datastructure is not generic so you're losing out on a lot of possibilities. Kaput Your code isn't working as it is. I'm not entirely sure why (it's 3:30 AM so I'm not going to debug it deeply anymore) but I followed a hunch and this small example demonstrates it: 

The DateTime API is an external system, just like a database, the filesystem or a network operation. In unit testing these are typically stubbed out so you work with data entirely under your control. In your case this isn't a problem because the only DateTime used is the one you pass in. However should this not be the case, you should inject a proper datetime service which you can stub from your tests (if you're following along: this will be part of post 3 of my blogseries). 

It's still a low value so it wouldn't matter too much but should you go to higher values I would add some sort of visual feedback so the user can distinguish between the AI "thinking" and the program crashing. Random You're creating a object inside a method. This is a dangerous approach because it uses a time-based seed so if there are 2 very close method calls, there will not have enough time passed. Consider creating an instance once on class level and calling on that field. You're actually using several instances throughout your code so they can all benefit from this. 

I prefer a style that takes away some of this nesting (and thus allows more characters on your line): 

What you call "underscore functions" are actually the result of a few principles including separation of concerns, single responsibility and sure, there is some encapsulation involved as well but that's not really prevalent. So in that regard: it's definitely a good thing that you are splitting this in multiple methods because it really makes it easier to follow the flow of your application. That being said, let's start critiquing! 

I assume is defined on instance level? Naming conventions for private instance level fields are either or with the latter version the kind I prefer myself and more common. Aside from this I would also pay attention to your naming: methods should describe the action being performed in it. This means there is always a verb in the name. In your case this would become . Notice how I left out "Date" because that is already specified by the return type. 

First of all a remark: I am not entirely sure about the requirements but in order to make your app Windows Store qualified you have to adhere to certain rules. One of them being you're not fiddling with .NET stuff in a WinRT component. I would look up whether or not reflection is ported from .NET to WinRT. Just because it works on your machine locally doesn't mean Microsoft will allow it. 

Last but not least: USE AN ORM Getting a proper ORM up and running is very hard to get right and by creating your own you are 

While we're on the topic: FluentAssertions. It turns that into something like : it's easy to read and perhaps more importantly it also gives really useful information when the test fails, unlike "false". 

You can remove the intermediate variable entirely since the try-catch is now gone and there is no additional logic. 

I am not great with datetime styling but I am 105% sure you are reinventing the wheel. Take a look here (standard options) and here (custom options) for all the different ways you can create your own date and time representation. 

Restrict visibility unless you actually want an outside class to access it. Both and are not things the outside world should access so make them .