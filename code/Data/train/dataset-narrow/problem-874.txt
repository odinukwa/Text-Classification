You should move a lot of code from to one or more separate classes. Code like this just isn't right when you're in the class already: 

But all that output related logic should really move to a separate class. Suppose you don't want to write to the console anymore but instead want to log to a file or to a DB: this should really involve only changing the "Output" class without any need to touch the class. (Quite frankly, at this point the calls to Console look like a quick & dirty debug solution.) 

I fail to see the point of your class. And so do you, apparently, because your method doesn't even use . But then is merely doing , so there's no point to it. If you name something , I expect a , not a ]>. I also fail to see the point of that "dataSet", since it relies on you remembering which belongs to which path. Even if it would be a (with the path being the key), I still don't see the upside considering that reading the contents is as simple as . 

I can't say much about the code, since there's so little of it. It doesn't look that good, to be honest, and I'd certainly move it to a specific method since both blocks seems to be part of a much longer method. 

Why do you use ) when you don't do anything with ? Why not use ? Oh wait, I see, you've called your collection -- a bad name, since this doesn't tell me it is a collection of lines. 

This reeks of magic strings. I would be tempted to make this a class of its own, which then can be converted to a , and things like would be constants in that class, perhaps. At least I'd move the whole logic to its own class, have it parse the response and return a . Actually, that goes for most of the code. I'd move some code from at least to separate methods, certainly the lines where you create a new cookie. The whole method is rather hard to figure out, for instance I didn't quite understand why you assigned to multiple times until I noticed happens between those two assignments. I'd much prefer it if the logic in that method was distributed over several shorter method, so the logic becomes clearer, e.g. do a download, parse the response/create the NameValueCollection, do an upload, create the cookie, do a download, get the contact details. 

Why isn't this one single method on that takes the value of as a parameter? I'm also not fond of returning a , I'd expect it to be more like . 

Why do you need to specify the whole namespace in ? And why is your variable named -- why not just name it ? is a bad method name, since it lacks a verb or verb phrase. Parameters should be camelcase: . 

's is also an odd bird. and basically rely on magic numbers and conventions, a recipe for future failure. You continue this pattern when you do and : instead of meaningless numbers, use the column names. Why not use instead of ? Beware of variable names like or , instead use proper nouns in full. and are incomprehensible to me. You're also inconsistent: vs . There's no need to define , just do it all in one go: 

What if you want to move away from a console application and want to create a WPF application, or an ASP.NET application, etc.? You'd need to change so much code. Don't link your code so closely to the technology, instead move it to a dedicated class. If was part of a dedicated class that handled all of the game play, you wouldn't need to have all those ugly calls. The logic also feels wrong: calling updates , which is returned because you use it in . Considering you call in each of the three s, why not call it outside of the switch, don't have it return and simply use ? Also, considering that each of the s is basically the same, except for the message, why not simply use the to write the message and move and outside of the ? can be used in the same way as , so avoid concatenation. But again: these are minor fixes, the big fix is moving all that gameplay code to a specific class and only using in for I/O. 

Aren't there batch methods available? Can't you cache data for movies in a local db or an XML file so you only need to look up movies that aren't stored in that db or file? Also: are you seriously retrieving "image-unavailable.jpg" every time? Why? Do you expect it to change form one second to the other? Why not get it once and store it on your HD and retrieve it from there? 

I don't think is valid code unless you've got an extension method somewhere, it should be . Again multiple lines can be reduced significantly: 

Split your methods into smaller ones. is 120 lines, you could for instance easily move the creation of to its own method. Think SOLID. 

The whole block where you do the request and get the response should move to a separate method. The whole of should be re-thought and the method renamed, since it's doing a lot of different things, certainly more than just "loading a URL". 

There are some odd naming conventions in your code, like the prefixes and . Don't do that, it makes code so much harder to read. Also avoid needless abbreviations like . Don't prefix form fields with their types, e.g. or . 

Why is a method when it behaves like a property? I suspect this is because you've got 150+ lines of code in the class, when in fact plenty of it should be in a dedicated class. 

So I'd move that to a method that can be called by both. Considering that you don't do anything with I'd even move to that method. 

To me it seems like does too much. Moreover, there is code duplication. It seems to me you can move some of it to a method like this: 

Embedding the email message in your code isn't what I would recommend: I'd consider moving those to a template, for instance. 

What is ? An ? I don't think that class should have a plural name, and it doesn't look like it is an "email name". 

isn't a good name either, especially not when you return a -- a request should result in only one response, I'd hope. Isn't this a anyway? 

In addition to the two existing reviews, both of which I agree with, I'd also question the wisdom of having five parameters for your method, especially considering the first four are the same type (decimal). I'd much prefer to construct a "parameter class", e.g. 

: I realize why you named it and not , but the real solution was to call it . Even worse as a name is : it contains a typo, and the name also contains the type ("List") which is completely superfluous. But the real problem is that a is too limited. What if you need to pass an or a for instance? You even acknowledge this by converting the s to s, which isn't a solution at all. 

I'm a bit worried by , etc.: I'm assuming these are public properties, which means and etc. should be PascalCase. 

Hmm, I just noticed the resulting JSON is quite odd. Why not include the when you're constructing the -level ? 

And isn't even necessary, since it can be replaced by simple LINQ: . And since you only need the active tags, you can simply do (h/t to @RobertSnyder). 

I'm not a big fan of mixing LINQ styles, and I find the SQL-like version often too verbose. Example: 

Not that I'm too happy with this. Naming is still bad, and I'd prefer to move the various parts into their own methods, so it is clearer what happens. 

Perhaps it's a copy-paste error, but please reduce the blank lines in your code. Simply removing most of them reduces this example with one third. 

Concatenating strings quickly becomes unwieldy. This is already difficult, for instance: . Moreover, considering that this concatenates three properties of , why isn't a property of ? (Also, should be camelCase if it is a mere variable.) 

This might seem like overkill, but it really benefits yourself if you apply similar coding standards to small projects as you'd do on larger ones. Because such small projects might grow, and then it's nice if you don't need to rewrite a lot just to introduce some small additional functionality. 

All of that db code in should really move to a separate layer. You should have one class that just converts db data to objects (, etc.), and other classes should consume it. 

Quite frankly, I'm only scratching the surface. IMHO the basic design of your solution is flawed and all of the above are just symptoms. 

Four capital letters in a row -- as in "SQLPlus" -- goes against Microsoft's coding guidelines. It is expressed at length in the old version: 

That way you don't need to have 80+ lines inside an . The same is probably true for your next check -- -- but since you don't provide us with enough information I cannot help you there: where does come from? Where does come from? I see duplicate code: 

Start from there, and create small methods. Also find out which part is slow. Right now it could be anywhere, and since we don't know how much data this code is dealing with. You might even need to rethink the whole SQL Server part if the slowness is caused by the need to keep everything in one transaction. But first split up your code into smaller chunks and determine which part is causing the slowness. 

I found this to be rather unclear, with a surprising amount of logic in relatively few lines. Take for instance : I kind of see the point of constructing it like that, but at the same time it feels clumsy and counter-intuitive. I'd be more inclined to construct it like this: 

Yes, that's longer, but it's also much clearer and informs the next developer who looks at that code what it does. 

The first bit of code you post already shows a bad practice: is obviously linked to a button called , and that name is utterly meaningless. You say that this is what is triggered when you hit Load -- so why then not call it a ? 

You correctly use to dispose of , yet you don't do the same for , , etc. Your performance issue probably stems in part from not properly disposing of these. 

What kind of namespace is ? Most of that seems to be a method name. Look at or etc. for examples of proper namespaces. I know you said that this is a "a sort of proof of concept", but that still doesn't mean you should abandon good naming practices. Even the code I write for applications only I will ever use is as close to "professional" code as possible for two good reasons: 

Moreover, isn't even necessary since you only use it once. Also avoid things like , just name them . Don't abbreviate, e.g. . It isn't necessary and only makes code harder to read. 

Is there a reason why you use WinForms? Quite frankly I feel the technology is outdated; WPF offers you far better ways to do the same thing. For instance, you can use MVVM. 

There are other naming issues besides the ones Heslacher mentions in his review. For instance: the return value of is stored in a variable named -- shouldn't that be ? Or if you want to re-use this variable to store the return value of , why not name it ? 

I must admit to not being a fan of using non-English to name variables etc. Code is meant to be "readable" and mixing two languages makes things a lot harder. I know some basic Spanish so I know what and and means, but , and are already harder. 

Considering there are calls to I suspect you're not using the MVVM pattern. I would really advise you to do this. That way you can also avoid things like and instead bind via XAML. 

Try to move your code from code-behind to specific classes. Specifically, split you UI from your business logic. I get the impression much of the logic from your second code sample can and should be in a business logic class (or multiple), with communication between UI being limited to a parameter class being used to pass parameters from the UI to the back-end, while another class returns the results (success/error) and various messages. Look at the variables you define on top: isn't used anywhere I think, and , , etc. are only used in code that looks to be back-end code. The only things that look to be relevant to the UI are calls like , and its various parameters can all come from the "response class" I talked about earlier. 

But that still seems cluttered and too elaborate for what it does. Let's rework that some more, for instance by moving the assignation to the end and some other small improvements: 

Twice you do , and as it turns out, twice you then do . That's a waste of effort, which to me suggest you should rethink the logic in . All of those are pretty ugly and are repeated, so they should be moved to a method. I'd advice to convert to an intermediate format first, before creating . 

Is there a reason not to use an ORM? You need 20 lines just to retrieve one RoomModel from the db, whereas with for instance Entity Framework this could be reduced to at most a handful. 

IMHO class names rarely should be plural. But then most of what does shouldn't be there anyway, it belongs in a service. This goes back to my first point: you should restructure your project and separate the various layers. In your current code you're talking to SharePoint from what is basically the code-behind of a UI object. As it happens I'm currently working on a project where I'm extracting data from SharePoint. Here's my current structure: