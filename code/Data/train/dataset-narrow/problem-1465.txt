Something I want to add to the other answers. Normally in finance money is saved in cents, etc., i.e. an integer. 

The call to returns a std::future which gives a way to retrieve the return value of our operation. Moreover, it enables you to join the operation, if you want that or not. Because the destructor automatically joins the operation if it is not finished we have to keep the s around. One might want to clean these up, but this is left as an exercise for the reader ;) Going experimental Huh C++11/C++14 is not enough? How about the Filesystem TS which will someday (might be C++17) be in the standard. Nevertheless there are implementations in gcc (5.x+ I guess) and VS (2015) (clang says no work started) which you can use with . It has a clean and portable API to work with filesystems, even though I only used it in one place I think it is more descriptive. 

So instead of using as a safe assumption for our threads I used hardware_concurrency() to ask the system how many cores it has/we can utilize. The constructor of is more generic than and takes the function as a parameter. being templated we can safely use a C++ function with arbitrary arguments which allows us to change to 

First of all, I really liked your C++ code and even though I am not a professional I think there are some points to consider. To the future! It is 2016 so I would say we can safely use C++11 today (at least if you are not held back by embedded, an ancient compiler, etc.). There being at least three major compilers with C++11 support this shoud not be a problem. I went through your code from top to bottom and the first thing was . It is good but we do not need it because there is std::thread 

This line invokes the native method with the wrapper's arguments and resolves the explicitly constructed promise with the fulfilled object, if, and only if, it is successful and it completes before the callback is invoked. The reason this occurs is because of the specification: a promise can only be fulfilled, rejected, or remain pending forever, and if it is fulfilled or rejected, it is "settled" and cannot be fulfilled or rejected again. If it is unsuccessful, and it fails before the timeout occurs, then it will invoke with an error. 

One of the things in this rewrite to flatten your pyramid code, I changed the order in which is called, because the way your code accessed the property relied on the usage of a proxy get trap in order to work properly, which is both unnecessary and inefficient. Lastly, I cleaned up your generated text to break it up into a few lines, otherwise it's quite unreadable. You might consider storing that text to an external template file using a minimal template engine (possibly written yourself just for this specific case) in order to avoid hard-coding it in here. 

If you are at all familiar with using promises, then you'll recognize this pattern. While it is typically considered an anti-pattern, this particular implementation is written properly, and is also necessary in this case to take advantage of a convenient implicit race-condition behavior of promises that I'll explain in a moment. 

I would like a review of a library I've recently published. I realize this is a rather large request, but having looked on meta, it seems this is perfectly on-topic. I'll include a few choice samples from the library to demonstrate my approach, as well as a link to the full codebase for anyone interested in giving a full-breadth review. So to summarize, this library, called , is, as the title and tags suggest, an object-oriented approach at designing an educational tool for teaching sorting algorithms, which is why the sorting algorithms use generator functions to introduce interruptions in the control-flow in order to be visualized step-by-step. Here's a few of the classes needed to implement an iterative (bottom-up) merge sort algorithm: 

Prefer references instead of pointers when you pass arguments to functions, that way you are sure in the function that they are defined and not null. Also you see that it is not clear from the function prototype 

or go one step further and use the pimpl idiom and move all implementation details away from the class declaration to the .cpp file. example: 

Having user/pwd in code, especially in clear text is a bad idea. If you still want them in the code at least encrypt them in some way. As they currently stand anybody can with a hexdump program read them. 

sidenote: when you declare functions that do not take parameters, write as argument. In C when you write e.g. it means that the function can take any number of arguments (as opposed to C++). Writing makes it clear it takes no arguments. get_slices There is no reason to declare as static, better to have a local variable that you return. You should also check return values of allocations, they may in some cases return NULL so that must be handled. also again, lose the gotos generally speaking it is good to check arguments to functions so that they are sane. e.g. with asserts 

always write compound statements instead of single statements after conditions/loops etc. A common mistake is when somebody later wants to add more statements is to forget adding - especially when the code is not your own. 

with less versatile I mean that if your class does not throw exceptions the user of the class cannot take any corrective action if something goes wrong or give out custom error messages in his own language. 

I'd appreciate any feedback on improving perceived responsiveness for the feature this UserScript adds to the webpage. I realize changing the URL after a slow image load within might make the URL change seem slow, but I also noticed that when calling or within a listener to or events, it appeared to cause the fusion image to load significantly slower. Though this UserScript still functioned properly either way, I'm curious if anyone can come up with an approach that improves responsiveness overall. 

This first checks that is "truthy", and then checks that is a valid, non-zero number. If these are satisfied, then is assigned the value of the supplied property, otherwise it defaults to milliseconds, like in your example. 

In order to satisfy the O(N) time-complexity, construct a in O(N) time and space complexity, then use a loop which is considered constant time relative to N O(N) as well (thank you, wchargin), since the maximum possible number of iterations is equal to N and average performance of a operation is O(1). Because O(N + N) = O(N), regarding time complexity, this solution is overall O(N) performance in both time and space: 

I did a little preliminary research and was unable to find a class to create re-usable instances of template string literals, so I wrote my own. Below is the main file (slightly modified to remove exports) written in ES2016, along with a few examples of usage that show the convenience of the class. 

On Pokemon Fusion, I found it annoying that the webpage didn't automatically update the tab URL to the permalink when the fusion is changed, so I decided to write a UserScript to do that. After finishing that, I thought it would also be convenient to update the fusion whenever navigating through the site history as well. 

There seems to be no reason to use a VLA in this context, you already have specified that the array has max size 255 so why not just declare it as such. 

I would introduce a layer in between your threads and the file. E.g. have a thread that handles all writing to the file, it holds a mutex protected queue which is written by the other two threads. That way you have a layer between the physical file (slow access) and the queue (fast access). You then do not have to lock the file in any way since only the thread that writes the file needs to have access to it. 

you should also check the function arguments to see whether they are null or empty. you start out directly by assuming points to something and increment it. at the very least have asserts to see if caller is following the contract of the function, asserts only trigger in debug mode. 

It seems unnecessary to have the macro when you could have just have written a define with the actual size 

in use instead to get the real error from the OS instead of "can't open" e.g. i also agree with Emanuele that seems a bit ... vague? better with in if you run out of memory you silently return, it would probably be good to return some kind of error code instead allowing for a user of the function to take action. This applies also to exit(), doing an exit in the middle is not a good strategy, better to return with an error code. Let the caller determine what to do e.g. write an error message. in you but there you do not check the return value. 

I am not sure if this is what you meant with your call because you only check for errors. But a nonexistent file does not return an error code. But from the context I think a check with is_regular_file() is a reasonable check to make. Theoretically there is also a Networking TS which should be tested by example implementation in the compilers like the Filesystem TS but I could not find any compiler implementing it. With this TS your network code could be simplified as well, but this is for another day. The final code 

While I was at it I changed to a std::unique_ptr. I saw you used std::auto_ptr, do not use it, it is deprecated and will be removed in C++17. unique_ptr is not copy-constructible/-assignable therefore we have to move it into in and out of it in . A more drastic change is the wait logic. I could have used in a while loop but there is an overload of wait() which takes a predicate to check if waiting is over and it fits this perfectly. In your I created the using std::make_uniqe() which is the highly recommended way to create s. While I was at it I made it static because it removes the need to instantiate . Destroy all the things! Wait what?! Even though I wanted to show you all these neat ways which simplify your code in the end I deleted all your thread code and most of my changes because there is a simpler solution to your problem. You know that IO takes time and blocks so you thought of a way to make it asynchronous. The common approach, as you did, is to implement some kind of threadpool logic with workers and creators. But there is an alternative, std::async. It encapsulates the asynchronous logic and is required to act like if it was a . Most implementations problably use a threadpool so it is exactly what you did, just less work for you. I removed and changed (not being a thread anymore) 

other than that i find it was quite clever way of calculating atoi, it took me a moment to understand it -- sometimes it is better to let the compiler optimize the code for you than try to write too clever code. 

The while loop's expression says it should quit when c is not a digit but after that you do not handle the case if c was EOF. Should you then return EOF or 1 ? Personally I get a bit confused by the function name, when I read getInt() I expect it to return an int instead of getting the value via an argument but that is just me. 

I would like to add to @LokiAstari's excellent answer It is a good rule to write out all possible tags in a switch statement, you have one case which you do not handle also add a default as well to catch any invalid values that may be added in the future. Your / functions I find are a bit too long, IMHO it would be better to split up the function in a couple of separate functions to make it more readable. (Also here you suddenly stopped having any comments). You have quite a few variables in your functions so separating the functionality into several small functions will help with that too. When you write comments have in mind that the reader often wants to know why something is done, not what is being done since that is the purpose of the code. When you initialize member variables do it in the form of 

I am not quite sure what is used for in your it seems to be set to 0 and then passed to and never changes its value. It could be instead declared inside instead of being passed. When you do memset, use sizeof the array instead of some number e.g. 

This part is pretty straightforward; we're creating a timeout given the amount of milliseconds supplied from or the default , and invoking the callback function in that amount of time. 

You can write concise code without using cryptic variable names. Change to something more meaningful like or even just . One way to resolve pyramid code is to look for places where your logic can be decoupled or flattened. While it's possible to continue to use the dependency in order to achieve this, it's probably much easier to just use since you're already using promises anyway. This will also give you an opportunity to get rid of your global variable : 

While this is a relatively simplistic and deceivingly elegant implementation, insertusernamehere's solution is admittedly an order of magnitude faster, when using an array as a perfect hash table for non-negative integers instead. 

Overall, it gets the job done, but your code (especially the area I'd refer to as "pyramid code"), could use a little more organization and clarity. Your statement could be a little more concise, and, at the same time, more canonical about what it's actually there for: 

And as promised, here is the link to the repository, which also contains formatted documentation on the respective github pages, and a full demo on Heroku. Please be responsible and only make HTTP requests to the Heroku link sparingly, as I have it hosted on a hobbyist plan, which only allows so many hours of uptime a month. I have plans to implement a service worker for it in the future to mitigate this issue. 

Here, we are mimicking the signature of the native API, which has one required argument and one optional argument. We simply expect a property to optionally exist on within this wrapper function.