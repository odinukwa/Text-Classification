command? That nearly only works well for memory chips and I guess RTCs, or chips that without any request output something (Temperature Sensors, some not all of them). This IC needs some stimulation in the form of some settings before it outputs something usefull. I assume you're talking about the Freescale MMA7660FC (There is also a Bosch component that is called MMA766, but that dissipates 15W so, I don't think we're talking about that): According to the datasheet, it has a couple of modes of operation (page 9), it needs to have power supplied to the DVDD AND the AVDD pins before it will even start to think about doing something. (It will otherwise be in Power Down mode or Standby mode). If you did not read this datasheet yet, I urge you to read it, it contains a lot of information about how to use this chip, and how to set the configuration to make it do what you want. And please confirm that we're talking about the same chip, because otherwise it is very difficult to help you. 

No, for 5V there is nothing, for the internally used 3.3V, 2.5V and 1.8V there are voltage regulators as shown in the schematic below. 

device files on raspbian, there you can configure, read and write the individual pins. Not as elegant, and root privileges are required, but it works. Check this link for more info on using these files. 

For a total overview of what you can put in the configuration of udev, this page called Writing udev rules is a good source of information, the permission and ownership options are a in a paragraph a little down in the index. You can change the owner to whatever user you like, or set the permissions (file mode bits) to a specified value. 

The picture shows an example of ghosting, buttons A, B, D are pressed and besides Row 1 (for button A) also Row 2 (for button C) is high, at the moment Column 1 is active, which is not correct. After the whole hardware adventure, you need to write or adapt a kernel driver to actually use the keyboard under linux. A nice starting point might be this link: Driver for keys on TCA6416 I2C IO expander, this is a similar idea, but only uses a 16 keys keypad. Hope this helps you a little. 

I do not have any 1wire stuff laying around to actually test if this 'rewrite' as mentioned in point 3 works. And specially how it should work, but on the info page they talk about disabling the w1 kernel module or run OWFS as root so it can unload the w1 kernel module, but if this is already implemented and working I have no idea. I hope this information gets you a little further, and please let us know some results. 

The 500mA is for USB2 (max of 5 loads of 100mA), this drive is USB3 (max of 6 loads of 150mA = 900mA). External drives often have a (Y or chained) cable that connects to 2 USB ports to get the power needed. Check the specifications of that drive very well before buying anything. A second reason why that adapter is too tight fit is the surge current (inrush current), a lot of power (relative) is needed to get the disk spinning inside, his is only for a short moment, but in this short moment the current is high, the voltage level might collapse to such a low level that the RPi starts to act weird, or just reboots. The most safe option is to power the RPi with a separate supply and connect the drive through a powered USB Hub. This ensures that the RPi will not have to deal with any effects from power fluctuations from external devices. 

In the output shown above there should be no, 'File not Found' Errors, if there are you need to install those libs using the normal apt-get way. Now you have a (as far as I can see) working version on csync2 on your RPi. starting csync2 does result in a help screen and not some coredump, error or otherwise not working thing, so I guess it is now a matter of configuring it and done... 

The real only advantage I guess is space. The RPi has a SDHC spec. card reader, which allows SD cards upto 32GB. So if you want to add a 512GB USB pen drive, you can use that for the OS/files/etc and only boot from SD. The reason to use a USB harddrive are besides space also speed, because these are much faster then any USB/SD memory. And they do not wear out as fast as USB/SD memory. 

After four years , Android for any Raspberry Pi model is still in beta state. You can follow the progress of the community porting efforts here. After 2012 , the foundation took the stance that they see little benefit in supporting Android , as they now percieve it as mainly encouraging consumption instead of creation. 

The most important thing is that the seller makes references to device tree overlays. This guarantees that the driver is maintained by Linux/Raspbian and will always be updated and working, whether the manufacturer goes bankrupt or not. This is infinitely better than random images with random included drivers. Those are of no use if you are already using a configured Raspbian or Arch Linux ARM system. 

Obviously omxplayer is a commandline-only application. Coupled with an extra GUI it will still outperform (or actually use acceleration instead of) VLC or any gstreamer-based solution like Totem on old Pi models and even the Pi3 in special cases. A popular GUI is omxplayerGUI , part of the kweb package. Get it here : $URL$ 

Shrink your second partition with gparted to eliminate free space and use dd to only backup the parts you need. I suggest using a gparted Live CD (based on Linux) to modify RPi partitions. You can boot from such a disk without touching your Windows install at all. This is much safer. 

Your project sounds feasible , but will probably involve some programming. You might want to check out the CompoundPi Python library which has been designed for this specific purpose . $URL$ 

gedit is a graphical text editor similiar to Windows' notepad.exe. All software in Windows and Linux can be started from the commandline irrespective whether they are commandline applications or not as long the graphical environment is running. gedit is no different. Whether a piece of software is a "command" therefore depends solely if it resides in the PATH or not. Both Linux and Windows work with a PATH variable. Learn more here. Please note that gedit is not preinstalled. Use leafpad instead if you don't want to download new software. 

A direct data transfer connection to PCs via a single USB cable is only possible on the following models: 

Many filesystems beat FAT on some points, but only FAT meets them all (esp. 3 and 5). Don't forget that Microsoft being a member of the UEFI forum was almost mandatory due the significance of the the products and the company itself. 

Collabora has improved software for the foundation under contract. They implemented Hardware acceleration inside Webkit (for Ephiphany) and did work on a Wayland desktop called Maynard. It makes sense that they run an extra repository with the improved versions. Sources : 

The Raspberry Pi cannot turn itself off properly. Thats why after a Raspbian shutdown the Pi will still consume an non-negligble amount of current (up to 30 mA). This also means that the 5V rail is indeed always on. 

The custom effects are part of the closed-source GPU firmware which only Raspberry Pi and Broadcom engineers can change. You can add further effects in post-processing (on the CPU) though. 

Neither Debian 7 (wheezy) or Debian 8 (jessie) support the Raspberry Pi3 in AArch64 mode. Debian 9 (stretch) will very likely support the Pi3 in 64bit mode , though. Progress can be monitored here: $URL$ 

Only the Raspberry Pi Zero , Zero W , Model A and Compute Module can act as USB device. Other models can not act as USB device. This is a hardware limitation which cannot be worked around in software. You will not be able to make the Pi act as PS/2 keyboard or mouse. Not with the GPIO pins, that is. Here is a guide for turning the Pi Zero into an USB keyboard/mouse using ConfigFS : $URL$ 

Only batteries supporting the Smart Battery Standard over SMBus/I2C can be used with Raspbians Battery Monitor applet. The only battery supporting this (AFAIK) is built into the pi-top Laptop. No Raspberry Pi can correctly measure its own input voltage without additional components. 

The cleanest way is to setup or reconfigure the existing DNS server on your company network. You need to instruct your company DHCP server to point to aforementioned DNS server. A competent Windows admin will know how to do this easily with Windows Server. Most cheap SOHO routers should have an easy way to to do this via web-interface too. Some even manage the "fake" .local TLD by default ! Sadly ISPs often hide router manuals or rebrand COTS routers in a confusing way. If you get stuck persitence in the search for manuals will be needed. Alternatively , dnsmasq is both a DHCP and DNS server for Linux and makes this very easy. You can even run it on a Raspberry Pi ! $URL$