A quick look at the STM32 F4 info on Wikipedia shows that it has I2C and SPI interfaces as well as a lot of GPIO pins. At first thought I2C or SPI seem like a better choice than GPIO both for economy of pins and because they handle a lot of the inter-device protocol issues for you so that you can focus on getting the data you need from the STM32. You sound like you have given this a fair bit of thought and you must be pretty comfortable with a lot of this project... So, at the risk of stating the obvious and hoping that I'm not way off base, a good way to start might be to block out the functionality and where the responsibilities lie – for example it sounds like you're planning to do EKG capture on the STM32 and communication with the SIM808 and, I assume, coordinate things and provide the user interface with the Pi – so the next step could be to decide how the devices exchange information and build a simple mock up to test the interfaces. Try to minimize the coupling between components so that you can test each one on its own. I'll stop for now, it feels like too much unasked for advice, but feel free to ask more questions. Hopefully others will jump in as well. 

Enabling the RPi OTG USB Serial Console Service In order to use the OTG Serial port as a console, you will need to enable the service on the RPi. If you have a GNU/Linux host machine, this can be done directly on the miniSD card as detailed above. However, it can also be done by booting the Raspberry Pi with keyboard and monitor attached. Then enable the serial console service: 

You can easily experiment with adding a parallel capacitance. Simply solder a small value capacitor in across the C1 capacitor listed in the schematics. To lower the overall capacitance value, you'll need to replace the surface mount cap on the board since the board doesn't seem to have any pads to attach series capacitors. 

Procedure to add CA Certificates Manually It's been awhile since I manually updated CA certs on a client machine. The following procedure worked on my Raspberry Pi running Raspbian Stretch: Create a local cert directory: 

Once the Pi is up and running, login – ssh, keyboard & display, or serial all work (for credentials use or you can also login with if you're on a serial line or the keyboard) and have fun. If you are doing a headless install it may be a trick to get to connect to the Pi. Find Raspberry PI address on local network gives some good techniques for finding the IP address assigned to your Pi. Once you have it: 

It sounds as if you may not have enabled the SSH daemon. As a security measure ssh is off by default. You can enable it – for the next boot – by creating an empty file called in the root of your boot device. The easiest way to do this is to mount the SD card on another computer and the create the file. The contents of the file are ignored and it is deleted at boot. To make the change permanent: 

The voltage divider circuit you have should work fine. However, it offers very limited over voltage protection. Upon a high voltage condition, if the Zener opens, then your board will likely be damaged. It would be better to have the 5V supply trigger a transistor which causes a GPIO pin to go low. 

Have Xwindows running on the local host. Enable X11Forwarding in sshd_config Use the option with ssh 

If so, then you'll need to find the datasheet for the board. The transistor can be setup to activate the coil on a low input... i.e. Ground the input terminal. Or it can be setup to activate the coil on a high input... i.e. 5V applied to the input. If you can't find more information online about that particular board, try asking your local shop for more information. Most electronics shop people will talk your ears off if you ask a question or two... I know, because I was one once. 

A lot has changed, for the better, since the early days of FreeBSD on the Pi. In my experience installing and running a recent version (11 or 12) is pretty painless these days. Here are the steps that work for me on the "big" boards – I don't have a Pi Zero so I can't speak to them: 

Yes, there is. Take a look at the Raspberry Pi entry on the FreeBSD Wiki and also this question and (especially the last) answer. 

Look at the efficiency specs on the converter (higher is better) and get the lowest power rating that will do the job. Both of those will reduce the waste heat produced by the power supply. Is there any chance of either venting the space where the project is installed or putting the power supply outside of the space in free air? 

It's important to remember that the alias needs to be created in the proper user's environment. So, if you run as , you will need to create the alias in a shell. 

And then change the root partition in your to You can do this on your Windows machine, just like you did to add the IP. 

When prompted for what do to with new certificates, choose . And then select the with space. Test that it works: 

Plug your modified miniSD card into your Pi. Plug in your power cable. Wait 60 seconds. Plug in your USB cable into your Raspberry Pi and your PC. Run on your GNU/Linux machine and wait until you see the serial device register as something like Open a serial terminal program such as . Change your serial device in the program to match your OTG registered Pi. Press Enter 2 or 3 times and wait a few seconds. 

The problem is that Stretch does not run Bonjour out of the box, so the name of your Pi is unknown. You should be able to connect if you: 

There are a number of questions asking about installing/running FreeBSD on the Pi – it looks like there are a lot of problems. Is FreeBSD runnable on the Pi? How can I get started? 

Take some time to read through the documentation for the module and your library. Then if you still need help tell us what you've tried and post the code that you're working on (or a relevant snippet). 

So, if nothing has changed, but something has changed it must be magic – or DHCP (which some would argue is the same thing). But seriously, from what you've described it sounds like the Pi's IP address may have changed and there is a machine (hence the rather than a timeout) at the Pi's old address that is not running . The reason that this has happened may be related to the three flashes of the ACT LED – according to @Dmitry Grigoryev's answer to What do system LEDs signify? the three flashes means that wasn't found – meaning that the SD card may have been corrupted. UPDATE: based on the OP's answer, stating that the SD card had been corrupted and that the flashes were faster than the Pi's diagnostic flashes, it is possible that the Pi was able to boot normally (and that what appeared to be three flashes of the ACT light were normal card access flashes during boot). However due to the corruption of the memory card the ssh daemon was not running and thus the connection was refused. This would be the likely explanation if you know that there wasn't another device responding the the ping. You could check that with which would let you see the MAC address of the device at the IP addresess responding to the ping. 

So, on a system where has not been installed, installing will also install . However, is not the same program as , and seemingly does not rely entirely on the cache. So, in order to properly setup the command is required. There is a clue in output when install and pulling in as a dependency. 

The command you are looking for is However, the creation of special device files is not for the faint of heart. Make sure you know exactly what you are doing. For further reading: mknod manpage Writing a simple device driver 

Simple Debugging of X11 SSH Connection There is no need to start X11 manually on the Mac side. If you use the option when trying to connect via ssh, you'll get useful debugging messages. Towards the end of messages, you'll notice that X11 is started automatically: 

In cases like this it helps to break the problem down – which in turn means knowing something about the pieces that need to line up for a network connection to succeed. Much of this information isn't specific to the Pi or it's OS, but it will be helpful to know the tools and foibles of the particular hardware and OS that you are using. This question and its answers may help: How do I set up networking/WiFi/static IP address?. Testing with other devices on the same network may also help pinpoint where the problem lies. Rebooting often works wonders. In general you want to start close and expand as you test, so you might: 

If the SD card isn't called substitute the name you see in Finder. Then eject the card and put it back in the Pi and reboot the Pi. Next you need to figure out what IP address the Pi has been assigned. I'm assuming that it is "headless" so you can't just watch the console. That would be too easy... So, take a look at this question: Find Raspberry PI address on local network, my favorite method is to the broadcast address on the network () then use . Once you connect to the Pi run the command and permanently enable it is under Option 5, Interfacing Options. As I understand it, the trick in step 1 is a one-time thing. 

Since it seems that your is missing, you may want to fill it in with the necessary information. You'll need to manually mount the root and boot partitions first: 

Updates per comments The hostname for GNU/Linux systems, such as Raspbian, is set through the utility. You can change the host name for the Raspberry Pi via: 

There are some shortcuts for path names. However, using the full path should be more error free for a beginner on UNIX like operating systems. I recommend reading through the Free Pascal Documentation, since there be some changes from what you are used to in other compilers. 

If you are looking at the guide linked to by @RichardChambers then the relay board has the transistor and the diode (the orange component with the clear packaging) listed in the relay control circuit. However, it's important to note that the transistor could be setup to follow reverse logic. The type of transistor will determine how the input functions. An NPN BJT configured as in the above guide, will follow normal logic. However, some other transistor might be used to change the input voltage sensitivity or perhaps the logic applied. 

Create an empty file named in the root of your SD card, and Figure out the IP address of the Pi (see here if you don't know how), and finally 

Check that your network is up and basically working by trying to ping a machine on your local net by IP address (). Check that you can talk to your router by attempting to ping the internal interface of your router by IP address (). Check that your router is routing by doing a ping to the external interface of your router by IP address (). Now try to reach your router's router by attempting to ping your router's default route by IP address (). Success means that you can reach a remote machine – specifically the machine that your router will be forwarding all of your Internet traffic to Now verify that it is all working with a to ping something far away by IP address ().