I have configured a logical tunnel between my master-routing-instance and a additional routing-instance. I tested the same config (except IP addresses) on my lab-system and on one of our other core-routers => Working! But on this router, it doesn't work and I can't see the differences. I have configured the tunnel-services for this fpc (fpc 0, pic 3) like this: 

Now I expected to be able to ping from the routing-instance into my master-instance like this: But it isn't working. Has anybody a clue? P.S.: When I ping from master to routing-instance, the output-bytes counter of the lt-end in the routing-instance increase, what means that the routing-instance replies with echo-reply-packets. But the input-counter of the lt-end in the master instance doesn't receive them as the input counter does not count incoming packets.... Thanks in advance! 

I have a switch that is counting "output errors". A "show interface gi1/0/46 controller" shows up "2963657 Excess Defer frames" but I really can't find any documentation about "excess defer frames". Can some one tell me what kind of error this is and what circumstance can cause that? Hardware is WS-C3650-48TS, Software 03.06.05E. Do you need any more information? Thanks in advance, Flo 

Not sure whether you this might help you: $URL$ For me, it sounds like you're trying to build a source based routing. Another thing: $URL$ (PBR - Policy Based Routing / FBF - Filter Based Forwarding) I think one of the above papers should help you. Kind regards, Flo 

I'm a little bit confused and pretty sure it won't work. But a mate and me are arguing for so long now, I decided to ask you. Imagine a PFSense Firewall with 3 Interfaces. 2 different LAN-Interfaces 1 WAN-Interface Behind one of the LAN-Interfaces is a Server. Its IP is NATted on the PFSense to a nonRFC1918-IP. Behind the other LAN-Interface is another Server whose IP is NATted on the PFSense to a nonRF1918-IP. For communication via WAN we have proxy-arp configured with two different IP-addresses for the two servers. Now I want the first server to communicate with the other Server without knowing its private IP. So I tried building rules on LAN-side which allow traffic from 1st Server RFC-1918-IP to 2nd Servers nonRFC1918-IP (the proxy-arp-IP). As expected...it doesn't work. Does anyone know a solution for this to work? I know that the servers could communicate via their private IPs...but it's a must have because of PCI compliances and things. The system should be out of PCI-scope, so it's the only way to get it to work. Hopefully Flo P.S.: If it's not clear enough, maybe I can paint a picture for you ;) 

The in the prompt indicates that you are already inside the tmsh shell. No need to prefix commands with tmsh. You would only do this if you were in the bash shell (to get there from tmos, type ). To get to the imish and zebos shells, you have to use or 

You can't route based on layer 7 application using only BGP. BGP features will only allow you to tweak the actual prefix advertisements/preference, not anything at layer 7. For active application inspection and policy routing you would need an external service provider to act as a reverse proxy for your public subnet. Then you would build a GRE tunnel from each of your ISP connections to this provider and they forward you the traffic down these tunnels. I haven't heard of anyone offering this type of application load balancing service, but it doesn't seem unrealistic since there are security services that operate in this same manner in order to "scrub" malicious traffic before sending it to your site. 

What if you don't use a patch panel, then decide you have to move your switch further down the rack or you need to move the connection to equipment in a different location in the rack? Now your cable is not long enough to reach the new location. You are screwed because now you have to run an entire new cable through the walls. With a patch panel you would just grab a longer patch cable and be done with it. 

There really isn't a "right or wrong" answer on how to do it. You have to weigh the pros and cons and decide for yourself. Usually a centralized model would be used where all of your security hardware is in the DC, so you backhaul a remote location which doesn't have a firewall or web proxy back through the equipment in the DC. This requires bigger hardware at the DC to accomidate all the remote locations as well as higher bandwidth MPLS circuits. Or the distributed model where you offload the internet locally would require firewalls at every location to secure this traffic, but then you may also be able to use some smaller hardware at the DC since it doesn't have to worry about that traffic. You could also use lower bandwidth MPLS circuits based on the traffic patterns. 

Although this question is rather old, someone may find it while googling the very same problem, so here comes our "solution": We couldn't figure out the source of the problem, as the problem was non-reproducable and only happened about once a day on varying access-ports, with about 500 access-ports with the exactly same config in use. After updating all 2960 to a release from the 15.x line, the problems disappared. The config didn't change, so it seems to have been silently fixed in one of the releases in between. 

In most cases, communication happens between workstations and servers, which don't participate in any routing protocol nor do they have any further knowledge about the network topology. Most hosts only know 2 things: 

Spanning Tree is not a routing protocol, but a protocol to avoid loops in a network. Therefore, whenever the network topology changes (links comes up/goes down), Spanning Tree is gathering information about the network and the link between all involved switches. It does then determine a root bridge (= root switch), and starting from that root bridge defines which links are to be used to distribute data from one point to the next. After Spanning tree is done, there will be exactly one link in use for every possible connection, and the others links will be blocked (disabled). However, this is a protocol operating on Layer 2 of the network, and has nothing do with IPs or routing. 

The default gateway, some kind of router, will then take a look in his local routing table and, based on the destination IP address, forward the packet to the next router. It doesn't care how that router is going to get the traffic to host B, it only knows "This is the next hop on the way to the destination network". At some point, the packet will arrive at a router which is directly connected to the same network as host B. That router will then send the packet to host B. Every participant in that process only decides where the next hop for a packet is, and send the packet to that station. They will not know or take into consideration the complete route the packet has to take - only the next step. 

Look into enabling BFD. BFD is a separate protocol that EIGRP can subscribe to for failure detection. It can provide sub-second failure detection in a LAN environment, but you don't want that over a lossy WAN connection like the internet. You'll tune the timers higher for the WAN, but the advantage with BFD is you can configure BFD dampening. When you are on the border of a cell/sat connection you can get a lot of flapping back and forth when using low timers, if you configure dampening it will detect the flapping and stop the convergence for a time period to stabilize the connection. 

In the case of vPC configurations, both HSRP/VRRP peers will actively route packets when they receive them. It is a special behavior for vPC. Some information on vPC active/active routing 

I wasn't able to paste this picture in the comments. Usually what you want is your full mesh connections to all be in the backbone area 0. Then you split off other stub areas that are all attached to area 0. So all of your WAN links would be in area 0, then the links on the router towards the local site LAN would be in its own area. 

You don't need fabricpath to run a vPC+ from a FEX. Fabricpath is really only useful in large data centers where you have a multiple tier topology (Core, Aggregation, Access). In a smaller setup using a collapsed core type design, vPC is simpler and accomplishes the same goal of getting rid of spanning tree. 

Now you can create a default route in the global routing table without interfering with the tunnel establishment. 

For Net A you are using a /22, but the chart shows each network is a /24. A /22 would actually look like: 

If you want to see power consumption of PoE, you can use "show power inline" command which will display power usage per port, plus total power and available power. 

Forwarding is the term used for the action done by any station participating in the distribution of a packet that is neither the source nor the destination. Host A is the source or sender, Host B is the destination or receiver. All routers in between them will only be forwarding the packet, as they are neither source nor target of that communication, but just relays. I have to correct myself on that point. Forwarding, in networking terms, usually refers to "relaying data that you received for somebody else on Layer 2". Switches forward frames they receive, by determining if their Forwarding Table/CAM Table (Cisco) knows on which the port the destination MAC address is, and then sending it there, or flooding it on all ports if they don't know where the destination MAC address is located. Routers route. (Ha!) They do the same as switches, but on Layer 3 (IP). They take a look at their routing table to determine where to send a specific packet on it's journey to it's destination IP. Often, forwarding and routing are mixed up (like I did), but in network terminology, forwarding is Layer 2, routing is Layer 3. 

We are operating several Cisco 2960S stacks here and, for some time, are experiencing regular Spanning Tree TCNs (Topology Change Notifications). When using show spanning-tree detail to get to the source of the TCN, they originate from different 2960S stack members. As the config has been transferred from older switches, the ports are configured as trunks, with the data VLAN being the native VLAN and the VoIP VLANs being included as tagged in the trunk. I know, today the correct configuration would be switchport mode access combined with switchport voice vlan - but at the moment it is at it is. Part of the problem was based on the fact that some ports were only configured as portfast, not portfast trunk, so this has to be fixed, as the portfast only command is not applied to ports in trunk mode. However, some ports are configured as portfast trunk, which as of my understanding of Cisco documentation, should avoid generating TCNs on link changes. Sadly, they do. Executing show spanning-tree interface Gi1/0/x portfast shows portfast enabled for all VLANs on that interface, but show spanning-tree detail together with show logging shows that these interfaces are indeed the source for the Spanning Tree changes. It is made sure that there are no "special" devices connected to those ports, just VoIP phones and desktop workstations. The version run is 12.2(55)SE3, the devices are 2960S-48LPS-L and 2960S-48FPS-L. Looking for known bugs, there was a bug in a 12.1 release for 3550 switches that caused such behaviour, but this is the wrong device and a much older version, and I guess somebody should have experienced that bug before. Any idea where to look, what to try?