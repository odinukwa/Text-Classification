Each directory contains a text file containing description of the repository and its contents. For example the top of for looks like: 

And the file will be transferred to your current directory. Assuming your Raspberry Pi is accessible through its default hostname in the local network. Also assuming the user has read access to the file. 

The error "No libjansson found" means the library called Jansson () is not installed on your system. You need to install it (and you already figured out a correct way to do it yourself): 

Because somewhere on the way you must have configured an APT repository pointing to an HTTPS URL (check the files at ). Per the error message to fix the problem you need to run: 

You should set a static address on your Pi or connect it to a network with DHCP server so it obtains a regular address. Once you have that fixed, you can proceed with debugging SSH connection (if the problem persist, but it's likely it will go away). 

Your problem cannot be reproduced given the information you provided and here's a minimal, working procedure to prove: 

Unless script reports an error, the answer is: no, of course not. performs a series of checks and uses the results as input to create the . The results depend on architecture, hardware features, etc. These are not requirements for the successful compilation. One of the first checks is a check for Python 3.6 itself, for which the result will certainly be . 

No. Google never distributed Chrome for Raspbian and they ceased their support for 32-bit Linux versions in December 2015. 

The configuration in which two separate interfaces on a single machine are configured in the same network is not correct. The situation you described is expected as the return packets from the Pi to the Windows machine might be sent through the Ethernet once it's connected (and, of course, not reach the destination). 

But to modify you need root permissions, so you are effectively locked out. Your only option is to remove the SD card, mount it to another system, and modify the files accordingly (either to regain access directly or to confirm the above). 

Use different IP network on the Ethernet and WiFi interfaces. It might be as easy as changing the network mask to split the 192.168.137.0 into two networks, or not. It depends on your whole network configuration. 

where is the IP address of the network device you want to monitor. This will show you incoming and outgoing traffic for the specified IP address. You can also try Wireshark. For both tools there are countless tutorials on the internet, but your filtering requirement seem to be really basic. 

Now, to reach a service on your Raspberry Pi using the Dynamic DNS address, other devices (clients) on the internet will first ask the DDNS provider for the IP address for your device and domain, and it will respond with your router's address. The client will then contact your router and in this stage, the router must forward incoming packets to the Raspberry Pi. That's what you need port forwarding settings for. 

The answer to the question if something is legal or not, depends on the interpretation of laws in a particular jurisdiction. This answer should not be treated as a legal advice. It is based on published information by the relevant party. Raspberry Pi Foundation made a clear statement that answers your question in the Starting a business with a Raspberry Pi article: 

Your Raspberry Pi does not need to know the router's IP address, it's your Dynamic DNS provider who needs to know it. No-IP client sends a web request containing your device ID (credentials) to the DDNS service provider. The request is relayed using your router and as NAT (Network Address Translation) takes place, the Pi's local IP address in the packet is replaced with the router's public one. The Dynamic DNS provider sees the request as coming from your router's public IP address and updates the record for the device to this address. 

Unless you see an error at the bottom there is nothing to worry about. There might also be some guidance if you need to do something for a specific package. It might look difficult for someone not experienced, but basically all you should do is to read the message and understand it. 

No. You cannot run visual environment within an SSH session. To have (almost) "the exact same experience as going the whole nine yards and using an external monitor and peripherals" you should set up VNC. RealVNC server comes pre-installed on Raspbian, but you need to enable it. Refer to the official documentation for detailed instructions. You might however need to install VNC client like VNCviewer on your Debian machine. 

Is there an error in my /etc/modules file? How can I debug this, and/or how does one correctly load modules on system startup? By the way: I can modprobe those above lines just fine, which enables the LCD and I see a nice blinking cursor on that display (since there is not getty running). 

I have an old rev.2 (I think) model B. It already has the 000 Fuses, but still only 256 MB of RAM. I wanted to use it for some small projects, but it does not run very stable. I tested TP1 and TP2 and measured only about 4V. This is obviously too low. I was using different power supplies: Apple 5W and 12W adapters, a 1.5A adapter I am using with my RasPi2 and also tried powering via my MacBook Pro's USB port. All the same, I always get around 4V. Could it be some component on the RasPi board? Can I fix this? I have attached a picture of the RasPi in question to aid the discussion. 

There is a good summary of the CPU frequency scheduling interface for Linux. In short, you can run the following command to get the current frequency of your CPU: 

I haven't tried this, but I think these are the most important steps from the above tutorial. In your case, I would also use dmix as well, but that is described in the tutorial in more detail. Hopefully, the above lines will get you started. 

This should switch to french azerty layout. You can put this command into your if it works. There are also many other keyboard layouts available (like for Belgian azerty). Edit: If you want to make this permanent, you need to make sure the still starts the default WM and desktop. So put these lines into your , if it does not exist yet: 

My Pi2 is not booting anymore after upgrade to Jessie (using the standard apt-get route). During boot I get a bunch of messages, the first one is the "A start job is running for dev-mmcpblk01p1.device", which takes about 90 seconds. Then I get messages like 

Is it possible to have (the same) audio going through HDMI and the line out on the Pi2 board at the same time? I want to use my Pi2 as a RetroPie station, using HDMI for gaming, so video/audio are in sync, and as a ShairPort for when the TV is off. Alternatively it would be ok if I could detect if the HDMI device is on, and switch accordingly. I don't need the two outputs to be bound to the same device. If ALSA represents them as different devices that would be ok as well. The Shairport should only use the Stereo jack. 

This line is taken from the above link. The settings may vary, important is the . The other parameters deal with buffering and disabling the reverb effect, to save CPU cycles. You can test the timidity server by using aplaymidi: 

I want to set up a RasPi 3 for games with RetroPie. I have a WiFi and a Bluetooth dongle (BT 4.0) and now would like to buy one or two BT gamepads. Which are useful and/or compatible and of good quality for use with the RetroPie system? 

This will check every five minutes if the connection is still up, and restart it, if the router cannot be pinged. If you dislike all the syslog messages, you can comment them out in the script. My corresponding looks like this (I uninstalled all the network managers): 

I have read that apt might have problems with IPv6, so I did and put in the file. Now I get these error messages: 

Instead of , you should put your PCM device there. You can list all devices by typing . Then pick your headset as the slave device. Add the new device as your default device in : 

However, when you have one of those screens attached, you won't be able to output to your TV as well. You could use one of the small touch screens as an input device, and output to your TV via HDMI. There are several options for small Pi touch screens, for example: 

The second one always being HDMI. Maybe it is possible to configure this to be the default output device for the system and use device 0 for the shairport. 

A quick search returns a blog entry which details how to make the function keys be the default. There is an option called fnmode in the Apple HID driver. You can test this by running: 

EDIT: Note that the question was changed from "how to detect 12V turning on a light bulb" to the current question about doing so for a backup bulb in a car. Other solutions are better for an automotive environment. 

Presumably you looked at $URL$ from Adafruit. Once you get your data with the microphone, what you want is an "audio spectrum analyzer" . You will need to do Fourier Transforms to convert the time series data from the microphone into frequency data. You can look for the standard musical note frequencies in the Fourier Transforms. There is a computationally fast way of doing Fourier Transforms aptly named FFT, i.e. Fast Fourier Transform. See $URL$ for info on how to do that on a Raspberry PI. There is a LOT to understand about FFTs and spectrum analysis. For example, the frequency resolution of the FFT depends on the number of samples that are processed. You also need to understand windowing. See $URL$ . For this specific example, if there are multiple notes playing at the same time and the same note is played in different octaves, you will have to distinguish between overtones from lower frequency notes and the fundamental frequency of higher notes. For actual music versus isolated instruments, this is non-trivial. 

Use a voltage divider to monitor the 12V at the light bulb. Make the resistors large enough that they do not significantly affect the bulb. A 3K resistor for R1 and a 1K resistor for R2 divide the voltage by 4, giving you 3V at Vout when powered, and a 1K pulldown to GND when the switch to the light is open. 

As you can see below, I somehow have duplicate file names. I'm not sure if the files themselves are duplicate. Any idea how this can happen? The PI is running Raspbian Jessie. 

Sounds like you may have some floating inputs, i.e. logic inputs that are not pulled or driven high or low. Some times when you touch floating inputs, it sets them at a particular logic level. You can try probing the pins individually with a 10K resistor on a wire tied to 3.3V or GND and see which exact pins are causing the problem. 

(Picture from this page about RPi GPIO) All of the GPIO libraries such as pigpio(my personal favorite) and WiringPi have library functions to set the pin direction. If the GPIO data output register is set to 0 and you set the GPIO as an output, it will drive a 0 on the pin. Set it back to an input, and the resistor will pull the pin back up. In pigpio you use the set_mode function to set the I/O direction. Looking at the protocol, after you pulse the pin low and it is pulled high, the TX23U pulls the pin low and then eventually sends a start of frame pattern followed by the data. There is a pigpio application called piscope that records the state of a GPIO pin that you could probably adapt to record the sensor data stream. It has the ability to trigger on edges in the data stream before starting to record. It can store the data in a file. 

Instead of waiting for an edge, you should debounce the switch input. The same code that gets rid of glitches when a button is pressed can also get rid of glitches caused by external events. The link is for the pigpio library, but if you google switch debouncing in software on the Raspberry PI, you will find other possibilities. 

Here is a paper that discusses the frequency response of silicon image sensors in general. The graph below from the paper, shows that the image sensor response is about 20% of the peak sensitivity at the short wavelength end of the range. However, it doesn't drop to zero until around 300nm, so with very bright 390nm illumination, you should be able to see something, assuming that the RPi camera has typical silicon sensor response and that there is not significant UV attenuation from the lens. With really bright illumination, you could use a pinhole lens to eliminate glass attenuation. 

Assuming that your pH meter does not have a common ground with your RPI, you can connect the "GND" input to the pH meter to a 3.3V/2 resistor divider from the PI 3.3V supply and use a PI PWM output with an RC low pass filter to generate a programmable voltage without any DAC. Tie the RC low passed PWM output to the non-GND pH input and as the PWM value is set above and below 50%, the voltage into the pH meter will vary above and below zero, relative to 3.3V/2. If you want finer voltage control, you can use pull up/down resistors on the capacitor of the RC filter so that the resistor from the PI PWM output can only drive the output to some fraction of the 0-3.3V range as the PWM varies from 0% to 100%. The ratio of the RC resistor to the pull up/down resistors determines the range reduction. As for generating the PWM outputs, you can use the pigpio library to easily generate PWM signals on any PI output. All of this assumes that the rate of change on the pH voltages is relatively small, since it will be limited by the RC low pass filter time constant. In general, after a large change, the voltage through an RC settles to the final value within about 10*RC seconds. The PWM period should also be much shorter than the RC time constant, say ~1000 times, in order to filter out the PWM frequency. See $URL$ for a detailed PWM DAC application note from Texas Instruments. LTSpice Schematic: