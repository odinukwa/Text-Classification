Some of it depends on the level of the student. There's obviously a big difference between a freshman just starting out, a senior about to graduate, and someone who's been in industry for awhile. Keep in mind that, once your students are in industry, they're going to be expected to be able to write code that passes QA, and it's usually not the case that QA will supply them with a bunch of unit tests in advance. This being the case, it's essential that people learn to test their own stuff before they graduate. I'm of the opinion that students should be taught how to write proper unit tests as early as possible. This should eventually progress to other kinds of automated testing over time as appropriate, such as Selenium or Coded UI tests. It's also useful to be aware of major testing techniques and terminology, such as boundary value analysis. With this said, it's probably helpful to give new students tests early on and then slowly "wean" them off of that. When I was in college, some of my instructors would also suggest test cases as part of the assignment. I also agree with @EllenSpertus's suggestions for having students submit test cases as part of the assignment. For learning purposes, you could start students out with "here's a piece of code, suggest 5 test cases for this" or "here's some code, write some unit tests for it." Again, you could start with giving them specific things to test for and progressively decreasing the amount you give them "up front" with the goal of eventually getting to "give me whatever automated tests you think are reasonable with your assignment" and grading them on how good and thorough the tests are. 

I noticed that most of the answers focus on the things (topics, lectures, etc.) I have found that it is helpful to focus on the students. I normally ask them for a one-on-one chat and ask them why are they here? What do they like / not like about CS? This normally opens an opportunity for making their experience more engaging for them. It also identifies those that really want to succeed, and those that don't. In my experience the students that end up dropping out are the ones that actually want to (or don't really care). It's worth knowing who really does want to succeed, and who doesn't. 

Have you looked up some recent work in the area and reached out to the authors? For instance: $URL$ As many academic articles are, that's behind a paywall, but it's a paywall that many in the community have a key to, so I figured it'd be worth mentioning here. It might also be worth checking the authors' home pages, etc. as they are allowed to post it there as per ACM publishing agreements. The abstract, however, is allowed to be shared, along with the title and authors, so here's that info: Andreas M. Stefik, Christopher Hundhausen, and Derrick Smith. 2011. On the design of an educational infrastructure for the blind and visually impaired in computer science. In Proceedings of the 42nd ACM technical symposium on Computer science education (SIGCSE '11). ACM, New York, NY, USA, 571-576. DOI=$URL$ Abstract: The blind and visually impaired community is significantly underrepresented in computer science. Students who wish to enter the discipline must overcome significant technological and educational barriers to succeed. In an attempt to help this population, we are engaged in a three-year research project to build an educational infrastructure for blind and visually impaired middle and high school students. Our primary research goal is to begin forging a multi-sensory educational infrastructure for the blind across the United States. We present here two preliminary results from this research: 1) a new auditory programming environment called Sodbeans, a programming language called Hop, and a multi-sensory (sound and touch) curriculum, and 2) an empirical study of our first summer workshop with the blind students. Results show that students reported a significant increase in programming self-efficacy after participating in our camp. 

This step could further elaborate on the details of the Process step, of course. Implementation This is where you finally code! But note that the previous steps require no knowledge of syntax at all. Those steps could be learned in the first few days of class before a single is ever seen. Here's the full outline of Rick Mercer's CS1 text (aimed at college freshmen): 

I used a card game activity to review Boolean expressions in a CS1 context. You may be able to adapt to involve more abstract propositions and more complex operators. tl;dr Students play a card game in small groups. They choose proposition and operator cards from their hands to create true or false statements. Proposition cards have text like: 

Peer Instruction materials exist for Discrete Math, for instance Cynthia Lee's Peer Instruction questions from Stanford. You may be able to adapt some of the questions to fit your needs for a HS course. To your first point, I find Peer Instruction to be an excellent balance of lecture and active learning. There is direct content delivery, but it is short, and punctuated by active Peer Instruction questions that get students talking and allow the instructor to know that the students are actually thinking :) 

What do you like about programming? Think of something you saw/did when you were starting out that inspired you. I remember during my undergrad when one of my professors all of a sudden one day wrote a program that output itself. I was blown away! Why didn't I think of that? What could I do with that? That was it for me! If your friend is like you, she might be inspired by similar things to you, and the personal approach coming from you, not from a website/book/whatever, is something that no website/book/whatever can do. 

Writing code is essential, and a part of that is debugging (your own) code. If you can't debug your own code, you won't get very far, unless you write perfect code the first time, every time. Debugging someone else's code introduces students to things that debugging their own can't - different styles, and different approaches to problem solving, that perhaps they would not come up with on their own. So debugging someone else's code helps you write better code for yourself. You learn what is good, what works, and what is bad, and doesn't work. Just as for learning another natural language (written), you can get fairly far writing and correcting your own words, but at some point, you'll benefit from reading (and possibly correcting) someone else's words. So to answer your question, yes, I see no problem in having students debug code (that isn't theirs). In fact, I would almost go as far as to say you should. But I wouldn't say that debugging code is more important than writing code. I would say it is part of writing code.