Although C11 introduced , there is no support for aligned reallocation (AFAIK). The structure that follows and its related functions provide such functionality. I wanted to provide something with as little overhead as possible, which is why there's close to no error checking done. I envisioned this structure being wrapped in another structure that does do safety checks if that is required. Is this reasonable design? features: 

Do we really need and ? No. Here is an alternative solution: You currently allocate bytes. This is wasteful. You can use exactly as much space as you need by declaring your storage any of these two ways: 

Refresher on the simple selection sort This is a simple implementation of a selection sort on which the template-meta-programming version is based: 

Review goals The full implementation (with iterators and a -like interface is omitted because of the amount of boilerplate code involved. This question is already long. A sample toy implementation is provided in the demo below to demonstrate minimal usage. I would like a review that focuses on: 

Mark non-modifying functions as . functions of yours include , and a few more. Member functions that don't modify any of the class data members should be marked as so that they can be used in the appropriate scenario (accessed through a ). 

The advantage of this approach is you can forget about and other -methods. If you need to add another character in the game, you'll just put in one of the arrays. No additional actions required. Also use camelCase for local variables instead of PascalCase. I mean you should write in the code above instead of . Another one recommendation is using of keyword when the type is obvious (but I use it evrywhere :)). 

Let's see example of how you can remove from the . First of all, view -model should implement interface which contains event: 

Using UPPERCASE_CONSTANTS_WITH_UNDERSCORES violates naming guidelines used in C#. Just use PascalCased names. 

Accessing of an almost always a sign of bad code. You should attach a command to your button which will execute some actions in view model. Those actions will update some properties which will raise event. It will cause controls in the view that are bound via bindings to those properties get updated. It is the correct workflow in a WPF application so you should definitely refactor your code. The first thought that come to your mind where you need perform an action on button click should be using of . Also you use view related classes inside a view model: 

I don't know Python, so this is a purely C++ review. 1 PYObjectBase 1.1 What is a const rvalue? Move operations ownership of some resource generally, so how can a move operation's parameter be ? It logically does not make sense. Your function... 

Demo Note: The public interface should be based on as defined in the C++ standard. This implementation is purely for demonstrative purposes. 

Performs the set intersection of two integer packs. The output set is sorted. The output set will have the same integer type as the integer pack specified as the left template argument. Tests 

The variadic template is not a pack forwarding references, it is an rvalue reference pack. For it to be a forwarding reference variadic template, the variadic template must be a function template parameter: 

This change requires that we also perfect-forward these universal references wherever they may be used: 

Replace long conditions with type traits. In order to promote from a smaller type to a larger type, you currently enable certain conversion operators based on on your type . These quickly become hard to maintain and are error-prone: you might forget to add a type, you might forget to update something, etc. In order to solve this problem, you can take a type traits approach. It will require some boiler-plate, but not much more than what you've already got with those long enable-if conditions. Traits based approach: 

Escaping the RegExp You should never do manual escaping, if an appropriate function exists. For RegExp, this is preg_quote. Another risk is that you'r escaping before splitting, so you might destroy an escaping sequence. Better do 

Escape values on output using the right escaping function. Since you use prepared statements, no extra escaping is needed for the database. Create the database connection in central place, so you don't have to change several files and functions, if the database (or your password) changes. 

It is absolutely ok to call functions from other functions. There is nothing wrong with that. However, there's room for improvements in your code. function.php: 

With that approach, you can easily make other tables taggable. To retrieve the tags for a post, you'd just say 

Since only addresses from are allowed, it is not possible to inject other addresses. So the form is protected against being used as a spam relay. On the other hand, you're instantiating a mailer and captcha class, but not using it. So you don't benefit from its protection features. Maybe you use it to create and display the form itself, but you should use to sanitize and send the mail, too. The documentation of should help you with that. 

Use to name local variables instead of words separated by underscores. Although there are no guidelines for them it is common practice among C# programmers. You should always call to get instead of creating . , and any other writer implement and thus should be used within section: 

will be of the type and you don't need to repeat multiple times. Read about LINQ since it is one of the greatest features of C#. 

You don't need perform divisions like (where index is ) in an unchecked context since overflow will never occur in this case. Also you don't need suffix for . 

FindLadders In this method you have serious architectural problem in my opinion â€“ you initialize here, then it is populated somewhere and return it. It is make your program flow unobvious and error-prone. You should completely remove field. The method should return those ladders. Also I suggest to change return type of the method to : 

As a second step, you can place all comboboxes in a map where you'll link each combobox with property selector: 

I believe it is a bad idea to use default parameter value for private methods. Default argument is an easy way to forget about parameter and get incorrect behavior. But it is just my opinion, not the rule. 

If the file contains PHP code without closing (which is recommended), you'll get a syntax error. the code and remove at the end. 

It is better design though, if any function that needs the database connection, gets it through its arguments. 

I'll keep the procedural style, you use; otherwise I'd prefer object oriented code. You need a function that creates the database connection on the first call and returns that connection on every call. 

The keyword makes the variable keep its value after leaving the function. Now the functions with database access only have to know the function, but no details about the connection. 

Escaping the Values The user provided values maust be escaped according to the context, where they are used. In this case it is HTML, so you must suppress unwanted tags, especially scripting tags. You can use or for that purpose. I prefer the latter, because the user's value is not changed. 

There is no need to put simple expressions within parenthesis in your conditions. The order of your conditions is irritating (negative, positive, negative, negative). Group them properly. That also helps to simplify the conditions. 

Since interrupts the program flow, you don't need to provide an branch. That way, you also visibly follow the good practice of using 'watchdogs': 

In CLS compliant version of the indexer you should check if argument is negative and cast it to without checked context: 

If some arguments of a public method is invalid you should say about it to user. The native way in .NET to say about something is wrong is an exception. So instead of returning some "invalid" value throw an exception: 

Also, can you say what purpose of ? :) You perform swapping of array elements many times and repeat the same code in all these places (loops commented as shuffle arrays). Define the method and use it: 

is bad since you throw the same exception for different parameters and without any details. Also I believe suits much better for . And you doesn't check on . Also it would be better to have ability to pass any as rather than only. The same can be applied to return type of the method: can be replaced with which allows you to use and . Benefit of this approach is that returned collection will be immutable (of course you could use , but I prefer in this case). Thus I would rewrite the method like this: 

View-model should never think about view if you want to write good WPF apps which means you should use MVVM correctly. Your and properties violate this rule. What are these indices? Where are they used in the view model? As I can see you use them only for updating view: 

Of course the is simplified; you can easily elaborate it to do a more sophisticated error management, but you get the point. 

To make the singleton pattern in complete, the magic method should made private, so the connection cannot be copied. Business Logic Layer Keep the business and data access layer separated. The business layer ideally does not know anything about storage. The data access layer is injected into the business layer. 

Consider using an autoloader (see PRS-0). Then you don't have to bother about, where files get included. A Factory is used to create a set of objects, which depends on some context. For example, you could have a and a for XHTML or HTML5. In order not having to check which one is needed again and again, you have an and an with and methods. Factory methods usually are named . 

In your context, a Factory is not helping you. DB Connection Don't use static methods, if you can avoid it. Inject dependencies whereever possible. Do not (finally) handle errors within your classes. Leave that up to the caller. The method to get an instance is usually called (and is one of the few cases, where static calls are reasonable). The initialization is then made in a private constructor.