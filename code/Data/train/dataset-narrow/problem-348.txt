I've used a lot of their equipment: various kinds of serial port to TCP/IP devices. They're very flexible and very reliable. Typical uses are to convert a device (perhaps a weather station) outputting messages once a minute over RS-232 to send UDP packets to a given port on a given server. Another would be to connect via telnet to an RS-232 device, perhaps a modem. Or a router console socket. Jonathan. EDIT I forgot to add the virtual com port, where a PC uses the Lantronix device as if it was a local serial port, without having to connect to it by telnet/putty/whatever. Connection is RFC 2217 or various other methods. 

The various regional internet registries have varying policies for bulk whois. I know that RIPE has rate limiting for personal information; and may well have for queries in general. You might find that one of RIPE's other interfaces is better suited for what you're doing, as it has many APIs, not just conventional whois. See $URL$ EDIT: RIPE is pretty clear about its policies and limits, see its Query Reference Manual, and Acceptable Use Policy, which give the details. 

Layer 2 redundancy is slow to converge. Spanning-tree is not a protocol meant to assure redundancy. Also be careful that layer2 is not routed: usually one of your red link will be cut by the protocol. That means that for a host plugged on floorSw5 to speak to a host on floorSw1, it will not be routed directly via: distSw2 -> distSw1 -> floorSw1, even if it would take less hops. Last but not least, spanning tree is based on timeouts, which means that you are not allowed to cascade more than 7 switches (you already have 6). If for some reason you artificially lower the timeouts, this setup may become less stable. If you can not come with a full layer3 network, I would suggest looking at the next generation datacenter switches with network fabric and trill (which is basically a routing infrastructure for layer2 devices). 

Note: I used /24 networks but you can totally use /31 (or /127 in IPv6). If your switch can route, then route with it, or you can plug a router too. There may be a way by configuring the interfaces as point to point interfaces, but I have never done this (and it would be even more awkward). 

This is exactly correct: the single router gets an "interface route" for each network it is directly connected to. it doesn't know about anything else unless configured with static routes or a routing protocol to learn the routes. In your example, if the hosts are configured with the router as their default gateware (by DHCP or any other method) then all the hosts will correctly forward to the router. The following are taken from a real production router with two interfaces and a single static default route: 

You'll need to have a hostname and a domain and generate the keys for ssh to work. My notebook says: 

Addressing the problem of accepting incoming email via either internet connection: you could give your mail server two ip addresses (on two ether interfaces, or as a secondary address) and give it source address routing, so that it gets a different route depending on which IP address it is sending from. (howto for Linux.) In the DNS, advertise server with two A records (sending clients will pick at random); alternatively with two MX records (can prioritise). 

eBGP makes your border routers learn about best routes to reach each prefix on Internet. iBGP will let all your internal routers know about those external prefixes. R4 for instance should know that some prefixes are preferred through R1, even if it's directly connected to R2. iBGP does usually not use internal routing protocol directly. If R1 anounces a prefix with its local interface as a source, either: 

Then put your host in a trunk with all the vlans. Having an interface on your PC to each vlan would do the trick: 

If you can directly attach 2 hosts, do it. If the link goes down, all your routing protocol will react instantly. Otherwise you will rely on routing protocols timeouts. Moreover a more densely meshed network will guarantee a shorter path. 

You want to null route, so add a static route everywhere to do that. 192.0.2.1 -> null0 (the IP is reserved for that usecase). Then announce every network you want to rTBH through 192.0.2.1. That would do the trick. $URL$ 

Not disagreeing with other answers, but an important takeaway is that people often are meaning slightly different things with similar and identical words. A couple of points which are worth adding, especially if you do anything numerical like try to work out the maximum throughput of a given FTP connection over an X Mbit/sec line: 

You're right: you can have unnumbered point-to-point interfaces, for the reason you gave. Have a read of this explanation of unnumbered interfaces work in Cisco routers. We normally do number interfaces for the convenience of monitoring. [EDIT] Ethernet interfaces, which are inherently multipoint interfaces, always get numbered. The two-host ethernet network, which looks like just a direect link between two routers, is treated by the router just like any other ethernet segment and needs an address, mask and so on. You might also like to read RFC 3021 "Using 31-Bit Prefixes on IPv4 Point-to-Point Links". 

The layer 2 broadcast address ff:ff:ff:ff:ff:ff is used on ethernet frames and is supposedly broadcasted on all equipments. 255.255.255.255 is the layer 3 address that is used to adress the exact same hosts. Note that: 

I didn't get the IP of your laptop, but I am guessing your pfsense box is missing a route to it. traceroute from the pfsense should help you. Otherwise, it smells like pfsense is dropping icmp echo requests (which makes network debugging harder). 

When monitoring some various Cisco devices with SNMP, I am getting Processor and IO (or lsmpi_io) memory usage (Used vs Free memory). As I am understanding it, IO is the memory used for packets being punted to the main CPU, whereas the Processor memory is used by the rest of the system. Is this correct? What kind of memory usage should be monitored the most? 

It is not necessary to have at least one port tagged per vlan. You can let all your ports untagged. A tagged port is usually used when you have more than one vlan in it. To determine which vlan a frame is belonging to the switch is setting a tag. The tag is located in the ethernet header: $URL$ Typically switch uplinks are tagged, because they are configured with several vlans. 

EDIT: config attached. It's a bench config in order to narrow down this problem for units in the field. 

You have them all correct. 5th fragment: remember that the routers can change their settings at any time, and the fragmentation limit can change from one packet to the next. When you fragment already fragmented packets, you normally see something like this: 

Understanding the characteristics of your data can be critical. If you can't get what you need with IPFIX, and it's somewhere you can get pcap files from, tcpdump-type tools plus awk-type tools will give you an answer pretty easily. Use tcpdump or similar to get the packets you're interested in: 

Consider the directed broadcast coming from outside a local network. As the routers forwarding the packet don't have the network mask (of the far end) it is not possible to identify a directed broadcast IP address. For example is a broadcast address for a /28 but not /24 network. A router connected to 192.168.0.0/28 might or might not accept the incoming packet and broadcast it. See for example RFC 2644 on this topic. Also remember that there are critical layer matters in broadcasting, from the point of view of switches and media transmission in general. See for example my answer here. 

Might be a case of unicast storm flood If pinging from server2 to server1 is fixing the issue, that might be that. Otherwise, I would check that there is no proxy arp anywhere in your network. 

I personally enable cdp/lldp at least internally (some exchange points usually forbid them though). no ip unreachable is not a good idea: it breaks PMTU discovery for instance. $URL$ . ICMP unreachables can be rate limited though. 

The answer is both technical and historical. IP is the network that interconnect several networks. As ethernet nic have a MAC adress at layer 2, something else is needed at layer 3: IP address. With IP, 2^128 devices are theorically adressable, whereas MAC address are limited to 48 bit. Keep in mind that ethernet is a flat, commuted, broadcast network: it would not scale worldwide. But I agree with you on one point: it is totally plausible to have an IP network without ethernet, or at least without a broadcast layer 2 network. 

Yes, a set of equal values will give a Jain of 1. Your values are extremely similar, I calculated 0.999971. 

What else could this be? What changes can I make to the router to give more information or avoid the problem? The only workaround I've found is enabling telnet on R1, which obviously I'm loathe to do. Logs follow. Thanks in advance Jonathan Cisco is 867VAE with C860VAE-ADVSECURITYK9-M), Version 15.5(3)M 

I've certainly seen public wifi route different services out through different border routers: TCP to port 80 went out of one machine, SSH another, and UDP another still. So recipient saw different source addresses depending on which service. I've also seen backup lines come out of different IP addresses, though normally on purpose. What you're describing sounds consistent with a router doing NAT out of two outside interfaces, with routing depending on the target AS. Or a tunnel with another NAT egress point. Might you or your ISP have done such on purpose or by accident? I suggest checking your border router and your ISP.