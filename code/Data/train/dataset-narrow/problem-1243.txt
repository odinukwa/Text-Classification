Is this actually a counter? It seems like a summation, and should be called something like accordingly. 

This is also a raw type. Its name also tells me nothing. What are you mapping? A better name would be , or just . 

You're missing the (or if you're using JDK6 or below) on the right, which means the right side is a raw type and not a generic. Your IDE should be configured to warn you about this. In addition, what does mean? It's completely unclear even from context. You should almost never use abbreviations unless they're industry-standard, and maybe not even then. 

This becomes an algorithm instead of the algorithm you're using currently. You can then post-process the map to filter out the companies you aren't interested in. 

To me (admittedly a non-PHP guy) this is an extremely strange pattern. A and an would seem to be model classes, but here you have them making database calls - you're mixing concerns for these objects. This is a great situation to use the data access object, or DAO, pattern: 

Here you never refer back to the values stored in the map. If you're not going to refer back to them, you might as well just use a . As an example, here's how I would store the prices: 

This code is unclear to me. Why instead of just - do we expect the input file to be inconsistent with itself? That seems like an important caveat to call out in comments. The behavior of the counter is also very unclear. You only want to store factories with a total price of at least 10000? It would be simpler to do the summation in one step, then filter out the unwanted factories in a subsequent step. 

Dependency injection is infectious. Somebody somewhere has to know how to construct your object. If your object has its dependencies injected, then it has to know how to construct the dependencies. If it doesn't know that, then the next level up has to know, or the next level from there, or.. etc, etc. The result of this is that.. Your classes become more tightly coupled. Some of your classes become aware of the dependencies of their other classes, by virtue of having to inject their dependencies. A good dependency injection framework can help with this. I don't use PHP much so I'm not aware of any. 

The way I would do it is by simply representing the headers as map of to . That'll be the most flexible and extensible situation, since HTTP headers are added over time, and custom headers are completely acceptable and allowed for by the standard. Any solution involving struct fields will require updating as the standard expands, and can't handle custom headers easily. (You could handle custom headers the same way as standard ones, but then you'd have the problem that their meaning is not standard, and different clients could use them to represent different things.) The downside of making the map values be is that you'll have to translate into the proper data type wherever you retrieve them from the map, rather than only performing this translation when you read the request headers. This is an acceptable trade-off for the flexibility you gain, and you can find a way to encapsulate it if desired. 

Regarding the complexity, like in Insertion Sort, the worst case scenario is when is sorted. Keep in mind that if you swap the items from stack to stack using the order of the items in will be the exact opposite of the order in which the same items had in . This scenario has a complexity of \$O(n^2)\$. Let me know if anything is unclear. 

Another way to go at it (which I personally like the most) would be by using the and operators and not managing s and s. In this case, the would become something like the following (still not tested): 

This approach calculates each result in \$O(n)\$ time and has a space complexity of \$O(1)\$ and, IMO, is the way to go if the function is calculated not so often. Cached-result processing In case the function is calculated often I'd suggest another approach. If you use an appropriate data structure (an arraylist should be ideal) you can implement the function in the following way: 

In addition to what's been already written, I'd say that it shouldn't be necessary to implement the method. That is a test method and it should be in a test module. Regarding the implementation, I'd make the following operations: 

As a side note: I'd use anyway, even if performance does not improve much on small numbers, but this can be seen as a personal preference. 

There's one thing that is particularly disturbing me: the last block. That's an example of Busy waiting and that's something that should be avoided IMO. A possible solution to this problem could be to store the objects to a and once you have created all the threads you run a for each thread on such list. That being said, I'd suggest to take a look at PLINQ and TPL. One last thing: I'd remove the in the block also. I'd say that the instruction should be used only in a method. See here and here for ways to handle exception when working in an async way. 

is repeated code (the two cycles are almost the same) and could be transformed in a method. Other things seem ok. 

The end result - after applying the changes in the first solution and the changes for these 3 points - should be something like the following: 

The first thing that pops in my mind is the naming you used. For example, from a method called I'd expect to receive a and not a string. The same from . In the method the variable should be renamed IMO as the name is not so meaningful. The same regarding . Also, commented code is only confusing. I'd remove it. In addition: 

I'd suggest doing the implementation of the various methods in the class. In this way, from the you just have to call . It's fine as long as you call the method very few times and space is critical. Otherwise I'd suggest to keep in each node a balance factor (like in AVL trees for example). 

As @Heslacher mentioned in his answer, naming should be changed into something better. I'd suggest to change: 

I would try to split into simple pure functions doing one thing each. Search for Robert Martin aka Uncle Bob advices on clean code. Is this just a helper to display an array: 

I know good naming is hard but maybe a name revealing more about what the Router is doing would make it easy to read your code. Also you don't seem to provide the files defining the routes and both links to Github seems to be dead (which is why you need to provide the files, not the links!). 

Note. Your code looks cleaner without after function declarations. You watch and then update it upon change - this looks like a loop and may lead to your browser crash. Read best practices on using Angulars . 

This property is either being created when it is defined, or else, the calls like will still fail. You may want to check for existence of that property instead when calling it. 

In that case, is a function argument, so using it won't throw any error (in contrast to a variable) and hence there is no need for . Also note that evaluates to , so the two expressions are different, strictly speaking. 

First thing that strikes me is the inconsistency of naming. Why using different styles for constants? Your does not need to , see here. I would use something like instead of as Form has another meaning. As a personal preference I like to write my as 

Nice work! I presume the complicated way of getting the right element measurements is to cater for many browsers, won't comment on that. 

looks hardcoded and non-reusable to me, but then again, I don't know its purpose and the level of abstraction. 

Then it is the job of the directive to pick the right model and make it available under this name. This way I can change to inside without breaking things, so the directive is more encapsulated and re-usable. 

which is, however, blocking, may result in delays, and makes the page unsuitable for offline testing. On another note, library such as async loader, does not seem to work with this particular script. 

There is no way I see here that this directive listens to an event and no clue what the event is. A better design would be: 

The last argument inside is too far away down, making the code hard to read. It is better to define your function separately, and use it a short line inside . Also executing your function inside is a recipe for errors and hard reading. 

That way the original list is not in the Controller but the Service, and Controller simply asks for it. Here the jsbin to enjoy! 

Again, pure functions without side-effects are easier to test in isolation. Use the and methods on arrays for shorter and simpler code and libraries such as Ramda (my favourite) or Lodash. 

You define as array of anonymous functions, which is a bad practice in itself. You can't reliably test these functions as your index will change any time you update your array. A better way would be something like: