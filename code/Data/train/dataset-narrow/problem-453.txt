A COPY_ONLY full backup is still a full backup. The only difference between the two is the COPY_ONLY will not reset certain tracking bitmaps. This means your differential backups will eventually be the size of your database. $URL$ 

Since you can't make it happen every time a backup occurs, I'd run procmon and filter against the folder you're sending the log backups. When it occurs, stop the procmon and investigate what applications are taking locks on the file. My guess, though, is going to be antivirus or some other filter driver filesystem watcher. The fact it happens more frequently on larger files is a giveaway. If you know it's going to fail, or is currently having issues you could use process explorer and search for the file in the handles and see what processes are touching it. This is happening at the windows/driver level, not the SQL Server application level. 

This is not how the process works. Checkpoint itself doesn't flush log records, they may need to be flushed from the log buffer because of WAL (Write Ahead Logging) enforcement for the data pages being flushed but it will do nothing to the log file. The setup done with the agent job and checkpoint is not helping one bit. The unit of transport is a log block, not individual records. When log blocks end and are flushed to disk, if the database is part of AlwaysOn Availability Groups it is copied into (depending on version) another buffer and eventually sent through the transport when the secondary checks in. This is a gross over simplification but shows how it works. What to do next? 

You'll either need to add a unique field (such as servername, etc) or configure some way of making each record unique. Generally, if not designed for at first, will require a schema change. Commons solutions are to use even/odd numbering in identity columns/id fields or using the source host name/database name. 

Each of these has its' own merits, however since this change is environment wide you'll want to have the least amount of moving parts and administrative overhead. A Local Host Record (editing the HOSTS file) would have to be completed on each server so that it could resolve the proper address. This would be bother administratively burdensome and also riddled with troubleshooting issues. A SQL Alias would also work but would fall under the same set of issues as the Host Record. Hardware Load Balancers (or software load balancers, depending on implementation) are a great alternative as they can do the DNS swap for you. This could bring up some issues with Kerberos or Certificate signing, however those application could be singled out and fixed (potentially, depending on your environment and resources). The DNS Alias is roughly the same as the Hardware Load Balancer option and the same set of issues would occur. However this option does not require specialized hardware or software in order to complete. I would recommend either the HLB or DNS Alias options. 

The root cause of the issue is that you're unfamiliar with how CheckDB works, and that's okish. Since you know there is now a level of understanding needed, check the link I gave and read Paul's posts. The snapshot files will be made for each data file, it's a snapshot and not actually writing to the database itself. When you read Paul's series I believe you will understand what and why - along with this answer. 

Find the OU with the CNO in it Create a computer object, name it your DNS listener name Set the security on the new VCO and give the CNO full control over it (full isn't required but the list of needs is fairly long so just give it full control) Create the listener through SSMS/TSQL/Powershell 

Through many hours of painstaking work. You can use sys.fn_dump_dblog() to look at transaction log backups that are taken after redo and undo has run. Since the SQL Server Log records and files aren't documented, except for physical and logical architecture, you'll just have to search the internet and make your own best guesses. If you're asking because you'd like to make software to deal with the log, then you'll need to get in touch with Microsoft Partner Resources. Otherwise, you're on your own, armed with the collective knowledge of the internet and volumes of your favorite beverage. 

How fast does an unladened swallow fly? Seriously though, there is no way for us to tell you. You'll need to take into account the rate of log generation + latency + blocked redo + sync/async status. The better question to ask is, "Do I have enough space on my primary for my transaction log to NOT TRUNCATE for an hour?" 

Get really friendly with your network and security teams. Ask them, politely if need be, to create a file share for that folder and allow your service accounts access to said file share. Other than the service account, this really doesn't have any involvement with SQL Server. 

You only have two nodes. If there is a failover... there is only one node to fail to, so having preferred owners set is... kind of a wash. It doesn't get you anything, to be quite honest. 

Which you've stated isn't part of any of the SQL Resource Groups, isn't online (failed) doesn't have an IP associated with it (as far as we can tell from your output). This leads me to believe: 

Yes :) Scale out the reporting workload to something such as a readable secondary in an availability group, transactional replication subscriber, read-only copy of the database (depending on data freshness required), CDC/CT to another server with SSIS, etc. It'll also isolate your storage subsystems (unless it's on the same SAN/NAS/etc.) from each other. 

It's called group commit, and it stalls the normal commit for a few ms if it can group more together for better overall performance (roughly-ish speaking). I believe it was added in 2008R2. 

The virtual accounts tied to the service sid (in this case ) will retain any permissions given to them. This is because they don't go away, they are still tied to the service via the service sid. When you change the account, for the example you gave, other than a few house keeping items there is nothing else given. It is very well possible to change to a domain account that does not have the proper permissions to even start the SQL Server service. Nothing is transferred. For example, if you had an account that had full access to read and write to a directory not in the SQL Server standard locations (that are part of the install process) and changed the account, the permissions stay with that account. The new account would need to be granted those permissions in order for SQL Server to properly work with anything in that folder. The last part of being linked to the virtual account. No, they are not linked. The virtual account and service sid will stay with whatever they had. 

Mirror your backups, for starters. Have more than a single recovery sequence. Check the backups and take action when something does go wrong so that you're not exposed to risk. Disks die, things go wrong. While it shouldn't be happening often, it will most likely happen to you at some point or another in your career. Having a good restore and backup strategy to take care of this is what will help. 

Please, don't ever use this as the first line to attack - unless you don't like your job and are looking elsewhere for employment. Check to see what is being corrupted, how bad it is, the extent. If you aren't sure, hire a consultant that specializes in corruption. 

I'm NOT stating this is exactly how SQL Server works in all and every case as there are many nuances... but this should be a similar approximation. What does this all really mean? I highly doubt, as Aaron has said, that you'll ever encounter rollover on the 64-bit values in the current hardware climate. If you did, it would be easy to spot and really be more of reporting inaccuracy than any real issue in my opinion. 

I'm assuming you're going to bind these directly to the hardware NICs, otherwise it's kind of a moot point. If the host already has the NICs teamed, etc., then you really shouldn't need multiple interfaces in your guest (except for management or performance reasons, but not for health check reasons). Cluster health checks go over any interface you allow cluster communication on (the public/private nomenclature died with Windows Server 2003). NetFT will take care of which interfaces are what and the metrics for each, adding additional interfaces wouldn't really be ideal. Instead use teaming or other technologies to make sure the interfaces stay up and available. Setting the client network for client and cluster communication will also do what you're asking without the need for extra interfaces. Edit: Unless you need to segregate traffic, such as the AG traffic for specific reasons such as NICs of higher speeds, network appliance between (compression/encryption), auditing needs, network protections, different virtual switches, etc., then there isn't really a need. If you meet one of these items, then it would make sense to have multiple NICs. Having a single NIC may require you to make changes to the host configs to have larger receive or send buffers.