You could pretty easily change the starting and ending values, how much goes up or down each time, or what you want to print. Speed up what you can. I like ExamView for building banks, but it's really clunky to actually enter questions. What I've been doing this year is type the questions in Markdown, exporting as either RTF or DocX, and importing that into ExamView. I can create questions way faster in Markdown and MathJax than I can when I have to click around in ExamView. Rinse, repeat The other answers have really good ideas too, and no reason to repeat them here. 

They've got an AP-1 category which is based on past FRQs. Not the whole question, but pieces. I'd make sure you hit every one in that category during the year. The String-2 and Array-2 are also good. I use CodingBat and similar questions as warm-ups all year long. We start pretty much as soon as students are able to fill in a method. Pretty much anything that involves looping through strings or arrays will help them with the test in May. Usually 2 or 3 of the FRQs involve iterating through some type of list structure and doing something with the values. I try to get my students to a point where they really don't have to think about loops, they just type on when they need it. 

Students need at least a cursory understanding of how web pages are built before moving to the back end. Last year we did a project where there were groups split into front end design, front end JS, and backend PHP. The JS and PHP groups weren't able to get started without going back and learning the very basics of HTML. If it were me, I'd probably start with basic HTML and CSS and then go to JS to make something interactive and shiny. 

I probably should have asked this last week since we just finished up finals today. But, there's always next year :) How do you create a final exam that is a valid assessment of an entire year or computer science, but can still be completed in a couple of hours? Ideally I think a large-ish scale project would be the best assessment of where the kids are. But two hours just isn't enough time. I'm not a fan of throwing 2 hours worth of multiple choice questions at students. Sure, I could probably come up with 75 or 100 multiple choice tracing questions. Make sure there are some recursive tracings and it could easily hit 2 hours. The other side though is coming up with a coding assignment that is doable in 2 hours. To do that you'd probably have a few of the upper students finishing in 15 minutes. Sort of the same issue as the discussion we had a few days ago on students finishing labs quickly. I normally do a hybrid of the two, and it works okay. A multiple choice section that should take about half the period and a couple of simple coding questions for the other half. This semester I only had one student that had to stop because time was up, although a few stopped themselves early because they knew that had done well enough for the average they wanted. In my 2nd and 3rd year courses I normally do a take home project, but I don't think that would work as well in my first year AP-A course. 

I teach them while loops, for loops, and for each loops; in that order. What I've found is that while loops tend to make the most sense for students. The idea of while I'm hungry, eat pizza is something they understand. But, forgetting to change the condition is really common so we wind up with a lot of infinite loops. I sell for loops as a loop where is harder to forget to change the counter. I tell them for each loops are a less codey way of iterating, but generally only work if you want to start at the beginning at look at every element. As long as the code works, the only time I care what kind of loop they use is when we first introduce that type. During the while loop labs they have to use while loops. Once we've covered loops, it's their call. I don't explicitly cover do while loops as a topic, but they do show up in a couple of project shells. Most students settle on for loops when it's their choice. 

We have a class set of textbooks. When I started at this school I was told that I needed to check them out and use them. I talked them down to only issuing me half of the class set and one book went between each pair of computers. They've been in the storeroom for the past 2.5 years. The first year we also had codes to give out to students so they could access the same book online at home. I handed out codes to every student - about 125 of them. At the end of the year, about the time the district was deciding if they were going to purchase online codes for the next year, I polled my students how useful they found the online book. 3 out of 125 had gone home and created an account with the code. 1 of those 3 ever logged in again after creating the account. I didn't hand out codes the next year. Kids are sitting in front of a computer. If they need something for reference it's easier to Google it than to try to find it in a book. I also think that using online resources, especially ones that I don't curate, gives them the chance to work out what resources are valid and which are not. When I have used a textbook students tend to take what's in the book as the gospel; that it's the only way to do something. If they find something online they're much more likely to doubt it and work through whether it's actually a valid resource. Not directly a CompSci skill, but a really good skill to learn. 

Rubber Duck Debugging. A few years ago we bought a bunch of cheap rubber ducks. Students with questions have two options. They can either ask their neighbor or explain to the duck what they're trying to do. If the duck didn't help, then they can ask me. I've moved to a different school since then and haven't bought any ducks. I really need to buy some ducks. 

You don't necessarily have to rewrite the entire thing every year. Most of the tests I give are 40 questions. What I try to do is add 10 or 15 each year to the bank that the test is pulled from. That way, each year there's some new stuff. But nobody ever sees the entire set, so questions from past years are new to them. Tweaking what you have. For some questions, it's pretty easy to tweak an existing question. 

I use phone numbers. You know your cell phone number, and I don't. That makes it a private instance variable. I have no way to get it without you telling it to me. If it was a public instance variable, instead of you knowing it and me not, it would be tattooed on your forehead. Then, when the creepy guy who wants to ask you out sees you in the hall he can look at your forehead, get your number, and put it in his phone. Congrats, you have your very own stalker. But you do want to give out your phone number to some people, just as long as you can control who gets it. For that you need to keep the instance variable private, but make a public getter / accessor method like getPhoneNumber(). Now you can do whatever you want to decide if you want to share your phone number with the guy in the hall. Is he creepy? Does he have nice friends? Is he missing teeth? Does he drive a nice car? It's up to you to decide. And then we backtrack a bit. Tattooed on your forehead is a little over simplified. If it was truly public, anyone could change it. It's more like it was written with washable Crayola marker. Works as a hook for why we need both accessors and modifiers. I teach mainly AP-A in high school, so those are the only two modifiers I really worry about. We brush on protected when we get a little deeper into inheritance, but by that point they've got public / private down pretty well so it's a short hop. 

I try to give them as many options as possible, without it becoming too much of pain for me to handle. Here's what I've currently got working. Slack Trying it out this year. Originally was thinking it would be a good way for the class to talk, sort of like the Facebook Groups in one of the other answers. Didn't really work so well for that. Only a few students are actively using it. But a few do and it works really well. I've got the Slack app on my phone so I'll get buzzed if someone messages me. Canvas We're using Canvas on our campus and it's easy for students to message me through that. This is where most students contact me outside of class. Like Slack, I've got the Canvas app on my phone. I post to the discussion boards in our Canvas class, but students very rarely respond and even more rarely start their own discussions. Email Very few students email me, although it's common for parents to email. I've probably only had one or two students email me this year. I do make a point at the beginning of the year that if they need me to help the only times I'm always available is during class and after school tutorials. I may respond outside of that, but it's not guaranteed. And of the 120 or so students I have this year, there are only about 10 that have contacted me outside of school hours. None of these are very intrusive, and they're all pretty easy to ignore if I'm doing something else. 

I use an online auto grader for probably 95% of the assignments my students - high school, AP-A - do in class. Before that I would run unit tests on the submitted code and then leave comments. But I've found that the immediate feedback, especially on smaller assignments, helps them learn to solve the problems on their own. Plus, it saves me from having to look at 10 or 15 versions of their code. I typically only look at the one that works. For style, I'll leave comments on completed assignments when it's bad. What I've found really helps though is to not help them with questions if the code is a mess. Especially early in the year "clean up your code, and I'll come back" is my stock answer if it's messy. After a couple times they'll clean it up on their own, and usually they'll figure out the problem on their own. I don't have specific rules other than it's easy to follow. Coding styles tend to be pretty subjective - braces on the same line, or the next line; should the brace be indented; should an else be on the same line as the brace closing the if. I tell them it's like handwriting. If it's neat, it's easier to read. I will show examples, both good and bad, anonymously on the board. Some kids don't understand what a good snippet of code looks like. But almost everyone can agree on messy code. 

In the weeks leading up to the test I typically only use the actual past tests for exactly that reason. But even when I don't use the released FRQs I still grade on a 9 point scale so they get used to it. Here's a few more that tend to come up. For return methods, create a variable of the correct type, do something to it, and return it. If it's a constructor, it should initialize the instance variables. On full class problems - either write a full class, extend an abstract, or implement an interface - it's usually a point or two for the class signature. 

The first 6 or 8 days of the year we work in Jeroo instead of straight Java (there's a Python mode as well). It serves as a very quick introduction to syntax, ifs, and while loops. I've found it helps when I can go back later in the year with "remember in Jeroo when..." What Jeroo doesn't have is variables. You can't do things like loop 5 times. You can only loop or if while a Jeroo , , or something like that. They're not directly using variables, although they're using boolean conditions. I've found that starting with methods like makes the idea of easier to wrap their heads around when we get to it. We only spend a few days in Jeroo because students start to get frustrated with what it can't do. You can't tell a Jeroo to loop a set number of times. You can't ask a Jeroo what column or row they're at. You can't ask them how many flowers they have. Any of those frustrations work really well as a hook into why variables are useful. 

How do y'all decide when to allow a student to resubmit an assignment rather than just taking a low grade? I have 3 things that tend to pop up when projects get turned in. Wrong Thing: Student turns in starter code, an earlier version of their project, or the entirely wrong files. Wrong Files: I mostly teach Java and there are always a handful of students that turn in the files instead of files. It's not the same students each time, so I assume it's an honest mistake. Cheating:: Yeah, there's always a few. I teach high school and tend to allow resubmissions when it's clear that what they turned in doesn't match up with what they're capable of. But I think part of that may be from the pressure in high schools to not fail anyone. I'm also asking more about larger scale projects and not just lab style assignments. Projects that might have a significant affect on their averages. 

Our district has Adobe Connect. It's used mostly for remote training, but any of us have access to setup classes. I use it pretty much any time I demo. I also project my screen. Most watch on their screens while they're typing, but some like to look at the projector screen. 

I had a smart board at previous school. I used it when we did scratch, and it worked fairly well for that. Not as useful when teaching typed languages. But the screen was pretty small relative to the size of my room so it was tough to see from the back of the room. My room now doesn't have a smart board, but has a very large projector screen and it's way better because it's way bigger. Although, I do sort of miss the smart board when kids present projects. It was great for demoing game projects. 

I'm guessing everyone here, high school teachers at least, have spent at least one period in the past year working with a class when you either don't have working computers or a working internet connection. So what are you go to activities when the computers aren't working? I've got a couple, but am curious what I'm missing. Worksheets - I use 'em, but I don't really like 'em. I do keep a set of worksheets printed though just in case nothing is working. They're generic enough that it really doesn't matter what topic we're on. And they work well for emergency sub plans. CS Unplugged - I 've got the count the dots activity printed out. One set on normal sized paper for me to demo with and a dozen sets printed on business cards for students to practice with. Human Sorting - I line up the kids and we go over sorting algorithms. I'm sure I'm missing some really good ideas. Let's hear them... 

Next year I'm planning on having some of my second and third year students build an API that can then be used by students in our mobile development classes, and possibly web development classes. Hadn't thought of this before reading your post, but I think I may have part of the requirements be that they write documentation for the API so that the other classes can use it without having direct interaction with the authors. Since git, and specifically GitHub, is part of the task it makes sense that the documentation should be written in markdown. Seems like a good excuse to go over it in class. A couple years ago I had a student that started teaching themselves Latex as part of an independent project. His goal was to create a calculus equation solver. He did fairly well learning Latex, but I'm not sure how I would go about bridging that in to a full class project.