That's not a chain; it's an agglomeration of CA certificates containing three roots, of which only one looks "interesting", a bunch of subordinate CAs, and two bridge certs (to versions of Cybertrust). Just as one might infer from the URL. HTTPS (and SSL/TLS) servers are supposed to provide the complete cert chain up to but not necessarily including the root, and it should never be necessary to install any non-root cert as trusted in Firefox. If you look at the Firefox provided store -- and Windows, and Java, and probably others -- you'll see that most of the trusted certs are roots, although there are a few exceptions. (OTOH certs that are explicitly distrusted frequently are not roots.) Bridge certs are useful mostly for a server to use with clients that don't have the needed root(s), usually a new root against an older client. Thus it should be enough to install the three roots, and quite possibly only the one for "Trust Center RootCA v2.0". Plus maybe the bridge for "Internet CA v1.0" to "Baltimore Cybertrust" (in Servers tab not Authoritites) if your servers use that, since there does not seem to be a root for it. Yes, each one must be installed separately, at least using Firefox. I believe there are commandline/standalone utilities available for NSS, the Mozilla module that does cryptography and SSL/TLS used by Firefox among others. I expect these tools probably can do something as basic as add a cert. They aren't included in the Windows install of Firefox; I don't know about other platforms. NSS is opensource, so presumably you could download and compile it yourself, but I'll bet that would be much more work than just clicking the GUI a few times. 

If someone else is running Java, this method ignores them. If you want several Java processes OF YOUR OWN, assign separate filenames. If you have so many (maybe hundreds) that separate filenames don't work, you have a harder problem. 

As noted in ChangeLog, this is sent if the peer is a new enough version and 'session multiplexing is disabled' () which is the default and is changed only if you specify (up to twice) or use or a config file to set (anycase) to a value other than or . So you should specify any option(s) other than or . Note that even if the peer is old and we can't actually send the option, by default the client still won't actually do session multiplexing (unless hacked). But remember 'forwarding' (often called 'tunneling') which also uses channel multiplexing underneath can still be done as configured by its options without any session multiplexing. 

The "latter" in my description, privatekey AND cert chain, is PKCS#12 as you originally asked. (PKCS#7 handles the case of ONLY cert chain.) To create PKCS#12 most simply, use the commandline operation with the option. There are several ways to combine the options of this command, but two simple ways for a 3-level scenario like yours (root, mid, leaf) are: 

Originally the config file was only needed, and specifiable explicitly, for and because of the relatively complicated parameters needed for cert request and issuance. added in 1.0.0 did the same, and added in 1.0.2 (but undocumented) does so for no reason obvious to me, maybe just fashion. originally was about displaying data, which mostly doesn't need config (see below); some minimal CA-like features have been added over time, and (only) they use a file in the config format for extensions; this is identified by and must be explicit. However, since about 0.9.8 (further back than I can conveniently check), there has been a concept of automatic configuration for commandline subcommands and also applications using libcrypto, even those that don't have operation-specific or program-specific config items. This is described in the man page config(5) on your Unixy system with OpenSSL properly installed, or on the web and is affected by envvar . It started with configuring custom OIDs which could well apply to , and ENGINE settings which might if you use a hardware key (to sign) or GOST keys (at all). Defaulting FIPS mode (in applications not coded for it) was added mid-1.0.1, and settings (or defaults) for SSL/TLS in 1.1.0. 

Like shell, uses to find the executable file for a simple command name. (Unlike shell it doesn't try aliases, functions, and builtins first.) I don't have Debian at hand, but on my Ubuntu 14.04 (which shouldn't be much different) standard/packaged is in , and a test user with no customization gets a setting of 

openssl x509: If you mean the Subject and/or Issuer field(s), the simplest and most readable way (IMO) is 

Signing: I don't recall if this is a change, but v2 man page says either or can specify the signing key. Although not explicitly stated here, anywhere you need to identify a key you can use either the userid (conventionally but not necessarily an email address) or the keyid. If you have multiple keys for the same userid, use the keyid to specify uniquely. Verifying: the keyid is in the signature packet, and the (public) key is found automatically -- unless you don't have that key in your keyring in which case it says and if you want to check you have to get and import the key. PS: How on earth do you use a GPG/PGP key for SSH? AFAIK neither OpenSSH or commercial (Tectia) SSH can use PGP format keys. 

This makes more sense; a newline-separated list of filenames can be generated by a tool (like ) OR can be typed easily enough by a human who might well want to specify options also, but a null-separated list is much more likely generated by a tool and thus only filenames. 

or if you want only the name field(s) change to and/or . There are other formats, and if you want non-trivially encoded data to display usably you may need additional options; see the man page on your system or at $URL$ . If your input is "DER" (binary) not the much more common "PEM" (textual), add . If you mean extensions than can contain (Distinguished)Name fields -- I count SAN/IAN, NameConstraints, CRLDP, AIA/SIA, although I don't see how DN would be useful in the latter three, and there are surely more -- that's not supported that I know of. But see next. other: dumps the exact types, lengths, and mostly values of any ASN.1 BER/DER structure, including a cert. For X.509-form extensions (wrapped in OCTET STRING) you can use to ASN.1-decode the nested structure. Identifying and selecting desired fields is your job and in general can be difficult, but since both DNs and extensions label each of their elements with a preceding OID (which OpenSSL calls just OBJECT) and decodes all OIDs known to openssl (and you can give it additional ones) you can usually just visually scan for , and the like. Note on PEM: many functions create or accept and ignore "comments" in PEM-format data, but does NOT. It will handle the dash-BEGIN and dash-END lines, but almost anything else it will treat as part of the data causing wrong results. Verify your input file (or pipe or whatever) contains only the one cert. 

(Tested in 4.1.2(1) on RedHat and 4.3.11(1) on Ubuntu) (3) timestamps aren't written to the history file by default, so unless you've (previously) set/forced for your users or they have (previously) deliberately set it, lines/entries read from the history file will (all) have the current time (4) changes the userid and groupid but not the rest of the environment, so your command will look for the history file of the user running it, not the one in ; add (5) It might be easier to just read -- at least for userids that run bash and have a home directory, which system userids mostly won't 

META: Although this is a feature of security software (OpenSSH) it isn't clearly a security feature, so its topicality is borderline. It might fit better on superuser or serverfault. But I'll leave that to voters. Anyway, the code block in is: 

(also the earlier and less capable ) uses internal routines that implement SMIME format only for Content-transfer-encoding: base64 and don't support Content-transfer-encoding: binary. FWIW these are documented as bugs, so might someday get fixed. As a workaround, on Unix you can discard the MIME headers with leaving the binary body, which can handle (as der): 

(1) is a shell builtin; there is no executable (2) makes noninteractive, and noninteractive shells don't use history. This is not very well documented, but I need both and to get history into a shell with : 

except by default it requires ExtendedKeyUsage if present includes "emailProtection" id-pkix 3 4 not (solely) codeSigning; to override that add . If the cert hierarchy is more complicated -- i.e. if it uses a chain -- then there are a variety of cases depending on what cert(s) you included in the signature file with , what cert(s) are in your default or specified trustore file and/or directory and in if used and whether you specify in 1.0.2 up, and without a more specific question I don't have time to write that much. 

Quote ssh-with-port as a single argument like or . What you wrote specifies as the argument to the option then the option to rsync (same as ) followed by a probably spurious filename, which would give an error if connection (and authentication) succeeded. Do not use . That would not specify the number 2222; in singlequotes it would specify the actual string which is not a number, in doublequotes it would expand to the second positional parameter of your shell, which is probably an empty string, followed by . Alternatively, as the man page says, you can use the ssh config file (normally) to specify the port automatically (for all, one, or some hosts). That also applies to other things you do that use ssh, such as and of course , which is probably desirable here. 

"reliable transport" is networking jargon for "delivers the data without loss (unless signalled), duplication/replay, alteration, or misordering". And similarly HTTPS runs over TLS (formerly SSL), which builds on TCP and provides essentially the same service (reliable byte-stream transport) but with the added properties of confidentiality and integrity (unless signalled error) even against intelligent attackers rather than merely natural errors and faults. There are performance differences, but AFAIK the only service differences are that TLS doesn't provide TCP's 'urgent' pointer aka out-of-band, or separate close per direction like TCP's 'half-closed' states, and HTTP/HTTPS doesn't need those. 

(Expanded from comment) WinSCP and Putty use, and Puttygen generates, SSH keys, and SSH keys do not expire. (Unlike for example PGP signed-keys and X.509/SSL/TLS certificates for keys.) Puttygen by default puts the generation date (yyyymmdd) in the comment field of the key, and if you don't modify this, you can later use it to manually decide whether a key is 'too old' and should be replaced or deleted. Of course, usually the OS/filesystem provides a timestamp on the file (containing the key) anyway. But note the passphrase is not the actual key, it is used only locally to encrypt the privatekey which is randomly generated (that's the bit when you must move the mouse around). If you want to change the passphrase for any reason, including the passage of time, you can Load the file into Puttygen, retype the KeyPassphrase and ConfirmPassphrase fields, and Save. The actual key is unchanged and will continue to work with a server where you (or an admin) have previously configured the public part of your key as an 'authorized' key. 

(substitute your filenames). Full details in the manpage, available on any Unix system where OpenSSL is (fully) installed or online at $URL$ (or choose earlier version from $URL$ if needed). For completeness, if you do/did need the chain without the privatekey, it is 

The traditional Unix solution for this is to store the PID in a file with a known name in a known location, then use the contents of that file when needed. This is often, if unimaginatively, called a pid-file. For example, when the daemon/service is started, its PID is written to a file named . Later when it is desired to stop sshd, or signal it to reconfigure, this file is read, and if is stopped the file is removed. The 'normal' location for a pid-file is in or under but you sometimes find older systems or programs using or even , and nothing prevents you from using something like if you want. ADDED: Either the creator that starts the process must write its pid-file or the process itself must do so; some programs do the latter automatically but java doesn't (and can't easily be changed to) so you need the former. I don't know and you don't say how gitlab runs things but you mention bash; if it is using a bash script you control that does something more or less like 

but this doesn't combine with your apparent though unmentioned and unexplained desire to leave running after exiting the . Note the two heredoc cases quote the delimiter string so local shell does NOT subsitute backquote, or certain other things, within the data. And in all cases it would be better to use the newer syntax for command substitution instead of the old backquote syntax -- especially for questions on Stack where backquotes interfere with (much? most?) non-codeblock formatting. 

does not 'compress [the] directory tree', or the files; it creates an archive file (tar) that contains a copy of the files in the tree and compresses that archive. Yes multiple with or without compression (any of ) concurrently reading from the same (or partly the same) files will produce correct results, although it may take longer due to contention; in some cases it may even take longer than doing them consecutively. It doesn't matter whether they run under the same shell or different shells. If they run under different userids and any userid doesn't have access to all desired directories and files then that one will produce an incomplete result, but that same fault occurs whether anything else is running or not. 

First, your example for PrivateKeyUsagePeriod is wrong; notAfter should be tagged 1 not 0. Although since practically no software ever looks at PKUP, this error may not matter. More substantively, PKUP is an extension and X509v3 extensions use an OID+varying structure that requires OpenSSL to allow essentially any ASN.1 type in order to support future additions without code change. Validity is part of the fixed part (from v1) and is implemented by specific code, and is not the same type anyway (not tagged, not OPTIONAL, and CHOICE{UTCTime,GeneralizedTime}). For you can use and in the config file section named by (not the one named by ) instead of the commandline options. See the man page on your system or on the web under 'CONFIGURATION FILE OPTIONS'. For other commandline operations there is currently no code supporting this; you can either write your own app(s) calling the library, or since OpenSSL is opensource just make a copy and modify it. 

with an RSA key (and defaulted to which specifically means pkcs1-v1_5) AND does steps 2-6 of EMSA-PKCS1-v1_5-ENCODE in section 9.2 of rfc3447, then step 2 of RSASSA-PKCS1-v1_5-SIGN in section 8.2. In other words it does everything but hash the data (but it does check the length of the input hash). Note that if the hash name you specify here is different from the hash you actually used, the resulting signature will not verify correctly. (similarly defaulted) does only steps 4-6 and step 2. In other words, it does NOT add the ASN.1 AlgorithmIdentifier encoding to the raw hash, so you need to do that yourself if you want your signatures to be understood and accepted by others. WITHOUT also skips the ASN.1 encoding. For completeness, or its abbreviated form with an RSA key does the whole job: hash, ASN.1 encode, pad 01FF..00, and modexp. 

Recent certs from StartSSL are suspect because of misconduct by its new owner WoSign and Firefox 51 is scheduled to distrust them in a few weeks. Google says the same for Chrome 56. Apple's announcement $URL$ of Nov. 30 concludes 

Yes, encryption with a passphrase is encryption (although usually theoretically not quite as strong since passphrases normally have less entropy than public keys) and in GPG passphrase encryption can be combined with public-key encryption, as well as publickey signature. As a general rule, information about a program is very often contained in the documentation for that program; that is in fact the reason documentation is created. 

Meta: this is OpenSSL, but not Mac specifically. Most things OpenSSL is used for are security related. I'd suggest tagging openssl. Many of the settings in the OpenSSL config file, which defaults to a platform-dependent location like the one you specify but can be overridden, are used by default only by the and utilities, the latter of which was created precisely to be a minimal CA and issue certs. The primary job of the utility is to display, examine, and convert certs; issuing a cert with is an add-on that does not have all the features does. In particular it only adds extensions if you specify in the command line, not in the config file. (And it can't carry-over extensions from the CSR at all, although that doesn't seem to be a problem for you.) Solutions: use with the desired settings in the config file, or use with pointing to a file or section of a file with the desired extensions -- possibly but not necessarily the standard config file. Also: 365 days is a pretty short lifetime for a CA cert. I think you want SAN instead of because the one SMIME cert I've used personally (trial from Comodo) has my email in both Subject and SAN. You probably don't need in (basic)KU; my cert doesn't have it, and in general the idea that publickey signatures could support non-repudiation was popular back in the 1980s but in practice it almost never worked so people have pretty much given up on it. OTOH I doubt it will hurt anything.