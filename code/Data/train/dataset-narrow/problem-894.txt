See what is happening here? Using and setting different indexes in the folder array is just like using , , etc. Then, that small conditional you have at the end is just as easy to implement: 

You should create "constants" for these places so they are more clear. A constant would look something like this: 

Better string copy You are over-complicating your string duplication. There is an easier way to do it using . First, simply copy the string: 

Add some documentation to function. While the name is pretty descriptive in itself, you should still add documentation to at least explain the argument and the return value. For example, I was a little confused when I saw because I thought it should've taken another argument that was the delimiter. 

To be honest, I'm not quite sure which line this is occurring on, but I think it has something to do with the call; when I pressed , the next line was printed out. Bug #2 Using the same file as above but this time passing it through STDIN like so: 

I personally would choose the first solution. These snippets assume that reverses a string, as stated by the comments near the function call. 

Your two methods look very, very similar. The only difference? Which element it is that you are using. Therefore, you should create a single, separate function that takes the element(s) that need to be changed. Then, you can just set the two methods to calls of this separate function. Here is what I wrote for that function: 

Since your program is not accepting any command-line arguments, it is good practice to put in the parameter section of . 

You can stop now. As a quick and smart fix, you can drop support for reading from STDIN (I mean, who would use a pager to read something they are typing into STDIN?). Or, if you want you can read on for the good news. 

The line I wrote should be used because it is common JavaScript practice. What you wrote there looks like you're just trying to fake a for-in loop, and looks quite ugly. Also, I recommend using more descriptive names than and (and this applies to your argument names, too). 

If you would like me to show you how your code would look with the above change, let me know in a comment. 

This is much a much simpler and much better alternative. Here, statelessness is enforced; this is just a function that received input and gives output with zero side-effects (which is good practice). This can provide many benefits. Also, if you play on using a library like Flux or Redux in the future, this will come in handy. Also, note the use of the Babel transpiler above: 

In the loop of , you use to specify an infinite loop. However, in the loop just below that function, you use . You should stay consistent and use for that one. 

Write some JavaDoc! As stated above, I was very confused by your code. However, if your methods included JavaDoc, then I wouldn't be so confused by the names. Here is an example of JavaDoc on a simple method: 

With this, your code will become much, much more easy to read. If you have trouble keeping track of indentation, get a text editor. Most text editors will automatically indent for you, making it so that you don't have to worry about it yourself. Here is one example for where your indentation could be fixed: 

Looking at your function, it could possibly return if it can't find a suitable XHR object to work with: 

is a little confusing to me. I thought you wanted a number with a few decimal digits on it. It might make more sense to say "Please enter a base 10 number" 

To be safe, you should check that the return of is not . Also to be safe, you should make sure that there is even a to begin with. 

As you may already know, the instruction is very slow instruction. I don't know precisely how slow, but on the x86 systems, the instruction has a latency of about 70. A better solution would be to treat two registers as counters for the numbers 3 and 5. Here is what I mean by that: 

Note: I removed the last line because you weren't actually setting to anything. Now, you can just do this: 

Note: I merged the two k1 and k2 variables into one since the k1 one is no longer needed when k2 is being checked. 

In JavaScript, it's sorta bad practice to set a variable to undefined, because that is also the value you get for something that has not yet been defined or has no definition. This can make your code confusing. Instead, I recommend that you use . This shows that the value had been defined at some point in time, just there is not supposed to be any value in it. 

Creating a directive from existing HTML is quite easy in fact, especially if you were already using to show these elements before. To get the HTML for our directive, we must first find the section that we are repeating and cut that all out. I did a little searching through your HTML and found this: 

Same things as last section: don't just exit the program if the user enters invalid input; loop again and give them another chance. Also, put the scanning for sections outside the loop for the same reason as above. 

Checking if something is undefined by checking it's type is unnecessary. Since is a falsey value, simply putting the thing you'd like to check in a conditional will do the trick: 

I'm confused by this line: ...document.getElementById('<%=txtCity.ClientID%>')... Previously, you were using JQuery to interact with elements. Why did you suddenly stop using it here? If you are going to "import" JQuery, you might as well use it. 

The methods , , , and are all only accessed inside this class. Therefore, there is no point in making them right? If there do happen to be other classes, just they aren't shown here, you could probably leave as because it makes sense for another class to possible access those. 

If for some reason something started to hang up, maybe your browser or your client's connection to the server, a thread will stall, and it will cause other threads to stack up because one is created every 5 seconds. It would be safer to move this line to the end of your function: 

With this design, nothing is leaking out into outer scopes and you can keep all the logic and state together. 

You have a couple HTTP return codes here in there in your code, but don't explain what each return code means. I recommend creating an object of the error codes with descriptive names so you can use those in place of just the plain code; it'll aid your readability greatly. Here is what I came up with: 

Your constructor for is really long and confusing. Even though you have to do all this GUI creation, you can still group things together to make things more readable. Also, you should be able to split some things up as different methods that are called by this constructor. 

Reduce DOM searching calls You are calling quite a few times in this code. While it is a very helpful method, it can be expensive and you want to avoid using it more than you have to. To speed up this code, move the creations of variables out of the function, along with the call for the element. Here's what I mean: 

A big reason I see for this is these things. If possible, try grouping things like these into arrays so you can easily iterate through them with loops, giving you the ability to work on the entire array with only a few lines, rather than several groups of a few lines. 

You are correct. is indeed pseudo-random. However, its algorithm is actually quite good. In this SO post, a concern is brought up that the randomly generated numbers tend to all have the same number of digits. While this was statistically proven to make sense, you won't run into a similar problem since you are only dealing with single digit numbers. should be random enough for your purposes. However, if you want to get truly random numbers to be absolutely fair, check out RANDOM.ORG. This, however, would obviously be a lot more unwieldy than just using Math.random. 

How do I know if all of those numbers are part of the content? The only fix I can think of, unfortunately, would be to follow the above tip and write instead of an ASCII number. 

See a pattern in the first section of your code? I do: you have a bunch of variables that you are naming things like (mainly the number part). Typically, when you are naming a bunch of variables with numbers in their name that all are going to hold similar things, then you are probably repeating yourself. Let's look at this section first: 

Usually, I keep it to one component/class per file. However, these components are fairly tiny and that may be unnecessary. But, only split it up among files if you are using NodeJS and something like browserify or webpack. 

This seems a little redundant: the is going to be greater than 0, so why do you need to conditionals? Simply remove the outer one. 

You should make your function names much, much more specific. -- this tells me absolutely nothing. -- get new what? If you are getting a new object, this should be class, and then you should be getting a new whatever with the keyword. 

This completely eliminates the need for , and is a lot cleaner. Here, in the above snippet, we are taking the pointer and increment through it each iteration. Note that you still might be able to use an array in the arguments, it would just look a lot cleaner if you wrote it like this: 

Note: The "@" of the array is that last @, not the first one. Therefore, it could be a * See how this could be useful now? In the listener function, you can use this regex to cleanly parse the chat message and handle the different parts: 

The same recommendation I wrote about the other pictures applies to the ones at the end of this file. 

Adding all these loops is great because it really increases the readability of the code. However, the constructor is still quite long. Now, we should split the constructor up into separate methods. For example, when you are setting the Action Listeners, you could split this up into a method and then call it like this: 

With things as big and as complicated as physics engines, things can get easily confusing. What if you stopped working on this for a while and then came back to it later? It would be difficult to understand some crucial parts of your code. To aid this, you should supply your methods and classes, and (optionally) fields with JavaDoc so you can provide as much explanation as needed to understand the code fully. For example, I am having trouble understanding all the math being done in and . With JavaDoc, you could explain what formulas you are following, or what your reasoning is behind whatever you are doing. 

Controllers inside directives Now that we have this handy-dandy new directive, we should probably move some of the code of our main controller into this directive's controller. That way, the information that the directive needs to know is with that directive and not spread out somewhere else in the code. 

For example, if I passed this: , the function would split it into , , and . Then, it would go through finding all the elements for each selector and comparing them with a final array. 

Spacing To enhance readability, there should be spaces around arithmetic operators and signs. The code now: 

You did a very nice job organizing your code. I especially like how you used operator overloading for collision detection! 

Notice the last parameter: this will allow the function to know whether to put , , or ... Which, in fact, can be simplified using . Now, the body of the function looks like this: 

This will reduce the amount of calls that are made each time this event is set off, thus speeding up your code. 

Do this for the other elements that you grab more than once, too. If you are in control of the and functions, change them so they can accept the element itself through parameters. This will make your function more flexible, and also allows you to just continue to use this variable you have. 

In my opinion, it doesn't make sense why a user would start with points other than 0 in a quiz game. But, if that ends up making sense to you later, you should at least make that parameter optional: 

You should split up your code more. In specific, I recommend creating a method for running/playing the game. And my main reason for this is unit testing. Right now, your code is automatically going to read from via a . This does not make your code very testable. How can you write automated tests if you have to type in all the input yourself? If you do split the code for running the game into a separate method, make sure to have this method take in, via parameter, a stream/scanner. Tests will pass in streams with preset strings and, when a user is going to actually play your game, a stream reading from will be passed in. Note that, if you do this, the method may/will also need a parameter specifying the output stream so that the tests can read the output. 

Note that became . It must be written this way. increments by 1 and returns the value of before it was incremented. increments by 1 and returns the new value of . For example, 

Global variables In your function , you are declaring quite a number of global variables. This is bad practice: all these variables should be local variables because they only serve a purpose in this function. Now, you may not notice that you are creating a bunch of global variables. The evilness is happening in this line: 

New solution In case you were not aware, JavaScript has a built-in function for sorting lists: Array.prototype.sort. This function, basically, is used to take a list of data and sort it based on either it's built-in function, or a simple function you provide. This function takes two items from the array and returns either 1, 0, or -1 to tell how to place them in the array (the original array is mutated). So, that being said, a much simpler way to sort these elements would be to do this: 

Use a conditional for printing values that don't exist yet At the very top of your code, you are setting these two variables to default values: 

See it? All I did was add s around the method call. This sticks the output in an array and returns the array. This will greatly help your library as I will show later. 

See that? You have to write two entirely separate clauses just to handle ID's. That's pretty ugly. However, if you follow that advice of forcing the function to return an array no matter what, then you can remove this conditional all together and just keep the second clause, which handles arrays. 

Hmm. An array that has variables that each are assigned a value. Hmm. Oh wait; that sounds like an object! Instead of reinventing the wheel and creating this array thing that's values are assigned to variables too, you should just create an object. Here is what that would look like: 

Everything inside your should have a single indent, then everything inside this class's methods should have another indent. I do not think that it is very next to remove the indentation from the code inside the class, because it makes it less clear what code belongs to what. 

You should build the string that you are going to be ing before you enter these sections, so you can then make those minor changes. And, you should also store the string that is being d since that is also the same for both conditional cases. Here is what I mean: 

This will first find the ending string in the main string, and then it checks to see if it truly is the last part of the string by checking to see if it starts at the same index as would be needed for its length to take up the rest of the string. 

Unnecessary recursion Your function is using recursion when it really does not need to be; the function would be a lot simpler and a lot faster if you used a neat JavaScript trick for repeating characters: 

Variable names @dec already touched on this a little bit. Variable names are meant to describe what that variable is to be used for. Letter variables(such as a, b, and c) don't really describe anything. Also, (dec mentioned this too) don't use take a variable name, drop a letter, and create another variable with that new name - it makes your code confusing as the purpose of the variable is un-clear. For loop I notice how, in your 's for loop, you kind of split it up. You had the variable being declared, defined, conditionally checked, and incremented all in the signature of your for loop. But then you declared a variable outside of the loop, and incremented it in the body of the loop. Why don't you just put in the signature along with ? This: