These are actually a very good question(s). Yes, there is a branch of engineering that deals with protection of computing equipment from external electrostatic discharges and power surges/transients. This is not a matter of any opinion or discussion. Please take a look here link. Any PC box that comes from a reputable manufacturer goes through a set of comprehensive tests that use very expensive facilities and test equipment. Regarding the main question, is a wall plug less protected than a PC when supplying USB power through PC box, the answer is "it depends". The PC power supply has much bigger AC transient filters, and the supply chain from AC outlet to USB port has few more intermediate inductors, active switches, and capacitors on the way, which will act as filters. More, bus-powered USB devices have a common ground reference inside the PC box, so it is less likely to have a huge ground bounce surge. So your PC might die, but USB drive might survive. Wall adapters (good ones) also use surge protection filters and are supposed to be "isolated" from AC, but there is parasitic coupling. Due to smaller size of isolating transformer, it likely has smaller voltage breakdown threshold. So, unless you put your actual configuration into a proper cage and run all IEC 61000-4-4 tests on it, it is hard to tell. 

The bus-powered cheaply-implemented USB hubs are mostly good only for connecting mice and keyboards, and maybe one cheap pen drive. The newer Type-C connector and PD (power delivery) specifications might change this power balance picture, but the main USB specifications are not aware of this, and system software guidance is lacking for this case. And Type-C with PD won't be cheap by any means. Having a self-powered USB hub removes a lot of headache from USB interoperability standpoint. 

You have all symptoms of insufficient power delivery over USB connection. Formally speaking, you should not run a USB3.0 drive in a USB2.0 ports (your laptop has only 2.0 ports). The formal capability of USB2.0 port is 500mA, and if this laptop is running on batteries, it could really limit port power to 100mA (as it should be appropriate for a battery-powered low-power embedded USB host). At the same time mechanical HDDs (even in 2.5" format) usually require 5V at 600-800mA, which is fine with USB3.0 ports, but below marginal on USB2.0 ports. In short, your WD gets marginal power from your laptop. In marginal cases every notch matters. You can have a too long or too thin USB cable. Both connectors (laptop and drive) might have contacts deterioration and spring fatigue, so one or another cable position might have increased contact resistance, which further drops the supply voltage. Power consumption of HDD also depends on pattern of head movement, and if your data are fragmented across the HDD platters, the consumption increases, and supply can again drop causing errors and disconnects. The HDD from other manufacturer could require slightly less current for normal operations, or have fresh connectors, or have thicker USB cable, and that's why it might work better. Still the problem would be in USB2 power supply that might be insufficient. Under this brown-out conditions the HDD can be damaged, and might require re-formatting or re-calibration by professionals. Although it is less convenient, don't use bus-powered storage for archive purposes, and use external HDDs that have own power supply. You will be better off. 

Usually an interesting question arises if a DIMM with a bigger memory is installed. The answer depends on how well and updated is the BIOS for the particular platform. Configuring the memory controller to work with a particular DIMM depends on information supplied by DIMM via SPD, and pre-compiled configuration tables that the BIOS has. There are many timing parameters that needs to be set, CAS, RAS, refresh, etc. If the BIOS does not have a proper entry for the reported DIMM size, it will likely fail/refuse to configure the memory at all. 

USB 3.0 interface has to process data stream at 5 Gbps rate. It requires a digital electronics working at very high frequency, 5 GHz at least. A digital processor working at 5 GHz requires some power to run, and it makes USB 3.0 bridges (USB to SATA and USB to eMMC) get hot. Some ICs would consume up to 0.5 -1 W of power depending on which manufacturing node (130nm, 65nm, 45nm, etc.) the manufacturer can afford, and they will run hot, especially in small-size enclosures. This is normal, and should get better with overall progress in silicon manufacturing. The other thing that can make a difference in power dissipation of a USB 3.0 device is whether the host system (and device) enables and maintains hardware-level Link Power Management on this particular USB 3.0 link. Historically there were challenges in enabling USB 3.0 link power management, so not all controllers might have this feature enabled. 

Everything said earlier is true, but to a degree. My answer is short: newer generation processors are "faster" primarily because they have bigger and better organized caches. This is the major factor in computer performance. For more quantitative considerations, see "Linux Magazine: What drives performance in HPC" In short, for most common applications (as in SPEC collection), the limiting factor is memory. When a real sustained computation is running, caches are all loaded with data, but every cache miss causes the CPU execution pipe to stall and wait. The problem is that no matter how sophisticated the CPU pipeline is, or better instructions are, the instruction-level parallelism is still pretty limited (except some special highly optimized prefetched cases). Once a critical dependency is found, all parallelism ends in five-ten CPU clocks, while it takes hundreds of CPU clocks to evict a caheline and load a new one from main memory. So the processor waits doing nothing. This whole concept is true for multicores as well. So, if one wants a "faster" PC, buy it with a CPU that has the biggest cache you can afford. 

Type-C port is just a connector, there is no special properties for it. It is up to system designer what to route/multiplex to this port, be it an alternative DisplayPort, or Thunderbolt, or audio accessory port, or debug port, or whatever on the top of USB 3.0. The OS will only know if there is a corresponding system controller, but the actual routing should be described in system datasheet. To determine the port functionality experimentally, you would need to have all corresponding devices physically, Type-C USB device, Type-C DP device/adapter, etc., plug them in one by one, and see the system reaction in Device Manager. This is a "plug-and-play" port, so before a device is plugged in, nobody (besides desingners/datasheets) knows what the port will do. 

The class of USB devices you are looking for is called "USB sharing hub". You can't get the needed functionality out of regular USB hubs, they have only one port that goes into PC host. The sharing hubs have two (or maybe more) upstream ports. Here is an example of a product with peripheral sharing functionality. 

Yes, a USB 3.0 device must work in USB 1.1 environment, since USB 3.0 has a USB 2.0 wiring in parallel to USB 3, and USB2 falls back into Full-speed mode under USB 1.1 controller. However, given the dismal state of USB-IF certification program and brutal disregard of it among small manufacturers, the mileage might vary. To avoid potential power limitations of USB 2.0 port, I would recommend to get a HDD storage based on SSD -solid-state drive. Modestly sized SSDs have a fairly reasonable power consumption (under 1 W), which is well within the 500 mA limit of a standard USB port. 

You got a ESD discharge across the fan sticker into fan electronics, which is connected to mainboard ground via 4-wire leads, which is connected to Earth ground via chassis, then into PSU, and power cord. Apparently you have a really dry air around, some synthetic clothes, and got charged yourself to a pretty high level from your movement and/or friction with the desk or furniture or carpet. Next time you reach inside an open PC and touch internals, discharge yourself into PC metal chassis first. You apparently were lucky to touch the fan first, otherwise you could hit some more sensitive part of your PC, and it will likely die (given your bad ESD environment). 

I am not a bash expert, but from USB standpoint you can't do this. A USB device is either the MTP class device, or Mass Storage class device. If the device is MTP, host system needs MTP driver to operate it. File system is behind MTP wrapper. If the device is Mass Storage, the system will load a mass storage driver. Mobile phones used to have a manual option to change the USB mode of operation. More recently the Mass Storage option is not offered, because of high possibility of data corruption. Of course, it is technically possible to have some proprietary switch protocol over USB to change the USB device class back and forth. To complete the switch, the device must disconnect from USB and them re-reconnect under new incarnation. 

It looks like the xHCI driver is missing in your operating system. If you had a fresh OS install with xHCI disabled, it is likely that the driver setup skipped this controller. 

You should be reading the document for individual memory chips from Micron, pdf is here. The document has explicit pictures showing block diagrams for each of three different bond-outs. All three chips have 2Gbits capacity (256MBytes). The first one has data bus width of 4 bits. So it needs 64M * 8 banks (=512M) of addressing space to get full 2GBits capacity. The second one has data bus of 8-bits wide and needs 32M * 8 banks (=256M), while the third one has 16-bit-wide data architecture and needs 16M * 8 banks addressing space. All three chips have sligtly different addreessing schemas, so they could meet different needs of different design areas. And they have slightly different ball-outs. The first two chips are packaged in 78-ball FCGA, while the third one has 96 balls. 

If you accidentally have disabled all USB ports by disabling the USB host controller in device manager, one solution is to add an external PCIe USB controller card. Hopefully your existing system driver will be compatible with the PCIe card controller chip. Then connect your mouse and keyboard, and fix the initial problem. Then you can remove the card. It should be obvious that any USB -> PS/2 adapter won't work because the USB root is disabled. Actually, the ASUS Z270 board does have a native PS/2 port, so it should be easy to regain control over the PC. But it needs to be done with native PS/2 mouse and/or keyboard, which might be hard to come by. Unfortunately, a passive PS/2 to USB adapter won't work for an arbitrary mouse, it must be a special mouse that supports dual USB/PS/2 interface. Which is also might be difficult to get hold of. CLARIFICATION: there are two devices on the market that are related to conversion between USB and PS/2. They both have a marketing moniker "USB to PS/2 adapter", which causes certain confusion. One is to convert a PS/2 device to USB plug. This is the one I mentioned first. The other is to convert PS/2 port on host computer to adapt an USB mice. In this case the mouse must support dual-mode operations, USB and PS/2. Not every mouse has this support. 

A GPU has a piece of memory dedicated to video output. Each pixel has precise address. GPU renders images and places them into this video buffer. Then a dedicated hardware block "scans" this memory and streams the content into video port (VGA, HDMI, DVI, whatever). A monitor receives and displays this information. But isn't this information freely available on some wiki? 

Regarding the use of Type-C plugs with legacy Type-A ports, yes, full implementation of Type-C functionality would require the same hi-side power switch, CC-controller, and super-speed multiplexer. However, as usual, Chinese manufacturers are leading the pack, and offer a PASSIVE Type-A to Type-C converter (eBay for $1 - $2), claiming to support reverse plug compatibility. However, only some of merchants would put a fine print saying that true reversibility is only for USB2 channel, and SS channel works only one way but not another. So, enjoy the Type-C revolution! ADDITION: For some reason people expect that any Type-C port will also do charging in all directions, and other PD (power delivery) functions. These expectations are totally unfounded, although look reasonable. The thing is that the PD is quite a different specification, independent from USB or Type-C, which may or may not exist (be implemented) in an arbitrary taken port. While a standard Type-C port should be able to deliver 5V and up to 3A without any PD or QC, this high-current capability must be specifically designed in, and proper CC pull-up signature incorporated. Worst case of expectations is when a host device has only a single Type-C port, which is also used to charge the device. Then attaching a plain hub (with or without Type-C downstream ports) will revoke the charging function. The charging function should be still available to the device, but the hub must have a function of so-called "accessory charger", where the direction of VBUS supply on upstream cable is reversed. All these options cost money and driver/firmware support on device side, and usually are implemented only as upscale "docking stations".