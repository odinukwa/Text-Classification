A simple improvement is to use instead of multiple s. Taking out common statements in the each of statement. 

Here are some suggestions: As is used either the environment you're using supports ES6 or the source files are compiled to ES5. Following features of ES6 can be used 

RegExp Constructor vs RegEx Literal is used to create a new regex. This form of regex accepts a string as the first argument and returns new regex. This is used when creating regex from a variable. Since this uses string, the backslash is used to escape following character. This will produce unexpected results when regex itself contains a backslash. Example, will return . When using a backslash in this form, they need to be escaped . This is not necessarily difficult but requires to take care of escaping. Passing regex literal syntax to the constructor is same as literal syntax to create regex. So, is same as . Mistake The regex for object doesn't work for all cases. means to match anything which is not AND . If the key of object contains , this regex will fail. Check this demo. Removing solves this problem. Not a mistake, but a validation. Using quantifier instead of . says, match zero or more of the previous pattern. For example, will match which you might not want to match and process. Better use of capturing groups The regex will match the string starting with to the literal and put the complete string in first captured group. Then inside , and are again replaced 

As can be seen from this jsperf, is faster than . So, your code is already efficient and expressive. 

RegEx Improvements The regex can be shortened by using case-insensitive match with flag. We can remove the characters which are added as both lowercase and uppercase in the regex. After removing lowercase characters regex will be as below 

Adding quantifier also has positive effect on the number of steps taken to match characters when the characters in the character class are consecutive/adjacent to each other. Here's the demo on RegEx101, without quantifierScreenshot and with quantifierscreenshot applied on the same data. Note that in these demos, PHP is selected as the steps taken to match is not shown for JavaScript. Also, the regex is different, it also contains lowercase counterparts of those special characters as flag is not working with PHP and don't want to apply (Unicode) flag as it is not supported in JavaScript. These demos are created only to show difference when is applied on character class. The effect should be similar in JavaScript. Note that the (two underscores) are redundant as is already added in character class and with flag it'll remove all occurrences. Method Chaining As returns a string, any other string method can be called on it. Multiple calls to can be chained. 

The advantage of this method is that you can use any selector. For example, if you want to use class selector for one of the checkboxes, just use as the selector in mappings and it will work. 

Lodash Do you really need a library for this functionality? The Same functionality can be done without Lodash or any other library. If Lodash is only used for this functionality, it can be removed. Missing Semi-colons Although, a small thing Automatic Semicolon Insertion can lead to unexpected behavior. The usage of the semi-colon is not consistent. I'll recommend using JSLint/JSHint. Alternative I'll recommend the use of and String methods to make the first character uppercase. 

Conclusion Now, the JavaScript code don't have to be written again for each new element. Just adding the markup with required attributes will automatically work. The relation between HTML element-JavaScript handler is reduced from many to many to many to one. 

Replacing HTML jQuery accepts a function which will receive the current of the element on which the method is called as parameter and replaces the returned content to the element. The code can be written as 

Use the same value in the query param as the ID of element in the HTML so it can be directly used as selector If you don't want to change the query param value and ID of checkbox, create a mapping of param value and the selector 

This has better effect as compared to jQuery counterpart as it will not show flicker when CSS is included in . And the can be written as below using pseudo-class and Adjacent Sibling Selector 

Using with value accepts second parameter which will be converted to Boolean internally and depending on the value, the action will be taken. So, the and statements in the question can be combined as 

If you know the queries you affect, you just have to give it the query type and it'll take care of the rest. I made it async in case it took some IO to figure out all the types. Decorators The most important decorator I wanted to show was the exception handling one that is at the top of the chain: 

I have the complete opposite view. Every query is specific to its use case. Today it may be true that you can call the other query but if someone changes its output then your query could be impacted. Maybe the other query gets a permission added to it that yours doesn't have. It is far better to simply build and return exactly what you need and no more. You may be thinking that you aren't reusing any code this way and you would be right. If two UI had the same data on it why would you have two? 

Validation The validation decorator will run validation on multiple threads (if you want) and async will not block. I didn't use expressions since a lot of times validation involves multiple properties and has a lot of overhead. The BrokenRule() parameter is the "Relation" and it can be used to tie the rule somewhere on the UI. 

Edit The last point here is that Exceptions actually are pretty slow. When I throw an exception, it ends up taking around 150 ms to get the result back. When I switched to not throwing an exception, it would get around 25ms response for the exact same check/data. That is 6 times slower! Thus, avoiding exceptions seems like a really good thing to do! :) 

If you don't mind me asking, any reason you want to register the DbContext directly? I know .NET Core seems to want you to do that, but I don't like IoC containers deciding when to leave open or close my DB connections. Insetead, I'd just do IFooDbContextFactory and have that use a "CreateAsync" method. This factory can take your IAppSettings or IDbContextSettings or something to get the connection string. Then you can call the provider async just fine and in your specific code you'd just do: 

ICommandQueryRetry will cause this to retry general exceptions up to 3 times before failing. For caching, you just add a different interfaces (a few different ones for different timeframes) and it takes care of it for you. 

Since we can route the different verbs to different classes, we can focus on only 1 method at a time per class. I'm using Mediators everywhere so the code looks the same across all classes. I thought this was really the Service Locator anti-pattern, but it isn't because you still know the mediator dependency. I also use async through the entire call stack because Task.CompletedTask, if needed, has very little overhead and not blocking threads is the way to go. ResponseMediator 

I've created a "framework" or more of a library for a CQS implementation with a few decorators. Using ASP.NET Core for the front end, I wanted an opinion about how this looks/feels. I changed the default mvc approach and created a Features folder that stores both the Views and Controllers in the same folder. Then each command/query ends up being in its own folder in the implementation. I have the following decorators: Exception/Logging, Retry, Cache, Cache Invalidation, Validation, and Permission. Any input at all is welcomed! This will be along post, but it'll be an interesting read, in my opinion. :) First, CQS = Command Query Separation. Essentially, queries return data and do not modify state and commands modify state but return no data. There is a gray area here where you need to run a command but then return the data (i.e. Queues, Stacks). Thus, i Created a "CommandQuery" for those scenarios where just a command won't be good enough. CQS normally has ICommandHandler<> and IQueryHandler<> interfaces to support decorators. Decorators are classes that can add functionality to these classes without changing them. i.e. The calls are chained. They implement the same interface, but I use SimpleInjector to make those classes run before/after the actual implementation. All code becomes narrow and easy to maintain. Also, you can add more decorators to all commands/queries with one line of code. I tried to follow SOLID through all the layers here with the intention that every piece of code will be unit testable at a high level. The problems being solved inside may end up more difficult than that, but I digress. :) (My mock implementation deals with Digimon World 2... Don't ask) :) Controller 

The function will give the timestamp from the given string. This timestamp can be used in the function for comparing with other dates. 

can be moved to CSS. This will be better UX and user will not see any flickr on the screen if page take long time to load and thus hide the element by JavaScript. 

Here's live demo of regex The regex can be further improved by using character class which will make the matches faster than OR conditions 

They are not searchable and can be easily confused with numbers. For example, and , and /. Dead/Unused Code Variables and are not used and thus can be removed. Overriding Variables Variable is used to get the first line in the file and then inside it is again used to store the match result. This will work fine, but will also confuse other users(or you after few months). The variables should be used for single-purpose. Slice down input data Inside , data is used to search for the name. here is complete data with the number of records on the first line, name-numbers and then names. This data can be sliced down to keep only name-number. This will reduce the data to work on and will improve the performance. 

Number of functions You're creating two functions per image one to handle mouseenter event and other to handle mouseout event. If you look at the mouseenter handler of all the images, you'll notice that they are all same. A quick improvement will be to use a single function to handle mouse enter event of all the images. This will reduce the number of functions from to where is the number of images. Is there any way to reduce this to a single function? Event binding Don't use inline event handlers. Use jQuery method to bind event. See onclick=“” vs event handler Naming Using numbers as the suffix to variables/functions means you're repeating same/similar code. Also, the names are not clear. Does refer to the function which should be called when hovering second time? Useless code The body of is completely useless. It is just setting the attribute value of the image to the same value which is provided in HTML. This can be removed. Alternative: You can use to bind mouseenter and mouseleave events on images. On mouseenter, change the image to the desired image and when mouseleave revert it back to the original. Also, add a common class to all the images and use this to bind event on them. 

Less DOM interactions. Using this code, there is only one DOM dive to get and set the updated innerHTML. Single regex to replace multiple strings has better performance than multiple replaces with single string Shorter code 

which basically says, when hover on , select next sibling and it's direct children , having class. Demo:Although, you cannot see images, you can see it works as expected when hover over an image. 

: Match a digit : Match either a space character or hyphen and add it into first capturing group : Match digits n times. : Match whatever is in first captured group(see #2 above) 

The RegEx will match a single non-line-break character and check if that is followed by the same character any number of times. here is the complete match and is the first chaptured group value i.e. the character. 

Improvement Here is the Demo of jfriend00's answer. Although, this is correct, this can be done without jQuery at all. Note: Here, I'll use old markup provided in the question. can be written in CSS as 

Review The IDs an class names are very generic. Chances are that they will clash with other page/developers styles and will not work as expected. When working with jQuery and CSS, it's very important to name the things properly. You can namespace them with some prefix - in this case. The class names and doesn't tell anything about what it contains or direct wrong message. and is much better. will hide the elements on page load causing flicker. I'll suggest...(see Improvements section below) is used to stop ongoing animation. As no animation is used(or the code is not shown?), it can be removed. 

Naming: , . Using prefix when variables are not local/private to the method: , , Missing strict mode: What does “use strict” do in JavaScript, and what is the reasoning behind it? Really need those comments? Guessing a number, but comments concerning Use to compare variables. Which equals operator ( vs ) should be used in JavaScript comparisons? For default values, can be used instead of ternary. The default value for should be instead of .