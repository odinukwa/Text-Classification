Some key things to notice - see that its checking backwards, that will improve speed for near sorted collections. You can use instead of the while loop -- thats the difference between the and implementations. You can write the while loop as below if ya prefer 

Don't have time to do a full review but you probably want to reorganize your and loading. This will allow the browser to download the stylesheets concurrently while downloading+executing your scripts. Also you probably want to load before as knockout will delegate to the more robust method where applicable. In the press release for they claim you won't have to load jQuery first. Also note, there's no advantage to loading in head afaik as it won't actually apply the templates () until the content ready event. Also you probably want to point to a single version of jQuery to prevent something going awry between jQuery (quite unlikely I guess but worth considering).. 

Spent a little hacking away at this to simplify the code. I wrote comments on changes inline the script, let me know if you have any questions Some thoughts on the changes. Notice that how I restructured your validators in the form 

I'm biased here, but as a past Mootools developer I keep comparing your function with Class.refactor. Personally I would prefer you add a reference to the original function on - maybe as some property or let the user handle storing the original. I'm not a fan of adding a global for the original function. A question, why do you not pass to your constructors? If you're wrapping some classes this seems like it may make usuage less intuitive. Update (still at work and can't look into removing the approach yet but I think I found a great change... You can rewrite the extremely confusing like this (unit tests passing): 

Unfortunately, C# doesn't infer the type parameter of the output argument, so you need to specify it manually (in this case, ). 

Usage is never printed Your program is supposed to print the usage instructions if the wrong number of parameters ist supplied. Check what happens if you run it without any parameters: 

I can't comment on how secure your code is, however there are a couple of other problems that I would like to point out. Clutter Your using directives can be cut down to: 

To fix this, you need to check the length of before accessing and . Failure because of unnecessary cast If the correct number of arguments is supplied, your program will fail with the following output: 

That way, you don't seperately have to set all the labels to and all the buttons to , just remove all occurences of the following two attributes: 

Of course, you may disagree with some of the implementation details — but this review isn't really about those. It's more of a demonstration of which questions you should be asking in order to end up with clean code. Good luck with your learning, and thanks for sharing your code. 

(the same goes for the ColumnDefinitions and any other empty tags) Declare styles that affect all controls of one type without a key: 

Here's the most elegant way I can think of writing this. I use to handle both Arrays and Objects as your tests showed you wanted to support them, though as pointed out in comments your code didn't. These changes also allow you to use more than 2 pick properties () as you can with the normal /. For 3 and 1.8? you'll need to change to the rest of the code should remain the same. 

Your loops are not equivalent. In the first one will be mapped with some action, while in the second you could do that just using a filter. The equivalent way of writing the loop would be to use . Of course you would cache it as you use earlier in the function. The equivalent way of writing your loop with just would be 

I don't see any good reason why you're using some of these hacks. It took me a while to understand what you were doing and I was pretty much forced to step through it in debugger. Going to review this line by line and point out simplifications and patterns as I see fit. I'll be batching together all my suggestions into a counter proposal in this jsbin, using the unit tests from your repo. To start, it seems quite unneccessary and non standard to get the global scope your way (and I'm going to later argue you shouldn't need it)... 

This comment is probably a remnant from testing; commented-out code should be removed immediately as it adds clutter and serves only to confuse. 

You can have both performance and readability using the newly-introduced (.NET 4.0) method (a reference to is required). With the stuct, you gain an additional advantage: your code will work for arbitrarily large numbers (assuming sufficient memory). 

What we are looking for is the least common multiple of all natural numbers in the interval , so we'll need a method to generate them (closed means including both bounds and the numbers between): 

Notice that you don't need to hang on to an array or list of numbers; you can track the statistics as you add numbers. Please also note that all this code knows nothing about validation or input/output: all it cares about is tracking statistics. Next, we'll need a collaborator that validates our input. Because I'm assuming your validation requirements are likely to change, it makes sense to define an interface ( means there can be validators for any type of data, such as strings, integers or floating-point numbers): 

It's important to study your code carefully and step through it in the debugger to verify that your validation is actually working (it was not). This is a lot easier if you have written readable, clean code. 

The first thing that really jumped out at me is your method is using synchronous http requests (looks accidental as you're using a callback anyway, see msdn for why this should be avoided etc). Instead of you probably want Making async requests will allow the first notable improvement I would make is to make loading async. I'm going to use the native promises -- feel free to adapt 

On the first pass the code was pretty easy to follow but are all those global variable intended? Globals I noticed in my look through... May be more. 

I'm not a minifier but theres no good reason to do Counter proposal: I believe you should drop the arity requirement and drop the global - instead inform the user they should cache the original locally. I've rewritten the code with these considerations in mind. Here's a jsbin with these changes (note I haven't removed the global to respect your test cases): 

The way I would do this with the current iteration of (1.6) would be through reduce. Note use if you want to favour items to the left 

To answer the actual question OP seems to be posing -- the pattern is fine I wouldn't change it but I would expose whatever you want to expose explicitly into a namespace using this format (window or whatever namespace): 

This will de-clutter your file and allow you to re-use the styles in other windows. Collapse empty tags (use the self-closing syntax): 

I made it iterable so I don't have to constantly write things like . Here's the itself – please feel free to point out any or all issues you can spot. I started taking a look at Python two weeks ago, so I'd also appreciate your comments on how Pythonic (or not) this is, as well as any potential issues of performance. 

That way, is only called in a single place and can easily be disabled or replaced with a real logger. For instance, this: 

Use list comprehensions and generator expressions to your advantage Use the function with a generator expresssion to verify that all answers are in the specified range 

You're worrying about the wrong problems: there isn't a lot more performance to be squeezed out of your code, but you could make substantial improvements to readability. 

Doing the same string concatenations multiple times You have used throughout your code, always passing , a message, and a thread id. You can extract this functionality into a new method: 

If you're looking for something a bit more radical in nature, why not let handle several sequences at once? (Note that unfortunately, you cannot combine default parameters with sequence-unpacking in Python 2.7, which has been fixed in Python 3.) 

Along with @jerrycoffin and @RobertoBonvallet's suggestions, I would write this as a loop 10 times out of 10 (this is the conventional for loop case afterall). I tend to use loops whenever I'm iterating every item of a single collection and a loop for any other purpose (but either can always be written as the other so w/e floats your boat). I would also probably cache the result of and if I were using anywhere else in the loop I would probably make a variable for it as well. I usually consider using a if I use 3 or more so if you extend further that may be something to consider Also is a cryptic name for a loop control variable. Use , or - don't worry about variable name length as you'll usually end up minifying your code if you're writing anything substantial. That said 

I see a bug for a property case as . You should check if it's not null or an object :) Another less important? bug is you can't use the key on any of your objects. You can get around this by using Only obvious optimization I see is to move the check after the check. is a relatively expensive function so you will probably see some gains off that. I expect this should be even faster than doing which is known to be faster than your loop... I assume you're polyfilling trim for older browsers right? 

Error messages At the beginning of , you throw an with the same message for two completely different reasons. That's not very helpful for debugging. Instead, check them separately: 

The following method is called when the player makes a move. It replaces your three enormous if statements where the conditions spanned multiple lines. Even in this refactored version, some complexity remains. Basically, the approach is: 

Almost all of your comments can be made obsolete by choosing proper names and generally making the code as expressive as possible. IMHO, we should avoid comments that tell us what a particular statement does, rather we should use them only to clarify why we have made an unusal decision. Or, to put it like Uncle Bob, I view every comment I write as a failure to express myself in code. So I deleted most of your comments from the refactored version below because the names now stand for themselves, without the need for further clarification. Dangerous and unusual things 

(Note of caution: you may want to choose a different name for it since this method already exists in LINQ; technically, this is an overload, which could create problems if a future version of C# adds this signature.) This makes it possible to adapt the LINQ expression: 

The extend method is being applied to which is the set of selectors will apply when selecting elements (see here) -- are the pseudo selectors acknowledges. The extend is useful if you want to add multiple jQuery selectors succinctly but for adding pseudo selectors I think its just a norm noting you can also add the selector as below 

Anyway, you are correct in that calling these loop methods will take time per call and it's a good idea to apply filters first to limit . If you're looking for an interesting read take a look at the Lazy.js documentation. Edit, just noticed, because you mention reduce, the way you'd write this with reduce is akin to you way 

Alright first thing the order that an engine enumerates object properties is not guaranteed!!! Its pretty consistent but there are engine bugs and you shouldn't rely on the behaviour. That said, this is how I would write your . You can use to create the ranges list but again - order isn't gaurenteed. You could sort it I suppose? 

One last thing before I head out... These are terrible variable names and, moreover, extending an object with its self is pointless 

I would add a after your Also the helpers you use in seem pretty redundant. I would personally drop the helpers and write that function: 

EDIT: I understand that you can't change the format (as per your comment), so I've added the code below to allow you to stick with your current file layout. The modification required is tiny: simply skip the first line, and only look for the smallest difference in lines that have more than one number. 

It's concise — a one-liner. You could even skip the extension method and use the directly. It's readable — by wrapping it in the extension method, the intent of using the is clarified. It performs well — in my crude testing, it beat your and Sandeep's versions for both small and large input sequences. (Specifically, the based approach runs twice as fast as Sandeep's version for your original input, and at least three times as fast for very large input sizes). 

The default value of and is , you can get away without setting it explicitly. And is by default. So you can remove all occurences of the following: 

In order to find a more elegant solution, we first need to identify the problems; only then can we solve them: 

Following my suggestions, you could arrive the below solution. Note that the semantics are insignificantly different (the match is performed regardless of the validity of the domain), but readability and simplicity is substantially better. 

Well thats how we would want to write it anyway... But alas, we live in tough times where people still try to support Chrome 33 and Firefox 26 (poor souls). I'll let you fellows in on the way some popular libraries write their functions I suppose. Actually, I recently improved underscore's uniq function so you may notice its faster than you expect. Lodash's method is even faster in some cases Anyway, heres the fastest way I know how to make a set, there was some discussion in doing it this way in underscore... It similar to what lodash does (here's a discussion on implementations $URL$ 

I would probably add a class/something to use as a selector (in this case I added ) to make lookup easier. You can do this in other ways such as getting the values of the actors map so do it as you will. Also your case is calling on a string as is the current contents of whatever the event is hooked to. 

Alright I'm going to focus on some potential errors with your function. The first obvious issue is you're relying on being set. This isn't always the case - for instance consider any class declared . Now if you run . Furthermore, many frameworks provide some class extension/constructs such as which would invalidate that check. Further issues may present themselves with code minification. Out of curiosity, I decided to plug your code into the underscore js test suite to see how it would do. I couldn't implement as it accepts multiple types as objects. It passes all the tests but the ones for understandably. I excluded the tests as I couldn't get them working on gists or jsbin but they pass as well. Not bad :)!