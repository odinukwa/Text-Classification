Don't always make it respond to your action X with action Y. As you evaluate each potential action add a random fudge factor so the AI doesn't always pick the same option but it chooses something reasonable. Evaluate if an attack has a reasonable chance of succeeding or at least doing meaningful damage. Too many games simply have scripted attack routes that a human can learn and use to ambush the AI over and over. 

One more suggestion to speed things up: Your blocks are approximately fixed--that means that there's no way a player can collide with most of them. Add a boolean to blocks indicating whether they are exposed or not. (This can be recalculated by looking at their neighbors.) A block which isn't exposed need not be checked for collisions. It's obvious Minecraft does something akin to this--I hit a non-loaded chunk once that gave me a view into the world--I could see right through the solid ground, all that showed up was the open spaces (the far side of them was an exposed surface and therefore rendered.) 

I'm using this image: On the properties of this image it says it's 32 bit depth, so that should take care of the gl.UNSIGNED_BYTE, and I've tried both gl.RGBA and gl.RGB to see if it's not reading the transparency. It is a 32x32 pixel image, so it's power of 2. And I've tried almost all the combinations of formats and types, but I'm not sure if this is the answer or not. I'm getting these two errors in the chrome console: 

I have an image of concrete rocks of different shades of colors, and I'm applying this shader, but without referencing s_lightMap's uniform in my program: 

I'm having a problem texturing a simple rectangle in my WebGL program, I have the parameters set as follows: 

While there have been several answers focusing on the question you asked I think you're barking up the wrong tree here. If the cost of copying is bogging you down you have a lot of game objects and thus the tree you are describing will grow very fast. I doubt you are going to get enough depth to the tree to be of much value here. Exhaustive trees are only an option in games where the choices are simple. After all, even chess has a tree that is beyond computation. 

Take an ordinary texture and chop it up to make your hexagonal tiles. To clarify: Take a seamless texture that's square. Use appropriate bits of it to make your hexagons. If you select your pieces appropriately you get a seamless texture on your hexagons. Note that each hexagon gets a different piece of the underlying texture up until the point the pattern repeats. 

the drawArrays function is simply: "gl.drawArrays(gl.TRIANGLES, 0, 6);" using 6 vertices to make a rectangle. Here's the main part of the code: 

Is there an easy way to re-render dynamic vertices in OpenGL ES 2.0 so that one could, for example, make a modeling program? I understand how to make a dynamic vertex array, but what I don't understand is how to re-render a dynamic array, I've only seen examples where you have to re-compile a shader each time you make an array. I did find the function: 

when uniform sampler2D s_lightMap isn't being loaded into the program. EDIT: This may or may not be because of the State Functionality of openGL es 2.0, but I wouldn't bet on using it. 

Then, the client can connect to the server, but the server has no way of verifying is the client is who it says. These servers are ran by players, which make it easy for them to modify the server and collect the user data. (Only the central auth server can be trusted) The authentication server could accept TCP connections, but I wonder if HTTPS would be easier in this case, as getting a response is easier than establishing a listener on each side, especially for only a few requests. 

I have a 2D grid based water system in my XNA game, we have a method using cellular automata to simulate water falling and spreading. Example of water flowing down a slope: 

Another thing: You're multiplying by a friction constant. Change that--lower the friction constant but add a fixed energy absorption on a bounce. This will damp those last bounces much faster. 

If the terrain is fixed you can do some precalculations to cut down on the problem size. For example, for each sector (pick reasonable sizes to work with) you can define a guaranteed-clear altitude. Each object also has a maximum object height variable. If the object position - object height is greater than the known safe altitude then no further checks need to be done. This won't do anything about your worst time but if you have a lot of moving objects that are mostly clear of the terrain then it will do a lot for your average time. 

How can I add graphics to some control, perhaps a picturebox, on Form1 that could potentially show my game as in a level editor? Thanks. 

it displays a picture with variable light color added to the final pixel color, but s_lightMap isn't even linked into the program, what is happening in this case, at first I thought it would just do the baseColor as the FragColor, but the addition of the 0.25 makes a non-negative result to (lightColor + 0.25). I'm confused, one minute I think lightColor would be set to a texture of 1's the next an array of 0's. Or is it just random data? It doesn't appear at all random in the picture, it looks like it's obeying a rule of shading. I'd like to mimic this effect in code that's not broken. Here's the unshadded image: 

I've been thinking about this for a while. I have a 2D tile bases platformer in XNA with a large array of tile data, I've been running into memory problems with large maps. (I will add chunks soon!) Currently, Each tile contains an along with other properties like how its rotated, if it has forground / background, etc. An is static and has properties like the name, tooltip, type of item, how much light it emits, the collision it does to player, etc. Examples: 

This will allow you to have multiple cell types, and have a global Texture2D for better memory usage. 

As Tpastor had a great answer on why, here is how to convert it from the hard to read 1D array, to a simple 2D array for easy access to each pixel. 

Long story short, I know my coordinates are off and I believe my indices might be off. I'm trying to render a simple 2d rectangle with a texture in webgl here's the code I have for the vbo/ibo: 

I found the problem, it needs to be run from a web server to bypass the security policy, then it can access the local files as they are set up in the server. 

I've researched it and it is a CORS error a "Cross-origin resource sharing" error, but it's a local file! I can't figure out what's wrong. I did make the picture using gimp, and I'm not sure the coding was right on the export, but I eliminated a previous error using "gl.OES_TEXTURE_FLOAT_LINEAR".