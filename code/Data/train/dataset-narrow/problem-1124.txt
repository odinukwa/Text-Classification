2) Make each enum implement this interface by adding to the headers. The method is already implemented in each one. 3) Reduce the reflective invocation to the following: 

The code is OK, it looks quite readable, but still some things may be cleaned a bit. Encapsulation Members are public by default, so some of them should be hidden, since they do not seem (and do not need) to be used from outside: , . Don't Use Mutable Collections Scala favors immutability and using things from should be justified. There is a simple way here to bypass the mutability by concatenation of two maps: 

Another Approach I can suggest another approach that has more or less the same result of externalizing SQL queries, but can be achieved without the dedicated class, only by using the features of Spring. The fields representing SQL queries can be initialized from property file sources: 

And you need to invoke only for the case of , in order to check for method. is already available for all objects. Formatting: opening braces should be moved to the end of their preceeding lines. 

In , instead of using a try-catch block, it is more concise to use on the test method that invokes it. The call will neither be necessary in this case. 

} I/O None of or resources seem to be closed. There should be a block in the main method or at least calls. Naming and Magic Numbers What does the mean? Is this the definitive constant of the Universe? Another name for it, more meaningful, would be better. Just before the lines with , there are occurrences of '7', which may be also seen in next methods. This number should be extracted into another constant. Puzzles? and contain some sort of puzzle-like nested loops, which may be rather difficult to debug and understand what exactly they count through the iterations. Passing parameters by reference, like it is done for and arrays, is neither a very good practice. It is preferable to return values from a method. If there are several values to return at the same time, a dedicated object definition would help to solve the issue. 

Third, the booleans are named poorly. They'd better sound as and : these are their meanings. Finally, the conditionals can be simplified: 

Opening braces on new lines for code blocks are not Java-like style, so format them properly :) Other 

Here are some formal remarks that do not concern the design choices made in the code. Unnecessary Code All the repeated functions like 

By the way, catching of type might be a bad coding practice, but I'd not discuss it here because the context is not enough to judge. invalidateVarnishCache The only purpose of the try-catch block in the original code is to trace the using a hypothetical commented logger and then re-throw it. I doubt that the block itself is useful, because exactly the same exception is re-thrown and must be handled somewhere among the callers and even probably also logged by them. Wouldn't it be redundant? Concerning the , the problem is that it is a and the caller can miss to handle it properly, with hardly predictable consequences. I don't know what is the range of response statuses that this sort of proxy can return, but your implementation does not make distinction between 4xx and 5xx codes, which may lead either to a client-side error (your request is invalid, 4xx) or to a server-side error (5xx), which is semantically close to an I/O exception. For the latter, I can suggest to wrap the response message into a and re-throw it. For the former, it's still up to you to decide how to handle it, probably just logging is enough. 

Given a linked list of 0s, 1s and 2s, sort it. Looking for code review, optimizations and best practices 

Implemented iterator for a binary tree and "pre" "in" and "post" order flavors. I'm looking for code review, best practices, optimizations etc. 

Why I don't extend or reuse: I am prepping for interviews, and interviewers explicitly want you to code, in my experience. I request the reviewer to not insist on reusing, as I am aware in real life reusability is the right approach. This does not work in interviews. Why don't I use a class instead nesting method inside linked list? That is because I need the to be an internal data structure. Had I made a class, it would have no access to internal data structure and perform operations on the node's pointers. 

The stock span problem is a financial problem where we have a series of n daily price quotes for a stock and we need to calculate span of stock’s price for all n days. The span Si of the stock’s price on a given day i is defined as the maximum number of consecutive days just before the given day, for which the price of the stock on the current day is less than or equal to its price on the given day. For example, if an array of 7 days prices is given as {100, 80, 60, 70, 60, 75, 85}, then the span values for corresponding 7 days are {1, 1, 1, 2, 1, 4, 6} Looking for code review, optimization, and best practices. 

Given a postfix expression, construct an expression tree. Looking code code review, optimizations and best practices. 

Check if all leaves are at same level. This question is attributed to geek for geeks. Looking for code-review, optimization and best practices. 

Looking for code review optimizations and best practices. Complexity - both time and space is O(n*m) 

There are n balls kept on a table and connected by same singe connected string (which can be cyclic or maynot). Write the code to select a ball such that after lifting the whole structure from that ball height will be minimum. (algo+code+ mathematical proof of correctness) Note, I do understand merits of unit testing in separate files. But deliberately added it to main method for personal convenience, so request you don’t consider that in your feedback. Looking for request code review, optimizations and best practices and complexity verification. 

This code detects cycle in acyclic graph. The assumption of this approach is that there are no parallel edges between any two vertices. Looking for code review, best practices and optimizations. Also verify the complexity is O(E) and not O(V+E). 

Finer details such as tie-breakers, rules of input params etc, are well documented. Looking for code review, optimization and best practices. 

Design a Data Structure SpecialStack that supports all the stack operations like push(), pop(), isEmpty(), isFull() and an additional operation getMin() which should return minimum element from the SpecialStack. All these operations of SpecialStack must be O(1). To implement SpecialStack, you should only use standard Stack data structure and no other data structure like arrays, list, .. etc. Looking for code review, optimizations, best practices. 

Clearly, it is not very friendly with the SRP! Another question is why does it check if the pixel is already filled and if the color is available? I think that this validation should be produced outside. Colors and Coordinates The dedicated s for possible colors and coordinates look heavy, especially in the context when they are iterated, mapped or sorted on each call in different implementations of function. What improvements I can suggest: 

Method signature change may be avoided if you think it is possible to handle the IOE inside the method. Keeps only readable folders inside the enclosing . Creates a stream of expected files. Keeps only that really exist. Creates a stream of optional objects for each existing . Fills the map with created instances of s. I'd also underline that this original way of filling the map is not very clean from the point of view of concurrency, but the context is not enough to judge about it. 

Briefly speaking, because is a function that is invoked when necessary. is a constant reference, calculated only once on first invocation. If s were used here instead of s, we would not be able to check the condition from within the method for each particular cell. 

The solution above is just a quick ad-hoc tip. Personally, from the point of view of the style, I don't like in-line anonymous implementations. They can be extracted in dedicated entities. I doubt a lot about the methods and member in . This should be a normal object without statics. The constructor is too long. It should be split based on semantic parts (GUI elements, listeners, frame config etc). is ugly, I removed it from the main action processing. 

Now this map can be filled with the indices, using a single loop and they will be accessible by the references to the respective s: 

is suspicious. Not only it returns a tuple containing another tuple, but also it looks like the purpose of the is to show if the return object contains data or marks a missing value, according to : . Scala has a dedicated type for that: 

may also have a constructor taking directly the array of input data as argument. fizzBuzz(args) Three points concerning the modulo divisions and the booleans and . First, the divisors ( or ) must be validated to be different from 0, if you want to avoid . Second, they should be extracted into a dedicated method, which is easier to read: 

Case Classes Some of the occurrences of case classes are overused. I doubt that or could be useful in matchers, because they look like intermediate utility entities providing conversion to target and instances. This transformation can be done through a redefinition of function of companion objects. super-class also introduces a rigid structure and can be transformed into a : 

The builder instance can be extracted into a dedicated reference and you'll be able to apply the common instructions on it only once, for example: 

It may also be seen as an abstract class, because both the implementors might share some similarities (ex. path validation). will be implemented/extended by both or classes. (former ) will decide, depending on the user's input arg, which entity to instantiate: 

A BST has two nodes swapped. Figure out which two nodes. Looking for code-review, optimizations and best practices. 

Given the binary Tree and the two nodes say ‘a’ and ‘b’, determine whether the two nodes are cousins of each other or not. Two nodes are cousins of each other if they are at same level and have different parents. Looking for code review, optimizations and best practices. 

This question is attributed to geeksforgeeks. Looking for code review, optimizations, best practices. Please ignore reviews which include improvements to class / variable names. They are named so for personal reasons and well aware they need to be better. 

Solution to bounded knapsack 01 problem. Once again comprehensive description is difficult in this space, refer here. Looking for code review. optimizations and best practices. 

Example: If a linkedlist list contains 10->20->30->40, and 2nd node has to be deleted then the output should be 10->30->40 This question is attributed to Geeksforgeeks. Looking for code-review, optimizations and best-practices. 

Find ceiling and floor in the BinarySearchTree. Looking for code-review, optmizations and best practices. 

Left view of a Binary Tree is set of nodes visible when tree is visited from left side. Left view of following tree is 12, 10, 25. 

Given a binary tree, return the next right node. This question is attributed to GeeksForGeeks. For example, consider the following Binary Tree. Output for 2 is 6, output for 4 is 5. Output for 10, 6 and 5 is NULL. 

Given a Binary Tree, find the deepest leaf node that is left child of its parent. This question is attributed to GeeksForGeeks. Looking for code-review, optimizations and best practices. 

Convert a sorted linkedlist into a balanced binary search tree. Looking for code-review, optimizations, and best practices. 

This program connects all nodes of the binary tree at the same level. A node of a tree contains a left, right and a sibling pointer which would connect it to the next node at the same level. This connection is from left to to right. Example: consider a binary tree with parent as node A and left and right child as node B and C. then this program joins B.sibling to C. If the immediate sibling is null, then it is skipped. More details if needed can be found here. I'm looking for code review, best practices, optimizations etc. 

This code is attributed to geeksforgeeks. I'm looking for code-review, optimizations and best practices. 

Given a singly linked list, swap kth node from beginning with kth node from end. Swapping of data is not allowed, only pointers should be changed. 

Given a set T of characters and a string S, find the minimum window in S which will contain all the characters in T in complexity O(n). eg, S = “ADOBECODEBANC” T = “ABC” Minimum window size is 4 - “BANC”. 

Perform a graph clone. Verifying complexity to be O(E). Looking for code review, optimizations and best practices. 

Looking for code review, optimizations and best practices. Also verifying space complexity is O(n) and not O(logn) where n is number of nodes in tree.