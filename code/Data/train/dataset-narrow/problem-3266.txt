One of the main reasons why wiring buttons and logic to GND is favoured (and then copied all over the internet) is because of power optimization. 

Boot into the live CD. Plug in the SD card It should mount Copy what you need. Run a low level format ... 

At the moment you can only run Core on Rasbperry Pi 3+ The reason is that Windows IoT core is targeted at low cost, open source or educational embedded devices and only allows a single UWA kiosk like application to run on it. Its free and easy to use if you are a C# house. Windows IoT Enterprise is basically Windows Embedded with a new name and is the "IoT" version that supports x86, like the Edison. It basically means you get a normal Windows 10 experience with allot of "enterprise" features. This is targeted for the guys with the money though - like healthcare and finance providers and you cannot just download it, even if you got MSDN. 

If you are having trouble with flashing your SD card I would suggest putting NOOBS onto it. This really makes putting any OS really easy for you, just plug the Pi into LAN and let it download the image and flash (or connect to Wifi in NOOBS). You can get more help about NOOBS from the MS help $URL$ 

No, there is no proper way to restart the USB bus. The only way is to unplug it and plug it back in. This is hardware / low level driver issue. I had similar problems on a normal Ubuntu desktop with other stuff. Sometimes a full system restart was required. You could try a if the USB fails and try again on start. Not ideal, but automated. 

At the moment I have setup streaming via nginx rtmp-module wrapped in FLV h264. This works really great for integrating into a website. But now I want to actually record and do motion analysis and some registration number recognition. I am using iSpy 64bit on a dedicated machine and it seems to crash allot when I use the RTMP stream in the ffmpeg tab. Does any body know what the best setting for ffmpeg I can use so that iSpy can connect to without any hassle? 

The Raspberry Pi DSI (Digital Serial Interface) connection. The problem is that not all LCD/TFT screens use the same implementation. DSI is a simple interface but the LCD/TFT controller needs to work with that protocol. 

For Windows specifically HDD LLF is a really great piece of software Windows and Macintosh the SD Formatter is also good. In Linux 

Sure, they not exactly these nice wall plug solutions but of the problems with long term use of the Pi. Just saying. You do not have to get on of these but I keep repeating this so people understand that the wall plug USB power supplies are like going fishing in stormy weather. You should endevaour to split as much away from the Pi as possible. Like using USB HUBs, which again, can be powered by 1 good power supply, bypassing the Pi. As long as the total Amperes of peak does not excees 90% you will be OK! 

1 - This is only my speculation. Possibly there is a simple encrypted file saved on the root of the flash. 2 - Apparently only FAT 

After you have set it up the way you love you can consider one of these amazing devices from linksys/cisco. (That wont cost you hundreds and hundreds!) Linksys PAP2 

Wyolum mas the aLaMode (I call it the Almond Pi) to fit on top of the Pi in a stackable manner. It has a real-time clock, uses a aTiny 328, feeds of the GPIO Real UART / power and is flashable in various ways. It is great because the Pi can do whatever you want it do , web server/database while the Arduino runs in real-time interrupt. 

You have just provided a part number to cable. The cable can transmit any kind of data, even just pure voltage if you wanted to or Ethernet. SO unless you know exactly what protocol the screen uses you will have a difficult time reusing it. For example, most laptop screens use LVDS and the other hand, Apple - use their own propretory technology on every single product which makes recycling their LCD's practically impossible. Shown is the most common plug used for LVDS but they can also be ZIF or LIF type cables. (Like the one you mentioned) 

And then you add a new user with limited permissions.Always log in as that user and when you need to do something as root you can just use - enter the root password and it will do it and come back to your low privilege user. 

There are allot of sound issues with the Raspberry Pi - and I on Pi(or any Linux actually) was no exception. There has been an issue with this and it is resolved in the master repo. How to solve the problem? You can try and build mono from the latest source or wait a while until it is pushed into the next update. But it seems mono on "wheezy" does not support audio because ... 

You don't have to "have" that tool. It just tell you what the IP address of the Pi is. It is possible that your firewall is blocking it or there is a known problem with Windows 10 compatibility. If you know the IP address, you can just put that into to Visual Studio and everything will work as normal. 

You need to get a good power supply. Preferably one that can supply you with 5v for the Pi and 6 or 12 for the pump, but that is in an ideal world. In your case your Pi will run off a 5v power supply and your motor MUST run on a separate power supply. Looking at the biggest motor there 12V @ 5.8Watt you will need at least a 750mA power supply. That is not so bad and you can find 1A ones really easy and cheap or even the one supplied or recommended for that motor. 

The Model A lacks this chip, and uses an alternative PCB route that is only connected to the one connector. The other one goes no where. 

Firstly you need to make sure you use a Bluetooth module that supports the SPP Profile. It can either be a USB (With SPP [most have this]) one or one that has UART break out like this. 

Yes you can replace it with another polyfuse. You need to get a 6volt SMD PTC Ressetable Fuse (Poly fuse) rated at 2A. Ebay, Farnell or Mouser. The dimensions don't matter, as long as the length is OK. There are other makes that are not as flat as the ones used on the Pi but more square shaped. That is fine. The pain is DESOLDERING it. Make sure not to overheat the PCB from your soldering iron because it will cause issues. If you want to go down that route then get QuickChip SMD removal kit, watch some youtube movies on how to do it, practise on some old junk, then try it on the Pi. Soldering a new one back is a breeze. 

Yes - Any kind of powered USB hub will work. Obviously you loose one USB port to power the Pi but you can then use that HUB to plug in other peripherals without stressing out the PI. The thing you need to look at is the total Amps a HUB can provide. The one you suggested shows 2.5A All you have to do is add up all the devices you are connecting up by Amp 

More steps to try if after restart still having issues. Close all visual studio and shut down Raspberry Pi - Open command line in Admin mode 

Leonardo boards do not reset even if is triggered but the problem begins when you need to reset it remotely as sometimes it looses connection to Raspberry and you have to physically reset it. 

tboplayer seems like what you looking for. itself is just the engine to read and display video. is an interface someone built. It starts in the console (hidden, you cant see it) and then just relays all the commands to omxplayer via this nice python GUI. It plays audio too :) 

Load the module the next time the system boots, add a line to your /etc/modules file with "bcm2708_wdog". The -a option makes sure tee appends instead. 

You can use a simple transistor to achieve this. It is much simpler than using a mechanical relay, and much smaller. For NPN Only 

On startup there must be something similar supplying NTP servers. You can use any time server you like even a local NTP server if you can set one up. 

Did you ever hear about car thieves that used receivers to capture your car keys immobilizer code then re transmit it to open your car. Well any body can scan these frequencies with inexpensive gadgets, capture the data, re transmit it to do various things. If you knew what you are doing off course. Vendors do not supply what packets do what and allot of data is reverse engineered. That only applies for un encrypted data. Now- If your security remote is made by a responsible company it wont just transmit some kind of packet saying "turn off" or "turn on" that any remote can send. Car thieve story all over again! Remote are paired to your system where they exchange private keys that are used in DES but hopefully AES encryptor. Making it very difficult to crack. So with all that said using a 433Mhz transmitter attached to a Pi's UART is OUT of the question. I would go with 's answer and do not even try to follow re transmitting route unless you have allot of time on your hands. 

A good way is to take a minimal image and bolt on the things you need your self. This 118mb minimal image is hard float compiled so some computational methods should be allot faster and only takes up 14mb of ram after booted. It has a NTP server to stay in synch with time. Read the website on how to configure first boot as none of the extra heavy stuff is included as in the normal distribution. Some considerations: 

Those darn error messages. Instead of saying that there are no servers in the list to connect to - it generically returns no time data was found :D Try this command with your resync/force flags 

Why is this good? Well, it means you can write your own app using HTML and jQuery. No need for server side, like PHP, Python or .NET. They not excluded but its easy to use URL GET's on your HTML page you would write some javascript leverageing jQuery library similarly to. 

You will need to allocate the extra resource for a server software to send these details to your chosen solution. It is unclear what you want to be sending over, just text data? Or image data too? For Images, video streams, you can use a normal WiFi dongle, during debug mode plug it in and start your server. A simple Python web server that can push the data you need via a web browser over Wifi, images, text, and HTML. You can set it to run in 802.11a/b/g/n to tweak power and also you can set the TX/RX power to tweak the power usage on the dongle. You will need to do your own research on this. For pure text debugging you can use the UART on the Pi. You need to disable the console out put first. Then you create a script, in any language you prefer that will dump data to the UART. Then to the UART you attach a transparent Bluetooth Serial Device (more power efficient than WiFi)(try and find BLE but the range is extremely cut down on BLE!). Basically you pair your PC with that Bluetooth Serial device and you get a virtual COM Port. Now you can connect to the Pi using Putty on COMx, over Bluetooth reading all the data on the console. As mentioned before, debugging should only be used when you testing things out locally, so battery shouldn't play to much of a factor. When you done and happy, you then turn of all debugging platforms, servers, processor and peripherals - and let your robot do its thing. (You may let you logger run and save to a file to review offline, in the event things go wrong while you are in production mode) 

Microphone inputs being key here. THis is where you want your TV to stream stereo audio into. I suppose you could use a Raspberry on the Speaker side as audio output and a cheap USB Bluetooth dongle that supports A2DP :) 

If it so rare then do not risk making your own sub standard UPS. Go and find a cheap UPS (like a used on from eBay or something) - It doesn't need to be new since the Pi and router will only use about 5-15 watts. If you find one without a USB port then just plug your devices into the UPS. Even the smallest UPS will be able to power your router and Pi for hours if not days and its built with quality assurance and other protection inside. 

You can use a gas solenoid or valve to control the CO2 supply.I am not sure if it is linear, as in control the flow amount or just on or off. But in order to provide linear power you would need something clever to drive up to 12volts. Otherwise a simple relay will work. 

You can have a look at Node.JS which a sperate http server that is dedicated for streaming data using SOCKETS on HTML5 or PUSHING data with some clever JS. It might be a learning curve with Node.JS so what I would do is set the AJAX method you are using with a repeating timer in JS. Set it to like 10 seconds interval or faster if the data is not too much. That will imitate a simple "stream" Or you could install or do some kind of SOCKET handler in PHP and use HTML5 SOCKETS on the browser to get real live stream. 

This DLL does not support SSL so your connection string needs adding to it. Possibly your server needs to be able to accept non SSL too. 

Server Raspberry Pi 2,1 Unfortunately, on older Pi's even if you got it running on the Pi the best you could do is DirectPlay or DirectStream. And you have would have some bandwidth issues depending on how you were storing the files. Transcoding of any kind will be terrible because the is no GPU pass-through support.. .and it would only support x264 (which is majority of the case so its not that bad, but there is no support) 

The problem most probably exists because you are trying to resize the OS volume and it is locked. If you have access to an Ubuntu or other Linux desktop I would suggest using on another system. You can also download a gparted live disk - Burn it and boot from it. 

Then you need to write code to detect the rising edge or falling edge for the GPIO. The Raspberry Pi already has built in resistors on the GPIO so you can connect directly to the GPIO but In other words do not connect to the 5v0 PIN. Say you connected the black to 3v3 then you would setup the GPIO pin to be LOW and detect on Rising Edge. 

2 Wires -The wall switch when changed will signal the Pi 1 Wire - The Pi will trigger the Relay at the wall switch 3 ^^^ - THe same same wire for any other way to turn on/off the switch 

It is not that simple, actually, its extremely difficult and possibly NOT even impossible. The LCD it self does not use a driver, the GPU uses a driver.