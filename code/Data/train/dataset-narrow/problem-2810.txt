I'm trying to draw an Earth, as I've found the textures in this site: $URL$ I loaded the diffuse, specular and bump maps: 

Runs just in Objective-C and not in Swift. Does anyone know how to convert it to a SCNMaterial, or alternatively to use another way to apply a bump map in a SCNMaterial? 

The parameters metalness, smoothness and transparency are uniforms. I try to vary them, but I cannot get something similar to this result: 

But I get a result similar to a lambertian surface or Oren-Nayar model, where the specular component is absent: 

light{Specular | Diffuse | Ambient} : 0xffffff (converted to a rgba vector of course); materialAmbient: 0x543807 ; materialDiffuse: 0xc6901d; materialSpecular: 0xfdefce; materialShininess: 27.8974. 

I have a texture loaded in three.js, then passed to the shaders. In the vertex shader I compute the normal, and I save into a variable the uv vector. 

I am following this guide: $URL$ Trying to create a tiled map that also supports multiple layers. The guide says that a way is to use depth buffer, and says to: 1) Create the z-buffer and a 2D projection; 2) For every layer in the tiled map, set the cc_vertexz attribute; 3) Enable alpha test and set the sprite alpha func. The first question is: if I use a tiled maps with multiple layers, are also the point 1 and 3 needed? I am fine with the first two points, but as for the third point I don't know how to do that. I should subclass CCSprite and override the draw method, but the problem is that when I create a tiled map there are already sprites on it, so the instances don't belong to the subclass I created. How I go around this? 

Tandem's idea of hill-climbing algorithm is good. Another is: some variation on A* to see how far you can go to see how you can get the highest score over the next N turns, where N is tuned to give the desire result. The scoring values you give can be thought of as "cost to move" -- you're basically on the right track, but you'll have to tweak the values until you get the result you want. In general (not PacMan specific) terms, you need to allocate appropriate values for 

I would say that the answer lies in your Torque license, which your company's legal department should read and base their decision on that. You could also just email the Torque folk (they're quite friendly!), explain what you want to do, and ask if they see any problems or can suggest a path that gets you what you want. This advice works in the abstract, too, and can be the answer for any question of the form "does my XYZ license allow me to do FOO?" 

Minecraft is pretty quick, even on my 2-core. Java does not seem to be a limiting factor, here, although there is a bit of server lag. Local games seem to do better, so I'm going to assume some inefficiencies, there. As to your question, Notch (Minecraft author) has blogged at some length about the technology. In particular, the world is stored in "chunks" (you sometimes see these, especially when one is missing as the world hasn't filled in, yet.), so the first optimization is to decide if a chunk can be seen or not. Within a chunk, as you have guessed, the app has to decide if a block can be seen or not, based on whether or not is is obscured by other blocks. Note, too, that there are block FACES, which can be assumed not-seen, by virtue of either being obscured (i.e., another block covers the face) or by which direction the camera is pointing (if the camera faces North, you can't see the North face of ANY blocks!) Common techniques would also include not keeping separate block objects but, rather, a "chunk" of block types, with a single prototype block for each one, along with some minimal set of data to describe how this block may be custom. For example, there aren't any custom granite blocks (that I know), but water has data to tell how deep it is along each side-face, from which one can calculate its direction of flow. Your question isn't clear if you're looking to optimize render speed, data size or what. Clarification there would be helpful. 

I checked many times the formulas and the implementation, and it seems like I've done all correctly. What's the problem? 

It is practically equal to a lambert shader! I tried a lot of parameters combination, but I never get a shiny teapot like it should be. I also debugged the shader, and it seems like the specular component is zero in many parts of the teapot. I tried to add an if that makes look red all the areas where the specular component is zero, that's the result: 

I already checked and it seems like all the uniforms and varying are passed in the right way, I pass P and N from the vertex shader. The variables are: 

And I believe it's correct. Now since I need to draw it with a variable number of points, I'm trying to apply the explicit definition: 

But I know there are more, I just can't find a resource that mentions all the built-in variables. Also, some of these variables are passed by three.js classes, I need to distinguish the built-in variables from the ones which are created by the class. Does someone have a list? 

I am writing an article on WebGL and three.js, I'm trying to search all the built-in variables available in the vertex and fragment shader. I've found many sites mentioning some, for example: Vertex Shader 

and then look for the move that will lead to the maximum score N turns in the future. You may also want to avoid moves that lead to any score below X (say, the cost of dying) N turns into the future. Once you've scored all the possible moves, added bonuses for how well it might turn out in the future and deducted for how poorly it might turn out in the future, then you just sort the array and take the best move. Let us know how it turns out! 

There are myriad other details but those were the two that hung me up the most. Once I broke that simple barrier, everything else flowed together very quickly. 

This is subjective, of course, but I think that consistency is much more important to game play than speed. Basically, players will put up with a slower frame-rate if the game is consistent, fun to play and not jarring. However, even if the game totally rocks, if it gives people headaches to look at because it bursts, and/or they can't control things, they will become annoyed & stop playing. So... Focus on consistent FPS throughout design & development. Focus on faster (but still consistent) FPS when the game is nearly done, and you have time to improve performance without worrying about bug fixes, etc. One way to get better performance is to use callbacks/delegates/interrupts (depending on your language/platform) rather than polling. 

The plist file was invalid because I renamed the image, so that the name contained in the plist file wasn't the true one. So I just made the spritesheet again with zwoptex and now everything works fine. 

I implemented the Strauss model with the metalness, transparency and smoothness parameters, taking the formulas from the book "Programming vertex geometry and pixel shaders", this is how I implemented it: 

All the tutorials that I've found online speak about using Metal alone, without any other supporting library. But I don't understand if it's possible to create a SceneKit game and then use a Metal layer just to make some optimizations. 

Which I believe is incorrect. I guess I'm not applying correctly the explicit definition, but I don't know where's the mistake, I would like to know what I'm doing wrong. 

But there is no property for the bump map. The only way that comes to my mind is to use a MDLMaterial but I see no way to convert the material back to a SCNMaterial. The method: 

Which seems very strange to me, I've seen other images of Ashkhmin-Shirley implementations on the web, and they aren't similar. This is an example: 

I'm trying to implement the Schlick shading model in the fragment shader. I took the formulas from Karsten Schwenk's "a survey of shading models for real-time rendering": 

In addition to Iain's and Ben's very good answers, an important concept is the differentiation between "what is legal" and "what is enforceable." Just because no one has a particular interest in enforcing their Intellectual Property rights doesn't mean they don't own them and couldn't suddenly change their mind about where to put their legal focus. It's safest (and most ethical) to make an honest attempt to seek permission from the rightful owner. This may involve cost to you, as to hire someone to find the rightful owner. Of course, you can choose to "live life on the edge" and just go for it, but the legal/right thing to do is to put in the effort. Btw, I have some experience with asking for permission to clone what you might think of as abandonware, and the rightful owner telling me "no problem, we're totally done with that IP, now", so don't think it can't happen. 

I've been in development for 30+ years, and was QA for about 15 of that (also QA manager, and director of engineering, hiring both QA and developers.) If you can get a QA job -- if you have tenacity, attention to detail, and can reliably show up for work -- then, yes, it's a fairly "easy" way to get a foot in the door. However, do NOT fall for the romantic notion that game-tester means you "play games all day long." In fact, many people who become game-testers find that they come to really hate playing games in their spare time, as it "feels too much like work." In game testing, you may be asked to do things like