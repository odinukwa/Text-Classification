Find an issue you might want to tackle or a bug to reproduce Read through the project's issue tracker. If you find an issue you'd like to work on, leave a comment on the thread saying you'd like to do so. You can also leave a comment on the tracker about reproducing a bug. Make sure to include relevant information about the version of the project you're using, the system you're on, and other potential factors. A final word from OpenHatch: 

I've faced this issue a few times as I've mentored undergraduate students and been unsure how to help weigh the options. A senior computer science major wants to teach CS as a career. However, they are unsure what steps to take to make it happen. The context is the United States, and typically they are open to considering teaching at any level, but unsure how to weigh their options. What are the possible pathways? Should they get a teaching credential? In what? Should they get a Master's degree? Should they reach out to private or charter schools that don't necessarily require a credential? What are the outlooks for the possible pathways? What's the prognosis for getting hired at a high school? Will they need to also teach math or another subject? Should they consider more creative teaching paths (maybe bootcamps or makerspaces)? What would you advise such a student? 

In an upcoming Girls Who Code session, I was thinking about sharing some stats about computing jobs, and why learning computing gives you an economic advantage, both as a computing professional, and within other fields (CS + X). When I told others about this plan, they were sketical that the girls would find such stats encouraging. Is sharing job stats a best practice for reaching out to high school girls? Why or why not? Here are the three stats I wanted to share: 

Step 4: Contacting Projects At this point you probably have a favorite project or two. Say hello on the IRC channel Tell them you're new to the community and interested in contributing. You can ask: 

Computing has more jobs available than degrees granted. Computing has much more job availability than other fields, even other STEM fields. (See graph compiled from [1] and [2]) 6 For every software developer in the world, there is another professional who uses programming in their job, but isn't a software developer [3]. (Some estimate there are actually four more [4]) Workers (not software developers) who program make higher wages than those comparable workers who do not [5]. 

I would use more visual examples that target conceptual knowledge first. I would do a TON of memory diagrams with code tracing. Then, introduce the idea of pointers as memory addresses like you do in your example. I am a big fan of Nick Parlante's pointer materials. I know they are vintage at this point, but I haven't found anything better at explaining pointers conceptually or at targeting common pointer errors like dereferencing pointers that don't point to anything (seg fault!). Binky Pointer Fun video This claymation video (Original webpage, YouTube version in C) is hilarious and a crowd-pleaser, but also explains pointers conceptually---without talking about memory addresses explicitly. For that reason, it has versions in C, C++, Java, and more. Three Pointer Rules This is my version of Nick Parlante's Three Pointer Rules. Definitely see the Pointer Basics document for full details and the original rules. 1) Drawing Pointers and Pointees Draw a pointer as a box. [C-specific modification] Before it points to anything, that box has a "?" in it. 

The OpenHatch wiki has an excellent article on finding an Open Source project. I summarize their recommended process here: Step 1: Brainstorming Projects Make a list of potential projects by doing some searches inspired by the following: 

People talk a lot about how being a good employee often depends on how much you like the people you work with. I wonder why we don't talk about the classroom in the same way. 

I would be concerned that there isn't any material on planning. In a course that has the goal of building a strong foundation for students, teaching the process of specifying and planning a solution before implementing it will pay huge dividends. Personally, I am a fan of the course order in Rick Mercer's CS1 Textbook. Chapter 1 is Program Development. It could be summed up as "plan before you code". Of course, Mercer has more specific steps which really show the value. 

Do you know of any resources I can pass on to these volunteers to help them become better teachers and volunteers? I'm thinking of making my own, but I'd love to save some work :) 

NB: Carol Dweck has been giving interviews over the last couple years that critique how growth mindset is used in practice (see here and here). She cautions about a "false growth mindset" that says students only need to try hard. It's about good strategies, not just trying hard. She also notes that sometimes teachers use "fixed mindset" as another reason why students just can't learn, similar to how we used to blame the child’s environment or ability. 

Here is a version of the rules: Each white card has a statement (in English or in code) that is either true or false. Each colored card has one of three logical operators: AND, OR or NOT. The game is played as follows. 

I used to work at a community college in the US, where students often hung around for years in the CS program. I agree that it is a terrible outcome, resulting in lost wages and lost potential. However, when I looked more closely at these students, I'm not sure the problem was that the students couldn't learn CS. It seemed that the problem was that they weren't applying themselves in class for a variety of reasons---sometimes, but not always, for highly sympathetic reasons, such as competing family obligations or need to work. Other reasons included the lack of places to study on campus coupled with a poor study environment at home, or not knowing anyone in the program and becoming demotivated socially. Sometimes, I think the problem was that the teaching in their classes was very poor, and students chose to drop the class and re-try rather than get a poor grade. Will the students that you advise really do better in another program? CS is a great area, with many job opportunities, even if students join the workforce with just a few CS classes. Perhaps the answer is to reflect on issues within your CS degree program and consider how you can get students to stay on campus, focus on work, and get help when they need it. Social motivation will likely be a large factor. Tutoring strategies like PLTL can address the academic needs while also forming social bonds between students. Best of luck! 

I think this is a structure of knowledge problem. I suspect the disconnect is that you have organized your knowledge in a way your students haven't. You understand that strings, lists, dicts, and deques are all something called containers. You also understand that all containers can be accessed with . Therefore, it's straightforward to consider that could be applied to any new container you come across. But do your students understand this organization of types in terms of containers? I bet they don't yet. They are still thinking about each type as an individual entity, disconnected from others. Experts' knowledge is organized much more effectively than novices'—— that's what it means to be an expert. (Cite: Relevant section from How People Learn, summary from Cal State Northridge) On the other hand, novices' understanding is tightly tied to shallow features like syntax. It will take a while for them to see the deeper organizational features. You can help your students become more like experts by explicitly helping them organize their knowledge. If it's not overwhelming for the students, teach them what a container is and what all containers have in common. More generally, connect concepts together to help support students' development of those expert-level connections. Good luck! 

Help your students focus on strategies and processes that lead them to success. Students should see evidence that using a good strategy will help them. It's not just about being "smart". 

Believe yourself that growth mindset in computing is real. Act what you say. Your students will likely pick up on your attitude. 

I think Parsons problems offer a low-cognitive load way to offer practice for just about any code-writing topic. I think they are especially good when students start learning a certain code pattern, and would be overwhelmed by too many details. Ebooks written on the Runestone platform can have Parsons problems embedded in them. Teachers can choose to use and potentially adapt one of many existing ebooks, or write their own from scratch. Multiple ebooks contain Parsons problems you could use directly or adapt: 

Each player starts with 6 cards, 3 white and 3 colored. Someone picks a random int for the value of x. When it is your turn, 

I've been looking for peer instruction style questions for an intro to Arduino workshop, but I haven't found anything. Besides not seeing PI materials, it's hard to find any materials where a student has to self-explain their own knowledge or discuss with classmates. Most resources are in a tutorial style where the student is expected to essentially copy a given configuration. I'm worried that this will lead to low understanding and not change students' misconceptions. I want materials that ask students to discuss their understanding of