Building off Bennett Brown's answer about creating an "alphabet" with DNA... It is being researched how to efficiently store data in DNA. Here's some thoughts you can cover: 

A big problem of learning alone is that you don't always figure out the preferred style for a language, the most "pythonic" (in the case of Python) way to do it, or how to write code in keeping with the language's features. Another problem with learning alone is it is very possible to learn to write code that is really terrible - "mislearning", I suppose. Both of these things are true for really any subject one self-studies. What are some ways to prevent the learning of poor techniques or styles when self-studying? 

First, try setting up some sort of "coding hangout time" - you and her can practice coding together. You can help her when she gets stuck, and encourage her. It's always good to have a buddy in what you're doing =) Second, start with the right things. Try a little visual programming first, using hour of code programs, or a language like Python, which will teach good practice (indentation, etc) and remove worries like memory control, which make it harder for new learners. Third, start small. The classic hello world program in Python is literally . From there, maybe go to things like adding, or using variables. I particularly enjoy Codecademy's course - problems with instructions. And remind her that you'll be willing to help when you have time, and so will people on sites like stack exchange (Codecademy also has a forum, though I haven't really used it). To conclude - show, don't tell. Don't tell her she can code, show her she can code. 

The way our network is setup I have access to my students network shares. So, if a kid is absent I can get to their stuff and copy it for their partner. Not ideal, and definitely doesn't scale well if there are a bunch of students absent. Plus, I really don't like the privacy implications. But it works in a pinch. I've also had groups share a flash drive, and then leave that flash drive in the classroom. Works okay if there's no plan on working outside of class. Some groups will zip up and email themselves the work they've done at the end of class. Or, upload to DropBox, Google Drive, or something like that. My personal preference would be some type of source control. I've been looking for a reason to introduce git into my 2nd year course. Maybe this would be a good excuse. 

I semi jokingly tell my students at the beginning of the year they can play any game they want on the computers, as long as they write it first. It at least gets a laugh. For me it takes two things. One, I need to be able to see their screens. Given, this is probably much easier with school provided devices. When I moved into the classroom I'm in all of the student seats were facing forward with the monitors facing away from the teacher. First thing I did was push all the desks to the wall so that the monitors are facing the center of the room. I can see almost every monitor from almost any spot in the room. This also helps getting to students to help them since I don't have to squeeze through rows. It does help that I have a pretty big classroom though. And two, I need to keep them busy. What I've found is that once there's a student playing games it spreads. And the first one usually isn't playing because they're screwing around. They're probably done with their assignments. I throw more assignments at a class than most students will be able to finish - some are extra credit. I also have a list of enrichment activities that they work on when done with labs - Coding Bat, Code Combat, Project Euler, making their own game, that sort of thing. That way there's always something CompSci related to work on. We are partially BYOD in that kids are free to bring their devices, but aren't required to. There's always a handful of students that prefer to work from their own notebooks. My rule on that is that they're free to do so, until I catch them screwing around on something else. Then, they have to use the school computers. For most, that's enough incentive to keep on task. 

All "joking" aside, foreach loops are super useful - I use them all the time. They're the difference between 

A couple of ideas: 1st day Start by getting everybody up and moving. Have people form sets - say, a set of colors, with everybody wearing a different color, or a set of ages - but remind them that they can't have two people representing the same color in the set. Perform different operations with the human sets - intersections, unions, etc. After a couple of exercises like this, show them the formal notation for sets and match it to what exactly they were doing (i.e., when you created a new set of only the people that were in both sets, you were performing an operation called an intersection, which you can notate as $A\cap B$, etc). Hopefully you can get far enough into set theory such that you can reach DeMorgan's Law. Another good thing to introduce would be proofs - you could, for example, do the proof of DeMorgan's Law, or a simpler topic in set theory. As you continue with set theory and set theory notation, let them experiment with Python's set type - maybe your exercises could have them solve simple set problems on paper and with Python, and also a little work with proofs. 2nd day This day is talking about truth tables, logic gates, and boolean symbols. A couple of ideas for making this part less dry: 

People are amazing. I could tell anecdote after anecdote about someone who would have looked, to teachers, below average - but as a friend I could see that they were way more intelligent than the teachers thought. I can't believe that as a matter of principle. If other people might be limited at learning, I might be too. I don't want to think that. I want to believe that with enough hard work, I can learn what I wish to learn. Sure, others might, probably will be, better at it than me. But I believe I can learn it, whatever it may be. 

Wish I had a good answer, but I can sympathize with your Scratch example. What I started doing was just giving up on the first day we did Scratch. I would show them the drawing tools before we did any coding. Spent about 5 minutes showing how to make sprites and backgrounds and then gave them the rest of the period to play, with the understanding that was the only day that they had to just play around and doodle. Day two, we start coding. Worked fairly well. It was at least better after I started doing this than before. I think the novelty of it wore off when they were allowed to goof off for a day. Haven't taught Scratch in a few years, but I noticed the same thing happening with Jeroo. Kids love painting the island with flowers and water. The last lab in the set is one where they get to build their own lab, and make their own island. I think having that to look forward to helps. 

I use school colors and principal's name. If someone comes in tomorrow and says your principal is no longer Mr. Smith, it's now Ms. Jones then that change is made for every object (student) in the school. You don't have to go to each individual student and tell them that their principal has changed. It worked really well this year because we did get a new principal. 

I have 3 tiers of labs. First are the required labs. They're worth 100 points each and every one must do these. If they don't do one, it goes in the gradebook as a zero. These are also the labs that I think are the best of each topic for practicing what they need to work on. My calendar is based on how much time I expect 90 plus percent of the students need to finish this set. Second and third tiers are bonus and challenge labs. They're worth 110 and 125 points respectively. If a student does these they go in the gradebook. If not, the grade is omitted so there's no penalty for not getting them done. These tend to be extensions of the required labs, but might be a little more difficult. Generally the students that are the fast finishers are also the ones that like doing the labs, so throwing a few more their direction will keep them working. Plus, it's an AP class so the 10 or 25 extra points on a lab grade will be a motivator. I also have a page with a list of websites they can go to if they're finished with all 3 sets of labs. It links out to sites like code.org, codecademy, Code Combat, and CodingBat. Sites that are related, but a little more fun than just cranking out labs. And I'll also let students come up with independent projects to work on. 

StarLogo Nova is another MIT project. It's block based like scratch, but I personally find it much nicer to use, and it allows (I think) for more complex programs. It is more simulation oriented than scratch, but you can still make just about anything with it. Also, it has a flying turtle for a logo: 

As for topics it's relevant with - I'd say almost anything. You can write a program that solves a math problem, a research question in just about any science, makes a document look nice and neat (ahem, LaTeX, I'm looking at you), waters your plants while you're away (with the help of a cheap microcontroller like the Arduino), etc. So engineering, math, science of any type, writing, art - I kid you not about the last. Computer generated fractals are just about the most beautiful thing I've ever laid eyes on. Oh, and animation - think movies like Toy Story, and so on. Hello, computer science! Think of how many ways computers are used in your daily life. Think of how many people applied the principles of programming and CS to make those things work. I could keep going, but to conclude - computer science and programming also improves general problem solving skills. And you get the nice whoa factor when you show a friend your latest creation. So, um, yeah - please include as much CS stuff as possible in your curriculum. 

First, tell them that it happens. I can tell you I have had one awkward conversation with someone on stack exchange in chat in terms of nerdy interests and gender; thankfully someone I know (from SE) stepped in and helped me out. And that was a minimally offensive sort of conversation. Letting your students know that they are not alone is a good first step, and will encourage them to reach out to others who probably have had similar experiences. Just talking about it, and not feeling like maybe it is just you is important. Second, tell them that it's not right. Reassure them that what's happening isn't because of them. There's people out there that for some reason (background, personal belief, whatever) are of the mindset that gender (or age, race, etc) does play a role in ability in certain fields. Solutions 

You said he refuses to work, but has mastered the material. How do you know he's mastered the material? I've had students like this in the past. They'll finish 2 weeks worth of assignments in a day and a half. Talk to them. See what interests them about programming. The few times that this has come up, the student had something specific they wanted to build. It was well above what was expected in class, but it was still programming, so still related. We came up with a plan for them to work on their pet project, which always required that they finish the assignments I gave first. Then, they're free to build their project. 

Grades. Works especially well around final exam time. You can find the average. Find the highest and lowest. Find the average with the lowest dropped. Find the most common grade. Count how many are in the range 90-100%. Given an array of grades assigned for each class, calculate GPA. Given 3 arrays that represent labs, quizzes, and tests calculate the final average. Each array can be weighted differently to match whatever your grading scale is. Ex: I would have labs weighted at 10%, quizzes at 20% and tests at 70%. 

I post solutions after the due date of an assignment. And usually, I'll go over them in class as well. Two birds... 

Yikes, that doesn't sound like a fun way to grade. Sounds about like what I do with students that are competing in ACSL competitions. But that's only 6 or 7 students, 4 times a year. I can't imagine trying it with 100 students all year. Here's what I'm doing, and what I've done. Online Autograder This is what I'm doing now. Kids login to Canvas and it launches an LTI tool embedded in an assignment. They do their coding in Chrome and click the Test button when they're ready. They can keep testing until their happy with the grade. Grades get sent back to Canvas. I still have to transfer them to our actual gradebook. I can then go back and download the submissions if I want to look at them for style or tips. Generally I try and do this with everybody on at least one lab per lab set. What I've found is that students average about 11 submissions before they move on to the next lab. I only grade the last one, although I'll go back and look to see how they progressed. Downside to this is that it works well for smaller labs, but not as much with larger projects. I can break down large projects into pieces that they can check, but eventually there has to be a full project turned in. JUnit Tests Before I moved online I would write a JUnit test for every lab, and usually I'd write two. One that I would include with the starter code and one, more in depth, that I would use to test. Students could run the test code as many times as they wanted. Then, they'd submit their solutions and I'd run it against the other test code. Biggest downside is it was pretty time consuming to write unit tests for every lab. I've gotten pretty quick, but it's still a time suck. Walk around Not ideal, but I can pick up a lot about students' code by walking around the room and watching them code. I do this a lot with projects to get a feel for where the kids are on the project. By the time it's turned in I've already got a pretty good idea on what they've done. Doesn't scale well though. Biggest class I've ever had was 34 students. "Participation Grades" Sometimes I fall into this trap, especially with my second and third year students. I give them labs, they work on their labs, and I assume that they're done correctly if they've been working in class. Only saving grace on this one is that labs are worth very little and tests make up a majority of their averages. So even with gimmie grades on labs, they can still get hammered on the tests. Admittedly not a good solution, and one that I'm trying to work my way out of next year. Eyeball It Skim the code and see if you think it works. Same as the participation, this only really works with smaller assignments and when labs aren't worth all that much. 

Tell them about role models - people who have experienced it, but pushed through. Think the movie/book Hidden Figures, or colleagues of yours, or even you yourself. Give them people to contact (like yourself, or other students) that are role models or who have gone through it. Encourage them to not care what other people think. They chose to go into computer science for a reason - because they enjoy it, probably. Don't let other people stop you from doing what you love. Of course, this doesn't mean that words or actions aren't painful - it's to encourage them to push through that and just do what they've trained to do. Give them ways to respond, i.e., going to HR/management/something within the company, documenting it, things to say, etc. Tell them that they are part of the group that's working toward stopping it. Get them angry, and ready to do something about it if they encounter it, not just blow it off Seek a good environment. With so many companies needing programmers, they can pick the good ones. 

Adele Goldberg was one of the seven programmers that developed Smalltalk, one of the first object oriented programming languages - so nice for your OOP unit. Many concepts developed by her team became the basis of graphical user interfaces. There are many other women listed at Wikipedia's women in computer programming page that you could draw from. 

Firstly, I would say that some things do come before content. Student safety and well being, for one. If you are so focused on content you can't see that a student is having serious problems (bullying, home life, etc) then that's no good. A student must be able to "ingest" the content being presented, and they can't really do that if they aren't well fed, feeling safe, tired, sad, "antsy" or feeling like moving (seriously - ever tried going from P.E. right into a test?), etc. So let's say that first step is fulfilled, and a student is able to pay attention. The next thing I'd say is presentation. This is the difference between plopping up the quadratic formula on the board in Algebra I and having every student write it in their notes and move on, and explaining it, perhaps with some examples, or whatever. In both cases, the students "get" the information, but unless they are devoted textbook readers and question-askers, I doubt they'd actually understand it and be able to use it. Of course, this doesn't necessarily mean just explaining it, this means keeping the student's attention, it means slideshows, videos, activities, demonstrations - things other than just the robot droning teacher. Then, practice. What use is information if it can't be used? Problems, labs, and so on, are just as important as the content itself. You can't have a presentation or a problem about nothing - there has to be some substance to it. But the content won't get through with the presentations and it won't be useful without the problems. But safety and well-being of the students comes above it all. Also, study strategies are important, and so are the prerequisites for the content. These are things, which, if the students don't understand, will make things a lot harder for them. There's probably also things I haven't thought of here - this was supposed to be a general overview and then got a little longer than I thought =) So: is content king? No, content alone cannot do much. It must be coupled with a student ready and able to learn, a good presentation, and practice to solidify the content and make it useful. 

I don't think you can just by using an auto grader. I use an auto grader to tell me if the code solves the problem it's supposed to solve. And I tell my students that any code that solves the given problem is correct. Some people write a 2 line solution, some write a 50 line solution. But I don't consider either one more correct than the other. Generally the shorter solution takes more mental work and the longer solution takes more physical work (typing). But I will go back and look at the submissions. Since the auto grader has checked it, I don't have to worry about whether the code builds or gets the right answer. That takes out the time consuming, boring part for me and lets me focus on style and any tips that I can give. I guess, especially early in the year, I don't want to penalize students for a working solution that might not be as clean or elegant as another student's. There's enough frustration in a first year course without worrying too much about style and efficiency. 

Fingers crossed that this one doesn't get closed. I've tried to do something similar, but it hasn't come out well. Hoping that some others have suggestions. It looks like they're using some sort of overlay or whiteboarding software, and I assume a tablet or stylus. I can see a cursor where their pen is drawing. I've tried this, and it didn't go well. But, I think that's more a factor of my handwriting than of the idea. Enough years of typing being my main method of written communication has made my handwriting terrible. And it's even worse on a Wacom tablet. Same thing with some student created videos. They're just hard to read. I'd like to find whiteboard software that also allows typing. Haven't found one yet, although I haven't looked all that much either. A couple things that have worked... If I'm in a hurry, Powerpoint has enough animations built in that it's possible to do a fairly decent job. And, they can be exported to videos if you want to upload to YouTube. When I've had more time I've used Flash. It's deprecated now, but I still have an old copy on my computer. Takes longer, but gives me a little more freedom in what I build. Also can be exported to a video, which is especially important since browsers are starting to frown on Flash. Edit: Just played around with the pro version of Acrobat and it looks like it has a pen and text tool that might work for what I'm trying to do. Most of the time I'm just trying to annotate what's already typed out. Edit 2 - After "screen casting" was added This year I started capturing my screen as we work through problems and then uploading to YouTube for kids that missed the day or just want to go back for a refresher. I'm using a program called OBS. Works really well. A little Googling brought me to a Windows program called ZoomIt that will let me write and type over the screen as I'm demoing. Think I might bring my Wacom tablet to class tomorrow and give it a try. 

I'm going to be honest - I'd question them first. Maybe suggest tutoring to see if they like it, and really trying to get at what they want to do. If they want to teach at a university and also do research, that's one thing. If they want to teach at a highschool or middle school, that's quite another. An example: I've emailed a professor at a university near me. He does extensive research, especially in molecular computing and so forth, and he emailed me apologizing for not responding sooner because he had been working with a colleague in Spain on a research project. (::jaw drops in awe::) He also teaches a few classes at the university. This is at a pretty good public university. In contrast, I've taken a class under a teacher in my middle school in engineering/robotics/programming. It was a pretty good course, I must say, but I should point out: he taught three engineering/robotics/programming classes a day, three math classes, and then had a prep period. He also supervised the mock trial club and the robotics club, and I think he might coach a sport too. He as far as I know does not do research. This is at a really good public school. Quite different. If your student wants to do the latter or the former, fair enough! Both are good pursuits. Just make sure they know what they're getting into. Things might be better or worse depending on whether the school is public, private, what area it's in, etc. Also, maybe they really just want to do research, or maybe lead a team in industry. On the other hand, it's perfectly okay to change careers - I know multiple people who have done it - so maybe they want to do one thing and then another. That's all fine, but just make sure they know that they want to do, and that they've tried doing it. Also, point out that they might want to take some education focused classes along with their main classes.