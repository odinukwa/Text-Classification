There sub-loop has now its own method that looks for the delimiter. This one to got a few more names to give all these conditions meaning. 

I'm not sure what you mean by is this needed? The strategy pattern or the nested builder? They have both they purposes. You used the strategy pattern correctly but the nested builder doesn't have to be nested. As I've already said in my previous answer, it only makes sense to nest it when you want to access private fields of the constructed objects becasue it's the only way to do this. 

I'm not saying that these variable names are perfect but without knowing your exact use case there's not much you can come up with based on only a few lines of code. But I think you know what I mean. I still find this nested s aren't pretty... but at least they are less misterious now. But this is how refactoring usually works. You change your code a find a new pattern that you can replace with an ever more efficient code. So the next step could be replacing the magic with a constant and use the null operator in conjuction with coalesce: 

& This is very confusing as the names do not implicate any relation. If the has a property then then foreign-key in the should be called . The would be much more natural then and self explaining: 

Having these extensions I now could reuse them with my own dictionary. The constructors became as simple as: 

In some rare cases when an exception is thrown too often (usually a bug with a in a loop) there was a performance hit. Other then that I already use it multiple times in many applications and being able to create ad-hoc exceptions is a real time saver when coding as well as during debugging by more precise excepitons and messages ;-) 

Omitting can easily go sideways especially if you mix it like in the example above. I suggest to always use them. Even if it's just 

Theory Your function is very similar to the structure of . Keeping only the essential, you could write as : 

The main problem is that your method relies heavily on your hard drive. The process needs to recursively look inside every sub-folder, which takes time, especially with 50000 files. Windows search is much faster because it indexes the files and doesn't scan the whole drive for each query. If using Python3 is a possibility, the only thing I'd change in your code is to use and replace the loops with: 

Links between multiple edges What happens in the case of link connecting more than 2 edges, for example 

Code Here's the refactored code. It's much shorter and 3 times faster than your original code for the primes below 1 million: 

Upper bound for p_n There is a known upper bound for the n-th prime. It means that you don't need any loop inside , and you don't need to check if either. 

Upper bound for p_n There is a known upper bound for the n-th prime. It means that you don't need to guess how large it could be. tells us in less than a micro-second that the desired number cannot be larger than . You just need to apply the Sieve of Erathosthenes up to 114320 and you're done: 

Better formulas Adding a delta Note that represents how small the terms are, not how close is from π²: 

As you mentioned, Pandas or at least NumPy would do just fine. They're fast and the syntax is clean and straightforward for this example. With NumPy You just need to define a mask as a boolean array: 

now returns 10 correct digits for π². This new formula is unproven, so use at your own risk! BBP-Type Formula There are many π² formulas, so feel free to pick another one. For example: 

One possibility would be to use a in order to check for duplicate integers. If there are no duplicates, the length of the list should be : 

Another alternative would be to work with generators and join the letters at the end instead of building a new string character by character. 

Here's a C# version using a cross of the template method pattern and the collector pattern. It'll pick up any issues from any derivative implementing the AddValidationIssues method. 

Instead of wrapping the proxy creation in a concrete service proxy implementation, I'd write a concrete service factory instead which in turn uses the ChannelFactory. The service factory class could also use an interface for creation, so you can have multiple concrete factories. $URL$ That way your code can continue to depend on the interface only, and you can change the way the proxy is created without writing concrete proxies. You could also have a "local service factory" which doesn't go over the wire. Usage would be something like this instead: 

Notice that I replaced your setter with an method. It's ususally good practice not to replace an entire encapsulated collection using a setter. Although you can validate the entries in the setter, a property should not do much logic other than returning or setting privates. If you have a look at the collections in the BCL, they all expose an method and a method to empty the collection. The method also gives you the option of adding multiple sets in turn. If you need different logic when stuff is added etc, have a look at the template method pattern: $URL$ If you need multiple base classes with differing logic, you could combine the inheritance with the extension methods, or another base class. :) 

If you do this, you'll probably see some pattern emerge. I can already see two classes, or rather instances of a- instead of one. Maybe something like Strategy? 

I wouldn't presume the metadata information gathered from reflection as mentioned by w0lf will be handled completely if you reference the Model property directly from the lambdas. 

All good answers. I'd like to add my two cents to @deepee1's answer. If you keep the FoodItem class he provides (with a constructor), you can create a list of food items and then create everything else with completely DRY code. You can even easily move the definitions out of the code. Not to mention creating n different UI's with the same "logic". Here's what I'd do: (Forgive any mistakes, long time since WinForms :) ) 

? Your current algorithm doesn't seem to take it into account. A might help, for example to keep a list of nodes beginning with and another list for nodes finishing with . Output format If you only sort the edges, without grouping them in connected components, you're losing information which you have to recover later. You could return a list of sets of edges instead of a flat list of edges. 

Theory Calculate prime factors For a semi-naive approach, you could calculate the prime factors of first: 

You seem to think that this code would display 500 numbers between and . It doesn't. Instead, it displays , , and returns . You need to replace with . Alternative You can use to look for the substrings, them and replace them: 

Just a collection of thoughts... Terminology Since you're talking about graphs, it might help the readers if you talk about nodes (your ) and edges (your ). Your graph is directed, and as far as I can tell, you're looking for the "strongly connected components". Use simpler objects Lists of pairs of pairs aren't very readable IMHO. When showing examples, you can replace them with lists of strings: 

It calculates the 100000th prime in less than 230ms on my computer, compared to 1.5s for your code. itertools.islice Another possible optimization would be to use to get the n-th prime out of the generator, without converting it to a list. 

looks like . With Sympy You can delegate the job to and be sure you'll get a correct result with arbitrary precision: 

Even with more than 140 000 terms, the series only gives the 3 first digits of π². This formula is very simple but converges too slowly. What's very interesting, though, is that the difference between and seems very close to \$\sqrt{2\mathrm{error}}\$. It seems to hold true for any , so we could update the function: 

You get more information, it's more robust, you get diagrams if you want, it can handle more complex cases and (who knows?) it might be faster than your solution for large datasets. 

I'd use enums. My suggestion presumes you are able to refactor your existing code a bit. If your control can be modified to keep the position value in one property of the following enum type, this will work. 

More on extensions methods here: $URL$ Inheritance Put these methods in a base class and have the behavior that differs in inherited classes. [edit]Updated to show how the base class can be generic[/edit] 

You aren't renaming it either, you're naming the parameter for the anonymous function the lambda expression represents. But if you don't like the lambda syntax, there's also overloads taking the property name as a string. 

I just re-read some comments and realize you need paging too. Add a private int page, and a private int pagesize, then add the multiplication of those to foods[i] in CreateButtons, and swap foods.Length with pagesize. You can have as big an array as you want then. 

I would refactor it into a plugin that takes the content as an option. Then you will have two instances of "dialog controllers" each with its own events. Have a look at the "plugin with data" example in the jQuery docs. $URL$ You'd set it up like 

You could possibly swap with . If you can, you should generally try to avoid too many subqueries. At least attempt to indent them properly. You could also benefit from having a look at common table expressions. These can help you group up the subqueries in predefined results for your query. Makes it a lot easier to read. $URL$ 

Property will expose the current value on postback by it self. You could also expose an event on your control that you refire in the ValueChanged event of the hidden field. 

I don't immediately see any efficiency issues with your code. It's simple and concise. But I do notice that you don't follow all the best practices for plugin authoring described here: $URL$ I guess you'll do something else than alerting ten times in production? ;) 

Overriding the property in modifies the behavior of . Which means you've broken the OCP. Besides, what do you expect to be if you have just set it to 10.0? (Does it even compile when you only override get?) What you could do is employ the template method pattern: 

Create a storage factory that decides based on the parameter which storage to create and knows how to initialize each one. The settings come from a configuration I guess? 

It won't be any more complex then it already is and you'll be able to verify many parts of your application without having to click every button and hoping it won't crash. 

no one else does ;-) Ternary operators are very usefull but you really exaggerated. In a production code I would never accept it. You should break it to smaller pieces. 

You can use the same approach for the descriptions. Just create another attribute and put the description there. Or the name of the resource etc. Use the class to retrieve it and display it e.g. in a textbox upon selection. 

Agian, it depends on what your are building. If you are never going to use them then why should you implement them? Its your custom collection to solve a particular problem and probably not a general purpose one so create only APIs that you will really use. 

Inconsistent code The naming is very incosistent and does not help understand the code, actually it raises even more questions. It does not follow any known naming convention but mixes several of them. It uses prefixes for some variables but not for others. It mixes PascalCase and camelCase and it looks like it was written by three different developers each using a different naming style. There is nowhere a factory (as a public API) but you call a method so the obvious question when I see this method is: What session factory? Did I create one? Does it really need to be public? 

LINQ free (fast) You could try to mix LINQ and the into this where you not only provide the root-objects to the constructor but also the custom comparer. A hash-set stores only unique objects so there's no need to filter them. 

Usually it's better to define the variables nearest to their usage. You don't need them globaly but only inse the block so define them where you actually start using them. 

There's a couple of nice alternatives for you. Extensions If you don't need to encapsulate the instances, you could make your methods extensions for or whatever you've extended: 

Not entirely sure I got your schema right, but something like this should be possible. (omitted a bit of ordering, and I assume you only have one current year) 

This makes closed for modification (cannot change price / individual price), but open for extension (can add to price). (Naming and structure in my example could probably be improved, but it serves the purpose) The behavior is still possible to modify, though, so an even better solution would be to have some collection or set of rules you can add to, so you don't accidentaly override without calling . 

Or better yet, build the initial list based upon content in a dictionary. That way you don't run the risk of having typos in the switch or the initial setup: 

Put the contents, or all of each if and foreach into their own functions. Unit test the functions. Put everything else into small functions too. In the end your main function should read like a small story: 

As a sidenote, I'd look for another name than "BaseClass". It doesn't say anything about what it does. 

This might be off topic, but if you use switch statements for more complex functionality, you should read this before going further. $URL$ 

You don't have to use x as the parameter name for the lambda. You can call it model with a small m for instance. 

instead of duplicating an existing function. ;) (I like linq, but sometimes, what Jeff suggested is actually more readable) But more importantly: I don't see why you should have to dispose model. Do you have unmanaged resources within the model? If so, shouldn't dispose of the unmanaged stuff and return some plain old Clr objects to you as a model? If the model is adapter(s) for SQLDMO or such, could you translate instead of adapting inside ? 

Of course you can expand on that by employing the template pattern for the extra parameter settings. I would also look into extracting the parameters to a "parameter object" instead of several parameters.