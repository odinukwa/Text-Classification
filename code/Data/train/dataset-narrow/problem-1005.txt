Here is what I came up. It is header only library now. I believe is much more clear like this. myhash.h 

And really final notes - why not move this ID thing a separate class, then you include it in "user" class via inheritance or via static member. Then the user class will not need to have user destructor at all. 

constructor class member "initializers" I may be using incorrect term, but constructor better be like this: 

I would even move it to the file. skipping for now Integer.h same considerations for the and . Initialize the value to zero. If you do so, you can ommit initialization of . once again doing nothing. this time you can remove it. Display.h remove and . on all your code, you use . now suddenly you switch to . Why? Answer is - to make more ugly :) main() Do you think there will be exception thrown? is deprecated. If you are using , change it to . Make to be . You really not need to write it several times. 

return 0 from main() In latest C++, from is optional. Since is there, do not remove it. const method 

Naming things Why you have all caps function name? Why you have variable with capital letter in ? At first I thought it is template parameter i miss. Use auto more often: 

system() Don't use . This forks new shell (probably in your case "cmd.exe") and executes via the shell command "pause". I do not know what C++ function you should use, but probably getchar will do. However it is C function. $URL$ For this you need to add . pragma once I see you have used . It is well supported, but it is not standard. Try use "include guard" it is what standard way. $URL$ main() This is perfectly OK: 

Why you pass by reference? size_t is as big as the pointer, but there will be additional hidden dereference that will slow down the execution. keep the const, remove 

Cache the instance of and objects so that you don't need to create them each time you measure the length of string. I've created a small test to see which part takes most of the time: 

As a result, I would try to have a single structure/class that provides required functionality. If you want to be able to reference the functionality without explicit reference to , consider switching from to and define an interface for functionality. 

Operator overloads cannot be reused, you would have to reimplement them anyway. Both structures have references to each other which is not great. appears to add a very little value on top of . 

Note that will never be true, because you create a new , and it does not implement interface. In addition to @mjolka's description why you have a 50% CPU load, I would like to suggest how you can avoid it. Currently you have a central place that manages all sockets in one place. I suggest to do it differently - have each endpoint handle the data on its own, and manage all sockets only as a collection of ongoing processing (tasks) like this: 

Note that the series of articles "Refactoring toward frictionless & odorless code" actually show how you can move the transaction/session management to infrastructure level, leaving your business logic clean an tidy. And a couple of small comments: 

Any chance you are using .NET 4.5? It contains the method that does exactly what you need: Task.WhenAll. 

It's better to use new asynchronous API since it provides more features for combining asynchronous tasks. Ideally , and should expose asynchronous API if a certain operation is not trivial, so (as you mentioned in comments you wrote them) I would implement asynchronous API for them first, e.g.: 

About method - if this a method is in Controller class, and taking previous bullets into consideration, the code would look like that: 

Now let's look at the method. The main issue there is the processing of each task as it finishes. It can easily be done like this (note that both methods are no longer , as they do not on tasks): 

You also might decide to remove them and use directly. Or you can do static method . Here you create session as well: 

You . This is first time I see this line in PHP. Just remove the statement. Session is already made in constructor. If is not will not help at all. Actually, in constructor, you can the result of into some class property and use it instead of . SESSION_handler::session_expired() should be something like this? 

variable is static. This means it it accessed using lock + semaphore or probably is atomic. Why not move the inside the class? 

Everything looks good enough. Code style is OK. You are using , so it will be quite fast and there is nothing you can do in the code to speed it up. You may or may not need to check this: 

Use private where needed I believe must be private. insertAtEnd() I might suggest you use instead of . What will happen if list have more than 255 elements 

possible error: constructors / destructor of ListNode does not add-up. there is some error somewhere. possible error in constructor probably there is an error? why you create prev and next here? I believe you need to set those point to something else, not to allocate new nodes? or possible error in default constructor and destructor you have default constructor. what is it purpose? just to have one? it does not initialize prev and next. You probably want to remove it. probably destructor wants to free the memory? I said to remove it, because it does nothing. or possible benefit of using "std::unique_ptr"? you probably want to use automatic memory management using "std::unique_ptr" (C++11 feature) 

What is the doing? Is this because of incomplete . comment - remove , use or . helps the optimizer a lot to speed up the code, when class is known. - I think you need to check somehow for it. Probably in . Fraction.cpp prefer initialize list: 

You have duplication near , you probably need there Here is probably not initialized. Also you probably might use something from (but I will do it in same way as you). 

You don't need to change anything as long as the code performs what you need. If you want to insert records to another table on every update (and not only in this place) you should probably take a look at triggers 

You have put too many responsibilities in a single interface and class. Your interface knows not only about graph itself, but also about all the possible methods of traversing this graph. It breaks Single-responsibility principle, Open/closed principle (as you'll have to edit if you want to add more search methods) and Interface segregation principle. What you should do is refactor your interface and implementation so that: 

It's hard to suggest good solution based on the information you've provided... Will the number of entities change over time? Can they "loose" SpriteComponent? Assuming that the number of entities is the same and only Z will slightly change you can cache the sorted list from previous run, and apply TimSort or Insertion sort (you would need to implement it yourselves or grab from Wikipedia) to nearly-sorted list. 

I'm afraid there is no such thing as general "proper" architecture. Relevant architecture is the one that enables/assists developers in implementing new functionality or adjusting your solution to new requirements. In your implementation I don't see the reason to define your own logging and repository/UoW patterns: 

Other than that I don't see memory leak from the graphs you provided. Threads may still be alive in a thread pool, and memory may not be collected by GC yet. Here is what I've got as a result (note that it may consume more memory as you need to store all the chunks that are currently being sent in memory): 

But the main issue is that you're trying to do all the synchronisation yourselves instead of using support from the .NET framework. Your task is a typical producer/consumer problem where producers generate workload (request some work to be done on one of the threads), and consumers are the threads that execute that work. Producer and consumer communicate with each other via queue, and for multithreaded environment .NET offers . Since we need to wait for new items we'll use (with under the hood). 

depends from where this comes, you probably need to sanitize it somehow. see (1) In same place you overwrite the . see (2) You probably want this: 

Why you pass function pointers? Do it with class. Or with . I am not very experienced with this, so I will do it with , but will add it into template parameters. expandCluster() more or less similar comments. 

Once again I decided to beat system function. This time I decided to use a template and to "precompile" all cases from 0 to 31 bytes. Result is 400% improvement - from about 1:15 min to 0:25 min. Finally I had rewritten with naive looking for statement and I noticed that the compiler can optimize it as well. However I did not tested with random data, so I am not sure what role the cache line and branch predictor plays in the tests. Here is the code: 

I don't believe the code works as expected. One of us for sure made mistake with . If is me, comment so I can fix the answer. Code style You will have better readability, if you indent everything inside the class. You need to work on statement in . I can not read it at all. I personally would do it on single row, but then many people will not like it at all. Constructor - I do not see where you need this? You initializing the static fields every time. 

inline methods in ListNode inline methods are present into the class definitions. Remove all "inline" keyword, it does not needed. However ListNode is so small, I would merge it in .h file like this: 

Please note, many people (me excluded) will not like in the middle of . Anyway if you do it this way, readability will be much better than with . 

Is this conversion or just check if class is Integer / Number? Naming is unfortunate. Change it it or change return type to . What is ? If it is a pointer, change it to or if you are using to . Number.cpp way too big, skipping for the moment. Fraction.h once again this will not be compilled, because you are using unknown . must initialize the and . I suggest following: 

will enumerate the enum every time you start iterating on, it, so it is better to capture the result in array. 

Inheriting from collections is rarely a good practice. In your case it's better to have a private collection ( in your case), and populate it as needed (in other words it's better to use delegation than inheritance here). The reason why inheriting is not so good here is that your class will expose a lot of functionality that users of aren't actually interested in. 

UPDATE (based on updated question): Your solution doesn't have proper separation of concerns. The class containing method () knows about UI as it handles strings shown on UI (e.g. property), events (even though they are named as a business flow events) are designed specifically for UI interaction. In order to properly separate concerns you should move all the logic related to UI to your user control, and leave only business logic in the . In order to do that you need to decide what is the actual trigger for showing a loading box. I'll stick to assumption that the actual reason to show a loading box is not a "programming" stage, but a long-running process, i.e. if you would add a new stage that may also take a long time to complete you may also want to show the loading box there. The next question to answer is how do you want to detect a long-running stage? I can suggest 2 options: 

Note that semantically these options are not equal. There is a chance (very-very small) that first option will output smth like , so second option is better at least because it will always generate consistent results (3 consecutive years). But second option is also quite cluttered. There is a method that is able to combine different values with separator, so your code may look like: 

If performance is not really critical I would probably prefer the following solution to randomize elements in any enumerable: 

Other than that encryption/decryption looks properly implemented, and I completely agree with original code writer that initialization/duplicate steps should be taken to constructor. It will reduce the number of parameters in Encrypt/Decrypt methods to one - actual payload. Depending on your specifics you can also expose methods accepting and returning encrypting/decrypting streams for large encryption volumes if necessary.