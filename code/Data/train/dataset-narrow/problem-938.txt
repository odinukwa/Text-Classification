So while it may not be any shorter, there is no need to use the operation. I tried using Array.reduce() but wasn't able to find a way to have a one-line arrow function that both assigned values to the accumulator object and returned the accumulator object. instead of I know it has already been mentioned that can be used instead of for some values that don't change (e.g. , , etc.). There are also some block-scoped variables declared using that can be declared using since they are never re-assigned: and . Updated code 

See a demonstration in this plunker. Click the button labeled remove watcher and see how the watcher is removed. This code presumes is equivalent to ... 

The code looks like typical code that uses the Google Maps API. Nice work serializing the markers in localstorage. I did notice that there doesn't appear to be any mechanism to prevent the user from adding one marker multiple times. You may need to change your data structure to one that associates keys with values (e.g. a (hash) Map, or use an object instead of an array). Related to preventing markers from appearing multiple times in the array, there appears to be a bug: when the user removes a marker, all other markers get duplicated because after is called, the call to will call for each marker, which in turn adds the marker to the list again. I would recommend that instead of adding a listener for rightclick to each marker, try to add the listener to the map. It doesn't appear that the callback run on the rightclick event utilizes any properties of the marker - just the latitude and longitude of the event. It may be the case that the Google Maps API and/or modern browsers have handled it but in general, one cause of memory leaks in Javascript is adding an event listener to a DOM element and then having that element removed. For more information on that topic , read 4 Types of Memory Leaks in JavaScript and How to Get Rid Of Them - especially the section under the heading 2: Forgotten timers or callbacks. 

With this approach, the JavaScript code is not duplicated once for each tab option. Perhaps it may not be a big issue because that code could easily be updated with the PHP code, it would yield a larger HTML/JS page size. See a demonstration of this in this playground example but note that the AJAX requests won't yield the pages as expected so the code to update the containers has been commented out. However I made a phpfiddle that has the response from the AJAX request utilized. 

Since Gerardo has already given a great review and focused on d3 code, I would like to focus on the Javascript code. Abstracting opacity setting code - D.R.Y. Per the D.R.Y. principle, the code to set the opacity on the tooltip could be abstracted to a function which accepts the duration and opacity. Building on Gerardo's advice, the tooltip element could also have a more appropriate name, like (unless you're into that whole brevity thing... then maybe just , though that could be confusing with the CSS class). 

This is basically a summary of points #1 and #2 above. Perhaps a better implementation would move the code to call the AJAX request (i.e. to '/Cart/AddTocart') with the id and quantity of the row that changed, then call to update the total. Something like the code below. Another suggestion is to update the request sent to the server to send the entire list of items with the respective quantities. That way, if a quantity is decreased or cleared, the cart can be accurately updated. It all depends on the back-end API - i.e. if it has endpoints to add/remove/update items with quantities, etc. I also changed the input type of the quantity inputs to "Number" - that way only numbers can be entered, and many browsers will add up/down controls to the side of the input for the user to click on. 

It is difficult to know exactly what would have made my code more "correct" but it does look like the method is more complex than it needs to be. Specifically, there is a loop that is not needed. Perhaps you were attempting to guard against cases where is not actually a property on . That could be achieved using Object.hasOwnProperty() - for example, the loop could be replaced with this block of code: 

This makes me worry about the cases where one of the lines contains a hyphen (i.e. ), which would yield an incomplete string - see this playground example for an illustration. Mike's answer is good. I agree the name could be made specific for parsing the error message, and that regular expressions could be utilized, though explode() should suffice. 

Excess looping The loop within the is actually setting the text content of the cells twice as many times as necessary. Instead of doing the following: 

Note the comment about using const- it could be used in place of var unless Browser compatibility is an issue. 

There are a few discussions about which to use: - this Sitepoint forum - this SO question and its answers (and related posts) The general consensus is that is quicker than . For a small page like this it would likely not be noticeable. 

That could replace that function you added. Notice it uses the keyword instead of , since we likely won't need that function to output anything differently within the runtime of our program. And it appears that function is called even when there is only one element in the array. While it likely won't save much computation time to have a for statement loop over an array element with one element, it would be beneficial to avoid the function call in that case. Check that the array has more than 1 element: 

This can be demonstrated on ideone.com. When I ran it there, it took 0.04 seconds, even if it has to run through the entire 2-d array. The original code took 0.05 seconds. 

Feedback Your code is really solid. It makes great use of async functions, arrow functions, transitions, etc. Suggestions The only things I could think of that could be changed are: 

Feedback The code looks pretty good. The styles are laid out pretty well, and the JS is pretty succinct. I like the use of data attributes and modulus division for the counter values. Suggestions CSS The style appears to be used for a majority of selectors, and none use any other alignment, so move that up to . Javascript Update class instead of style directly Instead of storing the images in Javascript, put them in CSS classes. Then update the class (using jQuery's and methods) based on the counter value. That way, the CSS can be updated without having to update the JavaScript code. N.B. _Initially I was thinking an advantage here would be that it would be less expensive but most browsers will still have a reflow when changing the element's class attribute as often as the original code. Read more about reflow here. Use an event delegate Instead of adding a click handler to each element with class and the button with id , use event delegation to handle all clicks with one function. Then check to see if the event target's id matches the that of the continue button, otherwise if it has the class . For more suggetions about Javascript, see this post - I know it is a few years old and bases jQuery but has some good information. Rewrite See these suggestions implemented in the rewrite below 

Validation For validation, filter_var() can be used for validating and sanitizing inputs- perhaps you already knew that. Repeated code For a block of logic like this: 

And in order for the closure to reference of the component properly in the interval callback, it can be bound using Function.bind()- use that when calling : 

Initially, I considered suggesting using Array.filter() but then that wouldn't allow breaking out of the loop once a selected item was found. One approach is to use Array.some() or Array.find() (and disregard the return value) with a ternary operator. A variable can be initialized as the first line, then the .some() callback returns the result of setting that variable to either the current item if it is selected, otherwise the return value of the recursive call. 

See comparison in this jsPerf. When I ran it in Chrome the array fill-map approach was faster, though the opposite was true in Firefox, Mobile Safari and emphasized textEdge. Drawboard: .forEach() can be used here instead of the statements: 

A different approach would be to add the objects to the cumulative array, instead of the ID, then check to see if there exists an object with that ID. Then there is no need for an extra array just to hold the IDs. 

That way, if a value like is entered, it isn't interpreted as the octal value (I.e. Decimal number ). 

I wrestled a bear once has mentioned many great points and it is difficult to find other areas that could be changed. There isn't much I would change about the text in the heredoc string. The biggest thing that I really see that could be done differently is that not all variables need to be wrapped in a complex expression - so the curly braces could be removed for all variables except for and . The others can be simplified like . And as I wrestled a bear once stated, it might be simpler to use an array to create the list of theme files. Going a couple steps further with that notion, a functional approach could be taken with array_map(), which yields an array and then that array could be passed to implode(). Notice the removal of the dot items is simplified using this trick from dwieeb at gmail dot com (via the PHP documentation). 

This allows removing some of those empty constructor overrides. See this in the demonstration snippet below: 

While many browsers should still display the table as expected, there may be some browsers that would displayed it in a strange fashion. The unordered list usage (i.e. , ) seems fine, as there is a list of classes to display. There are some handy browser tools for inspecting HTML. For instance, for Firefox there is the Web developer toolbar, which is also available for Chrome. In the screenshot below, I used the Outline table cells to show where the table cells are. Using that, it might be simple to find which rows have fewer cells than the maximum. 

One could also create a hidden element in the DOM, have update the text/HTML of that element and show it (using - or toggle a class name that shows it), then hide it (using ) when destroying the dialog. That way, the abstracted close function can just utilize that element. 

Small Consolidation One place where 1 line of code could be reduced is in this block of doInsertion(): 

And similarly for the other three routes, which reduces 12 lines to 4. looping over the routes The redundancy could also be simplified using Array.forEach() 

Ben is correct- the code is mostly clear and easy to read, though there is some redundancy (e.g. , and even just has many occurences). I agree with Muhammad that Event delegation is a great way to simplify the logic. Another aspect to consider is that every time appears with a CSS selector (e.g. ) a DOM look-up is performed. This can be optimized by storing that DOM reference in a variable and then substituting that variable throughout the rest of the code. For more on this topic and other optimizations, see the section Cache DOM Lookups on this post. I know that post begins by bashing jQuery but if your goal is to use it then by all means keep it. However, you might consider alternatives - see youmightnotneedjquery.com. So you could define a constant: 

But there is no radix passed. If you are going to use parseInt(), it is wise to specify the radix using the second parameter - unless you are using a unique number system like hexidecimal, octal, etc. then specify 10 for decimal numbers. 

In general it isn't a good habit to be referencing variables globally. Obviously this is in the context of a callback function but there are ways to avoid that. I would suggest creating a wrapper class and storing the connection, table and other info in member/instance variables while calling the method using the array syntax. The Singleton Pattern could be used to create a wrapper class on the database code and call a static method to get a connection to the database, instead of referencing globally. Also, and don't appear to be used after that line anyway... 

(or it could be a constant defined on a class if such a relevant class exists). Then the code block in the can be simplified using array_search() to see if a corresponding index is returned. If not (i.e. it returned ) then use 5 as the fallback value. 

While that is only one less line, there is no need to worry about adding statements (some might argue it should have been added in the case). It could also be simplified by moving the assignment from the block to the initial declaration: 

Though some might argue that might be less readable, and can make the length of the line longer than is preferential. 

That way the IDE will know that the property should at least exist for each instance (though it might not be assigned a value until that statement). Other Feedback Switch statement cases: 

Then when checking if all field have been completed, that function can be called. The labels can be iterated over, to check if there is a non-empty value in the POST data (i.e. ) - if so, store such a value in an array (e.g. ). 

And you would still need the logic to determine if had keywords or employment types... but at least you should likely be able to simplify assignment of the locations parameter. Simplifying the call The call to in : 

Event delegate An event delegate could be used instead of adding a click handler to each button element. That way additional elements could be added without needing to add event listeners to each one- this becomes especially advantageous if elements are added and removed from the DOM throughout the event lifecycle of the page (otherwise memory issues could result if event listeners aren't removed from elements after they are removed from the DOM). 

Or apply a class name to those elements and utilize that class name in the selector. Also, the width of the container (i.e. ) can be moved into a rule-set. JavaScript Declaring the Constant The idiomatic way of declaring a constant in AngularJS is to use and use dependency injection to inject that constant in the controller. 

there are varying opinions. I try to keep methods under 10 lines if possible. With the method createPayment(), the lines that handle creating the payment and CreditOrder could be moved out to a separate method: 

Those variables don't get assigned until the callback for a new event listener for the DOMContentLoaded event is triggered. 

Using a document fragment When appending multiple items to the DOM, it can be best to use a DocumentFragment as a temporary container until all items are ready. That way there will be fewer "page reflows which will result in better performance"1.