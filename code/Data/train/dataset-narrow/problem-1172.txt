Consider giving a non-static member function , so that if you want the hash of an object you just say , instead of . You'd still have to provide a trivial out-of-line specialization 

A simpler approach would be to create a dummy lock, which (assuming either or is immovable) would actually fix the copyability problem as well. 

Now the caller doesn't have to worry about things like "is the the first or second argument to ?" or "does secretly have to bear some relationship to ?" or anything like that. The only parameter the caller needs to worry about is the predicate, which is an opaque lambda type that clearly can do whatever it wants. Notice that the type is a different type in all three of the calls here. So we have a little bit more template explosion, maybe; but it'll all be inlined anyway. Also, at this point, we've got something that's very close to the standard algorithm . So we might like to get rid of the member-function algorithm and just provide a pair of member functions to create iterators into the unordered elements of the heap: 

Why would you want to? :) That's definitely a style choice that should be made at the style-guide or commit-hook level, not enforced at runtime by some random user code. But if this is part of your style-guide, then yes, and then will do the trick! 

The advantage of this approach is that it's hardly any more lines of code, but it's more correct, and it doesn't rely on running at runtime — it just generates the correct code directly inline. Writing an efficient is left as an exercise for the reader. 

would not initialize all 256 elements to — it would explicitly initialize the first element to and then value-initialize the other 255 elements (to ). 

(and notice the removal of the extra space in between the function name and its parameter list; we don't write in C++ for the same reason you don't write “f  (x)” in math class). 

Certainly exposing my ignorance: I wasn't aware that all your s were legal. I thought you'd have to make them . 

If I understand correctly, the catch-blocks in are hit only if the user invokes your program with an invalid option, e.g. . Your error messages are pretty unhelpful in this case. Consider adding some actual error-handling logic and a friendly message, e.g. "The argument to must be numeric." Also, you should check that the argument to is non-negative (maybe even positive?); and you should not silently accept -without-any-argument as a synonym for no--at-all. 

You've got 21 consumers and only 20 producers. This means your test code will never terminate, right? You can avoid off-by-one errors like this by getting comfortable with the "half-open range" idiom of C-style languages. Every for-loop you write in C, C++, Java, C#, JavaScript, Perl, or whatever, should look like this: 

The way to solve this problem is: when you fill in the board, fill it in with a special kind of cell, , and have your AI treat specially (for example, treat it as never matching any of its neighbors). 

The online generator, written by Jasper Neumann, comes with C++ source code; click the link to at the bottom of that page. Using Jasper Neumann's generator, I found the best rotation code so far. It uses this primitive: 

I believe this isn't what the problem statement intended. Maybe if you changed to , you'd have the right idea... but then conjured brie wouldn't pass your comparison. 

Well, the code works. It's definitely not as efficient as it could be, though; you're using floating-point math to accomplish something that could be done entirely in integer operations. You forgot to all the headers you need. By my count, that's 

The latter is technically implementation-defined, but on common platforms it works, and it works without any memory loads or stores, which is nice, so that's why people end up doing it. 

I'm sure there's more event-and-delegate-relevant kinds of things to talk about, but this is where I'll stop. :) 

You've forgotten to implement the comment in . This may be why your code segfaults with optimizations turned on; I don't know. You might try compiling with (on a Linux box) to see if that helps track down the misbehavior. Since the code segfaults, I don't feel guilty about giving merely a superficial review. Here are some style comments, though: 

For one thing, in a bitmasking expression it reads much more naturally if you put the "variable" on the left and the "constant mask" on the right. In the same way that we write instead of , we also prefer to write rather than . 

Again, this shouldn't result in any better codegen (for any halfway decent compiler); but your human reader will thank you. 

Notice in passing that I removed your virtual destructor from and made the members , just to discourage people from inheriting from it. If you really need to allow inheritance, go ahead and put the virtual stuff back. 

There is a simpler and therefore perhaps better thread-synchronization mechanism, if all your threads are launching from the same spot at the same time. Use a mutex which is locked when the threads spawn, and force each thread to "check in" by locking that mutex before it's allowed to continue. For example: 

About inside the container versus outside: Instinctively prefer abstractions that are composable. So, if your options are: 

And then we realize that we could just remove the assertion and let fail noisily; the caller will get the same general symptom (an exception) and will have to go fix their buggy code either way. So we've completely eliminated this line of code! 

As of C++11, absolutely not! Chandler Carruth has a good talk on why "inout" reference parameters are terribly awkward for optimizers. Prefer to return a nice clean newly-constructed value whenever possible. 

Red flag. An can never be greater than nor less than . And indeed, if you compile this with , you get: 

There's more elegant ways, although not necessarily more efficient. The common idiom for fiddling with this kind of linked list in C is to add one more layer of indirection and fiddle with pointers-to-node-pointers, like this: 

And there we go! Other than writing the function, this is a very straightforward translation of the code you want to write, into code that should be acceptable to a C++11 compiler. 

Looks reasonable to me. I don't understand why you keep and as separate values; IIUC, is "the size of the struct so far, minus its last element", and is "the size of the last element". It seems like you could just keep "the size of the struct so far" as a single value. That is, isn't your code equivalent to the following? 

However, neither of these use-cases applies to the code you posted, so all I can think is that the programmer was cargo-culting some code from an environment in which most classes he dealt with were polymorphic. (Notice that does not have a virtual destructor, so it can't meaningfully be polymorphic.) 

Well, passing parameters lazily sounds like a good idea; but I don't really see why the callee needs to be aware of both "lazy" and "non-lazy" params. In other words, I would reimplement your whole library as three lines: 

Yes, the way of doing things in C++ would be to provide static member functions of your traits type. Consider: 

As for your question about "how to keep a running average": if all you care about is the average number of guesses (i.e. total number of guesses divided by total number of games played), then you don't need to keep a record of how the total number of guesses happened to divide up into individual games-played. Just store those two numbers in your file: 

I'm not sure what the best practice is with : take it by value or by const reference? I'll assume by value is fine, since the whole point of is that it's cheap to copy. But in general, taking things by const value is weird. It doesn't change the function's signature — i.e. 

However, this assumes that your objects will basically only ever be allocated on the heap, via or the like. You'd pretty much have to commit to the idea that at least in this part of your codebase, you'll be doing a lot of reference-counting and heap-allocating. (In exchange, you'll be 100% free of memory leaks and dangling pointers. It might be worth the tradeoff.) 

In C++14, it would be preferable to specify . I don't know of any best-practices way of saying "use but degrade gracefully to in C++11." 

The names and (for and respectively) are ill-chosen. The name for is also ill-chosen. The word already has a meaning in C++: it means "maximum possible size", as in . When you're trying to find a name for a thing, choose the name that best represents the thing itself — usually this is easy because most things already have established names (e.g. , , ). When you need a name for a thing that really doesn't yet have a name, then you just need to avoid naming it the same as something else that's already in the lexicon (e.g. ). 

The next step would probably be to write yourself the functions and /, and then implement in terms of those functions. 

— that's a red flag. Prefer to use or instead of raw pointers. The reason is that those will behave properly on copy-construction and/or move-construction, whereas your current pointer-based code requires some extra code in the special member functions (constructors and assignment operators) in order to work correctly. Look up the Rule of Zero and try to apply it here. Since you're relying on the destructor to the array allocated in your constructor, you should the copy constructor and copy assignment operator; otherwise you're allowing the client code to make shallow copies that will lead to use-after-free and double-free bugs. But! Your current code does actually result in an implicitly deleted copy constructor, because the default definition would have been ill-formed, because you can't copy-construct a . So you're okay, modulo some really verbose error messages and the danger that someone might come along and refactor your class to remove the uncopyable members. 

The expression has too many operators in too unfamiliar an order for my puny brain. I guess you're saying "suppose I base64-decoded a -character string... how many characters would the decoding have? If the given plaintext has more characters than that, then let's report that the encoding failed. Except minus four for some reason." In practice, will be on the order of 2^63 or 2^64 — so astronomically large that your algebraic expression is physically incapable of ever being false. (Logically capable, yes. Physically capable, no; no computer in the world will ever have that much memory, or enough time to initialize it if it did.) So I'd say it's better to keep the code simple and omit that check. As a bonus, this lets you kill off the temporary variable . If your machine is actually running out of memory, the on the next line will throw anyway. Just kidding — it'll return successfully and then you'll get oomkilled at random, later. 

When you say this queue doesn't support multiple "writers", what do you mean? Do you mean multiple producers? Because both pushing (producing) and popping (consuming) from a queue are mutative ("writing") operations. And if you don't support the scenario of "one writer pushing items and one writer popping them", then you can't really call it a concurrent queue at all. So I'm going to assume that you meant to support "one producer, one consumer"... and then I'll show where the bug is with that scenario. 

You want a virtual method that evaluates to in one case, in another, and so on. What is the type of , , and so on? It's . (Yes, yes, technically it's and respectively, but not for our purposes here. :)) So: 

I think you could simplify your code by "thinking in C++17" and then working backwards to lower the resulting code back down to C++11. In C++17, with fold-expressions, your function would be just