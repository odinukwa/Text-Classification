You are probably not doing anything wrong. It seems to me that the real issue is that the instructions, as written, don't work generically. The point at which you are apparently stuck is the command, but all that is intended to accomplish is to make sure that "you" (really the user) actually owns the folder to be shared. If you created the directory while logged in as the user, and before mounting the external drive, that's already done, so you can simply skip that step. As already mentioned in the answer you got, the FAT file system doesn't support such permissions, so they can't be applied after the drive is mounted. If you're going to add this mount to your file and still want it mounted by the user, then you'll need to specify the and on the line. For example: 

One of the devices was given and the other . On the box, I run and on the box, I run . The results I see that the box is actually receiving the ICMP6 echo requests, but never answers: 

How to use something like SLIP for IPv6 While the better way to do this, as mentioned in the comments, is via PPP, for the meager processors of some embedded systems, the complexity of PPP is unappealing. For that reason, it's appealing to use something simple like SLIP when transmitting via serial port. It's possible to do a SLIP-like encapsulation of IPv6 packets, but with a tweak to include the EtherType. One way to do this is to use the tuntap driver. Quoting from the tuntap FAQ, 

Note that the cathode of the LED (shorter leg, also facing flat side of LED) must be connected toward the ground side and the anode (longer leg) toward the GPIO pin. Once all of that works, you can proceed to using WiringPi or C or whatever you use to control pins. To use your Python example, you could use this: 

The goal I'm attempting to connect two Raspberry Pi's together using IPv6 over SLIP but it's not quite working. Here's what I've done: The attempt Both Pis are Model B running Jessie and the same process was applied to both. First, I edited the to enable on both machines. Next, I used to turn off the redirection of tty to the uart. The connection was then made between the two by connecting gnd (pin 6), tx0 (pin 8), and rx0, (pin 10). Naturally, gnd to gnd, and tx0 to rx0. Then the following commands: 

There's not quite enough information in your question to give a definitive answer, but let's go through the design steps so that not only can you figure out this one, but you might be better equipped to solve the next transistor question that occurs to you. Ohm's law Ohm's law expresses the relationship among resistance (R), current (I) and voltage (V): V = I * R. So if we had a 5V supply and a 100 ohm resistor across it, the current I would be V/R = 5V/100ohm = 0.05A = 50mA. In your particular example, however, there is an IR diode as well. The circuit you describe with the IR diode and no transistor looks like this: 

The short answer is no, a magnet will not interfere with your GPS module. The reason is that the electric field strength of the GPS signal will not be altered in any significant way by the relatively modest magnetic field of your magnet. Also, if the intent of the magnet is to temporarily affix the module the metal of your vehicle, most of the magnetic field will be within the metal which has a much higher relative magnetic permeability than air. 

simulate this circuit Load resistor calculation The resistor R2 represents the load. In your case the load is the IR diode, and whatever current limiting resistor might be needed. We can calculate that first. The voltage and current for the IR diode, as mentioned above, we can get from the datasheet. The datasheet says that the maximum continuous current is 100mA (your datasheet may specify some other number). So we can start with that. We could either use a 3.3V Vcc or a 5V Vcc. Let's say 5V. The voltage across the diode will be less than 1.7V according to the datasheet, so 5V - 1.7V = 3.3V. Next we look at the datasheet for a 2N2222 transistor and look up the at the VCE(sat) which means the voltage from the collector to the emitter when the transistor is in saturation (fully on). That is 0.3V at IC=150mA according to the datasheet which is close enough to our target of 100mA to use. So 3.3V - 0.3V = 3.0V. So now 3.0V/100mA = 30 ohms. You could use three of your 10 ohm resistors or a single 33 ohm resistor (which is the nearest standard value). However, I'd recommend increasing that a bit so that the IR diode isn't operating at its absolute limit. We can step up to the next standard value which is 39 ohms. Input resistor calculation Given that we have determined the collector current (around 100mA), we can calculate a minimum base current by using the transistor's hFE, if that's the only figure we have. So 100mA / 100 = 1mA. However, the value of hFE isn't really that useful when trying to drive the transistor into saturation. That's because hFE is only meaningful in the linear range of the device in which more base current translates into proportionally more collector current. Because we want to drive the transistor into saturation, which is a region in which more base current does NOT result in more collector current (because it's saturated), we have to add in a factor to make sure it's driven all the way to saturation. We can arbitrarily choose a value of 5 to 10 or so for that. So a 10x multiplier would give us 10mA in. The GPIO of the Pi is capable of delivering that, but let's do the calculation a different way instead. The VBE(sat) is the base to emitter voltage when the transistor is in saturation. The data sheet gives a minimum value of 0.6V (which is very typical) and a maximum value of 1.5V at 15mA base current. If the Pi is supplying 3.3V when the pin is driven high, then the voltage across the input resistor is 3.3V - 0.6V = 2.7V. 2.7V / 15mA = 180 ohms which just happens to also be a standard value. The resulting circuit looks like this: 

simulate this circuit â€“ Schematic created using CircuitLab Note that I've shown your four 10 ohm resistors as a single 40 ohm resistor for clarity. In this circuit, the forward voltage is around 1.6V (which is under the the maximum VF of 1.7V per the datasheet) and the current is around 85mA. If you're using a different IR diode, you'll have to find and look up its datasheet to get the specifics for your part. What's a transistor? Yes, that's a rhetorical question. There are many ways to think about transistors, though. One useful way is to think of them as current amplifiers. The gain of a transistor, specified as hFE is roughly the ratio between the collector current IC and the base current IB. This a very simplistic way of thinking about it, but it's actually still useful in practice. That is IB * hFE = IC (approximately). The actual value of hFE varies, but a typical value is 100 or more. The next thing to remember is IB + IC = IE; all of the current flows through the emitter. That's split between the base (tiny) and collector (most of the current). Direction of the current depends on whether the transistor is PNP or NPN. A 2N2222 is an NPN transistor, which is also the more common kind of bipolar transistor, so the rest of the discussion will assume NPN. Everything's mostly the same for a PNP transistor except that the currents and voltages are reversed with respect to an NPN transistor. Using a transistor as a switch What we often want from a transistor, as in your case, is for it to act like a switch. We want it "on" if the input voltage is high and "off" if the input voltage is low. There's a linear region in which transistors act, well, linearly as the current amplifier described above. That's useful if you're using a transistor as an analog signal amplifier. However, if we're looking for a binary on/off operation, we are not interested in the linear range. In fact, we seek to avoid it and operate the transistor solely in one of two regions: cut-off and saturation. The typical arrangement for driving this from a GPIO port (for any processor) looks like this: