A vanilla is tagged with a bullet, but, you can use style elements of on the and on the to make it appear in a row. 

HTML building The way you're doing it at the moment is simply not right. There's two other ways that immediately come to mind on how to do it better: 

However, this code would have an issue as you're accessing a live-list and removing it from that would effective mean that you'd skip every second data item, up to the last item would be skipped entirely. Instead, select all tags, like: 

Other than the re-definition of , and in both functions, what you pass into as and are completely unused. For , you pass in the style sheet's href, and then redefine it as the rule's parent stylesheet's href. Literally the same effect. I can see basically the same thing for , so don't redefine them. 

You don't need to compare properties to booleans as simply specifying the variable without comparison performs a boolean comparison: 

You don't really need to worry about your code violating DRY principles, the loop cases aren't really similar enough for that. If you had something like twenty identical lines in there, maybe so. 

First, shouldn't need to be used, return the result directly. Don't swap usage of between in brackets and not. The magic numbers in the conditionals, should be moved to a dictionary. Correct the grammar in all your doc strings and return messages, consider your usage of capitalisation and pronouns. If you're working out one of a few equations, only generate the variables needed for that equation, don't generate all of them in a block. Your usage of and as libraries is a little... misleading. Keep them as and , no need to simplify them. 

You could consider replacing the style loop with a style loop. If not, you can also declare in the loop like: . 

and then have a structure where you add an empty data attribute () and a filled data attribute (, which is filled with the src). Once you click on the image, it opens up a popup and lets you edit and save, or edit and cancel a bunch of filters. This has issues running on the local machines are that cross-origin domains don't work, however, this is intended for use on a live environment. 

Here, you're defining multiple cases that have the same result. There's two ways to approach this problem, while the first is better for readability, it's redundant in this case not to use the second statements use fall throughs, which means, if you don't explictly declare , it will keep falling down and down. Take this snippet for example: 

: You should be using the second parameter when using , because you need to provide the numerical system you're trying to convert into. If you're using base-10 / decimal, you should use instead, as it is more clear and without unknowing side-effects: 

This works because you only a single value from the array, but if you were to more, you would need to use that statement! 

Structure: Instead of having a function encompass everything, consider using a constructor, or if you can use ECMAScript 2015, use the structure. By using the structure your code would look something like the following: 

Declare the outside the function, so it can continue recording results with more function calls (There is a way to do this inside the function, but I couldn't figure out how.) Declaring the game (Notice the all-caps, meaning it's a constant) There's two special rules: and . They can be tested like described above, and like testing whether the input exists inside the variable, because if it didn't, it would be . By using the same testing rule, the can be tested to see whether it's inside the object of the , depending on the result, the respective counter is incremented, and the result returned. 

: you don't need this field. It's only used in one function, and it could be passed in as a parameter at best. 

: this seems unnecessary; I wouldn't bother doing it. I thought this was unnecessary, but I was wrong! as you receive arrays from , it was necessary to transform it into an singular array, instead of a 2d array. Instead of that, attach to the end of your , so it would look like: 

You should consider turning the hard-to-understand variables like into something more reader-friendly, and easier to understand. 

Instead of having individual variables for each episode, and then iterating over all of them, use an array. By using an array, you can use a loop to iterate over all of them, turning the potentially massive amount of loops into one loop: 

Is really a thing, or did you misspell? (Why use two seperate functions?) The following code seems again, backwards, and could be shortened with some refactoring, or a ternary. I'd suggest the latter. 

Your structure: You're currently indenting all your declarations with a large amount of space. Stop it. By following my last point, you can avoid that kind of behaviour all together, but really, it's horrible. And sometimes you mess it up. 

In another function you use a style item as a parameter, so I would suggest removing and staying consistent. 

Onto fixing the ! So, instead of a long statement, I'd use an object, which lets you specify key and value pairs, which really cleans the process up, because you don't have to iterate over all the options before finding the one you need. Here's what I came up with: 

First, doing is redundant; by itself tests the value. Second, these conditions don't work in conjunction, so make them statements instead: 

You should cast expelliarmus on the magic number ! s are bad keys. In fact, useless. I'm not familiar with , but couldn't you just transform the instead? 

Indentation: You're missing indentation in your code, you should space out each level of indentation. For example: 

First, your game doesn't have a name! (Which is why I renamed the question like that...) A few direct things to focus on: 

Note the reverse condition allows you to get away from an extra layer of conditional over your entire post. 

Magic markup columns SEDE has a great feature where certain columns can be transformed into special markup. The specific columns are: 

First, your indentation is half-indentation. It should be four spaces instead of two. Try putting your code into JSFiddle's TidyUp function to see how to better format. 

Which would be better called something like , and kept as a constant. Also note that for each function in , the comment was present, it's only part of what the functions do, and would be better off at the root of in a more expanded version. 

Make the bucket width 100%, so every star would hit it. (Thwarted by the variable, but I'm sure I could work around that with the next method, if I tried) Reset the variable so that I could just simply play the game without possibility of losing. 

Truthy and Falsy checks: Be careful when using the and operators as they can falsely compare values, see here for more information. 

You have a lot of extraneous lines, I would try to avoid that, really only leaving lines when necessary. 

Usually the obfuscation is simple duplication and rearranging, which my script catches, however there are a few edge cases that are missed, which I'm working on catching. However, my solution feels like it could be simplified. The logic follows this order: 

The first one is missing whitespace between the operators, and the second one should have the statement on a new line. 

When you're redacting the keyword by comma, you need to finish with a semicolon. Also, in your spacing is wrong. You don't need extraneous space in your brackets, and you should have a single whitespace after your commas. Also, is unused, so it can be removed. 

You said it, your documentation is a little over the top, consider only saying/including what's necessary and trim the fat a little, so to speak. Pavlo's review covered the major things, so I'll review a few minor things. 

: This is JavaScript, making a variable stay in the same type is not a feature of the language, you needn't worry if becomes an integer, it won't cause issues. 

I wrote a pretty basic setup script that handles most of the setup for a Three-server solution. The solution and setup file are available on GitHub The three servers are Redis, HAProxy and Node / Cron. All three options handle only solution specific stuff (not including installing the frameworks) I felt like my usage of statements was a little over the top, and newline as a constant seemed a little hacky, but nonetheless, it works. 

On the subject of , in general you shouldn't compare to , then it. You should leave the check empty (checks if the variable is ) like so: 

Security: You SHOULD not be saving the password to a session variable, there are ways to break into sessions, and therefore, is an insecure way to save them longer than needed; use to remove them after processing. 

Those last two are the exact same conditions, if you want a working option, consider using the library to select a choice: . 

You're really right. If someone sent me the fullscreen fiddle link, I'd ask what I'm playing. Not to mention, it doesn't even fit (for me) on the fiddle link entirely, I have to scroll down. Instead of using fixed width, use percentages or media queries. On the subject of your actual design, and not the size of the page: You could redo it a little better, for example, with a cards table placed in the background, and you deal the cards onto it. Or something similar. 

This is not how you do that. Instead of using get rid of the as is a valid array index, and is helpful in many situations. Instead of using , alongside an array, use . Instead of using an loop with duplicate logic (string assignment), use an array instead. 

You're using it like it creates another instance of jQuery, or something similar. What it actually does is relinquish control of the variable. Due to other libraries using , jQuery needs to be able to return and reset what originally was. Imagine this: 

Retrieve salt and hashed field from database. Prefix field with salt. Use hashing algorithm on it. Compare the result of that with hashed field from database. 

You need to capitalise on the concept of better storage methods than a massive amount of s. Consider using a instead: 

All the ones use , but all the ones are not the same, one is . IMHO, below sounds better (Linguistically) than under, but, the issue is that they should all be consistent. 

When you are going over items in a dictionary or array, you can the comma on the next line, so that it's easier to understand. However, trailing commas are not against Python, so leaving them as they are is no problem. 

Either this a bug, or you should just be commenting out those lines instead of confusing the reader. 

All of the matches shouldn't be matched to magic numbers, but moved to a kind of enum or something similar: 

I try not to suggest ternaries very often, but I believe that could be simplified with the use of one. 

I'm not trying to insult, but I would think that some of the SF&F community aren't actually programmers, and as such, they may have issues or reservations modifying this. I would suggest implementing a dialog box that pops up the first time you run the script, and using a drag-and-drop list (so they can choose tags). For this, you could use a plugin like jQuery UI's Sortable. 

As @Malachi points out, your indentation is off, and you really ought to fix that (Four spaces instead of two) 

A is specifically for un-ordered lists, which seems to best fit the context of what you have. They have a structure like: 

You don't want to have it so either of those flaws totally screws your site, you want it so in the event of disaster, you can fix the vulnerability and keep your data intact. If your database is compromised, the attackers can use a rainbow table to test for possible passwords, however, it's a potentially long process. If either was compromised, you ought to change the hashing algorithm. 

Object and array properties An object's properties can be accessed in two different ways: or . In JavaScript, an array is basically an object where the index position is the key, however you cannot use the first syntax option with arrays. Normally, you would use the version to visually show that this variable is an Object and not an array, whereas you would use when you have to load the property in from a variable, and not specifically by name: 

for magic numbers (unexplained numbers meaning unexplained things), it's best to declare as a , but your version of JavaScript may not support this, so you can also use . 

Regex issues Your regex does a search through the string for instances of the characters, but what happens if I put in a single character, a vowel, for instance? Using as a challenge string gave me correct answers in most cases. 

seeing as they all have the same error, it would be easier to wrap the entire conditions block in one big You've got some duplicate code here too: 

Additionally, instead of using consider building each line of the game to the or to a HTML element. Something like: 

This question is not simply preference, the second method is better than the first for the following reasons: In the first, you initialise a function and it returns an array: So, alongside the string to test against in the memory, you now have those three things in the memory. Whereas, in the second example, you don't return an array, and the string is only used as a parameter, by doing this you now can only have two things in the memory. Therefore, the second code block is better than the first. Also, in the spirit of Code Review, you can further improve the second code block, by not actually assigning , or using a . 

Rather than attaching to all of the elements, you can just write the CSS so that it puts that style on all children elements of the parent tag, and if you have certain elements that don't want to have that, you can just add to the CSS and escape it. 

Notice that I changed to , as if it's set to false, there's no point calling a variable result, just put in as is. 

Another huge problem I have is your constant passing of between functions, even though only one function uses it. Normally, you might consider a global instead, but, using the constructor model I described earlier, you can avoid both from occurring. 

I wrote a random file opener in Python that takes file extensions as a tuple at code level, and directory/amount at console level: 

Getting and assigning listeners: There's duplicate logic as far as assigning listeners go, consider moving them to a function: 

Naming You have variables named like , , and . These should be named to things that are closer to their usage and what they are, for example: 

: Is there a reason you really want to be sure it's 1? Is passing into the functions directly not enough? 

Try to declare your variables each with the keyword on their own line. Otherwise it's one comma away from floating to become a global. 

Using jQuery jQuery is a framework used by many to simplify processes, but do you really need it? An important question to ask yourself when designing / architecting a new system is whether you need a library or not. If you're building a slick, lightning-fast mobile site, you may not have room for massive libraries like jQuery. Luckily, people realise this and write helpful companion sites you can use like YouMightNotNeedjQuery.com Consider carefully whether it's better to write a little more code and not use jQuery, or whether it's better to lose a little performance. 

Convert these to actual variable (with relevant names) so that maintainers know what each of these actually do. 

; With ternaries in PHP, if you don't need one of two results, you can reverse the if condition and use . 

The keys in seem a little superfluous, you can just use a general array there, with array indexes instead. 

What is at the first index of ? Why do you need to return it? Try to make your code intentions a little more clear. 

chain: Instead of using these unlinked functions inside a big script, connect them all as a chain: Effectively looking something like this: 

Using a : At the moment, you have a bunch of random, relational functions that pass input around, parameters etc. Use a instead, this allows you to: 

Your code looks really nice, and as I am unfamiliar with the framework you are coding for, my review is somewhat limited, nonetheless, I'll try my best. 

Overriding /: In the following code block, you overwrite the parameter or , this is bad practice, it'd be better off named something like . 

If the code is executed no matter the statement, and it always goes first, move it above the condition: (and don't forget to reverse the condition) 

That is, simply an improvement of what you have: IT IS JUST AS SAFE AS YOUR IMPLEMENTATION, WHICH IS: not very. 

You should keep your consistency in check, and either do or don't use semicolons (I would suggest the former), but keep consistent.