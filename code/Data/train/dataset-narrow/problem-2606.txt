Looking at it from the perspective of non-FPS games (say, RPGs or Roguelikes), you see that armour has two major purposes: 

One very effective technique used by some roguelikes (DoomRL, Brogue) is to mask the actual variables. What this means is that instead of showing health as "2/10," show it as "20%." Remember, most memory editors work well with specific value searching/filtering. If you don't know the specific value, you can still track it down (eg. search for changed/decreased values after the player health drops), albeit it takes much longer to do it that way. I also suggest an anti-cheat backlash. For example, if you have a game where the player takes non-positive damage and their health didn't drop, you can easily and accurately check this and know that the player cheats. Do something interesting, like spawning some uber enemies around him :) 

Contrary to the other two answers (which are rightfully C++-specific), there is another way. Some architectures that come to mind: 

My input component reads keyboard input only. I personally created a different component for handling mouse input, although it could be the same. Tomorrow, I can always extend my input component to expose an event for when a gamepad button is pressed. In this way, components really encapsulate only their specific piece of functionality, and I can easily reuse them across games; while entities are game-specific, and probably won't be reused; at the same time, it's easy to see where the "game logic" lives. As for service locators, I think that amount of indirection is probably overkill for a small or medium-sized project. I would start with something a bit simpler first. 

Just tweak it until you're happy with it. A lot of your story will be backstory; it's harder to figure out how to make it appear in-game. 

This is not a minimum spanning tree, so there are cases where the order matters -- I iterate rooms in the wrong order, and end up connecting them a longer way instead of a shorter way. For my game and requirements, this worked. In the future, I may expand it by using a minimum spanning tree instead. For posterity, here's the same floor generated with my solution. 

I started out with physics notions in my sprite component, and then later removed them to a sub-component. The separation of concerns makes sense; a sprite is enough information to draw anything (X, Y, width, height, lighting, etc.) and physics piggybacks (uses the parent sprite to get X/Y/W/H) while adding physics notions of velocity and collisions. The problem is that I would like collisions to be on an entity level -- meaning "no matter what your representation is (be it sprites, text, or something else), collide against this entity." So I refactored and redirected collision handling from entities to , while mapping and returning the right entity on physics collisions. The problem is that writing code like is a violation of abstraction. Which made me think (this is the TLDR): should I keep physics as a separate component from sprites, or a sub-component, or something else? How should I share data and separate concerns? 

If you're not going to invest in a level editor, the only thing left is to invest in the level generation algorithm. This is generally how any randomly-generated game (like a roguelike) will work out. What you may want to do is extract things out into high-level functions so you can tweak the generation, eg. 

Exen is not bad. It uses XNA, so it deploys to web (Silverlight), iPhone (MonoTouch), and Android (MonoDroid) -- albeit that you require a $400 for each of (MonoDroid, MonoTouch). Unity runs the same price, and also supports all three platforms; but it doesn't support 2D too well. 

Incidentally, your code flips the "normally" understood X and Y coordinates; you're using to indicate vertical position, and to indicate horizontal position. Also, my two cents: setting a random speed from 1x to 10x with screen width is too much. I would use a smaller range, like 1x-5x (for the line ). 

TLDR: depends where you live. Be more creative. Instead of worrying about if it's legal or not, why don't you just come up with something more creative? Pong is boring. Pong clones are boring too. I'm sure you can come up with a unique, interesting twist on it that will take it to the next level. Heck, I need to do this too, since I'm working on a game with "pong" in the name :) 

Make lots of games. If you really want to focus on mastering, you need depth and breadth. This means: 

Then simply total it up and see who wins, eg. 3 archers, 2 horsemen, 4 knights = total of 37 attack, 32 health 3 knights, 5 horsemen = total of 47 attack, 37 health If (again, simplistic model) both sides inflict damage simultaneously, both armies would die. If another case occurred where, say, 30/36 health remains in one army, you choose how to distribute that amongst the units to decide which survives and which dies. This is, as I said, a simple addition/subtraction model; you can add a lot more complexity, such as: 

I made the mistake of making my game Android only (via libGDX). A lot of people are asking me for an iPhone/iPad version. Sigh. (Next time, I'll use Unity or Corona SDK.) I've searched high and low, and cannot find much (relevant or recent -- beyond 2010) about market share of these two phones, globally. Where can I find the relative market shares of these phones, globally, to some degree of accuracy? It doesn't have to be 100% accurate, as long as it remains recent (i.e. updated every few months). Ideally, this is something like Android's Platform Versions, albeit it tells me about different OSes. I really want to know, because when I choose a development platform, it might matter (if I make the mistake of not using a cross-platform development tool). 

It also goes without mention that I want something current; I'm sure I can mod Super Mario Brothers, Link to the Past, etc. (SNES-era games) but that's pretty worthless to me. And please don't say "Starcraft (1)" :) 

It's not actually a problem. What you need to do is make sure that lines are shared references, not simply variables. So if you have two boxes, A and B, sharing a line: 

In general, this raised a question in my mind: isn't this a violation of encapsulation? Aren't components just an internal implementation detail of entities (that could change or disappear at any time)? On the other hand, I have a lot of delegation, which seems useless (like is just ). This seems confusing. Can someone provide some clarity? What is the right mix of DDD, encapsulation, and entity/component composition? 

And it will handle the content life-cycle for you. I also use this approach in my own framework, Radiant Wrench. I find that it keeps management to a minimal and just gets out of your way. The code for managing sprites is not that trivial (you need a sprite class and screen class, for starters), so I would suggest give FRB or RW a try. You will always benefit from learning new ways to do things (sometimes better ways). 

It seems like your method is called every or call. That means that your animation speed depends on your computer's speed. On slow computers, animation is slow; on fast computers, animation is slow. What you probably want with XNA is the game (and as much as possible, the UI) to run independently of the actual speed the game is executed. What this boils down to (and the way I solved this in the past -- for animation, velocity/physics, etc.) is to update on a certain interval, i.e. 

I've built a couple of 2D games that are roughly MVC; that is, the main game data and logic are separated into the model (and possibly controllers), and I have a bunch of screens/states that just pull stuff from the model class and draw that on screen. This is not a complete separation, because things like size, collision detection, etc. tend to be view concerns and not model concerns. In any case, I have a difficult time "gluing" together models and views. Is there a good way to do this, while still preserving the separation of concerns? Let's say I'm working with a class to represent an image, and I have a class representing my player (X, Y, number of lives, running/walking, etc.). How do I associate them together? For example, can be a subclass of , or can contain an instance of (or vice-versa), or I can have a third class (PlayerModelView) that contains an instance of both and , or something else entirely. (I've tried the latter approach, but it usually ends with a lot of type conversions and the model checking with the view about collisions.) 

I would also prefer if other tools exist, like code-coverage, etc. for that platform. But the main thing is managed memory and unit testing. What options are out there? 

I'm working on a 2D action RPG. One of the issues I run into is art; in the vein of Flash games like FF7, Secret of Mana, or Epic Battle Fantasy, I would like to actually display the weapon with the player while they're walking around, and swap it out with a different image when they change weapons. As a simple example, if I have a bronze and gold sword, when walking around, attacking, etc. you would see the bronze or gold sword image accordingly. This is an oversimplifcation, because I'm not sticking to only recolouring based on the weapon; I may actually change the design (not 100% sure about this yet). As such, my core question is: how can I design this to minimize the amount of artwork I need to make for each weapon? It seems like I need to create standardized weapon sizes (eg. 18x36px sword), positions relative to the character to show them for each frame, and I need to create a sprite-sheet for each frame. (I have four directional images for walking, each with four frames of animation.) This means, per weapon, I need another 4x4 frames of animation; that's a lot (for a non-artist like me). The other approach would be programmatic animation; but how will that work? I have to worry about: 

There's always PlayN. I tried it, but didn't like the lack of documentation and long compile times required by the Google Web Toolkit (it's known to be slow). Still, it may fit your needs well. 

I've also tried a strange situation of making enemies relative to players, i.e. an enemy will always be at 50% or 100% or 150% of player stats (thus requiring the player to use other techniques instead of brute strength to succeeed). But where's the balance, and how do you find it? Edit: For example, I am expecting to hear things like: 

This is called "spatial partitioning" in 2D There are a lot of details depending on your target language. In 3D, since we're dealing with a cube, it's sometimes called "octree partitioning" (imagine the space as a 2x2x2 or NxNxN grid of cubes). For more details, look up 2d spatial partitioning. There should be an available implementation for Flash that you can probably reuse. 

You need to add the correct JARs to your project. For example, you can see from this Gradle/Maven repository search that there are both and JARs. To add them to Gradle, you just need to add the dependency name and version under the section. 

You are correct that libGDX doesn't contain any sort of built-in support for rendering sprites in a certain order. (If it's there, I haven't seen it, and I've been using libGDX for a number of years.) What I do is create a class that wraps the object and emits , , and attributes. Then in my draw method, I sort all by (ascendingly) and draw them -- so lower-Z items draw first, then higher-Z items on top. 

To summarize, it really depends on the needs of the project and your availability. Personally, I try to integrate small refactorings as I go, and leave major ones for the next project (which is not too far off). 

This is a frequent problem that game developers encounter that's hard to surmount. Unless you can get someone on-board full-time for free (like a partner on your development team), I would really recommend learning how to create basic artwork yourself. With tutorials and basic stuff available on the internet (sprites, textures, icons, etc.) you can quickly learn to create polished technical art -- not the most beautiful, but good enough to launch. I also personally find that Flash is a great tool for creating (vector) art assets. It has a simple but sufficiently diverse toolset to allow you to create good technical art. (Technical means not necessarily creative or polished or stylistic; but technically clean.) 

AABB means axis-aligned bounded rectangles; it means you have objects without rotation, and you're only checking if the image (which is a rectangle) overlaps with another image (so there's a potential collision). This is cheap to compute, and fast, which is probably why they recommend it for high-speed collisions. One issue with AABB is that it doesn't guarantee that there really is a collision; you may have a completely transparent area overlapping. 

If you're not dead-set on flickering, there's a simple solution to this, which is to use a trig/wave method (like or ). These will produce a continuous, even oscillation (which, at a high enough frequency, may appear similar to flickering). I don't know enough about Unity to suggest why it didn't work. What I think is that you're probably using total game time (instead of time since the last draw/update call), or your update interval (since the last frame) is too big. If you decide to use trigonometric functions, you can just use something like the current time (total number of seconds since game start or some other date/time) as the value to pass into the sine/cosine method. 

Ludum Dare is great, except it's only 48-72 hours (depending on your flavour). Is there any particular (good) competition that gives you 1-2 weeks to develop? I don't usually get enough time to put significant effort in 2-3 days. Edit: I'm using .NET. It must be open to .NET (Silverlight, preferably) games. 

What I really recommend, like your link, is to use custom tiles which other people made which are similar to what you want. The Google image search for looks quite fruitful. 

This is one area that I also found quite lacking. Instead of using , I did something much, much simpler: I added a value to all sprites, and just draw them in order. Technically, I created my own wrapper/subclass of with a property which I can get and set. When drawing, I have a sorted list of sprites, and just draw them from lowest- to highest-z. In terms of performance, try to maintain the sorting/ordering outside of the actual drawing (don't re-sort on each draw call, only when you add/remove a sprite). 

It's really up to you whether you use (or don't use) aspects of the game. Also, due to the (insane) level of customization, you can also get away with things like disabling/removing menu items (if they're not used for your game). 

These are all great, but not sufficiently constraining as to tell me how many levels to make. Another constraint that sounds good in theory but is hard to implement is game time -- for example, Mario or Super Meat Boy, I can guesstimate minutes per level, and target minutes of intended total gameplay, yielding levels. But none of these seem quite right to me. It seems like there should be a better way to decide when to add more levels and when to stop. 

I haven't taken their courses, nor am I a professional game developer, so take this as it is. I'll try to keep this concise. Basically, these courses focus on specifics, like graphics, etc. Like my comment mentions, game dev is a whole bunch of stuff -- how to design a game, polish it, play-test it, etc. etc. and you won't learn that from any course. I'm a believer in trial by fire, i.e. learn by making it; that's the best way to learn all this "other" stuff. But then again, if you have a specific learning need (like GPU graphics in C++), and you find a course on that, great. 

You don't need the content pipeline. MonoGame, for example, allows you to use and specify an image name of a file that's just a simple PNG in your directory. This is what I do for all my projects (since MonoGame has difficult/flakey? support of the content pipeline today), and because I don't care about "protecting" my assets by converting them into format. From what I remember of "vanilla" or MS XNA, this worked there too. 

lolwut? XNA is an amazing success. If you just look at this site as a measuring ground, you will notice that: 

What are my options for writing C# code to produce a 2D iPhone game? I specifically mention 2D -- Unity will not suffice for me (even though it can "fake" it with a 2.5D game). I like C# because of language features (LINQ, garbage collection, generic collections, etc.) although I would be open to considering Java as well if nothing exists. Objective C is not my cup of tea. And I don't own a Mac. Eek.