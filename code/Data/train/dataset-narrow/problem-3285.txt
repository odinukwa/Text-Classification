According to Farnell's Quick Start Guide, the default baud rate is: 115200. A fairly detailed discussion of the UART settings and capabilities can be found in this blog post More on Raspberry Pi serial ports. More specific implementation details/challenges of working with the serial port can be found in the blog post Getting my Raspberry Pi set up for high-speed serial UART communication. You don't mention which distribution you are running, but assuming you are running Debian you can set the baud rate by doing the following: Note the Raspberry Pi uses the UART for Console Messages (including bootup messages) and getty so you can login via serial. To use this serial port for your own uses you will need to disable these services. To change the console baudrate, edit /boot/cmdline.txt relacing 115200 with your desired baud rate (note this is all one line). 

To assemble the board you would need to solder the pins to the board. Using multiple hats (expansion boards) at once may not always be possible because of issues with pin assignments. Some pins and interfaces can support multiple devices on a particular pin (e.g. I2C), others cannot. I2C is what the Piglow uses, as can be seen here. You don't mention which touchscreen you have, so I can't be sure, but you likely can get these to work together. Power issues can be another source of problems. Obviously, the more devices you connect the higher the current requirements will be (assuming the boards are powered via the GPIO pins). For some combinations the Pi may not be able to supply enough power. Depending on the boards you may be able to use stacking headers (though this will reuire soldering - and will not work in your case as both boards need to be visible. Assuming there are no pin conflicts, you could create your own board to breakout the pins to both expansion boards. If you can't solder (learning is not difficult). You could do it with a breadboard and jumper wires. While not as permanent as a soldered connection it will work. Something like the Pi T-Cobbler can make this easier. Once you get this working and have learned to solder you can make it more permanent using a prototype board like this one; it works just like a breadboard. I have linked to the Adafruit store, but similar items are available from Ebay, China and other resellers. 

Like anything else both have their respective pros and cons. Your desktop does not have GPIO pins which can interface with sensors. LED's etc. Your desktop will also cost many times the approximate $1-2 a month it costs to run a PI 24/7.The Pi also has no fan or disk drive and so is silent. On the other hand your desktop is likely more powerful than even the Pi 3. 

IIRC etckeeper will notice that git is installed and automatically use it, and make an initail commit of your /etc directory. If not you can manually edit the /etc/etckeeper/etckeeper.conf file and change it from this: 

under one of the screw in the back of the case. Then tie a knot (big enough to not pull through the clamp) in the USB cable between the clamp and the USB port. Just make sure to leave a little extra cable between the clamp and USB port than the linear distance between them. This will remove the strain and if done correctly you could hold the other end of the USB cable and it will not pull out of the port. All of the weight/force will be taken up by the clamp. Your end result should look like this: 

You likely have a problem with the SD Card, one of the startup files (start.elf, kernel.img or kernel.img) or the SDRAM. Which of these is the problem can be determined by the number of times the green led flashes: 

Things don't look as promising for the MEMS Sensor Kit. According to Element14 while the hardware does not seem to be a problem, it appears the software (driver poses some problems). Though the posts that mention a problem are from September 2014. This page (last comment) hints that there maybe some hope 

Both of the other answers are correct and will let you view and study how the file works. However, with the idea of teaching you to fish rather than give you a fish, if you do the following it will help you find any file on your system. 

If cheapest was the only requirement I would go with an ESP8266-01 WiFi module like this one. Total cost $3.50 US including shipping. There are a few tutorials covering how to use these with the Pi: 

You have a couple of problems. The first was the ownership of the files they need to be owned by the user that Apache runs as (root in this case).To correct that do the following: 

Another option is to pug the Pi's powersupply into a power bar and use that to switch the power on and off. Some of these even have high speed USB charging points built in allowing you to use just a USB cable to connect your Pi to power. 

The Pi does not have a low power/sleep mode because it uses so little energy as it is. One often quoted figure is that it costs less than $1 a month to run 24/7. To restart simply disconnect and recoonect the power. To avoid damaging the micro USB connnector on the Pi you should do this at the wall rather than the Pi. There are several third party products which place a switch inline with the power cord like this one, you would need a USB to micro USB adapter or cable to use this one. 

You will also need a selection of jumper wires. depending on the Pi and the style of pins it has, you will need either male to female or male to male jumper wires 

Inside the optocoupler is an IR LED on one side (between pins 1 and 2) in the image below and a phototransistor on the other (pins 4, 5 and 6). 

Yes, as the temperature rises the CPU frequency is lowered to prevent damage. The throttling begins around 82 degree Celsius. You can check the CPU Frequency with the following command: 

900 Mhz is the default clock speed for the Pi 2. As this is the designed clock speed no damage will be done, nor should you have any overheating problems (assuming you are not operating it in a high temp area (outside in the desert, next to an industrial oven etc.). Personally I have run my various Pi's at up to 1000mHz without problem 24x7 for months at a time and never seen 50 degrees Celsius. 

One method of testing this would be to connect an LED to the pin and see if you can flash it. I use an LED bar graph like this one from adafruit. 

The --reinstall flag reinstalls a package that is already installed and at the newest version. You can read more about apt-get options by reading the manual page (Linux help files) using the man command, so in this case, you would use the following: 

Changing the proxy settings is in chromium is normally not necessary since they are picked up from the system. However, assuming you have already rebooted and restarted chromium, and it still is not working. You can configure the proxy settings for Chromium by clicking the menu (three vertical dots to the right of the address bar), and selecting settings. Then scroll to the bottom of the page and click Show advanced settings. Under the Network heading click Change proxy settings You can also configure the settings from the command line. Use the following command: to get the specifics. 

Assuming the baud rate is correct, and the connection is good. I suspect that the language setting is incorrect. From the setup menu select general and change the language from English to UTF8. 

No the 3.5mm jack cannot be used for input it is output only. If you need input you will need either a USB or GPIO soundcard with a mic input, or a USB microphone. 

Load the stored profile for the Pi (I assume you have saved you connection details). Open Putty Configuration. From the left side menu click Translation from the Window section. In the Remote character set dropdown select UTF-8. Make sure that Use Unicode line drawing code points is selected. Save the stored config and restart putty. 

if the hostname alone does not work try either hostname.local or the IP address, which can be found by running: . Your username and password are likely pi and raspberry respectively, unless you have changed them. It may in the end be easier to use the manual installation for plugins and themes. You can just download and extract the compressed file to the correct location. 

You may not be able to create a file, but you can go low tech and hookup a VCR or use a camcorder to capture the text as it scrolls across the screen. 

This will let us know where in the chain the connection is broken. To rule out is the PI's Ethernet port and software. Connect the Pi directly to your router and try opening a page in your browser. If this works you know the problem is on the Mac side. (If you made changes to the networking configuration on the Pi you may need to modify them to work in non-shared Ethernet mode). If that still does not work swap the cable out and try again. This will eliminate the cable as the source of the problem. If you are still having problems, can you edit your question and include the output of ifconfig and the contents of /etc/network/interfaces, also can you report the results of ping google.com. 

Ubuntu does not support raspi-config that is a Raspbian feature. You may be able to research the modules that are loaded by raspi-config to enable SPI and recreate that on Ubuntu (no guarantees though). I think the better course is to switch to Raspbian, as you already discovered most tutorials are written for it. 

The Pi does not require cooling (fans, heat sinks etc.). The only time it would need some form of cooling are if it is being overclocked to unrealistic limits (far betynd what you can configure via raspi-config), or if enclosed in something which prohibited nearly all air flow (e.g. inside a teddy bear). From the Raspberry Pi Foundation's FAQ: 

then edit /etc/inittab to change the baudrate of the getty (you should find a line like the following with the baudrate of 115200, change that to your desired baud rate) 

They should not be used for anything but communicating with the HAT's EEPROM. The blog post announcing HATs can be found here, and the HAT spec can be found here. 

this will make all of the files and sub-directories of the /var/www/ directory owned by the Pi user and group. to correct the file p permissions on the index.php file do this: 

The distinction between 32 bit and 64 bit is really only pertinent to x86 OS's. I expect you are asking in regards to installing software, all software you use on the Pi must be compiled for the ARM processor (ARM 7). Having said that the ARM instructions are 32 bits. You can read more in this forum post 

Assuming you are using Raspbian, you can use raspi-config to delay boot until the network is up. start raspi-config with the following: 

From the website you linked to above, if you connect SDO to ground (or low) it will assign the address 0x53. Attaching SDO to high will assign the sensor the I2C address 0x1D. 

If you are running a recent version of Raspbian the filesystem was resized on first boot automatically, and depending on which model Pi you are using you may not be able to overclock it. You can confirm that the file system has been expanded with the following command: 

Additionally you can test your basic configuration using telnet as described in this post. Depending on why you want an email server you may be better off just setting it up to forward all nonlocal mail through your Gmail account. I have not used it recently but this script makes that exceptionally easy. 

Note: This file is static and will not evaluate any included code. Make your changes to this file - I usually just remove this text. Save your changes: Ctrl-o and Enter and exit the editor: Ctrl-x Test your changes by exiting your SSH session: 

press 1 and 2 on you wiimote to make it discoverable then create a reference to the wiimote and save it for later access: 

Very unlikely. This is not simply a case of connector shape and size, but one of sending the proper signals and establishing the correct communications handshake. Not to mention a different number of wires. However, you could use the Kindle Fire to access your Pi using XRDP as described here, this is a much simpler solution and allows remote access over wifi. 

Have you considered the low-tech approach of buying or building a sun visor (out of cardboard or similar material that fits around the screen, something like this: 

to the /etc/ssh/sshd_config file. This will send a null packet very 120 seconds and not disconnect the client for 24 hours. On the client (Mac or Linux) you can add the following line: