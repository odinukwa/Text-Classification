Can be simplified down to this. This does fix the strange indentation and whitespace issues as well. 

I've built a simple decorator that wraps a function in a general Pygame game loop. It also allows for the programmer to set the tick rate. 

The way you're printing multiple pieces of text is odd, as well. For example, the below piece of code: 

I'm currently working with Win32 and OpenGL a little bit and I needed a way to get the pointers of the OpenGL functions that aren't included in the Windows gl/GL.h header file. Rather than spending hours going through the OpenGL specification and manually typing out each OpenGL function definition in a header file, I created the following Python script which will automatically generate that header file for me. 

Using this method, there's no need to call on the file, and the file is closed explicitly, so you don't need to worry about memory issues. I notice that you repeat the a lot. Preferably, when you have repetition like this in your code, you can shorten it into a function. In this case, I'd create the following function: 

You're inconsistent with how you place your curly braces, . The general style for Java is to place opening curly braces, , on the same line, like this: 

Style Python has an official style guide, PEP8. You have many style violations in your code. Here are a few of those violations. 

This code is really nice, and the output is very good looking! I do have a few nitpicky things that I want to cover. 

Style Python has on official style guide, and you're violating many of these guidelines. According to this online checker, you have about 50 violations. Since there are too many issues to list here, here's a small list of some of the more important violations. 

Just use braces. They'll prevent all sorts of mistakes from occurring, and they'll make things look clearer overall as well. 

You could use a loop instead. By using a loop, you don't need to declare an iterator variable, , and it looks cleaner as well. 

This code is really nicely written! I do have a few small nitpicky tips on style and such though, so here's a list of all the small things I see that can be improved. 

Side note: You can also use the object initializer syntax instead of constructors, but I'd recommend sticking with constructors for now. 

These two naming criticisms are documented in PEP8, the official style guide for Python. I'd recommend taking a look at it. 

Since I'm not a JS guru or anything, I'm going to give more of a style review, rather than a review of the code, but if there is anything I see, I'll try to point it out. 

There are many more comments in your code like this one, and I'm sure you'll be able to pick them out and improve upon them. If you really want to have a useful comment, I'd highly recommend using an XML Documentation Comment. A typical XML Documentation Comment looks something like this: 

It's a horrible code smell, and it's completely unnecessary. If you separate your top-level code/functions/classes with two blank lines, you're fine. Your variable naming is also very inconsistent as well. 

And then just used everything that's already implemented on the class without needing to create methods. 

It's also worth noting, if you ever want to add more methods to this class in the future, you should define two separate files for it, , and . should contain the class declaration and the function/constructor signatures inside it, and should include and implement the functions/constructors. 

Issues You should also be using a context manager to open and close files, not . For example, this block of code: 

First off, I'd venture to say that is probably too generic of a name, and doesn't give much information about the type. I'd suggest the following replacements that'd give more detail: 

First off, you seem very confused with your whitespace. In Python, you shouldn't have "padding" around the contents of braces, . For example, the line, would become . Secondly, you need whitespace between your operators. For example, would become . Your naming violates the official style guidelines from PEP8. Variables and functions should be in , and classes should be in . Never use without knowing which specific error to catch. There could easily be an error that goes un-noticed because you weren't trying to catch a specific error. Finally, the code below the comment , in the function , can be shortened to this: 

With an empty clause, any error that occurs in the block will be caught by the clause. This includes errors that aren't intended to be caught, like a , where something goes wrong internally. The proper way to specify what error you want to catch would be to write your clause like this: 

Firstly, the field that the property s and s should be , if you choose to not use auto-properties, like this: 

Your two functions, , and could definitely use a docstring. You should have two blank lines between top-level functions, not one. 

This is a good thing to remember when you're doing graphics programming. If there's no need to re-draw something every frame, or click, then don't. In this case, you don't need to re-draw and fill the rectangle, so it can be moved entirely out of the override. In the case of this program though, I felt that the rectangle wasn't needed, so I just removed it altogether. Expanding on the subject of code repetition, you're also repeating a lot of calls. I'd highly suggest implementing a function that automatically draws amount of circles for you. This is what I came up with: 

Design The logic in this program is very confusing, and with the bad variable names, it's not any easier to understand. From looking at the code, it looks like a number-guessing game of sorts, but I don't fully understand it's logic. I'd recommend encapsulating this into a function, or even separate functions. For example, to choose a random number based on a maximum integer, I'd create a function that looks something like this: 

Generally, the Python style is to indent by one tab, or four spaces. Functions and variables should be named in , and classes should be in . See PEP8 for more style information. You should also use docstrings to describe what your functions do. Here's an example of how docstrings are used. 

Error handling in You shouldn't be using to check if a variable meets certain constraints unless you're doing testing. The proper way would be to do something like this: 

You also don't need to surround conditions in statements with parentheses. For example should be changed to . Finally, some of your variable names aren't so great. For example, , , or are not so great. Variable names like these should be more descriptive and describe what the purpose of the variables are. 

I'd just add a newline to the end of the output string to not annoy the user when the program completes/fails, like this: 

We can make this method much better though. Rather than using string concatenation, we can use the method. We can also get rid of those extra 'es at the end of each line as well, using implicit concatenation. Using , and implicit concatenation, becomes this: 

I'm currently building a game called "Drones! Attack!", and I needed a drone controller that the player can use. It's currently very simple and only supports a small amount of actions, such as: 

First off, don't use over in loops. While works, using is much clearer. Secondly, you have inconsistent indentation. While in Python 2.x, this doesn't affect much, Python 3.x will throw an error. Never use without a specific error to catch. There could easily be an error that goes un-noticed. Most of your names are okay, but there are some like , or that should be clearer. Variable and function names should also be in , and classes should be in . Names like should be renamed to something else, like , for example. You need more blank lines. There should be two blank lines in between each code block/function/class on the top level. Finally, you should avoid wildcard imports like this: . You should either import the entire module, or any classes/functions/variables that you need. 

Tracking the number of "rounds"/"tries" Rather than printing a message saying that if the user got below a certain amount of tries, they win, you can implement it into the code. The easiest way to do this would be to use a loop, like this: 

Yes, your code is correct, although I would recommend adding comments, and following the style guidelines of PEP8. Here are a few tips I have. 

There is no need to call at the end of your program. It will automatically terminate. You also have a few style issues. Here's a small list: