Pretty much all bigger platforms have this type of low-level captures for transit packets, which are exceptionally useful when you need to verify HW is doing what configuration says, sometimes there are software defects and it does something else than expected. I know that in GSR you can see transit in memory, in Juniper Trio there is quite nice tool for it as well. Brocade can do it. It's quite baffling they are not documented in vendor pages. 

I'd like to add ELAM in the mix. ELAM is supported on PFC3 (6500, 7600). You need to have 'service internal' enabled, but it's quite safe feature to run, I've ran it good deal in production networks and not yet once experienced negative impact. Essentially what ELAM does is it shows you what was send for lookup processing to PFC via DBUS (Data BUS) and what did the PFC give as lookup result in RBUS (Result BUS). 

There isn't anything physically stopping you from designing network which has just IP address for L2 and L3. Then 'ethernet switch' would learn SIP address of incoming packets and flood or forward towards DIP address. However this network would only ever support IP, when next-generation of IPvX comes, it would not work, as the 'ethernet switch' couldn't support that protocol. You also couldn't run various other protocols, like IPX and AppleTalk, or some new protocol you're developing and testing in your home. Abstraction layers increase development speed and encourage innovation, as you don't need to rebuild whole house to change a window. Now you could have ran same ethernet switches and migrated your network in between from IPX to IPv4 to IPv6, without touching your LAN at all. 

If you do not have any Layer 3 interface on the actual VLAN, you won't really be able to see any IPs going on. One way would be to do port miroring and sniff the packet to see what IP's going through, but it might not give you a complete picture either 

Quick test: Swap the SFPs with a known working ones on the switch (if possible) and see if the condition stays with the ports or follow the SFPs. If the other SFP works in the current "problematic SFP ports" there is less possibility of this being the switch's problem (I still could be, but just unlikely). You can try to plug it in the other switch's too... if it's problematic there, it's almost guaranteed to be the SFP, unless you got the One-In-A-Million chance of having two switches with exactly the same freaking bug - extremely unlikely If after all that JTAC still insist for RMA on both switches, just escalate the issue to get someone more reasonable at their end. Edit: I've just seen that it was a mislabeling issue, you might want to mark this question as answered. :) 

When the bridge saw a frame going by, it noticed it was from SRC port X to somewhere and noted it. Since it didn't know where the DST was it broadcasted on the other port (early bridge had 2 ports it was simply used to limit broadcast domain) When it got the reply back, it noted from where it was coming from etc. Note that you had broadcast medium on each side (Coax) 

Router1 and Router2 are running VRRP, HSRP, GLBP or CARP to produce virtual default-GW IP address to the LAN. This protocol will converse over the Switch core to agree which of the routers is owning the default-GW IP address at any given time. PC2 is redundant linux server, which is using 'bonding' to redundantly connect to the Switches, it should be configured so that if the the virtual default-gw IP address stops responding to ARP WHO HAS, it'll switch to backup connection. IP address itself is not on the physical interfaces, but on the virtual bonding interface. Equivalent solution is available to other OS, but often not included in base OS package. PC1 is non-redundant server. Switches are not running anything special, no spanning tree (as there is no L2 loop) and no LACP. They can be from different vendors and can be taken down for maintenance separately. Routers are not running any switching, IP addresses are configured directly in the L3 interfaces facing the switches. If you choose VRRP as your first-hop-redundancy-protocols, routers can be from different vendor. Each router can be taken down for maintenance separately, by gracefully switching VRRP priority before work on the primary. 

A will program FIB entry, so that label 400 points to interface towards B, and MPLS label operation 'SWAP 300' A will program FIB entry, so that prefix 192.0.2.5/32 points to interface towards B, and MPLS label operation 'PUSH 300' 

1 - MAC Collision: Many manufacturers simply roll-over their MAC once they're they assign the last one. You're never guaranteed to have a Unique MAC. 2 - The Internet routing table would be Humongus (it's already Huge) as you wouldn't have any ways to have "bigger networks" in the routing table, as each MAC is given by the Manufacturer and not the user. It can be overwritten on some devices, but it's a pain to do network wide, and good luck to have a global addressing scheme 3 - That's not how the Protocol Stack operates. MAC addresses are for Layer 2 communication, that is Device-to-Device (PC-2-switch, switch-2-router, PC-2-router, PC-2-WIFI) etc. IP Addresses are for NETWORK communications (Host-2-Host, Client-2-Server, etc). That doesn't mean that you cannot use IP to communicate on your own LAN, but just that it's not necessary for you to do so. On the other hand, you HAVE to use a Network Protocol to go outside (IP, IPX, Appletalk, Banyan Vines, etc). Each layer is encapsulated in the one below it: TCP Segments are in IP Packets running on Ethernet Frames (or ATM Cells, OC-x Timeslots, Token Ring Frames, etc). That's the way things were designed before Ethernet and TCP/IP became the de-facto standard, for LAN & Network. There were is NO guarantee that any devices would use L2 Addresses: Point-to-Point serial links do not have MAC Addresses and there were multi-points serial technologies that didn't use MAC addresses either - some used polling with 8 bit addresses (HDLC), way shorter than a MAC address 

It is important to know that in small catalysts like 3750/3560 there is different MTU for routed traffic and switched traffic. 1998B is largest packet you can route, even when using 1GE ports, the 9000B is strictly for switched traffic in 1GE ports. It's not very uncommon for Cisco switches to support per interface MTU, ancient 3500XL does it as does 4500, 6500, 7600 at least. 3850 supports per-interface IPv4/IPv6 MTU, which is sufficient, per-interface L2 MTU is not important. 4500-X would support stack of two switches (VSS). 3850 would support stack of four switches (StackWise-480). It's good to standardize L2 MTU as large as possible. Artificially reducing L2 MTU does little good to you, as dropped L2 frames will give no information to the sender of what went wrong. It is however crucial that L3 MTU is same in both ends of the L2 network. There are some exceptions when you may not want to have large L2 MTU, which are related to buffer carving, but they are platform dependent issues and you shouldn't worry about them until you hit the issues, they're not common. 

Which copies running config (4) to network (1), by swapping these you can change the direction (from network to running). Running above script my home directory will have 'filename' file, which contains my CPE running-config: 

What you'd like to know is ifIndex, queue, threshold and drop counter. I'm not aware of populated MIB/OID where these values can be polled from. Like John Jensen explained, outDiscard is only thing you can get, but it aggregates all of this, so you won't know if it's BE, AF, EF, NC or what, which is dropping. You probably wouldn't care about BE drops, but you'd care about EF drops. There are two OIDs where these aggregate egress drops are stored, if your ifIndex is 10001, you'd find them here (symbolic and numeric presentation): 

QoS is of no use if the traffic is going on the Internet, simply because almost no ISP is acting on QoS markings (in fact, it's normally stripped automatically when entering their network) For QoS to be useful at all, all nodes in the path (routers, switches, etc) mustn't reset the marking and also must ACT on it (ie: if you have "DSCP EF" marking - normally used for Voice & Video, if the switch doesn't strip it but doesn't prioritize those packets, it doesn't help) That is why your Network team told you that they can't do anything - unless there are some network bottleneck on your own network, if you go out the Internet where QoS isn't used, everything is "Best Effort" and every stream is (supposedly) treated equally (your Sharepoint traffic isn't more important to your provider than your're co-worker web requests). Even if you had a special understanding with your provider, they're connected to others and so on and so forth, until you reach the Sharepoint servers. If any LINK used to reach those doesn't support QoS, then you have NONE. TL;DR: QoS is NOT supported on the Internet at large 

($URL$ ) Then you control the announcement by your ISRs to your L3 switch with IP SLA Monitor on the 2951 to track some public IPs and modify the announced route, so that if one cannot reach the Internet (router/link is UP but ISP has routing problems) you'll stop advertising internally the bad link. ($URL$ For your FTP, you can use Policy Based Routing on your L3 switch to bypass routing and force FTP traffic to use all outgoing FTP traffic on a single link ($URL$ If you're ever looking for a hardware solution that does pretty much all this, take a look at Radware's Linkproofs, at least id did a few years ago. 

B will program FIB entry, so that label 300 points to interface towards D (because of IGP metric!), and MPLS label operation 'SWAP 200' B will program FIB entry, so that prefix 192.0.2.5/32 points to interface towards D, and MPLS label operation 'PUSH 200' 

Label itself is either an aggregate label, which means label does not have rewrite information attached to it, so it does not know egress interface nor egress MAC address. Aggregate labels are used for example to connected networks. Aggregate label implies that you do not know egress information after MPLS lookup, so you must do normal IP lookup to determine egress information. Normal label is attached with egress rewrite information, that is lookup against label will return egress interface (with all necessary information, like MAC address, VLAN etc) Lets assume all links are IGP metric 1, except B-C is metric 2. For A to send to E's loopback (192.0.2.5) following will happen 

You definitely should enable MLS QoS. It is also prerequisite for CoPP, which you should add in your TODO list to implement. Enabling 'mls qos' without other config is extremely bad idea in low-end cats, like 3560/3750, due to unexpected default scheduling and due to heavily reduced buffers causing more microbursting. On 7600/6500 it's comparatively safe to enable, but of course you can crash your router with 'show run'. I would feel comfortable enough to enable it during production hours. You should monitor 'show queueing interface X' after enabling to see that you're not dropping anything. Long term, you should design QoS policy and implement it, I recommend using as few queues as possible (and assign 100% of buffer to those few queues). Example of possible QoS policy in WS-X6704-10GE: 

Default QoS Markings are "Best Effort" (AKA "0") Also, QoS needs to be honoured at each Hop, so it's mainly useless on the Internet (Most ISPs strip/remark to 0, or do nothing more with it) Even if you managed to PAY for a better QoS handling, it would stop at your ISP's Peers borders. Now, if you're talking for within your own lan, there are many ways to mark the traffic, depending on platform & topology, but each hop must be configured for it. This means configuring each devices to classify/prioritize/process each type of traffic you have, the way you want it to be done. 

Simply addressing the connectivity of Ethernet cable, for short one as long as you use the same pairs at the same position it's OK. For longer ones, you might have some crosstalk issue if you do it "however you want as long as it's the same pairs at both ends" TIA/EIA-568A & B are only conventions to help everyone work together with less headache, there are no UTP-Police that will check your setup. Sure, they're supposed to be optimized (alternating signal/ground strands in the connector, centering Pair 1 to be able to use it for telephony if needs be, etc) but it's not like each pairs will refuse a signal if it's not at the right position in the connector. Also, if you follow the standard, it's quite easy to differentiate Straight/Roll-Over/Cross-Over cables. It's the same thing as the Jacket color (In UTP structured cabling. Fiber jacket color actually means something). Even if the cables are Blue, Red, White or Black, they're still an Ethernet Cable (barring rolled-over or crossed-over ones), meaning you can use whichever colors you like, but it's still a good idea to be able to see their function by using different colors (as long as you stick to it!) 

No, ICMP should not be blocked. It's vital signalling protocol. Internet does not function without it. PMTUD is broken if you drop ICMP. IPv6 does not even begin to work without ICMP, as L3 to L2 address resolution (ARP in IPV4) is riding on top of ICMP in IPv6. Also troubleshooting will take longer if ICMP echos are dropped. Alas often FW people train of thought appears to be 'when in doubt, drop'. You use FW because your inside network has services not requiring auth or unmanaged hosts running vulnerable software. ICMP really is not a practical attack vector. 

Preventing change of source IP address requires either access lists (ACL) or unicast reverse path filtering (uRPF). Neither come for free. uRPF typically requires additional lookup or more complex single lookup, so it could even halve your lookup performance in some platforms. ACL will slow down lookup and use memory. uRPF is maintenance free, you just configure it once and forget it. ACL needs system which knows which addresses are behind interface and makes sure the ACL stays up-to-date. ACL more widely supported than uRPF, uRPF is comparatively rare feature in L3 switch level devices. In 'real' routers usually both features are available. Even if both features are available, configuring uRPF in wrong place of the network can break the network, not understanding platform specific ACL limitations can cause outages. Usually you yourself don't benefit in preventing source address spoofing, it's mostly the Internet at large who benefits. You carry non-zero risk trying to do it, as you may end-up breaking stuff. And your customers won't gain any benefit, no one will pay you more to implement them. So reward is low doing it. Responsible service provider do it, because it's the right thing to do, but it's unrealistic to expect that we'll get antispoofing in relevantly large portion of access devices deployed. Much more realistic goal is, if we do ACL in IP transit connections, as there are only about 6000 or so stubby AS numbers there. Why this is even issue is because of UDP reflection attacks, which can be fixed by protocols such as QUIC and MinimaLT which ensure that reflection has no gains, as incoming query is guarantee to be larger than outgoing answer, so spoofing loses its benefit. It's again recently become quite popular to use UDP reflection as DDoS attack. There are lot of wide open DNS servers in consumer CPE devices which the consumers are not aware, so those consumers suffer as their home connection is congested as it's used to reflect attack. And it's also easy way to gain significant amplification small query of tens of bytes can yield large answer of over thousand bytes. There have been reflection DDoS attacks which are several hundred gigabits per second, and smaller are daily, just sunday night we transported 43Gbps attack to one of our customer.