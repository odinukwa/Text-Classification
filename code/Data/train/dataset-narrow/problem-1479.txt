I'm going to go through a few main points here about your code and at the bottom I'll have a "what I would change" section with inline comments. Do not be overwhelmed by the size of this book, I prefer to be on the side of too much information than too little. - Cache your selectors: Probably the most important thing you can do for your code now. As a rule of thumb, if you use a selection more than once, you should cache it. What happens when you use is jQuery queries the DOM to try and find elements that match. So imagine that every time you do that it runs a search. Would it be better if you could save the search results? This way you can look and play with them whenever you want. Ex.: 

I apply all this stuff to this selector, one after the other. If I want to continue chaining but change my selectors, I can use stuff like and continue with my methods. - Save function calls: If you read the jQuery source code you'll see that shortcut methods like , , and etc. all reference the method. All they do is basically call the method with some variances. Well why not just go straight to the meat and potatoes? Check this out: 

Don't feel intimidated by the following wall of text, I just like to over explain stuff sometimes. I think it's better to have more information than have too little. First of all and probably the most important thing you could do to improve this code it to cache your selections. When you write this: , jQuery has to jump into the DOM and look through all elements that would match that selection. Keep in mind that DOM manipulations are the most expensive when it comes to performance/resources. So you should really do a search only once, and save your results for future use. Just put 'em in variables: Then in your code just replace with and do all your stuff on it. As a rule of thumb, if you use a selection more than once, you should cache it. Best place, in my opinion, to do that is at the top of your code. By placing all your variables and selections at the top, you can see at a glance all the elements (or at least most of the elements) that are going to be used/manipulated in the code. Next thing you could do is save some function calls. The method you use if you read through the jQuery source code, you'll see that it simply calls the method and passes in the stuff you set. It would be better if you just went straight to the point by using the directly. This way you save a few function calls. Not a tremendous improvement, but something that will benefit you in the long run. In your click functions you also might want to prevent the default browser action on a link, which is to direct the page to that link. Since you just want to perform something on your page and don't actually want the browser to leave the page you should prevent that action. You can do it by passing in for and running . If you want to read more on this I would suggest this article by Chris Coyier. Also since you are showing and hiding quite a bit, it might be hard to keep track of what is showed or hidden at any given time. I say don't worry about it. Let jQuery magically handle it by using the method instead. If the element is hidden it will show it, but if it's not hidden then it will hide it. Simple and easy. If there's a point where you want to be specific about it you can always just use the methods you're using now. Here is your code with these examples in them. Keep in mind that these are simple improvements which don't really change the order/logic of your code but just help you make it better. Anyways here: 

UPDATE: If you really want to bind a click event to everything except , you can do it (jQuery 1.4 friendly) like this: 

When you have code that repeats itself like that, you want to try and separate the logic from the values. Something like this would work, and you just have to add more to the settings object when needed. It's not jQuery that's badly written, you just have to change the way you're using it. $URL$ 

A couple of pointers not in any particular order: If you use a single main object with methods it'll be easier to follow along later and add functionality etc. A pattern you can use is the observer pattern for setting up and triggering your events. Also if you use a single main object you can refer to the methods with or to config options like . Another thing is when you initialize your variables, you don't have to set them to false. If you do it will be set to a falsy value so all you have to do later is set to , or to test for if false use . On the other hand if you want to test for just test for like you have been doing. That way you can set any value to and the test will be ok. 

In other words, if you have content that is related and goes together, put them in a section. Example is a heading section. Do this as long as you have actual content that will go in the element and you're not just using it to style your page. Now for the article element: 

When you cache a selection like you did there, the gives you a new jQuery object with the results from the search which then are stored in . So doing this: is the same as doing . You're wrapping it twice. This is a common mistake with beginners and Jeffery, in that screencast, explains it much better than I ever could. 

I'm making a calendar and this is one part of the larger project. This adds a tooltip with more information when a calendar event is clicked. It then disappears after 10 seconds, or earlier if a click is detected. The exception being if the click in on the tooltip itself. This code works but feels kind of "cheaty" to me. I wanted a fresh pair of eyes to let me know if there's a better way of doing this all or a specific part I could do differently. 

- Save function calls: If you read the jQuery source code you'll see that shortcut methods like , , and etc. all reference the method. All they do is basically call the method with some parameters. Well why not just go straight to the meat and potatoes? Check this out: 

So lets break this down. The in the front is a safety net against unclosed scripts, which can be common if you use plugins in Wordpress, or if you concat and minify your files it will protect you from your function becoming an argument. Then we pass in , , and . We pass in and at the bottom assign it to jQuery. So now in this function, no matter what value the carried outside, in here it's jQuery. Then we pass in and . These are optional in your case, but a good idea since you do use references to in your code. It saves as a local variable, and also will be good when you minify your code as the reference can be changed to something like or automatically. If you don't use a or reference you can just remove them all together. Now keep in mind there might be times where you have to put your script in the header. Modernizr is an example of this. Then you'll probably end up using the . Don't sweat because all you have to do is this: 

This is a lot of code to review so it might be a good idea to break it down into separate parts. This way it'll be easier to give a more detailed and tailored review. But anyways here are a few things you can do that should help your performance: Minimize Paints and Reflows - Might seem like an obvious one but it's one of the most important. Especially in your function which from what I can tell does most of the animation grunt work. An easy way to optimize this is if you need to read data from the page, read it all at once, then repaint/edit layout. Save yourself some code - There are a few spot where you can bring down the size by joining operations. Something like this: 

I've worked on you're code yo provide you with an actual code example. I've re-done most of the code to show you and I've explained it all with comments. Here's the link to the Fiddle and I'll be happy to answer any questions you might have. Here's the code: 

- Variable Names: If you want anyone else to provide you input on your code, they have to be able to understand it. You should use variable names that will make sense to anyone reading your code. Yes, in this simple example one can deduce the what and why you named the variables the way you did and we can sort of follow along. But when you start working on large scale projects, things can get out of hand real quick. Take for example your variable. The keyword can refer to any element that goes through the which might not be a in the first place. What if it was a or any other element. In that case, the name would no longer represent what is actually stored in there. Anyways, try to use meaningful and descriptive variable names and stay away from names that might not exactly represent what is stored in said variable. - Cache your selectors: As a rule of thumb, if you use a selection more than once, you should cache it. What happens when you use is jQuery has to jump into the DOM and look through all elements that would match that selection. So you should really do a search only once, and save your results for future use. This way you can look and play with them whenever you want without having to try and find them again. Ex: 

Now, what I would suggest you do instead is create a div outside of your main stack to handle this. Imagine an absolutely positioned div behind most of the page, and you only bind the event once. 

When in doubt about which element to use, always refer to the spec. It will tell you exactly where and when it is appropriate to each element(s). For a section here's is what the MDN spec has to say: 

The 'click' can be replaced with any event of you're choosing. This gives you enormous power and control when setting up custom events. 

When you use the method, jQuery calls the method. Then if you still call another function inside that, that's three function calls that could be spared if you simply used this: 

I highly recommend, if you're going to use jQuery on a regular basis, that you take some time and read through the source code of the methods you're using. To find them quickly just use and type . That should jump you straight to what you want to know. This way you can understand what and how you are doing things, and even find better ways to do them on your own. -Playing with visible elements: You're if statements from what I can tell are trying to detect scroll position and etc. I highly recommend you check out this tiny plugin. It basically detects if an element is visible or not at any given time. This may or may not help you out but I just thought I'd throw that out there. -Things I'd write differently: Here's an example of all of this summed up into your actual code. I've included comments so you can relate to the reading part. 

You do have a lot of code for review so here are some quite general suggestions: Code length shouldn't be a problem when you minify/gzip. Even though it is 300+ lines. If you can reduce more, power to you! I see you've used prototypes well and that should have already reduced quite a bit. Maybe focus on the Builder constructor for future reduces, as I do see some very similar, but not repeated, code there. The main thing I'm concerned in Builder is all the appends. What you might want to do is separate your tests, and set variables with the results, then call a single (or fewer) appends if at all possible. You avoided a common beginner mistake of putting an append in a loop so kudos to you. Some reading materials for appends which I recommend: $URL$ $URL$ I'll add more to this answer concerning the rest of your plugin as I get some more time. One last thing that can help you with scopes is if you use Chrome Dev tools and set breakpoints, on the right you can see scope variables and a whole lot more. UPDATE: I've seen your update and refactored parts of the Builder for ya. Here's the Fiddle. The parts I've edited follow: 

It was fun going over your code. I haven't played with 1.4 for a while. Well here are some suggestions: 

Props to you on your first plugin! Well here are a few pointers in no particular order: - Double Wrapping: When you cache , you're wrapping the element with the jQuery object. And then you do: What this does is wrap that object twice. You've already wrapped it so you don't need to do so again. Just do this after you cache. So this is how you should do it: 

Depending on when you want to make the ajax request, you'll need to modify the first line of my example. Currently it just gets all of them. You might want to change it so that it gets only the div that was clicked, or whatever. Anyways here's one way you could do that: 

You're on the right track by setting up the options variable. This concept will be vital when you start to develop plugins, if that's what you want to do. - IIFE's: If you have your code in the footer (which you should be doing) what you'll want to do is wrap it in a IIFE. "What the hell is that?" you may ask. A basic syntax looks like this: 

A really good "course" for someone getting started with jQuery is the 30 Days to Learn jQuery by Jeffery Way. He does a great job with explaining tough concepts and provides an overall lesson on jQuery and plugin development. You have some experience so I'd skip the first few videos and jump right into where you'll start learning. Anyways, there is no one size fits all when it comes to making plugins. I've simply demonstrated the way I like best. Use this as a learning experience and not as a "this is how you should do it". If you have any questions after this or if there's some part that isn't very clear, let me know, and I can elaborate some more. 

- Save a function calls: If you read the jQuery source code you'll see that shortcut methods like , , and etc. all reference the method. All they do is basically call the method with some parameters. Well why not just go straight to the meat and potatoes? Check this out: 

This jsPerf can demonstrate what I mean by this. In most of the modern browsers this is less of a problem, but is evident in the older ones. 

When you have multiple 'animate' calls, jQuery puts them in a queue to execute them one by one. This goes for the rest of your slider as well. Save function calls. Do it like this: 

Since returns the appended node, you can chain. I would suggest you go through and try to spot these yourself. Cache Array Lengths - The loop is undoubtedly one of the most important parts related to JavaScript performance. Try to optimize the logic inside a loop so that each iteration is done efficiently. One way to do this is to store the size of the array that will be covered, so it doesn't need to be recalculated every time the loop is iterated. For example: 

The reason the plugin is breaking when you cache it is because you have to cache it at each point the reference changes. Watch this next example: 

OK so use an article when you have stuff that goes with your site but is independent from the rest of the page. If you use an article element within another element, that article element's content should be related to the parent element's content/stuff. From what I can tell your it for styling and positioning, so it should remain a . You got that sidebar element well, and the content inside is should be in the element itself, or if you have content that is groupable and related, then a element inside that would be appropriate as well. 

I would use a for loop to test all values first. If one is invalid you can stop and fix before going on with the code or submitting. Here is a fiddle without the submit callback so you can see how this would work. The following code is explained in the comments.