Load blancing, correctly configured, will only use a single link per flow. Spreading a single flow across links will give you out of order packet delivery, which is death to real-time protocols. Load balancing really only works correctly if you have multiple flows, then each flow is assigned a single link, but you use the aggregate bandwidth because you have multiple flows. 

As JFL says, OSI is a theoretical model, and nothing in the real world follows it. But, what you suggest doesn't actually break the model. All the protocol field does is to tell IP to which registered process to send the payload of the IP packet. The Protocol field of IPv4 (Next Header field of IPv6) is simply a number of a process which registered for that number. That doesn't mean that IP knows anything about the process or payload of the packet. 

The traffic between the two hosts will be limited to the speed of the slowest link. Switches have a very small amount of buffering for situations like this. If the host with the faster link tries to stream a lot of data to the host with the slower link, many frames will be discarded, and ethernet has no facility for retransmission. You would depend on the upper-layer protocols (TCP or the application) to retransmit lost data. Some hosts and switches support ethernet flow control, but implementation and support of this can be very spotty. 

Your policy map will work like an access list. It evaluates traffic in a top-down manner until it gets a match, then it will exit the policy map. Depending on the IOS version, you can nest class maps. You can try something like this (disclaimer: this has not been tested, and I did it from memory, so you may need to adjust it): 

Edit: I guess I don't understand the purpose of the Cisco 1921 router. You are routing the same networks on both the 1921 and the ASA. It looks like you are using the ASA as the DHCP server. You could remove the 1921 and change DHCP to point the gateways to the ASA itself. Alternatively, you could move DHCP to the 1921 and remove the VLANs from the ASA. In either case, you only need the VLANs on one of the devices, and have the link between them (you don't need to use a because a or, more traditionally, a ). Using static routing, as you have configured, doesn't scale, and, as you have discovered, causes you to manually make changes, which increases the possibility of problems or errors. If you want both the router and the ASA, you can use OSPF to exchange routes. The ASA would the inject the default route into OSPF, and the 1921 would inject the VLAN routes into OSPF. Each device would automatically learn the routes from the other device through OSPF. Based on what you have, I would just eliminate the Cisco 1921 router, and change the gateways provided by the ASA. You would need to make the VLAN interfaces on the ASA be inside interfaces. 

From the perspective of routing, packets have the source and destination IP (layer-3) addresses on them, but they do not have any intermediate hop (router) addresses. It is layer-2 that delivers frames on a LAN (a router is just a host on a LAN). A host will encapsulate the layer-3 packets with layer-2 frames. If the destination layer-3 address is on a different network, then the host will use the layer-2 address of its configured gateway for the layer-2 destination. If it has no configured gateway, then it cannot send packets to a different LAN. NAT really has nothing to do with routing. NAT can be used on devices other than routers, and routers do not need to use NAT. In the diagram you have, PC2 cannot send anything to PC1 (even a reply to an ICMP echo request) because it has no idea how to send traffic off its LAN. A gateway on a LAN is just a host on a LAN that knows how to reach other LANs, but PC2 has no gateway, and it cannot reach other LANs without that. 

The Internet Protocol (IP) was designed to provide end-to-end connectivity. The 32 bits of an IPv4 address only allow for about 4.3 billion unique addresses. Then you must subtract a bunch of addresses for things like multicast, and there is a lot of math showing that you can never use the full capacity of a subnet, so there are a lot of wasted addresses. There are about twice as many humans as there are usable IPv4 addresses, and many of those humans consume multiple IP addresses. This doesn't even touch on the business needs for IP addresses. Using NAT to satisfy the IP address hunger breaks the IP end-to-end connection paradigm. It becomes difficult to expose enough public IP addresses. Think for a minute what you, as a home user with only one public IP address, would do if you want to allow multiple devices using the same transport protocol and port, say two web servers, which by convention use TCP port 80, to be accessed from the public Internet. You can port forward TCP port 80 on your public IP address to one private IP address, but what about the other web server? This scenario will require you to jump through some hoops which a typical home user isn't equipped to handle. Now, think about the Internet of Things (IoT) where you may have hundreds, or thousands, of devices (light bulbs, thermostats, thermometers, rain gauges and sprinkler systems, alarm sensors, appliances, garage door openers, entertainment systems, pet collars, and who knows what all else), some, or all, of which want to use the same specific transport protocols and ports. Now, think about businesses with IP address needs to provide their customers, vendors, and partners with connectivity. IP was designed for end-to-end connectivity so, no matter how many different hosts use the same transport protocol and port, they are uniquely identified by their IP address. NAT breaks this, and it limits IP in ways it was never intended to be limited. NAT was simply created as a way to extend the life of IPv4 until the next IP version (IPv6) could be adopted. IPv6 provides enough public addresses to restore the original IP paradigm. IPv6 currently has 1/8 of the IPv6 addresses in the entire IPv6 address block set aside for globally routable IPv6 addresses. Assuming there are 17 billion people on earth in the year 2100 (not unrealistic), the current global IPv6 address range (1/8 of the IPv6 address block) provides over 2000 /48 networks for each and every one of those 17 billion people. Each /48 network is 65,536 /64 subnets with 18,446,744,073,709,551,616 addresses per subnet. 

Exceeding the bend radius or pulling tension can ruin a cable, and it will not pass the required test suite once it is installed. ANSI/TIA/EIA maintains the standards for cabling, especially the ANSI/TIA/EIA 568 Commercial Building Telecommunications Cabling Standard and ANSI/TIA/EIA 569 Commercial Building Standard for Telecommunications Pathways and Spaces. Unless you have the experience and proper tools, including a (very expensive) cable tester that can run the full test suite for the cable category which you are installing, you really are better off hiring a professional to do the installation. 

All the routers in an area will generate Type-1 LSAs to describe their directly attached links in that area. It doesn't matter if they are point-to-point links are not. Every router in an area will know about every other router and its links in an area. An ABR will convert all the Type-1 LSAs in one area to a Type-3 LSA for the other area to which it is attached. The ABR Router ID will be the advertising router for the Type-3 LSAs which it generates. A Type-3 LSA can contain multiple networks. From RFC 2328, OSPF Version 2: 

You don't have the network in OSPF for R2. You are advertising the network connection for R6 into OSPF, but not the network connection for R1, so OSPF will not have the route to R1, but it will have the route to R2. This is a problem because you are sending traffic for the other network through R4 and R5, but R4 and R5 have no way to know about this network. 

You can connect to the console port of the switch to configure it. Use the provided console cable. This will connect you to the CLI interface, and this is how you will initially configure the switch. You can then configure an SVI with an IP address in a VLAN on the switch, and configure the default gateway in the same VLAN for the switch to use. You can use this address to manage the switch remotely. To use the CLI, you will also need to configure a password on the the VTY lines. The default would be to use telnet, but you can configure something else, e.g SSH, but that is more complicated, albeit more secure. You probably want to use the CLI interface, rather than the HTTP server, to manage the switch. 

Ping is an application that is bidirectional. It sends an ICMP request, and expects an ICMP reply. You have broken the traffic from one direction, so you cannot ping either direction (one way the request cannot go through, and the other direction the reply cannot go through). What you need to do is to use an extended access list that blocks either the the ICMP echo request, or the ICMP echo reply, depending on how you want it to perform. 

It depends on what protocols your applications use. Any protocol can have packet loss, and some packet loss is on purpose, e.g. RED randomly drops packets from queues to prevent TCP global synchronization (a bad thing). Also, when using QoS, you may want to police certain protocols over a certain bandwidth, and this drops traffic in excess of a specified bandwidth. A lot of loss occurs due to congestion, usually due to bandwidth over-subscription. It can also occur due to network attacks. Jitter is different than packet loss. Jitter is a variation in the delay of packet delivery. It is important to minimize jitter in real-time protocols. For instance, VoIP can withstand a fair amount of delay, but even when you have a low delay, variations in the delay can cause big problems. 

An I/O rate must be over some time period since it is a number of bits per time period, just like your speed in a car is an average of the number of miles per hour. The Cisco device can change the time period for the average of a particular interface with the interface command, . Your Juniper has to have a time period over which it averages the number of bits. It may be a one second time period, but you can't get bits per second unless you count the over a one second (or longer) time period. Normally, you do want an I/O rate averaged over a time period longer than 1 second since it smooths out bursts and gives you a more accurate picture of throughput on an interface. 

A source host will compare the destination address to that of its own network. If it is on the same network, it will use something like ARP to resolve the layer-3 (e.g. IP) address to the layer-2 (e.g. MAC) address. Then, it will encapsulate the layer-3 packet with a layer-2 frame and send it directly to the local destination host. If the destination address is on a different network. The host will use the layer-2 address of its configured gateway (the host on the network that knows how to reach other networks; usually a router) to encapsulate the layer-3 packets with a layer-2 frame. The host may need to use something like ARP to resolve the gateway layer-3 address to a layer-2 address. A router will strip off the layer-2 frame, look at the layer-3 destination address, look in its routing table to see if it has a route to the destination network. If it has no route, it will drop the packet. If it has a route, it will create a layer-2 frame for the interface to which it must send the packet to reach the destination, and it forward the new frame out the interface toward the destination. 

By the way, the term flood has a special significance in networking. Switches flood (send to all other interfaces, except the one on which the frame is received) unknown unicast frames. 

As Sander pointed out, a firewall will let you control what external traffic can reach your network. A firewall will, by default, block all external traffic. You can enable what you want to come in. IPv6 is different than IPv4, and you should probably allow all ICMPv6 because IPv6 depends on ICMP for many things that IPv4 does not. NAT really has nothing to do with security. That comes from having a firewall. The RFC for NPTv6 is experimental, not on the standards track, and NPTv6 can break some IPv6 features. It is not necessary to do NAT for IPv6 since you can easily get far more IPv6 addresses than you will ever need. NAT breaks the IP end-to-end connectivity paradigm that IPv6 restores with its vast addressing where every host has a unique address. NAT breaks that, and it is a kludge to extend the IPv4 addressing until IPv6 is ubiquitous. You should never use NAT unless you must.