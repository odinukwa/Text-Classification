OK, I copied your source and ran it myself. First of all, did you notice that there is something seriously wrong?! 

The is OK, but you are not doing that consistently. The constructor with the same kind of argument does not have . 

Currently, some library features are not in that comes with the compiler, but may be in or may not be present at all but Boost has a version. This is not a new problem: once upon a time it was , , or Boost. I expect the general idea will continue, with new libraries arriving on the bleeding edge as established ones finally become universally included with the compiler. I want to write code that doesn’t need to worry about which compiler its on, or need to be updated throughout when the compiler is revised. Here is one feature prepared in a portability header, which (once I get it just right) will serve as the model for everything. In general, I have to worry about 

It seems that your primary access is by index position, treating it like a vector. Imagine how slow that is if you go through each element in turn: each time you start over at the beginning and count one position farther! You should present an Iterator that can be used like those in the standard library. So, the function is not necessary! should work on your list. 

I’m guessing that this is an (evil) down cast due to having a collection of base class pointers. In this case, since you can’t change the architecture of your library, use a . And, don’t name the type twice. 

And that's all. The Create function is special, and then the visit function can handle everything else you want to do with the objects based on the concrete type of what was read. 

that is inefficient: copy the string out of the stringstream, then create a new one from a copy of that and appending one char, then returning the copy. Enable NRVO and avoid all extra copies like this: 

Do you really get a warning if you write: ? The compiler should see that the literal constant 1 is within the domain of and not give a warning. 

Write a function in your program that has a readable name for what it does. Use to implement it as the special builtin on GCC; an equivalent intrinsic on MSVC, or portable code (just a comment and #error if you have no need for the portable version). (I think or .) Division (and modulo) are very expensive operations in the CPU. If you could structure your test to use multiplication instead of division, or work with the powers rather than the total number, it will be better. 

Now, at last, do the real work. Finding where a value should fit inside a sorted collection is something people have a need for, in general. You would think that is already in the library, right? Finding either the match or the spot where an element should be inserted if it wasn’t found is a primitive thing used to maintain a sorted collection. These are , , and . However, as usual I’ll use Boost’s version instead of the std version, but this time I have another reason for doing so. Besides being able to just give it the whole array without doing the begin/end stuff, Boost’s handles the key being a different type than the element. It’s silly to create a dummy record just to compare the key field! I want to search for an , not a pair whose first value is an int. 

Take a look at Boost.Iterator. You can write what you want by a simple use of Boost’s , changing only what you need to change (e.g. member). Seriously, it does all that code you wrote, already in the can and well reviewed for edge cases. You only have to write what’s different from the underlying iterator, and everything else comes through. Or, if you’re living on the bleeding edge, just use a in the Range v3 library. 

There are other problems with the code: the copy constructor’s lvalue reference parameter should be . Ditto for assignment. Passing the by value is inefficient and very slow, since it has to do the thread-safe increment and decrement of the counter. Pass by reference, except where you are going to keep a copy beyond the lifetime of the function. Use , especially when you are naming the type twice now. 

So this first form will take the latter two types, as well as . You do not need to overload to take separately. You do not need to overload to take for both parameters, because the will take those! So, two of the overloads should just be removed. The last one, that takes a delimiter, needs to take the for so it will handle different types for that — you have it taking a only, which will be inefficient (copied!) if passed a or . 

for , you are also using legacy loops and manual implementation of the work. Know your std algorithms. That’s a specific case of know your libraries, which is a very important thing. As before, I’ll use Boost’s version instead of std. 

Writing identifiers with a leading underscore is a bad idea, and is generally dissuaded as a style. Note that it is legal for member names if (and only if) the next character is not a capital letter or another underscore. 

Next, you have a whole bunch of nearly identical lines! Neighbors 1 through 8 should be formatted with a subroutine. At the very least, passing in 8 separate expressions as parameters but nothing else repeated: 

Don’t write . You can, however, in a CPP file (not H file) or inside a function put individual etc. (See SF.7.) 

The style in C++ is to put the or with the type, not the identifier. This is called out specifically near the beginning of Stroustrup’s first book, and is an intentional difference from C style. 

Yes, you are reading from the Float member that is never written to, the optimizer can know that it is not the active member, and act as if the program never reaches this point. Anything is possible, including crashing. We have seen the optimizers get more and more aggressive, taking advantage of U.B., breaking “bad” code that worked historically. So, it is a real concern. In any case, the layout of the bit fields is up to the implementation; that is only an issue if you plan on saving these 16-bit values to files. See Scott Schurr’s presentation on this. Your specific case is handled toward the end, and he shows that of all the work-arounds, using intrinsic with the items known to be properly aligned will be completely optimized out by the compiler, generating the code you really intended with the union! 

For , this is not something we would normally do. This kind of prompt and line-read is not realistic for real-world programs. However, you might be getting input from a file or something like that. Point is, you don’t want to use a legacy loop, you don’t want to use indexes on your array one by one, yet printing out the index as part of the prompt means you need to know the number. That teaches you an anti-pattern which is why I’m harping on it as a teaching example. Let me change it a little bit but keep the manual input with prompts 

Your operators are assuming that the arguments are in Cartesian representation. It will get the wrong results if in polar. 

See ⧺ES.9: Avoid names. I see you are using a new language feature of , so your code might not be as out-of-date as you feared. You might consider reserving a value of 0 for ERROR or empty or something like that. 

Note that the function knows nothing about the movement — it simply stops if it is blocked, recording the points up to then. It should work for all the pieces (for knight, pass a dummy stop and ignore it). 

What use do you have for allocating more nodes in the function? This looks like the earlier case, where you allocate memory and then drop it on the floor. I wonder if you are misunderstanding how pointers work. The variable itself is a pointer; it does not need to be bound to an object which then gets assigned over. 

Don’t, in general, assign to clear out a . In this case, there is no need to say anything at all because has a constructor. So just leave the default initializer off of the member. 

You realize that this is actually because arrays are not passed to functions. Generally, don’t pass a pointer to a sequence like this, whether length is passed separately or implicitly known. See ⧺I.13. You should make the board an object. Then this can be a member function that doesn’t need a parameter. You should have made it since the function does not modify the data. The body is very repetitive! Use a loop and don’t repeat code en masse. 

I don’t understand why you have 5 identical copies of the same function. In the Enigma Machine the rotors had different permutations wired up inside them. Besides that, you should be able to have one copy of the code and logic, and just have a simple data table for each different rotor. Hmm, I think you meant to replace with a different name in each repetition of the function. Hmm hmm, no, you have one of those for each chosen rotor, not each wheel to choose from; or maybe that’s another mistake. Instead of creating an array of 26 values and then rotating the array by a variable amount, every time the function is called, you can just add the position to the index. 

As a matter of style, leading underscores are generally criticized here. Some compilers had and still support special keywords and extensions in this format. You have to remember to never use a capital initial letter after the underscore. It is perfectly OK and idiomatic to just name the constructor arguments the same as the members. 

The ability to display the contents should not be a member — that can be written using the public API of being able to ask its size and each item contained. Don’t bloat your interfaces with stuff that’s not essential to the encapsulation and abstraction. 

In general, use the uniform initialization style, not ye olde syntax. I don’t know what is, and it is non-portable. 

Look at and the original Boost.Variant which has a good overview and tutorial about it. This lets you write your visitor similarly to what I described: a single function-call object with overloaded forms in it. But it does not use polymorphism to do its work! The different classes are named explicitly in the definition of the variant. You could write your program so that a generic message is a variant of the different kinds of messages, rather than a base class. Then my example above would work as I wrote it by calling . 

⧺C.149 — no naked or . Probably, and should be , not raw pointers. It goes deeper than not freeing nodes when you delete. You seem to be ing nodes all over where it makes no sense whatsoever. 

I’m making a “counting iterator” which emulates a constant container of consecutive values of some integral type. It is mostly boilerplate, going through the list of requirements for different iterator types and making sure all the functions are there to be a bidirectional random-access iterator. That is why all the functions have explicit return types declared even though they are trivial — to make sure it matches what the docs state. Everything is because they are only simple integer operations. If someone instantiates it with a bignum class, that will not necessarily be right, but I don’t expect that at a use case. I’ll just document it as not supporting exceptions in the simple arithmetic primitives, and IAC never tested for weird classes. 

Hmm, that’s not an assignment operator at all. It assigns a common value to all elements. Just use . 

Why must you pass the strings by value to the callback? You have this std::function signature spelled out twice — you might want to make an alias for that. 

Certainly! Read through and bookmark the C++ Standard Guidelines. Numbers I note later are citations from this. Don’t write . Prefer prefix over postfix 

Work it over with new language features, libraries, and style in mind. (I’m doing something similar.) We have C++17 now, and your code was written for C++11. I’m sure your skill has grown since then too, so the code shown above is obsolete. You might want to use that problem again, digging into structured binding, constexpr, and other new goodies. Please post your latest code in a new Question if you do so! 

⧺C.149 — no naked or . I also think that allocating nodes as part of is why it is slow! That is inherently a slow operation. You might time the function separately and compare that to the time, and see what percentage it accounts for. 

In general looks good! You are using a value return, and you ensure NVRO takes place. You reserve the vector size. You use STL algorithms. 

Keep at it! Please post your next version after making a Player class and not repeating code, and I’ll be happy to look at it again. 

It looks like you know what you’re doing. One thing I spotted: Don’t write quallified like that. You have to use ADL to pick up the right version provided for the template arguments. You need the “two step”: 

Your test allowed a player to skip a turn by playing on a square he already had. It doesn’t matter which player is moving; only unoccupied squares are available. So I broke the test out into another function so as not to clutter the code. It’s readable with the name , without worrying too much about how it actually makes that determination, right? Your loop is structured awkwardly. Use a post test loop: 

This looks like a standard use of PIMPL. Is that all the member functions you need? If just 2 or 3, just manually forwarding each one is fine. Does the Activation class do anything besides have those forwarding functions? If not, don’t bother with the wrapper and forwarding at all! Just make an instance of the concrete class and use it. (If there are other functions, see if they can simply be non-virtual in the base and inherited)