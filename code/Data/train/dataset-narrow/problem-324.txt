Check IEEE 802.1D Clause 17.9: When message age reaches max age the BPDU is discarded. This ensures that no outdated information keeps circulating. 

L1 routers don't know anything about the inter-area topology, so they choose the nearest L2 router. R1 doesn't know about R6, the route is just "outside my area", so for R1 that's R2. R2 doesn't know about R6 but it knows that it's inside area 2. The shortest path to area 2 is over R3. R3 routes to R5 which does know about R6 but uses the shorter path over R4. 

"2 computers that need to have the same IP address" won't work. No matter what you do, those two need different IP addresses, preferrably within the same subnet. As Ron's pointed out, there's a workaround using NAT but it's very messy. It involves translating their IP address on the way over to the other computer so that they appear with a different address there. If your "network drive" requires you to access it with a single, defined IP address only, you could hide both computers behind a much simpler NAT setup though: Both computers would use different (internal) IP addresses on their side and get NATed to the same (external) IP address by the router. This is very much like you build a simple Internet access for IPv4. 

You are not likely to be able to terminate the fiber yourself. There are several variables for GPON and the session built on top, and the termination must match what is used in the ISP network. Additionally, it wouldn't make a difference. The translation to copper does cause some additional latency - but in the magnitude of a few microseconds this doesn't have any impact. Furthermore - as Ricky has pointed out - you can't increase your data rate above what your plan allows. The rate isn't limited in the ONT but further upstream. 

A "self-learning MAC bridge" tracks the MAC addresses from the frames it receives - this way it nows, which frames need to be forwarded to which port. WiFi bridging works the same way. MAC addresses follow the same pattern for 802.11 and 802.3, so the bridge just has to learn which addresses are on which side. 

is extremely simulation specific and can probably only answered by one of the developers As with a real network, each packet is directed to the next hop according to the current hop's routing table. As with all packet-switched networks, each hop is oblivious to the network as a whole, it just works based on its own routing table. The source only defines the destination, not the path. The parameter in a routing table entry defines whether the entry is used with multiple entries to the same destination - the one with the best value is used. (This corresponds to the value often used in IP routing.) 

"Band" applies to the range of electromagnetic spectrum used for the transmission. Broadband uses a broad range (as opposed to narrowband), baseband is a band starting at zero frequency (or close to). Bandwidth is used for both the spectral width of a band or channel (e.g. "100 MHz") and for the amount of data that can be transported in a given time frame (as in "100 megabytes per second"). The data throughput meaning is borrowed from the original, spectral meaning - partly because they are correlated. 

It's called 3-way handshake, so it is transmitted three times: SYN -> SYN/ACK -> ACK. The minimum time required is two 1.5 times the round-trip time (RTT). (Each side sees a 1x RTT delay for the handshake to happen while the server is one transmission delay / .5 RTT behind the client - assuming equal transmission delay for both directions.) In your capture, the only transmission time is between SYN and SYN/ACK. The successive ACK is the reaction to the received SYN/ACK. The socket is established on this side and the local node fires away with GET. On the client side, the sequence is 

The bandwidth of a link can be locally detected (e.g. in Windows ). The bandwidth of a path can be much more complicated and often can't be detected without actually testing the speed (esp. in the Internet). Within your own network you may e.g. be running a routing protocol that you could extract the information from. However, usually you don't have to detect (theoretical) bandwidth because the commonly used TCP protocol will do all this for your application. Effective bandwidth along a path changes all the time depending on overall traffic. 

shorten the line - have ADSL termination moved to a POP located more closely to your premises replace line - possibly another line in the local loop is of better quality replace cable with better quality/screening (if there's a significant length of cable on-premises) switch to a more suitable protocol - e.g. Annex A ADSL leaves more low frequencies for data than Annex J, or multi-lane SDSL is more robust than ADSL switch technology - fiber or WLL may be available in your location 

A WLAN-Ethernet bridge is called a wireless access point (WAP). Many WLAN routers can be switched to WAP mode. If the WAN interface is provided as Ethernet this should be easy. If PPPoE is required the WLAN client would need to establish the session. 

"open port" can have both meanings "allow connections to external IP on port x" or "allow connections from outside to internal IP y on port x". What you need is to allow connections to any external IP address to TCP port 23. Of course, telnet can be accepting connections on any port it is configured to, so you may need to allow another port. Ports 12 for both TCP and UDP are unassigned and 21 as per Abraham's comment is used for FTP control. 

An interface is a connection to a local segment. Generally, it's a network interface or port (layer 1 and 2). A single network port may have multiple IP addresses and represent multiple layer 3 interfaces though. A gateway is a potential path to a remote network. It needs to be in reach of one or more interfaces, ie. be part of the same subnet. The default gateway is the path to 'everything we don't have a better path for'. Gateway is the functional name from the perspective of a local segment where a gateway leads 'elsewhere'. Router is the very same thing from the overall perspective of the larger network - a connection between two or more subnets. 

Adding to Ron's excellent answer, with the vast majority of switches there are three different hashing algorithms: MAC address (L2), IP address (L3) and IP address plus port numbers (L4). The algorithm combines both source and destination addresses and mixes them together in its own special way (sometimes documented) to choose a somewhat random yet consistent forwarding port that remains the same throughout the MAC / IP / L4 session. E.g. a switch may use the lower six bits of the source and of the destination IP address, XOR them and use the result as the index of the port within the trunk. In a nutshell, you can very well use a single 10G link to connect two switches with 1G ports and expect to get ten full-speed flows. However, if you trunk four 10G links between two switches you can't expect them to pass four different 10G flows at full speed at all times - only if you're very lucky or you've hand-picked the addresses to optimize the flows and know exactly which flows happen at the same time. 

With a purely geometric approach (without calbration) and only signal strength as sensor, you require at least two and optimally four sensors. Geometrically, a single signal strength sensor tells you the distance, all potential points lying equidistant on a sphere. You can probably rule out many possibilities but probably several solutions remain. With a second sensor you get another sphere and when you intersect these two spheres the solution is a circle. While you can probably rule out most points, chances are that there are still possible points. With a third sensor and yet another sphere which you intersect with the circle from before you get two points remaining. If you can't rule out either you need a fourth sensor, with its sphere only intersecting one of the points. This is an idealistic, purely mathematic approach. Depending on local conditions, a real-world approach can be simpler or more complicated. Triangulation is actually the opposite: you don't know the range but you know the direction. Each sensor tells you a direction or vector, two of which you intersect to get a single point in space. 

Both IP converters need to have their own IP address (and their own MAC address) when plugged into a single network. Additionally, I'm assuming that such a converter adheres to Ethernet (802.3) and IP standards (IETF). Edit after comment: From what I could find quickly 1, a "KNX-IP converter" is only suitable for connecting to a single NIC. For connecting to a network/switch you seem to need an "KNX-IP router". From the network perspective these labels don't make much sense, but as it seems only a "router" adheres to common network standards (ie. has a complete layer 3 implementation). Since KNX uses no freely available specifications, this question seems to be off-topic here, sorry. 

This is possible since the optical wave frequency is much higher than the frequencies carried on coax - 1310 nm translate to 229 THz, while the coax runs less than 1 GHz. 

Note that the original STP has been superseded by RSTP in 2002 as detailed in IEEE 802.1D. What you're asking is included in Clauses 17.28 and 17.29: A change in port roles doesn't change the port state unless necessary- a designated port becoming root port, or a root port becoming designated should retain the forwarding state. 

VLANs represent separate layer 2 networks. No direct Ethernet communication is possible. A layer 3 router acts as a gateway in between the VLANs, so you can establish communication on L3, usually IP. 

You should always use the correct fiber type for the connection required. If you need to run new fiber you need to think ahead of what might be coming. Generally, it doesn't pay to save on fiber as a redeployment a few years later is expensive. If you have to put up with old fiber and need to squeeze out more performance please add the appropriate details to your question. 

Switches don't share anything, each switch learns MAC addresses and port associations on its own. They do this by looking at the sender's address of each incoming frame and then put it in their MAC table, together with the port they received the frame on. When a frame comes in, the switch searches for the destination MAC in its MAC table and forwards the frame out the associated port from the table. 

(or whatever you want to allow) at the end of a new ACL since it's an got an implicit at the very end. Alternatively, you could filter on any point in between the subnets but you'll want to drop unwanted traffic as soon as possible. You could also use both lines on both sides to make 100% sure there's no communication even if it does enter the tunnel. 

First off, CSMA/CD is ancient and hopefully not in serious use any more. The timing for coax (10BASE5/2) is 16 BT for the potential collision detection delay followed by 32 BT jam time for all PHYs. PHYs with distinct transmit/receive channels (-T, -F) detect collisions earlier than coax. After that, the random pause is started, its size increasing with each unsuccessful transmission attempt. So yes, the channel must be idle after at most 273 BT (the collision started at 225 BT and was sensed at 241 BT). A could potentially transmit right away, after the IFS delay. The jam signal could still be on its way to B but it's ahead of A's data and there's no collision. The procedure is detailed in IEEE 802.3 Clause 4, especially in 4.1. 

There's no definitive rule but most likely the agent runs in software on the CPU with code in firmware. 

The incoming connection is accepted and the socket uses the listening port on the server, not an another one. Some protocols are more complicated than that but HTTP (from your question's port 80) isn't. 

To start with, separate VLANs are separate layer-2 segments - they can't communicate directly. To enable communication, a router is required. This router can be an external router (with dedicated untagged links or a VLAN trunk), or - preferably - a layer-3 core switch that the traffic needs to pass anyway. With a layer-3 switch, the usual default is to route everything. You need to set up ACLs to limit the routing/communications to what you require and apply the ACLs to either the inbound ports or the VLANs. 

The moved device needs to send a (preferably) broadcast frame to the network - this will update all switches. Usually, this is either done by the device itself or accomplished by ARPing the device's IP address. You should be able to force this by clearing the ARP entry from a node's ARP table and then trying to access the IP (by ing for instance). However, it might just be easier to use DHCP on the device (with a reserved address) - when it discovers the DHCP servers this is done by a broadcast which at the same time updates the switches. (This is probably why a laptop behaves differently than the (assumed) statically configured printer.) Setting the MAC-age timer to a very short period causes the self-learning bridges to forget about MAC addresses earlier and possibly permaturely. This in turn causes unicasts to be flooded to all ports instead of just forwarded to the destination port. Flooding unicasts is not desirable and can reduce the network's effienciency. Anything beyond these approaches might be caused by some special configuration on your switches. You might need to post the (sanitized) configs for us to check. You should also post a diagram for easier understanding. 

You should be able to use access-lists for this. Check the "Access Security Guide" for the 2530. Something along the line of and vice versa applied to the printer port. The is implicit. Make sure you're able to access the switch via serial console before experimenting with ACLs. 

ADSL uses frequency-division multiplexing for transmitting and receiving, so the frequencies in either direction are quite different. The upstream uses lower frequencies, so very often it is less affected by noise. There are several approaches to improving the situation, possibly all out of your reach: 

The port is no passthrough port (these do not exist in networks). The phone features a small 3-port switch - one uplink, one PC downlink, one port used internally. For a permanent solution you need to either check/repair/replace the phones (or unreliable cables), or provide a separate network port for the PCs - I'd recommend the latter. Edit: as @marctxk suggested in a question's comment, a detailed packet capture might provide more clues as to what's going wrong. Packet captures on the PC side and on the switch side while running some test traffic across the phone will almost definitely produce solid evidence for serious packet loss in the form of TCP retransmissions. 

Does the "L2 fiber network" support VLAN trunking? If so, it's probably the best solution to use multiple VLANs to separate the traffic within a single, physical link. That way, you can run mixed L3 and L2 connections with as many or as few links as you like. Feel free to add details about your setup to your question (network layout, diagram, addresses, ...) and I'll expand the answer. If no VLAN tagging is supported you need to set tunnels for the required, additional connections. edit: Routed links (L3) don't require separate VLANs. Depending on security or architecture requirements, you could route all of them through a single VLAN including the untagged one. I'd use one VLAN to bunch all the router interfaces together. 

The IP address is used for addressing a host on the network layer (L3). Switches however are data link layer devices (L2) that know nothing about IP and L3. They require a MAC address for addressing - this MAC address has to be determined by the L3 device (a host or a router) before being able to pass an IP packet over Ethernet. IPv4 uses ARP while IPv6 uses NDP. With the destination MAC address from the Ethernet frame, the switch can then forward the frame to the L2 destination efficiently (the L2 destination is a local host or the next hop router). (Switches know nothing about IP is only true for pure L2 switches - multi-layer switches do know L3 (or even L4) protocols, and they're partially routers in this sense.) 

Routing protocols don't transport user data, routing protocols exchange information about routes. A route tells a router through which of its interfaces and neighbor routers a certain destination network can be reached. User data is transported in packets and these are routed over multiple hops from source to destination. Each hop/router makes a forwarding decision based on the routes it knows about. Routers that are supposed to talk to each other need a common connection. This can be a direct 1:1 physical link, a tunnel, or a network (often Ethernet) they are both connected to (like a common link segment at an Internet exchange). If neighbor routers are to exchange routing information (ie. they exchange knowledge about routes to networks they know about) they need a common routing protocol. With different routing protocols they can't exchange routes and don't learn from each other. Of course, routes can also be configured in a static fashion but with a growing number of routes this becomes less practical.