This shows us how things started. From there, social media, and social trends took it to worse levels. Movies, books and other media showed men as computer geeks. A study of Carnegie Mellon's Computer Science degree path shows that half of the women in the program ended up quitting, and more than half of them were on the Dean's List. So, effectively, it was marketing which piled things up with advertisements featuring men exclusively. "Cultural" changes lit the pile up and it's been burning since. Later on, towards the 2000s, this trend continued (but the "fire" was burning lower than in 1985). Recent efforts have been successful, and with the rising awareness to the issue, it looks like a solvable one. So effectively, the reason for the difference is a process. One that marketing started, and the social narrative took to a higher level. But that can be changed, and a part of education is teaching students to help change this narrative. References: 

From the other side of this process, it's up to the teacher to decide whether to tell the rest of the class about the presentation. Personally I wouldn't tell the class (that keeps it a "surprise"). 

An analogy which I find useful is buses. One side (server) puts information on a bus and sends the bus to the other side (client\user end). The buses are loaded with data which is a sequence of and 1. Each sequence has a passenger before it, and that passenger is used to identify what sort of data was loaded onto the bus. This passenger says whether the data is for creating an HTML file or a CSS stylesheet etc. Now this bus is loaded with everything the server needs to pass to the client, so the bus departs. Assuming there's a connection, the bus will reach the desired client, because the driver knows the way. This is important to explain, because that's a way to explain how ip addresses and ports work. The client is the final stop and the address of a stop is the ip for that stop. When the bus gets to the client, the passengers leave the bus and you can explain here that each message (passenger) knows the order they should be in (like a passenger's id or something similar. This is just to avoid going to deep into synchronization etc.). The data is then arranged into order and by using the information in the header and the client knows how to parse it (just like a person waiting for someone to get off at a specific stop knows how to greet the person). and yet This is the kind of explanation one gives to complete novices. It might have inaccuracies or things that are out of date. Another thing about this analogy is that the bus can be used to explain a protocol if you say that the amount of data is limited, and that the buses have indices but this might be too confusing for people who are completely new to all of this. Secondly: Now that the students have an idea of how information is transmitted between two computers, you can go into explaining that the internet is almost the same, but on a much bigger scale. You can explain the various headers that exist in HTTP with this list. Eventually, the every bus that arrives at the client is sent back with a response saying "I arrived at the client..." and the response includes details on the time it took or other things which the client might send to the server. 

Record Select the table detect the headers with "format as table" and check "my table has headers" stop recording. 

1That's probably incorrect, but it's highly unlikely that listening to what a friend learnt in accounting would do any damage. 2and for your friends, when they talk about what they learnt 

Although it's unclear how human subjects might somehow be used in CS research, I think that such ethics should be taught in all fields, and not just CS. Indeed, it is not needed more in CS than in Biology (where humans often times really are the subject). But I'll address some of the examples you gave: The two examples you gave which I can imagine can somehow have human subjects are NLP and AI. Which is actually AI and AI (often times). Algorithms in Artificial intelligence often learn from human examples, which means humans provide examples. If this you consider this to mean that the humans is a subject, then there you have it: it's used in research. As for education, the ethics of using human subjects in research should be taught regardless of the field of education (unless this is criminology; and it isn't). Students should be taught these ethics and as far as reason goes, they are subject (pun intended) to review. These reviews would not allow un-ethical research to be conducted without a very good reason (such as a newely discovered disease which might wipe humanity and there are 3 infected people on the planet; again, highly unlikely that something of the sort can happen in CS). So, yes. A general education (generall, regardless of CS) in CS should include a component regarding these ethics. (as well as other ethics, like not to do plagiarism). 

Students building websites in a high-school computer science major (using , , and ) don't seem to understand the dangers of SQL injections. I try to explain that unchecked SQL statements can really ruin their databases, but just telling them doesn't get the message through. The students build small websites as a project, and they work on that project for one semester (they do this during the 2nd semester. In the first one they are taught , , , and . Rather efficient, isn't it?). The project guidelines specify they need login and registration pages, and a users database (among other requirements). After teaching how a login\sign up page might work I explain a bit about SQL injection. However, the students simply don't see the dangers SQL injection poses. I explain that I can cause the entire table to be deleted just by signing in, but just saying it apparently isn't enough. So, how can I demonstrate the dangers of SQL injection? Note: This isn't a self-learning question (details can be found in the comments). 

I would suggest that you start each "session" with each one of you going over what was learnt in the previous session. Devote ~15 mins for it. This is not in spite of the fact that you "don't have a ton of interest in each other's topic", but because of it. This "review" of the last session gives, as I see it: 

The problem is that those two are very short, and are introductory. I am trying to think of other exercises or tasks which are almost entirely with lambda expressions. Which kind of exercises could I give the students that would both show them just how cool lambda expressions and the functional API are, but also give them plenty of hands-on experience with what Java's functional API has to offer? (PS, the students are high school students) 

And run it. Then they see that when they something with , the output is literally what's inside the quotes. However, if they have a iable (this is important to note that is defined with ), the output is the contents of the variable. Truth be told, the output is the string representation of the object, but I fear that's too advanced at this point. Further explaining that when they use the word (or etc.), you create a something that holds information. On the other hand, using quotes , you are simply representing that information. But no matter how well you explain it, it's still far more effective to show examples like the one above, and to give the students exercises that will allow them to experience the point you try to teach. For example, let them try to do that with a object: As an exercise, teach them about in JS: 

That image explains what the cycle is, but students have difficulty in seeing how it works in practice in a javaFX application. 

It's not easy, but it's a good way to get students to develop this skill\mindset on their own. Added bonus: You can go over this process with them (i.e. literally explain to them what it is that you did to get them to develop this mindset) and tell them that this method can be used to learn any skillset, and the important bit is the feedback in the beginning. By feedback, I am referring to actual code review. Give them feedback based on their work. Don't be too harsh, but don't be too forgiving. I cannot say exactly how lenient you should be, but you can let intuition guide you, seeing as you know the students better than I do ;). Whilst giving feedback, remember that you are trying to get them comfortable with abstraction. In that spirit, give very positive feedback for good use of abstractions and multiple levels of it. Don't focus on other design problems you might spot, because that might confuse the students. This feedback shouldn't be expressed in grades. Better to give, as I said, an actual code review, focusing on the abstractions. As for not being too forgiving: If you spot a severe abstraction problem (something that might throw runtime exceptions because the abstraction isn't abstract enough, and special cases break the abstract system), then point out what sort of special cases might cause the abstraction to crumble1. This gets the students into the mindset of making things as abstract as possible, and only dealing with concepts. The more, the better. Also, encourage them to give it a try. For some, the word abstraction might sound threatening. At first it might be, and that's ok. As they work with it more and more (trial and error), they'll be more comfortable with it. 

The problem with this example is that students don't always see how the interface acts as a contract. How could I explain the analogy in a better way, maybe with a different example that can show this in a better way? The students are high school level, and are familiar with polymorphism, but not with abstract classes. 

When I show my code to students I tutor, they ask about "all those things in my code", which refers (quite vaguely) to things such as shortened s, post\preincrement etc. They are confused by these things, but once I explain those things, I see that the students constantly use them (not in excess). This got me wondering what are some of the benefits of teaching syntactic sugar during regular teaching (as part of the lesson plans in the curriculum). What might the students gain from learning syntactic sugar during lessons? Examples of things I had in mind: 

Being a relatively young tutor (and soon to be informal teacher), I have quite a few examples of bad code that I wrote not too long ago. If you have no such code then you can simply write some (purposefully buggy and bad), then show it to your students. The point of this is to explain that had you not taken criticism of that code constructively, your own learning would be impaired. Because one never actually stops learning, I'm sure you can find recent examples of this and use them. Why, even this site might be an example. If you received criticism on an answer or question, then to actually "learn from your mistakes" you'd have to take criticism constructively. Also, it's important to make them see that without criticism, they have no feedback, and with no feedback whatsoever, it is literally impossible to learn (I'll also add that if they know a bit of machine learning or neural networks then you can use that example: without feedback, neural networks learn so slowly). It's also important that you give your criticism in a constructive way (I'm sure you do but one should keep it in mind) and then explain to the students that criticism should be taken constructively, because it means there's room for improvement, and the criticism is the key to opening the door to that room. I saw many students (that studied with me or that I tutored) who were encouraged to take criticism constructively because they were shown by the teacher (who was sometimes myself) just how important it is. 

I'm trying to think of an analogy to explain how static members, references and objects work. What I have in mind is saying that static is like the number of computers in the world. That parameter isn't related to any specific computer, but rather to Computer in general. However I feel like this might confuse students, partly due to the name (i.e. something that doesn't move). Can anyone suggest an analogy that shows what means in everyday things? Preferably something that high-school students can relate to and understand.