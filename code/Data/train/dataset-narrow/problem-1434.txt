(For variants using arrays of precomputed elements in stead of "the setup-loop" (and a ), consult the edit history.) (*Phi³ coincidentally can be computed with just two summands (and no other power up to 2³² can).) 

— alas, at least I and CodeYogi have mis-read the problem statement: The numbers in are a subsequence of . One solution looks similar: 

Docstrings with every method: Way to go, document , too and revisit PEP257 for details. Your tackles the same task as module using much the same strategy, and you express dissatisfaction with run time - a side by side comparison: 

Another thing to ponder would be the name itertools. Even with "the basic three", this seems to call for common base classes - I gave it a try, without proper attention to other concerns. (One thing I'm never quite comfortable with is visibility: exposes quite a lot.) I didn't succeed in integrating Partitions without a second type parameter: 

The non-buffered didn't suffice, in the end: Sunsoft's encoder buffers. Trying to keep that from interfering messed things up. The from the question seems to have a correctness issue with the way it guesstimates byte count: it extends and accumulates "the length of s gotten from representations of ". It should rather 

(I am under the impression this question justifies three largely independent answer parts: 1) documentation/description of the approach chosen (and the analysis leading to it) 2) problem analysis 3) coding (and maybe 4) asking CR_). I don't quite feel like doing every part justice.) In the first revision, there was no description of your overall approach; in particular, not in the code presented - try again, top down as many levels as needed, using what documentation tool support there is for C#. For "everything" in the code, document what it is to accomplish. If any one description needs more than "one screen" (cannot easily be viewed without scrolling), it (or the entity described) probably is too involved an should be broken down/simplified/shortened. (A "page" of about 65 lines by 80 characters is a lot, a FORTH screen used to have 16*64 (my #1: polymorphism support).) For lack of documentation, your approach and analysis has to be second guessed from the code. (I will use signature where you used hash (which I imagine different from the use I have seen here).) For each test case (not intending to give iteration through test cases notable attention): 

So, let's say you build a website that uses this class for storing data. Then, one evening, you and I both visit the website at the same time. We both hit the button that opens the table and reads the data into memory. Now there are two copies of the data in memory -- one in the page you're looking at, one in the page I'm looking at. You add a record. The "insert" function adds your new record and writes the file to disk. Now I update a record. But the copy of the data in my window doesn't include the record you just added. So when my instance of the code hits the statement file_put_contents(...), what happens to the record you just inserted? This is the sort of reason it's recommended to use real database engines like sqlite or mysql. They're designed to serialize calls and protect users from each other so they can't overwrite or corrupt each other's data. 

One way to get the neighbor coordinates without checking for (a != 0) or (b != 0) on every iteration would be to use a generator. Something like this: 

Seems like that might cut the time in the final loop by almost 50%. The extraction from match_iter doesn't change, so it will take the same amount of time. The append will take about the same amount of time as one of the appends you're already doing. Since two appends will be eliminated, I think the time they're taking will go away. 

Overall, it looks pretty good to me. I agree that you have good commenting and variable and function naming. I see just a few things to comment on. 

With the simplification in userInput() and display() above, the shouldCycle member goes away. Now, with the menu defined internally as a dictionary (self.menu_dict) and as a list (self.menu_list), display() and userInput() will look like this: 

Actually, I agree with Quentin. For a first effort, your code looks pretty good. You have a hero class called Erdrick and an Enemy class instantiated as a Slime. A class structure like what I show below would allow you more flexibility with less repetition. See what you think... You might want to work out some way for specialized weapons to increase the damage a hero deals and for armor to reduce the damage suffered. 

As interface design is pivotal in type design, I'm happy to start there - let me refer to . In no uncertain terms, the documentation summarises in just two sentences what is about: element access and bulk boolean operations (see for something irritatingly similar) (leaving out summaries ( and ) and paraphernalia). I like that it is possible to have non-reflected binary codes - assuming a : . I second AJD in preferring a constructor with a single parameter as an alternative to a separate generator class for reflected binary Gray codes. With that change, the whole API collapses to - which in itself is weird: Objects should be constructed in a valid state and never get invalid if that can be helped. (Another hint about the API is the lack of documentation - compare to .) Then, there is implementation: 

I think this implements Hierholzer's algorithm in O() (with a bit of hand-waving around adding up to m - n edges to an taking Θ(mlogm) time - with constants "never" allowing to be faster). (If that was true, there shouldn't be a performance issue - I should really set up a test.) 

I tried to shift the parities left instead of shifting the operands right: unsurprisingly, the differences are negligible. 

(I started out arguing that "min-max selection sort"("double-ended selection sort") has an opportunity to use less comparisons than the naïve one (by a constant factor) - couldn't seem to find a half-decent implementation. I added a Python re-iteration.) 

(I don't intend to go into computing Fibonacci numbers fast (Takahashi, Daisuke: "A fast algorithm for computing large Fibonacci numbers"), but keep the focus on the code presented.) Which is not doc-commented. With cleaned up (rename to would be misleading, not much better, long/abstruse - fubar), comes to the fore: 

You seem to be bent on thinking of nodes numbered starting from 1 - nothing wrong with that, and coding the way you think about a solution/problem is the only sane way to start: for a shot from the hip, allocate one more array element, don't use index 0 and drop all of "the ". 

More or less random remarks: use doc comments is funny - rather override check corner cases (see, again, rolfl's answer, too); consider using JUnit consider implementing /extending rename to and / at head 

That way, apply_filter doesn't have to be aware of the list being built. It just returns a list of what it finds -- either a line that passes the filter or an empty list. Passing an empty list to extend is a no-op. 

Let's see if I understand what's going on with get_filtered_lines() and apply_filter(). First, get_filtered_lines() reads physical lines from the file and strings them together in line_buffer. When we find the beginning of the next logical line ('['), we pass line_buffer off to apply_filter() so the material that has been collected gets processed. Then we empty out line_buffer and start over with the beginning of the logical line just read. Here's an approach I think is simpler and clearer: 

So display() keeps showing the menu as long as userInput() returns None. userInput() returns None if the user's input doesn't match a button, or the inputSel value if it does match. I think the way the Controller loops is fine. The program will always stop when it gets to raw_input() and read stdin until the user hits ENTER or RETURN. That's what raw_input() does. You're managing your buttons as a list, which means you have to scan the whole list until you find the navigation element the user selected. If you put them in a dict, you can simply use the user's input to index directly into the structure and select the correct button (or determine that the user's selection is invalid). However, you still want them as a list for display because you can't control the order in which entries are pulled from a dictionary and I think you want your menu to display in the same order every time. That needs a list. I would suggest the following for the constructor for the Display class. We're going to pass in a list so it's easy to define, and we'll keep the list, but we'll also have the class internally turn that list into a dict so it can more easily find the user's input on each selection. 

You don't need "if not out:" at the top of this -- you're in a "while not out" loop and out hasn't had a chance to change since the top of the loop. The "for items" loop just scans through the inventory looking to see if you have the door key. That can be done in a single statement, as I show. Once you've opened the door, you're out, so we can just break out of the "while not out" loop and carry on from there. Several of your descriptions are hard-coded: 

Doc comments for public methods are indispensable. I'd probably just use a foreach-loop and a DIY stack: 

needs to initialise and start from 0 to check every transition - but even that is just one necessary condition where a second comes to mind: no code may repeat. (I don't know better that to sort with a "throwing comparator".) 

Where is the code documentation? Everything not in the code will get separated - when code is copied and pasted into a different context, if not before. (Another thing python got right: the doc strings are between essential parts of the code.) /: Dispensable - whenever you can, process as you go. Giving it a try (with presentational abbr.), in Java for lack of a C# environment: 

Checking from the end of a promising index range intending to leap as far ahead as possible, thereby reducing the number of checks, is the way to go. There is nothing special about the indexes you start to check from: Why start checking upwards without knowing there's a new record? Work in progress: not named, not documented, not tested 

While the cast to Map anything to Collection enables the use of a foreach loop, it wouldn't exactly express my intention (values better map to Collections containing Strings, only) 

(Getting late: the following code is work in progress; posting this to save the above, mainly (not quite trusting SE's autosave)(Never used C# - give me a break on documentation comments, const-correctness, commendable use of or some such.)) 

is on the long side. If you factor out recreate_node_array() (under a better name), you can return early from that avoiding the repetition of . Guess confused me - oho: following the pseudo code in the Fibonacci heap chapter of CLRS quite closely (consider referring to that near the top of the questions). 

(Some peculiarities in diction, formatting and code factoring are due to the "code keyhole" on SE, esp. my dislike for horizontal scrolling.) Pretty late in the effort it occurred to me that Python may be a better choice (3.3? 3.6? 2.7? comments welcome (regarding any language in wide-spread use among, hm, "programming juniors", actually)). Uneasy with the design, I didn't invest due diligence in testing & "tallying" (counting/computing comparisons&assignments) (yet) - I'd regret major effort invested there on any reader's part.