I'm working on a few game dev tools which use OpenGL or DirectX to render 3D models (viewing). Consider your favorite 3D modeling software package (Softimage, Maya, 3DS Max, modo, etc.). Note that the 3D viewport does not sit in a constant render loop pegged at max FPS. It remains idle (0 FPS) until some action is taking place in the viewport such as moving the viewport camera from side to side using the mouse or pressing play for animation. If the viewport is idle, there is no drain on the CPU / GPU. I'd like to use this technique in a couple of tools I'm working on and possibly within the game. Is there a generally accepted programming technique with OpenGL and/or DirectX (via C++) that will achieve this? One solution would be to do a standard render loop and check for input 1000s of times per second, but that seems inefficient and hard to manage as you add more and more "events" which would trigger a updated render. Please let me know if the question is unclear. If I knew how to describe it perfectly I could probably just search google. 

For the multi language support, you are looking for something called localization , it's a common process used almost in every software development that have more than a single language, here is a special tutorial for How to: Create a Localized Game on XNA . For the multi resolution issue, as Homer_Simpson said (lol), you cannot use resolutions above 800x480 on windows phone with XNA, and in case you moved to MonoGame, as far as i know, there is no magic trick to make such a thing, you have to build it yourself, game engines like unity3D use something called "Virtual Resolution" (World scale and position in unity), the whole principle is about using your own resolution for the whole development, and then scale all the objects based on the target resolution, i myself always use percentage to scale and set positions, specially for GUI cause even unity3D use current screen resolution when it comes to gui,so my suggestion would be to make the whole game in 1 resolution, then calculate the percentage of each object size and position relative to your resolution, 

Obviously this creates a square hole. However, if you add more verts around the edges of the cube before using INSET, you could later manually shape the hole. 

It's been a long time since I've used AutoCAD. However, I believe AutoCAD is designed more towards professional architects that plan on drafting blueprints along with visuals whereas Max is mostly visuals with the ability to get really creative at design time and designed for artists. The target audience of AutoCAD and it's functionality may have changed since my experience while working as a land surveyor. 

You could also simply use AllocConsole. AllocConsole is a Win32 Windows native function. In short, the AllocConsole method allows you to allocate a standard Windows console to the calling process. Once you have done this, you can use standard C# console input/output within your application using , , etc. To use this method you need to use using Shortened Example: 

Now i think that the problem will only be, "how to know which pixel i should replace based on mouse position over the object ?" Thank you very much and have a great day. 

The problem that am facing is that i don't want the "enemies" to get out from holes at the same time, not even in a different close times, so i want to keep a minimum interval between each enemy and in the same time i want too keep the feeling of randomization, currently am making it like this : 

this fixed the 1st problem, but it will always make the enemies come out in the same order (1st one is faster, and last one is the last to come) i hope i explained it right thank you and have a great day 

Am making an android game with unity and i want to add an in-game purchase feature, i looked around and all the suggestion lead to non-free plugins (mainly prime31 plugin) but in the current moment i cannot afford to invest in some of these plugins, does anyone of you have a free solution for this "problem" ? thank you 

Failing? No, but you would be limiting yourself if you have access to Maya 2013 (which is expensive... not going to ask...). Also, it depends on what you are trying to achieve. Do you want to only make some models for games? If so, Maya 6 should work just fine. However, if you want to get into some of the more advanced CG topics (cloth, dynamics, sculpting, animation, etc.) and interop with other applications, Maya 201X is going to be your best bet. If you don't need all the junk features that's in Maya, I would take a look at some cheaper specialty tools (such as modo for modeling). 

It looks like XNA is fading on the Windows platform. I would take a hard look at both SlimDX and SharpDX. With that said, both probably aren't as beginner friendly as XNA. 

So am trying to create a make-up game and i need to have a basic drawing solution, and so far i have made a good progress with the help of the DepthMask solution My approach was like this : suppose we want to edit the eyelash color (texture) 1-in the beginning there is an eyelash object at a layer named old 2-after choosing the new color that we will draw with, a new game object is created under the first eyelash, which mean it's invisible for the moment 3-then when we start drawing, we are actually creating little circles above the old eye lash, these circles contain the depthMask shader which effect the old eyeLash and give the impression that we are drawing with the new color So far, everything is going great, my problem is that i cannot use this approach to use a 3rd color, suppose the player want to create an eyelash with mixed color, how can i do that with the previous solution ? or is it impossible to do ? EDIT: I already thought about adding new layers with each new color, and it works, but since unity is limited to 31 layers, this solution can never be a good one. I really hope someone can answer this, and if you know a better way to do it then please don't hesitate to tell me. EDIT2: After a couple of hours, i've reached a pretty cool result, and i think that this can be the good way to reach my goal, this script allow to replace a specific pixel in a material texture with another chosen texture (target texture must be in the same size, and readable)