Consider . What does it do? It sets the current Hp. That's nice, but what is your code actually doing? Your code is raising the current HP, subject to a maximum. Why don't you write a method that raises the current HP, subject to a maximum of ? It might be called And then you could write: 

The only problem with the first few lines is the hard-coding of the csv file. Is there no way to get that into a command line argument, or configuration setting? 

You might consider making a inherit from and use a bunch of zero-cost routes to connect to the starting points. That would make everything a graph traversal. If you put a "message" into each route, describing the struggle, then the Resort -> Start messages could play into that: 

And validate the inputs with an assert, an error message, or just by swapping L and R if they're not in order. Also, ensure the numbers are positive. Another approach With that said, I'd like to encourage you to think about the problem a different way: assuming that L < R, what happens when you add a multiple of R in the sequence? Let's use 5 and 11 instead of 2 and 3, because they have a bunch of problems and they produce numbers that are all fairly distinct when you divide them. (They're a better example than 2 and 3, or 3 and 7 which were the first two examples I tried. ;-) If you have L=5, R=11, K=10, consider adding a multiple of R to the sequence: 

As I understand your code, you are looking to find substrings that could be arranged to form palindromes. You are looping over various lengths of substrings in your function. Your function, however, spends a great deal of time and effort to formulate the palindrome. This is wasted, because all you really need to know for your scenario is whether each distinct digit appears an even number of times. If each digit in the substring appears an even number of times, like , then you know you can arrange that substring into a palindrome. If there is a digit that has an odd number of occurrences, then there will be two (since the substrings are even-length, per your problem statement). Which means you have something like and that cannot be made into a palindrome. This means you can scan your input string using a "sliding window" and simply update a dictionary of counts as characters are added and removed from the window. What's more, you can stop when you find the first arrangeable substring, and return true. If you start your search from either or (if number is odd), then the first result will be the longest result: 

What you meant to do was just a bare . Except that was wrong, and what you really meant to do was , as above. 

Now, however, we come to the tricky part. You have a list of "must contain" items, . But that list includes one word that is a prefix of another word. If is part of , then is also part of , since is a substring of . The result is that this will tend to cause those rows containing to be emitted twice. I suspect this is why you have two copies of the conditionals included in the stack. A better idea would be to pre-process the filter words, to eliminate the longer word: 

To answer your question, there's no good way that I know of - nor even a bad way - to get an update to the pointer without either destroying it and rebuilding it (by using the as your temporary, and then scanning-to-end once you're done), or comparing it and updating it if needed. Suppose you use as some kind of previous node pointer? Well, that's the situation you are determined to avoid with the whole "Linus' double pointer" scenario. So I'll assume you don't want to do that. Then how can you safely update the tail pointer? Well, consider this: 

You're printing lines from the file, then printing allowable answers from the program source code. This means that the test file and the source code are in sync - they're not independent of each other. Since the source code is constant, why not put the possible answers in the test file: 

You don't provide much information, which is unfortunate, since this kind of optimization problem relies on knowing how to "skew" the code in order to get better performance. For example, are your points constant? If you are always searching the same set of 27k points - for example, cities or road termini or railroad stations or whatever - then you can pre-compute lots of data about those points to make the code faster. Are the points accumulated gradually over time? Could you perform an expensive computation on each point safely, knowing that the various points are collected at some interval that allows for that? Are the points close together or far apart, relative to the likely neighborhood distances? That is, can you estimate the number of points that will be in the likely neighborhood queries? Is your program memory-constrained? Can we trade memory allocation for performance? Are the values - the neighborhood distances - truly variable? Or is there a static list (1km, 10km, 25km, 50km) that the user chooses from? All these questions, and more, could be used to tune the code for speed. When you're asking a speed question, there's no such thing as too much data! Finally, what flavor of python are you using? PyPy? Cpython? Jython? Cython? With that out of the way, let me make a few "low hanging fruit" suggestions. I'll assume you're using "the python that came with my system" - meaning Cpython 2.7 or 3.4+. The cpython compiler isn't nearly as smart as you might like. Let's look at the generated code from your function (I put it in in a class named ): 

instead, so that starts at zero. But then you won't run the loop on , if that matters. Alternatively, you might want to try: 

Once we have a "clean" list, you can write another generator function. Better still, we can make the cleanup part of the generator function, to make sure the user doesn't give us bad data: 

Above, the marks the end of positional parameters - meaning there are none. Every parameter after the is required to be named. So you call this like: 

But a better approach is to used named or named-only parameters in your function definition so that the caller spells out some or all of the parameter names: 

For the 9th number in the sequence, we'd have K/blocksize == 3, and R * 3 == 33, as shown above. If K is not a multiple of the block size, we have to find a multiple of L that is less than or equal to the highest number in the previous block, then add L * remainder(K/blocksize) to it. So if K=10, as above, we look for the multiple of L (5) that is less than or equal to the highest number in block 3. 3 * R == 33, so we'd use 30, then add remainder(10/3) == 1 multiple of 5: 30 + 1*5 = 35. Similarly, if K=17, we would find the highest multiple of 5 less than or equal to 55, which of course is 55. Then we'd add remainder(17/3) == 2 multiples of L, or 2 * 5, to get 65. The upshot of this is that you can find your result directly, with just a few integer operations, no looping required. 

When you add an edge you do not add a corresponding . This makes your Graph a directed graph. Was that your intent? You have no mechanism for setting all the colors. You need to either rotate color settings (change the values of black/white/grey) or add some kind of "set-everything-to-white" method. Otherwise, you can only DFS one time. ;-) You may wish to use instead of in order to save space. For a 4x4 matrix this won't be a problem, but if you get called on to use a 64k x 64k matrix, space will be an issue. Your DFS algorithm seems wrong. I don't understand why there are two loops plus recursion. With recursion and a matrix, you only need one loop. Here's an example I found on a different post: 

I don't know anything about climbing. But I'll try this by way of analogy. I imagine that climbing routes might be something like ski runs. You can have a resort with multiple mountains. Each mountain can have multiple runs. The runs don't necessarily start at the same place, nor end at the same place. The runs can have different levels of challenge. So you have: 

And a similar statement elsewhere in the function. I would suggest writing a helper function that does this work for you. Something like this: 

We'll call that a "block". Adding a "block" adds all the numbers up to the next multiple of R. Each multiple of 11 brings with it 11/5 = 2+1/5 multiples of 5, because 11/5 == 2+1/5. But when the fractions finally add up to a whole number, it won't count! That's when the multiple of 11 will also be a multiple of 5 (55, 110, 165, etc.) and the numbers aren't added to the sequence more than once. So really, adding a multiple of 11 to the sequence adds 1 (the multiple of 11) plus floor(11/5) == 2 multiples of 5 to the sequence. In general, adding a "block" -- that is, adding one multiple of R -- to the sequence adds 1 + floor(R/L) numbers to the sequence. We'll call that the "block size" or . 

This shows me there is some confusion on your part. You are allowed to assume that a logical or () fails because it's false - there's no need to repeat the test in a false mode: 

over and over again. The loaded image should be cached - just load it into a variable outside the loop, instead of reading it from disk each time. You have this code: 

I started reading at . At first, I thought you had posted non-working code, because your code couldn't possibly work. Then I got up to the definition of and realized that yes, it could work. But it violates so many principles that I don't know what the "real" type of a is. Let me suggest a slightly different model: 

If you want to provide a collection class that has a similar behavior to existing collection classes, then use the same method names for the same operations! Likewise, provide similar functionality! I don't see a definition of but you do have ? What's that? Where's ? Where's ? Take a look at the Python docs for Common Sequence Operations, for both mutable and immutable sequences. See how many operations you can implement, using the dundermethods, to make your class a drop-in substitute for a list, or an iterable, or whatever. 

Similarly, you have a "blocking" list, where some substrings must not be in the website field. This is a similar function to the last, except you want to yield the row when the condition fails: 

This is a lot clearer, IMO. It shows what you are trying to do, and the conditions under which you will do it. It pushes every other consideration down into lower level functions. Of course, you have to actually write those functions. But, again, focus on doing just the right amount at the right level, and it should be straightforward. 

Because that is the kind of "comment" that you know is true! In summary, please put your comments above the affected line. It provides a warning that I might have to think hard about what's coming. And it hints where I should focus my attention. Also, don't apologize in a comment. If you find yourself explaining something, the first thing you should try to do is FIX IT. If there are funny values, try to delete them. If you can't delete them, or don't want to, then try to make them as self-explanatory as possible, so a comment isn't needed. Some Comments on Programming Style Knowing your limits You handle the special case of zero. But you don't handle any other limits. For example, what if is less than zero? Or, what if is greater than or equal to 1 nonillion? I'd suggest that you include nonillions in your vocabulary, just for completeness (every other array goes up to 9x). Beyond that, you should have a plan: will you raise an exception, or just print "123,456 nonillion", or return a special string: "the rent is too damn high!"? You need to handle it - pick a mechanism. Code shape Here's a picture of your code shape. I deleted blank lines and comments, and removed the constant lists. I then replaced every character with '#': 

For a coding interview, that's too much code. You're asserted that your input is in the range [1,3999], so you should be able to do this in a single function, with not much in the way of looping. Instead of being overly general, try coding specific conversions for the various digits, using a lookup for the actual digit values. That is: if thousands, append thousands; if hundreds, append hundreds; etc. 

With that text structure in mind, it seems obvious that each part will have an boolean method, and some mechanism for selecting the tag of the next part. Something like which can return a tag. The tag (string or integer) can be used by the to select the next part. Thus, I can pass in a simple class that has a method that returns some appropriate value (single letter of the alphabet? integer?). Creating a new and calling will cause something like: 

I chose to use a Writable and an Extended Generator to help with automated testing. You should be able to supply a StringIO and a generator that ignores the options in favor of just iterating over a list of choices, and compare the generated text against what you predict for your test case. If there is an epilog, you'll want to handle it specially. In particular, your generator should deal with an options parameter that is . Then you could print the epilog, give the user no options, probably get back from the generator, select as your branch, and mark the narrative as ended. Alternatively, you could create with some sort of text, print that outside the loop, and then loop in a different order: 

there is a chance that could be computed as zero. In that case, your condition would fail, since it checks for dp. You should instead explicitly test for , and be sure your math will survive if is input: 

I suggest that you convert to a series of (time, price) tuples, so that there is only one "source of truth" when it comes to what time should associate with a price. Next, treat and as series, not lists: assume they are potentially infinite, and iterate them instead of trying to index them: 

In this way, your parser can truly be a parser. Honestly, I don't think you need a , whatever that is. You might need a , but I don't really think so - I can't see what you're doing that would presently justify it. Instead, think about writing a "cnc report -> csv" conversion utility to just reformat the data into a more useable format. Managers love spreadsheets. If you actually want to post-process the parsed data, to generate the busy/idle information, for example, you can do it in the loop above with just a dictionary. That code will contain lots of references to the row data, and the various fields - it will look like a program about analyzing the row data, not about . It's a class library On the other hand, maybe you're trying to write a library of classes for managing CNC report files, and the program is just a proof-of-concept. In that case, your classes are not quite right. First, the class should be internal to the The only useful object you have is a . Everything else is an implementation detail. "How do you get the file information into the report object?" That's an implementation detail! "How do you manage multiple report files in a single directory?" That's an implementation detail! Of course, in Java "implementation detail" means Python is a "consenting adult language" so it doesn't mind sharing private stuff with you, but you still shouldn't be showing off your private stuff (unless your name is Harvey Weinstein) (and even then, you shouldn't). So your three modules should be one module. And that one module can define the class, plus whatever internals it wants. And it can either contain them, or import them. But that shouldn't matter to the user, because the user should just or whatever and have everything just work. Which leads me to : why on earth would I write code like: