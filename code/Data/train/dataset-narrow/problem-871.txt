You show nothing that indicates you can handle session ID forwarding for cases where session ID regeneration has taken place. When request comes in asynchronously after a session id regeneration event, can you gracefully forward it? 

Build your data structure the way you want it to begin with so you can get rid of unnecessary code like this. 

Why is your random string function defined in this script instead of in the include? It is good to get in the habit of separating your PHP code into files based on whether they represent application logic (i.e. classes, functions, interfaces, etc.) or whether they actually cause changes in the state of the application or render output. These leads to better code organization. 

I think that working with a natural language style query builder has sent your implementation a little astray. I don't understand why you need to select a count of rows from a sub-queried result set when you could just count the rows returned from the query itself, without even pulling the result set down into the application. Outside of that, I find your code hard to read. 

I am not sure why you are using multibyte function in your random string generation function when you are not working with a multibyte "keyspace". 

Finally, I don't like naming convention as you are doing a simple set operation here. I think would be more standard nomenclature for what is happening here. 

In POST path, I think you should validate "type" value early in code path like you have done with other validations. If an invalid value is set, you should use 400 error, not 500 as is currently given. 

I like the fact that you seem to want to provide good comments to your code. I would suggest you take it to the next next and actually use proper PHPDoc comments. Working with your class in an appropriate IDE will become even easier with proper doc blocks in place. 

Your code is very fragile in that you are doing no validation of inputs passed to your public methods. You should validate that you are getting the proper objects, strings, floats, integers, etc. passed to your parameters (both expected type and expected range of value) and throw exceptions when these conditions aren't met. Your mantra should be "Fail early. Fail loudly." This meaning that you want to interrupt code operation as soon as you are getting unexpected input such that you are not later operating against objects that are not set up in a proper state. Not doing this will make your code much harder to maintain and debug. 

Or, if you build the right logic into your validation class, you could ideally get to something like 

First, let's start with your HTML. As there are some problems in the way you are forming it that is making your javascript more complex than it has to be. I would like for you to consider an definition that looks like this: 

You have basically no validation of input parameters (outside of their mere existence). This combined with your happy path only code, means your whole script is very fragile to having unexpected behaviors and security vulnerabilities. 

This makes no sense. is not an array suitable for use with . Why would you use (an output function) here at all? If you want to use the second form of the cart data shown above, this is how you would extract pid values from it: 

Why is this a constant on this class? If you want to make this class more flexible, perhaps it is passed on constructor or set via setter. If this is very narrow use class, perhaps at least consider moving this to app configuration. 

Your public methods are very fragile, as you are not really validating the parameters that are passed (either through type-hinting or in-method validation). There are many cases where one can get to actually making the (relatively expensive) database call even when bad data is passed. Your code should fail early and fail loudly when dependencies or expectations around data types/values are not met. This again is part of the problem in working with wrappers. You now have to introduce validation logic in your public methods vs. just having all that logic for working with the database in one place. Take my code example above. Here you can clearly see that there is no way for a non-empty string to be used for the query, but when you introduce this extra layer of a wrapper, from the viewpoint of the wrapper, you don't know where all these methods will be called, so in order to not have a fragile class or method, you need to add validation. You have added complexity to your application without adding any value. 

? I will skip similar comments about other method names throughout classes, I generally think there is room for improvement to more meaningful/specific names. I would say that perhaps the most problematic name is Does this delete the whole file? (no it does not, but you wouldn't know without reading into the method signature or documentation) 

Note I determine only once with this approach vs. on every iteration. You may consider returning index position of found item (or found item itself) here to make this more useful, because presumably you are checking for this key because you want to access it somehow. The caller would need to be aware of potential falsey behavior of vs. or similar. You also would probably want to rename the function at this point to something more meaningful like or Of course, this is essentially what and do. You would just need to implement your key check check in callback. That might look something like this: 

You should move away from hard-coding javascript behaviors into your HTML. You instead of specifying an property on your body, include a javascript file like: 

Here you make all your dependencies clear up front, not hidden away in other class files. You also set up your single DB connection and pass it to the User_Login upon instantiation. You are injecting your dependencies to the objects that need them, allowing you to remove all logic from classes on how to set up their dependencies. 

Does it truly makes sense to support this extension on an arbitrary jQuery collection? Right now, as this code is written, if I had HTML like this: 

Get out of the habit of using loose comparisons, especially on a decision as critical as whether to perform an update or not. One could pass any of the following values to trigger this code path: 

Consider using exact comparisons as default behavior, only using loose comparisons where there truly is a use case for it. 

as there is only one index value where should ever be encountered. Alternately, I would consider a regex like to be able to validate the input string and capture the components of the string in one pass. 

There is a distinct difference between sanitization and validation. You seem to be using the concepts interchangeably. I would say this class is a validation class not a sanitization class.