HDMI cable will be the way to go, that way you'll get the audio through it as well. using a DVI would mean you'd have to get S-Video/VGA converters. 

You would probably be best posting such things on either the raspberry pi official forum, the recommended peripherals subforum here : $URL$ or making an entry in the raspberry pi hardware wiki for touchscreens here : $URL$ 

I would suggest, firstly, looking at the the SD card compatibility list SD Card compatibility list, especially as you mention that you've got it to boot only 2 or 3 times. I've had problems with a kingston 8gb class 10 card where mine would only boot to raspbian every so often. a new samsung card fixed that for me. Another issue could be power? I'm not sure exactly on your configuration, you don't mention whether you have a powered usb hub for your usb devices?, it could be that the Pi is not getting enough power on it's own to fire up all connected peripherals and the HDMI. I would try disconnecting all devices and seeing if it works then (if you haven't already) I use retropie without any issues, but all my external devices (controller, keyboard, mouse, wifi) are powered from a externally powered usb hub. 

You possibly want to look for something like UltraSlim, where you initially boot into the emulators, and then go to Raspbian, etc from within there. 

Yes. As @ppumkin points out though, javascript is a scripting laguage for the browser, and as such, garbage collection and memory usage will not be as efficient as programming in a language such as python. c++, et al. It can be more difficult to trace memory leaks in javascript. 

I'm using a Pi to drive a Fadecandy board to light up a varying-length string of RGB LEDs in different, pulsating colors. I've been successful, however one snag I ran into along the way was programmatically defining the LED colors in RGB. I copied the Fadecandy example program measuringstick.py (which makes every 10th LED green and the rest white) and tweaked it to create a rainbow of colors instead. Wrote the program into /etc/rc.local, rebooted the Pi, and noticed that my colors were completely off! After a half hour of messing around, I realized that defining the colors in GRB instead of RGB gave the correct result. In other words, if I want an LED to be bright red I have to define its color as (0,255,0) instead of (255,0,0). Is this a normal thing with LED pixels? All of the example code was written in RGB, so I assume that GRB is not normal. Can someone explain to me what's going on? I'm more curious than anything at this point. (Sorry I don't have any code to show you. My collaborator has the lights/Pi with him today) 

and typed in a password (although I'm setting , so that's probably redundant, but why not?). Then I made the directory I want to share: 

This being a model A, I can't plug in the USB keyboard and the USB wifi dongle at the same time. My strategy is to , remove the keyboard USB, and replace it with the wifi dongle. When the RPi boots up, I can see on the screen that it recognizes the wifi dongle and assigns the RPi the static IP I chose. I then go to my Windows laptop, open up , and the RPi static IP address. Success! However, when I open up PUTTY and try to SSH into the RPi at that IP address on Port 22, I get the dreaded "Connection refused" error. Things I've tried to get rid of "Connection refused": 

Not necessarily apropos to advocate for this, but there are a lot of Kodi/XBMC addons available at TV Addons. Your mileage may vary, but I've heard positive things about the following addons, available through the process of setting up your Kodi system by installing the addons from there: 

Something to be aware of when it comes to using tools like is that the tool will overwrite many of the configuration files you modified yourself when you first setup the Pi with SSH. The easiest answer to this is to reflash your SD card and start over. You're not so far in (or are you?) that this isn't a viable option. But if you're in too far and reflashing your SD card seems too draconian, you should be able to enter single-user mode and make whatever changes you need to. However, you will need a display, a keyboard and another computer with an SD card reader (which you ostensibly used when you flashed the SD originally). Follow these instructions and you should be able to reverse any changes and get your Pi back. 

Based on looking at the schematics in the Ebay listing and a perusal of the images of the board itself, you should be able to power this from the 3.3V rail on the Pi without incident. Both devices list 3.3V operation or have operating voltage ranges that include 3.3V. Schematic: Board view: Datasheet for the DS3231: $URL$ Datasheet for the AT24C32: $URL$ Some caveats, in general: 

I'm a bit lost at this point. It'd really make this project easier if I could type on the RPi and connect to the internet at the same time :P Any other ideas? 

So yeah, this is a big question. What's the best hardware for this job? How do I tell the PC where to look? How do I tell the Pi where to look? How do I make this automatic and somewhat user-friendly/universal? 

I'm just using this individually for a fun project so I don't really mind setting permissions to 777. With my settings like so in : 

Start Edit I'm connecting the Pi directly to my PC with an ethernet cable. End Edit I'm trying to share a folder that's on a Raspberry Pi (running Jessie Lite) with my laptop (running Windows 7) so I can use Node.js to write a simple text file to it. I set up samba on the Pi in the following way: 

I reboot the Pi, login, then connect with an ethernet cord to my Windows 7 machine. I can see the Pi () under Networks > Computers. I also see it pop up when I type into command prompt. However, after a few seconds I notice that, in the "Network and Connections" dialog, the "Local Area Connection" adapter drops the connection. I have to disable and re-enable "Local Area Connection" again. After being re-enabled, it says "Identifying..." and I again see the Pi on the "Networks" tab under "Computers", next to my PC. But then "Local Area Connection" switches to "Unidentified network" and the Pi disappears. Process repeats. Because of all this I can't access the Pi to write files to it. For example, in Node.js, I try: 

I keep thinking that using Minibian might be the answer to this. However, I am not clear if they include any of those non-free packages or not. I'm also a bit busy right now to check. Either way, even if they did include them, you'd probably have fewer things to remove if you started with Minibian. 

My understanding of reading PWM signals for non-realtime systems has been to treat them as analog voltages (that's right, run it through an RC circuit and then read the voltage using an analog-digital converter/ADC). Apropos: $URL$ More engineering work, sure, but cheaper than bolting on an Arduino to do the realtime chore of reading PWM pulses with a pin change interrupt: $URL$ 

The answer, as usual, is "it depends" Usually, if you're driving just one servo, you can of course make it work directly from the hardware PWM GPIO pin (there's only one that, unless you go the DMA route, will avoid the jitter that happens using one of the other GPIO pins). This Adafruit tutorial shows you how to use the one pin that won't jitter. if you need to drive more than one servo, then yes, you're looking at some kind of hat (daughterboard) that will run the servos off of a digital signal. Again, Adafruit has a tutorial for a daughterboard they sell that can drive 16 servos. 

These are listed in the order that many would consider to be the most useful. By far the most chaotic and difficult-to-use would be Navi-X, and the easiest and most "download-friendly" would be Genesis. Again, as in all things, YMMV and if you do choose to go down the road of installing these addons, don't tell anyone that I sent you, because I am specifically telling you not to. Now, whether you ignore that advice is on you.