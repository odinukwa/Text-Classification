If you aren't just trying to figure out how to break into someone else's network, you should be able to work it out if you gather the following information: You should at least know which devices have a physical connection to the internet, by whatever means, and hopefully some controlled points of entry (1 or more firewalls). Looking at the configuration on those may help. You should be able to find out the public IP addresses assigned to your network - that is somewhere else to check. Reverse DNS lookups of these, both public and internal, should give some clues. Are you using NAT on your network? If so, then somewhere you must be mapping traffic from the internet through NAT to the servers. Check the config for that. If you are just trying to break into a network, then you will probably find more help in other fora. 

We have a CO2 extinguisher in our comms room. I guess I'd use that if I was in the room when the fire started, and noticed it. Couple of discharges at the base of the fire, then get out even if it appeared to be out, then raise the alarm. The only time we had a fire in our comms room, it was the AC unit that started it, and luckily it didn't spread. No one stayed around to tackle it - the smoke detectors caught it before anyone did, and the building was evacuated. Having the previous nights backup tapes in a pelican case next to his desk, ready for collection by our offsite storage suppler, our network manager carried those out with him. The fire brigade came, and it was valuable to let them know the fire was in the server room, and give them an access card. They didn't need to take an axe to the door or destroy anything - they went in with breathing apparatus, located the fire and dealt with it. So one thing worth doing is being around to talk to the fire brigade when they arrive, rather than disappearing down to the pub with everyone else... It would have been a major disaster for our organisation if the fire brigade had run in and sprayed everything with water. Yes, we have an offsite recovery where we believe we can recover our systems within 48 hours. But we would really rather avoid having to use it. 

We have large number of branch offices connected via VPN, but without any kind of server infrastructure. The client machines in each office get their network configuration from an ASA 5505, which is also used for the VPN connection. The Windows XP client machines are configured to use one of our corporate DNS servers as the primary, with the DNS server of the ISP as the secondary. The idea is that if the VPN connection fails for any reason, staff in the office will still be able to access the internet, and access our webmail and home access portal. In the majority of cases this works fine. However, for offices based in South America we are seeing DNS resolution on the client machines regularly being done against the ISP DNS server - this results in our corporate resources being effectively unavailable to staff in the offices. The client machines are able to ping the corporate DNS server ok. When doing an nslookup of a corporate hostname, I get a reply. I'm thinking one of the following (or a combination) is happening: 

With a little assistance from Cisco I did some deeper analysis of what was happening, and figured out the things that I needed to be checking for. The useful things that Cisco told me: 

I guess you are using the hostname to access your server, and in DNS this points at the Binatone's IP address. When the Binatone gets requests from the inside, it doesn't do the port forwarding. You either need to access your server via an alternative name, IP address, or make the DNS name resolve to the internal IP address. The hosts file change suggested by @slimsuperhero is the simplest way if you are the only person working on the web server. If there are more people then you probably want to do something with internal DNS resolution. 

If you your user with and without the domain name you will find they both have the same uid. This means that both versions of the username map to the same user account in Linux. I think the simpler problem to solve would be why you need to have exactly the same username for a locally running process. Or remove the domain account from the Linux host. I don't think you can have both because even if you manage to set up both accounts, Linux won't be able to distinguish them via their username when you come to try and use one or the other. 

There is a lot of documentation available for jail on the net. What you specifically need will depend on your specific linux distro and what you want to achieve exactly. A good starting point might be $URL$ - first Google result for "jail linux". 

I don't think there is any difference in the ping part of it. When you run pathping, it does a traceroute, then pings each of the devices in the route, and reports the results of ping. You could do this manually, and I guess at some point someone who had to do that got bored and wrote pathping to do it in a single step. 

You could look at the TCPKeepAlive option in sshd_config on the server. It looks like if this is enabled you will see more disconnections (which seems a bit counter intuitive until you read the doc) as any route changes between you and the server will result in a disconnection. That is unlikely to happen on the LAN, but fairly likely across the internet. 

In my experience, port connection events show up in the console/ssh view without special configuration, although not necessarily with the level of detail you might be thinking. and both with the option give information specific to ports, but appear to be specific to PoE and VLAN events, which might not give you what you need. ASDM has some graphing views, but these are specific to VLANs rather than specific ports - still, there might be something there that gives you a clue. ASDM also gives you live logging with filtering, which might help, although the filters are really designed for firewall activity. If you know what syslog ids might be of interest you can filter on those. 

A pair of Cisco ASA 5505's will do this in a number of different ways. The simplest would be to have an ASA plugged into each of your ISP connections, designate one as primary, then configure the secondary to kick in if the primary link goes down. This also gives you hardware redundancy which you won't get with a single server (which is pretty much all your Dual-WAN routers were). Chapter 10 of the Cisco Press Cisco ASA book (ISBN: 978-1-58705-819-6) describes the config pretty well, and I am sure you can find a Cisco partner who will take you through it at reasonable cost. You might also be able to do something with HSRP/VRRP on two routers connected via a switch, and a good network engineer. Better than me, as I can't tell you how to do it :-) 

Check out from repo into local working folder and commit back to repo from there. Check out/update from the repo into staging-site to show client the changes you have made and test. Once it is all working and agreed, check out/update into live-site. This gets a bit messy if multiple people try to do updates. Best if one person takes this role. Read Red-Bean book as cited by onik. If you are doing any editing on Windows systems Tortoise-SVN will be invaluable. With Tortoise-SVN you can also connect via ssh+svn: pseudo-protocol. Works very well if you are using signature based ssh logins on your server. 

The tools you need are mturoute on windows or tracepath on *nix. Either tool enables you to find the Path MTU between two hosts, and see where the bottleneck is. However, if the problem is that a given hop has ICMP blocked, breaking Path MTU Discovery you'll need to dive a bit deeper to find out where the problem is. Then of course you have to convince the responsible party to fix their network equipment config. 

There are a number of options out there to host your own services similar to what Google offers, either on a private cloud, or more traditionally. Zimbra is one example, and there are plenty of others. 

If you plan to run more VMs than the number of LUNs per host shown in the Configuration Maximums doc for your version of VMware you wouldn't want to have one LUN per VM. For vSphere 4.1 that is 256. For ESX 3.5 it is only 62 (as I learnt yesterday when I couldn't see some new LUNs I was trying to attach). 

If you are trying to keep your management traffic separate from other traffic, you will not achieve this simply by having your management leaving a different port on your server. You need to keep the traffic separate after it leaves the server too - which you will not achieve by having it travel on the same subnet. So to separate your traffic you really need to split your network up into multiple subnets, using separate switching, or VLANs, and use routing to route traffic between the different subnets. Then on your server you have a separate management interface that is only connected to the management subnet. Ideally you do your management tasks from hosts connected only to this subnet too. That will enable you to really get what you want, and will be simpler to configure and understand - although not necessarily cheaper to setup. I'm assuming you have a clear business case for separating your management traffic. If all you want to do is limit management tasks on your server to specific hosts on your network you would achieve this more simply by setting up iptables to only allow management type traffic (e.g. identified by port such as ssh) from those specific hosts IP addresses.