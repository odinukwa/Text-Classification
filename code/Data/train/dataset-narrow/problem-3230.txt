Not sure exactly what your issue is, but I thought I would so you my settings which appear to work fine (talks to the internet happily with Ethernet, WiFi, or even both attached). The settings were taken when only the WiFi was attached. ifconfig is basically the same 

it does a couple of extra bits, but I think you may also need the conditional lines , , and in the same places (the build gets double-invoked for kernel modules...) If you are using the latest kernel ( followed by ) then you should be able to use the following to pull the correct headers and symbol file from the version control system used to generate the builds in the first place: 

Based on the Python code I believe they are sending slightly different things on the SPI bus. On line 74, wr_buf should only be 3 bytes long, assuming adcnum is 0: 

The question seems to be what are you trying to achieve, for example if you wanted the raw reading for electrode 0, you can read if from the byte array as: 

As you suspect the 10Ks are probably the issue, SPI connections are not expected to have either pull-ups or pull-downs on them. You would probably need to use a different method of logic level conversion. Since the SPI has uni-directional lines you can probably get away with the clock and MOSI lines connected directly to the 5v device, and the MISO line connected using a simple voltage divider into the Raspberry Pi. If you do connect 3.3v outputs directly to a 5v device just ensure the 5v device does not accidentally drive those pins to 5v otherwise it may damage the GPIO. 

Excuse the length, it is a long bit of setup so that the main bit of code for doing masked writes is short, also it allows for out-of-alignment pages, which is not really an issue here (I had this problem previously with a different embedded register map). Note that you will need to run the binary as root or the mapping will fail as permission denied to /dev/mem 

Which will turn GPIO 17 on when there is a problem. off when all is ok. If you need to install any of these modules do so from the command line (terminal) using: 

I have used this for building the LedBorg kernel drivers when they release new versions, I have made a script out of the commands that you can download and run using 

Are you able to ping the Raspberry Pi from the windows machine, open a command prompt and enter (but with the IP address you are using for SSH), if you get replies the connection is good, if not there is a networking problem preventing SSH working Did you set-up SSH using raspi-config, or did you set it up yourself, if you set it up yourself can you tell us how (there may be a set-up issue with SSH) Can you log in to SSH from the Raspberry Pi itself, use (actually use 127.0.0.1), if this does not work then it is likely that SSH is not set-up correctly, the error may give a clue to the problem. Can you now try to log in to SSH from the Raspberry Pi itself, but this time use the actual address and port (but with the IP address you are using for SSH), if this does not work it may point to a problem with the firewall on Linux, or that SSH is set-up to only use certain connections or a different port number If all of the above work fine then it is probably something like a firewall problem with the router, it may help to try some different port numbers 

Have you tried adding the mount for the USB drive into so it gets mounted at boot? Wikipedia has some example mount lines for different devices: $URL$ 

You should be able to change fps to get a suitable frame rate, but both fps numbers should be the same to make the video output match the recording. 

Are you looking at the correct I2C bus, between rev 1 and rev 2 the GPIO header was changed from using I2C 0 to I2C 1, see eLinux - RPi Low-level peripherals for details of the various pin changes. 

The RPi.GPIO library is available in Raspbian for driving GPIO, building on using the requests library you could do something like this: 

The problem is that waits for the command to complete. An alternative would be to use instead, for example 

Should give you a tree of only directories but showing each with the corresponding size of it's contents in a human readable number (Most folders will list 4.0K since that is the size of an 'empty' folder). Adding -L number will allow you to set the maximum depth to drill down to as well 

If you select Analyzer > Scan remote folder you should be able to remotely build a graphical tree map of the Raspberry Pi's file system, I have tested this using the SSH option and it does seem to work, but also seems a bit slow to generate the tree (I assume it uses alot of SSH commands to do it's work). Alternatively 

The first command makes the owner root, the second command tells it to load as the owner of the file. If we now run the command normally it should run as the root user regardless of who started it or where (no required). 

Adding a in ~/.bashrc should work fine, on a standard Raspbian install the user has sudoer permissions already. Alternatively if it is just a single program you wish to run, you can tell it to always run as root. You do this by setting the owner to be root, then telling the file it is always loaded as if the owner of the file opened it. Lets say I have a script called for example: 

In general this is how Linux like systems behave, each login to a VNC, SSH, RDP and actual terminal are distinct from each other, like many users logged in remotely to the same server. I have come across x11vnc on my travels, which is meant to allow you to connect to a pre-existing X11 session (such as the real screen), but I have not tried it myself. You can see the page here, but it may be a bit fidly to set-up 

Could you be more specific on the kernel version (use , some of the 3.6.11+ kernels are not compatible with each other, for example #538 and onwards do not match earlier revisions). The code you have there seems fine, but I think the build instruction for needs to have after it, e.g. . For reference the makefile I use for doing this is as follows: 

should scan both buses separately, if your devices show up after one of the calls then that is the bus they are on. Failing that if you have access to an oscilloscope you can monitor the pins and run again. You are looking for the voltage level to pulse a digital sequence between high (3.3v) and low (0v) on both pins. 

It might be easier to use cron to schedule the task instead. Open the cron task list in the default text editor: 

Personally I would start with a very simple device, such as one or more LEDs connected directly to GPIO pins. You could either buy a device ready to plug in, or wire your own one. The reason I would suggest this is that debugging drivers is generally much more difficult then a normal program, therefore a simple challenge to get started is useful, also you can then use that code as a method of debug for more complex devices (status out to a GPIO pin to attach to an oscilloscope) where timing is important. If it is of interest there is a kernel driver for LedBorg available here, the source should be a reasonably simple example for driving GPIO pins at a regular interval.