This is also mainly a server configuration thing, but you can try to enforce HTTPS via PHP code. Vulnerabilities Your code is vulnerable to SQL injection via the variable which is user supplied () and then put into the query. Basically what you have is this: 

I have written a class which can time functions, and I'd like to have it reviewed. I'm interested in everything (better naming and commenting, accuracy of measurement, usability, structure, use of lambda, etc.). 

Returning Early / Guard Clauses Returning early is very easy to do and can severely improve your code. Looking at , it is nearly impossible to say which else closes which if on first glance. In this case it doesn't matter that much as all else do the same thing, but it is still not nice to read. If you just invert the if and return, the code is a lot nicer: 

Structure Currently, there is no reason to have or , they are just delegating to the public field. A user of your class may just as well use that, and may be confused about the difference. There is also no need for to be public, as there is no need to ever reopen the connection. If you think you do need a wrapper around mysqli, it should: 1) actually add new functionality or make the existing functionality considerably easier to use 2) be an extensive wrapper, so that there is no need to make public so that it can be accessed directly. Also, don't die in a class, it makes it difficult to (re-)use. What if you want to fall back on something else? Or show a proper error message? Throw an exception instead. Also, it would be a good idea to pass the credentials to the class, so it is more flexible (you may eg want to load them from a config file or at least a file only containing the credentials, so you can exclude them from versioning, etc). Style Your indentation is off, and you have quite a bit of unnecessary vertical whitespace. Variable names should all follow a common naming scheme, for example camelCase. I see no apparent reason why is all uppercase. Class names should start with an upper-case character. Comments Your comments just repeat what the code already told me ( closes, prepares, and so on). Comments like these will lead me to believe that all your comments will not be useful to me, which leads to me missing comments that actually are important. Result If you follow all my advise, your code may look like this: 

The cleaning functions you use I think it would be a good idea to look at the functions you do use in-depth, to get a real understanding what each of them does. Ideally, you take a look at the PHP documentation for this, but here is a short overview: 

More than One -> List Whenever you have more than one of something, it is generally a good idea to put it in a list, and then handle the general case of , instead of handling cases , , ... So for your case, it might look something like this: 

As with your previous question, there is a lot wrong here. I'll focus on formatting issues, as they are easiest to fix and thus provide the most cost/benefit right now. Most of these are relatively easy to apply to your code, and you really should do them. 

You already got some great advise about your class, so I'll focus on your class. First of all naming: 

Which still looks quite readable, and might be a bit clearer than what you have (because it's more obvious which is the input to be tested and which is the expected result). Either way, I would add comments on the top of each array entry, so it's immediately clear what it contains: 

@mseancole answer covers quite a lot, but one security issue wasn't mentioned, so I'll mention it here: Your code is vulnerable to XSS, eg via 

What it basically does is combine the two tables (based on the clause). For example, if the tables looked like this: 

It's really hard to see where what ends. You can fix this very easily with any IDE. Duplicate s It is odd that you ask in your main method , and then call , where you again ask , etc. Just ask once, and create separate methods for , etc. Misc 

I don't think that you need and . The names don't really make clear what the distinction is, and I can't imagine that you'd ever want to load a library but not know if it failed or not. Also, instead of printing, I would throw an exception. That way, the calling code can handle the case (what if it's an irrelevant library? Now the user is still annoyed with a meaningless message; but what if it's a highly relevant library? Is a small message really enough?). I would also get rid of the distinction between and . If you follow conventions, they should be the same anyways. If they are not, it might get confusing, especially because it's not just this call, but also how they are stored in , I would also rename to . is not really needed (we can assume that it will only try), and makes it more fitting with . and are also not all that clear; if I didn't read your code, I'd have no idea what is, or what and what a is. and would be clearer (you can also skip the part, as it's clear from context. Finally, I would always check for directory traversal when including with a variable. It shouldn't really be necessary in this situation, but it's just good practice, and doesn't cost that much. 

Remove Duplication and further simplifications Currently, your visibility check and your one long echo line are duplicates. You can extract these to functions: 

Compile time really shouldn't be an issue. Right now, I would focus on readability, and then maybe runtime performance. Variable names Normally, I really dislike short variable names. In this case it's ok for , , and , because they are part of the question. But if you do use the same variable names as in the question, you should probably do it consistently: should be . For the other variable names, you have no excuses: isn't a good name, and vs is also somewhat confusing. The worst is probably , as you already have . Perform Action on Number Instead of you can write , instead of you could write , and instead of it could be . Your way isn't necessarily bad, but the alternatives are more common and easier to read. Declare variables where they are used You are declaring a lot earlier than you need , which makes your code harder to read. Same for . For loop with two indices This for loop: is extremely hard to understand. Luckily, you can just remove . The stop condition is already covered by . Enhanced for loops If you use you can get rid of the variable. Functions and Tests really should only be responsible for starting your program, nothing else. Extract the code to a separate function, that way, you can also easily test it. To use unit tests, it would also be useful if you returned a result from a function instead of printing it directly. You should also extract other functionality to its own function. For example, everything inside the while loop could go in its own function. Different Approach When getting a question like this, I wouldn't put everything in one big method. If you read the question, it becomes obvious that you need something to create the product of digits. So create a method. You also need something to check if a number is a perfect square, so create that method as well (). Lastly, create a method to check if a number contains zero (). Then, just create the main method and combine everything: 

Documentation You don't have any. I would think about adding javaDoc comments to at least some methods. Eg what does do? And how is it different from ? You probably know now, but will you remember in a couple of months? Naming 

As long as you have access to it, it doesn't matter that it is internal, it can still be exploited. The IP binding also does not prevent CSRF exploitation (as the request is send by you, not by the attacker). But seeing that the cookie hash isn't actually a cookie (or a hash), it seems to serve as a CSRF token (if it needs to be send for each request, which I'm not quite sure if it is). Structure I like that you have designated functions for login and logout, it makes the code nicer to read. But I wouldn't stop there. At the very least I would split into and . You might also want to think about using some generic function/class to send json, to avoid the duplication of / / . dbHash Your method isn't very well named: the name doesn't really tell me what it is doing (also, it isn't a hash; might be more fitting). It is also not all too well designed: I have to pass a string like to it to tell it what to do, which means I cannot use it without reading the documentation or looking at the implementation. Instead, it would be better to have some HashDAO class, which then has methods like , , etc. It is also very confusing that I don't have to pass additional data when ADDing. doesn't tell me anything. would tell me exactly what is happening. Misc