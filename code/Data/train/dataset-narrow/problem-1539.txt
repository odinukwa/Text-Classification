How can I run an rsync backup/replication script in a user other than root while preserving permissions? This is a multi-user fileserver, where each user has a *nix account for permissions. Running with the root user poses obvious security risk - especially when you are using passwordless ssh keys to do it automatically. But running in a user other than root (like a backup user with full group permissions to the data directories), has problems setting permissions because only the owner or root can change permissions. In a perfect world, the production server user would only have read-only access. Thanks! 

I have servers that I wish to control access to. I have a firewall running pfSense between them and the public internet, but all machines have public IPs. A remote client may or may not be on the same subnet as the servers and firewall. I wish to, based on authentication, allow the remote client full access to the servers behind the firewall. I believe the best way to do this is through VPN. Note that normally when people refer to VPN connecting the same subnet, they refer to two machines having the same private IP ranges. That is very different than what I am describing. I simply want to tunnel traffic for a subnet through VPN to bypass the firewall. What is the best way to go about this? If you suggest OpenVPN, tun or tap? Thank you! 

I'm designing a file server based around ZFS and I'm considering using USB flash drives in RAID 1 as boot devices. It seems that few people do this, and I'm wondering why. From what I see, using USB flash drives have some benefits: 

The reason Phusion Passenger would not compile was due to lack of memory on the VPS. I ended up creating a VM on my local machine, and installing all the same components, then compiling passenger on the VM, finally transferring the passenger gem to the VPS. 

So I have been trying to setup BIND / named as a primary / secondary name server for a domain name I purchased a while back because I switched my hosting plan from shared to VPS recently. I think I have everything setup properly (for the most part) but when I go to ping the domain name I have registered, the command prompt just says unknown host. I made sure I registered the name servers with the domain name registrar, and I can ping the name servers. So I know that part is working but for whatever reason I can not ping my domain name. The domain name I am referring to is chrisrjones.com The named.conf looks like the following, $URL$ The fwd.chrisrjones.com file looks like the following, $URL$ and the reverse, pastebin.com/Hk9pyEHu 

I created rails application, and everything appears to be working fine, but I can't seem to figure out how to run the application in mode. I specified in the (Apache configuration file) for the site, I then restarted Apache, and restarted the rails app by running the following command in the rails root directory, I'm running Apache 2.x, mod_rails 4.0.26, and the rails app is 3.2.15 

Some output from running the above rsync command, opening connection using: ssh -p 4242 -v -l $USER example.com rsync --server -vvvvlogDtpre.iLsfxC . /home/$USER/www/ (12 args) msg checking charset: UTF-8 OpenSSH_7.4p1, LibreSSL 2.5.0 debug1: Reading configuration data /Users/$USER/.ssh/config debug1: Reading configuration data /etc/ssh/ssh_config debug1: Connecting to example.com [1.2.3.4] port 4242. debug1: Connection established. debug1: Local version string SSH-2.0-OpenSSH_7.4 debug1: Remote protocol version 2.0, remote software version OpenSSH_6.7p1 Debian-5+deb8u4 debug1: match: OpenSSH_6.7p1 Debian-5+deb8u4 pat OpenSSH* compat 0x04000000 debug1: Authenticating to example.com:4242 as '$USER' debug1: SSH2_MSG_KEXINIT sent debug1: SSH2_MSG_KEXINIT received debug1: kex: algorithm: curve25519-sha256@libssh.org debug1: kex: host key algorithm: ecdsa-sha2-nistp256 debug1: kex: server->client cipher: chacha20-poly1305@openssh.com MAC: compression: none debug1: kex: client->server cipher: chacha20-poly1305@openssh.com MAC: compression: none debug1: expecting SSH2_MSG_KEX_ECDH_REPLY debug1: Server host key: ecdsa-sha2-nistp256 SHA256:REMOVED_KEY debug1: Host '[example.com]:4242' is known and matches the ECDSA host key. debug1: Found key in /Users/$USER/.ssh/known_hosts:15 debug1: rekey after 134217728 blocks debug1: SSH2_MSG_NEWKEYS sent debug1: expecting SSH2_MSG_NEWKEYS debug1: SSH2_MSG_NEWKEYS received debug1: rekey after 134217728 blocks debug1: SSH2_MSG_SERVICE_ACCEPT received debug1: Authentications that can continue: publickey,password debug1: Next authentication method: publickey debug1: Offering RSA public key: /Users/$USER/.ssh/id_rsa debug1: Server accepts key: pkalg ssh-rsa blen 279 debug1: Authentication succeeded (publickey). Authenticated to example.com ([1.2.3.4]:4242). debug1: channel 0: new [client-session] debug1: Requesting no-more-sessions@openssh.com debug1: Entering interactive session. debug1: pledge: network debug1: Sending command: rsync --server -vvvvlogDtpre.iLsfxC --log-format=%i . /home/$USER/www/ (Client) Protocol versions: remote=31, negotiated=31 And this is as far I can get using using the above rsync command If you have any thoughts / suggestions I'd sure love ❤️ to hear them. cheers Chris 

How do cluster file systems avoid the myriad of possible race conditions? I'm trying to get a grip on using a cluster file system in a Master-Master architecture. I'm thinking specifically about GlusterFS, so implementation details for it are welcome, but I'm hoping for a general answer. 

Many servers have an internal USB port and can boot from the internal and external ports. Comments about how MLC flash is limited to 10k-100k write cycles and may not be reliable enough are sure to come. I'm not too concerned about this, but perhaps I should be. File servers don't write to the OS disk very often, only for logs and such. Super Talent's flash drives are rated for 100k write cycles. Having two in RAID 1 and perhaps replacing one of them 3 years after set-up is still cheaper than alternatives and I believe would be reliable enough. And with ZFS, write errors will be detected quickly. So why is this not more common? 

It is my understanding that network address translation (NATing) goes away with IPv6. How do we isolate network resources to those that need them from the rest of the internet? I am specifically thinking about allowing access to internal network resources like file servers or VM hosts to remote users, such as those working from home. A similar scenario also comes up in IPv4 today. At many universities, including my own, each network device gets a publicly routable IP. I'd like to run a file server, but don't really want it publicly accessible. Ideally it too would have a public IP and VPN would not be necessary. Comments? 

I'm trying to install Phusion passenger (aka mod_rails) for the default Apache2 install on a CentOS 5.9 box. I successfully installed the gem using the following, but when I go to run the next command, I get a warning stating that my system doesn't have enough memory, but I can continue with the install. It then proceeds to begin the compile of Phusion Passenger but then fails. Is there a place I can check to see specifically why the compile is failing? 

I am trying to send a single file from the local macOS box to the remote Debian box (Digital Ocean droplet) The command I am issuing locally in Terminal on macOS 

Some tidbits, 1) dummy is a single 10MB file on my local system. 2) I can successfully ssh in the remote Digital Ocean with the below command, $ ssh nathan 2.1) I have a "config" file in /Users/$USER/.ssh/ 2.2) The contents of the /Users/$USER/.ssh/config Host nathan HostName $REMOTE_IP_ADDRESS i.e. 1.2.3.4 User $REMOTE_USERNAME chris port $SSH_PORT_# 4242 IdentityFile /Users/$USER/.ssh/id_rsa 3) I can also ssh into the remote Digital Ocean droplet with the below command 

I just installed a fresh copy of dovecot on my VPS. I am also running postfix, and I first went through this guide I followed everything as explained. However when I try to send an email from my iPhone I'm getting the following error, 

I've been trying to get rsync working for a couple of hours now, but haven't had much luck . I have a Digital Ocean droplet that I would like to send a file via rsync using SSH. local rsync running on macOS 10.12.6 installed via homebrew