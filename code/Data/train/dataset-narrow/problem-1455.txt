Figure out what the type signature of the function you want would be. Search hoogle or hayoo. If you don't find it in one, try the other. Usually it doesn't matter much whether you get the order of the input parameters exactly right, but you may need to experiment. 

Unfortunately, in the case there are a lot of functions with that signature, but eventually we find in . 

Next we need to divide our tokens up into those that are integers, and those that aren't. Again, there's probably a function that segregates a list into those items that satisfy a test, and those that don't. It would have this signature (possibly with the arguments switched): 

Your code looks fine to me. If you wish, you could use Greek letters. This makes the formula easier to read, but if you expect to modify it often, it may be too much trouble to enter the Greek letters. You might find it helpful to split up long formulas, as I've done for . If you can think of more meaningful names than and , this might be a good idea. However, if this is a well-known formula in your field, splitting it up might actually make it less recognisable. It's a judgement call. If you wrote this in literate Haskell, you could include a nicely-formatted version of the formula using LaTeX. That might be useful if you're writing code with a lot of formulas. 

You can go another step and make the comparer use only one value to track the relative value during the comparison. This is limited to 31 comparisons for a 32-bit integer. 

Note that I forced in fake data because I cannot do the real ajax request on jsfiddle. I had to rip out that foundation thing to make it runnable too. You should have no trouble modifying that second part to actually use the post. EDIT: If you wanted to have a more complex template, say, a span with text and icon then you could do something a bit like this: 

That code is full of security holes. Completely avoid , create elements programmatically, not as strings of html text. Use to set the visible text of elements securely. What happens if has this value: 

For an example of converting some code to a branchless alternative, consider the for a or , it has completely random branching, and benefits from using a branchless implementation. Branchy code 

You can replace that with a helper that uses branchless code to carry forward the true or false with bit logic. Branchless code 

This time a Hayoo or Hoogle search turns up and . Looking at the documentation, we see that is what we want. Let's try it: 

Now we need to separate the words from the integers. So we need a function that will tell us if a token is an integer. The problem statement implies we only need to deal with integers. So a token is an integer if it only contains digits. (The example given didn't have any spaces, but we could allow them, and even decimal points, if we want to.) So how do we tell if a character is a digit? Hmm... there's probably a function to do that for us.The best way to answer questions of the form "Is there a Haskell function to do X" is usually: 

I'm going to move a little more quickly now, because you're probably getting the hang of how to approach these problems. Next we need to format the results. Let's focus on re-inserting the comma between tokens. I'll write a dual to the function: 

The idea is to decompose it, apply the filtering and then reconstruct it. part of the problem is this code mixes development paradigms: it uses and and 

IO is always infinite (or should assumed to be so) and thus is natural for this case. The default node libraries for streams are really unimaginative on this. I was just asking around on JS chat yesterday about something like this. 

Delete all of your controllers. The endpoints are created and the content-types managed by spring data rest for you. Read more about for details on that Delete all your DAL code 

by shifting the digits left, performing your digit selection and bucket sorting, then outputting them back in decimal form? Like, take your random set and first convert all of them. I would expect better overall execution time. 

And now, a line is gone and your code flows naturally and doesn't abruptly exit the function. Finally, this thing where you put your 

It's a lot to explain here, but in a nutshell, I would simplify all of this using spring-data-rest and do the following 

Then every user that views that page will load and run the malicious script and send their session cookie to the attacker, who can then impersonate you, because they have your session secret. The user will not be notified at all, they see "Visible Text" You should not repeat yourself so much. You should create an element, and clone that off for each similar duplication of it. This way, you can just set those common attributes once and create copies of it efficiently. You have everything named very nicely, you can leverage that and make it table driven: See jsfiddle 

Hopefully that gives you more ideas how you can use masking to make expressions that update the state incrementally, without branching around. 

You want to avoid short-circuit evaluation, using bitwise operations disables any attempt to jump over any "unnecessary" comparisons. The rest of the code consists of decisions about whether to multiply several things by either 1 or -1. You should use branchless merging of the conditions to select a 1 or -1 multiplier. Then unconditionally multiply. You don't have to completely eliminate branching, just reduce it to a level where the CPU has a nice chunk of work to do between mispredictions. It will have sufficient time to get ahead and hide latencies. 

You don't need to explicitly call or any such non-sense. When it exists the event handler function(s) it will save for you You would stay the same but your would become a spring CrudRespository - the implementation is trivial. You can actually look here for an example. With this, you can: 

Craziness? You only need to do this if you want to assure yourself (or the compiler) that it won't be reassigned. This is hyper defensive and, in 15 years of writing code I have never found it to be a necessity. Frankly, 'final' in this case is repetitive and distracting. Unless you have a need for it (which, from this code, you don't) then ditch it. this: 

Is way better! Think about it: In the previous case, you 'return' and terminate the function. But, in this condition you have no idea if the job was done or not and if not, why not. This is pre-condition checking and an ideal case for it 

First, I applaud your effort - I must confess: this is definitely lacking in the js world. A few things come to mind: 

Then before each clone, you can reach into the template and do and , then clone, then the clone will already be set, and no need to go into it. Note that .text blows away all of the content of the node, so I restructured it so wont kill the icon. 

You could probably reduce the number of branches in that code and get additional performance using SIMD, like SSE or AVX. All of the variables in would fit in a few registers. It is likely for the compiler to be using a lot of branches in that code. I can't tell from here but I would guess you have a lot of unpredictable branches. Unpredictable branches kill performance, because the processor is wasting its time trying to speculatively execute the wrong instructions 50% of the time, then flushing the pipeline and restarting. You can immediately eliminate some ifs, by multiplying by 1 when you don't need to multiply by -1. A ternary is likely to be a conditional move, if the instruction set has it. To eliminate branches, you can use vector comparison intrinsics. They do not work like typical comparisons, instead, they generate a result with all binary 1's for true, and all binary 0's for false. This way, you can write the code to compute both sides of the , then bitwise-and () the true path against the comparison, bitwise-and the else path against the ones-complement of the comparison (), then bitwise-or () together the two execution paths. This will leave you with the correct execution path's result in the result. The reason: it is often far faster to compute both paths and select the results at instruction retirement than it is to constantly speculate through branches in the wrong direction and flush the pipeline and start over at the correct target. Modern CPUs aggressively compute far ahead of where the program is really executing, and mispredictions throw that work away. 

I would also suggest that you might be able to make use of Java 8 streams to improve your performance on large numbers. 

Get rid of the REST/persistence/dao layers you have Refactor your services to use the Spring Data events So you're would become an handler for the looking like this: 

In general, any math on doubles is slower than on integers. In addition, you have repeated downcasting from double to int which also incurs a hit. You know your decimal value is up to 10 digits -- just a smidge too many digits to guarantee you can move the decimal and represent it as an int, but you can represent it as a long which is just as good because java and modern hardware architectures are 64 bits. So, any math on them will be really fast. Why not convert the decimal to a long 

Your variable names mean zilch to me. You HAVE to give them a better name. Also, create them up in groups of 2. This code here is also problematic.