Install FreeBSD 8.0. GELI-encrypt the physical devices you want to use, then add those devices in a mirror or raidz configuration. Then run your Samba, NFS, or whatever file sharing protocol you need. I run GELI+zfs on my FreeBSD workstation, and it works very well. The home-rolled solution may not have all the bells and whistles of a commercial NAS, but an experienced UNIX admin should have no trouble with FreeBSD, given how good the online handbook and communities are. 

This would give you an un-sorted list (the order in which arrays are walked through in awk are undefined, so far as I know), so you'd have to sort to your liking again. 

You might try bouncing off a proxy on a machine with a static IP, such as squid. Better yet, if you have SSH access to any machine with a static IP, you can use the SOCKS option for SSH: 

While I give you my word that my script is safe, don't make a habit of running such scripts from strangers, since you have no reason to trust me and I could potentially do something devious with my encrypted script. :-) Unfortunately, a sufficiently savvy user will be able to recover the script plain text by simply removing the "| /bin/sh" portion from the script, which will result in the script being dumped to stdout. In short, if the end user can run the script, it is possible (with enough motivation and skill) to reverse engineer it. Don't place anything of critical importance (such as passwords) into these obfuscated scripts. 

No, it's just cosmetic. If you're not careful, many programs (postfix I think, apache, etc.) will use whatever "hostname" reports, which can cause problems. Otherwise, there's nothing magical about the hostname. 

This is an absolute lower bound on the cost of having the machine plugged in for a year. With typical use it will be much more. 

I use nsd for authoritative name servers I admin. Keep in mind that all nsd does is act as an authoritative name server, so I use "unbound" (from the same developers) internally for the recursive queries from the servers themselves. For a (somewhat meaningless) reference, one primary name server, serving a half-dozen zones with maybe 20 records each, has a resident memory footprint of about 1.1MB. I have found nsd to be very stable. The only issue is zone transfers between servers can be tricky, certainly not as plug-and-play as between 2 BIND servers. I ended up using an rsync script to update/rebuild/reload my secondary name server's records. Another option I've tried is MaraDNS, which is a good performer, but not much lighter than BIND. 

If your external router supports port forwarding, you can have it forward the ports to the services you need. You could also look at VPN solutions, either as a function of the router or having your internal client and external client access a common server on the internet. If you don't mind heavy latency, you can set up a client on the inside to be a TOR client with a hidden SSH service. Then you can ssh into that client from any other TOR client (so long as you know the service name), and use port SSH's forwarding or SOCKS proxy capability to access various internal services. There are many options here, and they all depend on what services you require access to, how much control over the setup you have, and how much effort you're willing to put into the setup. 

Then you configure your browser or download tool to use the SOCKS4 or SOCKS5 proxy and feed it port 8888 at localhost. No intermediate storage required. 

Bacula. It's open source, and cross-platform. Excellent for a home/small office scenario. Can back up to tape or online disk storage. 

Based on the diagram, I'm not sure exactly what what you're trying to do (what is ESI?). However, there's a small, fast load-balancing front-end server called "pound" and it will handle the SSL layer for you. It could sit alongside Varnish on the front end on port 443 (I assume you have Varnish on port 80?) and pass the SSL traffic directly to nginx (SSL can't be cached anyway, so no point in going through Varnish). Normal, unencrypted traffic would go to Varnish as expected. 

It depends on the application, the response time needed, and what you're willing to do to meet those goals. Recently, I was working with a 10+ GB, 50+ million line text file and had a need to search for specific strings in each line. Standard Unix tool "grep" did the trick, but took an unacceptably long time (multiple minutes). I imported the text into a postgreslq DB (it was a CSV file, easily imported), and once indexed on the key I needed to search on, it took under 1 second to find my record. Granted, my workstation is single-core, with only 4GB RAM, a 4-year-old 2GHz CPU, and a top-heavy filesystem (ZFS) using 5+ year-old consumer PATA drives. Your mileage will certainly vary. Still, the time difference between the two methods is staggering. If your data is free-form text, you might still consider importing into a DB which supports full-text search and indexes appropriately to support such searches. Even if you have the RAM to have the entire file cached and a fast machine, doing a linear search of files this size will be time inefficient, depending (once again) on the application. 

I've been an admin for 20 years (15 years professionally), mostly Unix with a dash of Windows as required. From the beginning, I've tended to play the paranoid admin, mostly because it's practical and instructive, not because I believe hackers from the other side of the globe are targeting my servers. ;-) Security really is a de facto sysadmin requirement, one which can be practiced daily. You don't specify whether you want to wear the official badge of "Security Specialist" and do things such as pen testing, PCI compliance auditing, incident response (forensics, etc.) or you just want to be an admin with some heavy security creds to help widen your career options and defend high profile systems under your charge. Of the few peers I know in the "official" category, the CISSP cert was the first they tackled and they went on to land decent jobs because of it (of course, they had 10+ years of hand-on experience, like yourself, to back it up). There are tons of materials online, in addition to official training materials and courses, to asses your grasp of the material. While the concepts can be learned and applied on any platform, I personally recommend Unix, since you get such low-level access to everything, with the added benefit of being able to access that information easily via remote shell: watching live tcpdump sessions, syslog entries, web server logs, snort dumps, dumping live system memory, to a million other open source tools for peeking and poking at the innards of a running system. Due to Unix being an ideal platform for learning this kind of stuff, it easily follows that a great way to learn is by throwing yourself to the proverbial wolves. Get yourself an entry-level Linux or FreeBSD VPS, a true virtualized VPS (such as Xen) with all the "hardware" and admin access you'll need to simulate the real deal in a live, exposed internet environment. Set yourself up with a live, working system. Get a live SMTP server running, and watch the spam bots and scan for malware. Set up a web server and watch the script kiddies try SQL injection attacks in your web and DB logs. Watch your ssh logs for brute force attacks. Set up a common blog engine and have fun fighting off spam bots and attacks. Learn how to deploy various virtualization technologies to partition services from each other. Learn first-hand if ACLs, MAC, and system-level auditing are worth the extra work and hassle over standard system permissions. Subscribe to the security lists of the OS and software platform you choose. When you get an advisory in your inbox, read up on the attack until you understand how it works. Patch the affected systems, of course. Check your logs for any signs that such an attack was attempted and if one succeeded. Find a security blog or list that is to your liking and keep up with it daily or weekly (whichever applies), picking up the jargon and reading up on what you don't understand. Use tools to attack and audit your own systems, trying to break your own stuff. This gives you perspective from both sides of the attack. Keep up with cutting edge of the "black hat" mindset by reading papers and presentations from well-established conferences like DEFCON. The archives from the past ten years alone is a treasure trove of information, much still valid. Granted, I have no certifications, nor do I bill for "security specialist" services. I just make it part of my daily routine to keep up with this stuff to make myself a better admin. Whether or nor the certs are desired or required for your goals is better left to someone who has them. However, I believe that a heavy hands-on approach is the best way to learn this stuff, and I hope some of my suggestions provide some food for thought.