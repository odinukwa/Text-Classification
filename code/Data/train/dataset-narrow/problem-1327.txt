Before attempting to refactor your code it needs to be understandable, and one major issue is poor naming of the variables. This makes the code almost unreadable, as we don't get any hint as to what the variables are supposed to hold. This combined with zero to none comments regarding what the different methods actually are supposed to do makes it really hard to give you good suggestion as to how to improve your code. So for starters, I would go over all the variable and function names, and make them clearer and let them indicate what they are actually used for. Add docstrings to define what they return if not given by function name. Function names like aren't good, as they give no indication as to what happens when it has checked something, or if the function has some side effects like changing the current solution. Try to aim for something more like , with a description of what is a valid solution, or . A suggestion could also to be to add a function which prints the current solution, where you could split the lines at the current row length and use lowercase characters for the unoccupied fields, and uppercase character for a tree placed in that field. For the first few lines of your current output example: 

What I'm trying to say here, is that you need to extend your test regime quite a bit, and get real life examples when testing. If possible, you should build more complex test scenarios in addition to the happy flow or basic case which you are already testing. 

And this would provide me with a proper run of any doctests if present, a run with output to verify correctness of the different main methods, and a test performance run giving me output ready for inclusion in code reviews. Or for various other runs using IPython I can either use the different main methods, or I could use the newly created list of main methods. 

Notice the duplicated line near start, due to falsely changing the option, and the changed bottom line when comparing to original file. And finally the file : 

The prime reason your code is slow, is simply that you don't remember earlier calculation on what numbers are prime or not. So you recalculate it every time, for every number, and that is a lot of calculations. Code review Your code looks clean enough, and the style is good. I would consider having all of the arguments on the same line as long as you don't have too many arguments. But then again being consistent and writing code according to a defined style does make for clean and readable code. Your choice of doing a loop which adds at a time (within ) is wise, and rather useful to avoid doing too many tests when you want to display or check a lower number for primality. However this gets very expensive when you want to display all primes below a given \$n\$. Implement a better algorithm You should look into using other algorithms for generating prime numbers, and apply one of these. For some theory read Wikipedia: Prime number, and an article on one of the better approaches: Wikipedia: Sieve of Eratosthenes. Another article on the latter is Determine if a Number is Prime. The base concept of "The Sieve of Eratosthenese" is to have an array of \$n\$ numbers with boolean values, and then you start crossing out all multiples of 2, continue with crossing out all multiples of 3, and then you continue finding the next in the array which isn't crossed out, and remove all multiples of that. In the end you have a list of all primes below \$n\$. In your case you could output each prime at the start of crossing them out. But be warned that this algorithm does require a lot of space, and it will still take a substantial amount of time and memory to find all the primes below . A combined approach Something which would give you some gain, but not a lot would be to build a temporary array of primes, and use this to eliminate most of the lower cases. I.e. if you have a table of the first 1000 primes, you can avoid checking higher number for all those not being in that list. Which would falsify higher candidate numbers somewhat sooner. The flip side is that when you get to higher candidate numbers the primes are further apart, so it will get slow very fast, even with such a combined approach. 

The trick to this challenge is to actually change the number into bit operations, and not to do string manipulation as you do. So here are some hints on how to do this to get you started: 

Here is some coding displaying the flaw in your original rename code, and two options for how to handle it correctly. 

Notice in this output how I've connected the table to , and to , and so on. Therefore when adding this line: 

This just doesn't look nice. You have a single line hidden after the without braces, and then you have yammed the up there, and it is kind of hard when reading the code to see what is really happening here. Two suggestions: Always have braces around the blocks belonging to whilefor`, and make a choice and stick to it regarding where to put starting braces. Either choose to have starting braces on the same line, or the next line. Here is an example using the next line: 

Code optimisation I'll not touch in on the sieve optimisation, as Barry has covered that already. However there are a few points I would like to make otherwise: 

Let us then move on to how we can generalize the different part of your original code. Let us start within the class: 

A final important suggestion, I would strongly consider splitting up your into multiple function. Now you have code which does: 

Most of your code is actually unit test code, so lets review that part before the review of your main function: 

Notice how the 'dots' have changed to include an , and that the line names that is was the in the class which has failed, and you get some details as to what failed. If the test is well written you should now easily see why it failed, and hopefully understand what went wrong. 

Output example Output when running this script, without the extended icmp handling, surrounded by a command on a file of size 1.550.000.000 bytes which was a serious duplication of a slight modification of your test input: 

To avoid the duplicated logic, the nicest solution would be to use an extra function, but alternatively you could also change the loop logic into being an eternal loop, and breaking out of it when reaching the end. In other words something similar to the following: 

Not quite sure if this covers all edge cases, or if you need to assign trees to field based on some location closeness or similar. But I think it is worth a try to go from this direction, as you can't brute force all variations of fields and then test using your solver if it is playable. 

Hopefully, not too many errors in there, but it should the gist of the idea, if I understood your underlying requirements of getting new keys every 30s or so correctly. 

Code review The key point for this simplification is to recognise the pattern you were using (i.e. always calling the ), remove unneccessary variable (), and introduce a multi-dimensional list () to keep the actual difference in the otherwise equal code segments. 

Realise your own resize Why would you want do this? You are already relying on the native array, so I don't see the issue in using the native approach for resizing. However some options to handle resizing issues, or implementing your own version here: