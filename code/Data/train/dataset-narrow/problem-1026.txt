Very rarely should you pass 3 arguments to a function. In your case we are talking about 9 parameters. I would not have anything against PHP throwing error in such cases. If you don't know when to use static functions, don't use them at all. Spelling 

Last but not least I highly recommend book Clean Code by Robert C. Martin if you care about keeping your code clean. 

My attempt to make this code as clean as possible. Note that i have not changed almost any of the logic you provided. 

Data Types This was you first bigger OO mistake to me. When you think of a deck of cards, do you think of a randomly accessible array of cards? Do you think of a stack of cards? It is possible that your game may require your ability to draw cards from anywhere in the deck, but from the code you've provided it doesn't seem this is the case. I'd like to see 

I'll start with more style oriented comments and move to more general OO concepts. And I'll skip what's already been said. Enums I much prefer to see enum values declared on individual lines, for readability. I also don't think including the word "enum" in your enum definitions is helpful. I'd like to see 

In this example I'm using this curl wrapper. I have created separate class to take care of querying rest api as this logic should not be in controller. Names could use some more polishing but in my example I make camel case names and I stick with those. If you are more comfortable with snake case you should stick with it only, do not mix them up. I have tried to make this code readable. You don't have to see low level operations to know what happens in function. ex gives you pretty good idea what it returns and you don't even have to see how it does it. Configuration should not be mixed up with logic. Put it in configuration file and load it in when needed. It is very important to write unit tests to make sure it works as expected but I leave this to you. good thing that I have otherwise I would have to look at this piece of code and get distracted trying to figure what each of this relations stands for. Use comments only in those places in which you failed to clearly communicate with proper naming what your code does. You want to make writing code as enjoyable as possible and only clean code can be enjoyable to work with. I would put readability of code as high as its ability to perform given task. 

Hashing We know enough about decks and cards to write a perfect hash function (one which will return a different value for each of the 52 different possible cards we could have) with the use of enum orinals. 

On another note, as I wrote that last method definition, I realized that it means "Recursive Helper Quick Sort". The first time I read it, I read "Rechel Per Quick Sort". Which is why you want to use Camel Casing. Method Visibility You correctly point out in your JavaDoc command that quickSort(int[] array) is your public API. But you don't enforce this by leaving the two helper method public as well. By leaving the helper methods open, you leave an easily misused method available to be called, namely rechelperquickSort(); Imagine a client who doesn't know better makes the following call 

Caching is definitely appropriate here as well. You can carry a cache through the calculations using an Erlang map. I took your original code and made the following modifications: 

First, we can see that the third numbers, the function results, are identical to those for the original code. This means that either the new code is also correct, or both versions are incorrect. As you can see the execution times are greatly reduced from the original code for all values of greater than 4. For the smaller values, the original code is faster because it doesn't have any caching overhead. But for the larger values, each increment in results in only a small increase in execution time. For of 12, the run time is only 2.68ms, which is roughly 28000 times faster than the original code. With the revised code, calculating takes only 2.8 seconds: 

Overrides compareTo is an interface method, but you've missed the @Override annotation. Always include that annotation when implementing a method from an inherited base class or from an interface. Builders Most methods in builders (it's a general design pattern) return a reference to the builder so you can chain method calls like such 

Names You should strive to name your methods so well that someone knows what the method does without reading the implementation. 

Some stylistic comments. Spacing The proper use of white space makes a big difference for code readability. You use white space inconsistently, which suggests a lack of attention to your code, and differently than Java standards, both of which make me want to read and understand your code less. So: Method definitions should be arranged as such 

First off, would want to know what made you do all this. As I only know code you come up for certain use case and not use case itself all I can do is refactor your code. There is high chance that you approached implementing functionality incorrectly. With that being said here are some tips: 

Make as few static methods as possible. Those functions should not appear in any other function as they get in a way in unit tests. I usually use them to spit out html in views. Don't use global varibales. Hide as implementation as you can. Make public only those things that are vital for functionality. I consider operator harmful as it cannot be mocked. Use dependency injection instead to provide object with all necessary data. 

The first value is , the second value the execution time in microseconds, and the third value the result of the function for that value. For values greater than 2, there is roughly a 6x increase in run time at each step. For of 12, the execution time is just over 75 seconds. Here are the results for the revised code: 

On my machine, this overhead is ~1.20s. The original solution for input with 9000 entries and 3 lookups takes ~6.25s, while the solution I've posted here runs in ~1.23s, which means it imposes hardly any overhead over that of the VM startup and shutdown. 

Camel Case All variable/method/class names should comply with camel casing ($URL$ The lack of doing so makes it harder to read your variable names and also strays from standard naming schemes. The following 

Spacing You use spaces inconsistently. In general, this suggests a lack of attention to your code and is unpleasant to read. The end of your compareTo method, for example, looks like 

Your code quickly crashes due to IndexOutOfBoundsException. If you make this method private, you'll never deal with this error, and people who use your API will have one less method to try to understand. Better for everyone. 

I created an input file containing 9000 entries to be stored and used it to measure this solution to be about 150 times faster than solutions that read the input line by line, as measured by running the solution on the command line in a bash shell like this: 

The final clause is where all the interesting work occurs. It first calls with a default value of to check if the value tuple is present. If it's not, the default value of is returned, and the case clause for creates a new list of value tuples based on the incoming values of , , , and and passes it to a new call, setting the initial sum value to 0 and passing the current cache. This call returns a 2-tuple comprising the sum for that value tuple and a new cache. The final line in this case clause inserts the sum for the value tuple into the cache. The case clause for when finds the value tuple just returns the cached sum and the current cache. The result of the case expression is stored into , and then is called recursively with , which is the tail of the value tuple list, a new sum which is , and the new cache . We can run the code in a list comprehension to calculate the running times for values from 1 to 12 using like this: 

Separation of Concerns I would like to see the association between a Card and an Image in a different place in your program. In general when you build GUI applications, you want to separate the things the User sees from the representation of data in your program. With you current design, you make it challenging to build a flexible UI. What if 3 months from now you decide you've got a good game, and now you want to support multiple "skins" on your cards, so that users can customize the UI to their liking. Now you've got to come change the implementation of the Card class - not something you should have to do to make a change to the way the UI looks.