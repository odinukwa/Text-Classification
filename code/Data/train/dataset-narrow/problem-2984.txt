There is this research paper "Learning edge momentum: A new account of outcomes in CS1" by Anthony Robins that is much focused on that subject... From the abstract: 

The question kind of says it all. Imagine that for an assignment you receive two or more similar submissions (e.g. programs). What will you do? Annul all the works? What if you know for certain who was the original author? Probably this is already in your schools’ code of conduct. In my school it is not and I sometimes don’t really now what to do. 

In the final report of their internship, the students of our school must have one chapter where they "document" the developed work. When using the “waterfall” methodology, they usually have one sub-section for each stage: 

It is not clear for me what "computer science" means for you. Is it at High School level? If that is the case, you could try to introduce some of the mechanics behind "digital music". How it is processed from analog to digital. How it is compressed, how it is reproduced, ... What does it mean to be 8bit or 16bit, the bit-rate, the sampling frequency... If the students are more into drawing/painting, you could do the same with image formats. 

I am not sure if this is really what you are looking for, but there is also Blocky from Google which is kind of similar to Scratch, and lets you see the source code produced by the block in different programming languages (JavScript, Python, PHP, Dart, Lua). Blocky is used in several projects like code.org. If Java is OK for you, than you can consider the BlueJ IDE which is: 

I think that to understand the SELECT queries, the Who is Who? / Guess Who? game could serve as a nice metaphor. 

As probably we all experience, plagiarism is very common in CS. I know that there are several types of plagiarism ranging from simply submitting a copy of the colleagues’ code to other highly sophisticated mechanisms. In my experience, the most common is indeed the simplest one. The student just grabs the code from another colleague and eventually change the names of the variable, and submits the solution (some students don’t even do that!). While there are several systems that are easily capable of detecting this type of plagiarism, they do it mainly when the student submits the final version of the code. Some other tools, are capable of detect plagiarism and notify the student about that (as if they didn’t already know that!). In most cases the use of an anti-plagiarism tool will act mainly to support punitive measures. Although it is not the main focus, as part of my PhD work, I am working in a tool that analyses the source code as it is being written and is able to detect plagiarism in “real-time”. This way, the teacher can be notified about students that are performing plagiarism even before their final solution is submitted, giving the teacher time to act and avoid the punitive measures. My biggest question is: What should the teacher do with that information? Will this be efficient? 

On the left, you have a menu with the different coding blocks, the drop down has categories very similar to those in scratch. The tabs on top of the coding section are basically for the different "agents" and for the "world". This program, if you're wondering why there's a "Killers" tab, is to simulate an epidemic. There's support for all sorts of things - procedures that return values, movement of "turtles" which are basically robots on the screen, etc. Here's a screenshot of the section of the screen that shows the result of your program: 

I think @Ben I.'s suggestions are great, but let me present a completely different take. Don't prepare them for science fairs, prepare them for industry. 

Well, I'm not an educator, but a student, and I'm in the United States (early highschool, so 14-16 ish). I find several advantages from coding. 

Breaks? I'm in highschool (not an adult) and I'd be kind of offended if someone told me to go "take a break", especially in an elective - I took this course to learn, not to get told that "sitting is the new smoking". You're wasting their time. (Also, don't assume your students spend their whole day sitting - a not insignificant number of them probably work out or do some form of activity during their day. No need to force it on them!) Now, that being said - you don't need to rely on breaks to get people up and moving! There's activities for illustrating different sorting algorithms by having people stand in a row and shuffle themselves according to the algorithm; there's activities for "programming" each other, there's activities for just about anything you want to do. These have the bonus of helping the information stick in the mind of the student ("remember that time we programmed Joe so that he walked into a wall?") and, most importantly, having actual substantive content - that is, not wasting student time. 

Building off Bennett Brown's answer about creating an "alphabet" with DNA... It is being researched how to efficiently store data in DNA. Here's some thoughts you can cover: 

It's a recursive link! Ah, google easter eggs... Then, you can maybe give them a problem that depends on recursion - like, say, a multiplication algorithm of some sort (I saw one somewhere that used recursion and was pretty simple - I'll edit to add it if I find it) to give a more programming oriented example. 

I have some students in highschool who already understand programming concepts (generally), and are fairly familiar with Python's syntax and logic, and have a beginning awareness of OOP in Python. I'd like them to get a quick crash course in Ruby for fun and general awareness of the language. The intent is to be able to write basic code in Ruby, both for web applications and back end applications using Rails. What would be a web course, or website I could have them read, that would bring them up to speed in the basics of Ruby so they could start writing code in it? I'd like it to be free. 

For research reasons, in the last few days, I’ve been looking at several statistics on computer science programs in Portugal (but also in Europe and the US). One of the most interesting findings is that approx. 20% of the students will drop the program at the end of the first year. But the most problematic finding is that after four years, only approx 22%-32% of the students were able to graduate in a 3-year program. It is important to stress that in Portugal the admission to higher education is determined only by the grades that the students obtained in High School (50%) and the results of the exams in some particular subjects (Math and Physics) for CS programs, for instance (50%). In the end, only the n students with higher scores will be admitted. Given the demand for IT personnel and the high unemployment rates of several other areas, several students will end up attempting CS. I am aware, that some companies rely on the Berger Aptitude for Programming Test to select their candidates. From what I understood, this test is used mostly to evaluate the candidate’s ability to program and could not be used to select candidates for the CS programs. Given this context, shouldn’t the students be performing some aptitude test before enrolling in these programs? Is anyone aware of the usage of such tests? Obviously, I understand that one shouldn’t simply say to someone: “Hey choose something else!”. However, we are talking about several hundreds of students that are basically losing one or more years of their lives. Although this happens in Portugal, I guess the same thing occurs in other countries. Shouldn’t we be doing something about it? I am aware of some other questions concerning programming aptitude. However, I think mine is different. 

Since you mentioned that ideally you were looking for a video, a few years ago I used to show a video to my students: The Good Warriors of the Net - IP for Peace . It is a bit old, but the main concepts are there. Another that I used to show my students was: How the Internet Works in 5 Minutes Grab the popcorns! :) 

I suppose that a traffic light is a very good example and easy to understand by your target audience. 

The idea of the game is: you have a group of pictures of persons with different facial features. One gamer selects one of them and the other gamer has to make questions to try to eliminate the ones that are not relevant and try to guess which one the other gamer has chosen. It is kind of like what you do in the WHERE part of the SELECT... 

What if an agile methodology like XP or SCRUM is used? Every year we have the same problem, as some teachers say it should be done one way, while others say the exact opposite. Any ideas? 

It appears that the student(s) in question don't really want to do what they are doing, but feel like they have to; this answer addresses that. Be sure to consider that maybe your student(s) just really want to learn the extra stuff, and don't block them from doing that. Emphasize the power of summary. In a world with the internet, no one needs to memorize every concept, but just understand the basics, or what to google when you need something. I can't tell you how many times I've looked up details on Stack Overflow, and then using that finished my program. Tell them that the important thing is to understand the big ideas, and be able to implement them. If they don't respond to that, try to spend a couple of days teaching completely without the book, and asking your students to not use it. Summarize up front, hand out notes with the points you want, and then let them go on the lab work. Tell them that the notes you have handed out are all they should need, along with occasionally googling something. If they are taking notes beyond that, tell them there's a problem. Hopefully that gives them an idea of what they need to do. Also - a textbook with every sentence highlighted doesn't point out the more important things - it's just annoying to read. Perhaps you can show a quick example - plain page, overhighlighted page, judiciously highlighted page - in a one-on-one with those students. 

I could keep going (I'm just a bit excited about this field), but it would be well worth the doing to explain the various encoding systems used in research, and let them explore - who knows, they might come up with a great system of their own! I will add links as I have more time. 

All "joking" aside, foreach loops are super useful - I use them all the time. They're the difference between 

There's basically a single sentence to explain the problem here: shows you, the user, what's going on, but shows the computer what's going on. So how can you illustrate this? First, I'd begin by having students write about and and the difference between the two. At least try to get them to be able to say what the difference is. Next, have students write a simple program without and with that works - maybe something like (I'm going to use python 3): 

In other words, then . On the other hand, the expression in python is an "assignment" - this is equal to this, no need for argument. *This is much like in math assigning $x = 5$ or something of the sort. We can later use to represent 5, much like in an equation $x+5$, given the above definition, we know that the result is $10$, because we are using $x$ to represent $5$. A common analogy is that of the buckets - a bucket has painted on it and whatever is in the bucket is what represents. However, things get more complicated from there - what if ? Then, you take what was previously defined as, square it, and then redefine as equal to the new thing. For example, let's "run" the following program: