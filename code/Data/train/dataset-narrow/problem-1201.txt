Note that I am not familiar with Swing, only Java. You should remove unused variables. Like and in . They just confuse the reader about the logic. This can be improved. 

I changed some statement like to for readability. I just commented on basic things like style. I'll leave the review to someone who knows C++. 

Note that I used triple quotes to wrap around the stings to be printed. Read PEP 8 for why so be sure to read it. Any text editor with syntax highlighting would offset in reading due to strings being wraped around. Hope this was helpful. 

Running a loop over the range 2 to 1001 with step of 2 and then adding 1 gives you the answer. You want to simplify it further? You need the formula for summation of series of n^2 and summation of n. That makes this into an program instead of current . For example the first term would become with summation running from 3 to n with step of 2. Its value is 

You don't need to create a list if you are not using it elsewhere. In the function you can avoid the overhead of list creation because you are only interested in the sum of the elements. 

What's wrong? Where? If you catch an exception then you at least add the stacktrace to the printed messages. How? Google search. About catching only I say only catch what needs to be caught. If you are catching exceptions then if you can add some thing in the catch block to recover. If not possible then at least log a error message which does not require you to manually check what went wrong. Now what else can be done better? You can use Java's generics to make your Stack reusable. You should have created a class and then a which used the generic stack class to do its stuff. In your example the thing that you are calling is actually the as per the logic and the class that you have named is a stack. The main class should have just given the string and gotten the result out. 

Why? This is something that should be present in the constructor. After you move the x and y for Paddle and Ball inside the classes then this big initialization will also move to their respective constructors. Except their names there is no actual difference between and . I went ahead and deleted one and things work perfectly fine. This is copy pasted, right? 

I hope that the function in which you actually created the object is also static otherwise the amount of mess that you can create has no limits. Make static variables only if it means sense that every instance of class should be able to use it. Don't use it for the sake of ease of sharing data like a global variable. Also like Simon said you didn't create the at the first line. You made a reference variable that is capable of holding a reference to that kind of object. About the line - The object reference is gone from the current reference variable but whether or not the object reference is completely gone depends on whether you passed it around or not. Use instead of making a new object. But be aware that if you use then there can be side-effects if you have passed the object reference around to some other object which is storing it. If you need to pass it around and want the to be like a new one then it would be better to use . That can help you to avoid side-effects of clearing. So choice is yours. Depends on the situation. One more thing, if you are just using the list as a global variable only so that you don't have to create a lot of local variables then don't do that. Instead make a lot of local variables which fall out of scope as soon as the function ends. It may seem inefficient to create a lot of objects but if all the objects are short-lived then it will be garbage collected easily as is optimized for it. Also that can help avoid side-effects which can become a headache and break . 

Firstly I'll get rid of all the semicolons. They are not helping at all here. Then I'll add two setters for and and just use the map constructor provided by groovy? Do you really want to read 

You should just keep something that actually matters. Simple assignments? Let groovy do that for you. And rather than this 

I think there is a bug in your code. You are using a class but using in your code. I understand they are different but I think you have messed up C with c in your code in the function. It is confusing whether or not you have messed it up. That is all I can think of because I don't understand what the code is doing unless. Please edit your question to add sample input and output. 

The second one is more efficient. Simply because in the first one you are calculating the times but in the second you are calculating it times. Also it can be made more readable and efficient just by using this. It eliminates which you aren't using anywhere. Readability doesn't need explaining. 

The first term is for upper right corner of each ring. The second is for upper left then lower left and finally lower right. I laid it out barely to make it easy to understand but you can certainly make it shorter. It is actually easier to find an equation by considering the rings to go from x = 3, 5, ..., 1001 

See the part? No need for the condition. In I would take out the particular bindings out. The bindings should be passed from outside should not be in the paddle class. 

This code is not completely working. is missing. But still there is a lot of effort. In case you are not aware Code review is only for code that works. You didn't add what you were expecting so I guess you were expecting a fix. Sorry. I won't solve the problem but I will add some general things that can be improved in the code. Use for-each loop if you don't need the index Instead of 

Then just implement the parts which make sense for your sub-classes. You said there is a lot of same stuff and just a small bit of difference. Isn't that a sure sign that you need inheritance? The abstract super class can give you the generalization that you need while still preserving modularity. 

I have started learning Clojure so please share whether there is some easier way to read lines or anything else that can be improved. 

Take a look at Python Performace Tips and search for list comprehension. As far as I can understand your code you can use it. An example would be this function. 

I am going on with refactoring my code base while migrating from Python 2 to Python 3. I am using generators to make reusable components this time as I am more comfortable with them this time then last time. But there are times when I am stuck at their use. Like below example. These two are essentially same with one infinitely generating and other with a limit. Is there a way to make these as one function? Normally an extra optional parameter as limit will do the trick but with generators I am not sure how to use them. Is there some way to do that? 

I think it should be possible to refactor it more so that the comes only inside the loop but I didn't take the time to do that. Hope this helps. 

I removed but you do realize that that it was actually there. No need to use Java 8 everywhere. And notice that if you don't return anything you don't need the void in case you specify the access The part about using for and using Apache commons has already been said. Just giving my upvote. Lastly you are aware of @CompileStatic. Right? Use it everywhere unless you are using dynamic things in groovy. 

I will give you an idea. You need to have a dummy class with the functionality that you want. As you haven't provided much details I will make the assumption that the all models are sibiling classes. Same assumption for other things. After you have the dummy class you can just sub-class them and give the infoVariable a new value and override the method. In action method just call super with the appropriate variables. 

Is this code ok from functional programming perspective? I am open to criticism from any perspective. EDIT 1 Code after @Pedro Rodrigues suggestions 

That is a general thing - use enums instead of instance variables. But in your example you don't need that. You can do something like 

You are opening the file(never closing it) and then using a loop. Try using the statement and list comprehension to open, close and get your list. This goes for both and . and are declared before the loop starts so you can declare and . For the reason see the part "Avoiding the dots..." in Python performance Tips. You can try to use instead of if you are on Python 2. Using generators might be better instead of creating the whole list. You'll have to time this. This isn't much but might be helpful. 

You should read Python tutorials on exceptions specifically this section. In this the part about use of is relevant here. Combining that with list comprehensions this 

About the choice of your variable names, don't use and . They are too general. Actually is a function in Python so using that variable you made that function unusable. That is really bad. If you want such names use an underscore after there names. That may take out the problems of accidentally using in-built keywords. Other than that I think this is good. Calling functions by using dictionary to store their values. I learnt something. EDIT You are using in your function. This adds a whitespace at the end. The problem with that is that it adds a whitespace at the end of complete string also. I mean after the last word there is an extra whitespace. So you should use 

By consistent style I meant something like this. If you use braces when a statement like , etc. contains single statement then use braces for , etc. containing single statements everywhere. 

It is much more readable. Ditto for . Also why are you waiting till the API call is complete to throw exception in case there are more than two users? Just stop the whole thing when usersString has more than 2 user Ids when the class is created. And instead of this 

Update 1 As limelights has suggested, use of is better than use of in Python2. If your or are big then using would return a list which occupies memory while use of returns a generator which is much more memory efficient. Performance might suffer a bit but in most cases it is worth it. 

I am not used to classes till now either but I can offer some other optimizations for your code. Firstly you should go over PEP8. These are style conventions but they would help you write code that is considered good. Maybe PEP257 also for how to write docstrings. You can use list comprehensions - PEP202. They are more efficient and readable. So this 

There is a very easy solution. In all cases I'll avoid x = 1 as it is a corner that doesn't fit the pattern. The pattern of each ring can be generalized easily into an equation considering the rings to be numbered as x = 2, 3, 4, ... , 500 

Having a enum which enumerates the sub classes of a class? Not a good idea. You can use the sub classes themselves if you want like above. BTW in your design, if your bathroom has two taps then how are you going to use the second tap? The method just returns the first instance of that type. About casting, you will have to cast it somewhere when you are storing as a superclass but using sub class specific things. 

I would say you should definitely make a library. After that I'll go and indent this code properly. I couldn't understand where the function started and where it ended in the first go. If you want readability that is a something that you must seriously consider. All of your functions need proper indentation but for the function it is a must. There is a lot of redundancy in your function. 

Firstly there are 2 classes so don't show them as a single code when showing your code. Place a heading with the class name then your code then second class name then your second class's code. That makes it easier to copy paste it into Eclipse when seeing the code. Why have you named the parameters as and and still using the keyword? Why are you making the variable names different in the first place? It just adds confusion. Name them as and and then use the keyword. Period. You are throwing a when is and the message is . That will become confusing... Also you don't need to throw that explicitly. The assignment to will throw the exception and give you a proper stacktrace already without any extra code. The loop can be made a loop very easily and will limit the scope and extra variable ( in this case). Note that you are doing in both as well as . That shows you didn't take the time to look at your own code. You passed to the function and forgot that it is a variable also. If you have any intention of not changing it then make it explicit and declare the parameter as in the method's signature. Also If I am correct then you have used only to make it one less than the so that your algorithm works. That means your function will break the moment you decide the startRange to be anything other than 1. Also using such magic numbers and such variable names as x is a bad idea. Really bad idea. Take some time to refactor the code yourself. It pays if your code is easy to understand by other programmers. Your code can be changed to this and I think now it is much easier to understand the flow of execution of the current program. 

I think you want an answer to instead of . No it doesn't become that. Simply stated divided by an can only give an . So becomes 0 point something which needs to be truncated to make it an integer. Hence . 

I wanted to know whether this can be written in a better way - according to either algorithm or Python. 

I have not made all changes necessary because many things are not clear. In the typecasting I have left the Model class as it is. You can simply get the class name at runtime to do the casting. A simple example for casting to String class at runtime is . But how will you get the name of the class as String in the sub-classes? I will leave that to you to find out. 

Your style is good. I had a little improvement for efficiency. Instead of using the condition for checking i as an even number you can instead use as a condition for checking i as an odd number. It reduces the number of comparisons and doesn't effect the functionality at all. It might not have the best readability but it improves time-efficiency. A simple comment can offset the readability lost. Also this seems like Python 2 so instead of using which returns a list you should use which returns a generator when you are looping. It costs a little time-performance but is usually compensated by the huge improvement in memory-performance. Also in the function you can probably eliminate the and variable by using something like