Deploying the stuff you need to move a job is pretty much just like packaging the stuff you need to move application code assuming that you correcly put all the new items and changes in source control. This includes your SSIS package, any object creation or alteration scripts such as tables, views, UDFs, stored procs, CLRS (Never ever create database objects using the GUI if you want to deploy later), any scripts to populate tables (such as lookup tables). You may need to number the items in the deplyment folder to ensure they are run in the correct order. Usually I write a deployment document as well because some of what we are deploying will go to differnt servers (Our ssis server is is differnt from our database server). You can also script out the job, but you will need to review and change the script for the new environment. I often find it just as easy to set up the job on the other server manaully (but I have dba rights to all servers, if you do not, you will probaly need to this). 

sorry if it's silly but I can't get the keyword to find it out ... 'group by minutes without collecting, list by minutes query mysql, order more than 60 minutes' were some searches I made. I'm using this for now, of course I know it doesn't work but I want to initialize from something, 

I have the cluster built by one MGM Node and two data/sql nodes When importing data to an node the importation crashes returning the following: 

The & don't write anything. Before the crash, both nodes have the same records. I google it but I can't find anything related. 

I have in I realized that when typing command logged as any system user I got access to mysql, despite I can only display and databases, how can I disable this accesses? I don't have those users registered on so I don't want this to have access. This is what happens 

I would go for the check constraints, you cannot be positive that records will never get manually entered or adjusted. Data integrity trumps avoiding nulls every single time. 

Are you backing up the transaction logs? Not the database but the logs? THe log will grow until it uses up the entire hard drive unless you back it up. I suiuggest at aleasta daily backup or more frequently if you havea lot of transactions. 

Employees can have more than one address, you should have a join table to address for the many to many relationship. The phone table is designed incorrectly. You do not want to add a column when you get a new phone type. The whole leave thing makes no sense. Please explain if this is a system to manage leave requests? You should have individual records for leave accumulated and leave taken. Do you need an approvals table? The balance shoudl be figured out at the time of query. The pormotions table makes no sense at all. You want a table to store the organizational position (And it should be a history table so it should have start and end dates). This table should be updated everytime the postion title changes (they are not always promotions). Same with salary, you want a start and stop date. You seem to be missing data on who the person reports to. Generally reporting will need to be able to sort through the reporting hierarchy. YOu also seem to have designed this solely on the basis of the data entry GUI. This is HUGE mistake of epic proportions. With this kind of information, reporting is a far larger problem and you need to consider reporting and how you will need to see the data over time. For someone who works for the comany for ten years, what type of information do you need to call up ablout his history? This is a business critical database and should have been designed by a professional database programmer. There are legal implications to this data, there are security concerns. How are you planning to protect this information? Pretty much all of this should be unavaliable to most users and admins. It should be encrypted. This is critical privacy data. Employee records typically include benefits information. They also typically include information concenring awards and performance appraisals and performance warnings. The use of ID as the PK is a SQL Antipattern ($URL$ You should use tablenameId. 

If the user just enters the busTime etc in minutes you can use an int, if you wanted to let the user enter in you can probably convert that to (int) mins, you are rather vague on how the user will interface with the database. To me this also makes more sense when reading the data i.e. rather then and makes it a tiny bit easier to query and aggregate. 

from your form, it looks like a measurement may have multiple ranges for the same suitability? you may need to add a sequence like attribute or further normalise if this is the case. 

Unlike the video, there is no difference between the number of logical reads between any of the queries as is. But, after playing around with the criteria and comparing results my reasoning for not seeing a difference comes down to 

Having a separate database for every user is an extremely bad idea. It will be a nightmare to keep up. Your database sounds teeny tiny, I would not worry about it causing problems to have one database. Databases can easily be designed to perform well with one database and can handle terrabytes of information speedily if properly designed. 

You don't want simpler, you probably need more complex. Invocing is a complex field that requires a good bit of accounting knowledge (knowledge of internal controls to prevent fraud in particular and how those would be implemented in your database). But lets start with a simple example, customers do not have only 1 address (or ship to only one address), so you should have a separate address table. You should have a separate phone table. You should have lookup tables for phone types and address types. You probably need product lookup tables. I can't say for sure in mysql, but float is generally an inexact datatype and should not be used for any number you intend to do calclutions with. Not unless you like dealing with rounding errors. Or losing money. Accountants tend to hate that kind of thing. Shipping address should be linked to the invoice not the customer. I may ship one order to a customer in Maine one day and another to a differnt person in Washington the next. I may ship to any one of my three offices or to my home or to my parent's home. How are you planning to maintain those updated by and updated date fields? They shoudl be in a trigger or they are useless. Normally products have some sort of product details that can vary such as color or size or no of items in the package. You have a description field for this but 80 chazractesr seems way too small to me. Truly you need to learn normalization before you even attempt to design a database, let alone one with serious legal implications. Taxes can be quite difficult depending on how many states or countries you are selling to and the typesof products you sell. Without knowing more detatils it is imposooible to design a good set of tables for taxes. There is no way under the sun that I would consider deigning such a thing without consultations with a good experienced accountant. Preferably one with auditing experience. There are many many professionally designed accounting packages that do invoicing, it would be cheaper and far better from a legal standpoint to buy one. 

I believe this could be done more simply by using globally unique identities for all entities. Avoiding any need to manage heirarchies while maintaining referential integrity between authorisation and entities. Create a table for globally unique id's of all entities 

the code for pivoting would read the first 40 lines into an array then just set the output columns mapping to the array's index. consideration may need to be given to insure the key remains unique on subsequent runs and may need initialising to the max(key) + 1 from exiting data, use an sql task for this. 

But this seems more simple then managing hierarchies. It could also be redundant if you chose to use s rather than an 'entity id' table. n.b. I have used the term 'entity' as what you have refered to as an 'object' 

THe following book talks about using ID as a SQL antipattern and I gree with the author that it is. $URL$ This is a particular problem when you are doing complex reporting and need more than one id as you then have to alias. Using tablename ID also makes it easier to identify the correct FK to join to (as they have the same name) and makes errors from joining to the wrong thing less likely. That said, many databases don't support the USING syntax which makes the problem you brought up not an issue for these databases.Nor do many databases support using a natural join which I would not recommend using in any even whatsoever as they join could change if the table structures change. So suppose you add a field called modifieddate to both tables, you would not want to join on that but the natural join would do so. 

I have a configuration. What I want is to create an auxiliary table only for a report project so it's not necessary to replicate it. Is there a specific way to make this in the line? 

Looking how to list minutes 1 to 120 from a 2 hour interval timestamp field instead of getting each minute from both hours together. What I want is something like this: 

As we can see in MySQL Documentation, the default for is 100, the default for is 4000, change this for the needed value. 

Can I improve MySQL CLUSTER performance with those editable variables down tag of of mgmt node or of ndbd node? The main reason of this question is that I'm getting ERROR 1205: Lock wait timeout exceeded; try restarting transaction when importing a 1.2 G .sql file. I can't find any solution to this refering to MySQL CLUSTER so I want to try with the variable, but I don know if it's compatible with. Will it accept those variables? 

The only time I would ever consider a delimted list is if there is no chance you will want to look at the data separately. Then indeed it is faster. This is a very rare case, however. And in what you are doing, there is an approximately 100% chance you will want to look at individual payments separately. Delimited lists are harder to query (and updating if someone made a typo, ugh) for individual elements (and generally slower for this than a related table would be) and harder to maintain the data integrity. Databases can easily handle many millions of records in tables that join with correct indexing and design. If you need more performance at that point typically, you partition the database. Sit down and read some books on database design and performance tuning. The rules for good design are different in databases than applications. Please take the time to learn them. 

I am following along with this video on SQL Server query optimization and I would like to check my understanding of the results I am seeing. I am using SQL Server 2012 with the AdventureWorks 2012 database. Testing the first three examples Example one: 

The first query in this example utilizes a seek but the second query in this has to scan and thus read more (all?) of the index. Questions: 

A problem could be you are trying to store the measurements in a single table that you are 'navigating' to via a suitability table. It makes sense but you may want to consider separate tables 

Is my understanding and explanation of what is happening correct? Are there any occasions when an indexed column can be involved in expression and still have its index 'seeked'? Does not having a clustered index on a table have any effect on the ability to use a seek?