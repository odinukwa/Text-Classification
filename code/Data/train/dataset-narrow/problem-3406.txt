Of those only the serial link actually needs to be "real-time" as the Pi acts as the I2C and SPI bus master. Being bus master means the Pi controls the I2C and SPI clocks and can be as slow as it wants. In fact I2C and SPI were both bit banged on the Pi long before the respective hardware drivers were integrated into the operating system. 

I had a quick scan of $URL$ 563 days was the longest I noticed in the post. The longest I've done is 35 days during a test. I normally switch off overnight. 

Unfortunately it looks like all the register addresses have changed. The peripherals base address for previous (ARMv6) models was 0x20000000. The new (ARMv7) model seems to have a peripherals base address of 0x3F000000. This will break all the existing low level C libraries (wiringPi, bcm2835, pigpio), bare-metal programs, and any code which directly accesses the peripherals. If this is the extent of the changes it is fairly trivial to fix. However it's hard to reconcile this change with the statement that no changes are required. 

The 40 pin expansion header provides power and ground rails as well as 28 GPIOs (general purpose inputs outputs). The GPIOs are controllable IO lines and as the name suggests may be individually configured to be inputs or outputs. The inputs may be used to read sensors such as switches, ADCs, thermometers etc. The outputs may be used to control motors (DC, servo, stepper etc.) and switch devices on and off via transistors etc. The possibilities are literally endless. Look through issues of the Magpi to get some ideas. One thing you can't do is SATA. You will not be able to write software to switch the GPIOs at the speeds you need. 

You can use pigpio wave chains to send pulses a precise number of times. However this is of no use for servos (unless yours has a special interface). Hobby servos work in one of two ways. 

I don't know anything about Simulink. However, my pigpio library will allow you to generate accurate square waves in several ways. I give Python examples, the same can be done from C or the command line. 

Not really a Pi specific question. I'd use the following command to identify the process name or number 

The power and ground pins are not GPIO. You appear to have shorted a LED between 3V3 and ground. That will have destroyed the LED. $URL$ 

60Hz means 60 PWM slots per second. Each slot will be 1000000/60 = 16667 µs long. A dutycycle of 5% will be 5/100 * 16667 µs or 883µs. 

Perhaps the GPIO is set back to INPUT mode when unexported. All GPIO have software selectable internal pulls to 3V3 and ground. They may be enabled in software to default the GPIO high or low in the absence of a stronger external voltage. When a GPIO is switched to an INPUT the default pull will then apply. In the case of GPIO 4 the default pull is high to 3V3. 

The Pi's gpios are 3V3 not 5V. I couldn't make out from the datasheet the needed current to operate the relay contacts. Assuming it is less than, say, 250 mA, I'd use a ULN2003A or similar to operate the contacts. It has in-built fly-back protection and can be operated by the Pi's gpios. I'm a software type though. There are probably better sites for this sort of question. 

I guess the problem is you instantiate the object and immediately try to configure the object. Perhaps there is a race condition. It might be worthwhile to raise a gpiozero issue to find the root problem. $URL$ As a work around try the following. 

I'm sure wiringPi can do this but you can read its documentation as well as I can. I wouldn't have thought mark space versus balanced would make a difference for 143Hz. The RPi.GPIO (Python) module is software PWM. My pigpio library will let you generate hardware timed PWM signals. To start a 143Hz square wave using the hardware PWM peripheral you can use the following command. pigs hp 12 143 500000 See HP for details. This starts a 143Hz signal on gpio 12 with dutycycle 50% (500000/1000000). 

Well you can't use the 64-bit version on the 32-bit Pi. By the way Raspbian also tracks jessie. I believe it's not the Foundation default because Mathematica only works on wheezy. Personally I'd download Raspbian wheezy and upgrade to jessie. 

You have not given enough details. The most important factor is the frequency of pulses. Is that 400 pulses an hour, a minute, a second, a millisecond? I am going to assume the pulses are too frequent and the Linux interrupt system can not keep up. Try one of the following examples to see if you get the same problem. C: $URL$ C + pigpio daemon: $URL$ Python + pigpio daemon: $URL$ 

The most likely explanation is you don't have your LEDs connected to (Broadcom) numbered GPIO 11/13/15 or they are incorrectly connected. 

I'm going to go out on a limb and guess that whatever you want will be handled by one of the software libraries mentioned at $URL$ 

The standard solution to 3) is to use an end stop microswitch. That solves 2). For 1) boot into the GUI (a option if you are using Raspbian) and search for auto-launch application is GUI tutorials. 

Try If you are always having problems you are probably always doing something wrong. Are you downloading packages from non-standard or non-Raspbian repositories? 

The official documentation is $URL$ It doesn't seem to have a traditional API style of documentation. 

For a serial link you need to connect one ends TX to the other ends RX and vice versa. From the photo you appear to have TX connected to TX and RX connected to RX. You shouldn't really connect the 3V3 line. That should only be used if the other device is not powered. The Pi is powered. 

Until you apply a voltage to the GPIO it will be floating and return random results. The normal method of applying a default voltage is by attaching a resistor between the GPIO and ground (pull-down) or between the GPIO and 3V3 (pull-up). If the other end of the switch is connected to ground use a pull-up. If the other end of the switch is connected to 3V3 use a pull-down. There are internal pull-ups and pull-downs you can enable via software (your GPIO library will provide a method). This ensures the GPIO stays in a stable state until overridden by the switch. Switches may bounce. However they only bounce when you are operating the switch. 

No, changing the range will make no difference to the underlying number of steps between off and fully on. The following table shows the permitted PWM frequencies at each sample rate. 

Is wiringPi installed by default in the distribution you are using? I'm not sure if it is currently pre-installed with Raspbian. If you are using Raspbian (or another Debian based distribution) try the following command. 

That is a radio transceiver working with the OOK (On Off Keying) method. I believe the transmitter sends carrier to indicate a signal (mark) and no carrier to indicate no signal (space). This is how remote control IR transceivers works as well. You need to connect a 17 cm wire to both the receiver and transmitter to act as aerials (the actual best length is slightly different, google if you need it). In the absence of a transmission the receiver will be picking up noise as its automatic gain circuitry searches for a signal. This will go once a transmission bit is receieved. static versus signal webm video To get usable data end to end both transmitter and receiver must agree a protocol. I know of several as I have written software for a couple. VirtualWire is widely used on Arduinos. I have written a Raspberry Pi VirtualWire Python module. VirtualWire webm video Another common protocol is the Manchester Encoded strings used by wireless keyfobs to control domestic appliances. Here are Python code and more recent C code examples to read/write wireless keyfob commands. 

There are all sorts of solutions. I will tout my own which uses my pigpio library as the back end. See pigpio CGI at $URL$ The pigpio daemon runs as root and controls the gpios. The web server software runs at an ordinary privilege. 

I'm not sure why you can't trap the error message. I would try tentatively connecting to port 8888 on the remote system before using pigpio.pi(). If the connect is successful it is highly likely that the pigpio daemon is present and running. I will probably add an optional parameter to pigpio.pi() to disable the error message. The default would be to display the error message. There is a connected instance variable which is true if the connection was okay. 

I haven't looked too carefully at your question but it seems to be related to a feature or bug or whatever you choose to call it of some MCP23017. The answer seems to be don't use A7 or B7 as inputs. See $URL$ 

man pigs or pigs for details. Another alternative is to use the pigpio Python module which sets the correct modes for SPI anyhow. 

The whole point of I2C is it is a bus. You can therefore connect multiple I2C devices to the same GPIO provided they have different I2C device addresses. If the devices share an address which can't be changed you can use an I2C multiplexor chip to typically connect 8 devices to the same I2C bus. You send a command to the multiplexor to specify the device to be addressed. Recent Pi kernels directly support the following devices with device tree. 

The Pi2 and Pi3 are different. They have 1GB of RAM located on the underside of the board. My Pi2/Pi3 RAM chips are marked ELPIDA B8132B4PB (a 168-Ball Embedded LPDDR2 SDRAM). 

The value 0x40046b04 is the value of macro SPI_IOC_WR_MAX_SPEED_HZ and there have been no changes there. Are you sure spidev is an open descriptor for a SPI device? 

I'm sure it can. It doesn't appear to do so by default on the current Pi 2 B. I just compiled the same sources on a B+ and a Pi 2 B. B+ 

If you disable the use of the UART as a console you can use it in any way you please. There is an option in raspi-config for this purpose (). Since you now control the UART it is up to you to handle all bytes sent and received. You can also implement a "ping" command to check if the other side is "up". 

The Pi hardware outputs composite video and HDMI (and can output a low resolution VGA if you are prepared to sacrifice most of the usable GPIOs). Some LCD screens may be driven from SPI, I2C, or parallel GPIO. They tend to be medium to low resolution. They use driver chips such as agm1264k, bd663474, hx83xxx, ili93xx, ili94xx, pcd8544, ra8875, s6dxxxx, ssd1xxx, st7735r, tinylcd, tls8204, uc1701, upd161704, watterott. Unless your LCD screen accepts composite video, VGA, or HDMI, or uses one of the mentioned driver chips it's probaly best to think again. 

You can NOT power the Pi from GPIO. You can power via the power rail pins on the expansion header. All the pins on the same power rail are connected together. It does not matter which particular 5V pin or ground pin you use. 

EDITED TO ADD C EXAMPLE This shows the patching of the last few DMA control blocks to repeat the final step. 

You have misunderstood how PWM is used to control DC motor speed. To control the speed you vary the duty cycle, not the frequency. The frequency should be fixed at a reasonable value for your motor driver board. Say anything over 100 Hz. A duty cycle of 0% stops the motor. A duty cycle of 100% sets the motor full on. The voltage applied to the motor will be roughly supply voltage multiplied by duty cycle percentage divided by 100. The motor will start spinning at some value of duty cycle above 0%. From that value to 100% duty cycle the speed increase will be fairly linear. An example using PWM with a L298N based driver board. 

Is this correct? Do I, in fact, need a breakout board to use a servo on my Pi? This example I found doesn't appear to require a breakout board, but it still contains an extra power supply. Why did the makers of the Raspberry Pi do this? It seems like poor decision making to me. I tried to look online for a servo motor that takes 3.5 volts, but I wasn't able to find anything. Has anyone been able to circumvent this problem? 

The Pi only has digital I/O (all the GPIO are 3V3 digital only). So you need an external ADC if you wish to read an analogue voltage. If you read a GPIO frequently enough (or react to level change interrupts) you can interpret PWM inputs. In practical terms you are probably talking about PWM frequencies of less than 100kHz. 

On Raspbian members of group have access to the I2C devices. If you are using Raspbian you could make a member of the group.