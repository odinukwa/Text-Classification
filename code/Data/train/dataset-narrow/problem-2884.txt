visually this rotations are equal, but when I get angles 2) from quaternion and increment them it starts rotating in oposite direction, next frame rotation is again as 1), so there is infinite loop at this rotation (some kind of black hole;-)). What can it be? Something wrong with math? 

I have a lot of minuses on this question, but I tried to use reference counting on my entities and components, and now I like this approach very very much. So if someone is interested, I stopped on using reference counting on these objects. I used this approach a bit and see now a lot of benefits and hope in future there won't be problems. 

After some rotations and to from quaternion conversions I get negative scale from Matrix 4x4, is it possible? I need that scale to draw sprite on screen so I get sprite flipped, how to deal with this problem should I just handle negative scale in sprite drawing method. if MatrixHasNegativeScale then invert scale, draw sprite with inverted scale after m4.initWithHeadPitchRoll(0, 0, 180); I already get negative scale. or something wrong with matrix class? Edit I create transformation matrix(rotation + scale + translate) rotation around Oz by 180 and when I extract scale from it, it has negative value is it normal? 

I kept investigating this and will post this for benefit of someone that has the same question. Seems like the right answer to this is to skip the ContentPipeline and use Texture2D.FromStream to load the textures at runtime. This method works fine in a PC and even though there will be a small performance hit this is something that I can optimize once I'm closer to the release date. For now, having the ability of dynamically modifying the content for both the editor and game are exactly what I need. Once the content is frozen I can optimize this by going back to the ContentPipeline. 

You should check out this tutorial by Ray Wenderlich. It uses Cocos2d + Box2d to show how to write a game like Tiny Wings. The first part of the tutorial explains how to create dynamic textures: $URL$ Second part is how to use Box2d for the gameplay: $URL$ 

Did you search in the interactive fiction community? They still write parsers and some try to push the envelope by implementing new techniques such as natural language processing. See for example this link for articles describing approaches used: $URL$ 

On tile based GPUs (commonly seen in mobile hardware) it is beneficial to clear the renderer, as it allows the GPU to dispose of the existing cached frame data. Here's a quote from OpenGL Insights, dealing with the benefits of clearing the framebuffer on a tile based renderer: "On a tile-based architecture, avoiding clears can be disasterous for performance: since the frame is built up in frame data, clearing all buffers will simply free up the existing frame data. In other words, not only is glClear very cheap, it actually improves performance by allowing unneeded frame data to be discarded." 

You need to ensure your game will run properly on the NES hardware. With many 8 and 16 bit consoles, there are limited times you can access the hardware registers. Accessing registers outside the allowed time often results in the program not displaying any output. One emulator to consider is no$nes, another is fceux. The no$nes will warn you if you violate many of the rules. The fceux emulator is probably more accurate but will fail silently if you violate the rules. The next, or possibly first, thing is to determine which mapper mode you will support. This basically determines how rom or ram are mapped into the CPU and PPU (graphics chip) space, the number of memory banks available, and how the scrolling tilemap will be repeated. When you're ready for the technical details, check out the Comprehensive NES Mapper Document. It's quite technical, but is required knowledge in developing a NES cartridge. The final step is getting it on the cartridge. There are a few options, one is the INL-ROM NES board, which can be purchased with a flash rom for easier testing. Once your game is running, you can buy the same board and program and solder your own EPROMS into the board. If you're really interested in NES development, visit the NesDev forums. I developed a game, called Frog Feast, that ran on the SNES, Genesis, Atari Jaguar, and Neo Geo. A friend created physical versions from old game boards. 

You need a vector representing your velocity. This vector will modify your position every time the update method is called. Then in every update check if the player is not touching a platform. If he is not then modify the velocity vector by some positive Y amount (this is gravity) Once you have that all you need to do is detect when the player collide swith a platform and modify the velocity with a negative Y value (this is your jump) 

It's a very open question. Here are a few references I've found great for writing my always in progress engine :) Online references: 

Actually that "while loop" that you wrote there is the source of your problem. GetMessage puts your application to sleep until a message arrives. This is good for GUI applications but obviously is not good for games. The right way of doing the game loop is using PeekMessage instead so that your application is not put to sleep and can just keep spinning. Here is the loop that you can see in DXUT and in most DirectX samples: 

This is not trivial. In general you want to make your game predictable. You also need to synchronize the clocks in both clients. If you do this there is no need to send the asteroids position every frame because both clients will be doing the same simulation. After a given number of frames you make sure that the simulations have not changed. Once you have done this you can send each player input and repeat the simulation of what happened in the other client exactly. This is one of the most known articles and a good introduction. It's a postmortem on how they built Age of Empires multiplayer. You can also check this fantastic one. The author has written a multiplayer Asteroids game. There is a second article in his website with more details. 

With your Physics you subscribe to changes of your Transform component. So when transform position changed directly you Physical part also moves. And after physics simulation you can directly change Transform->position from Physics, because entities which have Physics will always have Transform. What about direct moving of objects without physical simulation, you can use Kinematic bodies most of engines provides their support. Or you can directly write your position+=velocity in any your script. Or create some BasicPhysics component and then just adjust properties. 

BasicEffect is shader program. So it is resource it must be single( to save memory etc). And parameters are passed same as in function. 

I have Transform component storing it's rotation as Quaternion. Transform has set/getEulerAngles (rotation order oy, ox, oz). I want to rotate object in any direction but while testing I get jumping(glitch) objects stop rotating at specific angles. Euler angles in problem frames: 1) oy 0 ox -90 oz 0 - previous frame. 2) oy 180 ox -90 oz 180 - next frame after incrementing angle of the object. my increment looks like: 

You can use factory method or you can use array of objects prototype pattern (prototypes or templates, how to name them your choice) from which you create objects just copying and instantiating if required. I've seen only this two ways of problem solution, if someone suggest another one I'll be glad to see them (possibly they are better) 

My game uses the Content Pipeline to load the spriteSheet at runtime. The artist for the game sends me the modified spritesheet and I do a build in my machine and send him an updated project. So I'm looking for a way to generate the xnb files in his machine (this is the output of the content pipeline) without him having to install the full XNA Game studio. 1) I don't want my artist to install VS + Xna (I know there is a free version of VS but this won't scale once we add more people to the team). 2) I'm not interested in running this editor/tool in Xbox so a Windows only solution works. 3) I'm aware of MSBuild options but they require full XNA I researched Shawn's blog and found the option of using Msbuild Sample or a new option in XNA 4.0 that looked promising here but seems like it has the same restriction: Need to install full XNA GS because the ContentPipeline is not part of the XNA redist. So has anyone found a workaround for this? 

This question might be too general to give an answer that fixes your problem. Before using profilers I would recommend adding 1) Lots of tracing statements to your program and 2) ability to turn on/off features at runtime (including tracing but also things such as textures, culling, using very simple meshes, etc). I've found doing these 2 makes it much easier to pinpoint performance problems in my games. That being said, you do have other options depending on your target platform. Since the problem might be environmental and assuming you are targeting Windows (big assumption I know) you might find using xperf valuable. xperf is a system level profiler that will tell you everything that is happening in your computer and has a low impact on the programs that are running. Bruce Dawson's blog has a lot of very good tutorials and examples (such as finding performance problems in random programs such as Powerpoint or backup drive ). One trick he mentions is having xperf running all the time in a circular buffer so that as soon as you are able to repro the problem you will have a snapshot of everything that was happening in the machine. 

So you have to take care about constant physics step. Sometimes for example it can be called 2 times per rendering frame. You wrote: 

I want to make my body fly at constant speed, how to make it fly at constant speed before and after collision? I set restitution of my body to 1.0 but after some direct and powerful collisions my objects begins to slow, I want it to fly same speed as before. I heard this can be done by setting liner damping of the object, I think it can prevent only from fast flying objects not slow. Thanks in advance. Edit* I can simply modify velocity of the object every frame, is it a solution? 

When I started to develop my game engine, I created StateManager and BaseState class, but further I found it extremly unpractical, and removed state management completely. Now I simply use SceneManager loading, unloading scenes. Main problem was transition between states. Now, I just use substates inside scene and that's all 

Instead of using tilemaps you can use general objects transformations. Like: house01 x:151 y:150 angle:30. Also you can generate your map on the fly. In storing map as bitmap you use 32bits per pixel for example, and in the simpliest tilemap only 8bits(ASCII char). And using bitmap for map generation it's just a way for storing data. Anyway your engine will interpret data as required, so your idea is right about save/load tilemap.