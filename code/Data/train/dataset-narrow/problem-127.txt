You can set the config register, then reset to boot up with the image on the device, ignoring the startup-config: 

This seems to be a rather poor design that is simply contrived to demonstrate something. In reality, you would probably have R6 with at least one interface (possibly Lo0) in Area 0 so that it is an ABR (backbone router), too. You would then need a link between R5 and R6 (either a physical connection, or a virtual link) because you cannot have a split Area 0. 

This question is really off-topic here. All "education, certification, or homework" questions are explicitly off-topic here. Your answer is partially correct. I'm not going to do your work for you, but I will explain how to arrive at the correct answer. Don't confuse different network layers. Ethernet is a layer-1/2 set of protocols, while NAT works at layer-3/4. Packets are layer-3 datagrams, and they contain the source and destination layer-3 (e.g. IPv4) addresses. Frames are layer-2 datagrams, and they contain the source and destination layer-2 (e.g. MAC) addresses. Packets are encapsulated by frames before being placed on the wire. Ethernet doesn't care what upper-layer protocols it carries. It can carry various (IPv4, IPX, IPv6, etc.) layer-3 protocols, and it doesn't care. The upper-layer protocols are just the payload of ethernet frames. Also, IPv4 doesn't care which layer-1/2 protocol carries it. IPv4 can be encapsulated by many different layer-2 protocols. In your diagram, the link between the two routers could be something like frame-relay over a serial connection, and that doesn't use MAC addresses at all. MAC addresses are confined to the LAN on which they originate: they are the addresses used on layer-2 domain, but they do not cross layer-3 devices. When a layer-2 frame gets to a layer-3 device, e.g. a router, the frame is stripped, the packet is switched to the next interface, and a new frame for the new interface is created to encapsulate the packet. The layer-3 address is translated before the new frame encapsulation happens. 

Another, often overlooked, problem with outdoor Wi-Fi implementations is distance. Wi-Fi performance degrades with distance, even at distances within the specifications, and especially at higher frequencies. Wi-Fi was designed to operate up to 100 meters, just like UTP, but it will not deliver full performance for the full 100 meters. I have seen it work at much longer distances, but the users complained that they were not getting advertised data rates at several hundred yards. They didn't realize that they had far exceeded the specifications and asked how to boost the power so that it works better. They wanted advertised data rates regardless of the distance from the single AP they had installed. It's not just the radio(s) in the AP(s); the radios in the clients need to be able to reach the AP(s), too. Boosting the AP radio power doesn't doesn't change the capabilities of the radios in the clients. 

STP, including RSTP will fail over the slowest. Routing protocols come in second place. By far, the fastest failover is a port channel. As long as even one link in a port channel is up, the port channel remains up. Port channels can either be layer-2 or layer-3 port channels, but the net effect is the same. 

You really don't have much to say about the path incoming traffic takes in the Internet, and you need the cooperation of the peer ASes. Your communities mean nothing to any other AS unless you have an agreement with that AS for what they mean. This becomes exponentially more complex if you are trying to do this with multiple peer ASes because you need to convince one AS to not send some of your traffic to your AS, but to a completely different AS. If you only have one other peer AS, you can probably negotiate with it to use MED, but that is not something you can use with multiple ASes. A typical way to do this is to advertise your prefixes with your AS tacked on multiple times in the AS_PATH toward the least preferred AS. This usually works because your prefixes will be advertised with a longer AS_PATH by your least preferred peer AS. You could also simply not advertise prefixes out some peer AS connections, but this doesn't really give you a failover option. 

You can't just make up a subnet address and mask like , you actually should mask the address to see if you got the subnet. In this case, you didn't. 

If you have not previously configured a switch to be in a VTP domain, it will become part of the VTP domain from the first VTP advertisement it sees. See the sections which I emphasized below: Configuring VTP: 

Switches don't have ARP tables, nor do they care about IP addresses. A switch will have a MAC address table that has a MAC address and the switch interface where the MAC address came in as the source MAC address. The switch MAC address table contains a single entry for each MAC address. When you spoof a MAC address, it messes with the switch MAC address table, causing the interface for the MAC address entry in the table to keep changing. MAC address spoofing is really about network disruption, rather than information theft. Multiple hosts claiming the same MAC address will cause the switch MAC address table to constantly change; some frames will go to one host, and some frames to another host. When you use ARP spoofing, you are really spoofing the ARP cache in a host. The host with an incorrect MAC address for an IP address will send traffic for that IP address to that MAC address, and no other. This only works on a single LAN. If you are doing this across LANs, then you have a different problem: MAC addresses are only valid on the LAN where they exist, and any traffic destined for a different LAN gets sent to the MAC address of the host's configured gateway. You could spoof that, but then nothing from any host with the spoofed gateway MAC address will ever get off the LAN to another LAN. 

This really has nothing to do with TCP, or any other layer-4 protocol. For the most part, this is done simply through policing (dropping) any inbound packets that would exceed the bandwidth limit. Outbound packets could be policed or shaped to a specific bandwidth. Shaping does use queues, but queues are finite and fairly small, not like the buffering you see for watching a video, and when a queue gets full, the traffic to be queued gets dropped. There are multiple shaping strategies. ISPs tend to want things simple, and most probably just use policing. The whole QoS concept is far too large to explain in this site. There are entire books on QoS that have chapters on policing and shaping. You could do some further research on those concepts. How each ISP does this type of thing may vary from ISP to ISP, and networks not under your control are off-topic here, so we can't tell you what any particular ISP does for this. 

Without changing any defaults, the same routes as learned by EIGRP and OSPF will install the EIGRP routes in the routing table because the AD for EIGRP is lower. 

You asked about these specific models, and that is on-topic, but product and/or resource recommendations are off-topic here. 

I think you may be confusing the VLAN database MTU and the interface MTU. Pay special attention to the note at the end. Enabling jumbo frames in the VLAN database for a VLAN will not suddenly cause all the switch interfaces in that VLAN to be enabled for jumbo frames. Jumbo/Giant Frame Support on Catalyst Switches Configuration Example 

As far as I know, Cisco VPNs do not allow split tunneling, and even actively remove that from your PC configuration if you add a route to do that on your PC. This is a security feature. It prevents you from setting up a backdoor to/from the office network and the public Internet, which which makes the office network vulnerable. If the network administrator sets up policies for controlled Internet access, split tunneling can be used to bypass the security and policies set up by the network administrator. 

That isn't even close to reality. What if your company has multiple web servers. Which one gets to use TCP ports 80 and 443 for web service? Those are the ports that customers will try to use. IPv6 gives us enough IP addresses that NAT is unnecessary and undesirable, and it restores the IP end-to-end paradigm. 

The letter is really only significant when you order the device because you can change the license, but the hardware doesn't change. 

You misunderstand how the solicited-node multicast addresses work. Each host could have a different solicited-node multicast address. A solicited-node multicast address is based on the IPv6 unicast or anycast address. From RFC 4291: 

It really depends. If you have any network which should be protected from any other network at your site, then you can use a firewall. For instance, many companies isolate labs from the other networks by placing a firewall to protect the production network from the lab network. 

When most people refer to a Network Interface Controller, they mean a single port. Some people use the acronym, NIC, to refer to this, or to Network Interface Card which may actually have multiple interfaces. There are corner cases which blur the hard lines you may want to draw. For instance: Generally, each controller (not card) would control a single interface, but there are things like switches which may use ASICs controlling multiple ports. In such a case, you must consider the "controller" broken into is individual parts, with a PHY on each physical port. Each physical port may still have its own MAC address, but the overall controller could be considered to have multiple MAC addresses. When you refer to a computer, I assume you mean a PC or end-user workstation. Most PCs have individual controllers for individual physical interfaces, but there are some specialty cards which can be used, in conjunction with software, to turn a PC into a router or switch. Each physical port would still have a MAC address. The IEEE 802 documents explain all the pieces and parts of the software and physical parts and requirements for controllers and interfaces. 

The ability to determine how many more packets are expected is determined by the transport-layer protocol, or the application-layer protocols (off-topic). For instance, UDP is a best-effort, fire-and-forget, transport-layer protocol which has no such ability because the receiving UDP is not even really expecting to receive any more packets; that would be up to the application-layer protocol (off-topic). A message from an application will be divided into segments by the transport-layer protocol. The segments, including the transport-layer header must fit in the payload of a packet of MTU size, which must then fit within the payload of a frame for the link. You need to know the header size of the transport-layer protocol, and the payload size of the network protocol for that link type in order to determine how many packets are needed for the message. It can get messier if one of the links in the path has a smaller MTU size than the original link. This can cause fragmentation where the larger packets need to be fragmented to traverse the link. The receiving host will need to reassemble the packets making up the fragments of the original packets. Each fragment is a packet, so are you counting them as packets?