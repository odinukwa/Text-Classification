Now, if you really wanna do complicated math stuff functionally, I suggest making your own library, that way you get the benefit of learning how to do it with "vanilla" JS and you get to use the functional approach at the same time. That's what I'm doing. 

I personally would prefer the first one as it prevents you from having to define a variable and then immediately garbage collect it, which means it will be a little faster. Additionally, with the first one you can omit the parentheses: 

Putting a function inside the jQuery function is shorthand for , they are the same thing. So, the answer is: yes, it will be more efficient. jQuery's method just waits for the DOM to be ready before firing the code inside but when it comes to setting event handlers, you actually don't have to wait for the DOM to be ready at all. jQuery allows you to attach your events to the object itself and when those events bubble up, jQuery will call them. So instead of using 

This should give you that boost you need. Alternatively, instead of using charts, standard Google Maps might be faster, or even static maps, which is focused on being fast. 

Condense all that duplicated code. Don't concat your strings like that. Every time you do that that string has to be re-loaded into memory all over again. It's more efficient to put your string pieces into an array and then join them later. 

The second ternary operator contains invalid HTML. must be a child of or , not another . Using seems like overkill in the loop. it would be faster to just use an operator. Also, it's generally better practice to creatte and append to an array than to a string. Every time you add to taht string in that loop, the entire string has to be loaded into memory all over again. It's much quicker to use a buffer liek this... 

I would say, yes, definitely. That saves a lot of manual code writing and makes it easier to change in the event you need to change all of them. The only difference I would probably make is, add your different properties when you create the object, that will not only slightly improve speed, but will also make the code a tiny bit smaller. 

Any parameters that are required for the class to function should be passed into the constructor. That's what it's for. If you're still constructing the class by setting things after the constructor is called then you're not using the constructor properly. Sending a buttload of arguments is a crappy idea too. If you have a class that needs lots of data to construct, consider using an array. 

You're not using your parameter and you're only allowing a single receiver. Check out the manual and you'll notice that you can have multiple recievers and you can specify a name for each one in the following format: 

The reason your page is initially loading without styles is because you programmed it to wait for he DOM to load before loading the styles :P 

Your code is difficult to follow as you have a class with one single, very long method. Break that method up into several methods, you will thank me later. 

This is 4 lines compared to your 8 and it only registers a single function in the event stack. Major memory improvement. And this code does not require the DOM to be loaded first. 

Note that you should keep the parentheses if it makes the function easier to read, in this case, in my opinion, it does not. 

Now, not only will this be easy to read and maintain, but NetBeans will actually parse these comments and show you what parameters are required when you start to type the method name: 

If you want it to work for both request types then why are you only validating ? That's a major bug. If GET is used none of the input will get validated. To fix that, I would suggest creating a method to determine if the form has been submitted, maybe something like... 

No, this is not the "normal" way to build a responsive website. "Normally" people use frameworks that are built specifically to remedy this problem. Bootstrap, made by the guys who run Twitter, is the most popular responsive framework. Basically it's a set of styles and (opionally) javascript that you include in your sites and then you just add class names to your HTML depending on how you want things arranged. It's really easy to learn and use. Much easier than writing 1000s of lines of JS or CSS. 

I would say yes. Loading anything synchronously means longer load times for the user. Synchronous XHR has been deprecated for a while now because it provides a "bad user experience". 

Here's a function I wrote to include jQuery and stuff in userscripts, feel free to take it or parts of it. 

So, your stack is storing three different types of things: , , and . These things are repeating in that specific order in a single stack. This seems like a very fragile system, if one thing is added or removed without the following two your software will break. Since these three items are always added and removed together you should group them so each set of three is always together and your order is never broken. 

Stripping tags (DEMO) All that's left to do is diff the array of tags to remove with the array of tags that exist to get an array of allowable tags. Then using a clever we can generate the second parameter for . 

I recently implemented this same thing, here's what I used. Main difference: Let the for loop do the math for you. By the end of the first loop, if there is half a star it will be in the variable. Use an array to buffer your string (or create DOM objects instead, don't use to build a string). 

You can also clean up a little bit by putting the div on the outside of the logic instead of duplicating it. You'll get an empty div there if the form is not submitted though, so consider that. 

You don't need the element to exist before applying event handlers. For example, in jQuery, rather than writing your handlers in a you can attach the handlers to the document and wait for them to bubble instead, like so.. So, in jquery, 

If I understand correctly, each test can only return a single result, therefore if you want to evaluate all list items you would have to make a test for each one. You could also create a separate test for all of them. Disclaimer: This code may or may not actually run, I've never used Jasmine, but it should hopefully at least get the point across 

There is no reason for a heredoc here since you're at the end of the script. Just close the php tag and put the stuff after that (replacing the curlies with and ), that way you don't have the PHP interpreter interpreting things it doesn't need to interpret. 

Some people would disagree with me, but I personally prefer to define my vars all at once, and to keep the functions separate from the variables. Also, I would use for the functions.