Solution to bounded knapsack 01 problem. Once again comprehensive description is difficult in this space, refer here. Looking for code review. optimizations and best practices. 

Given a singly linked list, swap kth node from beginning with kth node from end. Swapping of data is not allowed, only pointers should be changed. 

Given a set T of characters and a string S, find the minimum window in S which will contain all the characters in T in complexity O(n). eg, S = “ADOBECODEBANC” T = “ABC” Minimum window size is 4 - “BANC”. 

Why I don't extend or reuse: I am prepping for interviews, and interviewers explicitly want you to code, in my experience. I request the reviewer to not insist on reusing, as I am aware in real life reusability is the right approach. This does not work in interviews. Why don't I use a class instead nesting method inside linked list? That is because I need the to be an internal data structure. Had I made a class, it would have no access to internal data structure and perform operations on the node's pointers. 

Your code works well for all the cases. After many tries and tests, I obtain two different ways to write the function. The first comes from your approach with several changes. I have, in particular, removed the test for foreign characters from the main loop: 

About pattern performances: Remove all that is useless, don't capture when you don't need to capture, try to limit the number of groups, branches in alternations. Be careful with subpatterns references : even if the pattern looks shorter, it has a cost (the creation of a capture group, the call to the subpattern). Also, rewriting the subpattern is better than adding a quantifier to it: (one call per repetition). One of the main cost in a pattern are the alternations in particular when they are at start the pattern. The reason is easy to understand: in the worst case, each branch is tested for a position in the string that doesn't match. Obviously the best cure is to avoid them, but unfortunately it isn't always possible. You can also try to reduce the number of branches. However, several tricks exist to reduce this cost: 

Given the binary Tree and the two nodes say ‘a’ and ‘b’, determine whether the two nodes are cousins of each other or not. Two nodes are cousins of each other if they are at same level and have different parents. Looking for code review, optimizations and best practices. 

This code is attributed to geeksforgeeks. I'm looking for code-review, optimizations and best practices. 

Given a binary tree, return the next right node. This question is attributed to GeeksForGeeks. For example, consider the following Binary Tree. Output for 2 is 6, output for 4 is 5. Output for 10, 6 and 5 is NULL. 

This code detects cycle in acyclic graph. The assumption of this approach is that there are no parallel edges between any two vertices. Looking for code review, best practices and optimizations. Also verify the complexity is O(E) and not O(V+E). 

Implemented iterator for a binary tree and "pre" "in" and "post" order flavors. I'm looking for code review, best practices, optimizations etc. 

Convert a sorted linkedlist into a balanced binary search tree. Looking for code-review, optimizations, and best practices. 

Inside of a folder named I have 138 text files (totaling 349MB) full of email addresses. I have no idea (yet) how many addresses there are. They are separated from one another by line breaks. I created the following script to read all of these files into an array, dismiss the duplicates, then sort alphabetically and save in groups of 10K per csv file. It works correctly, but it has also been running for over 8 hours (dual core i3 w/ 4 gigabizzles of ram, sata 7200 hdd) which seems excessive to me. also tells me that my program's CPU usage is 100% and it's been like that the whole while it's been running. Give my script a looksie and advise me on where I've gone so terribly wrong. 

I should preface with the fact that I don't know python. It's likely that I've made a very clear error in my following edit. Generally though, I prefer your second function to your first. If python allows, I would break it up a bit for readability. Why do I like it? It doesn't need the keyword and it's less nested. 

First step, start with a simple solution: divide all in simple tasks, keep the patterns short and easily understandable. 

(Note that when you pass a string to the RegExp constructor, you need to escape the backslashes, since to figure a literal backslash in a string you need to escape it.) ( is a method, not a method: ) 

The second approach is totally different and uses a regex approach. If it uses more memory (~3X) and is a little slower when you try it only one time with a little string (less than 10 characters), it becomes faster when you use it several times (whatever the size of the string) and is more efficient than the other way with long strings whatever the number of attempts. In other words, you need to pay the cost of the regex engine, but only one time. 

The main problem of your code is that you performs two replacements for each strings. Indeed when you pass arrays as pattern and replacement parameters to , the whole string is parsed once per item. These two replacements are not needed. You can avoid them if you replace all groups of characters that are not letters or digits with an underscore: 

Example: If a linkedlist list contains 10->20->30->40, and 2nd node has to be deleted then the output should be 10->30->40 This question is attributed to Geeksforgeeks. Looking for code-review, optimizations and best-practices. 

Finer details such as tie-breakers, rules of input params etc, are well documented. Looking for code review, optimization and best practices. 

Given a linked list of 0s, 1s and 2s, sort it. Looking for code review, optimizations and best practices 

Find ceiling and floor in the BinarySearchTree. Looking for code-review, optmizations and best practices. 

There are n balls kept on a table and connected by same singe connected string (which can be cyclic or maynot). Write the code to select a ball such that after lifting the whole structure from that ball height will be minimum. (algo+code+ mathematical proof of correctness) Note, I do understand merits of unit testing in separate files. But deliberately added it to main method for personal convenience, so request you don’t consider that in your feedback. Looking for request code review, optimizations and best practices and complexity verification. 

Left view of a Binary Tree is set of nodes visible when tree is visited from left side. Left view of following tree is 12, 10, 25. 

I've been rolling around several ideas or approaches in my head, and none seem any more useful or "right" than another. I'm sure this is extremely objective but I'm looking for a close-to-definitive answer on the object oriented approach to large block string storage and output in PHP. Given the following example, how could I change my approach in a way that might cause Zeev Suraski to pat me on the back and say Mazel Tov (beside using HTML5)? 

I'm just waiting for this answer to get flagged as not being helpful. Serves me right for putting my two cents in when I don't even know the language. ;) 

The general theme I'm going with in this example class is that on construction, html is stored in a variable via output buffer and then returned by a public method. When evaluating this code, consider that the html will not be static. Page title, description, keywords and the such will be subbed out with dynamic property references. My overall question is: In object oriented programming, ideally where should the output be stored? PHP's class, however useful, doesn't really answer this question for me. Also in this instance, is there any best practice trade-off between using an output buffer and heredoc syntax? Thanks in advance for your guidance! 

Here you can find a test script for the different pattern sets, (you can also pass a callable to the constructor instead of an associative array of pattern/replacements) and useful functions: $URL$ About ReDoS attacks: Except if you finally choose a pathological pattern and doesn't limit the size of posted data, I don't think it's possible to crash your script with your patterns set. It isn't so expensive to run, no more than any other script that filters and validates form data. Other thing, when a pattern is badly written it reaches quickly the backtracking limit, the script doesn't crash and a warning is emitted. You can even retrieve the error using . If you want to increase the security against DoS, start at the server level, with the apache settings. 

First, is the literal notation of a RegExp object and not a string, is a string and nothing more. If you want to concatenate several strings to build your pattern and then to obtain a RegExp object, you need to use the constructor: 

Note also that the escape sequence isn't a character nor a character class but an alias for or (depending on the mode). In other word is an hidden alternation. I build a set of patterns/replacements that fits your requirements to illustrate these techniques: 

This program connects all nodes of the binary tree at the same level. A node of a tree contains a left, right and a sibling pointer which would connect it to the next node at the same level. This connection is from left to to right. Example: consider a binary tree with parent as node A and left and right child as node B and C. then this program joins B.sibling to C. If the immediate sibling is null, then it is skipped. More details if needed can be found here. I'm looking for code review, best practices, optimizations etc. 

This question is attributed to geeksforgeeks. Looking for code review, optimizations, best practices. Please ignore reviews which include improvements to class / variable names. They are named so for personal reasons and well aware they need to be better. 

A BST has two nodes swapped. Figure out which two nodes. Looking for code-review, optimizations and best practices. 

The question is attributed to GeeksForGeeks. Since the code dictates not additional data structure, I am forced to extract out TreeNode class outside, rather than keeping it as an internal data structure. Looking for code-review, best practices and optimizations. 

PS. I wrote this script in haste to accomplish a task. I can understand if you wouldn't consider this script distribution worthy. EDIT: So I arrived at work today to find my script at some point exceeded 536MB of memory and quit on fatal error. I had already increased my ini file's parameter from 128MB to 512MB. This doesn't necessarily reflect an issue with the script itself. I just wanted to share my frustration with the task. 

Generally speaking, I like your code. I think it's well planned with few inefficiencies. I'm also impressed by your use of PHP's class. When creating XML via PHP, I usually opt for loops and output buffering. I've been aware of this object class, but your example is the first I've ever seen it put to use. +1 for showing me something new! :D 

For someone who is just picking up the language, I'd say you're off to a great start. Don't be afraid to abstract the different pieces of your program logic to many separate files and including them only when needed - It will make future revisions much less of a headache. When you are dealing with large blocks of output data like in your switch statement, PHP's output buffer can be your greatest friend. Your program also presents a great opportunity for you to get acquainted with the extension - its relative purpose is structured output. Referencing what @php-coder suggested, once you get comfortable working with a database, you can start abstracting your application into purpose-driven layers - The Model-View-Controller design pattern is a pretty common method among popular PHP frameworks. PHP 5.3 and its common extensions host roughly 1,300 built-in functions - Have fun with it; it's a great language! +1 for your first review. Edit: How to style your code is normally a matter of personal preference and readability, but if you are looking for some general guidance, take a look at the Zend Framework Coding Style Guidelines. It's mostly just a reference for ZF extension authors, but it's none the less helpful for general interests. 

Whatever the result, it's better to begin with that before trying anything else, particularly to avoid spending time with a set of complicated patterns that, in fine, might be slower. This is essential for future comparisons and provides quickly a working solution. A mix with classic functions is also possible: 

About the readability, no need to make things more complicated than they are, a simple comment before the line should suffice. Since escaping special regex characters is a basic task, and if you project to use it several times, you can build a function: 

About special characters: , and are not special characters and don't need to be escaped. Note that is read as a literal character too, but only if it isn't the start of a quantifier , , . Except for these special situations, you don't need to escape it when you write a pattern by hand, but here it's easier to escape it systematically instead of testing if it is or not the start of a quantifier. (if the escape is useless, it will be ignored) Since you will use the RegExp constructor with a string as first parameter (Since ECMAScript 6, this parameter can also be in literal notation), you no longer need to escape the delimiter that is only used in the literal notation. You can remove it too: