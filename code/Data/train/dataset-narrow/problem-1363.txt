First of all, there are only three specific keys that you are interested in, so there is no need to loop over the map. Just grab the keys that are interesting and see if they are null or not. Secondly, it's possible to extract a method for increasing the actual card counts in each map. 

Using strings in themselves to determine the isn't the biggest problem, but you really don't need to create classes and subclasses and stuff for this. Instead, use an enum! 

Which will produce numbers in the range . But... was set to !? That's because your parenthesis is incorrect. Correct would be: 

A variable name such as is easier to read by using "camelCase", I would name it Instead of using you can do which is just a shorter way of writing it. 

A safer (and actually shorter and easier) approach is to define a string-based enumeration, which implicitly defines the conversion to strings and back: 

As an alternative, you can use the method which takes two string arguments (with possible ranges) and transforms the given string by replacing each character in the first argument by the corresponding character in the second argument: 

so that can be used for a variable without causing confusion. (This is of course opinion-based.) Hashing You don't need to implement 

In both and the is not necessary because the method returns in the case. This saves one indentation level: 

(And the chances are good that the compiler optimizes the variable storage anyway.) And if there is any chance that a node with the given name does not exist then use optional binding: 

Scottish Notation There's a thing called Hungarian Notation where you prefix a variable name with the type of the variable, such as (array named 'numbers'), (string for 'name'), but your variable name is something I'm calling Scottish Notation. Scottish Notation is, in my opinion, even worse than Hungarian Notation. You're using a very very short name (Scots are said to be cheap so they don't want to waste letters). And yet you haven't provided any information whatsoever about what this variable is used for. You have only stated the obvious, as short for . I can see that it's an array from the use of . A better name would be or possibly (although naming it is a bit overkill as it is an after all, of course it contains numbers! As stated before, naming things totally correct is hard...) Please avoid Scottish Notation! 

(You can probably choose a better name for the array, but I have no idea what those strings stand for.) Get rid of the intermediate string storage Your code computes as the base-7 representation of the input number, and then iterates over the characters in that string. The conversion from digits to characters in a string and back to digits can be avoided by storing the integer digits in a vector instead. And instead of prepending additional digits, we can append them (to avoid that memory needs to be moved repeatedly) and then iterate over the result in reverse order: 

In the method of the name of the participant is used to identify it in an array. This is error-prone because it relies on unique names. A better solution is to implement the protocol, so that participants can be compared with . Since is a class, i.e. a reference type, this can be done with the "identical-to" operator , i.e. only identical instances are considered equal: 

If bar is not square in shape, then the largest possible square piece of Chocolate is broken and given to the first child in queue. If bar is square in shape, then complete bar is given to the first child in queue. 

Once a child receives his share of Chocolate, he leaves the queue. The remaining portion of the Chocolate bar is dealt in same fashion and the whole or a portion of it is given to the next child in the queue. School has got a carton of Chocolate bars to be distributed among the children all over the School. The Chocolate bars in the carton are of different sizes. A bar of length i and breadth j is considered to be different from a bar of length j and breadth i. For every i such that M<=i<=N and every j such that P<=j<=Q (where M, N, P and Q are integers). Each Chocolate bar in carton is unique in length (i) and breath(j). Given the values of M, N, P and Q (where M, N values are the ranges for length of Chocolate and P, Q values are the ranges for breadth of the chocolate). Find the number of children who will receive Chocolate from the carton. Input Specification: M, N, P, Q are of integer type (M, N values are the ranges for length of chocolate bar. P, Q values are the ranges for breadth of chocolate bar). Output Specification: Number of children who will receive Cadbury bar from the carton. M = 5, N = 6, P = 3, Q=4 Here, i can be from 5 to 6 and j can be from 3 to 4. So the four bars will be in carton of sizes 5x3, 5x4, 6x3, 6x4. First we choose a cadbury bar of size 5x3 → first child would receive 3x3 portion ( remaining 2x3 portion ) → next child would receive 2x2 portion ( remaining 2x1 portion ) → now the remaining portion are 2 square pieces of (1x1), which can be given to 2 more children So the Cadbury bar with the size of 5x3 can be distributed to 4 children. Similarly we can find out number of children for rest of the combinations (i.e. 5x4, 6x3, 6x4) in the given range as follows 

If your intention of is to avoid global variables and to provide a “namespace”: This can also be achieved with a case-less : 

First of all one should be aware that most decimal fractions cannot be represented exactly by a binary floating point number. For example, 

This also saves one dictionary lookup if the value is already present in the dictionary. I would (but that may be a matter of personal preference) separate the string conversion completely from the difference computation. Return an integer array from : 

Your code looks good to me, and I have only some minor remarks and suggestions. An Optional has an implicit initial value of , so 

Perhaps you should mention that your code takes advantage of the Rearrangement inequality which states that the scalar product of any permutation of the vectors \$ (x_1,x_2,...,x_n) \$ and \$ (y_1,y_2,...,y_n) \$ is minimal if the elements of one vector are in increasing order and the elements of the other in decreasing order. I see two possible simplifications: First, instead of reading the second vector into a temporary vector, sorting it and then reversing it "manually", you can sort in decreasing order by supplying a comparator to the sort: 

Now this is where generics can come in. Imagine that your class would be like this: There's no need to initialize your and to null because they get that as default. 

Is it really necessary to create an object of each tile? In many 2d map-based games, the tiles are not objects, but each tile is only an in a 2d array. I don't know Unity, but I feel that it should be possible to render a 2d map in a better way than creating a for each tile. If possible, I would make your code something more like this: 

I'll continue where @skiwi left off. Regarding your specific question, there are a few alternatives. One thing that @skiwi didn't mention though is that you should mark all methods possible with One idea would be to use a boolean, but as it is very easy to mixup true and false, I think an enum is better: 

Let say crow wants to make one of the pots to overflow. If he knows which pot has what O-value he would simply search for 5 stones and put them in pot 1 to make it overflow. But in real case he doesn't know which pot has what O-value so just 5 stones may not always work. However he does know that one pot has O-value 5 and other has 58. So even in worst case he can make one of the pot overflow just by using 10 stones. He would put 5 stones in one pot if it doesn't overflow he would try the remaining 5 in the other pot which would definitely overflow because one of the pot has O-value of 5. So the answer for above question is minimum 10 stones even in worst case. Implementation: 

The method has a misleading name. It doesn't check anything, it shows a toast. A better name would be or similar. 

Now that alone got rid of one place where you would need to change/add code. The biggest improvement would be to add an for your difficulties: 

Trust me, neither of these last else statements will ever, ever, ever, ever happen. You'd much better do this instead: 

Performance I don't see any performance bottlenecks unfortunately. Style and stuff You're using a lot of empty lines, I would reduce the number of empty lines you have. You also use way too much lowercase in your variable names. (Although doesn't start with a small character, which it should). It is hard to read text that is only written in lowercase and not space-separated, by using someBigCharactersHereAndThere it can be read more easily. Some simple naming changes: 

A different question would be how "good" the hash is. The Swift language does not make any requirements here. Always returning would be valid, but of course ineffective when building large dictionaries. It may be interesting in this context that the hash value of the Foundation type is simply the number of elements, regardless of the contents. In your case, the DJB hash function is a well-known hash method for strings, so I do not see any reasons not to use it. 

In the same improvement as mentioned above applies: If a prime number is found then "crossing out multiples" can start at the square of that prime: 

There is still a caveat: Your constructor allows the denominator to be zero (and the function would throw a "division by zero" exception in that case). You should check the denominator in the constructor and throw an exception for invalid input. You might also want to normalize the fraction and make the denominator positive, in order to avoid a result like . The function itself can be modified slightly to work if some arguments are zero: