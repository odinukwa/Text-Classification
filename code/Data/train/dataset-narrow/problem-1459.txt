If you have the possibility to use it, you could try the async / await pattern. It is however only part of the standard since ecmascript 2017. The pattern allows you to wait for promise before continuing the execution path. This means you could rewrite your current code in the following syntax 

async/await implementation Since you expressed interest in loading through Promise, I thought I would offer 1 version that loads the promises through the / pattern. It's important to note, that this pattern is not fully implemented in all browsers (eg: Internet Explorer). As you didn't specify if ES6 would be viable for you, I don't know if it fits your use case, though you could use babeljs to transpile it to browser compatible JavaScript. 

Explanation of rewrite The biggest change would be here, that the function gets wrapped, and called from , which you would then use inside your code If you look at it, it works slightly different, nl: 

So, I honestly don't see the need to use a constructor and then having to call the function, it seems very illogical to me. Another thing that was not apparent to me, was that you are in need of jQuery, it is not mentioned anywhere explicitly, but you seem to refer to the inside the code. If I am not mistaking, jQuery prefers an IIFE to set up their plugin system. It has the advantage that you can explicitly require jquery to be available, and it would be apparent through any use of your plugin itself, looking a bit like this: 

I personally feel this is appropriately flexible for any response I would like to use, and I can add a resource key for translatable messages in the message string. If the request fails, it's easy enough to construct my response with as a value parameter. An advantage of using this setup would be that you can use the in the following way: 

The reason for this reduction is because of the following (I am assuming that your values inside the array are the once that should be outputted) 

If my above reasoning is true, you shouldn't really care that it is a specific word, and only the is the one that could be found. If you however only want to filter out those specific 4 keywords, well, you could either make sure your array only contains those 4, or you could check if is one of the four you are checking before checking if it's part of any of the sub arrays Observations on the code from an observer view I cannot really say why you need 4 for loops to iterate the array, and even if I could, I don't know why you wish to start from the largest subArray. This would definitely need some commenting from your part. The loops are a real killer for performance, I don't know how many arrays in array your code will have in the production environment, but I can see this become problematic with larger arrays-in-array. The code, as mentioned before, is very hard to read, and it seems to contain much experimental code, from reading it, I am even unsure if it does what you specified. For example, from your spec, I wouldn't expect to be in the output, as it occurs in all subarrays Your code can definitely be refactored into several smaller functions, and with appropriate changes, it is also possible to reduce the nr of loops it uses. If you would have future requirement changes that adds keywords, you could get unexpected results with keywords like or . I feel like the checks you are making to ensure it's a keyword are insufficient. Even more interestingly is that you never seem to check if your keyword is actually followed by a number as you specified. I am not a huge fan of regexes, but this seems to be a very good place for you to use them ;) After re-reading your specification, I think it should simply say that it should return all keywords that don't occur in all other arrays. Suggested rewrite In the end the rewrite took a bit longer, cause I was still fighting with the specifications, nl the first one :) However, here is a rewrite which tries to offer some explanation. I moved the variable definitions to the bottom of the script, as you can clearly see the code at the beginning then. I also added comments to the code, however not as excessively as I could 

In the , this counter will be decreased, and if it reaches 0, it will fire the eventual real callback 

Another important node is that this code will wait for each to complete. However, it will not block any of your code. Hence, you will see in the console before any other message. 

This doesn't interact with the request at all, at most, the user will see something on his screen, however the response will still be running, and your code may eventually react on it, so you are pretty much unsure if it really worked. But don't forget that any callback you create should be canceled in the end (through (see PatrickRoberts comment below) or ), so that there is no need for you to check if a response returned ;). I personally still prefer the and methods to do that. Suggested rewrite ES5 

Why do I bring this up, well, some argue that one should only see 1 var statement per function inside javascript, which will contain all the variables that will be used through the function itself. For your code, it also makes some sense, as you define several times, nl here: 

In all honestly, simply choosing that your xhr is synchronous might not seem a big problem on your local server, but your code has more problems, nl: 

Commenting your source code The variable naming make your code hard to read, one constantly have to jump back an think, what was that variable used for again. I hope you are still active here, and that when you re-read this code, you also feel like, wow, I should have used way more comments. Of course you should not comment every line, but at some point you could give a reason why you first want to know what is largest array, before your real code begins. I sometimes explain above a for loop in a one-liner what my code should do and if I have exceptions where I ignore certain values, I like to mention it if it isn't clear from the code, but then from an observer perspective. Some observations Finding the longest array element in your array could be handled lots easier. I rather have the feeling that either you wanted to test playing around with the or 

A similar system can be created like this (note, this is not with loading scripts, but just setting timeouts, however the principle is pretty much the same, also note that the order of loads is not necessarily the same as I typed them, it's important to node that keys on an object don't have a guaranteed specified sequence. 

Personally, I think the flag is not the best idea, or at least not, in the scenario you have added it, as it looks like a global variable. The scenario you have set up now, poses a few problems as you present it, nl: 

You have an array called keywords, which you seem to use, however, it doesn't match the current given specification, nl: 

You are right that you have code duplication where no duplication should be. As far as I can see from the code you have posted, nothing really changes if you would write a class that would handle it as a , since all the properties you are referring to are available on the (except for , however this could be retrieved through an extra method implementing it) So you could write your class more like 

You could still extract the required parameters object from the method itself, so you can more easily validate repeating methods. It has an advantage that you can rearrange the required arguments a bit flexible by using the object key to validate if the argument is part of the array However, you could also go for a different approach and define much earlier in your design, seeing that & are recurring arguments, you could define all interactions like 

Another approach for this would be to not catch any errors at all on the backend, let it fail, and let it return the full failed response. Asp.net has ExceptionFilters that can handle potential errors a lot better than how you have handled them here. Related to this, the code on the JavaScript side seems to completely ignore potential errors, there is no check if your text contains the message, so how is a user going to know that it failed (true it could be missing from the review). Your JavaScript also has some interesting code, nl: 

This is really one of the best examples that should be refactored to a method, and that could even be split into several methods. You have to ask yourself, what is variable, and what is fixed in my piece of code. Well, if you look at it closely, both parts of the condition seem to check if a keyword exist in a certain array, and in case it does, it will take the found element of the array, and split the words, and then it will check if these words are specific words, and if they are inside another array already, if not they will be added. As a side note, this part of the code I have the most questions about, simply because I didn't actually step through the program yet, and I cannot seem to match the code with your specifications, yet, so I won't change the functionality here, I will just show how it could be extracted to one or more functions Lets take a single statement to begin with, like this one: 

To the outside world, this function is accessible through , however inside the function, I can access it through . Another thing to note, would be the that you can assign properties to functions, which can be handy sometimes, in our case, to assign it with a counter: 

If it's a singly linked list, then I don't see the need for any complex transformation logic, as a node can only have a next node. So, you could theoretically do it like: 

I am really unsure why you have a access modifier for the method. I don't see any reason from the code why you would need it, and I think it should be at most , but preferably . For the and members, I don't see why they should be members, and why you should be able to assign a value from outside your class. I think the should be private fields inside your class, cause nobody except the current would care if they are loaded or not (and if they would, even then, I wouldn't allow it to be set from the outside) To the outside, I would tend to give out only , and keep the implementation of it hidden from the users. WPF will detected the interface, and will update on any changes (as long as you don't reassign) I am also unsure if the of the TreeItemViewModel supports updates to the UI, if it does, it seems a part of the is not yet implemented for it.