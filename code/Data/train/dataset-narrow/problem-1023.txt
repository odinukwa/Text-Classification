I don't know about 'handily', I didn't have to work too hard to make the built-in win every time. In fact, all I did is use your code the way it was intended. The only time you win consistently, is on x64 if you have pre-cached the for the specific value. But at that point, the added strain of having to do so just puts me off. I'd just prefer to stick to , especially since your code only performs faster on x64, which I bet is a bug with either RyuJIT and LegacyJIT (I tested both before making this claim), so I'm going to ask about it with some other persons, because I'm concerned about what's going on here. I'm suspecting an issue with Windows / .NET on the 64-bit platform. I also need to investigate ILDASM but that's not enough of this for our answer here. If anyone wants the reproducible benchmarking code: 

You can pass as a parameter to it, and have it return a back to your method. Then you can also move the following constant into as well: 

(Emphasis mine) This is all well-and-good in theory, but anyone (and I do mean anyone) can decompile your source and get that key. This is basically a glorified obfuscation system. A better alternative would be to use on the user's password to get your encryption key. This has several added benefits, most notably: Your key is no longer shared. I don't care what anyone says: sharing private keys in encryption is a horrible idea. The more people you share a key with, the less secure it becomes. If you establish a key based on the user's password, you have now created actual encryption. 

The only problem with this is what happens after you've been logging things, and you want to switch to the 'Release' version of your app that has no console logging, and only logs, say, major errors? What happens if you want to log to a different type of medium, say, a database? In a logging situation, you should build on an interface along with your POCO (plain-old-CLR-object). You should have an interface, that way if I decide I want to kill logging in the release version of my app, I can simply implement an that doesn't do anything in any of the methods, if I want to log to a different medium, just build a new for that. The should expose the basic logging messages, , , etc. Then your should implement those, that also means you can build a , or a , , the possibilities are endless. As it stands, this code is not mockable, which is a very important aspect of a logging system. 

Overall, this seems quite good. It just needs minor tweaks to make it a little easier to read and maintain. Good work! 

So I have part of a library which deals with scopes in Google+ integration, and I'm curious on the overall view of it. Yes, things are stringly typed in one of the methods, that is because this has to be COMpatible, which does not support enum's. I have (purposefully) omitted XML documentation, as most people think I go overboard and I'd rather not bloat. 

The problem with having these constants is that the name of the constant doesn't imply what it means, but instead what it is. This means that any usage of them within the code is meaningless, as the only thing we know about them is that is a valued at . If this is all the magic numbers are for, then having a constant adds absolutely no value to the code. It's only noise. When you use the feature, it should be clear that each instance of that constant, property, field, method, class, struct, etc. is used in a specific scenario. However, these constants are not. So what is the point? I don't actually care about what references the constant , so why is it a constant? Would I ever need to change it? No, so there's no value added. 

It also would not hurt to add some comments, explaining why you do some things the way you do. Comments, in code, are generally helpful to remind yourself in the future of why something is written in this form. That way, when a more experienced you (or other developer) comes along, you/he/she can say, "Oh! That's why it is written like this." Rather than, "this is not the greatest, I should change it." Then things break. 

On to the Review Your HTML is not at all valid. If this is a snippet, then that is expected, but I would recommend to take use of the tools out there to get automated reviews of whether or not the HTML is legal. The W3C Validator does a great job at that. Some points to take from that validator: 

Then you just need to update your array. Of course, all this means we have one more thing we can do: create an to encapsulate what properties of our class are in the CSV and where. 

So we still have three major things it does that can be abstracted, which we should do. It may not seem like much, but failing to extract this processing properly can create unmaintainable code. Each method should have one responsibility, if it has then it should have each responsibility split to a new method, and then make calls and transfer data between those methods. This way, when we debug our code and find something that's wrong, we have a method to narrow it down to. (Especially once a released version is out, and someone says 'I got an exception that mentions the method', well that's bad right now because we have no way of telling where in the method the exception happened.) 

Again, reduce vertical space a little. Other than this, I have nothing else to say about the code except maybe to shorten some of the names. It's awful verbose. It's good F# already, my modifications are merely recommendations. Good work. :) 

Notice that is the only one that is public. If you did want them to be internal, I suggest adding the keyword in front of them to be explicit about it. 

I'm not going to talk about your algorithm and whatnot, instead let's discuss abstraction and SRP for a moment. Yours isn't bad, but it could use a few tweaks. First: 

This should help convince the compiler to inline the IL for that method everywhere it can, which can help improve performance. (It may be doing that already, you don't have the IL posted so we can't tell as it is.) 

Now the only part we need post-loop is , so we'll deal with it last because it's more complicated (but barely). In regard to , there are two things I need to make blatantly clear: 

Which indicate that the only intent was to place only the Key/Value pair in the list. Personally, I would create a class to represent a or similar. 

There's not a single access modifier on any type, did you mean for them all to be ? If so, specify that explicitly. 

If you just wanted to drop a bunch of files in one folder, it's currently not possible. Why don't you, instead, add the path as a line in the XML file? 

So having used the SE API multiple times, I like how all responses are in a object, and for my own API design I figured it was a good method to follow. Of course, I also wanted to abstract everything out so that common actions could be handled in a simple manner, so that I wouldn't need to write the same boilerplate code multiple times. (Wrap the entire response generation in a / block then serialize exceptions to JSON, etc.) Of course, since the inside of the / block differs for each request, I needed a way to deal with that. I got the idea to use a class which had a method that would call a method which was implemented differently for each request. Let's start with : 

This makes it much more clear to the compiler as to what type you expect, and tells future programmers that you do know what you're doing. 

DO NOT use underscores, hyphens, or any other nonalphanumeric characters. DO use PascalCasing for all public member, type, and namespace names consisting of multiple words. 

I don't like that at all. It just seems, wrong, somewhere. I'm not sure how it could be better, but that bit seems less-than-ideal. 

A few things you can do. To help in the future (in case of being added, etc.) you can make some of these functions generic. The caveat, is that the way you have it set now you would have to make an interface that , etc. would implement. Let's assume all the objects implement the following interface: 

You said beginner, which is good. I'm going to go into a few basic VB.NET constructs that should help you, and then cover a couple advanced ones in detail so that hopefully it's useful for future projects. :) I know you said you didn't try to use LINQ, but I added an example of it (you can ignore it if you like) that shows the other form of LINQ that wasn't demonstrated in your last question. This may make it easier to understand. 

Eventually you're going to want to handle other key-presses, correct? You might also want to handle other encoding styles, like EBCDIC, correct? So, I've never done Assembly before, but these are pretty simple things to design for, and I hope the implementation is correct. First, we want to build a (very large) jump table for ASCII. Essentially, a jump table eliminates all of your comparisons down to exactly one comparison. It's pretty easy to set up: 

After that, you have a real mess here that needs cleaned. First: capitalization. In C# we public members and types (and all methods), and private and local members and types. 

2017 Let's fast-forward five years and six months (which is an agonizingly long time) and examine what language features might make this a different process. I'm just going to post the form that takes advantage of the new language features, then we'll discuss where / might help you. 

What do they have in common? They all have a property. So, in order to represent this we start with an interface: 

Your tag opens in the wrong spot. You have two tags that appear before it, which is very illegal to the spec. You can fix it as so: 

tags are expected to be block-level elements. That is, they take up 100% of the width of their parent, by default. (Or whatever the browser is configured for.) tags are the opposite: they are inline elements. That is, they only take up enough space to fit their content, by default. They should never include other block-level elements within them. 

I'll post up a much more complete solution later, but you should be able to make this work as expected. :) 

No, it's not good practice to store the Admin login (or any login, for that matter) in the Web.config. Depending on what ASP.NET model you're using, you have a few options. MVC has a built-in provider which makes it simple to make certain pages/areas only accessible by a specific role. Web Forms is also pretty simple, though you have to roll your own access provisions. You can use the built-in Simple Membership if you like, which usually suits quite well once extended to fit your needs. (You can add properties to users pretty easily and such.) You also aren't encrypting or hashing the password, which is a huge no-no. At the very least you should MD5 hash it, though for security I would recommend SHA1-salt hashing at the very weakest. Though, if you use the built-in Simple Membership for Web Forms or MVC, you'll get encryption and salting by default. I didn't review the actual code as Heslacher did that just fine, but I do think you need to completely revisit the login system. ASP.NET has built-in providers for this, and they're super easy and, quite honestly, pretty fun to set up. (I don't know why no one has pointed this out in the several months this question has been here, or how it got on my radar, but hopefully you still get this advice.) 

This will allow you to do more with the function much more easily. It allows you to use the same function to, instead of redirecting the user, show a modal instead. It's a much more reusable class at that point. (Which is the idea here, is it not? :)) Part of the purpose of building something with an OOP mindset is to allow many sections of that programme to be reusable in many different ways. By strictly using you restrict the number of ways you can use it, to 1. You could of course simplify this further (credit to Ismael for a chat message) into: 

I needed a better way to benchmark code, because, well, rewriting the same benchmarking code every time I need it is just...well...unpleasant. So, here's a class which does just that, it runs an over a specific number of rounds, and calculates certain stats on it. Another nice feature is that it doesn't store the run times as it calculates the stats. So you can literally supply any value for and it should work. (Not tested for values greater than 10,000,000.) The latest version is on GitHub. It's pretty simple. Two methods on a simple class that run the benchmark. The nice thing about this class is it includes a version for as well, which will also verify the output of the function. This means you can benchmark and verify your code at the same time, to make sure that nothing weird happens.