I'm betting on a typo or stupid mistake somewhere but I cannot find it. In my last result stayed untouched without any walls. But the algorithm does backtrack as I often end up with dead ends. It does not happen often and up till now only on the sides. Below is an example where two on the bottom right have not been carved in too. 

You should use a table to setup. Tables can be aligned and there cells sizes can change. You can do something like: 

Simpy put, we need to come up with "cheap" tricks to make a game look good. But the human eye is hard to fool. 

I personally never calculate an angle like that. I like to work with vectors, it might be slightly less efficient but this way you can do it step by step, it gets more readable and easier to understand. So what is a vector? A vector is essentially a direction and a magnitude together. Often in games it is used as a position data structure too but essentially a is vector pointing north east with a magnitude of = (Pythagoras). So what can we do with a vector? We can calculate direction, velocities, angles and more in 2D or 3D space. LibGDX does most of the math for you. You just have to know a couple of basic Vector rules to get the result you are after. So let's first start by rotating your arrow. 

Not exactly sure what is going but I always create a stage with a viewport (with or without a camera). Something like this: 

You need to model a bit beyond the border and perhaps block view above the camera height so you can have a skybox around your world that will be shown. -edit- Changing biomes is a whole different thing and very much depends on your needs. Minecraft for examle switches from biome to biome from one tile to the next. If you want a gradual switch in biomes you have to blend things along the border. You need to create a mask along the border. I mask is a black/white image that can hold two textures. One is shown on pure black, the other on pure white. With grey levels you can mix the two textures. Obviously you should also blend in the objects like a view forest tree's expand outward to a savanna and you can spot some yellow grass in the front tree line. To get it perfectly has much more to do with design skill and observing the real world then making games. 

Is there a way to export or publish some work to a folder so somebody else can open the .max file and does not have to reassign all the textures again? My problem is that i used lots of textures straight from my texture folder in a completely different folder tree. So when i sent the file to someone else he needs to rebuild this tree exactly the same as i did or reassign every texture. If there is no option like that do i have to change my workflow, in case others need to work with my files, and keep everything in the same folder? What is normal procedure to keep everything organized and compatible for each user? 

edit Zoom in on the image I posted, in the red healthbar you can see the issue. The stretchable area is being drawn over the unstretchable area. The desired effect of the bar should just clip the rounded unstretachable area when getting smaller then the 2 unstretchable parts together. 

While looking for a name and Googling it usually return some kind of old or unknown game already with the exact same name. Can i use this name? And what about a name like Diablo, since Diablo is the commonly used name for the devil there cannot be a patent on this afaik. So would a different kind of game named Diablo be allowed? Let's say i want to make a game of mechs like in Mechwarrior. Obviously the mech designs have copyright, the name as well since i suppose. But am i crossing any rights if i make a top down tactical squad game that include mechs of different designs/names and call it Clash of Steel? 

This is somewhat what I am doing now. I use the KryoNet library also created by Nathan of LibGDX. I have a KryoNet server that my LibGDX app connects to and that server uses the to connect to a MySQL server locally. So actually without webrequests since my server is local to the DB. Having a server between the database and your clients is not really necessary though. But I want multiplayer game mechanics that need to be handled on the server. And a TCP connection is a lot faster then webrequests. Now for your actual question, if you want to use webrequests to run a php script for working with your database then look at the following code. 

A lot of great Libgdx extensions have been added to the maven repository such as freetype, tools and many other great libraries. This means you can add extensions in a blink of an eye, at least if you used the gradle LibGDX setup. In your case you want to add freetype, look it up in the link above and select the version you need. Now select the tab and copy that link. Open up the at the root of your project. This file takes care of building the project for you. You just have to add this line in the modules you want to use it. I show you a example of my desktop module in the file. 

This is very subjective. Digital Tutors is very good tutorial site offering top quality tutorial. It can teach you how to use a tool and goes on showing how they use it. But in the end it is not the tool that creates the art, it is you using the tool and be creative with it. That is something nobody can teach you. Digital tutors does have tutors and specialized learning methods other then your average youtube playlist. However I cannot judge the quality of that but I expect it to be good. I come from the time 3Dbuzz was a free source of knowledge. It teached me a lot of things. They had free courses you could enter and learn from others. It definitely helped me understand the tools so I guess Digital Tutors does too. 

If you need slightly different variables and parameters for a layer you are free to create another class for these. Maybe inheriting from the base tile class will do you good. Here is an example for a chest tile: 

I have a basic recursive backtracking alghorithm for a maze. It pretty much works but ocasionally leaves some tiles in the corners untouched. This is the recursive function: 

X is horizontal, Y is vertical. You always give these "coordinates" in this order (First X, then Y). This should fix it: 

Honeybunch answered for video memory I believe, I'm not that familiar with GL. But to store a map like that in memory and eventually on disk you need to think about what you want with the map. If you have less then 256 types of tiles and nothing else simply use a unsigned bytes in a array (vector in c++ right?). Having thousands of tiles is not that special anyway, I'm currently drawing 10K on my phone and not doing it efficiently ;). 

Your IDE most probably supports some button like . Next time you should use that. My guess is that you are supplying a texture instead of a TextureRegion but there is not enough code to proof this. 

But this made me wonder, why would I store any attributes in the actual item table? Damage could be a modifier too and so can defense. I would handle it like so: 

I am currently creating a versatile system for this and while it's not fully functional yet it looks promising. I just use a normal class where basic things like the cost, name, etc are being stored. It will also hold a list of or I could say stack where each of these actions is performed in order. The trick here is to create these actions as basic as possible to keep it versatile. Some of my AbilityActions are: 

What I did here is setting the cell with to the size of the table times a scale. You can set various variables on table cells. A table is a container widget and you have more of these. A button is a actor and best belongs to a container widget. Sometimes tables and Scene2d work like a bitch and sometimes like a charm. Look them up in the document. I sent a link when not at my phone. 

Why would you make the game free on android and let PC users pay $10 + $1/month? The big trend for most indies is building a fanbase as soon you have something to show from your game. Blogging about everything that involves your game and perhaps let your fans influence your design. You can find a lot of sources at open indie developers like Grid Sage Games. They just released there game Cogmind two month's ago and started blogging about it in September 2013. They just released sales information less then a month ago and you see that a fan base can greatly impact your initial sales. But not every game fits the bill to create a dedicated fan-base like Cogmind. There are some great articles on gamedev.net, two new ones talk about launching your game and analytics. Perhaps the best thing to know is how not to do it. There is basically a ton of information laying around. Good luck with your games launch! 

The problem is this won't work on it's own. You would need a class for your sprite and give it appropriate down force as well. The amounts you use depend on the units you give in your game. You could add some drag to the sideway movement by multiplying the X velocity by something like .95. For the downforce/gravity you could use need to subtract something each update so it will eventually fall down. You could use realistic numbers here or make something up and tweak it until it's right. To move your sprite you use the velocity the actor has. 

You might need to reposition the rectangle by half the size to get centered properly. I advice you to deconstruct that long overload with formula's into something simpler. 

Those games did only save a state I believe. The password just references a level to load. Just use a dictionary for something like this. If it is a little bit more complex like having a certain weapon or booster you can encrypt the state to a short (but long enough) hash code. But I strongly advice you to not use this. Password will spread fast on the Internet and soon everyone had won your game. 

You could actually use the type to draw the tile. So you could detach that one (make a array of it's own) from the struct so you do not iterate over the unnecessary health and damage fields in the draw loop. For updating purpose you should consider a wider area then just your screen so the game world feels more alive (entities change position off screen) but for the drawing of things you just need the tile that are visible. If you keep the above struct it only takes 3 bytes per tile. So for saving and memory purpose this is ideal. For processing speed it does not really matter if you use int or byte, or even long int if you have a 64 bit system. 

LibGDX is formally a Framework and does implement the game loop for you. does smooth out over a number of frames. Instead you could use . I have seen some people get smoother results by capping the framerate to 30/60 instead of using . 

You need something like perlin or simplex noise. This will always generate the same noise based on position with a certain seed. Now you can add stars where the noise is a certain level. Simplex and perlin noise always create the same noise based on location and seed. So if you would create a noise ranging from 0 to 255 you could generate a stars at a certain level of the noise. Both perlin and simplex is very versatile, there are some paremeters you can set and it generates values for you, you can use multiple noises on top of eachother. You will probably need to tweak these settings a lot to get the desired effect you want. For example minecraft uses it for terrain height. You can use it for brighter and dimmer stars. If the noise of the first iteration is between 0-100 you check the noise of the 2nd iteration and where you get a specific value or two you generate a star. Then you run another noise to see if they are dim or bright. Using this for each and every pixel of your screen might slow things down a bit but simplex and perlin are fairly fast duje to there simple nature. What you can do is setting up somekind of tile system for these stars, say a 10px by 10px tile system. Then run the noise on those tiles. and place your stars on those tiles. instead of having to check a 1920x1080 field (>2.000.000 spots) you reduced it to 192x108 (a bit over 20.000). 

I have a tile based isometric map and an A* algorithm that returns a path. I am looking to smooth this path efficiently but with good aesthetics. Basically i am using my grid for building the map and pathfinding but i want the player, enemies and certain types of objects to be detached from this grid. I can think of a line of sight implementation where i start at the first tile of the path, from there check each further tile if i have a clear path straight to it. And repeat from there.