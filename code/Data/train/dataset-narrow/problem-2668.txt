but the button doesn't fire any of its events on click. I tried commenting out the writeToFile but even with only Debugs in the body it doesn't fire. 

What Are some Game Development publications (electronic or otherwise) that aren't so large that there is no chance to potentially get included in the publication after a few well-written articles sent their way. Looking for publications geared towards developers, not gamers, and can be any aspect of the game process, design, development, business, etc. 

I am trying to do some GUI work with unity but am having some issues. I call a window with this code: 

I am creating an android game out of a partner based trick taking card game. What are some generic approaches to AI players for these types of games and what are the advantages/disadvantages of each? 

sites like $URL$ might be useful for some UI assets, especially for mobile games For people developing with Unity, they have their own asset store which includes models, scripts, and a ton of other resources: Unity Asset store Some sites like thesuperfluid.org have people offering services for a virtual bartering-facilitating currency. 

Java Monkey Engine If you are most comfortable with Java, you could use Java Monkey Engine for a framework to use while making games. It also has a decent amount of documentation/tutorials including instructions for integrating with Netbeans and Eclipse. 

I am familiar with Unity and in the process of learning android SDK when the announcement about unity android basic came out. What would be the advantages and disadvantages of using the android SDK directly versus development using Unity Android? 

This is a confusing, vague question but I'll give it a shot First thing to consider is whether you want success chance to vary with or inversely too your factor for consideration(level, experience, defense, whatever) your fomula can be a fraction with things that you want to improve your chances in the numerator and things you want to decrease your chances in the denomenator(this can just be 1 if nothing decreases your chances) Suppose we wnat your chance to recruit someone to go down with your level(so it gets more difficult) but to go up with your strength. Our basic formula so far might look something like chance = strength/level This would be a linear function. Depending on how you want things to scale you may want a different type of function. If you have a theoretical maximum you could for instance use a logarithmic function to taper off towards some value chance = ln(strength/level) With this you get diminishing returns. You also may not want throw in multiplicative factors or additive constants to tweak the data if it doesn't feel right with how you want to progress. chance = m * ln(strength/level) + k Finally since this is a percent chance you may want to try and normalize it and convert into a percent. For this we divide by your best possible values for chance and multiply by 100 chance = 100 * (m * ln(strength/level) + k)/(m * ln(MAX_STRENGTH/MIN_LEVEL) + k) I hope this helps. 

How does an SM5 compilation handle loops and if-else statements, are branching execution routines unwound and if so, to what degree? Is it only Direct Compute that can optimize branching code? searchwords: dx11, shadermodel5, 

I think a sprite is a multipicture where you change the frame you want, it will have an alpha as part of the bitmap... the sprite class isnt really for inanimate ground images. in unity, colliders i think should be part of a 2d mesh, mesh renderer, and you can apply the bitmap to the mesh. 

It depends if you are walking on it or flying over it. i.e. collision frequency. also it depends if your cubes are squares like minecraft, which makes it easy. You have to make some kind of mesh collider, or some triangles around the point of collision. Normally your program should have a way of making a mesh collider. For advanced coders, and specific kinds of projects, you can use the perlin noise function to see how close an object is to a the terrain boundary. the isovalue is a guide for collision. as a rough guide, the cheapest way to check collision is ISO value of noise, you can find a value, say >4 which is very far from the 0 isometric value, and only objects with a diamter larger than 20 say, could reach it. so first check the isovalue of the objects or of their boundaries. if they are within a few meters of the boundary, have a 3d array of all the cubes in space, only a few of which will have triangles precomputed in them... fill that array when the cubes compute, and when necessary, you can check exact cubes that can collide using that array, very fast also. then you can construct a dynamic collider using this array because you can access all triangles positions that you need instantly. also there is the bullet physics engine under zlib licence. 

here is some code for any number of equally spaced vertices of a sphere, its like an orange peel it winds a line of dots around a sphere in a spiral. afterwards, how you join the vertices is up to you. you can use neighbour dots in the loop as 2 of each triangle and then find the third would be a proportional one twist around the sphere higher up or lower down... you can also do triangles by loop and nearest neighbour on it, does someone know a better way? 

I've been told that having a set pixels-per-world unit number is bad practice because it will not look the same at different resolutions. Because of this, I am trying to learn about using abstract world-space coordinates instead, however I am having some trouble understanding. I've setup a quick test project for learning this: $URL$ As I understand it, CAM_WIDTH and CAM_HEIGHT should be the dimensions of the world in world units. However, I must be missing something because the end result seems to have made the world 50 pixels by 30 pixels. (My "wall" texture drawn at (0,0) in the bottom left is 16x16 pixels) 

In my case, I would like the player to move 6 units per second. Since I built this on 60 fps, that means that movementSpeed is 0.1. Now the way I have seen deltaTime used is by scaling the movementSpeed based on the time like this: 

I am trying to achieve a view with which I can see 50 walls on the x-axis and 30 on the y-axis. I was able to do this when using direct pixel coordinates and multiplying by 16 (the pixels-per-world-unit number), however as stated before, I don't think I want to use this method anymore because of negative affects at different resolutions. 

First off, it would be greatly beneficial to learn Java before attempting to create a minecraft mod. There are many great tutorials out there (I personally started out learning with thenewboston's tutorials on youtube) and you'll gain a new useful skill! Now onto your question. As newton1212 said, texture management has changed in 1.8. In fact, nearly everything related to rendering as a whole has been changed in the base game. JSON is now used for almost the entire system. This tutorial covers updating a mod to 1.8 rather than creating one, however the updated files should be helpful to you anyways. Good luck and feel free to ask any more questions you have. 

I'm working on one of my first games and I've read that linking your game logic to FPS is bad because it will run differently at different FPS (obviously). I have already made some of the basic game dependent on frame rate and now that I know this, I would like to unlink the logic and render. I've learned that LibGdx has deltaTime in its render method for this, however I believe I'm misunderstanding how I am to use it. For example, my movement currently looks something like this: