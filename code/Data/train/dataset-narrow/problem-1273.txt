jQuery's method can take a callback function - it'll be called for every element in the collection - and will use the returned value to set the element's html. You can use bracket notation to access the key in your , so that you can dynamically get to the key you want with the string in the brackets: 

In addition, Crockford suggests that you put the calling parentheses inside the wrapping parenthesis. 

Your variable is declared without a , so that it's leaking into the global namespace. Don't do that. As it stands now, your isn't used anywhere in the code. I'll assume it's not applicable here. Instead of manually keeping of your iteration, use the % (Modulus) operator to calculate your rows. jQuery's method doesn't deal with code fragments the way you seem to think it does. actually appends a whole table, not just an opening tag (that's not even possible). Access to the DOM is not free. Every time you hit the DOM you incur some overhead. Try keeping DOM modification to a minimum. Unlike others, when dealing with a simple HTML construct such as this, I prefer to build my fragment from a concatenated string since it's much faster. 

P.S. You haven't described how you're exposing the plugin's additional methods. For that you should read the jQuery plugin creation tutorial. Find the section titled Provide Public Access to Secondary Functions as Applicable. 

is deprecated since C++11. Sometimes it is indeed the simplest way to write something. But with placeholders, not so much. Since all your props use the exact same function, you should just set it up once. 

You are assuming that the container holds elements which have the form of constructor you are expecting. Anyway, now your first example in becomes: 

Second, the code you wrote is highly repetitive. When you have a whole bunch of duplicated blocks like that where only a couple values are changing, pull those values out into a data structure and then loop over it. Without a lot of fuss, I just used a primitive array of pairs. 

and by using you won’t have this unsigned to signed implicit conversion cluttering up your warnings window. You do compile without generating warnings, right? 

Well, I wonder how it’s different from and related stuff. I assume there is something different about it so that’s a mental burden right there. 

Likewise for the other array looks. You also have (one space) and I don't know if that's what you really meant. I’ll assume for now that you mean for the name to be empty (that is, blank). Strings initialize themselves. If you wanted to initialize to something other than empty, you would put it as an initializer in the constructor, not an assignment in the body of the constructor. That’s true about all the stuff in the constructor — nothing you have there should actually be in the body! For the plain int and double values, you can use inline data member inititializers to good effect here. 

The code above works, but the text is not associated with the radio button in any way. To remedy that, consider wrapping labels around your radio buttons: 

No need for all that. Just use one bracket group, negate it (be prepending a ), and use the return value directly: 

Your code does not actually function the way you want it to. checks for the existence of that element, not whether its value is set. Your radio buttons don't have a attribute on them. They really should. You should cache your selectors. You're querying for a total of 7 times in your code, and an additional 4 times on every click. Instead of listening for every click inside , you should instead only listen for the event of the radio buttons. On page load, if there's a value in the input text field, all we have to do is check the correct radio button. The event listener will take care of the rest. 

Sane Selectors - There's no need to add all those selectors by hand. Simply use an attribute selector to select all elements that start with a given string. Selector caching - If there's one thing you can do to your code to keep it fast, it's selector caching. $.each - We're using jQuery's helper to loop through the array, since it also supports older browsers ( is not supported in IE < 9). 

Yes, I can see that this ends in a semicolon without a body. Comments should be meaningful, not just add noise to the file. 

Swapping a with a is strange. You should make that parameter a instead. And mark it as if has a no-throw swap. 

Coming to C++ from most other languages, you should know that you shouldn’t be playing around with . The class is a bit of an odd duck because it was being developed “conventionally” by standardizing existing practice and experience with other languages, and then all of a sudden STL comes along. I was involved in implementing the string class from an early draft of the standards process around 1994, and it was even more conventional, using index positions and substrings everything. Once STL was made the foundation of the Standard Library, the class was thrown out and a simple one made that’s similar to a vector but with handy support for string literals. That didn’t fly. The compromise was what we have today, which is a fully proper STL Container, and has some support for traditional string operations, thus allowing people to easily adopt it by changing out their home-made string class with minimal fuss, as opposed to having to completely rewrite the code to use STL algorithms. 

You don’t realize that is a zero-overhead abstraction. It does not add any size beyond the pointer being wrapped, and it does nothing but make sure you don’t call certain things, and handles the destructor which is code you need to supply anyway. Try it. Really. 

Just keep in mind that this will query the DOM on every single !! Are you sure you can't somehow do this differently? 

Use & . They're SO MUCH faster. Since you call every time you instantiate your plugin, you should probably move the call into your constructor instead. Public functions should be assigned to the prototype, so that we don't create a new function every time we create a new instance. Likewise, define a private function outside of the constructor, in the parent closure. Again, we don't want to have to re-create the same function over and over again. 

P.S. is not very descriptive. You should consider coming up with a more intuitive naming convention. 

Are you sure you really need that selector? Wouldn't do the job just the same? While we're at it, why are you listening to the click on the elements, and then find the via ? Can't you just listen to the event on the s themselves? Is there any method to that configuration? I wasn't able to deduce any algorithm from what you've provided, but I'm sure there is. You'd be better off calculating it on the fly, if possible. 

To make all this easier on yourself, don't re-invent the wheel. Look into John Resig's tiny inheritance library: Simple JavaScript Inheritance. 

Note that neither of these is necessarily relevant. You have not defined why you are using encryption (i.e., what you wish to be safe from), so it is not possible to fully answer your question. 

How can I simplify this .less code to require less repetition (i.e., so that I can have many buttons with normal, rollover, and pressed states without using 3 lines for each button): 

Ideally, I would want to be able to use a one-liner to handle all 3 states. E.g., something like this: 

You are not salting the passwords. If you are storing passwords for more than one user and multiple users have the same password, you will be able to look at the database and detect at a glance which users share the same password. Ideally, this should be avoided. You are not using key-strengthening. This makes it so that brute-forcing the password will be easier than brute-forcing the key itself, which means that most of your encryption algorithm is de facto weaker than claimed . I recommend bcrypt for this; I believe it is included with php 5.3+. 

Bubble sort is very slow when run on medium or large lists. I recommend using a faster sort algorithm (e.g., Quick Sort), or using C#'s built-in sorting functions (e.g., the extension method). If you prefer to minimize how much you need to change your existing code, the code for Comb Sort is almost identical to that of bubble sort, while still running significantly faster. That said, Comb sort is a bit less popular (and thus less well-understood) than other algorithms of similar efficiency. You may want extract each step in your algorithm (Sort, Chart, etc.) into a separate method. If speed is important to you, a profiler will tell you which step is worth optimizing first. 

If you want to, you could even build that original array dynamically, which will make this much easier to maintain: 

Note: is the same as , just a bit faster; it doesn't create a new jQuery object at every step in the loop. 

The method will traverse the DOM all the way up the chain. Rather use the method, which will stop at the first match: 

I built this very-basic lazy list (I'll add more methods as I need them). You provide it an array, a generator or any iterator. It creates a lazy list, which lets you run a pipeline of transformations in a lazy manner, meaning that they'll only be applied as you pull values out of the list. Here's the class: 

Very good question. I'm pretty sure this can't be done within the selector. However, instead of checking the every time it's clicked, the collection before applying the event listener: 

In the regex above, we're looking for any characters in the string that are not in the bracket group. If none are found, will return 0 (which when negated will result in ). If any of those characters are found, will be returned and negated to . 

If you don't care about IE, you can check the property directly, which is much faster and much more reliable, since also contains any arbitrary data that might have been set (possibly by a plugin): 

Normally I would do this with a formatting library rather than individual calls and literals concatenated together. Right out of the box (I normally use a wrapper around Boost.Format, and am looking into a new "modern" performant library): 

Sounds like quite an endeavor! I miss Sim City 2000. I even bought an Android version for $5 and then they took it away! Good luck on this project. 

You really should break up your into separate input gathering, looping, and main algorithm functions. That will tame a lot of the local variables all by itself. So you get something like: 

You should make sure all the housekeeping members are provided, as the class you put this in will only get (x) if all its members and bases do (x). You forgot some. So did Martin in his answer. See §15 for the authoritative list. This has been taught as “The Rule of Five” but that neglects that any defined destructor will also kill auto-generation of move functions, so it should really be the Rule of Six. Or for movie fans, Rule of 5.1 perhaps? 

I suggest you read through and become familiar with the Standard Library Algorithms. Good show on making unit tests! Keep it up, and good luck. 

No, don’t do that. Just provide the underlying (const) iterators and the user can use if that’s what he wanted to do, or whatever without having to copy the collection at all.