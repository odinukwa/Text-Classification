system() Don't use . This forks new shell (probably in your case "cmd.exe") and executes via the shell command "pause". I do not know what C++ function you should use, but probably getchar will do. However it is C function. $URL$ For this you need to add . pragma once I see you have used . It is well supported, but it is not standard. Try use "include guard" it is what standard way. $URL$ main() This is perfectly OK: 

Please note, many people (me excluded) will not like in the middle of . Anyway if you do it this way, readability will be much better than with . 

Is this conversion or just check if class is Integer / Number? Naming is unfortunate. Change it it or change return type to . What is ? If it is a pointer, change it to or if you are using to . Number.cpp way too big, skipping for the moment. Fraction.h once again this will not be compilled, because you are using unknown . must initialize the and . I suggest following: 

Naming things Why you have all caps function name? Why you have variable with capital letter in ? At first I thought it is template parameter i miss. Use auto more often: 

You have duplication near , you probably need there Here is probably not initialized. Also you probably might use something from (but I will do it in same way as you). 

Finally, if you have C++11, you can clean up things some more, including you might remove constructor and use default generated constructor. 

You . This is first time I see this line in PHP. Just remove the statement. Session is already made in constructor. If is not will not help at all. Actually, in constructor, you can the result of into some class property and use it instead of . SESSION_handler::session_expired() should be something like this? 

I don't believe the code works as expected. One of us for sure made mistake with . If is me, comment so I can fix the answer. Code style You will have better readability, if you indent everything inside the class. You need to work on statement in . I can not read it at all. I personally would do it on single row, but then many people will not like it at all. Constructor - I do not see where you need this? You initializing the static fields every time. 

Do you really need to check ? My experience is you can use directly. If there is a session created, statement will do no harm. I believe you need to initialize , but only if is not set already. Something like: 

You also might decide to remove them and use directly. Or you can do static method . Here you create session as well: 

This class was inspired from Microsoft's array_view. It intended to use with mmap-ed memory for easily check bounds and so on. I probably will need to throw exceptions, but this is not my usual way of working. Any comments are welcome. I left some casts like C-style casts because I see Alexandrescu is using the same and I am not alone :) I also added a method for relative as(). It uses pointer and pointer arithmetic. First here is some real usage: 

Why you pass by reference? size_t is as big as the pointer, but there will be additional hidden dereference that will slow down the execution. keep the const, remove 

Even better if you do it as , but I can understand that you probably want to avoid it. Use instead of raw pointer. If you use , then you do not need to have destructor. I think this is some example where you learning how to work with memory management, but you need at least to explore the possibility. If you are using , code will not slow down, also will not use additional RAM compared normal (raw) pointer you have now. 

Everything looks good enough. Code style is OK. You are using , so it will be quite fast and there is nothing you can do in the code to speed it up. You may or may not need to check this: 

This function takes the encrypted string and breaks it into parts of 6 (Because every encrypted character is equal to 6 characters) and reverses all of the randomizations that I did during encryption to return the string: 

My question(s): What shortcomings will I have with these functions? Another question I have is; how can these functions be improved? 

I've recently written a function that allows me to take a flat array and convert it into a multidimensional array by a specific key in the array. 

I've written a function that allows you to pass an array of values, which is then shuffled and returned based on a parameter . This is the code: 

The first parameter is the array itself, the second parameter is the key that you want to group by, and the 3rd (optional) parameter is a boolean that tells the function if you want to preserve the group key in the sub arrays. Examples Let's use this dataset for examples: 

So you can pass any array as the first parameter that you want randomized, then the 2nd parameter determines how the data is returned, then the 3rd parameter tells the function how many times to shuffle the array. I've written this because I think it will be useful for people on StackOverflow, I see a lot of questions trying to figure out how to get a random value from an array. The parameter tells the function to either only return a single array element if false, or return the whole array (with keys in-tact) if true. As you can see in my code, I have to check for the 2nd parameter twice to do actions before and after the actual array shuffle. I wanted to see if anyone had any advice or knows of any ways I can improve my code. I've been posting a lot of my code here lately, and I really enjoy how much I'm able to learn from answers. Thanks in advance! 

I know what you are thinking, it's never a good idea to roll your own encryption functions, but I'm doing this for fun and self-learning. I created a function that allows you to send a string as a parameter and it will return an encrypted version of the string. Here is my encryption function: 

The flat array you want to group (array) The key you want to group by (string/int) Option to preserve the group key in the output of each sub array (Boolean) Option to preserve sub arrays. If only 1 key exists in each sub array, the function will store just the single value for each row instead of an array (Boolean) 

This will encrypt the string, whereas every character will become 6 characters. The 1st 2 of each character are keys that are required to decrypt the letter, and the 4th character is the actual character being encrypted except masked by a random digit (Basically the letter is converted to its ASCII number and a random number between 0-9 is added/subtracted from the letter). The 1st key (labeled prefix) lets the decrypt function know if the random number needs to be added or subtracted, the random number is passed as the 2nd character in the encryption, and characters 3, 5 and 6 are random noise characters. Note: The prefix is generated depending on the ASCII number of the character that is being encrypted. If this ASCII number is below 44, the random number is always added to the character being encrypted, else it is always subtracted. The prefix itself is a character in a certain range, if the ASCII number is below 44, a random character between ASCII and is generated, any of these characters tell the decrypt function to subtract the random number from the encrypted character, else ASCII between and will always add the number. For example, the string "Never roll your own encryption functions." may encrypt to: 

I've written a simple helper function for my helper class that allows me to check if a substring is in a string. With my function, you can supply either a single needle to check for, or an array of needles to check for. There is also a parameter that allows you to select if you want to check word boundries or not, and a parameter to allow you to choose if the search should be case sensitive or not. 

Also move this into the .h file. It is so short. destructor Your destructor is empty - remove it completely. default constructor in ListNode default constructor in ListNode is empty. You can not remove it, because you have one more constructor. However if you have C++11, you can do: 

Why you pass function pointers? Do it with class. Or with . I am not very experienced with this, so I will do it with , but will add it into template parameters. expandCluster() more or less similar comments. 

You need to use prior declaration. Because you are playing with dynamically allocate objects + polymorphism, you MUST add . I do not think the code will work correctly without it. 

I agree with Loki, but hare are some more things: Destructor I do not see the destructor. What happen when you destroy / the class? Answer is huge memory leak. You definitely need to have to release the memory and prevent memory leak. If I read the code correctly you need following or something very similar to: 

I do not see much thing to review, except . Code style... ...is OK. I will suggest to be no more than 10-15 lines, unless you doing something that can not be separated, such preparing parameters for SQL database or things like this. issue You should avoid at all costs. Remember in there are operators such , here is an example: 

Code is way too complicated, but let me try: Style you should NOT use names starting with underscore. I did same error in the near past. If you want to emphasize that those are , add the underscore at the end. Mixed case file names You should avoid capital letters in file names. and support case insensitive file names, but and most -es - do not. Imagine someone compress the code using or and when you un-compress it - surprise - capital/small letters are lost. Once I lost all small letters on huge Java project - file names became all-caps - it was easy fixable since all I needed to do is to rename everything with small letters. Keep class names with capital letter, but make files with small letters. allow this, do not. This is huge problem in world, but nobody speaking about it. Factory.h no need to provide default c-tor. it can be removed. Number.h I don't think this compiles. 

What is the doing? Is this because of incomplete . comment - remove , use or . helps the optimizer a lot to speed up the code, when class is known. - I think you need to check somehow for it. Probably in . Fraction.cpp prefer initialize list: 

Once again I decided to beat system function. This time I decided to use a template and to "precompile" all cases from 0 to 31 bytes. Result is 400% improvement - from about 1:15 min to 0:25 min. Finally I had rewritten with naive looking for statement and I noticed that the compiler can optimize it as well. However I did not tested with random data, so I am not sure what role the cache line and branch predictor plays in the tests. Here is the code: 

inline methods in ListNode inline methods are present into the class definitions. Remove all "inline" keyword, it does not needed. However ListNode is so small, I would merge it in .h file like this: 

Make for list elements. Currently the list is using . If you decide to use or , you need to change it in 100 places in the code. Make some or (C++11) so you to be able to change the type from one place. It could be inside the class: 

variable is static. This means it it accessed using lock + semaphore or probably is atomic. Why not move the inside the class? 

However I would use this instead, even I do not use any arguments. This is because argv[0] is always set. 

return 0 from main() In latest C++, from is optional. Since is there, do not remove it. const method 

possible error: constructors / destructor of ListNode does not add-up. there is some error somewhere. possible error in constructor probably there is an error? why you create prev and next here? I believe you need to set those point to something else, not to allocate new nodes? or possible error in default constructor and destructor you have default constructor. what is it purpose? just to have one? it does not initialize prev and next. You probably want to remove it. probably destructor wants to free the memory? I said to remove it, because it does nothing. or possible benefit of using "std::unique_ptr"? you probably want to use automatic memory management using "std::unique_ptr" (C++11 feature)