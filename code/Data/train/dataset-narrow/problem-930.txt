Recommendation Curly brackets are sometimes in same line as a method header and sometimes in the following For the sake of a good code-reading and understanding code should be structured. Write curly brackets either in the same line as the method header or in the following. 

This is an addition to other reviews. Code Quality: include 'home.php';: In the context of your shared script it's not obvious what it does. I recommend to rename it to e.g. . Further depending on the content there are other more beautiful ways to handle "that". require_once 'class.user.php': Including classes manually shouldn't be practiced anymore. Okay, maybe in an application which has like 3 files in total. However, in larger applications you should use feature provided by PHP using . So, when you try to instantiate a class PHP automatically tries to include the class once if it does not exists in the current context. View & Business Logic are not separated: Nowadays view and business logic is separated to provide a better overview. Further it grants a better maintenance if implemented correctly. Check patterns like which stands for Model View Controller. Other header("Location: index.php"); You perform a redirect without specifying the reason like . 

Each class belongs in an own file It seems to be overhead but remember: Each class has one task to solve and the same goes for files. In small projects it does not matter that much but as soon as a project grows it helps a lot. My namespaces are similiar to the path of the class location. As of this I know where every class is located - everytime I instantiate a class. Namespaces If you have not read yourself into namespaces I recommend it. Namespaces combined with an autoloader are a great way to make your daily developer life a lot easier. When using an autoloader you have another reason for having one class in one file. further aspects 

The code became even better readable and when the validation has to be adjusted it is obvious where to make the changes plus you can validate the Route at any line in your software with the guarantee the validation is up to date. Approach 2: Move the assignment to a respective setter and throw an . 

Script is terminated in the constructor The script should not be terminated in a random class but by an . The type of the exception decides wether the script has to be terminated. Commonly a leads to a termination. Possible Route class 

In general your code is a good start. Keep going :) However the class should be refactored. Issuelist: 

As others mentioned the code is not completly OOP. A real OOP application does not contain functions but classes and methods. Well, except of the file that includes the class that initialize the application and the autoloader function - AFAIK function expects a function only. The autoloading part is missing as well which is part of dependency injection. I recommend to get into it. In the constructor of class User you do not validate the email etc. that are stored in the session. They should be a) passed as arguments to the constructor and b) validated. E.g. in the method. Another point is the php closing. To avoid errors never close php. It's hard to figure out a space or another character after php-closing. 

You include an autoloader in the test class. From UnitTests I am aware of a bootstrap file. If such a class exists/can be registered for functional tests as well you should move it to a respective file. 

Not every method has a self-describing name : What does it return? Object Length, Current Line Length, ...? I recommend to rename the method to what it does - . 

There are global attributes with the access modifier An object is responsible for its valditity. As of that its attributes has to be setted via setters always and the attributes has to have as access modifier either or . 

There are both empty methods and methods that return always true : When a method body is empty it usually means you have not implemented its logic yet. It is possible that one forget to include its logic but calls the method which can leads to a difficult to identify bug at a later time. Therefor I recommend to throw an with message . , : Why does this method returns true/false anytime? Does it switches tags on/off? , : These methods rather append, do they? Or does this word describes appending as well? 

In short, this would mean that each step in a workflow would be represented by a service method. The UI just issues commands and reads results. It doesn't contain any business logic whatsoever. 

Having these filters added to the model builder in , you'll see that whenever you query any of these entities, the filter will be part of the SQL query. Also when using s. If you want deleted items as well, just disable the filters in a context instance: 

Better? Probably... All your repositories look almost identical, only the served type is different. Therefore, you may as well turn to generic repository. In its elementary form, adopting your methods, it looks like: 

Now you get only one record per show in the result set and only the required fields are included in the . You'll still see a number of joins, but they don't cause any widening of the query, as s do. 

You evidently want to clone mapped and scalar properties only. Your approach works (if you remember the error sources), but I'd prefer to use a method provided by EF itself: 

... you would pull all records from the database before the actual join is made. By returning , this would turn into a SQL query containing a and (obviously) far less traffic. 

I don't understand why repositories insert, update and delete themselves. For example in the method, you have: 

You are combining an with a local sequence, . It is possible to do that, but Entity Framework1 needs a lot of code to convert the sequence into something that behaves like a SQL table. I'm sure this is a major performance killer. From what I see, you can do without this local sequence. You know the begin and end date. So it's possible to get the forecasts between those dates. If you group those forecasts by their , you achieve the same grouping: 

Now if this validation is violated, it will also throw a with the custom message in . Notice that the context responsible for saving the item is wrapped in the . This is not so by default. You must override the context's method to add the context to : 

If you forget to use (or don't want to apply) the modifier, it will no longer be a shallow copy (because is typically used for navigation properties). It relies on unmapping properties by attributes. If at any time in the future you start using the fluent API for that purpose you'll change behavior in an unexpected place. 

First, you can copy an object easily by getting it with and then -ing it to the context. Even child objects will be added: So, leaving the Id values for a moment, the core of the copying code could be nothing but: 

What is this? This is either a copy/paste error or a major design flaw. How can a repository add itself to the it contains? And why the double(!) cast, why the ? "Smelly" is an understatement. Why is 's member internal? The repo is supposed to encapsulate a . What should other classes in the assembly do with it? If you need it to be internal, it's because of something you don't show, and which, again, would be a major design flaw. One method returns untracked entities? (), while and methods don't. That's confusing. It may be useful to have options for applying or not, but a consumer of a repository should not have to know which methods do and which don't. Either the method name should reveal it, or it should be parametrized. in its present form is a useless method. It returns ... 

Since it may not always be clear if the program control flow will end up calling the method it may seem sensible to load the collection always. But that would require any old time s are loaded, even when they're not needed. Load right before is going to be called (if possible). 

Note that this returns an empty string if no occurrences are found. I think that's more correct for a function that returns "everything until the nth occurrence of x". 

All other pieces of code that wrap this part can be deemed redundant. As the ultimate (over) simplification you could even write this code directly in an MVC controller's action method. No added layers involved and the job is done. Useful layers? Anything added on top of this base line should be carefully considered. Additions should be useful, not restrictive. Your proposed architecture is restrictive because it is "vertical". You seem to have a column of abstractions for each entity: , (as ), with subclasses like . Then there is a class, maybe part of a similar column. This architecture has the same drawbacks as Data Access Object: it will lead to multiple isolated queries and repetitive code. Alternatives? This columns-per-entity setup defeats the purpose of an OR mapper like Entity Framework, which is to work with object graphs that map to a relational data model. When you need orders and their related customers you can get them in one LINQ query. Likewise, when you want to save orders and customers, you can add them to the context and do one call to save everything in one transaction. This has made me move to API-oriented architectures. I usually create services that live for the duration of one web request. Each service has a number of methods that execute some business case, like creating orders. For this, the service has one context instance that can pretty freely be used inside the service methods. This works best in combination with dependency injection (or Inversion of Control, IoC), but that's not a prerequisite. This is, very briefly, what it could look like: 

A generic event listener You have a list of objects related to a TV show. You have coded it by hand for each particular episode which is laborious, prone to error, and just a painful time consuming process. Using your naming we can improve the code complexity by having only one event listener that can deduce what the click is for and what to do with it. For this we wrap everything that needs a click event in a containing element ( element id ) For each clickable element we add data we can use to determine what to do with the click. ( and ) We set up the initial visibility of episodes in the HTML. 

You could reduce complexity via reducing the overall count of function calls to $. There is only one bit of missing information. The state of of the handler span which will be in the CSS. As it is not clear when the code runs I can not assume it is in its initial state. 

The cost of software In my opinion the code you have presented is overly complex and extremely resource wasteful. This is the type of code that gets sent back for rewrite. I understand you are still learning, and apart from the two bugs your code does its job. But there is more to coding than just creating working software. You write for the client first As a developer you must provide the best possible product for the client, the community, and the developer as a business. Software incurs costs for the client and community in terms of both time and power. This can be measured by CPU cycles and memory usage. Costs to the developer are in terms of deployment (bandwidth cost) and negative association (Developer X's code is slow and power hungry). Bugs The code you created also has a number of bugs. 

That with the other check ensures you don't step on toes, and your code is safe as well. Though what to do if that function is already taken is an issue that is best solved by not adding to the prototype and just creating a function 

Now you don't have to have the long chain of if else statements. For details on the array methods and go to MDN array jQuery Do you really need jQuery? I have never approved of jQuery for many reasons, one of them being that it encourages bad practices. These days its primary reason for existence (cross browser compatibility) no longer applies and it is a large complex script that your clients need to download, parse, and execute, which is a cost that they must bear. Now I have an even better argument against its use. Using jQuery opens your site to security vulnerabilities see 77% of 433,000 Sites Use Vulnerable JavaScript Libraries Thus I remove jQuery, as it is not needed and can be done with... 

Each group of three can easily be replaced with one. The click functions can use the click event to get the needed information from the DOM, and the result functions can be passed an object that contain the sound, message and element to display the message. 

inside a for loop which has a major impact on performance. Golden JS rule "Never define a function inside a loop." The function creates a new array each time it is called. That array needs memory and CPU time to fill. You create 100 identical arrays, when you only need one. The function inside the like the array is a unique instance. Each time it is created inside the loop it creates a new context and closure which requires memory and CPU time. Like the keys array you only need one instance of the function with one context and one closure. Create the array and function outside the loop to reduce overhead. Above I mentioned the performance was ~20 times slower. My benchmarker gave your code a score of 19.5 which is a value proportional to execution time averaged out over many calls. This value only makes sense in comparison to other functions. (19.5 compared to basic version 1.4 on firefox and 13.4 to 0.8 on Chrome. (1)) Keeping to your design and with the following modifications in steps moving first the functions out of the loop () and then creating the function outside the loop () and finally replaced the array iterator with a for loop () and benchmarked the results. See bottom of answer for code. The results on firefox (win10)