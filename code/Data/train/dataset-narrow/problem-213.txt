The preamble is actually 7 octets,followed by a framing octet, the start frame delimiter (SFD). They just mark that a frame is coming and serve synchronisation purposes, they are not part of the frame. Just like the interframe gap, doesn't count as part of the frame. Preamble and SFD never go into memory, and so there is never any memory offset which includes that 8. Ethernet frames are sometimes described as 1514 octets because the hardware usually computes/checks the FCS, and the CPU never sees it or puts it in memory: only the src, dest, type, payload. But the frame is defined to include the FCS, unambiguously, according to the standard. The basic frame is defined as having maximum client data field length of at least 1500 octets, which plus the 14 plus 4 FCS = 1520. PS. Don't forget optional 802.1q tag, another 4 octets for packets on trunks; and there are some other special types. EDIT The standard mostly speaks of frames, which are defined to include the FCS (thanks Richard for comment). It also speaks of packets which go from the beginning of the preamble to the end of the extension bits (which sometimes are needed after the FCS, to ensure good collision detection.) This packet is all the bits which the hardware transmits on the wire. (This usage of "packet" can be confusing, as we normally speak of IP packets inside the ethernet frame.) It's just a matter of definitions, in the end, and we thankfully can look them up. If you weren't aware, the standard is freely available. The core is 4,000 pages long (!), but most of the things like definitions are very easy to read, and absolutely unambiguous. Highly recommended to have at least looked at Section 3.1.1 Packet Format. $URL$ 

Just to be clear: if it's resilience you're after, one goes about it a different way (two routers, two switches, two power distributions, only joining at unremovable single point of failure.) Hope that helps. Jonathan. 

The routers are plugged in to trunk ports, having two virtual connections each. The PCs are plugged into access ports, and the switch configured for sockets on VLAN a or b. To move a PC you reconfigure its switch port. There are a zillion ways to do this, this a just one. Obviously you can get routers with more than one ADSL connection, but in my opinion (especially given where you're starting from), you're better off with two identical small machines. This physical setup also has some other possible configurations: put in one VLAN, give routers single interfaces, R1 10.0.0.1/24, R2 10.0.0.2/24. Give both non-overlapping DHCP (10.0.0.32-63, .64-95) each with itself as default gateway. If routers are the same it's basically random which DHCP the PC gets (they'll tend to get the leasy busy router) and so you'll share. If something goes wrong with an ISP or router, switch that router off, re-DHCP the PC (by reboot or wait) and it will connect to the other. A third configuration would be to give static allocations in the DHCP to put the PCs into group A or B. EDIT: a fourth configuration is three VLANs: a) dept 1 with R1 as 10.0.1.1, b) dept 2 with R2 as 10.0.2.1, and c) inter-router VLAN with R1 as 10.0.9.1 and R2 as 10.0.9.2. You need a bit more routing on the routers, but it means that no PC could reconfigure itself to go out of a non-permitted router. Hope that's helpful. Whether any of this is suitable depends on your numbers and your risk tolerances of different factors. How many people in your departments? EDIT: With about 10 people, it's pretty easy. I'd recommend the 2-VLAN method, configure a 24-port switch: 4 trunks, 10 VLAN a, 10 VLAN b. Now you have nice simple configuration. Put people in a or b by replugging: very easy to understand, takes seconds. Be aware that a person could reconfigure their own PC to send out of the other one unless you take steps to prevent it. Just to repeat: it's just a sketch for a starting point. 

This makes a file with a line per packet. Use a different tcpdump filter if you want ip broadcasts or some other restriction. The file will have lots of these: 

Many Cisco devices don't allow you to find out clock data through SNMP. For practical purposes I use a simple SNTP client which does SNTP-query then syslog. Perhaps that's of some use. Kind regards Jonathan. 

But of course you can't have multiple EDIT: When the second one is added, it replaces the first. Am I missing something? (Example here using two VLAN interfaces and list 10 per Ron's answer) 

I recommend reading RFC 1122 "Requirements for Internet Hosts -- Communication Layers", section 4.2.3.2 "When to Send an ACK Segment", and follow up from there. $URL$ Jonathan. 

Of course you end up with mismatched subnets: the host considers the network to be /23, while the two sensors consider themselves to be in two non-overlapping /24 networks. This situation is to be avoided if you can possibly help it: all kinds of trouble can ensue. But if you have a practical problem, sometimes you have to be pragmatic. I'd consider this to be okay if you're taking final backups from something you're taking out of service, but just to repeat, try hard to ensure it's temporary. 

Certainly you can. You simply use your NAT/PAT in the ordinary way. It doesn't matter that the inside address isn't local to the NAT router; you have to ensure that the routers at both sites have a router down the tunnel for the internal addresses at the other site. 

Of course B and C can exchange packets so long as they are statically configured and addressing each other by IP address; but you might find there are hidden dependencies on the router or A that can get in the way. A typical surprise might be DHCP services on the router being unavailable so B and C fail to get IP addresses or their leases expire causing failure many hours after router goes down. Another can be cause by inaccessible DNS services on A preventing them finding each other or reversing the other's IP address for logging purposes. They can "still communicate"; whether they will depends on what kind of communications you want them to use and the details of their network. Kind regards, Jonathan. 

PC1 sends src=192.168.1.2 dst=192.168.2.2 to routerether1 on seg1 Router sends src=192.168.2.1 dst=192.168.2.2 to PC2ether on seg2 PC2 receives it and replies to src=192.168.2.2 dst=192.168.2.1 to routerether2 on seg2 as it is local Router sends src=192.168.2.2 dst=192.168.1.2 to pc1ether on seg1 

It is not true. There is nothing about the addressing scheme which affects how much bandwidth you use in any way. The only thing that matters is how many devices you have and what traffic they are sending or is being sent to them. 

On the presumption this is a real life problem and you can't reconfigure anything on the two sensors nor are they configured to use a router. And also assuming the sensors are configured as /24 (you don't actually say this). 

For ad-hoc reports, I would normally do this with minimal Unix tools: and . First collect broadcasters with ether address: 

As others have said, it goes from one point to another. Here are some explanations from manufacturers. 

You'll find that the ethernet sockets you're speaking of are actually a switch, on those smaller routers. Cisco does the same thing with SOHO-type equipment, eg 867VAE, for the same reason. [EDIT rewrote from here down] With a 2811 you can add a switch module in just the same way, such as HWIC-4ESW. Switch ethernet ports are also called Layer 2 ports, and they are associated to a VLAN (by default VLAN 1) and can be set to be trunk ports, access ports and so on. These are expected to be faster for switch-like behaviour. You can also add more "layer 3" interfaces, such as with HWIC-2FE. These have IP addresses, access lists and so on. These are expected to be faster for routing behaviour. Somewhat confusingly, both types of interface are written the same way,but if you, for example, put an IP address on an L2 interface you get an error: 

Well I suppose it is without gateway but only works if you have network address translation which really takes place on routers. The details of the addresses aren't however correct on segment 1. (The first ping packet would ping the router and get a direct reply.) 

A nice trick for scalability is to set up DNS for each site, so that hq-N.vpn.example.com gives the appropriate external address for that site to connect to. Then you can reconfigure/balance the hub with the DNS and not reconfiguration of the routers. You often can't do what you want with port redirection because very frequently you can't get packets to the outside of your router without special "fixed IP address SIM cards". I designed our network so that we are extremely unfussy about how our sites connect, as often it is out of our control. We set a lowest-common-denominator MTU on the site router interfaces: our goal is commonality and simplicity of maintenance, not performance. Hope that's helpful. 

A note from the history department: the units of the TTL are seconds, with the permitted time budget decreasing by a second for every router hop. From the Internet Protocol RFC 791: 

The Linux command nping has a flag for setting the Don't Fragment bit in the flags; it also can generate TCP and UDP traffic, not just ICMP. Will that help? 

Of course, the whole purpose of the exercise was to get the cheque there, which might be called the ultimate payload. 

I'd worked in networks for a very long time before I learned that the ethernet "Mbit/sec" speeds are 1,000,000 bits; while obviously we normally think of 2^20 for amounts of bytes. Threw my calculations out by ~5% for many years! Also: the ratio of data bytes to TCP header varies greatly; previous answer omits mention of segment size and fragmented packets. Though of course I don't disagree with the general conclusion. I'd start with network sniffer to see the lags between packets: do the servers respond promptly? Are your packets full of 1-byte segments/datagrams? And while previous answer says B is byte and b is bit, many people are not as meticulous, and many are confused: personally I always write bit/sec and byte/sec to be unambiguous. Let us know how you got on. Jonathan. 

... and from the analogy department: You drive with an envelope containing a document which is a cover letter with a cheque which you're going to hand to someone. 

Unless your predecessor had constraints you haven't mentioned (segment the hosts in some way to prevent something), it might be worth just renumbering to something more conventional. (To be concrete, you might consider 192.168.0.0/24, with router at .1, servers starting from .32, printers from .48 and laptops/workstations at .128, any switches or odd things at .8) There are any number of posts here and all over the web on how network masks work, and it's really worth reading up on it. (Mostly they don't explain why it works this way: it's basically because th bitwise logic could be done in a microsecond or so, even on little microprocessors in 1980s.) Kind regards and hope that's helpful. PS: "I moved the gateway to 10.10.192.1 so there's no more 9.9.0.0 prefix" is likely to make things worse if there still are any hosts with address like 9.9.x.x. I confess I haven't followed what you've tried and what still is a problem.. 

Thus each transmitter is connected to the other's receiver. You can see that if you plug computer-to-computer (or switch to switch) you need either: 

B's default route has no part to play in this. If A is to communicate with anything on network 2, it will need a route for a network which includes network 2 (ie could be network 2, could a default route), passing to B interface 1. Symmetrically, if C is to communicate with anything on network 1, it needs a route, perhaps a default route, pointed to B interface 2. 

If you had a factory reset switch, and two computers with addresses PC1 and PC2 they'll be able to ping each other by IP address. If they can't, there are plenty of exotic configurations which might prevent it, but as well start with the easy ones.