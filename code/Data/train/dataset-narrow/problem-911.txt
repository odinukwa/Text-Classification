Improve naming: In C, use as the length of the string which does not include the string's null character. Use , to denote the size of the string which does include the string's null character. 

Given the 2 above warnings implies OP is not compiling with warnings fully enabled. Best to do so before posting. Function Invalid code. The following attempts to save , yet the memory space for it is not yet available. IOWs, OP is posting code that certainly is not functional. Sigh. 

With the context of OP's code with small strings, using is not a problem. For maximal functionality, C best uses for array indexing and so should . Recommend to define variables closer to where they are needed. is superfluous. 

Unclear if OP's code is functionally correct. I would not expect the to change those students who are under the average. Either the average is incremented by or the 50% compare does not include . 

Avoid allocation by size of type. Instead by the size of the referenced variable. This post does not show . OTOH, with the right code, we can have less need for it. BTW, pedantic point: good to do allocation math leading with as that insures math at least at width. Consider could overflow the first done in that order. 

I'd expect non- function names tailored to linked lists. Example: is too likely to collide with other code. 

For the next step in prime number improvements use the Sieve of Eratosthenes. may exceed range which may be as small as 32-bit. Code may need . Avoid manually formating. Below code and other indicate a hand effort. 

Name space: The names of functions, variables and macros in share no cohesive naming scheme. This makes it unclear of their source when used. The use of and is something that easily could collide with other libraries. Suggest something like with ,, etc. Rather than , make it a function: to prevent user code from changing it. is not standard C, yet implementations I find use , thus the cast is not needed. Also parens not needed with 

For functions that do not change , add to better convey codes intent and allow for some optimizations and wider application. 

Name space organization: Inside , IDs like , , occur. In *.c files that use these identifiers it is not clear where they originated. A define like can certainly collide with other code. Perhaps using , or some other scheme would help. Flexible code: The size of varies with . So using a fixed is a problem should the number of weight names change. suggest: 

Any form of container should use minimal resources when empty. In , I recommend , like should tolerate . Add check. calls lack checks. Rather than allocate to the sizeof a type, allocate to the sizeof of the element. It is easier to code right, review and maintain. 

What is the header file's name? The point being that the name of the header file, like should have some connection to the items inside. Further, the objects declares and macros defines are all over the name space. Consider some convention. Put in , in . Strange . Did you mean ? 

Consider auto format. The space between will likely shrink with auto formatting. Insure code is presentable even after auto formatting. 

When the buffer is insufficient, the rest of the line is consumed (and lost). An error is indicated. In C, a line of input is up to and including the ' C11 7.21.2 2. When the streams ends with something other than a new-line, how that is handled is implementation defined behavior. J.3.12. This code treats a ' and end-of-file as the same. In both cases, a is not include in the saved buffer. If code reads a , that is not practical to discern with . This code returns the size of the space used in , which includes an appended null character. Lesser issues include handling of augments, small buffer size, undefined buffer state on and use of vs . The below code also clearly - I hope - handles that. An alternative allocate memory: Allocating memory per external input can lead to abuse. This allows external forces to overwhelm memory allocation. The following does not use memory allocation like getline substitute that will enforce 'n' as limit of characters read or getline. Another alternative could use limited allocation, but that is not done here. 

Complex formats benefit with a break up of the format string literal. Especially when that sub-format is to be used identically elsewhere. 

Overall code does not convey "Generating letter combinations". Simply using a function in called would help. Prefer the, IMO, easier to code and maintain allocation style of the following. is pointless as it is always . 

Rather than , use the below. The [red] is a 2 wide edge about that is pre-populated with to indicate the knight can not go there. That eliminates the test. By using a power of 2 for the last dimension, code can often perform index calculations faster - even with extra [black] do nothing columns. By using , the array is smaller and may cache better - YMMV. Using rather than is simply a better name. 

It is apparent code is not written using an auto formatter and that is the biggest style problem. Any style worth using will match an auto formatter. Manually formatting is not productive and too inconsistent. 

With using , no need for cast. Since this is a logical test, recommend using rather than arithmetic . 

Rather the use throughout the code, define a constant in one place. Certainly makes code easier to update to a new size and self-documents the "meaning" of 

I/O is often a candidate for speed improvements. For this code, if there is no other calls to , I would use and then process the lines myself, reading large blocks. On systems that use translation, improvement can be had by reading in binary mode. When a file ends without a final , code is probably faster appending one, insuring the rest of code does not have to check for that expectation. 

Sooner or later you will have trouble with user input using . and friends return the number of successfully scanned fields or on certain end-of-file or error conditions. Recommend to start the habit of checking input results. 

returns the incorrect signed result if is not 32-bit. Certainly a problem if is 16-bit and likely if is 64-bit. If needs to be 32-bit, use operator reduces clarity here. Suggest 2 lines of code 

"Is there a "better way" to shift items? memmove" is deigned to be very efficient. A good replacement for the loops that shift data. Example: 

Not all are unbuffered. Suggest appending to your print to insure timely display. Note either call below may make the same code with smart compilers. 2nd has the advantage of no problems with 

I would add and to the list of "numeric" characters. Suggest to invalidate all white space as a delimiter candidate. This will handle "How can I deal with the situation where an arbitrary number of spaces follow a delimiting character?". 

Test code Problem specifier. Use for . The 2 below hint OP is not compiling with all warnings enabled. Double-check that all warnings are enabled for prompt automatic feedback. 

Using and would be a preferable way to determine if a string converts to a number. By using various locale settings, code can work with thousands separators too. This is a advanced task for a learner, so we will stick with your code. Avoid magic numbers. Rather than code 13, use a derived limit. 

Using as the name of the linked-list describes the inner works of the type. Instead, the name of the linked-list should describe the list itself and abstract its inner workings. 

Test harness: Random points about 1/3 left, middle and right each and 1/3 above, middle, below each. Variations tried - one is below. 

Naming convention inconsistency. Suggest below (spacing added for clarity here, not needed for code.) 

Failure to insure is a string. does not insure that a is written. Since does not initialize the elements of the array, by the time code gets to , may lack a null character. Code needs to add it. 

Prime number efficiency. There are multitudes of ways to improve the prime test. OP's code is a basic one and works for all . Good step 1. Let us try more Why the test. takes care of that 

The type name misleads. In C, an object can be a , , , etc. Much code depends on being a real value. 

Certainly found the alternative (2nd version) immediately understandable. Not so with the first (both simplified below). The 2nd maps directly to the stated requirement "exits early and returns false if any call fails". This alone gives it a strong preference. 

Although this may look like a function call, a worthy compiler "understands" and can replace this with efficient in-line emitted code. Let your good compiler do its job - or get a better compiler. If code "knows" refmemcpy(). IAC, a good compiler replaces either of these with in-line code for such small copies. mox nix 

Note that differs in functionality from the standard C function which returns non-zero (truth) on . Suggest: 

Avoid a hacker exploit. What happens when ? Injecting a null character as part of is not easy, but doable. 

Debug code? Clearing the block serves little aside from cleaner debug. Don't use a type unrelated to the variable. 

OP's has not stated the compare functionality of Not-a-number s. A desirable aspect is that all NaN sort to one side, either all greater or all less than any other number, regardless of the NaN's "sign". considers sign first without regard to NaN-ness. 

Code appears to be reading until end-of-line, yet that is not specified. Even if so, with ignoring leading white-space, it makes sense to also ignore trailing-white-space including the potential . Appending a to insure a string does meet the title requirement. Should anything special happen if a null character is read? Buffer size too small? What to do with extra characters? Consume them, leave them for the next I/O functions? How to handle an immediate end-of-file? Or an end-of-file after some characters? How to handle a rare input error? How to handle pathological input like , ? Array sizes exceeding ? 

Certainly is meant to fail with negative numbers, so direct application of family of functions will not work the same. Another difference between and is that rejects strings that begin with white-space. Based on codes usage of , the seems to be an unimportant difference. The design of is weak. It can "fail" at least 4 different ways. It returns 0 or on 2 of those, unspecified on overflow and has a technical undefined behavior (UB) with when . Suggest instead to return 1 value, like , for all problems. A name like would add clarity over . 

At least 4 C string coding mishaps Writing outside . The value range of setting a array element is to . 

Bug: Wrong specifiers. Temporarily change to below to see the mis-match. Formats should have been , not 

Style: explicit initialization of global values, even when 0. Although not needed for functionality, global variables are 0 bit filled, it self documents that indeed these variables are meant to be 0 and not a coder's oversight of a forgotten initialization. If these globals are not to be used by application code, make them static. 

Consider that the greatest difference of the following 2 sets exceeds the range. For a more robust solution, return a wider type or detect failure.