As per the PHP Functions page To better separate the function's business and the view, consider creating an output string and returning it to be ed. You'd then have: 

If you choose to use a framework (i.e. Zend), many come with documented standards and styles that you should follow with that framework. 

Running this will print "arr2" each time. Why? It's the keyword that does the magic. It's a simple trick called late static binding. It's basically a way to carry parent attributes down the structure of the classes. Here's the PHP docs, which also explains versus . It's a good read. 

Overall, good improvement. You should take your time building these things, I saw a lot of repetition and unnecessary lines of code. The less lines of code you have, the easy the whole thing will be for you! (Not too literally. Don't shrink it all to 1 line) Feel free to call me out on anything, it's likely I'll edit this with more info or comments. 

A lot is repeated. In an attempt to cut back on emit code, I made . It works great. Any ideas on how I could do something similar to clean up the many methods? Because almost every function requires the database, I had a lot of s at one point. I've cleaned them up mostly, but I'm wondering if I'm handling this connection correctly. I was forced to take out the method on . Will this hurt me? (This is what makes the title relevant!) Everything is in the global scope, should I change this? If so, in what way? 

I can immediately see two more options, perhaps they're something you're after, perhaps not. Option 1 Turn into a multidimensional array. You would end up with something such as: 

Naming is one of the most important things a programmer can get right. Here's a couple pointers for naming classes: 

This function, since it's only being called once, is what I believe to be clutter. I don't see a need to separate it from the main logic. Doing so only increases the amount of times we need to look back at the code. Also, I see no reason to cut of "Directory" in . Spell it out for clarity. 

Other than that, it's a simple piece of code, and there's already tons of people who have done this, plus more. It's usually safer to work with a community run library than to create your own! 

This results in your and then is ounces, optionally roundable. If keeps drams in your output is necessary, simply repeat the above code but in respect to ounces. What's let over is drams! I hope you're alright with receiving this alternative, instead of heavy review of what you have. But in my opinion, type cast can cause you to lose some of the precision that is lost when moving to integers. 

You said your structure is horrible, but it's not really horrible! I suggest you skim this (a bit old, but relevant) and try to read up on coding patterns (especially AS3 related) so you have a wider knowledge of what is possible. So, these lines are unused: 

I'm not sure if you were unaware of this or if you were reinventing-the-wheel. Before I go all out, maybe you could comment or leave an edit on your question letting us know if you meant to reinvent things here. 

I was able to play around with your requirements, and I think I got a solution. Here is what I did to profile your code. I set up the data array with: 

Interesting proposal! I could hardly read the expression that you've been working with, so I started from scratch and have built the following: 

I know, it's bad. Everything is mixed together, and I don't know what to do! Suggestions for architectures would be great, but if you could help me fit this into some framework, then would be great too. Right now, I've got the data stored in a JSON file. I'd prefer not to have it in an RDBMS like MySQL, but I've never worked with anything else so I'm open to suggestions! The data I have is looking like this: 

Sorry, if you were looking for fresh baked pies, I only have a web client to help you sell them. I've recently picked up server-side JavaScript and have added it to my toolbox, and while I've had a great time learning so far, I've got some code which needs another pair of eyes to review it. A quick objective summary: this code uses three big JS libraries: Node.js, Express, and Socket.io. For data storage, I've tied in MongoDB. What's going on is a simple back-and-forth communication between the server code (index.js) and the client code (not listed, I don't want that reviewed yet. If you really need it, I'll edit it in). For some background, especially if you're not familiar with this technology: with socket.io, there are two main methods: and . sends a packet, either direction. receives data, from either direction too. With my code, I first listen for a connection, and then emit some data to the client, and then listen for a response. When a response is heard, the server sends data back in return. Index.js 

In regard to your first program, consider this case: you opt in for Package B, and you end up taking advantage of 10 hours of internet. According to your program, you'll be charged $3.95. In response to this logic error, consider using an statement to decide whether or not the customer/user is above the monthly limit () prescribed by their Package. Also, consider cleaning up your code on line by breaking up the elements onto their own lines. This means putting what's between the brackets on it's own line and bringing the last bracket onto a line. @mdfst13 mentioned in the comments how your logic is wrong in the second program. Consider drawing on paper a diagram for how each output will be calculated. It might look like a tree diagram or a flowchart. 

I'm not familiar with video uploading, just as you are. However, I'll offer some advice on the way things look.