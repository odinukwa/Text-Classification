I want to create a custom chaped collider in unity to create point-defense triggers for objects. I have a spherical collider that triggers for attacking objects that enter it already. However I want cone-shaped colliders for point defense to detect and shoot down enemy projectiles in certain areas. I can do this by creating a custom mesh and importing that for the collider. How much of a performance hit can this cause? If you have 1,000 of these colliders active in a scene with objects flying in and out of them, will I see significant performance reduction compared to just using a spherical collider and dropping the cone idea? 

I've found that making a looping script works well for an attack timer, and avoids the problems that come with using a coroutine to time something. Bonus here is that you can use this anywhere in your scripts for an easy timer. 

In Unity, the OnTriggerExit() method is not called/fired (not sure if it's an event or not) when an object is disabled or destroyed within it's collider. In comparison to it being fired is an active object that was within it's collider no longer being inside the bounds of that collider on the next frame. I want to be able to call OnTriggerExit() on my triggers OnDisable() method as a workaround. How would I go about calling/firing OnTriggerExit() manually? 

I'm at a loss, and have no idea what I'm doing wrong. My dynamic meshes seem to work perfectly fine for everything else in the game. Thanks. 

Although I've never used it personally, I believe The Elder Scroll Construction Set is incredibly powerful and lets you change virtually anything in The Elder's Scroll games (as you can probably deduce from the over 25 thousands mods available here). I've seen both Oblivion and Morrowind for sale at 75% off before on Steam (i.e. at 5$ each) although that's not the case right now. And of course, Half Life and most other Valve games are also extremely moddable. For a more complete coverage of the topic, you might want to start exploring this website though. 

The texture passed to the method should have size where is the thickness of my ine. I'll give an example further below but first an usage example: 

The maximum number of primitives that you can draw with a single call in XNA while using the HiDef profile is 1048575 according to this article. I've never tried it but since that limit is defined per draw call I think you should be able to draw more primitives by using separate draw calls. All of the DrawPrimitives type of methods take an offset and count into the buffer (e.g. startVertex and primitiveCount) so you can play with those values to draw different portions of the buffer in each call and keep incrementing the offset until everything is drawn. You can also take a look into the class available in this sample as it's pretty easy to use. Just increase the buffer size inside the class first. And while you're at it check this one too. 

I'm creating a text box that allows for selectable text, based off of Unity's InputField. An issue I am now facing is that the selection highlight does not respond to masks (The parent has a mask, but it is just ignored) depth is also ignored, this seems to render through any other UI element that's in-front of it.: 

I hope I'm making some sense, I've been pondering this for so long I'm not sure if I'm solving a problem, or just making up my own problems and digging myself into a hole. When you have a game that can have a multitude of attack types that may or may not be limited to a specific unit/structure, how do you design the framework that tied that together to the specific units/structures in a component-driven design environment? If this is not clear enough let me know. Edit: Great answers, thank you. Expanded Question: The answers seem to vary from "each object can have it's own attacking script" to "Have the attack types as their own scripts and assign that to each object for a more reusable solution". Lets say I have a "blaster" attack, it shoots a red projectile at a certain speed. It's damage, rate of fire, and projectile size are dependent on the unit firing it. Is it better to just make an attack script for that unit, or try and modify a "blaster attack" to fit the purpose of each unit that wants to use it? 

Take a look at the Unofficial OpenGL Software Development Kit. Not only does it include the GLM library, there's also a GL Util module which contains a replacement for the matrix stack. You can also see this tutorial for an introduction to the library. 

Create a new instance of type . Call passing it the path to your map file. Check for errors using . Iterate through tilesets using and . Get individual tile information inside the tileset using . Iterate through layers using and . Use to get the ID of a specific tile in the layer. Iterate through object groups using and . Iterate through objects inside each group using and . 

I have not tested the following bit of code, but I think the implementation should be something like this: 

Like Jimmy said an ellipse is probably a better fit for this motion. Here's some ideas on how to actually implement it with a bit more detail for those interested. Taking Time For starters, you need a variable to keep track of time in the game world. You can implement it any way you like, but here's an example. I'll use a variable called that varies from 0 to 24 (although when it reaches 24 it wraps back to 0). Unlike real life though, I'll just consider that day starts at 0 hours, and night starts at 12 hours. This will make some of the calculations easier. I'll also define the rate at which game time changes in relation to real time. In this example, every two minutes of real time will correspond to one hour in game. 

I'm getting some attacking to work with my units and I noticed that the coroutines seem to start adding up even after the StopCoroutine(IEnumerator) as need called. I dug around on ways to perform an attack loop, most of the time I found "Use InvokeRepeating" and "Don't use InvokeRepeating". Since invoke uses reflection it's performance heavy anyways, so I'd rather not go down that road. How do I get my coroutine to stop? Is it because it's in a while loop inside the coroutine? If so, how do I fashion an attack loop without using invoke? 

Turns out I need to call the method by name with a string instead of the method itself to stop the coroutine. 

When an object is clicked an event is published with relevant info on what was clicked. There are subscribers to this event using "MouseClickEvents += YourMethodNameHere;". This works as intended. However, since two players will have the same scripts as components this creates an issue where the 2nd player's scripts also add themselves to the invocation list of player 1's delegates, and vice versa (as far as I know, I don't know how to check what is in the invocation lists). So each player receives their own events, and the events of the other player. If I have a fundamental misunderstanding of a concept here, please let me know. 

Making this mesh via code and the texture seems to only tile on the sides, but not on the top. Any idea whats going on? 

And when rendering I used the following code. Notice how I calculate the parameter from the source rectangle and the texture size: 

Sure! Since there's no concept of 2D camera built into XNA, I am guessing that you are using some class to generate a and passing that matrix as a parameter to . If that's the case, the solution is simple... All you have to do is draw your score and anything that you don't want to be affected by the camera in a separate block, but without passing it the . Example: 

Step 2 Calculate the positions of the four corners of the camera in world space. In order to do that you only need to transform each of the viewport's corners (i.e. in view space) by the inverse view matrix. Example: 

I'm trying to understand the exact meaning of RenderTargetUsage.DiscardContents. The documentation says: 

Viewport.Unproject expects a source position in screen space, where the Z value varies between 0 at the near clip plane and 1 at the far clip plane. 

I'm guessing you want your interpolation to take 8 seconds to complete, i.e. 8000 miliseconds. In that case the value of should be starting a 0 on the first frame of the interpolation, and increment a little each frame until it reaches 8000, at which point you should stop updating because the interpolation is complete. The problem is that you're passing it the value of which is the time that has passed since the game began, and you're supposed to pass it the time that has passed since the animation has begun. Here's the proper solution. First: