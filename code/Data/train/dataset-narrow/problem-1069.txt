But again, that's personal preference. If you want to upload your package at some point you should add some documentation and use some other module names, but I don't think you're going to publish it on Hackage. The only other improvement I can think of is optimization, which needs a modified AST, and testing, which needs a non- variant. 

Other than that, your code fine. However, I would probably create a function that handles this instead, e.g. 

The details are a little bit more complicated, but in the end, when we call , we won't make a copy of . Either way, now that we have a function to check whether a string is a binary number, we can write our function to ask Bob for input: 

I wouldn't recommend that to be honest, as it gets hard to manage after a while. However, it's consistent. Documentation can be full text But we can just comment our code like in a regular programming language: 

What? Why is now ? Why is it ? Well, it's a because that is the proper data type to measure the size of something. You can think of it as a , but it's size depends on your system. And why is now ? Because it prevents accidental errors like this: 

And while we're in those operators, you should check whether both sides are the same. That way you can short-cut the operation: 

This removes the need to traverse the list again just to get the correct init/tail, however it's harder to read, so it's up to you. Also, I really like to have the compiler yell at me if I forgot a case in my guards. For example, GHC will happily accept 

Allright. Now let's try to get a variant of Haskell that's just as readable. We do that by explicit recursion and then later figure out how we can get rid of that: 

First of all, it's great that you've used type signatures for all your functions. Also, all used functionality is hidden away in helpers, which is also a plus. 

That's mouthful and hard to maintain. Since this isn't the performance critical part, let's change it: 

Which seems reasonable. Another approach While one can solve this problem in this way, one can also just generate the prime factors of the number: 

While this might seem correct, the combination of and doesn't end well. According to esolangs, oOo code may have a non-divisible number of letters. The remaining ones are discarded. More on that later on . is fine, but isn't, as is : 

The code does not account for negative numbers, yet the number type () allows them. The program will print for the input , although is the correct answer. The GCD is usually positive, but your program will print on the input . A function will make it easier to test and re-use. Since you provided a complete program you probably want to check whether the user actually inputs two numbers and not or something else that's not an . 

This interface is easy to use and hard to get wrong. I use the variants since I'm more familiar with those, but the same holds for . Note that I relaxed the to Ord a => a`. Internals Next, we have a look at itself. I'll keep its type for now. First of, instead of 

Use if you want a namespace You use your only as a way to have and not in the global namespace (and inlined). That's not necessary. We can just use a : 

Use common interface should return a , not . Similar, should return , not . Follow the rule of five You provide a custom constructor. Therefore, you should also provide 

Get rid of the list. No, really, it's as simple as that. The sequence of s in will be non-decreasing, so essentially you could switch 

This is personal preference, but if you put the doxygen comments into the implementation, your header gets a lot smaller and easier to read through, e.g. 

The is just a little helper for questions to the user. What did we gain from splitting ? Well, does not have to care for the game at all. We can replace by any other game, e.g. , and we don't have to change our at all. So try to isolate your code a little bit. Next we have . There's a bug in there, you use twice, once as (correct) answer, once as the number of turns the user has. Therefore, they have to guess , , and so on. The original random number wasn't used at all. Let's fix that first: 

You don't actually use or . You don't actually use that line at all. That line is meant for languages like C, where you need to manage memory yourself, e.g. 

Feel free to use instead. By the way, is missing a type signature. Recursion and Horner's method Your isn't really optimal. We can use Horner's method to get rid of . For this we need a helper: 

The bulkiness of your code can be somewhat helped if you provide additional functions and use instead of . Using is discouraged, as far as I know. If you don't want to use or additional functions, early returns prevent your code from getting too much indented. 

I don't know Rust too well, so take this review with a grain of salt. That being said, your can be heavily simplified if you . That way we don't need to remember whether the input was valid: if it's valid we just : 

Nothing else in your code changes. Closures and readability Apart from better names ( instead of , or instead of ) that's all we can do with this algorithm. We could transform it into a closure: 

The choice is yours, but exception handling and stack unwinding is often a hassle. The compiler can use some optimizations if it knows that a certain part of your code will never throw. However, since we're using , we're already using at least one function that can possibly throw. Also note that you slightly violate the DRY principle in your and lines, but another layer of indirection would make things slightly more confusing (for the reader). Other than that, well done. Your code doesn't fall into other pitfalls that usually happen, e.g. 

This is a minimal reimplemtation of . It supports only stdin at the moment and no command line arguments, that's for a later version. This is my first complete Rust program/package, so I'm interested in any comments, including but not limited to: 

Almost readable, right? But something is still off. Better types Your result type of doesn't really capture what you want to do. You want to run an instruction and get a new , maybe with some output on your console, or some user input taken. But even without that information, we'll notice that you never user the part of your result, except for . That line could also get written as 

It sufficiently solves the exercise, is highly readable and easily maintainable. As Phil said, the "m" prefix for Maybe's is a nice pattern, even if it originates from Conduits README. It's something you can keep for future projects. There's only a small nitpick: while the exercise tells you to multiply a conduit of integers, it's not necessary for the upstream or downstream values to be integers. Anything that understands should work, so we can generalize it's type: 

Users will provide wrong input. Either because they intended to do so, or because their finger slipped and they accidentally put instead of . If you don't want your program to crash, you probably want to ask again instead. Therefore, we should probably use a function: 

Therefore, a is enough to store the location of the queens. The y-position is the index of your vector. 

At this point I wouldn't change the code anymore, unless I see via profiling that or is a bottle-neck. If you really notice that is a bottle-neck, you can use , but I guess that the compiler should optimize above code. 

Note that this also generate a help message. Other remarks Apart from the remarks mentioned above, well done. The tape movements are now \$\mathcal O(1)\$, and the same holds for jumping to the start or end of a loop. Your AST cannot represent invalid programs, which is a big plus compared to your previous approach. There are some points where I would use another style, but that's personal preference, e.g. 

Furthermore, be honest. Although is called , it's actually a function. While GHC might call it only once, it's not guaranteed, so remember the map. And last, since you know that every key will be contained in , you can use instead of : 

Optimizations The additional memory in isn't necessary, as you can just subtract 4 times eleven directly from . Comment consistency Apart from the minimal optimization your code is fine. Your comments aren't, to be honest. There isn't a best-practice or a style guide for brainfuck as far as I know, but the problem stems from the inconsistency. In the first line, it starts with . It's not completely clear what that means, so I'll go with "read into cell 1". immediately gets renamed to : 

which clearly states what we're checking: the difference between the previous computation, and the following one. Note that you can still use your string-based comparison in , if you want to, but at that point it makes your code easier to read (and the check takes only 80% of the time your string-based check took). 

A is an arbitrary collection of s. might contain none, one or many elements. However, you want to model an interval, which consists of exactly two elements. A therefore isn't the correct container for an interval. You could use instead, or just write your own variant: 

Try to minimize the scope of a variable. Note that you should come up with some kind of "error" return value if the character is not in your alphabet. is often used in the C world: 

There is no need to here. Next, you never consume the in , so we could borrow it instead with . But in the end, we never use any -specific functionality, therefore we can just use . While we're at it, is just , so let's change that as-well: 

Your code is wrong, since you never set to when changes. Furthermore, finding the minimum and maximum of an ordered vector is \$ \mathcal O(1)\$: 

Ah, but we don't like to suspect. Just as our compiler tells us that we're missing a semicolon, our profiler will tell us where we lose time. Let's add a first: 

has two small problems. First, (see above) is linear (\$\mathcal O(n)\$), whereas is constant (\$\mathcal O(1)\$). If possible, we should prefer the second variant. And is also linear (see above). But if we fix we don't need anymore: 

Never use in a header. While is already considered bad practice in general, it's especially evil in a header file. It affects every file that includes your header. Next, hide your . It's an implementation detail. You can put it in a namespace, inside your class, or in another header. But it shouldn't be readily available to an end-user. Furthermore, you have an inconsistent naming convention. Your variables are written in camelCase, your methods are written in camelCase, but your class is just . The sample size is too small to see how you want to name your methods. However, is harder to read than , or . It's great that you implemented in terms of and in terms of . Great way to reduce duplicate code! But why stop there? You have duplicated your code in several other places. For example clearing the list is done in both and . Provide a function, e.g. 

This variant is easier to maintain, as we only have to change or add the new constructor to the outer , e.g. 

You can run and find the query on SEDE. It searches for questions () that have at least one answer, no accepted answer, and the maximum score of all its answers is . The resulting list can then be checked for fast Zombie removal. Is there something that is utterly wrong? Or can this weapon help us in our fight against the undead? 

Don't. Repeat. Yourself. That's an essential principle. You repeat the "do you want XY" cycle over and over manually. That's not only error prone, but also hard to maintain. For example, let's say you want to ask the customer how many items they want. Then you would have to add or change your input handling for every single item. Maybe you want to use 

to ease the use of those, but that's an overkill here. Speaking of overkills, did you notice the above? Many of your functions use . But what do those 's mean? Which one is the value? Which one is the bitsize? And is as bitsize really a good idea? Therefore, try to add some documentation at the type level, even if it isn't a new type: 

The is left as an exercise. If you define it correctly, you can get rid of all the other cases. By the way, I don't agree with the previous answer concerning . Appending is a problem if you do it over and over again, since will have quadratic runtime instead of linear with , but here you're doing it once. Last but not least, don't use . is a function in . 

But that's error prone. First of all, Bob might not know how long the binary number is. Try to check whether is 14 or 15 characters long. That's a trick question, those are 16 characters. So instead, just let Bob write anything and then check how long it is and whether it was really a binary number. Prefer to Instead of , we will use a . This makes the input a lot easier. However, to handle the input easier, let's write a function. Actually, let's write two: