Depends on factors such as whether you're making money (and who for), whether it's a parody, what country's laws apply, etc. A parody game making money for charity in a country with very strong fair use doctrines is going to be different to an academic venture in a country without a concept of fair use. We are not lawyers; ask a lawyer. 

Always, always spend that little bit extra on consulting a lawyer. Build up a good relationship with your lawyer if you can. I've never taken anyone to court but it's amazing how often running a tiny studio throws minor legal issues your way. How to handle trademark infringements, publishing contracts, hiring contractors... people will screw you if you give them the chance when there's money involved. 

If it's so straight forward, why can't you solve it? No need to be rude. Anyway, the first hit on Google is the spec that tells you exactly how you can perform the conversion: $URL$ Alternatively, a Google for tools that will do this brings up plenty of hits. Straight-forward indeed. 

I tried an implementation of glFrustum (no longer available as I'm using core profile of course) as follows: 

Sure there's something I'm missing about wrap/repeat textures in D3D 9. I've tried setting the sampler in the shader, i.e. : 

advice I had as a UI designer/developer a very long time ago is to design/develop in black and white, add colour only for emphasis. I've seen so many bits of software over the years that were destroyed by a theme, skin or graphics that the developer probably thought was a good idea at the time, but that looked pretty awful to anyone with a small amount of aesthetic judgement. The other tip I would give is to make sure all of your bitmap assets are scaled correctly, with filtering and/or use anti-aliasing. The final rule is to design "sets", so that all of your assets have a similar aesthetic. If you apply those 3 it's hard to go wrong :). (Another quick tip: If you're going to use gradient fills, make them as subtle as possible). 

If you have a game engine it really needs a show case demo. A full game would be the best but just a technology demo does make a difference. As a developer I don't have interest to build my own proof of concept around unknown engine unless there is some promise behind it. So, promote your 'Den of Anomy' game and/or provide some examples of the basic game functionalities implemented using the engine. 

In case of line drawing, combine as many lineTo commands before calling stroke. This and some other tips: $URL$ 

iPhone 3D Programming covers both ES 1.1 and ES 2.0. I found that slightly confusing when going through examples but it is up to your preference whether you are interested in 1.1 as well. 

Strange that Google Closure Library hasn't been mentioned. It has a huge API, allows more object oriented coding style and has the compiler. I have used so far only the compiler but I am planning to study rest asap. 

At the moment I'm binding manually by finding the index of a named block with glGetUniformBlockIndex, and then binding it with glUniformBlockBinding. What I'd like to do is fetch the set of all block names in my shader program. When I iterate with glGetActiveUniformsiv, I get a list of all uniforms, which excludes block names. Is there any way to do this without testing and failing each of my above names to see if it's an active block with glGetUniformBlockIndex? There's no glGetActiveUniformBlocksiv, is there... 

I thought there might be something screwy with my texture coordinates too, so I hard coded them to be 0.0, 0.0 on the left and 2.0, 2.0 bottom right. I expected x 2 repeat but got a similar result to the screenshot, with the texture top left and then what looks like clamp across the rest of the image. What mistake have I made here? (Note that the screenshot isn't the 0.0, 0.0 -> 2.0, 2.0 experiment I did, it's the general case I get as I'm panning my image around). 

I am planning to make a Laser Squad clone and I think I have most of the aspects covered. But the major headache is the projectiles shot/thrown. The easy way would be to figure out the probability of hit and just mark miss/hit. But I want to be able to have the projectile to hit something eventually (collateral damage!). Currently everything is flat 2D tile map and there would be full (wall, door) and half height (desk, chair, window) obstacles. My idea is to draw an imaginary line from the shooter to the target and add some horizontal&vertical error based on the player skills. Then I would trace the modified path until it hits something. This is basically what the original Laser Squad seems to do. Can you recommend any algorithms or other approaches for this? 

This might be bit far fetched but how about adding a screenshot feature to your game. The game would run with a script controlling game play so it follows predefined path and takes screenshots at critical points. After script is completed it sends them to you with specs of the machine. Then just crowdsource the whole exercise. 

I have a repeating texture that I'm using as a scroll surface. The idea is that as I pan the surface I adjust the texture coordinates, filling in what gets wrapped on the right as it disappears from the left. This is all working quite well. When bilinear filtering is switched on (D3DTEXF_LINEAR) I think the repeat filters the edge of the texture with the corresponding pixels on the other side given the wrap. This is wrong of course. I've had a look around for bilinear filtering shaders that ignore edge texels but can't seem to find anything. Does anyone have an ideas about how to do this? Is there a way of configuring a sampler to ignore edge texels when filtering? Is there a bilinear filtering shader knocking around I can use as a reference? 

I'm trying to figure out how to perform tiled rendering of my 3d scene (OpenGL). The motivation is to cut the scene up into several textures, combining them into a single image for saving at a very high resolution, or for printing. I've done some reading on this and apparently I just need to put appropriate parameters into my projection matrix for each tile in the scene. This is where I'm failing (miserably). I can't see where or what to use for it. My perspective projection matrix is pretty standard, like this: 

From the site: "Cycleblob is implemented using WebGL and HTML 5 canvas elements and is written completely in JavaScript." $URL$ 

I am looking for ideas how to implement following in 2D space. Unfortunately I don't know much about AI/path finding/autonomous control yet. Let's say this ship can move freely but it has mass and momentum. Also, external forces might affect it (explosions etc). The player can set a target for the ship at any time and it should reach that spot and stop. Without physics this would be simple, just point to the direction and go. But how to deal with existing momentum and then stopping on the spot? I don't want to modify ship's placement directly. edit: Just to make clear, the physics related math of the ship itself is not the problem. 

I tried HTML5 audio on my first game but I could not get it to work perfectly (lag for the first time the sample is played etc). SoundManager2 looks ok and I tried it a bit in a demo. For the next game I will use it as it has functionality to fall back to HTML5 audio in case Flash is not available. 

I have two points A and B. I want to perform a smooth deceleration from A stopping at B over time t. The only thing I managed to do so far was a lerp, which isn't right of course because it's unnatural. I also tried multiplying the velocity by some factor (0.9 or similar), but then I don't know how to choose the factor such that the end point B is reached (or as near to it as some epsilon value seems reasonable). Does anyone have something relatively simple that I could use? I can read C++ and C# code. 

OK, I fixed the problem by implementing a different way of doing it I found here. I've made this a bit quicker by doing the set-up of the incremental Gaussian in the vertex shader and passing that into the pixel shader (no point in doing it in the pixel shader when it's not dependent on anything else). It still shimmers, but it's no way near as bad as it was before. Not sure why (!). Also it's a bit quicker with the incremental, rather than the full evaluation per-pixel. 

I think you need to combine two methods here. First check the bounding boxes of the platforms and the balloon. If the bounding boxes overlap, you have to do more accurate checking. For the second step you have at least two options. You can check the bitmap of the ship (ctx.getImageData etc) against the platform. I guess here you could use the alpha value of each pixel. This is probably better option if you have organic looking levels/platforms. Other option for the second step is to define simple geometric shapes representing the balloon and level. A circle for top, a triangle for ropes and a box for the basket and level. There are several tutorials online how to check collision between these basic shapes. 

Hang around in the right places. Make your name known in the relevant sites (gamasutra, gamedev, tigsource etc) and build some online presence so your demos are seen. 

But, alas I'm not sure what parameters I need to use for left, top, right and bottom when iterating across the scene, viewport or screen. Can anyone assist me? Edit: I found this example (unfortunately D3D) of someone doing something similar. The author seems to be just multiplying _11 and _22 by the width (scale up) and then modifying _31 and _32 according to the current tile position - iterating through the whole grid. I did try this but I got a black screen of doom. 

I want to auto-bind uniform blocks with certain named values to certain binding points when I compile a shader. For example, I have some basic, default fixed binding points that are always used for certain things like: 

The keyword you're looking for is "easing". There are lots of different easing functions that behave and look different but all of them interpolate some variable from A to B given a time T. If your ship is at A and you want it to decelerate until it hits B, you can give it a velocity by, for example, applying this function: