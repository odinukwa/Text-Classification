Since part one didn't find the problem the next chance is to not check the submap[a][b] array but the world.WalkableMap[] array. Just do the same as with a b. 

Generally I would say "No, there is no schema for this and no set of standards". This is because this purely is based on the needs of the specific game (which data is sent) and the used protocols (how the data is sent). You can use this via plain UDP/TCP packages and write your own protocol using binary data transmission, you can use HTTP/S and send your data wrapped as XML or json. This depends on your specific needs and your existing server implementation. Altough a HTTP/S fallback will be very usefull once you game should be played on public wifis or something compareable (Admins can block unknown protocols). Based on your short description I will try to give a small schema for this. Lets assume the server is always/already running somewhere and waits for clients to connect. Once they connect they go into the lobby. There you can handle invites, messaging, player matching or whatever you need to "invite to the game". Once you have your players together you can start a game session with them. In many online games this will be the part where you click play and see the "joining game" message. The session will be controlled by the server. He knows the state of every player and the total game state. For a round based game some rough state machine concept will save you a lot of troubles. This does not mean you have to implement a complete state machine framework (switch, if) should be enough for the beginning. Clients also have such a state machine where transitions are controlled by the server. Clients start in state idle until the server knows everybody joined is ready. Then the server sends "a player X your turn" message and the client X knows he is allowed to accept game relevant input. The client waits for user action. Once the player has made his turn the client sends the action to the server which distributes them amoung the other players. The client also blocks input for the player to prevent further actions. The server receives the actions of the player and sends the client "a your turn is over message" and sends the next player "a player X your turn" message. And so on and so on. 

I've just switched over to MonoGame from XNA. Since MonoGame is supposed to have the same API (implying that any copied code should work as usual), I've run into a strange issue- input doesn't seem to be handled through MonoGame. When I tried to fix any missing "using" directives in that class, it automatically added which implies that there's no MonoGame equivalent. Googling the issue had no success- all the tutorials I found for MonoGame said to use XNA's input. Is there a MonoGame equivalent for handling input, or do I just need to use XNA for that? 

I have a procedurally generated tile that is a part of a turn-based hex tile game. When I try to have the tile instantiate a prefab that is the placeholder for a unit, I used the tile's transform.position as the position part of GameObject.Instantiate(Object, Location, Rotation). Unfortunately, this is the result: 

What you could do is do like the old computers did when solving board game: Have the computer play through the game many times (> a couple thousand, not so hard to do if you remove player input). Each time it gets to a decision, choose randomly, but have it mark that it made that decision. Then have it analyze based on the other games where that same exact decision was made, and compare the results of those to the ones where the opposite choice was made. 

I am currently working on a turn-based 4X game, and one of the things I quickly ran into was a question of scaling. On one hand, I want things like realistic sizes (having some idea of what each tile represents in terms of area), but on the other hand, doing so would limit me in terms of certain mechanics I want to implement (the size of a realistic city would not even occupy a tile, let alone multiple tiles, a mechanic I want to use). How would I go about scaling the world so that I can have both realistic scaling AND the mechanics I want? Some things I have considered: Changing the size of the world. Nothing says that I have to have this take place on an Earth clone (especially with randomly generated terrain). Smaller worlds might allow the detailing I'd need for the cities without having unrealistic tile sizes. Foregoing the realism: Something that came up while I was researching was that ancient cities were tiny by today's standards. Ancient Rome (the part encompassed by the Aurelian Walls) was only 5.3 square miles (for comparison, Manhattan is 22.96 square miles- enough to fit four Romes). I could forgo the realistic sizes of cities and make them the size I want for my mechanics. Not including the entire world: Depending on the time-period I end up basing this off of, it may be pointless to include areas that effectively did not exist. What is the best way to balance realism and mechanics for the scaling of a game world? 

Lets say I have a model with multiple meshes. Mesh A is at position . And mesh B is at position . How can I rotate mesh B around meshes A pivot point, or its centre? 

I was wondering, is it possible to a without scaling its children. Lets say I got a Bone A at position . And one of its children Bone B is at position (he is touching Bone A). Could I scale Bone A along Z axis without scaling Bone B, but keep Bone B position and rotation so that he is still touching Bone A. Thanks in advance 

So, I have a stored in , that is made from three meshes. If you loop thrue the first two are children of the third one. And was just wondering, if anyone could tell me where is the problem with my code. This method is called whenever I want to programmaticly change the position of a whole model: 

The thing is when I call the first time everything works perfectlly, but as soon as I call it again and again. The first two meshes(children meshes) start to move away from the parent mesh. Another thing I wanted to ask, if I change the scale/rotation/position of a children mesh, and then do will children meshes be positioned properlly(at the proper distance) or would achieving that require more math/methods? Thanks in advance 

How,can I disable coloring when texture is applied, because right now the texture is being colored over. 

I've found out that adding all models to contentBuilder: , and when all models are added, calling and then looping thru all models and loading them speeds things up. Before one model took around 3-4 seconds to load, this way 8 models took around 6 seconds to load, so it is a improvement but I still think this is a bit to much, but agan I am no expert on this matter. 

So, I am trying to connect bones with vertex groups in blender, but I keep failing. if I move a bone in XNA, it doesnt also move those vertecis that are connected to this bone(vertex groups). What I have done is following: -I made a model made up of four cuboids(seperate meshes). -then I have created vertex groups for each of the mesh and assign vertecis to those groups. -now I have added two bones(armatures). -I renamed some of the vertex groups to the name of the first bone(not armature): "Bone". -for the second bone "Bone2" I have made a vertex groups in all of the meshes, this vertex group contains all of the vertecis of that mesh.(because, if not all the vertecis are connected to at least one bone, XNA throws an error) -then I exported if to .fbx format, checking: XNA Strict Options, XNA Rotation Animation Hack. Thank you in advance! EDIT: Ok, I have fixed the boneWeightCollection problem by unchecking Apply Modifiers in export menu. In blender now everything works great, if I move the bones in their POSE mode they deform the mesh. But they do not work in xna(if I move them, they do not deform the mesh) 

I am working on a top-down space shooter, and I have come to the point where I need some input on a mechanic. I have implemented enough that I can make this choice; either way will not change the code in any major fashion. Which would be a more interesting feature: Having planets being among the 2d objects that the ships interact with (crashing into, being able to have batteries that fire from them); or should they be background objects, maybe still having effects on the battle, but less of a direct influence. Practical differences: Would the planets have gravity (first yes, second maybe not)? Would they take up space (first yes, second no)? Any other differences that might affect the differences, please let me know. 

What you could do is either use an array of the critical points, and then use an enum for the index that you retrieve based on this. Alternatively, you could use else-if statements chained together. I feel that an enum would be the best final data structure (containing miss, dodge, parry, hit, critical hit) as it can allow you to have stronger typing in the end. 

What you need to do is two things: One, the ball has to have a rigidbody2d attached (the walls don't) and then create a PhysicsMaterial2d and experiment with the two values (I think you want friction: 0, bounciness: 1). 

I'm using a matrix transform to move a 2d camera in Monogame, and I was wondering: How, if I initiated my spritebatch with a matrix transform, can I draw something in a static (non-moving) position? For example, I want to put debugging variables in the corner of the window. 

I'd like to point out that the "class" is a remnant from the old Elder Scrolls system, in which it defines what skills cause you to level up (and those would start at a higher level at the beginning of the game). I also once saw in the Strategy Guide that it has guidelines for different "class" builds. It sounds like this is the sort of thing "class" is referring to in this context. 

Is there a way to take a script and apply that specific script to an object through code? In pseudocode, what I'm trying to do is essentially as follows: 

A similar thing happens no matter which tile I use. More information: I tried placing a cube on where the hex is, supposedly. Its transform is very different. So what it appears to be is that the tile is being placed in the wrong place, not the cube. Further experimentation shows that the cube is appearing at exactly half the hex's apparent transform (I added a multiplier of 2 to the cube's position and it appeared in the right spot). I still have no idea why.