I would give an answer of "no, but it is remarkably similar." Here's some history and a largely complete explanation. Circuits 101 Information networks can route traffic, basically, in terms of circuit switching or in terms of packet switching. Circuit switching offers many more guarantees than packet switching, but this comes at a cost, and so circuit switched networks can't degrade gracefully. The classic circuit-switched network is the PSTN, and a virtual circuit would be something like a DS0 on the PSTN. A DS0 basically works as part of a bundle of connections, usually in a DS1. In a DS1, you will have a bundle of DS0's which are transmitted together, frame-by frame in time-division manner, so each DS0 is guaranteed a specific bandwidth, timeliness, etc. by the underlying network transport. Another way to look at this is that a physical circuit would be something like a cat6 cable running between two terminals. You can send data back and forth over the wires at guaranteed speeds, and no other communications are going to interfere with that. Indeed the early telephone networks worked by connecting physical circuits (that is copper wires) using manual or electromechanical switches. As this was computerized, the circuits were virtualized and digital (as opposed to analog) information was sent down wires on a time division basis again with a circuit reserving a slot in the time division schedule. What this means is that circuit switching is more about bandwidth reservation than it is about routing. The former leads to the latter. I.e. a circuit reserves bandwidth for the entire connection. Why TCP Connections are not Virtual Circuits TCP/IP is fully packet-switched. It makes no provisions for virtual circuits. This is why things like QoS are often necessary when trunking VOIP (a virtual circuit has built-in QoS guarantees). You have no guarantee that all packets will be routed alike. They may not come through in the same order. They may not come through in a timely manner (from a connection-oriented perspective). So you can't really build virtual circuits per se on top of a packet switched protocol like IP. TCP comes somewhat close and in fact can work as a somewhat imperfect substitute. It offers as many of the guarantees as it can. This is why, when implemented on TCP/IP, H.323 uses TCP connections instead of the virtual circuits the protocol prefers. But TCP connections still aren't circuits, because they don't reserve bandwidth during connection on every switch between the two nodes. Of course TCP connections are more than just datagrams. They include routing information (as does UDP) but they also include the accounting information necessary to reconstruct the stream on the other side in order. The Answer Both TCP and UDP are datagram protocols. They send a packet of data with routing information to routers with none of the guarantees of that a circuit offers. TCP offers a subset of guarantees on the end points of what a circuit would offer by adding accounting information to allow the end points to handle errors and a series of data in order, but it is only a subset. Of datagram protocols, TCP is the closest thing one will find to a virtual circuit but it is still conceptually and operationally very different. 

Tools We are currently using a private SVN server for knowledge documentation. Our team is small and savvy (and includes people mostly familiar with SVN including someone who commits code to the Apache Subversion project). We also track knowledge in other areas as well. Keep in mind our operation is small (just a few individuals) and so the emphasis is on coordination and making sure we don't forget stuff we shouldn't. We are in the process (which may take some time) of fully integrating the CMS/FAQ/etc, tracking with our ERP (which is where we store detailed customer info) but this may take quite some time. One of our goals is a very highly integrated system where changes made in the ERP get rolled out automatically to the network (both at the network and host level), and where knowledge and information is tightly bound to that. Use Regarding network engineering there are two critical aspects for us, namely periodic review (documenting is great, but it is useless if you don't periodically do something with it). This is particularly important when it comes to security knowledge. What is our current threat profile we are worried about? What are we doing about this? Are either of these things can can be improved on? In general, documented knowledge should be both reviewable and periodically reviewed. 

For light amplification for longer-haul fiber lines, as far as I can tell, the two major options are EDFA's and Raman amplifiers. What is the tradeoff between one type and the other? Are there areas where Raman amplifiers are clearly better? Is it just a matter of EDFA's being cheaper and Raman Amplifiers having greater gain ranges, or is there something more major that I am missing? (For the uninitiated, EDFA = erbium doped fiber amplifier. It acts basically as a sort of a lasing chamber without the mirrors, so it amplifies laser signals as they go through the (usually single mode) fiber. This boosts the maximum distance of a fiber run.) 

There are a fairly large number of factors to consider and it is also important to accept that not all fiber is the same just like not all twisted pair is the same. Here are a few things that occur to me. Of course these may vary depending on environment. Fiber: Much longer max distances, depending on specification and throughput. No electromagnetic interference. Note however that fiber comes in a large number of grades and planning for the future may be somewhat more complex. Copper: Shorter max distances per link. Susceptible to electromagnetic interference. Fewer number of grades/variations (but still mind these!) meaning fewer accidents when the rollout team grabs the wrong spool (see below for a funny story). Supports power over ethernet. Funny story: A particular county in a Western state runs a fiber network that began as a control system for their hydroelectric dams. As time went on they found they didn't need nearly as much fiber as was laid for this and so they separated out many of the strands and used it to build a county-wide network linking homes and businesses to ISP's and telco's. Of course single mode fiber was used for longer transmissions and multi-mode for short runs. So when they were running the longer runs to connect towns and cities with this new network, the team that ran the fiber grabbed the wrong spool, and ran multi-mode fiber on all these long distance links. The team was quite unhappy when they found out they would have to re-run all the fiber again! Moral of the story: be very careful about ensuring that everyone knows which grades of fiber go where....