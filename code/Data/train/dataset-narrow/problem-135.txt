ATT usually hands off their network as a private address. You may be able to use layer 3 switches in place of the routers and do a combined core and distribution at those switches if the network isn't very big. It can save money, you can stack most with a modules or special cables, you get fast routing, less chance of bottle necks than "router on a stick" and give you more ports. Just be sure you don't need complex routing and they meet your routing needs. Normally, your distribution layer would connect to two routers if your doing a first hop redundancy protocol like hsrp, vrrp or glbp. But, if you do the combined core/distribution design you will connect your access layer switched to both layer three switches but since they are stacked you wouldn't necessarily need vrrp. You could create your gateways at the vlan interface (svis) and put the vlan s on the uplink ports (one on each switch). Again, this depends on the size of network and your routing needs. I have set up many networks this way. 

I've know this design as a collapsed or compressed core. The core and distribution layer are in a sense one. In most cases I've seen the collapsed core does routing. If you read standards they say to limit routing to the distribution or even access layer but your situation is not a standard three layer design. Designs can be like opinions in that everyone has one. I personally route at the core on a collapsed core design. 

After you have your subnets routed test them. Set your computer with a static IP and ping the dhcp server from both/all vlans. Make sure this is successful first. Then, to get DHCP working to a subnet other than the one the DHCP server is on put (this address is the dhcp server) onto the gateway in the Cisco router (on the interface or sub-interface) of the vlan that isn't the same as the dhcp server. Do this on each gateway that needs to forward dhcp request 'cross subnet'. This allows the dhcp (UDP) broadcast to get to the server even though the layer 3 boundry stops broadcasts normally. Build your dhcp scopes for each subnet in your dhcp server and they will hand out addresses based on the subnet the request came from. 

After connecting your console cable (9600,8,none, 1) with putty or hyper terminal and test it's "talking" unplug it. Hold down the mode button and plug switch power in. Release the Mode button after approximately 15 seconds when the SYST LED turns solid green. When you release the Mode button, the SYST LED blinks green. At the prompt Issue the following commands. Each one followed by enter key. 

The non technical explanation of the reason we like to use them "or need them" is not only encryption but within that tunnel we can supply routes to your computer or remote site that are private networks through the tunnel. This allows Site A to not only connect to Site B but I can have routes to other internal networks at Site A from Site B over a public circuit like the internet. Examples, with normal communication I can connect to a remote ip address but not access all the internal private ip addresses because the internet doesn't support those addresses of course. If I put a tunnel between two sites I can access networks like 192.168.1.0 for example even though it's in a diffrent location. It's almost like combining Lans. 

I would run at least 1 (2 preferable for future use or if your phone doesn't have a computer port on the bottom) cat 6e from your current switch to the phone and computer location. It will offer consistency and and will offer features you need to set it up properly like vlans, voice options, etc. 

You will need to ask a person that knows your network. Here's an examples. 192.168.3.0 255.255.255.0 This could be my LAN address internal to this site. 192.168.10.0 255.255.255.0 This looks like LAN but is a WAN address used for a remote network in this case. It could have been local LAN also. Just depends on the network design. 69.75.43.125 255.255.255.252 although we all know this should be a WAN this could be a LAN link somebody set up not knowing any better or just being... I'll be nice and say creative. That's why you can't tell by the address. You will need to ask someone who knows or start using commands like in Cisco or on HP (if LLDP is enabled). NOTE... Some HP has CDP and Cisco can use LLDP. From that you can try to figure out where the equipment that shows in these commands are located if they are named properly or by tracing ports. Traceroute could help as well as you learn where some networks are in your organization. Easiest way is ask your network guy or I. T. provider. 

We get into some situations where a customer gives us a single access port because they want the attached switch to be a certain vlan. I've also seen this as a method to put an unmanaged switch on a vlan where programming a trunk port isn't an option. CCTV (ip cameras) or feeding a small offics switch in a small business is a good example. All the cameras or office computers might need to be vlan 99 and they all connect to one switch. By using an access port on the Cisco side everything on the attached switch will "be on" vlan 99 (eventually untagged traffic will be tagged 99 at the Cisco switch interface). An access port is just a un-tagged vlan port. In HP switches the port would be called access. It'd just be untagged vlan 99. It may not be best practice but those are a couple reasons it's done. Answers to your questions 1) It's not wrong, it'll work fine but not recommended if possible 2) Switch performance won't be affected in the sense of utilization of hardware or speed based on the access port alone. 3) You could talk to that person to get a better understanding of why they did it and to understand your network better. 

If you know the Mac addresses ahead of time and your using a windows machine you can make your js application create an arp entry for each device. (You can do this is most OS's but I'm showing an example for windows). The arp entry will make windows use a diffrent ip for each device you have by turning it into a frame right out of windows (using the Mac address). and so on. This ip address can be anything that's on the same subnet as the programming computer. So in your application have it collect the Mac addresses up front from the user or spreadsheet or whatever. Enter the "duped" ip address matched to a real Mac address in the arp table, the run your app against it. Don't forget to clear all the arp entries when it's done. or use an ip address in place of * if you don't want to clear them all. We use this technique in the field quit a bit with device we don't know the ip address too.