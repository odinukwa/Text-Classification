Now, you implemented a no-LinQ solution so I created one myself too. My implementation doesn't have to calculate the amount of chunks or use two loops to create the list of chunks: 

The code iterates over the collection and keeps a counter, adding the iterated item to a temporary list. If the counter equals the desired length of a chunk it will add the temporary list to the return list. At the end, the last chunk is added. 

When no record for given id is found, the default of the type will be returned. Since is a reference type, this will be null. Now all you have to do is a null -check when using this method. What you also can to is work with the parameter and make the method return a boolean. This makes it clean to do the check: 

Apparently writing the problem down helped me out a little. I recalled kind of methods, that handle exceptions and use to get the result so I modified code a little introducing custom exception. I like that approach better than previous one. Should I worry about other exceptions? I'm also really looking forward for any naming suggestions (figuring out how to call all the stuff takes me ages :P). 

You could simplify entire test class by extracting part responsible for general configuration. Then you can easili split your test into two, first verifying that your is properly called during the process and second that assures tested method returns result provided by this client. For tests that require specific configuration, like throwing exceptions and so on, I found it a nice way to extract this configuration to separate, private methods and calling them when necessary instead of configuring all the scenarios in the Setup method. 

In the function you are using a parameter , similar to the block of code in the function. You can just call the function from within the function and pass the variable : 

If the code inside the events for all the checkboxes is exactly the same, you should extract that code and place it in a method. Then, call this method from the events: 

Since you only have two properties, performace won't be a problem. Even if you were to add a couple more properties. Hope this helps! 

Curly braces: Even if you only have one line of code in an , , statement, it's best practice to keep the curly braces. It improves readability of your code and the code is less error prone. 

Introduction: For a project I'm working on I used a to lift some heavy tasks away from the UI thread and report progress. For this I created some sort of modal dialog with a label and progress bar which were updated from the method of the backgroundworker. I read a very interesting article on and I thought I might update my code, since the BackGroundWorker is, despite being handy, getting outdated anyway. After some more reading on this matter I found an article with code that had the backgroundworker instance inside the modal dialog form and not on the caller form. This gave me the idea to do the same but using async/await instead. This is a first result, which is working, and I was wondering if I am doing things right. Any tips and/or improvements are much appreciated, certainly regarding scalability/extensibility and the use of async/await. The form: 

Next we need figure out how to get data into the database. This is similar to the SQL INSERT STATEMENT, where we maintain both our keys and values in single transactions: 

A dictionary can hold 1 key to N values, but not N keys to 1 value. Fortunately the reverse operation of N keys to 1 value is the reverse of the dictionary, so we can trick around this by creating a class: 

Testing Now I need to test this. First we load a single key:value pair, where the key is a hashable structure. I chose a tuple with 3 integers: 

Update2 Above: Runtime test without powerfunctions and with Justin Peels recommendation to use return list(a.values()) 

So far so good. A slightly annoying thing is that we can't really read what is in the database even though we can get things in and delete them. This calls for the SELECT STATEMENT - or python's method. But(!) we need to be careful, as our database stores data internally as a s that are accessible from keys. So we need to unpack them onto something useful. As I like working with lists, I have chosen to provide lists, unless its a single value, whereby I only return the value itself: 

The compiler will generate a backing-field and this will result in the code you had, but this is cleaner to develop. if/else vs. switch: When you're in a situation where there are a lot of if/else statements, you should consider using a swicth statement. The code in your method would look like this: 

Now when the remaining lifetime is greater than 0, your rover can happily move and will die when you keep subtracting the changes from its remaining lifetime. This gets me to another error in the logic. This is the formula you use to calculate the number to subtract from the lifetime: 

Implementation: Your implementation is not bad, and so aren't the ones from other solutions. Although I don't like too much LinQ methods, creating separate classes or multiple loops for something rather simple as this "problem". I implemented a non-LinQ solution that requires only one loop over the collection, using the IENumerable.GetEnumerator() method. The logic is as follows: 

I've got pretty straight forward scenario. I've got a class called and method that takes directory path to find files within it and yields specific information about each of them. Exceptions I consider here that should be handled are and . Now I don't want to break enumeration so I've got try/catch block within the loop to process all the files. On the other hand I don't want to pretend that nothing happened and family's still happy so first I considered logging, but since this is quite low level class in my system I'd hate to reference log library from basicaly IO extension library. The solution I came up with is to first handle the exceptions, but instead of loosing them I collect them inside the and throw as after enumeration is complete. I'd like to know if you have any suggestions for alternative approaches, perhaps something I could improve about the code itself, good practices and so on. 

Disposing of the form: Since an instance of is disposable, I suggest using the using statement. No need to check whether or not it can be disposed or not, at the end of the statement it's automatically disposed: 

In my opinion there are two sides of your story here: 1. Wrapping exceptions This can be useful in situations where different type of exceptions may occur and you want to distinguish them, certainly when you want to give specific error-messages for each type of exception. As you have read yourself, when doing so it's best to follow the guidelines Microsoft has given. This was just a small opinion-based point but for me when reading your question, following point is more important to me: 2. To Exception or not to Exception First of all, here's the definition of the exception in the .NET Framework (from MSDN): 

Thanks to both of you @Heslacher and @Bruno Costa I've come up with solution I'm quite satisfied with. First the directory path validation. I decided to keep it within implementation so can be separated from System.IO namespace. When finder will throw, regardless if it's invalid path, argument or none existing directory this class wont handle it, so thats right. Next thing to achieve full independency was to handle both and within implementation, where any of them will be packed inside which can smoothly handle with single block. Also @Bruno Costa, I share that distaste with and so I took the null check approach. Exceptions that will be handled are now available through the event. I considered propagating just the message or the path, but having full exception will give me some more flexibility when designing higher level of the application (). 

Now we can add and delete. But how about bulk updates? They constitute a special case because can't see that you want to propagate your update onto multiple values. So we need to tell it WHAT to update. Here is a proposal that uses the relationship between the key, the old value and the new value that should be accessible to all keys that other would have a relationship with the old value: 

Now we just miss one thing to pass all your test: The bulk loading method where you map N keys to M values. This is a "cartesian" product, which is a fancy word all N's maps to all M's. In Python this is a walk in the park as we can iterate over both and reuse our method: 

and can even be shortened to simply this, because you're simply returning a boolean corresponding to the value: 

Another way of using a method is making it return a to see if the parsing succeeded and using the parameter. This results in following method and usage: 

Note: you don't exactly use the code twice, inside the function you have at the end of the line where you get the id. 

StringBuilder instead of string concatenation The quickest way of adding strings together is pasting them together with a sign. Quicker isn't always the better practice, as is in this case. The better practice to combine strings is to use the . Instead of something like this: 

I also see you always use the row at index , is this intended or is that where you meant to take the "i-th" row?