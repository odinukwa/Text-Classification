Why does it has to be a ? Maybe it is preference but loops look cleaner. Reversing can be done by using function which reverses a iteration 

Mostly this is just for fun, but I'm still not that good in webscraping. Therefore I post it here for a proper review. 

As you can see, my solution are faster compared to yours, so we can assume it is better in terms of performance. If you really want to have the fastest solution wins by a long shot. That is because, string comparison will use compiled C implementation. Instead of the python loop which is a lot slower. 

I know it's only a challange, so I don't always feel the need to us proper variable names. But I fear when I come back to this challange, I'm confused how this worked again. Any review is welcome. 

You are doing things the hard way, there is a python function to cut up strings namely the method Thus to make it easier to use and more general I can rewrite your code like this: 

Intro Finally had the time to do some wargames again, but I have come to the point where I need to build my own test enviroment to test certain ideas, because I can't test it online. The current challenge is some form of SQL Injection in perl, abusing the call. The perl code online: 

There are some valid points in the other answer but it doesn't address all problems with the code. I have a few additions to make it cleaner IMO 

The code, the bad and the ugly I kinda rewrote all you had for a more readeble structure, First of all, why 2 different functions for the stup of the game? In my opinion this would be better suited in 1 function: 

Here is another approach, directly iterating over the string. And making combinations of them, lastly checking for distinct values by comparing to the set 

You could avoid this by increasing the recursion depth but this is more of a hack then a solution. How about a based approach to avoid the recursion? 

Here I return the players as a dictionary where the KEY is the players name and value the current_position, only drawback is that there cannot be any duplicate names. Now for the juicy part! 

Well done There are some obvious beginner mistakes, but you have created a working game. Avoid working in the global namespace 

@200_succes has some very good advise, but I think I can add some more. Originally this was supposed to be a comment, but it got to long. 

naming It has been mentioned in the comments by @mast, naming is a very important part of coding. Would you still understand this code after a hiatus of a few months? I have a hard time understanding the code as is. I would have been able to give a better review if your code was more readable. Good code should be readable at first glance, the below variables have no meaning for me... 

Where does the variable comes from? is a global variable out of scope of the function. (which is BAD) What does stand for? 

Instead of comparing to the lowercase alphabet hardcoded, you could do Instead of the you could use a modulus operand in your cipher function. Don't do empty returns but be explicit and Using argeparse for capturing cli arguments is indeed a great improvement as suggested by @Thomas Eldon Allred Your seems off, you could have used for that to make it more obvious. And do 

You could use a context manager over the connection Using a context manager would improve the readability, see PEP343 There are some resource out there how to implement such a thing Make the login a separate function I think it can be optimized in one SQL request? Yes, but without the database itself it is hard to test, a github repo or some more information would help. However you could improve on your google-fu, Simply typing "mysql join 3 tables" would have given you the answer you are looking for. $URL$ 

Use inheritence, they derive from the same super class, but for now they have different constructors. Alot more typing ;) You could use a to get a visual representation of the stats, these can also be handled by the parent Class. If you use you could use the fancy , see the relevant PEP article. 

I have done this challange before and I quite liked it, now let's dive in teh codez... Review of your code: First of all those 2 while loops look kind of silly, and that is what is giving you your TLE's, if you wanted to improve the timing on your code, I would start there. This should be possible with a 1 loop, now when for instance you look at the last test... one of the last elements needs to be changed. You change it, and it works... but then you loop through the entire array again means we start checking from beginning which is not needed. And after that you check the array yet again but this time delete another part and loop through it again! After your second loop finishes you check the outcome and that is a little too late. 

That looks alot better no more long , and it shows all players have to do the same. Secondly for the main game which I rewrote in a function also no more because we can iterate quite nicely over a dictionary. 

Has descripte variable names A nice doctring to explain what the function does A function name, where it is clear on first sight what that function does 

For a beginner this is pretty good, there are some serious styling issues though which I would like to point out. Review 

I really tried my best this time to make it hard for all code-reviewers to critique my approach by making it readable while still keeping it simple. However as always I wonder how I did, and therefore feel the need to post it here. Is there anything you would change or improve to my implementation? 

Profile You can use the cProfiler to check where your program takes up the most amount of time Example Code 

Variables should be as close to the scope as possible. When you modify globals somewhere in your program it might become really hard to track that 1 bug. You could use list comprehension to declare those varibales in one line like this: When using list comprehension and you don't need the variable, it is Python idiom to write instead. 

Use parenthesis with the statements, this will make your code work in You could use some formatting to make the string concatations a bit nicer looking 

I am making the assumption that the word is in between spaces, but this could not always be the case! You could have or . Or it could be at the start or end, and not have the double space. In short this is rather error prone. 

I think your program is ok, but could use some improvement, be sure to check out the Paramiko demo's these contain many usefull pointers for working with parmiko 

Use In my opinion argparse is better then the getopt way, Divide your code into functions for seperation of control Use string formatting Uphold PEP8 guidelines for a cleaner code 

Python style Style is important! Will you be able to read this code after a few months? I have a really hard time understanding this at first sight. 

EDIT I am unsure if this is in scope or not, since this question doesn't address this at all, but since @Peilonrayz attended me to the usage of I learned something myself and am willing to share this with everyone who is interested. Secondly setting up a class this way, will imrprove memory usage a lot! 

There is not much to say about your code then, Regex is slow. A non-regex solution could be to use Python's endswidth, this works the same as 

I think using classes is a bit too much for this, but you should create a few functions to diverse functionality 

Why the string to tuple conversion? I am not sure why you are converting the input into tuples and then convert them back into strings corresponding the input again. Because you could have iterated over the without the conversion Use libraries when possible I know you specifically said not to use lib, but this seems the perfect spot to use it. If there is no specific reason for it (like an assignment) I recommend using it. 

I've posted a few questions about natas a wargame. But I'm stuck at natas29 it has to do with Perl. I've never coded in Perl before. Thus to help me beat the last few levels, I decided it is time to learn Perl. And what better way to learn it, then with wargames from overthewire. I made a small Perl program that beats the first few levels of bandit (in combination with some bash commands) I'm specifically looking for answers that provide insights on how certain Perl operation could be abused, but any review is welcome. 

I think this code is very straightforward and easy to read. Good job! Some nitpicks are, You have a few PEP8 violations none all that concerning. 

DP alternative There is another yet slower solution, with dynamic programming. However this would take less space but more time \$O(n*m)\$ where the Suffix tree approach is \$O(n + m)\$ See the wiki of the Longest Common Substring problem 

Dry The don't repeat yourself principle, (which also handily removes duplicate lines and therefore greatly reduces LoC) Your and the main game which should really be in a function! are both DRY because each player has the same possible moves and that is were I can shave of the most lines. If I change the function that it has as a player as argument we avoid alot of repetition. Same goes for the other PEP8 & Readability There is this amazing thing called PEP, which helps all python programmers to make the code more readable, if we adhere this we can improve the following: 

To first understand how MiTM works I've made a few MiTM scripts, but this time I wanted to defend myself against such attacks. I'm unsure if my idea even works. The code seems to be working but I make a few assumptions and I'm not sure if those are correct. Assumptions 

The does nothing here, only adds an extra indentation level When you need both the index and the item it is better to enumerate! 

Naming should be instead of for functions String formatting looks alot nicer then string concat in prints Use a if body Don't catch bare . 

You don't need to copy the variable, since you do not change the original list. That temp var is not needed. This could also use some list comprehension, with proposed changes that becomes: 

Sometimes, I'm reviewing old questions written in Python2, with no parenthesis around statements. Or I'm changing one of my older codes, also without parenthesis around print statements. It annoys me to do this manually, so I decided to write a little perl script to change it for me, however it looks rather ugly. And I think I'm missing some obvious regex to do this? I don't yet write to another file, but just print to the commandline. Note that I'm making the assumption that lines that print and are net yet ended, end with 

Use a nested generator expression. DON'T hardcode variables, this will make your code very static. Make a function, to accept different variables. 

Review There are a few things that could be improved upon. 1 .Your could use some love I might understand using a dictionary so you can see which value corresponds to which direction, but this may be simplified to just using a tuple of directions. and are variables badly named I believe, maybe or something would be better. and implies that these variables are private/protected, and in your case they are not. Secondly I think with this: 

@Austin Hastings has the right idea, using to do all the attribute setttings. I recommend to look up , and Python . Code changes 

Cut a big number into evenly sized chunks of adjacent digits Sum the product of the chunks A main function that returns the largest adjecent product 

This should be enough for now, you can always add more. Secondly when using comments they should be like this 

Python and the power of unpacking may help you in this one, As it is unclear how your Class is used, I will give an example of how to initialize the dictionary with unpacking. This will work on any iterable. True to it's name, what this does is pack all the arguments that this method call receives into one single variable, a tuple called *args. The same principle applies to **kwargs too, except that in this case it applies to keyword arguments. This most of the time corresponds to dictionaries An example on how to use to initialise your dictionary class 

Divide code into more functions/classes! You say you want to make it run by an AI... as is, your code would require a heck of a rewrite. But if you would have divided your code into more functions, the AI can reuse a lot of the functions you created for a single player game, and thus making your code easier to maintain, or add functionality. What functions/classes should a game of pong have? 

Reads alot better in my opinion. I would suggest to read up on PEP which has alot of nice pointers for Python style. Algo This should be possible without recursion, when I choose a big value you will get an error: 

Bob is jamming it's way through the city deauthenticating people from thier wifi for a few seconds. First scanning all possible wifi-AP and then pretty printing them, afterwards you can choose a wifi to jam and it will perform a deauth for a few seconds attack using the framework. This all works as intended but I'd like an intermediate review, before I try to add more functionality. This is one of my very first bash programs so please be gentle. As I'm unskilled in bash. 

We need to remove at most one element from the list, so if it is already strictly increasing we can return true, since no element has to be removed If it is not we will continou, what are the possibilites from here? 

Use either or because this feels just wierd, and kind of surprised it worked at all. I'd recommend sticking with Secondly, be sure to check out the itertools module from python, because what you are looking for are basicly permutations of a word. 

I have been tinkering with Natas a wargame from $URL$ I have been doing that the past few weeks whenever I have the time. After finishing the entire challenge, I thought it would be fun to write a Python script that automatically solves the challenges. I've learned alot about the module doing this, and it was fun rewriting some of the PHP cod to Python. It executes a function that is rolled from a function dispenser to get the password for the corresponding link, afterwards it creates the new link (with a username and password). The dispenser then finds the next function with that link. After finishing I do have some question regarding my code: 

You don't want to hear this but let's talk about your comments Let's take for instance this piece of code: 

You reinvent your 2. Use enumerate I think this was said in your last question you posted on CR too, and it is still valid. You should defenitly use enumerate when possible, see the corresponding PEP article 3. Doing this in one loop You have: 

Note that not all challenges are accounted for, since solving them is all of the fun. And I read it would not be nice to post solutions online 

A small but important aspect of your code is the hashing method itself. And I've seen this gone wrong many times. DON'T use MD5! These hashing methods are way too fast, and therefore can easily be cracked. If you want to hash your passwords properly, use a slower hashing algorithm like blowfish. In php5.3 and above this is present in the function. php hash manual