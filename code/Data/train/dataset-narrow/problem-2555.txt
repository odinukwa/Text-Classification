I paid a lawyer to prepare mine, but I felt everything that was included was just boilerplate with language for my games plugged in. If I were to do it again I would just collect together a series TOS's from other web sites and business from my country, and re write in plain English each point in those TOS's. I would say a Free TOS would be worth the money you pay for it, and about effective as something you wrote yourself. Note: The above is bad legal advice, but IANAL and just saying what I would do next time. 

Is it possible to feed in a javascript object instead (or just numbers). Seems silly that I would need to construct a string to feed to this value if I wanted the color dynamic. 

You should use window.RequestAnimationFrame to manage your game rendering when making games in HTML5. Here are some good blogs that explain the issue. $URL$ $URL$ 

I can't tell you if this method is good, but I have a similar system in my game Blight of the Immortals. It's even called gameMode. Basicly a global state that I use to interpret what a gesture means and even what kinds of things should be rendered in the map. I have a gameMode for when the player is plotting a movement path for units, one for when they are selecting a targets for powers, even one for when the editor is open and I am designing maps. 

Primarily this is a memory constraint. Animation is data is fairly large and often those crowd animations are considered low priority compared to what is actually going on in the game. I would say they are all playing the same animation simply because the designers didn't want to use more ram on animation variants. ie, the actual key frame data. Whats more, for every large crowds, a few games I know use special technology to render the same characters over and over into the scene, adjusting the camera each time to correct the perspective. ie. you are literally seeing the same characters over and over, just from a sightly different angle. I would love to hear from a coder who had actually implemented one of these systems. I only have a fairly high level producers perspective. 

The game I'm working on is very simple. It's a top down scroller. The camera never moves in any way, and all of the objects are in the same location on the Z axis. Since it's a bullet hell game, there are a lot of models on the screen at any given time. That being said, when I call RenderTarget2D, should I set mipmaps to true or false? I haven't noticed any difference at all so far either way. 

Start at (0, 200, 0) Move to (200, 0, 0) Move to (0, -200, 0) Move to (-200, 0, 0) Move to start point, repeat as long as it remains active. 

MSDN suggested this, but I'm worried about it slowing down the game when there are a lot of objects to check: 

It doesn't seem to matter if the bulletList length is 1000 or 100000. What could be the issue here? EDIT: This is the code that removes a bullet, when it goes out of bounds. It is inside Bullet.Update() 

I have an enemy that initially flies in a circular motion, while facing away from the center point. This is how I achieve that: 

Microsoft provided a very easy to use class for parallaxing backgrounds that should take care of your problem. I changed it to scroll up to down for you (it originally scrolled right to left): 

You can find the original here: $URL$ I highly recommend going through the entirety of that tutorial if you're just getting started with XNA. 

Okay, here's what I want to do - when the player is at the main menu, I want them to be able to type in cheat codes. That's the only place I want it to work. I don't want to give them a text box to type into. Rather, I want them to simply type in a word (let's say "cheat", just for simplicity sake) that activates the cheat code. I only need to capture keyboard input when the window is in focus. What can I do to accomplish this? 

I'm creating a highly flexible 2D tile-based map editor in XNA to make some of my future projects easier (will work for side-scrollers and top-down games). This editor can work with any sized tile. This editor is based on a standard system. It has pre-determined layers such as Base, Fringe, and Collision. However, I've run into a bit of a problem. I don't know how many Fringe layers to use. I'll be working with fairly detailed tilesets and will want enough Fringe layers to be able to render a wide variety of fairly complex scenes (e.g., forests with lots of trees overlapping). I'm also considering having multiple Base layers to enable things like a player walking both over and under a bridge. So my question is this: Is there a "right way" to approach this situation, and if so, what is it? Just lots of Fringe and Base layers? If you were a map editor, how would you expect/want this situation to be approached? Also, while I have this question here, is storing layered maps in 3D arrays a good way to go about things? Meaning the first level is an array of layers, the second is an array of tile columns within the layer, and the third is the array of tile rows within the column. 

I've created a tetrahedron by creating a BoundingBox and building the faces of the tetrahedron within the bounding box as follows (see image as well): 

Ray casting is a very fast and efficient way to determine line-of-sight. It basically involves sending a ray (think of it like an infinite laser that can't be redirected) from a certain position in a certain direction. Using this ray, you can determine things like which point(s) it intersects and how far away from the origin it was when it crossed a certain point. So for example, in a player/enemy scenario, the ray could originate from the enemy with the direction being the location of the player. If the ray collides with a solid tile, the enemy can't see the player. If it doesn't, the enemy can see the player. Here is an excellent tutorial that will should help. You can also consider Bresenham's line algorithm (summed up, it creates lines) for something that might be more easily scaled to tiles. 

It moves to the second point, but then gets stuck and appears to vibrate in place. How should I be doing this? 

Nested looping like this just doesn't seem like the most efficient way to check if a bullet connects with an enemy. Is there a better way? 

I want to be able to use multiple cores in my XNA game, but it seems that Thread.SetProcessorAffinity() is only usable on xbox. That being said, is there any way to run a small chunk of my code on another core, or failing that, share the load between all cores? 

Contrary to what I found searching for the answer, I'm not trying to see whether a character is in view of another character. What I need to find out is the size of the field of view. This is because I'm using Mercury Particle Engine in a 3D space, and while MPE emitters take parameters ranging from (0,0) being the upper left corner of the screen to (graphics.PreferredBackBufferWidth, graphics.PreferredBackBufferHeight) being the lower right corner of the screen, the positioning of enemy ships use Vector3 values, where (0,0,0) would be the exact center of the screen. Since my ships don't move along the Z axis, this isn't a problem. What is a problem, however, is translating their coordinates in 3D space to the correct particle emitter positions when I need to show them exploding. This is what I'm currently using to create the perspective field of view: 

I have a boss that's supposed to continuously shoot five streams of bullets, each at a different angle. It starts off just fine, but doesn't seem to want to use its entire array of bullets. No matter how large I set the length of bulletList, the boss simply stops shooting after a couple of seconds, then pick up again shortly. Here's what I'm using to generate the pattern: 

EDIT: It would appear that a large number of bullets are getting "stuck" on the boss. That is, they draw at boss.position, and never move.