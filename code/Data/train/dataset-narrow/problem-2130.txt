The pattern would only match files or folders which consist on one character, a dot and another character. Or a single character. Or a single character followed by a dot. For example, it would match or , and , but not or . Why it has that feature of "ignoring" the extension part of the pattern is unknown. 

Finally, to resolve this issue properly and since there are plenty private IP available for you to use, I would do the following: 

Under , it would select all the lines that overlap with the previous line. Then, under , choosing a of , only and and apply. GOTO 1, repeat until no rows are selected. Export as (to keep original format) 

You could try to implement this using , and such and try to achieve it by command line, but I think it would be more convenient to use Perl an a short script. You could use the perl module Lingua::Translit to convert lines, and "guess" if the line was in english or not with Lingua::Identify. Here is some code. I did not test it properly, but should give you something to write your own. 

Probably the reason is because prior to connect to a website, the browser needs to resolve the name it wants to connect to via a DNS request. Since the hotspot is not connected to the internet, there won't be a response with any IP and the browser will not try any further. To achieve what you are planning, you should create a DNS server, capture the DNS requests with a similar rule (since some clients will not use the hotspot-specified DNS server) and answer all of them with your apache's IP. If you use as the DNS server, you could set a master zone named "." in your named.conf (comment out the default "." zone with the hints information). Then, create a zone file which contains a wildcard record for the apache IP. 

In BIND (an probably any DNS server), you need to work at least with something like or If you configure your computers to use the suffix (see here for details for setting them in windows), you will be able just to type the left part of the names in any program. In linux you can edit and add the line for the same results 

If you need to split each input to a different channel, you could use , but if your input sounds are stereo, you should mix them previously into mono to avoid loosing anything. Assuming mono inputs, result would be first input at left, second at right: 

As is intended to maintain the same max volume as the inputs to prevent clipping, it normalizes audio prior to mixing (thus, the same two inputs would render the same output instead of increasing it's volume). If you need the original volume of both inputs adding up, you must apply a filter: 

I have checked the subtitles, and I see there are wrong timestamps in them: For example, line 4 is displayed until , whether line 5 start time is . That means that VLC showed first subtitle in place (bottom line), but when it needed to display the next line, the bottom was still in use, so it should display in a "free" space (just above), but only 0.01 seconds later, it hides the bottom line, thus making it appear as if it were working incorrectly. You may retouch the subtitles yourself in order to correct the timestamps, but I could not find an automated way to do so. There are plenty of overlapping errors, (like 1 every 4-5 lines or so). 

You may split your config between several files. The file is loaded from via , so you may create a , , etc. 

Just take into account that on IE also changes the UA string to show a former IE version to "force" the server into thinking it is an older version (I thing it uses IE6 or 7), so maybe most of what you want will be render useless if somebody needs to use to load a webpage. 

Nevertheless, you won't be able to use any of them until you correct your permissions. must be 775 at most, 700, 600 

If you are using you are not encoding the video, just changing the "envelope", which does not support neither h264 nor aac. .mpeg files must contain mpeg1 o mpeg2 video and mpeg1 layer 1,2 or 3 audio. H264 is mpeg4 and aac is an extension of mpeg2. VLC might play since it can almost play anything, but your "encoded" output is now less compatible than ever. Try encoding it to .mp4 to make it more compatible. I think that you can mantain the copy flag in this case. Note: .mpeg is a very old format and the output removing the copy flag would render a low quality video. 

gmail.rs does not exist as a mail server. Eventhough there are google.com, google.rs, etc. Gmail is always gmail.com 

is to flag the private key (in this case, mykey.pem). Also it was missing the at the end of the host 

It is a "single sign on" system. The domain only allows you to authenticate, but has no content on it's own. Thus, if you don't come from another domain which required you to log in, it would show you no content at all. As there is no content at that domain and your favourites does not include any info of what you were trying to access, they just warn you that your favourite is pointing to the wrong address. After login in and for the session duration, you may access any subdomain at oracle as an authenticated user without the need to log in again in. It's like you usually work with google: you must login at , but you usually access it using other domains (, , etc) 

First one stablishes a tunnel from your home pc at port 2000 to the final server at port 22 (standard for SSH) through the intermediate server at port 54022. Launch the first command and check if there is a new LISTENing port on your home PC (), if so you have your tunnel up and running. Just perform the commands as if your local PC were the final server (at port 2000) NOTE: I'm using port 2000 as I suposse there is a ssh server running on your PC, but you could use whatever port you'd like. 

I have tried this setup on my local machine, and I can assure that the "restrictive proxy" would get a , but it will not see any certificate, so I am not sure if this would work. Let's asume: your Debian has or to do the proxying and an SSH server. On your client PC, you need , which is a program that does not need admin privileges to run, not need for installation and could run from a pendrive. First your Debian: Make your SSH listen on port , just add (or replace your current port) a on and also allow TCP forwarding (add on that file) Configure your Squid or Apache to do proxying. As this is going to be used through an SSH tunnel, it would only need to listen on the loopback interface. In case you use an Apache: 

Assuming a linux environment (or cygwin on windows), the only way I found is to execute 2 commands. First to get main video size and perform math on them (note: : 

NOTE this values are quite high to start, so you could try lowering them if the file size is too much: 35M for 1080p, 15M for 720p, 5M for 480p 

Since first URL is on port but second does not specify port, (assumed then), it is not the "same" domain. On your server's configuration files (should be something like ) search for : You should find a line that begins with: 

is the first VirtualHost making it the "default" VirtualHost, so any petition that has no header (or not matches any of the other VirtualHosts) will end up there. does not require header to work so it goes for the default VH. 

I would recommend trying hot-plug instead of powering off, changing CPU and starting it again. First, you need to mark it as cpu-hot-plug: 

SSH tunneling is the same as port forwarding in this context, though SSH documentation and configuration parameters usually refers as the later one. Tunneling or forwarding a port allows you to encapsulate TCP traffic inside a SSH connection. This could be used to 

I doubt there is any. That guy knows how BMP format is and calculated equivalences between RGB codes and text, but all the gibberish before the "text" is the BMP headers, which specify things like size, color depth, etc. In former versions, in the headers were included a table with the color encoding of the pixels and the pixels themselves were just pointers to that table. Since those headers must have some concordance, it is improbable to open an arbitrary file that could be readed as a BMP. Nevertheless, you could write your own script to read a file and encode it as a BMP file (most of the work would be calculate an optimal size and write the headers before the file itself), but it is pretty useless... For text files you might get some fixed colors al mixed up and for binary files you could find some patterns (since most have sections padded with 0's), but it will be almost as amusing as listening to data tapes.