After you have all your tests (I have just created some for 0-4) you can try to extract some methods with duplicate code. 

So we get: without loosing any knowledge. And the exception is not used, so we can skip it. In my opinion can be omitted in the class names, this is either part of the package name or the application name itself. Also don't need to be coupled to the that tightly. The Column array initialization in the Grid is strange. Common pattern would look like: 

The big disadvantage of putting the validation to the setter is that you are never able to set invalid values. In most cases this is fine, but in some scenarios a valid user input differs from a more general valid field content. In addition the validation is also executed to internal setter uses where know that they are valid. That said, I recommend setters to be only setters and not more. The validation itself can be placed in a separate method or even in a separate class (depending on the complexity). If you only want to display one error message, throwing an exception within the validation should be fine. If you want to collect multiple error messages, you might want to build a generic validation class: 

which is just . So let's call it like that and make sure a requirement that when calling it we have dx 

and similarly in the second place. Also some checks for input length might be good to do. You should also comment more your code. I strongly believe the code should be self documented but not on such low level as asm :) So comment more. GIST 

A bit of explanation. This macro will do all the work that is required to check if a specific flag is set (specified as operand op1) and if so print the message specified by operand op2. We need to specify also our label as local so that there is no label duplication when macro is placed in code multiple times. We also keep the flags to be restored after printing. Having this we can simplify the code a bit to basically this: 

First of all I would split the class in 2 or 3 classes , and . The setter error could easily become Exceptions, which you could collect in you Registration class. At the end you will have a smaller User object you can attach to the session. Please also check $URL$ for some hint regarding session validation. 

I know that you receive double, but you shouldn't get your system "infected" by double prices. This is just wrong. Convert them once you received them. Instead of comparing your s to find the , you could also just work with the and replace the zeros. This will also work with your double values and is a valid approach if you just want to render the number. 

The actual string starts on index 2 and before that you have max string length, and bytes read. Also there's no at the end. You have to put it there. 

You have a bit of code duplication that could be extracted and consolidated. But first with some error fixes (at least the code did not compile on my TASM). Compilation issues 

Using those instead of bare -ing will make your code more readable. Having those it's clear what you try to do with this code High-level functions 

You have a bit of code duplication that could and should be removed to avoid mistakes. FASM supports macros that you can use to remove duplicated parts. One can define a macro: 

I think there are two major issues you should address right in the beginning when you start with PHP. Separation of Layout and Logic This means in general that you shouldn't mix HTML and PHP code. Later this will lead you to the MVC-Pattern. index.php 

Don't use all-capital-letter variable names. And don't use global variables. Both is considered bad practice. 

According your questions you have really big plans. You want to write a template engine, a logging framework, an ORM and I guess somewhere in between your real application. Trust me when I tell you, you will fail. (I and most likely everybody else here tried it already :) ). For all your components there are mature frameworks out there. Find the one you like!! 

is defined twice. First as a string ( and the second time as a label. I would rename the first one to and use it in 

Buffered input I don't know why you chose buffered input as your method of entering the hint, but in case of this command the data has a specific format. 

Compare Your compare method is kinda strange. You do not iterate at all and you don't use any opcodes that would do that for you. It works only when you have one-char secret. Not so cool :) I would write it like this 

From an OOP-point of view, as an slightly different approach, you might want to extend PDO instead of a delegation (with PHP 7.1 strict typing): 

Based on this statement, I don't get, how you want to use your code. You definitely don't want to start programming in a string (see "evil eval"), nor is it getting less messy with the nested calls. What about a more -approach. Just wrap the stream and add your methods. With some formatting, your are getting pretty close to your layout. 

it is far easier to test your code (automatically and manually). You don't need to type stuff anymore and there is nothing on stdout that needs to be read. As a first step you can simply move the content of your outer loop into such an method (plus some minor adaptations and appending to a StringBuilder instead of printing to system out). Afterwards it's time to write some unit tests, or at least two for your samples. 

Other things that might be good to fix You have the same loop for scanning the characters. Why not enclose it as another proc and just use in those two places? You can make assumption that for example will point to the buffer that has to be filled. Also in this scanning you could handle for example backspace character and delete the characters. 

Without the actual model and some numbers (how long does it take to execute/ how much 'space' it takes?) might be hard to optimize, but what I can tell is that you call quite a lot in such short method. When you do call it you basically iterate over a source (is it DB source? in memory source? other?) and grab it to the memory of your process. Try reducing the number of calls - it will improve your performance. Take a look at this fragment: 

"Uniqueness" should not be your goal (except you copied it completely from somebody else ;) ) In general you should aim for removing stuff and still let it work as expected and not adding unnecessary stuff. Do you have test, that is something you should add always? Some hints: 

If you stay with an procedural style (totally fine for such a task), you could anyway try to split your main method into smaller well names methods. Nevertheless, after this initial objectifaction or extracting of a method like 

It is in general a bad idea to run SQL queries in a loop, so try to create one join for all your queries. Now the simple Controller (index.php) 

as in the will be the number of characters not the ascii representation of that number. If we could restrict ourselves to maximum 9 characters that would be easy. Just add 48(dec) to the and you get the value. Since your secret is limited to 21 characters we could go with a simple method for printing. 

What we do here is just divide the number in by 10 and print the values stored in (result - only if >0) and the - reminder. Printing the hints On fourth attempt you are putting the character to be printed in . It should be in . You don't also have to use different registers so just: 

First of all: Use a StringBuilder instead of System.out.println so you can easily compare the result of your method with an expected output. Your test could look like: (I renamed you method to draw and moved the size to the instance.) 

I think there is nothing else you can do here. All other ifs are totally different. Maybe you could extract method or variables do communicate the meaning of every branch, but beside that I thing we are done. 

Let me point out an other aspect, you might miss at the moment. I know that this is a learner question/example, but keep in mind that your approach is designing an application where you can switch the network library (in extreme) at runtime. This is not the most common scenario. Actually it is more likely that you want to switch Retrofit against a mock or Volley against a mock in your tests. So you have done everything right, if you can write tests for related parts of your system (e.g. the StatusFragment) without doing real network calls and there is no test switch in your production code. (The network stuff will get it's own test.) On the other hand, although I'm not familiar with the libraries, Google told me that both seems to have some own mocking concepts. So there might not even be a need to switch your implementation in unit tests. In case you finally end up with only one implementation now and optional a total replacement in the future, this approach might add an unnecessary (mental and technical) overhead. Implementing against an interface don't necessary mean a Java interface. If you only have one implementation at a time, it is totally fine to drop and move into . Afterwards you are implementing against the interface of and you don't care about is implementation. It is also pretty straight forward to change the implementation in later without changing other parts of the application.