You will have to examine how the question is worded. By default 11g will create all three tablespaces. You can however create a database with only SYSTEM and SYSAUX. Technically speaking you can upgrade pre-10g database and not add SYSAUX, or remove the SYSAUX tablespace after the database is created and therefore have a database with only a SYSTEM tablespace, but you would be ill advised to do so and I really don't think they would look for that in an answer. From the 11.2 Administration Guide: 

All that being said, it does seem prudent to be prepared for change. Just because all your product names today fit in 20 characters doesn’t mean they always will. Don’t go overboard and make it 1000, but do leave room for plausible expansion. 

There would have to be data indicating that the row is both a child of row A and a child of row B. This can be done, but does not seem like it would be typical. Think of an employee. Most employees only have one direct managers. In a simple design an employee could have two managers, but it would require multiple employee records. For example: 

I'd go with Justin Cave's suggestion and use a separate sequence, but if you really must use the same sequence, then you can change the INCREMENT value to two and then simply add one in your insert like this: 

As long as you don't add data between the last refresh before the column add and after the column add, you should be fine. If you must allow for this then the easiest thing would be to do a complete refresh at the end of your plan. You shouldn't need to re-create the materialized view log. Setup 

You can connect as sysdba on the database server itself. You can connect as the user you are trying to on the database server itself. You can ping the database server from the computer you are trying to connect from. You can tnsping the listener from the computer you are trying to connect from. 

I don't know if this will work in sqlite3, but you didn't tag the question with that, so here is an Oracle solution. 

Justin Cave and Eric Humphrey's queries both return different results. Here is a third equally valid answer that returns a third different set of results: 

From the 11g Oracle Documentation: SYS AND SYSTEM Users The following administrative user accounts are automatically created when you install Oracle Database. They are both created with the password that you supplied upon installation, and they are both automatically granted the DBA role. 

To know how many tickets are active on a particular day, you need to know both when a ticket first became active and when it was closed. Your design already contains this data, so the count can be generated without adding any data. This can be done by calculating the number if days between the open and close and then joining that with a data set large enough to accommodate your longest open duration. Here is an example in Oracle doing something conceptually similar. 

You didn't show your command to start rman, but it appears that you have not connected to both the target and the auxiliary. You will need something like this: 

If I understand correctly, you are trying to consume an existing procedure that has a return value. This can be done in another procedure, package, or function, but the simplest method is using a block. In the declare section you define the variables that will receive the values and then use those in the call to the procedure. 

Assuming you have inserted the data into Oracle perhaps using an external table, you could use the connect by clause of a hierarchical query to generate the additional rows you need. Setup to simulate the source data: 

No, there is no direct replacement for PRAGMA RESTRICT REFERENCES… WNDS, however, the feature has not been removed, only deprecated. Looking further though, your question assumes that these developers can’t be trusted to not add write commands, but can be trusted not to remove the PRAGMA or create another package without it. Although your question is legitimate on a technical level, your real problem seems to be a code review and/or management issue. Here are some recommendations that could help with that. 

Here is a query that should give you what you are looking for. This is Oracle SQL syntax, but may work in other databases as well. 

Start with the one you expect to need to know first. If have access to or expect to have access to a particular version then start with the concepts guide for that version. If you have no database or potential database in mind then start with the 12c. 

The response from Oracle is that this is not really a bug because the application is catching the 4068 and handling it, thereby not allowing the normal resolution of the error to occur. Their explanation doesn't seem adequate to me because if the package throws an ORA-01476-Divide By Zero (for example) doing a raise_application_error does not effect whether the ORA-01476 is included in the stack or not. 

I agree with ik_zelf(+1). You will probably want to do an Exchange Partition, therefore you should read the SQL Language Reference information about it and the rules it must follow. The purpose of DBMS_Redefinition is to make changes online rather than offline. You should read the Administrator's Guide to gain an understanding of the situations in which it can help you. 

The check is only done when the exception is raised, so the only overhead is the variable declaration. You will know which value caused the exception based on the line number. If this were the only reason to move logic into a package it might not be worth it, but since there are many other benefits, it is worth considering. 

A.B.Cade and Phil gave the answer in the comments: CONNECT THROUGH cannot be granted using a role. As Phil said, creating a script to do this is trivial. Be aware the database links do not work the same when used via proxy. This situation does have risk, but given the requirements and limitations in Oracle, it is sometimes necessary. You might consider allowing the script to accept two usernames. The DBA can then run the script on demand for the particular client and support person combination that needs it. By revoking the privilege when the support session is complete there will be less the potential for abuse. 

Bad Data Field length provides an additional mechanism to catch/prevent bad data. An interface shouldn’t attempt to insert 3000 characters into a 100 character field, but if that field is defined to be 4000 characters, it just might. The error woudn’t be caught at the data entry stage, but the system may have trouble further down when another application tries to process the data and chokes. As an example, if you later decide to index the field in Oracle you would exceed the maximum key length (depending on block size and concatenation). See… 

Previous Answer Columns in views from columns in tables that are marked will inherently be as well. There is nothing special you need to do to make this happen. If instead you are trying to make the view accept nulls when the table is marked as , then you should look into triggers. They will allow you to insert a null into a view and have it inserted as a zero into the table. Here is an example: 

It would seem like a function would exist to shorten this syntax, but using LNNVL returns all the non-equal records and all the records with nulls. 

The Logical Storage Structures section in the Oracle Concepts Guide has a good explanation of both data blocks and data files (pages 259 - 296). There is quite a bit of good information including illustrations, but here are some excerpts: 

You didn't say what database you need to do this in. If it is Oracle you could use one of the following methods: 

If any of these return then one of your assumptions is incorrect. For me all that was necessary to be disconnected was the , but another site uses an as well. Perhaps this allows it to work even when the DBA role has been granted. I have not tested it to know. You should also be aware that this should not be used for security in place of secure passwords and other measures as the IP_ADDRESS the client sends can be altered. 

Prevent this by preventing this level of access to the OS. Monitor this by monitoring access to the OS and to the folder. 

DML can be considered to exclude statements. The Wikepidia.org entry for “Data Manipulation Launguage” describes it as follows: 

I'm not looking for a trick applicable only to my specific test case, but a general solution to the problem. 

The same issue seems to be effecting the following, which returns the wrong data even though the number of rows is the same. 

Values don't need to be exact in order to use an index. In your particular example, a Range scan will limit the amount of data examined. An index on both bounds allows the data to be range limited on both axis. A range scan operates conceptually similar to how you would look at a map. If you wanted to find the Washington Monument at Latitude: 38.889449 Longitude: -77.035232, you might begin your search by focusing on 30 to 40 Latitude and -70 to -80 Longitude. If you just looked at the Latitude you would have a lot more map to look at than when you look at both. Here is a demonstration in Oracle. 

When you delete records there is nothing that automatically compacts the segment, therefore you will need to do a segment shrink to reclaim the space. Here is excerpt from the 11.2 Administrator's Guide on Reclaiming Wasted Space: 

A subsequent call from the same session re-initializes the package state and therefore runs successfully. The interesting thing is that this behavior seems to change when the caller catches the exception and does a raise_application_error. As expected the raise_application_error is included in the stack, but contrary to expectations, the ORA-04068 is not. Here is an example error stack: 

Justin inspired me to attempt a version using the clause. This is my first use of the clause, so I'm open to any constructive criticism. I created three CTEs to test negative numbers and zero. 

Deeptechtons, we really would like to see your answer, but since you haven't posted it yet, here is how it could be done. This SQL is for Oracle not SQL Server, so it would have to be translated. There are details missing from your post, so some assumptions used are likely invalid. 

Yes, it will make a difference. How big a difference will depend both on how many rows the table has and how many columns as well as how frequently the table is read from and updated. Depending on the database, the block size and how many rows are updated at the same time could also be factors. Keep in mind the overhead you are introducing by splitting the table for how often the data will be queried separately vs how often it will need to be joined and the performance requirements of various reading and writing activities.