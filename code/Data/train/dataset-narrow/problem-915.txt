You need to sanitize your inputs ( for filenames, filter for directories, although you could filter stricter), and you need to check if the normalized filename + path is inside the directory you want it to be in. Note also that even if you fix this, as ids are passed from the user, users will still be able to upload files to other users directory, read files of other users, and delete files of other users. Note also that is nice as defense in depth, but can easily be bypassed. I would remove the comment as to not leave a false sense of security (it's mainly a usability check). Misc 

Where is your code, is the code I pasted above, and is the code I linked to. The main reason for this is that you are creating a lot of new objects. 

Security Try to follow current best practices. If you are very new to web security, take a quick look at the OWASP Top 10. SQL Injection You are open to SQL Injection via the parameter as well as , , and possibly and . As well as do second order injection via and . And that's just in your first two functions, your other functions are vulnerable as well. It should also be said that casting to int or escaping input is not the best approach to SQL injections. Current best-practice is to use prepared statements. It's safer, it's more readable, it's easy to use. There is really no excuse to not use them. XSS You echo variables without encoding, which can lead to XSS. Examples are , , etc. Ideally, you should use a templating engine, which encodes variables by default. This is more secure, and also results in better code. Structure / Encapsulation / Readability Try to read up on MVC, and try to make more use of Laravel functionality. For example, Laravel has a query builder, templates, etc. Globals From a quick first look at your code, there is a lot of work being done on global variables, either via superglobals or via setenv. Duplication and contain a lot of duplicate code (they are essentially the same function). Try to extract that duplication to functions which you then reuse. Your functions do too much Your functions do way too much, which is why you have so much duplication. And why your code is quite difficult to read, or change, or test. A good example is which indeed sends mail, but also proccesses a request, does some work on projects and templates, logs stuff, selects users from the database, and updates users in the database, exists, and prints information to the user. None of your functions should ever exit, and only your functions that are explicitly meant to print something should print something. Passing God Objects Functions should accept the specific arguments they need, not some god request object. So instead of this: 

Creating Database and Table Creating the database and tables should not be part of the database connection/configuration class. You don't want this to execute on every connection, but just once when you set up your website. Create a separate setup script. This has the additional advantage of simplifying your class. Right now, it stores the database configuration, connects to the database, and sets up tables (in addition to echoing and dying, which no class should do). That's too much responsibility for one class, so it's good to extract code from it. Misc 

Spacing You should use a lot more spaces, because they make your code easier to read. I would at least add spaces after and , before , and around all and . You should also try to be more consistent with your spacing. For example, you have spaces around some , but not all, and sometimes you write , other times . Randomness It seems that you implemented a variation of the fisher yates algorithm, which is actually not truly random, but biased: 

No, but they should be clearer. Your way of placing one if into the other, and of checking the negative case first makes the code hard to read. If you turn the s around, your code would look like this: 

This is still not perfect, but we did get rid of the deep nested ifs. Nested in This pattern is not optimal: 

Note that I removed your comments, as they were not that helpful in determining what a test does. I did give the test methods names that I think describe the test cases better. 

Not really. When you extend a class, you generally want to express that it is a type of that class. For example, you may have an abstract class, and a class which extends it, because a Cat Animal. You on the other hand have a class, which isn't a type of . contains basic validation functions, and applies these functions, and also parses your validation codes. It's not so bad, but it isn't how inheritance is generally used. If you wanted to use OOP, you may have a interface, which is implemented by an , a , etc. But that is probably going to be overkill (except if you have more complex validation to do). Usage Your validator shouldn't care where the stuff it validates comes from. But you hardcoded POST into it. Instead, pass the values that need validating on to it. Comments Proper documentation is great, but your comments look auto-generated. They do not add any actual value. Instead, you could for example document what phone numbers may look like (it's not like there is a widely accepted standard), how email addresses are verified, how dates may look, and so on. Misc 

Note that the extension limitation does not apply to old PHP versions that are vulnerable to null byte poisoning or path truncation. Also, your echo is vulnerable to XSS. 

Now it's also more obvious what happens if the agent is null. But is returning null really what you want? It will lead to a lot of in the calling code. I would suggest throwing an exception instead. Java also has a nice utility method for this: 

Unit Tests This is probably going to be a major rewrite, so the first thing I would do is write unit tests for it. That way, you can confirm that your new version actually will do the same thing as the original version. Naming The current names don't really tell a reader all that much: 

Now it's very clear that calling the getters does not cost very much (time-wise), and your model can be reused. For example, you might already know all the data without needing a database connection (because they are stored in the URL or session, or because you are performing tests and thus set them yourselves). If you only use the class in your other classes (such as the views), it can easily be separated from the database. 

Comments The usability of your class would increase if you would add PHPDoc style comments, especially for the function and its arguments. A lot of your in-code comments aren't really needed, such as , , , etc. These kinds of comments are not necessary, as they just repeat what your code already says. They also distract from the actually important comments, thus making your code less readable. Most of these comments, you can just remove. But some are in places where a comment would actually be helpful, and should be extended. For example: for . Here, a comment describing what "more readable" is would be very helpful, because the method name is very generic. Another example is for . What are "some" checks? Naming 

In summary, I would agree with Vogel612, your class doesn't really serve a purpose. Either use mysqli directly, use PDO, or think about what extra functionality you could really use in a class like this. 

Which would call the function inside the controller with argument ? The more standard way of doing this would probably be to parse the URL, so it would look like this: 

Without loops or similar "advanced" structures, there isn't much you can do to simplify this. You could save the duplication in extra variables. It might look like this: 

I haven't personally implemented a custom session handler, so take everything below with a grain of salt. 

doesn't seem to serve any purpose. The only thing it seems to do is hold an instance of PDO, so why not use PDO itself? also only seems to be a wrapper of PDO: 

I haven't looked at all the code in-depth, but here are some first thoughts about it: Error Handling Neither printing exceptions nor ignoring them is a good approach, especially for a low-level class like yours, because you don't allow the calling code to handle the exception like it wants. For example, users will probably want to create a custom error page. Input Sanitation It seems that it is impossible to distinguish between GET and POST variables, which is not ideal. HTML encoding should conceptually happen when outputting, as that is where XSS actually happens; that is when you know the context you are inserting into, which means that that is when you know how to properly defend against XSS (imagine eg inserting into or tags, or into attributes such as ). Encoding directly on input also means that you get unclean data, which may matter if you process the input somewhere (this may eg matter for passwords, or for external functions such as ). In your case, you also miss quite a lot of input, such as from and . For some (legacy) applications, it may still make sense to encode on input, and remember that in specific situations the input must be decoded. But since you are writing your code from scratch, it would be a good idea to use a proper approach. Something like a templating engine which by default encodes its variables might be an idea. For input sanitation, you still might want something restricting your input, eg like this. Structure Your kernel class seems to do too much. It handles and sanitizes input, loads modules, processes modules, seems to be responsible for routing, etc. Most of this work happens in a large code block in the constructor, which really hurts readability. At a minimum, I would expect classes such as and , and methods such as , , etc. Routing Whitelist Maybe I overlooked it, but it doesn't seem that you have a whitelist that checks if a method is actually allowed to be called with the given parameters (such as here). As your class also does routing, I would expect something like this to exist (it would also make it a lot easier to use the router, as it would give an overview over what routes exist). Sure, you could just say that all public methods are, well, public. But I don't think that this is an ideal approach for a framework, as you want to make it difficult for your users to mess up. Documentation It would greatly increase readability if you would use something like PHPDoc comments for your classes and methods. Comments You have quite a lot of comments, which on the one hand is good (it makes your code easier to understand), but on the other hand it's also a sign of unclear code. For example: 

No, this code is not secure, as you are using prepared statements wrong. See here for correct usage of mysqli prepared statements (you should not ever have user supplied input in the statement, it is only for SQL syntax; add the user input via later on). For example, your code might look like this: 

I would agree with @ardaozkal that an XP based system would be better (more flexible, etc). But assuming that your approach is good enough for your situation, I also have some suggestions: 

HTML5 As you are using HTML5, you should think about using the newly available structuring elements (, , , , and ), instead of using generic s. So for example: 

General Structure Your student class does too many things. It reads input, it reads output, it counts students, and it holds and handles student data. You should think about creating new classes for at least the first three functionalities. Ideally, I would gather user input outside the class and pass it via constructor/methods to the class. Misc