This comment doesn't say much, its fairly clear that anything starting with is a module. It would be better to say something about why these three modules are grouped - eg, 'http/html modules'. But for a low number of imports, you mightn't bother with the comment at all. 

Put a blank line below your last . Also, where are , and from? They sound like your own support modules rather than part of a third-party package, in which case the imports should go after pymongo, rather than before, per PEP 8. 

The updating version really does need to do some extra stuff after it the files get closed. So it does need to be it's own context manager. But instead of writing it as a class, it's a little easier to use the stdlib to write it as a coroutine: 

Is there a more optimal way of retrieving the character for the letter? I would assume that I would just replace my Entry set loop with another map, but I do not want to bloat the code, because it will reduce scalability. 

Below, I have created a rudimentary script to decipher a columnar transposition. I am wondering if there is a more efficient way to determine the number of the rows in a column? Also, is there a way to build the resulting string without creating a matrix in the interim? Overview Quick refresher for columnar transpositions. Method 1 Given a key of , the text is transposed into three columns... 

I am trying to optimize an object filter function. Given an array of keys, I need to filter an object. I feel that creating a new object each time may degrade performance. Is there a way to mock the function for objects? 

I would join both and in recommending to guard your implementation and throw an appropriate error as well as exposing an external status check method such as or . Also I agree the card should be popped from the end of the list when using an as the backing collection. Finally, you have a very well formed class with clear and concise public members. Be sure to add just enough javadoc comments to allow a the class to be consumed without needing to open the code. 

Yes, your while loop is suboptimal leading to increased loops and increased time for larger values. The problem can be solved mathematically. Consider this: $$ s = \mathtt{startingTotalItems}\\ n = \mathtt{newItemInterval}\\ $$ $$ f(s, n) = \begin{cases} \emptyset, &\text{when $n\lt0$}\\ s, &\text{when $n=0$}\\ \infty, &\text{when $n=1$}\\ s + f(s\ \mathbf{div}\ n + s\ \mathbf{rem}\ n, n), &\text{when $n\gt1$}\\ \end{cases} $$ Using a little algebra the last equation can be factored into a single operation. 

As you can see, I have modified the Point Objects fields, although they are inaccessible through traditional method calls. I was able to bypass Java's typechecking which I find both neat and dangerous. Does this mean that anyone can just wrap another persons class, unless it is immutable, and inject data? Point.java 

I have written the following Tampermonkey/Greasemonkey script. I am trying to obtain a list of all CSS rules for a page; across all stylesheets. As of now, I am just iterating over everything. Is there a faster way to obtain the rules? Also, I feel that there is a more efficient way of converting the CSS text to an object, but right now, all I can think to do is to tokenize the property-value pairs by spliting. 

This will reduce your search space, and also allow you to use ints everywhere, and not parse them into strings. 

This means that if you can work out how to generate the indices of potential locally-interesting values, you can structure your program like this: 

Separation of concerns. You're mingling code to parse your data with code to process it once it is parsed. Instead, parse everything into the appropriate data structures first, and then do the processing. Use appropriate libraries and data structures. When you're doing linear algebra, that means numpy. Numpy is a dedicated, LA library that has heavily optimised routines for things like various matrix products, so you don't need to roll your own. Numpy arrays will also use quite a bit less memory than Python lists. However, what you're working with is labelled data (and some of it is labelled in two dimensions), which means the best data structure is probably a pandas dataframe - it's basically like your dict of strings to lists in , but much more optimised, and fully compatible with numpy's matrix manipulations. 

Your and variables are very bad design. Hoisting allows the variable to be in scope through es3 (to my recollection), but you should never try to take advantage of that. These functions should be rewritten to take the object they are operating on as a parameter. Additionally, unless there should be some third undefined state, the opposite of should be , not a different detection method. is a poor description for the method as well. Consider something describing what it does like . Consider the following: 

That still leaves a lot of duplicate code. We will want to clean that up. Finally The truthy nature of javascript allows us to do this as well: 

So, I am not sure if I should have extend , because the and functions are already parameterized with . I guess I don't really need compare to... Does this structure look good? I used a instead of a because as3commons and the default flex packages do not have this structure defined. How easy will this be if I were to create it. Things that I am in the process of working out now: 

I have become interested in reflection and I wrote a class to wrap an Object so that I can access its private instance fields. The code works great. I do not need to wory about the exceptions in the and methods because I cast the values appropriately through my wrappers accessor/mutators, but I was wondering if there is a better way of dealing with different types? Example 

To answer the question which was asked, no. The best method of document protection will be found in a technology designed with document protection in mind. HTML is not that technology. As others have pointed out, there are plenty of methods for copying the text both by disabling or modifying browser features such as javascript, as well as just requesting the document directly. There are, however, technologies available to protect documents. While nothing is foolproof, using something like an encrypted PDF document with the appropriate permissions set will likely be the "next best thing" that can be done in a digital form. 

I've created the following implementation of a trie in F# as an effort to learn the language. I would like to know what could be done to make it more idiomatic. Any other pointers are welcome as well. Of particular interest are: