ie: 1 UTF8-encoded char is seen as 2 L1-octets and each one gets encoded in UTF8 again, ends up as 2 UTF-8 encoded chars. So the first question is "where is this happening"? But the really funky part is that 

My problem is that, for the life of me, I cannot find a positive statement of support of the feature on MySQL's documentation site - or elsewhere. I am rather wary of deploying in production something unannounced (which might be experimentally present) so I hope somebody can point me to the official status of this. Edit: It turns out that the manual contains, in parts unrelated, this rather oblique statement: “…an InnoDB table with an AUTO_INCREMENT column requires at least one key where the auto-increment column is the only or leftmost column.” which suggests, but does not state, support. Edit 2: Using information from @rolandoMYSQLDBA below, I also located this additional snippet: "An AUTO_INCREMENT column must appear as the first column in an index on an InnoDB table.". I am therefore accepting his answer. And in case someone is wondering, the multiple column index thing is needed for table partitioning - the customer has auto_increment PK on all tables and they want to partition on a date column. 

Reference: $URL$ You could also use Microsoft Kerberos Configuration Manager for SQL Server to automatically detect and fix such SPN Issues: $URL$ 

Try using Microsoft Kerberos Configuration Manager for SQL Server to automatically detect and fix such SPN Issues: $URL$ 

You specifically get error "0x21c7, state: 15" when an attempt is made to register the SPN which already exists, but possibly under different account. When you run SQL Service under local system account, an SPN is registered under the Computer Object in AD. You can confirm from below: 

Enable SQL Server login auditing for successful and failed logins: $URL$ Changing the auditing scope would require a SQL service restart. Once service is restarted, all successful logins(user) and its IP Address will start getting logged in SQL Server logs. This data can be collected for about a week or 2 and then the log file be analysed to list down all the IP Addresses (and user) that have accessed SQL Server databases during the monitored period. If SSRS component is also installed on the same box, then ExecutionLog table of ReportServer database can be analysed to list down all the logins that access the SSRS portal. 

We have been experiencing some relatively large I/O (IOPS) spikes on the SAN that supports our production SQL Server. The spikes seem to fall at an exact time after the hour, each hour. We have investigated every known scheduled task source (SQL Agent, backups, scheduled SSRS Reports, etc.) and can't find any rhyme or reason to it so far. We have use Activity Monitor as well, but it has not yielded any answers to date. How would one go about definitively finding the source of I/O spikes? Are there monitoring tools (commercial or otherwise) that would help pinpoint the problem? 

Was setting the locking options on the indexes the direct cause? Why exactly would those settings cause deadlocks? 

Hopefully a simple question. What BI tools (commercial or OSS) support self-service reporting or self-service BI via an HTML web interface? I specified HTML because I know of at least one that can do it via the web, but only in Silverlight. 

A reindexing script was recently run in our dev environment that set and on all the indexes in the database. This was done while testing new reindexing scripts--it was not done intentionally. After this script was run, we immediately started seeing a large number of deadlocks where we normally never saw them. 

Edit: The accepted answer is right on the money. I had since found about mojibake through different channel and expanded my woes in a blog post. 

This is what happens if - at some point - a UTF8-encoded character is interpreted bytewise as two latin1 characters which are then UTF8-encoded. Edit: What is happening is along the lines of: 

All of the above confirmed by examining outputs with a binary editor (even though i have LANG=en_US.UTF-8 and UTF8 char display is OK) What I would like to see, obviously, is a clean UTF8 mysql environment which displays the same independently of the client. This is really driving me up the wall. Any ideas? DETAILS: Running mysql-server-5.1.73-5.el6_6.x86_64 on a Centos6 machine. my.cnf (relevant) settings: 

I'll describe right away the problem, and put details at the bottom. I am dumping a database which I am fairly sure contains (almost: a few cells have wrong, latin1 encoded data) only UTF8 data. Also I have done my utmost to ensure every part of the chain defaults/is set to UTF8. Problem: all UTF8 chars appearing in the output are screwed up as in this example: 

When you create the same login on the second server, you'll have to make sure to create it with the same SID and password as has been created on the Primary server. The steps that I follow is listed below: 

Or If you need to offload reporting queries (Or Backups) onto the secondary server to reduce load on the Primary Instance go with AG. I’d either combine (1 and 3) or (2 and 3) for both HA and DR purposes wherein 1 or 2 would provide an HA solution and 3 would be a DR solution. So it is always better to combine 1&3 or 2&3 for a complete HA and DR strategy. But am uncertain if there’s any benefit in combining 1 and 2. 

“Message Dedicated admin connection support was established for listening locally on port XXXXX” For Named instances, make sure that the Browser Service is running if the external applications are connecting using the Instance name. Also note that for Named instances, it is better to configure SQL Server to listen on a static port otherwise firewall management will become difficult as SQL Server will listen on a different port every time it’s restarted. 

Missing support for AUTO_INCREMENT columns in multiple-column index for InnoDB tables is a widely known limitation, as is the trigger workaround for when it is needed (see e.g this post). Yesterday, however, I ran into this thread claiming support for this feature was added as early as 5.1. I tried the following statement on my 5.7 install (mysql-community-server-5.7.19-1.el7.x86_64), and it appears to work flawlessly: 

The website (html5,utf8 all over) using the database displays those characters OK I can import the dump without issues with point (1) above still holding If i "fix" the dump - replacing the pairs with the char that should be there, point (1) above unravels - the browser now shows the familiar question marks on inverted background that is the familiar placeholder for "bad" utf8 sequences. The issue depends on the client: I can SELECT from mysql and have the double-encoding as in mysqldump; OTOH if i GET the web page (composed by php with charset UTF8 connection) I see regular (not doubled) UTF8 sequences. Even weirder, I can obtain correct looking results in mysql/mysqldump if I specify --default-character-set=latin1 (!!!). In this case, however what I get does not round trip cleanly as the UTF8 counterpart does. 

If speed is your one and only concern, and the data is for reading only (not updating/creating): all other things being equal, storing all the data in one table will be faster. Storing it in separate tables is storing it "normalized" (Normalization), and storing it in one table is storing it "denormalized" (Denormalization), 

Pretty simple question: is it standard/best practice to backup dev and QA instances of the database? Assume that the schema information is kept in some form of source control. 

We have a set of SQL Server instances (2008 R2) that run on the same virtual server. Each instance represents a stage in our development cycle (Dev/Test/Stage/etc.). The instances all need to be online at any given time, but load tends to be isolated to one instance as a time, depending on where we are in the release lifecycle. SQL Server seems to grab and hold whatever amount of memory we set as the max. What I'd like to know if there is any way of configuring the instances to be "smart" about memory consumption so they are not blocking each other from getting memory when needed. 

In above results, If you see any SPNs for MSSQLSvc then they need to be dropped with below commands on AD (You need to have Domain Admin permissions for this) so that you can then register SPN under new Service account: 

In General, allow firewall access to the following ports to connect to SQL Server remotely: For Default Instances 

I understand that the password option to protect the SQL Server backups has been discontinued beginning with SQL Server 2012 and the feature to encrypt backups using certificates is available only from SQL Server 2014. So in such cases, are there any other In-Built options available to protect SQL Server backups that I might have missed? TDE is only available on Enterprise editions. But am looking something for Standard Editions. 

2 more things to be noted here while you are trying to connect to the Listener via the Management Studio for ReadOnly routing: 

Once the above is done, restart SQL Service under the Service Account adn it should successfully register the SPN under the new Service account and you will be able to confirm by running the below command: