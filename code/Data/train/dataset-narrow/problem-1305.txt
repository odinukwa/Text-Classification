This method first checks if the result is for both high and low aces and if it is, it returns a degraded poker hand of only the primary rank. So full house becomes three of a kind and two pair becomes one pair. 

Additionally, there is no need for in your . The transaction is only needed when the Query is performed, not when it is created. Likewise, your are not guaranteed that a transaction is active. 

Please add more spaces. Operators, parenthesis and semicolons should have a space around them (some should have two - one before and one after). 

This method doesn't add the actual square to anything and therefore it's name is misleading This method adds an event listener each time it is called, so calling it twice would add two event listeners (If I remember my ActionScript correctly) 

I have no problem with , and even . But for and ... perhaps I am just not used to them enough to like seeing them. I would recommend not using , but that is mostly my personal preference. Other comments: 

As this is the first time ever I managed to make something in Haskell, any comments are welcome. Even though it is the first time though, feel free to rip my code apart as much as you would like and suggest any advanced things, I am always eager to learn. 

And your removed as well and all references to it replaced by . Your already implements , I see no point in wrapping those calls inside this class. 

Here is an overview of the number of instructions being performed at run-time in the different versions: $$ \newcommand{smallm}[0]{\overset{n\ \gg\ m}{\longrightarrow}} \begin{array}{|l|c|c|} \hline \\ & \textrm{Your code} & \textrm{200_success A} & \textrm{200_success B} & \textrm{My code} & \textrm{bfdev tool} \\ \hline \\ \textrm{Next} & 0 & 99 & 69 & 35 & 39 \\ \hline \\ \textrm{Previous} & 0 & 90 & 64 & 34 & 39 \\ \hline \\ \textrm{Print} & 13 & 13 & 13 & 13 & 13 \\ \hline \\ \textrm{Add} & 193 & 709 & 466 & 256 & 226 \\ \hline \\ \textrm{Subtract} & 160 & 21 & 22 & 36 & 193 \\ \hline \\ \textrm{Start While} & 0 & 1 & 1 & 1 & 6 \\ \hline \\ \textrm{End While} & 0 & 10 & 10 & 10 & 33 \\ \hline \\ \textrm{Total} & 366 & 943 & 645 & 385 & 549 \\ \hline \end{array}$$ And here is an overview of the source code length of the different versions: 

And one major thing: Just because some numbers sum up to 45 doesn't mean that it's valid in a Sudoku group! Consider these numbers: . Do they some up to 45? Yes. Would it be a valid group/row/column in a Sudoku? NO! This is why @Vogel612's solution is a whole lot better. 

Extract an interface Ask yourself the question: "Why do I need to pass this TextView?" I took a look at your code for the AdventureWorld class, and there you are not using it at all. So why are you passing it? I also took a look at your code for the Player class, and you are not using it there either! So, let's say that you would use it, let's say that your code needs to append some text to this TextView. We can do that by passing something else than a TextView. Let's pass it some callback. As I don't know what you're planning to use it for, I'm gonna call it 

As this seems to be an UI application, don't simply print the stacktrace of an exception. I doubt that the users are able to see the stack trace in the output, and even if they could, most of them would have no idea what it a means. Instead, provide appropriate error messages in dialogs. Empty else On one occasion you have this: 

Then you can replace these lines in the rest of your code with or . I suggest naming the parameter to something that makes more sense for you. 

There are two important speed improvements I see at first glance. First of all, call only once. That method does a bit of work, and there's no need to call that twice for each tile you loop through. This leads us to the following: 

janos recommended the Spring and Apache DbUtils frameworks, I can highly recommend using Hibernate. Hibernate is a very commonly used ORM framework (Object-Relational-Mapping). By using Hibernate and the proper entity classes, you can do all this with only these lines: 

The same goes for your . Naming things is technically not a constant, because it is mutable. I would either name this , or when creating it, wrap it inside a call. 

This looks like the start of a Question class. But wait, how/why does a Question have a Score? What does it mean that the score for a question is "Bad"? That depends on how you answer that question, doesn't it? I would remove that from this data, that value belongs elsewhere. You could possibly have some "points" integer value in the data to indicate how many points a question is worth though. You say that you are not looking to make your program give the points, but the user to honestly give the points. This is good, and reminds me about Anki Flashcards (although Anki doesn't have hints AFAIK). 

As for alternatives to using mod, even though it is possible to use two separate counters and decrease them and reset them once they hit zero, I don't think that would improve the code much. Considering that I managed to understand your code and learn a bit of Forth, I'd say that's a compliment to your code. I believe that with some of the changes I've suggested here, it would be much easier for new Forth programmers to understand it. 

And one final improvement: Instead of getting elements randomly, we can use to shuffle the list and then simply iterate over it and add elements to the result string. 

Your iterate method returns the same list as is given to it through a parameter, that's not needed. Either create a new list and return that (not recommended in your case), or change it to a method: 

I really don't think you gain anything by making your own implementation of this method. Additionally, your 's method can be removed and the default implementation used instead without any change in behavior. Naming I find the method to be hard to understand by looking at the name alone. Of what? Of a seed, a predicate and a unary operator? How about something like ? Perfect for tests Although using to read the result and manually check it works perfectly fine in this case, real tests wouldn't hurt. 

Yes, that's still a tree. It just doesn't have any left nodes (it does have seven nodes left though, I didn't remove any). A child node that is bigger than its parent should be on the right, which makes this tree right. (I love the English language) As if that was not enough, your says: 

Currently, this is a not very advanced chat application as you can only have one client. It'll be a 1-1 conversation. It will just be one server and one client talking to each other. You can run the in a loop to allow you to have more clients. The server then needs to loop through all the available clients (so you need some for those) and then send the incoming message to all clients. 

You might not be aware of it, but there is another data structure you can use here. You mention bit-based values in your question, but there's no need for you to handle that logic directly. There is a data-type which might be useful here, You could reduce your enum to simply and . For the and , you can use the . 

Your code won't work correctly. Code Style It is a good practice to use a bit more spacing than you are using, ittendstohelpswithreadability. It is also recommended to always use braces, even on one-line statements. Bugs have happened before because of this, only a matter of time before bugs happen again. For example: 

Taking it further Java is an Object Oriented language. Write your own classes, use objects, add more methods. Everything does not need to be done inside one method. I suggest you read Oracle's tutorial at $URL$ . You could use a class for example with the properties name, age, gender height. 

Some comments: (I bet other reviewers can find more) Private and final As much as possible, fields should be marked with and . One of these fields is . There are several others that have the "default" visibility when they can probably be marked private. 

Rewafadhabihlgdity (If you can't tell, that is supposed to say 'readability'). Leaves some things to be desired. 

As I said, this is just a start. I am still not sure about what it actually is that you are doing, but this will be more clear once you divide your method into a couple of sub-methods. 

First of all, I have to say that the code formatting is very clean. It's been a long while since I read such well-formatted code. It's probably even cleaner than my own code, and definitely cleaner than my apartment. It is good to take advantage of the specification that the inputs are sorted. Overall you have done so nicely, but I have a few comments. 

These exceptions should never be caught, code should be written in a way so that they don't occur in the first place! 

I can assure you, if a number is not equal to, and not more than another number, it will be less than. 

This code would not work, and you might not be aware of why exactly. You might be just lucky that you did not code it this way from the start. The issue is that you are calling twice. You should not do that, there can only be a maximum of one result, which means that the second if will always be false. Your original code should look like this: 

As you can see, the number of calls to the method increases dramatically, of exponential order. This is because you are using a recursive approach to the problem that often creates a new "branch". So, how to speed this up? Let's take a look at some of the output for the value :