Bugs in PrimeNumberClassic There are multiple bugs in this class : 2 is not prime, while any number <= to 1 are considered prime :( Some large number may results in infinite loop !!! (I'm going into more details about that at the end of my post) Before considering the rest of my reviews, you should : 

I find your code to be very good and readable :) In the code you present here, I only see one mishaps : 

With a default that takes an address and the . As already said, if you want to use your cache between your differents implementations you may need to inject it through the constructor. The class would not retry to send datas by default, it's better to let your users decide whatever they want to retry or not. You could use a parameter for this but I'd rather create a decorator like this : 

Controlling the input If the user input neither 1 nor 2, then what happens ? Never trust user input ;) Magic number (& cie) You use quite a lot of magic numbers though the code which is usually a bad idea. : this method is pure black magic to me ; you should comment or try to split it in easier to get methods. Example of code with DI Here is a sample of what it could look like (code is not complete) : 

but that's nit-picking. If you turn your object into an immutable one, it may be worth to cache the toString result ;) 

It's pretty nice IMO but can be improved. If your project uses apache commons (this library is often included), you should consider using the class to get the fields : $URL$ Notably, the method would reduce your code complexity by a bit. That's up to you though ;) This part : 

Here you should use instead of . On a sidenote, Array_Size and Rotation_Number aren't variable name that matches Java standards. A variable or field in java follows the camelCase convention (so it'd be rotationNumber instead of Rotation_Number). 

I haven't done Ruby in some time so I'm a bit rusty but I hope my review helped you at least a bit :) 

Also, 99.9% of the time you want to have your own implementation when you modify the method so you should consider overriding it. For example : 

Performance tuning To reduce the impact on performance, you should try to reduce the number of call to to only one, at the end of the run.... You may end with a very big however, so you should use a instead. Combining both those things should reduce the time taken by your application by a very noticeable amount and you should end up with something looking like this : 

It's been said multiple times but you should avoid one letter variable most of the time. Class name is also no good. It's recommended that class name follows camel case convention and using abbreviation is often considered bad. Don't code something in your main as it makes it harder to test your code. Putting it in an outside function makes for a clearer code : 

You are mixing the inner workings of your application with its view (how it's presented), you should avoid this most of the time (unless you are going for a simple script). By splitting the view from the logic, you can change the way data are shown to the user without touching any line of codes that take care of the behaviour. The separation of your classes feels a bit random... for instance, why do you have an and an ? what was the rationale behind splitting those two ? what does the class bring you ? You are always using the default visibility for your methods, make your methods public Your code always talk about but then, the model is stored as While you abstract some things, you are not using any abstraction for your tasks... they are simply stored as , adding behaviour to your task (for example, a due date) would have been easier with s objects. You should use dependency injection to make your code OO. By using dependency injection, you'll reduce the coupling between your objects making them easier to test and extend. You can take a look at the following SO answer for a brief explanation : $URL$ Never store password as a clear text, you should hash it... if you don't know how to do it, there are plenty of library that can do it, in the standard lib you can take a look at the following class : $URL$ Methods' name should make their intent clear, for example, methods that start with a , , , should return a value... as such, the method shouldn't be but rather return a list of options :) isn't a meaningless exception, so you shouldn't let it being thrown around and then use printStackTrace on it at a completely random place. Those exceptions means your program have receive a message from a thread telling it to stop while it was waiting. ...well, actually, why are you even calling there ? ^^' Why are you creating a Tasker in ?? Aren't tasks supposed to be linked to the user ? Avoid the default package, it's considered bad practice (and actually gives a warning in most IDE) : $URL$ Don't declare two variables on the same line, it's harder to read ;) 

is repeated multiple time and actually don't test for much. I'd consider making a private method that check and also check if id is not (or even if it isn't to consider only-spaces strings). For the method, can the parameters really can be an empty hash ? If not I'd consider at least removing the default value for this. I haven't read your whole repo, so I'm not sure but does the class really need to include both and ? Code like 

It's now only streamed once. Please note that you use your list like a which I find strange, you should consider looking at specificities. 

Why is this an ? It's clearly an , also the javadoc is pretty useless. The name is not very good... why ? Aren't / name closer to the intent ? Review of PrimeAbstract's childs The code in the implementation really needs to breathe ! Put some spaces in it ;) it's tiring to read it as of now. As a rule of thumb, put spaces between the (as well as things like += ofc) sign, the '?' sign and theirs operands as well as between comparators and their operands. 

In a few words... Your code as it stands is very very hard to unit test as it relies on global state, on system.in and on writing to a file directly and pretty much all methods have side-effects. The indentation is far from perfect. It also feels very imperative. As you are using a OO language, you should have multiple objects that delegate work to each other. By using dependency injection you could then make your objects read from something that is not (a file or a string for example) and write to something that is not always the same file. This'd make unit testing easier as well. To sum my previous points : your code really feels "scripty". Zooming in a little bit 3 variables are never used and some variable start with an upper letter which don't follow java conventions. 

3) You aren't checking that the given to your constructors/factory methods aren't set to . can (and will) really mess with any calculations and should be removed/avoided if possible, so I'd consider testing for the presence of this troublemakers 4) I'd consider using stream when applicable : For example with the all zero method :