A color Blind person sees as shown on the picture below. I would say that you should leave out the green or purple colors, and make sure that the difference between each colour is big. If you need the players to distinquish the tiles for their colours, I'd simply make them use different types of textures straight lines, horizontal lines, circles, crossed lines, no lines etc. There are different types of that illness, and choosing the right color would never suit everyone. $URL$ The image below shows the most common color blindnes, whch is Red/Green color blindness. 

First off: There is the unity scripting reference, it is the best tool when creating anything with Unity3d. 

Do not copy the entire game model to the server, you wouldn't like to load all the textures and detailed meshes on your server. Keep it as simple as possible, handle all the important processes like the location, health, any movement but do not load everything. - NEVER TRUST THE CLIENT. There are many books, along with multiple wiki's. Every engine supplier like IdeaFrabrik, Epic Games, Exitgames, Unity (also supports mmo's) has very good documentation for their products. Most of that stuff is public so you got access to complete solutions and you can actually find out how stuff works. The easiest way to find a book you need is to search Amazon for MMORPG, then go to the book category and choose the "programming" sub category. If you google it you will get unwanted results... 

A "Return to factory defaults in case I screw up button". It makes it easier/safer for everyone to experiment, then there is no need to back up saves and struggle to revive them after game reinstallation. In TES Skyrim you can load complete mods. They shouldn't break the core and if something happens you can always trigger them off. If you make anything YOU ARE CONDEMNED to make a solid reference so the players can move around your code. Like have all custom classes and functions explained so the programmers wont have to spend ages on learning how stuff works. NPC/character editor and anything you have created to make the game. Read about the TESV Nexus. 

The horror game "Drea D Out" featured an irisphone, which looked like an iphone. Contact an IP law advisor, that is the only thing you can actually rely on in the matter. As for the "GEFORCE"_210, don't do it, unless you have written permission from the Nvidia corporation, the word Geforce itself is a trademark. It would be illegal to create a browser named Google-it because it contains the phrase google. 

Yes, It does have a main menu and you must have hidden it. There is a small plus sign in the upper right corner of the 3D view. Click on it and it should do the trick. 

First of all, you need to learn about MOCAP - Motion Capture, unless you know how to work with animation rigs etc. you wont have any good from those models. Proffesional MOCAP studio is money consuming, it requires a green screens, special suits, actors, camera operators and huge ammounts of Gigabytes for storing all the date collected, which must be later processed by large workstations. 

As long as the file extension will be compatible with unity itself, the cruncher should work with no problems. Export it as one of unity-compatible extensions .FBX .OBJ etc. :) Here is the list of all supported file extensions. $URL$ The only problem you may encounter is that if the ammount of vertices is beyond 64k~ then the unity will not let you import that asset. You will have to split it into a few models so that it has less vertices than aprox. 64,000. Of course, unless the cap has been made higher. 

You can do just like the Firefly Studios have done in their Stronghold series. In the bottom right corner of the picture you can see six colors, that can be easily distinquished. As a player, I do not mind remembering who is my enemy and you can always give the player(s) a chance to assign colors to the teams. One thing I have to note, is that in the first edition of the Stronghold, The player would always play using the blue colors this his enemies were brown, yellow, red and black. The sequel to the game, Stronghold Crusader had the colors flipped, the player would always use the red color for his/hers units which felt awkward having to switch from one color to other. It took me a few hours to get used to the changes... You could create trimms for the other players that are allied to the player. Like, if the player is blue his allies will be blue with a gold trimm around his armor/whatever. You can add a skull next to the evil players, shield next to allies or anything else you might feel that would correspond to the game. 

You can also use the Gimp, which is an opensource program that has probably everything you might need to make your game. 

I remember that in Tibia they use an updater after client is started and you enter your correct password. If the client version is different, size~ etc. The client enters the patching mode, and it updates itself. If you won't have the correct client version the auto-updater will not let you inside the game + if it detects any type of bot that got plugged into the working game you will get an auto-ban. You can do the same as they have done it, check the bytesize of all scripts, and if the file size is different call it to send it over to you. That way you will have the cheater/hacker on a fork - with his account. :) 

Yes you can, not many people can spend half milion dollars + on server building. OVH.com servers are considered to be one of the cheapest, I use them. 10Gbit/s download speed, 18gb RAM, 6TB disk for about $350. You can use pre installed server software, many versions of Debian, Freebsd, Windows, Ubuntu. 32/64 bit. I assume that you either know how to or you have someone who can configure a server. Search google for "Dedicated server", that is the best option when hosting your game, you got access to the machine, but you must know how to move around it. 

I have played a mobile game called Galaxy on Fire, where you would be a space pilot. You were supposed to travel between solar systems each containing 6~ space stations orbiting planets. Each station had its own shop, with its specialities, beverages and whatever you might think of. Here is the Galaxy on fire 2 Galaxy Map. Taken from the GOF Wikia 

That can be tricky if the auto clicker has a Random var for the interval inbetween the clicks. There are a few things you can do to detect/stop these guys: 1) Disable the part were the clicking occurs, if people need a bot to do some action it is simply too boring for a human being. (my no.1 suggestion, as it is not in your business to bannish players, and if the game itself is boring it is only your fault) 2) As for the detection of an auto clicker. There are a few types of auto clicking bots (I scripted bots for RuneScape) and there you would have: Clicking on a specific 3d game object mesh inside the editor, all objects have an id. (ultra hard to detect). Clicking on one specific gamespot for eg. the minimap, always one exact pixel in the players current pos. Players can set up an auto mouse to click in one point. (less complex) 1) 

If you studied OpenGl you are on the right track. Also read about the DirectX, The understanding of it might be useful due to the fact that Microsoft always gives some bonuses to the users of their software.. 

I understand that the shoot will be in real world. With real cars. YOU ARE NOT ALLOWED TO USE THE COMPANY LOGO ON AN INGAME MODEL WITHOUT THE COMPANY PERMISSION. But when it comes to shooting a clip the law is on your side. You can use the cars in movies as long as you own it or have a written permission from the car owner. You could always rent a Movie Prop Car. The digital form of the game object is the bitter part because you do not own the "idea of the car" where the movie situation is clear that you are in possesion of that car you film. You can always make a car similar to the car from the movie you shoot, accept with no logos + you should mess a bit with the proportions and they wont be able to say that you stole the car concept from them, as it will be a technically different, yet similar model.