...and in this case a few of the curses commands work, but clearly some escape codes are cross-wired and there are some unexpected results (some text is blinking instead of displaying green, etc) Finally, I tried just running at the command line: 

I have a project running a 32x32 LED grid based on these instructions: $URL$ which relies on these drivers: $URL$ At the same time, my Rasp Pi 2 is running a full Bitcoin node. A python script interacts both with the bitcoind server via JSON-RPC, and the LED matrix. I found that when the Adafruit driver is running... 

So how can I permanently set as my terminal application for the connected HDMI monitor? Or, at least upgrade to 256 colors? 

I have a 5" display that runs entirely on the HDMI connection to the Pi, including power. Unfortunately, the display has a backlight which can't be switched off unless it is completely disconnected from power. Is there a way to shut off the power output to the HDMI port from the RPi OS? I've tried commands like which was advised in other threads to shutoff HDMI displays. This indeed cuts the video feed to the HDMI output, but the power remains (apparently +5V on pin 18 is HDMI standard). 

add the following line (changing the UUID and filesystem type (usually ntfs-3g, vfat or ext4) to your own... 

Yes it's possible to bridge your connection. Probably the most useful long-term solution would be to set your pi up as a wireless router using hostapd. There's a pretty good guide on that here. Or you could connect the tablet to the pi via Ethernet and it up as a full on router. Or you could go one further and make an Onion router ;-) Note- You will probably not be able to connect the Android via USB. You'll want to use ethernet or wifi to connect the tablet to the pi. 

(replacing with the correct device for your screen.) After that you should be able to upgrade to the rpi-update kernel without losing TFT. 

You can plug your charger into either the powerboost or the FONA to recharge the battery(but not both at the same time). The why- 

The touchscreen is a little harder to get running. If it's resistive, it's probably an ads7846. In that case you'll need to figure out the correct dtoverlay. that'll go in /boot/config.txt once it's sussed. It looks something like - 

11 minutes at half load. Full load is 900 Watts, so that's 11 minutes at 450 Watts. (11 / 60) * 450 = 82.5 Wh. Still not large enough. OK, let's try this one: CyberPower TAA Compliant Smart App Sinewave PR1000LCDRT2UTAA 1000VA 

32 minutes at half load. Full load is 700 Watts, so that's 32 minutes at 350 Watts. (32 / 60) * 350 = 186.67 Wh. OK, that'll keep you running for a full day! As you search for UPSs, watch out for ones that claim a run time, but don't specify how much power is being drawn for that time. There's no way to tell how they came up with that number, and there's no way to do the math to figure out what the capacity is. With the one you linked, the front of the box says "10-30 minutes", but there's no way to tell what the wattage of that is, so we can't use that number in our calculations. Also, one thing to keep in mind is that most UPSs are designed to keep a system running for a few minutes, not a full day. 5 Watts for the Pi is almost nothing, the internal circuitry of the UPS is probably taking that much as well, and we didn't account for that in our calculations, and as our runtimes get longer and longer, it'll throw our math off more and more, but this'll get you close. 

Use the powerboost to power the pi only. Do not power the SIM and it's battery from the raspberry pi. (I'll explain how to wire it first, then I'll explain why...) First- 

No tvservice -s output will be the same regardless of screen orientation. No. Virtual sessions are not affected by config.txt graphics settings. 

You may need to byte-bang it out manually over tcp. You'd use the at+cipstart command from the manual you referenced... See this thread for a bunch of useful info - $URL$ 

Not sure about that particular screen settings, but the fbtft driver has been upstreamed into the official kernel sources... TFT screens are now supported by the rpi-update kernel. If you can figure out the correct parameters for the LCD, then you can set up the /etc/modules file to load the fbtft module without having to rely on dodgy images from LCD resellers. The /etc/modules entries will look something like - 

then save and reboot. Note - the above line works only if you haven't removed the 'pi' user (UID 1000) as it mounts the drive as that user... 

If all you did was , then you still have a lot of work to do in order to get a useful running system. The default configuration of BuildRoot is for everything to be turned off except for BusyBox. The ssh server isn't responding because you didn't tell BuildRoot that you wanted to compile it! Start off by running in your BuildRoot directory. Openssh can be enabled by navigating to Target packages, Networking applications, openssh. It is probably going to be very hard to get this working without a monitor on the Pi. You don't need to use it in the final version, once you get ssh working, but it's going to be really hard to diagnose startup issues without a monitor. Buy yourself an HDMI cable or a HDMI -> DVI converter, and use the local console. 

The UPS you chose doesn't list their exact times, so there's no way to calculate how long it will last under a given load. I'll run through the calculation for a couple different UPSs, so you can repeat it on one of your choice. I'm going to use this UPS, which has a similar wattage rating as the one you chose: CyberPower EC650LCD ECO 650VA/390W. The specs on that page list the following: