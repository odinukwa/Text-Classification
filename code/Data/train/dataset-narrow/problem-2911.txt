Agent Knowledge When the agent first enters the map it only knows the amount of doors in the room, and the id of the room it's currently in. I needed to create a structure that would store information the agent had learned such as which doors it had not been through, and where the doors lead to that is had been through. This class represents the information about a single room. I chose to store the unvisited doors as a and the visited doors as a , where the key is the door id and the value is the id of the room it leads to. 

It looks like you're missing a separator character in your dependency options, glut32.lib and kernel32.lib are separate libraries. If you open the additional dependencies window, every entry should be on a new line. 

It seems to me that it would be easier to bypass this and simply consider data sent to the vertex shader/pixel shader as a block of floats and allow the vertex or pixel shader to interpret it as it wants. My question is this: 

Each state needs to check if any relevant events have occurred. Typically this is done with if statements. 

Here is an example program that draws a line to a window using the cross platform library Qt. Includes have been omitted. 

A visualisation of a minimax decision tree (from the wikipedia article). Down the left hand side is the turn number. The leaf nodes each have an evaluated score which is fed back up the tree to make a decision. however draughts is the game with the highest branching factor that has been completely solved. 

I agree with Daniels answer, in that iterating through large amounts of boxes is the most likely cause, and that by using spacial partitioning you could speed the game up a lot - but the problem could also be elsewhere, and you could be wasting your time. In order to increase the speed of your game significantly you need to profile your code. Identify where the bottleneck is, this will allow you to make the biggest improvements. There are lots of ways to profile your code, you could roll your own performance analysis class (which could make use of the Stopwatch class (MSDN)), or you could use PIX to get a general idea of how busy the CPU/GPU is. You can also put PIX event markers in your code, which will show up as colored regions in PIX's readouts. There isn't an official C# interface to these functions, but this thread shows how you can make a C# interface yourself. 

For tutorials I have once found an entire tutorial, how to script a unity3d rpg game in C# from scratch. 

I have two methods; One uses a shader, the other one could use a GUI. Both will start the same: "Simplified" - Shader will give more realism, you can apply a distortion Like This one Fog Like Com. Boy stated, can be applied through GUI. Create a photo, with a partial transparency and use it as GUI on the entire camera view. For the photo you supplied I would try a brown colour. This has been used in a horror game called Drea D Out. If the player approached a ghost, the screen would turn foggy. Although it wasn't used under water it gave a similar effect :) You can always choose both methods, or make a shader that would change the colour. 

I haven't gone deeply into server programming, but as the matter of fact, I was close to choosing the Unity+Photon Cloud engine solution for my MMORPG project. (HeroEngine won) The server side is done in this one in C# and one thing I strongly remember is the way things were explained in the tutorials. 

There are plenty roles in Gamedev. business, each role splits at least into a dozen, if you want to work at some company as a game developer here are some roles you can pick: 

Good luck EDIT: I have missed the part where you wanted to make an "Animation", so if you want to move your character around you should use the physic vector3 functions that I mentioned before. In case you meant playing back a pre-made animation from some external 3d graphic program you should take the animation from the project view drag and drop it on the item that is supposed to be animated. The function is called Animation.Play 

That is a question for the "What If Machine" from Futurama unless they officialy say it somewhere you can never tell. From what I would say it might have been chosen due to the fact that Java is cross platform and it is very easy to install it on Windows, Mac or Linux. The second reason; the reason I would choose, is the fact that he must have had previous experience with Java. He said that he had worked for king.com. Here is the possible explenation. So from what I understand, he simply dislikes C++. 

The market would be reset every few space travels. With various commodities added randomly. In the top left corner of the map. There has been the most remote station Talidor. Lets say, it has been the only place where you can buy the "Talidor Tonic", it's price would be approx 2k in that station. The approximation would be completely random (I think FishLabs made it +-7% of the initial item value) to give the player a feeling of reality. The Tonic's price is highest in the other corner of the galaxy on Ni'mrodd 9 solar systems away. Where the price would be much higher, Lets say, for instance 190% of the initial cost making you earn 1800 credits from each Tonic you sell. If I were to set up that system I would make one, or more "production" sites, and the further you travel the more +X percents you will get to the items value. Talidor: 2000; Ginouya: 2200; Eanya: 2400; (...) Nimrodd/Meenkk: 3800 If you feel strong, you can also make more "production sites" which would change the items value using the simple arithmetic mean, using the same method as before "The more times you have to travel, the more the price will rise". All the values, along with the % the item will rise every time you move up the map can be reset every few travels. 

The boards representation in memory will be probably one of the first things you will consider. This link presents one way to represent the board and may be useful in general. In most cases it is not so important as to the specific board storage mechanism used as it can be abstracted away. One way to do AI would be to use the minimax algorithm to look a few moves ahead. You'll benefit here if you kept your worldstate separate to rendering, input etc. 

Assuming I were to develop a graphics engine for a modern PC game that used only DirectX or OpenGL, which techniques could I use to make sure it ran quickly? Edit: I'm looking for any approaches that I could take that would result in a speed increase. By graphics engine I mean general purpose graphics engine - such as the one used in Unity or Ogre3D. 

Expanded: You can use the rand() function to generate random numbers. You could use these random numbers to set the position/health points or any other attribute or your enemies. As for saving the enemies data (I'm assuming you just mean store the variables, correct me if I'm wrong) you need to store the data in an array or list. This can be done in many different ways. If your enemy is a C-Struct then you can store your enemies in a plain C-Array. If your enemy is implemented as an Objective-C class, then you can store your enemies in a NSArray class (such as NSMutableArray). 

The quote above is from the Unlimited Detail Technology Site My question is: Does this unlimited detail technology actually exist? And if it does, why isn't it currently being used in games? Other references to the Unlimited Detail Technology: 

Any modern Mac that runs Snow Leopard is adequate for 2D games development. There's nothing particularly hardware intensive about 2D game development for iOS. The most intensive things you will be doing is compiling your code and running the emulator and debugging tools - my Mac Mini did all of these tasks with ease. The iPod touch is sufficient for testing games destined for the iPhone. The devices have the same screen resolutions, CPUs and iOS versions. The latest iPod Touch does have less memory than the latest iPhone (256MB as opposed to 512MB) so this is something you should be aware of. 

There are many ways to achieve this. Here's one way, which should be easy to make work with your existing code. Create a Transform and make it a child of your player character. Position it where the attack lands and then add it as a public Transform of the PlayerAttack script. Let's call it attackPositionTransform. Now in your MeleeAttack function, you can compare the position of the attackPositionTransform with the target. 

Probably even if you wanted to make games for IOS, Microsoft/Bill Gates would not get upset as those apps require the Kinect Sensor which they produce... But from what I've read kinect is also available for Windows applications as the Kinect for Windows, it is about 20% more expensive but it is legal to use it on your pc. You can make any application you want. But you are not allowed to encourage people to use the Xbox Kinect sensor on your Windows apps, instead they should require a Windows Kinect sensor. $URL$ $URL$ Paragraph 1) b. of the end user license agreement has the answer to your question. 

I have always wanted to put on the "3d glasses" and instead of watching a 3d movie, go to my pc and play a game in real 3D. Has anyone ever tried creating a Real 3D game? Are there any shaders that would allow creating Anaglyph 3D effect in real time? How do they work? (If they exist) 

Or other fund raising platforms that give you the ability to gain money from a large range of future customers. You sell the product, before it is made. Read the Kickstarter.com FAQ for the way it should be used. It is not actually a grant, but suits your needs. Because you are given a "Grant" by the community, if you get enough people to sponsor you. It is either, all or nothing. If you set a goal of $1,000,000 and you after a chosen period of time. you wont reach your goal you will not get any money. If you exceed your goal you will get the money -5% Kickstarter payment. 

I posted the overall stuff you might need to know to find yourself around the game creation process. There are more engines as the Tourque 2d, more software to use like the Allegorythmic Substance creator for smart textures, or the 2d Illustrator. But I hardly believe that anyone would be able to master everything at once, so check out what suits you most and then go deeper into the rabbits hole. Whether it is the gamedesign, story/code writing or art design - You have to choose 

Ok, I can tell you that I had access to the opensource wow server code, and the worst thing for me was fixing the loop holes which gave some not "noon programmers" the ability to manipulate packets, the unofficial opensource servers have thousands backloops and they do not check the packets. On contrary I am sure that you wont do any harm to anyone, because an advanced skill in programming to do such stuff. And in the question you haven't mentioned networking which is all about handling packets. That is how wall hacks work, speed hacks if the server allows something and it will not have a bottlecap of some sort, there is no reason why the hacked client shouldn't send 10x more packets that are responsible for player forward movement. So in this case the player would be able to move 10x faster. Keep in mind, that tinkering with somebody's server will get you into trouble. In the civilised world you are not allowed to do harm or manipulate data without the owners permission. (Applies to DDOS attacks too). All the incomming packet data, that exceeds the norm is logged in 95% of sittuations. And the player who does that gets a permanent ip-ban. Search google for "packet manipulation methods". Still, if somebody wants to go work as an "anti hacking programmer" this is the perfect way to learn about it. And never do it on somebody's server because I can tell you that it is extremely hard to avoid getting your actions logged. If you do it on somebody's server you will most likely be banned from the server and you might even get a real life "ban"... 

Notes The backtracking isn't very efficient - in the worst case scenario it could go through every room to get to an adjacent room, but backtracking is fairly rare - in the above tests it only backtracks three times. I've avoided putting exception handling in to keep the code concise. Any comments on my Python appreciated :) 

If you need certain sprites to move between tiles smoothly such as bomberman himself or sliding bombs you could store an additional offset as a float. 

I would suggest doing this manually in software like Photoshop. In Photoshop there's a filter called offset which scrolls the image by the given amount of pixels. If you offset by half the images width and half the images height you'll see the seams in the middle of the image. You can then alter the image until the seams are no longer visible. When you've done that, use offset again to make sure you haven't created any new seams. This tutorial may be of help. 

(iCols - 1) would be 9, so it's not going to address the last vertex (10). I think to fix the problem with columns you should remove the -1. To fix the problem with the amount of rows change 

All files in the Resources folder exist in your built application (regardless of if they are used). This allows you to load them as needed with . I believe Unity made the decision to prevent files in Resources being built into sprite-sheets because there would be two copies of the same sprite in the built app (which is wasteful). This answer on the Unity forums uses the same explanation: $URL$ 

To reduce the amount of statements you have you need to make your solution data-driven instead of manually adding logic for each UI component that needs to interact. You could do this by storing your buttons data (such as each buttons bounding box and state) in an array of structs or a NSArray (or NSMutableArray) of classes. Then when you receive a touch you just need to iterate over the list to see if any touches are inside the bounding box, if it is then update that objects texture. To keep track of touches across their lifetime I use a single NSMutableDictionary with the touches pointer as its key and a custom class as its value. This allows me to store information per touch (such as if I've already handled it) and react to touches that are held and not moving.