Since overriding a method mean "redefining" his behavior, if you call the foo method from your custom class extending ParentClass it will (in this case) not do anything. If you want to reach a method from a parent class, use super. 

And then add a kind of listeners system that would listen for mouse events (look at the Slick2D API to learn about catching mouse events) and proceed the registered buttons to see if one of them was clicked. Then a button could be defined like that: 

You will never stop decreasing your enemyLife variable since test1int < 10. Here is a more natural way to do what you want: 

Get the position of the mouse cursor Get the position and size of your sprite texture ( has a very handy propery that does just that) 

You should read about tiled maps, tiles and tilesets. Your tiled map is a grid. It's simply a 2D array where each element of the array is a tile. Using a 2D array in this case seems perfect since you can easily access a tile at a given position by doing . Now you need to define a way to represent the tiles of your map. Here come the concept of tileset. A tileset is basically an image containing a collection of tiles, here is an example of a random tileset i picked on the internet: Since you know that the tiles of your map will always have the same dimensions (16x16, 32x32 etc.), you can easily extract the tiles from the tileset and assign an id to each of them. The first tile in the tileset could have the id 0, the second one, the id 1 and so on. Then, why not do something like to get actual tile's image? This way, your map could be a 2D array of integers representing tile's id. When creating your map, you will need to link your map array with the tileset(s) used to render it. If you decide to use frameworks such as Slick2D or LibGDX, they often have build in facilities to manipulate tiled maps. Plus, some tiled map editors exists: 

What you can do is create your tiles indiviually and then pack them together using TexturePacker. From the provided link: 

Do you really need the actual size in units? I mean, you can use the scale of your game objects to scale them up and down to create realisitics size relations between your objects. If you are creating your own 3d assets, you might want to handle the size of your models directly in your 3d model creation software and leave the scale to 1 in Unity (for instance, this thread explains how to set up 3ds Max to work with Unity). Finally, a GameObject does not really have a size itself, however, a mesh does. If your GameObject has a component, you can get the mesh axis aligned bouding box with Mesh.bounds (or Render.bounds) that will give you a Bounds object that contains useful data like the size of the bounding box. If you want to show it in the inspector, you might want to extend the editor to display anything you want from the previously requested object. 

The method foo is override in a custom class that probably extends another class (or implements an interface but in this case you have to override all the methods of the interface since they are abstract. Read more about interfaces here.) that contains a foo method itself. 

I'm trying to implement the broad phase of my collision detection algorithm. My game is an arcade game with lot of moving entities in an open space with relatively equivalent sizes. Regarding the above specifications, i decided to use an uniform grid for space partitioning. The problem i have right know is how to efficiently choose in which cells an entity should be added. ATM i'm doing something like this: 

Since the above GUI's use OpenGL for rendering, you can render them in the OpenGL context of your game for example. A lot of others GUI's exist for many others languages and using differents technologies. 

Commenting this like make the problem disappear. My question is then why? Is there anything special to do after calling this function to do 3D? Does this function alter the render part, the projection matrix? 

The game is starcraft, the purple substance is called creep. How this kind of substance spreading would be achieved in a top down 2D environment? Recalculating the substance progression and regenerate the effect on the fly each frame or rather use a large collection of tiles or something else? 

Actually i tested my game with ~150 bodies and i have a 60fps constantly on my computer but not on my mobile (android). The FPS drop as the number of body increase. After having profiled the android application, i saw that the took around 8ms in CPU time to execute. Here are few things to note: 

What i'm trying to do is to draw a 3D shape (in my case a quad) and i 2D image. I found this example and i took the code from , and to load and render a 2D image. Here is how i load the image. 

I'm working on an action game and i use box2d for physics. The game use a tiled map. I have different types of body: 

What I would do is represent the event triggers as entities in my game. This way you can add event triggers on your maps with tiled as you would do for regular entities. Let's take the example of a really simple event opening a door when the player walk on the trigger (collides with the trigger entity). So at this point you should have a collision system notifying when two entities are colliding. Once you know a collision occurred between your player entity (or whatever) and the event trigger entity. You can fire the event linked to this trigger so it can be processed by the relevant systems. So my event trigger would be composed of two components : 

What you are looking for (i guess) is a technique called raycasting. Good examples of the use of raycasting is of course the Doom series or Wolfenstein 3D. Since it's not used that much anymore (for rendering at least), i'm not sure if you will be able to find a library/engine that would do this for you out of the box. You may have to do it yourself, what you want to pick then is a standard rendering library such as SFML, SDL etc. The process of raycasting is very simple. If i would have to recommend only one reading about raycasting i would choose this one. 

In fact, you can have several events occurring between frames and the way you are doing it, you will only handle one event per frame because you call the function once. To proceed all the events in the queue, you have to loop on returns 0 (no more event in the queue). So just to explain a bit more, if you have 15 mouse dragging events from the frame N, with your code, you will handle one of them. Then, in the frame N+1, you could have a mouse click event, it will be added to the queue after the 14 remaining dragging events. So you would need to wait N+14 to see your click event handled. So i would say, replace your statement by a statement. EDIT: it doesn't really answer your question since i don't tell you how to filter events but it's not the cause of your problem. 

You may want to create a body for your player entity which will contain a main fixture having the following polygon as shape: 

There is even an overload allowing you to pass a default value in case there is no such key, which is really convenient right? 

Your question is more about programming and not necessarily related to libGDX, you could implement it plenty of ways. Using an if statement like this could definitively works but it might seems a bit ugly. Fortunately, libGDX provides a way to create code that fits UI creation and you should use it, it's called scene2d you can find the documentation here. And you don't even need to create your actual menu from scratch since libGDX also provides out of the box actors to build user interfaces: $URL$ Your sliding menu could then be an that you may translate in a direction or another on top of your game state to create the desired effect. 

With the new libGDX tiled maps implementation, you need to request the concerned layer before being able to request for a particular tile. So: 

First, are you really sure to understand the concept of of Slick2D? If you are not sure about it, here is a good introduction. From here i see two potential ways to load your assets before running your game. 

I'm wondering what would be the best way to use it in a game? Is there tools to create a font from this image? Do i have to code it myself? I think of using this only for area with few text (like menus) so maybe a simple system converting a string to a sequence of image representing letters would be enough and it's not worth trying to use a complex font system? What do you think?