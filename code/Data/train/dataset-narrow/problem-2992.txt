I would begin with the following factoid, which is an adaptation of the blurb I've used pretty successfully as a hook to get my students (grades 9-12) to sign up for my processor class: 

In the lectures prior to this lab, we cover the coin problem, the axioms themselves, some of the derived properties of the axioms, bits, trits (including the Soviet Setun computers), nats, and Hartleys, how much information is present in random and constrained events, the concept or entropy, and how to calculate the storage requirements of a theoretically maximal lossless data compression given some set of rules. In covering the coin problem itself, we actually visit it three times, spread out among the lessons above. At first, I simply introduce the problem and have the kids try to solve it for some small numbers of coins. Later, we revisit the coin problem and show how we would solve some larger problems, and draw some generalized conclusions from these solutions. Finally, at our third visit, we derive a generalized algorithm for what steps you could use to figure out a next optimal weighing. The Lab The lab is in Scheme, and asks students to create a function that provides the proper weighings to solve a game. The entire lab write-up comes in at a whopping 8 pages, so I won't put that all here, but this is the opening that describes the problem: 

It is achievable It is. It's not easy, but it's possible to get kids really excited about learning all sorts of things. If you watch some videos of amazing teachers (YouTube is an incredible resource here), you can watch this motivating work taking place at every grade level and in every sort of classroom imaginable. Learning to apply these ideas to your classroom is hard. Watch an amazing third-grade music teacher, and then watch an amazing 11th-grade math teacher, and their practices will seem very different at first glance, but the core underlying ideas are actually the same. 

I will have my new incoming CS freshmen (HS) for a week-long summer orientation in August. The kids don't know each other yet, so Ice Breakers are in order! Has anyone encountered fun, physical CS-themed games for helping kids to loosen up and get to know one another? Criteria: the students are not required to come in with any background, though they will be learning some very basic programming concepts over the course of the week that we see them. Ideal games would either directly expose kids (in a non-technical way) to CS concepts, or could be referenced later (days, weeks, months, or years) in lessons to help explain concepts down the line. Answers where you have direct experience with the game (and can vouch that it is fun!) are doubly appreciated. 

Don't be dishonest with your students or try to hide your lack of background. There will be moments that you come up short, and your honesty and forthrightness from the start will help to mitigate any loss of trust that students might feel when this happens. Find several great resources. Do not depend on one resource to give you the sort of thorough understanding you need to do this well. A strong textbook is great, if there is one to be found, and can help you both understand the material and sequence your lessons. However, single-source preparation leads to two problems: (a) your understanding will be brittle, and you will be left with only one way to explain a concept when students are lost, and (b) it will be very difficult to deal with questions, particularly from your brighter students, that go off-script and try to connect with outside ideas. In my best situations, I will have a textbook, a tutorial series (such as might be found on YouTube or a website somewhere), some exercises to work though, and a tutor to help me when I get stuck. SE can, itself, act as the last two of these for CS topics in a pinch, though it is not as good of a tutor as an actual tutor, who will build a dialogue and set of understandings with you over time. Use the lesson planning itself as your final preparation, in which you summarize the key understandings and design exercises to help your students fill in the dots. Over-prepare your lessons, because your instincts for how long the material will actually take to cover are not yet honed. (I once prepared what I thought would be 3 lectures, and ended up delivering it as 1 lecture because things went extremely smoothly. At the end of the hour, ,I arrived at the end of literally all of the material I had prepared. The students enthusiastically told me that the lesson had made a lot of sense. "Great," I thought, "I'm glad that made sense to the students, but what in the world am I going to do tomorrow??") When students ask interesting, tangential questions, don't be afraid to reply by asking if they would be willing to research it a little and report back to the class next time. It is important that not every student question become a major research assignment for you. Instead, choose your battles carefully. Burnout is a real danger, and your time is valuable. You have made a pact to help guide students through the main topic; don't get caught up in too many tangents on your first pass. If you're really caught for time, you can simply present learning materials and ask students to work together to try to make sense of it. Be careful not to do this too often, because while this technique can work reasonably well for your high-fliers, it does not leave you in a position to guide and help the students who really struggle. Accept that this is an imperfect business. You will mess up from time to time. You will make mistakes. You will arrive at a lecture feeling prepared, receive a student question, and suddenly realize that you don't understand something that you thought you did. You may even discover that something you taught was outright wrong. Be prepared to go back to the class and revisit an idea if you screw up. But also, be prepared to forgive yourself for some amount of weakness. You are an imperfect being trying to build a learning opportunity for your students, and all you can do is try your best.