This problem has been studied at least for paths. The problem is NP-complete for any $n \geq 2$ (see for example this). It is know that the problem is hard even for very special graph classes. For example, in the case $n = 3$, it is NP-hard for cubic planar graphs of girth 3. On the positive side, there are constant-factor approximations algorithms, at least for some special cases. 

If I understood your question correctly, you want to know whether every tree $T$ is the clique tree of a chordal graph $G$. In this case, the answer is yes. To see this, take the family of subtrees being the set of vertices and the set of edges of $T$. To see that the vertices of $T$ correspond to the maximal cliques of $G$, notice that for each node $C$ of $T$ there is a subtree $T_v$ corresponding to it, hence $v$ is a simplicial vertex on $G$ and cannot be adjacent to any other vertex non-incident in $C$. 

Haven't found the flaw in the question about maximum weighted cycle cover, which doesn't appear to be affected by the above. 

EDIT this got 'fixed' on graphclasses, as per answers/comments, so you might not reproduce it, unless you have their earlier database, which is publicly available via sage - $URL$ 

Crossposted from MO. (edge) colored graph isomorphism is GI which preserves the colors (of edges if it is edge colored). There are several reductions using transformations/gadgets of (edge) colored GI to GI. For edge colored GI the simplest is to replace colored edge by a GI preserving gadget encoding the color (subdividing edge enough times is the simplest case). For vertex colored GI, attach some gadget to a vertex. Suppose GI is polynomial for some graph class $C$. 

Express powers of $2$ in unary via $B_0 \to 1, B_{2^n} \to B_{2^{n-1}} B_{2^{n-1}}$. We have $|B_{2^n}|=|B_{2^{n-1}}|+|B_{2^{n-1}}|=2|B_{2^{n-1}}|$ This is bounded by the largest $x_i$. Add non terminals $X_i$ corresponding to the values of $x_i$ (after writing $x_i$ in binary) s.t. $|X_i|=x_i$, i.e. to express $x_i = 8 + 2 + 1$ add $X_i \to B_8 B_2 B_1$. Express the powerset of $X_i$ via the productions $P_1 \to \epsilon | X_1, P_n \to P_{n-1} | P_{n-1} X_n$ Set $S \to P_n$. 

I don't think this value is well defined the way it was posed, since there is always a drawing where an edge cross every other, but if you restrict the problem to linear drawings, then you have the maximum linear crossing number. This page of Douglas West relates this parameter with other parameters involving crossings. I think it can be useful. 

In there, many characterizations of clique graphs of specific classes are given. For example, it is mentioned that the clique graphs of chordal graphs are the dually chordal graphs and clique graphs of proper interval graphs are also proper interval graphs, and not trees and paths as you supposed. 

Concerning the third question, triangle-free graphs have $\Delta^i(G) = \Delta(G)$. From Turán's theorem, we know that the maximum number of edges on a triangle-free graph is $\big\lfloor\frac{n}{4}\big\rfloor$, and this bound is tight for the complete bipartite graph $K_{n/2,n/2}$. Hence, at least in this case, you can have a dense graph with a large independent node degree, namely $d^i(v) = \frac{n}{2}$ for all $v$. 

I think you can solve this as a single shortest path problem with respect to arc weights $$\overline{w}_{ij}=\min\{-w_{ijp}\ :\ p\in\{1,\ldots,m\}\}.$$ For every arc $(i,j)$ fix some $p(i,j)\in\{1,\ldots,m\}$ with $-w_{ijp(i,j)}=\overline{w}_{ij}$. If you have a shortest path $\pi$ with respect to $\overline{w}$, you can put $$y_{ijp}=\begin{cases} m & \text{if }(i,j)\in\pi\text{ and }p=p(i,j),\\ 0 & \text{otherwise.}\end{cases}$$ For the $l$- and $z$-variables you do the following. If $(1,j)\in\pi$ is the arc leaving 1 then $$z_{1q}=\begin{cases}m-1 & \text{for } q=p(1,j)\\ 0 & \text{for } q\neq p(1,j)\end{cases}$$ $$l_{1q}=\begin{cases}1 & \text{for } q\neq p(1,j)\\ 0 & \text{for } q= p(1,j)\end{cases}$$ If $(i,n)\in\pi$ is the arc entering $n$ then $$z_{nq}=\begin{cases}0 & \text{for } q=p(i,n)\\ 1 & \text{for } q\neq p(i,n)\end{cases}$$ $$l_{1q}=\begin{cases}0 & \text{for } q\neq p(i,n)\\ m-1 & \text{for } q= p(i,n)\end{cases}$$ If $(j,i)$, $(i,j')$ are two consecutive arcs of $\pi$ then you put $l_{ip}=z_{ip}=0$ if $p(j,i)=p(i,j')$, and otherwise $$z_{iq}= \begin{cases} m & \text{for } q=p(i,j')\\ 0 & \text{for } q\neq p(i,j') \end{cases}$$ $$l_{iq}= \begin{cases} m & \text{for } q=p(j,i)\\ 0 & \text{for } q\neq p(j,i) \end{cases}$$ And LP duality tells you that this is optimal. 

Stating the title in another way, how to convince a strong applied CS department that a theorist would be a better choice than one more applied computer scientist? I understand that it is natural for a applied department to want one more expert on a specific field. On the other hand, diversity is important and I think the importance of a theorist goes beyond better theory courses. What is the importance of a TCS researcher in a mostly applied CS department? 

I think the $k$-clique cover problem, which asks whether there exists a partition of the vertices in $k$ sets such that each set induces a clique, has the desired properties. Clearly, taking induced subgraphs can't make the minimum size of such partition increase. On the other hand, when you take the disjoint union of two graphs, you have to take the union of the partition into cliques of each one. 

Cubic graphs are graphs where every vertex has degree 3. They have been extensively studied and I'm aware that several NP-hard problems remain NP-hard even restricted to subclasses of cubic graphs, but some others get easier. A superclass of cubic graphs is the class of graphs with maximum degree $\Delta \leq 3$. 

Crossposted from MO. Wondering about the existence of graph gadget related to coloring (or 3-coloring) odd hole free graphs. Let $G$ be simple $k$-chromatic connected graph with two vertices $u,v$. Is it possible $G$ to satisfy: 

MAX-CUT remains NP-complete. Lemma 3.2 simple max-cut is NP-complete in the following two classes of graphs: graphs not containing cycles of length at most $k$, for every $k \ge 3$. They are subdividing an edge twice. From "MAX-CUT and containment relations in graphs, Marcin Kaminski" 

The Unique SAT problem (USAT) is to determine whether a given formula has a satisfying assignment, when we are guaranteed that it has at most one satisfying assignment. By a theorem Valiant-Vazirani there is probabilistic reduction from 3SAT to USAT. Given 3SAT formula $\phi$, over $n$ variables, the algorithm produces $n+2$ formulas $\phi_i$ with the properties: if $\phi$ is UNSAT, all $\phi_i$ are UNSAT. Otherwise the probability that $\phi_i$ has exactly one solution is $\ge \frac18$. $\oplus P$ is the class of decision problems solvable by a nondeterministic Turing machine in polynomial time, where the acceptance condition is that the number of accepting computation paths is odd. Since USAT has zero or one solution, $\oplus P$ solves USAT. 

In the context of scheduling maintenance jobs on arcs of a flow network I came across the problem to schedule jobs, indexed by $j$, and given by triples $(r_j,d_j,p_j)$ of (integer) release time, due time and processing time such that the total time in which no job is processed is maximized. A schedule is given by start times $x_j\in S_j:=\{r_j,r_j+1,\ldots,d_j-p_j+1\}$. For instance, for five jobs with $(r_j,d_j,p_j)$ equal to \[(1,3,3),\ (20,22,3),\ (10,11,2),\ (1,18,5),\ (8,26,5)\] and a time horizon of 30, the first three jobs are fixed starting at times $x_1=1$, $x_2=20$ and $x_3=10$, and for the last two jobs it is optimal to start both of them at the same time $x_4=x_5\in\{8,9,10\}$. The objective value (number of time periods without any job) is \[30-3-5-3=19.\] The straightforward binary program for $n$ jobs looks as follows ($y_t$ is the indicator variable for the activity of the "plant" machine suggested in the comment by András Salamon) \begin{align*} \text{minimize}\ \sum_{t=1}^Ty_t&\\ \text{subject to}\qquad \sum_{t\in S_j}x_{jt} &=1 && j\in[n], \\ y_t-\sum_{t'\in S_j\cap[t-p_j+1,t]}x_{jt'} &\geqslant 0 && t\in[T],\ j\in J_t,\\ x_{jt}&\in\{0,1\} && j\in[n],\ t\in S_j,\\ y_t &\in\{0,1\} && t\in[T]. \end{align*} Here $J_t=\{j\ :\ r_j\leqslant t\leqslant d_j\}$ denotes the set of jobs that can be "active" at time $t$. Interestingly, the constraint matrix is not totally unimodular in general, but the LP relaxation seems to have always integer optimal solutions. Writing down the dual also yields a problem which can be interpreted combinatorially, but so far I haven't been able to turn this into an integrality proof. One can look at variants of the problem where the number of jobs that can be processed simultaneously is bounded, or there is a given partition of the job set such that no two jobs from the same part can be processed at the same time. Has this kind of objective function been studied in the scheduling literature? Or is there any other related problem?