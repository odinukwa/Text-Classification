Use caution in assigning an instance of the class as a static member as concurrent access to its operations can cause contention and consequent poor performance. A pattern I like to follow to ensure random instances are seeded uniquely is to have a package level static random member for seeding instances. This still risks contention, but limits the surface area for it to occur in. For simple gaming purposes the 48-bit seed of will suffice, but using will provide a better source of entropy: 

Using two arrays to express an array single objects is unnecessarily complex. Conside creating one array of objects: 

The following should read a hex string such as into vector . I was unable to find any built in method for doing this. 

Event Handler - You've attached the event listener to the document which is fine, but you've used an Id selector to filter it to. There can be only one element with in the document referenced by that Id.1 Unless the #updateBtn element is expected to be destroyed and recreated during the documents lifetime, it would be better to specify that element explicitly. Unused Variable - The variable is never referenced after it is instantiated, remove it. Improper Scope - The variable is pushed to, but never read from. If it is to be useful to other code it will need to be moved out of the event handler's scope. The variable is never used at this level of the scope, move its declaration to the narrowest scope required. Exactly One - According to the HTML snippet you've provided, the contains the which forces me to assume means there will be only 1 . Update the markup to indicate this element is special by setting the instead of the attribute. Because we expect this function to be invoked once it can be flattened into the parent scope. Parameters - JavaScript does not allow functions to be overloaded by parameters.2 the and parameters are never used and can be removed. Parameters are essentially variable declarations and should be named accordingly. would be better named . Type Variance - is originally instantiated as an empty array, but you're now adding a string to it. I'm not sure what your intent is, but the effect will be to cast the empty array to an empty string and append . This is only being done for the 0th element so a simple assignment will do. Wait, what? - First, nearly every string literal in your code is enclosed in single quotes ('). Suddenly you've begun using double quotes ("). Javascript will allow either, but keep your code consistent. I'm not sure what the purpose of the method call when your arguments are the full length of the string. this can be removed. Commented Code - Remove code that is unused. Only comment out code for the purposes of debugging or experimenting and remove the comment (and code if necessary) when done. Alert - should not be used for debugging purposes. Use the console methods , , , , etc.. JSON - JSON is a format used for serializing data. It should be used to save, restore, and transfer data. Your code should never manipulate JSON directly. Instead use the objects serialized from the JSON string. 

If your shuffle method and random source are fair, than one shuffle is actually better than more -- you're skipping over entropy and risk introducing bias. If either is not fair shuffling more will not make them fair. 

No. This is not a regular grammar. Regular expressions are not the right tool for this job. Check string length and for the existence of character code points within each of the necessary ranges. Better still, follow the other suggestions to push for a more legitimate password complexity algorithm. I'll let someone edit in the appropriate and obligatory xkcd and stock overflow references. 

Second Javascript is a truthy language, and are considered false. Your and my method can go away entirely with a simple . If the property is undefined or evaluates to a falsy value, then it will not execute the block. Again in this section, is a poor description of what we are expecting. Consider using a more descriptive value such as . There is no need to at the end of the function -- You've modified the objects that were passed in. Consider the following: 

Encapsulation and create an unnecessary requirement for the consumer to manage the state of this objects connection. These methods should be made private and used internally by the object. Furthermore, database connections use unmanaged resources which need to be disposed of properly to prevent undefined behavior and memory leaks. I would reccomend creating a private method and return the MySqlConnection directly. It can be put into a block to ensure it is properly disposed when no longer needed. should not be public. It changes the state of the object, but there is nothing which can be done externally to capitalize on the changed state. Other does not need to be initialized to a , as it is over written later when you does nothing useful as written. All of the objects created in this method are abandoned as it returns . Ideally it should call and then operate on the DataTable that is returned. This function really doesn't seem to fit with this class at all -- It would work better in a DataTableAdapter class or as an extension method for a ComboBox 

While I would argue with that your implementation of is a non-in-place implementation of the Fisher-Yates shuffle, I would prefer to be more concise and use the base library utility method: 

I would agree that your implementation is quite readable. Indentation and white space are consistent. The variables and operations are named clearly and concisely, with the exception of 'getNextCard' as noted by '200_success'. This allows us to focus much more at the low level nuts and bolts of your code. 

Then use the actual objects from the rows array if being consumed in other javascript code or send the rows JSON to wherever it is consumed. If for some reason your consumer cannot be modified to use a proper object and relies on the broken JSON string originally in the method, change to . 

However, you are not actually using the month names anywhere in your code, so removing the months array and leaving the daysInMonth array may be more succinct. getMonthData() Convention would imply that a method beginning with should return something. In your existing code, you have assigned values to local variables and , but done nothing with them and they will be lost when the scope leaves the function. Referencing and without ever having instantiated them is opening up yourself to bugs. A newly constructed object should always be in a valid state. Consider assigning defaults to these values in the constructor or having a like parameter passed into the method. Finally Dates and times may seem easy, but they truly are a hard problem to get correct. Consider using a quality library such as moment.js to handle any Date/time needs which are not handled in the javascript specification.