If you wanted to minimise allocations, you could shift the definition out of the loop and replace its assignation inside the loop with . That way it can keep using the same heap allocation time and time again. But that’s an optimisation that is not necessary for something like this. I might or might not do it, depending on what I had eaten, if anything, for morning tea. Personally I think I’d go with instead of in this particular case, but that’s completely subjective. 

One must realise that in these common tasks that people tend to assume must succeed there are actually possibilities of failure. 

Expressed simply: testing your own code shouldn’t have any impact on the API exposed to library users. is already ; no need to wrap it in . should be rather than in most places. Basically, you should never need to clone the after the first time when you insert it into (to “remedy” that, you could use instead if you wished; not sure if I would or not). You’re doing a lot more memory allocation than is necessary. Unwrapping is undesirable. See if you can avoid it. can be rewritten thus (note how this also makes it only one lookup rather than two, so it’s faster as well): 

Making private fields public only for the sake of tests is undesirable; you should instead add new methods which are only available in tests, e.g. 

(Note: at present this actually doesn’t play optimally with using for as it requires you to clone the user ID every time you call rather than only the first time a user ID is encountered. RFC PR 1769 would fix that.) is unnecessary ( is in the prelude). shouldn’t be necessary; you don’t appear to be using any unstable features (mostly just benchmarking, really). Something to bear in mind: you’re locking the entire balances table to make any changes at present. This is probably undesirable. If you were doing this seriously, you’d be using a proper database which would take care of this stuff properly. Just thought I’d mention it. 

I am currently working with Vagrant for the first time, and therefore also working with Ruby for the first time. I have a specific hostname and IP address I would like set for my VM, both of which are stored in my hosts file. I would like to define the hostname in my Vagrantfile, and then have it automatically pull the matching IP address out of my hosts file for me. To do so, I have written the following code in my Vagrantfile: 

The following method is part of a class that imports zip archives, and part of that class's job is to verify that a given zip archive contains "complete filesets". A "complete fileset" is one such that, for a given file name prefix, there exists a file in the zip archive with that prefix and each suffix. There are always 3 suffixes and they are always the same 3. For example, say there are file names prefixes , , and , and the suffixes are , , and . Then the file names found in the zip archive should be , , , , , , , , and . This method is used to create the list of expected file names in order to verify that they all exist within the zip archive. Here is the method in question: 

Are and in separate files? If the shown code is a single file, then it will not compile as you cannot have 2 top-level classes in the same file in Java. Edit: Turns out it's fine as long as there is only one top-level public class. Otherwise, just a few minor issues that I can see. Diamond Operators You have used the diamond operator for and , but you should also use it on and . For example, instead of initializing like: 

But I'm still not happy. The regex don't need the around every word. Or at all. Basically, you could write both as this: 

Notice that you have to use instead if you are using this in JSON! As I refered earlier, I would review it as an object. 

As pointed out before, in a comment, non-magic methods in a class shouldn't be prefixed with . Since they are private, they are prefixed with . 

This could help a lot with any future class change. You repeat 3 times. This shows a little of misuse of the library, and you should be careful with this since it kills performance. Try to save it into a variable or chain it's methods, if possible. You have a "magic" number there! Imagine that now you want to change the width that the class it removed from 990 to, say, 1020. You can argue and say "I just edit it manually, duh!". Now imagine you have 300 lines of code and you don't know where it is and it's previous value. I recommend storing that value in a variable by itself. You can eliminate a lot of bloat by reducing duplicated conditions. You have the following code: 

Created a few variables at the top, with needed information. Created a loop to go through all the elements Reduced the number of local variable to the bare minimum Removed global variables being declared inside the function 

What did I say? Declare variables as close to where you will use them as possible. You should have this: 

Same goes with quotes. You have single-quoted and double-quotes strings everywhere! Just pick 1 style and use it! (My recommendation goes to single-quotes.) 

The name should, under Rust conventions, be . The macros could be written as private methods, and I tend to think that they’d be clearer thus. I would expect them to be inlined automatically, but you could mark them also; because of inlining, there will be no performance difference to the macros. wrapping is only needed to provide indirection so that recursive data types work. thus needs it, but doesn’t. Your implementation could (and thus should) be replaced with . You check if , but then report as the error that universe size must be > 2; the clause, however, would correspond to > 1. Now, concerning the equation; for starters, should be written as —superfluous parentheses hamper reading. But there is a more significant issue at stake: the actual equation being calculated. The comment gives this equation: $$2^{floor\left(\frac{log_2 x}2\right)}$$ But the code calculates this equation: $$floor\left(2^\frac{log_2 x}2\right)$$ These give quite different results; the comment would yield only powers of two, but the latter will yield all integers, and might as well be . I feel that would be clearer as , seeing as has already been asserted. In : would normally be nicer written as . One less indentation level, and a more natural way of expressing it. In : is being called quite a few times; it feels like it should be possible to remove some of them, but I haven’t thought about it much at all. 

HashMap has some really nice things for efficiency. Just as returned an in the previous point (which rendered the part superfluous), can use the Entry API to do less work: 

Secondly, you shouldn’t be using strings for this; you should be using paths, because that’s semantically what you’re dealing with. The easiest way to get a path tends to be to take a or a generic parameter implementing and calling on it; , , , and more implement it. You can get the base name from a with ; this admittedly produces a , so if you want to display the path you’d need to convert it back towards a string with e.g. . Anyway, the point of this latter part is just that for something that is semantically a path, you should be handling it specially, as a rule; a path need not be Unicode. Think on it more. 

This helps the code to be more readable and reduces the nesting level. Too many chained s and loops will cause your code to be hard to read. 

Still, there is no validation of the data. And there's no way to pick 0.5€ (50 cents). You should look into that. 

This code was written purely for fun, but that's not an excuse to write it poorly. Still, I feel that there's something to improve on it. Besides of any performance issue that there might be, and some readability crimes, what else can I improve in this code? 

You aren't validating your images properly! This allows me to send you an image file with a webshell. Something like this: 

The on the same line is target of discussion. In my opinion, it should be in a line on it's own but most people prefer this way. Other things like this: 

If you want to support older browsers, this is required. Otherwise, just ignore this, since all modern browsers support it. (Partially or completelly) 

Also, notice that when you use on an event handler, jQuery runs and . Depending on what you are trying to do, you should be careful when returning anything in an event handler. 

Notice something? The use of jQuery just to retrieve the value of an . Just remove the jQuery from there! has the same effect at a WAY HIGHER speed, without ANY bloat. You have it right a few lines below, and I give you credit for that. 

This part can also be used for the block. But a major concerning area is that regular expression. It is made to match newlines, the first and a space and . Here's my proposal: 

Line 5 where I am assigning works, however I am not sure if it is the right way to do it. It seems a little ugly and long. I was thinking that maybe I should not put the code block passed to all on the same line. Or is it even necessary to have 2 separate regexes in there? Can it be done in 1 step? It also seems strange to me that I need to add on the end in order to get the IP address string out of the array returned by . I feel like there is a better way to do this that I am missing. 

and similarly for , just like how you did for and . Favor interfaces over classes When you define your collections, you should use an interface instead of specifying a specific implementation. That way you can change the implementation easily. For example, you have done this for and , but you should also do it for , , and . should be defined as: 

and similarly for nodeDepth. Variable Names Some of your variable names are decent, such as and . They tell me what the object is used for as opposed to what it is. However, and could be better. What is a queue of? What is being stored in ? 

I was wondering if, maybe, there is a clearer or more concise way to accomplish this? I realize it can be done with a couple of for loops, but I would prefer using Java 8 streams, as I would like to practice and learn the API. Also, I'm not sure if "multiply" is the right thing to call this operation. Here is the unit test for the method if it helps to clarify the usage and intent: 

Based on what I've seen on Firefox 53.0.3(32-bit), on Windows 10, my implementation is around 5-20% faster most of the time. You can try it bellow: 

This won't be a very in-depth review since I don't know angular.js, and I will focus only on some superficial issues. 

It draws a 1-2 pixels high horizontal line, using the specified color. Some HTML engines and browsers use , others , others simply and others need the tag for coloring. And yes, using actually changes the color on some browsers and engines. Is there any other way to write this, but still keep it as compatible as possible with as many email clients as possible? 

As @Dan said, you are re-re-re-re-re-forcing jQuery to painfully look for the header, every time you scroll. Can you imagine how slow that is!? I will take @Dan's suggestion and change it a bit: 

You don't use the variable anywhere, besides in 1 method a few lines below. Instead of all that, you can chain the methods and spare a dangling reference later on. Something like this: 

These are easily fixable. Fixing this may solve some quirks when you spice up your page, in the future 

It isn't the prettiest thing on Earth, but may work for you. To call it, you don't have to change anything! Just remove that on . With some bitwise operations, you can cut down this code by a lot! 

First, you have that dangling . You are currently wasting too much CPU! You repeated 5 times! You have no idea how slow that is. Store that in a new variable. You could remove repetitions, like this: 

And to improve performance, you don't need the . It's a waste of time and CPU power. Also, why instead of ? And why not an array with these objects? I would rewrite the whole thing as this: