It still manages to handle values of , or in the tenths in the blink of an eye, but there has to be a better way for this. 

While they stayed in the language, and are therefore fair game, reading Guido's 10 year old essay on how he planned to get rid of , , and for Python 3 will probably have you looking at those a little differently: I for one always try to come up with more Pythonic alternatives when tempted to use them. 

If instead of raising an error you return without checking if the is indeed in the , things start getting interesting: 

You are building a lot of intermediate sorage that you don't really need, as you could simply iterate over both dictionaries simultaneously. Using the method of dictionaries (or if you are using Python 2.x will also save you a bunch of dictionary look-ups: 

While obviously doable, this reusing a list to make a linked list doesn't seem like a very good choice. It is very typical to use a dict of lists to represent a graph, rather than creating an explicit new class. And heaps also fit very well into a bare list with some helper functions, that's e.g. how the module is implemented. But in your case, while it would be ok for a quick and dirty implementation where you directly accessed and , if you are going to go through the trouble of writing all those helper functions, it is infinitely clearer to actually create a new that embodies the abstraction. 

Also, You should consider adding function and for Your library user not to mess with and directly and handle errors properly there. Generic rant There is a memory leak in Your example ;) 

Also, I would really comment parts like this. Doesn't exactly trivial to get, what's actually happening beneath. Generic On line #109 You have despite the fact You never use this value afterwards. Why wouldn't You use proper argument parser (i.e. usual ) instead of writing Your own cumbersome parser? You're not sanitizing any of Your inputs. I imagine this piece of code being used as a library. User of that library might pull his/her hairs off trying to debug his/her code and pin-point the location of some pointer being passed on. include is unused in Your code, as far as I see. Why would You cast pointer while the memory? 

Why would You put Your variable definitions all over place? It's messy. EDIT: I would debate that putting all the variable definitions on top of Your function body makes it waaaay more easier to read. Having in mind that functions must be short enough and with reasonable nesting. But yeah, that's debatable. Multiple exit points. This is one of the readability issues I personally hate the most. 4 statements in Your ? 3 in Your ? Really? Also, why wouldn't You reuse Your variable in Your function, if You still insists having multiple exit points? EDIT: More on multiple exit points --- one of the ways would be something like this: 

To move from the top left corner of an \$n\times n\$ grid to the opposite one you have to move \$n\$ times to the right and \$n\$ times down. So in total you will do \$2n\$ moves. If you could make those in any order there would be \$(2 n)!\$ ways of doing them. But you don't have that freedom, because the order within the movements to the right and within the movements down is fixed, e.g. you have to move from row 4 to row 5 before you can move from row 5 to row 6. So of the \$n!\$ ways the movements to the right can be ordered, only one is valid, and similarly with the movements down. Summing it all up, the closed form answer to that problem is: $$ \frac{(2n)!}{n!n!} $$ Unsurprisingly this is the same as \$C_{2n, n}\$, the combinations of \$2n\$ items taken \$n\$ at a time. You could think of the same problem as having \$2n\$ movements and having to choose \$n\$ of those to make e.g. the movements down, leaving the others for the movements right. With Python's arbitrary size integers you could simply calculate that as: 

As a general rule, a switch statement is a code smell. You are saying that a series of alternate steps need to be done, The only time you should use a Switch is when those steps are always the same. for example, switching on days of the week is fine. there will never be the need to add one. In your case, you might want to add additional products, so looping through a collection of actions is better. Then, in the case you need a new product option you add it to the list. e.g: (now this is a simplified pseudocode mish mash version guys, not meant to be code reviewed :P) 

If I ask you what this class does and your answer contains a string of ands,... it is doing too much. In this case I see about 4-5 tasks. Try looking at the SOLID principles and giving another go and dividing up your units of work. 

rather than iterating over , which creates a list of the lines in the file, we iterate over , which produces the same result, but as a generator, rather than first creating a potentially huge list of lists of strings, then converting it to a list of lists of ints, only a single row is instantiated at a time. 

How can you expand this idea to work on your possibly branched tree? Well, if instead of breadth first, you go depth first, you can recursively find out what the best diff and sum of weights down an edge is, and come up with a solution from there. This would look something like: 

Note that the tests, which all pass, run your test samples against the values returned by your code. So both this and your implementation agree, which is a good thing. 

Notice that there is a single division performed. Division and modulo operations are among the most expensive basic operations you can do on integers, so aside from the fact that this method is constant time, that time is likely going to be pretty small. To solve your original question: 

Yes, that is a bad idea. Think of it this way. Say you want to process 10 items with your reporter. 5 should notify, 5 should not. So what do you do? 

There is one problem you may face with that code, I did a lot of input work with XNA and you may find that getting the "down" keys is not actually what you want. it is not the same thing as the pressed keys, that will fire constantly as you hold the key, triggering a new event each time.E.g if you press a to open a chat dialog and a again to close it, just pressing the button once may trigger like 6 actual presses and flicker the popup. For getting the PRESSED buttons you would actually need to store the prior state of the gamepad and assert if it was not pressed last frame e.g 

In short the prospect of setting the highlight colour should not really be dependent on the raw values, and if indeed it has to be it should be done in a safe manner. as it is there are a number of way's to break your application some accidentally while developing others while using the application by passing invalid data. 

There may be some speed to gain, and a lot of clarity to lose, by using one of the dot product functions: 

Further optimizations would include allocating a single buffer of size at the top level function and pass it around to avoid repeated allocations, but that would probably take away from readability, so am skipping it here. 

There are cleverer ways of computing a quotient of factorials, but that is left as exercise. You also have to handle all the possible permutations with less than the full possible digits. There may be a better way of not having to brute-force your way through this, but I'm out of cleverness right now, so I am going to go with something very unsophisticated: 

This function returns the first position in which you could insert , and keep the sorted, which will also be the first occurrence of in if there are repeated values. The neat twist is that, by replacing a single with a you get the following: 

Naming You should consider renaming or removing Your function, all functions from Your library does have a prefix , and this one does not. Also, it's kind a misleading. For user of Your library it might look like something related to . What does , , mean? Please, consider using proper names for Your variables. Verbosity Just returning in case of error usually is not verbose enough. I'd suggest considering proper error codes and/or proper error logger, for example something like this: 

Instead of having a static array of You could just use ASCII values from to . If You still insist having a static array, please consider marking it as a . Leaving Your without any return value --- sign of the bad taste, to say the least. Consider having some proper error codes or at least on proper exit. Your index of chars (, ) can't be negative, so why would You use instead of or ? Same applies to and variables. In case of single char, is way faster then . 

But if the and arrays are large it may actually perform worse, as it avoids looping but creates an intermediate array of items. If you expand your expression, you could also do: 

If you are going to generate 10 times the amount of data needed, there's no need to keep it around. You can allocate the array you intend to return, and overwrite it several times. Similarly, you don't need to precompute and store all the error terms, but can generate them on the fly as you need them: 

If you want to produce correct results, you should simplify after each operation. Euclid's algorithm is very fast in finding the GCD, and very simple to code. If you have a function like: 

and that subsequent rows can be filled out by initializing them to all zeros, and then use the adjacency graph to add the values at a given column of the previous row, to all the columns that are successors of that one in the graph. Once the array is fully filled out, the sum of the last row is the total number of numbers that can be created. Because we only care about the sum of this last row, and each row only depends on the previous one, we only need to keep two rows of the array in memory at a time. Putting it all together into code: 

You know, I love fluent interfaces. though I feel many misconstrue their purpose. some examples I see try to make their code a 'natural language'. but That is not the point, the point is to decrease complexity and aid understanding, often most easily done via Natural language. I can't help but feel the above has crossed the threshold into requiring more time to learn than a standard composition. If i was dead set on fluent I would sacrifice a small amount of natural sentence structure for brevity: 

You know, code wise there is not really much to do. The other comments covered the few ways to improve things. I would though suggest a look at your goals architecturally. Aside from the semantically different meaning of an upgradable vs downgradable attribute both being under the same umbrella being a problem, in theory I don't see why an upgradable attribute is a subset of attribute. In theory any location you want to use an attribute it should also be swappable by an modified attribute right? Also Upgrading and Downgrading are two specific use cases.at some stage you may want to freeze an attributes values, or make a combined attribute or have a modifier only available if a condition is met. All of that would require some level of a redesign. If you instead looked at an attribute as a base component: 

You should profile your code, to figure out what exactly is it that is slowing your code down. It's hard to tell without some actual measurements, but my bet is on your calls to and , as the method is notoriously (very) slow. For some operations there is really no alternative, but for addition/subtraction you can use . The transformed code would look something like: 

This of course has \$O(n^2)\$ complexity, which is rarely a good thing. A much more efficient implementation running in \$O(n)\$ time would do something like: 

The only issue with this bottom-up iterative approach is that it may lead to a last very unbalanced merge. 

Note that the last timing means ~30 ns per item retrieved, right where you wanted to be. If you need to extract the boolean values one at a time, you are going to have to deal with the painful Python overhead. Notice that simply getting a single item from an array is terribly slow: