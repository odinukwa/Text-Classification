That's going to depend on how the network is designed/implemented and how exactly you are connected. Please note that I'm not implying everything I'm suggesting would be "polite" or free of side effects. You seem to be asking about, basically, how to reverse engineer the network design and topology. Wireless APs will identify themselves, so you can look at your wireless interface and note the name/BSSID, then build up a map of where you are physically and what APs you see. There are applications which will show you signal strength of multiple APs that are in range, so you can get a feel for what is nearby; Doing that from a a few different places lets you roughly work out what AP are where. And, you may be able to simply find the APs visually for more hints to the layout. For physical cabling (and this is all true for Wireless APs too,) you can note the IP network you find yourself within. You could also look at the default gateway you are given by DHCP. You can ping scan the IP network or even service sweep to note "stationary" things like printers, which you can then physically find, to provide you with more physical clues. More difficult is teasing out any virtualization that is designed in. On the wireless APs, you have their names so you can physically separate them; while your IP networking might be the same on every AP if you're on the same VLAN. If you have administrative access to the physical networking gear, then it's just a matter of looking for your computer's MAC address in the networking gear. 

Buy an inexpensive cooler -- a big plastic or styrofoam one like you'd use for a picnic -- remove the lid, place it open side down over the equipment. As long as there's no drafts in the container/house-unit, the heat from the equipment will stay up inside the cooler. If it's really cold, move the wall-wart power supply/ies inside the cooler too. 

The class, "A", "B" and "C", tells you the size of the network mask. (e.g., a class "C" has a 24 bit network mask.) The class is not a proper name specifying a specific network. 

The systems simply work better with the benefits brought by various encoding schemes. So your Manchester Encoding example has the benefit of ensuring frequent -- more frequent than would be the case with typical data -- voltage changes on the wires. More frequent voltage changes have the side effect, in this example, of making clock/timing work better. Other encodings have other benefits that befit their transmission mediums. 

Variable Length Subnet Masks was an effort to enable more efficient use of public address space. NAT enables us to use fewer public addresses, (by enabling usage of private addresses internally.) So the two ideas aren't directly related, even though both help reduce public address space waste. 

TL;DR: No, RF is slower than laser transmission. Frequency Frequency is, as you've described, a fundamental aspect of the carrier signal. Within the electromagnetic spectrum, lasers generally operate in or near visible wavelengths, (although there are infrared and ultraviolet lasers too,) and "radio" frequencies (RF) are much LOWER, (ie, well below the infrared.) Bandwidth Theoretical bandwidth is determined by the frequency at which one can vary the carrier signal. The variation must be very small; If it varied greatly, it wouldn't appear to be a variation at the receiver. The rate at which you can vary the frequency is dependent on the frequency. So for a given percentage of variation, you get a higher frequency of variation when you use a higher carrier frequency. That is to say: a 1% variation of a red laser frequency is a much higher frequency than a 1% variation of a radio frequency. The actual usable bandwidth -- the number of "bits" one can pour through a communication channel -- is significantly less. But the theoretical bandwidth gives you a hard ceiling which is a good first approximation of the usable bandwidth. So no, RF is significantly slower than laser transmission. 

What's the basic use case(s) for VLANs? What are the basic design principles? I'm looking for something like a two paragraph executive summary style answer so I can determine if I need to learn about VLANs to implement them. 

They are in order of specificity; The most specific (longest network mask) is first, and the least specific (shortest netmask) is last. If the network is variably subnetted, then they are grouped with the least-specific of the various netmasks, and ordered most-specific-first in each of the groupings. update It seems the output of is in the order of the internal tree structure, rather than an explicitly ordered (in the sense of route selection order) listing. For example, here's an old post from the Cisco forums; $URL$ regarding IOS 12. (If anyone can write a more authoritative answer, please leave me a comment and I'll delete my answer.) 

This is a question which I think the professional network engineers find very basic. But when asked to explain exactly and clearly why we don't need 255 intermediate hops/routers... well, it's rather hard to explain in simple terms. The best explanation I've ever come up with is to consider the town or city in which you live: Consider a starting point (at some address in the city) and a desired ending point (also in the city.) Next, select a path (a set of directions) to get from the start to the end. (This is NOT how the Internet works.) How many steps are there in your instructions from start to end? ...4, 5, maybe even 8. But you simply will not need 255 steps to get from one place to another. Next, repeat the exercise from your home address to some place (like a famous museum) on the other side of your country. Again, you will find a surprisingly small number of steps are actually needed. This result comes from concepts in (if I recall correctly) graph theory from mathematics. It is simply the nature of a connected graph where you have nodes and "edges" (the connections between nodes) passing information (packets on the Internet in our case.) Because the Internet is intentionally designed and built so that you can go to a nearby node (router) which then makes a good decision about where to go next, you effectively go "up" just a few hops and soon find your packet on it's way quickly "over" and then a few hops "down" to the destination. Wikipedia has a great introduction to Graph Theory. 

Do you have three router interfaces? (or can you expand and add a third?) Then you can have the tiny LAN outside your router as-is. (e.g. with public mail server NAT'd inward to the real server. Add a new network of public numbers on the third interface. Firewall to just the ports you need 80/443 so the public can go directly to that third LAN. Then you can add rules to allow the web systems in the third LAN (really a DMZ) to cross over to your true internal LAN through the router. That way you can always change f/w rules to allow whatever you want to that third LAN (the new DMZ). Without exposing what's over on the true internal LAN. 

These types of radio frequency transmissions are "frequency division multiplexed" (FDM). The different channels (ie, frequencies) transmit and receive at the same time. It's like a cocktail party where each conversation chooses a different pitch range -- the tenors have no problem hearing each other right through the basses at the next table. In FDM, the receivers are tuned so that they only pickup transmissions in the channel (the frequency range) to which they are supposed to listen. So over a wider range (eg, the 2.4Ghz wifi) there are smaller divisions of frequency ranges into channels. The transmissions move at nearly the speed of light, so any transmitters on the same frequency -- the same channel in a give frequency band, eg 2.4Ghz's channel 11 -- will instantly be talking on top of each other. So any two 2.4Ghz channel 11 devices within range of each other will collide instantly. Perhaps the part that isn't obvious is that electro-magnetic theory shows that superposition of E&M waves is not a problem. It's like waves in the open, ocean; You can have short spaced three foot waves (a highish frequency), moving over the surface at the same time you have long ocean swells (a lowish frequency). At the E&M receiver, you "simply" tune to the right frequency and you can pick the signals you want out of the noise. (And the E&M spectrums is very very noisy.) 

tl;dr: gigabits per second (Gbps) Your 470588235 is bits-per-second. 8 bits per character; cancels the characters unit in the numerator, leaving your bits per second overall. "bps" (as in, Gbps, Mbps, Kbps) means "bits per second", versus the "B" (as in GB, MB, KB) meaning "byte(s)". The "G" prefix normally means the metric "giga", which is 1,000^3 (or 10^9). So you would -- as you've shown -- shift the decimal nine spots. Giving you about 0.4Gbps. Note that the kilo, mega, giga, etc concepts can also be used in a binary (base-2 math) context. That is written as "Ki" (meaning x1024, instead of "K" meaning x1,000), "Mi" meaning x1024^2 (instead of M meaning x1,000^2.) 

Fabric is designed with a certain execution model; It assumes something, Bash by default, will run on the remote to execute your command. You can change what the remote command is though. You might try changing the remote command into a single space for when you're sending commands to something like a CLI (eg, Cisco IOS). See Fabric's Environment Dictionary about the 'shell' setting. 

Is it feasible? Yes. Is it a good idea? TL;DR: No. That depends on the exact details of the installation (configuring the devices, physically installing, power, cabling, etc) and the unique wireless aspects (transmission, interference, coverage, etc) of the installation. You should be able to figure out everything as you go along. On the other hand, if you run into something tricky, you'll be looking at significant time to figure it out. In terms of cost, they should be able to do the installation in fewer hours than you. (Simply because you have to figure it out and then do it.) So unless your hourly "value" is much lower, their $1,000 will actually cost your company less. That may not be an issue if your company considers this something that is part of your job -- but then, as you say, you're not qualified (in the traditional, "experienced in it" meaning,) to do this work. So the real question is to balance the hard cost against the risk/gain. A $1,000 cost in support of 30-or-so people is trivial. Unless there's a reason (in your company's opinion) for you to learn the material, I don't see any direct benefit to your doing the work. 

Verify the wireless systems are getting DNS servers via DHCP. If "cannot access Internet" means "web sites do not load", this may be all that is wrong. Verify your Internet edge router, (and/or firewall,) isn't blocking the traffic. You might have everything configured correctly from the network and IP point of view, and then not realize that the edge router has special rules to only permit certain of your internal LAN IP addresses out. (For example, your DHCP server could be configured to give specific IPs to certain DHCP clients (the boss's desktop), while servicing the rest of the clients (eg, printers) from a pool of numbers which aren't generally permitted out to the Internet. 

(and much, much more...) use cases There are differences in the insulation which jackets the conductors and the entire cable. For example, "plenum" cable -- meaning it is designed to be used in a plenum, a space within a building which is part of the air handling path for climate control -- is designed to limit how much, and at what temperature, it will emit toxic fumes. There are options such as full length shielding (grounding) which prevents interference from other sources. (This is not common with Ethernet cables.) The overall physical diameter of the cable may be a use case limiting factor. If you are install a very large number of cables, that might matter. Some cables contain a "strain relief" feature; A small nylon string (looks like dental floss) can be added within the cable to help prevent stretching the conductors when cables are pulled into place. 

I think you would have all the machines in one building on a LAN, with the LAN connected to an interface of the building's router. (If your buildings, work groups, machine count, etc are high, then you need more network design within the building.) Each needs to know about the other networks beyond the other routers. (Either statically configured routers, or some sort of routing protocol -- here again, you need to do more network design.) In the broadcast domain containing all the microwave links, the routers' interfaces would be exchanging broadcasts and traffic (eg for routing protocols) across microwave. But the LAN-side broadcasts, etc would not be routed to the microwave links (this is exactly what routers are all about.) You probably also need to do more network design regarding how many microwave links and how you're hooking them to router WAN interfaces. Are you making a fully meshed (every router has a microwave link to every other router) topology? ...or a star-design. (Which is very simple in a 3-node WAN, where the center node just has two links.) 

In IPv4, the protocols are added onto each other. So the IP datagram header you've linked contains just, (among other things not related to this discussion) the IP addresses of the sender and receiver. TCP and UDP build "on top of" IP by adding more header information after the IP header; in that extra information lies the port numbers, (and more) for the two endpoints. A quick google for "tcp packet header" will show you what the TCP layer adds on after the IP header. (And the short answer to you Q "how can a TCP socket be identified by IP address?", is that it cannot be.) 

The switch will fully load the incoming frames of data, from the two sending systems, into its buffer(s). I'm not sure how it determines which frame would be first in the queue for subsequent forwarding; but it's probably based on initial receive time of the beginning of the frame. Then the switch works through the transmit buffer queue sending the frames out one-by-one onto the destination port/segment. There's no issue with frames "running into each other." The real issue is can the ultimate port/segment accept the frames fast enough. (And, of course, can the switch process its buffer/queues fast enough.) 

You're looking for a "Geo Location" database. (One example I've used is Max Mind's products.) The devil is in the implementation details. The db products are meant to be used programmatically. For example, given a list of IP addresses, we want to know the state, or lat/longitude, country, etc. You could certainly write something (e.g. some Perl code. But the products come with sample libraries for many laguages) that would spit out all the IP addresses, networks, whatever for a given state or zip code. You would have to look through the db products to see which one(s) are organized in a way you can use. Then you have to do something with that list. Alternatively, you could do something dynamic. Hook into your web server, or server firewall, etc so that packets are looked up on the fly against the Geo Location database (the dbs are local data files you update periodically [eg monthly]) then make a decision, or insert a firewall rule. None of that is easy, but it's definitely do-able.