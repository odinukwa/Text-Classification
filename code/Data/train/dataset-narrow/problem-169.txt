What the book and video are trying to tell you is that increasing the number of host bits increases the number of hosts in that address block by a power of two. For every host bit in the address block, you double the number of hosts which you can have. The entire address block (call it the network or subnet) can then be referred to using only the network bits with the host bits all set to . 

You don't seem to be advertising the tunnel endpoints via BGP. For example, R1 has , but R1 has no route to . Also, R3 has , but R3 has no route to . You need to add the network statements to advertise those networks. You also want to use BGP . It looks like your current problem is that you have configured NAT on R1 and R3. The tunnel is supposed to bypass NAT, but you are not routing anything through the tunnel. 

HSRP can provide first hop redundancy on your LAN. There are options to change the active router for things like router or link failure. Each outside interface needs its own IP address from the ISP. Each inside interface needs its own IP address plus one more for the virtual IP address. 

There is no way to tell if a cable is a crossover cable or a straight through cable without access to both ends. I doubt your problem has to do with cross over since it does work with Windows on a laptop, but not Linux on the same laptop because you are using the same interface for both. It's not a very good idea to connect to a cable when you don't know where it is connected on the other end, especially when you want to connect a network infrastructure device like a router. Why do you not know where it is connected on the other end? It is, after all, your network, and the National Electric Code requires cables to be terminated and labeled on both end and ready for use, or they are considered abandoned and must be removed. 

I think you are really just looking to maintain the connections between the ASA in the event of a switch failure, and I'm pretty sure that the second diagram will work with a stack, but you should test it to be sure. I just don't see how an ASA could tell it is connected to a stack of switches as opposed to a switch chassis with separate boards. 

The above configuration will run RIP on and , but not . RIP will advertise two routes: and . There are Cisco documents, such as Configuring Routing Information Protocol which explain RIP route summarization: 

You either use static routes all around, which doesn't scale and needs manual intervention when routes change, or you use a dynamic routing protocol, like OSPF, which can adapt to changing conditions. A routing protocol like OSPF must be run on all the routers. Running it on only one router doesn't do anything since it is designed to exchange information with other routers running the same routing protocol. Router don't need a routing protocol to have a routing table, they need a routing protocol to share routes. That doesn't happen unless they are all running the routing protocol. 

You are slowing the transmission inside each host, but you are not actually taking advantage of the TCP flow mechanisms because you are queuing packets instead of losing packets. What you are doing will work even with UDP, which has no flow control mechanism. Instead of queuing, you should use policing (drops) to slow the transmission, then you will see TCP react. Queuing and shaping are designed to try not to lose packets, but policing purposely drops packets. You could also try something like RED that randomly drops packets in a queue to keep a queue from filling. This will help prevent TCP global synchronization (a bad thing) by taking advantage of the TCP flow control. If you really want to observe the TCP flow control in action, the do varying tests with different rates of policing. 

You should always do IP address manipulation in binary. See How do you calculate the prefix, network, subnet, and host numbers? 

Most end-devices don't understand VLAN tags, because of this, access ports (those where end-devices are connected) don't normally use tags. Tags are used on trunk links to distinguish traffic in one VLAN from traffic in other VLANs. Tag on trunk ports, not access ports. 

There is no way to do what you want to do. VDCs virtualize control plane and data plane in protected memory so that each is an independent virtual device, just like independent physical devices. You can, of course, ask Cisco to consider adding this feature in a future NX-OS release. From Cisco Nexus 7000 Series NX-OS Virtual Device Context Configuration Guide: 

ULA addresses can be routed (except on the public Internet). There are some rules to ULA addressing. The ULA address range is , but the first half of the addresses, , is reserved for assignment by a global authority. The second half of the ULA address range, , is available for local use, but the 40-bit Global ID must be randomly chosen. From RFC 4193, Unique Local IPv6 Unicast Addresses: 

You are confusing the layer-2 flooding with OSPF flooding. The routers in an OSPF area may not all be directly connected, but every router in the area needs to have a full understanding of all the other routers and networks in the area. OSPF floods this information to every other router in the area, even if some of the other routers may not be reachable by layer-2 frames from the flooding router. Broadcast requires that the routers be on the same network. This is strictly true for Limited Broadcast, and Directed Broadcast should be disabled due to security concerns (see RFC 2644, Changing the Default for Directed Broadcasts in Routers). 

IPv6 packets addressed in the IPv6 ULA address range, , can not be routed on the public Internet. Remember, though, that interfaces can have multiple IPv6 addresses, including Link-Local, Global, and ULA, and they can have several of each. Theoretically, there is no real limit to the number of IPv6 addresses you can assign to one interface, although the host OS will have a limit (usually no more than a couple of dozen, and the OS will need to create IPv6 Solicited-Node multicast addresses for each unicast or anycast IPv6 address, possibly only a single one if the last 24 bits of each address are the same). For example, you could have a Link-Local address, a Global address, and a ULA address assigned to an interface on each of your hosts. Your hosts on your own network could communicate with the ULA addresses for any traffic that you never want to see on the public Internet, but the hosts could still communicate on the public Internet using any assigned Global addresses. 

Without anything that restrict what is advertised, e.g. a prefix list, that command will advertise any prefixes in the BGP table to an eBGP peer, but iBGP has a rule that it will not advertise iBGP-learned routes to an iBGP peer. 

The simplest definition is that an SNMP MIB is a database containing the managed objects which a device will expose to SNMP via an SNMP agent. The MIB appears, at least externally, to be a tree structure. This is how RFC 1156, Management Information Base for Network Management of TCP/IP-based internets defines it: 

Not exactly. Routing protocols do not route. A router can route without even using a routing protocol. Routing protocols simply exchange routes with other routers. The router will determine which routes populate the routing table from various sources, including routing protocols, based on things like reliability of the prefix source, e.g. AD, etc., but the router will route packets based on what is already in the routing table. Also, the router only has the destination address, not the mask of the network where the destination is, so it doesn't extract a network prefix from the destination address. The router will strip off the layer-2 frame, examine the layer-3 destination address on the packet, and perform a lookup in its routing table, looking for the longest prefix that matches the destination address. If it doesn't find a match, it drops the packet. If it finds a match it will have the outgoing interface, and it will build a new frame for the next interface and forward the new frame out the interface. 

Your idea of start and end addresses will slow routing decisions down a lot, and a packet may traverse multiple routers to get to its destination; mask and compare for equality uses far fewer CPU cycles than compare for . More CPU cycles equals more time and more CPU load. Using a mask is fast and easy to do in either software or special hardware (ASIC). You have to remember that routers switch packets individually, and a router must make the determination which way to switch a packet for each and every packet which passes through it, and each router through which a packet travels will need to do the same thing. How can route aggregation work with odd sized subnets? The number of Internet routes is already out of hand, and the ISPs won't advertise any IPv4 prefix longer than /24. Your idea adds unacceptable overhead and delay to packet switching. You also need to think about so tightly restricting subnets that there is no room for growth. If you have assigned 192.168.1.1 to 192.168.1.17 for subnet 1, and each subsequent subnet is equally restrictive, what happens when a manager on subnet 1 wants to add a printer, scanner, new PC, etc. Suddenly, you need to move everyone to a new, larger subnet, and you have an unused subnet that may never have a good fit, thereby wasting those 17 addresses. This idea doesn't really solve any problems since even doubling the number of available IPv4 addresses will not even come close to fixing the IPv4 address shortage, and it adds considerably to router overhead and real world implementation support. Keep thinking about things, but realize that there are many, many extremely intelligent people who live, eat, breathe, and sleep this stuff, and have for many years, with no thought but how to make it work better. Everything about IP is under constant review and can be changed if a consensus decides it should be. The proof is the demise of IP classes in favor of CIDR and VLSM. 

TIA-606-B is really a set of guidelines. You are free to add or use whatever makes sense and works for you, but whatever you choose must be applied consistently and uniformly to every area, is flexible enough to withstand change and growth, and it needs to be communicated to any vendors involved. 

One hitch is that the WAP as a bridge can time out the MAC addresses of the clients it is bridging, if they do not send very often, even if they are receiving. You can increase the timeout for this problem: 

Layers 1 to 4 comprise the network stack which OS developers have implemented in the OS, but they never actually implemented layers 5 to 7. It is up to the application developers to provide these services in their application. That means there is no standardized way for layer-4 protocols to know what is in any layer above it. Layer-2 protocols can have addresses, e.g. MAC addresses, and the layer-3 protocols register with layer-2 so that layer-2 knows where to send the payload of the layer-2 frames, e.g. ethernet has the EtherType field in the frame header. Layer-2 protocols don't look in the frame payload to see what it is, and this means that we can use any number of layer-3 protocols with layer-2. Layer-3 protocols have addresses, e.g. IPv4 addresses, and they have the same sort of thing as layer-2 protocols, e.g. IPv4 has the Protocol field in the IPv4 header. Layer-3 protocols don't look in the packet payload to see what it is, and this means that we can use any number of layer-4 protocols with layer-3. Layer-4 protocols have addresses, e.g. TCP ports. Applications register with a layer-4 port, saying that anything that comes to that port goes to it. Layer-4 protocols don't look in the frame payload to see what it is, and this means that we can use any number of applications with layer-4. Since there is no defined layer-5 in the OS, layer-4 protocols don't have a standard way for layer-5 protocols to register with them, and there is no field in the layer-4 headers to register a layer-5 protocol. Instead, by consensus, there are well-known ports which some applications use, but that doesn't mean a different application than the one which is well known can't use one of the well-known ports if it is not currently in use. For instance, I could write an application which uses port 80 (well known for web servers). If I run my application, then try to run a web server, the web server will not work on the well-known port because it is already in use. 

If the switch is truly frozen, you will probably have to power it off and back on. When the master thinks the switch is only provisioned, that means that it is provisioned in the configuration, but it cannot actually see the switch. I doubt you can reload the frozen switch from the CLI. 

Apparently, your ISP is using CGN (Carrier-Grade NAT). See RFC 6264, An Incremental Carrier-Grade NAT (CGN) for IPv6 Transition. Some ISPs foolishly use RFC 1918 Private Address space for this instead of the IANA reserved address block: RFC 6598, IANA-Reserved IPv4 Prefix for Shared Address Space). This range is . Most ISPs don't use the range assigned by IANA for this, they just use regular RFC 1918 address space. The RIRs have run out of IPv4 addresses to assign to the ISPs, so the ISPs are turning to CGN to assign non-public IPv4 addresses to residential customers, saving their precious pool of public IP addresses for business customers willing to pay a premium for public IPv4 addresses. From RFC 6598: 

Not every device has a globally unique MAC address, and I'm not sure why you think that. Some layer-2 protocols (in particular the IEEE LAN protocols) use MAC addressing, but some use other addressing or no addressing at all. Of those that use MAC addressing, some use 48-bit MAC addresses, and some use 64-bit MAC addresses, but all are LAN (layer-2) protocols. A vendor can buy an OUI from the IEEE, and they can assign the MAC addresses in its OUI as it sees fit. A vendor that makes ethernet, token ring, Wi-Fi, etc. NICs can reuse the same MAC address on all those. Some vendors reuse MAC addresses in different regions of the world. If you mean the reason for the U/L bit in the OUI, that was part of the original specification. End-users can set that bit and assign MAC addresses in a way that works for them.