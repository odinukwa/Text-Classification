In a perfect world, the switch should only pass Ethernet frames that are tagged if it is specifically configured with those VLAN IDs trunked on that interface, or if a VLAN with a matching VLAN ID is the native/access VLAN on that interface. Frames with tags that are unknown to the switch should be dropped. However: on some unmanaged switches I have seen instances where the switch will completely ignore the Ethertype (indicating a tagged frame) and simply forward based on Destination MAC, passing the frame through the switch and maintaining the 802.1Q header (essentially acting as a hub with MAC learning). In this case, your router should then drop the tagged frame if is not configured to receive one, even if the frame was destined for a local MAC address. 

Further to Ron's answer - you are confusing your Protocol Layers - NMAP (and ping and other applications) do not populate the ARP cache - your system OS does this via your IP stack. The ARP cache does not indicate the liveness of a MAC to IP mapping, it merely tells the host that at some point within the last $arp_cache_timeout seconds, this MAC responded to an ARP request for this IP. In your example case when nmap tries to connect to x.x.x.200, the IP stack in your OS sees that there is an entry already in the ARP cache, and simply builds an Ethernet frame destined for the cached MAC Address (which happens to be your local MAC) and sends it. The lack of response received is because your IP stack no longer responds on that IP address. 

There are two protocols that allow ECMP across L2 networks: Transparent Interconnection of Lots of Links (TRILL) and Shortest-Path Bridging (SPB). TRILL is implemented by exactly two vendors: Cisco (FabricPath) and Brocade (VCS) however both use proprietary implementations, making them incompatible with each other and the standard. SPB was favoured by Nortel (now Avaya), but is also supported on Alcatel Omniswitch platforms along various HP models, and a few others. You can do some more investigation here: SPB - $URL$ TRILL - $URL$ 

Yes, NAT should work just fine, however I don't think a 1:1 nat is what you want, because you're mapping to a real interface address on the router (your router may not let you do this, and if it did, traffic destined for the router may be inadvertently mapped to your remote terminal) Source NAT (sometimes called hide NAT) would be a better solution - translating any traffic from 168.192.0.2 to 192.168.1.10, but any traffic directed to the router would be delivered correctly. 

On the SRX you have no security policy configured between the vpn zone (which is where your tunnel interface st0.0 resides) and the trust zone. Add the following and you should be up and running: 

The and interfaces are what you connect to AWS over, however they are currently located in a zone which has no security policies bound to it. 

You need to use Juniper's Per-Service Session Accounting. In a nutshell, this involves defining services using a firewall filter, applying those services per subscriber, then the MX will send independent RADIUS Accounting updates for each service per subscriber. In your case, you would define a VoD or generic unmetered service, with an firewall filter matching your VoD server and any other local resources you don't wish to count, and then apply this as a service to each of your subscribers. You would then have a second service applied covering all other traffic, and this is what you would actually count. NE StackExchange discourages linking to other sites due to link rot, but search for "Junos Configuring Per-Service Session Accounting" 

The thing to watch with 40G between devices is multi-mode fibre patch leads. Unlike regular multi-mode SFP/SFP+ where you have only two cores of fibre which are crossed over between devices, multi-mode QSFPs connect to MTP cabling, which is 12 cores, of which, 4 will be active to achieve a 40Gbps interface. When looking at your QFX or Fortigate QSFP with the "key" at the top, you will be presented with the following (T is Transmit and R is Receive): 

If you configured each pair of 4500s as a VSS, then linked them together with an active/LACP port channel you could achieve an all active topology (which is what I assume you are looking for). You would need to ensure that one port from each PortChannel is assigned to each VSS member. 

So a couple of things - firstly, no, all routers connected to the Internet do not need the entire address space. If the device only has one connection to the Internet, they will have a default route eg: 0.0.0.0/0 pointed towards their upstream router and thats it. This represents any IP address that the router doesn't have a better route for. Routers inside your ISP may contain the "entire" Internet routing table. As to the second part of your question around the space required to hold the routing table - Internet routes aren't stored as individual host routes, but summary prefixes. The general rule for IPv4 Internet routes is that no ISP will advertise anything longer then a /24 (eg: a block of 255 addresses) as a single route update, and you will find that a lot of routes are aggregated even further than this (right up to /8s or 65K addresses per prefix). Over time as the Internet grows, route-deaggregation (eg: taking a larger prefix and breaking it into smaller ones) has caused the number of required Internet routes to grow, and consequently the hardware requirements for holding the table have increased. As of today (May 2018) there are 717,613 prefixes being advertised, which can be comfortably stored by a router with 2GB of memory with enough left to run the Router OS as well. If you're interested, I recommend reading through $URL$ for up-to-date prefix counts and aggregation reports. 

A VPLS does not map IP addresses - it is a Layer 2 service. What you may be seeing in command output is MAC addresses mapped to the IPs of the specific remote PEs they were learnt from. 

Might be quicker to start over here - the below configuration should clean out what you have and give you a good place to start (don't commit this until the end though): 

Further to RobinG's answer - the single control plane in virtual chassis (and other stacking technologies) allows you to do thinks like attach an aggregated ethernet link between the virtual chassis and a downstream switch, and distribute the member links across both chassis nodes. If you had two stand-alone switches uplinked to a downstream switch, this would not work, and you'd have to resort to active/standy links using Spanning-Tree or similar (or MC-LAG if your switch supports it) 

No outgoing label indicates that Junos doesn't have a label for the loopback you are targeting on the Cisco (your x.x.x.x address) Confirm the following: 

I would start by connecting my machine to the same VLAN (or back to back) and running Wireshark to see if the device is attempting to communicate with anything else, reboot the device too to see if there is any initial communications that might reveal an IP address. Then you can use nmap to port scan the device to see what services are running. Failing that, a quick bit of Googling turns up the Korean manufacturer of the product: $URL$ And their contact email: dtnt@paran.com You could always try asking for a manual 

Now whether you use an actual router, or a layer 3 switch with a routing protocol is up to you (switches are generally a lot better price/performance for basic L3 routing, at the cost of scale and features), but the result is the same. 

Unfortunately there are no traceoptions for SSH that I'm aware of. If you have access to a *nix machine with your SSH keys loaded, you could try connecting with: