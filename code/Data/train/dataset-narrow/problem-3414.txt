I pulled the power, connected it to a keyboard and tv, then did a 'shutdown -rF now' and 'rpi-update' and now have it connecting via ssh 

At the moment I'm running two PIs with the popular software Motion, delivering webcam content to the internet. I'm port mapping the two external ports to the internal ports on my router, to give external access to the two streams. These two PIs have a version of Motion that allows authentication of the streams within the Motion software. However, I have recently setup another PI with the the latest version of Motion, but without the ability to authenticate the stream. I know there's a patch for this, but was wondering: 1) Is it's possible to authenticate the three PIs, via my own Apache web server on one of the PIs; rather than from within Motion's settings? 2) If this is possible,then would I only have to port map my router to one port, the one with the web server on it? 3) Would I just use the same internal addresses link (102.168.1.90:port_number_setup_in_motion), to access the stream on the external address website? I think this below may be close to what I'm looking for, but not sure where to place it in the appachie2 file structure. 

Thanks Bex for your help :) I think it's working now by changing the uid and gid to motion in the fstab davfs mount command. I used this page for reference. I also noticed that the mounted directory had 0777 permissions with user pi, then I modified the fstab file then did a reboot; to test the re mount. Following the reboot the permissions changed to 0755 with user motion ; this may explain how the permissions could change, as you suspected. I'm happy, thanks again, Reggie :) P.S. I didn't change the rw to rwx after looking at the above link, i didn't think it was valid. 

Or a more elegant solution is not to load the integers in in the first place, define an empty deque, and specify the max_qlen when one calls the function! 

I have a streaming server / motion detection script that works on my laptop, but when I move it to my PI it gives the following error when i try and access the stream: 

I found the reason why it wasn't working, I needed to set the permissions on the PI_pictures folder to 0777! for other users! 

and it appeared to work without having to enter my username and password manually. so i then tried on the command line: 

1) has it frozen, or just taking a long time? 2) how long shall i leave it like this? 3) Would it brick my PI if i pulled the power? Please advise this worried novice. 

and the resultant jpg output of an integer of value 10: I'm assuming eclipse doesn't complain when you ask it to convert the number 10 to a jpg, but the PI does! 

where I cannot see two processes trying to access the port 1991 on 192.168.1.61. Am I doing anything incorrectly? I'm still confused what could be happening with the "address already in use" error listed above. Another edit resulting from comments I start the socket using the command: which calls the CamHandler class to deal with constructing the stream. the CamHandler class looks like this: 

These ips aren't either of my pis on the network, so i'm guessing they'e my Laptop. The bit i'm interested in is the "crash","down and "pts/o". Could someone please explain what these are? 

I recently tried inserting a 5M USB extension cable in between my WIFI dongle and my PI, which didn't work, so I removed immediately; but the PI still wouldn't connect following a reboot for ages. Can adding a 5 meter USB extension cable to the WIFI dongle cause problems even after it's removed? 

switching between the two operating modes by script - either isolated network or connection to internet router. This has the disadvantage that pi.lan is down when connected to the internet router and vice versa. Invest into an additional wifi dongle. For me this is the best solution because we can make clean routing with all possibilities of network management. Use only the available network with internet router but restrict isolation with . 

Usually you should have a route for each interface similar to this, assuming your default gateway is (your internet router?) and the ip address from the interface is : 

avahi-daemon installed, no gmediarender, ipv6 enabled or avahi-daemon deinstalled, gmediarender running, ipv6 enabled or avahi-daemon deinstalled, gmediarender running, ipv6 disabled Ping-test with result what I call 

In the default Raspbian image I find &ast;raspberrypi&ast; kernel, bootloader, firmware etc. Using a bootstraped Installation I don't find them but using the same entries in /etc/apt/sources.list. In detail: With a default Raspbian image Update package lists, list raspberry packages and archive directory. 

There is no swap partition anymore. You should double check your partition numbers. The accepted answer in How can I resize my / (root) partition? advises you to recreate the . This was OK in 2012 but since that time it has changed something in addressing partitions in and in . If you use a disk partitioner like or it is possible that has changed and your SD Card will not boot. Maybe you have to edit and and change the partition names to and . Further information about this issue you can find at Is it possible to use partition UUID for root-parameter in cmdline.txt?. 

At this time I only have Raspberry Pi 3 for testing but oldoldstable raspbian does not run on a RPi3 out of the box. We have to use an updated version. Thanks to who made an updated raspbian wheezy for RPi3. Therefore we have to take this test with caution. I downloaded and flashed it, made , rebooted and tested. The result was very stable but not 100 %. From 106000 packets transmitted I got 2419 packet loss. jessie lite is the successor of and the changeover to . I installed latest version of 2019-07-05-raspbian-jessie-lite (for me: added in , deleted in ). Ping-test after warm-up without packet loss. Then updated the installation: 

You are building a router with firewall. It does not make sense to give two default routes. The is the route ip addresses are send to that do not belong to local networks. If the router do not know where to send an ip address it will send it to the next hop on the network with the ip address of the . If you have two default routes where should the router send unknown ip addresses to? You should only set up one default route in the raspi to your internet router, in your example to . But how get the packets from network to the internet? The packets have to pass from to and backwards. To enable this you have to turn on as @dlu already commented. There are several ways to do it. I don't know what configuration you are using. You can enable it direct to the kernel with: 

I don't know what version you are using. This answer is for Raspbian stretch. You should first upgrade: 

On your control point (bubbleUPNP or something like) you should find a renderer named . Select it and play music from your media server if you have one. If it works then configure , set ENABLED=1 and maybe your UPNP_DEVICE_NAME. Don't use "special" characters like umlaut or so. Startup will quit with an error message. Seems gmediarender still not understand UTF-8 :-( Start gmediarender as service: 

Which, to me, suggested that I needed to flush the first two values i'd loaded! Following this example, I could see that following a popleft I got 0 then 10 then 1a, so it dawned on me that I was preloading the dque with 2 integers not numpy arrays. so I modified my script to flush out the 2 pre loaded integers and it worked: 

This script works when i call it from the command line, but when i have "Motion" call it following the save of a jpg to my PI, it only sends the emails. I'm mostly get about 10 jpgs, for each event, so wondered if the script was being upset by being called again whilst running. Just a hunch, but how could i test for this, and possibly rectify? 

Iv'e tested this script on my pi, by running it every min, but cannot see any messages in the logs from the script. I can however see it being called by the cron. 

I have Motion installed on one PI and wondered if it was possible to easy duplicate the install process, with dependencies, on a another pi without either: 1) Installing and configuring it again 2) Removing the SD card and making a backup of the image, then duplicating the image to the second PI I remember it was difficult to get it working with the NOIR PI-cam, and I cannot remember exactly what I did to get it to work. 

I needed to make the file "motion.conf" user, owner and group to "motion" then it let me control it using the web interface. 

Firstly, I've googled around, but got myself horribly confused; hence this question. I have a headless/keyboardless Raspberry pi with a camera board on it, that I connect to via ssh using my windows PC. I'm trying to display a window, on my windows PC, with a picture taken using a python script and opencv2, but am having problems doing that. I am using putty and xming, and can see the raspberry pi's desktop. I run the script via the terminal on the PI's desktop. The below script saves, and rotates the jpg, but doesn't display the picture on my pc and gives an error: 

I've been looking in the syslog file to try and find out why this may be happening but i'm getting myself confused, so I've switched my attention to a patch, not a fix. From what I understand of the logs, the wifi seems to stop trying to re connect and will only reestablish following a reboot. A nasty but effective way of re establishing the connection, is to but I'm running a headless PI so I have to pull the power. Could someone give me some pointers on how to modify this script to force a reboot if the script has been called 10 times in succession, but the wifi is still down. Script 

2) Is it possible to modify the server script to incorporate the CV2 motion detection stuff, and have it continually detecting motion, regardless of the state of the server? 3) If I have two scripts, and only have the motion detection script grabbing a img (numpy array), how could I pass this img to the server script for display over the web? I hope I've made myself clearer... 

Could I reliably mount the same network drive on two PIs connected to the same internal network? At the moment, I have one PI moving pictures from its saved location, to its mounted network drive, linked to a Box account, each time its camera detects movement. What I'm concerned about is, if I duplicate the above system, I'll have two mounted devices pointed to one external drive; with the possibility of both PIs trying to upload files possibly at the same time. I'm using davfs2 to mount my network drive and have set up my PI like this 

These users are provided by base-passwd. Look in its documentation for more information on how these users are handled in Debian. The list of default users (with a corresponding group) follows: root: Root is (typically) the superuser. daemon: Some unprivileged daemons that need to write to files on disk run as daemon.daemon (e.g., portmap, atd, probably others). Daemons that don't need to own any files can run as nobody.nogroup instead, and more complex or security conscious daemons run as dedicated users. The daemon user is also handy for locally installed daemons. bin: maintained for historic reasons. sys: same as with bin. However, /dev/vcs* and /var/spool/cups are owned by group sys. sync: The shell of user sync is /bin/sync. Thus, if its password is set to something easy to guess (such as ""), anyone can sync the system at the console even if they have don't have an account. games: Many games are SETGID to games so they can write their high score files. This is explained in policy. man: The man program (sometimes) runs as user man, so it can write cat pages to /var/cache/man lp: Used by printer daemons. mail: Mailboxes in /var/mail are owned by group mail, as explained in policy. The user and group are used for other purposes by various MTA's as well. news: Various news servers and other associated programs (such as suck) use user and group news in various ways. Files in the news spool are often owned by user and group news. Programs such as inews that can be used to post news are typically SETGID news. uucp: The uucp user and group is used by the UUCP subsystem. It owns spool and configuration files. Users in the uucp group may run uucico. proxy: Like daemon, this user and group is used by some daemons (specifically, proxy daemons) that don't have dedicated user id's and that need to own files. For example, group proxy is used by pdnsd, and squid runs as user proxy. majordom: Majordomo has a statically allocated UID on Debian systems for historical reasons. It is not installed on new systems. postgres: Postgresql databases are owned by this user and group. All files in /var/lib/postgresql are owned by this user to enforce proper security. www-data: Some web servers run as www-data. Web content should not be owned by this user, or a compromised web server would be able to rewrite a web site. Data written out by web servers, including log files, will be owned by www-data. backup: So backup/restore responsibilities can be locally delegated to someone without full root permissions. operator: Operator is historically (and practically) the only 'user' account that can login remotely, and doesn't depend on NIS/NFS. list: Mailing list archives and data are owned by this user and group. Some mailing list programs may run as this user as well. irc: Used by irc daemons. A statically allocated user is needed only because of a bug in ircd, which SETUID()s itself to a given UID on startup. gnats. nobody, nogroup: Daemons that need not own any files run as user nobody and group nogroup. Thus, no files on a system should be owned by this user or group. Other groups which have no associated user: adm: Group adm is used for system monitoring tasks. Members of this group can read many log files in /var/log, and can use xconsole. Historically, /var/log was /usr/adm (and later /var/adm), thus the name of the group. tty: TTY devices are owned by this group. This is used by write and wall to enable them to write to other people's TTYs. disk: Raw access to disks. Mostly equivalent to root access. kmem: /dev/kmem and similar files are readable by this group. This is mostly a BSD relic, but any programs that need direct read access to the system's memory can thus be made SETGID kmem. dialout: Full and direct access to serial ports. Members of this group can reconfigure the modem, dial anywhere, etc. dip: The group's name stands for "Dial-up IP", and membership in dip allows you to use tools like ppp, dip, wvdial, etc. to dial up a connection. The users in this group cannot configure the modem, but may run the programs that make use of it. fax: Allows members to use fax software to send / receive faxes. voice: Voicemail, useful for systems that use modems as answering machines. cdrom: This group can be used locally to give a set of users access to a CDROM drive. floppy: This group can be used locally to give a set of users access to a floppy drive. tape: This group can be used locally to give a set of users access to a tape drive. sudo: Members of this group don't need to type their password when using sudo. See /usr/share/doc/sudo/OPTIONS. audio: This group can be used locally to give a set of users access to an audio device. src: This group owns source code, including files in /usr/src. It can be used locally to give a user the ability to manage system source code. shadow: /etc/shadow is readable by this group. Some programs that need to be able to access the file are SETGID shadow. utmp: This group can write to /var/run/utmp and similar files. Programs that need to be able to write to it are SETGID utmp. video: This group can be used locally to give a set of users access to a video device. staff: Allows users to add local modifications to the system (/usr/local, /home) without needing root privileges. Compare with group "adm", which is more related to monitoring/security. users: While Debian systems use the private user group system by default (each user has their own group), some prefer to use a more traditional group system, in which each user is a member of this group.