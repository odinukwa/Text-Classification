This check at the start, it wraps most of your code... For starters, you have one pair of parentheses too many. Let's strip those: 

First, typo, should be "Performs a play". Second, why does it take when all your documentation contains is "the column index"? Why not... ? 

Whoa whoa whoa! We are reading from the output file? Did you make a mistake? I dunno, but by simply removing some lines I've suddenly exposed what could be a flaw! Clarity You're making a lot of objects and doing things with them. Try putting some blank space in between. It groups statements together and makes the code more logical. 

Once again, spot duplication between A and B - they're doing the exact same at the end of the case. I am assuming that A and B cannot go into the negatives. Since has an early return, A and B are (individually) either 2, 1, or 0. Thus we can see that if A is 2, we add A. If A is 1, we add A. If A is 0, we don't add anything. Same goes for B. So we can just do in all three cases. 

You can clean up your code by looking for similarities and getting rid of the duplication by creating separate functions. I'll demonstrate. 

This could be a function called with an argument for the to add the button to and for the id. Similarily, you could have such functions for the left, right and up shift. That'd greatly simplify your code. 

Your algorithm is indeed slow because of the array copying. I looked up some numbers on primes - number of primes below 2 million are 148000-something. You make a copy of at least that many numbers that many times. If you had a perfectly culled list of primes, you'd first filter and copy 148000 numbers, then 147999 numbers... This is called a Triangular Number and can be calculated by (N*N)/2 + (N/2). So 148000 to the power of 2, divided by 2, plus 148000 divided by 2. Gives you 10,952,074,000. Each number is 4 bytes, so for all the primes below 2 million, you are shifting and copying 40 gigabytes of memory. You should alter your algorithm to filter in place. 

So far, I get the point; getters and setters show that you might not have thought about the usecases and are treating your objects as dumb things, and maybe you want to emphasize that there's actual work being done. But then the author says this: 

You'd be better off defining the function outside of the loop and calling it by passing it parameters. What the warning is referring to in this case is creating a new function object in a loop, meaning you create several anonymous functions, where 1 function would do. Creating a new function object in a loop like this can hurt performance. 

I like how you've structured your code, but there's a couple naming points I want to address... When a player takes a turn, you call it a "player turn". Which sounds pretty okay... but then the code reads like this: which doesn't sound all that great. "I am now doing my player turn". There is no verb in your function name. Functions do stuff, so they should have a verb in there, or else they might be not doing stuff. Or maybe they're doing vague stuff. Try "player takes a turn". So you get this: 

What the... Have you seen the constructor? There's also . Those would make your loop irrelevant... unless there's a specific reason you're setting the array to 0? 

I feel your approach is completely wrong. Why load the whole tree structure into memory? Because you're copying the same code over and over. And that turns you into a blind programmer. Instead, try this: Add depth to TreeNode. Add depth to the constructor of TreeNode as the second argument. Then declare root to be at depth 1. Declare an array of int (we'll call it widths). Size 32; you can't get deeper with your syntax for defining a tree. (Maybe you can, I'm not sure how well a list containing 2^32 items will function). Next, parse the list. Whenever you add a new node to the queue, . Whenever you create a new node, pass as the second argument. When you're done parsing the list, . That might be considered cheating though; we're not really using a tree. Anyway. 

Step 2 - identify sections of duplicate code and generalize them. In your case, this is the and at the end of each case. 

For the bigger performance gains it might be better to look for algorithmic optimization, rather than optimization of the implementation. 

This could be a method . You could rewrite the entire method as a list of "increase adjacent mine counter": 

Performance You want to know if there's a faster way check if integers share a digit. To be honest, I don't know. Your implementation looks pretty fast. But your implementation also takes a constant amount of calculations related to the size of the input and makes no use of shortcuts. One shortcut that I can come up with - if a number contains all the digits, then you don't need to continue. But perhaps checking for this case makes the worst case slower again... I also checked $URL$ which is a collection of "Bit Twiddling Hacks", but there doesn't seem to be an algorithm for checking for duplicated digits in there. 

It's a header. Before I go back and talk about the complexity of generateAST, let's take a quick look at that comment - it says "do not modify". Who's the target audience for that comment? Probably just you. But you're also the person who (sort of) knows why that warning is there. Have you considered turning your comments into functions? 

I can't find anything wrong with this. Just ... nitpicks. You name your variables in for each loops . 

But it looks like your setter is actually quite complex, so we definitely cannot get rid of the setter here. I think a helper which takes would be useful. ... Heck, looking at it again, I think making the a helper and the delta the real one is the better choice. 

This function is filled with repeated if statements containing combinations of previously tested variables. Consider storing those in temporary variables instead and reusing them. That should improve readability. Additionally, I can think of a couple things you could try to increase performance on an algorithmic level: 

The problem with this sort is that it compares with even although on the previous iteration, multiple shifts happened. Take a look at the start: 

If we're allowed to change the order of operations, I'd even move the all the way to the top of the function. 

Oh wait, now we could get whilst waiting. Not good. Let's just throw a while loop around it: (not the cleanest solution, but it'll work) 

Right now, it doesn't add a whole lot, but you can add things like or . Then when you're in your IDE programming, it will tell you that the first parameter is "the treenode to start the search at" and the return value is "containing the required data, or a new treenode containing -1 as data if it couldn't find the node". And this can be really helpful. 

Well, if I were designing this... I'd abuse a physical object. Blackjack comes with a table. And the dealer and the player join this table. That's when they're greeted. And then they can play hands. At some point, people leave and the hands end. So perhaps a class like can be responsible for a lot of things. At the very least it could take the responsibility of passing messages around and handling the game's progression. To play Blackjack at a casino, you need to place a bet. When you're done playing, you can collect your chips and you just walk away. Sadly, you don't have a betting system, so there's no easy way of simply betting 0 and making that a way to leave the table. (Then again, card counters might favor just waiting a couple hands to get the better cards... and they do so by simply not betting.) So yeah, you'll have to make something ask the user. I'd make that the table's responsibility. Leave the round of hands out of it. 

With something like that, you can get rid of the duplication of numbers. You can also use this to combine the menu printing functions into one function which takes a menu to print and then prints it. Like that, adding a new menu would be easier. As for your Savings class, you can make use of and to shorten to . 

You've got some duplication in there; Perhaps you can create a function with a string argument that will handle response writing? 

I think you model the domain wrong. A recipe is a list of instructions with a list of ingredients. What kind of recipe it is does not matter. The "cheeseyness" of a recipe does not matter for the class. So I think there should only be a class, of which there are two instances, namely a , and a . Consider modeling (as abstract) and (as enum?) as well - that way you could make something like an . I don't wanna go to deep with the recipes, so we'll keep it simple on that front. Looking more at the diagram, I also think that the current program doesn't work with a user. The user does not get to decide what pizza they want. Pizza lovers are forced to make a pizza they love only to have it taken away. This doesn't make the pizza lover or the user happy. We'll set out to do the following: 

And people will always be forced to set a device. With you can even make them not pass in a null value (you can also write the check yourself, but it's easier with . 

This sort of construct, an else which contains only an if-else chain, can be simply written as an elif-else chain. 

Part 3: The part where you take all the objects you've made, and use to get a list of ids, so you can call with the right values. ... Try using a . Part 4: The part where you take all the objects you've made, and use the retrieved database objects to clone and set the objects into the s. It's up to you to do the actual cutting and pasting. Ask for a follow up review with a new question once you're done, maybe then we can take a look at writing some "parser class" that handles all the crap for you. Result: 

This bit would make more sense if you kept i as your index. Then swap the statement to get rid of the +1, ... 

The first thing you do is pass it on to , which does a binary search to find the same node! So what you could do is add overloading, where you convert the original method into a helper function: 

It only made sense after looking at the diagram. Still, you're doing a calculation twice... why not do it like this? 

I know you're likely to add fuel to a vehicle in real life, but tracking applications usually don't do all the things that you'd do in real life. They just track the current status - which is likely to deviate from estimations, so would probably be better. ... That is to say, I'm missing a setter. is good, but I'm missing a setter. By the way, what is that int return type? Overflow? 

What happened here? A single log call over 5 lines of code. It's drowning out your more important code! Looking at all the log calls: 

Sometimes local stores help with clarification, and sometimes they don't. In this case, you have french variable names which I don't understand, and the local variable names don't help me understand your code, so I prefer the shortened form. ... Although, if we're going to use a constructor which takes a , you might as well label your temporary variable as such. 

Interesting algorithm. The implementation seems correct, handling corner cases such as empty array and array with one element correctly. Aside from that, though, you should work on using braces consistently, not just where necessary. Your current style is minimalistic and doesn't allow easy visual parsing. Whenever you use an algorithm that has a name, write the name in a comment in either your function description or an implementation. Also include a link if you can, to save someone a google search. 

Make it so that the id gives direct access. This could be done with hash functions or arrays or... look up data structures with \$O(1)\$ access. Make it so that the search space is smaller. For instance, instead of linking nodes together by ID, nest nodes via providing a attribute containing more nodes. Then you only have to search in a sublist, meaning that you'd be searching in lists anywhere from 1 to 20% of your main list. Given the way access iterations scale, 5*20 is only 1050 iterations, compared to the 5050 we had earlier. 

The way you have done your algorithm, you could just apply the same operation to your variable, rather than reducing the entire array. 

This seems like it could be a for loop. I'd personally use a 2D String array here. A HashMap is a nice idea but you might want to preserve the order of operations, and a HashMap doesn't allow you to do so. Additionally, we want to make the code readable. 

In the code tells me that program 2 is for splitting up a bill. In that sense, the code is self documenting. We don't need the problem description. We can see what the code does, because we can execute it. What comments are for, then, are not for explaining what the code does. That understanding can already be achieved by, well, reading and executing the code. Comments have 2 main uses, in my opinion: First, to explain the why of the code (why does the code do what it does). Second, to help speed along the understanding the code. Basically, rather than making me read and execute the entire program, spending lots of time, you simply put the purpose of a part of code in a comment, and I can read what the code does via condensed comments. Like reading a recipe instead of watching someone actually cook something. The act of making code self-documenting, then, is to put these comments into active code. Putting the why into code is hard; the only places you can possibly do this is in error messages - "number of people must be greater than 0, cannot split bill between 0 or negative people" - stuff like that explains why there is a check. I don't recommend going out of your way to do that; comments are for the programmer and output is for the user. Putting the how comments into code is a lot easier. You can use function names for this. Compare: 

Because is and is . So there is no need to use "if x is true return true if x is false return false"-style statements. I understand why you did it, though: