That A-B cross-link becomes part of the dynamic routing environment of the WAN overlay service (mostly MPLS-o-GRE-o-IPsec) we provide. That design brought us advantages like: 

Thanks, I think I get the picture. Oh, and while we're at it, stay away from "1" in lists, groups etc. It's an unnecessary obstacle for the novice, because - while technically correct and working perfectly - it does not help to see what belongs to what. So I'll be using different numbers (some go up to 128) A full PPPoE, NAT, DHCP setup needs these things: 1. dialer-list & dialer-group dialer-list defines what kind of traffic can trigger the dialer interface into action (remember, those were used back in the heyday of dial-on-demand routing and ISDN, where you would want to prevent all costly channels from being up all the time). You can define criteria that explicitely define which traffic patterns are considered "interesting" - again, remember that the historic router had to be able to dial out via e.g. ISDN for one given range of destination IPs, while for another IP range a modem connection was to be used. To set these criteria, (numbered) access list were usually used. That would look like this: 

2. PPPoE Config: dialer pool and interface Of course, the interface that is going to talk PPPoE needs to be configured. I think you got that one nicely. Howewer, again I suggest to stay away from the "1". 

Log into the box and paste it. If your terminal emulator has the feature, put a bit of a "line per second trottle" on it, like a 20ms delay per line - so no more than 50 lines/sec are entered. cheers Marc 

Now whenever a host with a MAC-address-of-interest connects to any of the ports, it's switchport gets mapped into VLAN B, and to reach anyone else on the subnet (other MACs-of-Interest included) it must go through the inline device. MAC learning and ARPing should be "native" for all systems involved. 3. Dynamic VLAN Assignment & Auto SPAN Port If the inline device is just intended for analyzing traffic (and not for manipulating or blocking), a custom smart port macro (see above) might just be running a user defined macro that adds another line of "monitor session 1 source interface 0/Y", as soon as a MAC address of interest is discovered on a given port. Of course, you'd need a "cleanup macro" as well, that runs after "line protocol down" of a given switch port. 4. Dynamic VLAN Assignment & SPANning one VLAN Use a mixed approach of 2. and 3. Port Macros assign host of interest to VLAN B. Connect both VLAN A and VLAN B to a pair of bridged ports on the router (as above, two interfaces & BVI, or better two-ports-on-switch-module & SVI). Connect the inline device to a SPAN destination port on the switch, and use VLAN B as SPAN source. Whatever talks on VLAN B will be visible to the now passive inline device. Cheers Marc 

The design seems pretty straightforward to me, with one apparent oddity I'd like to know more about: Is there a particular reason not to hook up SITE5 to the WAN directly, but across Site 1 ? Assuming that the "WAN Switches" are CE devices (in extenso: something like an "extranet switch") of your customer's, and are not the carrier's CPEs, why not hook up SITE5 directly to the "WAN Switch", and have it run it's own set of DMVPN Tunnels? With the situation as shown in the diagram, reachability of SITE5 is dependent on Site 1's LAN services. Other than that, I second Ron Maupin's suggestion to question HSRP on the WAN Routers. HSRP only makes sense if the LAN subnet/VLAN is directly attached to the WAN routers. While this is acceptable for a small spoke site with just a single LAN switch (or single stack-of-switches), and little need for inter VLAN routing, I wouldn't do this on a hierarchical switching environment as found at medium and large sites. In that case, do as Ron suggests: Use the distribution switch(es) as L3-switch, providing redundancy towards the LAN as the given LAN platform does (stacking, VSS, VPC-Pairing, HSRP, etc.. ), then run one or two "transit VLANs" or "routed ports" from L3-Switch(es) to one or both WAN routers, and let OSPF run across these links. No need for HSRP on the WAN routers, then, not even towards the LAN side. Oh, and while we're at it, I suggest this: 

As for (R)STP interoperation with MST, $URL$ tells us (Section "The concept of CST and STP interoperation) 

You need to make sure that the dialer interface gets triggered by "interesting traffic" According to ... $URL$ ... you need a dialer list/dialer-group statement with that. 

Of course, if you want your LAN clients to query some other DNS server (like an internal one, or Google's 8.8.8.8 and 8.8.4.4, you can add these to the DHCP pool config). In that case, I suggest to remove the ip dns server and the ppp ipcp dns config bits. 7. NATty things To make NAT work, you need: 

Losing and re-establishing the BGP peering session will not increase penalty for BGP route dampening. Quoting & highlighting from $URL$ 

set the relevant interfaces to "ip nat enable" instead of "ip nat in/outside", and slightly modify the NAT rules. make sure that there is an NVI NAT style outbound policy, or the hairpinnable host won't be able to connect outbound or hairpin to itself. disable ip redirects on the "inside" interface, or hairpinning (at least not from the host itself) will not work. 

Is HP's version of "RSTP" a Cisco-like Rapid-PVST+, is it more of 802.1q RSTP or something like 802.1s MST? In the former case, you have to make sure that "Switch 21" - although all it's user ports are in VLAN21, also has VLAN20 configured, and is actively participating as a bridge in VLAN20's spanning tree (with only two STP interfaces, in that case). If the config is more MST-like, you'll have to make sure that same mapping of VLAN-to-MST-Instance(s) is applied on the given (set of) switche(s). Plus, you have to make sure that the VLAN used to talk MST from switch to switch is available/allowed on all inter switch links (I believe this is usually done in VLAN 1 and without tags). Essentially, this boils down to the same problem, no matter which dialect of spanning-tree you are running. Both members of a such a switch pair need to be actively participating as bridges in the spanning-tree(s) for both VLANs of the given switch pair. Of course, the inter switch links must be configured to allow both VLANs; your diagram suggest that this is the case. Cheers Marc 

There is one particularity about iperf 2.0.x with UDP: Within the limits (CPU, NIC, UDP/IP stack and its buffers) of the sending system, iPerf will send traffic at the payload rate you specify with the parameter (if left out, iperf will default to 1Mbit/s). EDIT: D'oh! Only now I spotted that you are actually using iperf3. I'll leave these comments here, all the same. With UDP, iPerf 2.0.x will not bother nor check if and how much of the data the receiver/server is getting, or even if there actually is a receiver/server at the IP address given in the parameter. [1] iperf 3.x changes this insofar as the receiver/server end no longer makes a difference between UDP and TCP, you just start iperf3 in "server mode". The client will specify if UDP or TCP is to be used, and there will be some form of negotiation between client and server, before the actual test is performed. EDIT: If iperf3 client and server fail to negotiate, the UDP test will not start. However, if negotiation succeeds, the iperf3 client will still send at the configured data/payload rate, regardless if and how much of the data makes it to the server. Therefore, with UDP testing, it is important to check the results at the server/receiver end, not on the client/sender. On iperf 1.7x and 2.0.x, you need to look at the server side output as it is generated there. With iperf3, you can "pull" the server side results with command-line parameter . Suggestion for iperf2.0.x: run on the server side to get 1sec reporting intervals. Suggestion for iperf3.x.x: run server-side and client-side This will also give ou some information about the pps figures of your test stream and of course the packet loss rate, which is the interesting part. [1] Especially this property of iPerf 2.0.x with UDP makes it a tool to use with great caution. Trying to pump a single 50Mbit/s stream of UDP across the upstream of a 100/20 xDSL line will make the entire access line unusable. 

If you are comfortable with advanced NAT setups (Global-to-VRF and the like) , then consider a setup like this: 

Then you'll need some DHCP and DNS bits to configure. We want our router to act as DNS proxy for the clients (forwarding all DNS requests to the DNS server we configure manually, or the ones learnt via PPP-IPCP, see above) We want our DHCP pool to go from 192.168.10.64 to 192.168.10.127, and to hand out some proper information to our clients and set the DHCP lease time to 1 day, 0 hours, 0 minutes. 

In other words: Your test setup and procedure act on the BGP adjacency of the peers. That will not trigger BGP route dampening at either end. If you want to see BGP route dampening at work, you have to make one of the routers send WITHDRAW/UPDATE messages repeatedly. A simple test case for your lab (should work, I am composing this freehandedly, not from a lab): 

Longer: You may choose to switch over from NTP to PTP. There will be some cost and learning curve involved. New NICs, new client side drivers/kernel modules/deamons will need to be configured, debugged analyzed and monitored. (Not only) Catalyst switches will happily transport PTP packets or frames. You may "help" things a bit with a QoS configuration that puts these frames into the low latency/priority queue. This will either require marking the packets them with DSCP46/EF at the source (recommended) or by classifying/marking them with DSCP46/EF as they enter your switching infrastructure. You may need to consult the vendor's documentation or use a packet trace of the given PTP packets/frames to find out what properties of the packet you can use for the matching criteria for classification/marking. From that perspective, it might help to run PTP over UDP/IP, so you can read or set QoS markings from/to a field of the IP header. PTP over IEEE802.3 (i.e. "over Ethernet") might be a bit more difficult to handle in this context, as it might make the QoS classification/marking procedure a bit more difficult. That's aboud all I can say about PTP. I've only come across it once, and all I had to do was making sure that multicast forwarding was working as intended and that the PTP frames were in the priority queue, as was requested by the vendor. A case for NTP: You may also choose to stick with NTP. First, learn about your clients. Those of the "simple kind" (happy with fetching the time once a day and stepping their clock accordingly) can make do with a single server, maybe a second one for redundancy. Accuracy for them will be up to their local clocking system, and how accurate it may ever be. The clients of the sophisticated nature like to discipline (not step) their clock, and they need either one time source, or three-or-more, preferrably not two. NTP mathematics don't work well with two time sources (also see $URL$ Also, these clients depend on talking to the same servers over a long time, so they can learn how reliable their servers are. Having GPS receiver as one time source is a very good starting point. Some suggest a Raspberry Pi with an RTC addon makes a good NTP server as well (in that case connecting to internet based servers over your first ISP). A third small hardware box connecting to some other time source (i.e. a different set of Internet servers over another ISP) will give you the third source of time (a surplus Cisco 800 series router, maybe?). If there is an equivalent to DCF77 ($URL$ in your area, consider using such a radio based source for a fourth small hardware box as well. Then have the simple NTP clients get their time from either of these three at regular intervals, and let the more sophisticated ones talk to all three/four of them. That should get you very good time quality for most of your systems. 

Ron is right: The 16 ports on that module are not "proper" router interfaces. I think they were primarily intended for branch office use, where a second device (i.e. a separate LAN switch) was undesirable. However, if you know what you're doing and why, they can be very useful, even as "cheap L3 interfaces". Cheers Marc 

That should make all Intra-VLAN traffic visible to the device. That might be a bit more than was intended in the first place, so... 2. PVLAN Edge, Dynamic VLAN assignment & looping two VLANs An entirely different approach might be someting along these lines: 

This might not be a great solution (for that, consider running a proper reverse proxy system in a DMZ), but it might work within certain boundaries, and it might work without further infrastructure bits. The "downside" is that you really have to investigate and understand how the application running on the servers actually works. [1] In extenso: Are these short/long-lived sessions? Is it ok not to see the clients public IP source address? Does the application need to reverse-connect to the client (hope not...)? Is it ok for the client to have completely different TCP session parameters (source IP, source port), when "coming back" after a given amount of time, or does (and if yes, for how long?) the server side application depend on these to re-recognize a given client? 

Extended version: With MST (802.1s), only instance 0 is meant to exchange BPDUs. One of the best writeups about MST I could find is this one: $URL$ Section "MISTP vs MSTP" Quote & Highlight: 

SFTP is - as far as I understand it - a bit complex to handle for a low-footprint client, requiring kinda two operation modes simultaneously - one interactive (shell-like, for commands and directory browsing etc), one for transfers (binary), much like classic FTP did. I have yet to come across an SFTP client on a "classical" IOS Router (recent "linux somewhere in there"-OSs like IOS-XE or NX-OS excluded). However, SFTP has a simple sibling: SCP. Most SSH server implementations on "computers" support SCP quite nicely, and halfway recent cisco routers have an SCP client (and server, too; see below). 

So having the root of your MST instance 0 outside the MST region might lead to some unexpected outputs and topologies/trees for instance 0, but everything should still work. However, with your configuration, it probably won't. Please follow richardb's advice to sort out the VLAN-to-instance mapping between core and access. His way of putting it ("so for practical purposes, it's as if you haven't configured MSTP") explains readily why the access switch considers itself root of MST instances 1-5; it won't acccept the BPDUs coming from the core because the hash value does not match. 

4. Default Route There needs to be a (default) route pointing through the dialer interface; I think you got that right: 

Give it a try and see if the dhcp database command also accepts an URI. There's a good chance that it will, if the given IOS version has an scp client. side note / tech babble: We regularely use scp from our management stations to upload IOS images to and crashdumps/showtechs etc from our remote Cisco boxes (), where TFTP and FTP just won't cut it. TFTP suffers immensely across WAN links (with 512bytes per packet, every single packet ACKd; a 500MB IOS Image takes a day to transfer...), and FTP always has the hassle of the reverse connections, availability or lack of passive/active mode support, and then there's the NAT/ALG problem for both of them and don't even get me started on the stubborn firewall admins that won't allow (T)FTP. (I am a firewall admin myself, so I do feel entitled to throw that stone ;-) ) With the SCP server on the Cisco, all you need is an SSH connection to the remote device. It offers TCP's reliability and window scaling capabilities, uses only a single port in one direction, fully NATtable, plays nicely with the firewall admins... And with the SCP client on a Cisco, you can do some clever things as well. 

Generate some traffic (in extenso: ping A3100's IP address) from AS5500. Ensure that this traffic is actually generated from AS5500's interface VLAN1 - probably, there's a command line option to set the ping source address. No matter if the ping works, check AS5500's ARP cache to see if it has learnt AS3100's MAC adress. Check AS5500's CAM table resp. MAC address table for VLAN1. AS3100's VLAN 1 MAC address shold be visible on port 1/0/32. If not - then VLAN1 is not one single broadcast domain. repeat 1-3 from AS3100 towards AS5500. 

That's also a good idea, although the 1400 you had might be a bit overdone. MSS is usually MTU-40, so 1452 might be good enough. 

Here's a few ideas: 1. Private VLAN Edge & Rerouting There's a old feature of Cisco switches called "Private VLAN Edge" (see $URL$ Think of it as "hotel mode", where you want to keep your guests' system from talking to each other, but everyone may talk to the router. The feature is restricted to a single switch (or stack-of-switches), and it doesn't really work across multiple switches. I cant' actually test this right now, but it might be worth some consideration: