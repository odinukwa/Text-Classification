Of course you can expand on that by employing the template pattern for the extra parameter settings. I would also look into extracting the parameters to a "parameter object" instead of several parameters. 

It is very confusing to set a property just to discover that it returns something else just after you set it. Properties are supposed to keep the value you give them. (At least logically) And since your SkipSomeStuff property is public, you have no guarantee you won't access that property by accident before the intended recipient accesses it, and the stuff isn't skipped after all. How about keeping the skipSomeStuff member, but set it using a method called SkipStuffNextTime() or something like that? Nobody will misunderstand the intent of your code that way, and only the code it's relevant for will access and reset it. 

instead of duplicating an existing function. ;) (I like linq, but sometimes, what Jeff suggested is actually more readable) But more importantly: I don't see why you should have to dispose model. Do you have unmanaged resources within the model? If so, shouldn't dispose of the unmanaged stuff and return some plain old Clr objects to you as a model? If the model is adapter(s) for SQLDMO or such, could you translate instead of adapting inside ? 

If you do this, you'll probably see some pattern emerge. I can already see two classes, or rather instances of a- instead of one. Maybe something like Strategy? 

I wouldn't presume the metadata information gathered from reflection as mentioned by w0lf will be handled completely if you reference the Model property directly from the lambdas. 

This makes closed for modification (cannot change price / individual price), but open for extension (can add to price). (Naming and structure in my example could probably be improved, but it serves the purpose) The behavior is still possible to modify, though, so an even better solution would be to have some collection or set of rules you can add to, so you don't accidentaly override without calling . 

Well I'll be damned because it works the exact same way with programming languages. You can write : (or in your case ). Though, hardly expresses a boolean value. I'd rename that. At first I thought about , but that's not really what happens. We want to know if the player wants to start a new game. So I'd name it (or you know, something like that). Console inputs/outputs Do you really need to ask the user to press ? My guess is no. The following might be slightly advanced, but you'll learn something! When using OOP like you did, you want your "domain" objects to be as independent as possible from the environment in which they're being used. In your case, it is very nearly well done. Though, you use the 's methods in the class. There are multiple good ways to fix this but I think the best one would be to think like the blackjack game (lol). The blackjack game doesn't communicate with you. It is observed. When you play blackjack, you are looking at the game. The game itself isn't telling you its state. This sounds abstract and it is. To fix this problem, you need to shift some responsibilities in your code. The class should have methods to request a decision (pick a card or not) and methods to indicate its state. For a quick example, I'd add the following methods to the class : 

That's the final version in my opinion. I think it looks better. Though there's a final problem. and are terrible method names. I know the idea is to copy the Javascript functions, but let's make an exception. These methods names are not intuitive and overall pretty terrible. Maybe something like instead of and instead of would be better names. 

Entity Framework implementation assembly References Model and the Entity Framework / System.Data.Entity assemblies 

Instead of wrapping the proxy creation in a concrete service proxy implementation, I'd write a concrete service factory instead which in turn uses the ChannelFactory. The service factory class could also use an interface for creation, so you can have multiple concrete factories. $URL$ That way your code can continue to depend on the interface only, and you can change the way the proxy is created without writing concrete proxies. You could also have a "local service factory" which doesn't go over the wire. Usage would be something like this instead: 

Makes sense, but you should DRY up your concrete factory at least. Forgive me my rusty Java, but something like this: 

Not entirely sure I got your schema right, but something like this should be possible. (omitted a bit of ordering, and I assume you only have one current year) 

I would refactor it into a plugin that takes the content as an option. Then you will have two instances of "dialog controllers" each with its own events. Have a look at the "plugin with data" example in the jQuery docs. $URL$ You'd set it up like 

You aren't renaming it either, you're naming the parameter for the anonymous function the lambda expression represents. But if you don't like the lambda syntax, there's also overloads taking the property name as a string. 

Put the contents, or all of each if and foreach into their own functions. Unit test the functions. Put everything else into small functions too. In the end your main function should read like a small story: 

I don't immediately see any efficiency issues with your code. It's simple and concise. But I do notice that you don't follow all the best practices for plugin authoring described here: $URL$ I guess you'll do something else than alerting ten times in production? ;) 

It might look like nitpicking (and it might be!) but it improves readability by a ton. Talking about nitpicking, I think your loop could use some spacing : 

The naming is pretty terrible. Snake_Case shouldn't be used in C#. If you can change all those to , it'd be great. Also, variable shouldn't be PascalCased, but camelCased. So . Lastly, try to use only when it's possible to guess the type used by reading the code. Right now it is impossible and it makes the code harder to read/review. Edit : I don't think this code even works. Is an or a ? Or maybe a ? Because you use it in the function, which takes an , but you also check for , which isn't a possible value for . What does that mean?? If you check , you can remove all the checks for that, it'll never happen. 

Now yeah, duplicated code, I know! But sit awhile and listen. :p What's the advantage of this over your current solution? Your first scenario, the one where the dictionary contains the key, can be executed without caring about the . And that's good! You don't want one IL generation to block several calls to the dictionary! Of course, in my case we need to re-check inside the lock if the key was added meanwhile. If so, we return it. Also, nesting 101 : Nesting is bad. Avoid it when you can. In your case, you can afford to remove a statement. Instead of setting your variable and returning it at the end of your method, you should right away. This way you can remove the else. (That's what I did in my example). 

As a sidenote, I'd look for another name than "BaseClass". It doesn't say anything about what it does. 

There's a couple of nice alternatives for you. Extensions If you don't need to encapsulate the instances, you could make your methods extensions for or whatever you've extended: 

I just re-read some comments and realize you need paging too. Add a private int page, and a private int pagesize, then add the multiplication of those to foods[i] in CreateButtons, and swap foods.Length with pagesize. You can have as big an array as you want then. 

Property will expose the current value on postback by it self. You could also expose an event on your control that you refire in the ValueChanged event of the hidden field. 

Overriding the property in modifies the behavior of . Which means you've broken the OCP. Besides, what do you expect to be if you have just set it to 10.0? (Does it even compile when you only override get?) What you could do is employ the template method pattern: 

Even though the code is short and pretty enough, I think you'd benefit from reading about the strategy pattern and state machines. Go ahead and google it for a wealth of resources on good programming techniques. You'd also be much more confident in how it works and how to arrive at those patterns by employing unit-testing and test driven development. (JUnit is a good start) Good luck with your assignment! 

This might be off topic, but if you use switch statements for more complex functionality, you should read this before going further. $URL$ 

More on extensions methods here: $URL$ Inheritance Put these methods in a base class and have the behavior that differs in inherited classes. [edit]Updated to show how the base class can be generic[/edit] 

I have some minor points to add to everyone's answers. Your class fields should be prefixed by as it is the C# coding convention (check comments below!), doing this would also let you not use in your constructor 

You handled a case that your scenario didn't ask you to support. Usually, this is something you want to avoid. Stick to the requirements! If your , you decided to add that element at the end of the list. But is this really the wanted behavior? You should consider throwing an exception instead. Think about it : 

From what you gave us, there's nothing you can do to optimize your query except changing the way your data is stored. Having is a big code smell. There's something wrong in the implementation. Though, you could change this code to be a little less repetitive. Most code is duplicated in there, so let's refactor it : 

Your method could be more performant! Let's work on this first. Using to keep characters to include and exclude isn't a good plan. String concatenation is kind of expensive and researching in a is a \$O(n)\$ operation, meaning you need to go through each element of your string to find if a character is contained. You should use a for excluded characters. The is a collection where each element is unique (which is another good thing for your set) and checking if an element is contained is an \$O(1)­\$ operation, because the elements are indexed by . For your inserted characters, an would do just fine. This will be much faster than using two strings to keep your content. Your variable names should reflect names, not verbs. Meaning should be . 

Here's a C# version using a cross of the template method pattern and the collector pattern. It'll pick up any issues from any derivative implementing the AddValidationIssues method. 

All good answers. I'd like to add my two cents to @deepee1's answer. If you keep the FoodItem class he provides (with a constructor), you can create a list of food items and then create everything else with completely DRY code. You can even easily move the definitions out of the code. Not to mention creating n different UI's with the same "logic". Here's what I'd do: (Forgive any mistakes, long time since WinForms :) ) 

You don't have to use x as the parameter name for the lambda. You can call it model with a small m for instance. 

Or better yet, build the initial list based upon content in a dictionary. That way you don't run the risk of having typos in the switch or the initial setup: 

Notice that I replaced your setter with an method. It's ususally good practice not to replace an entire encapsulated collection using a setter. Although you can validate the entries in the setter, a property should not do much logic other than returning or setting privates. If you have a look at the collections in the BCL, they all expose an method and a method to empty the collection. The method also gives you the option of adding multiple sets in turn. If you need different logic when stuff is added etc, have a look at the template method pattern: $URL$ If you need multiple base classes with differing logic, you could combine the inheritance with the extension methods, or another base class. :) 

Using this, you verify that and are sorted, and that c respects the increment. All you need to verify is that there is no equality. if is set to , 

The first thing that needs to be addressed is the indentation and the spacing, because that's the real issue here. You should line your braces with the start of the line above it, like so : 

Your time format should be a constant. After all, it isn't dependant on any other code in your method. 

It is somehow easier to read and respects the coding standards. Try to keep your constants at the top of your file and keep your order consistent. Let's say you have this template : 

Well, why don't you create an exception that works with this? Something like (You might have a more appropriate/domain-specific exception name!) : 

I understand the point of having thin controllers, but I feel like this belongs in the controller. Imagine if your were in a separate project than your controllers and your services as well. Would you want to create a dependance between the DLL and the DLL? I don't think so. The view models are basically DTO, they shouldn't have access to your services. Though, I don't know if your service calls are expensive, but since you repeat some calls more than once, you might want to keep them in a variable. If they are expensive, you'll get a much better performance, if they ain't well... You'll get... less calls to your service! 

Is weird. returns the dequeued object. So you don't need to use the and you don't need to copy your whole queue in an array. You can work it like this :