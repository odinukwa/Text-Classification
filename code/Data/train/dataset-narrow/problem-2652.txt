One way to achieve it is to find a formula for the maximum damage, and one for the minimum damage, both based on the level, then find random values in-between these. Start by devising 2 formulas: 

I would keep track only of the things that the player has modified. For example, if your player starts at position , you know how to generate the radius around him, so, for instance, tiles through are generated as pink tiles and displayed. Now, since the player only went on tile , you make it as a white tile and keep only this information in a data container (for instance a or a ). If he places an item, you also keep that information in another container. (Or you could have your data able to keep track of both.) Then, as your player travels, you add your data about the tiles he travelled. At the same time, when you "create" a new row or a new column, in fact, you just show temporary information that is easy to generate "on the fly" (the pink tiles), and then you query your data containers to check if he's already been into the "generated" tiles, and modify them accordingly. For instance, your player goes from tile to tile . This creates 4 white tiles in your data container. When he steps back on tile , the column 0 has to be re-generated. Which you do: all the generated tiles will be white tiles, but since you know you'll display tiles through (the whole column the player can now see), you'll query your data container and see that you have to put the tile at as a white tile. You'll also query you items container to see if he placed an item on one of these tiles. Here is why I'd do it like that: 

I think the center calculation is off as its not taking into account the position of the paddle at all. Shouldn't it be something like (posY + (height / 2) +/- fudgeFactor) or the like? Depending on where 0,0 is on the y axis this could cause one of the if's to always return true as it is comparing against a location based off of the paddle always being at the 0 y location. 

While probably not that optimized, this would move to the next frame when the time value was beyond the sum of the durations of each frame. 

If you are just making a demo video then turn your game engine into a rendering engine. Have a very set time step, no real time involved in this at all. Then instead of rendering the game to the screen, you render each frame to a file.. Now clearly this will require you to be able to script or direct the action that you are trying to capture, but this is a -very- common way demo videos are captured from yet unreleased games. Again, this may require additional development work to accomplish the scripting aspects of it since you are pretty much removing real time from it. Hope this helps. 

Some people tells me I misunderstood the question, but others tell me that its a nice answer, so I will let it stay, eventhough its not providing an answer for an alternative Flash editor - sorry about that I'm currently moving FROM Flash and Actionscript 3.0 to Unity3D Framework. Its a GAME-ENGINE made for GAMES and there is a free "Indie" license where you get 95% of the engine features for free forever. You can later on, upgrade your license to PRO (1500$ or something) and then you will be able to use the latest game technologies for bloom-effects, realtime shadows etc. With Flash I had to develop everything from scratch and spend a lot of time preventing people from decompiling my sourcecode so they could cheat. Dont take me wrong, I like Flash, but it wasnt made for Game-development, eventhough its possible. Unity3D has never been made to make "banners" or "movies", but is a pure crossplatform real-time game engine. You can choose from webplayer (small plugin around 2 mb install) that works on both MacOSX and Windows. Or you can choose installer (real Windows EXE or similar MacOS bin) and if you buy the license, you can also transfer the games/applications to mobile devices, consoles like Xbox, Playstation and Wii. So, if you want to make sure that you develop on a gameplatform that also is "allowed" on Steve Jobbs iParanoid system, you should consider switching to Unity3D platform as I currently am. www.unity3D.com for more info. 

What is could give you an idea on the fitting. A distance of 0 would mean the user was straight on the line all the time. Now you'd have to do some tests to see how it behaves in your context. And you might want to amplify the value returned by by squaring it to penalize more the large distances away from the line. I'm not familiar with unity, but the code in here may go in a function. And you might want to add somewhere in there some code to prevent registering a point if it's the same as the last one registered. You don't want to register stuff when the user does not move. 

Usually, (ok, maybe not usually, but at least for ODE (Open Dynamics Engine)) the physics engine does 2 different things: 

From what I can fetch of what you've said, you're using unity with a Transform object which contains a rotate and a translate. I'm not familiar with unity but here goes: The documentation does not state what happens if you set a rotate and a translate on the same transform. But you could specify explicitly what to do by adding children transforms: first set the translation as the parent, then the rotation as the children transform. You have to make sure that the rotation is always made after the translation. 

Depending on what sort of game you are trying to make, you will need some place to put the actual game. A Facebook App points to external websites for the canvas part of the application. This is your own webserver/webhotel and what ever language your webserver uses ought to provide you with some database connectivity. So if you eg. use PHP on the server, MySQL might be the datasstorage. If you have a IIS/ASP/ASP.net server available, SQL-Express could be your answer. But with most server-side languages you can also remotely connect through IP to another database server somewhere else. You can also use API's to connect to webservices that allows you to put/get data from their storage. Some are SQL, some are Table and some are XML based, but if you have basic CRUDL functionality at them, you dont have to care about how they do it. Amazon AWS has something called SimpleDB which is a XML kinda storage. It has a great API too, but again, it all depends on your needs, economics and technical skills for implementing this. If you use Flash for a client, then you have the issue of how to communicate with a server to get the data in and out from the client. For this you also need the server-side "something" that can serve your data as needed and receive "POST" data from the Flash-client. So once you have a server, you know where you can put your data. To my knowledge, Facebook does currently NOT support native data-storage, but perhaps others can elaborate on this subject. 

Most production level game engines have what is known as a Hardware Abstraction Layer. This is a generic API that the game engine can use to talk with hardware with out having to know which hardware that is. They just call SoundManager.PlaySFX(SFX_ID) or the like. Underneath in the sound manager however it will know which hardware its actually working on and make the appropriate calls to get the sound effect to play. This allows the engine to be developed using that layer of abstraction so it can run on any system provided an API is provided for that hardware that matches the abstraction. EDIT: As noted by Johnathan, an API for each platform you want to run on is required. And to Trevor's point, when moving from a high memory system to a low memory (Worst for me was PS3 to PSP) you may have to tackle the different hardware limitations. Luckily for me I have not had to rewrite an entire system because of a platform, but I have had to go through and optimize objects to take up less of a foot print. The other side of things is in the art area where resolutions of textures or models and the like are different. The assets of the game can be built towards a specific target so a PC gets its wav files for its sound effects while they are turned into the specific formats that the PS3 support and the like. Hope this helps. 

The ScrollPos is the "fraction" of a tile. The viewOffset is the current screen/view position in the tilemap (left side of screen) Array/tilemap is needed pr. "row" of background. You could do this in multiple levels too, to produce a "parallax" depth - and with 3D this might look even more cool. 

Keep rewarding me I like being rewarded for my actions. So loads of small bonus items, small upgrades, gold/points something that immidiately gives me pleasure so I want to continue grabbing more and more. Dont punish me with time-limits What I dont like in a game is when the developers finds it too easy and uses TIME as the only thing keeping me from completing a level. That is bad level design. You could use time as a "bonus", but never as a punishment. Sometimes the phone rings, the dinner is ready or even a toilet has to be visited. A pause is not enough here. If I am close to the goal and the level ends just because I was 5 seconds short, there is not much reason for me to try once more for 7 minutes. My approach is to keep the player happy and occupied even in stressed situations. So, none or a minimum of "Whoops dead, replay the last 5 minutes to get right back here"... instead, make it attractice to try again, not a punishment. 

Basically Update() updates its internal state so advance the animation to where it should be for its time stamp, if it reaches the end it should then go to the next animation (mark it as active, deactivate this one.. however you want to do that part based on your component systems flow). This lets you put your FSM in to data, the animations know where they exist within the data they have loaded (Good for having a single 'Jump' animation but where you want the jump to have 'Jump', 'Jumping', 'Falling' and 'Landing' at different key frame indexes within that data). Again, end of the week brain dump to help get you going in the direction you want to go in :) I hope this helps. 

Along the same lines of what Adam said, you will want to get very specific with this. Pick a specific story and then see if it is available in the public domain. Otherwise this is too broad of a question to answer and it can get tricky with authors assigning their books over to estates to get extended renewal rights and such. 

From this I can find out where the walls are. I can use this for collision detection, I can use it for pathfinding and I can use it to draw the actual map. You just make a function that will return what kinda "tile" is on a certain coordinate. 

You can tell Unity3D to use isometric rendering in the camera settings. Secondly, you dont use isometrical graphics on a plane, you just build the world in 2D/3D and let the camera make it isometric. I know this isnt a direct answer about rotation, but if you use my approach, your problem is solved. :-) I quickly did a Google search on the topic and found this tutorial on YouTube: $URL$ I also got some articles/tutorials on it, I think this one could be of usage for you too: $URL$ Remember, most of the time, someone else has had the exact same problem as you, so Google first. :-)