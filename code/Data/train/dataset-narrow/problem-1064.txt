Always check before accessing . is only guaranteed by the standard to be non-negative, not non-zero. is also special. 

That's fine. I was just pointing out how to use the adaptor pattern. In my example, I could use any container with , , etc (like plf::list). 

Don't add redundant or to conditions. Avoid the verbosity and reduce the opportunities for mistakes. Don't say in comments what can be clearly stated in code. Compilers do not read comments. Comments are less precise than code. Comments aren't updated as consistently as code. Consider using an actual error-handling mechanism for those situations that require them. In this example, not finding an element in either an empty list or a populated list should return the same value. Returning one past the end is out the standard library does it. In your case, returning a union type (, , , or the variants) may be better. 

Is supposed to be callable by those that use your sort? If not, hide those internal implementation details by using a to signify that. parameter takes a of type . Consider using a similar type (, ). 

Just think about this: One does not simply move a object. By always 'ing, you are forcing copies anywhere a move would be better. 

I have written a crawler in python with the combination of class and function. Few days back I saw a scraper in a tutorial more or less similar to what I did here. I found it hard the necessity of using class here. However, I decided to create one. My scraper is able to traverse all the next pages and print the collected results errorlesly. If there is any suggestion or input to give this scraper a better look, I'm ready to comply with that. Thanks in advance. Here is what I've written: 

I've written some code for the purpose of scraping names and urls from several links found in the left sided bar in a webpage and populate the data in several sheets [also giving each sheet a new name taking a customized portion from url] in a workbook so that things do not get messy and the data can be located separately. I tried to do the whole thing accurately. Here is what I did: 

I had a desire to make a recursive web crawler in vba. As I don't have much knowledge on vba programming, so it took me a while to understand how the pattern might be. Finally, I've created one. The crawler I've created is doing just awesome. It starts from the first page of a torrent site then tracking the site's next page link it moves on while extracting names until all links are exhausted. Any input on this to make it more robust will be a great help. Thanks in advance. Here is what I've written: 

Class specific details like aliases should be kept in the class or wrapped in a namespace to prevent global namespace pollution. Why ? is typically reserved for shared-ownership resource management and that has a cost associated to it. They are twice the size of a raw pointer as the object stores both the raw pointer to the resource and a raw pointer to the reference count. Reference counting must also be atomic to handle multiple reader/writers, resulting in slower increments and decrements. If you want to use a smart pointer, C++ provides for exclusive-resource management and should typically be the default smart pointer unless you need . 

Prefer high-level abstractions over low-level handcrafted code Functions that try to do too much often become hard to read, extend, test, and debug. Functions should be focused and short. An easy way to tell whether or not you should refactor your code into smaller functions is the "And"-test. Describe what your function does. If your descriptions uses and, then you should consider splitting the function into its parts. For your selection sort, you would describe it by: 

as little as possible and avoid in library code. Most implementations will include static constructors into every translation unit whenever you . Don't impose this cost on those that use your library. is used your test code, so you should relocate there. 

I've written a script in python using requests module in combination with selenium along with regex to parse email address (if any exists) from any website. I tried to create it in such a way so that it can traverse javascript enabled sites as well. My crawler is supposed to track any website link (given in it's list storage) then find or etc keywords from that page and parsing the matching link it will go to the target page and using regular expression it will finally parse the email address from that page. It scrapes the email address along with the link address where it parses the email from. I tried with several links and most of the cases it succeeds. I know it's very hard to create a full-fledged one but I tried and it is not despairing at all. Any suggestion to improve this crawler will be vastly appreciated. Here is what I have written: 

I've written some code in vba to scrape names and phone numbers from a webpage that has spread across some pages I don't wish to know of. The main interesting thing with this scraper is that It only needs to know the first page number then it traverse across all the pages and fetch the information I've mentioned above. I tried to make it error-free. Here is what I did: 

If your default constructed is supposed to be equal to zero, you should initialize the denominator to 1. If you are going to initialize your members to constants, prefer the in-class initializers. 

is fine since you are not templating but want to support varying dimensions. I'd only use if I were using templates. As for the , I'm a believer that if you are need a specific sized value, you should use the appropriate type from to maintain portability. 

Note: and are C++17 library additions. You can write your own infix iterator if you want to use it now instead of waiting. 

The call to may have an effect on stream efficiency. Rather than researching which streams behave poorly with flushing, explicitly state your intent in code that you want a new line. 

Keep functions short and simple. They become easier to understand, test, and reuse. Ideally, your would refactor the median calculation and partitioning into their own functions. Example: 

Calculate might use a function that flattens a range of equal elements into an element count via . For gather (a custom partition), we could use that count function with either or ) distinct modes with the modal frequency (in-place). Which you decide to use depends on your need for stability within the two partitioned sequences. Perhaps create both and name prefix one . 

I've written some code to parse the names and phone numbers from craigslist. It starts from the link in "m_url" then goes one layer deep to parse the name and then again another layer deep to parse the phone number. Note that it goes 2 layer deep only when it sees "show contact button" on that page so that it can unveil the phone number from that link to scrape. It only prints the result when it sees the button on that page. That's because there are around 120 names on that page but it prints only those containing that specific button. Sometimes when I come across such "show contact button" link within a page from where I am supposed to harvest data, I get frightened. That's why I tried to work on it. It works smoothly now. Any improvement on this script will be very helpful. 

I have written some code in python in combination with selenium to parse all the names from facebook friend list. It was hard to manage the pop up notification and the process of scrolling to the end of that page. However, my scraper can do that successfully. I tried to do the whole thing very carefully. There are always rooms for improvement, though. here is the working code: 

Be safe and always brace your single-line body scopes. They can't be misinterpreted by maintainers (both human and machine). 

Prefer initialization to assignment in constructors. Some class types cannot be assigned; some cannot be default-initialized, some might be expensive to assign instead of initializing. 

Consider a sequence of distinct integers. $$S = [1, 2, 3]$$ For , the mode is the empty-set (no mode). 

Prefer as it's self-documenting and will appropriately use bulk copy instructions like / instead of multiple individual assignments. 

Note - Each member function should instead call a non-member free-standing function, but this review is getting pretty long and I'm trying to keep this example simple. By using a container type to automatically manage the memory, I don't have to provide a destructor, copy operations, or move operations. The compiler-generated special member functions all work correct by construction. Think about how you would implement a queue using the adapter pattern. 

Is there ever a situation where either or exists while the other doesn't? What happens if the callee passes a that is ? 

This could be further improved using a compile-time (Boost, C++17) to represent your vowels and a (Boost, Sprout, maybe C++17). 

Declare variables as you need them. Every file should be self-sufficient. Make sure you the headers for components you are using. Do not rely on implicit inclusion. Check that successfully read a value from the stream. Rather than jumping through the hoop of conversion, just read the value as an integer. 

I've written a script in python to scrape e-mail addresses from different pizza shops located in los-angeles available in yellowpage traversing multiple pages. It is able to go one-layer deep and dig out email addresses. I believe, this crawler has got the ability to parse all the emails from any link no matter how many pages it has spread across. Just needed to adjust the last page number in the crawler. Here is what I've written: 

I've written some code in vba for the purpose of making twofold "POST" requests to get to the destination page and harvest name and address from there. There are two types of structures within which the desired results lie. One type of structure holds name and address in a single "th" storage and the other holds name in one "td" and address in another "td". So, to handle this I had to use error handler to get the most out of it. By using xmlhttp I could not get any result so I used WinHttpRequest in my script to get the result by enabling redirection. My script is running errorlessly at this moment. However, any suggestion to improve my code specially by handling error more efficiently will be highly appreciated. Here is the full working code: 

Make sure you understand the requirements of the problem. From the problem page, we see $$ 0 \leq K \leq 1,000,000\\ Subtask_1: 2 \leq N \leq 2000\\ SubTask_2: 2 \leq N \leq 100,000 $$ Whenever values are within a sane countable range, just use . Once a number gets to a point you wouldn't want to personally count to, say a couple thousand, then move to the fixed width types provided by (, ). For this problem, and are best represented at 32-bit integer types () instead of (which is at least a wasteful 64 bits). The worst case scenario for this problem is that every pair meets the hardiness limit. The first few \$N\$'s produces counts of \$[1, 3, 6, 10, 15, 21]\$, which would be the sequence for the triangle numbers. \$N = 100,000\$ would be the \$99,999^{th}\$ triangle number for our sequence (started at 1). To find the \$n^{th}\$ triangle number, we can use the formula $$ T(n) = \frac{n(n+1)}{2} $$. So, $$T(99,999) = \frac{99,999(100,000)}{2} = 4,999,950,000$$. Use of a 64-bit integer would be more appropriate since a 32-bit integer cannot store that worst case count size. 

Be explicit with your expressions. Evaluating your conditional on every loop may sometimes be needed, but those cases are rare. Most of the time, we just need to evaluate once and compare to a constant.