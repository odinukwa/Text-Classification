Now we can add the partition from the temporary installation to the volume group, so we can use it to expand our logical volume for this system or for snapshots. 

There are many things mixed up and unclear. I will guess and try to sort it out. I assume you have this configuration: 

As written in the first line of it is generated by resolvconf. If you want to set a static domain name server you have to uncomment in the line: 

Of course this will not fit your specifc needs. You may need to start other services and start your script before or after them. This can be defined in section . There are many examples out there on google. Please have a look at them. You may look here for starting after "network-up". 

In on your raspi you can set the to one of for your ssh server (man sshd_config). I suggest to set it to one of the debug level, restart the ssh server and look at the logging files if you can find the reason why the connection is refused. 

@I. Patel wrote in his comment: "We figured out what our issue was. We had downloaded a dropbox uploader file onto the user pi, but when the pi was running it was using user root. So we had to change in rc.local to make sure the script was being run as user pi and not user root." 

To fix this problem I tried to use the as root parameter in but Raspbian does not boot with this. Is there any other usable partition identifier for the root parameter in than ? 

From your end-point you should be able to ping your raspi on this side. This should always work. If not you have a general problem with your connection e.g. a broken ethernet wire, loose plugged in ethernet cable into port, wrong drivers for your interfaces or something else. 

This is a typical multihoming host. Let us assume there is no routing between the two interfaces so your raspi is not a router and we do not enable . For example is connected to network 192.168.0.0/24 and is connected 192.168.1.0/24. When needs an ip address this interface broadcasts into its connected network: "I need an ip address!". If in network 192.168.0.0/24 is a DHCP-Server will get an ip address, e.g. 192.168.0.10. The same will do. If in it's network 192.168.1.0/24 is a DHCP-Server it will also get an ip address e.g. 192.168.1.10. If there is missing a DHCP-Server in one of the two networks its interface will not get an ip address. to workaround this you can give a static (fixed) ip address, or setup a DHDP-Server in each network, or install a DHCP-relay (not easy). When both interfaces have their ip address and you want to connect to a host with ip address 192.168.0.111 it will automagically go through (the kernels routing table specifies this). A target host with ip address 192.168.1.111 will go through . This is what you mean with "split the traffic between both interfaces"? What is with any other target host that have neither an ip address from 192.168.0.0/24 nor from 192.168.1.0/24? They will go to the default route, e.g. . This specifies the next hop 192.168.0.1, usually your internet router, and the interface it should use. To check this use the commands: 

By default in there is enabled so it will get an ip address if there is a dhcp server on the network or will use a link-local address from address block . If you haven't changed any other entries in then simply comment the 8 lines you have changed by setting a at the first character in the line and reboot. Then you should have the default configuration. 

As you can see screen is started so you do not see any output. This is from options . To see some output from the running program you have to: 

You want to run a script/program at startup without login. This is usually done with a service and managed by . This isn't really a raspi specific question but here is a very short snipped to give an idea. Create a new service for : 

comes with , the new init bootup system and replaces old style init. For compatibility reasons and for old software not knowing about , the init is genereated by . says: 

Seems you are running into this trouble. I think the best alternative is to use 3. Proxy ARP on OSI layer 3. I suggest you look at [4] and try it because: 

The important part is . You can fiddle with the timeout. If it count down you cannot connect later to WebDAV but it goes on in boot. B.t.w. maybe it is enough for you to add to the options on your WebDAV entry in ? And may also help if you can connect later to the WebDAV. 

references: [1] Run script to setup Socks Proxy on Pi Startup [2] Running a script after an internet connection is established [3] Python script run from crontab does not recognize USB drive mounted later [4] No access to USB port, when running python script on boot [5] Python script does not run when called by service 

The lost pings are not a uniform distribution over a time period. They stop for many seconds and then go on. This is a typical example with lost pings between and : 

that you compare with . It seems we are doing different things here. Do you use the same as I do? If I do that, I get: 

Seems there is no problem at all with your Raspberry Pi. A constant red light, the PWR led, indicates that your raspi is properly powered up. With a bad power supply it would flash below 4,63 V. So you do not have to worry about your power supply with 1 A output. It's enough in this case. For further information look What do system LEDs signify?. With a display and keyboard attached you should see that your raspi properly boots up. 

Could it be that most people use wifi and therefore this failure is not detected? I've searched for notes to my problem and have found some questions with similar problems and no one has a solution. Raspberry Pi Ethernet connection ethernet internet connection stopped working RaspBerry PI 2B loses ethernet connection Why the Raspberry PI loses the ethernet connection? (also in comment @Fran Marzoa) Ethernet connection drops after several seconds (comment from @Suncatcher May 17 '17 at 9:33) Internet connection impossible through PC via Ethernet Share WiFi connection through ethernet Raspberry Pi 3 with CentOS no SSH without a keyboard With google query raspberry pi stops responding to ssh I find many other hints to this problem. Ensure it's not a problem with power supply I use a dedicated power supply for raspberry pi with 5.0 V / 3.0 A output connected to the micro usb power connector on the raspi. Except the ethernet cable and a for the serial console there is nothing else connected to the raspi. Ensure it's not a bad ethernet connection I use high quality double shielded CAT 7 ethernet patch cable. To test the connection I replaced the raspi with a laptop and do the ping test: 10.000 packets transmitted, 10.000 received. Ensure it's not a failure of the used hardware I use the same new class 10 sd card with the test program on two different Raspberry Pi 3 Model B and on a Raspberry Pi 2 Model B. It doesn't make any difference. I always have the same packet loss. Ensure it's not a bad sd card I flashed following sd cards with the test program for the ping test: sd card class 2, 4GB sd card class 4, 4GB sd card class 6, 16GB sd card class 10, 8GB sd card class 10, 16GB It all makes no difference. I always get the packet loss. Reproducible setup With this combinations of possible parameter it is not easy to get a reproducible setup and it is not said that this is valid for your test environment. For me I found to have: 

For your second issue ` You need to add this part of the program from the tutorial that is missing from your copy. Obviously the comments (lines starting with "#" aren't required, but the remaining lines define some constants including ). 

Update: Success! I've recreated your problem! I get your results when I run using LANG=de_DE.UTF-8, see below: 

The source of my problem was that I was overclocking my Raspberry Pi. According to the RPiconfig wiki overclocking can cause file system corruption on class 6 and class 10 cards. I turned off overclocking completely and was able to perform extensive writes to the SD card using With overclocking turned on I would get a write timeout error a few minutes into the write test. 

My first idea was to use OpenVPN client and OpenVPN server to have your remote Internet connected Raspberry Pi VPN into an OpenVPN server on your home network. However after reading some of the details to get this working I decided to look for a more simple solution. I found this article that shows how to use OpenSSH installed on the remote Raspberry Pi to SSH into a machine on your home network and then have your home computer create a local TCP port (2222 in the example) that would automatically get forwarded to the SSH port (22) on the Raspberry Pi. Here's another article that describes the same process and even shows a recommendation to have a CRON job create the SSH connection from the Pi every 10 minutes in case the connection every breaks. Of course, the computer on your home network needs have an SSH daemon installed and your home firewall needs to allow that computer to receive in bound connections. You should be able to easily configure your home firewall to forward some unused TCP port such as 9099 and forward that to port 22 on your SSH "server" on your home network. Then you would need to use that port with the option on the SSH command running on your Pi. For the 2nd article the command would be: 

Perhaps your formatting in your question was wrong, but the code you show doesn't have correct indentation for the lines starting with . Python uses indentation to denote blocks. Without the indentation the lines are not a part of . The code below shows the correct indentation. 

Even though the PIR device should assert a voltage or ground depending on the state of the device, you should try to add to your call as does one of the examples I found using Python. In fact, the C code you link to appears to also do this (although the C code sets ): 

According to this article you can add support for HFS+ (Apple's proprietary file system for MacOS) by executing the following command on Raspbian: 

I vaguely recall getting errors when trying to run an exectable that was built for a different processing environment. 

You get a message that you try to install a virtual package and you have to install a concrete package. You find a list of concrete packages. Install the concrete package 

The timelapse option says to take a picture every milliseconds. By using you're specifying to take a picture every ~999 seconds. Try using a smaller number such as to take a picture every second. I do know that there are issues that cause the camera to hang such as specifying a very-long exposure, see $URL$ for more details on that issue. 

There are many remote control quadcopter, drone, etc, projects that use the Arduino family of single board computers. Here are three links to one that has fairly detailed instructions and parts lists. You should be able to get ideas from this and other projects to help you develop your project. $URL$ $URL$ $URL$ One comment, since you say that your electronics experience is limited you may want to consider following some more simple Arduino or Pi interfacing projects such as interfacing to distance sensors. Here's a link to some simple interfacing projects from SainSmart that helped me. One challenge you may have is that the Raspberry Pi GPIO pins are strictly 3.3 v while many of the sensors and relays may not support. You may also want to consider using a Raspberry Pi and Arduino in combination, with the Arduino handling all of the interfacing and the Pi doing all the CPU intensive work. There is a GertDuino board design by Gert van Loo to be an Arduino board designed specifically to interface with a Raspberry Pi. 

Once you connect this USB adapter to your Pi with the SD card inserted you should be able to access the information on the SD card as a FAT file system on the Raspberry Pi. You can also just connect your Raspberry Pi OS SD card to your work PC, however, without modifying the standard Pi OS SD card layout you will only be able to write files to the FAT file system. You can also repartition the SD card and create a second larger FAT partition and file system for large file transfers. However, by using a second SD card and USB adapter you should be able to move the SD card between the Pi and your PC without having to power off or reboot your Pi. That being said you would need to unmount the SD card from the Pi before removing the SD card from the Pi. 

My answer assumes that the question is how do I connect to a Raspberry Pi using an Ad-hoc wireless connection. I found this posting that gives an example of how to configure a Raspberry Pi to connect to an Ad-hoc wireless network: 

Since you can write unencrypted data to an SD card you can use an SD card USB adapter to connect the unencrypted SD card to your Raspberry Pi. Below is a picture of one such card. Here is a link to a web page that describes this adapter in more detail. 

Reading more on this you may need to set . This this comment for more information on when to use versus : 

I recommend that you copy all of your data off of this drive to another hard drive before it fails completely. It is possible that it could be the USB connection on the Pi instead of the drive. Does the drive behave like this on a different computer system? Again, I strongly recommend that you backup any irreplaceable data on this drive before it fails completely. If you have another USB drive I recommend using . I use the following command to backup one external hard drive to a 2nd device on my Pi where is the mount point of the 1st drive and is the mount point of the 2nd drive. can recover from an interrupted copy in case your drive disappears while performing the copy. You should be able to just power cycle failed drive and perform the copy command again. should pick up where it left off.