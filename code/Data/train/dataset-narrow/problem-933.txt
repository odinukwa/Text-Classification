Please stop using and . This is like reading old C code. Modern C++ rarely uses and practically never uses (unless you are building stuff at a very low level). You should be using containers or smart pointers (always question the use of new and if you see a delete you are not using the facilities of the language). 

A standard move is simply a swap. I suppose you would need a safe swap. Which would be doubly hard as you run into race conditions. But there is always to help you with that (But its an extra step). 

Code Review Namespace It would be nice to put your code inside its ownnamespace to avoid potentially collisions. would seem like a good general name that would be reused by other people at some point. Style This is minor. But most C++ developers put the beside the type not the name. This is the reverse of the standard C style which is to put the beside the name. 

OK Assuming you need the "Assigned Table" to support the many to many relationship of a voter to address. 

I bet the SSL layer is already buffering this. There is no point in doing it twice. But its always worth reading the documentation to check. 

The member seems to be used as a temprary. I don't think you actually need it as a member. Declare a local variable in each member. 

Note: std::tuple also implements so it is useful to implement the strictly less than operator. Did a teacher punish you for wasting space in another life? 

Maybe an exception would be a better idea. That way the user has the potential to recover but if they don't specifically check then the application still exits like assert. Also asserts can be turned of. So there is the potential that production code you would get illegal access to the underlying vector. Why not have the same test on pop() rather than silently failing in this situation? 

Thanks. I have been trying to learn about bloom filters. Had to do some research before the review :-) Code Review Hash Function This is an old C style typedef. 

I would say that is the perfect way of doing things if you were programming in C. But since you tagged this as C++ I would say you are doing it wrong. Rather than having a pointer to a function I would set an animation object off your sprite. Then you can call the animation step method on this object. Since it is an object it can hold state as required. Change: 

Note: You basically relied on the rule of zero. When you need to implement the rule of five (three). Rule of Zero: You don't do resource management because that is done by a resource class you use (in your case std::shared_ptr). The default constructors/assignment/destructors use the members versions automatically and thus save you from doing work. Rule of Five: You override the default constructor/assignment/destructors to handle resource management and define the copy/move semantics of your class. Leading Underscore. Your use of leading underscore is technically fine. BUT the rules for using a leading underscore are more complex than most people know so prefer to avoid its use. Also it looks ugly as hell. If you are trying to separate local variables from member variables a better technique is to give the variables obvious descriptive names. Error: 

But testing the and values before calling makes the code more difficult to read. More traditionally you test to see if the is null before you start and simply return. Also you simply print the value. Why not pass a function that is called for each value that makes the traversal much ore interesting. 

This only works if the type can be constructed by passing (since NULL can be converted to 0 anything that takes an integer can also be constructed). If you there is nothing to remove from the Queue then your code (that calls the Queue) has an error in it so in this case you should be throwing an exception of something along these lines. Overkill This is a lot of extra work: 

A trick that is illegal. Also I am not convinced this does not break the underlying priority queue. As the top value when popped is unwound out of a heap using the compare operation that inspects the internal members of the object. Its not until it is removed from the heap that it is removed from the underlying vector. Really not much else to review. I am not sure what performance things you expect us to find the code here has very little to do with performance. 

Here you are potentially leaking . At every return point you need to make sure you clean up any allocated memoty. 

If your destructor does nothing then don't declare it. The compiler generated version will work perfectly well. 

These identifiers are traditionally reserved for . Don't use their namespace it dangerous. Interface Semantics What is the meaning of this interface? 

I would hope so. Your tests sets are relatively small. Haw long does it take to scan the whole library of congress would be a better test. Final Version: 

But what if the type T (stored in storage) is not swappable at the byte level. Very probable (that's why we have copy/move constructors). So when you do the swap here you should use T's swap. 

This would allow you to abstract away the windows implementation into a sub class. A future developer could then add the appropriate definition for a Linux or apple implementation at a latter stage. Some code in the constructor failed. 

Normally I would go with boost::ptr_vector (as it exposes its members as object references rather than pointers) but in this particular case I would go with a vector of smart pointers (because I want to manage the pointers in this case). No need to test for NULL before deleting if (*it) { delete * it; } Just use:: delete (*it); No point in calling clear. The destructor is about to destroy this object any way. By putting this here you are making the mainter think that there is something none obvious going on here. 

It is also a good idea to define the streaming operators for most classes. This allowsd you to serialize and de-serialize the class to a stream (file/string etc). So now the class looks like this. 

Problem here is that you are starting from 1. arrays/containers nearly everything is indexed from 0 and you can access the elements 0 -> (size() - 1). So here you are starting at the wrong point and going past the end of the string. But as mentioned above you don't even need this as you can replace the loop. 

Deprecated Code: This code was obviously writte to conform to the original (rather than the more modern ). You can tell by the use of . 

You are using fprint() rather than std::cerr (and your error messages and clean can be better handled by exceptions). Inside glxdate them members 

You can do it in one line if you really must. But I find it easier to read when you split it up a bit. Note: This is still not as comprehensive as those done by the C language as a decimal point must be followed by a digit but its pretty good. An equivalent FLEX file 

This is a follow on to a previous question: Part 1: Signature All the code I am submitting here is available in github 

Where you use I would prefer to use (and use pre-increment). Not a big deal but I like to keep all the loop control in one place 

While we are taking about types. The and the are part of the type information so they go with the type not the object. This is the inverse of how programmers do it. 

Now I know writing all this code to do this is actually very daunting (and a large project beyond what you wanted to do). Especially since you can move all the difficult work out to . But I bet there is also a extensive set of unit tests that exist in current C compiler implementations that we could steal. Then we could set it up as a community project and get people to implement parts and slowly get all the unit tests to work. 

First: Crappy indentation makes it hard to read. Your algorithm seems unnecessarily complicated. Why not work out how many items you want to serialize and just serialize those items. 

Basically you are going to cause headaches for your self down the road because you have expose the implementation details of how the graphs stores its data. People now have to use this to write their functions. Lock down your member vaiables and provide access to the class via methods to add nodes and edges. Visitor Pattern You should also look up the visitor pattern. This allows people to write graph traversal algorithms without knowing details about the graph. Stop using 

So the first object we receive above (with the call ) from the server is . The client then starts a Requ/Resp cycle (with the call ) sending a object back to the server. Note: Normally we use the to send messages to the server, the difference between this and is that former resets the package number count (at layer 2) to zero before starting the interaction with server since we are continuing a discussion started by the server we don't want to reset this count to zero (this is the one special case). If everything goes well then we should get returned. BUT the server may want to change authentication protocol in which case it will return a asking the client for better authentication. Currently this client does not support that and will throw an exception (A fun task for somebody that want to try :-) ) You will notice that the object contains all the work for encrypting the password for transport to the server using some random key data provided by the initial . RespPackageHandShake.h 

You do it all correctly yet it is still broken. Because the calling code does not check the return value. Yes internally within a class it is absolutely fine to return status codes (because you do not expose the interface publicly). But you must also make sure you do actually test the result codes. Note: It is never (very rarely) OK to expose status codes that need checking publicly. As we can see in the C world (were this practice is the norm)it is so easy to not check the error codes and thus invalidate any following code. You should write code so it can not be used incorrectly which means forcing your users to do the correct thing (or the program exits (exceptions)). 

As a user any dynamically allocated memory should be managed be either a smart pointer or a container. Since you are writing the container it is worth looking at writing the memory management to go with it. 

You should also check to see if they actually worked and returned a good value. One of the major problems with C code is forgetting to check the result of a call to make sure it actually worked. Scanning. This fails if the input is an empty line. (it will not remove the on empty lines. 

Summary: The code wraps functionality into a node object that should probably be contained in a higher level construct (like the list object). There are a few clues in the code that indicate that this is a work in progress to teach concepts (so we can forgive that). Way to many comments for real code. They clutter things up and make it hard to read (But OK since it is part of teaching course). This is just lazy Avoid if at all possible 

I think your whole approach is very C like. Personally I would define classes that represent the fundamental things you are representing and define input operators for these things so that they can be read directly from the input stream. This is what I would do: Note: I am assuming extra white space is acceptable. If it is not then modifying the code to use is trivial. AMPM 

My favorite container the list. Even doubly linked to make it more fun. Issues in your current code. You don't implement the rule of three/five. Any class that manages resources needs to correctly implement the rule of three (optionally the rule of five). Otherwise you will have issues because of the compiler generated methods. If you do not define them the compiler will generate the following methods: