At first I thought this might be working as designed or some artifact of L2 communication I didn't understand. However, I did some deeper digging and found another path between switch1 and switch2 on vlan 920... I found that switch1 was learning switch2's SVI MAC address for vlan 920 through another port channel which led to one of the access switches. I took a look at this access switch and for reasons I don't yet understand, it has STP turned off (no spanning-tree vlan 550, 920, 930, 940) for the VLANs I added for this project. I think this happened automatically as VTP is enabled on this network and the config changed on the same day the vlan.dat file changed. So communication on VAN 920 is going from switch1, to this access switch and then switch2 because STP isn't being blocked on either of the port channels to the access switch. I'll close this question out and will probably post a new question on how this would happen. I haven't found the answer via google yet. 

RE the question about IOS being installed on out of the box switches. Yes, IOS is installed on out of the box switches. If you buy them all at the same time and the same place (and they're the same model) then they will most likely have the same IOS version. Having the same (or very close) version helps when you're stacking the switches (using the stacking cables in back to turn 2 to 9 switches into a single unit). If the version numbers are too far apart, the switches will not stack and you may need to upgrade the IOS on the older versioned switches manually. There's an auto upgrade feature but it doesn't always work like I would expect it to. :) The point here is that even though the switches might be stacked and act as one unit, each switch still has and needs its own version of IOS. Even when upgrading a stacked set of switches, you need to copy the IOS on to each separate switch. The following link is for 3750 switches and there may be a newer one for 3850s but I doubt it will be much different. This contains all sorts of commands and instructions for stacking upgrading and copying IOS files between switches: $URL$ 

Backing up and copying configs to server. Automate certain config changes to adhere to standards. Scripts to copy run start on all devices at will. Finding various config entries on all devices that may need to be altered. There are so many possibilities. Search github and pastebin and the overflow sites for anything using: Import netmiko Import paramiko Import ciscoconfparse Scripts using any of those libraries will be network related typically and offer up ideas. 

Clear ARP cache Switch expected the IP you used to be mapped to MAC of other machine you originally had IP tied to. Clear arp and/or routing table. Rebooting PC after changing IP basically did that. PC reboots and the arp binding process kicked off when connected back to switch and the learned the new IP to Mac binding (arp cache) 

I was rushing to help a friend out today who was trying to get a 3750 attached to a 1841 behind a cable modem. He called me at the last minute and figured it would be simple considering his needs were so basic. 1841 is the router, connecting to cable modem. Setup a couple of vlan subinterfaces on the 1841 as well as dhcp pools. Attached the 3750 to the router with a trunk link and passed the vlans. Associated the vlans to ports and did some basic static routes. I was rushed, under a time crunch to get my daughter and well ran into a problem reaching internet from PC. Panicking about my time and not seeing clearly to troubleshoot or figure it out. Basics are that PC was getting IP from the 1841 via DHCP. PC could ping vlan subinterface gateway, 192.168.1.1. PC could ping the Fa0/0 IP. Which is an external IP. Router could ping internet 8.8.8.8 with a basic "ping 8.8.8.8" Router could NOT ping internet when I sourced from VLAN 100 subinterface (192.168.1.1) Not sure what I'm missing but I'm missing something. So much for 20 years of experience sometimes. Thought this would be the easiest network deployment I've done in 15 years. The fact I couldn't ping internet from the internal subinterface bugs me. Issue on the PC seems secondary to the fact I couldn't get the local subinterface to work either. So its got to just be something on the 1841 at a minimum. Here is the config of the 1841: 

I am having trouble wrapping my brain around a VRF concept and why two switches are communicating with each other on a particular VLAN when I don't think they should. switch1 & switch2 are independent core switches with a port channel between them. However, none of the VLANs that are configured with SVIs in the VRF are configured on the port channel. I have vlan 920 (L2) configured on switch1 and switch2. I also have SVI vlan920 (L3) configured on both switches. The SVI vlan920 is configured inside VRF extwan as are several others. vlan920 on switch1 is 10.146.64.130 & 10.146.64.131 on switch2. If I issue a 'ping vrf extwan 10.146.64.131' on switch1, I get a reply. If I do a 'sh ip arp vrf extwan' on switch1 there's an entry pointing .131 to vlan920 & a MAC address on switch2 that is the same for every SVI on that switch. I assume it represents the MSFC. So, there is no physical L3 connection set up yet between the switches and the existing L2 channel does not include these VLANs, how am I getting ARP entries in the VRF for the other switch? The VRF is connected to a set of ASAs on another SVI (also in the VRF) so maybe it's going through that? Another possibility is that these switches are connected to access switches but STP is blocking one of the links on each VLAN. 

Just to close this out, I worked with Cisco support to configure ACS to limit their access as much as possible but they did confirm that you cannot limit access to a VRF. I also asked them if I could allow access to all commands in a particular mode using Cisco ACS (i.e. everything under config-if) and the answer was no to that one too. The guy said you need to put the start of the command in and wildcard it. 

New to stack exchange and Python. Hopefully this is allowed to be asked. I am taking a class on Python and finally starting to dip my toe into the water. I have a ton to learn but I already have a use case that I personally would find helpful and practical. I have an upcoming project that will require me to login and touch every device, finding all instances of "ip-helper" configured and altering the current IP addresses stored. Since the ip-helper exists under any number of SVIs, not only would you have to be able to do a show run and find all instances of ip-helper being configured but you'd also have to be able to identify what SVI its configured under to then generate the new config that would have to be applied. Would anyone have a working example of a script that would do this that I can learn from and use? I would think something like this could be applied to many things when it comes to Cisco device configuration? Finding any number of strings, checking to make sure if it is a sub configuration and what the parent would be prior to generating and applying new replacement config? 

Any glaring omissions or thoughts? I am going to go back out and try to help him tomorrow. Trying to get my thoughts right tonight. 

I'd do something along the approach Arima mentioned with the sub int per vlan but for IPs I'd probably use /30 or /31 if I could. Basically an underlying P2P. Then I would absolutely run a routing protocol and in this case I'd probably go with eigrp. Then at each remote you would have your various voice, data and misc vlan / subnet that would be specific to that site. Leverage L3 to the access as much as possible. That's just me anyway. Keep it simple but keep it L3.