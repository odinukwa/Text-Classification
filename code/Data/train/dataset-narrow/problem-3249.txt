I don't really know what to make of this information though or what the echo means. I though this question warrented a thread because most of the time people get errors after the 

This is according to the raspberry pi website At the time of boot all the checks that scroll by on the screen say "OK" where applicable. but then I try to log on it states that the target host is actively refusing the connection and I investigate to find that no VNC server was started. The only hint I have is that when I enter: 

I have been able to establish a VNC server manually and access it from my laptop but when i try run the vncboot file it boot it does not work. This is the script I have used for the /etc/init.d/vncboot: 

There have been no comments (at least from what I've seen) on the sd card slot of the Pi other than that it is a friction slot (like the Pi Zero), instead of a spring lock. It's safe to assume that the bus is still limited to 20Mb/s. I wouldn't worry about getting a UHS-3 card. The Pi 3's features are listed here. You can see the spring lock here: (on the Pi 2) 

and then reboot. It should be running in the background once your boot has finished. To attach the screen and see the script running, enter the command: 

I'm sure there is (or will be) a way to manually overclock it, but it may not be covered by warranty anymore. 

Electronic devices only take as many amps as they need, so as long as you supply it with at least 1A (assuming you have little to no usb devices plugged in) it should be fine. The more devices you have plugged in, the more amps you need to supply it. At a certain point, it becomes easier just to use a powered usb hub, but that's just a side note. All in all, just be sure to supply 5v and at least 1A, if you notice the PWR led not staying on, you may need to give it more amps and make sure your supply gives 5v. 

There are essentially just two ways of accomplishing AC dimming: altering the waveform's duty cycle, and altering the waveform's amplitude. Regardless which one you choose there will be devices which will not tolerate the dimmed power waveform. Also, all dimming techniques involve some power dissipation inside the dimming device itself - thus the dimmer must be designed to provide the full range of power levels that it might be called on to deliver. Old school incandescent bulbs will tolerate either type of dimming. As will any device that simply relies on the principle of generating heat from a current flowing through it. For instance, simple space heaters will usually tolerate being dimmed by either method, but require much higher power/current than most light bulbs. Fluorescent lights will generally not tolerate either manner of dimming. Their ballast transformers and start-up voltage requirements generally rule them out for supply voltage waveform dimming. Many LED lights are designed to accept either form of dimming. Some, especially older LED bulbs, might not. It all depends on the design of their built-in power supply circuitry. So check the manufacturer's specifications to be sure. Most AC electric motors will accept some degree of amplitude adjustment without risk of damage. Ceiling fans, for instance, generally accept a wide range of AC voltage amplitudes. Vacuum cleaner motors are not necessarily so tolerant. That would be a consideration if you are contemplating providing dimming to a wall outlet for a floor lamp: you probably don't want to do that if someone might plug in an incompatible device in the outlet. DC lighting is a different beast. With DC there is no waveform variation, just a voltage level that might be adjusted. But most DC lighting is designed to run from a DC voltage provided by a power supply that obtains its power from standard AC voltages. Depending on a DC lighting system's power supply design and bulb technology it might or might not tolerate AC dimming applied to the input to its power supply. It would be best to consult the DC lighting system manufacturer's specifications to determine how and whether to attempt dimming such systems. Once you know what you are dimming, then your options will be narrowed. Regardless, there are likely to be options open to you that will not involve adding another processor, like the Arduino. 

Yes, doing this should work fine. I have done this many times, even switching entire OSs. There is no reason that it wouldn't work. 

It could be possible that you are overvolting your Pi, and when you plug your fan in it drops the voltage. Have you tried using a different power supply? Also, have you tried using a different HDMI cable/display? 

It looks to me that you are setting your default card to be at when your mic is listed at . Try adding to your command. So your command should be: 

Sometimes screen doesn't work for the Pi's UART pins, in that case use the last two commands of this tutorial. 

Like @SteveRobillard stated in his comment, it's probably best just to buy the powered hub first and save you the possible trouble of not having it in the first place if you needed it. 

I just purchased an ARPI600 expansion board for my raspberry pi 3b. I wanted this board because it acts as an i/o expansion and allows the rpi to control arduino shields. I have seen this card recommended by many people which is why I was incredibly surprised to see that the documentation for it is ridiculously underwhelming. It gives information about how to setup the serial debugging function without telling you what it is pretty why you would want it. It tells you how to control the ARPI600 with the pi but does not give you any direction as to what or why. There is little to no documentation on the various pins and jumpers implemented. Most of all I am confused about how to provide power to the ARPI600. I am under the impression it receives a 5v current from another source as the pi can only provide a 3v. But as usual there is no documentation to suggest otherwise or confirm my suspicion. So now I have it all hooked up to the rpi but I am afraid to turn it on for fear of shorting it out or something. I know that based on the popularity of the product someone has an idea of what their doing but no one with the knowledge has posted anything online. If there is anyone with experience configuring the ARPI600 please let me know. If you just search ARPI600 on Google and you will find the operators manual and see what I mean about the documentation. 

I have come across a very peculiar problem. I have a Raspberry Pi Zero V1.3 running Raspbian Jessie Lite on a 64 GB SanDisk micro SD card. The Pi is powered via the micro USB port (not the OTG port obviously) and the cable it is powered with can be switched on/off. When I switch the cable on, the Pi's USB ports will become powered, as my Wifi dongle or serial adapter will turn on, the 5v and 3v3 pins will become powered, but the ACT led will not turn on or flash or anything. Turn it off, and back on again, and everything works fine, the ACT led flashes and the Pi boots fine. If I do a and switch the power off, wait a minute, and switch it back on, it will not boot. Switch it off, then back on, and it will. It will only boot every other time. What can I do to fix this? Is there a reason for this happening? Could it be caused by the fact that I'm using a 64 GB card, and not a â‰¤32 GB card? I've seen other people use this size (and larger) card and have it work fine. Later tonight I will (reluctantly) reformat the card with a complete overwrite method, and see if it works. 

It sounds like you are wanting to wire the wall switch and the relay as a three-way switch arrangement. This way, if the relay has the light turned on, flipping the wall switch will turn it off, and vice versa. You could wire a single-pole double-throw relay to work as a 3-way switch, and install a 3-way switch in the wall (if it isn't already a 3-way switch). Borrowing your artwork: 

Your WiFi dongle is receiving a strong signal from your router. But the router has not yet assigned an IP address to your RPi's WiFi LAN device. Most likely that is due to a misconfiguration of your /etc/network/interfaces file. If you are using a WPA secured wireless network then your interfaces file should look something like: 

I am currently using both NTP and an RTC on multiple Raspberry Pis and I can say they both work great. 

If you have an old RCA cable you can strip the wire and solder the two wires directly onto the two pins like so: 

The Raspberry Pi needs a special driver for Xbox 360 controller compatibility. To download this driver, enter the command . RetroPie should immediately recognize the controller's input. This is a good tutorial for this as well: $URL$ 

THERE IS A MISTAKE IN THE SCHEMATIC: I am using a NPN transistor not a PNP My code (or at least the important part of it) is shown below: 

You can try resizing the partition manually. See the elinux docs for this. Basically, you write a new partition table manually with: 

I have done a lot of reading about rpi clusters. Don't worry I am not going to ask if they function as a single virtual computer. I understand that they can be used to divide up complex tasks or space out tasks in parallel programming. Basically I want to create a home automation system, weather station, and add on a couple other projects I may find cool in the future. I just want to know if I can outfit each rpi in the cluster to do a specific one of these functions. They all require different peripherals attached to each rpi and I am not sure how much control over these peripherals I will have from the head node. Any clarification would be appreciated. Thanks. 

While this should work, there could be an issue with the RPi not knowing whether it is turning the light on or off. That's because every time you flip the wall switch, you will be reversing the relay's ON/OFF state. That issue might or might not matter to you. If it does matter, you could add a sensor to allow the RPi to detect whether the light is on or not. Note: this could be done using a light sensor, or using a current detector on the wire leading to the relay. A voltage detector at the relay could also allow the Pi to read the on/off state, but I would use opto-isolators in the voltage detection circuit to ensure that 120v/220v cannot ever reach the Pi! An advantage to the three-way switch wiring approach is that, when it comes time to move out (or you just want to disable the RPi system for any reason), you can simply replace the relays with jumper wires. The wall switches will simply work as before without any other changes or rewiring. If you want to get really fancy: you could run wires from the relay to an "override" switch hidden in a closet - so that even if the relay goes bad (or the Pi goes berserk!) you can flip the override switch thereby shorting across the relay, returning total control to the wall switch.