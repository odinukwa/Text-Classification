Yes and no. At the data-link layer (Ethernet in this case), there is no concept of an "IP address": the only address that exists is the MAC address. Frames that are sent can be marked as containing IP packets (EtherType 0x0800/0x86DD), but it's up to higher-level layers to decide what to do with the data. So if you're looking at this solely at the point of view of the Ethernet interface, you would be correct. However, looking at this from the point of the device using the interface, you would be incorrect: it would see the network from the TCP/IP or UDP/IP layer and would usually be completely indifferent to what exists beneath that. A wrinkle that can occur is if you start using VPN tunnels. If you set up a VPN in bridge mode (let's say between switches 2 and 3), you now have a layer 2 frame encapsuled inside a higher-level packet! 

I want to ping from R2 to vrf lo0 of R1; but it fails, even though i have configured static route leaking. Please suggest why it fails 

As you see, on R1, the route to 100.0.0.0 no longer exists. Moreover, the BGP vrf peering is in Active state. Why is this happening ? is there any relation between and ? Is it mandatory for to have neighbor activated for vrf routes to be exchanged? 

I was going through the use cases of GRE tunnel and see that it is also used to carry multicast traffic over the internet.I understand that multicast IP belongs to address which is a public IP and can be routed. Q1:Why is multicast not supported over the internet ? Why do we need to encapsulate in GRE ? Can you please explain in laymen terms ? Q2:When we use the term 'internet', what exactly does it refer to? Would it be collection of all ISPs across the world? 

In this scenario, there's no need to use an enable password (or secret.) If you're not yet thinking, "wow... what a clusterfudge that was", bear in mind there's a whole other long-winded post still lurking behind the command , where you get to dive into things like external authentication servers (RADIUS, TACACS+, LDAP, etc.), authentication lists (which define the sources to use, and in which order), authorization levels, and user activity accounting. Save all that for a time when you feel like getting locked out of your router for a while. Hope that helps! 

Moving on... You probably already know that, by default, all your configured passwords show up as plain text: 

The network in this case is 30.214.0.0/16 and the host range is 30.214.0.1-30.214.255.254 (30.214.0.0 and 30.214.255.255 have special meanings.) 

ISPs can use the fact that they have subnetted their address range to simplify routing tables. This is known as route summarization and is pretty important in keeping the Internet working, because instead of your ISP having to advertise every network block that they use in a contiguous range, they can advertise just one. There's more to it than this, but fortunately that's beyond the scope of this question (it's complex and I have forgotten most of the details!) As an aside, if you needed more than 65534 hosts in your hypothetical network, you could obtain two /16 networks that were adjacent to each other (e.g. 10.214.0.0/16 and 10.215.0.0/16) and supernet those into a single network (10.214.0.0/15). It's more common at the smaller network allocations (/24 and smaller), but you should be aware of its existence. 

The secret version is hashed with a one-way algorithm, meaning the only way to get the original text back is by brute-force -- that is, trying every possible input string until you happen to generate the known hash. When you enter the password at the prompt, it goes through the same hashing algorithm, and should therefore end up generating the same hash, which is then compared to the one in the configuration file. If they match, your password is accepted. That way, the plain text isn't known to the router except during the brief moment when you are creating or entering the password. Note: There's always the chance some other input can generate the same hash, but statistically it's a very low (read: negligible) probability. If you were to use the above configuration yourself, the router will allow both the and lines to exist, but the secret wins from the password prompt. This is one of those Cisco-isms that doesn't make much sense, but it's the way it is. Furthermore, there's no equivalent command from line configuration mode, so you're stuck with obfuscated passwords there. Alright, so we now have a password that can't be recovered (easily) from the config file -- but there's still one problem. It's being transmitted in plain text when you log in via telnet. No good. We want SSH. SSH, being designed with more robust security in mind, requires a little extra work -- and an IOS image with a certain feature set. One big difference is that a simple password is no longer good enough. You need to graduate to user-based authentication. And while you're at it, set up an encryption key pair: 

So essentially, as we place a router in a network and assign ip addresses, we are creating new broadcast domains. 

Is it possible to implement the below topology? I see that there is a port channel going downstream to the firewalls. By any chance, are the firewalls running as one virtual entity? As we see here are 2 different downstream firewalls, and we cannot run the portchannel. So if we cluster the FW01 and FW02 as a single entity and run the port channel in no LACP suspend mode, does that possibility exist? Note:SW01 and SW02 are N5k Peer KA link denotes peer keepalive link. Peer link denotes vpc peer link. 

This is one of those things that tightens the sphincter of the security-conscious. Whether it's justified anxiety is again something you have to decide for yourself. On one hand, if you have sufficient access to see the configuration, you probably have sufficient access to change the configuration. On the other hand, if you happen to have carelessly revealed your configuration to someone who doesn't have the means themselves, then ... well, now they do have the means. Luckily, that first line in the snippet above, , is the key to changing that: 

No, you don't -- technically. But whether you can enter enable mode without one depends on how you log in. Here's the instant gratification version: You can enter via the console without an enable password, but you will be stuck in user mode if you use a simple vty login password without an enable password set. Here's the long-winded StackExchange answerer version: Cisco authentication is kind of a mess for a beginner. There's a lot of legacy baggage there. Let me try to break this down in a real-world sense. Everyone that has any business logging into a router or switch pretty much goes directly to privileged (enable) mode. The user mode is basically a front lobby, and serves little more purpose than to keep the draft out. In large organizations where you have vast networks and equally vast pools of labor, it may be justifiable to have someone who can knock on the front door and make sure someone is still there. (That is, to log in and run the most trivial commands just to see that the device is, in fact, responding and not on fire.) But in every environment I've ever worked in, tier 1 had at least some ability to break things. As such, and particularly in a scenario like yours, knowing the enable password is obligatory to get anything done. You could say this is a second level of security -- one password to enter the device, another to escalate to administrative privilege -- but that seems a little bit silly to me. As already noted, you can (and many people do) use the same password, which doesn't help much if someone has gained unauthorized access via telnet/ssh. Having static, global passwords shared by everyone is arguably more of an issue than having just one token required to enter. Finally, most other systems (services, appliances, etc.) don't require a second layer of authentication, and are not generally considered insecure because of this. OK, that's my opinion on the topic. You'll have to decide for yourself whether it makes sense in light of your own security stance. Let's get down to business. Cisco (wisely) requires you to set a remote access password by default. When you get into line configuration mode... 

The subnet mask is always applied left-to-right, so no subnet that is /24 or less will ever have a non-zero start for the rightmost value. For your example: 

Because you didn't specify a network mask, the address was given a host-only /32 (255.255.255.255) mask. No other hosts belong to the network, therefore any attempts to ping an address will fail (check to verify.) The reason why worked (from your answer) is because you added another host-only route, so your routes are this now: 

Only these two addresses (and the loopback addresses) will work because they're the only ones that you have said exist! You'll need both hosts to share a common network, or have some sort of route between them, before they will be able to see each other. In this case, try 

Now you're cooking with gas! Notice this command uses passwords. (Yes, you can, but shouldn't, use ). The part allows you to bypass user mode entirely. When you log in, you go straight to privileged mode: 

Now, you will be asked for a password, and you will again end up in user mode. If you're coming in via the console, you can just type to get access without having to enter another password. But things are different via telnet, where you will probably get this instead: 

This is marginally better than plain-text passwords, because the displayed string isn't memorable enough to shoulder-surf. However, it's trivial to decrypt -- and I use that term loosely here. You can literally paste that string above into one of a dozen JavaScript password crackers on the first Google results page, and get the original text back immediately. These so-called "7" passwords are commonly considered "obfuscated" rather than "encrypted" to highlight the fact that it is just barely better than nothing. As it turns out, however, all those commands are deprecated. (Or if they're not, they should be.) That's why you have the following two options: