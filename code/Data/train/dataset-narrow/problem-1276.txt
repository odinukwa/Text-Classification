Updated: I did a few test runs to compare the different solutions, before doing a final test run of 100 000 times (which I let run over night). With a 1000 samples I found the following: Original code (58.6 seconds) and the version by SuperBiasedMan (56.5 seconds) runs in around a minute, whilst my version using int comparison and simpler random function runs in only 2.8 seconds (about 20 times faster). ( And if faking the coin flip, it only takes 0.5 seconds to complete it. :-) ) But here are the ultimate test for a 100 000 times run on my computer: 

To center text you'll use , but note that this centers the text within whatever block it is set into. That is, if the block isn't wider than the text, you'll see no effect. Centering vertically is troublesome, a random article is Vertical Centering in CSS. Newer browsers support , which I've used in code below. See A guide to Flexbox. (and 4.) To allow the navigation menu to both flow, and be aligned with the top line, I used . I shifted it over to the right, as this kind of floating menu, especially when the text is supposed to expand into the margins, are more commonly done on the righthand side. 

Not so much actual code review here, but hopefully you have gotten a few pointers to how to improve your code to be more according to OOP. And again, do read the other answers which provide more direct coding suggestions. They are good advices! Addendum: A little code on I see in the chat room there was a little discussion on how to do the purchasing of items, here is my stab at the code of the loop: 

This should avoid the repeated loading of the words for every word of every sentence... Will try to test this tomorrow. 

When refactoring I also saw one possible major issue: For each product in either the or you read through each of the corresponding files updating one item at a time, possibly rewriting the file each time as well. This update converts, deletes and renames that particular item. This means that you have a time complexity of \$O(n*m)\$, where \$n\$ is items in the products file, and \$m\$ is items in the secondary file. This is bad... You should aim for doing a single run through each of the secondary files reversing the lookup you now do. That is instead of looking through all products one at a time in the corresponding files, go through the corresponding files and see if it exists in the main file. This will change time complexity to \$O(m)\$ for each of the corresponding files. If you in addition can do in-memory handling (or delay writing of the file), you'll might save quite a lot of time! Gist of code (still untested as I don't have data files or ): 

First of all I would add a loop around the input to make sure that a proper month number is entered. This could also be extended with exception handling if that has been covered, as the user might input text. 

Addendum: Unique exception messages One way to generate unique message is to repeat something related to the method/function you are executing and the failing situation. Lets say that your missing file was within creation of a user account, then I would have preferred a message like: 

And then to wrap it up we need some changes to the end of the code to adjust to the newly created list of lists: 

One of element to improve code is to apply the DRY principle, that is Don't Repeat Yourself. In your code as pointed out by Caridorc you do repeat the clearing of the die face, which should be moved outside of the statements. But a die is very repetitive by nature, so there is more to extract. If you look at the die face for 2 and 3, the only difference is the middle dot, and when going to 4 and 5, you add two more dots. And finally for 6 you add yet another two dots in the middle. This can be formalised as shown here: 

Contrary to the other answers I would keep the next to the error handling, as it clearly indicates that your program will terminate at this point, and that is useful information to have. I would however consider to join the two exceptions, and potentially expand the error message with the type of exception caught. Note that the best practice to capture two or more exceptions is like the following: 

Initial reaction to your program is that it seems to be good and clean C code. So the overall impression is good, but there are things to review, even though some comments may be a bit of personal reference. 

Based on the code so far I'm guessing that holds the length of the palindrome starting at that first index and ending at last index. Not quite how it gets there, but that is my assumption. Let us rewrite the code according to this, and my comments above: 

Please notice how I've eluded the need for doing the length outside of the function, and not using globals. I've also used the new style of print formatting. You do however need to change your main code a little bit, into something like: 

So you if aiming for accuracy you might want to reevaluate the mathematics, and what your base reference is supposed to be, aka if you should use the Earths barycenter or the actual position of the Earth, or possibly the Solar System barycenter. In the code I've provided so far, I assumed that your mathematics where correct, so I've not counteracted for these inaccuracies. 

There isn't much code, so that leaves little to be reviewed. I have not considered the mathematical side of this. This is also a code stub, so when reviewed out of context it is hard to do a good review. 

Notice how I tried to give meaningful names to each of the test methods so that it should be understandable what failed if/when they fail. If everything is OK the output would have been: 

Instead of checking the entire board each time, write a function which checks if placing a piece on a given field will result in a win. This can then be used both for checking whether the last actual piece played was a winning piece, or when implementing the AI whether this is a good place to place it. A simplistic approach to an AI version, would be to let this win function return how many pieces of the specific kind is placed in this row, and whether there is room for the remaining pieces to be placed. That is the function could return max of how many pieces of your kind is in the row (and if its 4 you win), and how many available spaces are there within a reach of 4 pieces. Finally when contemplating which move to make next, you don't need to check all places, as the pieces drop to the bottom, so you only need to check one for each column. 

There has already been some good and valid points made in the other answers, read these carefully and try implementing them. In addition I would give some other pointers which I've stumbled upon when reading your code: 

As stated my main issue, is that the actual commands are hidden within the class structure, and I would rather make them separate classes. And I would focus on making the various options clearer. One way to do this is to change into a structure like the following diagram: 

Code review There are several code smells related to your code, sadly enough, which affects both readability as well as efficiency of your code. Lets address these: 

If both are specified, your current code will only do the first. If none are specified you'll display both. And if your question is related to avoiding the duplication of code in your else-statement, you could rework the last part of your code to this: 

Conclusion Your code does look good for a beginner, and naming is good (with the exception of not using underscores in between words). You could benefit from learning to use the ternary operator (), and a slight justification on using functions related to top level code and text lengths. 

It is left as an exercise for the user to extend the parameters into a list of filepaths, and extend the logic to return a counter with all remaining files subtracted if that is a wanted extension. 

In short even without reducing the high number of steps to execute, I still shaved of almost a minute, and increased the steps pr second from 15400 steps/seconds to 21700 steps/second. Hopefully you should see the same percentage improvement on your computer, even though my number initially are somewhat slower than on your computer. 

In other words the total points available in your game for a text with length, \$N\$, is the sum of \$N + N-1 + N-2 + ... + 2 + 1\$. Luckily there exist an easy formula to calculate this number: \$(N+1)*N/2\$. This is listed at points in the table below. But that was only the points (or number of words), when looking at memory usage we need at least to look at how long each of the words are. Continueing with our example with \$N=4\$, we have 4 words of length 1, 3 words of length 2, and so on. In general \$N \cdot 1 + (N-1)\cdot 2 + ... + 2\cdot (N-2) + 1\cdot N\$. I haven't found the general formula1 for this, but made a simple Python function to calculate it: 

Notice the trickery using to make that a groupable version of something which might vary just a little. Due to the same reason I also removed the from the column list. Given that I haven't made any stupid typos, this SQL should provide you the sums you are asking for in a simpler statement. 

One thing I haven't addressed if whether this is the most effective way to check for cycles. In fact I know it isn't as for each vertex we traverse the graph over and over again. This implies that the current algorithm has an \$O(n^2)\$ complexity, which most likely could be simplified utilising another list of visited vertexes, and instead of looping through all vertexes, one could visit only those not already visited. This is left as an exercise for the reader... :-) Unit tests Multiple options exists for doing unit tests in Python, and it comes down to personal preferences. Here I'll present you for the internal version, namely unittest, which suffices for this code. A common pattern for a unit test is the following: 

Example of class The following example is a simplistic implementation of part of the class. class MakeKing(Creation): """Wrapper class for the makeking command, starlab v 4.4.1. 

Alternate Solution Most Euler problems have at least two major solution: The brute force solution, and an optimal solution. You've implemented the brute force of testing each and every number to see if it matches the criteria. In some cases the brute force can be improved somewhat, like skipping all the odd numbers, check for ending of 0 or 5, verify that the value is dividable by 3, and so on... This will usually lead to a somewhat faster solution, but when tackling the higher Euler Problems that'll not be enough. Therefore it is a good idea to start looking for optimal solutions, and what is really asked for. In this case what is the number , and how have they derived at it? So what we now about that number: 

Code and class review Previous was global comments, but here are some more localised to your choices of classes and code structure: 

Stylistic it is mostly nice, and I would possibly change two things. First of I would put all of the code within a function allowing for reuse, and secondly I would change some of the names, i.e. and . From an algorithmic point of view there are however some more issues with your code: 

1 Added: Thanks to my question at Mathematica SE I now know that the formula is: $$ \frac{n(n+1)(n+2)}{6} $$ 

Improve text handling You do loads of string concatenation using , which isn't really a good way to build strings. You are better off using string.format, and make patterns for entire lines at the time. Here is an example on how to do this in : 

I'll have to agree with some of the other that I don't see the need for using a class in this case, although you get a little credit for using the naming scheme for public and privat methods. But what I would focus on is your & co methods. You say that you're happy with them as they do just one thing. In my book they are too localised and specific. They are not very reusable, and you would be better served with one general method: