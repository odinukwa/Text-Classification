I think this depends on the curriculum and goal. If the goal is not to teach them specific algorithms, but to teach them problem solving, then have them write the code first. I come from adult education, and this approach works fine there for me. What I do is I give gradually more complex exercises, and give them time to develop a solution. I also give them a few keywords, commands that they will likely need. I go around and help with individual solutions. They are allowed to work together, communicate, help each other if they want to. They can use the help, internet, the course book, whatever they can get their hands on. This means a lot more work for the teacher, as you have to run around, understand different approaches, and not force your solution on them. If I find a particularly good or interesting solution, I show it to the class (after everyone has finished). I only solve the program in front of the class once everyone has a solution. (Pretty disappointing, but even this way I see some of them just delete their working solution and mindlessly copy mine.) I always try to emphasize there is no one good solution. There might be better, faster solutions, but as long as theirs is correct and works, it is a good solution. As for the inevitable speed differences in the group, instead of giving one exercise, I give 3-4. The first is the mandatory, the rest is extra. (Maybe for + points or such to motivate them; luckily in adult education I don't need the extra external motivation.) When the last person finishes (or gives up) the main exercise, that is when time is up. So I say the most effective way for teaching with sample programs is let them try, fail, suffer, find their own way, then finally succeed. Don't spoonfeed them. 

Which variable types are the bare minimum to teach non-programmers who want to be able to create and modify simple VBA (MS Office) macros? I start by showing them the concept of variables through using an Excel cell as a temporary storage, then using undefined variables, then show them a simple with no type declaration. Then comes the types, and I always struggle. , , , seem the most important, but maybe (integer) is better, or just is enough for all the numbers? Also, are important too with the statement. I don't bother showing them . Or am I better of telling them to use for everything? They will be making simple macros for themselves, maybe a few colleagues. Usually start off from a recorded code. They should be able to read and comprehend other's macros too. Context: I regularly hold intensive company VBA trainings. These are typically 2 day long trainings (yes, I know, totally not optimal, but I can rarely make the organizing HR understand this). So, 2 days Beginner Training, where I teach them the basics from macro recording through modifying the existing code to the IF statement. Then in a few weeks it is followed by a 2 days long Intermediate Training. This is where I teach them the variables and loops - and make them practice a lot. 

If you ever had a class right after lunch break, you know what this question is about. (Student's stomachs full, computers murmuring, room half-lit, teacher droning about something - I don't blame them for falling asleep.) What short, fun exercises do you use to set student's arousal to the optimal level? It would be nice if it had something to do with CS. Not sure this needs a context, but where I usually meet the problem: adult education, all-day-long courses, right after lunch break. The problem is universal though, I think. 

Since I was tired of the easy IT examples which all revolved around sharing files and documents, I started using the following analogies to explain pass by value and by reference. My cat ("Mr Doorknob") sometimes wanders off to my neighbour. They call him "Cirmi", but of course he is still the same cat. If they feed him, he comes home fat and satisfied, if their dog licks him, he comes home covered in saliva. This is a bit like passing a variable by reference: they might give him a different name, but it is the same cat. Whatever is done to the passed cat in the neighbour's garden will be visible on the cat when he finally comes home. (I actually like this because it helps them understand the "different name thing".) As for passing by value, my neighbours really liked my new sunshade. They asked me where I got it from, and they bought one themselves. It looked identical in the beginning, but theirs got pooped on by a bird. This, obviously, didn't affect mine, it is still as shiny and clean as it was. 

On the more complex side, I have an exercise where I ask them to create a macro to copy entire rows from one sheet to the first empty row in another one. I have a few more, but they are totally artificial practice exercises. 

I wouldn't tell my students such thing because of two things. One, I can never be sure enough. I don't see the whole picture. They are struggling in my courses, maybe many of my colleagues say they are struggling in their courses too, but they might turn out to be amazing web or UI designers later. Or maybe they have a God given talent in some obscure mathematical field that will be really valuable in the near future in robotics. I can never know. The other thing is that saying something like this can do irreversible damage. A professor telling a student that they are not good enough for a given field is just brutal. What are you trying to achieve? If you really want to help them, you need to get to know them very well, have a few beers together, have some long talks, find out why they even started CS, and very carefully help them realize they have other options. But to be honest, I'd rather spend the little free time I have with students that excel, and help them get even better. So my short answer is: don't tell them. You can't know for sure, and it is really not you who should enlighten them. That is what friends and family are for. Help them if you can, and fail them in your course if they are below expectations. (Now I'd give a very different answer if you were teaching future teachers. But since these folks are only hurting themselves on the long run if you are right...) 

On advanced Excel courses I teach attendees how to use the macro recorder. I also start VBA beginner trainings with the recorder and analysing the recorded code. I find the macro recorder a good entry point to learning VBA and programming. I'm always struggling with exercises though. What exercises do you use when teaching MS Office macro recorder? Exercises that make sense in the real word. (E.g. creating a macro that writes "Hello World" in the active cell is fun and educational, but completely pointless in the real world.) The main goal here is to give them a feel for the rigid sort of thinking macros and programming requires, and also to whet their appetite for macro programming, to show them how mundane tasks can be automated.