Generally, when you free something, it's a good idea to null out the pointer afterwards. While in a program this small, you'd be unlikely to make a mistake, when you null a pointer, most platforms will terminate the program rather than have potentially undefined behavior from a dangling pointer if you accidentally reuse it. You should get in the habit of doing this. There is a function called realloc that performs a malloc/memcpy/free cycle for you on your behalf. Some platforms can also resize the memory without moving it (assuming enough contiguous space exists after the allocated memory), which can be a performance benefit. You should use realloc instead of malloc/memcpy/free, because it will always be at least as fast, and often faster. That said, your code appears to be free of memory leaks, accessing invalid memory, buffer overflows, etc. There's a lot of minor optimizations that could be recommended, but this code is at least logically sound. 

Where 's' is the starting point, 'e' is the goal, and # are the walls (basically, similar to the format you have now). I'd also include a title, but that's a personal preference. In this case, I'd read the first line from each file while displaying the menu. Alternatively, to avoid reading tons of files, you might just have an "idx" (index) file (e.g. levels.idx) that contains some format, like: 

I am trying to wrap my head around how to properly use OOP in PHP when dealing with form submissions. The example below is a form for editing course information. I have a class called Course which has methods for loading the class with information from the database and saving information into the database. Everything works but I feel like I am doing this all wrong - any critique/suggestion would be nice. edit_course.php 

I find the following approach has worked well in most situations, however I am always looking for better ways to improve. 

I was in the process of answering your question on StackOverflow but it was moved to Code Review -- so I'll answer it here. You might be able to avoid using or multiple conditions if you build a data structure that fits your needs. 

Everything is working fine but I feel.. stuck with how to use this object properly with a session. Below is an example on how I am currently using my class. course_catalog.php 

Below I have implemented a class that will generate HTML to build the structure for a navigation menu. 

But we need to put in the 2! The point of doing it here and not in the callback is again that we can't stop reduce from stopping. If we inserted it in there, it would get inserted multiple times. 

So that's the extraction part. Pretty trivial with CoffeeScript. Next part is little bit trickier. If you're familiar with recursion, you know the base case is usually written before the other parts of recursive function. We'll do something similar - check for your condition before we do anything else. If it's true, it will simply mean that we don't need to do any of that sieving mumbo jumbo, that we're done and just need to wait till we get through all the elements, because we can't stop the reduce function midway. 

And now for the functional ways. (Disclaimer: I don't think my functional rewrite of your code is any prettier - but it's more functional. Maybe someone can make it look more elegant?) I'm no expert on functional programming, but from what I've learned, you generally try to use things like map, reduce, filter. 

You can bind a single click to many elements using a class selector, etc. refers to the element that ended up being the target/srcElement for the event. 

This final version allows new .toggleable elements to be added to #parent on the fly, and they will also react correctly (assuming they are styled, loaded into assoc, etc). 

Which basically moves all of your if-else logic into standard library calls. By the way, a popular method for switching numbers in place without a temporary integer goes as follows: 

I'd rather prefer the first method, as you can then add/remove elements in your HTML without having to refactor code. There's plenty of other ways you could do this dynamically, including using to bind to a parent element and then determine which element was clicked. 

I'm sure this could be optimized even more, but this answer was meant only to illustrate the use of to minimize the amount of code that has to be written. In this case, using just one single function with some prepared data greatly reduces the amount of data that's necessary. Further optimizations would be to use objects instead of just plain arrays to associate the data. 

I am aware of Pear HTML_Menu but I wanted to create my own implementation. Initially, I was building the HTML using string concatenation, but I felt it had some limitations. So I switched to building the HTML using a tree structure which gives me more control on manipulating elements. Anyways, any suggestions on how to improve this? 

I've seen few ways of processing forms with PHP. Whenever I am working with a form, I typically have two files: one for displaying the information (e.g. form.php) and the other for processing information (e.g. process_form.php). The latter uses sessions and simply redirects to the appropriate page depending on if the information submitted has been validated correctly or not. Below is a simple example of how I normally do things. Form.php 

You should also cache your jQuery objects if you are going to be re-using them. There's no need to search the DOM every time. 

I know there are many existing uploading classes, but I have yet to find one that is exactly to my liking. So I wanted to try and write my own. My goal with this class is to be able to validate files (for now, images and PDFs) and upload files. Though this class is probably not as strong as existing ones, it works as intended. So, any suggestions on how my class can be improved, especially when it comes to error handling? 

Avoid Hard-Coding Values should validate the level range. In a real game engine, you'd probably have files in a data folder instead of hard-coding the levels within the source code. For example, you might have files that look like this: 

Of course, you could instead use std::swap. However, given all the alternatives, if performance was a non-issue (e.g. absolute clock cycle count was unimportant), I'd impress simply using std::min and std::max. 

Using method will have an side-effect if is modified. This is because arrays are passed by reference, and so any changes to will be visible to the caller when the function returns. Use if you need to manipulate id or name, unless you intend to return the modifications to the caller. Example: 

One file per level still applies, though, as it will reduce loading time and memory usage (not that either is significant in a game this small, but the principle is important). 

In addition to janos' answer, I'd like to add some additional tips. Avoid Goto Goto simply creates "spaghetti code" that will become harder to maintain over time. Instead, use do/while and break as appropriate. Once the user wins, simply return from the function that should be maintaining the play loop; once the user requests an exit, return from the main application loop (examples further down). Keep Main Simple In a typical application, the main function only calls 1 or 2 functions, usually in the form of Your main function should be close to: