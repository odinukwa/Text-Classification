I have my Mock setup for my unit test with several of each type of Message, ranging from DateTime.MinValue, DateTime.Now, and DateTime.MaxValue. Should I create a Unit Test with the same parameters going into the method I'm testing repeatedly? (i.e. first test will test a count of the days, second test will test the total Requests for day 1, etc for each type of Message, for each date) I'm thinking that having so many tests (up to 13 per date range with 4 different date parameter possibilities) would be ridiculous, however I would like to know the standard, accepted way to do this. EDIT Here is my Mock data that I have set up: 

Basically, 95% of your code is the same between the two sections, so I'd prefer to use just a single instance with a on the page. 

An variable would be what you're looking for as it appears as though your method doesn't return anything. (If it returns something, use a .) So create another method that will do the following: 

I always see comments about how a Unit Test should only be testing one piece of functionality. For the most part, I definitely agree with that assessment. However, I'm working on testing a method right now that has me pondering if being laxer on this ideal would be a better thing, so I'm curious to everyone's opinions. The method that I'm testing is one that gathers Messages created between a user-defined date range, and groups them by Date, with totals of each type of Message per day. (Request, Offer, Dialog, and Referral). So for a range of two days (for simplicity), I'll return an , where is defined as such: 

Generics warnings As far as I can tell, the generics are mostly OK. You can reduce the number of unchecked annotations you have by declaring it for the whole class ;-) But, you only have two, and, for a reflective system, that is not too bad. 

Use The newer NIO functions typically are more efficient, so use them when you can. In your case, I would have: 

There are more than a few things that are concerning in your code. For a start, you have a combination of static, and instance logic happening in your StateMainmenu: 

There are things you can do to improve the efficiency of your filter solution with small values as the . More efficient filtering The most obvious one is actually given in the example of the function on the MSDN network - which is basically to extend the filter range to the highest multiple of limit, less than 256. I.e. if the limit is 20, then filter up to 240, and then the modulo is still uniformly distributed: Copied from that page: 

Expectation Setting Your algorithm is an incrementing index, which you then convert in to the radix of your charset. Your charset is what, 95 characters? So, there are the following possible permutations for passwords: 

The other extreme would of course be a test for each of those Asserts. Being that I'm using Moq, it's not a huge deal and would run quickly, but I just feel that it's overkill. 

The extra set of inside your LINQ statement allow you to do multiple lines. If for some reason, you're going to be absolutely POSITIVE that would never be null, it would simplify the LINQ a lot more by not having to return nulls (since you have to return SOMETHING for each item in the collection you're iterating). You also then wouldn't need the at the end as well. UPDATE If it will never be null, then it is even simpler: 

You should also get into the habit of using instead of as will stop iterating after it finds the first item that matches the filtering (usually not a big deal, but the collection could get rather large, and it's a minor change to coding that could give big performance enhancements). The only other thing I might recommend would be to have a CSS class for instead of inline styling. 

The first obvious bug is that your code does not run multiple times. You need to reset the variable in the outside loop, because the system will otherwise never start again from the beginning. Your code enters an infinite loop if the user inputs . The code is supposed to output the result . Instead, since all 5-digit numbers are less than 100000 and since will never be more than 5 digits, the exit condition for the while loop will never fail. 

Apart from that, I like the recursion, and so on. You have avoided one common bug with precedence by specifying as being higher than . I am not sure if that's fair though... most languages treat them the same. 

OK, so, with the above, you can add a mapping that maps both the key, and value, in to the . Your lookups are now easy too: 

General In general, I am impressed with your code. It is neat, variable names are good, the logic is well structured, and I can mostly follow it without having to run it. This is a good thing. Some smallish items have impressed me too: 

Don't use method invocations in the asserts. It makes it harder to debug failing unit tests and also makes the tests harder to read. Many devs also name the object being tested as (subject under test) to make it easier to spot what's being tested. 

Repository classes should create domain objects. The domain objects may or may not look the same as the DB entities. If you mean that you write your DAL by yourself (and not using a ORM): Stop with that. It's a waste of time. 

imho you are using return values in the wrong way. For instance, the returns false for two different reasons which will make it harder to maintain the application. imho both cases are exceptional (the developer should make sure that the user do not exist before calling and the database is not likely to fail). Hence I would probably just have a as return signature and use exceptions instead. Same goes for removal. Using a indicates that the removal may fail as often as it will succeed. And that's not the case, is it? As for the tests, there are some patterns which are typically used. First of all I usually divide my tests accoring to the arrange/act/assert pattern to make the tests more readable: 

Notice, that, in binary, all powers of 2 have exactly one 1 bit set? So, your function should be able to take advantage of that... how about: 

Sorting of enums in their natural order should not be a problem. As for the general case, I think your system is OK. I can't think of a better way to do it... the Map seems expensive, but it is small, and limited in size, and should be fine. For small input Lists (less than 5 or so), I would consider a simple Array containing the members, in order, and loop them checking each one.... and returning the index of a match. Benchmarking may prove enlightening. 

Sometimes, instead of bounding the result, you should bound the difference. Min and Max are your friend.... Consider the following: 

The generics look right, and the double-link is used well for locating data. There are two major issues I see though that should be resolved though: 

This is good code. General While it does what it says it will do, here is one beef I have with it, but it's a small one: 

No need for a in the WCF interfaces or the DTOs unless you want to let everyone be able to look at everybody elses accounts. Use the provided during authentication. Update Repository class using vanilla ADO.NET: 

A bonus is that you can never type anything wrong or use values that are not allowed (which is the case with strings) 

that method can be replaced with . If you want to stick with a method, why don't you just use inside the loop? Makes the code a lot cleaner. 

.NET takes care of all memory management for you. The GC is quite aggressive. Implementing just to set things to does virtually nothing. 

First of all. Follow the guidelines for .NET. Your naming convention is off. Same goes for the indention (also discussed in the same web page, but a different section). 

Use the term WCF service and not manager. Yes. I consider WCF services to be an UI layer since it's the interface to the calling user/client. 

Update2 Added a method to show that the actual mapping is reused by all methods. The method will also return different types of accounts in the same list. You could also break out the parts into two methods (one to fetch one item and one to fetch collections) to reuse the code more. 

This will give you better scalability in the future (or the present if you are already multi-threaded. Enum Magic Numbers Enums are a great concept in Java, and, it is one of those places where I believe magic numbers (special values with little apparent context or meaning) are really useful, and are OK. You can embed 'magic' in with the enums and not worry too much about the readability... enums are supposed to be magic things.... So, I would consider code like the following: 

Bugs You have a couple of bugs in your code which will crop up occasionally. The first I noticed is this: 

All in all, that's a pretty good implementation in a number of key details. Using the and methods are good to see. The methods that handle the overflow conditions are good too. I am not sure if you intended it, but you also correctly handle an obscure edge-case in 32-bit signed integer systems (not just Java), where is not the same as ... and your code actually gets it right for an exact input of the text "-2147483648" So, you have good details in your code.... and I can't see any broken edge-cases. My only recommendation would be that a state-machine may make things simpler... with just one loop..... but the state-machine may be a bit messy too, although I think it works out better in the long run...