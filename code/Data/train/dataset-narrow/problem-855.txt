I don't know about this one. I saw it being used in some Python code before that involved an English words reference, but I don't know how accessing it's built-in dictionary works. 

Please, please go through your code and fix the indentation. I'm sure there is plenty more to review in this post. Once you fix your code, post a follow up question and leave a comment to this answer; I will review the new one also. 

Well, I have some good news and some bad news. Bad News The bad news is that I'm pretty sure the only way you aren't going to get that bug where you substitute the file for is if you continue reading from . After all, you can't possibly read from STDIN because that's where the file is. 

Output You seem to overworking yourself in some areas. Especially in the parts where you take . For example, when the user is entering rock, paper, or scissors, you make a check on all the most common things that they might type. To ease this, when you are prompting the user, you can show them their options. For example, instead of: 

Well, if you have the license in one file (which you should) and then you have the file that you want to copy the license into, couldn't you just adopt a cat? 

The repeat loops You expressed a concern for these in your post. Yes, you could move these to a function, but the function would require copious areguments. Here is what I tried: 

Conditionals 2 In the conditional statements in both of your examples, you check that the return value of is not "". You don't have to specifically specify that. You can just remove the part and it would work the same way. The further reduce the size of your conditional, you can have your function actually return the value ( would be better, however) instead of it returning a string of the word "undefined". Then, you could reduce your conditional to: 

Move variables out of All the variables you are storing are sitting in the method of the respective component. This means that the variables are constantly created and destroyed. It would be better to either: 

According to the signature, is supposed to return an . However, run of the return cases is , which is merely a constant assigned to ; that's not necessarily an . Therefore, when creating the constant , you should use and a type. This will ensure that is actually and . 

The two things are very similar. However, pointers are more idiomatic and C and I find are actually a lot easier to use. 

You are a little incosistent in how you turn your string numbers into number numbers. In the beginning, you use : 

Too modern In the version of C described in K&R, there are no single line comments. Therefore, there is no need to worry about them in your code. Yes, your code is good to include these; there's nothing wrong with taking an extra step. However, since you are following an exercise, I thought I'd bring it up. 

"Mongoose supports...". I don't know much about Mongoose, but if it supports both, can't you choose one? 

You don't need to be so specific with and and ... since your program is all about those, these topics should just be implied in your function names. 

If the user clicks the right arrow, . If the user clicks the left arrow, you have to do some conditional checking to set it to . 

Every time this line is run, the execution of this function is "stopped" while the execution of this new function starts. Depending on how big is, this could create a very large call stack and could even bring up some memory problems in your code. What you need it tail-call optimization. Tail-call optimization is a form of optimization to remove this call-stack buildup in your code by slightly refactoring a function. This is what your optimized function would now look like: 

Now, you can delete those other 3 functions: all you have to use is this now! However, there are still a few things I'd like to point out. 

These two functions do exactly the same exact thing, except they are for two very specific instances of a class. This is also terrible practice, as nothing is flexible here and functions not only repeat themselves but rely on two very specific objects to be, again, in the global scope. Instead, these two functions should become one instance method of the class: 

While I agree with EthanBierlein's points about the vs , there is something that I believe he missed: you don't use nor do you use at all in your code. I did a little CTRL + Fing through your code and not a single or turned up. You can just get rid of these. 

Only use when you are need to use the formatting feature. Other than that, you are over-complicating things. If you merely need to output a string with a newline here or there, use the built-in function; it automatically outputs a string with a newline on the end (and you can add more if needed). For example, this line: 

Should all have scope modifiers. By that I mean either , , etc. Read here for more information on these modifiers. 

Every time this method is called, an object is created with a certain "shape" (certain properties, etc.) For that, we create a new class: 

The above method will do exactly what it was doing before: it will go through all of the files in and pass it into along with . What's different now? 

Create a class for creating objects holding an image url and a caption. Setup all the images as instances of this class and put them into an array. When the user changes slide, just change the property of an tag and then of a tag with the properties of the object. 

I made some other small changes here and there. If you have any questions, feel free to ask. Also, the naming convection in JavaScript is: 

Always prefer local variables over global ones in C; it is much better practice as it is less error-prone and more maintainable. I'm not going to go into how you can refactor some of these global variables, but take a look at the ones you have and see if there is a way you can make them local. For example, that compiling function declares a few at the start. Instead, you might be able to return that information as a struct like (or something like that) and have it accept a compilation data struct as an argument. This could also allow for some interesting future features. 

Then, you can just use this class rather than re-writing out the object format each time. Going back to Redux, your program would probably be a lot cleaner if you try integrating Redux into it. 

Simplify with regex After creating some sample chat messages and looking over them, this is the format that special beginning part of the chat message: 

Yeah, I get that the point of this code is to write the coordinates. However, this is bad practice because you are both computing something and giving output in the same function. You should have this function return the and coordinates instead of that completely necessary , and have the caller write the output. 

And now there is no confusion about where that number came from and you can remove that comment from above this line. You should see if you can create macros for this bit pattern like I showed you, and for the memory segment addresses. 

To find out what values the user would like, we simply can use the dictionary and the user input as an indexer to search the dictionary for what values to add. That would look like this: 

Now, any code that is using this library that you created can use a simple exception handler to watch out for this error that you are throwing. To repeat, by adding this error throwing, code that is using this library can now interact (and perhaps automate usage of in some sort of way) with the errors thrown from this library. For more information about custom errors and error throwing and catching, read this MDN article. 

Another solution you could have is to first split up the string into words, then reverse them, and then stick them all into a blank. Here is a little bit more into that option: 

Well, what if this function returns ? Your code is going to try to call all these functions that a normal XHR would have, but it would fail because that value is not an XHR. You should add a conditional checking the return of this function. If the return is , it should just exit the function immediately; this will stop everything else. 

Try following this through with some example numbers. Still don't understand where you are going wrong? Look at this example again with some mo 

Nice code! It was fun to review. Note that I do not know how this API you are using works, so I've made quite a few assumptions about it. Also, I've some assumptions about your knowledge of Java (despite your post) because you said you were familiar with other programming languages, so if you have any questions you can ask me in a comment. 

I cannot review the content of your code because it is very, very unreadable, but I just wanted to point a few things out. 

Your code is nice and easy to understand. I'm going to break my review down into two sections: in the first section, I will suggest a different implementation, and in the second section, I will answer your questions. 

I didn't touch the keyboard at all; it just flew through the file. I don't think this is intended. However, this time, I think I know why. It's this line: 

Here you are creating an entirely new array only to loop over it normally in the next line. To speed up your code, you could simply iterate over the array backwards with a normal loop: 

Put these two lines at the top of your function, just before statement and then remove them from the rest of your function. 

Catch a more specific exception. Looking at the documentation for , the exception that would be raised for how you are opening up the would be an . 

I'm not sure if this is an issue on all browsers, but it has been an issue for me before on Google Chrome: By using and , you are creating multiple threads for code to run simultaneously. However, when with more than one running, you are going to get some timing issues. Issues for me in the past have been that some code is skipped, or the timing gets all messed up and nothing runs at the interval you want it to. To fix this, I recommend that you try to keep everything on one thread; try finding a way to combine the functions being run in the in with the functions being run in the in . Again, this is only sometimes a problem on some browsers. 

both times (the first loop you go left to right, the second one you go right to left). If you look further into this, you might be able to find a proper Big O notation to represent this. 

By re-instantiating the class every time this method is called, you are re-seeding the random number generator. Rather than doing this, you should set a instance to a field of this class, instantiate it once, and then simple call on that field. That way, you aren't constantly re-seeding the random number generator. 

Notice how I used all capitals for the naming? Generally across other languages, all capital letters is used for constant values. 

**Note: I might've messed up something in my train of thought in this section.* The first step to simplifying this logic would be to get a list of all the ranges for you are checking: 

This is a comprehension that will go through all of the and substitute the in the call with the current file it's looping over. Now that we have this, you can remove that 

There are many things to be said about your style, so I'm just going to brush through them very quickly.