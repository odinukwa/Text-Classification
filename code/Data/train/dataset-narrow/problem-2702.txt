Keep rewarding me I like being rewarded for my actions. So loads of small bonus items, small upgrades, gold/points something that immidiately gives me pleasure so I want to continue grabbing more and more. Dont punish me with time-limits What I dont like in a game is when the developers finds it too easy and uses TIME as the only thing keeping me from completing a level. That is bad level design. You could use time as a "bonus", but never as a punishment. Sometimes the phone rings, the dinner is ready or even a toilet has to be visited. A pause is not enough here. If I am close to the goal and the level ends just because I was 5 seconds short, there is not much reason for me to try once more for 7 minutes. My approach is to keep the player happy and occupied even in stressed situations. So, none or a minimum of "Whoops dead, replay the last 5 minutes to get right back here"... instead, make it attractice to try again, not a punishment. 

I think you should make the algoritm work differently. Place your "view" in an array (2D tilemap) and then look forward eg. 20 tiles. The "scroll" is the amount of pixels for 1 tile, so if your scroll becomes negative, just add the size of a tile, and increment offset for "view" with 1. Repeat until scroll pos is postive again. Then repeat this pattern each frame. Here is my suggested loop in pseudo programming language. 

You can tell Unity3D to use isometric rendering in the camera settings. Secondly, you dont use isometrical graphics on a plane, you just build the world in 2D/3D and let the camera make it isometric. I know this isnt a direct answer about rotation, but if you use my approach, your problem is solved. :-) I quickly did a Google search on the topic and found this tutorial on YouTube: $URL$ I also got some articles/tutorials on it, I think this one could be of usage for you too: $URL$ Remember, most of the time, someone else has had the exact same problem as you, so Google first. :-) 

Some people tells me I misunderstood the question, but others tell me that its a nice answer, so I will let it stay, eventhough its not providing an answer for an alternative Flash editor - sorry about that I'm currently moving FROM Flash and Actionscript 3.0 to Unity3D Framework. Its a GAME-ENGINE made for GAMES and there is a free "Indie" license where you get 95% of the engine features for free forever. You can later on, upgrade your license to PRO (1500$ or something) and then you will be able to use the latest game technologies for bloom-effects, realtime shadows etc. With Flash I had to develop everything from scratch and spend a lot of time preventing people from decompiling my sourcecode so they could cheat. Dont take me wrong, I like Flash, but it wasnt made for Game-development, eventhough its possible. Unity3D has never been made to make "banners" or "movies", but is a pure crossplatform real-time game engine. You can choose from webplayer (small plugin around 2 mb install) that works on both MacOSX and Windows. Or you can choose installer (real Windows EXE or similar MacOS bin) and if you buy the license, you can also transfer the games/applications to mobile devices, consoles like Xbox, Playstation and Wii. So, if you want to make sure that you develop on a gameplatform that also is "allowed" on Steve Jobbs iParanoid system, you should consider switching to Unity3D platform as I currently am. www.unity3D.com for more info. 

A big mistake is to grab some expensive turnkey thing and expect it magically scale for you. It doesn't work that way. The key to scaling up is dealing with each new challenge appropriately. You need flexible easy to use solutions that you can move in and out easily. So my advice to you would be if your starting out, just get what seems least headache to deal with. 

Both jsonCpp and Protocol buffers are good options. To my knowledge both are only going to allow you to serial tree structures out of the box (please correct me if I am wrong). boost::serialization can handle arbitrary graphs, but doesn't have a nice text format like json (I think there is an xml format) Personally I think the approach for json serialization that Dojo has taken is the best $URL$ I made my own version of it in c++ using jsoncpp, that also will deserialize typed objects (I have sort of big factory for all my types). It allows me to make a scene from a collection of json files that can be referenced anyway I please. 

A few questions on the site have mentioned the need for more open source projects. I agree and wonder what frameworks should be developed. I'll start the list. 

They started by grabbing whatever was cheap and easy to get themselves going They ultimately had to roll a lot of their tech on their own. (And sometimes hardware) 

Okay this answer is more of an observation. Full disclosure I haven't worked on MMORPG. I have worked at what was one of the top 10 most visited sites back in 2009, and I have worked at game engine company that thought they were making MMORPG tech (I don't know if shipped). If you look at companies that have achieved massive scale (Google, Facebook, Twitter, etc., I know they are not game companies, but they are worth looking at in this space) there are two things that I think are important. 

If look at Knuth's quote in its context he goes on to explain, that we should optimize but with tools, like a profiler. You should constantly profile and memory profile your application after the very basic architecture gets laid. Profiling will not just help you increase the speed, it will help you find bugs. If your program suddenly drastically changes speed, this is usually because of a bug. If your not profiling it might go unnoticed. The trick to optimizing is to do it by design. Don't wait till the last minute. Make sure the design of your program gives you the performance you need without really on nasty inner loop tricks. 

The ScrollPos is the "fraction" of a tile. The viewOffset is the current screen/view position in the tilemap (left side of screen) Array/tilemap is needed pr. "row" of background. You could do this in multiple levels too, to produce a "parallax" depth - and with 3D this might look even more cool. 

Depending on what sort of game you are trying to make, you will need some place to put the actual game. A Facebook App points to external websites for the canvas part of the application. This is your own webserver/webhotel and what ever language your webserver uses ought to provide you with some database connectivity. So if you eg. use PHP on the server, MySQL might be the datasstorage. If you have a IIS/ASP/ASP.net server available, SQL-Express could be your answer. But with most server-side languages you can also remotely connect through IP to another database server somewhere else. You can also use API's to connect to webservices that allows you to put/get data from their storage. Some are SQL, some are Table and some are XML based, but if you have basic CRUDL functionality at them, you dont have to care about how they do it. Amazon AWS has something called SimpleDB which is a XML kinda storage. It has a great API too, but again, it all depends on your needs, economics and technical skills for implementing this. If you use Flash for a client, then you have the issue of how to communicate with a server to get the data in and out from the client. For this you also need the server-side "something" that can serve your data as needed and receive "POST" data from the Flash-client. So once you have a server, you know where you can put your data. To my knowledge, Facebook does currently NOT support native data-storage, but perhaps others can elaborate on this subject. 

From this I can find out where the walls are. I can use this for collision detection, I can use it for pathfinding and I can use it to draw the actual map. You just make a function that will return what kinda "tile" is on a certain coordinate. 

A scroller is quite simple a "virtual viewport" that pushes new tiles/objects in from direction you are scrolling. Simple example to see this, is to build a simple 1 line marquee(textscroller). Lets for example purpose say we have a line with 20 characters/letters/chars. We place them in an string/array like: 

Now thats not a pretty reprecentation of the actual PM, but enough for my point. What I can do now is to store these within a simple array/list of strings. As you havent told us what programming language you will be using, I will just try to use some "pseudo kinda description" (javascript/actionscript/C# kinda )