Computer is turned off. Insert my DUET USB stick into a USB port (I just always leave it plugged in) Turn on the computer (The UEFI is configured to always boot from that USB stick first, and ignore the boot loaders in the other drives I have plugged in) The DUET USB stick loads an EFI shell () (The command shows the DUET USB stick is automatically mounted at ) I load the NVMe driver: I trigger a refresh of volume mappings with , this command completes successfully without any issues. (My NVMe volume is now listed, sometimes as but also sometimes as ) I boot into Windows by running: Windows' startup screen appears and the computer resumes to boot Windows 

I'm using a computer, a Dell OptiPlex 9010, which comes with UEFI firmware, but does not support booting from PCI-Express NVMe devices. I've worked around this by using DUET to create an EFI boot partition on a USB stick, which has an NVMe driver which it loads, and then executes my OS's EFI boot program. The commands to do this are currently entered manually. Here is the process: 

Generally speaking, telnet is a standalone executable, not a command shell primitive. But it isn't shipped installed by default with newer Windows systems. You could install the Microsoft version or use a third-party equivalent like PuTTY/PuTTYtel or dtelnet. Once you have a telnet program installed and in your path you're back to running it from the command prompt - whichever command shell you choose. Edit @Sunk818 comments that Telnet is, in fact, shipped. I've corrected the phrasing above. But given that the very article he quotes states that 

has the advantage that you can specify the process to check rather than having to grep it out of larger output. is more reliably available on systems, although is becoming more standard than it used to be. 

These are not error responses, they are redirection responses. Google has heard our request, and would like us to re-request it differently. In my case, it told me I shouldn't ask "google.com", I should ask "www.google.com", and I should keep that in mind for next time. In your case it wanted you to go to www.google.co.in and to use a different query string - presumably you're in India and they want you to hit a local version of Google. As for wanting you to use a different query string, well, those are normal looking Google query string (gws_rd, ei) parameters; they're just neatening up your query for you. This is normal web application behavior. You crafted a query by hand. The Web App (Google) didn't like certain aspects of your query, and rewrote it to be more compliant with what would have happened had you gone in a regular browser and searched for "cats". They then handed this new URL to your client (openssl in this case) and told it to go ask again. But since you're doing this by hand, you didn't ask again, and instead you misconstrued it as an error condition. If I do as they ask and repeat my query but with instead of , I get the results you would expect if you were searching for cats. 

Run Check the locations (policy paths) listed in this article: $URL$ for any enabled policies that would disable Windows Spotlight, specifically: 

According to this MSDN thread The setting is in the Registry, under , the value-name is and has these possible values: 

So, no, Windows 10 (and presumably Windows 8.1, 8.0, 7, etc) does not support AES-256 encryption in zip files - however the "ZipCrypto" mode in 7-Zip does seem to be supported. 

That's a lot of HDDs. My problem is that my job is in a country with a bit of a repressive regime and there is no uncertainty in my mind that any computers in my company-provided air-freight crate will have their HDDs examined, so I've decided to remove all HDDs from my computers before they go into shipping (except for my laptop, which will be in my carry-on). This leaves at least 8 3.5" drives, roughly 5TB of data, that I need to sneak into the country. I'm paranoid about my data because it's almost everything to me, including my personal diary, and I also frequent on sites like 4chan and Fark so I have a lot of "unsavoury" (but far from illegal!) content on my drives that I'd rather not part with. I think I also have stuff like The Anarchist Cookbook on my drives too - I'd rather not answer questions about those, of course. One possibility I thought of is consolidating as much data onto a single drive, for example I could mount my desktop computer's HDDs on my server and copy their contents onto a huge 2TB drive and leave only the System HDD (which contains no confidential or personal information). I could do the same with the server. I could wipe the DPM backup drive and leave it in the server, which means I'd only need to smuggle two 3.5" drives: my Exchange VM server's dedicated HDD, and "the drive with everything on it" - all of the drives left in shipping are just system disks. I could fit the 3.5" drives into fairly compact external HDD caddies that go with my laptop. Obviously I'd then make another backup of that "one drive" and leave it with a trusted friend at home. Does that sound like a sound strategy to everyone? 

Note that I've selected the 'Certificate Length' field, which shows that the length of the certificate is 1336 bytes. But if you look at the highlighted bytes, with the "text" on the right, it doesn't say "1336", it says "..8". That's because "..8" is the ASCII representation of 0x000538. If you look at an ASCII table, you'll see that 0x00 is "NUL (null character)", 0x05 is "ENQ (enquiry)", and 0x38 is "8". NUL and ENQ are non-printable - they cannot be displayed - so Wireshark prints a "." instead. But in the underlying protocol, those aren't text in any case. It's a 24-bit integer - hexadecimal 000538 is equal to decimal 1336, indicating the following certificate is 1336 bytes long. And going further down, once the certificate starts, we see normal ASCII text data ("Entrust, Inc.") mingled with binary non-text data ("..U...0"). Even with a fully "text based" protocol like HTTP, you'll see '.' for non-printable characters. Note the ".." after "Connection: close" which corresponse to "Carriage Return - Line Feed" (CRLF, or \r\n): 

Select (using Ctrl+A while the cell-marquee is in the table) Conditional Formatting > Rules > New Rule > Use a formula... "Format values where this formula is true": 

I want to get the last value which in the table which has a value in the column (i.e. the current estimate not including pending invoices). I found this formula to get the last value in a column (I'll confess I don't know how it works - from here: $URL$ ): 

I'm running Photoshop CC 2015 on Mac OS X 10.11. Since upgrading to Photoshop CC 2015 () when I create a new layer it's all white, when I select pixels and press the Delete key the pixels remain white - I'm unable to get transparent pixels. The layer is a "normal" layer, not a Background layer. I note this happens even when File > New > Background Contents: is explicitly set to Transparent. Under Preferences > Transparency I have the default settings of Medium Grid Size and Light Grid Colors. How do I get transparent pixels back? UPDATE: I'm having the same issue as described here: $URL$ 

They're made up. Oh, not completely; they use specific OUIs (the first 3 octets, sometimes called a vendor ID) to not conflict with known hardware vendors. But they're generated locally, there's no central database or anything like that. 

Yes, but the risk is pretty low. The OUI should be separate from non-VM devices. Even if we take two VM hosts assigning from the same OUI, there are 2^24 possible choices, or 16777216 possible MAC addresses. Since MAC only matters on the local network, those are generally good odds... 

In short, Wireshark is merely displaying bytes, which may or may not be text, but if they are text they're likely to be ASCII and not Unicode. Wireshark displays data bytes - both string and binary - as ASCII characters, with the '.' being used to denote any non-printable character. There are many, many network protocols which use ASCII characters to communicate on the wire - FTP, SMTP, Telnet, HTTP, IRC, etc. etc. If a network protocol uses text to communicate, then it is almost certainly using ASCII. I am not familiar with any protocols which use UTF/Unicode as the basis for communication. Any protocol - such as HTTP - which wishes to communicate Unicode data will signal at the application layer that the following bytes are to be interpreted as Unicode. (I do not know for sure, but I would expect that Wireshark interpreters which can catch that and display appropriately exist, but they would still display ASCII in the "Packet Bytes" windows, because that's what those are - bytes - 8 bit units - best displayed in an 8-bit text format like ASCII.) 

This isn't a direct answer, but my force-of-habit is to open the first Computer window, then navigate to the desktop folder, then open another Computer window, switch back to the first window and navigate back to the Computer view via the tree-view. But WinKey+E, as suggested by the others, sounds much better! 

I tried to automate this by putting the commands inside a script (the EFI equivalent of DOS' ). My script is this: 

I've been needing to sign PDFs lately - fortunately everyone's been fine with me using a self-signed certificate, however I feel it's unprofessional. I'm looking for a personal certificate I can use to sign PDFs and other documents (such as emails). I saw that GlobalSign.com offer "Digital Signatures for Microsoft Office" at a reasonable $90/year for their "PersonalSign 2 Pro" product, or even $30/year for their email-validation only "PersonalSign 1" product. They also offer a separate PDF-signing product which is two-factor and comes with a USB token, this product is considerably more expensive, at $370/year. I don't understand this - a certificate can be marked as trusted for document signing, but as far as I know there is no per-application restriction inherent in certificates that says "you can use this in Office but not Acrobat", indeed when I open Acrobat Pro it lets me use any certificate on my machine to sign a document. I spoke to their Live Chat support, asking if I can use an Office certificate for Acrobat and she replied, saying only the more expensive PDF signing product has a "key-usage" field set to allow PDF signing. I didn't want to debate this further as it looked like she was copy+pasting from their website, but I'm still not satisfied how this seemingly arbitrary restriction is implemented. If suppose if I had more free cash I might drop the $90 for the "PersonalSign 2 Pro" product and try it to see if it works, but I don't want to risk potentially having my refund request denied if Acrobat doesn't work with the certificate. Can anyone testify what certificates can be used for PDF signing? 

What they actually mean is that the header field in the request needs to use a ':' separator. So instead of sending this: 

it's easy to understand how one might make the blanket statement "it isn't shipped." For kicks and giggles, I polled an example of four systems representing different OS, and it was a 2-and-2 split whether Telnet had been enabled or not. Servers had been enabled, desktops hadn't. Given that most people actually do their work from desktops, and given that this thread started with someone who didn't have it installed on their system, the distinction is kind of specious. That said, I'm happy to learn that I can easily update Windows to include Telnet. It's the only good port scanner Windows has. 

They represent non-printable characters - things like newlines, carriage feeds, EOF, NUL, etc. etc. You can look at the corresponding hex code (to the left) to figure out what the actual byte is. Consider this example displaying the 'Certificate' packet from an HTTPS server to the client. The 'Certificate' TLS message contains both binary and textual data; the text comes from the certificate itself: 

An alternative option is to cut the text into the clipboard, paste it into a plain-text TextEdit window, then paste it back. 

I have a Synology DS1513+ NAS that has a shared folder exposed (I think it's using CIFS). I'm moving files from a HDD on my local machine to the NAS. For some reason the dialog doesn't show any information about what it's currently doing, or even how much data has been transferred or any kind of ETA, which is frustrating. I'll note that before moving the files I did get a UAC prompt for permission to cut from the F:\ drive (I have different NTFS ACLs). Here is a screenshot: "Media" is the name of the share and "F:\DVDs" is my source folder. 

I have a Synology NAS at home, which has a web-based user-interface which I expose to the public Internet. Inside my LAN my NAS has the hostname and on the public Internet I have the domain name pointing to my home router (which then forwards port 7000 to my NAS' HTTPS server on port 443). My NAS comes with a self-signed certificate which isn't really fit for purpose, I would like to install an SNI certificate that supports both the hostnames in addition to - however all of the major CAs perform some form of domain-validation (as they should!) but they can't verify my domain name so they wouldn't issue that certificate. I don't want to issue my own certificate as, for expediency in use, I would like browsers to trust the certificate. 

Some mail providers, such as Hushmail, strip all IP information from mail before forwarding along. But this is, in general, only a service provided by secure or anonymous email services, not something you can make your existing provider do. Because the IP addresses in the "Received" headers are stamped on by the mail servers, it's not possible for clients to remove them - you need a complicit mail server working to keep your IP out of the record. 

"Incoming block" means that incoming new connections are blocked, but established traffic is allowed. So if outbound new connections are allowed, then the incoming half of that conversation is okay. The firewall manages this by tracking connections state (such a firewall is often called a "stateful firewall"). It sees the outgoing TCP SYN and allows it. It sees an incoming SYN/ACK, and can verify that it matches the outbound SYN it saw, and lets that through, and so on. If it permits a three-way handshake (e.g., it's allowed as per the firewall rules) it will allow that conversation. And when it sees the end of that conversation (FINs or RST) it'll take that connection off the list of packets to allow. UDP is done similarly, although it involves the firewall remembering enough to pretend that UDP has a connection or session (which UDP doesn't).