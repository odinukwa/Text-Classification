Interesting script! Here are a few comments to make it better :) Documentation Documenting how to find the required values is a very nice touch, exactly the kind of things that helps a new user or maybe yourself in a few months. However, other parts of the documentation can be improved. Indeed, there is a Convention for Python docstrings. It is definitly worth a read. Among other things, your script documentation should be in . Also, you should try to document your functions : purpose and when relevant parameters and return value (I'll come back to this). Style Not much to say about the style, your code looks good and seems to follow PEP 8. A few lines seem "too" long, maybe having the URLs as global constant would make things easier to read, maybe splitting the long literal strings on multiple lines could help as well. Return value What your functions return seems a bit unclear which probably makes them hard to use properly. 

Broken code As pointed out by Oscar Smith, your code does not work. For that kind of programming task, it is very easy to write tests to help you catch issues. These can be written before, during and after writing the code. You could use a proper testing framework or just simple assertions like: 

Conversion You could convert to its relevant and usable type (float) at you get it instead of reconverting it everytime you use it. 

subThousand: As explained in Janne Karila's comment, it might be worth returning an empty string when the input is 0. After taking into account the comments (except the last), the function looks like : 

Disclaimer: I haven't tried the challenge myself so it will be pretty generic advices. A bit of style Python has a style guide called PEP 8. You'll find various tools to check that your code complies to it such as , various tools to fix your code (such as ). I also highly recommand testing other tools to check your code such as , , ... Problems in your code are mostly related to whitespace but you might want to get the habit of doing it right. Also, as far as style is concerned : the variable does not seem to be very useful (its name does not convey much meaning and the value does not change) ; the variable is not used as such, the convention is to name throw-away values . A bit of scaffolding A piece of code like the one you've submitted is quite hard to test as it is. Indeed, the only way to play with it is with input/output. This makes it quite hard to write automatic tests to ensure you do not break the algorithm but also to write performance tests to make your optimisations actually are optimisations. Let's try to separate the concerns to have the actual algorithm on its own and the input/ouput in a different place. Here's what I have done : the function takes a list of tuple (min, max) and returns a list of list so that each list corresponds to the list of primes. Then it is just a matter of pretty printing to solve the challenge. I have converted the test in the example and some more to automatic tests : 

The formatting in the tests make things hard to read for no good reason. It's ok to go a few characters above the 80-char limits if is makes the code better. There's nothing wrong with: 

Now, the whole code could be simplified by using the right data structure : for each pair of candidates and , instead of having the counts of victories of over and the count of victories of over , you could just count positively the former and negatively the latter. In order to do so, you could store the results in a dictionnary mapping pairs of (different) candidates to (signed) results. In order to keep things simple, we can assume that the first element of the pair is the smallest. Then, abusing all the good things from Python : set comprehension, itertools, tuple unpacking, generator expression, etc, one could write : 

Your code looks very nice and is well documented. Also the intent to avoid boilerplate code while keeping it understandable is both notable and successful. Here are a few details I would change anyway. Consistency For some reason, this particular piece of code 

Simple optimisation Instead of doing in the nested loop, you could compute once at the beginning of the function then call as you need it. Other optimisation Instead of checking if and are in the range, you could just generate them so that they always are in the range : 

I am not an expert in network so I will comment on the part that doesn't interest you that much. On top of that, your code is pretty clean, well documented and seemed to work properly when I tried it locally so there is not too much to say. You should try to avoid magic numbers to keep things maintainable and any other kind of hardcoded data in the middle of the code. You could put server and client in the same file in different methods. You have unused variable. An easy way to notice it is to try to put declaration as late as possible, in the smallest possible scope and as close to their first use as possible. Also, compiler warnings might help you. I am not sure you are cleaning ressources (files for instance) properly. This needs a lot of re-writing to do this properly so I'll leave this for you. After a bit of tweaking here and there, here is the code I have on my side : 

Also, if what you want is to iterate over a container and also get the corresponding index, the pythonic way is : 

You have a lot of repeated code which does not respect one of the main principle of software engineering : Don't Repeat Yourself (aka DRY). I might be wrong but I have the feeling that the whole code about hazard being High/Medium/Low can be re-written : 

At the moment, your current code does not handle properly the fact that a short word can be followed by a long word. The input can show you what happens. Two solutions to this problem : 

The function probably deserves some additional explanation (especially because the name says while the code says ). Maybe a link to some reference would be enough. 

I have no idea what you are trying to achieve here so here are a full general comments : The pythonic way to check is (if is known to be a container). Also 

A few simple comments : Listen to your compiler The compiler can give you a lot of really interesting information. Activate all warnings (I use ) and you'll see a few things to fix : 

Loop like a native When you use the index to iterate over an array in Python, there is usually a better way to do what you want to achieve. I highly recommend Ned Batchelder's presentation called : Loop Like A Native to know more about this. In your case, you could write: 

was more correct. Also, my instinct tells me that starting from 1 isn't that stupid but I have no good reason for this. 

You just need to use unsigned integers. Algorithm You could use a different approach to solve this problem. Instead of trying to find an efficient way to check if a number is a truncatable prime, you could try to find a way to generate them. You could use the fact that the all right-truncable-primes of size can be built easily from the list of right-truncable-primes of size . The same logic applies to left-truncable-primes. Here is a code example based on Toby Speight's code: 

Style Everything looks quite good to me. The only thing that I find a bit disturbing is the empty line after comments : it split relevant things apart and it makes the code harder to read. You could add a bit of documentation explaining what your code does. 

Your code is interesting, seems to be working fine and is well documented. However, there is still some place for improvement. Python 2 It seems weird to write some Python 2 code in 2018. It could be interesting to give a reason (if there is a reason). Comments ? From my point of view, there are too many comments, cluttering up the code rather than helping the reader. Most things commented are fairly obvious and explain the "how" (which is already in the code) rather than the "why". Variable names The at the beginning of the local variable names does not bring much. You could simply get rid of it. -> The builtin is probably what you interested in your case. 

Alternatively, this can (and probably should) be written using the builtin. most_talkative_state Many comments above apply to which could easily be rewritten using . 

Then, you do not need to repeat before each and every use, you can do it once at the beginning of the function and that should be enough. Also, can be written in a concise way in Python : if apple_num in [3, 2, 1]if 1 <= apple_num <= 3`. Then, you can write instead of . You can simply write instead of . You should try to avoid writing the same condition twice, it makes things harder to understand/maintain. For instance, you could write : 

Shallow review seems to be variable that does not change, is the same for all instance and is used only in . You could define it as a "constant" or as a local variable in . The same thing applies to . 

Style In Python, there is a style guide called PEP8 : you don't have the obligation to comply to it but it is quite if we all follow the same conventions. You'll find various tools to check your code and/or to fix it : pep8, autopep8. You'll also find various other tools to check your code. First thing I have spotted is the fact that the naming convention does not follow PEP8. Don't repeat yourself At the moment, you call multiple times in your function. You might as well just write : . Data over code Sometimes, storing pure data in the appropriated data structure will make your code much shorter, easier to read, easier to maintain and sometimes more efficient. Here, you could define a dictionnary mapping hexa 'digits' to their binary conversion : 

Remove non-required edge cases In the original code, we start from '11' and perform iterations. This is similar to starting from '1' and performing iterations. Then we don't need to handle as a special case: 

Multiple methods looks quite similar, it might be worth defining a more generic function and then just calling it everywhere 

Micro-optimisations You don't need to always check : you just need to check it after updating . Also, you could reuse instead of calling every time. 

thousandUp: We maintain one list and a number through the function but we can see that the property is (almost) always true. One can easily get convinced of this or add everywhere. Thus . 

I don't have much to say after Jamal's comment. However, I just wanted to point out that some tests are not useful. All the logic around Western Zodia sign could be simplified and probably should be extracted in a function on its own. 

I have no time to go any further but I hope this will help you, another reviewer and future me to take over. 

General Most of your comments are not really useful : comments should tell you why, not how. Constructor You don't need to keep the number of player if you keep the list of players anyway. 

General comment Your code is well organised and easy to follow. Still it would be nice to add a bit of documentation, for instance to describe what the functions return. Also, you could try to follow PEP8, the Style Guide for Python Code, for instance, by using snake_case rather than camelCase. Also, I'd try to align the content of to get something like: 

I reckon there is still a lot more to improve and a much more simple solution could be written (as suggested in the comments). 

Back to Something I should have mentionned earlier but spotted on the late. In , you add a char to only to remove it afterward. It is much clearer (and more efficient?) to just write in the places where you actually need to word with the added character. Then, the code becomes: 

It makes everything much simpler. In particular, you don't need to create an instance of and you don't need to keep it in your Game object. So much win. More details : 

Errors are definitly something you should look at because there would lead to severe errors. Warnings are a good hint that something is probably not quite what you wanted to do. And leads to pretty similar results : 

If we could be sure that self.gender has only 3 different values, the default value could be put in the dictionnary straightaway (associated to for instance). Different variations could be written. I guess one could use to ensure that we always retrieve the default value. I don't like this solution that much as the dictionnary would get bigger as we try to retrieve using invalid keys. I don't know if there's a (simple) way to have a dictionnary which returns a default value when the key is not present without updating the dictionnary but I'd be interested in such a thing. 

Removing trailing whitespace, renaming variables, reordering the code to group statements about the same concepts and introducing temporary variable to avoid writing and computing the same expressions multiple times and adding comments: 

(I might have introduced on off-by-one error in the iteration counts but I can't be bothered). Then, instead of passing functions using your original functions, you could just write conditions directly : 

You should start by rewriting your function so that it returns things instead of printing them. Then, you can write automated tests. For instance, you can write the following tests: 

About The score method doesn't seem to access at all. You could make this a classmethod or a simple independant function. About There is a lot of duplicated code here. You can remove a lot out of it by thinking about what the ending condition for the game is : it is when we go back to the first player who has reached the final round (if any). You can simply write this : 

In the first category, your and are not required : you can get rid of this. This shouldn't change anything from a performance point of view but it's always good to make things easier. In the second category, it seems like you could open once for each . Also, for each , you could retrieve only once. Similarly, you could call once. This is the code I have at this stage : 

Naming On top of the snake-case point mentioned above, a few things could be improved in the naming. Naming is a difficult part of programming so what I suggest are just personal, far from perfect, suggestions (from a non-native English speaker). In your case, I'd call the function so that it conveys the fact that: 

Also, you do not need to define the variables before. Actually, it is better to define things only when you really need it. Thus, the function can be written :