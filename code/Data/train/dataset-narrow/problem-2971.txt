Unfortunately exams of any kind advantage some students and disadvantage others. They also favor those good at exams, not necessarily those good at the subject matter. I was always (over 40 years) a big fan of using projects to assess students. Let me describe how you might be able to make it work, provided that the scale isn't overwhelming. The course I will describe had both undergraduate and graduate versions. The number of students was normally around 30, always less than 50. My other teaching duties let me spend the majority of my time on this course. The course grade was determined 70% by a major project, 10% by a minor (warm up) project and 20% by a final exam for which any tricky or deep questions the grading was lenient. The main project took up all but 2 weeks of the semester. To make it work, I did this. First I partitioned the overall task into subtasks and gave a point value to each task with the sum being 700 (= 70% of the course). The tasks needed to be done in order for the project to be successful. They were dependent on successful "completion" but not necessarily "perfection" of earlier tasks. The student worked in self-selected pairs, which cut my "grading" task in half. Every two weeks the students would submit their work in a folder, including the current version of the project and all earlier versions. The changes from their previous version had to be marked with a highlighter pen so that I could easily find the changes. I also kept an index card for each student so that I could easily make notes as I looked at the work. I would spend about 2 hours every other week going through the project folders making notes on their pages. Sometimes the "note" was just a checkmark, indicating success at the level they were at. Students could work at their own pace and could target their own desired level of accomplishment. They didn't need to complete the entire project to achieve a grade with which they were comfortable. So some pairs were on item 10 of the work schedule, others on item 8, etc. If my notes on the work were negative they could re-do that work to earn the "checkmark" and could work on the next feature as well. At the end of the course I would need to evaluate everything they did and assign a grade. Normally it would be easy as could keep a running tally of their progress along the way. I also used various electronic communications (mailing list primarily) so that students could ask questions at any time. Everyone saw every question. Students were encouraged to answer questions (but not submit code) asked by others. I monitored the list daily and answered questions as needed. Every student saw my answers as well. The project was thought to be very challenging by the students. I gave them a lot of guidance, both about the subject the project covered and things like coding, design patterns, thinking like a programmer, etc. I provided a fairly comprehensive set of tests they could use to assure themselves of their progress. The periodic reports would include the test results from running their code. I never actually had to run their code. But if it was too sloppy I'd just note that on the work and quit reading. Only a few students hated me. Many loved me. The course was transformational as well for many of them. The trick here is to be (a) always available and (b) to evaluate (but not necessarily "grade" frequently, without it taking so much time that your life suffers. You can be very severe with them when needed so long as they know that today's judgement won't necessarily haunt them and that they can come back tomorrow. One caveat. The student (pair) that has to frequently repeat work to catch up will have some difficulty with the current work and in understanding the current lecture, which was paced to the project work. You need to watch out for that and give advice to "move on" leaving a bad spot in their work. But looking at their work every two weeks let me also determine if I needed to revisit an earlier topic in the next lecture. It was pretty obvious if groups of students didn't get it. Since students worked in pairs I needed some way to grade individuals. The small project and the exam let me get a handle on that, but I also had students to peer assessments of the form: (a) what was your partner's chief contribution, and (b) what was your chief contribution. The peer assessment always tried to let people say good things when they could, rather than asking for the bad. Grading was never a problem. Some students learned more, some less. Most were happy enough with the course. I always thought that I was giving something of value to every student. 

The book is out of print. Check around for a used copy. Amazon currently has it a bit cheaper than Abe Books. If you have a good University Library nearby they may have it. You might also be able to get a copy from interlibrary loan that is supported by most libraries. 

There is another sort of rabbit hole, one that your best students can fall in to. I once had a situation in which students were programming with a certain library that provided a simulation - a virtual world. They had certain exercises designed to teach specific thought processes; think recursion, or design patterns, but it could be lots of things. Some of the best students figured out that they could get the right answer, not by programming within the simulation, but by re-programming the library itself to make the exercise trivial. They got the right answer by rewiring the foundation. But the intent was to help them rewire their brains. It is hard to condemn such students, of course. They were very clever. They learned something. But the worry is that what they learned helped them avoid learning something else that may be more important in the long run. In this case the solution was that I tightened up the simulator (which made it better/more secure), but I also needed to assure that they did in fact learn the lesson of the day. It isn't that they did anything wrong, or learned the wrong thing, just that they may have failed to learn something important. The same situation would apply if a student, asked to write a program with some hard bits, modified the compiler to make those bits easy. Good that they teach themselves something about compilers, but bad if the hard bits held some important insights that programming around them left them in the dark about. I sometimes have to tell a few (usually good) students that the purpose of programming exercises isn't to produce a program, but to produce learning. Usually, if I needed the program I could write a pretty good one myself. 

Programming involves several tasks at different levels of abstraction. A good pseudocode lets a programmer focus first on the overall, high level, concepts, without having to change focus, or get distracted by, the lower level details needed for implementation. Even if you use "misspelled java" as your pseudocode you have gained this separation of concerns as long as your development environment doesn't complain too visibly or loudly as you go. Teaching this separation of concerns to students, via some formal or informal pseudocode, is a way to get them to develop algorithms from the outside-in rather from the top-down (i.e. top of page to bottom of page). That is to say, from the general to the specific, rather from the first statement to the last. Some students seem to want to work in that way initially. The sooner they develop better habits, the sooner they can progress. 

John Kemeny et all have published a set of books on Finite Mathematics that are classics. They have lots of exercises but no solutions in the books themselves. However, the solutions guide may be available for some of them online or especially at eBay with a suitable search. One of the classics is Finite Mathematics with Business Applications. Don't let the title fool you. It is serious mathematics. Another, more common and possibly lighter weight book is Introduction to Finite Mathematics These books are both old and out of print, but readily available. I think the latter one is available as a PDF online (but without answers). 

The problem of young women (girls) and other groups (minorities) being under-represented in certain educational fields and professions is a deep problem with only complex solutions. There is no magic solution that will make it right. First some data points. According to the Guardian, the problem seems to be somewhat localized to the US, Britain, and Canada . There is something about the educational and social systems in these countries that seems to drive some people away. In the early years of education, young girls outperform boys by a large margin. There is even a worry that the educational system disadvantages boys up to a certain age. In the US, at least, one of the influences is that elementary teachers are predominantly women, giving young girls positive role models. Many young females want to be teachers since they see how important teachers are in their own lives. Some solutions are pretty rotten (See the Guardian article, above). I read there that you should emphasize "cooking" as embodying both science and, well..., something. One possibility that helps explain the discrepancy among high school students is the conflict between smart and cool. For young kids these are aligned - teachers and parents give a lot of positive feedback for being smart to youngsters. But at some point, kids start to differentiate their personalities from others, especially teachers and parents. In some groups smart != cool and since students of that age are spending more time with peers, cool always wins. Boys want to be seen as cool both by other boys and by girls. The same is true for girls. Being smart takes second place. For the overly geeky, poorly socialized, boys it matter less as they won't be seen as cool in general, but only by other geeky guys. Toward solutions From the above, I suggest two approaches to the problem. The first is to provide mentors to young women and members of minorities. These mentors should, if at all possible, be similar to the students. Female, Black, Hispanic, Introverted, Poor, whatever. The mentors need to provide both some of the instruction but serve as role-models primarily. Can one or two of your female students visit a female professional at work (Take a student to work day)? Make this mentorship part of your educational process. A group of mentors can also provide a boost to the students later in life if you can make the contacts permanent. The second approach is to make smart = cool again. My personal approach to this is to emphasize group work in courses over individual work. Make learning a social process, not just an individual one. Let students work together with peers who share characteristics. Groups of girls, for example. Better is groups in which girls are a substantial part, though not completely dominant. Cliquishness isn't likely an improvement and every student needs to learn to work with others who are not just like themselves. You also, as a teacher need to be aware of dynamics in the classroom. Who asks the questions? Who provides help? Who dominates the conversations? Who do you call on to answer questions? Where do students sit in the room? Who do they sit with? All of these things can be indicators of things that may need addressing. Make your successful girls and minority students ambassadors for your program. Try to get girls (and minorities...) to form clubs and study groups in which they can work together, so that the socialization itself is part of the coolness. On the other hand, treat every student as an individual, no matter what their "characteristics." You may not be a natural mentor for some students but you can show through your respect for them and the way to treat them and answer their concerns, that their learning and future matter to you. Sorry that this isn't a more complete answer. It is a deep problem without facile solutions.