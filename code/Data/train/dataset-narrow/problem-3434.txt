Everything is easily editable, provided that you know what these parameters mean. For what concerns your last question: 

if you need a more reliable (and maybe scriptable) connection I suggest to use (or if you want your Raspberry Pi to become a wireless router) directly. I have to admit that is somehow practical, but it tends to take initiative too often for my taste, so I never use it when I need reliability. 

Are you sure that your script into is absolutely what you want to do and, more importantly, necessary? I think that it's almost always a bad idea. Moreover, when you're editing (as well as other tools that can be possibly launched by other users and/or other shells), try to take a step-by-step approach. For example, you can test your environment with something like this: 

If you don't mind patching the kernel with Ingo Molnar's RT-Preempt Patch or Xenomai you should be able to achieve very good scheduling precision even in userspace, simply enabling High Resolution Timers (HRT) and using clock_nanosleep(). In this way your userspace application should be able reach the sub-millisecond resolution, and you won't have to do a lot of kernel debugging while writing your kernel module. 

The problem is to have such a script paired with a keyboard shortcut. Normally, one would have defined a keyboard shortcut inside . But I think that takes over any keyboard input, so I suppose you'll have to hook the script both to and to . 

If there is a duplicate line, you can delete it pressing dd (d two subsequent times). Then save the file with ESC:wq. If there is not a duplicate line, probably the only thing you can do is: 

Looking at this thread and this issue, it seems it has been fixed in kernel version 4.9.24-v7+ since 17 April 2017 or so. I'll also try to upgrade my PI2 kernel. 

You can try with every backup you have, but you must remember that the more distant in the past the backup is, the more mismatching between its state and the actual state of your system there will be. This means that if you restore a backup dated back to a week ago, every package that has been installed since then will not be in the database. But the package has been indeed installed, so its files will be scattered throughout the filesystem. In a similar way, every package that has been removed since then will be in the database again, but it's files wont be on your system. So if you install other packages that depend on it, it won't be pulled in again and the newly installed application won't be eventually able to load some libraries. So, if you succeed in recovering one of the old package databases, make a between it and your broken backup, in this way: 

I'm using adafruit's usb to ttl gadget to communicate with my raspberry pi over usb. For some reason when I plug in my Raspberry Pi Ralink RT8188 wifi dongle and reboot, I can't access my raspberry pi over usb anymore. I use screen like this to access my raspberry pi: 

All you need to do is to pass an array with this content to Here is an example of what the structure could look like: 

That should work to record a simple video. However the simplest and most recommended way is to use the command below. 

In Step 20 of the tutorial you mentioned, all that is happening is that the script listens for keyboard input on the raspberry pi, and then sends that over Bluetooth. If you simply want to instantiate the Bluetooth connection and then send keystrokes programmatically and finally exit you just need to replace the call to with something like and of course manually set the self.state structure. As described in Step 17, the input reports are made of 9 bytes and prefixed with a byte indicating that the remaining bytes are an input report (). You will need to instantiate the report with 9 values and do the following things: 

You can try to use this program and connect your mac and raspberry pi via bluetooth and see if you can use your pi as a bluetooth keyboard for your mac. You should be able to type on a keyboard if you connect it to raspberry pi and get output on your mac. Once you successfully get that functionality working, try removing what you believe is unnecessary respectively add code to programmatically type a letter on your mac via bluetooth. If something breaks, try to understand what code is doing that behavior and why. Once you do this, you should be able to advance in your project. Don't forget to start with the basics and build from there. Good luck! 

I've been using the same camera module for a long time without realizing some colours seem to be very off. For instance black seems to turn purple or red (see picture below). Is there any settings I have to change or is the camera broken? I remember seeing this colour distortion ever since I bought it. image taken from RPi (black turns purple, colours are incorrect) 

You need to make sure the output pcm points to the speaker/output device you want the audio to go to. You can use to get a list of available output devices. You can know use avconv or ffmpeg to record audio from any application and also routing the audio to an output device. Here is an example: 

You can use the 5v output on the gpios of the Raspberry Pi. However be careful, you mustn't connect the echo pin directly to the gpio. Instead you can make a voltage divider on the wire connecting the echo pin because the b+ can't handle anything over 3.3v. Not using a voltage divider will damage your Raspberry Pi. You can use a 470 Ohm and a 1K Ohm resistor with the 1K connecting echo and ground. Refer to the diagram below if you are unsure. 

The problem was with the Windows Firewall, since Mcafee preventing the Firewall to establish the connection over port 22. I had to manually allow port 22 using this tutorial, $URL$ 

There is/was an issue with the Pi’s USB port that meant it can/could become overwhelmed1 with data which causes popping and bubbling noises to be included in your recordings, this can be fixed with an update of the Pi’s firmware: 

I am consistently trying to connect to my RPi through SSH but the connection is refusing. What I did is, I connect my RPi to my WiFi Router, Open Router's control panel and look into the DHCP table, 

I have bought myself a BU-353 USB GPS Receiver and trying to use it with the Pi, I have followed this tutorial to set it up, 

Have you tried connecting Raspberry Pi to your PC using USB to TTL Cable (Console Cable) ? The great advantage of using the console cable with the Pi is that it can even supply the power for your Pi and you do not need keyboard, mouse or display attached to the Pi to log into it. You will need to install terminal emulation software (Putty) if you are using Windows and also USB drivers for the Console Lead. The Raspberry Pi uses its built-in serial port to allow devices to connect to its console and issue commands just as if you were logged in. You would also need PL2303 Drivers to do so. I have been using my Raspberry Pi this way for quite a while and have no issue so far. It merits mentioning that Raspberry Pi Console Cable drivers (Pl2030) wouldn't work if you are using Windows 8 ( I tested that too). here is how you could use it, $URL$ 

I am following this tutorial to make my ADC Pi chip work, $URL$ but when I am running the example code, root@raspberrypi:/home/pi# ./adc_demo.py I am consistently getting this error 

I don't know what is happening , I have done this update before on the same SD card and it went alright. But this time it is not working. I have written the OS Image like 3 times to solve the problem, also tried 4 different SD Cards but the issue stays. 

But when I am writing an empty table shows up with each value equals to . What is wrong here ? Could anyone please help me. ? It merits mentioning that I am using puTTy to access my Raspberry Pi and have done all above steps using puTTy. 

I have 8GB Kingston Memory card but when i am trying to Update my RPi it gives this error after 80% loading, 

Anybody knows why I am getting this error :/ I have worked on the RPi through this process before (like a month ago) but it is not working now. It merits mentioning that I installed, 2013-07-26-wheezy-raspbian image file on my RPi 

I'm already using my Pi as a media center, now I would also like to transform it into my download center. I've seen that both and packages are available, but the question is, will I be able to use them both? I have a 128/128 MB memory split, are 128 megs enough to run both and even if daemonized? Anyone tried them yet? 

In this thread, people say that increases performance of sequential reads from the SD card. This LWN article also suggests that is a key feature to boost boot times, even on very fast media such as SSDs. This is because the normal boot sequence has a lot of "holes" (in term of CPU usage) waiting for things to be ready (just think at populating directory, etc.). These "holes" can be used by to prefetch disk sectors that will be used later in the boot sequence, thus skipping blocking I/O requests. 

BT is a pain in the ass for everything that is not sharing a photo with another phone or having a call on your headset. BT is not for general purpose networking. WiFi is the right choice, but the mode you are looking for is so that your Pi will become a real access point. So be really really careful about what dongle you buy. There are many combinations of drivers/chips that don't support AP nor ad-hoc network creation (mostly Broadcom AFAIK). I strongly suggest to pick up an Atheros or RT73 chip for this kind of things (even if it's hard to find Atheros chips inside USB dongles). For example this should work because of its RT73 chip (as stated here, here and here). If you want to buy another dongle with another chip, then you'll have to investigate yourself if the chip supports infrastructure-AP mode. 

The encryption would be performed while installing the software on the Pi, and the decryption would be performed at runtime, possibly in RAM. For example, the password could be a combination of some pseudorandom sequence number (known to you) and the specific Pi's serial number obtained from a . Then you have to find a suitably hidden location to store this pseudorandom number that is to all intents and purposes "the password" and thus the weak point of the whole encryption mechanism. For example a spare sector on the SD would be the typical choice, but you can even embed it into one of your executables. In any case, your best option is to both encrypt and compile your software, to add different layers of obfuscation to your software. Finally, if your software needs an internet connection, you can even make the Pi ask for the password every time. You'll still need to hide the password inside the connection, you will also have to use and you'll have to protect against reply attacks, using the current time as for the encryption. You have a lot of (cheap) options to make you software secure. But you have to know that if your software hits some well defined popularity threshold, it will be cracked for sure, even if you invest substantial amounts of money in its protection. 

I found this article online and decided to give it a shot and run the commands they recommended and the result is mindblowing. 

assign 0x01 to the first byte in the array, which will basically tell the bluetooth device that you are working with a keyboard input report. the second byte is used to specify any modifier keys (alt, shift, ctrl etc.) which is useful if you need to hold down shift to sprint in the game. the third byte you shouldn't touch. The other 6 bytes you should use to specify which keys you want to simulate in form of Bluetooth key constants provided in the keymap.py file. 

After rebooting everything, I could ping any ip address within my local network. I had to add to the usb0 interface on the pi zero to be able to for instance. 

I have my raspberry pi A+ in my embeeded project and every byte of memory is important when I've only got 128 MB to my CPU (I need 128 MB for the GPU because I use the camera module). Unfortunently the memory is eaten up by linux quite quickly. Freeing up the cache makes a huge difference Before I ran a few commands on my raspberry pi I had less than 4 MB of memory left! 

Now I was back up to just about 56 MB of memory! What might be the source I am running several processes that communicate via UNIX sockets and I might just have missed a huge resource leak in one of my programs, but how would I detect it? Furthermore since I want my project to be up and running pretty much all of the time I want to somehow detect when the memory is low (say < 10%) and then run these set of magic commands to free up my memory. 

Double check that you have followed all the steps from the tutorial correctly! Also does the code provided in PiTooth.zip work: 

Using this microphone I have some severe noise in the background. The more peripherals I plug in (camera, gertboard, wi-fi adapter) the worse the noise becomes. We've tried several different power supplies, however the problem still remains. The microphone seems to pick up some switching noise from the pi itself and from the peripherals connected to it. The most significant frequency one can hear sounds to be about 1 Khz. The noise is not present if one plugs in the microphone into any other computer. So the problem clearly lies with the raspberry pi itself. Do you have any suggestions as to what to do about this problem? I am using a Raspberry Pi Model B with old linear regulators. Perhaps the problem could be fixed by using a USB hub with an external power supply? (EDIT: So, I took a new sample from a video today and one can hear a "click" sound every second which I find wouldn't sound too much alike ground loop noise. Anyway here's a image of the frequency analysis: