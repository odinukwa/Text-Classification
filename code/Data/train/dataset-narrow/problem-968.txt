I would create a helper method for returning the value you want to give to , and also store the value of in a variable. 

Now, the folks over at Oracle noticed that this was a very common pattern in code, so in Java 8 they introduced the method: 

Let's say you would try to put a in here, then this code would run. You would print a stacktrace (the end-user would not see this, and it's not the first place a programmer would look either), and you would silently fail. Don't do this. Throw an exception instead. Don't leave room for silent errors. Finish! 

What you are already doing is a nice way of defining both the text for the button and the action for it at the same time. As you're able to use Java 8, I would really recommend that you start using Java 8. You might actually even want to consider migrating to JavaFX (that would probably require even more work though, but it could be a nice user interface upgrade). One option, when using Java 8, is to do this: 

Now I will introduce some concepts that you are not used to yet, see this as a "This is what you will learn and what is possible". This is very likely to be above your skill level at the moment, but it might be interesting for you to hear about it. What if we assign logic for each book to know when it is applicable? Let's see how we can model our problem. Let's have a class, . And a class . 

When modifying the index, you can use the modulo operator to make sure that it is within the bounds of the array. Here is what I would do: 

Not because you don't see a for-loop doesn't mean that it doesn't exist. Ask yourself the question about what does. It loops through the array, doesn't it? A faster way to handle this assignment might be to use another data structure, such as a HashSet. 

Using streams is not always the best option. Using a greedy algorithm you only have to loop through all your persons once. You can even implement it in such a way that you don't even have to save all your persons at all. So what do we need to keep track of, then? 

As your current code now indirectly forces the set to only contain one of each component, then you could use a instead. This would also reduce the need for the loop 

Yes, it is unreasonable to expect this approach to be "fast". This answer will focus on... drumroll, please! Why your current approach is slow The reason for why it is unreasonable to expect this approach to be fast can be shown simply by adding a field to your class and increasing it at the beginning of your method. Then log this value for different values in your main method. 

If this is also considered too complicated, it might be because of your array and your bitmasks. Not everyone are fans of bitmasks. You might want to consider making this bitmask-stuff a pure Javascript object with some sensible names and properties instead. For example instead of you can just have Additionally, it is not clear what is at all. I think the language is some Eastern-european language (my best guess would be Polish), but what it means or is used for? No idea. I'd personally recommend using English variable names but if you work with people that does not know much English, I understand that that might be hard for them. 

Give me parameterized SQL or give me death! Seriously. Use prepared statements! Don't use as that makes your code vulnerable to SQL Injection. By using prepared statements, you won't need the calls anymore. 

Now, while there is not a method or anything like it in SourceDirectorySet, or any of the super interfaces of that, there is some Groovy magic that provides a method for all s. This means that you should be able to do the following: 

Once you have used some of the format flags enough, you will remember them. , and is the most common ones you need to know. Specifying number of digits and stuff are a bit more advanced, but after a while you'll learn that gives you a float formatted to 3 decimals. 

First of all, speaking of good practice, I would not have the variable as . Using variables is like using Singletons. There can be only one. You might regret this strategy later. Instead, if possible, I would declare the in another object and not set it to . Technically, you said "I create class level static ArrayList by the following line." but on that line you only declare the , you create it by calling That being said, I would say that it is a better practice to call on your list instead of recreating it. If you clear it, then there is no need to recreate it (unless you have sent the object reference to other places and you don't want those objects to be the same anymore). By not recreating your list, it also allows you to set the variable to , which is good practice. Here is how I would define your variable: 

Possible extension: Make it a Your classes supports multiple answers to be correct, that is nicely done. But what if one answer is still "better" than the other? My suggestion is that you use a or a for instead of a . Java 8 If you have Java 8 available, your method can be improved: 

It's easy to assume that is short for , but that itself doesn't tell us much. would be a better name. 

I think currently, option two is the best, but it is doing the wrong thing. Loop through all the kinds of items I am buying instead of looping over all the 10 apples. It is much easier (requires less computing power and less work by the database) to loop over an array of (3 times) than to loop 10 times for apples, 7 times for pears, and 30 times for bananas. (I like bananas, OK? And I do plan to share some...) 

Problem solved! Note that I changed to catching instead of as Errors (throwables that are not exceptions) shouldn't really be caught, they are much more serious so they are meant to crash everything. 

Thanks to marking the as final in the method declaration, it is accessible also from the inner class. You can now use this like: 

Brainfuck doesn't have any guidelines (that I know of) about indentation, formatting and comments, so how you do those parts is entirely up to you. Personally, when writing Brainfuck, I find it extremely important to keep track of the values of the memory tape, which is why I prefer adding comments about what the values of the memory tape are. Then if you want to edit anything you can more easily change what you want to change by reading your comments about the values of the memory tape. Performance 

Empty list input If the input is an empty list, then the output will be a list containing one empty list. I think it would be more reasonable if the output itself was an empty list. This can be solved by only adding a list if the number of items added is more than zero. 

There is also an "example" directory on my GitHub repo which contains a script that I used a lot while testing, run and it will output something like: 

I strongly suggest adding the event listener in the constructor instead, and only returning in the method, and renaming the method to . 

isn't a very explanatory variable name. Let the variable itself describe what it is temp for. For a simple calculator though, perhaps and would suffice. You're using strange indentation in your constructor. It's good that you separate the fields, but no need to add an extra indentation for the lines where you call methods on the buttons. The class should be named with capital N to be consistent with the Java coding conventions. 

If you're never removing elements from that list (which is hard for me to know since I only see a portion of your code), then sooner or later that list will get out of control (have too many useless elements) which will eat up your memory. Besides this, the only possible concerns is your and but if those do what it sounds like they do (simply return a list without any computation or modifications of those lists) then you don't need to worry about those methods. 

So, if it is in the map, then let's do the common things and use the redirect we picked from the map: 

Using the conditional operator to choose different methods is not very readable. Another option might be to use a framework that does these kinds of things for you. 

Here we are specifying logic in by using a "lambda", which is available since Java 8. Now you can create a object and use a loop to find out which book(s) should be recommended. 

What you actually can do is to refer to . Java keeps the reference to the outer class' within anonymous inner classes and allows you to reference them using