increase the source voltage: if you lose .4v over the wire increase your source voltage to 5.4 volts so that you get 5v at the point of use. You must measure your exact voltage loss. increase conductor diameter. decrease cable length. This is easy enough, if you use an ac extension power cord you can place the power supply close to the rpi. 

the web server. wrapper.cgi: this program is called as www-data by the web server it calls sudo or super. sudo or super with a configuration file that only allows www-data to call real.cgi real.cgi: This program writes to gpio after preforming final checks. Be very careful when writing this. 

Although fat has all sorts of problems I don't think this is necessarily one of them. ext2 might offer some improvement, ext4 probably would, but your biggest improvement would be compression and archival. either something like zip or tar.gz or maybe since these are sequential images mpeg 

Feel free to change the geometry to what ever you want. You would just need to generate a .vnc/passwd file and adjust the path to match. If you don't want a local X server comment out or delete the :1 line. Other display managers will probably work, but the configuration would be different. 

Not all modems can be used for dial in. Almost all landline modems will work fine for dial in, but with GSM modems you need to verify that it will work. The fast easy way to check is to verify that it will sind RING messages and supports the ATA. If the modem meets those requirements it will work (with suitable adaptors). Install mgetty and read its documentation for software details. If the modem does not support those features there is still a slim chance it will work, but it will be much harder to setup. The modem bobstro linked to may work, but it is designed for other use cases (it is designed for continuous internet connection) and probably will not work with mgetty. Unfortunately you will probably need to talk to a salesman to find the right modem for your use case. If this is noncommercial you may also want to look at HAM based radio modems. P.S. use ppp not slip. slip is better than nothing, but ppp is much easier to use. 

The short answer is "you can't". RAM is a volatile storage medium, once it loses power, it loses data. A quick blip is enough to corrupt RAM, if not restart the device entirely. Remember, The loss of power isn't like a signal that you can catch (unless you can program the RPi to be psychic). A few general guidlines to reduce data loss: 

At this point the repository does not contain an officially supported version of PostgreSQL 10. When software releases a major point upgrade, it can often take quite a while for it to get into a repository, as there's a lot of work involved in such a process. If you want the latest version, you'll have to either be patient, build it yourself (I don't recommend this), or maybe utilize something like docker. 

For all currently released models of the RPi, the GPU is in no way a limiting factor of performance. It might struggle if it's given too little RAM for its designated tasks, but I'd recommend against changing it in any significant way. When you increase the speed of your processor, say from 900 MHz to 1 GHz, you're increasing the amount of work that the processor needs to do. 100 MHz is a relatively small increase, so you probably won't notice a difference in power usage. As you bump the usage up higher and higher, the processor will consume more and more energy. Overvolting is a way to compensate for that. Some chips can see huge performance increases through overclocking and/or overvolting. The binning processes means that your chip meets the set minimum, and usually a little over for a margin of error. Some chips will be capable of performance significantly above the set default. How much can really only be determined by experimentation. I haven't stumbled across anything online that suggests you'll see much performance from messing with the RAM. If I recall correctly, it's currently significantly faster than the CPU is able to take advantage of. When experimenting, make sure to make small adjustments. I'd start bumping up the speed, and if it seems stable, push it up a little more. If the RPi starts to have issues, you can try adding some voltage, or just slowing it back down. It's a lot of trial and error, but some people find it fun. Possible Problems: Several things can go wrong with an overclocked setup. You asked about SD card corruption, so I'll start there, but some others should probably be mentioned. 

MIDI (Musical Instrument Digital Interface) is a simplex serial protocol (that is only sends data one way. If my memory serves it uses a standard uart. My first thought would be fire up minicom open up the usb midi adaptor tty device and set it to n81 31250 baud, then just do an ascii transfer. the two issues Are that that is a nonstandard baud rate, and something in my mind wants to say even parity which would mean 7 data bit. Give her a try, It can't hurt. 

Cron may not support backtick command expansion. put your commands in a script and run that from cron instead. much easier to debug. 

Most display managers can be configured to have multiple X servers and on boxes with one or no monitors using Xvnc works well. The setup that I use has the advantage of using the main X configuration with out using xdmcp. I use xdm because it is the most configurable. here is my /etc/X11/xdm/Xservers file 

I seriously doubt that you will be able to reverse the hdmi port and use it for input, but It would require at a minimum a different kernel, disabling the X server and the frame buffer and writing a custom driver, if it is possible. You may have some luck with the camera port, but I know very little about it. Vga would require high speed a/d circuitry. It would be a fun project but nothing quick. 

Your Raspberry Pi is probably dying. The RPi can get pretty warm, roughly 80 C, without damaging the device. Since the device boots, you can run the command to get the current device's temperature. Currently, mine is sitting at 44.4 C, with a heatsink. Run the command a few times spaced out over the couple minutes. If that temperature is rising until it dies, you've got a good indicator that the RPi needs to be replaced. 

There's a lot wrong with your bash script. For starters the shebang is wrong. It should be , not . Your other issue is including all the asterisks () in your bash script. They're used in the cron entry to tell it when it should be run, but cause errors in the actual shell script. Change the second line of to just . 

The short answer is yes, Linux and by extension, the RPi can be run from a read only SD card, but some things do need the ability to write and then later read from somewhere. To set up what you're asking for, you have a couple options: 

No, it will not run on any version of the RPi. Looking at the link you provided, it specifically states that the OS requires an x86 processor, and that ARM is unsupported. All versions of the RPi use some version of an ARM processor. 

There are some USB hubs with active power management that when they are plugged into a computer try to negotiate power consumption with every device, so they cut out the power to every device to start plugin events. These hubs (which are otherwise very nice hubs and work fine for every other use) will not work to power the RPI and act as a hub for it at the same time. the two workarounds are to add a really big capacitor (or battery) to the RPI so that it will function through this power interruption, or to steel power from the hub's power supply instead of the hub. It would probably be easier to just use a cheaper hub. 

The longer the wire and the smaller the wire the more voltage you loose. That is a plain and simple fact. There are basically three ways to compensate for this: 

I personally like sudo or super for this when combined with a traditional cgi, and security can be managed to minimize risk (this can be done securely). The main criticism of cgi for large scale projects is because it forks for every request it does not work well with large numbers of requests. This criticism does not apply in this case because the main limit of bandwidth to this cgi script is what is connected to the gpio pins, and forking allows the script to run in different security context then the web server. There are some common mistakes that should be avoided: 

If you're aiming for a low powered device that needs to fit in a smaller space, or you need a hat (because who doesn't love hats?), the A+ is probably the better bet. Model A: 

No version of the Windows operating system includes an SSH server as a part of its distribution. WinSCP (what you've installed) is only a client, not a server. If you want to be able to access your Windows machine's files through SSH, you'll need to install a server. If you want access to a full bash command line, you'll need something like cygwin. If you just want an SFTP/FTP file server, something like FileZilla's server is probably enough. 

Your bod rates don't match. In your first example you have -b 9600 and in your snippet you have 115,200. These need to match and some crazy weird things can happen when they don't. Bod is the speed at which data is transferred over the connection. If one is moving faster than the other you won't be able to correctly read/interpret the data being sent on either end of the connection. 

It's certainly possible, but it'll require additional hardware. Once the RPi loses power, that's it. Just like your desktop, there's no magical way for the RPi to do anything (like send a notification) once the power is gone. You could add a small UPS to the RPi. There are a few that are even designed specifically for the RPi, like this one. If the power goes out, the UPS will send a notification to the RPi. Then the RPi can handle sending a message across the network. If you're fast enough, the RPi may never experience downtime. If you're not fast enough, the RPi can gracefully shutdown. Alternatively, you could add microcontroller to monitor the power and send a message if needed. Something like this should be able to run off a battery for along time. I think the best and simplest option though would be to ping the RPi on a set schedule. Since your RPi is a network attached kiosk, you obviously can contact it through said network. Why not just setup a handshake every 1/5/60/whatever minutes? This could be as simple as a script on your server or even desktop workstation that just pings a list of IPs/Hosts and then notifies you which ones don't answer.