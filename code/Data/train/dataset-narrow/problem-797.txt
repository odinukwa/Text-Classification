I would say you don't need all the events, just the . I don't see that you are capturing data just for the SCOM database either. Extended events can cause an overhead just near to what SQL Server traces will depending on what you are trying to capture. You are basically capturing every query that comes across the server and telling it to wait so you can first check the text of the query and then grab information through the extended event session, then letting it complete. As well the constant activity SCOM has, depending on environment configuration, it is likely to have an extreme performance hit either with trace or extended events. I would suggest looking at the plan cache for those types of queries initially. However you might try adding more filters to your session such only grabbing a sample of data from active sessions and then also only capturing data for the particular database. That would look something like this through the GUI: 

I was going to just comment the link to the SQL Server 2012 Best Practice security white paper...but found out Microsoft took it off the Internet for some reason. You might be able to find a cached version of it some where online, but I will paste in the contents of contained database section of the document here. There is also a BOL article for Security Best Practices with Contained Databases, this may be why the white paper was taken off but not sure. Author of this whitepaper: Bob Beauchemin, SQLSkills; Published January 2012; Applies to SQL Server 2012 

Passing a variable to that SQL Agent step in that manner is not possible considering it does not know about the variable itself. A variable in T-SQL has to be defined/declared before it can be used...hence the error that it is not declared. Your further consideration is actually the proper way to do that with PowerShell. You would include looking up that value via PowerShell and then insert it into the T-SQL definition of the SQL Agent job. Now, an alternative that I would just note (because it is built around folks that are not day-to-day DBAs) is dbatools PowerShell module includes commands that are "Ola-aware". We have a command that you can use to deploy the complete Ola maintenance solution. You would use to deploy the jobs, and it includes a few parameters that allow you to customize the cleanup time, backup directory, etc. You can also utilize a few other commands to manipulate job schedules () according to your needs, or even based on a group of servers. SMO is more easily accessible in the module so grabbing thinks like the backup directory or the root instance directory can be done with a few lines: 

You actually cannot remove a login from the public role either, SQL Server does not let you because it is hard coded in there somewhere. You will most security standards for things like HIPPA or DoD (STIGs) want you to simply harden what the public role can do at the server level and within each database. See "INF: SQL Security - Restricting access to public..." for a bit more information on it all. Creating a login straight from GUI or from just and you will automatically see these permissions at the server level: 

Since she is a member of the AD Group she still has access. Her old username showing up in SQL Server could be from login cache. You might try closing any connections the old login name has, since it might cache the SID for her login. Since the login was just renamed in AD I don't think that it will change the SID so the mapping is still there for SQL Server to function with the old name. 

Might consider using Invoke-Sqlcmd since you are working from a machine with SQL 2008 installed. You do not get the column separator option as does, but within PowerShell you could export it to XML or CSV. Basic syntax for your query would be: 

The account will show up as just when you are looking at the local accounts via the UI (I recall). I'm not sure why you see one with the hostname but that would not be a system account on the local machine. You can always just use T-SQL to add the login: 

Which I would bet if you read the EULA that comes with SSDT-BI and SQL Server it will have verbiage stating in some manner that all components of SQL Server are non-distributable. I have heard of folks that do just what you have mentioned and I expect are not licensed for that type of setup. Whether you only require SQL Server CAL licenses to cover the SQL Server 2012 SSIS install, I can't say with complete clarity. It is something you will need to ask your software vendor or Microsoft rep. 

Log backups after SQL Server 2000 can be taken concurrently during full and differential backups. The only thing to remember is during that timeframe the log will not be cleared until that full or differential backup completes. Full and differential backups that collide will cause whichever backup started first to take precedence, the second backup will wait in line until prior backup is completed. So if you have a FULL backup running, and a DIFF backup starts, that DIFF backup will wait until the FULL is complete. I do believe it should be the same for the opposite as well. 

Although what you described should work as configured, another option would be just create an alias for your named instance. 

Think of Azure storage as an external disk, it just sits in Microsoft Data Centers. Copying your backups to Azure provides you the ability if your building gets wiped away, bring up another server with Internet access and retrieve the last backup you copied up. Azure storage (blog storage) allows any file type, the only limit is one single file cannot exceed 1TB in size. If in the future your backups grow to that size, you will just need to split the backup into multiple files to keep it under that limit. SQL Server 2012 and higher allow backing directly to Azure via BackupToURL. You can utilize Microsoft® SQL Server® Backup to Microsoft Azure®Tool to do similar action across any version of SQL Server. There is a write up done for using this tool here. Azure does not delete or clear out old backup files for you, so in your design of the backup solution using this service you will need to also deal with cleaning files out if needed. 

In your case you will just build out the "IIF" to follow the criteria you have for your formatting. This is just a guess from doing it in my head (and writing it out in Notepad++) but I think this should be what you are looking for: 

Use T-SQL This could go anywhere from just using Registered Servers in SSMS to get the results for all servers at one time; or from a single server that can talk to them all creating linked servers to each one. To automate a T-SQL option only, would require a bit more if you want to email it, but you could dump all the data into a single table and then it out to Excel possibly. I am not much for using BCP when I have PowerShell to get it straight into the format I want. 

It states on this KB article that the setup will fail, although the applies to only list up to 2012 version. One main reason you are going to have against doing this is Microsoft Support. As it states in documentation you should not install it, they are not likely going to provide support. Especially if you experience any security or performance issues. Unless you fork over a good bit of money they are probably not going to do much for you. I have never seen a company put these two roles together out of choice. I hate to say it but if they need to run an application in SQL Server and it is going to be a mission critical application there is no reason for them not to invest in running that application. Hardware is cheap these days and it does not take much for AD to run if your organization is that small. You could even go and get 2 or 3 year old hardware for that matter. Now with that said, Window Small Business server used to be the one stop shop for a situation like you describe. It is an AD, Exchange, and web server all on in one; and if I recall also had an installation of SQL Server but I can't remember. I setup one of these servers for a department one time. However with Window Server 2012 they changed this to Window Server Essential Edition, and I am not sure what roles you get with this Edition. I would suggest though you simply spend the money to get Standard Edition. A feature you get with Standard is licensing to run two guest OS virtual machines via Hyper-V. If you size the hardware appropriately it will allow you to run your SQL Server instance in one VM and then your application in the second VM. Although your performance is all on one server it provides a boundary separation and would be a fully supported setup by Microsoft. Just my two cents.