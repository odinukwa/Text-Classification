My first recommendation is to start using reek. If you use atom as an editor, then integrate them via it's linter package. if not, it has a command line tool: 

then you don't have to do anything extra to keep price type up to date. The much larger and tougher question to answer is why is this variable being cached on each table in the first place? This is going to eventually make maintenance a nightmare. You need to take a hard look at where you are accessing this value and ask yourself if you really need to cache it. These decisions are made usually in response to slow queries in views or controller actions, but most of the time that slowness can be resolved in better ways. In general, favor query optimization over denormalization 

Make a rule for yourself that you don't check in anything that doesn't pass reek 100%. If there's a rule you disagree with, disable it in the file in the project root. After reek, do the exact same thing with Rubocop. These are more repetitive and easier to fix than the reek ones. with both of these passing 100%, you'll be surprised how much cleaner your code looks. 

since you have to cache on every table, you could use callbacks to not have to do this in a... controller action? or wherever. This could be a first step to simplifying. 

You will then see 39 issues with your code. Below is a sample of the output. each item has the line numbers associated and links to pretty good documentation about why it's bad and how to fix it. Fix all of these issues first, and repost. Then we can start looking at possible abstractions. 

the larger issue here though is that you are essentially using as a switch for what should essentially be two controller actions. the latter being the index action of the cards controller, and the former being something along the lines of . Possibly a next cards controller. The show action of which could look something like routes.rb: 

Very easy question for these who spend some time on analyzing code written by co-workers. When I write my code, I do my best to write it in a very, extremely readable way. But sometimes I have an impression, that I write it too easy... Simple example: When I see such a code: 

What weak points do you see in such approach apart from that, that conditions have to be mutually exclusive, or have to be added to conditions list in a very specific order? Would you decide to use such strategy in your code? 

Yesterday I found some nice video from some IT conference about removing if statements from code. I saw a very nice example of refactoring. I am curious what do you think about it, especially what weak points do you see in such approach. 1) We have a class with very "nice" method: 

As you can see all conditions are mutually exclusive. 2) The idea was, to create a separate class for each condition - under a common interface: 

Not sure if I've understood yout question correctly, but I assume, that your grid is a square grid (you test both, maximal high and width, as a lower than grid's height). Referring to your first question: There are many options. You can make a method which takes two parameters at a time: 

The question is what approach of constructing such an object do you prefer: Option 1 In constructor: 

But this exception handling seems strage for me. I would simply throw it in and handle when this method is invoked. 

Code in Java but should be readable also for c#... Let's assume I have a class with some reference types. Example: 

The problem is not very complicated (I mean it is easy to solve it), but the question is how to make it in the easiest way (Java) Input String: 

The enter, update and exit selections The biggest problem with the enter/update/exit pattern in your code is that, when you create the stacked chart, you append elements, but you don't remove them when creating the bar chart. So, you actually don't need the exit selection for them. The same way, since this is D3 v3, you don't need the update selection for the bars. It's a good idea keeping this selection, though: this is an incorrect pattern in v3, which was corrected in v4. This use of elements in the stack chart and just elements in the bar chart is not the best option. You should deal with groups in both of them, or just rects in both of them. That way, you could create more constant transitions, which would have the same behaviour in bot layouts. However, this would be a major refactor, which is out of the scope of this answer. Also, since your bar chart right now has less bars than the stacked chart, the bars naturally expand to the right hand side. So, to give the transition more fluidity, I'd set the exit to the right hand side... 

Here is the demo, compare it with the snippet in your question, the result should be the same (except for the last two conditions, since will never be ): 

The colors are different from your snippet because, in your snippet, you're creating the array first and sorting later. But this is easy to change, if you want: 

You can simplify your area generators, as well as your code to append the paths, using an to append the paths or an object to define the and methods in the area generator. However, there is an simpler alternative: you are facing all those difficulties because of the structure of your data. If you change your data's structure for a more adequate one you can create a code which is way more idiomatic, therefore easier to read and, the most important, easier to maintain. Right now, this is your data structure: