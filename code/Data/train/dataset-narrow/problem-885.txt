and it avoids having to return the object from the player object. Perhaps my implementation of isn't quite correct, but you can make it work. 

Since it uses numpy it probably is also faster. It does more multiplies, but it also can take advantage of your CPU's vector pipeline. More importantly, though, due to the way the code is structured it is much easily parallelizable. It breaks up the problem into a number of independent computations which can be evaluated on multiple cores. Even if numpy doesn't do that for you right now, that capability could be added to numpy in the future and your code would automatically run faster. Additionally the package can also detect common parallelization situations and automatically run your code on multiple cores for you. So there are a lot of good reasons to structure your code the way this guy has done it. 

The compiler can implement as a jump table or as a binary search. Using will always perform a linear search. As for vs - there should be no difference except that requires you to import Control.Arrow whereas is provided for in the Prelude. 

How large are these files? My suggestion would be to load the entire compressed file into memory instead of using multiple calls. If you are storing the decompressed contents in memory, surely you can also store the compressed file in memory as well. Most of your run time is spent fetching bytes with , so being able to replace those calls with direct memory accesses should improve performance quite a bit. Another suggestion I have is to use instead of this loop: 

The key is to use with an increment of 1 starting from the previous computed config. Using this idea, here is a better definition of for a general : 

How about storing your data in sqlite database? All of your operations can be implemented as relational database queries/commands. Your table will have columns: 

It's a safer way to implement the loop as the check is always performed. The way you've written it the check will get missed if someone uses somewhere in the loop body. 

It only reads once It's a lot safer It's easier to express more complex logic You have more versatile data structures available to you - e.g. real arrays and hash maps. 

is another potential expensive call. I would detect alphabetic characters using comparisons with the end points of the upper- and lowercase character ranges: 

The caller can always convert a to a string given a function which converts a single to a string. I think a good candidate for would be (or perhaps .) With a small change you can generalize your routine to factor rational polynomials - i.e. not just polynomials with integer coefficients. why call again? I'm not sure I understand the point of calling again after the first for loop. My understanding of the p-over-q method is this: 

In fact, you should be able to find a way to eliminate the need for this variable - during the player's turn it is always odd and during the computer's turn it is always even. 

and you have a similar problem with . Unfortunately, to preserve whitespace in these cases I don't think you will be able to use the function here. It is customary to have parens around the list patterns, e.g.: 

find a prime divisor p of n find the exponent e of the prime p in the factorization of n repeat this process with n / p^e until n = 1 

So build up the solution iteratively. If you have the placement how can it be extended to a valid placement ? Clearly r2 can't equal r1 and (0,r1) can't be on the same diagonal as (1,r2). And, of course, r2 has to be a valid row number. 

When you add a new kind of song, you can decide which class to inherit from based on which methods are valid for it. For instance, if it has all of the methods of plus some more, then inherit from . If it has the methods of plus some more, then inherit from , etc. This way you won't have to modify any of your existing classes when you create a new song class. 

the argument never changes throughout the recursive calls the only elements of accessed are the first and last characters is a potentially expensive function since it traverses the entire list to find the last element 

If none of the rationals in the list are roots of the polynomial, then there are no rational factors, and calling again won't change that. the NaN problem Perhaps your NaN problem is caused by this code: 

For short lists this is fine - but note that its running time is O(n^2). If you need a better one, there is one available in the standard library: remove-duplicates in the standard library. On longer lists it uses a hash - you can view the source here: (link) divisor-count Honestly I had trouble understanding your and routines. The conventional way of computing the number of divisors of a number n is: 

You've written the program as a single function. The overall structure can be made more apparent and the code easier to follow if you define helper functions which encapsulate smaller steps of the full program. For instance, if you take the 30,000 ft view of your program, it looks like this (in pseudo-code): 

partitions This is inefficient since once you have one person's items you know what the other person's items are - just take the complement. Also - does this condition really work if two items have the same value? 

Using Data.Memocombinators Have a look at Data.Memocombinators module. It offers combinators for memoizing functions which is essentially what you are doing with the . Here is the example from the documentation on how to use it to create a memoizing fibonacci function: 

The method is relative slow but indexing using is very quick. Instead of appending each wanted pattern and then calling to find it again, just append the index to : 

You can make this run efficiently by creating an index on the column. Lookup are just For instance, to select only those configs which have second id: 

Finally, I have a question about your patterns for and . What does the output of look like? Presumably the inputs are number something like , , , etc. Could there be a ? There should be a delimiter in the output you can use to make sure you are matching the full switch number. 

Given these observations, why not just pass the first and last characters of the alphabet to , i.e.: 

A clique is just a set of Ints. You could use a linked list, or a bit set, or whatever you want. Here is part of a Haskell solution which might help you structure the problem in C++: 

parseMessage The main problem here is that you are calling on the result of , and this doesn't preserve the original whitespace. For instance, the last case should just be: 

It all depends on how many configs you have. For a large number using a sqlite database could be a win. 

where is the (infinite) list of primes and returns all of primes less than which can be combined with . 

Only keep track of the positions of the queens - not whether a square has a queen. Since only each column may have one queen (and must have one queen), a solution is a indicating the row positions of the placed queens, e.g. is a solution for a board having 3 columns (and at least 5 rows) where the queens are at (0,0), (1,2) and (2,4). 

Reshaping Reshaping allows you to (for instance) reorganize a 1-dimensional array into a 2-dimenstional array. Just the dimension metadata is changed so the operation is very efficient: 

The idea is to keep track of the last node in the chain so you can update its field when you create a new node. 

You've gotten rid of a lot of global variables, but you can do even better! Consider writing this function: 

doubleEveryOther You are correct to write as a recursive function, but ... you don't need to call on every call! Think of a way to writing but with calling at most once. length and reverse As you become more familiar with Haskell you learn that you should be wary of calling and on lists. In this case it is not a big deal because the lists involved are very short, but, in general, if you find yourself using these functions a lot it's an indication that you are using the wrong data structure. As a bonus exercise, see if you can figure out a way to implement the function without using or . 

This whole approach is completely bogus and not worth your time. A "pattern" is simply an array of percentage changes. For simplicity let's use a pattern size of 5. So a pattern might look like: 

And here is a way I would transform this into a loop which avoids double checking the exit condition: 

When called with an adjacency function and list of nodes will return a stream of the cliques found. To solve the problem: 

(Substitute the literal with the squishing character.) This alternate approach probably makes more sense if you were to define squishing on ByteString or Text. 

These work like the and functions in other languages. Let's assume the first and last characters of the alphabet are the standard and . I've leave you to figure out exactly what the code should look like, but here are some hints: 

For instance, what if the values of the items are ? This suggests that you should partition the item ids - not the item values. Here is an example of what I'm getting at: 

meaning that the price difference (from the price at time 0) at time 1 was 1%, at time 2 was 3%, at time 3 was -2%, etc. Given another pattern we want to compute how "similar" they are. This is done componentwise using a similarity function for percentages whose definition is: 

since you use (x,y) tuples elsewhere for points on the function. You should be careful about using here. Are you sure that with your basis polynomials you'll always get a integral result? To be safe you might have to perform the calculations with Rationals. Instead of I would probably call the function - again, just avoid the prefix . Finally, note that your and functions can be written in terms of the and functions from : 

Note that always assumes that is defined, and it doesn't have to return it since all invocations modify the same object. 

Use Here is a blog post containing an example: (link) Have a look at the language-python package. It's lexer is built using : (link) Purescript handles indentation via the , , and functions: (link) Grep the rest of the source code for these functions to see how they are used. Its lexer defines a token (link) but from what I can tell it is never returned, i.e. see (link). The indentation level is kept track of by the parser (link) via the function. 

Define a variable which will hold all of the cliques found (of any size.) Initialize to just the empty clique. Consider the next node - call it . Let be all the new cliques you can form by adding to an existing clique in . Check for a solution. If no solution is found, add to and repeat from step 2. 

The main issue I see is that it appears you are busy waiting on the directory, i.e. you are reading its contents at regular intervals to see if there are new files. Note - I have not written a single golang program, so correct me if I'm wrong, but are you trying to poll the directory every microsecond? The right approach is to use file system notifications from the operating system. For instance, check out this library: $URL$ Using file system notifications your program can remain idle until something interesting happens at which point you receive an event on a channel. This is an interesting architecture problem and I might have more to say about the rest of your program later. A few other minor things... The variable should be named - i.e. the 's' should be on the end. conveys the idea of a singular piece of information about a bunch of files, whereas is more clearly a plurality of file information. Also, "info" is a very generic term. Everything is information. It appears that is really a "directory entry". You'll see the term "dirent" commonly used in the POSIX world to describe a directory entry, e.g. this man page for the system call: $URL$