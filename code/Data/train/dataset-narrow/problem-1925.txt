Theoretically, two USB3 to HDMI adapters (or more) should work fine behind a good USB 3.0 hub, provided that the USB driver for the video interface allows multiple instances of the device. The particular USB3 to HDMI adapter is listed as having 300 mA power consumption, so the "my HP laptop's" Type-C port should be able to handle the power for two adapters (600 mA) plus hub itself (~ 100-200 mA), about 700 - 800 mA total, which is well within the basic USB 3.0 power requirement. The hub, however, has a suspicious statement, "Certification : Does not apply" . So it is possible that something is fairly wrong with this hub, and some devices might not work. 

USB 3.1 uses one lane (Tx pair and Rx pair) because it is USB standard, to use only one Rx+Tx. All original USB connectors (A, B, microAB) have only one pair of SS (SuperSpeed) contacts, and the entire USB hardware architecture focuses only on one, single-lane design. To use more lanes in parallel, there should be additional architectural elements in hardware data pipe on how to deal with lane synchronization and other issues associated with individual link-layer management, buffer credit exchanges and error recovery, link training and individual channel electrical optimization. Once you do all this, it is turned into "Thunderbolt". Or something like MIPI. The Type-C connector is a new standard for CONNECTOR, which was meant to have wider applicability than USB alone. The need for Type-C was largely driven by system design, to fit into smaller form-factors of portable electronics. In some sense it has nothing to do with USB, and your request to re-use all available super-speed lanes to change the standard USB architecture is unfounded. 

I think there is some confusion. The Linux funny numbers seems to be LOGICAL HANDLES to USB devices, and they are formed after the physical enumeration process is done. Physical USB addresses have no resemblance with the handle names you listed, they are numbers from 1 to 127 that are embedded in every USB packet, anything in that range. The original USB (1.1 and 2.0) is designed as "star topology", where all packets are BROADCASTED to all USB devices in the tree. Therefore the devices must have unique addresses that are assigned to them in the process of enumeration, to be able to decode proper streams. Although the system does know all the hubs and ports where the devices are connected to, it does not determine the packet's route, there is no information in USB packets about hub/port numbers, only device addresses. This however could be different for USB 3.0 architecture where packets can be explicitly routed by hub/port number, but the enumeration process is still required for backward compatibility reasons. 

This is a challenging task. It depends on what kind of NorthBridge is used in the a1330 PC, and how it is routed to DIMM slots on a particular mainboard. At that time there was a distinction between "low density" DIMMs versus "high-density" DIMMs, all related to memory chip organisation, something related to either chip select or number of address lines per chip. The 1GB DIMM can be two-sided (I believe it is with "low density"), or one-sided, which may (or may not) work. 128M x64 seems to imply a 8-chip DIMM, but again, there were DDR DIMMs with 4 chips per side. Go to e-Bay for cheapest DIMMs, buy 2 pieces, try, and then buy two more from the same place. Good luck. 

Yes, there is USB sharing over WiFi. Did you look into product offerings from I/O gear? $URL$ This one works over CAT cable: $URL$ 

This is a misconception. Nobody "splits" or "re-distributes" anything in USB3 architecture. USB2 signals go through USB2 D+/D- channel exclusively, USB3 signals go through Tx/Rx pairs. I guess this misconception comes from the older and different USB2 architecture, where full and low-speed (FS and LS) transactions can be really "split" between multiple FS/LS connections. In USB2, this function was implemented via so-called "Transaction Translator" (TT) block built into each hub. And the HS bandwidth could be "split" between FS devices only if multiple TT (MTT) are designed into the hub. This kind of translation architecture is not implemented nor specified in Super-Speed USB3 architecture. If you connect four USB2 HDD to a hub, all FOUR will get an aggregate of 35-40MB/s per HOST, or 8-10MB/s sustainable throughput per each drive. Higher USB3 "bandwidth" has nothing to do with USB2 transactions, absolutely nothing (except that the xHCI USB3.0 controller architecture might be somewhat more efficient in handling protocol overhead). USB3.0 hubs have essentially two hubs inside, a USB3, and a legacy USB2. They function independently, they just redirect (mux) downstream ports to one hub controller or another if a device is attached, or just work in parallel if hubs are in the segment. Same goes for USB3.0 hosts, the architecture is the same, and they are called the same, except that it is "root" hub. If you get the USBview.exe utility, you will see that the root xHCI controller branches into TWO ROOT HUBS, one SS USB3, and another USB2. If you plug a USB3.0 device into mainboard USB port, it goes into the USB3 section, and logical port number will be, say "1". If you plug a USB2 device into the same physical port, it will be directed to USB 2 branch, and its logical port will be something like "5", so the total bandwidth will be defined by corresponding root hub section. No one shares the super-speed bandwidth with high-speed devices, they are nearly independent. So the answer to OP question is "NO". 

I can definitively answer the first part of the question, "IS there a necessity for the mouse to know a different protocol or a different pinout to be able to be connected to a PS/2 port ?" The answer is yes, a USB HID device (mice and keyboards) must understand the alternative PS/2 protocol in order to function in PS/2 port using USB-PS/2 adapter. Not every USB mice or keyboard support the PS/2 mode. Presence of the green adapter in the OEM package warrants this compatibility, but the opposite is not true - some HID devices do support PS/2 mode even if the adapter is not included with the product, some don't, all depending on IC in use. For example, the Microsoft Notebook Optical Mouse P/N: X08-86056 does not work in PS/2 port. 

Keyboard, mice, audio, and USB2 pen drives have no effect on operations of USB 3.0 channel - these USB2 devices go through ABSOLUTELY SEPARATE hardware, a USB 2.0 hub that is built inside the USB 3.0 hub, leaving the USB 3.0 bandwidth untouched. Please see the USB 3.1 specifications, Section 3.1, figure 3-1, page 3-2. The text says, "The USB 3.1 system architecture (Figure 3-1) is comprised of two simultaneously active buses: a USB 2.0 bus and an Enhanced SuperSpeed bus." A 1080P HD webcam (30fps) takes about 60 Mbps of effective bit rate, or maybe 2-3% of the available USB 3.0 bandwidth. It does not seem something to worry about. Therefore, the rest of USB 3.0 bandwidth on the 7-port hub will be available for your "graphics tablet" for your professional work, with all hard data/facts you provided. 

Your device looks like is following the standard "stick" configuration. If so, the "Big USB 2.0" (USB Type-A receptacle) is a host port, which should support USB 2.0 hubs, so you can connect a keyboard, mouse, and a pen drive to your Android. The "small USB DC" (micro-B receptacle) is for external power supply only, it should not connect as any USB device. The other "small USB OTG" is a dual-role (aka OTG) port. With a special adapter (u-B to A receptacle, ID pin grounded in the uB) is can work as USB host port, just as the "big" one. With a regular uB to A cable (ID pin floating), the stick should act as USB device, likely as MTP-class device (Media Transfer Protocol). For Windows PC to connect, the PC should have a USB MTP driver installed, check it HERE. 

There is no need to suspect something or not. Everything is defined in Type-C specifications. Use the common rule of engineering: Read specifications. Yes, the main problem is with “legacy cables”, Type-A plug to Type-C in particular. The Type-C specifications define the primary mechanism of how the consuming port (phone/tablet, or Upstream Facing Port, UFP) detects source capability. If a standard C-C cable is used, the supplying port (Downstream Facing port, DFP) “advertises” its capability by using three different pull-up resistors on CC pin. If a 5V pull-up reference is used, these values are 56k, 22k, and 10k, for port’s capability of 500mA, 1500mA, and 3000mA correspondingly. The CC wire propagates this information from DFP to the end of Type-C cable. The connected device (phone) will (should) detect this, and limit its consumption accordingly. Now, what to do if you have only a legacy Type-A port on your host, as most PCs do? The Type-A does not have any extra pins like CC. The Type-C Specification suggests embedding this information into the Type-C end of the legacy A->C cable. Therefore, the “information channel” is broken now, and the phone will try to grab as much current as the pull-up resistor inside the Type-C overmold indicates, which is soldered by cable’s manufacturer. Since the cable does not know which port you will plug it in, the safe cable pull-up should be 56k, otherwise the phone can try to suck 1.5A or even 3A from the cable. If the port is a regular USB, the requested cable power may vastly exceed port's capability. With cheap uncontrolled power delivery (some cheap PC mainboards connect the VBUS directly to internal +5VSTBY), it will cause system shutdown. If the port is powerful enough, but the cable in use is skinny (Type-C cables can have as low as 28AWG on VBUS and GND wires) and the C-connector has wrong 10k pull-up, the cable might burn out and cause fire. P.S. You can measure the pull-up value of CC-to VBUS on any A-C cable by using a breakout connector like this one: link