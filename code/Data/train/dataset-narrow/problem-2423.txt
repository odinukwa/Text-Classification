I am not sure whether the following problem has been studied. We have a undirected tree $T$. We would like to construct another tree $T'$. $T'$ is a binary tree. Each inner nodes of $T'$ is an edge of $T$. The set of leaves of $T'$ is the same as the set of leaves of $T$. $T'$ is constructed as follows: We pick an edge $e$ in $T$, which breaks $T$ into two parts $T_1$ and $T_2$. $e$ is the root of T'. we recursively construct the left and right subtrees of T' from $T_1$ and $T_2$ respectively. The cost of T' is $\sum_{v:leaves}Length_{T'}(P_v)$ where $P_v$ is the path from the root to $v$. We would like to find the tree T' that minimizes the cost. I suspect the optimal algorithm is to pick the edge which split the number of leaves as evenly as possible and recurse. However, it seems to be a clean problem that has been studied. But I have no idea what to search. Any help will be appreciated. 

I would like to solve the following problem: "minimize $\sum_{i=1}^k \sqrt{x_i}$ subject to some polytope constaints." Is there a polynomial time algorithm to solve or approximate it? Thanks. Jian. 

The general circuit/formula minimization is certainly harder than identity testing, since the minimum formula size of any identity is simply zero. As for how much harder, I don't have a definitive answer but perhaps the "reconstruction algorithms" studied in arithmetic circuits/formulae might be something along these lines. In these cases, you are give a blackbox and told that it is a formula in some class $\mathcal{C}$ (say a depth $3$ circuit). The goal is to construct a representation of the blackbox in (something close to) $\mathcal{C}$. Typically, most reconstruction results assume blackbox identity tests for the class, randomness, and sometimes other kinds of queries. Such reconstruction algorithms are available for certain restricted classes of circuits but not all classes for which we know blackbox PITs. Shpilka and Yehudayoff have a fantastic survey (pdf) on arithmetic circuits, and one of the chapters is entirely on reconstruction algorithms. But in your case, you say $d$ is a constant and hence even if the input was given as a blackbox, there are reconstruction algorithms for sparse polynomials. So maybe the above comments are not too interesting in this case. Also, in the case of $d=2$, there are structure theorems for quadratics. Under a linear transformation on the variables, any quadratic can be rewritten in the form $x_1x_2 + x_3x_4 + .. + x_{2k-1}x_{2k} + \ell$. This property was used by Bogdanov and Viola for constructing PRGs for low degree polynomials (pdf) (Lemma 17 of their paper). 

An elementary one, but common when we first dealing with asymptotic notations. Consider the following "proof" to the recurrence relation $T(n) = 2T(n/2) + O(n \log n)$ and $T(1) = 1$: We prove by induction. For the base case it holds for $n=1$. Assume the relation holds for all numbers smaller than $n$, $\begin{align} T(n) &= 2 \cdot T(n/2) + O(n \log n) \\ &= 2 \cdot O(n/2 \log n/2) + O(n \log n) \\ &= O(n \log n/2) + O(n \log n) \\ &= O(n \log n) \\ \end{align}$ Q.E.D. (is it?) 

The answers here already cover most of the nice suggestions about intuition. Still I would give it one more, which is usful when developing intuitions during paper writing. This is suggested by my own teacher, Hsueh-I Lu, which I found it very useful. Whenever a result is written down, and the correctness seems to be verified, rewrite the whole article. This time we have to enforce ourselves not to use any words or definitions similar to the previous versions. This makes us think in a completely new different way, and new intuitions will develop. Also, perturb every parameters used in the paper, see if any set of parameters differ from the one we used originally works still. Often some mistakes exposed when rewriting the article. Come up with new ideas to overcome them. Finally, after rounds of rewriting, we will have a nice round intuition about our own result, and we won't be too optimistic/pessimistic to the power of the new ideas presented in the paper, since we're tried for a couple of times, and it is clear that what is working and what is not. The same method works if you are reading a new paper, and wants to get some more intuitions other than the one given by reading. 

There are deterministic and randomized algorithm running in time $\mathrm{poly}(n,d,k)$, where $n$ is the number of variables, $d$ is the degree and $k$ is the sparsity. AFAIK, the results are stated for characteristic zero fields but work over any field large enough (again, polynomially large in the parameters). This paper of Kaltofen and Yagati discusses both the randomized algorithm of Zippel and the deterministic algorithm of Ben-Or and Tiwari, and then goes on to present some improvements. 

Polylog independence may not be the only way to fool $AC^{0}$ circuits. To illustrate this example, consider the class of linear polynomials. Any zero set of a linear polynomial is $(n-1)$-wise independent but of course this doesn't fool linear polynomials. Hence, $(n-1)$-wise independent distributions do not fool this class. This of course doesn't mean that only $n$-wise independent distributions fool this class ($\epsilon$-biased spaces fool them, and are polynomial sized spaces). I guess what one means when they say "$\log^{O(d)} n$-wise independence is necessary" is that there are examples of distributions with smaller independence, and it is known that they do not fool $AC^{0}$. 

One possible implication of this would be that $NEXP \nsubseteq P/poly$ from Ryan William's result (since you would then have an co-nondeterministic algorithm for CircuitSAT running in time faster than exponential). Not really negative evidence, but still... 

Is there any reference known for the above claim? In particular, I'm looking for any results that shows at least one of the following: 

If the required number of times we need to cover an element is 2, we have the following densest k-subgraph problem: (Imagine the edges are elements and nodes are sets.) 

Basically what it says is either the odd-hole-free graph belongs to a kind of basic class, or we can decompose the graph into smaller pieces using two kinds of decompositions. The proof of the strong perfect graph theorem follows the same spirit, and similar results are also known for various classes, e.g. even-hole-free graphs. The interesting thing is that although the structural theorem of even-hole-free graphs leads to polynomial-time recognition algorithms (1, 2), the corresponding implication is not known for odd-hole-free graphs. However if we add the restriction that the clique number is bounded then we do have such a result. 

Here's another interesting example, raised in induced subgraph detection: A theta is a graph with non-adjacent vertices $x,y$, three paths $P_1, P_2, P_3$ from $x$ to $y$, where any two paths induced a cycle with length greater than 3. A pyramid is a graph with a vertex $x$, a triangle $y_1,y_2,y_3$, and paths $P_i$ from $x$ to $y_i$ for each $i=1,2,3$, with at most one path with length one. Finally, a prism is a graph with two triangle $x_1,x_2,x_3$ and $y_1,y_2,y_3$, and paths $P_i$ from $x_i$ to $y_i$ for each $i=1,2,3$. It is easy to describe in figures: 

Grigoriev and Karpinski (ps.Z) showed that any depth-3 circuit over a fixed finite field computing $\mathrm{Det}_n$ requires $2^{\Omega(n)}$ size. I had the misconception(?) until recently that the same proofs also goes through for $\mathrm{Perm}_n$ as well. To add to this, quite a few papers in arithmetic circuit complexity state in passing that the lower bounds is for $\mathrm{Det}_n$ and $\mathrm{Perm}_n$. As far as I can see, the proof technique of Grigoriev and Karpinski when applied to the $\mathrm{Perm}_n$ fails at a subtle technical point. Their proof (for $\mathrm{Det}_n$) uses the following fact: 

$NC$ algorithms for perfect matchings in general graphs is still open but there has been some progress. Here are a few that I am aware of: For general graphs, Agrawal-Hoang-Thierauf showed that given the promise that the number of perfect matchings is small, there is an $NC^2$ algorithm to enumerate all of them. For the class of planar graphs, the pfaffian plays a big role. Kastelyn showed how every planar graph can be oriented in a way such that the pfaffian exactly equals the number of perfect matchings. (This was used by Valiant in to give "Holographic algorithms" for various problems) Mahajan-Subramanya-Vinay showed how the pfaffian can be computed in $NC$ using modifications of clow sequences. (Kastelyn in fact gives an algorithm to find the embedding in $P$ but I'm not sure if the pfaffian embedding can also be computed in $NC$; if yes, that would mean that counting perfect matchings in planar graphs is in $NC$.) And a recent result of Vinodchandran-Tewari show that the isolation lemma can be "derandomized" for planar graphs (using Green's theorem!) to put planar reachability in $UL$. But $NC$ algorithms for planar matchings are still open (thanks to Raghunath for correcting my claim that it is in $UL$). An $NC$ algorithm for bipartite planar matchings was given by Datta-Kulkarni-Roy Hope this helps.