The best way to do the equivalent to a restore point is to already do routine saves of your SD card image to disk. Remember, these cards can always fail at any time without notice. So, be sure to use 

will do the same as ssh does in Linux. For it to carry X-11 sessions takes some configuration. I know it works but haven't tested it yet How to make Putty do the equivalent of “ssh -X”? EXCERPT: 

So now as I am trying to write that image (to any of several of the same-looking cards), they all are showing the exact same error - same numbers. 

Once the plots are running I resize the terminal windows and arrange them on the screen. For good measure I do another terminal showing the ssh sequence. Voila, here I have four independent sessions into the OUTSIDE system with three of them displaying live plots and the fourth one to show hostname before and after the ssh command: 

So all is well. Thank goodness for having Ubuntu sitting right here ready to step in and do the job. 

as long as myproject has a shebang as the first line (use the return from in the shebang). This minimal example assumed myproject is in the current directory or is in the path like in The ampersand (&) will keep it open in a separate window. Look below at my script and you can see that I use a variation to simply open gnuplot. Your will work the same way Note that if you want to display a directory in python you can use the os library. You can even use os.system("lxterminal") to open a new terminal from within your program. I also see in StackOverflow there is some discussion about popen and checkprocess for problems like this in Python. Seems the same happens with the ps command, when called from within Python. $URL$ Here's one portion that you might find interesting 

I have tried using Windows Remote Desktop. First thing to do is edit /etc/xrdp/xrdp.ini file so login screen prompts for the port number, with a default of 5910. The first time I connect I must backspace over it and input a -1 at login, of course. If I disconnect I can always log back in with port 5910 and find that session still running. My /etc/xrdp/xrdp.ini includes this: 

The answer to the last part of your question, "Also don't the older versions get removed automatically when newer versions are installed as in Windows?" The answer is a clear and emphatic No. Older versions do not get removed when new versions are installed. Too much of our software ecosystem has been built on top of Python 2.x for it to be expendable. To remove it would break a lot of our commands. Plus, Python 3 offers very little that is attractive to the Python 2.7 programmer. If you find you need those features then you have the option of using Python3. If not, people like me will stay with Python 2.x As has been mentioned in the other answers, they are not really the same language anymore. 

I have several Rpi3s running Raspbian. They collect data and I use FileZilla to copy data from one to another. Ideally, I am only copying files that have changes or are new. FileZilla can be installed on a PC at FileZilla download FileZilla can be installed in Raspbian with this command: 

You pretty much answered your own question in a roundabout way. When HDMI is disconnected, the Pi will revert to the settings configured in as shown here: VIDEO OPTIONS IN CONFIG.TXT (raspberrypi.org) The Pi will adjust to different settings at boot time to match a connected monitor, though. So it tries to make sure you have a good image on-screen. It simply is not built to handle changes on the fly. So it may not even be that the two devices are different from each other as much as it is that one or both are not the same as the default configuration. 

and delete any network sections other than the one you want. If the IP address is not correct, you will want to go to 

I found a nice little 4-port hub that works just fine with the Pi3B and relies on the Pi for power. With a 5V 2.5A mains power supply on the Rpi, it is rated to supply an aggregate of 1.4 Amps on the USB ports. That power can pass through this adapter. The other reason to use mains power is for peripherals that need it, as shown below. This works with keyboard and mouse and flash drive as-is. Here it is: 4-port USB Hub on Amazon The only trouble I have had is when I tried a Passport drive on it - it simply didn't work. But it works for my 1TB laptop SSHD with a SATA USB adapter and external AC mains SATA power supply. The power supply came with the SATA adapter. This isnt the exact brand as mine but it looks the same: SATA to USB with power supply I haven't had need to try more than one drive like this, but have no reason to think it wouldn't work. 

Utilize Microsoft's Common Interface File System (cifs) - the core of Microsoft's LAN Manager. (You can safely skip this tech info and proceed with the steps listed below) $URL$ 

Then try again and make sure you get the message. Scroll down a bit and it will tell you what directory to use for your HTML files. Maybe you knew all that part already. So then to transfer your files you do this: Make sure SSH is enabled on the Pi - you can use raspi-config for that in a terminal window. You may need to reboot. Then install FileZilla on your PC. Use it to make a connection to the Pi via Wifi. When you set up the new connection in site manager (ctrl-s) make sure it uses SFTP and a "normal" login, then put in your username and password. Username is usually "pi" When you connect for the first time it will want you to accept the public key of your Pi. Then it will connect smoothly from then on. It can transfer your HTML files into your www directory or into a subdirectory you make. You will be able to see the files they used. Make sure your initial filename is correct, or add yours to the URL when you test it. Then test it in your browser. It should work the same as if you did a publish. Creating names is done either by modifying your host file (c:/windows/system32/etc/hosts) or in a DNS. Not by file transfers. If you need multiple sites on one Pi then put them in separate subdirectories. Or if you are a mastermind, look at the Apache configuration file and see what you can do with that. 

Some of the RPis have to work in the harsh outside weather conditions yet they have proven to be a whole lot more reliable than I expected. One thing you do learn about when assembling such a system is fault-tolerance. Preparing for failure. Backups, backups, backups. Extra hardware and Rpi SD card Images saved so if one fails another can be swapped in quickly. It is rare, but can happen. 

Note: can also be used to save it on the primary SSD in the Ubuntu system as a .IMG file for backup. Now that I have gotten to the bottom of this I'll still continue to use Win32DiskImager and cards of the same size. All saved in the Windows NAS system.