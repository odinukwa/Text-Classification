The following are examples used to convey the point, there are multiple instances of each of these examples within your ERD. Naming Consistency is key. Some table names are pluralised () some are not (). Your table contains data about many tickets so I normally prefer pluralised table names. You're prefixing every column with the name of the table. This makes for column names like , which isn't instantly understandable to readers. If I named the primary key of then you store and you might access , which makes everything more understandable. Relations There's a couple of relations that don't exist, for example you've got in (makes sense if you have preassigned seating) but no relation to ? Why not? If your cinema/theatre doesn't have preassigned seating then you don't need this data. There are some duplicates within tables. Why does contain both and ? Data duplication There are some unnecessary (unenforced) relations that are allowing for data inconsistencies. If a must happen within a an a ticket must be at a then there's no need for to contain any information about the hall in which the movie is going to be shown. It's unclear what the difference between the and is. Maybe one of them is the number of minutes the screening runs for? This information is already within and so is another duplication. Data There's no need to persist the age as you've already got the date of birth. I've written about this on Stack Overflow a few times. It's quite an assumption that all staff and movie names will be 45 characters or less. I find the inclusion of in the staff table a little off-putting. What's the purpose of storing this information? Are the chromosomes of the person selling you a movie ticket that important in this cinema/theatre. I also don't understand why it's 10 characters long. How to start Think about exactly what information is required to go within each table. If you're not sure it's required then don't add it in. If you need to add something later then so be it, but you haven't included a lot of unnecessary data. I'd set-up some test tables with dummy data to see if what you're creating will actually work. Every relation to another table should be enforced. If you've got some unenforced relations then either add a foreign key constraint or remove the column. Your cinema probably has tickets, so removing the data will prevent you selling tickets. 

It will only delete the earlier backup if the current one is successful. You can try doing a full backup, cancel it and do list backup. 

You have the localhost ip in the listener.ora (127.0.0.1), change this or add another line with the NIC ip. 

Because you are not logged in as the user system. When you execute conn system/password as sysdba, Oracle won't even check the user and password (--> from the local systeem where the db is running on). If you enter the system/password as sysdba and then execute 'show user', you'll notice you are logged in as user 'SYS'. So you are actually entering the wrong password when you execute the conn system/password, Oracle doest not lie. Check $URL$ for more information. Because what I told you is not the whole story. 

If you don't want to use this function though, why not just remove it from your code? The only time I can think of there being a valid use-case for this sort of structure is when you're running identical code in two different schemas/on two different databases but this function is useless in one of them. If that's the case the function is still useful in the other and so you will want to do something with the result anyway. 

We need to add a column to a table that gets hit about 250 times a second, approx 170 selects, 125 inserts and 60 updates. The column will be a simple . The does not matter for the inserts or updates i.e. not part of the primary key, which I'll enforce separately. We basically don't want to have to do an over a range scan 170 times a second, as the number executed will drop massively. Does an index organised table guarantee that will always come before when running the following query: 

You can have 2 databases with the same db_name on the same system on linux in the same ORACLE_HOME. You just have to make sure that the instance name differs. EG different pfile/spfile,... It's just not advised to give them the same name... When running the runinstaller you just give them the same global name and a different SID. --> Not sure how Windows reacts on it. The reason why the db_name has to be the same in a primary-standby setup is because the name is "imprinted" on the datafiles. The db_unique_name is mandatory in order to make a difference between the databases and to setup a syncing. The recovery would be impossible if you use a different db_name 

The pk constraint, for the IOT, would become with a separate constraint on the pk solely for structure. is null in approximately 99% of the table so this isn't very selective anyway. Main index used is, I think, , we tested about 20 combinations and this came up top by a long way. I am completely unwilling to add any time at all to these queries, 0.01s a day added by select is 41 minutes a day. We'd much rather settle for "good enough" than perfection. 

If the function does not need to be called from SQL you could change it into a procedure with an OUT parameter, though this still requires a "junk" variable it might look very slightly cleaner? 

Grant, executed in 10 ms Try redoing it, you probably missed an admin option when you tried for the first time. Drop everything. 

Here's a link describing and solving the same problem, do note that you still have to make your own pfile, but that isn't hard. $URL$ 

$URL$ Our open source license permits you to use Berkeley DB, Berkeley DB Java Edition or Berkeley DB XML at no charge under the condition that if you use the software in an application you redistribute, the complete source code for your application must be available and freely redistributable under reasonable conditions. If you do not want to release the source code for your application, you may purchase a license from Oracle. For pricing information, or if you have further questions on licensing, please contact us at berkeleydb-info_us@oracle.com. 

As far as I can tell this doesn't appear to be a permissions issue (though it obviously is). The system privileges of the 2 users are identical, the following queries return no results: 

I have created two identical procedures in two schemas. I have then granted execute on each procedure to a third schema. I call each procedure using the qualified object name. When calling the procedure in one schema there is no issue, when calling the second I get PLS-00302: component must be declared. Why? Here's the code I'm running, actual usernames/passwords have been obscured. Firstly the procedures are created in and and execute is granted to 

3 In case of the oldskool manual duplicate on the target server ( where you want the duplication ) you can do rman target / catalog start with '<path to backup>'; Then it'll print out all the backups, don't worry if you have other files in here. He'll give a couldn't read header something. After this you should do crosscheck backup; So it will be updated with what is present. It'll show the backups it can't reach anymore with expired. You don't have to do delete expired. You can can also do a duplicate from an active database which is easier. cfr $URL$ 

Earlier today we had a problem logging into a database that had just been created automatically. When on the actual box (Linux) , i.e. a local connection, was fine, though, it was occasionally impossible to do anything once connected. Otherwise, whether using a session on the box or not did not work at all. and DNS testing revealed nothing and there was no problem in . The Listener was accepting the connection but not handing it off to the database. This was confirmed by using on the listener log and watching it accept the connection. There is a logon trigger on the database that inserts the user details / time etc into a table, but this doesn't have any indexes and there cannot have been any locks. We finally traced the issue. There was a conflict in the file that creates the temporary tablespaces for the database. It resulted in there only being 5MB of tempspace instead of the normal 25GB. Disabling the logon trigger and then adding the additional temporary tablespaces, sorted everything out. There were some sessions already running that would have been using some of this tablespace. Apparently Oracle requires some temporary tablespace in order to accept an incoming connection. The specific version used on this DB was 9i, though I think this applies to all. Why and what is it used for?