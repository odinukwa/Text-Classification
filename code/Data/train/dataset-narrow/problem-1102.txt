Your service looks perfectly fine to me. As far as the component goes, I can only recommend one thing. When is executed, a reference to the subscription is being returned back. Ideally, the reference should be kept as long as the component is alive. On component destruction, the subscription should be released by invoking . 

Why do that if simple cast would work? Like this: where is whatever the specific type of the entity returned by the API. 

This code has to be declared in an function or arrow function to work. Otherwise, it's still a perfectly asynchronous code... 

I am going one-by-one through problems in the "Cracking the Coding Interview". This question is about problem 1.5. One Away. Since I was never good in "algorithming", any suggestions are highly appreciated. The very best thing you can do for me is suggest a better approach instead of the "straightforward" fragile code I wrote. Oh, and since it's pretty much an interview question, performance is important too. The solution I got is -- bound by the length of the longest string so far (which can be easily fixed by early exit when exceeds ). Code 

Why Deal With Indices In Loops? The last map function can be rewritten the way that does not require manual counters/indices manipulation. This is very typical for functional programming. This approach helps making sure that there's no chance for the infamous OBOE. 

Add one tool at a time to your toolkit and start harvesting the fruits. Polish your skills over time and they become your second nature. Experiment with what you've learnt. Keep investing into the tools (in other words, make sure point 1. is repeated). Retrospect and notice how the practices/aspects can be efficiently combined together. Often the case it happens intuitively without intentional search for it. Be patient... PROFIT! 

Disclaimer This is by no means the best approach I recommend to use generally, but I think it's better what you have now. Especially, since you identified a very important problem of Card/Question quantity growth. My solution is much more scalable, but it too has its limits. If you apply this for now, and see some other issues coming, feel free to post a follow-up question with a specific ask. I hope this helps. 

Array-based N-stack When we want to implement three or more stacks using a single array things become trickier. This is because we don't have a thing which will work as a clear bottom for the 3rd, 4th, and all the remaining stacks. Even memory allocation scheme Of course, we could "allocate" arrays space to each of the stacks simply by evenly distributing the space segments among them. Say, if we have 4 stacks and an array of length 100, we could say: "Segment from 0 to 24 is dedicated to array #1; from 25 to 49 — to array #2; from 50 to 74 — to array #3; and the remaining 75 to 99 — to array #4". If I am not mistaken, this approach is taken in this question, which is about exactly three stacks via a single array. This certainly would work, but this is only a great solution for the case where all the stacks are populated evenly. However, if one of the stacks is very long, and all the others are very short, we can easily run out of memory for the first array. In general case, not knowing anything about the data, we should not assume this is a great strategy. Non-even memory allocation scheme 

If in fails, the promise will be rejected and we will fall into lines - which is good. There is one problem though... The promise created in line () will NOT fail even though we failed to update the . Try debugging it and you will see what I mean. I think, what you need to do there is to re-throw the error like this: 

If we're talking functional-programming, I'd use instead of a loop. It abstracts the iteration process. 

This is hugely improving the time complexity, which looks \$ O(rc) \$ to me, at the cost of \$ O(rc) \$ memory used for unreachable cells recording. 

My approach, design, and implementation description Array-based single stack Array-based implementations of stacks are very well known. A single stack is normally implemented as an array and an extra field that works as a "pointer to/index of the stack header". One of the array boundaries then works as a bottom of the stack. The other boundary of the array represents the end of available stack "memory". Here's my sketch for how it works (forgive my handwriting). 

Ideally, you should not orchestrate the entire lifecycle of your application from Program class, but I left it... There are also lots of things I was unable to understand, and I left them aside [consider as a "homework" for you :)]. I am using a few classes since I believe you wanted to see a more object oriented approach. Notice that the code is still neither super clean (OOP-wise), nor super efficient, but gives you the basic direction (@Zebraman has a great comment on the underlying data structure you use). Let me know if you want anything to be explained in detail. 

One way to achieve what you want is to use and may be operators. operator taps on a target stream and executes a function on each non-error event in the stream. It is designed specifically for this purpose, which you can define more generically as side effects: 

Now we can build a Traverse class that implements a generic method which is generalized and can be applied to any part of the tree and with any thinkable predicate on activity object (passed as a parameter). 

Here's the way I think about it: As a consumer of the I will never care about the specific sequence of validation steps. I only care about: 

Update 2 A related blog post. and a comment on it, and another one tell more about ternaries in functional programming. Another way to look at it is through the prism of a truly FP language, such as Haskell. Here's a link to comparison of if-vs-pattern-matching. In fact, a chain of ternaries resembles pattern matching functionality a lot (yet, not necessarily the same). Do not stick to the old dogma of "ternary is bad"! Harness it for the win! 

Applying the suggestions to the code I could only rewrite the first half of the function. The second half requires a broader context to make a meaningful change to it. As you can see, I failed to rename into something descriptive, because I'm unaware of the models you are using in your application. Hopefully, even this "mechanical" refactoring is able to give you some ideas on how the code can be improved. 

Consider passing into this function as a parameter. It will improve the code by not having a direct mutative access to global state which is a known source of bugs. addEvents 

Design decisions and improvements (as in "better approach(es) performance- and memory-wise"). Code readability. JavaScript (ES6) language idioms. Whatever you find important to say that does not fall into three categories mentioned above. 

I am very new to JavaScript myself, therefore it is hard for me to notice any other non-idiomatic pieces of code. B. Slightly Different Code Please notice that this is not a refactoring since I don't know what your models exactly look like. 

Of course, this code is only a sketch to demonstrate the idea. It should be polished. For example, I find it a bit strange that even the original code does instead of . 

On Observables My personal preference is to have as few objects and invocations as possible. If I don't have mistakes in the refactored code, you can achieve a single which does the same things as your code. I also got rid of . 

DISCLAIMER: I'm not very familiar with Redux. In my book triggering requests based on request completion is business logic. (Or even more generally: triggering "something" based on "something else" is business logic.) If something is business logic, I'd rather make sure it is implemented somewhere in my reducer, rather than a service. So, either the or its would emit a proper action ( in this case). 

does not seem quite right to me, because it will work funny with falsy values. It's better to rely on , or depending on the way you want it to work. Example: 

This are just my 2 cents. I do not expect other developers necessarily agree with my opinion, that's fine. My objective was to provide yet another perspective and try to message that the best answer is probably still "it depends". Oh, and by the way, it's really important to get as close to the consensus with your peers as it's possible (both for the team health and for project direction strength). Their critique of the unit tests seems valid to me. But arguments aside, what exactly do the colleagues propose? It's not a secret that if the criticism is not constructive, it usually poisonous... 

P.S. I apologize in advance for using strong words and for my way of thinking potentially misaligning with the coding standards of your organization. I'm not questioning your internal agreements of course, but rather trying to analyse and evaluate the code as a "spherical cow in a vacuum" from a perspective of the developer on the Clapham omnibus (who obviously can not jump as high as you can). P.P.S. This is the great question and the code to read/think about! 

This will guarantee that each date is translated at most twice, which makes the entire solution more performant for large s. Also, Notice that steps #1 and #3 can use same exact implementation, which I extracted. 

function attempts to set a single bit to via bitwise or () operator with a shifted to every possible position. If the result of that application to does not equal to itself, it means the bit has changed the state from to and the resulting number should be used in the next step. The numbers from the previous steps are iterated through via function. The seed value is set to which indicates an "unknown" maximal length of sequence of s (which is determined by making a call to . The function slides from one side of the bit array to another and increments the sequence length by 1 for each observed -bit; or resets the sequence length to when a -bit is observed. The code actually explains this part better...