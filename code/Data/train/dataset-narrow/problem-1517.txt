What are these values? Better be more explicit with the parameter names. When calling the method, you should not need to read the method's body to know what parameters to pass. It should be obvious from the parameter names. 

This took me some time to understand. You can improve it by using a common iterator variable like and adding spaces around operators. With these improvements, and also better variable names, this could be for example: 

This comment is obsolete. The code tells you that it is for array1, even better if you improve your variable names and access the array's length directly, like . Note the spaces that I added, to make it more readable. Saving the value in a variable an then accessing it is obsolete. Just do . If you use instead of , you can replace the whole loop with 

and seems a bit confusing. Isn't decreasing also a kind of updating? Shouldn't the opposite be called ? Maybe you can use just one method for both cases, and control the amount how much it is increased or decreased with a parameter. Logic Your method does not do anything, because all that happens when you call it is that a local variable is assigned a value, but it is not used afterwards. After the method had been called, the local variable does not exist anymore. So you could remove that method alltogether, and remove the calls to it from the methods and . Then all that remains in those two methods can basically be done without methods, because you can simply change the value of the score and then print it, which is hardly worth a method. Not using a method there will probably also make the code more readible, because it is hard to find a method name that describes well what these two lones of code do. 

Note that the specification says to print Draw, not draw, so even if the hackerrank test is lenient one might be pedantic about the fulfillment of the specification. 

That makes it very difficult to see where a block starts and where it ends. Another thing is your usage of newlines and spaces. I recommend having a look at a popular c++ style guide, like for example Google's. Independently from a specific style guide, it is common practice to format this: 

You are using and as parameter names. It is better to use speaking names that tell you what they are for or what they contain, e. g. , . In some cases and can be sufficient if the method name is explicit enough, like , but I wouldn't say this is the case with . Furthermore, you aren't even using the parameters in and . 

It seems like you want to check "has player 1 won but not player 2, or vice versa". Instead you check in the second part whether any of the two players has won, so the entire expression is equivalent to just , assuming that you don't have to explicitly check whether both players have won, which shouldn't be possible anyway. 

is redundant. Using the operator (which is an XOR, exclusive or) already assumes that the boolean variables are mutually exclusive, which they are in your program, and also in the real world, because you can't logically fail a level and succeed ("finish" aka "complete") at the same time. If is false but is true, the first condition will be true, causing the second condition to be evaluated again, even though it is already known to be false. Just leave out the outer condition; the whole check is not needed. Just check and replace the with . You are increasing the level if the level is completed, but you are not resetting it if the level is failed. That might be by design, but I usually expect a game to start from the beginning if it is lost. I think calling here should not be needed, since I guess that calls it every frame anyway, and it is better not to mix input code or logic with rendering code. So my improved version looks like this, putting some of the code in an extra function: 

In of the class you use string concatenation a lot, in loops, and the method is called multiple times in the main loop. This is very inefficient, because every time you concatenate strings, a new string object is created, and after some time the old one will be deleted. Better use a StringBuilder, for better performance and memory efficiency. 

Coding style Every language has its conventions, which enable programmers to understand each other's code more easily. Usually the conventions include naming schemes for variables, classes, methods etc. and formatting rules. These are independent from the architecture, and also from the syntax. Names or formats that are allowed by the language might not be "allowed" by the convention. 

But remember that method names starting with underscores are used for private methods, and thus should not be called from outside of the class. Using a class enables you to add a single method to it that resets all cells and lines. 

and the other actual variables are a bit confusing. What other lifes can there be? Metaphoric ones? Better call it , because it is the current state of the object. Also, reads more naturally than . The latter even sounds like a noun. 

Note that I had to invert the logic, because it seems like you are using a value of in the (intended to be constant) variable , which is counterintutitive. Try to be more consistent with spaces around operators. You write , but . Always add spaces around operators, i. e. . 

is actually what the function is for. So it is fine to put the code for rendering different parts ("objects") in different functions and call them here, but this code here actually belongs into . So I will next review the function with this code inserted at the start, replacing the parameters with the injected variables. Also adding some blanklines for better readability, replacing the variables names with the suggested ones from above, and fixing indendation and braces. Since and were meant as constants, I will replace their usage with the boolean literals and as they are expected by the reviewed version of , i. e. the value means it is locked. 

using namespace std; This should be avoided. The reasons are explained in detail in that question and its answers on Stack Overflow. Instead you should add the namespace in front of every function call from that namespace, e. g. instead of . The additional typing is very little and the better readabilty (and avoiding further subtle problems) is worth it. Naming You named two of your functions and , however from reading the name it is still not obvious which diagonal is refered to, because how can a diagonal be on any side? You might differentiate the diagonals by calling them "upwards" and "downwards", but even that is only slightly better and still not precise. Instead I recommend to just make one function , and check both in the same function. We will get to that later when we talk about the algorithms. 

Call the list or better or , because that is what you are saving in it. The name should not imply what the code will be doing with it later, e. g. returning it. 

Instead, just write . Naming The Python convention for function names is , also called snake case. I suggest you look up PEP8, which is the official Python Style Guide. Also Google's Python Style Guide is pretty popular. Your method names are not very well chosen, because they don't tell the reader what they do. returns a boolean (true or false) value, so a better name would be or . But since the function can be reduced to an inline , I suggest even removing the function and using the simple boolean expression instead. The following is also very misleading: 

After changing the data type, you can generate a random double value in a range by scaling the range with a double between and . gives you a random value between 0.0 and 1.0: 

The account should not have the main method. Instead the main method should be in the main class of the banking software, and the account should be instantiated and used by it. 

with spaces after keywords like and , before opening braces (when putting them on the same line as the condition or method header), and around operators. When using if-else branching, it is good practice to use braces even for single lines, or at least use new lines and indentation without braces to make the branches clear to the reader. For example instead of this: 

and having that class control the game. Right now you are basically treating your global namespace like a class, with global functions as classes, and as the constructor, that you call excplicitly. Functions/methods with leading and trailing double underscores should normally never be called explicitly. 

Is the level not finished if it is failed? I think what you mean by is . So a level can be either failed or completed. Be careful with abbreviated variable names. they make the program hard to read. Better write instead of . is a bad name of a variable. Variables contain the state of the program. sounds either like a verb or a noun, so something you do (functions or methods) or something that exists as an object (represented by a class). is a better name to represent state, and it is coherent with and . 

Also I suggest using braces even for oneliners, as in the last line of your code. Even then I would use the bracing style shown above, but if you want to make a one-liner, putting braces within the same line makes it still more readable: 

Still had to add it. Rather add these five characters to every usage, enjoy your IDE's code completion and prevent name mangling problems when you import hundreds of very common names, that could easily be used by other libraries or your own code. Coding style Your indentation is quite off in multiple parts of your code. For example: 

Concerning your question: When dividing an int by an int, or when converting double to int, the result is always an int. This means that the result is being rounded down, never up. The part after the floating point is just stripped away. I suggest the following improvements: