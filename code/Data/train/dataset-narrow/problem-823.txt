Your code validates at the HTML and CSS validators, except for one thing: You need to place a doctype at the top of the page: 

There appears to be a lot more stuff I don't have time to review. However, this should provide you plenty to chew on for now. 

You can simplify this down to . This is known as an auto-implemented property, and will automatically create and manage the backing field for you. Minor nitpick: "Ellapsed" is really spelled with one "L". 

This still will not handle the user inputting a value. To do that, you could input a double and compare the (you would need to ) of the input to the input and determine whether the input is a valid value. 

As for optimizing code, I am not too good at that myself, so I'll leave that for the experts to cover. 

I am building a database for a hypothetical university. This is my SQL definition, with generated data added for my future use, such as demonstrating queries: 

When you assigned a to an , you do not need to cast. This two statements are the same (although the explicit cast shows you are deliberately doing it): 

You don't need the statement because you return from the . @Malachi says you can merge the s in the into one statement, and that is true, although I don't recommend it for readability purposes. However, if you do that, you don't even need the statement to return true - just combine it all into a return statement: 

This ASP.NET MVC website is for my professor to track my progress on my Checkers app. This is the first time I have build an ASP.NET website entirely on my own, and I would like a review to make sure I am doing everything in the best way possible. First, my HomeController: 

Also, keep your style similar. In the above, you have a statement with one line without braces, and another with braces. You should always choose one style, preferably braces, and stick to it; the same applies to loops: 

Second, you should always have spaces around your operators, not just sometimes. Third, you should use the correct levels of indentation, usually 4 spaces per level: 

Your does absolutely nothing except make this difficult to read. Even the compiler knows it does nothing and compiles it away. Just write this like: 

I don't like that output in . If you have to display that error somewhere, throw an exception and let the caller display the error, or a custom error, as they see fit. 

To aid in the localization of .resx files, I made a generic resx comparer that allows you to edit the values of the resx's. Also, this is my first proper adventure in WPF (I've just been using Windows-runtime before). 

The first one simply adds the given number to a value until it has been added times. The second one uses the 1+3+5... sequence. I tried to profile this on Visual Studio, but the report was taking a really long time (over two hours) to be generated after the data collection was done. I am particularly interested in which of these methods will run faster, and which is less resource intensive (would the second one be slightly more resource intensive because there are more variables?). 

You don't need to save that in a variable because you only use it once. sys.exit() If you define a main function as Caridorc suggests, you can just return from the function. Input 

You have in both the and the , at the end of each. Remove duplicated code like this and place it after the /: 

I need to learn more about Entity Framework, so I created a database to store notes. The database definition is as follows: 

Your indentation is messy too. Mainly, you should be consistent, and 4 spaces is the typical Java standard. This, for example, is difficult to read and see the scope automatically: 

Each of these three are obviously valid, but they also have their problems. Possibility 1: This, in my opinion, is the best option as it explicitly matches a color with a group. I have no experience with maps in C++, so I don't know how slow it is, but for this small of a data set, I do not think this will be an issue. Possibility 2: I do not recommend this option. It does not show any correlation between the two groups, and it will be easy to break by accidentally adding any updates to the wrong location. Possibility 3: This is also a valid option, but I would only use it if the color can be used independent of the group and you need to pair/convert them only in certain uses. Also, this code can be cleaned up a little: 

One thing you could do is create functions to call instead of writing each sub function out every time you want to animate something. 

This does not appear to be a true FizzBuzz program. A FizzBuzz program, according to the tag wiki, iterates through the numbers 1-100 and prints the values according to the rules you have. One thing you did correctly is this: 

Braces: Braces are always good to have, although they are not always necessary. In addition, at least one bug made it into production code because of missing braces (the Apple SSL bug). Spaces: Be consistent: 

As you suspected, this code is pretty bad. You are returning three different types of data here. Just, don't. 1) 

I converted a C# analyzer for removing empty argument lists from attributes to be a C# and VB.NET analyzer: 

You should break as soon as you know you have an item to prevent the loop from spinning through unnecessary cycles: 

I would put each of these conditions on its own line to emphasize the fact that they all have equal weight. Also (this may be better in your IDE than in the SE chat), they are just a little long for having two on a line. 

Please use full names. I had to look for the definition to understand what represented. What's wrong with ? 

These types are used to create a , which is used in to provide the correct value for various calls; this valid is primarily used in : 

Your CSS seems very good, although do you really need both and if they both do the same thing? Why don't you just get rid of one of them? You have one error in your HTML - an unclosed ($URL$ 

In this program, you need to create an instance of a server-side chat instance that contains all its state. You cannot access elements of this class's state just by instantiating another instance--you need a reference to the instance. Once you understand how OOP works a little better, you will understand why you don't create default constructors like this, and why you should avoid fields, methods, and classes. 

I think this is pretty good code, but I'm not sure if the way I communicate with the view model from the view is OK, and if that can be cleaned up at all. This is the XAML: 

Also, when you have two nested loops, it is traditional to use variable names and for your counters. If your counters represent any besides counters, you may want to name them a bit more specifically. 

Your indentation, spacing, and naming are excellent, although I prefer a 4-space indent over a 2-space indent. I do not know CoffeeScript or JavaScript, so I cannot make any more comments. 

Public properties are typically named with CamelCase. Particularly, you should keep a single convention: 

While not absolutely necessary, it might help prevent bugs if you use braces around one-line s and loops: 

Your CSS is validates perfectly, you can validate it at the W3C CSS validator here Your HTML has a few problems the validator finds here. First, you need to specify a doctype, like this: 

Use This is important for proper execution when running a program with multiple files. Code Duplication 

Notice that I also added a missing space around the operator and shifted the brace up next to the end of the statement according to common C++ style. Also, why are you using capital and variables? In C++, those variables are lowercase, did you do something like ? If so, it doesn't add any meaning to the code, so you shouldn't. None of the really good C++ I've seen ever lines variable declarations up like this: 

Feel free to comment on any and all of it. I am most interested in reviews on my design - are my relationships built correctly? Do any of my tables have too much responsibility? 

Your HTML looks good, except for a missing brace. You can validate it at the W3C HTML Validator. While this appears to be a snippet, you should structure your HTML files like this, in the case you are not already: 

How could these be improved? Because they are both Standard Devation calculators, should I combine them into one method with a header of ? Are they an optimal solution for the problem? 

Now for the main review: This looks very messy and will be extremely hard to control as the project grows larger. It is time to utilize the MVP pattern. First, create the interface that your view must implement. That would probably include and , as well as possibly and any other custom methods for directly controlling the form. Next, create your form. All that code to initialize the form goes in the designer file (but you don't put it there manually, use the designer window to create the output). Now you create your presenter and DI the form with your custom interface type, something like . Call from there and use the result to decide what to do. If you have multiple buttons that can be clicked, you may need to use and fire events. The presenter will handle the all the data that isn't directly tied to the view. If you want to display output, your presenter should have a public method that takes the output, processes it, and makes a (usually single) call to the view to handle it. For example, this could be a basic outline of your presenter: 

Put a single class/enum/interface in each file. This will make it easy to find the various classes because each file has the same name as the type it contains, and each file has a single responsibility. 

Even though there is only one parameter in this method, I should provide the argument name so the person debugging doesn't have to look. This is done in .NET 4.5, which I am using, as: 

This ensures they cannot be accessed except by functions within the class. Also, while is perfectly fine, you don't really need that now because they cannot be accessed except by functions within the class. Also, if you wish, you could provide a function to change the values, and only that function will be allowed to do so. To be able to access these values, you could do something like this: 

This is not required, but it shows more clearly that the loop must execute at least once by definition, and it prevents someone from breaking your program by changing the to . 

I don't like how you have all your logic in the header file. You should declare your methods and fields in the header and use the .cpp file for logic. On the other hand, C++ is not strictly object oriented, the way C# and Java are. You didn't need a class for this solution, you could just have called from . Third point is your naming. actually isn't a helper function, it is the function that actually calculates the Fibonacci sequence. actually isn't recursive, like your comment says, it calls the recursive function. doesn't say what it actually does, although it is easy to guess because the program is only a couple lines long - in a large project, this could (and probably would) cause many weeks of time wasted catching bugs. Fourth is consistency: 

Typically, F# is written in functional style, and there are several things you are not doing in functional style here. 

I am displaying menus and submenus in my WinRT app, and I think I am doing it wrong. I have thought I was doing it wrong for a long time, so here it is for review. This is the section in my ViewModel. Probably needless to say, both and have had large quantities of nearly identical code removed; feel free to comment on everything: 

I recommend you always use braces - this applies to loops too. Fourth, you should use spaces around operators: 

This question pulls content and ideas from a good many of my other questions and their answers, and pulls a lot of things together. I am quite satisfied with my approach here, but seeing as I'm refactoring my app, I might as well ask about my practices and get suggestions for improvements. This is my search method (thank you for helping me with it, Heslacher): 

So, you have a dictionary where the key is already included in the ID if the value? Why not make that a plain ? If the keys are guaranteed to not be duplicates anyway, you could set up a for simplicity. However, looking beyond that, it appears we have to keep a set of s for each student, and you are doing that by keeping two lists. I would combine these into one list with a class with an , , and a of s. Then, you can keep a list of students and their scores all together. This, however, has the trouble of allowing duplicate s, so perhaps a is the best option here, even if the is in both the key and value. 

isn't a very descriptive variable name, and it does not hold the question, as it suggests. Also, why are you using one variable name for each question? This code can be cleaned up a lot by creating a method to administer the questions: 

One thing is is not only checking the prime, but also printing it. This could be moved into , or I could write another function to take care of that. After profiling my code, these are the results I got: 

In addition to holroy's comments, I should not hard-code the values into my method and into the test. I should write my tests to compare the expected value against the value in the configuration I am testing against: 

I am implementing the logic for a Checkers game in F#. I am writing my code in a library so it can be called from any UI provider, and am trying to do it in good FP style. I currently have the following code; each file is provided in the order of compilation: Checkers.fs This contains some unions and records that will be used throughout the entire library. 

I wrote my first WPF UserControl today, and I would like you to review it. Its purpose is to have images by default resize with the page, but expand to full size with a double-click: 

We definitely don't need that much whitespace hogging our screens. It forces code off the screen, it increases scrolling, and generally slows us down when reading and understanding the code. Indentation 

This way, you can even return the letters not in for ease of reference by just removing the keyword, but you would also have to change the name of the method as implies a boolean value being returned. Additionally, you should probably name in all caps to signify it is a constant variable. 

One thing I noticed is some of your variable names don't mean very much - , , and , for example. While your methods are short and easy to follow, it is always a good idea to give variables meaningful names. Another thing I noticed is that you may want to provide error handling here, and in similar areas: 

What happens when the user enters ? Your program will crash. You must always test for division by 0 in cases like this: 

Your indentation could also be improved. Use a consistent 4 spaces (or 2 spaces, or 1 tab, if you prefer--4 spaces is the international default, however): 

I like that you are setting the row size and column size in the ctor, which has a flavor of Dependency Injection and an extensible design; you can change those values to and , and solve the more generic N-Queens problem very simply. The problem is that you hard-code the values in without giving the caller a chance to say which version they want solved; you should make these parameters for the caller to specify. Because the 8-Queens problem is the most common variant of the N-Queens, these parameters could be optional, which would let the caller solve the 8-Queens problem by creating: 

I recently reinstated the unit tests in Rubberduck. Previously, our parser was a synchronous parser, with everything running in sequence, and we could just request a parse result. Now, however, it runs asynchronously and we can only request parses. As a result, I have to somehow perform a blocking call to the parser, which I did with a semaphore. First, the semaphore blocks the code from continuing to execute, then the event handlers that gets called when the parser state changes releases it (or, if the code parses remarkably fast, the semaphore has a slot available and waiting for the method to take). Below are a subset of the tests for my Introduce Parameter refactoring. While I am especially looking for feedback on how I handle the blocking parser and the way I set up the tests in general, all feedback is welcome.