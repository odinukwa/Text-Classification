James' idea to use a live cd (assuming the root account is not enabled) is a good one. I would add a few points. 

and are registers. You can get more information about them with . You can see the contents of all of them by entering . 

Either or (or both) should be able to simplify things for you. Even more importantly, don't use to install modules; use . My preference is simply to use Perlbrew to install non-system Perl interpreters in my directory. After that, each interpreter is self-contained and takes care of modules. Honestly, I never need to think about where modules end up. It just works. 

Just for completeness: Fink, MacPorts, Rudix and Homebrew provide versions of the command-line . The Rudix version is a binary, which means that you don't even need XCode or gcc to install it. 

One other general search tip for Aptitude. On the command line, you can use these searches to quickly see what you have installed by choice versus what was installed automatically as a dependency of something else: 

The search in finds any packages that were removed but not purged in the first removal. One final note, if you haven't been using , always check its output the first time you try to run it. Don't simply say "Yes" to whatever it wants to do. Depending on what package manager you've been using, you may find that thinks some things should be autoremoved, but you prefer to keep them. 

Macs are very unusual in this regard. The default $PATH variable for a regular user looks like this: 

There are hundreds of practical reasons to use Linux and hundreds of practical reasons not to run it. Your real question, I think, is "Do I have any particular reason to install Linux?" Based on what you wrote above, the answer seems to be "No." It's hard to say much more unless you give more information. What sorts of things do you use your computer for? Why did your previous experiment with Linux end? Ultimately, nobody else can tell you what's good for you. I suppose they can (and often do) but it rarely does either side any good. 

The only changes are: 1) There was a space after the = in the line . I have removed it. 2) Instead of using the string substitution command I have used the command. With tr, the option says to replace any character that is not in the set. So I can specify the characters I want to keep (alphanumerics and the underscore, in this case) and all the others will be transformed. This should match some more special characters that are hard to specify via direct substitution, such as and . The option means that only one underscore will be generated even if suppressing multiple characters. Thus translates into instead of 

This may depend on your browser, but for browsers that follow the Mac standards (including Firefox): Ctrl+A takes you to the start of the line. Ctrl+E takes you to the end of the line. Cmd+Up/Down Arrow takes you to the start/end of the document. Fn+Up/Down Arrow takes you one page up or down. 

The best places to install packages on your machine are if you have admin rights and want everyone to use your program, or if you want to just make a copy for yourself. Normally you'd set the prefix as so that the application files are stored in settings in and so on. The advantage of using these standard places is ...well, basically that they are standard. People know where to look for the files. For example, is almost always in everybody's , so you won't have to fiddle with the variable to get people to run it. Similarly, libraries are found by checking but is usually checked by default so you don't need to add it manually, and so on. Regarding uninstalling: Once you have run configure and built the program, then will install it for you, and will remove the files automatically. 

The packages ending in contain the headers and static libraries used when building an application that makes calls to that library. This may be enough for you if you are building an application from source, and you want to compile the library in statically. However all the applications you install from packages will be using the shared libraries, which are not provided by the packages, so you will need to install the base package as well. Almost all library packages which end in have a dependency on the base package, so if you select and choose to install it, your package manager should download automatically. If you download yourself, and try to install it, the install will probably fail since it needs specified as well. There are usually command-line switches to force an install without checking the dependencies, but they are rarely used and not recommended. In summary: You should really download the base package as well as the one, but usually the package manager will take care of that for you. 

Jeff is right that you should be able to do this directly via reportbug (see the note in the docs about $HOME/.reportbugrc for how to set this up on your machine). However, if you end up wanting an SMTP server for yourself anyhow, I highly recommend ssmtp. It's an extremely easy-to-use, easy-to-configure SMTP server for a home machine. It also has no dependencies that you shouldn't already have installed, so the installation is trivial and costs you no disk space to try. 

(I've got nothing on RedHat or RedHat-based systems. Sorry. There really is no one answer for Linux per se since package management is a big part of what makes different distros different.) 

Again, if it helps anyone else, here is a ruby-build formula that I use to automate adding this patch and the falcon patches: 

There are other questions, too, like "How common are the tools to manipulate the resulting archives?" So, for example, creates smaller files than , but it can take significantly longer. Also, in my experience is universal on Unix-like systems, but is still not (though it's very common and usually easy to get). 

There is still a MacAmpLite available. Having said that, if you want really light and you're at all into the terminal, look into . It's a great ncurses-based, command-line music player, available through MacPorts. 

By putting after and , Mac upends the whole system. Normally, you can put something into (say a second Perl interpreter, compiled in some non-standard way), and then a regular user will hit the custom one rather than the system-wide one first. This is good. Users can get variants, but the system stays pure. In any case, you can put things (as is normal) into , but if there is something by the same name already in or , that will get found first. To fix this, you can change the regular user's by editing the .profile file in the user's home directory. (That file doesn't exist initially, but you can create it easily.) I do that soon after I start any new Mac. Semi-related: Homebrew provides excellent package management for Macs. By default, Homebrew installs software into , but it does so in a way that makes it very easy to remove things and return to a vanilla state later. 

A problem I am facing from last 1 month. I have a Windows 10 Pro version 1511 Build 10586.71. I'm on a wifi connec. and internet is accessible to all desktop apps but not to universal apps. Windows Updates also aren't being downloaded. As soon as I click check for updates, it says: 

Restarted PC also. Windows Software Dev Kit is listed under Programs and Features means it's installed properly. When I Modify the installation of Visual Studio 2015, it starts downloading from installer. Please help 

I'm not completely sure. But the required steps should be like these: Go to Action Center. In the left side, you should see an option Windows SmartScreen. That should give you an option to disable it. Another solution is to Control Panel->User Accounts. There you should see an option Change UAC settings. Lower down that scroll bar and your problem should go away. 

I'm in an awkward problem. I have a laptop with a faulty battery whose battery percentage doesn't go beyond 3% doesn't matter how much time I leave it for charging. Now I need to flash new BIOS firmware which requires at least 10% battery life. Now I know my laptop won't ever go beyond that percentage. What can be the possible solution without changing the battery of course? Is there some place where Windows store battery percentage? Any way to hack there? Or maybe fool the BIOS software? I'm using Windows 10 Pro x86. 

The steps are similar to 'reject' or 'hide' an update. Go to Windows Updates->Important Updates. Right click the update and click "Hide Update". That's it! 

Today I downloaded standalone installer for Windows 10 SDK which downloaded all the required files of about 700 MB. Then I installed it with a setup file placed within downloaded content. But still Visual Studio is showing: 

Give a try to FixWin 10 software. However you may have to redownload the whole update. Go to Microsoft's official website and download directly from there. Search Google for "Download Windows 10". The page maybe is the first one or second one. There you will have to use Media Creation Tool. If you don't want to download it using Media Creation tool and want direct ISO, download "User Agent Switcher" extension available for Chrome like web browsers. Select Mac Or Linux. Then the website will provide you with direct ISO files. 

EDIT August 31, 2013: Current versions of Ruby don't need this patch any longer (Ruby has it by default). However, there is still one thing that can go wrong. You must make sure that Ruby is built as a shared library. If Vim crashes in the same way, it probably has to do with this issue. Make sure to add your configure options include . (See this bug report for further discussion.) 

(Look for in the section.) I did this for awhile to keep MacPorts version of Getmail, but in the end, I just began to manually install Getmail instead. I love both MacPorts and Fink, but I hate how quick they are to drag in whole new Python, Perl or Ruby installations. As a contrast, you might check out Rudix. It's a much thinner environment, though it doesn't support as many packages as MacPorts or Fink. 

I've had good experiences with TuxMobil. The site is nicely organized, so that you can choose a manufacturer and model, then follow links to see how specific distros and versions worked on that hardware. (The links go offsite to blogs, forums, etc. so the quality of reports will vary. However, I have found many to be very detailed and helpful.) A similar site is Linux on Laptops. (Probably many of their links overlap, but just in case one has links the other doesn't, I'll post both.) 

If that works, put the setting in your ~/.bashrc file to load it automatically. If you prefer vi(m), you can do this: 

I recommend that you use the full path of the file that you want to read rather than assuming that the two scripts will be in the same directory. I won't swear that this is the most elegant solution. 

Note that the variable is assigned without a dollar sign ( or ), but when you use it, you need or . So you would want something like this: 

Give all the items in the search bar keywords (Google is 'g', CPAN is 'cpan', Wikipedia is 'wiki', Weather.com is 'w', and so on) Remove the search bar from the GUI (it just wastes space and after 1 you no longer need it). You can do this via View -> Toolbars -> Customize. Drag the search bar off the browser onto the customizer to remove it. When you want to search, CTRL + L selects the whole address bar. Type 'g' and then insert the text you've copied. Hit enter and you just started a Google search. (If it's an error message, you probably want to try the search wrapped in quotes first, now that I think of it.)