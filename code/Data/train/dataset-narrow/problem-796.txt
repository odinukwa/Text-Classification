In a Pawnshop business, customers pawn, sell or buy items. A contract which specifies the customers information, the items, and the terms and conditions is created whenever customers pawn, sell or buy items. Up to 6 items are allowed per contract. If there's more than 6, then they have to be split up into separate contracts. The reason for this limit is because only one unique contract can exist per printed form. The form is 8.5 by 5.5 inches (half page-sized), thus only 6 item descriptions fit on each form. We legally cannot have page 1 of 2 for the same contract. All items belonging to a contract are assigned a lot sequence number. This lot number also happens to be the contract number. The lot number increments, irregardless of whether it is a pawn, buy or sell contract. Each type of contract will maintain its own receipt sequence number. Visualize a separate pad for pawn contracts with a receipt number on the upper right corner, a separate pad for buys and a separate pad for sales. Sells and buys are final! However, customers can make interest payments on their active pawns, in which case the customer provides the cashier with a copy of their original receipt, along with the interest payment. Then, a new receipt for the same pawned items (i.e. with the same lot#) is issued, showing a new maturity date and the original or previous receipt gets cancelled and filed away by the cashier. When customers redeem their pawns, no new receipt is issued. The customer signs the receipt, stating that the pawned items were returned to them, the receipt gets canceled by the cashier and filed away. As other customers pawn items or make interest payments, new receipts are written and given to customers. EDIT: If the pawnshop would not provide a new receipt for each interest payment, rather just updated the original contract with date interest paid, amount and new maturity date, then we wouldn't have complications! However, we have a pawn receipt number that sometimes increments, and sometimes doesn't, depending on what type of transaction operates upon each pawn. The following is an example of pawn transactions over a period of time: 

I am Avinash. I am willing to install an additional MySQL instance on a UAT server for testing purposes. I am using MySQL Community Server 5.5.58 installed on RHEL7.2. I am going through the MySQL Docs $URL$ , which tells me that I would require certain unique operating parameters such port, socket, pid, datadir and log files related parameters. To achieve better performance, it also recommends to use different tmpdir. This is well understood. I can either use different binaries or the same binary for this purpose. If I am using same binary, I'll have to use mysqld_multi and use the same config file. If I use mysqld_multi, I'll have to put different sections for mysqld daemon such as mysqld1, mysqld2 and so on. All using unique values for above mentioned operating parameters. Please help me out here. Am I correct about mysqld_multi? My second question is about bind-address variable. $URL$ Here, it explains that My question is that will I need an additional NIC and an additional IP address for the second MySQL instance? For the existing instance, I have disabled the bind-address option. Do I need to add the bind-addresses for both the instances. Also, the second instance will be used only by me (for now). Thanking you. 

The biggest table size is around 97 GB, for now, which is expected to grow more and more. I was asked to look into some compression options for all the 362 tables in order to reduce the size of the database. I took the biggest table which is 97GB in size and has 208 columns. On Oracle out of the 208 columns 142 columns were VARCHAR2(500) and 50 columns were VARCHAR2(4000) and when the database was migrated, because of row size limit imposed in MySQL, a lot of VARCHAR2 columns were converted to TEXT. I don't if the database was designed properly or not because rest of the tables don't have so many columns in them. When I tried to compress this table (on test server) using , there was no difference in the size of the table. KEY_BLOCK_SIZE=8 didn't work, it threw an error regarding row size limit, hence I chose KEY_BLOCK_SIZE=16. I took another table, which doesn't have any TEXT columns, and it got compressed to 50% and it doesn't have too many columns in it. I don't understand what could go wrong with the 97GB table. Is it because of the TEXT column or could it be anything else? Well I read that the TEXT and BLOB columns are best candidates for compression. Is there any other method to compress the TEXT columns? Thanking you. 

It's my understanding that a cluster index is essentially the same as pre-sorting the load file, inserting it into the table and creating the index for the foreign key column. I created two tables, each loaded with 2 Million rows of identically data, pre-sorted by the foreign key. However, one table has a cluster index on fk_id, the other table with a non-clustered index on fk_id. Is there any difference in the tree structure or additional overhead in maintaining or accessing data from a table with a cluster index, versus the same table/data with a non-cluster index? 

As you can see, pawn lot numbers never change throughout the life or death of the pawn, but the receipt numbers increment as different customers make interest payments on existing pawns, or pawn new items. If a customer doesn't make any interest payments or redeems the pawned items on or before the maturity date, then the customer forfeits the pawned items, (the receipt number remains the same), and the pawnshop will pull these items into their inventory. BTW, When the pawnshop pulls a matured pawn, each item in that pawn is assigned the most current receipt number, suffixed with the item number within each contract. Then they get transferred into the pawnshop's inventory. Thus, the second item in pawn lot number 503, having a receipt number of P12347, would be transferred into inventory with an assigned inventory number of "P12347-2", where "P" stands for Pawn, "12347" was the current receipt number, and "-2" because it was the second item within that pawn contract. I personally wouldn't use this numbering scheme, but many pawnshops in my neck of the woods like doing things this way because they claim they can tell when was the last time a particular pawn had any activity, based on its receipt number, plus they can maintain all their pawns physically stored in chronological order, making it easier to pull them. So, given the above rules and examples, what's the best way to design the tables and relationships for these rules, using an SQL DB like Informix, or MS-Access 2010 JetDB? Would it be best if there's one Contract table for all pawns, buys and sells, or separate contract tables for each? How about the transactions table which operates upon the contracts table?