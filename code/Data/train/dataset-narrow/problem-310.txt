As others have said you can't use IPs that are already in use. You should use a separate subnet that you can route through (to the other network). I would suggest using something larger than a /30 block (in case you ever add additional locations) -- a /29 would allow you to expand to 6 locations for example. I would use something separate from your existing networks (so it stands out) but not adjacent (in case you expand). I would suggest something like 10.99.9.0/29. If you want to be able to test then you should convert your existing VPN to Tunnel based VPNs first: $URL$ OR: $URL$ This has the advantage that you can then more easily make routes to test than Policy based IPsec VPNs. Do this during a period of downtime as the VPN will be down while you switch to a Tunnel interface in the VPN and then create the routes. Then configure X2 on each router with 1 IP from your Point-to-Point range: 

Put all of them into an Address Object Group called: SERVER-16 Public IPs (or whatever) Then create an inbound NAT rule that uses that Address Object Group for the Destination, like: 

The problem is likely that you have VLAN tagging mismatch between the two SonicWALLs. How are they connected? With a switch? Or some other device? (an ISP's MPLS device of some kind?) Note: I am going to assume on SonicWALL B that the interface is X3, since you don't state it -- just so things are clear. Your packet counts are for X0. If SonicWALL A has: 

On the SonicWALL, configure: Configure X2 on the SonicWALL with a free IP on the VoIP subnet, let's say: 172.21.1.2/24. If the vendor controls this subnet ask them for a free IP, otherwise do an IP Scan. Under Network | PortShield Group, edit X2 and ensure it is Unassigned (not assigned to X1). Then under Network | Interfaces, edit X2. Assign it to the LAN zone (assuming you trust the VoIP traffic - if you don't then use DMZ and you will need to create Firewall rules; choose LAN if you're unsure, to start). Set it for a Static IP, configure the IP, and other settings as desired. Note: A route will automatically be created under Network | Routing (from Any to X2 Subnet, for Any Service). If you selected X2 Zone = LAN the Firewall rules will already be created (assuming Interface Trust is enabled for the LAN zone, which it is by default). If you set X2 Zone = DMZ you will need to go to Firewall | Access Rules. Create or edit rule from LAN > DMZ, and DMZ > LAN for the X0 and X2 interface (I would suggest keeping things wide open, Any/Any/Any, during testing and then tighten up after if needed). Connect X2 to the VoIP switch. On the Phone Router: NOW: you or the Phone Vendor will need to create a route on the other router. No IP or interface needs to be configured. The route will need to be: 

There is of course also the possibility of using large packets if the attacker knows that a well-crafted packet can cause additional processing time on the server in excess of the additional bandwidth cost. Simply dropping UDP packets below a certain size is far too blunt of an instrument to really be commendable, not least because this may well just result in your attacker changing strategy. For example, if the focus was to hammer your servers, the attacker could switch to an DNS amplification attack that aims to exhaust your available bandwidth. 

Determining a loop really depends on the brand of switch that you have. For example, on an Extreme switch, I can run elrp-client on a VLAN and the switch will basically send out a broadcast frame on all ports for that VLAN and see if it returns by any of them, if so, it tells me which port(s) the frame was received back on, thereby revealing the loop candidates. On a Cisco, you can enable storm control, which is a bit more of a blunt instrument since it will basically block the port for a period of time until the status clears (or you clear the errdisable state) - generally speaking however, this sort of thing is only relevant when you're using Cisco switches in a mixed topology of devices that do not do spanning tree nor forward BPDUs. 

Assuming it's a real 5520 and not a fake that's actually a converted 5510 (yep, a bunch of those were floating around - you'll know it by the fact it's only got a single RAM slot) you'll want PC3200 with CAS latency (CL) of 3 running at 400MT/s, unbuffered, ECC. Not sure if the ASAs are also picky about the chip arrangement too, so if you want to play it super safe, make sure the RAM you buy has the memory spread across 8 chips. 

Given the prudence and importance of address conservation, the general approach to using a /31 should be "if it works, use it". Of course, you could take this a step further and start using private space for your point-to-point links, but this obviously can be problematic if you're going to run traceroutes from across the internet rather than within your own network, although even that can be mitigated somewhat by configuring your router to issue ICMP errors with a specific source IP address. In short, do whatever you can to waste as few addresses as possible (within the limits of best-practice and feasibility, don't start throwing NAT concentrators up everywhere) 

Both in the LAN zone, both in Static IP mode. Connect X2 to the PtP interfaces of your ISP's device (eg. the MPLS). This assumes the link is just a Layer 2 link, no routing is being done by the ISP. You should then be able to use the Diagnostic Ping (or CLI ping) commands from each router to ping the other router's X2 interface (eg. Arlington should be able to ping 10.99.9.2. If things are working then you can create a Routing policy to test: So on the Arlington router: 

Look at the LAN > WAN rules to see what it should look like. Usually it is last and usually the only rule [unless you are blocking some outbound traffic] If they are in the same Zone and Interface Trust is off then you may have changed the default rule from Any to X0 Subnet. 

Make a similar route on Dallas router (but swap all the IPs, so from a Dallas IP to the Arlington IP, the Gateway will be 10.99.9.1 this time). I would suggest using something like LAN Speed Test (even the free version): $URL$ To test the speed to/from your test machines over the VPN first and then again after putting the routes in. You should see a speed difference as the traffic goes over the MPLS. If that works then change the routes so the: Source is: Any And the Destination is: The network on the other side (instead of just an IP) -- so from Arlington the Destination would be: 10.74.2.0/24. Metric: still lower than the VPN Tunnel route. All the traffic will go over the MPLS for everybody. This can be done lunch time as the interruption is very minimal. As long as the Zones for X2 are the same as your X0 networks then no Firewall rules should be needed if you have Interface Trust enabled for the LAN Zone. I don't believe you will need to make any changes to NAT as everything will be routed (with respect to the internal networks). You could then disable the VPN, or leave it and configure Probes on the routes, so that the MPLS' routes are disabled if the probe fails (allowing it to fall back to the VPN. Less useful if it's the same ISP in both cases...) And yes: backup your configs FIRST, and again after :) 

That's been like that for some time, and no issues that I know of. The question is, if the port is in trunk mode as opposed to access mode, then does the do anything at all?? Can it be safely removed without screwing up something else? What possible reason could those two commands be there in the first place for?? 

First, thanks to @AveryAbbot, @Ron, @YLearn and @DanielYusteAroca for assisting me greatly in working through this. At this time I have determined the cause of the issue to lie with the access points from Ubiquity and not an issue with the Cisco switch itself. After researching further and talking with some of the other network personnel who set this up, it turns out that this one switch connected to the MDF via NanoBridge M5's (that I was unaware of). That is, it is not a straight wire run but in fact a wireless AP to Station in bridge mode. In this setup, the mac addresses stop at the AP side and every outgoing packet gets the AP's mac address. To resolve this, you need to setup the AP and Station in Ubiquiti's Wireless WDS transparent bridge mode. After changing this setting on both AP and Station, and a reload of the switch, all devices connected to the problemswitch, are now receiving a proper DHCP lease when requested. 

I am having an issue with DHCP not traversing to devices behind a switch. I have many other switches deployed with nearly the same configuration that are able to receive a DHCP address. On this switch that I am having issues with, most of the devices have a static address and they have access and can be accessed from the network just fine. I am trying to add an AP to one of the ports, and being a UniFi, it needs to get a DHCP address from the server, but it is unable to do so. When I bring the AP to another switch with the same port configuration, it properly gets a DHCP addresses. On this switch that is having the DHCP problems, if I assign a static address, then I again have access to the network. I would like to figure out why DHCP is not being passed on properly, or if there is a misconfiguration that I have. The DHCP server is a Windows server, all other devices not attached to this switch, can contact and receive the reservation or address as needed. The VLAN information is passed down by VTP and it is on the most up to date revision. Problem switch config: 

If you were testing with a PC connected to the VoIP network (with a 172.21.1.x IP) the Windows route command would be: 

The answer will depend on where most of your internal LAN traffic will be going: If most of your LAN traffic is INTERNALLY BOUND (ie, to a local File Server, Terminal Server, Intranet server, etc) then you definitely want to choose 1 switch as your "main/core" switch and connect the SonicWALL's LAN to it, along with the 2nd switch and any other switches. Plug the server(s) into the main switch, along with the most critical workstations. The reason for this is: if most traffic is internal then you don't want to waste the SonicWALL's resources switching those frames from Switch #1 to Switch #2 -- in fact it is probably not as fast as the dedicated switches doing that. If you plugged both switches into the SonicWALL's LAN ports then ALL traffic from Switch #1 to Switch #2 would go through the SonicWALL. If most of your LAN traffic is EXTERNALLY BOUND (ie, to the Internet; eg. you have few internal resources and connect mainly to Cloud Based resources, like Office 365 or various websites) then it may actually make sense to connect both switches separately to the SonicWALL's LAN ports. The reason for this is: if most of your traffic is going out through the SonicWALL then you might as well connect directly to the SonicWALL instead of having one switch pass additional frames from the 2nd switch. Plus if the "main" switch were to fail then the other switch would still be connected. In either case if you have separate subnets/VLANs then I wouldn't change anything -- your Dell X1052 switches are Layer 2 only so any routing of packets from one network/subnet/VLAN to another will require the SonicWALL router to route those packets. It wouldn't matter if you configured one of your LAN ports to be on a different network/subnet (eg. a DMZ) or if you configured an internal interface and trunked 1 or more VLANs through a single port. In both cases the SonicWALL is doing all the routing. [Of course if you have a large/complex network with multiple subnets I would recommend a Layer 3 switch to off load from the SonicWALL. The SonicWALL's job is firewall/UTM/packet inspection and it is not going to be as fast as a switch at either plain old layer 2 switching or layer 3 routing.] 

This is not so much related to MLD so much as it is to listening on the built-in IPv6 multicast groups. ff02::1 is the all-nodes multicast - I'm actually surprised you don't see that too (are you sure that you don't?) ff02::2 is the all-routers multicast, any device configured to forward IPv6 packets will listen on it. 

At layer 2, all load balancing is, at best, done by an XOR or hash of the source and destination MAC, and if you're lucky, it may even read into layer 3 and hash that data too. At layer 3, however, where we're basically talking about multiple gateways (so, effectively, two physical links with a unique next-hop across each) you can max out the bandwidth across the links IF you're prepared to do per-packet balancing. Before I go on, per-packet balancing is generally a bad thing due to the fact that it can result in out-of-order packet delivery, this can be especially terrible with TCP connections, but that of course comes down to the implementation and most modern stacks can tolerate this relatively well. In order to do per-packet balancing, obviously one requirement is that the source and destination IP addresses are not at all on-link to the devices that have the multiple paths since they need to be routed in order for balancing to be possible. Redundancy can be achieved via a routing protocol such as BGP, OSPF, ISIS, RIP, or alternatively, BFD or simple link-state detection. Finally, there is of course a transport layer solution - protocols like SCTP support connecting to multiple endpoints, and TCP already has drafts in the making that will add options to do similar things. Or... you can just make your application open multiple sockets. 

Generally it comes down to interoperability - if you can guarantee that using a /31 is fine for both hosts on the link, and you are 100% sure that if one of the hosts fail, you will not be replacing it with something that can't handle a /31, you should absolutely just use a /31. In reality, the prime candidate for issues is going to be a routing protocol like OSPF, but as usual, this is implementation dependent - the vast majority of routers out there will behave properly when using a /31 - the adage "test your equipment" holds true.