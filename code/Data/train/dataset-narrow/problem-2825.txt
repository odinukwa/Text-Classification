where d is the distance from the eye to the projection plane, so d = 1. I'm multiplying them like this: (((P x C) x W) x I) x V, where V is the vertex' coordinates in column vector form: 

I'm trying to get an object from object space, into projected space using these intermediate matrices: The first matrix (I) is the one that transforms from object space into inertial space, but since my object is not rotated or translated in any way inside the object space, this matrix is the 4x4 identity matrix. The second matrix (W) is the one that transforms from inertial space into world space, which is just a scale transform matrix of factor a = 14.1 on all coordinates, since the inertial space origin coincides with the world space origin. 

I've been working in the 2d art side of games for a while now, and my full time job keeps me very busy on the art side of things, but I'm becoming more and more interested in learning to prototype my own games. I know very very little programming, though I did take some in college (in TorqueScript, of all things), and while I could probably take the time to learn it, the learning curve is a bit too steep for me as it's completely separated from my current job. I'm wondering if there are any game engines out there with an interface designed with artists in mind, where the learning curve might be easier for me, and where my current skill set will be more easily applied. I bought an indy license for Torque Game Builder but it still requires a lot of scripting and finding good, basic, entry-level tutorials is proving difficult. Basically I'm looking for a tool where I can focus on the art and game design, and where the programming is minimal, or is easy to learn and has really excellent documentation. No idea if anything like that exists, but it's worth a shot. :] Any ideas? 

Thanks to everyone for their responses, I have finally figured out the problem. Turns out I had to interpolate the positions, as they are transformed in view space, instead of the light direction. Apparently light direction does not linearly interpolate properly. Here are my modified shaders: 

And finally, the fourth matrix is the projection matrix (P). Bearing in mind that the eye is at the origin of the world space and the projection plane is defined by z = 1, the projection matrix is: 

I'm applying phong shading onto a single giant triangle, and I'd like the light's coordinates to coincide with the camera's coordinates in 3D space. In order to do this, whenever I update the camera's coordinates, I also update the light's coordinates. However, diffuse and specular lighting don't "focus" exactly at the camera position when I bring the camera close to the triangle, instead they do it a few units too far. The triangle is .5 units below the XZ plane and parallel to it. Here is a picture demonstrating this effect. 

Artists are generally as lousy and unreliable as the client is, so the answer is to be professional and to look for professionals. I second a lot of things David said in his post about Networking - this is the only way you will find reliable artists to work on your game for little to no money. But I will add some tips as well: 

I'd like to second what Olafur and Iain said, but to add a comment to Iain's fourth point. Characters can speak, and they can speak a lot, as long as you make sure that their dialouge builds the story, and that story is engaging. A good example of this in a 'male-oriented' game that still really appeals to me as a female, would be Red Dead Redemption. Totally opposite most of my points! But his story is very strong and emotionally engaging, so I still want to get behind him and support him, even if his experience is very differnt from my own. Beyond that, I'd like to add one of the things I read in the book "Gender Inclusive Game Design" that always sticks with me: Have a female option for the main character! Having the option to play as male or female will already help you get your character to appeal to a wider audience, and help the female side of your audience empathize with the story. If you can only have one character option (as is necessary in some games), try to see if you can make it female instead of male. Given the option, most women prefer to play as women, and a lot of men to prefer to play as women too! (Gives them something nice to look at. :) ) If your concept has absolutely no way it can have women in the character base, then try to make your characters a little more base appealing. Some examples would be: The characters from Team Fortress 2 (Strong silhouhettes, bright colours, good humour and many options), and Link from Legend of Zelda (Androgynous enough that let's be honest, he can be a girl if you pretend hard enough). 

Also, virtual methods tend to be slow as well. It may not be the most professional way of dealing with this, but I think it's the fastest. 

I'm making a collage of lots 16x16 renders on a 512x512 texture, of the same scene, from various viewing positions and angles, preferably lots of times per second. I've profiled my program (which contained a glDrawElements call per mesh), and the multiple glDrawElements calls seemed to slow it down a lot. In order to optimize, I've resorted to instanced rendering. However, the main problem I'm having is changing the viewport between, say, every 3 instance renderings, or so. I was thinking of adding a fourth matrix, which would scale the perspectively-projected vertices of a would-be 16x16 picture, translate them so that the little images don't overlap, and based on the little picture's position and size (16x16 pixels) on screen, use the `discard' command in the pixel shader. How do I scale the projected vertices from the current large viewport into a 16x16 smaller version of it and translate them inside the former at a certain position? Or, more clearly, how do I change the viewport during a glDrawElementsInstanced call, every N instances? EDIT Here's a visualization of what I'm trying to achieve: Keep in mind, I can't change the viewport as I want to do this during a call to glDrawEleemntsInstanced, every 3 instances, or so. How do I compute a matrix or what do I have to do to get the post-projection vertices scaled and translated so that I'll have the full image scaled in a 16x16 portion of the screen? 

Never, never promise 'payments once we've made a profit'. This is a red flag to artists. It means we're never going to get paid. No matter how good you think your game is, promising profits is a really bad idea, and will scare away professional artists. If you want us to be reliable, we need the same thing from you. On a non-paid game, this means: getting all the info from you that we need for each asset, not having a ton of arbitrary revisions (as this is a lot of extra work), a reasonable deadline (if we're doing it for free, we can't do it fast - we need to work, too), and timely communication (don't leave us hanging for weeks). For a paid project, make sure you pay on time. I can speak from experience when I say that promises left unkept will halt all art production in the meantime. In the end, a non-paying gig is only going to hold us so far, as we need to eat and pay rent too. If you really want an artist to stick with you for a while without pay, you have to find someone really invested in both the game, and their partnership with you. Budget Negotiations. If you have a really tight budget, tell the artist! Many professional artists can be willing to dip their fees if the project is something they really believe in. If you can only afford $XXX to go toward art assets, tell them what the budget is upfront, and ask them to tell you how many assets/how much work that your budget can afford you. A good artist should be able to bring up an estimate, and as long as you're both reasonable, even if you can't work out a deal immediately, you can leave a good impression on each other and leave open the possibility of working together in the future. Find an artist who's work you love and that you think will fit the project. You're much more likely to find a good fit if you find them, rather than them replying to a job ad. A good idea is to maybe find 20 artists that you like, and contact them. Even better if you can find the common thread that you liked about their work - because then even if you get negative replies to your first batch, you have the vocabulary to tell other artists exactly what you want. Check out art forums. Some good ones: www.conceptart.org , www.cghub.com , www.cgsociety.org . There is also deviantart.com, but I would stay wary - the general population of artists there are in the amateur category, and while they may be really enthusiastic, they probably don't have a lot of experience and will therefore be more unreliable. Ask for a resume, portfolio, list of references. Just like any other job! Follow up on the references, and if they have published titles, look at the titles! Someone with published work under their belt is much more likely to follow the game through - they've done it already! 

One way I deal with such stuff is I put a member in the base class that describes the type of the derived object. For instance, GameObject can have a member called type which is an enum or w/e. Then, you could do 

EDIT In.LightDir is computed for each pixel. It is first computed for each vertex in the vertex shader Out.LightDir = normalize(mul(lightPos - In.Pos, Matrix3));, then it is interpolated across the whole triangle. lightPos is just the camera's position (which coincides with the light): 

Texture coordinates are expressed as floating points values between the limits 0 and 1. What you are doing is sending 5 and 32 which get clamped to 1, resulting in the image becoming transparent between 0 and 1, which encompasses the whole thing. What you need to do is divide, either in the shader or outside (preferably outside, on the cpu) by the actual width and height of the texture. For example, say you have a 32x64 texture, and you want it to be transparent in the rect x1=0, y1=0, x2=5, y2=10. You have to divide x1 and x2 by 32 and y1 and y2 by 64, and then do the comparisons. Something like this: