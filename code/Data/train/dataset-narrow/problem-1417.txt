It is recommended you avoid variable names like and since they are very basic functions from R. Or you run the risk of shadowing them. and are not integers so using is a bit unpredictable. I feel it is better to use like I did, and with control over the grid density. I was not able to test my code because you did not mention the package name for so it is possible it will need some adjustment. In the future, please make sure to give us everything we need to run your code. 

allow functions as inputs (e.g. instead of ) allow partial matching of function names easily restrict the functions that can be used 

I think exposes the input data.frame so you don't have to write over and over. For example, can become . To avoid writing twice, you can use instead of This is less about coding but I would warn about making hasty from some of your summary metrics. One example is the way you computed the overtime. If one person hardly ever does overtime but stays two extra hours every time, he or she would score better than a person who does one hour of overtime every day of the year. You might want to replace the definition of by so that days without overtime are now accounted for when computing the mean. 

Here is an implementation of the ideas I had suggested in the comments: to store the output of so it is only called once, and to limit the expensive name comparisons to individuals that share the same initials. I hope it helps. 

the use of rather than looping over an unused argument the use of 's and arguments rather than the trick you used making an optional argument 

I think you will know how to take it from here. Note that if your data is so large that you cannot handle all stations at the same time (i.e can't even compute ), you could loop on the main stations by bunches, e.g. 1000 main stations at a time. One remark: your earlier solution and the one I suggested here both use basic euclidean distance to compute distances. This will probably be fine if your data is restricted to a small region and far from where longitude jumps. Otherwise, you might want to look in a more appropriate function for computing the distance matrix. 

This requires you to have methods for all your queryables, which you seem to already have by using . If you wanted to get really fancy you could modify your options hash to look something like this: 

This translates each of the items in the array returned in the previous into their value. Finally you assign that to beverage_links. If is an array of beverages, I recommend you rename it to . It is obvious that if you have a beverage, you have the info of that beverage. If beverages are a custom class, give it the method because nothing else will use that (unless you have, say, burgers that are also menu items. In that case, both and should extend some class that has the method). The way you have it now, it doesn't look like you need to be using the keyword, but it's hard to tell without context. 

In , you say that and are attributes but you are not treating them like attributes. You pass them to the function when that function could just access them as instance variables using and syntax. This will first require you to set those variables, however. Either pass them in to the initializer and set them explicitly, or you could use in much the same way as above to create the and methods. Then you can set the variables whenever you want by calling, for example, 

(Note that I dropped the , the parentheses, and the as per my previous point). You typically don't use parentheses on conditionals unless it would be prohibitively confusing without; see the style guide Make a similar fix for this and other lines: 

Ordinarily, you would just use instead of , but in this case you can exploit the fact the ruby treats EVERYTHING that isn't or as true; change this line to: 

Now Bar may hold a non-const pointer or ref to an IFoo without having access to any of the non-const API of Foo excepted AddListener / RemoveListener, as it only has access to what it's supposed to use. The only issue is that it's a bit verbose. 

What Tom Lee said was great (and I'd upvote if I could), but I'd like to add a few misc remarks. On the constness of the method: without more knowledge of what you're trying to implement, I'd vote against it. The reason here is that your delegate reacts to an event, without returning any new computed value (as indicated by the return type); this would tend to indicate that the only way the delegate could do anything useful would be either by modifying itself or by having "external" side effects. The const restriction forces your delegates to only actively react to an event with external side effects. Of course, removing the const qualifier won't magically forbid you to make side effects, but it might remove the need for them. (Hope that's clear enough.) On the same topic, I don't see why you intend to pass as a const ref to ? The method modifies the Foo instance, maybe not programatically, but at least semantically: it'd be way more correct IMHO to have a non-const ref given to the method. As for trigger / add / remove, it seems to me you wouldn't need a friend declaration if publicly inherited from and were protected: it would publicly expose and , and you'd be able to call only from Foo methods, which is what you aim to do if I'm not mistaken? Did I miss something? Some design remarks concerning method. Is there a need for it to have a parameter? Wouldn't it be better to just give it a ? Another thing that bothers me is why you chose to put a registration method in the delegate object at all: you already have a registration method, which is . By adding StartListening, you make Bar "aware" of (or at least of ), which it doesn't need: theoretically, should and could work with any , not just with (just like works with any delegate, not just , which it doesn't know). That's why I'd move the registration call out of Bar and make the "link" at an upper level. My tuppence worth, hope that helps! 

Don't use for simple conditions, use . But in this particular case you are just checking against , which is already 'falsey'. Just do this: 

When you use a method that takes arguments, surround the arguments in parentheses unless it's a Kernel method (like , and ). That line should be: 

and if you ever need to look up where , instead look up This will create a multiplication table that looks like this: 

So I created a function that takes a pattern to select a file, and then optionally opens it with a block so that I can pass in the block above in the case of the xml file. How do I reduce the repetition in the code? 

Avoid using . In this case it's not too bad, but imagine in the future you want people to also be able to answer "q" to quit the process and "a" to automatically rename them and "c" to move them but keep a separate copy, etc. You'd need a separate condition in the elsif for each. Instead you should use a case statement: 

You have way too many comments, delete pretty much all of them except for the ones that are REQUIRED to understand what the code does; 

should both be making sure that everything being inserted into actually is a dinosaur, or your later methods that try to call methods like on will crash. 

I wouldn't use this with your current requirements, but the possibility is there if you needed the extensibility. 

First of all, put a space after , but more importantly, either use a heredoc for large multiline text or read the text from a file . 

That's a direct translation and a much more 'ruby' way of doing it. There's another way to do it as well, but it's not necessarily better. It lends itself nicely to extending the number of players - imagine you later wanted a 4 player tic-tac-toe game.