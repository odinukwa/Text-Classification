The firewall logs the packet marked with (***) as denied. Well, it's true, 1.1.1.1 has sent a FIN before. If many connections are terminated at the same time, this has as a consequence that threat detection triggers, therefore completely blocking the traffic of that host. Who is to be blamed? The client application? The client OS/networking stack? The firewall? (It's a Cisco ASA by the way.) 

This was discussed on the strongSwan mailing list. As you can see from that thread, in the end it turned out that it makes no real sense to use this, at least not with strongSwan. 

In case the ASA is the initiator: Now several combinations in on the StrongSwan side: left 123 right 321 

Layer 2 and up: The signal on the wire is inspected by the circuitry of the device in order to decide which ports to forward it to. 

This is a Cisco ASA 5515-X with software 9.6(3)20. The remote side didn't tell me what they use, must be Strongswan or something. Using the following debug commands 

I've given this a lot of thought and I am attaching a technical drawing of my own. Especially the CIST and CST part in BenjaminDale's drawing didn't really make sense to me: why would the CIST be linking the instances? I currently see it the following way: 

While discussing this problem was very interesting, the ISP has in the meantime started exchanging the DSL modems on the different sites by another brand. Some packet fragmentation issue they say. And hey, 9.5 Mbps in both directions without any problems or special settings. 

Background I'm currently trying to find out what kind of burden a NAC (Network Access Control device) performing a MAC authentication would put on the devices. Please don't tell me MAC auth is not secure. I know. But you have to start somehow. I know you can also use Radius (which transmits the MAC address directly). Not sure however what would happen in that case when someone plugs in a "dumb" switch = more than one device/MAC. Let's stick to the fact that this would be a generic NAC that receives snmp traps when the link comes up and then does its work. 

In this case, your router talks PPP to the provider directly. But first, the router puts this data into Ethernet frames which it transmits to the modem. (hence PPP-over-Ethernet) Since the modem is in bridge-mode, it won't interpret the frames, only encapsulate them itself in AAL (ATM Adaption Layer) or whatever in order to transmit over the public network to the provider. The provider then authenticates you etc.pp. Other cases: 

Does a standard SNMP subtree containing a "Port -> MAC" association perhaps exist? Or is there a more efficient way to do this? That way you would not have to the switch but could concisely query for a certain port, which would certainly alleviate the load on the switch's CPU and also accelerate the queries. 

Now what is making me crazy in addition, if I add port 1195 to the access list, the following invocation of packet tracer accepts the traffic: 

Although I currently suspect that is not entirely correct, I believe it would be for ikev1 but I don't find much documentation for ikev2 (multiple PSKs). For now, I'll investigate in that direction. 

First, in the case of MAC-based auth, as usual the switch assumes the role of the supplicant. However these ones still send EAP packets inside the RADIUS request, instead of a plain RADIUS request, to the authentication/RADIUS server. The manual gives this hint: 

Is the global rule and the implicit deny following it looked at, even if no explicit interface ACL is configured on the interface? They say: 

(say the remote net is 20.20.20.0 in both cases) What I'm not sure about is if the reply to an access from outside can be translated properly. Client 20.20.20.1:1234 sends a packet to Server 2.2.2.2:5678 which internally becomes 1.1.1.1:5678. Server 1.1.1.1:5678 then sends a reply packet to 20.20.20.1:1234. What does the router do with this? Will it translate the reply's source address to 2.2.2.2 or 2.2.2.3? From the above, at first sight both are possible. Does it take the initial socket into account and reply using the address on which it was contacted in the first place? 

I guess the answer is that there is no answer, except that there is no standard that has stated this requirement. Instead, you have to perform half a dozen lookups like this when you'd like to use SNMP or some management GUI (which often use snmp in their backend) while the CLIs normally have a command ready to just show the addresses in one single step. 

It looks like indeed the NAT statement in itself is not needed, however proxy ARP is needed here. Having that identity NAT implicitly activates proxy ARP (even if ASDM warns you not to do that). But in this case you have to. Feel free to correct me if you think the answer/solution is wrong. 

In any case, packets are currently hitting the firewall on the Internet(outside) interface on udp port 1195 but they aren't seen inside. : 

Why does this make a difference for the NAT of VPN1? I don't get it. There are different (source) interfaces involved, different source addresses obviously, so why would one prevent the other from working? 

Probably you will fry the router's circuitry and nothing more. The behavior that you are describing is that of a hub (stupid repeater), and even then.... You should get some basic understanding of the different layers: 

The above answers are quite technical. Think of it this way: In fact VLANs and tagging is nothing more than a logical separation of networks in contrast to a physical one. Now what does that mean? If there were no VLANs you would need one switch for each broadcast domain. Imagine the cabling involved and also the potential number of NICs required at the hosts. So first, VLANs allow you to have multiple independent layer 2 constructs within the same switch. Since now you can have multiple networks on each link/port you have to somehow be able to distinguish which packet belongs to which network. That's why they are tagged. If a port carries more than one VLAN it's also usually called a trunk. (for n>1 VLANs, at least n-1 VLANs have to be tagged and there can be one untagged VLAN, the native VLAN) Generally you have to distinguish packets at port ingress (incoming "from the cable") and egress (outgoing "into the cable"): Ingress 

If I set the two PSKs the same on each side then everything works. BTW what is the point anyway with IKEv2 having two different PSKs? Oh, and ASA debugs show the following when it cannot connect: 

I don't know what you are planning to do exactly, but in any case with classical network gear it is not possible. 

I wanted to implement trivial MAC-based authentication on some Cisco SG300 (small-business) switches. The client doesn't ask for auth but I simply want the client's MAC address to be authenticated, like for a printer. Those switches can do both 802.1x as well as MAC-based auth. However their definition/implementation of the latter seems interesting. Read ahead. 

In fact we never really found out what was going on here. In the meantime the DC switches were replaced with higher end gear since there had been other problems with those devices. 

There was a manual Dynamic PAT (Hide) to any in NAT section 1. I moved it to after-auto (section 3) and all is good... 

where netx = 1.1.1.240/29 (the network between the two ASAs), traffic does not seem to flow correctly in one of the directions at least. (Currently, I can't be more specific because I don't know exactly.) Since the private address space is PATed behind ASA2, the result is no connectivity to the Internet at all. There is no specific routing entry on ASA1 to reach ASA2 since these networks are directly attached. ASA1 is the default route for ASA2. Also, all these interfaces have ACLs that correctly permit traffic so security levels are of no concern here. There is also no other NAT statement with (inside1,outside1) interface selection. There is no NAT statement with "any" interface whatsoever that could conflict. The funny thing is that after removing the NAT statement in question (followed by "clear xlate"), it still takes hours for the actual Internet access to become unavailable. However, putting it back instantly resolves the problem. I would like to understand why it seems this NAT statement is needed. (I thought the days of "NAT control", where you needed NAT statements even if nothing needed translating, were long gone...) 

Can someone explain why the first NAT config below gives me an "asymmetric NAT rules" (RPF) error for the connection to "VPN1" while the second (no "any" in the Manual NAT) makes the automatic NAT actually work? Automatic NAT (section 2) not working ("asymmetric NAT"): 

So we have two daisy-chained ASAs and up to and including interface "outside2" all have PUBLIC IP addresses. Software is ASA 9.8 on ASA1, which this is about. The problem is that without the identity NAT statement 

The router looks at the complete socket (protocol, source/destination ip and port) which allows it to have a 1:1 relationship for any connection. So yes, it does work. 

The problem is the ikeV2 authentication with the ASA as initiator. For the following experimets I set on the ASA the followings PSKs: 

Now all the other gear we have doesn't do that when you want to use plain MAC-based auth. Even Cisco themselves don't do that on their IOS devices (where the feature is called "MAC-auth bypass"). Second, these switches (SG series) can do dynamic VLAN assignment, meaning you return a certain RADIUS attribute with a VLAN embedded in it, and then the switch will apply that VLAN on the port if possible. Now in this case, this attribute is silently ignored, if it is not nicely provided in an EAP "envelope". This is where it all comes together and breaks our current setup (or it needs to be modified.) I could of course try to configure the RADIUS server (here freeradius) to handle both situations (EAP as well as plain RADIUS), but what I mainly want to know from someone who has already gone through all this is: Is a "MAC authentication" that still generates EAP packets a valid approach? Now what I would want to do is: Nail Cisco's support and tell them that either the device should do 

Now what exactly are the CST, the IST, and the CIST? Can someone draw me a simple MSTP topology with CST in red, IST in yellow, and CIST in green, so as to have a final reference without any ambiguous texts to be interpreted? :) Which of them is relevant considering the actual protocol, i.e. the BPDUs? I.e. What happens when an ISL inside a region drops? What happens when an ISL between regions drops? Which parts of the network will recompute their topology and why? 

What would you call a manufacturer that allows you to define secondary IPs on an interface/VLAN, but not in a VRRP instance on that interface? Instead, they say you should just create another instance. While that would work, interoperability with other gear may be at stake. We're talking about Fortinet, and all I ever hear from them is "our gear just works that way". 

By looking at RFC 3768, section 5.3.9 seems to indicate that indeed you should be able to configure more than one virtual IP in a single instance: 

We never found out what actually caused this incompatibility. We went back to using IKEv1 instead of IKEv2. 

Layer 1: physical connection: connection between machines, or between machines and some network gear like 

I have the feeling the more I read about MSTP, the more confused I get. So here we are in order to make things clear once and for all. $URL$ says: 

(port should be specified on destination side) Again I don't see how any of the red or green answers (or other) would be correct. 

1) Short answer FWIW I also don't see how the answer marked in green would be the correct answer. In fact I don't see how any of those answers would be the correct answer. Long answer If I wanted to protect Branch I'd set incoming rules on the Branch network. But, if only City_HQ is under my control, I can either drop what's incoming from Branch, or drop what's outgoing to Branch. I prefer working with incoming rules. And when I start using rules I prefer using "deny any any" as last resort with explicit permits before that. But that's from a firewall perspective. We are talking about routers here... YMMV 2) AFAICS the config is almost correct but should say 

The goal is to forward two different ports 1195 and 1196 from the outside address of the ASA to two different hosts on the inside but on the same port. These are the addresses used in this example: 

Currently you have to search the entire forwarding database table because the SNMP key contains the MAC address while the SNMP value contains the port number: 

I found out that I must use deprecated OIDs in order to obtain all IP to MAC mappings (aka ARP table) on certain Force10/Dell devices with virtual router functionality (VR) enabled. I can seemingly obtain a valid mapping table using 1.3.6.1.2.1.4.22 (ipNetToMediaTable), which is however deprecated. The table to be used nowadays appears to be 1.3.6.1.2.1.4.35 (ipNetToPhysicalTable). Here's the difference between polling the two: 

Essentially, in this case, the ipNetToPhysicalTable seems to provide also the router's IP adresses (with the local MAC address of the switch/router itself). ipNetToMediaTable doesn't, but instead provides all partner adresses, even those in other VR instances, so it seems to be closer to what I want. Does this fit into any known schema? Is this implementation half-hearted, or is it me and I should be doing something differently? Is there a standard for polling VRs' ARP tables using SNMP? (I know Cisco's working with SNMP contexts for this.)