Or, if this is the specific case you are trying to achieve, a simple will list all the ports that have port-security enabled. 

This is generally the case because they want to simplify the UI, specifically avoiding options that many users don't really understand or can cause them problems. The 802.11 feature that leads to the SSID being part of the probe request is the ability to provide a non-broadcast SSID (i.e. hidden SSID). For a client to connect to an SSID that is non-broadcast, it has to specifically know the SSID name. Many people use this believing it to be some sort of security feature, but anyone who wants to figure out the SSID can do so with almost no effort. Generally speaking probe requests, while always broadcast, function in one of two ways. They can send out a generic request ("Hey, is anybody out there?") or a more specific request ("Hey, is Bob out there?"). In some operating systems, you can specify that the probe request should include the latter by selecting some sort of "Connect even if the network is not broadcasting its name (SSID)" (Windows 7 example) so that it can connect to a non-broadcast SSID. However in some operating systems and many mobile devices, they streamline the UI for connecting to an 802.11 network. The reasoning goes like so: 

The three major differences between a managed switch and using Linux bridge interfaces are performance, port density, and features. Most managed switches will embed some of their programmed functionality into specialized hardware. This is not true in all cases, but this specialized hardware will tend to outperform devices that are purely software based (at least for the functionality embedded in the hardware). Second, if port density is of concern, there aren't many server systems where you can pack 12-48 ports into a 1U chassis, and of the ones I have seen they were designed to be a network device. Finally, are the features. Managed switches will typically have features that either are not present on a Linux platform, not as easily configured, or may require additional CPU/memory resources that will further impact performance if you use them. However, aside from the differences in the two platform choices, it sounds like you are setting up some sort of lab/test/dev environment. My primary concern would be that you should try to match your actual/production environment as closely as possible. Your Linux "switches" do not behave the same as your managed switches, so something you implement in the lab may act entirely differently when implemented on your managed switches. 

As to why host 2 sends out an ARP request so soon after, I would guess that the OS you are using either keeps a short timer for entries added this way and sends an ARP request to minimize the impact of any potential ARP poisoning attacks. However this is only a guess and it would take looking into what the OS is actually doing to make sure. For more detail on the ARP process, you can check out RFC 826. Here is the processing flow from the RFC: 

You could, but there really is no point. DHCP relay features are only there to proxy specific broadcast traffic (by default only DHCP traffic) from one broadcast domain to another. Since your client and your DHCP server are in the same broadcast domain, there is no need to proxy DHCP broadcasts. The server and client will be able to communicate with broadcasts just fine without any help. A bit more commentary on other parts of your description, although we are still lacking details: 

Remember, that while you may intend for it to be used by you and your friends, it will be on the Internet and open for anyone to exploit. Personally, if exposing an intentionally vulnerable device on the Internet is the goal, then the more separation the better. I would recommend getting an entirely separate Internet connection (with it's own hardware) to dedicate to the vulnerable host. Treat anything that is connected to that network as compromised after the exploitable device is exposed, including any network devices. To make it easier on yourself, make everything as easy to restore as possible. Before exposing anything get everything configured and secure. Archive backups of configurations and systems (do not store on the same network where it will be exposed). Use software that Deep Freezes systems or makes them easy to restore. That way, when it comes time to make sure everything is secure again, it takes as little work as possible (possibly just reboots or factory defaulting with configuration restores). Use unique passwords for each device in that environment that you haven't ever used elsewhere. Change these passwords every time you expose the vulnerable network. Possibly most important, only expose the vulnerable system when you are actually using it. Primarily because exploited systems can be used in attacks on other entities. Preventing having your systems participate in attacks elsewhere is first an foremost being a good "netizen" but if that isn't enough imagine that your exploitable system came back to bite you personally (i.e. used in an attack that exposed your financials, etc). Also depending on laws where you live, you may be liable for damages done from an intentionally exploitable system. Finally, this will also help prevent it becoming a widely known soft target. What I mean by my last statement is that "soft targets" get put on lists and sometimes shared by those online looking to exploit systems. You mention that "logs in the Kali RPi are filled with brute force attacks." If your RPi isn't taking action on these brute force attacks (i.e. dropping traffic from source IPs after X failed attampts, etc) the number of these attacks will only increase over time. If the RPi takes action, it will see fewer attempts over time (they will never completely go away). 

Your opinion is simply wrong. There is no reason someone cannot run IP over Bluetooth and bridge the Bluetooth connection to an Ethernet LAN in a similar fashion that 802.11 traffic functions. 

You will not be able to use all 8 Gigabit ports with these supervisors. You would need to upgrade to a newer supervisor to make use of 8 Gigabit ports, such as the Supervisor 6-E/6L-E (with the TwinGig modules). Keep in mind that your older WS-X4548-GB-RJ45V linecards will potentially have performance issues as they are limited to 6 Gbps throughput. Upgrading to a newer supervisor won't change that restriction, but it will increase the capabilities of your WS-X4548-GB-RJ45V linecards to some degree as well (4 queues to 8 queues, IPv6 support, etc). 

This is much more difficult as there are a large number of factors that will impact the performance. Here is a non-exhaustive list to consider apart from the speed of client/access point: 

Strictly speaking, access points are a L2 device. Their primary function is to bridge 802.11 WLAN traffic to 802.3 Ethernet traffic. However, in the real world, enterprise wireless vendors often push more functionality to either the AP itself and/or tie them into a controller, with the end result that they often incorporate functionality from higher layers as well. I don't entirely follow #1, but neither the connection to a switch or router nor the use of CSMA-CA has anything to do with their function as a L2 device. It is a L2 device because that is the layer of the network where it is designed to function. It doesn't care nor need L3 or above to operate and allow devices to communicate (again strictly speaking). As for #2, yes, an AP (or any bridge) needs to keep track of which interface any individual device is connected. In general (and simply), they work on the principle of frames destined to an associated station gets forwarded out the wireless interface and any other frames get forwarded out the wired interface (or sent to the controller).