Perhaps you should mention that your code takes advantage of the Rearrangement inequality which states that the scalar product of any permutation of the vectors \$ (x_1,x_2,...,x_n) \$ and \$ (y_1,y_2,...,y_n) \$ is minimal if the elements of one vector are in increasing order and the elements of the other in decreasing order. I see two possible simplifications: First, instead of reading the second vector into a temporary vector, sorting it and then reversing it "manually", you can sort in decreasing order by supplying a comparator to the sort: 

and then is or a valid socket descriptor which is bound and listening. The more Swifty way however would be to define an optional 

Possible improvements The decimal separator is not always the dot character ".". In Germany for example (and many other countries), floating point numbers are written as "12,34" with a comma as separator, and that would be denied with your code. You could determine the correct localized decimal separator at runtime: 

This is perhaps not faster than your version, but definitely better to read and therefore better to maintain. You can also replace the recursive function by an iterative version 

Second, copying a vector copies references to the elements, which is not to be expected for a value type: 

by an array. A dictionary could be memory-saving if you have "few" keys in a "large range", e.g. 1, 20, 300, 4000, as a "sparse-array" emulation. But that is not the case here: The bucket numbers range from 0 to 9, so that an array is more appropriate, easier to initialize, and easier to access (no forced unwraps needed). It is unclear in your code how many entries are needed: You initialize entries for , update entries for , and finally evaluate entries . If you want to collect the data for the last 10 weeks then it would be 

Your function prints all found IP addresses in debug mode, but binds the socket only to the first one. The recommended practice (if I remember correctly, and I will try to find a reference) is to 

That makes the program structure more organized, and allows to add test cases easily. I have used from . If that is not available with your compiler, replace it by . Next, your code to update the array looks a bit obfuscated to me. Actually you don't need that array at all: You already test all bit positions of in 

The parameter could be defined with an default value zero. Putting it all together the function could look like this: 

without the factorization . Generally a better method would be to determine the factorizations without duplicates in the first step. This can be done recursively as follows: 

One possible approach would now be to start the first request, and in the completion handler start the next request, until all pages have been retrieved. Another approach is to use a “dispatch group” to chain the network requests. This allows to almost keep the structure of the main loop: 

A small performance improvement is possible in the function, by using multiplications only instead of exponentiation (which is Horner's method): 

There is no need to continue with the loops if a decomposition into a sum of two squares has been found. Now note that one integer in the decomposition determines the other. If we have a test candidate \$ a \$ for \$ c = a^2 + b^2 \$ then it suffices to check if \$ \sqrt{c - a^2} \$ is an integer. Also we can assume that \$ a \le b \$, which restricts the range of \$ a \$: 

This also saves one dictionary lookup if the value is already present in the dictionary. I would (but that may be a matter of personal preference) separate the string conversion completely from the difference computation. Return an integer array from : 

The efficiency of the function can be improved. It is not necessary to check both players against each winning combination: 

because the type is inferred from the context. But why do you force the view to be fully transparent at all? Shouldn't that be left to the designer to configure in the interface builder? Unless there is a special reason I would just remove that from the init methods. 

Your handling of invalid inputs is plain wrong. While you did right to disable the calculation as soon as an input becomes invalid, you totally messed up the logic to re-enable the calculations. Test it yourself, enter something invalid into both input fields, fix up only one, and the buttons become re-enabled despite the other field still containing garbage. The problem is wrong use of the . Whether the buttons are disabled or not, is actually a function of whether input a and input b are valid. Whether they are valid or not individually belongs into the state - however the computed result of that combination does not! If you had computed the state of the buttons from the state of the inputs in the method, this problem wouldn't have occurred. 

This function is simply wrong, for multiple reasons. Let's step through them one by one: The return statement is sometimes unreachable Check your indentation. Currently the return statement is only reachable if . Numbers >=1,000 and <100,000 do exist Your forgot to handle the case when the number doesn't contain the term "hundred". The same issue exists with numbers >= 1,000,000 and <100,000,000. Writing the same code 3x in a row, with the same mistakes You are using different constants, but the logic is mostly identical. The copy & paste is pretty obvious. And it had exactly the effect you would expect: You copied the mistakes as well. This would have been easily solved by extracting the common parts of the logic properly. 0 is a number While you don't say "zero hundred" or "zero thousand", "zero" alone is a valid number and should be supported properly. 

ezxml has a variadic function which allows you to traverse directly to a specific node, terminated by either as the index, or an empty string for the node name: 

Defensive programming please. You've only verified that the function is injective, but you didn't test for surjective property. That means that only tells you that every \$f(x)\$ was unique. However, you probably should also have validated that all of the given \$f(1),f(2),...,f(n)\$ where also within the permitted range of \$[1,n]\$ While the specified function signature doesn't even allow this case (so the corresponding test would pass trivially), this becomes relevant if you were to reuse the logic in an environment where this guarantee isn't given. Well, actually you didn't even test the injective property properly. You only checked if \$n\$ unique values where found in the input. Not if there were also exactly \$n\$ inputs provided. Currently, your program would wrongly judge the following example as bijective, despite not even being a valid input by any means: 

So yes, the OOP version is still slower and consumes (slightly) more memory. This is expected though. Typing early and properly did have an measurable impact on both performance and memory consumption of the OOP version. The effective memory overhead for the OP wrapper shrunk to about 50% just by typing early. Using the data-structure efficiently and minimizing the number of accesses did yield the biggest gains though, and is effectively more than a full magnitude faster than the OOP approach. When comparing this to the 32bit version, for PHP, you may actually cut all memory requirements roughly in half. PHP wastes most of its memory on pointers, not on actual data. 

I must assume the world state, respectively the list of updates is not buffered, so this reads from the live game state? Writing out all changes to the game state to a transaction log (with all dangling pointers resolved, implemented as a list with a single producer and multiple non-consuming iterators), and then walking the transaction log for each active connection asynchronously removes this load from the main loop as well. There is no good reason why this should be allowed to stall the main loop. 

For instance, the boost implementation gives an never empty guarantee which your implementation does not. You are explicitly handling the case in which the Variant is in an invalid state. 

And now we halt the program for 2 seconds, and expect the user to know that he should press a key to continue. There is the instructions missing. Either that, or that delay is entirely pointless. 

Now you can just to get its description. The and operators are deprecated in Swift 2.2 and will be removed in Swift 3. You should replace them by 

or derive it from , i.e. the number of given values. Putting it all together, the function could look like this: 

Popping an element becomes simpler as well. Note that the preferred way to check an optional (here: ) for is optional binding: 

But what if the plist has not only dictionaries but also arrays as "nested structures" (array in dictionary, dictionary in array, array in array, ...)? That is not too complicated in the recursive version, we only have to test for dictionary or array type. The function now takes an generic parameter and then enumerates the dict or array and calls itself recursively. We can also print the "terminal nodes" or "values", i.e. everything that is not a collection (strings, numbers, ...): 

The conversion to a string cannot fail anymore. If another case is added, the compiler ensures that it is added to as well. 

I am not an expert for neural networks or deep learning, so I cannot review all aspects of your code. But here is some feedback: In JPSNeuralNetworkNeuron.swift, some s are defined with methods which switch on the possible values of the enumeration, for example 

for all (positive) integers . Together with this is a recursive computation method. But since you store the bit counts in an array anyway, this can be implemented as a simple iteration: 

An alternative approach to achieve a “smooth” transition between consecutive colors would be to use the “HSB color model” (also called “HSV“), where the “hue”component is used to describe the angular position of the color on a color wheel. In your case the hue can be chosen as the ratio 

There are two problems with your method: Problem #1: The method takes a parameter, but actually it is expected that a single character string is passed, and it crashes at if a multi-character string is passed: 

the should be replaced by , otherwise you get a wrong result if the input is the square of a prime number (such as ). To avoid a loss of precision if is converted to a floating point number, it should be 

returns a textual description of an expression. Swift already defines a CustomStringConvertible protocol with a property for this purpose, which is also used in statements and string interpolation, therefore I would define 

For , this reduced the execution time from 0.13 seconds with your code to about 0.001 seconds. The measurement was done on a MacBook with this simple code: 

Your method works correctly, as far as I can see. But it creates an for every node in the tree, i.e. it uses more memory than necessary. Each call to the method of the generator then traverses down the methods along the left or right subtrees, which makes it slow. An iterative approach using a stack instead of "nested generators" seems to be faster. Here is a possible implementation of the iterativeInorder algorithm described in Wikipedia: Tree traversal: 

It is not apparent from the function name what the function does. Does is convert from or to ISBN-10, and from or to what? And why does a conversion function not return anything? You are calling at the end of the function: Whatever that is, it should not be part of the conversion. The validity of the input string is not verified. If the input is too short or too long, the result will be nonsense. If the input contains non-digits, the function will crash. A better function definition might be 

For integer coordinates in the range \$ -1000 \ldots 1000 \$, all the calculations can be done without overflow. Generally, for coordinates in a range \$ -M \ldots M \$, the computed values are bounded by \$ 8M^2\$ in absolute value, so you can choose the required type accordingly. 

Encapsulating the functions into a type is also a good idea. But I would use a which is initialized with the byte order, and make that instance methods and not class methods. The reason is that you probably will do several calls with the same byte order and you don't have to pass it to every call: