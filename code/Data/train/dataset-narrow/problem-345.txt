What he needs to know is the publiv IP address(es) that will be used when clients on your wifi network make requests to services on the Internet so that he can whitelist them in his abuse-control system. Depending on your network setup that may be an individual IP address or it may be a range of addresses. If you are sure you only have a single internet IP address you can go to a "what is my IP" type site. If you have a pool of addresses you should have a record somewhere of what that pool is. 

Current reccomendations are that NAT mappings are Endpoint Independent. That is all packets from the same private client IP/port/protocol use the same public client IP and port even if the desinations are different. However there is no gaurantee that every NAT you find in the wild will do this. Some may do their translations based on the full 4-tuple (known as a "symmetric NAT"). Particuarlly insiduous are symmetric NATs with port-preserving behaviour. Under light load with random source ports on the client the mappings will appear to be endpoint independent. However if multiple clients on different machines use the same source port the true nature of the NAT will become apparent. I belive linux NAT falls into this category though i'm not positive on that. 

On unix-like operating systems the term "daemon" refers to a long running program that performs some service. Generally started by the systems startup scripts and stopped by it's shutdown scripts. A routing daemon is a daemon that implements a routing protocol. It sends and receives routes from other routers and uses them to update the routing table in the kernel. I do know know (and it may well be a secret) exactly how things are broken down on propietary routers but there will almost certainly be a split between the buisness of managing what routes are in use and the buisness of actually forwarding packets based on those routes. 

It depends what you mean by "real" 240.0.0.0/4 is offically "reserved". It was never assigned to any particular use. As such operating systems vary in how they hanle it. Windows seems to outright refuse to talk to such addresses while Linux seems quite happy to treat them as normal unicast addresses. There have been proposals to press such addresses into service either as public internet addresses or as private addresses but it seems the outright rejection of those addresses by many deployed systems killed off those proposals $URL$ Given the current push towards IPv6 I strongly belive that the fate of such addresses is to remain forever reserved. 

A repeater (aka hub) is a relatively simple device. It decodes and regenerates the wire-level encoding and participates in a minor way in collision enforcement but it does not buffer frames or make any descisions about where a frame is destined for. A bridge (aka switch) is a far more complex device that works on a scale of full frames and keeps a table of MAC addresses so it can send packets where they need to go. 

As I understand it the term "telecom" (a shortened version of "telecommunications") is usually used to refer to the phone network, the companies that ran it and the technologies that grew out of it. Building computer networks was/is a separate specialism. What is interesting is in recent years there has been an inversion. It used to be that computer networks were built on top of services provided by the phone network. Nowadays phones are being run over systems designed for computer networking. 

It seems the problem is that the rfc differs from actual practice in it's definition of socket. I just went and looked up the documentation for "accept" for three major operating systems, all of them talk about accept creating a new socket. $URL$ $URL$ $URL$ 

Ping builds a ping packet and passes it to the kernel. The kernel looks up the destination in the routing table. Based on the routing table it determines an interface and a "next hop IP address". If the interface is "Ethernet like" the kernel looks up the next hop IP address in the ARP table for the interface. If there is an entry in the ARP table the kernel attaches the MAC addresses to the packet and sends it. Otherwise it puts it in a queue and sends out an ARP request. 

If computer A sends an ARP request for computer C's IP address then computer C will answer it. Whether computer A will send such a request depends on how things are configured. Normally computer A will look up computer C's IP address in it's routing table. Based on this table it will determine that the "next hop IP address" is the IP of it's default gateway. It will then look up the default gateways IP address in it's ARP table and if needed send an ARP request for the default gateway. In this process computer A never ARPs for computer Cs IP address. However there are several scenarios in which computer A may make an ARP request for computer C. For example 

There are two sides to this technical and legal. On the technical side the main question is how portable does it need to be? If a system mounted in the back of a SUV or pickup is acceptable then it's certainly doable. Man-portable may be tricker. You would need a mobile base station and something to power it. If you want to talk to the outside world you would need some kind of uplink (sattelite or possiblly short range microwave). If you want to receive incoming calls on your regular phone number then you would need a roaming agreement with your regular phone provider. The hardware to run a base station is available off the shelf. See for example $URL$ . The software is available as open source. Then there is the legal side. Mobile phones operate on specific channels within specific bands. To operate legally is likely to require specific authorisation from your country's radio regulator and/or an existing cellular operator. There is some overlap between the 900 MHz US ham band and the cellular bands used in europe but I don't know if this overlap is sufficient to allow running a functional network. $URL$