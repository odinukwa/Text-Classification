When you create a , are you forced to provide a ? No you're not. I think it should be the same concerning your data structure. There are several occasions where you just don't know how many objects you'll have. Since the underlying and can very well adapt to increase your capacity, your data structure has nothing to fear by offering a default empty constructor. I'm wondering why exists. When you an object from a , you should remove that object, IMO. So you should implement some kind of method, and the client of your object will deal with the scenario where you could want to add an object if it doesn't exist already. Finally, there is one terrible side effect in your code : 

You know what, I won't write it. It's super long and you got the point! :p This is an \$O(\phi^n)\$ operation, which is pretty super slow. The performance of such an algorithm get's terrible real quick. (Check out the comments to see the mistake I made! :p) 

Since your comment said you didn't like lambdas, let me propose something! You could use an interface, let's say . Then, you would need to create a class for each callback. It may look like more trouble than it's worth, but if you have a lot of callbacks, it might be worth it. 

It's more performant because is a pre-computed value, whereas needs to call the iterator and check if there's a value. This : 

I'm not sure about the use of . Let's say I create an instance it implies that the indexes will never be used? Therefore it seems like a useless use of memory, though I might misunderstand what you're achieving with this. If it is the case, consider that your code might use comments in order to explain why you use the ! There's a bug with the too. You check for this index when you and from your data structure but not when you set. Meaning that if I wanted, I could do this : 

Now, you're talking about your DI container. This factory should be in your DI container (meaning you'll need an interface for it, but I'll skip this 'cause I assume you know how it works). For the rest of the code : You always retrieve the to apply, meaning that having a private field for is kind of useless since you'll always re-set it before using it. Consider keeping this field as a scoped variable inside your method. The pattern usually returns a and sets the "return" value in an parameter. You should stick to this or rename that method otherwise you're kind of breaking a standard. I don't know if you have access to C#6, but if so you could replace this : 

I think the operator is the clearest, the second one is a little more ninja and might not be appropriate if some member of your team (if you have one) don't fully understand the operators. 

Initializing your using the isn't the responsability of the method. Your class should have a method or a constructor that takes as a parameter a . Because if you need to change the 's logic one day, you'll need to change it in one place instead of all of the places where you initialize it. Something like : 

From my experience, when you launch a command you should be 99.9% sure that it will work since the command pattern isn't really good to inform the "launcher" of the command status. So, I think that before your command gets into your command handler, it should be validated. Then, if your command handler can't process the command, because of an operation that would happen between validation and handling from another thread for example, you should throw an exception. 

All your members should be ! None of them should ever change. You don't want someone to set your lock members to . That would be bad, I don't think you possibly could change the parent , that would be weird, and I don't see the need to create a new instance of the list of child controls! 

We can now use a instead of having chains of . There's also a third solution, that I don't really like, honestly. It involves reflection, meaning it is slower and well... not really clean. I'll show you anyway because well, I'm no master of you. :p This solution works using the first interface. Don't forget that using reflection, you loose the compile time check, which is not a good solution. 

You compute the sieve twice while the result could be cached. Compute the prime numbers at most once, and you'll save some processing time. You could potentially keep the prime numbers in a binary tree, which would make the search a little faster than a simple list. When you ask for a specific range, check in your tree if this range already exists, if so, pick a random prime number in this range. If there's a part of the range that already exists, compute the rest of the range and add it to your tree. If the range doesn't exist at all, compute it all and add it to the tree. If you use this generator a lot, you'll realize the performance will be much better. Also, maybe create a to hold all this information. 

Also, you don't really need to check for , what's the worst that can happen, you'll add an empty range to your list? That's usually not important, and your code has less , which is good. I'm no pro with Automapper, but I don't think it's a good practice to map lists, maybe you should define your map per object () but maybe there's a performance gain I'm not aware of. 

You could argue it's a useless change, but I think it's much clearer without the operator. Since your is casted to a , you should use instead of here : 

That is pretty simple. It states "Anything that implements me should be able to create a problem using a configuration". That's exactly what we want. Always try to keep your interfaces as clear and concise as possible! (Your previous interface was fine, it's just a tip!) Next, what would an implementation look like? 

There is no real advantage for the variable at this moment. You want to print how much damage is dealt and an health bar that corresponds to the remaining life. if damage == 20: print("You took 20 damage!") Or, even better, use the method. 

The is a pretty solid generic repository itself, so your implementation over it isn't useful at the moment. The only use such a repository would have (I think), is to create an abstraction of the DbContext. You've almost achieved this at the moment. Let me show you what I mean. 

If you add the class containing to your question, I'm pretty sure the reviews would be much more precise to your problem, consider adding it! :) 

What do you save by writing instead of ? Two characters, so basically nothing. It's not easier to understand or better to use short names. 

Finally, you could set your private member to since they don't seem to be modifier inside your controller. 

I'll answer your second question first! The fact that one of your your checkboxes needs to be checked is a validation that is more about your class than one of your checkbox. I mean, individually, a checkbox doesn't need to be checked, but your model requires one of them to be. Which is why I would put the validation attribute on your class instead of on one of the checkbox. Then, to show your error message on your client HTML you would need to set in your view. For your first questions, there a lot of possibles way to do what you did, but your way is fine I believe. I'll propose another one though. I think you should make another that would only contains your checkboxes. A or something that is more appropriate in your context (that I know nothing about). Then you could use reflection to get all checkboxes and check if one is checked. It would look like this : 

Is it much clearer? Nope. What could we do to make it better? Nothing much, right? In such situations, add comments is a good thing to do. Basically, I think you need to think of better variable names and try to make the algorithm more apparent in your code, now it's kind of hidden behind your code. I know this sounds weird, but usually you should be able to read code once or twice and get what the algorithm does. Now, I can't. I know what you're doing because I know what method you employed, but if I was to read this without barely no mathematic background I'd struggle to understand what's happening. 

But wait, there's more! At the moment, we have constant values that define our code rules. 16 characters, groups of 4 and a "-" separator. These values could (should?) be parameters to an object! So let's introduce the class, with a static method, . 

Now, notice something, I wasn't able to see which type was used in your code because of the keyword. is cool, but tools like Resharper indicate they should be used only when you can see which type is used ex : 

Then, this looks weird, what if we could do this in 1 statement. Well, we can. (Also, using is the same as using , I prefer using ) 

By retyping this, I realized you have a constant in your code that isn't a.. . You should really extract it, so it's clear does means. I figured I didn't need to retype all the methods as you probably get my point, but if there's something not clear about the workflow process and you'd like me to write it all, I'll do it! 

I'm not sure about the fact that is . As a client of your code, who am I to say that has a severity of X when you, as the dev, who knows his stuff, said it had a severity of . I think your interface should expose only the getter on . I'm not part of the project but I have a hard time to see a scenario where you would want to the severity of an . Since it is an abstraction, you can't tell how severe it is. (I think) You want to set the severity of an implementation of . If I turn this into code, it would look like this :