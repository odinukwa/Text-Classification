You could make use of something like opencv to find the individual pieces. Afterwards you can crop and save those pieces. This will be a big improvement as you could give it a different image, and it would create individual pieces from it... no more measurement from the user! 

I need cheap GPU's and decided to make a little ebay-scraper to make sure I can buy it at cheap prices. It works and I can search for (any) product to scrape the Title, Price and Shipping cost of that product. But I feel like I haven't done it in a generic way, hence the need to post it here. Thus my question is, could this have been done more generic? 

Any review is welcome! Plus I would be happy if anyone has additional information on how to prevent MiTM attacks. 

Python program to test ideas Below is a little python program I used to test if everything went well: 

Ok first make a function to check if a list is in a sequence and if not return the first element where it is not strictly increasing 

Using a structure like this will improve the code alot, and adding an AI (or other improvements will be easier after this) Avoid working in the global namespace This point is interwoven with dividing the code into functions/classes, see this link as to WHY working in the global namespace is considered bad. Wrap up your code into a guard. This will make your code be runnable from the command line, while also be able to be imported into other scripts 

Admittedly, this is uglier than Mat's Mug's approach, but this is the approach I use because it suits my style and needs a bit more. The benefit here is that you can choose your approach to handling the error. So, for example, handling an error in the routine can be different than handling an error in the routine. I also avoid statements as much as a possibly can. There isn't anything wrong with them when used well, but I try to anticipate errors if I can. On that note, and as others have noted, some of your subroutines need some cleanup. Someone in the RD group recently reminded me of the 'Single Responsibility Principle'. Everything should be responsible for one thing, and in turn, that thing should align with it's own intent. Along these lines, I would argue, that one unique thing should only ever be returned by one owner of sorts. For example: 

We get rid of all of those counter variables (opting instead for i and j which are pretty standard). Our other variables are quite clearly named, and everything is what you would expect. As a result if you (however many years from now) come back to the function to add something new, or if it breaks, you can quickly find the source instead of trying to remember what and were and why you set or to and so on so forth. Again, highly recommend picking up a copy of . The idea of levels of abstraction, functions, classes, etc all can be difficult to understand at first but once you get going your code will become much easier to read. 

Use instead of manually opening and closing Use instead of the structure Improve naming of your variables, PEP8 is a good guideline Use List comprehension at reading input 

Especially if you're new learning Python, I suggest to learn . Support for will be dropped soons since EOL (End Of Life) is just a few years away. It seems silly to learn a language that will be dropped soon. 

Code suggestions I would use a instead of a dictionary, since it is much cleaner looking and easier to use. When to use a namedtuple! Using the above suggestions and adhering PEP8 I get the following. 

When you are overcomplicating stuff things get progressively more difficult and prone to bugs. Shorter most of the time really is better. Now let's break down your code and review: 

Code changes Your could be alot more simplified. Because a normal palindrome is just checking if the word is the same as reversed. Now the same goes for words with punctuation, but we just have to remove them first. When I apply my thinking, I end up with something like this. It might not be iterative but it looks alot shorter/cleaner. I first remove punctuation, with a list comprehension in combination with a check if a letter is in afterwards join the word together and check if it is the same as reversed. 

Your current abstractions don't really add value to an application. Why would I use your class over plain 'ol PDO? Yes, it should, and I'll explain. When you create an object, it should do one thing and one thing only. Your user object should be responsible for keeping track of data about the user. It's an object that represents a single user in your data model. Your user should not be aware of its own means of storage. A user specifically can come from many places. It can come from a register form, it can come from a database, it can come from a migration CSV file containing hundreds of users to be inserted at bulk. As a result, your user should be storage agnostic, it should not care where the data came from, it should just accept it in the constructor, and work with what it's got. 

Other than that, if you're already defining all of the CSS rules in your template engine, why not use HTML to begin with? There's no point in complicating things with yet another syntax. Write valid, proper HTML from start to end, and be done with it. 

PEP8 and Readability When coding it is nice to uphold a standard, it makes your code more readable for others and yourself. In python we have PEP8. Your code has a few PEP8 violations and other readability issues. 

Sorry for the long read, but this was actually quite a difficult challenge. That is why I wanted it to share it with this community. Any review is welcome. 

When writing good functions it's better to have longer descriptive names. Your other function has a way better name, although that could also use some improvement. How to write good function? 

Review Your implementation is quite good, but ofcourse there are always some things that can be improved upon. 

Review Yes the first option would be better as memory might become an issue with really long numbers (say you have a 10 million length number). But that implementation could be improved as well 

You don't need parenthesis around the conditions in your if statements is the same as Use list comprehensions when possible see PEP8#202 Use intersection of sets to get how many elements occur in both tuples If duplicated don't matter (as they do not in your code) it is possible to convert the tuples into and check if the intersection between the sets are (Meaning there is only 1 element that occurs in both) Like @Maarten FabrÃ© suggested 

Also, if you're trying to move to the top or bottom layers, your method will never reach. You should add a check against to not be undefined. 

I wouldn't name my classes like that for anything that goes out in the open. While it sounds cool and is a nice inside joke, the class names are not semantic, hard to remember and not very helpful in general (What's this I see on the source? Where's the actual belt on the page?) Other than that, CSS3s has some very good browser support, I suggest you try it out instead of doing manual and imperfect accuracy calculation. Alternatively, you can use LESS or SASS like the other answer states. 

And have the PHP handle the serving of the requested file. Getting Fancy You can even use and to rewrite URLs like this: 

If a object represents a single User, you would want one instance per actual user you are working with in the application. For example, say your user might have friends: 

And that last snippet the only thing that's specific to your current DOM, so when your DOM changes, you don't need to change all of your code, just the bit that interacts with it. Additional notes for future snippets (just general things I've noticed): 

Initial Notes The first thing that struck me about your code was that you literally have no variable declarations. Lines like : 

The only main difference is that now we are using an object instead of a type, and we must manually copy the object any time we want to create a new one (whereas, with the Type, we just changed the field). 

Option Explicit I cannot stress the importance of this being at the top of ALL of your code modules. What does is it causes a compile-time error when a variable is undeclared. This prevents run-time errors when you try to use variables that aren't set properly, and it will save you countless hours of debugging time. Go To Tools > Options Editor > Require Variable Declaration. You'll thank yourself later. Variable Naming Not to be a jerk here, but your variable names are horrible and difficult to understand. You have rng, rng2, rg, q, s, r, cell and the worst part is that you don't need all of them. I declared four variables total (and one of those you didnt even have a variable for, but you did need). Here's a tip, make sure your variables make sense. You should be able to look at them and have a pretty good idea of what they do. is easy to understand: it is the range we are searching in. is just as easy to understand: it is the cell we are currently searching in. Finally, , you guessed it, is the cell we found using our criteria. It is pretty much bulletproof when you start to code like this (actually, not really. You'll learn that bulletproof coding takes a lot more work than a handful of good variables.) and it makes your code easy to maintain. Additionally, there is no need to declare two variables if you need one. In other words, if is used only for the first loop, and never needed after that, I dont have to make a for the second loop. I can just use . General Names Just as Variables need good names, so do subroutines. It is all too easy to take the that the recorder gives us, and to leave it this way. When you have larger projects, and become undistinguishable, and god forbid you have a and as well. Name everything. That's pretty much my mantra. From Worksheets to Tables, and PivotTables, and Workbooks, to code modules, subs, functions, etc., give it a proper name. The sooner you get in the habit, the more time you'll save. Implicit Object References You'll likely hear this one a lot, so it is important to learn. Whenever you are working on an object, you must consider the scope of that object. While looks fine to the untrained eye, anyone worth their salt in the VBA community will point out that it is a unqualified Range reference. Even worse, is if we have and one step further is this nasty bit: 

Why all these temp variables? They are never used, and since the original list is not altered. It makes no sense to use a temp variable. Just call 

This post is form a long time ago, but I scrolled pas it, and I think it could use some improvements. I will try to stay in since that is what you used. Review 

Make it work for both and . use a body. Added a dictionary to map the (no more need for an block) According to the python style guide, functions and variables should be 

Your double while loop looks silly to me, I think it be more concise to use 1 loop and use a structure within 

Try it out for yourself to see the difference, and if unclear what is going on you can always ask me 

looks clunky as hell! How can this be made beautifull again? Is my general logic ok, or should I have divided the problem in easier to comprehend functions? Any stylistic review is welcome too. 

To learn some PowerShell I made a tool, I've made before in bash. It pings the subnet for arp values and checks if there is no weird behaviour. 

Business rule validation - "User chose this city and this country, does it make sense?" or "User said he was born in 2012, does it make sense?" Data-integrity validation - "User already exists in the database" or "Username should contain between 3-20 characters". 

What's wrong with your sanitizing Sanitizing is an important job of the server. It makes sure nothing nasty comes in and affects what your users are seeing/experiencing. Sanitizing is done as late as possible, for a simple reason. When the username is entered to the database, you shouldn't make assumptions on who is going to use that username. It could be your application later on, it could be an API you may or may not choose to provide one day, it could be a desktop application or a mobile application which does not care for HTML formatting. When you extract that value from the database and are about to put it in HTML, that's the point where you should escape for HTML using . Maybe at a different point you may want to output it to a JSON response for an API, in which case, is good, but not as much. 

Tests The description is a rather simple one, when pipes are leaking then things become interesting. So here are a few Testcases if you want to have a go with this. 

First of all, welcome to CodeReview! I'd like to know what the common best practices are when working on a project 

You can first fill the list with chars, that will work as non guessed. If the user input letter is in the word to guess. You can loop over the string with and fill the place in the list where letter matches. As a return you can check if they are all filled(not chars) nicely with the keyword 

I created a new for each file. To have better accuracy I should have merged the frequencies for each file to a new , for instance . And once all files a processed try to break the text. My is redundant, I don't do anything with the frequencies. I could have just return the to yield the same results. 

You should remove the from the second loop, this will save some time. You only have to compile once per word in the wordlist Regex is really slow, you could use the keyword instead however there are some tricks/risks involved with this approach 

This is easily handled with a simple function that checks for a potential error instead of triggering an error. Code first, and then an explanation: 

If is a for example, you will get a error when trying to assign to (the names here are troubling as well). Let's explicitly raise an error if someone passes a value we don't currently support: 

That was the first step I took in making your code make a little bit more sense. By extracting the two loops, and the dimension check, the main routine becomes much cleaner, and gets to rely on a few s to do the work it needs to do. The beauty of this is that your code now explicitly says what it is doing (anyone could read the code, regardless of whether they have been coding for days or years). The next step I took was explicitly checking for the supported types. For example: 

Rubberduck One of the frequent contributors, Mat's Mug, is working on a project called Rubberduck. Him and his team have made it into an amazing tool that is capable of Code Inspections, Refactoring, some better UI elements, and some other really cool stuff. I strongly suggest checking it out here: $URL$ . If you have any questions, please don't hesitate to ask. This is a lot to take in at once, but I would be doing you a disservice if I turned a blind eye to common mistakes.