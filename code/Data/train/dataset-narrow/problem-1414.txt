Oh dear. It seems I can create three threads before any threads have even started running. It is not required for the JVM to start running your thread when you create it. Thus, you can exceed your max threads here: 

Gives back "-". ("-1") works normally. The "-0" case could return 0, or minus zero (that's a thing) if you felt like it. "--1" is obviously parse error. 

but right now, there's a typo in your attributes. is usually spelled in english. Were you to notice this typo one day and "fix" it, half your code would be pointing to and half your code would be pointing to . By using enums, you can validate your attributes with syntax highlighting. It's also easier to say that a helmet uses rather than and hope you got it right (especially if you go in the direction of, say, morrowind, with left gauntlet and right pauldron and armor sets of 10+ pieces in general). 

Because we can't do this without making access public, the second alternative is making a method that will allow you to add a value. 

It reads easily, but that's by virtue of duplication. Duplication makes it super easy to see what you're doing - because all the code on the screen does the same thing. This isn't really a good point though, because if you make 1 change in one of the values (let's say the user has to enter 9 to exit the program, rather than 0) then the handling of the exit would look just like printing any other string. This would be bad; a reader would think "okay, and more of the same follows" when there's actually a twist. Other than that, it's pretty readable, it could be better. Let's take a look at another bit of code, where the power of readability is supposed to shine through: 

It actually makes no sense. Turns out that you're actually asking the user if they're going be working out. Well, in that case... ... I think you have two options here. One would be to not ask the user if they're going to be working out at all - that way the check can go - imagine a gym - someone walks in the door, and the gym attendant says... "Hi, are you going to be working out here today?" Now, mind you, this is not just any person, right. It's someone with a gym membership. In workout clothing. No, he's just hear to look around- of course he's here for a workout, why else would he show up at the Gym? If you're gonna be building a logging app or a converter or a calculator or a ... you do not start with "Hello do you want to use this app today". The user ALREADY started the program. ... Anyway, you could also rename the function to or something like that. Nothing wrong with descriptive function names. If they get too long, consider simplifying what the function has to do. Moving on... 

For a large, multi-threaded video processing application, I need to manage various child processes. I need to monitor their stdout and stderr. My key concerns: 

Additionally, you seem to have a blank line in between each line of code. I don't know whether this is due to your line endings (I don't think so). But consider using blank lines to indicate a semantic cohesion of sorts - group related lines together. Compare the following: 

Those are the main problems. The second one is fatal, however; this is broken code. Especially with the comment "// Not working Correctly string still has duplicate characters." 

At some point, you're chaining too many function calls. If you're making a builder of sorts, then chaining is the way to go. But in this case, you really could do with temporarily storing the result of some things. This is the worst example - you could store in a separate variable here. 

You can remove the fields and just declare the variables in the function. There's no need for class variables here. You can also remove the check, because that's automatically checked by the for loop. On the performance end, you could prepare and before going into the loop. 

One question remains. Those 8 rules, where do they go? This one I don't have good argumentation for. It just goes in the same location as the cell iteration. It fits easiest there. And since Ocean already knows the Cells... I fit it in Ocean. Ocean gains a method "simulateTimestep", and the result is that the content of all the Cells change. I said before that you need 2 grids to make a timestep work. Yet I only have one. What happened? It turns out that the reason why you need two grids is because if the values change, you might get incorrect results. And you'll see that I do have two sets of values; one as the currently active grid, and one as the set of values I got back from iterating the cells during a timestep. With all that said about your design, let's take a look at your code. 

I think you should either wrap a in your s, or alter the message to contain "Null is not allowed!". Alternatively, take a look at : It validates for not null and allows you to pass a specific message. I like the rest of the code. I read it thoroughly; All I'm wondering about is whether "over-riding" should be "overriding" instead. 

Sorting Algorithm Your sorting algorithm is fine. Note that as pointed out in the other answers, improvements could be made to it to speed it up. As it is right now, however, it does produce good results. However, uses a as seed. I suggest changing to . Keep in mind that you should use a varying seed if you want to implement some sort of function. An optimization: will return the removed element. This means you can replace 

That part should really be a separate function. You're doing all that effort just to get . Similarily, doesn't need to be a local variable, as you're never doing anything to it. 

Welcome to the hell that never ends. Just kidding. But please don't make TVs that automatically turn on an alarm to wake you up in the morning. I have alarm clocks for that, which are beating resistant. Method naming 

You should set to so you can't remove it twice (if that matters), plus it allows the GC to clean up the polyline. 

This is unmaintainable. You've got dead code, comments explaining the obvious, lack of brackets... You should remove the dead code. You should clear away the comments that say obvious things like "and also check to see if you have not found a node either less than or equal to what you are looking for". Replace them with why you are doing what you are doing. You should add braces to clarify the code. 

should be "And so on, up to a maximum (...)" Lastly, as said by others already in the comments, this style of yours is hard to maintain. It's also pretty annoying to read, in my opinion. Editing of text prefixed with a lot of slashes like that is harder than it would be without the slashes, and if you're in the business of habitually revising your comments due to changes made, the slashes lead to a lot of busy work. If you need a visual indicator where your functions begin, there's a few options: 

Since one of your threads is responsible for starting new threads, that can be the first thread, saving you 1 more thread: 

It's just a check for whether all the cards are matched. (There's a sneaky shortcut here; with I check whether the game has been initialized yet.) Okay, what about then? That one is a bit bigger. 

distance goes in! Numbers come out! It makes no sense! Also, are those meters, kilometers, miles, yards, feet, inches... 

When you resize the map, you rehash all the entries, even although their values didn't change. Store the calculated hash in the item. 

For the rest, it's better to take a separate approach because these functions do different things. Try for the natures. 

I merged the "second card already picked" and "can't pick same card" messages because technically you're picking a card that's already picked. 

can be assigned to its own variable. If you wanted to stream the while loop, I suppose you could split a version of the number via and then calculate the value for each digit individually, then summing the result via the function. I don't know whether that'd qualify as "more elegant", though. You would get rid of and as variables by doing that. 

Nice. It just got wondrously clean. Sadly, computers are grumpy things that want everything specified, so we'll have to explain our human-readable English to them. 

You would ignore it. Now, it will make a new selection instead, which supposedly ends at . So past EOF. This can be a feature ("Your comment goes past EOF!") or something that will break some asserts. 

You use it as both the constant AND the value, which then changes. The name loses a bit of its meaning as well in the statement - it's no longer clear what it's for. Did you just raise the initial xp needed to level up, or the experience to the next level up? Better would be setting in the constructor. That way your variable name expresses what it contains.