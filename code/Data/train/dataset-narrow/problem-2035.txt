Assuming you're starting at on the second sheet, you can fill the following formula down column A to get the desired results. 

It only takes a contiguous range as an argument. It concatenates the values in order from left to right (and top to bottom). 

You can use and pretty efficiently here. Where are the values to compare against and is the data entry cell: 

In the first row of your new table, under , enter a direct reference to the first in your data. In your example, you would enter where A2 is the first name listed in your data. In the example screenshot I've provided below, this formula goes in . All following formulas will follow the layout used in the screenshot. You will of course have to update all range references to match your sheet(s). In the cell below this, enter the following formula: This basically checks how many rows there should be for the name listed above (in ), and if the number of rows already in your new table matches this, then it moves on to the next name. If not, another row for the name above will be added. Fill this formula down as far as you need to (until it returns a 0 instead of a name). In the first row under enter the following formula and fill down. In the first row under , paste the following formula into the formula bar and press Ctrl+Shift+Enter. This is an array formula; if entered correctly the formula will appear in the formula bar enclosed in curly brackets. Fill this formula down your table (each instance should likewise appear in curly brackets). Similarly, in the first row under , paste the following formula into the formula bar and enter it as an array formula (by pressing Ctrl+Shift+Enter). Fill down, and this should complete your table. 

This function will allow you to create comma-separated lists to summarize the tag data you have. Step 2: In a worksheet, enter in a cell (H2 in the example below) the tag you want to search for. In the cell to the right, enter the following formula by pressing Ctrl+Shift+Enter. 

The business inside the function is just a fancy way of looking only at as many columns as the number of sessions (in ) for that person. 

If the data in the first column never contains a space, you can use a regular expression find and replace to get what you want. In regular expression mode, search for: 

This code will change the font color to red of any cell you edit the value. It will not change the font color if you only change the format of a cell. Also, it will not automatically change the font color of dependent cells. The latter could be done, but I'll leave that to you if you want that behavior. This code also creates a hidden Change Log sheet and records the address and original font color of the cell that has been changed. Note that this code only works for changes in that specific sheet. If you want to track changes in the entire workbook, you can paste this same code in the worksheet module for each sheet. The code to rollback any highlighting must be placed in a separate module. In the VBA editor, go to Insert >> Module. Paste the following code into the new module. 

No, there's no way to declare a variable for a cell reference inside a formula. You just have to refer to the cell each time you need to reference its value. As for simplifying your age calculation formula, you might try the following: 

This formula, if the aforementioned assumption is true, will return the matching UPC for the appropriate article Name and Size. This formula can be filled across the row and down the column for other sizes and articles. Breaking down the formula: The heavy lifting is done by the function. It checks each row on Sheet 2 for the matching Name and size. For each row, if a match is found, the row number is added. If no match is found, it adds 0. If the assumption that there is only one row that will match both criteria is true, then this will return the row number of the matching entry. The function then returns the value from the UPC column at the row number returned by . 

On another sheet, create the framework for your matrix. Create column labels by inserting the first date and then filling over all the way to your end date. You can get your row labels by doing an advanced filter for unique records on the IDs in your table. In the top left cell of your matrix (B3 in this example), enter the following formula. 'Raw' is the name of the sheet with your original data. 

This can be done by using a little linear algebra and Excel's matrix functions. First, create an augmented matrix that represents your equations on a worksheet. Since you want to solve for three variables, select 3 cells in a column where you want your results to be returned. Without changing the selection, type the following formula: 

You can do this with keyboard commands. To enter current date: Ctrl + ; To enter current time: Ctrl + Shift + ; 

I think rewording your conditions may help you see where you've gone wrong. Think of it this way instead: 

You can use to do conditional counts. While the formula is a little harder to understand than a , it allows you way more flexibility in setting conditions. Here is a sample formula where the table is in A1:D100. 

You can add a couple of fields to your data and then generate a pivot table to get the counts. First, add a Day of the Week () field. To get use the formula below, where column contains the date. 

Breaking it down: is the end time in your format. is the start time in your format. Replacing these values with and will help clarify what the formula is doing. 

Press Alt+F11 to open the VBA editor window. There you can browse for any modules that contain VBA code. 

In Excel the solution is to use a reference to the entire column. While Excel has a limit on the number of rows and columns a sheet can have, the maximum number is as close to infinite as you're going to get. For your example, you could use the following: 

Then, apply a filter to the table and sort by the new column Z to A. Filter for rows with value "Delete". 

This uses to count the rows for each country that have a greater value than the current row. Only the max row(s) will return the value. 

I can't be sure about your Applies To range without seeing your data (though it should certainly contain the cell that will be highlighted), but you need to change the Formula to 

Here's an ugly solution. Just the result of the formula you have in the same conditional array you passed to the function. Then pass the resulting index number to the function. 

Press F5. Click in the Go To dialog that pops up. Select and click . This will select all the blank cells in your data. 

Barry houdini's identified the problem: for your table, you need a numeric lookup value, but the function returns text. Another way to fix your formula is to wrap the lookup value in a function. This will transform the text inside it to a numeric value. 

You have the right idea with , but perhaps easier to set up would be to use . For your specific example, you could use the following to generate the array . 

I believe your imported data includes non-breaking spaces instead of standard spaces. Hence, the formula does not work. Instead of using the space bar to type the in the SUBSTITUTE formula, try a non-breaking space. You can select this in the Character Map or use keystroke Alt+0160. EDIT: Since substituting regular spaces successfully removed the leading and trailing spaces, you should use nested Substitute formulas: one to sub the regular spaces and one to remove the no-break spaces. 

For original data in , you can use the following: In enter the following array formula by pasting into the formula bar and pressing Ctrl+Shift+Enter: 

It would make more sense to have two fields instead of just . You need something like and . would be a fixed number, the total number of sessions the person must do. would be a formula that subtracts the listed received sessions from the value in . If is in column B and is in column C, the formula you need would be something like: 

First, is calculated using the worksheet function . This works because your data is contiguous and starts at row 1. Next is the for loop which goes from 1 to by 5s -- so, for the first iteration , for the second iteration , for the third iteration , and so on. The key to selecting the right data is using the method of the object. This method allows you to shift the range a specified number of rows and columns. You want to shift the selection to be copied down 5 rows each iteration. An offset of gives you what you want. Finally, you have to use to adjust the output down 1 row for each iteration. Since is stepping in 5s, and you don't want your output to be spaced 5 rows apart, you must scale down by 1/5 as the offset. Here gives you the row offset you need. Array processing method: Here's another way to approach the same problem that does not use the copy/paste method. It performs the transformation on VBA arrays instead of working directly on the worksheet. This is much more efficient, and for large data, there will be a very noticeable difference in run time. 

The range syntax you're using doesn't do what you think it does. Consider the case where you have an identity matrix in . The syntax does not refer to the matrix in A1:C3 with the second and third column swapped. It simply refers to . Excel or LibreOffice or whatever other spreadsheet program sees this range definition and just looks for the top-left and bottom-right corners of the range in all that mess. It doesn't take order into account. It's just defining a rectangular range. You can check this by putting the identity matrix in and the matrix with swapped second and third columns in . Check the determinants. 

This formula will return for the rows you want to keep, i.e., with the second highest value for duplicate names, and any non-duplicate names (like in my example below). If by chance you DON'T want to keep non-duplicate rows, you can use the following formula instead. 

An example: The parameters of two normal random variables X and Y are given. The heat map below shows the value of the joint density function at integer values of X and Y from 0 to 10. The formula used to fill the heat map is 

So if you want to find the average of each data set using the indirect reference in , you can use the following fill-able formula (in in this example): 

Add a column to your table with the following formula filled down (adjust ranges to match your sheet): 

If the file path is the same for each file, just use RIGHT together with LEN and FIND, like this: =RIGHT(A1,LEN(A1)-FIND("uploads/",A1)-LEN("uploads/")+1) where A1 is the cell with the file path. If all files don't have the same path, then you have to go by something else. Maybe all the files are .jpg (?) or don't have periods except for before the file extension. 

Here is a VBA solution. Just paste the following code into a module (Press Alt+F11 and go to >> ). Select your list of tweets and execute (by pressing F5 from the VBA Editor window). 

There is a Split function in VBA that would help you with your plan, but there is no SPLIT formula. However, I suggest using an Excel formula instead. A couple of cases: 

If you manually enter #2 above #1 and then select both cells, you can grab the fill handle and fill upward. 

I've encountered this problem several times while programming user forms. Unfortunately, I never found a way to get around creating a trigger for each object individually. However, I did think to use Python to print out the actual code that I could then paste into the userform VBA. No need for the tedious number changing this way. (I suppose you could do this in VBA as well, but good luck doing it in one line.) The Python loop below would work for the example you posted. 

If you are starting in a different row, change the sub-string to match the value to 1 in the first entry. For example, if you start in A2 instead, you would use the following. 

The key bit is the function. The format specified in the function includes the condition that if the bound is -1, 0, or 1, it is represented to one decimal place. Otherwise the bound is represented to two decimal places. The test for this condition is , which tests whether the number is an integer or not (if true, then integer, otherwise no). Sample output: