That indeed is a conflict. If the user wants to log in a hundred times: let him do that. Every time he does, he gets a valid token. End of story. If a user doesn't exist, return a and if the login failed return . That's why they were invented: to signal, that a ressource isn't there and you are unauthorized to do that operation, you wanted. And only, when there is something syntactically wrong with a request you should answer with . This is not about semantics. So, if I am asking you: »Do you live on the moon?« this is a syntactically correct question. Your answer »Can you repeat the question? - I did not understand, what you meant.« is misleading. That's why this 

And the Class Region could be refactored to a simple Enum (as it goes along with your further domainlogic). 

That is not only handy, but cool B-) Besides it is nearly as readable as and not so noisy like the typical string concatenation and the risk of typos is really low. 

you could "inject" a Dao via "constructor injection". If you take step (1) you will have to split your concerns: a) you need an object to represent the report itself and b) you need an object, which creates different kinds of reports. There will be the right place to inject your DAO. 3) What are these details about? 

»If the book is or the book is blank throw an « Btw. Why did you you use the negative from: instead of just ? 

It's been a while, since I've been on the ASP-Road, but I hope to provide you some help: 1) Read the Documentation of DataTables, especially the paragraph about Ajax source data. There you learn how to use Datatables with server generated data. Serverside processing might be of interest too. 2) You are free to use a html-skeleton (as you did), but you could use Custom Column Definitions 3) In order to get the Datatables Plugin to work you need a) an Element in your DOM, where the Datatable can hook on: does that; and b) you need data to display. There are two basic formats: I) You have loose data, which is represented as an of . Each representing a Row, which consists of an of columns as in this or this example. II) You have structured data, which comes as as in this example So when I get your example right: 

That's okay. You could improve on your current design by these minor changes: 1) If you know, that the binaries are in blocks of 8 chars each, you could simply omit filtering the noise and incement by instead of characters. 2) You do not need to split the string into an array. does, what need. 

[ln 179] Folder !== Directory. Be consistent throughout: if this is a setting that a user needs to understand (hence why you used Folder instead of Directory), convert it to Directory code-side. 

Running Code Analysis in Visual Studio on this code throws up a few issues, with which I shall combine some of my own remarks. Program.cs 

Why is this here? If it's because you're waiting for the client to connect, this is a bad idea because you don't know if the client might actually take longer than 1 second to connect. Instead, you should execute the next line inside the event handler: 

What is this verb "Enqueue"? Method names of this format should be verb-object, as in "do this to this thing". If simply adds the passed object to a queue, the correct name is . 

Don't prefix your names like that. If you're adding a prefix, it should still follow all the rules of variable naming for C#. For private fields, variables are named in , with the underscore before it. Public properties are named in . So, you can rename a number of variables, for example should be . Server.cs I do believe I've found an error here. 

[ln 215] ? Seems like one list to me. Rename it; again, consider the point above that it should be . 

Did you just... catch a generic exception? And ignore it? You need to work out what exceptions to catch and what to do with them. In this case, you're most likely to get a or , assuming your arguments are constructed properly so you don't get an or . So instead of catching a generic exception, catch both of those and tell someone about them. Something's gone wrong and this program doesn't work, I want to know why. 

String replacement If you've got a lot of replacements, or you plan on adding more, try an extensible solution instead of all the calls: 

What sorcery is this? You've conjured a string from thin air! Where did that come from? You should avoid magic strings where possible, instead assigning them to a or of commonly used phrases within your application. The same can be said for in the call: what is 1987 and where did it come from? Assign it to a resource list. Client.cs Code Analysis Says: Implement correctly. Your class nominally implements , but you've only written half the implementation. You also need a method, called by . If called as , it should also clean up managed resources; if it's you should only clean up your class' resources. You also need to tell the garbage collector not to run the finalizer on your class because you've already implemented . In this case there's no difference that I can see, so a few simple modifications: 

there should be no reference to a console at all. 5) Perhaps it makes sense to outsource the writing of a report to a report writing class. There you have a List of Writer which take a Report as an input and produce the wanted output. 

I would use some MV* library for this kind of task. Maybe you have a look at Backbone. A small library (about 7k in production) with lots of nice functionality for those kinds of tasks. 1) You have representing you data as a proper javascript object. Each model is instantiated with: 

This gives you nothing in terms of performance. It would be optimized away by the browser. 2) Chain-calling 

I can't find any reason for your global variable. As far as I can see, it is declared and overridden in the success handler of your ajax request. So why not declearing it inside the success handler? Next: Why didn't you use a parameter in 

is in fact a model with a key called "content" (e.g. {content:"blah!"}), which is used to render the template, so that <%= content %> is substituted with the actual content. And many more stuff to discover. Referring to your problem - you could abstract your problem with backbone like the following: Every tab you need to display is a view to which belongs a template to determine its html as well as a model, which represents the content of the tab. You could embed each tab in another view, such that you have one embracing view to control the whole tabbing system and nesting views, which represent each individual tab. You could write a custom show() method to show an individual tab and a method which coordinates which of the tabs is shown and which should be hidden. So instead of doing the annoying work yourself, it may be a good idea to use a library to help. Some places to start (besides the official API and documentation): $URL$ $URL$ $URL$ $URL$ 

Besides what Flambino wrote I have a small remark to (3): Why are you storing unnecessary information in the DOM? I would prefer a solution, where you use a simple variable to keep track of whether the button performs an action or not. So you wouldn't have to update the DOM twice for nada. The DOM is a bad place for storing the state of your application. 

Again: These are very poor specifications! Why on earth do you have to return a to signal, that there was no error, when the previous sentence clearly states, you have to throw an if anything goes wrong? And more: Who cares for a return-value? The only thing, which would make any sense, would be returning some kind of id in a persistence-context or for heavens sake the total number of books, but not a boolean. I am unhappy with that implementation. Of course, your has a -Method and you are checking if the book is literaly a blank book. But doing it this way: 

can just be , because range starts at 0 by default. The syntax is essentially - the only mandatory param is . Filename parsing If you want to parse filenames by yourself rather than using a library, then while your current solution: 

[ln 30-31] Style choice: I recommend using around conditionals, even if they're only one line - because if you update them and make them more than one line and forget to add the brackets... exceptions. Also, your indents are off here. Indent the first line of the snippet above by one more space. 

At the moment, I'm updating the record if there's already a vote by this user on this post, but I wonder if that's the most efficient strategy. Would destroying the old row and creating a new record be faster? I'd particularly appreciate efficiency comments - at the moment, this is a very server heavy action, which I'd like to minimise. 

and its equivalent on the next line, is redundant: you should only use when you're passing in a delegate, and even then not always. Rewrite those two lines: 

Where is declared? I can't find a field or property called in this class. If is a type, it needs a variable identifier after it; if it's a declaration and identifier, it needs a type before it. Were you trying to assign to ? I stand corrected: the property concerned does exist. Naming - the same points apply here as to Client. 

ServerManager.cs This class is generally good, apart from naming. Rename your variables here and you're OK on this class. 

[ln 60] Single responsibility: if 's purpose is to get news, it shouldn't also be dealing with notifying the user if there is none. Make this method return if there is no news to be had because of the , and do the check in the UI code [ln 55]: 

(A quick note on vote types: the column has type , and the possible values are 0 (upvote) or 1 (downvote)). 

I've written a userscript that pops up a dialog before you take a moderation action (closing, deleting) with some pro-forma comments, so that you can add one of those before you cast your vote. I'm pretty happy with how I wrote it, but what's clear to me is unlikely to be so to others. Is there anything in this that I could have "phrased" better, or that could be optimized more? Comments on style (or, for that matter, anything else) are also welcome. It also occurs to me that this isn't as extensible as it could be: it's not easy to add new comments. Is there anything I could do to facilitate this? I've also put this code in a gist, if you want to see it there.