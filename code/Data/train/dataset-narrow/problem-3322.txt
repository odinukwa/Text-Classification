It seems your question for getting your ip address has been solved, but that there's still a question re "looping" this command. Here's a suggestion for that bit: Add the command to your , and let run it for you at any interval you specify. Here are the steps from your RPi terminal: 

I have an RPi 3B+ on which WiFi is enabled, and the Ethernet port is jacked into my switch. Here's what I see as output from the above: 

Use ; it's designed for this. Trying to accomplish your objective in is like... I don't know, swatting flies with a sledgehammer? But that's strictly your choice of course. is really quite easy to use, and the documentation is on your system: 

The pictures and text on the eBay page you have linked imply that the relay you have bought should work for your application. I say that because they do claim (at least) that the product is set up for use with Raspberry Pi and Arduino; the pictures show what appears to be peripheral circuitry that might be level shifters to take the 3.3v output at your GPIO pins, and drive the relay. If that's the case, you should be able to control your mag lock without a lot of fuss. You are correct that the RPi won't supply the 12 v you need for the mag lock. You'll need to supply 12 VDC... it won't come directly from "the wall" as "wall outlets" provide 220v/50 Hz AC (or 120v/60 Hz in the US). However, a standard "wall wart" rated at 12 vdc that plugs into the "the wall" will supply the power you need (probably what you meant, just making sure). The current required from your "wall wart" will likely not be more than 1-2 amps, but you should be able to get that specification from your mag lock vendor. The hookup between the RPi, your relay board and mag lock are shown in the diagram below. Let me know if you have questions, or if anything is unclear. One final suggestion: Since the specs on the relay are so "iffy", you may want to control an LED before you connect the mag lock. Relays can have an "inductive kick" when they're disconnected, and draw considerable inrush current when they're energized. Assuming your "relay board" is really that, the designer will have made provisions for these things. If after reviewing the documentation for the relay board, you're still nervous about that, re-post here, and we'll come up with a simple "protective circuit" to keep your RPi out of harm's way. 

A Chromebook supposedly has a shell in "developer mode" :) If you can get to that (i.e. get the prompt), enter this at the prompt: 

Your doorbell switch will most likely have two wires connected to it. One of those wires will go to the GPIO pin; the other will be connected to GROUND on your RPi. But don't connect anything just yet! Before you connect these wires to your RPi, you'll need to disconnect the source of the 3.51v power from your doorbell switch. Verify this by checking that the voltage doesn't change when the button is pressed. Then using your meter in "measure resistance mode", verify that the resistance goes from (near) infinite to 0 (near zero) when the doorbell switch is pressed. Now you're ready to connect your doorbell wiring to your RPi. One of the two doorbell wires (doesn't matter which one if you've followed Step 2.) to Ground on your RPi. Connect the other wire to a GPIO pin with a "pullup resistor" (Remember that the Raspberry Pi has built-in pull-up and pull-down resistors which can be enabled in software.). This will put a "logic high" or approx. 3.3v on that pin. What you will see is that when someone pushes your doorbell, the voltage on that GPIO pin goes from 3.3v to 0v; i.e. the GPIO pin has been "pulled down"! Once you've verified the hardware behaves correctly, you can now write code to do something when that event has been detected. 

When asked if you want to reboot, answer . Hope this helps; I can't test it on my RPi because it's headless. 

It's all here, dude - a complete walk-through for setting up WiFI on your Pi - and it works for Pi3. Work through this, and come back with specific questions. 

@CoderMike's suggestion is a good one, but if it's a recently-purchased unit, I'd return it and try another one. 

The answer to your question is, "Yes, it is possible to SSH from my laptop to the Raspberry Pi without any connection to the internet, solely using the two devices and the dongle." In general, what you need to set up is called a (other names are used as well). This setup has been documented many times, so it would probably be redundant to do so here, but if you'll Google you will find many how-to guides. Here's one that looks reasonable. You'll need to substitute the device name of the Adafruit wifi dongle for , and no doubt make some other adjustments, but this will get you close. Try this, and if you hit any barriers, edit your question here to request help on specific points. 

Hope that helps get you started. We'll look forward to hearing how you get on with this. Please issue follow-up posts if you need help with any details. 

You should use Schottky diodes, and the ones I've chosen are not optimum. That drill is left for the reader. Due to the diode's forward voltage drop, the USB will only be able to deliver about 4.5 volts - maybe 4.7 volts if you find a good Schottky. 

Wrt the OCR part, may be what you need. It's available in a Python wrapper, and should run on RPi. Not sure what you mean by , but get the OCR working, and re-post this part of the question when you've a clearer idea of where you're going. 

scan for available wifi nets: edit your file to reflect the SSID name and password for the network you're authorized to use reboot & run again to verify 

Again, if you'll use the "schematic tool" to draw a simple sketch of your power circuitry, we can get into more details if necessary. 

Weighing water doesn't sound like the "right way" somehow. I noticed after posting my comment, that you're using something called the . I looked it up, and it says you can "Analyze a deviceâ€™s real-time and historical power consumption." Without knowing precisely what that means, I feel reasonably certain that you could do something like this pseudo-code: 

Assuming you already have the MAC addresses of the host(s) you want to , you don't need at all. There are two packages available on RPi that will send the required WoL "magic packet" to the host(s) you choose: is one, and the other one has the unlikely name of :) Which one is best? My preference is because it doesn't require privileges to run (no required). You may install them both, and determine your own preferences: 

And so, for this case, the IP address of your RPi Zero is Hope that helps... this code was executed on my MacBook, not on a Chromebook, so YMMV. 

With respect to your "synchronization" requirement: In the absence of any details it would seem to be a waste of time and bandwidth to propose any "thorough" approaches... the "details" I refer to are, for example, whether or not your units are connected(!). And if not connected, what is the distance between your units? But, I'll offer two items for your consideration: 

GPS is a straightforward solution for obtaining accurate time. The BU-353 is an often-used receiver in RPi projects, and there is a lot of "how-to" guidance available for using it with Raspbian. Once you've got your GPS receiver, you'll need to install some software... this should do it: 

the crontab will be opened in your chosen editor (default is nano) Add a line to the end of your crontab file that looks like this: 

Try this in your crontab file: I've found that the command has gotten all buggered up in ; I think because of some fuzziness at RPi.org If all your shell file does is mount the drive, this will do it. If there are other tasks in your shell script, run it after you've mounted the drive as follows: If it doesn't execute successfully, you'll get the stderr output in the file