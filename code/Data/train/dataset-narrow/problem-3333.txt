It is one of those mini dongles and its plugged directly into the Pi's USB port. I have the Pi powered by GPIO 2A and I removed the USB fuses. The USB are powered directly by the 5V rail from the GPIO pins so it can't be power problem. This dongle does work in Winblows very well even at 30% 

EaseUS partition master shows a much better list and understands that file systems used. Right click and delete the partitions. You can create new partitions too and apply everything and you will have the whole SD card back to use in Windows or if you want to burn another image to the card. 

The time stamp shgould be a unique number generated on the Pi that is never repeated but you can generate the number on your server based on the information you know about the Pi. Like Google authenticator or some algorithm that generates unique number for that Pi only. Now you can generate a private key for each RPI, keep it on the Pi and on your Secure server. Keep all the data on the secure server. Everytime a request comes in you compare the HASH from the Pi on the Server. If it matches it means the origin is unique. The only problem is that if somebody steals the SD card they have access to the Private key and your unqiue number generator. So they might compromise that single Pi without you knowing, but the rest will be Fine. That verifies the origin, based on the hash of all the hardware serials you are using. Then if you embed encrypted data you know its from that Pi, and its not been tampered with and you can unencrypted and trust it. As long as both devices are in a secure place and cannot be accessed by anybody this is pretty solid for now. You should read up about DRM used in games or a technique called perfect forward encryption. 

For some reason disabling power management at compile time and at runtime, through still does not result in the same behavior. In you can find the following code block: 

Feel free to take a look at my qemu enabled kernel: $URL$ In the commit messages you can find detailed descriptions on what and how things were changed. Most of it was based on this article: $URL$ 

Optionally without the part. If it does you should find out how to make that permanent. The Arch wiki may be of help: $URL$ 

There is now also an X-less image by the foundation named : $URL$ And if you want an installer which installs only a minimal system, there's also the Raspbian UnAttended Netinstaller 

This will send stderr (fd 2) to stdout (fd 1) and therefor ends up in your custom log file. Note that is cleared on reboot and you'd thus lose any files stored there, but in this case that may not be an issue. The last suggestion I have is to use FULL paths in your commands. While developing I'd add so that your is send to stdout and that makes it easy to spot errors or wrong assumptions in your code. , and are in and that was not in the of the 'cron'-user. Adding a at the beginning of the script fixed that. But I actually prefer to just use the full paths in my code and would thus have used , and . 

You can add a 120Ohm (or combination to make 120Ohm) resistor between and This will prevent reset completely. This is the least invasive as other solutions require either remove a resistor or capacitor from the board, it complicates uploads. Do not keep the resistor if you are programming. Remove it. 

What the guy explains is that you can connect +3.3v to PIN 2 or 3 it does not matter because internally they are connected. This is a sensing PIN for the Wii. Pin 1 is SDA and PIN4 SCL Another thing is that the Pi runs at 5Volts and this WiiChuck at 3.3Volts. (But I think some other ones run at 5Volt - I saw some a few with 5V markings) Any way even if you are powering the Pi on the GPIO 5v pin and then the Nunchuck on the GPIO 3v3 you might have a power limitation problem on the 3v3 rail. A computer PSU will have 3v3 on the Orange cable and 5v0 on the Red cable. Keep yellow 12v0 away form the Pi. Connect the GND direct to the PSU as GND over current can also cause issues. Double check you do not have a short somewhere or that the pins are mixed up. 

I have several of these modules. The problem with the slow ping is a bit strange? It should be less than 1 second, even more like 100ms. The other problem is this module only supports GPRS (115kbs) if your GSM supports dual band GPRS (or 2.5G). Most networks do not support this any more (or are deliberately switched off because it affects voice) so your speed is only going to be a max of (57.5kbps) and even that is optimistic. I would say you are getting about ~36.6kbs. Ping should be good at these speeds but browsing modern websites is fatal. It doesn't matter if you have 3G/4G or better in the area. The reason is that GPRS extends the GSM Circuit switch and the more people logged on within the area the slower things become. So what is this module for then? Well, at 8 bucks a piece its great for sending compressed JSON to servers for logging data. 

Installing the package should fix that. Make sure you have in your file, otherwise it won't find it. 

It's not an image which you can run directly, but an installer, but it does have an ssh server running by default: $URL$ It is quite minimal though (no X etc), so you'll have to install all the packages you want yourself. 

Set in . It's a security risk and therefor I recommend you not to do it and that's exactly why the default was changed. But, it's your system. 

Important: Follow these instructions meticulously Note: The OP is using Wheezy and the latest kernel version from then is , while on jessie that version is and that's a critical difference! If you're going to apply these steps to your own situation, adjust the values accordingly. Step 1: Get the git_hash from the firmware Get the firmware-commit-id: which returns or for short. On $URL$ you look for that firmware-commit-id ( on 23 Sep 2015 (the date is only as extra helper, the only relevant thing is the firmware-commit-id)) and click on Browse the repository at this point in the history and switch to the directory. When you're there, download and save it in your home directory (for the Pi 1, you'd download ). In the directory you'll also find a file which you should open and write down the id () you see there. This is the kernel-commit-id. Step 2: Prepare the kernel for module compilation Get the kernel sources and put them into the folder: 

Relays are pretty safe to use without any special isolation like optocouplers. The reason people recommend optocouplers in DIY projects... well because its DIY and an optocoupler is safer in case of something going wrong. 

You need to connect your Pi to the router. This will give your Pi an IP address from the DHCP service on the router. This is the easiest way as it will get a Gateway set for which the Pi can then access the internet. Then you connect to your Pi via SSH using the IP address that the router gave it. You can find out the IP of the Pi by typing in the terminal if you got a mouse and screen connected to it. If it is headless, no keyboard and screen - Then the best thing is to log in to your router and look at the DHCP table. Most of the time the DNS record will show up as or You can even try and ping / connect to SSH using the DNS By just connecting a LAN cable between the two devices all you are doing is creating a separate, new network. This is also possible and you can configure your Ubuntu machine to work like a gateway and give the Pi internet, via your Ubuntu WiFi. This is called interface bridging It means you bridge your WiFi onto LAN port, then your Pi communicates with the Router via this bridge. 

And then to load it, do . As the USB ID is part of the driver code, when you plug the device in it should detect it automatically and load the driver. 

Add and to the respective stanzas. tells the system to react when a specific event occurs, like plugging in your adapter. tells the system to automatically bring up the interface on boot. Hence you need the part added to your 

This will download more then 1GB of data and then process it, which will take a while. To prepare the sources for kernel module compilation there are some other steps to do. First you need to checkout the kernel code at the exact kernel-commit-id you found earlier. I always do my 'work' in a separate branch instead of in 'master' as that makes it easier to start over in case things go wrong and it is considered best practice. Then you clean everything up (), load the default configuration for the Pi 2 () and prepare the sources for module compilation (): 

There are a couple of things I'd do differently and it's a combination of a fuller version of Octopus' comment, a modified version of the answer by rob and my own thing. By default, CRON's output is send to the Mail Transport Agent or MTA and on Debian the default is and you can read the mail messages with for example. And with your entry it would send both stdout (your statements) and stderr (errors) to it. If you don't have and/or don't want an MTA, rob's variant works good too, but you'll miss any errors that would occur (see my next point for that). You can have both stdout and stderr if you change it to this: 

If I understand you correcly you want to use the Pi to either record the video from the camera, or possibly use it to stream liveview to another screen or something? You can use a USB TV Tuner. There is a list of compatible ones here. 

You could just mount a Macintosh share via NFS, but... A bit of a longer solution using BitTorrent Sync. I like this solution because its fast, secures and scaleable. 

If you just want to read the files, you can install nginx on your Pi and share the directory that has the files you want everybody else to read. This is read only, is pretty simple and very light weight. You then get your files by using anything really. 

The Pi have built in resistors but it's good practise to put at least a 10k resistor on input anyway. That protects from over current peaks I suppose. Another safe guard is to use a diode just in front of the transistor. Just in case the transistor goes faulty you won't get 12 volt coming back down to the Pi's. Resistors won't protect you to from that. Or optocoupler gives 100% safety instead of transistor. 

Briefly looking into the PiCamera documentation (And with 0% knowledge in Python) I think you just may have a syntax error? 

So I just went and searched for Wii Nunchuck pinout and it seems like your PINS are not connected as in your diagram. It is possible that you numbered your pins in another order but you should cross check. Source 

Have you tried the Raspbian UnAttended NetInstaller? Without any customization it would install a very bare-bones system, but you can customize it in a number of ways, see $URL$ for details about that. The most interesting part for your use case seems to be to script your customizations in . While it has a extension, it is sourced from the main installation script and thus executed as script and you're free to (ab)use that fact. And this is not some dirty hack. 

For the Pi 1 you should replace with . Now copy the file you downloaded earlier into the kernel tree and rename it to : (for the Pi 1, just copy the into the kernel tree). Step 3: Set up your system for kernel module compilation When you're compiling a kernel module, the build system looks in the directory for the kernel headers/sources. So make the link from that directory to our current directory: When you now do you should get the following: 

If you want to know what's responsible for boot time with systemd, run or and then decide whether there are things you can live without and/or research the items which you think may be sped up. 

According to WikiDevi you need the rtl8192cu driver, which is now part of the mainline kernel. So just updating your system should fix it. If not the output of after you plug in your device will help solve the issue. Also provide the info of in that case.