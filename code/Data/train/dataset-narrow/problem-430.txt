According the info you just added to the question, each tag has two fruits. Please note that each tag field (holding two fruits) is unique. You should be storing the fruits as separate fields. The GROUP_CONCAT function is for query aggregation, not set manipulation. The only way to use the view is to do this convoluted solution I reloaded the data like this first: 

It works when passing in a parameter from the MySQL Console If you are doing this from PHP, please make sure the IP is properly enclosed in quotes 

The only way you can do that is if you had every binlog since you loaded master1 aznd never erased any of the binlogs. Most people rotate their binlogs, making this impossible. I need to setup a "replicator" user (with replication perms) on both master1 and master2? Yes EPILOGUE I have setup ucarp over the years as the failover mechanism for the floating IP. Most use Linux Heartbeat, Pacemaker, and others. So, you are in the ballpark of what needs to be done. 

Then startup MySQL. If the MySQL Enterprise Monitor cannot be used to start MySQL then do . While you could move the whole folder over to Drive E:\ with 

If this command ever freezes, don't worry. It rebuilding all the indexes. You can open another ssh session on the , run on the file and see the index rebuild progression. WHY DO IT THIS WAY ??? MongoDB will do essentially start replication, copy the data, and rebuild indexes in a single operation. As shown, this process is in no way automatic when building an initial replica set. Doing it this way, is less error-prone. 

MySQL restart not required For more details on this, please read Disconnecting a replication slave is easier with MySQL 5.5+ (RESET SLAVE vs. RESET SLAVE ALL) from PERCONA MYSQL PERFORMANCE BLOG 

Now, you have a static trendCutYear. You can now query using a static value in the middle of the index. The query can now be rewritten using trendCutYear instead of trendCut: 

When doing Boolean Searches, MATCH() will return 0 or 1. NOTE TO MyISAM USERS You can use the myisam_ftdump utility against the MyISAM table to get a complete listing of words and their frequency. NOTE TO InnoDB USERS There is a wonderful explanation of how InnoDB calculates Relevance in Boolean Fulltext Searching under the subheading in the MySQL Documentation (Boolean Full-Text Searches) 

Given this statement, 4 would seem way too low. You should set it much higher or don't set it at all (letting MariaDB set it for you). 

Three(3) Suggestions SUGGESTION #1 You have the following clause in the SQL mainDateTime BETWEEN '2012-06-20' AND '2012-07-07' If hold s a date and a time you should change the clause to this mainDateTime BETWEEN '2012-06-20 00:00:00' AND '2012-07-07 23:59:59' SUGGESTION #2 The whole WHERE clause gives away what index both tables need: 

mysqld looked for the grants, not in , but . You cannot yank grants on individual database from a user with global grants. 

It's a global variable in MySQL 5.6, but it is not dynamic. Since you are using MySQL 5.5, it is only a startup option. Therefore, you must bite the bullet and restart mysqld. 

I can say that mysqldump is not really the problem. The problem is the OS and/or hardware. Evidently, the computer you are using for Windows is not performant for screen I/O. Since MacOS runs like Linux, I would tend to blame Windows OS. My guess is that even with a far better computer (faster CPU, more RAM), mysqldump may still not perform better if Windows cannot buffer screen I/O effectively. Your fix for this would be to tune Windows. Godspeed, Spiderman !!! 

This is a very tricky question because of the internals of the ARCHIVE storage engine. People have asked this same question in the MySQL Forums 

Each VARCHAR has an additional byte for tracking string length. The values are really 10 and 14. That gets ignored since you are shrinking the field to 1 byte. If you collapse to TINYINT, the savings would be as follows 

At that point, MySQL is complaining that the data dictionary entry for the table in the database is still inside the system tablespace. Next, mysqld restarted and was ready for new connections 

This should return JobSites in all ZipCodes from Jersey City, NJ and Jersey City, WI If you collapse the query to 

Database Virtual IP (aka DBVIP) There are products you can download and install to setup a DBVIP. One such product I use is . Another product is Linux Heartbeat. I normally do not use such things with MySQL Circular Replication or Master/Slave. Why? Since those products can perform automatic failover, you do not want to do that in the event a Slave is some number of seconds behind in replication lag. You should perform manual failovers. Here is a poor man's approach to implementing DBVIP management. Suppose you have this setup 

Since each of these belong to and not the data, the format of InnoDB is agnostic as far as the mysqldump goes. If you want to shift everything to Barracuda on the fly, there are two ways (TEST WHAT I AM ABOUT TO SUGGEST ON A DEV AND STAGING SERVER, PLEASE) TECHNIQUE #1 : Prepend the Barracuda Option to the mysqldump Suppose the mysqldump file is called . Do this: 

If you want something that's quick-and-dirty, may you should consider doing this: STEP 01) Use mysqldump 

The book I mentioned recommends getting away from ANSI error codes and using the direct MySQL error codes. The reason? Page 133 has a box "SQLSTATE or MySQL Error Code?", which says the following: 

If you want to replicate from the existing 5.6 slave to another 5.6 slave, you need to setup the first 5.6 slave to behave like a master STEP 01 Add these three(3) lines to my.cnf (under group header) on the first 5.6 slave 

In the first case, if zip_code '10013' did not exist in the table, nothing is inserted. In the second case, if zip_codes '10014' and '10015' do not exist in the table, you should expect tech_id to have 2 rows inserted with the zip_ids for zip_codes '10013' and '10016'. Therefore, there is no messy DELETE/UNDELETE to code in a trigger. Give it a Try !!! 

There is a bit of confusion that needs to be cleared up. MySQL In MySQL, the SQL Clause works with Views only You cannot create any other types in MySQL (someone correct me if this is not so). That's why says is expected. You also cannot create types with the above syntax in MySQL. PostgreSQL You can create types in PostgreSQL, but there is no syntax for creating types. You can use for creating functions and views, but not types. 

The only situation I can think of is reloading a large mysqldump. Why ? Check out this Pictorial Representation of InnoDB (Percona CTO Vadim Tkachenko) 

CAVEAT : This works as long as you do not run Another thing to try is this: If you disable binary logging on the Slave and you run , the Master gives you the current binary log. The Slave gives you nothing. 

To shorten JOINs, you could just keep country_id, county_id, state_id, city_id with each PostTable row. Otherwise, you could be chaining all these tables deeper and deeper. This would definitely require proper tuning of sort_buffer_size and join_buffer_size. 

I have some queries you can run against the INFORMATION_SCHEMA Run this to get the Total MySQL Data and Index Usage By Storage Engine 

Although not visible to the naked eye, the 4 rows that had 16 characters are now bit(1) and all other rows are bit(0). From here you can get rid of the old table and keep the new like this 

SUGGESTION #1 First, stop the App from Logging. Next, you need to find the last 10 million ids and get the minimum value. Then, create a temp table with the 10 million rows of those IDs starting from that minimum. 

In both cases, once you done, simply drop the new Instance (saves money) at your discretion. If you combine the two ideas, you could load your PHP script's output into the point-time instance. Any needed data to retrieve from production could be read from the Read Slave to prevent further load issues with production. WARNING Bringing up instances can be time-consuming. So, plan to have the instance brought up early enough for report and import time. This is more ranting and brainstorming than a concrete answer. 

InnoDB tablespace size for individual tables () can be reduced with and , but the system tablespace file can be never be shrunk. The source of ibdata1's growth in in the undo logs. I have written posts about this since July 2013. I first learned about this phenomenon from Percona's post Reasons for run-away main Innodb Tablespace. Suggestion #1 If you mysqldump the data into another server running mysql in a newly installed instance, you could setup replication to it, then failover and trash the old master. Suggestion #2 If you do not have another server, you'll have stop the application, mysqldump the data, drop all DBs, shutdown mysql, delete ibdata1, start mysql (which recreates ibdata1, reload the mysqldump). See my very old post Howto: Clean a mysql InnoDB storage engine? 

The general behavior of the MySQL Query Optimizer is as follows: If less than 5% of the rows of a table has to be traversed in an index, the index is used. Otherwise, the index is dismissed and a full table scan is done. Now look at the index: (startBlock,endBlock). Here are two questions 

That takes care of the remote shutdown privileges. You should also address securing user connections by removing SHUTDOWN privilege from every user that does not need to have it. Perhaps you can do this: 

I have some queries for you regarding table sizes that you can run in MySQL during these spikes Database size in terms of StorageEngine (MB) 

Your syntax is just fine !!! Your error message has as the problem. Take a closer look at the message: 

In order to answer your question, you need to know what the InnoDB Architecture looks like. The following picture was created years ago by Percona CTO Vadim Tkachenko 

I originally was thinking of timezone offset in hours. @yercube reminded me of other places with 15 min or 30 min additional offsets . For example, these cities have these times: 

After running this all your tables will be smaller. To answer your actual question, no, you are not doing anything wrong. Views take up no actual diskspace except for the View Definition. 

These constitute queries as well. Perhaps you could configure MONYog to retrieve status information less often. 

You do not need to consult the log. mysqld can tell you. For anyone running MySQL 5.6 and prior, or MySQL 5.7 in MySQL 5.6 compatibility mode 

Since you did not set any user recsource limits, I would suspect a misalignment of columns in the mysql.user table, especially if you performed mysql_upgrade with fixing the grant tables. To check this run this query 

Give it a Try !!! UPDATE 2014-09-22 08:26 EDT The queries I gave break down each by our hour of the month. You get no more than 24 rows. If you want group by date and hour, then try this 

If you have to restore backups from MySQL Enterprise, make sure there is no PID file. Preferably, you could setup MySQL Replication and do the backups on the Slave. Then, when it is time for backup, run 

and that's it. Even if you ran on an InnoDB table, the statistics can get rather stale. By default, is already disabled in MySQL 5.6. If you have MySQL 5.5 and prior, you can disable the update of the statistics by doing this: 

Since we are talking Windows, there should be a service called MySQL or some other name pointing to C:\Program Files\MySQL. If that's not the folder, search the entire disk for my.ini. Once you found my.ini, here is a sure fire way to insert a new user called 'oracleclient': Step 01) Shutdown Application Step 02) net stop mysql Step 03) Add skip-grant-tables to my.ini Step 04) net start mysql Step 05) run 'mysql' at the DOS prompt (no password needed) Step 06) From mysql prompt, run this INSERT statement 

Depends on what you want, more performance or less fragmentation. With 23.12% fragmentation, I would work on decreasing query_cache_min_res_unit to lower the query cache's pruning activity against small queries. Strictly in terms of the query cache, performance will take care of itself. When you can drop the fragmentation percentage, you could possibly increase the query_cache_size to fit more query results IF AND ONLY IF the results are frequently accessed. Think about this as well: each block is 1K since the Documentation says 

UPDATE 2012-12-18 13:06 EDT Further Observation #1 If you stayed with the same DB Connection and still have this problem, here something else not previously mentioned: You gave the temp table an index. That should be a UNIQUE INDEX or PRIMARY KEY. Further Observation #2 You could shift the operation from a to Further Observation #3 If you want to use temp tables, please specify MyISAM. InnoDB has a tendency to leave pigeon holes in the data dictionary with ibdata1 in the event of a crash or upon DB Connection termination. With these three(3) observations in mind, here is my recommended change 

I also noticed the user mysql was expecting 'myuser'@'10.%' as the user to authenticate. You might need 'myuser'@'IP-of-DBServer' defined on the database mydb with this: 

SUGGESTION #1 You have no meaningful indexes. That can have a detrimental effect on execution since the MySQL Query Optimizer has no help in searching. You should all the following indexes 

You should create the tree first and then fill in the ids to associate to each node. This is all based on a binary tree with AVL balancing but without the rebalancing. The math is very straightforward. Let's say you have N people. (Let's say N is 15) The formula gives the maximum tree height ( MTH ). Get the average of 1 and (). That becomes the root. Take half the distance and go forward and back (4 and 12) Repeat this until half the distance is less than one. Sorry, for the vague recursion but the end result is drawn for you. Now, go about assigning the user ids to each number starting from the root. 

in the new server's This will work seamlessly if the new server has the same version of MySQL as the old. If the new server has the next higher major release (5.1 -> 5.5,5.5 - > 5.6) you will then have to run . Make sure you keep a backup. If you are using InnoDB (in whole or in part), get all the InnoDB settings from the old over the new server's . Give it a Try !!! 

That way, when you interrupt the mysqldump, everything prior to that interruption is committed. Give it a Try !!!