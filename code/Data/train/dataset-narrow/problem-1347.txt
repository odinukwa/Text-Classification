What happened to the whitespace in ? A single space suffices. What do the names communicate and fail to communicate? The name communicates nothing: the type already says that. What purpose does this particular prime factorisation serve? The name doesn't really fit the context IMO: you're not accumulating to a . would make it crystal clear what the function does. 

That's a scary magic number. How do you ensure that it's identical to the value used in the later test? How do you know it's big enough? Is there any reason not to use a self-documenting upper bound such as ? 

The is completely pointless: a loop over an empty enumerable does nothing: it doesn't throw an exception or whatever error you're trying to avoid. 

I would also be tempted to use sublists and eliminate the need for , but that depends on how you're handling memoisation. 

Addendum: I think that must be incorrect. If it xors the numbers from inclusive to inclusive, but if it xors the numbers from inclusive to exclusive (or some other empty set). If it's intended always to xor from inclusive to inclusive then doesn't need a special case, and should always return . 

It is possible to calculate it in \$O(\lg N)\$ time, but it's a bit complicated. Consider how to count numbers \$1 \le i \le N\$ such that . That requires an odd number of digits such that . The valid digits are \$D_1 = \{1, 3, 5, 7, 9\}\$. Let \$c(n, D)\$ be the number of n-digit numbers (including those with leading zeroes) with an odd number of digits from the set \$D\$. Then the number of n-digit numbers with an even number of digits from the set \$D\$ is \$10^n - c(n, D)\$. Now, clearly \$c(1, D) = |D|\$; and $$\begin{eqnarray}c(n + 1, D) & = & (10 - |D|)c(n, D) + |D|(10^n - c(n, D)) \\ & = & (10 - 2|D|)c(n, D) + 10^n |D| \end{eqnarray}$$ which has closed form $$c(n, D) = \frac{10^n - (10 - 2|D|)^n}{2}$$ So how many numbers do we have with ? If \$N\$ has \$n\$ digits, it's \$c(n-1, D_1)\$ plus those between \$10^n\$ and \$N\$. Those can be separated into the ones with the same first digit as \$N\$ and those with a smaller first digit; the latter can be handled easily, and the former require a recursion. Once you've got that implemented, it should be easy to generalise it to handle sets \$D_2 = \{2, 3, 6, 7\}\$, \$D_4 = \{4, 5, 6, 7\}\$, and \$D_8 = \{8, 9\}\$. Finally you weight the four counts by the corresponding value of the bit and add them. 

If cancellation is important (it's not in the original code, but it allows me to show how to use correctly, so...), 

Elsewhere it's , here it's . Be consistent. only ever contains values and . Ideally it would use a 1-bit integer type (and you could consider writing a basic bitset implementation if it's not in the library). It's certainly wasteful to use . Integer types in C are a mess, which is why was created. This might be controversial, but my opinion is that code written after the year 2000 should use , , , etc. only when required to do so for compatibility with older libraries. The primes will never be negative, so it makes more sense to use unsigned types than signed. Don't reinvent the wheel is unnecessary. With C-99 you could just initialise as to set them all to and reverse the meaning of the mark; with legacy versions of C you could use to set them all to . Check your edge conditions 

I can work out what and mean, but I think and would be clearer, especially since the method names do call them and . Sort-of. Actually, I would have guessed that meant and meant , not the other way round. 

There are many date libraries out there, and they're not consistent on their offsets for months. I would consider creating an enum for the months. Also, either don't validate the values at all or validate them fully. If I can't create then why can I create ? If I can't create a date in 753 BC then why can I create a date in year 0 (whatever that means – 1 BC?)? Obviously that comes with some caveats, particularly with respect to the transition from the Julian to the Gregorian calendar; the documentation should make it clear what the transition date is and what days don't exist in consequence. 

then you can replace the and maps with a single in priority order and replace the first 41 lines of the first code block with 

We can refactor the second into something similar to the first: firstly, observe that there's no need to repeat the assignment : 

In order to speed things up at the cost* of a small reduction in entropy, you could try to rewrite so that you only call once, getting 128 words, and then split them into fours. * (There's room for debate as to whether it's a cost or a benefit when you see whether using slows things down while it tries to refill its entropy pool). 

Surely the point of the trie is to store the words in the nodes, so why should they be stored elsewhere? If is eliminated and the class is eliminated then can just store a direct substring of one of the strings. (Before anyone complains that this would increase memory usage: Java's shares the with the original string, which it can do safely because strings are immutable in Java. The only memory increase would be a per node to record whether the node ends a word, and that's balanced by the memory saving of 64-plus bytes per word from not having the list). A search shouldn't force a second search 

What about ? If you store that you greatly simplify the update to , because it's simply a case of adding the of the selected parameters from the accumulator rather than repeating the calculation to determine which points are on the ellipse. 

Your argument in favour of recursion in the comments on an earlier answer is out by a factor of two, because you're potentially making twice as many calls as there are bits in . Even if you don't want to do things iteratively, it makes sense to rewrite this as 

Why does one configuration have to handle two different syntax styles? On the bases of KISS, of doing one thing well, and of potential ambiguities I would think it makes more sense to register two handlers (perhaps and ), even if they share regexes for opcodes. 

The code is pretty consistent with whitespace, which is good, but it seems to follow a style document which makes some unusual decisions. In particular, I would highlight the ternary operator and the traditional as two places where I would find the readability improved by the addition of whitespace. 

If you use instead of then you give better hints as to how much underlying buffers might need to be increased: 

What happened to the indentation? Why do some have a space before them and others not? Why the blank line before the closing ? is a mouthful. Extracting a local variable with a short intelligible name would improve readability. is not only a bigger mouthful but also potentially very expensive. A common subexpression which takes non-constant time should definitely be extracted to a local variable. The comments are largely noise. The only one which contributes to my understanding of the code is the one saying what is supposed to contain. 

Memoisation support in Python 30 seconds with Google turned up $URL$ . If you know that you're only going to want 10000 different arguments memoised then 

is a bit suspect. You could get different results with the same test case on different machines, or even on the same machine in different locales. 

is easily the weirdest bracing style I've ever seen, and weird style is not good for collaboration. Do you use a company or published style guide? 

What are these doing there? (The obvious answer would be that you used the default template in VS and didn't bother to clean up, but I hope that you have a better explanation than that). 

The downside of the more usual approach, of course, is that you have to cast the to , so there's a tradeoff. 

Why? I can just about understand including the version, although changing that is likely to break things. But the IV is implicitly verified by the MAC already without including it in the AAD. I'm not saying that you're wrong to include it, but it is surprising and therefore the reason should be documented, even if it's only with a link to a crypto.stackexchange.com answer which makes a case for including it. 

If you find yourself calling the same immutable method dozens of times, you should think about storing the result in a local variable. I count 17 calls to , which I assume all give the same result. (If not, you have other problems!) 

I find the coding style is somewhat unconventional, which might make maintenance more costly than it needs to be. Particular smells are: 

I'm slightly puzzled by "But as it turns out, the extra cost of that single if statement and a redirect call meant that it was only worth redirecting for 6≤n≤9". What "single if statement"? Do you mean the overhead of the table lookup? 

It took some thought to decipher the intent here, especially since 's meaning is not documented. It would be clearer to use or to implement something similar. 

which is the naïve recursive definition, and a classic teaching example of how naïve implementations can be insanely inefficient. Your answer meets the rather vague spec (it is recursive), but is much better than the intended solution because it takes linear time (or maybe quadratic if is linear, but I doubt it) rather than exponential. If you want an additional challenge, here are two: 

The effect is to guarantee that no track will repeat within of the previous time it occurred. You can then make settable with a public property or derive it from according to some hard-coded policy (e.g. a fixed percentage). 

What output should I expect if I call ? What do I actually get? This bug can be fixed, and performance improved, as: 

Despite what I said above about inlining , there is an argument for ditching instead. This is because when is a single bit can be expressed as (assuming I've got the notation correct) . Note that if you do go down this route you have to use longs, because the intermediate value can reach 7987904512. 

The question of finding the next permutation in lexicographic order is a classical one (going back 7 centuries) and well documented in the literature. E.g. Wikipedia gives the following algorithm: 

The test is unnecessary unless clearing a bit is significantly more expensive than testing. And once the test is removed, the bookkeeping can be done by , giving 

If you're using a recent Java compiler, you can omit some boiler plate when creating an instance of a generic class. 

Why flatten each permutation to a string? That's a major limitation to the usefulness. If you're justifying it by YAGNI then that's fair enough, but I don't see that explicitly stated anywhere. And I'm not sure it's entirely justified here anyway, because the change doesn't overcomplicate the code. It's just replacing 

What do you consider to be the usual implementation? How does this one differ? If it's just the step size sequence, I was under the impression that this one is the usual one; and as to complexity, the complexity of shell sort with different sequences is such a hard problem that there are still potential doctorates in it. 

Actually, if \$N\$ is large enough relative to \$k\$ you can do even better with a more complicated approach. Treat it as a Markov chain and find a matrix power of the \$0-1\$ matrix which indicates the successor function. That takes \$O(\lg N)\$ matrix multiplications of a \$k\times k\$ matrix. 

would be nice. I'm not convinced of the benefit of renaming to for a scope in which doesn't change value. Since you have , you could break out of the loop if you've converged before iterations. I would expect this to give a significant speedup. 

On the subject of KISS, tracking the current node and the current board independently seems like a potential source of maintainance errors. I'd be inclined to just track the current node and to access the board via the node. 

Note that this fixes an out-by-one in the upper bound of . Now I'm ready to look at performance. The low-hanging fruit here is : it's usually faster to calculate a constant product or square of a loop index by addition. I'm also going to use bitwise operations for multiplication and division by 2 because that means not having to worry about how clever the compiler is. 

What is being decomposed here? My instinct would be that the first argument is the most relevant to interpreting the function name, but that doesn't make sense in this case. 

This is also unnecessary, because AES only supports one block size. However, you could argue that it's future-proofing. I personally would remove it. 

I find the naming slightly curious. Given , I expect the linear one to be called . Alternatively, would fit with . Also, in I don't understand the name . I would find that clearer if it were , although I'm sure there are some who would argue that it should be . Also, from a perspective of naturality, I would consider changing the order of the constructor parameters. 

This is usually written . But more importantly, what do the values it stores mean? is not a descriptive name. There is no comment explaining what it's for, or even explaining what the method is for. 

are all completely opaque. But they also lead me into a subpoint: type names matter almost as much as variable names. You're using a language which has : a would go a long way to making the code easier to figure out. They might also make it slightly more obvious that the types are being mixed in ugly ways, which I suspect are unintentional and not noticed simply because your compiler reduces them to the same internal type: