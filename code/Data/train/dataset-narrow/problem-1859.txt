Authorized keys are well covered in the ssh man page. Try 'man -k ssh' to get a list of man pages related to ssh. ssh-keygen it the tool to create the keys for you. There is a helper program ssh-copy-id to assist in securely copying the the public key to another system. If you want to understand how they work, then look for articles on public key encryption. SSH always uses one key from the server. Authorized keys adds using a key from the client to identify the client. Authorized keys are a copy of the clients key stored in ~/.ssh/authorized_keys. As such they are only valid for the user id for which they are authorized. The man page documents options used to restrict what the key can be used for: program, source IP, port forwarded, etc. Authorized keys are a good option if you want to run programs across systems in batch mode. It is a good idea to at least limit the systems which can use a given key. This will make it more difficult to use a stolen key. Putty (the ssh client for windows) uses a different storage format for the keys. It will provide the public key in the appropriate format for openssh. This is covered in the putty documentation. 

To prevent a sender from changing the mail_from identity and retrying you will need to add their IP address to a blacklist and enforce the blacklist. If you can get the filter to drop the connection rather than reject the mail_from, then they will need to reconnect to change the mail_from address. I don't think many senders will do so. I'll check my database and update later. The following rule will check to see if the From address is withing the 'example.com' domain. Add these lines to your local.cf file and restart spamassassin. Increase the score when you are confident that it is working correctly. This presumes you are not using spamassassin for outgoing email. 

Using something like DNSMasq to act as your internal DNS server would allow you to add the entry to one hosts file. It can be configured to point at your split DNS server or to act as a cache on its own. 

Depending on the signing authority verification can be quite extensive (and thus expensive for the authority). This will increase the cost of the certificate. Generally the cost of the certificate will vary with the level of verification done. New technology allows for some indication of the degree of trust to be reflected by a colored notification in the address bar. The certificate authority's certificate will usually expire every ten years or so. Some of this time will be required to get the certificates deployed in the browser's certificate cache, so they may not be used for the first year or two. For the last year or two they won't be useful as the signing key will expire before signed key expires. By signing your key, the certificate authority is essentially saying we trust the holder of this certificate so you can trust them too. They should periodically be verifying this trust, hence one of the reasons certificates expire. CRLs if they are provided and checked allow the signing authority to announce they no longer trust the holder of the key. This can occur for a variety of reasons; stolen key, inappropriately issued key, key is no longer used, or some other reason. Certificate expiry can be used reduce the size of the CRL database. Some signing authorities will issue multi-year certificates. This may only be available for renewal certificates. Once you start using certificates you will be committing to maintaining the trust relationships involved. This will include deploying updating certificates periodically. 

My reading of the man page indicates the verifier will use DNS to lookup the public key. Add a new selector for your new key to DNS. Do not reuse your existing selector for the new key. If you don't need ongoing verifiability, you can schedule deletion of the current selector at a future date (at least a week or so after the switch). Don't start using the new key until it is published and the verifier tool reports you have correctly setup the DNS records. Unfortunately, a high percentage of the DKIM email I receive is missing the support DNS data. See my article on Implementing DKIM with Exim for detail on selector management. 

This kind of configuration uses virtual domains. This is supported by most IMAP/POP3 servers as well as most MTAs. It takes extra work to configure. Try to use one authentication mechanism for both. The easiest is likely to have your SMTP server to use the Mail Delivery Agent (such as Dovecot) for mailbox lookups and user authentication. You should provide authenticated access on the Submission port (587) for users to send mail. 

You cannot map services to ports using DNS. If you open up 8080 and 8081 to the Internet, either domain can be used to access either port. However, if you are publishing URLs including the port number traffic will be routed appropriately. If I assume these are web services, the normal approach would be to place a proxy (which could be Apache) in front of the services. Users would request service1.example.com or service2.example.com and the proxy would connect to the appropriate service. (I am using example.com as that is one of the domains assigned for examples.) 

The issue may be the flag. From what I see, you set up a very unusual setup creating high volumes of connections with the same source/destination. IPtables is a statefull firewall and tracks each connection individually. I would speculate that you end up creating a high volume of collisions in a hash table. This generally slows down access which may be what you are seeing. The router may be operating in a stateless or semi-stateful manner. This reduces the overhead involved. 

I drop most of my spam by delaying connections to hosts are listed in the Spamhaus zen list. Spambots don't like delay. Detecting obvious server forgeries in the HELO command also clears out a lot of spam. Conditions I have found to indicate server forgeries include. 

Once you have connected to IMAP you will need login credentials. There are a variety of formats that could be required depending on the configuration of the IMAP server. Opening a connection to an IMAP server gives you very little functionality until you have logged in as the desired user. 

If you are hosting two subdomains of the same domain, you have no problem if you get a multidomain or wildcard certificate. Otherwise the domain not listed on the certificate will give a warning that the name doesn't match. When configuring the domains, you would use the same certificate for both domains. Some clients and servers support negotiating the domain name before presenting the certificate. This allow two different certificates to be used. 

There seems to be an inconsistency between the and listings. Something not listed is using a lot of CPU. Try changing the sort order of top to %CPU to see where the CPU is going. It looks like you have a severe memory leak in the application you are running under apache. Try reducing MaxRequestsPerChild to 200 or 100. This should cause servers to be recycled before they have leaked too much memory. Reducing MaxSpareServers to 10 or so may free up some more memory. I use a modified log format to show the execution time for requests. You can use the excution time field to determine if requests take too long to service. This is the log format I use for a host with multiple virtual servers in the same log file. The value replaces the which is always . unless IdentityCheck is enabled. (IdentityCheck relies on being enabled on the remote server, which is highly unlikely.) 

If you are using Debian then your sendmail process is likely to be or . These programs have significantly different configuration processes, both of which are simpler than the process for the original program. Sendmail tends to be used by multiple system processes, so restricting local access to only one process may cause problems. (Many system monitoring processes will use email to notify you of issues.) You can restrict outgoing connections to port 25 to only your email process with . This will prevent any malicious processes from sending email directly. You can to rate limit outgoing emails with either or your sendmail program (exim4 has this capability, postfix may have it). You can restrict the valid sending user-ids to prevent random senders. You could require the apache user to authenticate before sending email. This will make it more difficult from code injected to your site to send email. If you do your correctly, you can (and should) limit the sending domain to your domain. Don't allow use of random domains on outgoing email. Use a Reply-To address if you want to reply to a name provided to . Make sure you do the rest of the setup for your mail server to prevent your server from being classified as Spam.