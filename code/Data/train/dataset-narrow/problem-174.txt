ASICs are hardware that is tuned/dedicated to a specific task (as per the name, Application Specific Integrated Circuits). DPDK will never be as fast as an ASIC (that sentence doesn't really make sense as it's comparing hardware to software). ASICs are designed and built to do a specific task as efficiently as possible. DPDK runs on x86 general purpose CPUs, they have many weird and wonderful features because they could be used for any task/workload. DPDK tries to make the best use of a general purpose x86 process for the specific task of network processor whereas an ASIC is pre-built to be efficient at network processing. Side note on Linux networking speed: I've been writing this tool (still a work in progress) to compare the different Kernel methods for sending packets: $URL$ When using one CPU core and a frame size of 64 bytes I get the following frames per second rates for different Kernel methods: 1.00Mfps 1.01Mfps 1.2Mfps TPACKET_V2 1.3Mfps TPACKET_V3 1.3Mfps To put those numbers in perspective, 10Gbps using 64 byte packets is 14.48Mpps, which DPDK can achieve on a single CPU core. So the native Kernel path is about an order of magnitude slower however, TPACKETV_v4 has just been released which includes a zero copy option, which should bring major speed increased. EDIT: I forgot to say, there are downsides to DPDK, you need a NIC that is explicitly supported by DPDK for example. Hard work is being done to grow the list of supported NICs all the time. This is because DPDK uses its own driver. Linux supports thousands of more NICs though, because it's so flexible and has a standard method of driver implementation, so any NIC with a complimant driver should work. This is another trade off for the speed gained by using DPDK. EDIT 2: 

It seems your openvpn clients also inserts the following route: So now all traffic is routed via the default route which points to the vpn tunnel, a second look up is then performed to see that the far end of the VPN is reachable by 192.168.1.1 which is presumably your router. Traffic (in theory) should be sent into tun0 which will then be encrypted and sent towards the router to reach the VPN far end. That is all fine and well. Now we have set the scene, without seeing your dhcpd and router config I would hazard a guess and say that dhcpd flushes your routing table so that important extra route installed by openvpn is cleared out and you go to a state of infinite recursion I described with the numbered steps 1 to 4 above. 

The sender will start sending packets, initially slowly but then increasing the rate over time. When the data rate gets too high the packet buffer on the switch will fill up and a packet will be dropped. The sender will then back off the data rate, the rate on the line will remain around the capacity of the line gradually increasing until a packet is dropped and then backing off again. 

A switch only knows which port a MAC address is behind. Not whether there are other switches between it and the host with that MAC address. You could filter the port/mac data you gather to ports with MAC addresses counts below a threshold. The downside of that approach is that some MACs may not appear in your data at all (e.g. unmanaged switch on someones desk, VM setups that result in one host having multiple MACs) or may appear more than once (if the total devices behind a switch is less than your threshold). A more subtle approach would be to gather the MAC/port data from all your switches to produce a list of MAC addresses behind every switchport. Then look for the shortest list that contains each MAC address. This will represent the switchport closest to the device (occasionally you may get duplicates if a switch has only one port in use but it shouldn't be too hard to resolve these manually). If you find a lot of MACs with the same closest switchport you probablly need to gets someone to investigate what is on the end of it. 

Whatever you do I think you need to buy a switch, most home/small buisness routers only have four ports on the LAN side which is not enough for your 10 servers. For servers static IP addressing is generally the way to go so you don't need to worrying about DHCP. For accessing the Internet I see two options. 

Theres advantages to both approaches. It's down to you to decide which is more relavent on your network. The advantage of setting on the device is that the devices can still talk to each other if the dhcp server goes down or if a rouge DHCP server shows up. The advantage of setting on the DHCP server is that you don't have to go round to every machine individually if you ever need to do a mass renumbering. 

After the initial convergence of the network, LSPs now exist between all FECs which are typically interfaces on LERs that connect to a subnet. R1 is a LER for an LSP towards R6 which is the other LER in that LSP. If R7 were also a PE router for example an LSP would exist between each R1 interface and each R7 interface and so more LSPs would exist then with R1 and R7 being the two LERs for those LSPs. Is that all correct? Assuming that baseline is correct; How does R1 know it is an LER for an LSP that spans to R6 for example (and all other possible LSPs that exist in this topology where R1 is one end device of the LSP such as if we introduced R7 as a PE as before?). Is this because the IGP (OSPF in this case) has full visibility of the network so it (all the edges) can be calculated from the IGP database? If 2 is correct, how did we get to that stage? Once the network is fully converged with IGP and LDP exchanges are completed, does a PE router then look through the FIB (or is it IGP RIB?) and work out all possible LDPs and which ones it would be an LER for, and who/what is the LER for the other end? 

I can't find a good authoritative source, but as per your picture, we also use in our ADSL and VDSL DSLAMs/MSANs. It is an RJ21 connector, sometimes also called an RJ21X connector. This page has the more accurate picture I can find. That is how we often use them, pack to a patch panel to break out into RJ11 ports (for testing in the LAB) or back to krone blocks in a live PoP. This page has a wiring guide. 

I would like to think there is no potential issues that will occur if I enable this, but you never know so I'm all ears! 

Today this would likely be done by laying a fibre from your office back to a nearby PoP and from the DC to a PoP near the DC. Then most providers would create a L2 VPN (such as an MPLS pseudowire) between the PoPs across the service providers network between PoPs. It wouldn’t actually be a dedicated fibre from end-to-end. The two main exceptions are if the two sites are within close proximity of each other (in relative terms, say 20Km) the sites might both hair-pin through the same provider PoP. Or if you purchase what is usually called “Dark Fibre” then you are typically paying for dedicated end to end fibre strand(s). 

Here is the background info: I support a legacy regional group of users with trunk mounted cellular data modems. These devices use a private APN, meaning they do not communicate directly over the Internet, all traffic from these devices come from the wireless provider into our private network over a leased line, at which point the firewall decides to discard or route the packet. The vendor who provided this private APN setup a long time ago used public addresses for the mobile devices as well as a specific public subnet that they could communicate with. For illustration purposes, I'll say the subnet was 1.2.3.0/29 (this is not the real subnet). So we could address 6 devices on our network (1.2.3.1 - 1.2.3.6). The device provides connectivity for laptops in the vehicle, but also each also reports AVL location data to one of these servers, lets say that is 1.2.3.6. These reports are UDP messages on a well known port, let's say that is port 21000. The device configuration requires an IP Address, not a DNS queryable device name. No server on our private network actually has the address 1.2.3.6. The Cisco ASA Firewall has a UDP PORT NAT for port 21000 from any machine in the public subnet that the mobile units use to the real address of the AVL server. Change is coming: Now, so many years later, we are upgrading capabilities, and the devices will now be assigned private addresses by the wireless vendor. The public subnet for the mobile devices, as well as the public subnet for our servers (1.2.3.0/248 above) will no longer be assigned to us once the migration is complete. So then the 1.2.3.6 address that we've been using for AVL will no longer "belong" or otherwise be assigned to us (It's always belonged to the vendor). The problem: The new private subnet the mobile devices will now get addresses in is not included in the UDP PORT NAT firewall rule. Once we migrate the APN, then, the cellular modem will no longer be able to report their AVL location successfully. The cellular modems (over 1000 of them) must be manually reconfigured one at a time if we change the AVL server address. If we move forward with the migration, the AVL reports will stop working until we manually reconfigure each modem. If we reconfigure before the migration, we break AVL until the migration occurs. There is no way to automate making these changes concurrently. My Solution: I first asked my network vendor to add the new 10.x.x.x subnet for mobile devices to the firewall rule that port forwards UDP to 1.2.3.6 port 21000 to the proper server. I was told I cannot NAT traffic from a private (10.x.x.x) address that is attempting to reach a public address (1.2.3.6) to an internal server. I don't know if this is a safety violation the Cisco ASA will not allow, or if this is a policy of the network vendor. I then asked if perhaps the router before the firewall could do this UDP PORT NAT for me, changing 1.2.3.6 to the server's "real" address before the traffic reaches the firewall. No, I was told that since we will no longer be assigned this one particular public address, he cannot include that UDP PORT NAT in the router. "we cannot hang on to a block assignment we do not lease or own." My Question: Perhaps this is a matter of opinion? Only traffic coming in on our leased line (which is just the mobile devices) would even have access to this one very specific rule. They certainly would never need nor try to access a public Internet device at 1.2.3.6 port 21000. Are there risks I am not aware of? I understand the situation is not ideal, but I am trying to find a solution that would allow us to move forward with the newer faster APN technology but not break every modem configuration in the fleet. Am I asking the vendor to do something that legitimately should not be done? I don't wish to cause any security risks, or try to use or steal public address space not allocated to me. What would you do to support this network challenge? 

Add the IPs as "loopbacks" on your firewall box. Since these are loopbacks and not assigned to a network there is no need for "network" or "broadcast" addresess. Use private IPs for the link between your firewall and the ISP-supplied router Add a static route to the ISP supplied router to forward the "LAN range" to your firewall box. 

Phone standards traditionally put the first pair on the middle, then the second pair straddling it, then the third pair straddling that and so-on. RJ series connectors were designed so that you could plug a smaller plug into a larger socket and it would end up in the center and this wiring arrangement meant that plugging a smaller plug into a larger socket would result in a sensible connection. This worked fine at the low frequencies of voice and old low speed data systems but was poor for crosstalk. noise susceptibility, reflections etc at higher frequencies. The greater the number of pairs in this arrangement the worse the high frequency performance gets. A wiring standard with each pair of wires on a pair of adjacent contacts would be best from a high frequency performance point of view but would be lack any backwards compatibility with the existing telco standards. The standard used for ethernet is a compromise. The two central pairs are arranged in the same way they would be in a traditional phone wiring giving compatibility with phone applications that only use the first two pairs. The two outer pairs are arranged in a way that optimises their high speed performance. 

It's possible but messy. While IPv6 proponents strongly encourage use of /64 subnets it is possible to use smaller ones and allocate addresses by DHCPv6. You can then use proxy NDP on your router to pick up traffic from the ISPs router so it can be routed to your internal subnets. Another option is to use NAT. The IPv6 proponents don't like NAT but that doesn't make IPv6 NAT impossible. Linux added support for IPv6 NAT in 3.7. In an ideal world ISPs would provide their clients with a prefix to route as needed on their internal networks. Sadly that doesn't always seem to be the case, some only allocate a single /64, others allocate a /56 to the home router but don't provide any facilities for actually using it. This is particularly likely to be an issue for power users and small buisnesses who use "broadband" type internet connections but want to split up their internal networks.