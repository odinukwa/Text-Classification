If you have a game engine it really needs a show case demo. A full game would be the best but just a technology demo does make a difference. As a developer I don't have interest to build my own proof of concept around unknown engine unless there is some promise behind it. So, promote your 'Den of Anomy' game and/or provide some examples of the basic game functionalities implemented using the engine. 

iPhone 3D Programming covers both ES 1.1 and ES 2.0. I found that slightly confusing when going through examples but it is up to your preference whether you are interested in 1.1 as well. 

From the site: "Cycleblob is implemented using WebGL and HTML 5 canvas elements and is written completely in JavaScript." $URL$ 

In case of line drawing, combine as many lineTo commands before calling stroke. This and some other tips: $URL$ 

I think you need to combine two methods here. First check the bounding boxes of the platforms and the balloon. If the bounding boxes overlap, you have to do more accurate checking. For the second step you have at least two options. You can check the bitmap of the ship (ctx.getImageData etc) against the platform. I guess here you could use the alpha value of each pixel. This is probably better option if you have organic looking levels/platforms. Other option for the second step is to define simple geometric shapes representing the balloon and level. A circle for top, a triangle for ropes and a box for the basket and level. There are several tutorials online how to check collision between these basic shapes. 

Implementation is scattered. But I could misunderstand you. So the second thing I could think of is a hope to always have input/output. Systems are made to change state of entity components so it's all about modifying data. I'm not sure whether it would be easy for you to implement such output as DataChangeOutput (depends on programming language) but it would cost the CPU anyway. Events I'm not sure where do you handle your events. But seeing this statement 

Short answer: probably not. Look here $URL$ to see that there are implementations of generating real textures. It depends on devices you are targetting. When current texture is being changed you call it a change of context on graphics card. It may work worse on mobile phones to often change texture, especially the older ones. So generally it's best to have one big texture if possible. If you have more big textures then there starts the optimization part - sprites on texture should be grouped by usage. 

So since there is just a plugin I see no reason to use JavaScript but I'm not sure how entirely Unity Web Player is done. Wikipedia says it's C# and C++. The other fact is that translation of Java into JavaScript is rather popular in LibGdx and PlayN thanks to Google Web Toolkit so it's possible. 

looks dangerous. I believe that system should handle events in proper moment. Having events the way you described may lead into some incosistences due to order of call. It's best to collect events and handle them in proper time in the system queue. That way I don't see a reason of entities handling events. Input, output - objects This doesn't seem as a hard point but did you consider to implement Object Pools? Garbage collector may kill your performance very quickly in such architecture. Scripts and parameters Parameters in scripts - I feel that's approach taken from Unity3D. Some people believe it's good but the thing is that it's not at all. Parameters are data and data should be put into Components (the part). Parameters not fitting into components should be put somewhere else in my opinion, especially if those are static parameters. But still, having a Script component is a pretty straightforward approach and still puts into ECS. Custom implementation? I know that's you may dislike it but I suggest you to try some ECS frameworks before implementing your own. It's a hard work and when you modify the whole ideas to your current likes, you may be in a place in the future when you have many incosistences. It's best to try already made things first to know how does it taste. If you're asking for frameworks: artemis-odb or Ash. I prefer the first one but it's Java. 

I found this experiment. It runs Box2d physics on a web worker. I haven't yet checked in the detail how it gets around issues mentioned in Vincent Scheib's comments. 

This might be bit far fetched but how about adding a screenshot feature to your game. The game would run with a script controlling game play so it follows predefined path and takes screenshots at critical points. After script is completed it sends them to you with specs of the machine. Then just crowdsource the whole exercise. 

I am looking for ideas how to implement following in 2D space. Unfortunately I don't know much about AI/path finding/autonomous control yet. Let's say this ship can move freely but it has mass and momentum. Also, external forces might affect it (explosions etc). The player can set a target for the ship at any time and it should reach that spot and stop. Without physics this would be simple, just point to the direction and go. But how to deal with existing momentum and then stopping on the spot? I don't want to modify ship's placement directly. edit: Just to make clear, the physics related math of the ship itself is not the problem. 

I tried HTML5 audio on my first game but I could not get it to work perfectly (lag for the first time the sample is played etc). SoundManager2 looks ok and I tried it a bit in a demo. For the next game I will use it as it has functionality to fall back to HTML5 audio in case Flash is not available. 

sorting/filtering inputs sorting/filtering outputs reading inputs and generating outputs (the system itself) 

Unity3D works on top of GameObject-Component model. It's so much different than Entity Component Systems. To my experience it's worse because when you want to code some logic it's put into Script Component, instead of Systems. How different is it to OOP model? Unity3D GameObject contains data and logic - same as in OOP, those components aren't reusable (which is one of reasons for not doing OOP). Of course, you can make some bulletproof conventions which will hold you from mixing data and logic but it might be a pretty hard work to do so continously. Dependencies. When you work in ECS, every System has an Aspect (it's described which components it manages). Thanks to the Aspect your Components are depended by System and not by other Components. I've seen code where few Components were referencing to each other. When order of execution wasn't set properly, then... total mess. When you refactor Component (logic) dependencies it's better to do it in ONE place, like System, instead of few places (Components). The another great disadvantage of model used in Unity3D is a problem to manage objects of same Aspect (set of components). In my opinion it is best to go ECS way if possible or something more closer to it. To take that approach in Unity3D, look at @Byte56 answer. 

I am planning to make a Laser Squad clone and I think I have most of the aspects covered. But the major headache is the projectiles shot/thrown. The easy way would be to figure out the probability of hit and just mark miss/hit. But I want to be able to have the projectile to hit something eventually (collateral damage!). Currently everything is flat 2D tile map and there would be full (wall, door) and half height (desk, chair, window) obstacles. My idea is to draw an imaginary line from the shooter to the target and add some horizontal&vertical error based on the player skills. Then I would trace the modified path until it hits something. This is basically what the original Laser Squad seems to do. Can you recommend any algorithms or other approaches for this? 

Strange that Google Closure Library hasn't been mentioned. It has a huge API, allows more object oriented coding style and has the compiler. I have used so far only the compiler but I am planning to study rest asap. 

Rovio just announced web version of Angry Birds at Google I/O 2011. Built on GWT, it uses WebGL with fallback to Canvas2D. The only thing it uses Flash is the sound effect playing. So I think it is fair to say the technology starts to be ready. 

I have seen term "rotation by shearing" mentioned in several times. I have not tried it myself but it doesn't look impossible to implement $URL$ $URL$