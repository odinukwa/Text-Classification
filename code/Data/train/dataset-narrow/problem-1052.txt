To use that, a user would simply need to sign in to your site and then load up this page. Worse, an attacker who has discovered potential victims on your site may be able to fool one victim into opening a session and then loading a page similar to this that automatically sends a hidden form on behalf of the victim. This is commonly known as a Cross Site Request Forgery. Dealing with CSRFs is not entirely trivial. The easiest way to deal with it is to protect the vulnerable areas with a form of expiring validation that is unique to the form. I like to use a timestamp and hash, like this: 

The bigger issue here is that I am not sure if reading this stream async will get you anything. The blocking operation here is the out of process request to write the data to postgres. I am not sure a controller is ever waiting for input data. It comes down to considering what is doing for you. allows you to take an already blocking operation you do not have control over (a network request for example) and free your thread to do something else while that is waiting for a response. This means that if your application was sitting at 100 requests before async and most of those requests are spending most of their time waiting for the database to respond, you could switch to async code around those database requests and now all of that time you were sitting around waiting can instead be used to queue up more requests from the clients. 

Something more.... immutable Static reference to normal class What I had in mind was static reference to the class, where is like calling and is like and you can even have in it. But if you cannot redesign, you cannot. You got my thoughts, now it is up to you. 

I was looking a bit at your PyCXX and want to offer you Bartonâ€“Nackman trick using Curiously recurring template pattern together with variadic template recursion (through partial specialization). This way you can solve all your types and conversion operators with one template: 

Beware that the comparision operators need some fine-tuning especially when you compare integral vs. floating-point (which to choose as common type) and that in conversion operator may be problematic (not sure). (Finally imagine , but I use my own header while explicitly using selected std features/classes in the namespace and then using the namespace). 

Caching a jQuery object is an expression for introducing a variable that holds the result of the function and its related forms. Perhaps you shouldn't? I'm not 100% on this yet. I think this part of the code can be further cleaned up. I'm still leaning against combining them. I think something that represents this pseudocode would be best, but I'm not sure how to do that best: 

not caching the inner jQuery object checking the state of each dialog by checking its implementation when we already have a structure modeling it 

The controller is vulnerable to automation. If I can discover a list of user ids I could create the following html page: 

So the question is how can that function be written? If you can alter the html, you could add a attribute (or something like that) to the div tags with the ids of the big div tags: 

Usage example That was not part of the code for review, just and imperfect example. The real objects are a bit different. 

You know that those two loops are the problem (quadratic complexity - O(n2)), so, you want to decrease that somehow. will use other cores to gain some speed, but best would be to use different structure - something 2D or 3D, to help you find the voxels faster. If 3D eats too much memory, 2D should still help (with list of voxels up/down). If that is still too much, try utilizing R-tree whis is perfect for nearest neighbor search. Finally you can just throw the structure away, once the job is done. EDIT: Just small note, see comments below: The heightmap is in fact already that 2D/3D structure that can be used to find the neighbours. EDIT2: Utilizing both the and the heightmap should give the best performance. (note: we abviously came to similar idea with the author to use the at the same time, I didn't see his update.) 

I felt that this code would be good as a jQuery plugin, so I went ahead and altered your code until I was satisfied. I left in some comments that are applicable to your code, but I would encourage someone else (and may do it myself still, I don't know yet) to give an actual review. 

In response to the comments: This is very similar to the code you initially put up. I derived it again on a gist using the code you put in your question here (slightly different from the code in the fiddle): $URL$ Clone that repository to see the full history. 

Before I do anything else I feel compelled to clean up your spacing convert " to ' to consistantly use only one type of strings 

I am not sure I understand the question. What are these classes going to give me that a standard lock wouldn't? I would write that first class something like this: 

For C++ it is always better to use class that manages the deallocation in destructor. This could be or . For custom allocation/deallocation you should adapt class similar to and use . In case of , you can provide the . Ohter possibility would be to create your own wrapper similar to , but maybe with conversion . You could pass the buffer into the function to make it thread-safe (not to return address of static internal buffer) and for this situation, I see no problem to have bigger buffer - it will still be quite small (9B). 

First, you have to copy the whole , using should be better, if you don't need to change the tokens inside parser. You are accessing the vector past the end Place the label on separate line, please, this looks quite ugly. 

This code looks mostly fine to me, when the method gets called, gets moved to and then when happens, gets deleted (and eventually garbage collected unless a reference to it continues to exist somewhere else). However I think you could do better by encapsulating each route in a function that takes care of and for you. Something like: 

Back on topic: In my opinion, it is a bad practice to force the Javascript engine to go looking for your globals when you are not in global scope due to leaving off the window qualifier. Thus everywhere you reference without calling it (and the same goes for ) or caching it in a local variable is wrong. In the event where you run this script outside of a browser that implements you will get an exception. is slightly less of an issue because it is a reasonably safe assumption that you will not run this from a browser that doesn't supply a global namespace. For this reason I always pass the globals that I am going to use into my IIFE: 

I don't know the book but have personally written few parsers, compilers and virtual machines, so, I will answer from this perspective. AST v.s. eval() I do not fully understand why you have selected mathematical representation of numbers which can be found in set-theory. There is one element to be known - zero (or empty set) and a construct to create another - succ(zero) (e.g. set containing one element - the previous set). In classical numerical evaluation, you would have some type containing the numeric value. and would then access the value and add/substract one (increase or decrease). With your cunnert design, , but does not know , it only knows or . This way you either have to make somehow public (e.g. by public getter) or have to use the friending as you did. C++ features used It is safe to use but it would be better to have some constants and actually share them! The examle would be - looks like good attempt to share, but you'll need to make it working (trully sharing one instance, not creating new ones). But you will also need static versions and probably hide the constructor (to ensure, there is only one and only one , not multiple). The can be replaced by 

(unable to check correctness right now due to not sitting at my work machine, but barring any syntax errors I think that is right) Am I doing something wrong here? I think a static constructor is fine for the singleton pattern as well, but I am not 100% sure it covers all thread safety issues. I don't see how a single lock object wouldn't though. 

is an awful variable name; that underscore adds nothing to it but makes it more annoying to type. Rename to . This: 

This implementation (whether or not you pull out the functions is irrelevant to this single use) will let you manage inheritance properly, but it does have some inefficiencies (setting radius raises the event 3 times, similar to how your implementation does). If you weren't concerned about inheritance you could simplify this by not bothering with the change event and modifying the private members outside of their own setters: 

First of all, you should use instead of and please don't use for template parameters ( is mostly for preprocessor, sometimes used for constants and/or static variables), rather use , e.g. . Your implementation looks good to me otherwise, but you know it can only be used with containers with member . If you want to create it from , then it would be something different (e.g. ). You may find some inspiration in . 

The original code needed more than 8.8s on my old PC, but the current version needs only 0.11s. Full code: 

Style No complains about style. Parts nicely separated (initialize_board, print_instructions, ...), consistent indentation. Good :) ...but provide full code with all the 's (or enums/consts) next time, that I don't have to guess what e.g. is (looks like ). Design and Pointers I see no problem in the design or usage of pointers. EDIT: removed complain about My fault, it is correct. 

But it is even better to be commented out or otherwise removed since you aren't using it anywhere. Similarly: 

Most obvious there is that the statement is exactly not what is actually happening and thus is wrong. Since I would prefer to be explicit I would probably do this: 

(spacing to demonstrate relationship to terrain_map) With this array you can start with any coordinate and convert it into an index in this array via a the function and back with its inverse function. Once you have that you can move up or down by adding/subtracting and left or right by adding/subtracting from the index. Since this array is a padded version of the map, you never have to worry about wrapping around because you cannot move to these fake coordinates that make up the padding. This may or may not wind up actually being faster (it depends on how big your maps actually are and how easy the set of paths were to compute in the first place). code: