swaps the elements of a range so that the elements that are to be kept are at the beginning of the range and maintains their order. The elements that are still at the end have unspecified values, but if is an RAII class, the deinitialization will happen at destruction. Since I don't know what looks like, I can't be sure that this method will work, but there is probaby a way to ensure that it will do what you need it to do. This method has two advantages: it allows to think in term of iterators instead of sizes and it uses an already existing algorithm. In your case, could probably look like this: 

Generally speaking, there isn't much to say and I can't find any obvious flow at first sight. I'll have to comment on small things instead: 

has inheritance By default, has inheritance. Therefore, you don't need to manually specify it every time. You can write shorter (and so more readable) code: 

If you do this, then you should be able to almost always keep the best algorithms between generations, but you will also keep some other ones whose mutations and/or combinations may unexpectedly produce agorithms that are better than your current best ones. This process of "you may have an unexpected talent" is useful to avoid local extrema. 

First of all, you can move the first out of the first condition. That allows you to totally get rid of the last : 

@Loki already covered the most important points, but there are still a few things that you could change to improve the algorithm further (provided you're still interested in this question one year later): 

You have "data" embedded in code in the function . You could use an to help separate the data and the actual algorithm: 

C11 atomic library I you want to avoid the "legacy" functions, one solution would be to use the C11 atomic operations library. It is not widely supported yet. I know that GCC has been working on it, but I don't know if the 4.9 release already implements all the operations. Anyway, had you a compliant compiler, you could use standard atomic types and atomic operations. For example, here are your functions and rewritten with the C11 atomic module: 

You should take some time to give meaningful names to your functions and to your variables (and structures, etc...) as much as you take time thinking about the programming logic itself. Meaningful names improve readability and maintainability of a code base. 

Unfortunately, and are also used to compute the new values of and , so we can't remove them from the body of the loop anyway. If we are to optimize the algorithm even more, we will need something else, for example... More efficient parity algorithm It hardly changes anything since is only used at the very beginning of the algorithm, but its fallback implementation when cannot be used is suboptimal. Actually, the parity of an unsigned integer can be obtained by ing together every bit, without having to compute the number of set bits. The overall ing of bits can be done "in parallel" instead of bit by bit with the following algorithm: 

You will have to write many functions that look the same, but unless you use more macros to generate the code, this is how C works when you want genericity. You should consider factoring out the parts of the functions that are likely to be repeated, such as your error message: 

Subtypes names First of all, I would make sure that the type names in your classes match those in the standard library classes. We can see that some of them differ: 

As it is, I can see an oversight in the function: imagine that you need 5xp to level up. You gain 50xp, you level up, and your xp is 0 again. You just wasted 45xp! Here is the corrected function: 

By the way, there are many other way to implement this function. Your current function uses a loop and therefore performs in \$ O(n) \$ where is the number of operators while you could rewrite it to perform in \$ O(1) \$, with a lookup table for example. That said, it shouldn't be a problem since you only have 4 operators. Variable declarations You seem to declare your variables at the beginning of blocks. It is not needed anymore with C99, you can declare your variable when you need it. You can also declare a variable in a loop and therefore write things like this: 

@mdfst13 has already done a good job reviewing your code, but there are still a few things left that you could change. It's mostly nitpicking, but there's no harm in being a bit pedantic in a code review: 

I created a user defined literal to convert an "integer" literal into an . Basically, the goal is to allow users to write instances without the usual boilerplate. Here is the implementation: 

For the same reasons as @DJanssens, I would like to compliment you for a simple and clean algorithm making proper use of the standard library. That may seem basic, but there are too many people ignoring the standard in the world, so I'm glad that you decided to use it. I only want to add two more things: 

Ok, I tried to compile your code with GCC, and it seems that you actually have errors that MSVC is not able to catch: 

You probably didn't care because in your use case, you passed temporary variables that are destroyed right after having been created. But what you might actually want to do is to create the entities directly in the insteas of creating them, then adding them to the . Therefore, what you really need is an function: 

Note that I also used list initialization for some of the in-class members initializers and for the constructor initialization list. List initialization can help to avoid some problems related to implicit narrowing conversions of values. 

You can provide an overload for rvalue-references to move entities that are meant to disappear anyway though: 

If you want a fun solution: associate every letter of the first word to the \$n\$th prime number ( to \$1\$, to \$2\$, etc...) and multiply together every prime number correspond to the letters of the first word, let's call this result the . Now, for every letter of the second word, associate it to its corresponding prime number and compute . If the remainder is \$0\$, it means that the letter was in the first word, assign the result of the division to ; otherwise, it means that the letter wasn't in the first word and you can increment the difference counter. Of course it only works well with a small alphabet (you can cache the prime numbers if the size of the alphabet is small) and becomes impractical for big words unless you use infinite integers, but at least it's funny :p 

Lazy evaluation Compute only what you need. If something can be computed later without a loss of efficiency, then compute it later. That's what we call lazy evaluation. Take for example these lines from the line-circle function: 

Pre-increment vs. post-increment Depending on the type, may be faster than . It does not change anything for but if your container contains large type, remember that the in is generally defined as: 

Also, you probably want your function to accept C-style arrays too. Therefore, you should use and instead of calling the member functions: 

Exponentiation by squaring Your algorithm for exponentiation may not be the most efficient in the world. While it is "free" at runtime since everything is computed at compile-time, C++ is already known to have long compilation times so using a more efficient algorithm at compile time may help reducing the compilation time. Therefore, instead of the naive "multiply \$n\$ times" algorithm, I would use the exponentiation by squaring algorithm instead. I have an old C++11 implementation, so I simply pasted it below, but you could probably use the new capabilities of in C++14 to implement a better version of it. It also handles negative exponents: 

I created a class a while ago that I named a "Recursion Array". It is a way to create dynamically memoized sequences such as the Fibonacci sequence or the factorial numbers sequences. The concept is to create mathematic sequences defined by recursion by only providing the first values and the recursive formula; all the computed results are internally stored into a vector. That allows to create mathematic formula in a recursive way, without having to care about the access time; each result is only computed once. Here is the base class: