In this case you need the difference between your camera center and your real world mouse point. You can then apply your scale factor to this and offset your camera to make it "zoom" on the mouse position. Semi-pseudo code: 

With so many resources to trace for rewinding a level it is often less processor intensive to simply destroy the entire level and reload all the assets again in their default or mission specific states. Having to reset specific objects involves searching a list of the objects in the scene and then accessing their properties to reset them. Instead of that bullet hole in the wall being repaired by cleaning up, you don't need to caluclate any clean up actions, just delete the whole level from memory and reload it from scratch. This means reloading a level is dones from one state object (a save game file or a mission script) and not needing dynamic caluclations. For consoles this is exacerbated by the loading times involved with discs. It also helps PC games as it can take into account computers that won't have the procesing power to make the loading times acceptable. So for large content levels - Loading a single state instead of calculating and "rewinding" one: 

The main value we need here is the Distance - 4. Setting this to 4 will create a third person camera (Although with units other than a marine, you may need to edit this). 0 will create a first person camera. The same goes for the Target - Z Offset - 1. A taller unit will need a higher value to raise the camera up some. Global Variables A few global variables are needed, the names and types of which are indicated below (Name - Type - Value - (Description)): 

STEP 3: Now we have are scripts, but where do they go? Create an object. Like, obj_screen, objScreen, o_screen, or whatever, and do the following: 

Firstly, you need to use a switch case statement and decide which direction overrides the others, for example, if they press all four buttons, which button should be listened to for input? This gets put in order within the switch statements. Edit: For clarity about the above statement. You do need to use a switch case statement (or similar structural logic) to stop the following from happening. 

You can create an algorithm based of edge intersection. The idea is to draw a line between the two points called a ray. This then acts as a line to test whether the polygons lines intersect. You can do this in pseudo-code: 

There is nothing stopping you from using 2D sprites in a 3D world. Unity has support for 2D, 2.5D and 3D in all combinations of the set together. "I want 3D models in a 2D game." - Fix the camera to a pan only system and use 3D models. "I want 2D models in a 3D game." - Fix the camera to follow a 2D sprite but use the 3D character controller. Try it. If it doesn't work or you have issues along the way, come back and we can help! 

Your assumption isn't necessarily to find the cells but the lines it cross on this grid. For example taking your image we can highlight not the cells, but lines of the grid it crosses: 

I am currently trying to move an object (a square) around the stage in 2D space. Think Cuboid but in 2D platformer space, and vertical walls as well as the ground. The idea is that during each rotation, if any collision occurs, I want the block to move onto that square. For example, if the "player" is moving left, and there is a wall directly in front of him, he will hit the wall and start to move up the wall instead of on the ground. There will be edge cases of the player moving left, no block directly in front of him, but a block one width and height to the left of him. I.E. there is a block diagonally up-left of the player, so when the player moves once more to the left, he will collide with the block during the rotation. When that happens, I want to continue the player's movement up the wall as well. Below is the code of how I am rotation the object and moving it. I do not want to rotate the object around it's center point and move it at along a constant speed. It looks better moving the object with the rotation. The questions are: a) Is there a better way to accomplish what I am trying to do (I'm sure there is). b) Is there a way to get the positions of each corner while the object is rotating? How I am currently doing it, the only static point is always the bottom left of the player. Since I rotate around that point, and when the rotation has rotated a full 90 degrees, I scaleX and move the object to the new position. So the registration point is always at the bottom left. Object info: blocks and the player are both 16x16. Their registration points are bottom left. Game info currently: I just have the player bouncing between the stage boundaries. Hence the moveLeft boolean checks. 

I know that the solution is some "basic" math, but it's been a while, and I'm super rusty. Thanks for the help, if anything further is needed please let me know!! Cheers! o7 

I know this may be a somewhat dumb idea, but is there any "easy" resource that anyone can point me towards that shows how to set up a simple LAN connection in an Actionscript application? I only need to have two clients connected. Nothing extremely robust. This is not an AIR application. It's for a game idea that I have that will need two players essentially. It will be local, so having each other's IP addresses will be an option. So no need to find or detect any IP addresses. Thanks. 

So I have an engine (air application) that basically (for now) is loading some windows on the screen/stage, and you can drag them around. And later on, I'll be able to add other objects onto the stage. How would I export any kind of information (like co-ordinates or sizes of windows) out of my application to an external custom file. And then I would use that file to reload a previous project if I were to re-load the engine. I'm working in AS3/Air and in FlashDevelop. Thanks for the help and time. If anymore information is needed please let me know. Cheers. 

EDIT: Going back on my answers I realized this is not up to scratch and needs the tutorial content. Here it is: STEP 1: Choose the scale you want. Use a view for every room and have the port W and port H scaled appropriately. So, for example, if you were using a scale of 2... it would look like this, in GM's room editor. It is important that this is consistent for all rooms. If you have lots of rooms, it might be easier to do this via code*. I prefer to do it that way, because then the values aren't constant and I can support multiple different scales. STEP 2: Create 3 scripts, screen_init, screen_begin, and screen_end. Here is what goes in each of the scripts... Quote from: screen_init 

If your platforms are isolated use Tags. Each object and prefab in the Unity game world can be interacted with differently depending on the tag they have. 

This will stop you getting stuck in a wall as well as switch your direction depending on the wall face you contacted. What you'll need to do is put 2 collision triggers on a wall to differentiate the direction you jump or run. 

Just to extract an answer from the comments: Zophars Domain shows you a list of tools that you can use for NES ROMs including Graphics Extractor and Inserter which allows you to extract and insert tile graphics from the ROM. To use this you need the Extractor executable and the Inserter. Use the extractor to get the tiles first, edit them in your editor of choice (MS Paint ftw) and then use the inserter to pop them back into the ROM. Make sure you create a backup in-case it corrupts the ROM image. 

To approach the clusters of unbroken shapes you can simply iterate through each tile and check if it is connected to any of the previously iterated tiles: 

And place that object in the first and foremost room of your game, mark it persistent, and make sure there are no duplicates of it. You're done, and now have nice, crisp scaling =D 

Garbage collection will cleanup any handled items so create a or function in your Actor class and clean up any resources used, GC will pick it up. To expand you can keep references to your Camera within your Actor and break the references from there. Creating and calling a method such as could be easier to implement and then when removing the actor you would do: 

To make your character constantly move you can apply a constant velocity or position update on each Update, the below is very crude but will get you started: 

Why calculate the trajectory for the sounds/slow down effects? If you split the act of slowing down the camera and playing effects into sections upon approach to your squishy victim then you can essentially play them on condition of their proximity. This is a great example that comes to mind. The proximity slow down effects employed in Peggle The ball gets close to the peg and starts slowing down. This is actually based completely off proximity, no trajectory involved. If it gets close enough to the last peg it starts a drum roll and slows the game-play down, if it does not hit the peg and goes out of range you hear "Awww.. :(" and all returns to normal, but if it collides you will get the full fledged Overture and winning screen. This is a great technique if you approve of making your player go "Holy cow, I nearly got hit!". If you have a start-up sound/effect for a death cam that will play before impact then simply trigger this when the stone is close enough that even if the player moved at maximum speed in any direction - they have a great change of getting squished. Say your rock is falling and you want to begin the slow down effect to ~4m away from the player: You start by triggering slow-down, move your camera and start focusing on the player - if the rock is then interrupted by other debris then simply exit the slow down focus and your player continues as normal. 

I'm developing a third person 3D platformer in XNA. My problem is when I try to rotate the camera around the player. I would like to rotate (and animate) the camera 90 degrees around the player. So the camera should rotate until it has reached 90 degrees from the starting position. I cannot figure out how to keep track of the rotation, and when the rotation has made the full 90 degrees. Currently my cameras update: 

Everytime I have coded "working" collision, I always went about it very haphazardly and unstructured. If I use Axis Aligned, or Verlet, Or Euler, any or all of these theories, my problems always lie in the edge cases. Let me invent a scenario to better explain my question. Imagine a 2D game, let's use Mario as the best example. So there is gravity, there is acceleration and friction. If the world is being loaded as all individual, let's say 32 x 32, tiles, while the player is moving along the ground, there will always be that edge case of when he happens to be in the dead center of both tiles, and collision ends up being checked on both tiles below him and of course he gets moved based on both tiles' positions. So in that case, I assume I would only want to be checking top block collision (bottom of player) only, and not side collisions, but then when I'm jumping onto a tile, or block, I know I want to check bottom player collision, so I can land, but that doesn't stand for anytime the player is in the air right? Cause what if I'm falling/jumping, and I hit the side of a block or wall, I want to check side collision. And then what if I hit the side of one block, but in that frame of collision when the player overlapped the tiles, he also got into the top of one of the tiles and now gets his y position moved because of it. So the tl;dr version of my rambling is... What's the most sensible way to structure collision? Totally case specific, i.e. only check specific collisions dependant on surrounding tiles, or the movement of the player? Or is there a broad way to keep all collisions being checked (top, sides and bottom of player) and deal with the edge cases as well? Also this isn't language specific, I'm speaking totally in generics. Any code examples are welcome. (Any language) Thanks. (Hope my rambling isn't too convoluted and it makes sense. >< 

MelonJS isn't bad either. And it works together with Tiled for use of .tmx files. You can also layout your level and set up your collide-able tiles straight from within Tiled. 

How do you create an SQL database (I believe it's tinySQL/SQLite) using Adobe Air? I have searched around, and all sites give code, and then explains to wrap it within an xml document, for example here. So I have created this xml file, but no one seems to explain what to do from there. I am also VERY new to database creations and management. So any super n00b friendly help would be much appreciated. Thanks. 

I'm making a 3D game in XNA4.0. How do I rotate a model to face the direction that the user is pressing. I assume I need to set its look at to the direction being pressed, but can't figure out how to do that. Cheers.