But as you pointed out why an host would use the broadcast address in an ARP reply? Maybe because this could seem clever: using the L2 broadcast address all the hosts in the LAN would immediately know a new (IP,MAC) pair saving time. Actually this method is not desired by the RFC (even if they refer to periodic broadcasting): 

all the vlans will be allowed in the trunk link. If you want to control which VLANs are allowed in a trunk link use the following commands: 

A common miscomprehension when dealing with streaming is the relation between bitrate and throughput. Meanwhile your throughput is higher than the bitrate of the stream you are, generally, OK. (ever heard about the Nyquistâ€“Shannon sampling theorem)? Therefore you should first of all try to stimate the bitrate of the stream and than do your estimation based on this and not on the maximum throughput of your devices. Consider also that the worst enemy of real-time video is the jitter. For what concern the problem of the association this is not a problem at all since each AP can broadcast an arbitrary SSID (even hidden) while referring to the same VLAN. Of course go for the 5GHz spectrum since you will need to use, a lot, of non-overlapping channels. I'm sorry but with my limited knowledge I can't suggest you more than this. 

Is there a downside to the latter? I ask because from a transition standpoint, each trunked VLAN will later go away, and this way the subinterfaces could be removed as they go, leaving ultimately the interface with no subinterfaces, and no between-site trunked VLAN's at all, just routed ports and local VLAN's. In simulating these in GNS3 I can't see any real difference in behavior. The former is obviously cleaner looking for a lot of VLAN's being trunked, but the goal is to start removing these one by one leaving none, and conceptually I'm leaning toward the latter to be clear during changes. Yet in many legacy sites when I look at ones with no user data trunked, yet I see VLAN's used to connect switches instead of setting the ports to "no switchport" (yes, in L2 only environments). Is there a downside to using "no switchport" on a L3 switch over private fiber and private microwave to connect sites? 

Half duplex implies that there is a shared medium (in this case the radio spectrum) that is capable to transport one data flow. Usually when an host wants to transmit over a shared medium has to run an algorithm to ensure he is the only one that is transmitting to avoid collisions. In the wi-fi world the alghoritm is the CSMA/CA. When an host "wins" the channel he transmits at the full bandwidth of the channel. What you've described better fits in the Time division multiplexing (TDM) that is not really an access method but is a multiplexing one. 

If you are interested in a more general method for troubleshooting refere here: Troubleshooting RADIUS and TACACS+ 

If you want to achieve a more granular specification you could even think using NetFlow but this represents a more complex scenario. If you need suggestions about products please use the chat. 

I had forgotten I posted this question, and now have similar hardware in hand and the answers above may not be correct. I wanted to post what I know in case anyone else is anticipating this issue. We purchased the WS-C3560CX-12TC-S, which is only gigabit, and those appear as gigabit 0/15 and 0/16, continuing the numbering of the last regular port gi0/14. They are running C3560CX Software (C3560CX-UNIVERSALK9-M), Version 15.2(6)E1 We also have access to one WS-C3560CX-12PD-S, which does tenGig, and it is running Cisco IOS Software, C3560CX Software (C3560CX-UNIVERSALK9-M), Version 15.2(4)E4, RELEASE SOFTWARE (fc2) On that one the ports are numbered as GigabitEthernet1/0/1 thrugh 16, then TenGigabitEthernet1/0/1 and 1/0/2. Because that one is not completely under our control I have not had opportunity to plug in a 1g SFP, but I find it interesting the numbers are different entirely with three segments not two, perhaps because of the separate ten gig section (though read on). Finally we have 3650's (WS-C3650-24TD) running Cisco IOS Software [Denali], Catalyst L3 Switch Software (CAT3K_CAA-UNIVERSALK9-M), Version 16.3.6, RELEASE SOFTWARE (fc3) These I have experimented with, and their ports are numbered: 

One of the most notable feature of NetSnmp is the possibility to extend an OID tree running aribtrary commands using the extend and the pass persist methods. I was wondering if there is such a fuature also in Cisco devices. For example is possible to answer with the hitcout of an ACL? Is so, how to choose the OID? To my knowledge there is not a private branch for custom OIDs. 

When you read "Vlans allowed and active" it simply means that just the active VLANs (the ones you have defined) are allowed in that trunk link. Reference here: How to define the VLANs allowed on a trunk link EDIT: Analyzing the output of the command it's easy to see that it is organized in 4 sections; 

Pay attention that if you want to add a vlan on a trunk link (for example VLAN 100) you have to use the add statement (this is really a commond mistake), for example: 

So while I cannot confirm the behavior with a 3560 (since I have not had opportunity to plug a 1g pim into a 10g capable slot), the 3650 definitely does not change names when that is done, and these are all running pretty similar IOS-XE versions. So my GUESS is that the answer to the original question is that they do not change names or numbers. If I have opportunity to try that other 3560 I will update this. 

I'm going to post this as a possible solution for people to shoot holes in, and/or suggest how to clean it up. it works in the GNS3 simulation with IOSv images. Let me first explain what happens to me a bit more clearly, and the rationale for all the complexity. First for clarity -- I am trying to track against a distant IP, not the next hop, because (a) on DHCP don't know the next hop, and (b) sometimes connectivity problems are after the next hop. There are simple techniques to achieve this if you do not have DHCP -- TRACK the distant item on separate statements with each next-hop IP explicit, and everything works, and you set precedence with distance. There is no syntax I have found to use IP ROUTE...TRACK with DHCP and distinguish next-hop's from different interfaces. All the variations I have found end up in a chicken and egg problem - the track can't operate as the SLA has no route to let it reach a distant IP. You can specify ROUTE TRACK with the interface DHCP CLIENT statement, but I cannot figure out any way to make the SLA use that particular interface's next hop. Same with the verify-reachability, at least with all syntax I have found. If the two DHCP interfaces have unequal metrics, to give one a preference, what I find happens is this (in a straightforward setup): both TRACK statements come up, but despite the SOURCE INTERFACE on them (which is just setting an address), both are going out the preferred default route. Thus when the preferred route is broken (i.e. I stop traffic on it), the route stays as preferred, and BOTH tracks go down. Source interface is not specifying the egress interface This can partially be fixed by giving them equal preference; then both routes to 0.0.0.0 are installed in the rib, and sometimes (but not always) the two TRACK's will use their interface instead of the opposite and operate independently. Unfortunately not always; not sure why, but by observation sometimes both tracks as written above go out the same interface even with equal preference on the then default gateway. So this proposed solution uses a route-map to force the traffic for each SLA (using different target IP's) onto a specific egress interface. If this is done with unequal preference default gateways it also fails -- the route map itself fails on the packet for the non-preferred interface; I am unclear why, it just rejects it and says "normal forwarding". I assume it's validating against the rib? But with equal preference sla6 is forced to gi0/6, and sla7 is forced to gi0/7, and work independently. What I do not know is whether this use of a SET INTERFACE will work generally in this specific cast, i.e. is the packet using the proper next hop, or a proxy arp. I tried looking at it with wireshark but had some issues getting it to run on the simulation. I'll confirm later. I'm hoping it uses the rib for the next hop with the selection of which path made by the route map. But it's complicated, a bit contrived, and I really would expect there to be an easier solution. The other problem is that it only works, as written, to provide preference for the tunnel, not general internet traffic from inside (that's OK in this case as that was not the intent, but I want to experiment further with additional route map clauses, perhaps based on tracking there, to prefer general traffic also). I would sure like someone to provide a better way. And/or shoot holes in this one if it won't work. As above, only the route preference related items shown. PS. All the non-private addresses are simulated, not used in reality. 

The really first step is to look for Radius support. With Radius support you are able to manage the authentication authorization and accounting (aaa). In this case you are not concerned with authentication and authorization since you are, essentially, asking for accounting. Accounting is the process by which a network device (called NAS - Network Access Server in the Radius world) periodically sends accounting messages to the RADIUS server (the aaa server) about the activity of its clients (the supplicants). For example an accounting message could transport information about how many bytes are beeing transmitted by the client during a session and so on. The really general idea is to have this schema: 

Doing troubleshooting with comments it turned out that the pre-shared key was missing on the router. To add this just type: 

Reference: Private VLANs Actually if you have a look at the structure of a Subset Advertisements packet in VTP v2 (used to annouce the VLANs) you won't find any option to announce a "private" VLAN. So it seems more an unsupported feature rather than a design choice. Reference: Understanding VLAN Trunk Protocol (VTP) At the end it seems that this feature is avaible with VTP v3 

Another way is to set the port to routed (no switchport), and then use a subinterface for 10, subinterface for 20, etc. Like you would to a router. The routed traffic flows over the (non-sub) interface, the trunked VLAN's over each subinterface separately. E.g. 

PS. I left out most of the tunnel stuff as this is really about the routing, not the tunnel; the tunnel is working properly when it has the right default gateway. 

During a migration various L2 equipment will be replaced with all Cisco L3 switches and over time traffic migrated to routed subnets instead of trunked. There are two straightforward approaches that come to mind for connections between sites (all of this is private fiber or private microwave so there is L2 connectivity between ach). One is trunked VLAN's, where adjacent switches can also share a VLAN used for their adjacent interfaces. So the single port that connects two sites together over microwave has (say) VLANS 10,20,30,40,50 allowed, where 10 is used just for adjacency, and 20,30,40,50 are legacy vlans that need to be trunked, and some other VLAN's not allowed carry new, routed traffic. E.g. (example just relevant parts of one end): 

It also depends on the host's OS to add in the ARP table a tuple learned by a broadcasted message. EDIT: As stated in the comments the RFC 5227 updates the RFC 826 and it says 

As Network administrators we can modify the bridge priority value. When VLANs were introduced the needing of differentiating the STP protocol raised (Per VLAN Spanning Tree - PVST). To accomplish this the bridge priority value was modified as follows: 

We are still able to modify the bridge priority but this means to operate to the 4th most significative bit over 16 bits. To put it simple: 

In the spanning tree algorithm the process of determining the root bridge is based on the bridge priority (BID). When there were no VLANs (meaning that switches had to deal with only one broadcast domain) the BID was equal to: