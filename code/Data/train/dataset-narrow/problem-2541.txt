All of these are really good answer. But I am a little surprised that no one has mentioned jMonkeyEngine yet. Its java, its shader based, its super easy to begin with, very good documentation, awesome community, fast bug fixes, comes with a game development enviroment(jMP based on NetBeans platform) & its evolving very very fast. I would emphasis more on it because, game development and making a library that someone will be using to make a game is quite different. So, if you want to make a game not a game engine, just jump right in jMonkey Engine with your eyes closed. :) 

As far as I know, its very hard for a beginner to find a publisher unless you have something, that really stands out of the crowd or something really convincing. So, your first choice should be online distributor. Most famous is Steam which of course has a higher entry margin. There are less restrictive distributors like Desura. There is a new Indie only online game distributor emerging, called IndieCity. It hasn't been launched yet, but you can register as a developer and can have access to their api, sumbit game, go through the review system and so forth. It new so it will be relatively easy to have a place for a head start. There are other online distributors too. Google for more info. You can also hook up your game profile in Indiedb. Its one of the largest Indie gaming portal. About BigFish you should check out their FAQ. Update : check these too, 10 alternatives of Steam 

You haven't told us much about, what is this this course you are talking about. So, really there is not much room for us to suggest you the right and/or wrong. Like everybody else I am going to take the generic route. Another thing I want to point out is, you haven't told us about your skill level. Let me assume that you are a good programmer with a fair knowledge on algorithm. 1st Scenario Ok, now I am going to chunk up my answer on different stages. And first I am going to assume you are the main programmer and programmers art is gonna flood in. Most of the time you will be busy in reading/writing code and some sample asset will be ok for your game. When you start developing game you will notice how different it is form solving individual problem found on ACM, TopCoder or CodeChef. As I have already assumed you are no guru level programmer, I am taking this as a granted that you are going to work with different modules(for graphics, for physics, for audio for etc) and gonna marge them in a single framework that suits your need. Here is the catch, most of the time you will be going to good/bad documented/commented code to figure out how they work and or how to make them work. So, here the skill you will be needed is the patience and the necessary skill to going through others code and of course the mathematical knowledge to understand the implementation.(With a good debugging skill.) So, now you answer me, does this 2 month course is going to help you to have any of these skills? If you are a good/moderate programmer already, then you already know this and of course wont be needing any extra guideline(Even if you need, you will be able to pick it up along the way). These are the bread and butter of any programmers life. Give yourself a checkride, Making anything simple using any of the following engines : 

Here is another one. Its very good. Though it has only 4 chapters. $URL$ Another one is, $URL$ This one is huge, slow and high profile. Don't forget to track the $URL$ 

Try to make something, using any of this 2 engines. Upon successful completion you will find out your skill level and demand of any training by yourself. 2nd Scenario Now, let me assume that you are the only programmer and want to make games instead of messing around with lots of libraries. High quality asset is not a low priority here. You want an magic box that does all the boring stuff for you so concentrate on the game logic itself. Here are the options, 

Unreal development is notorious for its learning curve. But I've found it not that hard once you understand the underlying structure. Here you have top notch editor for world building, cinematic editor, particle editor, visual game logic constructor etc etc. All you need to make a game. Unlike OGRE or jMonkeyEngine, here you only have to code when you want to specify a veery specific behaviour to a particular entity. Other then that, most of the things are just drag and drop, point and click. Its fun, but takes away the pleasure of programming. Roughly speaking Unity is like UDK. Most of these are a high level game development kit that just requires some fundamental understand current tech jargon.CryEngine is similar to above 2 mentioned. You have to try out all of them(dont worry, you will feel right at home after a few hour spending with them) Ok, now these game development toolkit are a complete package with different use restrictions. And all of these tools have EXTENSIVE documentation hooked up in their website. Massive Community. Regular Update. Just about almost everything any game developer could ask for. (of course I am talking about beginners) Make anything using these toolkit. Give a checkride. See how fast/easy/comfortable you feel with these. Then ask yourself again, do you need to have a training to get used to with some tools? If you can't even teach yourself a simple tool where everything is almost ready, then I would suggest you to back off from the whole game development thingy. Now ask yourself again After doing any of these 2 tests you will automatically understand your strength and weakness as a game programmer/developer. Along the way you will learn all the necessarily technical knowledge required. At first things might look hard, yes as beginners its always a bit steep to step into the game programming/developing realm. But, trust me it very rewarding when you get a hold onto something that you did't knew half an hour ago. But, if you get yourself enroll into a training(of 2 month only), yes those jargon will sound familiar to you when you read the doc, but that's not a good way to start. Do you need a 2 month training? Not necessarily. Just start with something. Make something. On that way you will find out what you know and what don't. Always keep pushing the limit. And if you really want to learn form ABCD...well, what can I say...Google a bit. Read whatever you find. Just a foot note, don't waste you time reading OpenGL 1 tutorials. :) 

Have you tried the documentation & samples comes with DirectX itself? yeh, its true that MSDN is perfectly capable driving someone crazy. :) Here is one I like: $URL$ there is a book that will be released on July 18 this year, Practical Rendering and Computation with Direct3D 11 (Does ask which way to go, I'm no DirectX guy) 

Games are for playing purpose. Player play the game to win something, to have fun. Every time they fail to do that, they just ask for another chance. They think, this time, this time for sure I am gonna make it. That's the purpose of having life. 

Its not exactly AI you should be looking for. Its (Human) Motion Synthesis. Euphoria is the only product is the market that can do so. Googling, bring up some research result, but they are 3d. So, for 2d I think writing your own might be the only solution. 

Assuming you want to be an Indie game developer : Let's be straight about one thing, Game Development, Indie if you mean, is hard nut to crack. If you want to be a game developer having a wide spectrum of skill isn't enough. You need to be persistent and focused about what you do. Test yourself. Make a simple game. For the sake of making things easy, take one existing 2d game you like and replicate it with minor changes. You will get an overall idea of what it takes. Your previous experience will help you to get started. Regarding your last questions, there is a lot of things you can do to get a job in game industry, in case of big titles. The question is what part of game development are you interested in. If you are unsure about what to do, and you currently have a job, stick with that and make a game that 'you'd like to make' in your spare time. You will know, if your fit for it. 

Just go for this book with your eyes closed! The ILLUSION OF LIFE: DISNEY ANIMATION. I can't emphasis enough how awesome this book is.I am just quoting form wikipedia. 

I would suggest to go for jMonkeyEngine with my eyes closed. Its based on LWJGL. But, starting form pure LWJGL can be quite a lengthy road. jMonkey engine is based on LWJGL and all the necessary things are already done for you. You just need to have a game concept and jump right into programming, which is very easy with jME. As you have mentioned your skill level as beginner in your post, I would suggest not-to-start with LWJGL. Its on Beta right now. But, don't back of. Its quite stable and full of feature. Most importantly its a shader based engine. There are some fixed function rendering pipeline support, but hey, who should pick an old tech unless s/he has a very specific reason to do so? Documentations are absolutely fantastic. Very rich and covering a wider variety of concepts. Anyone with a basic java skill can jump right in. Community forum is vibrant. If you stumble upon any bug, its fixed very quickly. jME isn't just a java library. It comes with a game development environment which is based on NetBeans. All 3rd party tools like, Font Converter, Blender/mesh/obj importer, Scene Editor all are included, they just work! I can't emphasis it enough. There are lots of other java based game engine out there. But trust me your time with jME, you wont regret it. oh, did I mention...jME has just announced a Game contest as its stable release is nearing. join it if you can. :) If you still wish to know about other java engines, just give a knock. 

IndieDB is a good place for indie develoers. They even have a dedicated job section. Paid and unpaid. For beginners, its easier to start with modding, ModDB. Pick a game your like to mod. Then look for existing mods and see if they need someone of your skill. i.e. Half Life 2. Also, note what @ClassicThunder said. You said you only want the experience. So, for ONLY experience both of them are a very good place to start. But, very few of them actually get completed. So, prepare for anything! 

Yes! Since you are asking I am guessing that you are well adopted with revision control system. Its a must! Regarding your second question, there are formal method of registering bugs and you should use it. For planning features I think taking any less formal route wont hurt(when you are working alone) Do those features first that will make your game come alive. Give a sense of how the final game play is going to be. 

I was strolling around XBox development. Apart form buying a DevKit from Microsoft, another thing got my attention is called, OpenXDK which stands for Open XBox Development Kit. From their main site its pretty obvious that there hasn't been any update since 2005 but digging a little deeper, I found that in their project repository is was being updated. Last time stamp was 2009-02-15. Quick google search said, its not actually really on a good place to poke around. Many and MANY features are absent. Being a hobby project I perfectly understand. But, those search results/posts/comments are quite old. The question is, is there anybody who has any experience with OpenXDK? If is, that is it possible to shade some light on this? about its limitations? Is this a mature project? How's the latest version and what's it capable of doing? Or should I just stay away from it? 

Eat3d has a many high quality UDK tutorials then anybody else. Gnomon has 2 good tutorials on level creation and material. Raven67854 on Moddb had created huge number of UDK tutorial on some very interesting topic that the commercial trainings doesn't cover. like , Fracture. Before buying any try these tutorial first. These are from 3dbuzz and now they are freely available on UDN. Also check out other tutorials from 3dBuzz. As always google and look into youtube for specific topic. Dont forget about, UDK forum. Its very active. Hope this helps you to have a good start! 

This question doesn't have any direct answer. It depends a lot on other parameters. You can google to sort out something, but other then that, either this is gonna be a huge comparison among features(which wont make any sense at all) or a straight forward answer to pick x or y. But, in short, XSI's ICE is very tempting for VFX but other then that 3ds Max and Maya is vastly superior. 3ds dominated gaming industry and Maya the movie industry. From my experience its easy to do easy things in 3ds max and easier to do hard things in maya. You can even try out Blender & see if it fits your need. Houdini offers procedural modeling solution. Which is awesome too! Another thing is that you are trying to find out the best solution for almost everything, but differnt situation demands different solutions. For gaming blender can provide an excellent all around solution. The latest installment of Duke Nukem, the developers are using blender(don't know on how extent) for rigging & animation. The basic functionality remains same across all the applications.For modeling you need some basic tool like extrusion, beveling, splitting edges etc etc. All this features are available in all tools. It's just a matter to get used to then. Unless you become a high level user the output wont different for using different software. Its all vague, but if you ask which one is best to start with, I would say Maya. You can switch to anything later on, depending on what the time and situation demands.