For the same reason, do not close the PHP tag at the end of the file unless you're trying to send more content to the browser. In for example, it makes sense to have the closing tag because you need to send the HTML template below it to the browser. But the end of and should not have since you're not trying to send more blank space to the browser. 

Since this is the backend to a login request, I assume that you expect just 2 inputs, the password and one of the others. So why not use the following: 

You're still vulnerable to SQL Injection. Take another look at . This function receives the parameter, sends its contents to the server which in turn puts it straight into an SQL query as the cat IDs: 

There is a logic error here. Remember that the is evaluated at the end of the loop. So on first pass which means and are undefined. Change to This may not matter to your requirements since you use only with flattened arrays above, but it will return a false negative if you use it with arrays that contain non immutable members. Eg: 

Comment blocks of code from the developer/user perspective, not single lines from the technical viewpoint: 

Put the opening brackets on the first line of the block, not at the beginning of the next line, since it is common practise in Java (even though I find it prettier if it is on the next line, since I code C# more than Java). Other Java developers reading your code will be used to it. 

Using for exponentiation is faster and looks cleaner than using . Note that and are local variables here, even if they have the same name as the global ones. Use the function like this: 

There is a way to ensure that: Sorting. Sort your points locally within your hashcode method, first by their x value, then by their y value. 

Note that I also converted the string to lowercase before the comparison, in case the input string is not all uppercase. You might also move that counting loop to its own method and return a tuple with the two counts, so that you can write 

I already added the link to a good implementation of the hash code method above, so I won't go into detail about the algorithm. But what you are doing in the above two lines before the addition is just calculating what could simply be a constant. The compiler will probably even precompute the part. Multiplying the hash code with a prime number (like 23 or 31) should happen before every addition of another value. 

Unless I'm missing something, your and can be used for other operations as well, because you don't actually check that the queries are or respectively. In fact you call when the consuming code calls or so why have all these functions? In and , you accept an argument () that you don't use. Why? 

When your user comes to my evil site and I try to connect to , the browser will still send the cookie but it will not send the CSRF token, so before you grant access you would check for it: 

I recommend a separate class that handles storing and retrieving from the cache. The argument for a separate class is simple: you want each class to have a narrow purpose. If you choose a particular cache driver/server today, but change your mind in a year, you should be able to change just one class -- the one that interacts with the driver -- to update your code. Start with this basic framework for a class: 

You probably shouldn't be doing the work in this script. I'd have a or class that does nothing except receive the request, figure out what it's about and forward it to the appropriate service. I'd have one service for each task: add to conversation, send survey, unsubscribe... Because email addresses are case insensitive, I would make sure that all checks are case insensitive. 

Method names should be verbs (in most cases), so is better than . Even better: or , because is not explicit about what a result of means. All of these variables you assign in the first 7 lines of the method are not needed. Your is not even used anywhere else, so a local variable (without ) would be enough even if you needed the variable at all. In some cases it can be good to save values from method calls into variables in order to not have to call the methods multiple times, but if the method is just an accessor to a member variable, like , the overhead from the method call is negligible, and readability is much more important as long as performance is not an issue. And instead of returning a boolean value depending in the result of a logical expression, just return the result of the expression instead. Checking whether the position is the same () is obsolete if you then check with a threshold anyway. By the way, you have a bug here: occures twice in the expression, perhaps on of the minuses should be a plus. And since and are combined with I assume that you have another bug leading to false collisions in some cases. Here one of the should be a . You can simplify your collision detection logic by just checking whether the absolute distance is lower than your threshold. Optionally you could define the threshold somewhere as a variable or inject it as a parameter. Simplifying the method, I get this: 

In my own work, I put such functions in the class which can in turn call with the right parameters. It still meets your requirement that only the class interacts directly with the DB engine. The class has no information about other objects. It just executes queries and returns results. The core of my class is similar to: 

By the way, this logic should be moved to a function that returns TRUE if the user is logged in, false otherwise. You can extend it with further checks. For instance you could record the IP address to which the session was granted, and if it doesn't match the IP of the request, deny access (to protect against an attacker stealing the session and CSRF token and trying to re-use it from another location). In login.php you have: 

From what you posted, I cannot tell whether you're sanitizing the data before saving it to the database. Hopefully you're not just inserting strings you received from the client into your DB queries (this would expose you to SQL Injection attacks), but are instead using parameterized queries. How do you handle a query not returning any result? For instance when I look at , you call on your results without checking whether there is such a result. I'm not familiar with Laravel so maybe it handles this for you? Be sure to test how your script handles getting a non-existent resource. In your class, you create a new instance of every time a method is called. This is a waste because you will have a lot of parallel connections to your database that you never close and all those objects must be kept in memory. A better approach would be to instantiate a in the constructor of , assign it to a class variable, and use it for all DB queries. Then in the function of , disconnect from the DB. 

This assumes that width and height are the same, otherwise it gets more complicated. Also, you need to use when you loop over the other diagonal, as the direction changes. Doing the same for rows and columns when the width and height might change, you can do the following: 

Add blank lines between blocks of code, e. g. between for loops. That makes your code much more readible. 

This makes the code more readible and consistent. Also around operators there should be spaces, like instead of . Switch-Case Using the switch-syntax you can make your code more readible where you are using many if-else blocks with integer comparison conditions. So this 

Having the type in the variable name is not needed, and rather bad practice. You might want to change the type later, for example to a tuple. Using a plural name (like or ) already tells you (and possibly other developers) that the variable contains a collection, probably a sequence of answers (and a list is a kind of sequence). 

Here we have the same, but even worse: The functions change global state, which can make it much harder to find bugs. Try to avoid that whenever possible. Furthermore, and already tell you that the speed is increased/decreased, and they tell you how much they are changed, which is valuable information. If your only reason for defining these functions is that you can easily change how much the speed is increased/decreased, define variables instead and do . Writing it in uppercase later reminds you not to change it. 

At the start of each function, I set to null. If there is an error, I fill with the details. So the consuming code can check this variable after executing a query to check for errors: 

Remember that server code should never trust incoming data as safe, even if you wrote the front end (website) code. If I wanted to inject SQL into your queries, I would go on your website and watch what legitimate HTTP requests look like. Once I know the URL and parameters sent by your AJAX call, I would craft my custom request but replace the valid cat IDs with SQL. I don't even need to use your website to make these requests to your server so good website code does not protect you. Addendum One simple fix: in ; if your DB field holds integers, use: 

Hint: If you find yourself doing something over and over and over, you probably need a loop. Since this is a login form and that you expect just 1 variable besides the password, don't have so many vars in your script: , , , , , , ... just use . If you really need to cycle through all possibilities build an array and loop until you find the one the user submitted: 

This comment tells you nothing about the code that the code does not already tell you. It just bloats the code and requires you to read more redundant information. When you read , it is perfectly clear that the speed is being set. Comments should tell you why the code does something (if needed), while the code tells you what it does. 

Reviewing the code as it is, rather than the problem with the statistical distribution. Indentation Your indentation is off and thus makes the code hard to read. Everything inside the method should be indented. Also it seems like some of the indentations are differently deep. Indentations in Java are usually 4 spaces. Access modifiers Your method does not have an access modifier (at least not explicitly), so I assume you forgot to add one. Access modifiers are important to control from where in the code the method (or class or member etc.) can be acccessed. Since your method does not have one, it implicitly has the default modifier, which is package-private. This might be correct, but if you just forgot it, use private if the method is only called within the same class. Naming Your variable names are unclear. In the context of one might guess that may mean something like "new growth rate", but without context it is completely unclear what it means. Use longer and more explicity names. Also the names on the right part of the assignment are unconventional, because in Java you usually want to use for variables and methods, and aka for classes and interfaces. Your variable declarations should probably be something like this: 

You are executing DB queries in a loop: . This means that for 4,000 urls, you will query the DB 4,000 times (assuming no unrecoverable error). This is expensive and will slow your script down considerably and lead to a lot of overhead. You're better off building and storing all the commands you will want to execute in an array. Once you've finished your cURL operations, the array into one big operations (look up how to insert multiple records with one query). The docs for mysql_query show that the default behavior is to store results in memory. I suspect that because you make so many queries without closing the connection, your memory is filling up (I'm unsure though since almost all your queries are rather than ). I suggest you change that behavior by passing a as the 3rd argument. This means that after you've processed the result with your script you must execute before making the next query. This has less to do with performance and more with maintainability and scalability; consider breaking out the functionality into several single purpose functions: could return your array, could make the cURL requests and add to the , and arrays (notice I passed them by reference). You would iterate over that function, re-inserting the again urls at the back of the line until you have processed all urls into just and array. Next, would implode all results into one big operation and a single request to the DB