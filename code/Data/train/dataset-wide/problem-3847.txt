Early on in my career I learned that the best possible answer when a recruiter asks me what I'm currently making is to tell them how much I want to be making. I did a similar experiment nearly 20 years ago. At that time I was making around $45k and wanted to jump to $70k - I was seriously underpaid. First recruiter I gave the truth and he told me that the "going rate" for the position was $49k. For the second recruiter I told them I was making $60, and he told me the "going rate" (exact same job description mind you) was $64k. For the last one I told them I was making $70 and wanted $80 but was willing to make a lateral move. I had a job offer two days later at $72. I've posted this before, but salary has nothing at all to do with what you are making. It is a function of what you want, what the company is willing to pay and what the difference is between them. Any manager worth their salt is going to try and talk you down. If they "know" what you're currently making then they'll try to make you agree to something just slightly over that. Why? Because they know that ultimately most people will move for a pittance over what they currently make and it's their job to keep costs down. Unless you happen to be somewhere near the top already at which point they'll try to get you at your current price. Bear in mind that a recruiters first responsibility is to place you; that's how they get paid. It's far easier to do that when you have a lower salary. I don't consider lying to a recruiter about this an "ethical" or "moral" issue in any way for the simple reason that what I agreed to take in payment for my time before has nothing at all to do with what I'll agree to now but yet, somehow, they'll use it against me. 

Generally speaking - when exiting a company you are to turn over all property that belongs to them. In the case of emails, etc, those belong to the company and it's up to them to retain them (given applicable laws). By extension, once handed over, you should remove any, and all, company emails, source code, config files, passwords, etc from your devices. If the company is sued that is their problem; not yours. Well, not yours unless you engaged in illegal behavior. If you did engage in illegal behavior I highly doubt you'd want a record of that anyway. So absolutely get rid of it. 

Client locates 3 example sites that they like. Client identifies areas of those sites they like / don't like. Client gives logo and overall direction for color selection. etc.. 

I'm not certain what the value is here. At the end of the day the pay rate any given employee earns is based upon a huge number of factors. Such as: 

Contractor presentation of 3 layouts. The purpose is to get the structure so we know where content might go etc. Should include the home page plus a content page, if different. -- Client selects one to go with, with possible minor changes. Presentation of 3 color palettes. Using the selected template. The palettes should include what any links look like, header strips, etc based on chosen template. each color palette should be internally consistent. -- Client selects one, with possible minor changes. Presentation of template in colors chosen with logo. -- Client might make one more round of minor layout and or color changes at this point. Delivery. 

to allow the company to determine whether or not they want to hire you. to be able to have a solid reference for when you seek further employment. 

Given that situation, what you describe is the normal outcome. There's a reason most places use a more rigid structure - proper allocation of resources. Now, it's highly unlikely you can change this aspect of the company as it would have to be driven by someone with the power to enforce it. So, what you need to do is brush off your political skills and start meeting with the people in each team that make the tech decisions. I wouldn't try to do this as an on site meeting at first. Something will always come up where Bob or Susan just can't make it week after week. Instead, try to schedule a weekly lunch. Keep it informal, at least at first, and encourage them to talk about their existing and upcoming projects. If your really savvy, maybe you can convince people further up the food chain to actually pay for the lunch. A "free" lunch has a way of making sure people actually show up. 

First step in resolving most employment situations is to talk to the manager. So have her ask the manager how she can be assigned more hours. She can even state that she was expecting at least 12 hours a week. Either the manager will do something to increase the hours or they won't, but she will never know until she asks. Regarding explaining it to other potential employers, there really isn't much to explain. Just stating that the current employer doesn't have enough business to support the number of hours she is able to work is more than good enough. No one would consider that to be a negative thing. 

Seems to me that because those people report to her then she should not just have input on what those employees are doing but actual direct control over what tasks they are performing. 

Who knows, maybe Joe slept with the manager's wife and the current situation is the most civil and private way to handle it. I'm not bringing this up to say that he has, rather that there is often far more going on with others that we simply aren't privy to. Regarding the "paying the bonus is cheaper than losing Joe" part... Companies lose key people all the time. They'll recover. Given that you think Joe deserved his bonus - which I question why you were aware of it anyway - and that he did not receive it, I suspect there is far more to this story. As Hilmar said, you've done the right thing by talking to your manager. At this point it's time to let it go. *note: Changed my mind. You really shouldn't have talked to your manager at all. Joe made it clear that it wasn't your business by declining to discuss it with you. You should stay out of it. 

We recently interviewed a candidate that had been out of work for 6 months. I was hesitant to even talk to him, but he was referred by someone I know. The position I was hiring for was in sales. During the interview I asked him point blank why he wasn't currently employed. His answer was that he just wanted to take some time off. My gut reaction about this was IF he was financially stable enough to not have to work for months at a time then he may not be motivated enough to perform in a job whose largest piece of the pay puzzle is commission. I decided not to hire him. For some positions it might be okay to just take some time off. For others it's akin to a career death sentence. 

Your degree, whether a PhD, Masters, Bachelors or lack thereof is rarely a qualification for R&D jobs in software development. Experience and actual ability is a far better discriminator. Those two will help you either make a name for yourself or lead you to starting your own business and they take time and effort. 

How I would handle this situation: I'd call that team into a meeting. I'd list the behaviors that I saw as detrimental to the company. Then I'd pick the worst offender and fire them right then, in front of everyone else. After that person was walked out, I'd then resume the meeting and explain what my expectations going forward were. I'd then put all of them on notice with a Personal Improvement Plan. That same day I would list several open positions within the company on various job sites and attempt to hire their replacements. Don't try to hide this - it's yet another way to let them know you are very serious. There are several possibilities for what would happen after that. 

One of the things that a new person entering any industry needs to learn is humility. The statements "don't trust the internet" and "experience" are actually completely valid whether you know that yet or not. More to the point, you appear to be butting heads against people that have far more experience than you... They simply won't like a much younger person getting in their face. In their eyes, you don't have the "battle scars" that comes from spending an unholy number of late nights beating your head against a wall trying to fix something that just should have worked. You probably haven't sat there for hours looking at a piece of code such as and been baffled by why the program insists that x actually equals 3. Once you've done this, not just once but over a period of years, then you start to figure out that the internet is often wrong. That the ideas and concepts presented might be good solutions .. but in very specific situations. I know I've seen a large number of junior guys rushing off to implement the latest thing they've read about, often written by some other junior guy, without actually understanding the consequences. I've also spent quite a few late nights trying to salvage a project when I've been called in to clean up their mess. To that end I've developed a policy of "if you can't explain it in plain language and convince me that this solves the problem in front of us then you don't understand it enough and therefore it doesn't belong." That said, the key here is really in how you approach things. Telling a dev who has been around the block several times that they are wrong will just never work. Trying to justify that with a link to an article or even saying "Martin Fowler said..." again doesn't work. Experienced guys learn to judge a piece of code or an approach on it's merit, not on who the messenger is. Instead, you need to approach this from a totally different direction. Namely, have them teach you why your idea is wrong. This is essentially reverse psychology and in asking them to point out your deficiencies (which they will happily do) one of two things will happen. Either they'll realize that their approach is bad and therefore end up agreeing with you OR they will educate you on why you're wrong. Both should be welcome situations. Look at the following conversations: Bad Way