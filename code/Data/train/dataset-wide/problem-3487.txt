I'm using an SCCM 2012 application deployment to install software. The specific install type is scripted installer as SCCM kept failing for exe validation errors. The script is powershell and successfully installs the software even when executed by SCCM. The problem is that SCCM only sees the return of 0 from the completion from the script. I've tried , , , and just a line item with the code for a soft reboot. None of them seem to be read by SCCM as the app execution log captures a return of 0. How do you output return codes from powershell so that SCCM can interpret them? 

This will effectively pause the script until the job completes. It also handles the possibility that your job was never created in the first place (in case of error or other such reason). Since your completion message line trails this code your completion message should be at the end of your log. 

I don't see any logged cluster errors or notice any failover activity while this report is generated. Microsoft technet isn't exactly clear on this either, but they do infer that the behavior is inline with what I'm thinking it is. See this excerpt (emphasis mine): 

Summarily, what you want to do is add a calculated property to the output. I'm being slightly lazy by valuing all properties and not your chosen few, but you can adapt it to your needs. Of note you should try to always output objects to leverage the true power of Powershell. 

Mark, I had a lot of fun tracking this down for you. I can totally see where your line of thought is, but you're asking the wrong question. The question should be "Why can't I establish a 'servermanagerworkflows' session on my machine?" If you look in the and open the module and jump to line 383 there's an entry where Microsoft is intentionally trying to create a local session using the configuration. After the session is instantiated the magic happens in the following Try/Catch/Finally blocks. If you ran in a PS prompt on it's own, I'm betting you'd get the same error. To reinforce this, run and I'll bet you don't see as part of the list. So, next step is to get you the session config you need. Run cmdlet and agree to the prompts. If successful run again and see if the workflows are listed. If they are, you should be good to go, or at least generate a new set of errors. Cheers! 

PSCredential encrypts the string using that machines private key. The encrypted data has the same level of protection at rest as it does in motion. The level of encryption is dependent upon the certificate being used, so check your environment's certificate template for machine auto enrollment (if you use it). Alternatively you could just look at the certificate on the machine in question. Having said that, the string can easily be decrypted with a powershell one liner (using .Net not the built in cmdlets). All someone needs is access to the system and the file. I strongly recommend you look at other alternatives, like a locally hosted password management tool. 

Let me know if there's any parts of this you want me to explain. I'd like to call out my casting of to the . That basically tells the system to issue the command and move on. I think you were getting hosed when it was waiting for 50 operations to report a status of some kind. Also note the unique scoping needed inside the block. I also decided to make it so that it could accept pipeline input from . 

Last Time the System Booted My personal favorite is to use WMI and Win32_OperatingSystem properties/methods. Here it is as an easy copy/paste one liner: 

All of the tests listed above are part of the storage category. As such it's typically recommended that the storage tests be avoided on a server in production. To exclude these tests run the following command: 

The command is actually enumerating the methods and properties of the object created by Get-Service as well as it's TypeName. You can see the TypeName immediately after entering the command. That TypeName corresponds to a .Net class which you then google (no really). You have to drill through the msdn page a bit which requires a basic understanding of object oriented programming (I know, another google). Eventually you should land on the ServiceControllerStatus Enumeration page which lists all the possible value descriptions. The values returned are actually integers, but .Net is kind enough to turn those values into something we can understand. Hopefully if you practice this process a little, you'll be able to apply this same method to find info on other objects in powershell. 

It looks like you're trying to combine properties from multiple objects onto the output stream. I think the best way to accomplish your goal is to leverage calculated properties on your pipeline. However, in your code example is an undeclared variable which may be the leading cause to why your process isn't working. Though you've likely cherry picked what code to show us (generally a bad idea) so I'll assume you're trying to integrate the MBX DN with your dataset. 

The creators of Powershell at Microsoft wanted to create a single new product that would replace the cmd shell and vbscript. One of the primary goals of Powershell was to standardize cmdlet naming, call site proceedure, switch naming, and output (as an object). Anecdotally, another primary focus was eliminating the security flaws of vbscript. By default Powershell cmdlets are Overloaded so that the same example function can be called like so: 

The properties you're asking for aren't included in the default output of 'Get-ADComputer'. Update with this: 

The above is great except that as soon as someone calls the variable becomes a standard type (whereby add and remove methods don't work). I tried methods of changing how I declared the preset values. It appears that the act of pre-populating is converting the type to a regular array. I figured this was because I was using with the presets so I've tried as well. This doesn't work either: 

Windows does not report on the TcpExt properties. The reason is because Windows does not TOE by default. You can verify this by running and the offload column will likely be . In contrast, Linux uses TOE (TCP Offload Engine) by default and tools are built to query the TcpExt properties. The data you're wanting is completely dependent on the driver built for the OS to expose that data. There also needs to be a Windows provider created so you can query the data (could be a driver assembly). In windows open up the Device Manager and check out the advanced tab of the properties to the Network Adapter. You can see there what types of data are supported for collection in windows and whether or not it's enabled. I realize others have advised that Windows cannot do it by default and have recommended other tools (like pcap). Though I thought you'd want to know why. 

I presume your certificate requests are made using a template. If that's the case then use the GPO to enforce auto enrollment. You'll also want to ensure the template ACL has and marked for either domain computers or domain users (or whatever acl object, depending on the intended audience) There's a user config and computer config policy to leverage depending on whether or not it's a machine cert or user cert you're trying to push. Enrollment begins as soon as when the policy is pushed (usually about 15 minutes) after the GPO is linked and enforced. 

I read over the MS page on this and it wasn't clear on whether the pre/post scripts can help control the CAU process. For reference: Advanced Options and Updating Run Profiles for CAU 

In your post you didn't specify where your user list is coming from. It looks like you're getting the users of one group and seeing what else they're a member of. It's largely irrelevant to the solution so I'll assume you have a list of and go from there. What you want to do is combine properties from two commands into a single output stream. This can be accomplished by leveraging Calculated Properties like so... 

I think you're looking for the property of the mailbox. If you set this parameter to , the read status won't be displayed to senders who view delivery reports for messages they send to this user. To change the parameter run this: 

When viewing cluster disk properties in Failover Manager or the physical path to VHD's in the settings of a VM in Hyper-V Manager the location is displayed by GUID. Is there a quick way find out which GUID is mapped to which drive letter with powershell? 

We're sending two controlled structures (by structure think object type. In this case they're both of the type ), as indicated by the parenthsis, to the function. It hits the eye wrong does it not? I hope this helps with your understanding of why it's against the grain to use parenthesis when calling functions and cmdlets. 

I added a so that this code wasn't dangerous for the "copy\paste\run" folx. Now, you'll need to adapt the , , and add the variable, but the above template should have you going. 

DHCP Server Not Offering to PXE Client BACKGROUND: I'm in the process of adding PXE services to an existing SCCM 2007 server. The SCCM server is separate from the DHCP server (Server 2008 x86) and did not have PXE services or WDS installed. I added PXE services in the Config Manager before adding WDS as a role. Because DHCP is on a separate server, I did not make any changes to DHCP Options (there is not a current 60, 66, or 67 configured). The WDS is configured with both a boot image (ripped from the Win7 install dvd and an install image which was created by someone else). SCCM has a TS configured and advertised to the Unknown Computers collection. The DHCP server is configured for both DHCP and BOOTP requests (I added BOOTP as part of my troubleshooting, the default lease time is set to 5 minutes). It also has NAP enabled for the IPV4 addresses but disabled for this SCOPE. My host, the VM, the DHCP server, and the SCCM/WDS server are all on the same subnet. Juniper routers move the packets. I'm testing PXE using a VirtualBox machine configured to network boot and it has an empty dynamically allocated disk attached. Wireshark is installed on both my host computer (running VirtualBox) and the DHCP server. PROBLEM: When the VM starts it performs a network PXE boot. I can see the discover request by the VM in Wireshark on both my host and the DHCP server. However, the DHCP server is not responding with an IP offer. If I could get some guidance as to where else to look for an error, or possibilities as to why it's not working, I'd appreciate it. EDIT: The dhcpsrvlog does not record an event regarding the request for an IP from the pxe client. 

It's important to note that if is run without usage of either the include or exclude parameters, it will run those tests. While the above listed tests will trigger a failover event, the following tests can impact performance. They are: