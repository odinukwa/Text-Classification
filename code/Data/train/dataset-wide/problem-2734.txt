A minor bug: You get an for an empty list in . You don't have a comment stating you need to input a list containing at least something. Consider returning and adding a comment. 

Right now, it doesn't add a whole lot, but you can add things like or . Then when you're in your IDE programming, it will tell you that the first parameter is "the treenode to start the search at" and the return value is "containing the required data, or a new treenode containing -1 as data if it couldn't find the node". And this can be really helpful. 

The reason it looks 'cramped' is because you are putting some of your resources in code. This section, 

For the partitions, you could perhaps simplify by making a new constructor for that takes as parameter: 

Now that we've merged the two for loops we see that we store data in the array... but never use it afterwards! So all we really need is a single int value. 

And in doing so, all the code in the function is code that's actually related to the thing it's supposed to do. 

This seems like a place where you would have to add new functionality all the time. Is there any way you could implement a strategy pattern here? 

"backgound task", "procude a Foo", lower-case y for "you will then be able to invoke" ... and that's that it's also pretty good, save for those few typo's. If there's one thing you could do to improve the code, I think it would be providing error messages for . Here's an exception thrown from : 

I'm assuming your code works. If it doesn't, it's off-topic, and your question should get closed. Duplication 

I'm very much used to enumerations a la Java, where each value in an is a distinct object. You can call functions on these objects, and they're generally treated as most normal objects. Except ActionScript 3 doesn't have enumerations. So... I had to create my own. My hard requirements: 

This rewrite doesn't really help so I'll explain: What you have made is something that keeps track of ticks. That's okay. But to then use the tick timer in the calculation makes no sense - you already HAVE the time you started the tick - it's when you entered the loop! Your GameTimer is useful for doing things like showing debug information in graph form, or finding patterns in lagspikes. But for this usecase, just a single long will do. And and are wrongly named. It's not a pointer to the first and last item in the circular buffer, it's a pointer to the first and last frame of the past second. This should be encoded in the variable name. 

You have a space between the function name and the parentheses. Finalize your arguments if you're not gonna do anything with them. Final your locals if you're not gonna do anything with them. 

Okay. So is it threadsafe NOW?! Hmmmm... well... no. Here's a new situation - an external thread stops the application, and then starts it again, but meanwhile the application thread ALSO wants to stop the application. Basically like so: 

This would be one of your consumers. They're doing... mostly the right stuff, but on too low an abstraction level. I think they're on the wrong side of the counter! All this stretching, adding ingredients, and baking is part of the PizzaBuilder's job! The PizzaLover, instead, as the client, defines the recipe. 

Don't lock on non-final objects. The reason for this is that something later may change the variable. I might say and then the blocks fail. 

And done. No decorator needed. Decorators are for when you need to take regular objects (which may be complex!) and apply special operations to them. Your coffee is so simple that the main work IS keeping track of the ingredients, and using Decorators for this purpose is just plain wrong. I mentioned that the order of ingredients might be important, in that case the becomes simply and listing ingredients and summing price simply become iteration with summing. There's a few improvements that could be made in my example, such as using a StringBuilder, or perhaps functional style to sum the price. You could also argue that making an enum is programming data into your application, and that you should use external resources. All these improvements could be made, but in the end, you do not need a decorator here. 

Hmmh.... and ... they're both derived from the same variables... What if... we set new values for left and right at the END of the for-loop? 

Use , it's more descriptive. Get rid of the comment or write WHY. Right now it could have been too, and that doesn't help anyone. Maybe consider using as you don't reuse this anywhere. Your maxElementOfArray function returns Integer.MIN_VALUE. There's no such thing as a negative width. Return 0 instead; the top level contains 0 items. There are no other levels. You perform three traversals of the entire tree; is one, is two, is three. I'd combine and . You'll have to rewrite a couple things for this... but I believe I gave some pointers already. 

You don't assign further values to these variables. I suggest making them . Perhaps even moving them outside the function. Typically, constants are placed near the top of the class, above the other variable declarations. Assuming this class isn't a singleton already, I'd make these variables s. This because there's no reason to have multiple references towards the same string. The reason you put it at the top of the class is that in the event you want to change the value, you don't have to go searching for the definition. Comments 

It's been alluded to in the comments by others already, but I feel it needs mentioning as an answer: Your variable naming should be improved, and some comments would help. In your entire code I find exactly 2 comments: 

You have on your of the Calculator, but you don't actually read from it until the thread has finished. You could remove it, that way the synchronization on the variable would be removed. 

Wrap it in . Your main code should read pretty much as a state machine; "if the next node is of type A, pass it to the type A handler, if it is a type B, send it off to the type B handler", etc. Maybe get used to using different words to refer to a single "condition" and multiple "conditions". Personally, I used and when I needed such a thing in my own code. 

You should get in the habit of doing the following: If an if statement has a body of setting something to a boolean, and an else body of setting to the negated value of that boolean (e.g. ) then don't bother with the if statement and directly assign the value. If an else statement only contains an if or an if-else(if-else) chain, pull the inner chain up a level in scope. Specifically: 

In the you could handle the exception. Then, in main, you could say "well, if input is still null, we didn't instantiate properly and we ought to shut down". 

Next, further reduce the duplicate code. You can see that if is 2, we'll add 2 to index. If is 1, we'll add 1 to index. We can just add to index. (We're reducing duplication of constants here) 

Hurray, synchronization! Also, I just murdered your throughput (for every mail acquired, a thread must get a lock and free a lock). Clearly, this situation doesn't work. ... additionally, I just realized that you have this: 

This method sets the bitmap to a bitmap pointed to by the supplied ... or, in the event no is supplied, it sets the bitmap based on the current ! That's undocumented behavior. 

That's no , that's a ! So why are you calling it a list? Also, the rest of the documentation here is useless too. This entire interface would have been better off without method level javadoc. 

If you make enough use of descriptive function names and variable names, eventually the code will read like a weird form of English. 

One thing I quickly spot is this: If your second while loop completes naturally instead of via a , you will also exit the first while loop. Thus the last instruction executed, , is unnecessary. Let's look at the execution paths: 

Like here, I don't know what the VBA call is, but isn't there some version of MAX that you could use? Or here, 

Your relies on , which doesn't take variable names of functions into account. If I make a function with an argument named , your code fails to identify the function as a function. For example: for some kind of data structure object (multi-dimensional array?). You call , hit , and because the line contains the word (maxDimensions), it's seen as a variable and not a function or procedure. 

Exceeds what? Comments should be clear and precise. Comments should detail the why as well. Any interesting differences in the working of your code compared to similar code (how does your SList differ from ?) could also be valid comments. I'd add a comment to your class stating that it's 1-indexed; that is, you start counting at 1. 

Comments should describe why your code needs to do what it does. Comments that describe how your code works should only be used in complex code segments (and even then people argue you should just clean up the code instead). So a comment like 

To me, this is far more readable. You have a bit that creates the , a bit that creates a , a bit that adds the and the and a bit that returns the textfield. Heck, you could even extract them: 

This could have been in your getter - there is no real need to store this in memory. What does it mean if you have a of "A1234" with the letter "A" and the number 2345? It'd be inconsistent. Your design doesn't allow this inconsistency to occur (through the use of a single constructor and ), so it's a minor point, but I don't see the need to have this variable. 

This makes the logic as such: If not conditionA, then functionA. If not conditionA or not conditionB, then controlA is true. If controlA is true, then functionB. Now, if attribute order is important, then we must implement "if not conditionA then functionA" first. 

The method signature mentions , and . The comments above the method describe , and . I think you'll be able to cut most of the comments away; but documenting what is for would help. Looking in greater detail at the comments you have... 

Okay, and now a more serious answer: A LinkedList, no matter if it's doubly linked or not, always is gonna require two things for : The object to insert, and some means of specifying where it goes. There's no way to circumvent this. Best you can do is take a Node (or , in your case) and give it an method. 

"If condition is true, return true, else if condition is not true AKA false, return false." Such statements can be replaced with "return condition". 

Don't use . It forcibly shuts down the application. Nobody likes that, because there's nothing they can do at that point. Plus, from the user perspective, they hit "new item" and POOF the whole application is gone. No error message, no possibility for display of instructions (program contains bug! Please look on your desktop and email this file to us!)... 

This is pretty much the same thing twice. If you could make and print "xxx's move: " then you'd be pretty close to merging the two sections of code into one... Specifically, the parts that are different are... 

You should put most of this (the switch statement specifically) in the Colors enumeration itself. Something like "fromNumber", which takes the random number and returns a color. Same goes for this section: 

is returning internal nodes. You want to return the value instead. Don't expose your internal nodes. Use exceptions for indicating pulling from an empty queue.