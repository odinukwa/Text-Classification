This looks really good to my eyes. You're decoupling, setting good boundaries, using great style and meaningful names, and it seems that you did the simplest thing that works (to me at least). This is the only thing that strikes me as being odd. 

It's not an entirely thorough review, but that should give you a good start until someone else comes along. 

There's not much else to say. You generally write very readable code, so I won't bother with any nitpicks about style. 

As an aside, perhaps writing your own interpreter from scratch isn't the best introduction into language design. Have you considered using a lexer/parser generator and implementing an interpreter from the AST & parser it will generate for you? I think you may be more successful writing your own later if you learn to use one of these tools first. There are lots of them out there to choose from. 

Now, we can move onto . Kinda... You're immediately recreating the target range at the beginning of this sub, so just pass in as a range instead of a string. That changes the event to this: 

Now, I say this is naive only because we don't have to check each number up to . We only need to loop up to the square root of j. If j isn't divisible by a number less than or equal to its square root. It's prime. Go ahead. Go check. I'll wait. ... Pretty cool, eh? So, your inner loop would end up looking something like this. 

You have some clean looking code there, but there's a huge problem with Service Locators. They're hidden dependencies. If I reference your class from elsewhere, I'm going to be really confused about the exceptions I'm going to get when I try to use it. 

It's more lines of code, but completely maintenance free if you should add another ComboBox. I just noticed that all of the class variables are . Why? These should probably all be private. I can't think of a reason to expose them outside of the class. As I briefly mentioned in the comments, is a bit clunky. It has one of two possible values, 1 or 2. Magic numbers are bad. Avoid them. Normally, if there are only two possible states, I would recommend a boolean, but that doesn't feel quite right to me here. I would create an Enum and change the variable name to . 

Okay, so here's an actual performance improvement for you. Copy/Paste is slow. Only use it if you're copying a big range of data all at once. Here you're copying one cell at a time to a new location. 

I was wrong about that, but that's because it wasn't clear what was going on. Why wasn't it clear? Lack of brackets. 

The declaration for is a bit verbose. Prefer the keyword when the type is obvious. (This use isn't entirely obvious, but certainly good enough.) Brackets. Use them. Always. 

I see no purpose in initializing variable to . Simply declaring them would be cleaner in my opinion. 

Hungarian notation can be done right, but using it to tell yourself what datatype a variable is is not doing it right. Even if you must just insist on using hungarian notation this would not be right. 

Why do you have a method that returns itself as its base type? It should be up to the client code to cast this object, if necessary. I would remove that method. It's superfluous and "Ya Ain't Gonna Need It". 

Well, it seems you almost got it right at least. It seems that implements , so you should probably be calling it's method here rather than setting it to . I don't have enough domain knowledge to say whether or not it's necessary to call , but if it's implemented sanely, I doubt it's necessary. Never mind. explicitly implements . That looks good. 

Which is a start, but we're calling to send us to the next iteration in three different places. That's not very DRY is it? Also, some people don't care for . That's okay, we can solve those things by extracting a method to validate that it's okay to add the object to the result. This greatly reduces the amount of nesting going on here. 

I would also recommend changing the name of the repository method that returns a person from to . As it is currently, the method name gives us no clue what's going on. I had to figure it out from context. 

I'm going to take by "shorten", you mean "remove this duplication", in which case the answer is yes. Extract an function. Give things some breathing space while you're at it. 

I don't care for empty quotes designating an empty string. It should be replaced with . It simply clarifies your intention and leaves no ambiguity that you perhaps forgot to put something in the quotes, or maybe even meant to put a space in there. Otherwise, I feel this is very simple and solid. 

I would create a interface and classes for each type of shape. Each different shape class would then implement an and a method specific to that particular shape. 

Which makes me want to mention that I really hate Hungarian notation. I like this mixed and reversed notation even less. The IDE will tell you that it's a , but if you really just need your code to spell it out, just spell it out. At least be consistent. 

I have a need to turn various structures into byte arrays to be sent over serial port to another machine. I created generic extensions to turn any structure into a byte array and from a byte array back into a given structure. I've not used the class often, and I'm uncomfortable manipulating memory on this level. 

To make it worse, the "comment" in the region doesn't match the method. One says it's a while the name of the method is . I understand why. You didn't want to muck around with a namespace conflict, which is okay. Although, I might have just called it and been done with it myself. is a noun, but you're taking an action here. I digress however, because there's also this: 

I've been working on a scheduling application and I have the middle tier completed at this point. It's not changed in a few days, so I feel it's ready for review. I have just this one routine that feels dirty. It's definitely verging on arrow code, but without short-circuiting, I'm not sure how it can be improved any farther. My class wraps a collection of and provides methods to add entries, remove entries, and cascade changes (as well as a way to listen for changes to the underlying collection). When is called, the collection of entries is searched for dirty records. Those records are then cascaded to the corresponding records in future Cycles. A number of conditions must be met in order to ensure changes are being cascaded to the correct future entries. Currently, I have sacrificed an amount of performance for cleaner, more readable code. How can this method be improved? 

It's good to use the keyword when "newing up" variables as you declare them. The type is obvious and it will allow the type to be changed more easily should the case arise. 

This catches every possible exception in the world, including potentially fatal memory errors. Be as specific as possible when catching exceptions. What specific exception would you expect to happen? Catch that instead, or none at all. The only other thing I want to mention is that is a poor name and the variable itself is kind of useless. Take advantage of the statement. 

Refactoring The first thing I notice is that there are a lot of similar variables declared and that the code is deeply nested. These are indications that the code is doing too much and is in violation of the Single Responsibility Principle. It will be our goal now to simplify the code. There's a quick hit right at the beginning. There is no difference between and . We can get rid of entirely. While we're at it, let's go ahead and extract a function for . You'll find yourself needing it a lot if you continue to write vba code. 

I think it's important to remember that is not always the best name for generic types. This is definitely important to remember when you start numbering them... 

It could be YAGNI territory, but I'm a big fan of getting away from primitives as often as it makes sense to. 

The following input from a file will bring cause the check to return , likely bringing the rest of the code to its knees. 

I would like to commend you on a very nice use of recursion though. While this could be done in a loop, the stack for this one shouldn't grow large, and the recursive way makes for cleaner code in my opinion. 

You can also save yourself an entire line of code by simply subtracting one from that value right now instead of waiting. Keep the comment. It's a good one, but don't try to right align your comments like this. The second it gets copy/pasted anywhere you'll lose the alignment and waste your time trying to line it back up. 

I'm not sure this will work for you, but consider replacing or duplicating the formulas in your "12" cells with an call. It's a little tricky to avoid runtime errors, so I suggest reading this. It might look something like this. 

That's all I've got. This is pretty darn impeccable looking code as far as I see. Pretty cool project too in my opinion. 

Replace every instance of with an instance that gets injected through the constructor. If you need it to be short lived, pass a factory class instead. The number of arguments each ctor takes will grow as you go up the chain towards your composition root. That's okay, and in fact, is a Good Thingâ„¢. Don't pass anything from Ninject to anything else. Once you get all of your dependencies up and into your composition root, then bind them all with Ninject. Let the IoC do it's magic and recurse down the dependency tree. 

There are tests!!! +1000 I'm very excited to see you using tests, but do yourself a favor and learn to use a unit testing framework (MSTest is built into Visual Studio.) Some would say keeping the tests in the same class as the code gives the class 2 responsibilities. 

If you don't know much (or anything) about recursion, I recommend this video from Computerphile. It's a very good primer on the topic. 

The third benefit is some code clarity. You may or may not realize it, but you're relying on the fact that the object's default property is it's path. 

You really shouldn't be creating dependencies in your constructor. This can make code a nightmare to test. Thankfully, this is pretty easy to fix. 

I changed the parameter name to make it a bit clearer. Speaking of naming, it's a convention in C# to PascalCase method names. You've camel cased yours. It's consistent though, so I can't gripe too much about it. To address your actual question though, typically yes, you will pass your view model to the controller as you've done here. However, that's because the controller is typically updating the view. That doesn't seem to be the case here, so the thought comes to mind that it is better to only inject what you actually need. I like that you've used polymorphism to simulate the state of an object, but it makes me wonder if what you have here is really a view model and not some other concept. 

But that's more code! Yes. It is, but we're not going to leave it this way. We're going to extract methods that take in the data reader and return new business objects. 

You should use a variable to store the result of this at the beginning of your query and call it each time you would use it later. Something like: 

But really, never mind that because the real slow down here is opening and closing all of those workbooks. I recommend looking into connecting to those workbooks using ADODB recordsets. That should significantly speed up the process. 

So it turns out that you seem to have a lot of full joins in your query. I can't offer much guidance on how to change it without knowing your table schema, but you should absolutely think about why you're using them and if they can be changed to another kind of join. I'm sure it's a point of expense in the query plan. 

However, this would be terribly slow if there is a large amount of data to process. It would loop through the entire destination once for every call to . 2) Move everything inside of the outer loop. There's no sense in looping from over and over again. The code gets DRYed up a good bit and sees a performance boost by moving the logic inside. 

So... Yeah... Let's forget that and use to create a global default instance. Just like you've already done. Only instead of a property that returns a new instance, we'll use a function. I like to call mine . 

Why not just split on ? The Replace feels unnecessary here. Actually, the more I look at this, why are you splitting? Split returns an array, but you're not making an assignment here. I really think you need to decide what this line is supposed to do. 

I love that this is sealed. That's great. Security sensitive things should be sealed. But again, storing a for the life of the class defeats the purpose. Now you're at the mercy of the garbage collector. When you do need to access the actual value, you want to make sure that the unmanaged copy is removed as quickly as possible. Here is an example implementation that I submitted to the LibGit2Sharp project. 

It seems that we're shooting for one fizzbuzz question for each language. I'm sick of FizzBuzz, so I'm killing two birds with one stone. This code works in both vb6 and vba. My goal here was to write a flexible Fizzbuzzer; one that could double as a Hello World program (of sorts). Is there anything left to say about it, or are we all FizzBuzzed out? FizzBuzzer (Standard Module): 

To clarify. returns as soon it finds an element, whereas has to iterate over the entire before it returns. Note that this isn't true for . still returns early when called on a , but so will because a list keeps track of how many items it has as they're added/removed. s do not already "know" how big they are. They must be iterated to get a count.