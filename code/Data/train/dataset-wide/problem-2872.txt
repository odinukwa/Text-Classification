It is convention to not prefix boolean fields with . The name of the method should be + variable name with upper case starting letter, so: 

There's several things to address here, so let's get to it! Classes Too many. Speed Can be better. Declaring missions Perfect for a config file. checkIfMissionComplete Slight code duplication. 

Another minor nitpick is that your Scanner variable could be named either or instead. (Even though is a quite normal variable name for a ) #perfectionist-naming. 

is an interface and not a implemented class. By returning you can use the lovely keyword (Really, you should be happy you have that - Java doesn't). 

Weird King Are you aware that in your current code, you will have the values ? This feels weird. If Ace is 1 then 0 is king I assume? But using 0 as king does not make sense. Adding a parameter to the function Even though @rolfl provides a short way to do this, I just want to object to one thing: The use of the id parameter. It seems like you are creating a card from an ID. Now what if you some day totally forget about how to calculate these IDs from a specified suite and rank? (or vice versa). I would instead use a function with two parameters: Suite and rank. I'm not sure how you are calling this method today, but to me it feels cleaner to create cards by using a nested for-loop to loop first over suite and then over rank, rather than looping from 1 to 52. Also, I wouldn't use an uppercase property when the others, and is lowercase. It's better to use lowercase also. Or, you could call it instead. And you might want to rename the property to . As for how to do it in Java, I would say that you should try to make it the same in both Java and JavaScript. Tidy up the JavaScript and then make it the same in Java. 

First of all, Android supports some Java 8 features if you're using a gradle plugin. (Don't know if it would support this) Secondly, did it ever occur to you that perhaps the method you are trying to place here does not belong here at all? The class can just as well be placed as it's own class in it's own file. No need to be an inner class inside this interface at all. Static variable 

That is, 10 * 4, 10 * 7 and 10 * 10. So now we can use these values to write our string. The values we have are 40, 70 and 100, so we will go to the different cells and change their values slightly up and down to get and print the numbers we want. 

If you throw an exception inside the , there's no need to write explicitly. Just put the code that is currently in the after the -statement. Like this: 

The reason for why I like the second approach better is because it becomes more data-oriented. You can change the way you consider neighbors without changing your code. Changing the way your neighbors are considered can be a bit entertaining but very confusing :) 

It's easy to assume that is short for , but that itself doesn't tell us much. would be a better name. 

What I did was to skip the declaration of a local variable and process the string (by calling ) directly when adding it to it's destination. 

It would be easy to extract the 100 to be a parameter to your word instead of hardcoding it into it. That would give some flexibility at least, even though most Fizzbuzz challenges only goes to 100. This can easily be accomplished by removing the at the beginning of your word. Speaking of 100. Your current implementation actually excludes the number 100. This is easily fixed by adding to the beginning of your word. 

Formatting Yes, the boring stuff. You are a bit inconsistent with spacing and I would recommend changing things like this: 

Board is only a temporarily-used variable which is set in one method and read directly afterwards in another. It should be passed on to the method, no need to use it as a class field. Instead of: 

The most reasonable way to time Brainfuck executions is to count the number of instructions being performed at runtime. I added a feature to my Brainfuck Interpreter to allow me to easily count this. I also used a certain Brainfuck Developer IDE that includes a "Text generator" tool to generate BF code for your string, this tool produced the following code: 

As they are only called for the final state board though, you can calculate the rows and columns mathematically: 

I would expect the node for 11 to get the value . I don't see 119 anywhere in your expected or actual result though... Verifying a Binary Search Tree As your question contains an incorrect tree and one of your comments below has an incorrect tree, I'd like to provide you with a method to verify a correct tree: 

private final, private final, private final. All of those should be . The same goes for all your fields in other classes. 

You have several unnecessary comments here (although I understand some of them are because you are new to the language). 

I am not completely sure if your question is as easy as it sounds (or if I am missing something), but here's my thought on things. Using a singleton class for this does not make much sense in my opinion. There's no state to be stored, and therefore there's no need for an object at all. Instead, it sounds like you could put it in an utility method. 

The class contains absolutely no abstract methods. There is no reason for it to be abstract. There is also no reason for the classes and to be separate classes from . There is no reason to extend the class at all. Remove the classes and and skip the part of . And by the way, the correct English spelling is . 

Now, the folks over at Oracle noticed that this was a very common pattern in code, so in Java 8 they introduced the method: 

Java classes should start with a capital letter, and according to Java conventions should be named with something called "PascalCase". A name like would adhere to that convention. 

Today I decided to learn some basic Haskell, and for starters I made a program for calculating the checksum of a Swedish personal identification number. It uses the Luhn-algorithm, aka. . Explanation of this code can be found on Swedish Wikipedia and English Wikipedia Here's a description of how the algorithm works: Given a string of 9 digits, compute: 

There are two things I want to point out that has been shown in other answers, but not pointed out why it should change like this. In this code: 

Please, oh please, no such variable names! I would prefer and or something like that. and are names which is okay to use in example code, but not in actual code like this. The choice of choosing a to store the results is not that optimal when you want the end result as a . Here I would definitely go for , which also saves you the handling of an edge-case. In fact, I believe your current handling of isn't necessary either, as an empty set will have the value which thanks to your call will be converted to an empty string. 

When reading this I first thought "Where did that five come from?" but of course it does only loop four times. However, I would prefer: 

, being a name for a variable, should start with a lowercase character according to the Java naming conventions. 

Then create a Create some implementations of (possibly one for each action, or some actions might be possible to group together). 

The key here is that the utility-function doesn't know about any context. It doesn't know how the returned value will be used, so how can it possibly decide on a default value to use in the case of an error? 

You can add a and and increase the and there. And then you reset and to 1 whenever you change the or . 

The method has a misleading name. It doesn't check anything, it shows a toast. A better name would be or similar. 

Is a busy-loop. This code will run as quickly as possible and waste CPU power for you. Running this will essentially remove any benefits you get by using multi-threading in the first place. You should check into the wait-notify construct. This can be compared to three kids in the backseat of your car constantly asking you "Are we there yet? Are we there yet? Are we, are we, are we?", I bet you can drive better without such a distraction. (No offense intended against kids) This busy-loop does not get better by the fact that your method is an inefficient way to check if any task is still working. Use Atomic variables to keep track of the number of running tasks. The wheel... Java 8 provides the concept of parallel streams which significantly makes this easier. Your main method can be replaced with this: 

You store the value of X in a column (this can also contain the chosen color for actions that want that, so it needs to be text). Then let's say that the target creatures were 41, 42, and 43. And that the result of the scry was to put on bottom of the library. To store this information we can serialize it to something like this: or (indicating that 63 was the chosen card to put on the bottom of the library, and that no card was put on top - indicated by an empty string after the last semicolon). Now, you won't be able to anymore, but you even do that before? What would that give you if you don't know the context of it all and have no game logic nearby? To me it seems better to put that on the Java side of things, as you say JDBC is involved. If JDBC fetches the information about all performed actions from the database and is able to replay the actual game events, then Java can filter out and scan for actions where target 42 was included. Mod Cards Again, you might want to not store a high level of detail in the database. Probably not all cards have . You might want to store these 'values' in a serializable format and letting the application code retrieve that, deserialize it, and filter out some specific cards, instead of doing a SELECT * FROM card WHERE scrap_value = 5. I am aware that it will affect performance, but it will improve flexibility. Another alternative would be to use a many-to-many relationship for these values. In this particular case, I can see some reasons for using the many-to-many relationship, but I am not entirely convinced that is the best option. 

Stream, Stream, Stream, all you have to do, is Stream... Immutability? Consider making immutable, or having a separate that simply holds the result from the (then you'd also just have to call once) Adding is merging Your method can be quite simplified when using : 

Below, I have tried to refactor your code by extracting inner sections into their own methods. The way I have done it here might not be optimal, it might not even be functional, but it will give you an idea of what to do with your code. I have not done the fun part of defining and passing the parameters needed to the separate methods (and making them return something useful). Essentially what you need to do is to make sure that one method does one thing. "Retrieve history" seems to be a big tasks that needs to be broken down into several subtasks. That is what the new methods should be for. Here's what I did to reduce your cyclomatic complexity: 

I can assure you, if a number is not equal to, and not more than another number, it will be less than. 

What do you get when you add a with another ? (Mathematically speaking) You get... A STRING! No you don't. You get a These mathematical methods you have written here should really return a new instance. And you don't need to have in the name. Simply , , , is enough. MOAR METHODS! I would recommend adding a method, in your case the implementation is simple: 

Other comments: Your code looks nice, the only thing I would improve would be some one variable name: can be named or or similar. No need to use a one-character variable name for that. A very minor issue is that your loop can start at , as you use index 0 already to initialize and . 

The important thing is to ask yourself: How would you use it? If you are only going to parse with the same parameters multiple times, then the first method would be preferable since you only have to send it the parameters once. However, if you're doing the same thing over and over again then you should ask yourself if you really need to do it over and over again or if just once would be enough? Since the class are only using the and in one method, I see no need to keep them stored in the instance of the class, and therefore I like method 2. The way I see it, this is the option that best fits Open/Closed Principle. Option 3 has a slight negative side that static methods can't be overridden (at least not in Java), and so it's harder to provide different implementations for it. However, if you are sure that you need one and only one implementation and that there's no need to override the method anywhere, then option 3 is fine from my perspective. Be aware that this option defies Dependency Inversion principle, since you would always need to know the actual implementing class of the method (unless you write another class for determining which static method to call, but then why have the method static in the first place?)