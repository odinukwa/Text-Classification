Step 2: Cardinality and left most prefix. On each field you will be installing an index, I would advise you to test how much of that field needs to be in the index for it to be effective and slim at the same time. I wrote a small statement to do just that. Replace the with your table name and the with your field name. i.e. for the field on the table : 

The microsecond fractional part of your DDL (I.e. The (6)) is only supported from MySQL 5.6 onward. Most likely a compatibility issue I'm afraid. 

The setup can differ slightly in size and be consistent at the same time. Could be a range of reasons for the size difference. E.g. Different file system, fragmentation, method of determining size, etc... If you want to test the consistency of your replicated tables, run a pt-table-checksum. 

MySQL provides an Employee Database for instruction and learning purposes: Database on GitHub: $URL$ Instructions and Information: $URL$ 

Assuming there is a 'company' table as well that drivers can be associated to? If so, one option is as follows: Driver: 

Here is my new brick wall... On this DB server, I have a 'shell' db that they will be running the SP from, that has a history table so I can keep track of who created/deleted databases using my SP's... The only parameter for sp_startpublication_snapshot is @publication... I can give it the publication name, but since I am not running it from the publishing database, how do I specify the publishing database? i.e.: the publication shows up as: 

Depending on your queries, you might even be able to do with one or two of the above indexes or two composite instead of two single and one composite. It's poking around in the dark for me. 

Stop MySQL server; Check the error log see verify if your shutdown was successful. (No errors) Move your log files: mv /path/to/datadir/ib_logfile* /tmp/ Start MySQL server. This will create new logs; When you’re absolutely sure that MySQL server has started successfully, you can remove the old log files: rm /tmp/ib_logfile* 

You can limit the relationship from many to one by adding a unique constraint. EDIT: I am guessing I received the -1 for my brevity. Sorry for that, I'll elaborate to clarify. Below you will find the one-to-one relationship DDL. I used a UNIQUE constraint on table B to assure it's one-to-one relationship to it's parent table A's primary key. 

If I constrain the plans to disable seqscans (set enable_seqscan=False), it will index range scan on the first key, "campaign_id" but not "phone_number", which really doesn't help any. Constrained plan: 

I'm at a loss as to why it won't use an index for the "phone_number" lookup. Edit: It's definitely the "IN" that is causing problems. I tried changing the "phone_number" condition to a straight "=" and it will use the 3rd index then (and maybe others), seeks both fields, no need to touch the heap. 34ms execute time from a remote host instead of 500ms+. That doesn't really work in my case as the program may need to look up multiple values through the ORM. I would think that the IN clause is equivalent to "=" for a single match, but that does not seem to be the case. Edit 2: more weirdness I tried the suggestion of putting "phone_number" first in the index, and when I asked PG to EXPLAIN the query, now it is using the plan I want (one step index range scan with both args, no sort, no heap access), but with the "dialer_callrequest_campaign_phone2" index, which is the one I had yesterday! At this point it seems to be a statistic problem. I thought "ANALYZE " was supposed to fix that? Is there a way I can ensure it won't revert back to the bad plan in the future? Current EXPLAIN: 

I'd say highly unlikely. During the network partition, when switch was pulled, (on an equally weighted quorum calculation) quorum cannot be achieved and the two node cluster loses primary component status. Exactly the reason not to have an equally weighted two node setup. When there's no prim component, there's no DML. After the situation is fixed the nodes find each other to form prim component and continue synchronous replication. Highly unlikely that they get out of sync this way. 

@Decebal, Please consider the following, as the current answer is incomplete, flawed and built on an assumption. First I will attempt to explain my previous statement. 1.) Incomplete (cardinality, prefixing and data types): Composite indexes and indexes in general need to remain lean to fit in memory, actually benefit performance and not over complicate nor confuse things. Therefor the only complete answer would be to test cardinality on your table in order to utilize an efficient index prefix length. The next step of completeness is to slim down your data types. It matters for sorting and other explicit/implicit MEMORY engine usage. 2.) Flawed (null-able UNIQUE composite indexes): The `contact_info_ndx` UNIQUE composite index in Rolando's answer contains null-able fields. This will effectively enforce a partial UNIQUE constraint. Any composite containing a NULL in one of the three fields will allow for duplicates, a NULL effectively breaks the constraint. MySQL doesn't know what a NULL is and therefor cannot judge it. 3.) Assumption (Necessity of UNIQUE constraints): This is quite an impacting assumption as a UNIQUE constraint should be avoided unless absolutely necessary. It add's overhead, circumvents an important performance enhancing mechanism (i.e. change buffer) and increases the probability of dead-locks through gap locks on the UNIQUE key when inserting in batches. With that said, here are the steps that I would advise: Step 1: Data type(s). (Not sure if this step is necessary as you mentioned that the table in your question is "similar" to that of your actual User table.) 

For SQL Server, Brian Kelly did a great write up at MSSQLTips.com. You can find it here: $URL$ You can enable login auditing (and specify the level of logging) on the Server Properties screen under 'Security.' To view the logs, execute 'EXEC SP_ReadErrorLog.' There are some parameters that can be added to filter, and look at older than current logs as well. You can also view events in Windows Event Log Viewer. The 'Source' will be the SQL Server instance name on the machine. 

I am trying to implement some better security practices for our database systems. Right now, dbo is owned by SA. I plan to create new accounts on each server, with differing passwords, and assign SysAdmin to that local user. For many databases, dbo user is linked to the SA login. I can change these using ALTER AUTHORIZATION... no biggie. My question is, I see MASTER and some other DB's have this mapping of DBO to SA. I don't believe that the DB Owner can be set to anything but SA on these db's. Will disabling the SA account have impact on the opperation of the system databases when DBO is mapped to SA? Thank you! Wes