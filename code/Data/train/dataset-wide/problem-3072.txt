This is the Database class, which is dumb enough to just run queries and return an array with results. 

The way you did it is pretty much the standard way to bubble exceptions up the stack. Basically something like: 

Give this a try and post the results - it integrates PHPBenchTime laps and get_memory_usage() with your script. 

For your code however, you'd have to make sure that you are your try/catch block is within another try/catch block, otherwise you will end up with an uncaught exception error. 

I've commented through your existing code below and noted what was removed/replaced/added (my comments are denoted by double 's): 

If you wanted, you could even store the return value of in a property of the class so that you could call without injecting , as follows: 

I absconded the preg_match() to return within the function INTO a variable - as it is less expensive than a function call within a function call (however, if you're doing more than just a preg_match() to validate, then revert it back to the isValid() function. I also reworked your if/else/if/else into an (if|if)/else statement - higher readability and saves you one else call. Also, I put your code into a function and made it return once, rather than echo three times. 

So, ultimately, using two function calls to without arrays is faster overall than and with an array. EDIT Considering your newly added third point (non-fixed number of variables), it would be best to abstract this to a function, at the sacrifice of speed. 

What you're doing with is a sign-propagating right shift. The interesting this is, you're doing a right shift by 0 (I'd imagine because you'd otherwise get . Your method of doing so is a cheap version (read: performance hack?) of doing . Here's your function with the SPRS removed and replaced with instead. I've also implemented simplification. 

I'm not quite sure that this question is on topic, however: You have to understand what each variable definition is and what it means for the accesibility of that variable. Say your class definition is as follows: 

If you're going after readability and speed, then doing a preg_replace is actually a lot slower than doing a str_replace. I'm using this test code: 

My recommendation would be to keep your one liner. EDIT: My recommendation is you do #2 as I missed microtime(true) on and , thus I completely misread the benchmark output (which would make the one liner the slowest of the three tests). Thank you for catching that @Brett Santore. 

To use, simply instantiate and echo output. Here, we do a regular state name, with no selected state: 

Finally, we check if variable is None. If it is not None, then we print it, otherwise we print an error. As for your 'funny' error, remember that error messages should be informative (ie, should tell the end user where the error occurred and/or why it occurred): 

There's a few glaring issues with your code. Namely your lack of consistent styling. Secondly, you're not doing certain things correctly (iterating over an array rather than imploding it). As this is a code review, I will not be touching on the correctness of the algorithm. Below you'll find two pieces of code - one which I've commented and corrected, and a second which I've removed my comments and old code. With comments: 

As cbojar said, you need to separate your concerns. This is a blown out example of how your code should look like: The User class should not have any SQL interaction - it should delegate SQL interaction to a class built to handle just SQL interaction. 

This will leave you with an array with two main nodes: files and directories. I wrote this for a PHP distributed test-and-build-on-commit system and it worked well. More info on the PHP SPL Iterators can be found here: $URL$ By the way, the GetInfoArray is this: 

It's fine to have a wrapper to abstract PDO functionality, especially to avoid code duplication. The class itself looks ok to me as well - aside from some minor issues, as delineated in the comments in the code: 

And in the future you write another class that extends that class and it wants to update URL as below: 

right off the bat. Just initialize to and it'll kick you into the loop. You can also move the and filenames to variables so they aren't hard coded. Ideally, you should move them to a config file or cli args. Below is the updated/cleaned up version of your code: 

If you add a ternary concat to (at the expense of gaining 2 opcode calls over the if/else). This would be the function after cleaning it: 

While we may have the overhead of instantiating a new object, etc - we save on a possible database call. Additionally, we no longer do multiple checks, but rather do one check for abbreviation preference and assume the non-abbreviated by default, as well as keeping it non-abbreviated sort by default. EDIT Since OP indicated that I was incorrect in my assumption that they were storing this data in a database, I've modified my above Class into a function which does the same thing: 

Doing a quick test, as follows, shows that using is about 4 times as fast as calling strstr() twice. 

Break out the function into two - encrypt and decrypt. Your functions should do the least amount of things. return on trim - no need to set . In the encrypt, no need to have the second when you concat . Just concat on the initial call. 

Okay, so I wrote this function yesterday for one of our websites here at the office, the site is responsive, but one of the banners wasn't behaving at a certain screen size (was getting chopped off when screen size was less than 1067px). Basically, this script checks for window size of 1067px (higher than 1068px, banner is fine) to 980px (lower than 981, banner is hidden) 

However, unless you have hundreds of millions of visitors to your site, you don't have to hyper optimize this way. If its purely from an aesthetic point of view, then I would say just do: 

Well - speed. The one liner mixture of , and is multiple times faster than the for-loop. Not to mention that it creates less work for the GC. I ran the two pieces of code above and this was the output: 

This class should handle only User related SQL interactions. It will then send those to the Database class which is shared over other models. 

If you know that would only be calling exclusively as a param to , you could even relegate 's to a private called on instantiation in the construct, or move its body to the construct itself. One question that bothers me though is, is there any specific reason you want to use static ? Or just because it looks nice? 

The advantages are that you have a dict with the weekend/weekday times, so you only need one generic return statement. The magic/hardcoded string in the further shortened version is a no-no though. Furthermore, you could extend the function to allow for custom times to be passed in, as such: 

Ok, this is your form.php code - what the users browse to. I've dropped in comments within the code - and also notice the addition of on . This will contain the PHP code at the bottom. 

You are calling every time you call either or . Are you doing anything other than returning an instance of the class? If not, then just instantiate the class and making a construct would be more ideal. Doing so, your class would look like: 

You can effectively get rid of the switch statement as well as the is_array check in the count ternary if you do the check in the beginning (and exit early at that - so not wasting any cycles). You can also get rid of 

Not really much you can do about the aesthetics of Python's indent style. Perhaps you can do as such: 

The code below approximates the current functionality of the site that you linked to, using only CSS percentages. You can target certain screen sizes (for example, this code below breaks at 830px) by utilizing media queries. 

How about this? I moved the repeated code in to its own function. Also, +1 to Zathrus' review as well as mseancole's additions. Predefined json files might not be a bad idea. 

Try this, just removed a couple of the repeated code (moved it to a function) and sets minified version or regular version based on a bool variable (getminified), thus you only have filePathFull (no longer have filePathMin): 

(I'm leaving the original answer intact for posterity, but please read the edit at the bottom of the answer as the answer is wrong). Why create a complicated line of code, such as: 

Looks good to me! Now, if you want to include the dates, that's when you may want to start thinking about just using a database as a static lookup table. 

Note that we now import the package. We also changed the types of and to so that we may pass any type in. We then use the to glean the reflection of the value in the . We then glean the type with , and use a case to fall into our inner code if its a slice (can add more cases to extend this). In our inner code, we get the value of the argument, and store it in . We then iterate over the length of , and compare to at the index declared as an with and check for truthiness. If its true, we exit with a true and the index. Running the main function with both a slice of strings and a slice of integers, as follows, works: 

After that, I added a call to on the call so that all input is shunted to an integer. After that, we initialize our class to an variable. Then, instead of having multiple definitions for , , , and - we ask if the choice is in a list, define i/r/v/w. This lessens the amount of duplicated code: 

There are a number of concerns - from code styling to error handling (echoing out an error is not good. Use Exceptions or a custom Error handler). 

May I ask why you are bubbling exceptions like this rather than erroring out on a caught exception? EDIT Fail often: 

I found a few minor issues. Amongst them, are not exiting early (performance enhancement: exit before the database query happens). Additionally, you're not handling certain errors. Lastly, your lack of braces is disturbing, as it can lead to bugs if the code is ever modified incompetently. I've left my comments within the code as . Below are the commented files, assuming Key.php for the key page and Forms.php for the forms page as pseudonames: Key.php 

Obviously, there should be separation of concerns, which this does not implement, etc. ++++ EDIT ++++ Implemented comments 

This is the output of my version of the func (using the same calls and expected output as above in the original call) (output → expected_output): 

"Namely, I'm interested if it's OK to have a private variable mysqli populate inside the function openConnection() or should I have done that in the constructor?" 

Ok, there are a couple of things wrong with your code and your method of organizing the code. I've pointed them out to you in the code below within comments. The comments preceded with are my comments. 

Additionally, you should use the context manager, which takes care of file closing and error handling for you. Also, you should avoid using strings all over the place and store the filename in a variable. You should also avoid setting unnecessary variables (like ). Additionally, use Python's string multiplication abilities ('-' * 40 will print 40 '-'). Your script would now look like: 

I would really really recommend you go through and clean the code up - refactor refactor refactor, use best practices and as @peterhil said - read through the links and keep the HTML presentation away from PHP and JS and CSS. 

Doing so shaves you 4 bytes from the returned iterator object, as well as all the variable assignments and the added function and compacts your code. EDIT Seems that does not memoize as I thought - it just returns an iterator. However, does so, though statically: 

I'm going to assume here (having done this myself before when I first started out with PHP), that you are storing the state data in a MySQL database, which you are pulling and storing in the var. Do not do that. You're slowing down the entire program by making a call out to the database for what is pretty much static data (the last state to join the union joined 55 years ago). Now, I would just have the dropdowns stored in functions which just return a string. One function for long name, one for abbreviated. However, using this as an exercise for you in DRY, I went ahead and created a class, , which contains an associative array of states/properties and their abbreviation. On initiation, the class generates the output form. If the contains 'abbr', then we use the abbreviated version after performing a . Otherwise, since the data in the array is static and already sorted as we prefer, we don't perform an and just go straight to storing the select form in a property . 

And the includes are included in the SA conf files. Not good for performance, but negligible. Anyways, here's an idea: 

Echoing will output (or an array if value0 is an array). As a side note, you could actually get completely rid of $i, and just do the following: 

However, this set of 1000 integers while have a size of 4.2KB in memory. So its not ideal, nor memory efficient, but its an option. Now, the way that you did it, as follows: 

As N.B. mentioned in their comment - why are you implementing a method if we already have lazy loading via autoloading? I've even written a class that you can simply attach and not have to worry about loading your classes. Now, there are better autoloaders out there - like Symphony's ClassLoader/autoload.php. Anyways, here's your code, with my LazyLoader class handling the loading of methods (untested code). /LazyLoader.php 

Like I said - very little to do with code from my POV - perhaps someone can skim through it and add their ideas on how to optimize it further. 

To start, lets look for something that we can loop through. From your link to relevant dates, we can see that the associated animals loop through 12 animals, in order: 

Again - the glaring issue is that SQL query...can easily be injected if you're not doing any checking in query() itself - and even if this is say, an intranet site, don't hedge on that for safety and laziness. Protect the database at all costs. Now for your questions: Can it be improved? Are there any glaring problems? See above notes about SQL Since $stateid is just an ID reference to the state, should I store the state name as part of the object? Is it better to compare stateid or state? Feel free to store it, or not. Doesn't matter either way. If you require it for your software, then keep it obviously. Do I need to store the $teamid? Again, you don't need to if your software doesn't require it, but down the line, it might become a reference in some piece of software or other. Is there a better way to handle the colorsX? These are just 2 hex code color strings. Perhaps an array - ie: ? Or you can leave them as is. EDIT Edited for idiom: