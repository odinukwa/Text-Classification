The intent to get across was "I got your email; I fully intend to go along with it; I just wondered about something that was written in it". 

I would probably respond back with something along the lines of "I'm extraordinarily busy in my current position at the moment (we're in the middle of project X) so I'm unwilling to take time away unless I'm certain this is a great fit for both of us, especially considering the large travel distance. Can you take a few minutes to answer these questions? Alternately, would it be better to talk on the phone first?" They'll likely respond in one of three ways: 1) They'll answer the questions, and you go from there. 2) They'll ask you to come in again, and you respond back "I'm sorry, I won't be able to make it this Monday. We can try to schedule something a bit farther out", where you actually have no intention of rescheduling. If they're not bothering to answer the questions, you probably don't want to work there. 3) They'll ignore your response altogether. 

I had this interview for a Software Development position. I'm from Kosovo and the job opening was in Germany. They were also offering visa sponsorship. I'm a Web Developer and the position was open for all levels. Rating myself, I'm way off the "Junior" title, but also need a few more years of work experience to go "Senior". So the Skype interview was nice and the interviewer was really friendly. However, he asked me 2-3 questions and he concluded I'm not a fit for his team. First question: Explain the IoC container. Second question: Explain the repository design pattern. After I struggled answering the questions, especially the first one because I wasn't aware of the term, but I knew about the design itself without putting a term to it, the interviewer said I'm not a fit for his team. I also showed him a 5% completed API that I'm working on and he said that my code is really good and clean, but I have too many controllers... All while being unaware what the actual project is and why it needs those controllers (they were just scaffolds anyway, I'm still far from touching those parts). He told me that HIS team needs a Senior level developer, but he'd pass my CV to the other teams which need other levels - I haven't heard from them and its been over a week. Anyway, how does not knowing these terms make you a bad programmer? I believe that these interviews should be more technical and require the interviewee to write actual code that might be suitable for the company. I think asking "What's an IoC container" might confuse a lot of people and it's an unfair way to check if the interviewee is qualified. This is the first time I've had a "professional" interview with a big company and to be frank, I felt a little unprepared and intimidated. What are some tips to handle these interviews like a pro? Do I really need to know programming definitions? 

It's possible that he knows you're very busy, and doesn't want to take time away from your actual work to have the meeting. While it would be nice (on several fronts) to have some time, even just an hour or so once a month, to talk to him about what's going on, if you're really swamped, I can understand him wanting you to focus on the work. 

From the outside, you appear to be caught in a power struggle. Worse, it's one-sided; your new boss doesn't seem to realize (or believe) that your current boss is just trying to hold on to his existing team. 

Honestly, I would say don't say anything about the technical questions; at this point, you're an interviewee who got nervous and missed a question you might have gotten right in a better environment. If you respond back at this point, though, then you run two risks: a) you look a bit obsessive, like "I have to let them know that I knew this answer". b) you've waited long enough to respond that it could look like you looked the answer up, and you don't gain anything with a right answer. If you want to do anything, just respond back with a general thank-you, and possibly add a caveat: "I was so pleased to meet with you yesterday. I'm sorry I was so nervous and missed a couple of questions I should have answered correctly, but I look forward to hearing from you again." Also, find a way to reiterate your interest in the position; add in some things you learned about the company from the interview. 

Alright, so I'm in a team of web developers (RoR devs), consisting of 4 other people. My manager's programming abilities are ridiculously low comparing to the other team members. So that's causing a lot of delays in projects, as he's always the one starting them and then handing his work so we can continue extending it. Then usually we end up rewriting everything from scratch, because he's really that bad. Also before a project starts, we have brief discussions on how stuff should be. On the last project WE had to organize a meeting so we can give a structure to the project. This is definitely poor management and this costs the company very much. So, what would be the best way to confront the manager about his poor skills and maybe even ask him to step down from his role? 

Anyway, I don't know how to approach the manager about this. It would take additional resources to get this started and done. Also time. But I know that as soon as we go online and get huge amounts of visits, we'll end up exploding and patching things in that mess, until we end up rewriting the whole thing or the product failing altogether. What should I do? 

If her behavior is beginning to cause others to notice, then you probably need to take her aside and tell her something like: 

(In fact, the entirety of Joel's "Getting Things Done When You're Only a Grunt" is full of useful tips in this situation.) Push for other appropriate rules. Constantly-increasing code coverage? No new code without associated unit tests? All code passes QA before it's accepted? Find simple rules that will help the most, yet are the hardest to fight against (who wants to tell the boss "it shouldn't matter that QA thinks it doesn't work correctly"?), and push for those. Leave (if necessary). Keep in mind that the company has gone this long without seeing this as a problem, despite all the symptoms (buggy code, developers leaving, etc.). It's entirely possible that no matter how reasonable your arguments, they're going to see you as "not fitting in" and it can color them against you. So take that into account - if you're really interested in staying and trying to turn things around, perhaps start out with less objectionable ideas and work your way up to "fire the people who are causing the problem"; if, on the other hand, you're not interested in staying unless they clean up their act, you can be blunt and tell them "this code is a festering pile, and I can't keep working here unless you do X, Y and Z to give me the power to clean it up", with the understanding that the answer is likely to be "okay, nice working with you". Good luck! 

I just joined a new company which is a new start up, STILL applying for funds etc. The product is very promising and likely to be a success once fully released to the public (we're currently in a closed beta). It has a very nice user interface and an easy experience, so design wise it's top notch. However, the application itself is written quite poorly. I'm a Senior Web Developer in this company and I was a little shocked with the lack of structure of the code. The manager (Main Senior? Can't think of an appropriate name) is very logical and always has the right solutions in mind and can also code them out nicely, but they are not very efficient performance wise and don't follow any particular concept (eg. DRY). We use a kind of a MVC model, but it's not very efficient and does not save us from the headaches it should fix. Code repetition is a major problem and so is the amount of jQuery, Ajax calls, unnecessary timeouts etc. The database abstraction layer seems very inefficient too and it doesn't include any sort of ORM. So to sum this up, the code is a mess, but the product works (can't judge the security yet). I would be able to take the whole project and code it from scratch with some rules in mind. I would make it easy to extend while preserving the same functionality, though it would take a while since a lot was done. I would incorporate things that would make development for the future team very seamless, such as: 

Based on your comment, I feel like your real question is "what do I do about Jennifer?" Being honest with her is your best bet. If your only options are "promote her into a position that's not necessarily best for the rest of the group" or "she leaves for a different company", you may need to take that chance because as it stands, I'm unsure that you'd want to promote someone whose actions are "repulsive to other members of the group" and who "openly questions and mildly quarrels with" the person who'd be her boss. On the other hand, if she's got the technical know-how, a greater desire for the job than others, and if she could get along better with her coworkers and the Master Chief, then she could be a great fit. You need to sit her down and be straightforward with her. 

Keep track of the items you're assigning for yourself; as the team lead, you should take on less of the day-to-day development and more of the "roadmap"-type tasks. Get to know your team and how well they each do certain tasks, so you'll be better at assigning the appropriate work to the appropriate team members. My boss keeps it simple - he keeps a running Notepad file that lists what he's scheduled himself to work on; when new items come up, he adds them to the list in the order he expects to work on them. As he finishes them, he can remove it from his list.