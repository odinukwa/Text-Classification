For example, if was 100, then the highest 1-bit in 99 is 64, and 64 shifted left by 1 is 128. Because 128 is 2 to the 7th power, so extracts the low 7 bits of hash as an integer from 0 to 127. Switch from open chaining to open addressing. Your hash table uses an open chain (or linked list) in each bucket. You allocate memory with , but memory allocation might be slow. The idea is to switch to open addressing and remove the calls. With open addressing, each bucket holds exactly one word. You would allocate the buckets with 

Use power-of-2 buckets. Division and modulus tend to be slow when isn't constant. Your hash function has . If the length was a power of 2, you would use to get the modulus. For this idea, your constructor WordStoreImp(n) would round up to a power of 2, with code like 

It is possible to create cyclic directory structure with symbolic links, so it may be reasonable not to traverse them. E.g. you can use from package to traverse only real directories: 

From that nice formula it is easy to see that the process of computing âˆš2 is iterative. You just need to decide what function to iterate. Let us consider this one: 

The code seems a bit too verbose because of explicit search tree construction. It is possible to make it more concise by using list monad for building search space. Here is my attempt to rewrite it: 

Thus you get self documenting code and all of functions for free (for each field compiler generates accessor function with the same name). This also leads to more concise implementation of other functions: 

replaces letter by searching for another one positions away. I'll implement this literally by creating cycled alphabet and searching for letters in it. This is inefficient but allows to get taste of laziness. 

I finished the Snakes and Ladders kata in the Agile Katas and I would like to know if there's a way to improve my code (specifically the part where the turn order is determined). Game 

If you want to try it out for yourself, clone this repository. The working implementation uses Tensroflow so Tensorflow is required to get it running. Simply run to train a model for 1 epoch. Do note that I'm not trying to improve the accuracy for this question. I'm just trying to know if there's something I can do to improve my code. 

I haven't implemented the testing and predicting codes yet. For now, what I'm trying to refactor is the training part and the initialization of the network. As you can see, I used Tensorflow since that's the library I like using. CV2ImagePreprocessor 

With LambdaCase extension it is possible to write without (but it does not seem much more readable): 

is the same as , so . You can use instead of to print strings without quotes. Using the fact that , you can merge and into: 

Snap catches all exceptions thrown within handlers and converts them into responses with HTTP 500 code. So error handling in your code is pretty fine (if you are ok with converting "postgres is down" or "invalid query" into HTTP 500 code). Side note 1: You are setting at the top of the handler. It is easy to forget to add/remove this code if you are modifying some part of handler that is actually writes response data. It may be more convenient to define helper function: 

Now, when you have all of the expansions, you need to filter and count those with numerator longer than denominator. 

has only one shape, so always calls the same method with the 4 sides. It's the same with and . For polymorphism, we need to polymorph something, to give it more than one shape, like a variable that can be a rectangle or a triangle. 

This sets each word to null and each count to zero. A bucket is empty when its word is null. To search for a word, if the bucket has a different word, you check the next buckets until you find the correct word, or an empty bucket. 

In , the argument can have two different shapes; it polymorphs from the 4-sided shape to the 3-sided shape, so can call two different functions. This demonstrates polymorphism. 

At this point, count[pos] is the correct count for this word. If the bucket is empty, then the count is still zero. If you are adding the word, then you would put and increase the count. In open addressing, a bucket with a word can never become empty; you can only remove a word by setting its count to zero, and leaving the word in the bucket. To be fast, at least half of the buckets must be empty. You would keep a count of the number of words in the table. When the count reaches , you would allocate a new table with twice as many buckets, and move all the words to the new table (skipping words where the count is zero). 

Since the tasks involves the use of images, I also created an interface that will read and preprocess the images. DatasetPreparator Interface 

@mheinzerling is probably going to mention everything already there is about your code lol. So I'll just point out one thing in your code they probably haven't discussed. I discourage the use of comments to explain the what your method is doing or the variables you use. You have already have expressed the intents of some of your methods through their names. Adding a comment to explain said intent is redundant. If you're going to use comments, they should explain the why's and not the what's of your code. I'm not sure on what's the best practice in using JavaDoc comments, but I think we're better off without them. Express yourself in code! 

Note that I'm using strict version of left fold (see here about vs ) and strict . This means that map of height counts constructed in single pass without thunks. 

Also have to note that I like your coding style: domain-specific type aliases and short functions with descriptive names make code easy to read. 

creates cycle from a list. skips some characters and returns list starting from . Try it in ghci ( is infinite so be careful with it). 

Maps as arrays In you are taversing heights 200 times. It is possible to emulate array with and do this in one pass: 

In this case changing fields in or won't break . You can enable extension to get only specified fields : 

Haskell also allows different datatypes to have common field names, so the code could look like this: