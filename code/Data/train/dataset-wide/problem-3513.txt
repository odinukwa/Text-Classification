Use the configuration directives , , and to set the user and group ID you want for newly created directories and files, respectively. 

Your APC cache looks fine; it's certainly not excessively fragmented, and if you aren't having performance problems then there's no real need to worry about it. Let it run 24 hours, and then take a look at it to see if you still have good performance and enough free space in the cache. 

You'll also need to ensure that the path gets prepended to the directory name you want. Do this by adding to the path and specifying the option to . 

This is working as designed. Preferring IPv6 over IPv4 is the default configuration for most computers. To use IPv4 instead of IPv6, the computer must be specifically set up for this (varies by OS). If you want specific hostnames to be inaccessible via IPv6, then you'll have to remove the wildcard CNAME and use records only for the specific hosts you want to be accessible via IPv6. 

Did you wait for the TTL to expire? It appears your TTL on these DNS records is 1 hour, so until an hour has passed, your local DNS server will use the old cached entry. Your web site is working fine, as far as I can tell, if it has something to do with task management and audit control. But I'd probably remove that "blah blah blah"... Speaking of which, you might just have the old site in your browser cache. 

You obviously can't keep up with this sort of attacker by hand. If they have that many IP addresses, this won't work. Have you analyzed what the bots are doing? Are they trying to send spam? Scraping your web content? Trying for a DDoS? A while back I developed a tool to handle cases not unlike this at the application level. Bad Behavior analyzes the metadata in HTTP requests to determine if a request is likely to be a spammer or other attacker, and blocks the request with an early 403 error before it ties up any resources executing your web application. It's available as a WordPress plugin and also as a Drupal module. Bad Behavior will almost certainly be a significant help if the bots are trying to send spam, scraping your site, probing for security vunerabilities or attempting to brute force logins. If they're just doing a plain old DDoS, it probably won't help as much. Another thing you can do is to make sure you are caching appropriately. For instance, Boost for Drupal and W3 Total Cache for WordPress. This will help somewhat, but if the bots are crawling your site, they will spend much of their time fetching uncached content, so it won't help as much in that case. It also won't help that much if the bots are primarily posting data, e.g. attempting to post spam. You should also, if possible, temporarily increase your CPU and RAM allocations for the virtual machine, to help relieve some pressure. This may require you to stop and restart the virtual machine, but at this point that's a minor issue. I've also on occasion written custom fail2ban regexes for specific bots which were doing particular abusive things, such as repeatedly attempting to register user accounts on Drupal. If your analysis of the server logs indicates that something very specific like that is going on, you may also be able to do something like this. 

You also need to specify in your firewall rule the destination interface for the traffic to be NATted. Otherwise it will just attempt to NAT everything, and as you've seen, that doesn't work. You should only be NATing traffic bound for the outside world. So, let's say that your default route for all your Internet-bound traffic goes out VLAN 200 (since you didn't specify), a VLAN dedicated for external traffic. In that case, you'll add to your firewall rule. 

New Windows Azure customers have a spending limit of $0.00 applied to their accounts. You can change this amount to any dollar amount you wish. If your balance exceeds the spending limit, all your instances will be shut down for the remainder of the billing cycle, and all of your data will be read-only. You can also remove the spending limit entirely and re-enable it starting with the following billing cycle. 

firewalld already allows outbound traffic and blocks all inbound traffic. You only need to add the services or ports you want to open. 

Getting an XP box up on my local IPv6 network was... fun. Not. So, in one image, here's the problem: XP's support for IPv6 is minimal at best. I don't believe it's possible to disable stateless autoconfiguration - or even to use anything but. 

Install the remi-release RPM from the remi repository. You must also edit the that it installs, in order to enable the repo. Find the section and change to . Then you can use the packages the repository provides. 

You have a conflicting package, which you need to remove first, before replacing it with the third party package. Start over: 

Unless you're running out of memory (it sounds like you are not) then you should do exactly what it says: raise the setting. If you were running out of memory, you would need to begin scaling up or out, by increasing the instance size, or adding more instances. 

Locate VMware Server's datastore. The datastore details will tell you where the files are located. Use the Starwind V2V Converter (free but registration required) to create a VHD or VHDX from the existing VMDK. Create a new Hyper-V VM using the new VHD. You will not be able to import the virtual machine settings (e.g. CPU, RAM, etc.) from VMware Server and must recreate these manually. 

Login via your remote console, rescue disk, etc, depending on what your provider gives you. If you only want to be able to ssh to root with keys, and not with passwords, then set: 

qemu, libvirt and virt-manager support RBD on Fedora. Interestingly I did not see support on CentOS 7. 

Some of the output is missing, since it scrolled off the screen already, but it's possible to see that the kernel crashed in . This means that it had a problem with mounting whatever you passed as the root filesystem. Check to ensure that you have passed the correct parameters to the kernel to boot from whatever media it is supposed to be booting from. 

Second, WordPress sent explicit instructions to not cache the redirect, so it would not be cached anyway. 

wget is not hanging. Your shell is waiting for you to enter another command, and the shell prompt is at the top of the output somewhere... The problem is: You did not quote the URL, and it contains an ampersand. This character is used to put a process in the background, and importantly, anything following it is treated as another command line to be run. So the shell treated this as two commands: 

A recent update to now requires that the in Release files be in UTC. Your third party repository's Release file has a date which is not in UTC, hence the warning. While apt will continue working with this file, it will simply pretend that the date was UTC, which could cause minor issues like updates not appearing for several hours. The solution is to contact the third party repository maintainer and ask them to fix their repo. 

You may get argument about this, but... I wouldn't bother on a local network. Compression just burns up your CPU and probably won't save you enough time on the backup to justify it, since the network link is probably faster than you can push data through it, compressed or not. Now if you were running rsync across a WAN then it would be a good idea; since the network link is much slower you would save a lot of time. 

Failing migration due to too-busy VMs has been recognized as a problem. Unfortunately, while qemu provides a solution, it is not exposed via the libvirt API, and is thus unavailable to OpenStack. Qemu's solution is called auto-convergence. This means that, if a VM is so busy that the migration is predicted to never complete, the execution of the VM will be throttled, so as to possibly allow the migration to finish. Auto-convergence is available from qemu 1.6 onward, which should be present in your OpenStack Juno installation. In this version, the amount of throttling is fixed. Since qemu 2.5 (which at this time is completely new, and you won't have it yet) the throttling is dynamic, and if the VM is busy it can be throttled anywhere up to 99% dynamically, but only as much as necessary to allow the migration to finish. Because this monitor command isn't exposed in the libvirt API, OpenStack can't take advantage of it. For the moment you will have to apply auto-converge manually to a running VM. For example, log in as root to the compute node which is currently running the VM and execute: