If the user's session says they're logged in, and they have a username in their session, check their session Basically that's what it's doing. Don't tell me that's not redundant! Moving back to consolidating and values: how does improve your application? It's clutter! Simply, if they have a username, check 'em. If they don't have a username, they're not logged in. Next up: 

I would just like to point something out. I realize that this question was written three years ago, however it's important to know the current standard. If you stumbled upon this question looking for a user password hashing function, do not use the original post's code! Instead, update your PHP version to the most recent version if you can, and begin to implement the function. 

Other than that, it's a simple piece of code, and there's already tons of people who have done this, plus more. It's usually safer to work with a community run library than to create your own! 

Your code looks fairly good. It's nice and easy to comprehend, and it's to the point. It is also something that's been done before, so luckily you can look at others' code and compare/contrast. I'd like to suggest looking at the FIG standard autoloader. It comes from this PHP FIG Autoloader standards page, which is an excellent resource when determining what looks "good." Also, you may want to take a look at other, maintained autoloaders, such as the Aura Autoloader. If you choose not to use it, it could still give you hints on how to expand/improve your current code. 

The Security Aspect Good to see that you're not just checking for a file extension in the name!! Basically, yes, it's the minimal security needed. There aren't too many steps needed to make an image uploading script safe, however, doing it wrong could present some future issues. Here's some notes though: 

In my opinion, no your class is not clearly documented and easily understandable. Here are the main reasons I find this code... dirty: 

First off, if this is for your CMS website, this could potentially be a little overkill. If it's just you (maybe one or two others), an XML/JSON file with hashed credentials could work just as well as a relational database. The database works well if you've a hundred, or a thousand, or even a million users. It doesn't seem like you need all this capacity. On the other hand, you might need this type of capacity, which then I would suggest one of the many NoSQL systems. However, here's some comments on what you do have: Security 

I'm not familiar with video uploading, just as you are. However, I'll offer some advice on the way things look. 

I would agree that what you have now is cleaner and more testable (in comparison to the code you said you might have written before). I don't know C++ but I'm familiar with validation, so I'll stick to that. 

We can DRY out your code. In the main function, I see three times. Create a variable and assign the variable the sum. 

Before both of these is . You didn't mention how this superglobal is set... What if for some reason it's 0. If someone tries to log in with username 'admin', then an attacker could brute-force send passwords to your page easily and possibly gain access to the admin page. I've rewritten your function below. Mainly re-factoring, because it's hard to tell your intentions so I left something unchanged, because they're up to you to change! 

You're probably sick of having me answer your questions, but I couldn't help myself on this one! Basically, yes this is safe. However, you never specified what you wanted to protect against, so I'm assuming you mean from just a normal person who might try a couple tricks on you! But nothing is perfect, and I'll see what I can do to point that out... 

Well it looks incredibly clean, the amount of effort to read it is almost minimal. Everything seems very straight forward too! Nice. However, that leaves little to actually be critiqued! UserDAO 

And the average function time was about 2.1894 E-6 seconds. However, PHP 5.5 introduced us to the function! And it happens to do exactly what you want! Yipee! We can do a big swap-out, and come up with this: 

This looks like a "Router" to me. If you haven't already studied URL rewriting, almost every PHP framework implements it, and I think you should take a look at what's been made. I haven't ever used it, but it looks good: Aura for PHP's Router. I have used this one, and it's framework-dependent, but simply looking at how it's used may inspire your project: Laravel's Routing capabilities. Of course, you may find none that suit your needs or your liking, but imitating (or forking) a pre-existing router is always an option. 

I'm sure there are many ways to do this, and this is only my interpretation. Have you tried Googling this to see if there's an established expression? 

I felt a "c" would be better than an "n", but really, variables should have some sort of context in them. So "$charCode" would be excellent. Hold off on fixing this though! Now I don't feel qualified to critique the actual I/O code, so I'll leave that up to someone with more knowledge. From what I do know though, I can't see any glaring problems with your database queries that would cause it to be so slow. Hopefully some one with an eye keener than mine can help. 

I haven't worked with CodeIgniter before, so if I say something that argues their standards, please excuse me. It's such a basic piece of code that there isn't too much to be said. One things I notice right off the bat, your function has a first parameter with a default value. I'm surprised you haven't done anything about this because it should be throwing you a warning. 

Docs Now I really suggest you find an alternative. According to your update, you say the number of variables might grow. Could you explain (example code?) this more? If it "grows", then the issue may not be this part of the function, it may be the surrounding code that needs fixing. 

I believe your best option in this case would be to transform your individual, repetitive variables ( ... ) into a matrix, or multi-dimensional array. By doing so, you'll be able to take advantage of the power of loops, most likely you'll want to explore . (Explore the different jQuery traversing methods too) Keep in mind while you're refactoring your code that you can dynamically reference your HTML elements. For example, you can replace with a more general . Where is a incremental value given by some original array or a loop. Here's the MDN docs for loops and iterations in JS for you to check out. I'm refraining from giving too much code because I think this is a great opportunity to learn about the different looping functions in both JavaScript and jQuery. If you'd prefer to just see code, comment and I'll edit this post! 

If you choose to use a framework (i.e. Zend), many come with documented standards and styles that you should follow with that framework. 

doesn't seem to be correct. I tried to copy this conditional, and I'm surprised you haven't noticed the error. This statement says: If is equal to 'offset', or either 'push' is non-null or 'pull' is non-null. I believe it should be: 

I'll separate this into two sections: readability and maintainability. I'm not exactly sure of the usage, so I don't feel I can comment on that. Readability Personally, I think the largest burden on the cleanliness of this code, is the comments. I think they're too large and there's too many. One way to improve this, is PHPDocs. Just like JavaDocs, they help organize the functionality of code properties. Another way to reduce them is to make your variables as meaningful as possible. What exactly is ? What kind of degree is it? Same principle for and . Breaking apart one large method into several smaller functions can also improve the cleanliness, not to mention the benefits of modularized code and improved organization. One last note: I see a lot of numbers. What's the decision behind these numbers. Making some of the numbers in constants or variables at the top can help readers understand the meaning. Maintainability You code is very simple (as in it takes care of one thing), and I think this is the greatest tool to avoiding confusion in the future. Having well documented code is also great, just make sure your wording is clear and concise. Sometimes referencing to other code in the comments can help. Explain why, not how. I don't think there's too much else you can do to future-proof this!