Since you are loading before , your Angular will have all properties provided by , so this is perfect way to use on top of Angular. This is also how you would wrap a plugin inside an directive, but see also the jQuery Passthrough directive that does exactly that. What would be a bad use of jQuery is using (as you mention) to refer to a DOM element. That would break the encapsulation provided by directive, since the inside of the directive should not know anything about the DOM structure, beyong what is provided by Angulars API. However, your event listener inside the directive does break this encapsulation! The event is not provided by the directive's API! (Which also makes your directive less re-usable.) Instead it is sent via another channel that is not visible from your template: 

This way your data are completely separate and decoupled from the code. You can edit, add, delete your questions without making a single change in your code. Also you don't need to number them as those can change but your code won't break. 

Hungarian Ew. A method that's a dozen lines long doesn't need differentiation between parameters and locals; it's obvious. At most I could see naming member variables, but even that... Meh. Interface naming A is just a . An implementation may deserve a special name, but it'd be a "special" in that it implements specific functionality likely worth naming. It's the same reason we don't name things anymore. The interface is the , implementations provide specificity and deserve naming. 

Don't put type into name ( etc.) Lose the Hungarian; appropriately-short methods remove its utility. Create an and method to get specific coordinates. Create and methods in a taking an . 

Min/max position locators in class This is essentially the same as the previous suggestion to use , but I'd still wrap it all up so the mainline code doesn't have to see how it's implemented. This way or that, it's significantly cleaner, with an appropriately-named . 

There is no way I see here that this directive listens to an event and no clue what the event is. A better design would be: 

You are using the non-standard package which requires at least some explanation or code or better both. 

This keeps my code DRYer and I don't need to worry misprinting or forgetting to return it (your does need a !) You don't handle errors (but you knew this already ;-) Your has way too many dependencies and responsibilities. The best practice is to keep your controllers "thin" with the sole responsibility to glue your data with its scope. Changing routes (states) looks like one job too much. Say you want to keep another sing-up form elsewhere with its own controller - will you really want to copy over all the logic? This is good for prototyping but is generally to be avoided in production: 

Having looked at your code I can see one major problem - your directive hides but does not isolate its scope. That makes it vulnerable to both external and internal changes. Internally you may change a variable and forget to adjust it and suddenly your directive is using the same named variable from outside! Imagine all the bad things can happen to your directive! That makes the maintenance a nightmare - you can't even use reliable tests to catch the "leaky" variables that you forgot to declare. They will keep "sleeping" quietly deep inside your code until the wake-up explosion :) Your directive seems to be intended as encapsulated drop-in component. For which Angular's isolate scope is the best solution. The isolated declaration inside your directive tells you exactly which attributes are "allowed" inside and how are they named. You see it clearly right at the top of your directive, which makes your code more readable and maintainable. Now you can change the outside-inside coupling nicely inside that declaration. That also would make your code cleaner, shorter and DRYer. As side remark, I would generally try to avoid, if possible, the low-level "system functions" such as , etc. They are used by Angular internally to expose more user-friendly (and reader-friendly) API to you. Such as the isolated scope binding and using filters rather inside your templates (i.e. what it is meant to). 

Shorter is good, but which reads nicer? Which is more communicative? With static imports, you're still left with: 

For me, these things progress in stages. The first thing I noticed was that the logic of the two chunks was identical, just using different values. In my head: 

Essentially the same if needs to be in the collection. My quibble with having the method in the bounding box is that it makes getting the position a bit bulky; I'd actually prefer this: 

Justifications (working backwards) PageAreaCollection Static utility methods strike me as un-OO, particularly when there are other options. Create a type, with type-appropriate methods: code shrinks, and reads better: 

All the Twitter stuff shouldn't be in the controller, rather in a utility class. This makes testing easier, makes plugging in implementations easier, makes extension easier, and so on. Also, should be already adding the if truncation was necessary. Personally, I prefer Amit's answer. IMO it's easier to read and more obvious than mine. I would probably tighten it up a bit after an initial review to something like this: 

The latter creates a global variable that I have to remember and maintain and carefully watch not to misprint. 

Naming something "current" makes me wonder what it is. From your code, I have no idea, so it forces me to spend time on looking around and getting clues, for what should be made clear right up front. 

If instead function's name tell me what it does, I can understand the line without even checking the function's definition! 

Your code is manually recreating HTML, which is an anti-pattern. The Angular way is to supply separately HTML template and its data scope object. 

I would try to split into simple pure functions doing one thing each. Search for Robert Martin aka Uncle Bob advices on clean code. Is this just a helper to display an array: 

I find it semantically confusing to call your functions like . This tells me nothing about what the function does. Now, when I'm reading the line calling this functions, I have no clue what it does. On the other hand, I already see where it is called, so this name is more redundant than helpful: 

It's formatted to highlight the similarities between the two, another option is to use string interpolation again, but it seems redundant in this particular case. (Obviously the string creation would go into a method in some sort of support decorator etc.) All the above is untested, but probably close. 

The function is very long. Functions should do one thing, do it completely, and do it well. Long functions are difficult to reason about. Move the subject and pupil data entry into separate functions to isolate the functionality, and streamline the mainline code. I'm assuming the presence of and methods, each containing the code currently in the mega-function. Naming conventions Minor, but you call an instance of the class , which is confusing at best, misleading at worst. Non-static-final variables should always begin with lowercase letters. Use typed collections should return a (or ). (Or at least a properly-typed array; nothing with s.) Reduce the amount of code in conditionals There's a lot of code in block that loops over the school's subjects, most of which is the block for when the subject is found. In order to understand what happens if the subject isn't found, I have to scroll down to the end of that block, make sure I'm reading the indentation correctly (assuming the indentation is correct), only to find there's nothing there. In cases like that, might as well do a negative test and , slightly "flattening" the loop's guts. (Code turned on its side is not a graph of how awesome it is ;) That said, this functionality is available in a method--looping in the mainline code isn't necessary. See next. Localize functionality Deciding if a school has a given subject should be moved into the class, for example: