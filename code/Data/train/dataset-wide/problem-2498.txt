Encapsulation Try to encapsulate the logic in appropriate modules rather then creating a bunch of static methods. It's easier to test and who knows, maybe you'll need it later somewhere else so if you do it right the first time, it'll be copy/paste the next time. 

If you have more setting groups then just add interfaces for them too and implement them in the same way. 

If you want to refactor your code you should start with code-smell. Currently it looks like at least four or five developers each with different coding-conventions have written this: 

disposes the but the only place where it is assigned is the constructor. Later you just check if it's in 

extend & use expressions Instead it'd be a better idea to write an extension for the property that you could use for testing the event in this way: 

What I don't like about the version that use lists internally is that they return instead of those lists at least at . Having an I think that this result is deferred and I most likely call again so the results will be enumerated again. If I see something concrete I know all items are already there and the enumeration does not have to be executed. 

I'm writing a command-line utility and I need to find commands (and parameters) by name. The name can either be a full name like or a shortcut . I thought I use a dictionary with an key and a custom comparer. At first I had a list and searched for the name with LINQ but I'd like to have something more convenient. The performance doesn't matter - this time convenience goes first. There will be at most a few dozens of commands. I know I could use a string and map each name to the command but this isn't cool :-) 

This loop does not necessarily need to have a body. You can do the same with the pre-increment operator inline: 

There's not even single curly brace ;-) I wouldn't complain if it was python but in C# you should always use them. Omitting them can cause a real headache. 

If it's a for CRUD about client objects then I find the client in name method redundant. Simply Add, Delete etc would be more appropriate. By following this pattern you can have a single crud-generic interface for all types: 

The calculation is very simplistic and probably won't work when the interval is exceeded but as a proof of concept it seems to work fine so you might want to check this. Example: 

The class became a collection of rules and is now immutable. Adding new rules results in a new validator. This should allow to add new rules ad-hoc if necessary without breaking the old ones. This time it also calls on the collection. 

Your naming is incosistent. For some variables you use and for others the full name . Besides we name local variables in . 

I cannot reason about this part. It's too confusing. You should rethink it and also change the names to full words instead of abbreviations. 

In general I'd say it's a good design. You use dependency injection and provide all required parameters via the constructor. You also use an abstraction (interface) for the service but... it's not very useful. 

I don't preach never use because I find there are situations in which it's useful. In this implementation it allows me to reduce code repetition by having only a single and resetting all variables before parsing each line. Without the it would require one inside the loop and another one at the end for the last line. Resetting flags would also need to be done twice - initilization before the loop and then after each line. The parser does not use any s and s. I find they are confusing so I'd rather nest one more than break the flow multiple times with a or seemingly equal conditions. Everything it needs to be able to do is to parse a CSV into lines and columns. Reading files, verifying equal column count in each line or using headers for s are jobs that other modules will take care of. The interface might look unnecessary but I need it for dependency injection and mocking/testing. 

The order the trim arguments is weird. It doesn't follow any logic. It should be clockwise like in WPF or CSS: top, right, bottom, left. 

It depnds on what kind of tooling stuff your are coding. If this is some tiny helper then I'd go with tuples. If I was creatng a general purpose library then and big type would be better. You could validate the parameters and make sure that etc. As an example you can take a look at my generic that is supported by expressions to be able to work with any comparable type . 

It's a weird process. It first validates the object and then calculate the offer. The property should be a getter-only property and use the calculator to get the value and the validation should take place where the other properties necessary for the calculation are set because they need to be validated as apparently they can be invalid. 

It wasn't easy but I managed to move all code that needs to be tested into a new class - I know, lolcat speak :-) that now receives a bunch of serivces and is created by Autofac too. Everything is abstracted and everything can be replaced for testing. Now I can test the application's behavior for example to verfiy it exits if one of the requried files is missing or doesn't crash if an optional one is invalid. 

SRP You should start by splitting this class into smaller pieces to satisfy the Single Responsibility Priciple. One class should do only one thing and yours is doing at least two: 

I needed a better string formatting options like and but I also wanted to be able to use the default formattings so I created a custom formatter. It's main purpose is to support a template engine where the user should be able to use different formattings like upper or lower case. I still however couldn't figure out how to be make the date time upper case. 

Don't put everything in a single class. Extract the method into a new one that you could call and rename the old one to just .