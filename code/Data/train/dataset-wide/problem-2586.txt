I am running a simple OCaml program which opens a CSV file with a pseudo dict-reader and hashes "key" + "value" (where key and values are strings). Then some counts are evaluated on the hashes (but it is not really relevant for what follows). After a quick look at the default OCaml profiler (), I noticed that my program was mostly spending time in hashing elements (I don't know what does though). 

Note : I am using OCaml 4.02, but I could upgrade it to 4.03, especially for the Array.map2 methods. 

I don't really like the methods which forces the user to call it every time before calling . Besides, the algorithm is very basic... Are there libraries doing this already ? Is there another algorithm, simple to implement (performance is not really an issue, this was working with roughly 1000000 elements) My tests are really poor as well, are there better guidelines to write them ? 

I wrote the following implementation of the k-nearest neighbor algorithm (for a binary classification task). I am not familiar with OCaml's built in functions, I have the feeling that some of them somehow reinvent the wheel : 

This is a simple implementation of a generic binary tree that holds elements of type T. I was wondering if there was something that could be done better (especially in the EnumerateNodes methods). 

Three points. You call your Stack class . That will cause confusion because there is already a class in the Java library. Better to use a different name to avoid the clash: . You have a magic number, 10, in your default constructor. Using magic numbers is generally bad practice. Assign the value to a named variable, and let the variable name describe the number. You have two separate constructors which effectively do the same job and both take a single parameter (implicit for the default constructor). That means that any future changes might have to be repeated twice, once in each constructor. There is a Java idiom which allows one constructor to call another constructor. You may not have done this in class yet, so feel free to ignore it, but I have included it in the code below. 

This looks for a palindrome, similar to the other answers. I prefer to work from the ends inwards rather than from the centre outwards. That way there is no danger of falling off the end of a non-hollow array. I check for short arrays to avoid problems with indexes falling off the ends of arrays length 0 or 1. Since I'm checking anyway, I throw out length 2 as well. I have written and commented the code for clarity, since the other answers appear to concentrate more on speed. I changed the name of the array variable from to . The first is too close to the class name . 

In order to have a "unified" (I realize how ambitious this actually is) syntax when working on dataframes, I wrote the following functions that is a general purpose dataframe set of tools in R. 

Comments I don't really see the point in on top of your methods. You can just type which automatically propose a neat documentation, per example, in the MatrixCreate function : 

Another option would be to have a or value in your class. Multiple accesses inside the same loop Here you have to access every time in the second loop. This harms performance and makes this second loop unclear. 

Function naming and are kind of misguiding, I would expect that , but this is not the case as each function treats the diagonal in a different manner. In order to improve readability, I would write a method and a 

My knowledge in graph theory is very limited. I have to look for elements in an (undirected) graph who are in the same connected component. The idea is simple. First, build the graph. Then, allocate a "color" to a point and spread it to its neighbours recursively. Once there are no neighbours to color any more, pick a point without any color and repeat the same process. This ends when all the points have a color. I wrote the following class : 

Help Messages There is also the option to add the help message, but the behavior is quite different: 

The loop was working fine, but it seemed odd the Dragon would move before the next turn and after a collision had been checked. You could reorder the loop from this: 

For slightly less verbose loops, you could change loops to loops. This didn't make a large difference in times though. I entered the number into the website you linked, and your algorithm did give the correct answer. 

Every loop of is evaluating all three conditions. You can combine these into an If/ElseIf/ElseIf so subsequent conditions are not evaluated when the first has already succeeded. 

How is this script called? It looks like a great candidate for a cmdlet. Parameters Validating Because it exits when a value is incorrect (instead of looping until data is valid) you could use Parameters with validation scripts. For example: 

I assume the commands are to view progress/status of the script? I would remove these if you are confident the script is reliable and accurate. Maybe one status () after every instruction line. 

I like it, I learnt a few things about objects from this. I also really liked the board size can be easily changed. Immediate Collision When playing I noticed the Dragon was allowed to start in the same position as the Player. While it's not explicitly stipulated in the tasks, it might be nice to avoid that: