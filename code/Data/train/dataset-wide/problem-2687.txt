clearLimits() and clearLoginHistory() Why do you use ? Again, create a local variable! is the 'default' name for query results, since it returns a . 

Why? Why you close a to just repeat yourself, in a different way, on the next line? Move the content to the first handler, and you are set. Repeated properties. You have the following properties: 

I'm sorry but I have to start with the obvious: your indentation is barely non-existing, making your code needlessly harder to read. Indentation is important (but not mandatory)! 

You trust too much in the user. You have no validation what-so-ever! I could say I have 5 coins and then only give 2 denomination in the wrong order. What would happen? 

Your function is really easy to read and follow. I, personally, hate the double-space indentation, but that's a preference. But there are a few things that you can improve: 

It all makes sense, except for the class, which I will explain later on. And please, use the HTML entities, to avoid problems with file encodings. Also, don't use for this, since it will have problems when the animation is stopped. The best would be to move the to the HTML and ignore that line. 

Also, one cool thing you can try is to use a random timeout, to create a varying effect on the writting, to simulate real typing! You can even add an extra interval to special characters, to be more human-like: 

getLastLoginDate() Seriously, USE LOCAL VARIABLES! And why in the love of God are you fetching the information again from the database, when you could store it all in a session or similar? 

Knowing it is a rather large script, I've tried to split it into multiple functions, to make it easier to understand, read and maintain in the future. You can see the complete instruction list on $URL$ As far as I know and tested, this is working as it should. All it's functionalities function as intended and there seem to be no obvious errors. Regarding readability, error handling and readability, is there anything else I can improve? 

HTML: The HTML is pretty basic, but there's still plenty to improve. Lets look at it on it's original state: 

You have the functions and . They have giant names. And the code is almost the same. I suggest the following: 

Still on the same , you forgot to indent it. Indentation is important to check what belongs where. Code is read far more times than written. Improve it's readability. 

This stores and re-used the created, instead of always running a useless . And since I've already subtracted the magic number, there's no need to re-calculate it here. 

You re-use the in there, and store the text on a variable. Your priorities are swapped! The slowest thing in that code is repeated, but you have to store a string in a new variable. This is how I would write it: 

Since that expression will return a boolean value, you can send it directly. Also, I've added a to the filenames, because one could name a file and it would validate. I don't think this is the right way to check if those parameters are met, since you may have a file named and it would fail, even though it is a perfectly valid extension. Even would fail! Java isn't my beach and it really is outside my confort area, but I recommend a method where you itterate over all the elements and check, with a Regular Expression, if the extension is indeed valid. 

Since the length is 1-based and the indexes are 0-based and returns numbers between 0 and 1 (excluding the 1), you don't need more than this. And now, the You have the following code: 

This part can also be used for the block. But a major concerning area is that regular expression. It is made to match newlines, the first and a space and . Here's my proposal: 

Overall, your code looks good. A+ for readability! Probably a missing spot somewhere, but no biggy. Still, your code is easy to read and follow. 

I'm actually happy with the results, but the comment highlighting is concerning me. Is there anything I can do to improve the highlight syntax? What can I do to improve the performance? Am I handling comments correctly or should I try a different way? 

SirPython already gave a really nice review. But there are some nitpicky points left behind. Just small stuff. You have the following line: 

You aren't validating your images properly! This allows me to send you an image file with a webshell. Something like this: 

This is so easy to extract from your memory, with something like CheatEngine. I would try to do something like this: 

Same goes with quotes. You have single-quoted and double-quotes strings everywhere! Just pick 1 style and use it! (My recommendation goes to single-quotes.) 

After testing myself, I concluded this: It's bugged!!! The expected result is different that the provided result. I really don't get the reasoning to do . Here's a test code I've build, based on yours: 

The idea here was to skip checking as many characters as possible, and only checking the characters inside the needle if strictly necessary. To test the speed of the function, I're ran the following code a few times: 

And you have another problem: You throw away all the other arguments. If you want a function to accept 2 arguments, you're throwing it away. This is how I would write that bit: 

Note: There are a few edge cases, such as (very rarely) substrings like and going untouched. I am aware of those and I have no idea how to avoid it. 

You don't give space for your variables to breath. You crammed everything up and that makes it harder to read. An example: 

Well, that won't work. What you have there is a CSS selector. Fear not, just remove the . But a few lines below you have this: 

The method name should be . Boolean methods begin with , like if you were asking a question. Since you are 'asking' if a directory has some defined attributes, you should reflect this in your method name. Based on your current name, I wouldn't expect it to return if it had a file there. One example of this is the method . You have another example on the following line: 

This part of the review is focused on the Javascript aspect of the answer I will be really light on this review. I will try to make it short and quick. 

This won't be a very in-depth review since I don't know angular.js, and I will focus only on some superficial issues. 

(Due to limitations on the representation of whitespace, I've seen myself forced to replace all tabs with a 'indicator') 

In the name of all Javascript developers, I thank you for taking this very simple step! You have no idea how much is helps us and helps you! 

The (or ) allows you to create an alias to the jQuery object, being it passed as the first parameter. You can read about it on $URL$ 

While you're doing right in using (the equivalent of) , you are forgetting that can be called, breaking your code. My suggestion is to use something like this: 

Completely remove this line. All that replace can be made into the following regular expression: This should be the very first regular expression. Since all the other rules handle whitespace, one only needs to normalize it. The rest of the replacements will dictate if it needs to be replaced or not. If the whitespace is simply removed, it will lead to removing needed whitespace. Here's an example CSS: 

This function should do 1 thing and do it well, not a bunch of them and doing it ok-ish. The already-mentioned readability Variable names should be descriptive. Example of variables you have: 

See the mixed quotes? You have inconsistent quotes. All your objects have different quote styles. The same object has properties with quotes and without. Pick one, stick to it. Unnecessary code. Observe the following example: