1) impdp with network link doest not need the production database to be stopped. This is the slowest method, as this needs to build everything from scratch, I am not sure this would finish in 4 hours. 2) RMAN duplicate fails between different versions because it tries to automatically open the database, and that will fail. But you can manually restore the database on the new host from the RMAN backups, then open it with and run the upgrade scripts immediately. With this method, you need downtime only to upgrade the database on the new host, should not take more than 30-60 minutes. 3) Streams does not require any license. You can just simply replicate the database, and start using the new database whenever you want to. This requires the least downtime, but the configuration and administration is cumbersome compared to other methods. 

is not the problem. You may have a special character somewhere in the table definition. Above code works in general. But below is an exception, to reproduce your error: 

If you have a primary key, you don't have duplicate rows. In Oracle, you do multi-table UPDATEs by using MERGE, and not UPDATE, because that is inefficient. 

TLDR: The CTXCAT index is supposed to be transactional, but Before Insert triggers that modify the indexed column don't seem to induce an update. 

(Slightly different than what I said in my question, I apologize.) The effect here is that, each time I used one of these statements, either the or would be null. So when we get to this condition: 

I'm running Oracle DB 9i. I have a table with various constraints to ensure data integrity. In addition to the constraints, I have triggers on and to ensure that necessary data goes into the table, in some cases allowing the application layer to omit the information from their queries, and in some cases forcing that it be present. The actions that I need to do on my are different than my . My question is this: Can I have one common trigger that uses , or should I make separate triggers? For example: 

The trigger works properly and populates the alright. But it seems as though, even though CTXCAT is supposed to be transactional, it's not smart enough to detect that I've manipulated the value in my trigger. In the tests I've done so far, only a direct manipulation of that field with an update or insert query will trigger an update to the index. Any solutions to this? I would like to more or less keep the set up I have, with the field being populated by triggers rather than in my DAO layer, but I need to force the CTXCAT index to update itself whenever that field changes, even if the trigger is changing it. Alternative methods of handling this are welcome as well, but I'd prefer a simple tweak or annotation or something to just get this working. Thanks! 

Of course my benchmark was very limited on a specific kind of table and with a very limited set of queries, but I think that based on this information we can already start saying that it is virtually always better to create a clustered index on your table. 

The results now indicate that the only statements which benefit from the clustered index are the update statements. The other statements are about 30% slower on the table with clustered index. Some additional charts where I plotted the weighted duration per query for heap vs clust. 

INSERT benchmarks The last part of the benchmark is the execution of insert statements. insert into heap/clust (...) values (...), (...), (...), (...), (...), (...) 

As you can see the performance profile for the insert statements is quite interesting. The spikes are caused by a few data points which take a lot longer to complete. 

Since my user is sysadmin on all servers I am really puzzled why this is behaving like this (unless it is a bug fixed in SQL 2008 R2 SP1). Edit: Wrapped object names in "Quotename" Edit: Added content of server_principals 

I never make changes directly to the column. Instead, I have a Before Insert Or Update trigger, that composes that value out of and . The trigger looks like this: 

Aha! I've found the answer. Talk about an edge case. First, I found this post from 2007, where someone says: 

I'm using Oracle Text (available on 9i) with a CTXCAT index on the compound_name field. CTXCAT is a transactional index, meaning that it updates any time there is a change to whatever it's indexing. This is in contrast to a CONTEXT index, which requires a manual or periodic command issued to it, at which point the index updates. Index creation code: (forgive the capitalization) 

We are doing an equality comparison against a null, which evaluates to UNKNOWN. Hence, no index update. This is actually an extreme edge case, because you have to be indirectly modifying via a trigger, and either or must be null. I would never have discovered it it I hadn't used those exact SQL statements. So, we have a slight update to the trigger: 

As we can see from the added results, the conclusions on the limited tests were not correct in every case. 

The first table called got a non clustered index on the field . The second table called got a clustered index on the sequential field called and a nonclustered index on the field The tests were run on an I5 M540 processor with 2 hyperthreaded cores, 4Gb memory and 64-bit windows 7. 

My user is a member of the sysadmin role. The script will create a certificate (The real deal extracts the certificate from a .net assembly), check if the login exists and if not, it will create the login and grant unsafe assembly rights. 

I am trying to create a login and grant it rights to run and unsafe assembly but the check on server_principals does not return the login when it already exists. The script works perfectly fine on my local development server, but fails on our test servers: 

SELECT performance To check performanc numbers I performed the following queries once on the heap table and once on the clust table: 

Hm, so the CTXCAT index uses a trigger to know when it needs to update the index for a particular entry. All I need to do is tweak the trigger and recompile it so it does what I want. To get the content of the trigger: 

You can see that the 12c Oracle Text version's AFTER trigger does actually compare the and values of the indexed column to see if it needs to update--not the case back in 2008. So...if I'm updating the value in my BEFORE trigger, that should be reflected in the AFTER trigger, and the comparison would kick off an update to the index. What gives? Well, here are the two SQL statements I was using: 

You can see that any change to the or fields updates the field with a capitalized, concatenated string. The trigger capitalizes it because Oracle 9i does not support case-insensitive indexes. To get a case-insensitive search, I uppercase the and in my query I uppercase the search value. Now, the problem: Executing this SQL command does not cause my index to update: