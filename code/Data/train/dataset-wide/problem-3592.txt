The bounce messages should contain headers that show at least some of the servers the message passed through. Email headers are a valuable resource in investigating issues like this. The method to access the headers varies by email client, some of which make it easy to access the message source. Configuring a strong SPF policy ending in like should reduce backscatter. However, it does require appropriate policies. You may want to review my policy as example. It is common for spammers to use a faked sender address in outgoing messages. It is possible that they have harvested your user's email address sometime in the past decade or two. If the messages are backscatter, you may want to try to contact the administrators that are sending the backscatter. However, it is possible the email is intended to resemble backscatter. The contents of the headers should help in determining which is which. Received headers are added to the top of the header by each host that handles the message. The IP address in the first header will alway be correct. Unless there is a spoofed header the IP address if present will be correct. Headers above the spoofed header will also have correct IP addresses. Besides the IP address there should be the domainname of the sending server. Depending on whether the sending host is correctly configured there may be an additional domainname used in the EHLO/HELO command. These headers are from a recently received message from Facebook. They use a different domain name in the HELO command than is found by rDNS verification. The second header is from the facebook server that generated the message. (Recipient has been obfuscated, but the rest of the content is unmodified.) 

Try moving the quota plugin ahead of the userdb configuration. Most configurations are processed top down with the last value winning. 

Check to see if 'sudo getent shadow' is working for ldap entries. Check that you can get an authenticated connection using ldap-search from ldap-utils using your /etc/ldap.conf connection data. Depending on your configuration you will also have to configure ssl values in /etc/ldap.conf. 

I have done a number of posting on Electronic Mail which may help you. In particular you may want to look at my posting on Detecting Server Forgery. 

If you want to send and receive email you will need a fixed IP address and appropriate DNS entries. Automated systems such as you appear to be developing tend to be poorly configured resulting is much of their output being classified as SPAM. For outgoing mail you can install a simple relay like , , or . These are all available as packages and provide a local SMTP server for your application. The email will then be relayed via your ISPs relay or another relay you specify. Many applications can be configured to use the SMTP services on another machine. This may be your simplest option. If you do configure a mail transfer agent, spend the time to become familiar with the standards. Your time will be well invested. I find EXIM to be simpler to implement in any of a number of standard configurations. The and packages will get you started. My article on Running and EMail Server might give you a starting point on getting setup correctly. 

If you are testing changes you may have problems with IE unless you shut down all IE windows and restart. IE can be use its cache aggressively. EDIT: You need to ensure mod_rewrite is enabled. Command is . It will tell you if the module is already enabled. If not you will need to shutdown and restart the server after enabling the module. Add the lines above to your virtual host definition and use to reload the modified configuration. The Apache documentation has details on rewriting. You should see the redirect as a 301 status request in your access log followed by a 200 or 304 status on the HTTPS connection. The displayed URL should change to the new location. Logging the port in an extend log format helps to see which connection things are happening on. Alternatively, use separate logs for each virtual server. 

If you value automated or marketing mail, check on the HELO command that don't work include. My experience is that all other mail passes these conditions. 

DNS servers generally don't log a lot of data. For a caching name server there should not be a lot to log. I'll use my bind server which is split brain and serves queries from the Internet. 

Spoofing sender addresses is a common spoofing technique. As you have control of the domain adding a SPF record with a '-all' final policy should discourage spoofing addresses in the domain. If there are email addresses in the domain then a policy of "v=spf1 mx -all" would be appropriate, otherwise use a policy like "v=spf1 -all". Given that neither of the IP addresses you listed have PTR records, it is likely that the Spam is being sent by a botnet. If your client is getting bounces to his address, then it is likely backscatter. If it is being sent from the client to the client, then the mail server's policies should be adjusted. It is best to require authentication before allowing users on the Internet to send from the mail server's domain(s). I've recently seen a surge in spam originating from long discontinued addresses. These are sent to the expired address to the new address. While I have the log data, the mail server's policy ensures the email is rejected. If the client is not using the address, then it should be possible to disable it in the mail server. For some mail servers this can be done with a flag in the . This should cause servers receiving mail from the address to reject it. This may result in backscatter spam to your client's address., but if the account is disabled it should be dropped in transit. It is too late now, but implementing BATV (Bounce Address Tag Validation) can be used to identify bounces from spoofed email. This should to be implemented on the mail server for a week or two before you can safely bounce email. This needs to be implemented by the mail server administrator hosting your client's email. 

Its not likely to find a 10 year old server in the racks unless it has been re-purposed, or isn't replaceable. If nothing else it becomes difficult to find replacement parts. For production use I usually schedule replacement every five years or so. If the budget doesn't allow for purchase of development hardware, they may end up being recycled as development machines. Server grade hardware is likely to run more or less forever except for moving parts. Support, power requirements, and physical size to performance become the significant factors. I believe our tax rules allow for a full write-off over three years (actually four reporting years). From a technical standpoint anything you can buy is likely already obsolete. From an accounting standpoint, if it still does the job it isn't obsolete. The performance/cost ratio is continuing to fall and may make earlier replacement a good option. 

You should configure DKIM and SPF for the domain you are sending mail for. Given the subdomain . it is likely sending traffic for the domain, and has email addresses like . In this case, you need to configure DKIM records under rather than under . The SPF record for could be as simple as . There is no reason why the mail server cannot send mail a different domain such as and/or . For each domain configure DKIM relative to that domain and an SPF record for that domain. It is useful to define an SPF record for the mail server domain like . This allow SPF validation of the host address. You should also consider configuring DMARC records. These are defined relative to the domain in the sending email address rather than the domain that is sending the email. I have posted on Securing your Email Reputation with SPF, Implementing DKIM with Exim and other subjects. The DNS details for DKIM are applicable to all mail servers. 

The NTP offsets you are seeing are milliseconds not seconds. If you have problems with the dates put in your e-mail headers being off, then it may be your clients. If you can get a copy of the headers, it should be easy to determine where the issue is. The Date: header should have almost exactly the same time as your the last Received: header (first MTA server to handle e-mail). NTP is far more accurate that is required for e-mail headers. If there is an issue, check that your servers are synchronized with your NTP server. It appears you gathered this data relatively soon after restarting your NTP client. This is indicated by the poll vale of 256. It should rise to 1024 once things have stabilized. Your NTP server is tracking your local server as noted by the "*" to the left. Given its stratum and jitter this is unlikely to change. If it where to report a time significantly different from the other servers, it might get evicted. Two other servers are being used to determine if the current clock can be trusted. These are indicated by "+" to the left. They will be chosen from the lowest statum servers. The other two are not participating in voting as indicated by "-" to the left. The voting servers may shift over time based on their stability as a source for your server. The jitter of these servers should not cause you any issues, unless your local server gets evicted. 

You have two types of servers involved here. There is not gathering as such going on, just normal mail transfers. and are MTAs (Mail Transfer Agents). They are responsible for accepting email and delivering it towards the final destination. In the case of incoming email, they will forward it to if that is the MDA (Message Delivery Agent) for the user. All other email will will be forwarded to an appropriate server if possible. These servers will store email and retry delivery if necessary. is an MDA and is responsible for storing and delivering email for the user. As an MDA it will not forward email to an MTA. It appears to be a POP server and will have a message store for each user it is responsible for. When the user's UA (User Agent) connects to they can only read email which has already been delivered. It is possible that and will be holding email which could not be delivered for some temporary reason ( is down, user has exceeded quota, etc.). Users of pop will likely have been given an SMTP address to be used when sending email. This server will function as an MSA (Mail Submission Agent) when the users connect. Its task is to authenticate the user (local users may not need to login), and add any required headers that the user's UA (User Agent) failed to add. The message will then be sent to the appropriate MX or possibly directly to an MDA. It is common for MX servers to act as an MDA or MSA. Here are some diagrams which might help understand the routing for incoming email. 

There is data that may indicate the database was cloned, or moved. Things like filenames for tablespaces are likely to change when a database is cloned, but they can change even if the database is not cloned. I believe you can retrieve the hostname or IP address on which the database is running. Again, this may be indicative that the database is cloned, but can't be used to verify that it is a clone. While it is possible to end up connected to the wrong clone, it is generally somewhat difficult to get in that situation. Spend some time understanding how your connections to the database are routed. 

The first thing I see is that your mailserver address appears to be a CNAME rather than an A record. This is a violation of standards. Change it to an A record with the same address as on the record the CNAME points to. See my post on Running an Email Server for some things to check. My post on Implementing DKIM has references for some sites you can use to verify your configuration. 

Looks like you have a good set of check in place. Securing your files so the server can not write them stops a number of attacks. Changing the ownership to a user id other than and limiting write access to the owner will prevent most attempts to change your content. Limit write access by www-data (the web server) to as few directories and files as possible. If your content is mostly static you could consider a checksum database like Tripwire. If your content is in a revision control system, then you can use a read-only id to update the website. Using the your RCS's diff utility will find any changes. A log scanner such as can report some attacks. 

The built-in chains have a POLICY which can be ACCEPT, REJECT, or DROP. This applies if no rules match. User defined chains have an implict RETURN policy, which can be overridden by ending the chain with a rule with the desired action that matches all packets. 

I've translated your DNS records into bind format. Unless you are changing an entry, you shouldn't need to specify the TTL for an entry. I've converted the SPF records to the simplest form. The rule for the record is for for SPF checks. The rule for indicates that no email should be sent from the sub-domain. Entries for your domain, sub-domains follow. (Note the dot at the end of the MX record. If it is missing you should just use ). 

You will need to delegate individual /48s. Assuming your /32 is your zone is . Reverse zones are done by dotted nibbles. That is why recommended sub-delegations are a or a . This yields 256, and 65356 /64 subnets respectively. If you assign 6 zones starting with , you would need to delegate the relative addresses through It appears your clients are requesting the capability to create 393216 subnets. Each network segment requires a /64 subnet. Each device will have one or more /128 addresses. Normally a device on the network segment (usually the router) will announce the applicable /64 subnet. In place of DHCP, devices can self-configure based on the announced subnet. It is still possible to assign fixed IPv6 addresses for devices such as servers, routers, and printers. Each /64 subnet has about 2^64 (18,446,744,073,709,551,616) addresses available for devices. 

If you don't need any of the functionality of host-manager you can delete it. You can secure the content by configuring Tomcat to run as a different user than the one which owns the files. This user will need to be able to write to the log directory and the working directory. 

Initially, lookups will failover to your ultra.com DNS. Depending on the TTL of your records your DNS will eventually fail. This will happen whenever your primary DNS server is down for an excessive length of time. Given that your sites are likely down, it is unlikely DNS will be useful for much other than indicating that email should be deliverable. It is possible you may have other sites listed in DNS and they would be reachable. However, if you had three sites it would make more sense to add the third site as your third DNS site. With your current configuration, if one site is down, all DNS will be handled by the other. If the site with your primary DNS is down, you will need to reconfigure the other to become primary. As @MarkM noted, you should review the DNS RFCs. They provide a lot of the answers you are looking for.