As keshlam said, don't panic and don't quit. The worst they can do is fire you and at least you will be paid for as long as possible and learn. But if you set reasonable expectations you might be pleasantly surprised. 

Since this was a positive review, I don't see any harm in waiting for the regular meeting. Go ahead and ask for clarification on these points, and seek out the additional resources they mentioned. They may not have any specifics in mind for how to improve in an area, other than "stretch more" so it might be important to just listen to how they view the feedback you got. Since this is their first time giving reviews, they may not have wanted to give a "this person is a complete rock star with no flaws" review or may have been instructed to try to find areas where each person could improve. 

It is common as a developer to learn on the job. The main thing you need to do is have open communication with your boss. In software development, people always seem to want more yesterday than a developer can do. There are tactics you can use to help give your boss reasonable expectations of what you can do. 

Arguably the simplest form of gamification would be a friendly contest. It could be anything, as long as it's work related, fun, and not too competitive. Fun rewards could range from silly t-shirts to books, nothing too pricey, you don't want people to get fixated on the price. The contest topic should be something related to the current goals of the company / team / project, whichever applies most, and it shouldn't be anything more serious than a friendly challenge. Whoever fixed the most bugs this week gets a silly t-shirt it's quite different than whoever comes last will be fired. Next you could have some kind of leaderboard, if your work has easily quantifiable aspects. To continue with the bug fixes examples, whoever fixes the most bugs each week gets a gold star, or any other silly achievement token you can think of, and every now and then the leader gets a price, bit more pricey than a book (two books?), or a couple of days off work. It would be impossible to come up with specific guidelines for gamification, as the process is entirely subjective (what's fun for me may not be fun for you), and quite dependent on the nature of your profession and the dynamics of your workplace. For example, there were gamification elements in every job I had, even in the strictest and most disciplined environment I had to face, the army. Getting a bit more recreation time than the rest of my company for disassembling and re-assembling my Heckler & Koch G3A4 in record time (don't ask, I don't remember) would be one example. And, of course, no answer on gamification would be complete without a mention to Stack Exchange. Chances are there is (or there will be) a Stack Exchange for your niche, and if you think about it, it's a ready made gamification platform for your company. Have your team mates compete by providing excellent answers or asking great questions, and use the existing reputation / badge mechanisms to quantify their contributions and reward them. If you are a manager, you can always spice things up a bit and ask questions on work related issues yourself, rewarding employees that would give you great answers. What you need to remember is that gamification is not about getting direct and immediate results, but mostly about having fun. Small and frequent rewards, preferably awarding the less illustrious aspects of the job (think: documentation), and always light hearted in nature, as the core concept behind gamification is encouragement and further engagement, not competition. Further reading 

In the context that the review was good I would view these comments as "things that can always be improved." I came from a dancing background, and in dance no matter how good you are, there are things to do better. A dancer can always try to kick higher, jump higher, spin faster, etc. Your boss may have this kind of "always can be improved" mindset, so you were in essence told 

Special comment about Sublime: Sublime does require a license in a business environment, though I have seen that ignored. You should make sure that that license is paid for. If it is not, suggest they move to atom which is a GitHub made Sublime clone that is truly free-as-in-beer as well as free-as-in-speech. 

You got a good performance review with a good raise. Since this is tagged United States, understand that anything above a 2-3% raise is larger than a cost of living raise. When you see that, remember that this new boss of yours went to bat in the organization for you, to get you a good raise. They clearly value you as an employee and want to keep you. About the comments in the review such as: 

Chris has a very good answer, but I would like to add my experence as working somewhere that made the transition from a traditional vacation policy to an unlimited one. Many people working through this transition had many of the same doubts you did. 

One cup and one plate per person. Seriously, nothing else works. Hide cups and plates (in case you need them, for a customer or something) and only leave one cup and one plate per person. People will either start cleaning up for themselves or for others if they want to use them. I've done it twice, and it worked both times. The first time people started cleaning up for themselves, the second time they started bringing plastic cups and plates from home. In any case, the kitchen was clean. 

How do you avoid discussing anything non work related at work? The interest around politics may have peaked after the debate in the US, but in Greece politics (and more specifically the economy) is what everyone is interested in discussing for at least the past couple of years. You'd imagine that it would be far more difficult for us to avoid such discussions, but it really isn't. Just don't talk about politics yourself, and politely excuse yourself from the company when someone else starts the discussion. Coincidentally I've worked in two environments which can be considered polar opposites when it comes to discussing politics, one was a town hall (where politics were actually our work) and the other was the Army (where discussing politics is strictly forbidden). Couple of years after I left my position at the town hall, that involved regular meetings with elected officials, my co-workers there were surprised to find out that (at the time) I was a supporter of a minor opposition party. I had spend nearly seven years in an environment where politics were all there was to talk about without disclosing my own affiliations. I just never talked about it ;) Every workplace is different, but I don't think that in a typical workplace there's much room or time for non work related discussions. Certainly we all take a break once in a while, and we all might get caught in an uncomfortable discussion around the water cooler, but those discussions tend to be short (how long can your break really be?) and easy to evade. My standard excuse when things start getting uncomfortable, or I'm simply not interested in the discussion, is that... I have to get back to work. Simple, isn't it? 

One reason not covered by the previous answer is that you may have gone from being paid semi-monthly to bi-weekly. So for the same salary, lets go with £50,000: 

This depends on the workplace. As Chris mentioned, asking about average vacation is a good idea. Maybe as you talk to the team, ask what their last vacation was to give you an idea of how your future coworkers view their vacation time. 

Same salary, but per paycheck semi-monthly pays £160.26 more. This difference gets bigger with a higher salary. One bonus of bi-weekly is that if you budget assuming 2 (smaller) paychecks each month, the 2 months you get 3, you can have extra spending money. 

You probably won't find fine print with a number of days specified. Your contract will probably say something like "If you plan on being gone for more than 2-3 days you will need manager approval." This should be no different than traditional. Basically you have to get your manager to let you go. For people with bad management this means that "unlimited" becomes no vacation. If you have a reasonable manager, they should let you take a reasonable amount of vacation. If you ask for a month off every quarter, expect them to say no. Guidance at my last company was that people should be taking 4-5 weeks. 

In most of these "I don't want to offend them but I want to do this other thing" cases, honesty is the best policy. Most often, if you offend somebody, it's going to be because you caused them to feel like you participated in the negotiation/transaction in bad faith — leaving them without a fair chance, thus wasting their effort in an exchange they didn't have a chance. No one wants to put effort into something where they don't have a chance, and organizations and people alike actively avoid parties that they fear will take advantage of them. Example of bad faith They offer, you accept. Two weeks later, you reneg, saying your old company wants you. They might feel like either you used them for more money (as a safety net in a bluff), or you're flaky, but either way, you didn't give them enough information to truly compete and it possibly indicates low integrity. They had no chance to really get you, and they put a lot of effort in, leaving them with a sour taste. How to act in good faith In this case, you're right to be worried, since it seems like you might not be completely sure why you are reconsidering (since you haven't really told us). Remember, the base assumptions when you seek out (and especially when you accept) a new job are that something about the old job was not good enough. It could be: 

You didn't ask this, but it is implied. Many times people in traditional companies may try to burn up their vacation. Like my dad taking off every Friday for 2 months. Many people may bank up vacation to use around the birth of a child, or use it around when they are resigning. My experience is that this doesn't work this way. There is no days to "burn" so there would be no reason for the company to compensate someone leaving/being laid off with unused vacation days. Don't think that there will be a magical number of days you are entitled to. 

Depends on the employee/manager agreement. Everyone has different vacation needs. My current manager has 4 weeks of vacation and she talks about never using it (traditional scheme). I currently have 2 and have realized that I really REALLY want at least 3 and would use all of it up. You'll find in unlimited land people don't feel internal pressure to "use" up their vacation at the end of the year like my dad has done for years taking Fridays off in Nov and Dec just for the sake of not "losing" his vacation. If you need more vacation to do your job better, you'll get the time off you need. But if you take soo much time off that you are not getting your work done, expect it to get denied. 

I strongly dislike receiving emails from colleagues that aren't strictly about our work, however interesting or useful they might be, and I would go absolutely mental if someone interrupted me by sending me a link via IM. That might just be me, but the lack of response from your colleagues probably means that they aren't exactly enthused about it as well. On several teams I've worked with I was (sometimes officially, others unofficially) the researcher of the team, and part of my responsibilities was to dig up anything new and cool we could use in our codebase. From my experience, what works best is a casual, in company blog. Every time you find something you'd like to share with the rest of the team, write a somewhat comprehensive article about it, don't just post a list of links without context. It doesn't have to explain the concepts / practices / technologies / tools in depth, but its essential that you point out clearly how whatever you are talking about applies to what you or your team works on at the moment. You could start with the rewrite, write a series of small and casual but comprehensive articles on what new things you introduced to the codebase, what decisions you made and why, discuss challenging issues you faced and how you overcame them. Show real examples from your codebase, point to actual tickets in your issue tracker. In short: context. At the end of the day your colleagues may still ignore you. But this time it won't be because you're spamming them, and you'll have excellent documentation of your thought process and progress of your skills. 

I am currently in a somewhat similiar position. Most everyone in the company uses an IDE called eclipse, but I prefer to use IntelliJ because I develop faster with it. My tips: Give their tool a chance We always first like to use "the tool we know" in your case, vim. However, each tool has its advantages and disadvantages. Use their tool for a bit, ask for help doing things you are used to in vim. Through this you either learn "their way" or you build an argument for your tool. Also take this as an opportunity to grow your skills in more than one tool. As others have mentioned, knowing more than one way to do this is important. Make sure to keep your skills fresh. And even if you don't stick with this tool, there may be aspects of it you can bring to your vim workflow. As a side story, on a team I heard about but never was on, the team used tool X to develop. A new teammember wanted to use tool Y, but was told: "no, we do it with tool X ONLY!!!" So the teammate used tool X. Later he asked: "How do I diff with tool X?" Their reply: "oh, we use tool Z for that." His: "If we use tool Y, we only pay one licence and it can develop and diff. You currently pay 2 licenses for tool X and Z." That is a clear business reason to allow tool Y in. Use your tool anyway If you have done the above, and they still insist on their tooling -- which in your case I strongly see happening with the learning curve of vim -- use your choice but don't call it out. Set it up to have similar code style to theirs. This is what I am doing. Not making anyone else switch IDEs on my team, but my teammates know I use a different one. Occasionally they ask about it, and I am a good ambassador for the IDE. You can become a similar ambassador for vim if you like. Per a comment on a different answer, If you choose to use a different setup from the standard, as a professional you take your own time to set it up. Which means working nights and weekends if you are fussing with your setup or your setup breaks the normal workflow of others. This also means taking charge of fixing sub-par tooling and infrastructure to allow you to work -- for example allowing a build to happen on the command line instead of in an IDE. Be courteous and remember that you are asking for a favor to not use the standard setup, you are definitely not entitled to it. If you using different tooling causes too many issues be prepared to throw in the towel. The risk with this from management, is that you are basically asking for forgiveness if they really insist on Sublime. There is value in standardized tools on a team. Depending on the situation, standard environments can mean better collaboration because a teammate can come over to your station and know exactly what they are looking at to help. Respect that if management insists.