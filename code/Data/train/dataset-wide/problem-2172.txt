I have a SQL Server database that is running these scripts to create backups. It's running full backups once a week, daily differentials, and hourly logs. These are being FTPd to another box where I would like to be able to restore them for verification purposes. Right now I'm doing this simply hand picking the appropriate backups using the names of the files, which have the date/time encoded into them. That seems pretty hacky to me. On the main SQL Server box where the backups are being created, I can open SMS, right click on the database, and select 

So if I am going to recover the database using the second differential backup, wouldn't it stand to reason that the second differential backup's FirstLSN would start where the full backup left off (22000000038800001)? Restoring the second differential would apply all the transactions that occurred after the full backup was created wouldn't it? I'm not understanding how the system accounts for the LSN gap between the full backup and the second differential. 

In a scenario where Oracle Golden Gate is used to replicate a primary site with an Oracle RAC database to a secondary site (and active/active back) we suspect unexpected changes from the unused secondary site. The issue is a bit hard to debug as we do not have direct DBA access. I wonder is there an easy way with unprivileged SQL access on the primary side to see if any changes are received from the other database? Can I see counters or timestamps of OGG activity which helps me to track down DML made? As I understand it I could see changes from the OGG user when setting up triggers or auditing - however both is not available in this situation. 

To my knowledge no index method or statistics depend on the potential range of the type. They all depend on the actual values and their current min and max. (This also applies to columnar compression store) So this is not a reason for restricting your PK (and columns referencing it). The only difference it makes is if you have a combined index with many large rows, because when you create those Oracle will check the potential maximum length of each column to see if it fits into the page induced restriction for maximum bytes. You will hit in this case. But this is as DDL time not when you do DML. However that's not a very strong reason as you should stay away from operating with such a wide index which is close to the maximum. 

, but naturally I can't make an EXEC in the FROM clause. I also tried to make a new Dataset in SSRS which would use data from another Dataset within the same Project but that did not work either (and I Googled that it is not possible). Edit: final solution What I did to implement this was to create a table of the appearence: 

and then use this table to reduce the amount of stores a user can see data from. I do not know how I can utilize the Security Group in SSRS though, seeing as I have only found in the Built-in Fields in SSRS, but nothing about their respective Security Groups. I am also not sure if this is the optimal way to go, as it requires additional tables and manually updating the table (because I do not wish to automate this procedure yet to have a higher Control over this). EDIT I found a way to get the permission path, i.e. Group belonging to a user using SQL server and the Query: 

I was hoping at this point I would be able to get the full grid of restore options containing the diffs and logs inside MSM but it still doesn't want to show up. The paths to the backup file are the exact same on the new server as they were on the server where they were created. It seems like the system should be able to take all the backup files and tell me which ones go together. Is that possible? 

You'll notice that there are two differential backups. If each differential backup contains the data for the transactions of all the previous differential backups, why would the FirstLSN of the second differential backup (22000000041800004) be higher than the FirstLSN of the first differential backup (22000000039800037)? If it covers the same transactions why wouldn't the LSNs overlap? If you look at Microsoft's documentation on this it states 

I can't seem to recreate this on the remote box though. I figure that the other SQL Server probably doesn't have the metadata required to create this list since the backups didn't originate from that box. Is there anyway to restore that meta data as well? I tried restoring msdb but it doesn't seem to help. Here are the steps I'm taking: (1) Restore the master database on the new server. (2) Restore the msdb database on the new server. (3) Restore the full backup of the database on the new server with 

When using Oracle BasicFile and SecureFile one property of the implementation is that each LOB occupies multiples of the chunk size (and in case of SecureFile the smallest chunk size is the block size). This does luckily not happen for data which fits inline in the row, however for that data I could use a normal type. So my concern is more with data stored in the lobsegments - there the overhead can be up to a whole database block (per row) if the LOBs have unlucky sizes. Does this change when compression is turned on? I mean if I have a blob which is 7k and compresses to 5k It would still occupy 8k (if this is the DB blocksize). It would be somewhat unfortunate to have a tablespace with extra small blocks for (extra large) LOB segments. (But I understand that SecureFile with dynamic chunk sizes deals much better with this) 

Update: Initially my question also asked why I no longer see the 'BIN$' segments created by Flashback Drop Table anymore in 12.2 anymore. However that was an error on my side, my test tables had simply no segments to begin with. 

I have a SQL Server database that is creating full backups once a week, differential backups once a day, and transaction log backups hourly. These are being FTP'd to another box, where I would like an automated system (which I am writing) to pick them up and restore them into a working database. So basically every hour when a new transaction log file comes in, I want to find the appropriate full backup file, differential backup file, and other log txn files for that day use them to restore the database. The issues is that this machine will have several weeks of backup files on it so I need a way to group them together appropriately. What is the best way to do this? When you go into Management Studio and do a database restore, it gives you a listing off all the full, diffs, and logs grouped together so clearly it's storing this grouping data somewhere. I've seen the RESTORE HEADERONLY command, which seems to provide some information but I'm not 100% sure how to use it. It looks like you could make the CheckpointLSN of the full backup to the DatabaseBackupLSN of all the other files, but I'm not totally sure about that. My log files to have date/time stamps in the name but I would rather not rely on parsing file names to group everything together. This article does provide some insights but I would prefer some sanctioned documentation from Microsoft before I embark on a solution. 

I then created a variable called in SSRS where I used and where I had a dataset where I selected StoreKey using a JOIN on the current user's using the Query provided by and my table I had created. Thus I only got the StoreKeys available to certain AD Groups. 

I'd like to create a SSRS report which utilizes data from our Data Warehouse, DW. This DW has summarized, for example, the sales of 100 or so stores into one table FactStoreSale. In the report I've managed to see which AD user who has started the report, by using the expression as an default value in a parameter. Each AD user is included in a AD Security Group. This Group typically includes the manager and the employees shared account . The name of the Security Group is typically (for StoreKey 1000). Is it possible to allow users in a Security Group to only see data corresponding to that StoreKey, i.e. if some user included in the Security Group uses the report, the resulting set will be: