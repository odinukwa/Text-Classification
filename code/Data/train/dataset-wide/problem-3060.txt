The and the parameters and are good examples why has to be handled with care. All those names are already in . Use only if you know the risks. That being said, your generic variant will only work with random access iterators. If you want to make it more generic, you have to use and instead of and : 

This might seem arcane, so let us have a look at that pattern. Anything inside parentheses is considered a group. So we have four groups: and three times . The hyphens in between have and are therefore optional. If they exist, they must occur once, so is not allowed. The indicates are character class. Only characters inside that class are allowed at that point. The indicates that we're describing the start of our string, not some point in the middle. So we have to start with 456. That requriement is now met. We're followed by 3 () digits. Our first group therefore consists of four digits, and so do the others. The makes sure that there is nothing left: our string has to stop there. The re documentation provides more information. We now have met most of our conditions: 

That's easy enough to undestand. We also added some types so that we can change our program in a single line, for example if you want to change the to something else later. Now we need our helper functions: 

You don't provide any of them, but you should. For example, I cannot copy a at the moment. I have to write 

But that's not what you've intended. Therefore, make sure to add type-signatures to all your top-level bindings: 

we can now say which characters we want to change. But we can make even more generic. At the moment, we need a list of keys before we can actually call . But that prevents certain kinds of ciphers, namely those that work with the value of the previous character. We need some kind of state for that. Here's where that hint from my last comment comes in: 

First of all you make 1 big fault by saying that your classes inside are private. They aren't, they are , more info on site of oracle. Then, let's start with the enum. Your is also package private. => change them to private. Your getter for the code is also a little off the normalisation, let's try to call it . Final result could be : 

As you can see now, I can easily refactor the code. Let's say you class grows and we need to change the to For me it's one little change and it's completly done. Your old class, you have already to change it 3 places, possible fault's .(forgetting one to change) waiting to happen when your class grows. 

Fifth : Your has only all static methods and variable. So no instanciation has to be made. Why not make the class static and maybe even final when you want to be sure nobody may extend that class. 

The class you could add constants in stead of repeating your chars. Then also, you have repeating stuff what you can put together. The naming , are for me to broad. Example of how I should make the class : 

It's cleaner code who saves a little amount of memory because you don't need to recreate the every time you call the method. 

So the result in the abstract class could be (You know what exactly the code does so make the names better for your cause): 

The same for your basic classes. I see and always popup(except for ) and and have even more in common. Try abstracting this to an abstract class. Dangerous situation Now I guess you have overlooked it but you have a potential bug in your code. In the class you have the and calculates the distance in async task. You don't provide a setter cause that will break your distance. The fault is that you have this getter. 

So I'm really not going to speak that way, you are coding smart with primitives, what's also the reason of the benchmark result explains. There are a few points what could be improved. At first sight, I didn't understand why you create arrays of 256 size. After a better look, I understand it but please use a constant for this and name it like MAX_ASCII_VALUE_CHARACTER. While they do not speak over what characters the could contain, I'm tending more to go to the original ASCII table and not the extended, so I would change it to 123(z) or 128(full). Your naming of variable is pretty good, but sometimes you still name them bad. Example : or . While the min is already slightly better chosen, you could still name it like and the other one, you actually don't need it. You can assign the result directly to , check min for and read and from min pair. The reason is that you don't use further in your code. So final conclusion for me : Pretty good and smart code, with some (very minor) points to improve. 

This will format as . Since every file name has the same length, the sorting is somewhat better, and the prefix will simplify the users life in case they accidentally had a folder called (but they should really rename that folder). That being said, you should check whether you were able to open that file at all, and whether you could actually write to it. Remember, you're trying to fill a disk (not memory) to the brim. If it's full, you cannot continue to write, and either or will fail: 

This will replace by 8 in your code, which is still better than a stray magic number. However, it can hinder debugging in some cases and doesn't provide a type to 8. Prefer a or a , see here and here: 

Since you seem to prefer guards, we can also write the other cases first instead. Why? Because I prefer to use guards or patterns with clauses last (personal preference, really): 

You can use the same method in . Errors Your code has several errors. Some of them will prevent your code from compiling, some of them will lead to undefined behaviour. Errors during compilation Let's start with the compiler errors. Here's the part you should remember: whenenver you use a template, the compiler will only instantiate the methods if you actually use them. For example your function does not compile, since its signature uses , although it returns a : 

As you can see, we got rid of the recursive calls in and the base case, since that's now handled by . We also swapped the arguments, since gives the state first. Also, since primes are odd (except for ), we've optimized the list slightly. Unfortunately, we still need to get rid of those with multiplicity. However, what if we didn't return a pair? Return factors, one by one This time, we inline the functionality of : 

Write tests Unfortunately, your piglatify doesn't follow your rules. gets transformed into , but it should get transformed into . Also, should get transformed into , but you will transform it into . Rust makes it really easy to add tests to your code: 

You put the space because you know you are doing 2 different things, just do that extra step to refactor to 2 methods. 

Time to review, while I think your second line just have a typ fault I will not consider that. Implement abstract method with use of generics. All your Service extends . I see the method for AService. I see the method for BService. I see the method for CService.(I asume typo?) You can put this abstract method to the BaseService if you use generics. So it could look like this for BaseService : 

The intendation is correct but always use braces for if's. A lot of mistakes with if's comes from this. Example : 

Its a strange set up and you can make a mistake when you call this method, by not setting the length of the array big enough. At least this you should be doing : 

I'm looking at this class and I'm confused. The reason why is that I'm doing web programming so a dialog can be asked on different sessions. In that case this class is useless. In stead of holding your and in your class as static variable, just return them in the method. Then your 

This field could be because you set it in the constructor and there is no setter for setting this at a later point. LogFileFunctions.java Javadoc preffered 

So with a small refactoring you create a class what could be good for multiple users application. Other advantage is you can call the method multiple times, where in your setup this was impossible and even dangereous. Naming your class : A class is just so poor chosen. If you see a class name like that, what do you expect what's in it? It could be Utils for Strings like StringUtils or more like MathUtils? As you see at this name, you already know what to expect from it. A better name could be Constants : In android there is a class who have a lot of constants. In stead of doing this : 

Note that we don't need to touch at all if we want to change the input method later on. We only need to change . This makes it easy to ask the user for another number, or re-use in another project. Exercise: Usually, you don't want leading zeroes in binary numbers. Which function do you have to change to not allow leading zeroes in the result of ? What changes are necessary? Keep it simple and stupid In your loop, you do two things at once: you print the binary number and convert the number to a decimal. Unless you know that this is a bottleneck in your program and you need cache locality or something similar to keep your code fast, do one thing and one thing only. This makes it a lot easier to change the code later without breaking something else. We can split this functionality again into two functions: 

However, s can be error prone. You've used parentheses, which are often necessary. Furthermore, doesn't exist in your compiled program anymore, which can lead to some confusion if you want to debug. So consider the possible alternatives. In this case, a is fine. But there is no need for abbreviation: 

No. Or rather: it would be slightly cleaner, but also needs to work on the reversed list. This is more obvious if we don't use a position-independent predicate: 

Your calls itself twice, except when is in . Those two calls will call again twice (unless one of them is already in your base case), so we now end up with four calls. Let's have a look at for example: 

Concerning your comments on , did you accidentally use ? This will give wrong results. Otherwise I cannot reproduce your behaviour. 

Yes. But is it a binary search tree? No. You would never find . All nodes left of the root must be smaller, and all nodes right of the root must be greater. Remember, a binary tree has the following property: if you want to find a value, you look at the current value. If the value you're looking for is smaller, you continue in the left tree. If the value is greater, you continue in the right tree. But you always look at one of those subtrees. Never both. In a balanced binary tree, you would only have to look at \$\log_2(N)\$ nodes to find your value. I would link you to the Wikipedia section on Verification, but it already holds the solution. But here is a hint: carry along what numbers are allowed in your subtree. So, to go back to your steps, you should do something like this: 

As long that entity isn't saved (have an Id), I don't show the tab. In mine application I work MVVM so it's a little easier there to notify the GUI when an object is changed. Note: For the 2 solutions : the tab is always rendered in the dom 

Default value of a is . Default value of a is . Take care, default of and is . Defensive programming 

Same as h.j.k that you don't have to store the booleans for an if. Return directly in stead of saving into message. Result is like this : 

We start with that tab disabled. As the subscriber is created you can set the disabled to false and set the source of the include, so the tab will unlock. Another option, what I use in mine application is using the "visible" attribute. 

I seen a lot of things what can better so I'm glad you came here to learn. First : Your is a normal class. The extends that class and do just calling the super constructor without anything else. Here is a problem : Or you set your first class abstract if you know you are going to have other implementations (preferable with more code) or your first class should be an interface. Second : 

You are in a while loop so your loop will continue as long is bigger then 0. So I'm guessing you inserted that code for the last bottle. You just have to change : 

As you can see this is already a lit clearder of what it does. You put yourself a white space just before the for loop. You seperate 2 different actions there so refactor this method further so it will look somthing like this in the end : 

Are now package private. Declare them private and if you need them outside provide getters and/or setters. So it should be : 

Watch out: I put it here to point it out. If after init the coordinates will not change anymore make it there unmodifiable. So you won't constantly making a new unmodifiable list when you call the getter.