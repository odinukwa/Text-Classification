This shows respect for the colleague because OP would have went out of her way to communicate her message to him; while having the usual hallmark of being "I"-centered and factual. It is also pretty definite. If the guy singles out any of those statements for a counterattack, or ignores the message, then the "but I really don't want to" line can still be delivered as the next escalation. 

Meetups to discuss work really cannot be avoided - clearly this is a thing you have to work on. You still can keep it strictly business. 

Now is a good time to embrace that, and learn what it means to manage a Scrum Team. Your responsibilities have shifted now, as well. You do the usual stuff (onboarding new members, handling salary, helping your team to be able to work (getting them their hardware/softwar/etc. and a good working environment), maybe collaborating with other Scrum managers). The fact that your company seems to recognize organizational units has not changed. Your team members will still need to talk with you; just not about their work. Depending on what you did before as your daily work (doling out work packages to individual devs), you might want to look at other things you can do. For example, you could have a say in which projects your(!) team works for, or if a Product Owner gets nasty in some way it could be your job to calm him down. You could be responsible for managing customer contracts (sales, etc.). You will be a partner and a shield for your team in case of escalations. You are managing. Managing is not the same as developing software; and assigning tasks to individual people is just a small part of it. Frankly, I would say you are very lucky. Ride the wave. Let them do their thing. Avoid managing their new Scrum away; Scrum was made exactly to make the team self-sufficient and able to perform without constant micromanagement from outside. Many parts of Scrum are made to shield a team from unwanted management. Your job could be very easy now. If everything works as planned, they will handle a lot of stuff you had to do before. Everybody may be very happy from now on, especially if they didn't like your micromanagement before. 

I feel like I have to add an answer specifically because you already have accepted one. It is not exactly wrong, but, IMO, kind of missing the point. Forget the code for a moment. It will not be the first nor the last p-o-s code you have to maintain. As suggested, grind at it until you get some semblance of a working code-base, try to match deadlines, and so on. The part that needs just as much preparation and care is your own situation: you are heading headlong into a critical phase in your life, where you yourself might be going to the dogs if you don't pay attention. The way it is right now, by your description of your situation, everybody upwards of you believes that everything is just fine, that they have a gold mine, and that there really is no problem. The few quotes you gave already seem to suggest that they don't believe you, and think, well, not exactly badly of you, but at least neutrally; you do not seem to have standing with them. It does not matter how bad the code is. If it does not work at the deadline, it will be your fault, and your fault alone. You can document as much as you want, but the quotes you gave seem clear in that they are not interested in arguments, and don't wholly believe you either. The problem is not necessarily that they are evil or out to get you. It is a common problem that people on a certain level think very differently from people at another. That's nobodies fault, but that's the way it often is. See; they so often hear technical people complain about how difficult some task is, or how broken some application is, that it's like background noise for them. They don't want to hear it. It's not a valid argument in their mind. And they are correct with that - it is not their job to know the technical details (and code quality is part of a technical detail...). What they do need to know is what you are missing to reach that goal. So, in an optimal situation, you would have enough clout to tell them "I need 3 more people and an expert in XYZ to make this deadline". They provide what you ask for, you hit the deadline, and all is well. Unfortunately, I see no sign in your post that you have that clout. They seem predetermined that you, and you alone, will fix the problems. When you miss the deadline (and especially when you then start to blame the code), then, depending on where you live, it's either a new job for you, or at least your career in that company might well be over. So: get a manager on your side, maybe a team lead who still has roots in the technical side. Find a coach in your company who can speak for/with you, and help you with getting more workers assigned. But more importantly: prepare yourself for a phase of extreme stress, not because you have to work overtime, but because you may meet with discussions which will seem extremely unfair/hurtful to you, and extremely challenging and depressing. Watch for signs of burnout, depression or other stress syndromes (for example: not finding the energy to do sports anymore; not being able to talk normally with your family; etc.), and pull the line before you take damage yourself. Best of luck! (Source: BTDT) 

In my case, I was representing two teams; one developer/ops team with a strong DevOps challenge, and another pure development team which had a small greenfield component to work on. I was easily able to work with my teams, with customers, etc. as it was very clear what the technical challenges and solutions were. We used Kanban, weeklies, etc. and were quite happy and successful in our little world. My personal role was not that of a "project lead", but to bring the people together, structure their work, create boards, give broad technical guidelines, support them in case of escalations and so on (similar to a ScrumMaster). I view myself as an "enabler", and was objectively very successful in that regard (judging by the results delivered and the happiness of the people I represented). The problem While everything was fine at the bottom of the food chain, on the management level (i.e., upper management, sales, IT, delivery, team leads, ...), we had no structure whatsoever. No Scrum, no Kanban. People were not reading mails, and not sending information per mail. In fact, there was no written information at all. Information flowed when two managers (accidently or because one of them spontaneously needed something) met in person or on the phone. Things were usually ordered up=>down or left=>right, not discussed. Orders usually made little sense, as the guy ordering had little information to go on. There was no perceptable chain for escalations (i.e., due to matrix management, it was in most cases unclear whom to escalate to if things did not work out). There was one point where one rather high manager actually sent an angry mail, asking everybody to stop discussing things and "just start working" (not that there was an abundance of "discussion" beforehand, and as far as I can tell the project would have needed a lot more discussion amongst the managers!). That was so bad, it was almost amusing. The question