Looks like fairly clean code, but I see plenty of places it could be improved. Letting my eyes skim over it and stop on the weird bits... 

But my point is that you don't need any of that filesystem logic to begin with. Computing the 6542 primes from 2 to 65521 should take you about a millisecond — quite possibly less time than it would take you to open and read your file on disk! So let's discard all that filesystem code. That leaves us with the only interesting piece of your code: the prime-computation reference implementation. 

and we get a compiler error. In some cases the appropriate fix would be to constrain the template with ; but in this case the appropriate fix is just to Be Less Clever. 

Finally: Isn't the "change_key" operation just the same thing as removing the pair {key1, value1} and then inserting the new pair {key2, value1}? What's the point of providing it as a primitive operation?— can you actually do it more efficiently than "remove and re-insert"? 

Compile with to produce an assembly listing, and read that assembly listing. This should answer your question. :) 

Basically, though, looks good. Looks like you picked the right level of abstraction for this particular problem: not too scattered (keeping related things in a nice neat class), but not too libraryish (you hard-code , for example, instead of going all in with templates). 

But hang on, what is this if integeroverflow, if dividebyzero? That's actually quite unusual control flow you've got there! I infer that is going to be some sort of guard against division by zero... but I can't figure out how you're going to make it work. Well, let's go look at it. (Actually, I looked at first.) 

So: is never true. It looks like you're wanting to check the size of the message itself (like, number of bytes in the message); so, you need to add a function parameter to get the message size. would do fine. In C++17 the new party line is probably to use a . 

The extra braces here are a pessimization; they inhibit move-elision (a.k.a. Named Return Value Optimization). Remove them... oh wait, I see, is a , not a ! Why are you constructing a separate and then copying it into the ? That seems pointless! At the very least, this should be 

Looks like a decent translation of your algorithm into C++. However, if you're looking for speed, this code is very "heavyweight". 

SPOILER ALERT: you don't want a class at all; you want a function. But first, the style nitpicks! :) 

Reading the code of these libraries will give you a lot of ideas for how to optimize the representation; for example, how to get rid of . It may also help with the "SFINAE versus " question, which I don't address in this review but I agree that it's a good question to think about. 

(The comma at the end of each line is just a habit I've formed through long exposure to unclean output; presumably it would be harmless to drop the final comma in this case, if you're sure there will never be any more arguments added. But then, in software engineering we're always "sure", aren't we...?) 

Two things obviously wrong with it: One, it returns a -qualified object — that's always wrong, because it disables move semantics. Two, the name of the method is , plural, but the thing it's actually getting is spelled , singular. Pick one name and stick to it! The third thing wrong with this method is that it returns a potentially expensive vector by copy instead of by reference. The fourth thing arguably wrong with it is that it returns the whole vector, but the only place you actually use this function, you want to fetch only a single element from the vector. 

It's possible to create an object of type which is un--able! Definitely you should fix this. Either the constructor should throw an exception, or it should initialize the uninitialized slots to , or at worst it should leave them undefined and you should change to return "incomplete tuple" or something. Having a that throws is just bad news, IMO. 

This lambda takes its parameter by-copy, which is going to be expensive if is, say, . Prefer to take generic parameters by or (in C++14) by perfect-forward: 

Writing at the end of is unnecessary and unidiomatic (unless you want to be explicit because you return a non-zero value by some other codepath). 

Real code wouldn't contain this kind of hard-coded string comparison, unless it was written by someone trying to end up on The Daily WTF. If you were really writing an inventory system, you'd try to make it general enough to handle any kind of item, because, well, that's the point of an inventory system. Otherwise all you've got is a handful of nested statements. In general, beware of "Test Driven Development"; as you can see, it's led you into a bad place. Just because you wrote some code that passes your tests doesn't mean that you've written good code. 

In , if it's permitted by the rules of the game, consider simply invoking on the buffer (or maybe on medium-sized chunks of it). Right now you're wasting a lot of time comparing elements in order to come up with run-lengths that will generally be only or , and then you're going to waste time again comparing those elements to each other in order to merge them. You could instead do something like "Count up the run-length starting at ; if you find that the run-length is less than 100, then the 100 elements starting at and then continue counting from " (with suitable bounds-checking, of course). 

Stylistically, this is a case where I'd prefer a small number of massively long lines over a large number of shorter lines. Each of your cases takes four lines of varying length, which makes it hard to eyeball quickly and hard to check for places you might have made a cut-and-paste error. 

Lastly, even if everything else about this design were good, it's unsettling how easy it would be for someone to write a class that just dropped messages on the floor. 

if you wanted to. It pretty much just depends on how important the idea of "attack power" is, to the reader of this code. 

The names and (for and respectively) are ill-chosen. The name for is also ill-chosen. The word already has a meaning in C++: it means "maximum possible size", as in . When you're trying to find a name for a thing, choose the name that best represents the thing itself — usually this is easy because most things already have established names (e.g. , , ). When you need a name for a thing that really doesn't yet have a name, then you just need to avoid naming it the same as something else that's already in the lexicon (e.g. ). 

Nit on your posted code: At one point you . Wouldn't it make more sense to instead, if that code is never supposed to be instantiated at all? Or is it really okay to instantiate it as long as it's never called? 

I don't see anything in your code that corresponds to this sentence in your explanation. I think you have no "prioritization" going on here. The only thing determining which threads get to run when is the OS thread scheduler. And there's nothing at the algorithm level that could be described as "priorities"; this isn't like a rwlock where one side can "starve" the other. Contrariwise — each side here is "feeding" the other! 

You want a virtual method that evaluates to in one case, in another, and so on. What is the type of , , and so on? It's . (Yes, yes, technically it's and respectively, but not for our purposes here. :)) So: 

Yes, that's right — you've managed to write a recursive string concatenation routine! calls itself! This means that if there's no room in the buffer to concatenate the input strings, we'll produce an error message and attempt to concatenate it onto the log buffer... and if there's no room in the log buffer, we'll produce an error message and — well, thankfully, the recursive call passes instead of a log buffer, so we won't recurse infinitely. That's a small blessing. Your parameter is essentially an attempt to allow the user to customize your library's error-reporting mechanism. If you're really interested in going down that route, I recommend that you learn about function pointers, which would allow you to write a library function like this: 

Who says using is an optimization? It feels to me like a pessimization, because you're trading O(N) extra space (and more convoluted code) for something like O(lg N) faster lookups. I do see that e.g. Boost.DisjointSet implements "union by rank" as well, but I'd be interested in seeing some benchmark numbers on your particular use-case. 

Here we've added 9 bytes to the string: (don't forget that extra space we added!). We add it all up again and determine that the maximum length of the string is now 84+9 = 93 bytes. No problem. Except that where there's one bug, there's usually two. Bugs are caused by carelessness, and carelessness isn't a one-time occurrence. Look again at the line above. How many characters are really in that string? Did you spot the trailing backslash that marks a line continuation? The format string in your original code actually looks like this: 

Now, on a scale of 1 to 100, how confident are you in your ability to use and correctly? (For comparison, I rate myself at about a 15... and I'm able to spot bugs like the above fairly easily. Given that you didn't spot those bugs, should you be using memory orders other than ? Why or why not?) 

This should certainly be , to eliminate the copy-construction of . Also, stylistically, it would be good to wrap each control structure in curly braces. Putting it all together, we get 

Lastly, perhaps notice that is ; and perhaps deal with the possibility of division-by-zero when or is zero. Or even factor out the repeated code, now that it's been made blatantly obvious by our renamings: 

Notice that by using we prevent anyone from entering an infinite regress via ; although a ()-level regress is just as bad, honestly, and compilers will catch both in practice after a few levels, so whatever. I also recommend passing / by value instead of by const-reference, since it's an empty type. Again since it'll all get inlined I don't think it really matters either way. 

You're all correct except for that last sentence. Yes, a hashtable would be better than this code. But practically anything would be better than this code! This code itself is so bad (big-O-wise) that it's just not a plausible motivation for anything. Not to mention, what use is a dictionary that can only store words of length k? Surely what the user really wants is a dictionary whose keys are strings of arbitrary length. Your array-based implementation can never provide that functionality. As it happens, about 12 years ago I needed a dictionary that could store words of (up to) length k, where k=9, because I was doing a lot of crossword construction. The data structure that I used was a very simple one: an array! 

For the same reason, I write even when is just as fast for integers. (Well, in that case, it's also because the verb comes first in English. "Increment " reads better than ", increment".) C++ isn't C89; you should never declare an uninitialized variable if you can possibly help it. Write: 

And algorithmically, notice that if you start at the top of the tree and work downward, you don't need to store O(Rows²) numbers; you just need to store the previous row's sums, for a total space cost of O(Rows). (And then at the end you have Rows possible answers, and you pick the of all of them.) 

Per the comments, this isn't really a "pool" because things don't go back into it when you're done using them. It's just an "incremental allocator" that does allocation in "chunks". A better name for it might be (and instead of ). Given that is used only on the codepath that also allocates memory (so it's not a super speed-critical path where one more memory load would hurt performance), and has non-static data members (so there's no harm in adding one more non-static data member), surely it would make more sense to make a runtime parameter to 's constructor. 

One stylistic note: I prefer to name my parameter packs with plurals, so, singular but plural . That's the logic behind my renaming above. 

It's just asking for this kind of bug. Whenever you touch memory (via the operator, mainly), that should be on a line by itself, with no other memory references on the same line. The following is a cleaned-up version of your function — just changing the style to make it obvious where the bug is. 

The nice thing about removing the inner loop (as above) is that it's easily readable by a non-expert (say, someone coming from Java, C#, or Python). But if your target audience is C++ experts, this would also be okay: 

Red flag. An can never be greater than nor less than . And indeed, if you compile this with , you get: 

Your question would be improved if you posted (a link to) the original Gilded Rose code, or the problem statement, or whatever it was that you started with. Without knowing the problem statement — i.e., the constraints that you're stuck with and can't change — it's hard to know exactly which terrible parts of your code are fixable and which parts are irreducibly terrible due to the original constraints. Since the Gilded Rose problem is phrased in pretty explicitly object-oriented terms (various hard-coded types of items, each with its own idiosyncratic "update quality" algorithm), and especially since you're working in Java (the most classical-OOP of languages), it would make sense to solve it using classical OOP polymorphism. 

The existence of implies that cannot be used with non-copyable s, and is inefficient even for copyable s. It would make more sense to provide a method along the same lines as : 

The first statement here smells to high heaven; and the mix of and is dubious as well. I think what you want is 

And because I was using STL containers, I'd have the entire algorithms library at my disposal if I needed it — you know, and and whatnot. 

Your ball can only move in the eight (semi)cardinal directions? It can't move at, say, a 30-degree angle? Well, even so, it will simplify your code to treat the ball as if it can move in any direction. Either: 

Not only will the compiler be happy with this, but it'll generate more efficient code (in unoptimized builds), and it's several lines shorter as well, which means you can fit more code on your screen, which means you can keep more of your program in view at one time. (I also picked you some clearer function names while I was at it.) 

You should be aware that is the wrong format-specifier for . You meant either , or else . Without the explicit cast, will promote to on most computer systems (undoubtedly including yours). (Which means that would also be pretty much correct.) Also, you should be using rather than for all these quantities in the first place. All those casts scattered throughout your code will at best not-hurt your program's performance; at worst they will inhibit compiler optimizations and slow things down. Remember, compilers tend to be really good at optimizing idiomatic, simple code, and not so good at optimizing weird, subtle code. Write your code as simply as possible, and the compiler will take care of the rest. 

Syntax nit: missing semicolon after . This is legal of course, but I think many linters will flag it as an inconsistency. Why do you do this thing with instead of just saying ? I might be exposing my own lack of knowledge here, but I thought was supposed to do the right thing in "member" functions called with the syntax. Is your use of actually working around a problem with , or is it just an idiosyncrasy that could be cleaned up?