Since you are not reading your 1:1 into a data object but you use a lot of conditions there to get alternative elements like here: 

Another issue is that the name of the class already suggests a concrete implementation of the delegate passed, this is, . But what if I passed it ? I would completely change what your class does, even though its name says something completely different. In this case it would be safer to use an interface that provides a method that your class calls because then you can better verify it does what it should and if someone changes the implementation of its his problem. This would be for the case that your class really only should do but if you still want to use delegates then you should rename the class to something like or etc. where you can specify either or and either one would be valid. Just saying is very ambiguous for this case and I would expect to pass anything that consumes a string and produces one, be it or or anything else with a valid signature. If it's acceptable to specify anything of that kind then it's fine, otherwise use an interface so that you don't have to complain that the apparently expected delegate replaces with . To me it's just string to string and I don't care what its exact implementation should be. 

The method is a good candidate for refactoring. It's 400 lines long. Almost each inside the could be a separate method for generating something and the last behind it for generating clouds definitely. They not only should have their own methods but also go into another class like or something like that followed by other generate routines like that luckily already has its own function ;-) 

We still need expressions for indexed properties. Here's an example for a property with a single index. I think more then two are not necessary. 

Calling on a ( is a ) is meaningless. You don't need any of these variables. We also don't use abbreviations in C#. They are confusing so instead of you should use . 

The counterpart of the is the method that you can use same way and you can figure out this part yourself ;-) 

Adjusting the arguments to be in a very specific order and the names for the enum values make the method call read very natural and similar to normal speech. 

Refactor the main method and get the connection string from the connections-string section and not the app-settings. Create the downloader, the parser, the repository and let them to their job. 

but if the the is optional anyway why don't you simply include it in the array? It doesn't make any difference for the result and the method becomes really simple: 

don't get along well. A public field with an underscore? I'm more then surprised ;-) But not only by that. If I can access this field directly, there is actually no need for me to want to use this method: 

Having this you can now update your code processing the records and use the . With your first create a database instance per thread and with you dispose it. Then on each loop within the same thread gets called and the is passed to it along with the and a (that allows you to stop/break the loop if necessary). For easier debugging you can set to . 

To make this actually work there is a set of extensions for creating elements and adding attributs within general extensions: 

So what do you think of this helper? Could it be even shorter and still SOLID and easy to use? Did I miss anything important? I'll be needing it in several unit-test projects so convenience is an important factor too. 

This is tricky. The does not have a default constructor. This means that the method should throw an for types without a default constructor. An empty instance of a string is of no use. Strings are immutable so you cannot set anything useful and therefore it should be forbidden to create one. In such cases the tester-doer pattern is recommendable. To implement it you'd need to add a property like or . This would be the tester. is the doer. There is one more issue in this method. The usage of this is invalid: 

Because you ommited the for each it super hard to understand your code not mentioning is very error prone. You should always use . This for example is terrible: 

You can use a copy constructor. It is a constructor that takes an instance of itself and instantiates a new instance based on anohter one: 

This design will allow to add more levels anytime and to customize the basic-form. I also think with small adjustments (if necessary at all) you should be able to reuse the level definitions for multiplayer. 

Just make sure to cache the generated for each because takes some time and it will otherwise become the bottleneck of your utility. 

BuildQueryURL method This method is in a very bad style. It's supposed to build a query url but you give it a name-value-collection that you modify it inside the method! You should split it into two methods. The first one should only and the other one only build the url without modifying any other values and causing unexpected behaviour. I'd be really supprised if I used it and found that it actually changed the parameters too although it's name doesn't suggest anything like that. 

Isn't the scale parameter not unnecessary? If the size is in bytes and you don't convert it to the specified scale then it's usless there. Isn't the next construtctor doing it right? 

I'm wondering why this interface exposes the . Isn't your framework built on top of it? I thought it encapsulates it and provide an alternative API. I think a direct acces to it is not a good idea. Especially that the property is called just which doesn't say anthing. 

Always dispose streams Another bad habit of yours is to not dispose streams. If you call this method a couple of time you'll be wasting a lot of memory. You should always do it at some point either with the statement or by calling in a block. 

Because your models are tigthly coupled. You need to loosen them by introducing some abstraction - either an interface or an abstract class. All your model names sound like base classes. What is a ? What is a ? What is a ? Those are very general concepts and you alredy try to differenciate between them by setting a of a - whatever the value means. You should find a better name for it - or a different . (Further reading: The Open/Closed Principle) So instead of creating a for each dungeon inside of a constructor consider this design: make the dungeon abstract: 

The new loops over fields of type . For each field it gets the necessary data with reflection from the property and its attributes. 

Testing In order to be able to test it you can create an interface for the downloader and use it to create another mock-downloader. 

Then you join all names into a string separated by as column names and another string also separated by commas but with the prefix for the values: 

but keep in mind that in some critical situations a peformance hit might be noticeable. However usualy you just want to use some convenience functions to get the work done. 

So what I have I changed? The method returns an and uses the which makes it deferred (this means it is executed only if enumerated). The is a new that is easier to understand than a : 

Let's refactor it a little bit toward SOLID. It's not yet perfect but is should give you an idea how to start (you should take @Heslacher's advices into account) 

They shouldn't just enumerate the text but also keep track of where they are so that I can throw exceptions with exact location if something goes wrong thus the line enumerator needs to work with real indexes even for a range. The same applies to the char enumerator. I feel like the enumerators violate SRP (single responsibility principle) and I should create two more enumerators for enumerating a range of lines or a range of characters. Is this necessary or would you leave it like that? 

While implementing the Retry & Breaker patterns I decided that the Breaker does more then it should so I extracted two responsibilities into their own classes. Here they are. I stripped out the to be only data: 

You could also use a but an has the advantage that its indexer will return an empty collection instead of throwing an exception if a key does not exist. Now you can also rename the to so the usage is even easier to read with the s 

This is wrong because it returns if either object is . It should return true only if both objects are really equal: 

The constructor shouln't do any work but initilize only properties/fields. If you want to read the file immediately then it's better to create a factory method like that creates an instance and calls the method. 

This method can be made static because it does not require any state information from the owning class. 

You're right about enumerating both parameters multiple times. Each call to or will execute the enumerator. This might of course become very inefficient, especially if your collections have a lot of items. So what could you do instead? Well, one option would be to replace with the next closest type which is the . This would guarantee that both collections are already materialized. This however is rarely a good solution so it's preferable to keep it lazy. But for this, simple LINQ is not enough. You need to work with enumerators directly and implement your extension in such a way that it uses the method. With it you have the complete control over the enumeration process. With a little bit of logic you can keep you parameters lazy and still be able to validate that the are more values then separators. You do this by first getting the first value. Then the will try to get a pair of separators and values to append them to the string. If at some point it could get a separator but not a value, it means that there is at least the same number of separators as values and at this point you can throw an exception. The other case is when there are not enough separators. To detect this you just need to try to get another value after the . If it works then it means there were not enough separators.