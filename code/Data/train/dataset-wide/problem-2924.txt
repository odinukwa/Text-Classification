Just a one liner. The field and its counterparts define a section. So everything after is public until / come up. So there is no need to put it before every function. 

Use descriptive names. This is purely subjective, but whenever I see vect and friends i cringe. What do you really save from ommitting "or"? 

So the simplest solutions is to use the available stl function. However there is obviously less to learn there. 

By using we automatically get the correct comparison of the two fields. Now consider a given container and we have scheduled an instruction, then we swap the elements until our scheduled instruction is not smaller than another given instruction. 

You do not include all necessary headers is in I would utilize std::next in your midpoint calculation, as it does not modify the original iterator. So the code would simplify to: 

Separate operators like with spaces, that makes the code much easier to read. Also you should separate language constructs like or with a space afterwards, to readily separate them from function calls. You should use range based loops when you already have the vector fully initialized, it is much more concise. 

first thing first, do not use This i a bad practice that will hurt you eventually due to namespace collisions/pollution. You might want to have a look at especially its binary form. That way you can for example write 

Where is the function passed? Generally you would pass it as the second argument and then the argument pack 

UPDATE Toby is right, that this only adds points to the unit circle, rather than the full area of the circle. The solution is rather simple, add a random variable for the radius 

Here some things i would improve. Use better constructors In your constructors you do not reserve the appropriate memory for the vector, which is not optimal. Also you use rather than . As far as I can see, there is no guarantee that the type of the elements of is the same as T, so you might need implicit conversions for that. Also what happens if is a basic type like double? Use whats already there. Why don't you simply derive you class from and then generate your constructors by delegation? 

Do not use namespace std; Put your code into functions if possible. For example the Question for the user should be a single function. 

You should drop namespace std; It is bad practice even in challenges. Use more descriptive names even if the variable is named so in the problem. You can also use a range based loop for the initialization of the elements. 

Also you iterate from the end so you might want to think about using reverse iterators aka and When comparing or increasing iterators, you should use and or accordingly. This works with every kind of iterator. 

For a function take your logic function, which does a lot of things. First it checks for item collisions, then it moves the snake and then it checks for further collisions, as well as border crossings. Everyone of those should be its own function. BTW is there a reason you update the score every time and not just at the end of the game? 

Do not use It is a bad practice that you should stop as soon as possible. Do not trust magic macros like . For such small code fragments that are repeated only few time it is often way better to write it out. use std::size_t instead of unsigned long long int You already know the maximum number of chewing gums, So reserve space for your vector early to avoid reallocations. You can always later call to free the unneded memory. Use descriptive names even in challenges that only call them N or K. N is the number of gums so call it or whatever you want. This improves readability quite a bit. This also goes for example hardness, which is a vector so it should be plural e.g. hardnesses. Declare variables when you need them. This creates more or less independent code paths that might late be put into functions more easily. In your loop you use . This requires a copy of it before the increment. Especially for iterators and friends is more efficient as it does not involve the copy. Try to separate command flow with a whitespace, e.g. . This helps to discriminate it from normal functions. EDIT C++11 knows the language construct , use it rather than 

Do not use Use appropriate containers. If you want dynamic resizing, then if the size ist known to be static you can try Same goes for the list array you have. Why not just using a std::vector and be done with it. That way you do not have to handle memory at all. Avoid assignments like just because you are too lazy to think of a better name for your input argument. You can add the assignment of loop variables inside the loop If you use containers you can even use range based loops which simplify your code a lot. constify input argumnents of functions that should not change. Do you trust your users that much, that you do not check for valid input? 

Also generally you should really check whether the memory allocation succeeded. Have a look here $URL$ 

You should consider using descriptive names rather than textual comments. For example this line here 

Your seed with a defined function seems wrong. THe first thing is you are missing the braces around the if and only the first statement is inside the if. 

Note, that one can directly terminate the traversal of the trie by swapping the current queue with an empty one. Finally now that you have the result, or 0 if you never found the villan then print result. All together you now have: 

As a side note, you pass the element by copy not by const reference. This might also have some real preformance effects. SO rather do 

With the added benefit, that you can now declare k as const. However, it would be arguable whether you should throw a warning in case k > min. 

Memory management You are currently leaking nearly all of the memory allocated in you program. Every node is allocated by a call to new 

Why are your two stacks public? They should not be accessible from the outside. You are not modifying the value of the push argument, so you should mark it const. Despite this being a challenge, you should still clean your code up, this means no unneeded includes. You are missing functionality. Even if you pass the tests, you should provide certain standard functionality such as: empty(), size(), clear() You should avoid multiple declarations on a single line. Disk space is cheap so use it, as it increases readability by a ton. 

You access data out off bounds. In any case if you want to improve your code you should have a look at $URL$ . This should considerably simplify your code. What actually worst about all your erase function is that they do not modify the data completely invalidating your logic As you need this all the time so you should utilize erase_from for this 

I think you overcomplicated your problem. The easy solution that comes to mind (the third attempt I had right now) is to define a struct with a mutable element (The member we want to modify is marked mutable, as elements of a std::set are const qualified): 

I would guess, that there will only be two really improvements. The first is the switch away from vecbool. The second is the direct copy of that ommits the zeroing of tmp and the possibility for move construction. 

You can obviously extend it to use your prefered generator. Then you should either pass this per reference to your function or create a class with generateRandomChar as a method. 

Don't use QT objects when you are not working with QT constructs. There is no benefit to it. Your node::_id is unsigned shirt, which for MSVS has a range of 0 to 65,535. Be aware of that when you graph grows. Do not use a map. A is way faster/bettter for traversing than a . You do a lot of copying data around: 

Note that i split the calculation of prod as there might be rounding errors otherwise. So that should give you an idea about what to write. Generally you code is terrible to look at. 

Is bad, especially if you consider switching to a stack that is by default based on a deque. Instead use the right function 

You add the minElem as a second argument to your sleeper thread, so the first threat will start at 0 at earliest. 

I think your friends vector is wrong. You should have rather than . Otherwise you get problems with ownership. I would suggest to use auto &elem for range based loops. In any case you should at least use rather than passing by copy 

So i think there are some possible improvements. The general idea should be to utilize a sieve like approach. In principle i like your code, but similar to the other questions your naming is really bad. Noone knows what n, k or v is. so use descriptive names as you yourself will make tiny mistakes and spend some time searching for that "k" instead of an "n". 

So one final remark, that wasn't said allready. Currently you check every iteration whether the current value is the maximum. I would argue that this is highly inefficient for nearly all use cases. In most cases one can assume, that numberOfAlternatives << numberOfElements. So it will be much more efficient, to split the accumulation of the histogram and the finding of the maximum into two loops. 

I think you should not search for the greatest value, but rather keep your array sorted. But first things first: 

This also brings me to the bad choice of your loop variable. the iterator is called last and you compare with , which one would expect to be out of memory access. Instead define an explicit iterator and use it in your loop, avoiding confusion. 

Provide full examples. Your code as your presented it does not compile. It is missing headers, in you case you should add 

This has a second advantag, now when endpos == std::string::npos nothing will happen, so we can avoid the if 

First and foremost, do not use namespace::std. Please google for it, you will find a lot of answers. 

This is not only more descriptive, but also more efficient, as it does not have to walk all the list to generate size(). Use std::stack or std::queue for DFS or BFS. If you think, that memory locality is important to you, remember that stack is a container adaptor, so you can write: 

Your code is nearly unreadable. There is so much clutter in the classes. Your sieverator has a public then a private then a public section, with a struct sprinkled in, there is a typedef with an immediate use... Just separate the code, it is not really gaining you too much here is it? I am only 90% sure, but code like this