once this is done you can further refactor your if else clause in a strategy pattern , so you will need a factory which will return class will handle the Archive rule or mirror rule inside a different class and your FileActionService will contain only processing logic 

okay first of all, you need to use buffered stream to read data from the file, there is no need to write data once in file as it might hung altogether. so I would suggest that read the file line by line , parse it and then write to file. 

I used nsubstitute and fluent assertion instead of Rhino mocks , It will make your test code more readable here is an example. 

toggleRows should not take a checkbox id but a show variable to show/hide the row by doing so you can call this method from any where. 

As per my interpretation, you don't need empty string check inside the if clause you can put it out side, and last condition could be expressed in one line. 

so it all depends upon your use case.In this case table will always have columns so passing a array of column will make sense. 

Just continuation to @Malachi an here is a generic version of ExecuteScalar, so it is good so you dont have to cast it again in code. 

Have you considered using views:- -views gives you an explicit way to reduce the complexity of code. so your whole line of code will drop to only few lines. you can replace each subquery with the same view name (or named common table expression as Phrancis metioned) then the optimizer knows it's the same thing and can either cache the result or restructure the execution path so much better than inner query 

I think one of the most common errors in today times, is for example handling potential errors, as you try to do here: 

If you have the possibility to use it, you could try the async / await pattern. It is however only part of the standard since ecmascript 2017. The pattern allows you to wait for promise before continuing the execution path. This means you could rewrite your current code in the following syntax 

From the demo page, I have to say, it looks very nice. I am very curious why you do not use the constructor to call that seems a bit verbose for any user, neither does it look very good to use as it is not a constructor in the strict sense, you don't even need it. For a detailed description, please find it on MDN, where this explanation is of importance to you. If you return anything else but undefined, you will not receive a new Slider object, but just the returned object. 

I personally prefer something like a generic class that allows me the re-usability of a single data structure for handling responses that might fail. The class would look something similar like: 

I guess if you just want to validate, you could write something like the following, though i'm not sure if that really answers your question. 

I am really unsure why you have a access modifier for the method. I don't see any reason from the code why you would need it, and I think it should be at most , but preferably . For the and members, I don't see why they should be members, and why you should be able to assign a value from outside your class. I think the should be private fields inside your class, cause nobody except the current would care if they are loaded or not (and if they would, even then, I wouldn't allow it to be set from the outside) To the outside, I would tend to give out only , and keep the implementation of it hidden from the users. WPF will detected the interface, and will update on any changes (as long as you don't reassign) I am also unsure if the of the TreeItemViewModel supports updates to the UI, if it does, it seems a part of the is not yet implemented for it. 

which is just . So let's call it like that and make sure a requirement that when calling it we have dx 

is defined twice. First as a string ( and the second time as a label. I would rename the first one to and use it in 

You are calling on a source basically retrieving the whole collection with all the properties and only later you are taking just the two fields. If you want to reduce time and space - try taking only what's needed from the underlying source, but also it greatly depends on the typo of source you are using underneath. Consider dropping the LINQ at all. LINQ is great and compact but it has it's 'dark side' in term of hidden allocations. Also think abount some old-hasioned ways like 'paging'? For the dropdown that might not be the best way - but maybe it is. If for most cases only the top 20 repair issues are accessed then here's your optimization - and for few cases user would need to load more items to the list - that might be ok. 

Compare Your compare method is kinda strange. You do not iterate at all and you don't use any opcodes that would do that for you. It works only when you have one-char secret. Not so cool :) I would write it like this 

What we do here is just divide the number in by 10 and print the values stored in (result - only if >0) and the - reminder. Printing the hints On fourth attempt you are putting the character to be printed in . It should be in . You don't also have to use different registers so just: 

b. create an interface named as IView and implement it in your view , pass the instance of IView to data context of the view 

One more tip for , reading the content from the HttpRequestMessage you could user some model binder , I did not find any async version of the code though so you might need to look for it. 

I would write an extension method to check whether the above condition holds true. and I hope eHistoryCurrentMedsGroup is a list of some object so you could use Any(). 

This is bad way to write code , I could not even read the code without headache. Please separate out your logging functionality, you function should not be more than 30 lines per method, so first 

Well I have changed your code a bit to make it cleaner.It is recommended to have a uniform interface for methods, so now you have two methods in FamilyExpense class is addExpense and another is getExpense rather explicitly calling each method. I am not sure why you have used getFamilyId and setFamilyId. 

I would create two extension method , ToApplicationData and ToAddress and will define mapping over there. it will sorten you code and much better readablity. you can break this methods too if you want. 

Server is a part of Message so server initialization is part of message itself. so updated solution: 

Your sorting logic is dependent upon the specific type. "Separate your data representation from logic." you must take advantage of the generic to reuse the same component to sort any kind of object. In case of class you can specify comparer to sort the values. Naming convention should be followed. i and j does not make sense and in c# standard method naming convetion should Pascal case , should not start with lowercase. Rest logic looks good. 

for both if blocks. But that should not be the end, you might as well extract the code that checks if the keyword exists in the array, and the extraction of the keyword. In the end, the statement that you wrote can be reduced to this (now I think I understood your code while refactoring it) 

In all honestly, simply choosing that your xhr is synchronous might not seem a big problem on your local server, but your code has more problems, nl: 

If it's a singly linked list, then I don't see the need for any complex transformation logic, as a node can only have a next node. So, you could theoretically do it like: 

Here you really have to be consistent with your choice. There is no reason why a statement brings benefit to your code, as you are iterating arrays and not an object. It makes the code less readable if such unexpected twists are added. Subtopic variable scoping The use of the keyword in JavaScript and it's scope has been confusing since the dawn of JavaScript. It is important to know that in JavaScript, defined variables are not block scoped, but they are function scoped variables, as this small snippet demonstrates 

Personally, I think the flag is not the best idea, or at least not, in the scenario you have added it, as it looks like a global variable. The scenario you have set up now, poses a few problems as you present it, nl: 

To the outside world, this function is accessible through , however inside the function, I can access it through . Another thing to note, would be the that you can assign properties to functions, which can be handy sometimes, in our case, to assign it with a counter: 

Please separate out your code into at least two classes 1) Fetching data class 2) UI binding stuff class 4)inline SQL vs Stored Procedure Stored Procedure is good as your code lies at one place in db but creating Stored Procedure for one line of SQL is not a good idea. If your logic is going to be complex and big ,Use a Stored procedure other wise inline sql. PS: I have created a gist named SQLHelper class for you to abstract out the sql connection and command things, $URL$ 

by using this you have only a reference of interface will be there in viewmodel . but not the whole view itself 

As rule has been passed to ArchiveAction class , you dont need to check type inside ArchiveRule class. Move all processing related code to the process method like ZipTempFile ,MoveArchiveToDestinations 

If any object provide dispose method , prefer using statement. Use dictionary rather than list of parameter as you have a possibility of specifying param names also Current implementation sticks only to datatable , you might need to think about the datareader. naming of variable should be explicit. 

2) Always dispose the connection In above code your opening connection and closing it, but this can lead into connection leak in case of errors. Please wrap your code into using statement or try clause like this 

Introduce a DAL helper layer which will be responsible of opening and closing connection and executing commands. There are lots of DAL helper layer is available Write an extension method to get values from the data reader. Here is one dummy code 

Without the actual model and some numbers (how long does it take to execute/ how much 'space' it takes?) might be hard to optimize, but what I can tell is that you call quite a lot in such short method. When you do call it you basically iterate over a source (is it DB source? in memory source? other?) and grab it to the memory of your process. Try reducing the number of calls - it will improve your performance. Take a look at this fragment: 

and similarly in the second place. Also some checks for input length might be good to do. You should also comment more your code. I strongly believe the code should be self documented but not on such low level as asm :) So comment more. GIST 

as in the will be the number of characters not the ascii representation of that number. If we could restrict ourselves to maximum 9 characters that would be easy. Just add 48(dec) to the and you get the value. Since your secret is limited to 21 characters we could go with a simple method for printing. 

You could also add a new line to those strings so that, they are a bit separated from each other when printing like this: 

Other things that might be good to fix You have the same loop for scanning the characters. Why not enclose it as another proc and just use in those two places? You can make assumption that for example will point to the buffer that has to be filled. Also in this scanning you could handle for example backspace character and delete the characters.