Even with two lines, it still takes up less characters than the above version, and it doesn't do more than it needs to do, hence easier to read. That's it, now I really have to go to sleep. Happy coding! 

I assume "next" in means "after one unit of whatever temporal unit you use in the unit of the velocity", since the change of a position based on a velocity only makes sense in the context of a time span. As for your code, you could simply model the path of the object by breaking it up into subpaths where the direction does not change, like this: 

You ignored my comment asking for clarification, so I'll just assume that I was right in thinking that your code doesn't actually do what you intend it to do. You write that, for a match, the class and model needs to match, but your code compares only the model of the search key with that of the items in the stock. It doesn't check whether an item from the stock has the same class as the search key, it just ascertains that the class of the stock item is one of several classes, regardless of whether this class is also the class of the search key. In fact, your verbal description of the code is very simple, and the translation into code should not be much more complex: 

So your code performed slightly better in all test cases listed here (although there also were some 10,000-size array test cases in other benchmark runs where the HashMap performed slightly better). Next, 10 test cases, same as above, but now the arrays contain 100,000 integers: 

That's about all I found that seems like it should be improved. If there's anything else that you want me to cover, just tell me and I'll see what I can do. I hope this helps! 

Secondly, why are you ending all your functions and variables in with an underscore, ? It doesn't do anything, and if it's not serving a real naming purpose, it can be removed. 

Other than those two nitpicks, there really isn't much else for me to review here. As far as I can tell, you've followed the language specification just fine, and produced some readable code. 

Rather than bothering with the loop, you could analyze it and determine that it simply just puts the number four in the second cell. Therefore, you could simplify it to this: 

Finally, for those who are interested, the GitHub repository for CLIGL can be found here. For those who would like to see example usage, see here. 

Finally, in any version of Python 2.x, you need to explicitly have all classes inherit from , like this: . If you're using Python 3.x or above, it's okay to just type stuff like . 

Using constants rather than macros adds readability to your code, and it has all the properties of a normal variable, e.g, a size, a type, linkage, etcetera. A macro has none of those. 

There are quite a few things that can be improved here, so let's start with the obvious. Rather than having multiple individual conditional expressions to check the value of a variable, simply create a list of all possible values and use the operator to check the variable's value, like this, for example: 

Instead of questioning whether it is a good practice, it would be more helpful to be aware of what your first code actually does. JLS ยง15.9.4 has this to say about the creation of an object: 

Maybe the method would be faster if the process of determining whether a cell is on an upper or lower edge already uses the prospective index of the adjacent cells. This would probably help mostly for the lower edge check because there's one additive operation less, seeing as the value can be used twice (I don't know if it helps much for the upper edge check, because it doesn't really save an additive operation since is the same as ). The checks for left and right edges wouldn't benefit from such an approach, because then you'd have to do the modulo twice on different values without saving additive operations (for the right-edge check, it would only move the addition/subtraction of from the modulo comparison to the modulo calculation, and for the left-edge check, it would even increase the number of additive operations needed, because you'd have to calcuate the modulo of and compare it to , and you'd also have to make a special case for ). However, since you can use the edge neighbor indexes for the corner neighbors, it might help to calculate their prospective indexes in advance anyway. 

This means that and are initialized to even before the constructor is executed. So your statement is completely pointless, because is only assigned the default value which is already assigned to it. I see no problem with your second version (apart from the usage of a non-existent constructor, which I already hinted at in a comment). Every field is initialized in the constructor of the class in which it is declared, which, although not strictly necessary for non- fields, still makes the code easier to read because you don't have to jump around classes to understand the fields' initializations. Also, the class is antiquated. If you don't need synchronization, you'd be better off with an (and if you do, there are still better solutions as explained in the link). Besides, you are using a raw type, thereby denying the additional type-safety provided by generics. Edit Actually, there is a problem in both of your versions that I hadn't spotted earlier: Your constructors never assign a value to the instance variable . Instead, they declare a local variable with the name that hides the instance variable. To rectify this, you need to remove the type declaration from the assignment, so that this: 

You have way too much code in your function. Try and see if you can separate the logic out into separate functions, each with their own arguments. For example, the below code block: 

Explicit inheritance from In addition, classes in pre-Python 3.x should explicitly inherit from , like this: 

Finally, you could use some better names for your variables. For example, naming a variable name is completely useless because I already know that the variable is a hash. It should have a better name. Same goes for , , and others. 

I am no longer running this server, nor does this question reflect my current political views. I am currently running a small Donald Trump-themed Discord server. Recently, a few members requested that I create a bot for the server, so I obliged and created, this, TrumpBot. It uses the Discord.Net API to interface with Discord and supports a small number of commands. TrumpBotMain.cs 

Properties Currently, you're defining a public field, and then creating a property which can and that public field, like this: 

You should also have whitespace between mathematical, binary, comparison, and assignment operators. This will add additional clarity, and readability to your code. It's also best practice to avoid wildcard imports like this: 

From looking at your code though, I think that your program should just exit, so there's no need for either of these solutions. Finally, all these function signatures at the top of your code: 

Why on Earth are you storing as a function in the class ? In fact, the class serves no purpose whatsoever. It can be removed. Secondly, function names and variable names should be in the style , not . Classes should be in . The three comments above the function , should be stored in a docstring. Here's how you could convert those comments. 

This will probably not compile if you add it to your code, because in your code, is not and can therefore not be referenced from a static context. However, since does not depend on any of the three instance variables of , it would be more appropriate if were static as well. By the way, I don't think "" is a very good method name, because it doesn't really describe what the method does. A more informative name might be "". Now, with this helper method, the actual initialization of the object will be a piece of cake: 

This advances a queen until it is either safe or can no longer be advanced, which is basically what your code did, but here, this is achieved without recursion, saving a lot of stack memory. 

Also, I don't know if the properties of a specific can change during its existence, but if they cannot, you might consider making them to eliminate the possibility of involuntary modification of these properties. And if they can change, you'd have to make sure that these changes are reflected in the properties of a object, which your code doesn't seem to take care of, so you already have an example of why storing a property in multiple places is dangerous. 

You are calling with a whose action accesses shared state (namely the local and variable ) without taking care of synchronization (a is not thread-safe). This is bad. might look like a simple for-each loop, but it is more than that, because unlike the latter, it might process multiple stream elements simultaneously in multiple threads, so accessing shared state without synchronization is dangerous. A safer approach would have been to use instead of . The solution proposed by Vogel612 for this problem is even more elegant, but, technically, it is not equivalent to your procedure, because your procedure doesn't create a new for every iteration of , as opposed to Vogel612's code, which assigns a new to for every loop iteration. However, the loop is probably a design flaw anyway, because as far as I understand your question, the input string is not supposed to contain multiple parentheses-enclosed "maps" (not to be confused with key-value-"mappings"). This can be rectified by using a single regular expression for the whole input string, as the other answers have already suggested. 

Finally, you're inconsistent in your colon () placement in some places. For example, sometimes you place your colons like this: 

I've thrown together this simple chat program, and while it works. I think it could certainly use some improvement. Here's how it works. 

Function and variable names should be in , not , and classes should be in . There should be two blank lines between each top-level function/class/code block. You have whitespace inconsistencies. There should always be space between operators, except in special conditions. See PEP8 for the guidelines regarding this. 

You should also be using docstrings to describe your functions, not regular inline comments. Here's an example of a docstring: 

Style Your docstring at the top of the function should be moved underneath the function signature, like this: 

From a personal standpoint, I think this method is fine. You might want to re-work it a little. I'd recommend creating an array with possible intersections, and looping through that array and checking user input against those. For example: 

While in theory, this works if the user writes perfect code, and doesn't have extra spaces on a blank line, it could still fail if the user doesn't write perfect code, or accidentally includes extra spaces on a line. Here's an example of valid input, that wouldn't be properly matched. es are spaces and s are beeline continuation characters: 

First off, you should be using docstrings to describe your functions and classes, not regular comments. A typical docstring might look something like this: 

You could speed up the first version by switching the loops, so that the loop over becomes the inner loop, and short-circuiting the loop over , because once you have found a character in that matches the current character in , you don't have to loop over the remaining characters of (mtj's suggestion to use would amount to this). As for the second approach: Why do you first convert the strings to a before iterating over their characters? You did not do this in the first version, so what do you gain from it by doing it in the second version? About your question which approach is better: Depends on what you mean by better. I think both versions are quite straighforward and to the point. For large strings, the second version might be preferable because it has a lower time complexity. However, you write that the strings will contain at most 50 characters, so the benefit of constant-time lookup might not outweigh the cost of creating a and implicitly converting each primitive to a object. But this is just a guess, I did not measure it. 

After spending more hours than I'd like to admit on trying to figure out your algorithm and why it is slow, and after multiple false epiphanies, thinking that I have finally discovered the weakness in your program, I believe that, now, I have really found out where the problem with your code lies. Considering all the drafts I've written for explaining where your algorithms wastes performances, trying to format it so that it is easy to read, and even trying out some LaTeX expressions, the emphasis on the word "painfully" becomes all the more justified when I say that the explanation for your algorithm's unsatisfactory performance is really painfully simple. So here goes โฆ the reason your code is slow is: $$...$$$$...$$$$j$$ Seriously, when the loop that introduces is executed after the first time, it does nothing it hasn't already done the first time around. All local variables declared outside the loop except (i.e. the method parameters) have the exact same values as they did during the first execution of the loop. I can't believe I didn't see this earlier. But now that I'm writing an answer to this question, I will also tell you what I did to make the code a bit more read-/understandable (in my opinion). Since, inside the method body, only elements from with an index larger than or equal to are queried, and doesn't serve any other purpose than to mark this index, I've eliminated altogether and adjusted the recursive calls so that they only pass a sublist of the array with the relevant elements: