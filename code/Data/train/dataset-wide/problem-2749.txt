Now that we have a way to find the most significant set bit, let's move on to step Shifting the number right so that the most significant set bit is in the 12th position. This is trivial to do. In code: 

You shouldn't include , but should include instead. is a C header while is a C++ header (with ultimately about the same content). I am somewhat astonished that your current code compiles, as you use and while the is only guaranteed to put its definitions into the global namespace ( guarantees them in the namespace). As a good practice, you should order your includes alphabetically and group them into sets belonging to each other. Preferably, include the header the current file implements first (i.e in ), then all headers from the project you're working on, then all headers from other projects, libraries etc. and finally the headers from the standard library. This will facilitate checks of include-correctness. Speaking of headers, you're actually missing an include in , the include for which is . However, in my opinion writing or omitting the return at the end of are totally fine, so you could do without the macro and the include. Don't use defines for constants, just declare your constants as variables. Defines are all kinds of bad, so it's better to use them as little as possible. You don't need to declare and define a constructor if it doesn't do anything special. Adding directly to what @BenjaminPhilippe said in his answer, you do not only need more classes, you also need to structure your code more. Currently, your function is doing way too much. You should introduce more functions and classes to improve your code structure, make testing and debugging easier and increase reusability. Disclaimer: I don't actually know anything at all about SFML. If SFML doesn't provide any callback capabilities, ignore this point. Polling for key events is usually not sustainable. Even in your little case, key event handling is quite a mess (including nested switch-cases). You should instead register callbacks for each key event that change some state variables somewhere (often, these variables are globals, which isn't exactly great either, but still better than drowning in a switch-case mess) and use those state variables for determining what to do. Why is in capitalized? All other variables seem to start with a lowercase letter, so you should be consistent and stick with . 

Why not use the string search functions rather then having built a newline list? Also, if you need to treat the end of input as a newline, put that in when you create the list not in an exception handler. 

What you should consider doing is writing a function which given a node calculates the change in "energy" that would occour if it was flipped. Right now you calculate before and after, but you should be able to simply calculate the delta without changing it. If you can effeciently calculate the delta, that's all you need. 

You declare draw far away from where it used. Just assign to it in the scope its used in. Multiple assignments on one lined is also frowned upon in python. 

Use sys.exit to indicate success or failure of the program. file is a builtin python function, its best to avoid naming your variables the same thing. 

Don't report error by returning strings. Throw an exception, or at least assert False. How I'd do this: 

Rather the constantly checking whether a value is in notr, use a set. Then the last three lines can simply be notr.add( xrange(om + 1, cm - 1) ) 

The function will give the timestamp from the given string. This timestamp can be used in the function for comparing with other dates. 

Conclusion Now, the JavaScript code don't have to be written again for each new element. Just adding the markup with required attributes will automatically work. The relation between HTML element-JavaScript handler is reduced from many to many to many to one. 

: Match a digit : Match either a space character or hyphen and add it into first capturing group : Match digits n times. : Match whatever is in first captured group(see #2 above) 

Here's live demo of regex The regex can be further improved by using character class which will make the matches faster than OR conditions 

As some of the features are only available in latest browsers/nodeJS version and some are experimental, see the MDN link embedded for browser support and polyfill. This, by any means is not polyfill for . This is just another version of the OP's code. is overriden with assumptions that only the provided input format is used to log in table. The horizontal lines are not perfect. They can contain less/more depending on the min and max length of key in the object. 

The python style guide recommends lowercase_with_underscores for global function names. The name also suggests its a generic summing function which its not. No indication is given for what kind of data it expects. A docstring should at least explain that. 

Untested, and probably not quite correct. I think it may actually apply operations backwards, but you should be easily able to flip that. 

Your math seems inscrutable, but perhaps it makes sense in context. Consider some comments to explain the reasoning 

I recommend putting the comment on a seperate line from the if. Otherwise it tends to wrap off the side of the screen and that's annoying. Also, iterate over the container, not the indexes. Use something like for source, dest in edges: 

The problem is that if someone passes frequency along with one of the other parameters, this function will go merrily onwards and probably not even produce an error. I recommend having a get_LOS_from_frequency function which takes the frequency and then calls this function. 

You should be able to find and change the edge weight directly. Reconstructing the whole graph is going to be kinda slow. 

can be used to create an array from array-like structures. To iterate over the DOM elements selected by , can be used. 

I compared the , and efficiency using utility. And found that is faster among the three for the same . Here's fiddle to test out this. 

What if I say you can avoid loop completely. Yes, you can avoid loop by letting jQuery do that for you. jQuery accepts multiple comma-separated selectors and internally iterate over each selector and perform operations. is an array of elements, this array elements can be joined with as glue, to create the selector. Let's say, we have an array and we want to add a class to all these selectors. We can iterate over the array and add the class to each element individually or we can combine the array elements somehow to create a comma-separated string and pass this to as selector. 

Here are some suggestions: As is used either the environment you're using supports ES6 or the source files are compiled to ES5. Following features of ES6 can be used 

There is a lot of room for improvement here, but first, let us talk about code style and best practices. 

The same problem I mentioned at also occurs here: You have a lot of unncessary allocations. Again, the approach to solving the problem is similar: 

Both of these are to be found in the body of the constructor. Obviously, you are trying to align you definitions/operators. Even more obviously, you are failing at it. Although both of these lines align with something, what they align with is not all easy to recognize. I don't know whether this is the fault of a tab-width mismatch between the code block and your original code. All I can say is that that indentation looks out-of-place, and left me confused the first time I glossed over your code. In general, aligning initializers etc. is completely acceptable, but you should refrain from doing it if the alignment reference is not at most one line away. Otherwise, it will just look strange, and overall a programmer's as good as you unworthy. About Ah, C-strings. Don't use them unless you definitely have to. Why? Because... 

As can be seen from this jsperf, is faster than . So, your code is already efficient and expressive. 

Remove some class from some elements Toggle some class on clicked element Hide some element Toggle some element depending on a condition 

RegEx vs which is same as (space followed by a star) matches zero or more occurrences of space. This is not flexible as it only allows users to use spaces. If user use tabs, this regex will fail. Use , which matches all the space characters. Quoting from $URL$ 

RegEx Improvements The regex can be shortened by using case-insensitive match with flag. We can remove the characters which are added as both lowercase and uppercase in the regex. After removing lowercase characters regex will be as below 

: Optional or sign before number : Match one or more numbers : Optional decimal point. denotes non-capturing group. flag: To get all matches 

This also requires changes in HTML of elements on which event is bound. As can be seen from the code, custom attribute should be added with value as same class. Example, on this element adding custom attribute will be . This is required as there can be multiple classes on element and taking a particular class can be cumbersome or long trail. 

which is much clearer. Declaring Variables Assuming that you are using a reasonably modern version of c (e.g. , , ...), you do not need to declare all your variables up front. Instead, declare them when you actually use them the first time. This will add readability to your code, because the reader doesn't have to juggle all those variables in his head that are not going to be used until tenths of lines later. Check The Return Value Of Every time you call , you make sure that the call actually succeeded, which is the right thing to do. However, you do not do the same with calls to , which can also fail if, for example, no more memory is available. 

I personally find it very important to not be sloppy with code (as I presume you do, since if you didn't, you would not be coming here for code review), which includes comments. The reason is that introducing sloppiness at one point tends to carry over to other parts of the work, at least for me. More importantly, however, comments are a way of communicating with other programmers; as such they should be clear and easy to understand, which is somewhat hindered by bad orthography and grammar. 

That is an inefficient way of doing that. Instead, make Triads a set and put tuples rather then lists in it. That'll be faster and easier to read. 

No explanation is given for what you are putting inside found. I have no idea what the return value means. return found General thoughts: The code is complicated, it really should be split up into a lot of functions. Rather then all that code matching different types of comments and strings, have a set of ignore regexes. The regex should match an entire comment or string which can then be removed. Your code builds lists of everything which would only serve to complicate what is going on. Lists can be great, but they aren't the solution to every problem. My rewrite of your code: (I didn't start with your code, but it should support the same features:) 

Use for source, dest, value in row: li.append(float(source), float(dest), float(value)) Do you really want floats? Are the source and destination really floats or are they ints? 

Don't execute loop at the module level. Code written inside a function will run faster. e = random.choice(li) # Choose random edge 

You cannot just cast a to a and pretend that is right and reasonable. I am also not sure what you are trying to achieve here, but anyhow, you need to call a conversion function here and properly assign to your storage location. Speaking of storage: A surefire way to terrify people with your code is using raw, unchecked and . One of the biggest advantages of C++ compared to C is that you can encapsulate possibly dangerous actions, such as allocating and freeing memory. There are many good reasons why manual memory management is heavily frowned upon in the C++ community: First of all, you can quickly cause undefined behavior by accessing dangling pointers. Secondly, forgetting to free memory can cause your program to gradually feast on available memory, hindering all other applications and eventually causing it to die painfully from out-of-memory. Luckily, the STL offers a variety of pre-made utilities to prevent these kinds of disaster: For dynamic, resizable arrays (which happens to be just what you want here), there is . There are also classes for various other types of containers, and classes such as which help mitigate the dangers of raw ownership somewhat. 

Line #1 is the prefix Line #2 will give Line #3 will add suffix to make the selector valid. With this, the code will be 

can be moved to CSS. This will be better UX and user will not see any flickr on the screen if page take long time to load and thus hide the element by JavaScript. 

There still is repetition in . This can be added in group and repeated twice . Since, back-reference is used, it's not better to use non-capturing group.(You'll know why in the 4th and 5th road). Similarly, for fourth and fifth road, the regex will be 

Note that and in the diagram refer to respective capturing group. Demo on RegEx101 Although, this answer only explains about one RegEx, other RegExes can be modified in the similar way. 

will join the array elements by , thus giving which is valid selector and can be passed to and any method defined on prototype can be called on it. 

Use to check if an element is having a class. will fail if the element is having more than one class Instead of iterating over s and counting visible s, use pseudo-selector. The same applies for the and See Live code snippet You cannot return from the . Only when is used in , the loop is exited.