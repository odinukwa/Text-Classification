I am running a simple OCaml program which opens a CSV file with a pseudo dict-reader and hashes "key" + "value" (where key and values are strings). Then some counts are evaluated on the hashes (but it is not really relevant for what follows). After a quick look at the default OCaml profiler (), I noticed that my program was mostly spending time in hashing elements (I don't know what does though). 

Comments I don't really see the point in on top of your methods. You can just type which automatically propose a neat documentation, per example, in the MatrixCreate function : 

I wrote a simple online logistic regression, calibrated using gradient descent to compare the speed of an OCaml implementation vs the same Python script, executed with Pypy. It turned out that the OCaml implementation was slightly faster than the one run with Pypy (by about 10%). Now I would like to optimize my code even further. The assumption about the data is that the values of each rows are sparse (can be considered as factors), they are encoded as integers (collisions are allowed) and stored in a large array. maths.ml 

My knowledge in graph theory is very limited. I have to look for elements in an (undirected) graph who are in the same connected component. The idea is simple. First, build the graph. Then, allocate a "color" to a point and spread it to its neighbours recursively. Once there are no neighbours to color any more, pick a point without any color and repeat the same process. This ends when all the points have a color. I wrote the following class : 

I wrote the following implementation of the k-nearest neighbor algorithm (for a binary classification task). I am not familiar with OCaml's built in functions, I have the feeling that some of them somehow reinvent the wheel : 

Is there a smart way to optimize these bottlenecks ? I feel like there is something redundant in evaluating hashes and storing values in hashtables... 

I don't really like the methods which forces the user to call it every time before calling . Besides, the algorithm is very basic... Are there libraries doing this already ? Is there another algorithm, simple to implement (performance is not really an issue, this was working with roughly 1000000 elements) My tests are really poor as well, are there better guidelines to write them ? 

using namespace std; This should be avoided. The reasons are explained in detail in that question and its answers on Stack Overflow. Instead you should add the namespace in front of every function call from that namespace, e. g. instead of . The additional typing is very little and the better readabilty (and avoiding further subtle problems) is worth it. Naming You named two of your functions and , however from reading the name it is still not obvious which diagonal is refered to, because how can a diagonal be on any side? You might differentiate the diagonals by calling them "upwards" and "downwards", but even that is only slightly better and still not precise. Instead I recommend to just make one function , and check both in the same function. We will get to that later when we talk about the algorithms. 

After finding the first occurence of the first letter of the candidate in the containing string, the next improvement would be to check whether the last letter of the candidate is at position . That allows you to quickly find situations, where only a part of the substring is contained. Then you can check the middle part. 

Don't write the type into the variable name. The type should be able to change without the variable having to be renamed. already tells you that it is a collection of subfolders. might be better, to make clear that it contains the folders' names, not wrapper objects for the file system. Removing the backslash from the beginning can prevent you from having to read up the code to make sure where the backslash is, at the beginning or the end. or implies just the name. So add the backslash wherever you concatenate the strings. 

Comment blocks of code from the developer/user perspective, not single lines from the technical viewpoint: 

Using for exponentiation is faster and looks cleaner than using . Note that and are local variables here, even if they have the same name as the global ones. Use the function like this: 

Use expressive names to create self-documenting code. If a comment is needed to explain a variable, use a different name: 

Add blank lines between blocks of code, e. g. between for loops. That makes your code much more readible. 

Using braces around one liners makes your code prettier and more readible, and also prevents bugs when you add a line without noticing the missing braces. Instead of this: