By actually apologising. And that means making a real apology, not the "I'm sorry you were upset" kind of nonpology. You should express regret that you did something that hurt him, acknowledgement that his hurt is real and valid, and how you're going to try to make sure it doesn't happen again. Here's an example: "John, I'm so very sorry that I spoke out of turn and upset you the other day. It was wrong of me to ask about something so personal, and I really regret hurting you by bringing up something so painful for you. Next time I'll think twice before I ask about something like that. I hope you can forgive me." You should also be aware that John is having a really hard time right now; his reaction might be disproportionate, because his feelings are all over the place. Anxiety, worry and grief may make him snappish; he may be subconsciously looking for something to be angry at because anger is a more acceptable emotion than sadness. You may be the target of that. If so, be the bigger person and accept it. If the situation doesn't get better, you could also go talk to your manager or someone else you trust and tell them that you said something that hurt John, and you've apologized but there's still strain between you and you'd like advise on how to improve matters so you can be a better coworker. Showing up to take responsibility for fixing problems is what a good person, and a good coworker/employee, does, so any reasonable manager should appreciate it. Edit: Since this has come up in comments: I don't think you actually did anything wrong, at least not intentionally. The error was that you misjudged the situation. When it comes to something that's very painful, many people want to choose how, when and to whom they talk about it. Having someone who's not close bring the topic up can feel very intrusive, in addition to it bringing the painful subject to mind and thus affecting the work day. Some people prefer to handle a painful home situation by putting all thoughts of it aside during the work day and focusing on work only. John appears to be one of these. Again, you acted with good intentions, but the outcome was nevertheless that he was hurt. And when we inadvertently hurt someone with words, the right thing to do is to apologize, just as when we inadvertently step on someone's toes or spill their coffee or in any other way cause them hurt or problems. 

It helps to have something to show or a story to tell about your break. If the break was, "I was just burned out on programming" I totally get that, but you'll want to have a positive spin to put on it when it comes up in interviews. It'd be nice to just be able to be straightforward in your reasons for this but I think a little personal marketing here would improve your odds. Have you had the chance to work on anything interesting these past two years, or travel, or maybe follow a non-programming passion? 

I sympathize with you here. Still, the synchronous request/response apps I was building on top of Django in 2012 bear very little resemblance to the single page apps people are building these days on top of generic Rest APIs. So much logic has moved into the frontend. You still know how to ride the wheeled vehicle you learned to ride, but the kids these days are riding unicycles. You don't need to use the latest and greatest to build useful interfaces, but I have found that hiring reqs have a bias for newer frameworks. You should at least familiarize yourself with them so you can make well-reasoned arguments for when they are or aren't appropriate. 

As keshlam says, the only way is to actually tell people that you don't want it celebrated. If you don't want to tell everybody, you can talk to your boss and maybe one or two more people that you trust, to make sure they can squash any attempt at celebration as soon as they hear of it (which they will but you might not). You don't need to give a reason other than "I know that everybody means well and I truly appreciate it, but I'd really prefer not to have any type of celebration". This is another instance where "No." is a complete sentence. They don't get to judge whether your reasons are "good enough"; only you can make that judgement and you already have. If it turns out that your boss and coworkers would prefer to pretend to care (by doing something you have told them you don't want), rather than actually care (by listening to your needs and not pushing something on you against your wishes), it's a clear signal to start looking for a new job. If they don't accept your boundaries on such a personal matter, they won't respect them on other issues either. 

I've only ever felt like I'd encountered hostility in an interview once. I was given a toy version of a problem that a company had solved in production by the engineer who had solved it. When I whiteboarded it, he replied with "Yes that's correct, but it's suboptimal" with an emphasis and tone that made my blood boil. Luckily I was able to recognize that having this out with him was suboptimal and kept my indignation to myself. At the end of the session when he asked me if I had any questions for him (and I'd had time to cool off), I asked him how he had solved the problem in real life. It ended up being a net positive interaction, I learned something and in the end was offered the job. How can you (or others happening upon this question) avoid this in the future? 

If you cannot contact the staff that's already departed, then the next thing to do is to keep a close contact with the people who have not yet done so. Talk to them, and more importantly, listen to them. Make sure you know what they are having problems with - whether it's directly sales related or if it's that they are getting a back ache from an ill-fitting chair, or that guy over there who's always yelling in the phone and making it hard to hear what their own customer is saying. A good question to ask is "what if you could change just one thing here to improve your work situation, what would that thing be?". Then, be honest. You may not be able to fix it - but you can be honest about the chances of doing so; you can maybe find some compromise that will improve whatever the issue is a little. You can be the person they trust to have their back. You can make sure that the management doesn't chew them out for asking for whateveritis. All this will make it more likely that they will actually tell you the truth when they start hitting the wall, and thus give you a chance to help them. And you need to build up that trust before it happens. 

It sounds like your friend became defensive. Your friend and the interviewers may have different outlooks on the role of an engineer... and that's fine. If he wants the job despite this philosophical difference, the onus is on him to convince the company to come around to his point of view. Getting angry because somebody doesn't want to buy your product is a poor sales tactic! Take the feedback gracefully and consider it later. Maybe his coding skills have atrophied a little? It happens! Maybe this isn't his primary tech stack? Understandable! If he's applying for roles that place a high priority on coding skills, it may make sense to brush up his hands-on coding before the next round of interviews. 

I understand where you are coming from completely. I am a software engineer who started off as a hobbyist and I had a bear of a time convincing recruiters and HR departments to give me my first chance. It sounds like the barriers you are running into after not doing dev work for a while are quite similar. With that in mind, my advice: 

Edit: This answer is now less valid since it was written when it appeared that the author was accused of doing something. Their later clarifications show that he's accused of not doing something - a somewhat different situation. But I'm leaving it in, since it may be useful for someone else finding this question and being in the position the question originally spoke of. Original answer There are basically three possibilities here. 

First, bribes. All rewards points systems are in effect bribes - they are an offering of reward when you purchase more things from the seller. Of course, usually they are quite small bribes. Most larger companies will have some rules about how to choose a vendor, and rules about what kind/size of gifts are considered bribes. (As a consultant, I know some companies that don't even accept a gift of candy around Christmas or Halloween... and others that accept quite a bit more!) The bigger the decision you can make is, and the bigger the gift, the more careful you need to be. Compensation and fairness thereof. If you are always the one who gets sent to the store, and you get a number of rewards points every time you go there, then you are effectively being given an opportunity to get monetary compensation that your coworkers don't get. They may or may not consider this unfair. If it's a huge amount of money (unlikely!) it may even be taxable. 

What I'm about to say might sound silly or superficial, but it has been born out in my experience during my past ten years in the workforce. I've found that companies that describe their developers as "IT" and that put items like "writing markup" in their job descriptions tend to be more traditional, less flexible operations. IT also tends to be a cost center within a non-tech organization, whereas development tends to be "where the magic happens" in a tech-focused company. Having been on both sides of that divide (four years in QA/programming in an IT role, the rest in non-IT programming), I'd encourage you to aim for the latter sort of role if possible. In my anecdotal experience, IT cares a lot more about the certifications you have and how good of a candidate you are on paper (e.g. do you have any gaps in employment?) whereas software shops seem to care much more about "can you solve this whiteboard problem/take home programming assignment" which I think would work in your favor. This is somewhat tangential to the rest of the answer but still worth your consideration! 

Let them know what you're doing to make sure that neither this nor something similar happens again.. 

This won't solve all of your problem, but at least it will make it easier for you to show your bosses the amount of work you do and get a good structure for follow-up and setting priorities. 

The cost to you of contacting them is small - a few minutes of your time. The potential benefit is huge. In other words - contact them. It can do no harm and possibly some good. 

I'd recommend a polite refusal without any room for argument: "I'm sorry, that doesn't work for me tonight." If this brings follow-up questions, e.g. "why?", or complaints, e.g. "But it's not that far out of your way", then you just repeat "I'm sorry, it doesn't work for me." You do not need to give a reason. "No." is a complete sentence. The coworker may well get upset, but there is literally not a single word that they can object to. They have nothing to argue against, no way of explaining that you are able to do what they want because Reasons. 

By being extra good! You're not experiencing a witch hunt; you're experiencing the doubts of people who are unfamiliar with your work and your capabilities. This is heightened because performing well in your current role is taken as strong evidence of competency (as I found when trying to get a job as a hobbyist without that track record). It's amazing how much this sort of proof matters; in 2011 I couldn't pay someone to let me program for them but after a year of experience with the job title programmer (during which I was not a very good programmer even), I started getting recruiters reaching out weekly or even daily. You've got to give interviewers a warm and fuzzy feeling about your ability to accomplish the task they need completed. You can do this by refreshing your skills, sharpening your interview technique, and showing them work you've recently done. If you've not done work recently, now's as good a time as any to jump into a side project that will dust off your programming skills AND give you a finished project you can discuss with interviewers.