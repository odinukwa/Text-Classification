"Experience with the agile methodology" sounds like something that would be listed among the skills the employer considers "nice to have". But even if it's listed among the "required" skills, if it's the only missing skill, you should apply anyway. The agile workflow is not that difficult and if you're not the one who has to organize it (don't apply for the position of Scrum Coach, for example), it should be easy to pick up. Depending on how strictly you followed the Waterfall model before, it might take some getting used to that development requirements are not set in stone before you start working. That doesn't mean there's no planning at all, but that the initial roadmap is comparatively rough ("we need feature A, feature B and feature C, and each will take roughly 3 months to implement"). A more detailed planning takes place when the time of implementation approaches, and the feature is then "broken down" into smaller portions that can be easily estimated and completed in a much shorter time frame. That means that you'll usually spend several iterations working on the same feature, but again, each iteration is only planned in (even finer) detail shortly before you'll start working on it. The idea behind this is to avoid wasting time planning something that might end up on the cutting table when requirements change in response to already delivered features. That said, as others said, not having experience with the agile methodology does mean that you don't know whether the agile workflow even suits your style of working. Whether that's a problem is up to the employer to decide. And it certainly can't hurt to read up on the theory and the pros and cons of the methodology. 

Size doesn't matter. The important part is to pick a project that interests you. This could be a game, some kind of program to solve a real-world problem, or a more abstract application of some technology you always wanted to try. You can join an open source project, or build something on your own, spend a weekend or an entire year. All that doesn't matter. It doesn't even have to be finished, as long as you have something to show/talk about. If your skills are really rusty, you might want to start with some kind of coding exercise to get up to speed, but personally I wouldn't count that as a project, although that too depends on the challenge in question. In my experience, hobby projects are a great talking point in interviews. They're an easy way for the employer to gauge the applicant's interest, coding style, priorities etc., and being excited about your project leaves a much better impression than being unwilling to talk about it because you found it boring. I've never been asked how many lines of code I've written for any kind of project listed in my portfolio. Instead, the follow-up questions usually dig for details of features I implemented or how I solved problems I ran across. You may be asked for a code sample, but recruiters are way too busy to slog through your entire project, so they'll probably ask for a much smaller sample. (If that happens, pick a self-contained aspect of your project that you're particularly proud of and can explain in detail, just in case they want to ask questions.) 

And this is the major selfish concern I have, how do I progress my career and professional development from this point? 

Why does it feel almost fraudulent that I'm given so much authority to direct literally millions of dollars of funding/day and to set the technical run way for the next decade at least? 

Background: I'm currently working as a technical consultant, I'm employed by a large consulting company but have been with the same client for just under 3 years. Currently I'm working on a project which I honestly find to be incredibly exciting, the company I'm consulting with is one of the biggest companies in Australia and Myself, and my team, have essentially been given unlimited license, and an incredibly hefty budget, to try and restructure technical integration so that it's not awful. So lots of no-regrets green fields opportunity to essentially use the latest/greatest tools but at proper enterprise scale. As far as I can tell this is a pretty good place to be. My situation: I'm by far the youngest person on my team with the least industry experience. I'm in my mid-low 20's, I only graduated from university 3 years ago and was immediately offered a job with my employer, spent 4 hours on site then was snatched away to the client I'm currently working with. My current role is officially a 'technology lead' but my team is entirely made up of 'technology leads' so the only benchmark I can draw is how I'm treated. Currently (and for pretty much the entire duration of this current project) I've been the person who everyone double checks decisions with, who is pulled into the architectural working groups whenever I'm free, I'm leading 3/4 major streams of work that we are doing, that is to say that I'm by far at least being treated as the most competent person in 3/4s of the deliveries we are committing to. Again, seems to be a pretty good situation, to the extent that I've worked 18 hour days and not even noticed because it's genuinely that exciting. (And I'm not the only person on my team who is so motivated), the only potentially worrying sign is that we have a crazy high rate of churn through the team, we've had a 120% churn in 7 months because people have either burned themselves out and scaled back their commitment to 0 or, for non-staff like myself, only two of us have been on the project since the start, the rest have been cycled off because they just weren't keeping up. So what's the problem? There are two issues which I'm completely at a loss for how to resolve them. 

A few members of our current worker's council ("Betriebsrat") are leaving the company, so we'll need to find new candidates. I've discussed this topic with some of my colleagues and it seems like nobody really wants to do the part (including myself) but pretty much everyone agrees that someone should. Because of that I'm at least considering the idea of candidating. I know about the short-term benefits of being in the workers' council (increased job protection etc.), but I'm not going to be in this company forever and I'm worried about the long-term consequences. 

It's absolutely OK to ask this question, same as asking whether it's a technical interview or you're talking to HR. I don't think anyone will hold it against you. I've always asked something along the lines of, "Could you tell me who I will be talking to?" which kills two birds with one stone as not only tells you how many people will take part in the interview but also gives you information about your interview partners (i.e. their position in the company). 

I've never heard of the idea of explicitly answering the "N years of X" question. Usually, that's answered by the CV in which you list your part-time jobs with start and end dates. Finished projects count for a lot! Bonus points if you can link to the websites and/or present testimonials by happy customers. It's not clear how much of your experience consists of private projects, but absolutely list them too. However, if nothing was published or hosted on github etc. that might not count for much. I usually summarize my projects in a single bullet point. Use the cover letter to expound the skills you earned during the projects, both when it comes to coding and soft skills. 

I don't think it makes a difference. The reason people advocate staying for at least 1 year with an employer is that "job hopping" (frequent stints of a couple of months) may raise red flags for prospective employers. Since you've already held your job for 2+ years, there's no reason to stay there "just because". (Unless there's some company-specific reason like getting a bonus or something.) Keep searching for a new job and don't quit until you got accepted (or things get really bad). If your current employment for some reason makes it more likely (same industry etc.) to find your dream job overseas, you may want to stay there until you either find that dream job or a job that's likely to increase these chances. If you've done a lot of job hopping before, take care not to fall back into old habits. 

I've always been taught that he way people treat you is a mixture of social norms and how you behave yourself. I genuinely feel that if anyone else on my team had any idea how young I was they would immediately begin to question everything I asked them to do despite my track record being unblemished re: making ultimately the right decisions at any given time in this space. To provide some perspective, some of the junior developers were taking on to fill gaps are at least 10 years older than me and it just feels weird to be trying to give guidence to people who have been doing this sort of stuff for 4x longer than me. 

Whenever I ask people more senior that me for feedback I can't seem to probe anything useful out of them, usually I get a response of "all good, just keep doing what you're doing" even when I've formally booked in time for feedback, and at best I'll get small (at least in my opinion) bits of feedback like "I've noticed you've been arriving late to lots of meetings? Perhaps work on that. Actually, no I remember now, I sent you as my delegate to X working group and your doing Y workshops with so maybe you just need to make your calendar more public?" Given that my calendar is public I don't actually see any benefit to this sort of advice. I almost get the feeling that even if senior leaders had anything to provide re: feedback they might be hesitant because it would probably be related to high level management activities which they are intimate with and that's presumably not where I would currently be most valuable to them. The only way I'm keeping myself technically sharp and staying ahead of hard skills is by doing very similar stuff in my own time as a hobby, but I feel that the difference between learning technical skills and developing an ability to create meaningful business results with those technical capabilities are two very very different things and it not exactly easy to try and help myself with the business results thing. Any advice on how to overcome every now and then feeling vastly overwhelmed by the scale of my responsibilities compared to where people my age usually are, or on how to tackle the "get real feedback that actually helps me develop" problem would be much appreciated. clarifications I wasn't particularly clear about what my job actually is, technically I'm billed out as a 'senior management consultant' to a company that charges me internally as a 'technical team lead', to a project where I'm officiallly a business analyst for some reason. In reality the role I'm on isn't a programming/developer role so much as it's an integration architecture role. The purpose of this project is to try and simplify integration with legacy systems and I'm stunned at how simple it needs to be for java/node devs to not complain about doing it, and conversely I'm regularly surprised by how incredibly unaware our backed teams are that the world has changed so, yes they will need to expose IMS endpoints to an entire subnet because we could have an interface sitting on any of hundreds of servers so they will need not implement security controls a little higher up the stack than firewall burns. I'd say that my teams goal is more than just building a platform and writing some code. I had a 95% working prototype knocked up in 2 dad when we started this thing. Really what we are trying to do is convince a whole lot of 'new-wave latest tech' developers that there are technical constraints in the real world and sometimes you need to actually get on a whiteboard and do some design before you just start pulling node packages that you think will pretty much build this stuff fr you, and at the same time were trying to bring a lot of our legacy providers (internal and external) up to the point where we can have conversations with them where the are not going to dig their heals in because we need to bump tps by 5req/s because we know what they are running despite their attempts to obfuscate it and we know that they can handle the load. This conveniently brings me to my second clarification about the "18 hour day" thing. Those weren't 18 hours grinding out code, they were 18 hours of workshops and meetings with the occasional break to go and build components to get us closer to building a universal integration platform to replace the current legacy ESBs (yes, that's a plural)