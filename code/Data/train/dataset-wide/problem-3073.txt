This is making your code slower (performing string concatenations instead of additions) but you shouldn't be able to notice this because we are working with pretty small values. Also, this is a first step for an actual optimisations to be performed once it works : you just need to replace whatever involves string with their length variant : 

Now, something I am not quite sure about is how you want to handle the "middle" element (if any) of your input. At the moment, you ignore it which is fair enough depending on your requirements. It would also make sense to add it to itself or to keep it on its own so that the sum of the original list is also the sum of the new list. A slightly different solution for this would be to handle two different indices (or two different iterators) and to stop when they cross. 

It does not follow PEP8 and should be You have the same hardcoded string in multiple places : you are pretty much asking to be biten at some point if you want to change this. What about . You are calling for no good reason You do not define if the condition in the is evaluated to false. Maybe you meant : TXT_EXTENSION = '.txt' filename = file_title.get() if TXT_EXTENSION not in filename: filename = filename + TXT_EXTENSION You are changing "toto.tutu" to "toto.tutu.txt" but "toto.txt.tutu" does not change. If what you are interested in is extension, you should probably be using . 

This is better but we still have calling and calling . Maybe should be used to play a single game and shouldn't call at all. This can be done by removing the call to in and moving it after the call to in . That way, we'd just have calling itself. You'd have something like : 

Style Python has a guide style called PEP 8. If you have no good reason not to follow it, just follow it. You'll find various tools to check your code (pep8, pep8online.com/, etc) and even to fix it more or less automatically (autopep8). Here's a list of problems detected : 

If something was wrong before (which is likely to be the case), it is still wrong after my rewriting. 

You could them split this into 3 arrays but I am not sure it is worth the pain. Indeed, a few things can be done in a more concise way now like : 

Don't repeat yourself There is a piece of code you have in different places. It might be worth extracting it in a function on its own: 

Simplify the logic Instead of using to get the index and iterate over both and , you could use . Also, instead of converting to a list and to compare to [0, 1, 2, etc], you could simply count its elements. You'd have something like: 

Divisions and modulos Isn't it a pain to have to perform to operations to have the quotient and the remainder of a division ? It is not anymore with the pretty cool 

Finally, you can also add more nested iterations. In your case, we could write (but some people would consider that this is going too far): 

The global design is a bit weird from my point of view but I'll comment on the code you've written. In : The code is properly formatted. A few remarks anyway : 

I think the problem is that you are counting the number of double-six and not the number of trials that lead to (at least) a double-six. The difference it makes is that if in a same trial, you have double-six multiple times, it should be considered as one failed experiment and not many of them. This correspond to adding a after and does fix the issue. 

On that final version and working with , my code returns 13259 in 0.2 seconds while your implementation return the same result in more than 3 minutes and 16 seconds which is roughly 1000 times slower. 

Iterations, the right way Whenever you are using indices to iterate over an array (or any kind of iterable objects), you are probably doing something wrong. First, it tedious to write. Then it's awkward to check if you don't screw up with off-by-one error. If you really really want indices, just use , it usually solves your problem. Now, back to your code, you sort a list and then try to iterate on it starting at the end. Wouldn't it be easier to just sort in reverse order and then iterate normally ? 

About variable declarations It is a good habit to declare variable as late as possible, in the smallest possible scope. It makes things much easier to understand (and it can sometimes prevent you from using the wrong variable). In you use , you can inline variable declaration as part of the loop which is usually a good idea. About You'll read everything and its opposite about . As for most things, there is no definitive rule : sometimes it can be a good idea to use . In your case, you do not always need it. Taking the two last comments into account, your first function becomes : 

to avoid the boring repetition in the rest of the method. On the other hand, shift could probably be declared and defined only when you need it : It might be worth pointing out that according to the Java specs, integers are 32 bits so you probably don't need to do everything with arrays of 32 booleans. My feeling is that it would make everything much easier and you'd be able to do things in a straighforward way. For instance, case SEQ: would become : `case SEQ: return (src1==src2);'. If you do so, I think most of the loops you write might not be useful anymore. 

Errors are definitly something you should look at because there would lead to severe errors. Warnings are a good hint that something is probably not quite what you wanted to do. And leads to pretty similar results : 

Removing trailing whitespace, renaming variables, reordering the code to group statements about the same concepts and introducing temporary variable to avoid writing and computing the same expressions multiple times and adding comments: 

Boolean checks You could rewrite: as and as . Variable name is a pretty bad name for an array. It could be a good idea to give a name that tells what's interesting about this array's content. As you use it to know whether a value is prime, I'd call it but you might find a better name. List comprehension (again) You could rewrite the final section of your function using a list comprehension. 

Instead of sorting values, taking the corresponding indices and using them to have the values of a different array in the order of your choice, you could generate tuples containing all the relevant information (name, weight, value) and sort them with a function of your choice. This reduces : 

This code checks for numbers of 8 digits by doing 13939 prime checks. Thus, it is not worth using the Eratosthene sieves anymore. Using your initial code with no cache, we can achieve great performances : 

Now, you should be able to see that something is wrong. Indeed, a dictionnary is an unsorted container so when you convert it to a list, you do not know for sure the order of the elements of the list. This is a big problem in your case because will call the function and build a new list possibly in the different order. For that reason, values might be missed. It took me a while to spot the issue but once we know it, the fix is easy : let's call the function and build the lists only once. 

Style You are a bit inconsistent in your vertical spacing. My personal point of view is that you don't need that many blank lines. 

Before explaining why I think recursion might be a bad idea here, let me show you the solution I came up with. 

For the latter, it is easy to see the different values that will take. It is also more concise and more idiomatic. Also, my guess is that you do one pointless iteration at the end. Indeed, you have and then basically nothing happens. I wouldn't been surprised if : 

Your code looks nice and seems to be fully PEP 8 compliant indeed. The fact that you have 1 blank line between functions except in one place where you have 2 puzzles me a bit but that's not a huge issue. You can actually make your code much easier. Here are a individual steps, you'll find the final code at the end. 

But here again, list comprehension can be used: Using the right data type At the moment, difficulties are stored in a dictionnary mapping consecutive integers to values. This looks a lot like a (except that the indexing starts from 1 instead of 0). Variable names is a weird parameter name for a function. Maybe would make more sense. Avoid string concatenation From PEP 8: