The Problem: This query will only return patients whose last 4 visits happened within 1 year. Question: How would I find all the patients with any 4 visits that happened within 1 year of each other? Credit to Jonathan Fite, I used his suggestion to rewrite the query like so: 

Those drivers are a total pain in the ass to deal with. You are better off using the SQL server data export wizard (or the import one, if you are importing) and saving the package, which you can then execute from a scheduled job. 

We just discovered another server with a database on it. The database is owned by a SQL account , with the and roles. The other login is , with only . I can only connect through this one. is , and even if it wasn't, we might not know the password. Question: Is there any way to , or create another sql login with ? 

Finally, schedule the job, then test it by right clicking the job and hitting start job at step. In a few moments, you should see an email that looks something like this: When you need to modify the package, fire up SSIS, open up the file and bash it around a bit. If it's stupid and it works, sometimes its still stupid. Question: How would you do this smarter? 

this can be a doozy. I'd start with using the replace function to get rid of all the junk. You can also add it in universally, although that will be harder. It would look something like this: 

The security folks want all AD passwords to expire every three months. I'm really not excited about this, since I definitely won't remember, and I'll likely be on my boat, drunk, when they expire. Question How often do you/should you change the passwords on your sql service accounts? 

changing the number you put into the function will change the length of the string that comes out. Obviously, it won't handle duplicates, as Aaron & Erik mentioned. Right now, it can do a string up to 255 charachters, but I suppose you could return varchar(max). I'm not brave enough to use varchar(max) on SE, though... 

Before we go to the next step, save a copy of the file that will be re-created each month, get filled with data then renamed. SQL needs to see it in the wizard, or it will argue with you. This is also the folder that your end-users will need permissions to access. In my example, this file is: 

Finish the export wizard, and you should be able to go to your shared folder and see your file, full of data. We haven't used the _blank one yet. 4. Create the Job in SSMS: Go down to SQL server agent, right click on jobs and create new job. Give it a name, and specify an owner that isn't you (your SQL server service account for example). Go to steps and add a new step. First thing we are going to do is copy our _blank template into the shared folder. Step 1 for me will be: 

Not sure what they all do, to be honest, but I think the -d one is important. It's specifying the database [DBA]. Here's my big bad script. Only run it if you hate your SAN administrator - and make sure you've got a new printer cartridge: 

Question: if I'm getting duplicates, could it be the fetches? do they both need to be fetch next, or neither? 

Today, I saw that our residents have put a bajillion hours into an excel spreadsheet, tracking everything they need to know about our patients. The excel sheet is really good for humans to read from, but absolutely horrendous for machines. I'd like to help them out, but I'm stuck on one part: creating a list of every diagnosis per patient - and presenting it in a single field. I've got this, which will concatenate the entire table: 

A few things: You are going to need some data types in there. the drugstore_main is larger than the drugstore_details table, which could make things slow down the road. How are you getting the data? That will play a large role in how you want to structure your database. It might be easier to build your database to reflect the flat files you're using to populate it. Oh, and save yourself a lot of trouble by using integer ID's, don't use newid(). 

Ah, you're right there. It's easier if you use aliases. SQL Server needs some way to distinguish between the copies of the tables. 

Got it. Well.. I've got one way. Might be kinda slow on a big set: since you can't use rand() in a function, I stole a view from @Pரதீப் in this post: $URL$ and modified it a little bit to look like this: 

Maybe you want a full outer join instead of a left, to make it look exactly like your desired output. I'd try it with both and see which you prefer. As a few have mentioned, without the isnull fuction, you may as well have inner joined. There are a few other places you can apply isnull() to potentially change the output, too. In the join, for example. 

I've got a bunch of simple SSIS packages that output SQL data to excel, then I rename the files and move them out to the end user. Some of them use file paths with spaces in them, and they aren't excited about using new folders. Here's the code I'm using: 

I'd let everything stew in your brain for a while. sleep on it and start making your changes tomorrow. 

You probably want to split out the customer table: One for the businesses and one for the people. On tblCarpets and tblOtherProducts, what about a keyword field? You could do some nifty stuff in Java with that. Each table could benefit from a create_timestamp, modify_timestamp and, if you've got a way to track users (a tblUsers), created_by and modified_by. Hide_ind - you might want to hide information from the front end, but keep it on the back end for reporting purposes. You can get rid of 'tbl' in SQL. Its like saying ATM Machine - the M stands for Machine. A discounts table, maybe? How would you track price changes? Do they have their own trucks? How many staff? Do you want to track who sent what where, and how? 

To make every number 10 digits, with zeroes on the left side if it is shorter, you could do it this way: 

2. Create your excel file: Paste the results into an excel sheet. Format it the way you want it, Create your pivot tables and charts 'n stuff, then delete all the rows with data (keep the headers). Important: Save the excel file in a location where your SQL Server Agent can access the file. You may need to edit the security properties of the windows folder and add SQL's service account to the Group or User Names. I keep a template file in a place where no end users can open it up, change a column and break everything. It adds a few steps, but makes it a bit more end-user-proof. In this example, my template is: 

I discovered today that we have a really ridiculously powerful SMTP server, when I forgot my where clause and sent out 20,000 emails in 4 seconds. How do I put a limit on my database mail to only send out a few dozen emails per minute? 

I've got an old 2005 server where 8/12 of the databases are in . This server has 81 jobs, many of them with unique id's for names. One of these jobs is called , and it calls a .cmd file every 30 minutes. The .cmd calls a .pl that looks like some sort of home-brewed log shipping. I'd like to bump the databases out of standby so I can back them up properly, but I'm worried it will break everything. To make matters worse, while the server is a VM, there is (according to the VM admins) a problem with the drives where it sits, making it impossible to back up. They are worried that the server could die at any time, so we have to do something. The databases are relatively small - I may be able to get in and out in the 30 minutes between the job. There's no test environment, though, so I can't find out easily. We do have vendor support, but they don't seem to be very good. Am I better off just handing them the keys? Question: How would you go about backing up this server without knocking it down in the process? 

Hit next and you should be on the page to Specify Table Copy or Query. In this example, hit the button to Write a query to specify the data to transfer, but you can also create a view or table, if you prefer. On the Provide a Source Query page of the wizard, paste all your sql. In this example, I need to paste: 

I set up a checkDB job, and I used , thinking I was really clever. Looking at the job in detail, however, it only seems to do the Database then stops, reporting success. I can grow my own like this: 

I didn't build it, but we've got a 32-bit Windows Server 2008, with SQL server 2008 and 4GB of RAM. I need to upgrade it to SQL Server 2016 in order to log ship to a new server, so we can put this thing out of its misery. The problem - it looks like SQL Server 2016 requires, at minimum, Windows Server 2012, which is only 64-bit. Question: how can I migrate the data to a SQL 2016 server with <1 day of downtime? Is there a way to get around it with compatibility levels? 

On the next page, change the destination to Sheet1$ (or whatever you named the sheet). On the Review Data Type and Mapping page, you can change the data types if you want, so that dates and integers come out properly. On the Save and Run Package page, make sure you Save SSIS package to the File System. I used: 

As for country codes... ideally they would be in their own column, but you could add them back in afterwards with something like this: