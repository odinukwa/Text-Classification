The most secure way of doing it I would say is to have a group called git-readers add git and www-data to it, then have the following folder structure: 

mod_auth_mysql's crypt algorithm uses a different format of hash to Bugzilla's e.g. a crypt SHA-256 password would look like this: 

If there are other packages than php* in this list then you can't seamlessly switch to Webtatic PHP 5.4, but will have to investigate alternatives. Webtatic has replacement packages for all base php packages (see the packages listed on the page linked to in 1. for confirmation), so there should be no issues, unless you use other 3rd party repositories that have packages installed dependent on the specific php version installed. For the rest of the installation (still in yum shell), you just remove these packages and install their php54w-* counterparts: 

Without adding an additional external repository, you wont get a later version of git. See this article for getting Git 1.7 via yum: $URL$ 

CentOS 6.4 broke backwards compatibility in some library versions, and so latest Webtatic builds only support CentOS 6.4 for some packages (most of the PHP packages are unaffected). If you can update your CentOS 6.x version to 6.4, that would solve the issue. CentOS has in recent years started making it hard to fix to earlier releases to try to push users to the latest release. It's not an ideal situation for servers that can't be upgraded, but repositories would have to support each minor release to avoid this situation. 

It will be the first VirtualHost that matches which will be loaded, and since the files are loaded in alphabetical order, you can change the ordering by changing the filenames. What I do is put a number prefix for each filename so I can set the priority in order to do something like what you mention. e.g.: 

Gather the required person and commit them to finishing the software installation task with you (or just get their login password if you're all comfortable like that) Make their domain account a local administrator on the terminal Log them out, log them in (to apply the new permission) Install the software with their newly promoted admin credential Remove their account from local admin group Log them out, log them in (to restore their previous permissions) 

Assuming the client is running recent version of Windows... open an elevated command prompt and try some of these. I usually never need to go past the first four ipconfig commands. flush and register dns, release and renew ip 

Done. It's a workaround wherein you give them rights to install the software themselves but you maintain your sense of security by only promoting and demoting their permission level under your brief supervision. My experience continues to be that most software is not designed in this way, but occasionally it is so this is how I get around the problem. To scale this problem to many more computers, systems like System Center Configuration Manager (Windows Deployment software) allow users to execute Task Sequences that you setup previously. It's a managed way of allowing them to distribute their own software because you build packages and configuration etc... it's only worth mentioning but since you're doing this on ~5 machines, I'd go with the more manual method I outlined. 

There does not appear to be a limit to the number of emails you can use in the dmarc rua attribute. However, the size limit of a TXT record in DNS is 255 characters, according to Max. Number of char in a TXT Record so the upper bound on number of emails is limited by that. I successfully used four emails in my dmarc record, but a better practice is to use one service account and set email forwarding from there. This prevents the need to update DNS records every time an employee changes jobs for example. 

Don't say "y" to the results, but take note of all packages mentioned in "Removing for dependencies", e.g. 

I would change the permissions on the /var/log/httpd directory to solve the problem of accessing the files from the console. add a new group and add the user to it: 

Note the 's' in the group permissions. This makes the writer users use git-writers group as their default group. This will only work properly if the writers are all umask 0002. 

For PHP 5.1 the json extension is available via pecl. No need to upgrade PHP just for this (although now both PHP 5.1 and 5.2 are end of line) You need both php-devel and php-pear installed: 

Webtatic has added yum-plugin-replace to it's repository, and the guide is updated to allow upgrading via this method: $URL$ Assuming CentOS 5.x: 

You should then only see the packages you've set to be removed and installed in the list, and you can confirm the installation to switch over. Any services currently running with php loaded will need to be restarted, for instance httpd or php-fpm. As for this being 'seamless', any software changes happening while users are able to access the website should have the consequences fully understood. Shared libraries being removed and added when a process hasn't already loaded them could potentially load while the shared library isn't there. It's better to do software upgrades like this offline, and preferably tested on a non-production machine first to verify the process works as expected. 3 . To switch to a hypothetical CentOS base php54 package (CentOS 5 used php53 prefix), you just run the above steps replacing php removal with php54w removal, and php54w installation with php54 installation e.g.