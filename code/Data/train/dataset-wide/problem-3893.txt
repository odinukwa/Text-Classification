My first proper job as a developer was very similar. I was the developer and had to wear a lot of different hats. Nobody is going to view you negatively for that, it will be seen by a lot of employers as a positive. However, you say: 

I've been there myself, having missed work as a result of mental health issues. The important thing to realize is that it is very difficult for people who have no experience with psychiatric disorders (either not having experienced them themselves or through a family member) to empathize with those who do. To them it just looks like laziness/slovenliness etc and how can you expect them to tell the difference? Now that you're feeling better, the best thing for you to do is to work hard and kick ass at whatever it is that you do. Being able to overlook remarks such as this is a sign of good mental health. 

Don't do this either. If you are really that curious, just bring it up in your second interview. You clearly gave enough correct answers that they want to interview you again. If you were giving those answers of the top of your head, it isn't that surprising that you wouldn't remember what the questions actually were. If somebody asked you where a particular street was on your way to work this morning, and you instantly knew the answer, you would be hard pressed a day or so later to remember that street. I think the same principle applies here. If, in the course of an interview, you are asked about something which you know really well, it's not unreasonable to think that you will go into autopilot and not really think about your answer, but still give the correct answer, and it wouldn't be a memorable event later on. 

I would consider the possibility that somebody who hits the same button 25 times maybe isn't having a great experience, either with their computer or your software. Maybe they think that your software has frozen, maybe their computer is running slowly or playing up, maybe their kayboard/mouse is having issues, maybe they are just having a really bad day and take their frustration out on your software. Either way, if that is the case, and a picture of you shows up along with some silly meme, it's not going to end well for you! 

Just another viewpoint on this. It's worth consulting your company procedures/managers. If the tag you're using is just to let you access certain areas, etc. then that's fine, but if it's also got identification on it, it may be that the tag needs to be visible around your neck for security checks and the like. A number of compliance schemes require employees to be easily distinguishable, and that's usually done by distinctive lanyards and badges. It may be that you get into trouble for wearing it on your trousers rather than around your neck. 

As said, there's a difference between informing someone of an opening, and endorsing them as a candidate. For the former, let people in the hiring process know about any relationship. For the latter, you need to be aware that what you're doing is gambling. You are betting a portion of your current standing on the success of your acquaintance. If they do well, then people will view you as someone with good judgement, you are the one that got them to hire this glowing beacon of productivity. If they mess up, then they'll distrust your judgement in the future. Why should they trust your estimates/work/opinion, you got them to hire that colossal nitwit! You need to be aware of what you're laying on the table, what you stand to gain, and what you stand to lose. 

Recommending someone is a gamble. Specifically, you are staking a portion of your reputation on that person's competence and future success, if they do well, then your opinion will be more respected, if they end up being more trouble than they're worth, then your reputation will suffer similarly. My advice would be to be honest, saying something along the lines of "I know this person, and they are good at XXX", where XXX is any skill (work related or not) that you are aware they are good at. 

Worth pointing out that many employers have rules about cell pones and personal calls, so reasonable recruiters/potential employers shouldn't require an immediate response to all calls. That being said, there will be some that will think less of you for letting your phone go to voicemail. Two points that I would make would be, as said above, ensure that your voicemail functions, and you either get notified of messages, or check regularly. Second, I would avoid putting your new number on any broadcasted application. If you make an application to a role, then that's fine, but if you're posting your CV on a job board/site, then I'd avoid it. I've found recruiters to be somewhat persistent and obstinate as a general rule (not all, but enough to get to me), and tend to call you repeatedly about opportunities which are not suitable, or not desired. 

It seems as though implementing things like Scrum and code reviews is down to you. Have you considered, for example: 

Do you use any enterprise chat applications such as Hipchat or Slack? On a project I am working on, we have a standup channel on Slack (used Hipchat in the past) in which, after each days standup, we summarize what we are going to be working on that day (basically typing out what we said in the standup). You could implement something like this, and have every member of your team including your boss do this as part of their routine. This way you know your boss is reading everybodys messages every day, and if you summarize incorrectly he can tell you at the time. Then a week later, if your boss claims you were working on something not asked for you can point to your entry from a week ago, and ask why this wasn't raised with you at the time. I prefer this to email as it's more casual, easier to work into a routine and generally feels more natural. 

I guess it really depends on the culture. Where I am from, alcohol is generally socially acceptable, and so I would keep in touch with former managers and co-workers by contacting them from time to time and asking if they would like to go for a 'pint'. I find this really effective and a great way to keep in touch while not being too formal. I would recommend finding a hobby that both you and your manager enjoy but which isn't overly formal (ie. coffee, game of squash, golf, cinema, or in my case going out for a beer) and arrange to do this a couple of times a year. 

I worked with an individual like this in a previous job, let's call him Simon M. While Simon initially wanted the same salary as the programmers etc, despite not having the same skillset, our employer at the time was able to appease him by appealing to his ego and giving him two big monitors. I imagine the same thing may work in your situation as well, ie offer alternative perks instead of a higher salary. 

I'll admit that a 4-hour technical question is a little long, but is probably something to do with the seniority of the role. You appear to have missed the point of the exercise and are making excuses not to do it. Job hunting requires a sacrifice of personal time to do (the hunting, interviewing and testing), and companies expect you to be able to make those sacrifices. 

If you're talking an either-or situation, there are other factors to be considered. For me, I'd be looking at how often I'll need the added functionality of the laptop (the ability to take it to meetings/site visits, etc.) over the issues of fixed keyboard, trackpad, and screen. For me, being able to move my keyboard around my desk without throwing issues with the screen, and the ability to raise and lower the screen would do it for me. Plus the fact that a relatively small 17" monitor would be difficult to get on a laptop. 

This depends heavily on how busy the support is. If there needs to be 24/7 support "just in case", then this is likely to be done in the form of an on-call rota, whereby the person "on-call" is free to do their own thing, but may be required to respond to incoming calls if they occur. Typically, there's an "on-call bonus", combined with a rate for out-of-hours work. If the requirement is more fixed (i.e. there needs to be someone actively doing something 24/7), then it gets more complicated. Typically, a person works 8-hours per day, 5 days per week. 2 people can cover 2/3 of the requirement during the week, but nothing at weekends. 3 people can give you full coverage during the week, and nothing on weekends. Technically, a second person can fill in the weekend, but in most places, working for 48 hours straight is not something you can compel. At this point, a 4-man rota would usually switch to a 12-hour 4-day-on/4-day-off schedule. This would give you full coverage, and mean that you don't take all of a certain person's weekends, but with a 4-man rota, it doesn't leave a lot of leeway for absences. 

That's a red flag right there. It implies that while the office is busy, things are either too distracting for you to be able to focus or you have more work than you can handle, so you need to stay late to get things done. This suggests that management aren't doing a good enough job at either managing your workload or providing a productive working environment. Regardless of whether or not this is actually true, this is how it would look to me, and I would draw conclusions about the competency of your managers as a result. Besides, surely there are better ways to be spending your free time? Go to the gym? Meetups? The pub? 

Every developer thinks that every project they inherit is a buggy mess, it's a natural reaction, and I understand the instinct to want to refactor everything to be the way you think it should be. However, if the code already there is working and serving its purpose, and the business needs new features added, then you should focus on adding the new features. It doesn't mean you can't refactor as you go. As you add the new features, you are probably going to work with the already existing code, and when you do, tidy it up and add tests, and make sure that the new code is covered by tests also. Brownfield development (ie. working with and improving existing crappy codebases) is a skill in and of itself, and you can't just rewrite every codebase in this category you encounter. You are much more valuable as a developer if, instead of just finding a new job, you actually make the effort to work with and improve the codebase you have. 

You could potentially be the person to take this shambles and apply some structure, and that would look great to future employers. Don't worry about people doubting your skillset, and whether or not you really did do X, Y and Z. Just focus on being actually good at those skills, and you will always be employable.