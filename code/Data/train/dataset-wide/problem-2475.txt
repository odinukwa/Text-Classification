This should probably be called instead. [Note: I realize, this is prescribed by the spec. IMO, the spec should be changed.] 

There are two different camps when it comes to block styles: one camp says to use / for one-liners and / for multiple lines. The other camp says to use / for "functional" blocks and / for side-effecting blocks. Regardless of which camp you follow: your block has three lines and side-effects, so it should use the keyword form. 

There should be a space on both sides of the sign. This applies to operators in general. [Note: there are some style guides that advocate not using spaces around the sign for optional parameters with default arguments, but a) this is not universally accepted and b) not the case here anyway.] 

This is not actually an answer to your question, but since you mentioned that you come from C# to Ruby, I just wanted to point out that the idiomatic Ruby solution that @sepp2k presented is pretty much indentical to what an idiomatic C# solution would have looked like: 

Definitely shorter and more readable. In terms of people remembering to use it, it will appear on the intellisense, but with a different name to . 

Maybe If you're writing a maybe monad, it's very informative to think about . Maybe can be thought of as a special type of enumerable, which instead of having 0, 1 or many items, can only have 0 or 1 items. Thought of that way, you can transform any to a simply by calling . So to start off, we can create a wrapped enumerable: 

It's potentially annoying to have an extension method like that turn up on almost every type. With just a single one, it's probably a minor irritation at most, but in the future you may find yourself coming up with more or extension methods, and either you'll start to get a very clogged up Intellisense. So think about whether this is really something that you want frequently enough to justify it. If you're working on code that may be maintained by colleagues, check their opinions. Note also that actually has fewer characters than . Which is more readable and clear in stating what it is doing is arguable, but at least the array is instantly universally recognisable. So while it would be harsh to say that it's "bad practice", on balance I would probably advise slightly against it. If the benefits seem to outweigh the costs to you, though, then go for it. As a side-note, you don't need your condition, either. It's the array that you're creating a new instance of, not the itself. 

is always guaranteed to return a single number so the exception handler for is a dead code and should be removed. If you're just checking for existence there's no point to count beyond 1, thus enter . This also guarantees the returns either or . This might or might not help your query performance (check explain plan). It's a bit questionable if such an utility subprogram should record the exception or not but more information about your error handling implementation would be required to comment further. I usually don't but I'll let the exception propagate to the caller context and then record the full stack trace there. The good thing is that you (I just assume that from the name of ). 

I'm afraid you current solution is a prime example of inappropriate use of PL/SQL when plain SQL provides much more elegant solution: 

What we're doing here is using .NET's method to change from the string to your desired primative type. Then, if the string representation of the converted item exactly matches the original string, we say that the string must exactly represent the converted item, meaning it is of the correct data type. You may want to also pass in an for additional safety. Putting those two code blocks together would pretty much give you your full method. You may need one additional check for the max length of a string though. 

Naming Some of your names don't mean much. What's "" or ""? These should be replaced with clear, descriptive names. Similarly, don't abbreviate names. There's no reason to write instead of . 

Types of tests Given the relative simplicity of the problem, I'd consider the tests you're doing to be acceptance tests rather than unit tests. A unit test would generally target one very specific point of behavior, whereas your tests are more along the lines of setting up a realistic, potentially complex, situation and getting a result without worrying too much about how the code under test handles it. Things which would be appropriate for unit tests might include: 

I'd solve the problem by providing a PL/SQL procedure that knows the "split"-logic. In the example below I assume that non-splitted rows are not inserted into the table at all but all inserts should be done with the procedure. This is a rather common pattern when there's data manipulations but it is not clear from your problem statement if this is an acceptable solution in your case. I used regular expressions as it's a very handy tool for pattern matching with superior expressiveness and clarity compared to spaghetti. I didn't used triggers as it's not possible to modify the table trigger is attached to. The solution can be easily applied even if you need to read the input data (i.e. non-splitted) from the same table. Example 

As bonus I also introduced you to standard SQL datetime-literal syntax. Let's create some data to play with: 

It might not be immediately obvious that those two examples are the same, but they mostly are. The main difference is that .NET's libraries are much weaker than Ruby's, so we had to implement some stuff manually that was provided for us by the Ruby libraries. You would use both versions pretty much the same way: 

I.e. implemented as a left fold. After all, reversing any sequence (not just strings) is really just the same as 

In fact, the C# version I presented here is slightly more powerful, since it allows the client to choose the termination condition more freely. For example, what if I don't want the multiples of 7 below 50, but rather the first 50 multiples? Easy: 

This should be called . is the standard name for a method that converts an object into a textual representation. It is used automatically by methods such as or . [Note: I realize, this is prescribed by the spec. IMO, the spec should be changed.] 

Use analytic function (you might also consider using or functions instead) to assign an unique number in ordered sequence to each row. This is the standard way to implement top-N, bottom-N and inner-N queries in Oracle. Note that this example doesn't resolve ties. 

The is just for demonstration and is to guarantee the correct ordering of the tables. The is not needed if you have other rules ensuring the id is found only from one table. If the id can be found from different tables just add a wrapper -query (the details left for exercise) to pick the first one only. Now just wrap that inside your PL/SQL as you see appropriate. When some information is not available in all tables it's up to you what is the value indicating missing value. It can be e.g. or or depending on the context. However I'd recommend unless there is other factors that rule that out. Hope this helps ! 

and are okay names, but not great. Both seem to put too much focus on the data-types involved. This method is simple enough that that's probably not a big problem, but in general your emphasis should be on what you're trying to do, not how you're trying to do it. I can't think of better names than and from Heslacher's answer. 

Note that labels are now appended before calling into the method recursively, rather than at the beginning. This is so that we can do: 

DRY Let's start with your methods , and so on. From the title of the question, I think you're already aware these are problematic. Remember that while at its core your program is going to be made up of branches and loops, high-level languages like Java allow us to write in a way that the source code captures the structure of the task it's achieving. It helps to say in plain English what you actually want to do here: 

This is very much the same idea I'm using to encapsulate "business logic" queries for re-use in PL/SQL code. So if you're looking for a validation of a concept you'll pass my review :) In a comment to the other answer you said this is just a snippet from a package code - that's good you're using packages. For PL/SQL apps in practice all code should be located in a package - a standalone subprograms a rare. The notes: 

Your core problem is how to find out top-1 and bottom-1 in a single query. This is essentially a SQL problem and has not much to do with PL/SQL. First I present you the SQL solution and then simply wrap that into PL/SQL. You didn't provided table definitions. I was lazy and didn't tried to reverse engineer your schema but instead created very simple table that illustrates the solution that you can apply to your real problem. Other notes that might or might not be relevant to your case: 

The other answers are already very good, but I want to point out one stylistic detail the other answers missed: should be called , there should be no bang in the method name. The bang is used to point out the more surprising one of a pair of methods, i.e. when you have both and , then is the more surprising one. However, you only have one method, so it shouldn't have a bang. Bang methods always come in pairs! 

There is nothing in the spec about passing es to find. In fact, you named your parameter clearly indicating that you expect it to be a . Then why even bother checking for es? 

The is superfluous here, the return value of a method is the value of the last expression which is evaluated inside the method body.