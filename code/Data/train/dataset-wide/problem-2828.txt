Creating Database and Table Creating the database and tables should not be part of the database connection/configuration class. You don't want this to execute on every connection, but just once when you set up your website. Create a separate setup script. This has the additional advantage of simplifying your class. Right now, it stores the database configuration, connects to the database, and sets up tables (in addition to echoing and dying, which no class should do). That's too much responsibility for one class, so it's good to extract code from it. Misc 

Like @Domenic said in this answer, parsing URLs is hard, and it's nearly impossible to do it correctly with regexes. Email addresses are also quite complex. If your function is good enough really depends on your use-case. Most of the bugs described below may not apply, but I would at least fix the first one, which leads to problems with some valid email addresses. Bugs: 

Security It's unclear where comes from, but if it can possibly be user supplied (eg when it comes from a GET/POST request, or when it comes from the database where it might have been placed by a user), you should use prepared statements to prevent SQL injection. You should also not be using as it's deprecated. Also, you should always prevent XSS when echoing data that might be user supplied. Queries in array Your approach of using an array to handle the 9 queries whose results should be handled the same is ok, but it would be better if you extracted your foreach loop into a separate function and then called that function with the queries (or better yet their result). Doing it that way would increase readability and reusability of your code. Reduce amount of queries You could remove the amount of queries you use by using , which should increase the performance of your code. So instead of asking 

Naming , , , , , , , , are all bad names. There are very few situations where one (or two) character names are appropriate. Basically just i/j for a loop variable (but just where a better name doesn't make sense), x/y for coordinates, and well-known variable names in mathematical/physical equations (and even there I may prefer eg velocity to v). In your situation, it is for example quite unclear how t and u and s and e relate to each other. Better names for the strangeSort function variables may be related to what they actually do (so something with and in the name). Formatting You should paste your code into any IDE and let it format it for you. While you are mostly (although not completely) internally consistent, there are many oddities which make the code harder to read, including minor things such as odd spacing and multiple assignments on one line, and more important things such as missing newlines. Unnecessary Code 

Ok, so ptn stands for pattern, that's good to know. But what exactly is out bound? From the code, I'm assuming upper bound (or length - 1)? Another example is and it's values. And most methods don't have any comments. The code would be faster to understand if at least had a comment. Or if you described how your algorithm approximately works in the class comment. But even a method like should be commented. Right now, I have to look up , and to see what it does. If you comment something like I know right away what it does. Constructor I would pull up all checks to the very beginning. Also, I wouldn't save the length in a variable if it is only used twice. Constructors are generally not called that often. Number of Fields As was mentioned in your last question, you have a lot of fields. I would just get rid of and . You can use and . In most cases, you would just need to change to . If you still want to keep them, I would rename them to and so it is clear that they relate to and (or instead of and use instead of , it's easier to understand). Same with and ( isn't all that long and easier to read). Number of Methods You still have too many methods. I would get rid of , , , and . These really make the code harder to read. 

I don't know so I cannot say if it is secure. If it is this: MongoCursor::doQuery, I wouldn't use it. The documentation says this: It doesn't say why, but security concerns could be one reason. 

I think that this would be a bit cleaner and more readable. General structure Right now, your class does two things: It selects classes, and - relatively independent of this - it selects weapons. You might consider creating two classes, a and a . They can both extend a common base class and share some methods (like the and methods). You could also create an enum for the different classes. Then, your could return a value from this enum, and pass it to the , so it can make it's choice based on it. 

Input Validation The function seems to be from here, and it's really not a good function to use (see here and here). In short: it isn't recommended defense against anything (the recommendation for XSS are to HTML encode when outputting data, not when receiving it, and the function doesn't provide defense against anything else), and it makes your data dirty, leading to usability problems. Misc 

In the future to avoid this, whenever you copy-paste code, try to immediately think of a way to do it better (it's easier to do it correctly the first time, than to find the small differences in 8 methods). First of all, you could extract the code that is exactly the same (this will make it easier to find differences in the remaining code): 

As long as you have access to it, it doesn't matter that it is internal, it can still be exploited. The IP binding also does not prevent CSRF exploitation (as the request is send by you, not by the attacker). But seeing that the cookie hash isn't actually a cookie (or a hash), it seems to serve as a CSRF token (if it needs to be send for each request, which I'm not quite sure if it is). Structure I like that you have designated functions for login and logout, it makes the code nicer to read. But I wouldn't stop there. At the very least I would split into and . You might also want to think about using some generic function/class to send json, to avoid the duplication of / / . dbHash Your method isn't very well named: the name doesn't really tell me what it is doing (also, it isn't a hash; might be more fitting). It is also not all too well designed: I have to pass a string like to it to tell it what to do, which means I cannot use it without reading the documentation or looking at the implementation. Instead, it would be better to have some HashDAO class, which then has methods like , , etc. It is also very confusing that I don't have to pass additional data when ADDing. doesn't tell me anything. would tell me exactly what is happening. Misc 

Use ternary operator In most situations, the ternary operator is not a good choice. But when conditionally assigning a value, it sometimes does make sense and simplifies the code: 

With this code, you can probably also better see the similarities to the code that uses a temporary array. And to copy the rest, you could also use , which is probably faster: 

Structure Generally, a method should do one thing. For example should add a play (although it's an odd method for a play class, as a play generally cannot own another play). But your method doesn't just add something, it actually retrieves user input, prints stuff, writes stuff to a file, and then calls a seemingly unrelated method, which asks for more user input and processes it in some way. It's also very unclear what your class is actually supposed to do. Looking at the fields, constructor, and getter/setter, it looks as if it holds the data for one play, but then it is also possible to add a play, which doesn't make sense. You should definitely try to separate the holding of the data from the parsing of user input. You should also try to better define the tasks and differences of and , and you should try to remove the confusing call structure (the functions call each other, which makes it difficult to follow the control flow of your program). Misc 

Sure, why wouldn't an attacker be able to do that? You can test this yourself, either by writing a short script, or using a plugin such as tamper data for firefox. Or, as you are using instead of , just pass the values as . So if you want to avoid this, you need some kind of authentication mechanism (and you obviously need to fix the SQL injection). Other than the use of which is deprecated for a long time, and the SQL injection, your PHP code looks good. I would probably move some of the code to it's own function (such as , , , etc) to make it even easier to read. And instead of setting the header and status message yourself you could use . 

SQL Injection Your code is completely open to SQL injection. It is not enough to simply use . The important part is that you should never put variables directly into the query. The query should only contain placeholders (either or ). The variables are then later bound to the query. You have variables in most of your queries, for example: 

If you are not echoing or interacting with a database, and you don't have any authentication (the script is open for everyone) there isn't all that much that can go wrong. Your script is open to mail injection, but that doesn't really matter, as the script itself allows the sending of multiple emails to user controlled recipients. I'm not sure if this is intended though, because the example form doesn't allow this, and it doesn't seem like a good idea, because it allows anyone to mass-distribute spam via your server. Also, as you are calling for each recipient, your script could help an attacker in a DOS attack. If this is not intended: Do not trust user input, ever. Attackers don't have to comply with what a HTML form says, they can just send whatever they want, for example Misc 

You are open to SQL Injection. To prevent this, use prepared statements. You also should not mix and functions; always use (or PDO). Having variables that are only accessed once is only useful in a limited number of cases, eg when you want to give something a nice name to increase readability. But this is not the case with your variables, so they are really not needed and actually decrease readability. Jut use etc directly. This will also severely shorten your code. 

Security General Approach Your reason for this approach are not reasonable. The only reason to provide a different hash function is to deal with systems which do not support . And really, those systems should be updated. You definitely do not want to switch to a weaker hash function after a breach. You can ask users to change their passwords via other mechanisms. tl;dr: Yes, just use bcrypt. Salt vs Pepper Based on your comments, you seem to understand the difference between a salt and a pepper. But your code doesn't seem to differentiate, both your salt and your pepper are a pepper (this is also not as easy to fix as "replace this string with a random function", as you not only need to generate the salt, but also store and retrieve it). A salt should be unique for each hash, so that it actually slows down attacks. Bcrypt usage The bcrypt part of your approach is fine; you are using and correctly. Note that bcrypt actually handles salts for you though, so adding your own salt is unnecessary. As bcrypt can only handle passwords up to 72 characters, your approach may actually be harmful, as a long salt + password + pepper may cut of (parts of) the pepper. I would at least comment on this, but ideally, just remove the salt for bcrypt. Custom Implementation: Empty Hash If you set your to something invalid, you will - silently - store an empty string instead. Currently, you actually return false on the check, so it's not catastrophic, but it can lead to usability issues. I would throw an exception here. 

Yes, it is. Not repeating code over and over again is an important principle of programming. The alternative to creating a separate class would be to create a activity which contains this method (in cases that you feel a separate class would be overkill). You could even call this method in the method of the activity, thus automatically using it each time. In this case it's really a matter of taste. I would probably put it in a method in the activity, because your current class doesn't really contain any logic. It just calls . Coding Style Just a quick side-point concerning your coding style: You should try to be consistent with the position of your opening curly bracket, your indentation, and your spacing. 

Wrapper Methods Methods that don't do anything except call another method should be removed. seems to be such a method. Naming 

Just from a quick look at your code, I found a couple of issues. I didn't look at it in-depth, so there may be more. Security