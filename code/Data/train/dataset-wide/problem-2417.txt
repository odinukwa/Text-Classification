One thing I am aware of is that the code does not handle trigraphs; they are somewhere near the end of the to-do list. 

The names and don't say anything about the variables' use. I had to read through most of your code to figure out what means. Always use descriptive names for your variables, at least for those whose value is supposed to persist for extended periods of time. I would be willing to accept the , as it is basically one-shot, but should be renamed at least to or or something more descriptive. Your looping and termination logic seems odd. You are using the correct construct , looping while there's valid input left. But then you have this block: 

This type of information must go into comments. The next maintainer (which can be you in 6 moths' time) will need knowledge like this to understand the code. You should add specifications to your functions. They affect efficiency of some operations (like storing in a ), and since this is a very generic class, you should not limit its use in any way. An example for the assignment operator would be: 

If I read I do expect to search for a node. But take this as a weak complain only. Naming is hard. 4.2) Nodes should be passed by const-reference or (if you really need to modify s when accessing its children) The way you declare your search method makes it impossible to search in read-only graphs. I suggest something like 

This data structure maps values from intervals of some type which satisfies to values of some type . I remembered this kind of data structure from an interview question. My current use case is a distributed vector where I want to keep track which MPI rank owns which parts of some global index space. I am not sure about the . Explanation I use a where empty optionals are my sentinel for intervals, i.e. marking their end. So when mapping some interval to some value I do this by inserting 

and after the while loop you should replace with (since is empty...). Hopefully you see how erroneous this manual memory management gets. Thats why smart pointers got invented. In fact, you do not need any dynamic memory at all here. You can just copy node_holder by value, I think. Just define your queue as 

That's not going to do a whole lot for performance (basically get rid of a rows iteration), but everything else I see is really context specific that may end up with worse performance assuming your data looks like I expect it does (< 10 , < 50 and thousands of rows). A couple of additional thoughts you can try, though, depending on your data: 

Now, each filter simply takes an input and transforms to an output. We need a pipe to tie to it all together: 

Customer and Item classes Well, to start with, isn't used and I don't see how it could ever be. So that should just go away. Your naming style is off for C#; you should be using PascalCase instead of camelCase for public methods (eg., AddItem). and don't add much value; they're OK as-is, and are actually a reasonable encapsulation - but they're kind of overkill here. (as an aside, your class doesn't include , but I inferred it from your ). This comment could really be directed to the whole structure, actually - since you really just need a to solve the problem. Not to say the structure can't be useful, but I would consider it overkill unless there's some future plans being made here. Program class Your class sets a private member, but never uses it outside of ; it's odd to have a class instantiate itself like this. In this case, you can just use the as a local. will take an object and call on it for you; no reason to use the format overload. 

Here is an example of how to use to use uninitialised memory. I think this could help you as well. Do not return by value if you can The line 

4.3) Don't use new and delete but if you must... (you have memory leaks) [ Note: You do not have to use any heap allocation in your case. ] Because of improper use of you have at least two leaks (checkable with valgrind) Valgrind output 

Prefer value type semantic Try to make classes default constructible and equality comparable whenever this makes sense. Currently your class doesn't fulfil neither. The following code will not compile 

Since stylistic comments are also welcome I will start very simple. I prefer to reserve upper-case names for macros. Instead of 

Note that copying is very cheap since its only a (pointer, integer)-pair and doesn't have any ownership associated with. 

Makes a copy of while returning . Imagine val_ is a very big . This could be very expensive in code which calls multiple times. If you want read-only access, prefer to use 

Ok - that pretty much gives us our product management functionality. Now, on to UI. You've got the right idea here - console input/output should be handled generically, so let's expand on that idea and write a few generic helper classes. A good way to think through this is figuring out what portions of what you need to do are specific to your app, and what is a generic concern. You should try to split those as much as possible. These won't have anything to do with , so they'll be reusable in a different console app. 

will exit at any key; you want to change your message or change that to to require an . AppCoordinator Your class is a major code smell; it's a (no offense) terrible name that really doesn't describe what it's doing, and is likely to become a "god object". I would rename that to or or something. Since this is your largest class, the meat of my comments are here: 

1.) Issues in 1.1) You require nodes to be output streamable in You did not state this requirement in your description. Visualising nodes is not your concern here. 1.2) Don't store naked pointers to objects, they might dangle You only store a pointer to the nodes but you do not control at what time this exception is being caught. These pointers might dangle at the time this exception will be accessed. Since you do not require Nodes to be copyable (it might be generally too expensive anyway) you have no chance to store a node here. 

If you want to initialise your data from any range use templates and constrain its type to guard for errors at compile time. Prefer regular functions for computations This means, that an implemented function is also a function in the mathematical sense. Same input data produces same output data. I found that this almost always leads to evaluations which do not change an inner state. Thus it smells to me that 

From a high level, I have to disagree with your class design and names - they're really modeled after your implementation (, , etc.) instead of your problem domain. I would've expected to see some classes such as , , etc. I won't attempt a straight refactoring - though there's isolated areas of code that could be improved on, the main thing that jumps out at me is the mix of concerns spread across all your classes. Currently, your classes all know way too much about and user input - you need to centralize that logic, and split into dedicated layers: UI, business, storage. Here's an attempt to walk through a design - which should hopefully give you enough to tweak the specifics to meet your needs. Any compile errors or bugs are intentional and intended for learning purposes. Just kidding - though I will take some shortcuts since MarkDown isn't the best IDE. Let's first extract out a class so we'll have something to work with: 

instead. Make use of move assignments Currently you have to copy values into your optional. But what, if you just want to move something big that you want to return from a function? You need to add constructors for rvalue-s. 

A note on performance As for the performance. I can not imagine that this is a particular fast implementation. You use a lot (which means a lot of scattered allocation) your memory access patterns are not very cache friendly and so on. But this is a VERY hard problem to solve generally for all graphs since it is so dependent on its details. solves this with a lot of trait classes and a Visitor concept and is IMO quite hard to use too... and these guys have a lot more experience than both of us. A cheap trick one can do to boost its performance is to supply an allocator-overload to your function. This way you could preallocate a memory arena or even use the stack. 

That should clean up the code some. As I started typing that, I figured I'd check for edge cases too - since is filled with them (eg., it includes the negative sign in the length, returns if it overflows, etc.). You're handling the case, but a couple of edge-case values fail: 

Well, the calculator one at least could be simplified since you're always adding/subtracting the same: 

Now, we'll need something to keep track of the inventory levels. We could use a simple for this, but let's go ahead and abstract it out into an class, so that we'll have a place to put some convenience methods. Since we know we'll need to be able to remove an item by name (not caring about the price), we'll need some help to find that entry. We can also add some convenience methods around adding a product. 

Ok, now we have enough to get to refactoring the class. Currently, your class has too many responsibilities - it's showing the menu, tracking the current state, and adding/removing products. We're going to trim that down to just showing the menu and tracking the current state: