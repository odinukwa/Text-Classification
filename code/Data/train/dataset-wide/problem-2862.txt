I created this data structure a while back and it's been in use for a while without error (to my knowledge). I'm currently at the end of phase one of the project so I'm doing some clean-up and wanted to see if there were any ways to improve the structure. CacheStore Structure 

Naming As BKSpurgeon mentioned, your naming is going to make it hard to understand this code in a few months (maybe even weeks). 

You have a lot of places where you have something like and then another location with . Again things like then . It takes a while to get used to it, but readability is greatly improved with consistency. 

These may make sense now but in the future (say 2 weeks from now when you've been deep in another part of your game's code) it might not be so clear why you chose these numbers. So in order to make this code a bit more readable and maintainable I would suggest making them constants (or at least variables depending if they're changed or are calculated). 

The important part of binding is the element and how to check the element's validity. So we're going to have the bind function take both the element's selector and a function it can execute that returns true/false of whether the element is valid or not. Example Usage: 

Functions Make and parameters and turn the contents of your into it's own function so that you may call it again. That'll instantly reduce the code in half. Then you'd just call and . Redundancy Your event is calling code identical to your function. Just call . Parameterizing it in a similar fashion to the above example will allow you to do so. 

Conclusion: There's a lot here, and some of it may not entirely apply in your case, but with a grain of salt (I sound like a broken record) I hope this will help you. 

The way you're using regions implies a lack of inheritance. You could simply pull each section into a separate class and apply inheritance appropriately. Make a navigation class to contain the code inside your navigation region then just add a property to your . I assume there is some code that will apply to all pages in your selenium framework? Navigation and Page initialization for instance. Make a or class that all of those pages inherit from so you can share code between them. Doing this should remove your need for regions. The only time you need regions is if you're using them in place of inheritance or your class is just that big (which is still sometimes due to a lack of inheritance). Testing 

In addition to the already existing answers I thought it be wise to add some things they may indirectly affect your application's performance. What I mean is these suggestions don't necessarily help your performance but they can make it a lot easier to understand and debug your program a lot easier (both you and others). This can allow you to evaluate the performance much easier and faster. Naming doesn't quite tell me anything about what it's purpose is other than determining if the state is 'happy'. Something like or is much more clear in its purpose. Which you already have a variable for so why not use it and subtract the final day before you print (or even after the loop). Hungarian Notation is quite unnecessary additionally you're only using it for two variables. is just as clear in its use and purpose as (as the 's' implies a collection) your functions and classes shouldn't be so long that you need such a naming scheme. Intuitive Try to keep your code as intuitive as possible so that others (or you 6+ months later) can understand it quickly. These suggestions might just be me but I think at the least they can demonstrate what I mean. The goal is to compare the plant to the one at its left. So why not start at the second and go until you've reached the end? Here is some pseudo-code to demonstrate/explain what I mean about intuitive code: 

Just some minor suggestions to add. Double Initialization You're initializing your lists twice. First on declaration, then when you call the function on the next line. Just initialize to the functions. e.g. var (As Disappointed suggested) This is mostly preference but is less keystrokes and simpler as without reducing any information/readability. Naming Typically in C# it is convention to use PascalCasing for class names and members and camelCasing for local variables. Consistency is always helpful. So since you're already calling a(n) 'uids' then why include those ugly underscores? 

I commonly create a method to call this. The only slight caveat to this is if you ever need to change one of the actions calling it (not that common, but it happens sometimes). View So to elaborate on what I said before about making the SortProvider a parameter to the action. 

var keyword: It isn't uncommon to make use of the keyword. Particularly in cases where it is obvious what the variables type is. e.g. this way you don't have to type 'List' twice. 

You do a and when setting the text for all of these similar functions. I'd recommend creating a method extension like this, 

Above the consent checkbox is updated just like in your original code. Then afterward we update each element based on and the validity function of each element. Conclusion This got really long really quick. Anyways, my goal with this was to help you make your code more modular since it appeared to me that it was causing you some possible confusion (based on conversion in the comments of SirPython's answer). So I hope this helps you with that, whether you go with my solution, SirPython's, or your own. JSFiddle: Here The fiddle only has the logic for a simple "is empty" check on the "email" input, but I hope you can see the potential. 

Method Extensions I've found it incredibly useful when dealing with Selenium to create some method extensions to do some common activities for me (instead of having to code the same things over and over again). 

From this line we quickly see "Downloaded Applications Remove all". So does this really add any value to your code? It seems like that comment just adds clutter. Clutter & Variables used only Once You want to reduce your for-loop there's a few things you can do aside from the typical suggestions you're going to find (i.e. Modularize into functions). One of them being reducing the number of declarations you have (if conditions allow). For example, both and are only used once. If you know you are only ever going to use them once in this scope/context just remove the declaration and use the value where needed. Another quick note, I noticed you're declaring , , and towards the top but not using them until the bottom half of the for-loop. Why not just declare them right before you use them? That way it's obvious where they are being used. RuntimeDetails A key place you can reduce the amount of code in your for-loop is your instance of . appears to be getting its data from 3 core places: , , and . 

Formatting. This could have been just because of copy/paste transition, but in case it wasn't, your setInterval area of your code is a painful eye-sore. Try something more attuned to this: 

Final words I noticed you have a for your grid. One thing you could do is make it a jagged array (i.e. an array of arrays) this way you can make each point at its coordinate position (i.e. Point[x][y]) for quick and simplistic access conceptually. That said you have a working solution so unless you're having trouble conceptually keeping track of your current solution I wouldn't change it. I hope that you find this helpful. 

That way it will automatically map to the SortProvider's properties named "SortBy" and "IsDescending". NOTE: This is only possible if the SortProvider has a default constructor (no parameters) otherwise model binding won't know how to instantiate the object.