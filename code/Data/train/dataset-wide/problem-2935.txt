Retrieving an item with means it's an O(1) operation whereas the same done with the original query means that the entire dictionary needs to be searched which means O(n). If you need to return a copy of the server list the you might use linq for it and call on the . There is one more thing about the linq query. You search for the key by ignoring the case. If you have multiple names but with different case then the resulting list will contain items of all those keys. Is this really what you want? The won't stop at the first match. I don't know how you create the dictionary but if you want to ignore the case of the key you should initialize the dictionary appropriately by specifying the key comparer: 

I find this is a cleaner solution becasue it informs me that the is a base class and intended be subclassed becasue on its own it has no use but if it has, then it should be instantiable. 

DIP (Dependency Inversion Principle) The class violates the DIP (Dependency Inversion Principle) and the IoC (Inversion of Control) because it uses the internally directly. You should pass an interface or an abstract class that exposes a method. (The same in other classes that use the ) HandleItems I'm not sure which principle it violates (SRP or LSP) but it's definitely wrong to implement execptional handling for the there. You need to rethink the base class. Why does this one need this property any why do you need to set before sending a notification? Are there more types that might require it? If so then maybe it's a good idea to move it to the base class but be careful about the ISP to not force it for clients that might not need it. If only some clients require the then maybe they should implement some interface like to decouple it from the conrete clients. 

I won't claim the names are perfect (like the could be etc) (or that there is no more room for improvement) because as we all know it's really hard to come up with good names but as soon as you find them, the code is almost self-explaining. So keep up finding good names and you won't have to do it yourself everytime (explain the code). Let the code do it for you. Example output for and delimiter Original: 

It's very intersting to see it done the hard way and I have to study it a little bit more but so far I found a couple of things that I believe should be improved. (They aren't in any particular order.) 

I have rewritten the multiple times and this is its 5-th incarnation. It became a that now works with a so that I don't have to load the entire csv-file in order to parse it. I removed the GOTOs and extracted the new method that now contains the logic. There is also a new helper method that now advances the current position. I tried to create an enumerator for the stream but it does not support an API so I dropped this idea. 

Nested classes Nesting classes is usually a bad idea. I would try to avoid. FTPFileJob You have created this class to group some data about the upload... then you should be consistent are reuse it where appropriate instead of splitting it and passing each property one by one. 

You are not doing dependency injection but using another pattern which is called service locator which isn't by the way so cool becasue classes using it depend on the : 

This of course is creating a lot of objects. You could speed this a little bit up by making a struct but still, it'll be slower then the normal check. Convenience comes often with some kind of a performance hit. 

Yes. V1 will get data only once and V2 everytime. This means that it might be acceptable to let the first property be a property because subsequent calls will be fast and only the first time initialization might take some time (depending on how much data it needs to get). The value it returns is stored in a backing field and it returns the same value everythime. The second solution on the other head clearly behaves like a method because it can return different lists on each call thus I would make V2 a method. 

Your API isn't consitent. Some methods that return a have the suffix whereas others don't. See Does the use of the “Async” suffix in a method name depend on whether the 'async' modifier is used? for more info. 

This is a code smell. The class and the namespace shouldn't have the same names. The namespace should probably by . 

You never want to catch this exception explicitly. 99.999% of the time its occurance means there is a serious bug in your code that can be prevented with proper null checks. 

Why or ? Would you know it it two months? Use constnats like or etc. or create a helper class to store the offsets: 

I think would be a better name. Secondly you might consider it to return instead of just as this method can take some time. With this you could for the result. If you chose to do this, then you also might consider another argument, the in case you decide to no longer wait. 

Using the above class alone would be too difficult so it provides a property to get a new that helps me to build the rules. Rules as well as messages are compiled from s because calling on it will produce the actual expression as a . Because expressions contains a lambda expression I use regex to remove it from the string then I replace each variable with the name of the . 

On its own this is not very useful yet so I have a few extensions for it that help me to create keys which are tuples so that I can use their comparer that compares all properties and not the object reference: 

This constraint should not be there. Instead you should have another extension that calculates the depth of each trim and pass those numbers into another extnsion that works with numbers. This way you would separate the logic for searching from trimming and the trim could be more general. If you have done that, you could have use a single loop from the question you've liked to. When those two concerns are separated you can also test and optimize them separately. Order of trim arguments 

Storing the results in a static field (it actaully should be a property if any) in the same class is not a good idea. The method loding the data should return a collection and you should store the result in your application not in the library. 

Before you start optimizing this block you should move it into a separate method. The clearly indicates that it's a part of something bigger that is doing too much. I find it's pointless to try to optimize this as long as it's a of something else. Currently your method not only calculates the but it also updates a grid-view. This should not be done by the same method because you cannot test whether the totals are calculated correctly. The only way to validate it is to look at the grid. This is very unreliable. Basically it should look like this: you have two worker methods 

I think this is the most inefficient part in your code because the method is a O(n) operation. There are two alternatives for it: either use a s or the extension that 

Example Here's how it could look like and let's with the attribute that will store the query string name of one parameter: 

You have es for everything but this method. If something goes wrong here the application will crash. 

Suggesting alternatives is always a risky review (and usually one gets DV for this) but I'll try it anyway... 

I cannot give you an exact and perfect solution because there are several parts in your code that I do not understand like the and I haven't worked with AD yet but I think I can give you some hints. The class definitely does more then one thing. The most obvious indicator for it is the parameter and the four different initializations at the end. You should split it into those four queries so that each query prepares and maintaines data only for its own use. 

I want to replace it with my own extension that I currently name as throwing two different exceptions. 

If other caches don't support the then you should drop inheritance and change to composition because if there is no common interface the abstract design is pointless and violates the Liskov's Substitution Principle(LSP) that says: 

If you create the array with the names in the right order (like in your excel sheet) you can even reuse them to populate the parameters. Here's the complete example. 

too many hardcoded strings Technically I find it's ok but to my taste there are too many hardcoded strings. I wouldn't say anything if it was just data but since they are property names I don't like them being strings. You could use to replace them with something more dynamic but then the test would not be very readable anymore. 

You shouldn't mix the vocabulary. If you create a then the instance is a and not a although in this case it is technically a notification because it can only send a single message over and over again. If this is the desired behavior then you shouldn't call it an but an . The names need to be clear otherwise the usage of your API is very confusing. 

As you are looking for only one resource the reader won't proceed if there is none so you don't have to check whether it has any rows. You can just return the result after the first one. 

Now you don't need any of the old methods because they now belong to the so you can replace them with a simple method. 

The compare I use here takes two s for each interface method. Factory methods make the creation easier. 

To my taste it's doing way to much. You'd be better off if you implemented the paging logic for a collection without mixing it with console interaction. Write another method that expects a collection, page, page length etc. and do the navigation in another method. If you do this you can test the paging alogorithm without the console and without key input. You'll be also able to test the navigation separately. Even better, your paging method will be reusable. 

I've been creating some NuGet packages recenly and to automate the process I created the following script that: 

I sometimes have to schedule some tasks and wanted to have my own reusable scheduler. Since I like the Rx, I build it on top of it. 

GenerateValueTableFromSequence and the null check In .net we don't usually return for collections. We do this so that we can avoid the null-check. We return empty collections which are safe to work with. So this 

This second line might be killing the performance but even if it's hit only occasionally it's usually a bad practice. is blocking a thread completely. Nothing else can be handled by it during the wait period. You are using s in other places so try to use a here or even better a timer that will trigger a relaunch. 

Anyways, I think creating a few queries that can perform the few different searches you requires would be easier to maintain then a all those filters an parameter objects. 

I've splitted this class into multiple pieces and added a new feature that now allows me to insert into nullable columns. It starts with the to get the 

Writing comparers by either implementing the or the interface is another boring task. I thought why not writing a declarative helper that would generate an expression and automatically implement the comparison logic. The result of this experiment is the class that generates such an expression. It does also special handling for strings that can use other logic. It generates both the and the methods. 

You made an abstract class but this is not necessary. It does not provide any default implementation for anything so an simple interface would be enough. There is however one more issue with it. The method. It doesn't say anything about what is being checked. 

Here you not only take the advantage of the but also of the that does not have to enumerate all entries but stops as soon as at least one is found. To delete the empty directories you can use the extension o a parallel enumeration: 

The issues with this fake enum is that it's a class. You should not name classes as if they were enums. Also valid status for what? Usually any enum value greater then could be valid. 

Your configuration works in a weird way. You throw an exception about not initialized configuration from a method that cannot be called without initializing the configuration first. You don't need the stuff at all. You can only have a configuration that is either loaded from a file or has default values so it's always initialized. 

I wouldn't call this structure a Queue because it isn't one. There is no and it doesn't work like this. It is more an then a queue. 

You abuse inheritance for testing purposes instead of splitting it up in two classes - one for each service. The current solution also violates the Open/Closed Principle. If you wanted to add another service or logic later you couldn't do it without modifying this god-service. Virtual/abstract methods should have some purpose and be overriden in a concrete implementation and not used as workaround for testing. You could improve it by either implementing the decorator pattern or using inheritance correctly. Here are two examples. 

The pretends the loop is doing some heavy work. If it's not then it might not be necessary to spawn/use more threads so after all it might run with only one or two threads. If you don't want to use all cpus you can specify another parameter and limit them with 

Use full names if it's not something obvious and really short like a LINQ query. Single letters are hard to understand. Define your variables as close to their usage as possible.