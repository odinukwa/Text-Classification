I've kept the there because it will speed up your code quite a lot. Speaking in 'speeding up', you are re-running per gif. Just store it into a variable. Like this: 

For some reason, this code seems to look a little like jQuery to me. If you have jQuery, this fits in 1 single line: 

Please, don't do that! Don't set anything on the variable! The points to the object. You can use it by itself or using the dot notation. That variable is the only way to access the current on a . Please, leave it unset. Use or something. 

You don't need the there, since all methods are by default (since, at least, PHP5.3). You should use type hinting. This basically limits the received value to a certain type/class. This is how you should've done it: 

Shows that it still takes 4-5 milliseconds, on Google Chrome (on my pc), while @Kruga's ES6 answer is a lot faster (0.9-2 milliseconds). Here are some improvements I've made, without any regards to keep the programming style integrity: 

As the title says, this batch script installs the XignCode Bypasser. Xigncode is a software bundled with games to analise running programs and prevent cheating. (Sometimes, it prevents the game to load at all on the newest Windows releases.) For this, a bypasser was created that disables this check, allowing players to run the game (if they couldn't), mod the game (One Click Tool, for example) and (if you want) cheat. Copying the files manually is a boring task that can lead to mistakes (copying from the wrong location, deleting the Bypasser by mistake, ....). For that, I've made the following batch script that does all the copying and extraction: 

First, you have that dangling . You are currently wasting too much CPU! You repeated 5 times! You have no idea how slow that is. Store that in a new variable. You could remove repetitions, like this: 

Now you ask: Why? And the answer is because of shortcut evaluation. If is , it won't evaluate , because we know that it will be false as well. This won't save much, but you shave some comparisons. Which is really good! 

Looking very quickly, it seems like a frail code. Still, it works as expected. But I saw a few things to improve: 

What, in the name of the Lord, is going on here? Why are you fetching an object instead of an associative array? What does do? Why is it called ? What is for? What's in it? 

Performance: Performance is quite satisfactory. It takes around 2.5s to search 9-bytes long repetitions, on a 8.58MB string, on my machine, using Google Chrome v47.0.2526.106. Using IE11, it takes over twice the time (around 5.6s)! Screenshots: Google Chrome, IE11. The time it takes is always around the same (with very small variations), which is a good thing. Running this code on a string that is 10% the size will take 10% of the time. That is, for a string that is 0.86MB it will take around 250ms. This is the code used to test: 

Remember that event handlers must do what they have to do as quick as possible! If you can shave off 1ms, shave it! 

hm there are quite a lot of wich don't do anything at all... if there would be a massive exception you would just continue with what you are doing... 

I tried to get a clue if there is a performance leak in the posted code or not so i wrote a litte check Consoleapp for your Problem. (Excluding the Update of the Database off course). It would give me a great pleasure if you would run this "analysis" with your code and post us the results. 

This would make it reusable and readable for other developers, and it reduces comments ;-) Currently you have many of them 

I think this should do what you expected to do. Enqueue all Numbers greater than 20 if no number is in the queue of the thread. Please leave a comment if you wanted to do something else, i would be glad giving you the right examples. 

Hope i could help, please contact me if you have questions about my snippets or if you are interssted in my decisions. I would enjoy learning from you and also would be glad helping you! 

Try assiging values first to a named variable and then concating it, so its sustainable in the future like: 

Remove empty try-catch blocks and replace it with propper checks If in the lower section is null you wouldn't set Selected Property of Row due to the thrown exception before. In my code i want my exceptions to be seen or recorded by the system, so I can fix it. You don't know what else has gone wrong in that Method. Throw speaking exceptions so any user can change his input to fullfill the requirements of the application or can create a new bugtracking issue with the propper information. Try using local Variables instead of calling Properties over and over again. Current you are using 5 times. If the Propertycall takes about 0.5sec you are currently burning 2sec :-) Try redusing it where possible. It also gets more readable. 

i would add a comment which explaines detailed what this regex is suppose to do. So if there is an Problem with the Regex everybody can check if the regex is doing it's job or if there is a problem in the expression. Throw an exception in your constructor, so the errormessage can be cought. Now the error Message is displayed in the frontcode. 

Last but not least: try using "'" for strings, so its more readable and you make less errors by escaping not escaping closing, whatever 

Developed and successfully tested on Mono/OSX As far as i can see, yes there are some points where performance can be gained, but i would be intrested, if this is the real bottleneck. As the others before i believe the huge performance gains can be made in the database update code. But I'm ready to be profen wrong and so I would be verry interested in your performance mesurements! Output Snippet: 

Why does the Methods and return null? Wouldn't it be better to throw an exception, that you can signal that something went terribly wrong? In my opinion returning null is always bad for developers who are using your code, becaus they don't know what went wrong and what to change. At your example you are expecting CallMethodB to return an Object. So if nobody throws an exception everything has just worked fine, use the return value, if it is null let the nullReferenceException occur and enjoy writing well code. Removing Null checks would increase your readability and the reusablility of your code! 

You don't use the variable anywhere, besides in 1 method a few lines below. Instead of all that, you can chain the methods and spare a dangling reference later on. Something like this: 

These comments contain old code. Just remove them! They won't kill you. And that can go away as well, since it isn't useful to make the code work. It may be in debug. But wait! You have this line: 

If you want to support older browsers, this is required. Otherwise, just ignore this, since all modern browsers support it. (Partially or completelly) 

At least I find it easier to read. Way easier! Other than that, it seems pretty much day and night, comparing to the old code. 

Created a few variables at the top, with needed information. Created a loop to go through all the elements Reduced the number of local variable to the bare minimum Removed global variables being declared inside the function 

If you see something innacurate, please tell me. I haven't touched on the remaining functions, but I'm specially worried about the function. 

Since the is a really heavy check, we put it at the very last. Since SQL supports short-circut evaluation, this positioning may result in faster queries. The slowest checks are the last ones. It was really hard to follow if everything is 200% correct, but I hope I've nailed it. Please, comment if you see something innacurate. 

It is a pretty straightforward CSS, without many complications. But, remember that it suffered a rewrite. Replace your CSS with this: 

Just for the fun of it, I was looking of ways to make true-color GIFs. I've started to write the code, and it clicked me: this won't work for that, but it does make a nice color-reduction method. Basically, it works like this: 

There aren't many things wrong. And the code itself is surprisingly short. But this will be a really long review. The first thing that bothers me is that you talk about JSON, but you show an object. That's fine, but you should show how you decode the JSON into that object. But, within the scope of this review, I'll refer to it as an object, which is what was presented. Not to mention that all the links point to s. Now, lets tackle the code! Javascript: The indentation of that object is really off. Not to mention that you have mixed quote styles. 

The first thing I saw when I looked at your code was the obvious disregard to any kind of indentation! It is nearly unreadable! There's no excuse to have a code without any indentation. Throwing the code into any PHP online formatter should suffice. 

Closures are a really nice feature that came with PHP5.3, and they weren't being used to their full potential. Closures have the method , which generates a new Closure binded to that object. This allows to use the variable inside the Closure. It helps the fellow programmers that decide to use this to write in a more natural way. The best part is that there are no kludges needed! The method will look like this: 

Wow, some fine German Overengeneering going on there! You can pass it a string or an array of strings, and a 'screen', where the message will be added.