Observations that suggest, if its put to market, it will fail in use and backlash. It can't be compiled. There are logical errors in the code. Input isn't validated. Data isn't processed in a pathway that ensures a high likelihood of non-corruption. Security aspects aren't in place and data could be exfiltrated/hacked. Key functions can't be guaranteed to work for good reason, or you can show the few you've checked out of all of them, often do not actually work as intended. That sort of thing. Observations suggesting there may well be issues that won't reveal themselves in testing but carry a substantial risk of problems if put to market. Like above, but #1 is stuff you've found, this is evidence that suggests significant non-found issues are to be expected /anticipated/considered a significant risk. For example, if you've fixed edge cases related to misprocessing in some cases of data validation, that suggests other cases may exist and not be known which could lead to loss/corruption of data. If they used known deprecated/dubious approaches to one issue, that suggests they did the same on other issues. If the database is subject to race conditions/non atomic updates in one area, it suggests this could be an issue in the code generally. And if it's multiuser but the server side processing doesn't allow for multiple users' input/processes to collide in subtle ways, that suggests it could fall over under proper loads. Observations suggesting that the original crew deceived management (deliberately or not, or perhaps just by not being forceful and too easily overridden/ignored: it could have been managements fault not theirs!). Right now the previous crew are god's gift to management because they've delivered a shiny product. You are dubious to them because even though its a great product, you aren't happy, can't make it work, don't understand it, etc. But if you have observations that directly contradict things they have stated, then you become the one who knows what's up and the shoe turns against them. Your job then gets easier. For example, if they told management that the project has proper webUI security, and you observe places where they didn't validate input /cross scripting/SQL injection, or management believe the project can handle some significant thing and you can show specifically it can't and never could have done, you can show management they were deceived. Observations that show that, if put into the market, usual follow-through/expectation/service levels will be impractical/unfeasible, or costs will be much more than expected. For example if the code is too poor or lacks debugging aspects, then when a client has an issue, there will be no practical way to bug trace and whatever the issue is, it might take weeks not hours to remedy. If code is repeated then this means changing validation or enhancing data structures can't be done "just in one place". If it's undocumented or poorly structured, then attempts to enhance or improve it will be hampered badly because there will be no practical way to make significant development and be sure things won't break, or else checking for breakage will take so much time as to be uneconomical. If its a bad mess, then once in the market they will depend on you personally each time an issue arises; as you can't guarantee to be there at weekends and 11pm just because of some client deadline hit by a bug, or you might fall under a bus, what will they do? If data can be pushed around but needs excessive manual attention, then in production your support may not be able to scale to provide that, or to guarantee it can be kept simple enough, so processing errors may be higher risk. If it depends on specific platforms and those platforms aren't clearly managed in the code, then changes to platforms (windows updates, browser releases, library versions) might not be feasible in usual or commercial timescales, or fixing whatever they break may be complex, leaving clients unable to maintain or use their platforms as expected. Observations that just annoy you. That's your job. If they don't fall into the above categories, fix them as best you can in spare time. Management's problem is the first 4 items above, not this. 

Sure, you can ask that sort of thing. If you engage them, you'll be working side by side with them - a human being who has a real life - not just with a code producing automaton. You'll be interacting with them as a personality. An interview isn't just to find if they are competent. Its to find out what kind of person they are, what makes them tick, and asking about things sparked by their comments and appearance (provided its done with sensitivity and not offensively) may just give them a chance to talk about things that make them smile, or they care about, or have a genuine chat and relax a bit. You'll see more of them and be better able to assess their "fit", and they may feel more able to be open and comfortable with your company. The only caveat is sensitivity - if it could be related to something sensitive tread carefully and think first - you don't want to be asking questions that might be "triggery" such as related to body/hair shape, race, religion, sexuality, or some other personal areas, so if what you see might lead to those, be careful and think twice. Bit if it's innocuous, sure! 

Comment I almost never advise a litigious approach. But in this case, if it's as bad as you say, and you can cope with doing so, it may be a direction to plan to go. Its worth preparing for "just in case" regardless. It won't be easy, and only you can judge. But 

Carefully avoid anything that could imply you're being perfectionist or doing any more than minimum for market viability. Anything more than the essentials, at this point, just isn't a priority. Prethought solutions and pitch As for a prethought solution, mine would be, extra resources. If they don't believe you, it's all dead anyway (assuming you're right). The software will tank, and you'll be burned by association: look for new work starting now. But if after your presentation, they do believe you, they are worried, or they are looking to you to fix it, this turns to your benefit. Because what you need is a team. Pitch it something like this: "Sorry guys, but 1.5 G of code like this, without basics or documentation, will take a year or so just to understand, maybe 5 years to fix. Maybe a rewrite will be needed and we can save what can be reused, maybe only parts of the GUI, the basic data flow concepts, to not reinvent the wheel, and then redo the back end and everything else." "The first priority as I see it is assessment. I can see it's bad, but how bad, and what's the minimum to make it safe to go production?" [reflects back their top-level concern] "As I see it, we need to know that within 4 to 6 weeks - I'd say 3 weeks but its a major task in its own right and needs line by line review. 4 to 6 weeks with a team of 3, and we'll know how bad the damage is." [If you can't, or its too huge, substitute whatever is sensible instead] "Then, we need to fix it. I can burn the candles figuring what to do, but I need hands on keyboards. Anything from 4 to 6 of them , for up to 6 months." [If relevant, add: "And I need a competent #2 for it. I can't review everything they put in, single handed, if I'm also navigating the issues and fixes as well." ] "Its a pain that it's that severe, but it is what it is, and we need to dig out of the hole first, and do blame and litigation later. For that, give me 2 people for now, and budget for another 2 or 4 in about 4 -6 weeks, and I'll get you it, done right. Or at least minimally workable." [Again, if you can't, or its too huge, substitute whatever is sensible instead] "You might also want to ask [name of a contact they know, who's a director in some suitable IT business] to send someone along for a day, to double check my initial view, approach, and timing, before committing a budget. That'll be good and also reassuring. But if it checks out - and it will - then we need to move fast, and the only thing that'll save our time to market is throwing resources at it fast and heavily." "That would be, in my view, the sensible solution. We cant use it as it is, and we lose more by delay and damage, than we save by paying for contractors or pulling staff off other work." "I'm sorry to bring bad news. The good news is, we can dig out of the hole." "Questions?" 

I agree with others, this is probably your company (and perhaps some others) but not all or even most. You won't get anywhere by "asking nicely". It sounds too entrenched. The board/management will try to endorse it - if not doing it - or at best brush it off, or figure you as a troublemaker, because they don't want to rock the boat on all the people who make the business work. Its a small company so the examples are set from the top, and no surprise to them. If they cared, it would be different already. You will be unhappy or eventually pushed to leave anyway because of this behaviour, one way or another. If you try to persist in that atmosphere, they probably won't pay or promote women equally to men either (that's usually part and parcel of the same sexism described). Other people have been, and will continue to be, hurt by this, even if you don't see it directly.Luckily..... You are in a city, country, and industry, which sees the behaviour as abhorrent, and has strong legislation against workplace sexism/harassment and unfair employee treatment/unfair dismissal/constructive dismissal. You work in a thriving business sector, and also in a city which is an international centre for that sector. 

Pulling the issues you're seeing into a structured form related to their practical business impact, will help you a lot: Think through the issues and evidence that you can find, and group them this way: 

I wouldn't worry about external auditors - they have much more high-level focus than where you bill, and wont worry too much. It's also commonly not "wrong" to do it in a legal sense - after all, billing is a tool of your own company's choosing, which they use to work out what cost it feels its incurred and understate it a little to seem competitive, and if it is, it's on his shoulders not yours. I would focus more on a point that isn't mentioned yet in other answers. In some companies, staff billable hours are important in the sense that the company tracks what someone is bringing in to the business. If you are actually working on client work but billing it as back office or administrative work, or internal projects, it may look like you aren't earning them revenues - which may affect how you are seen. That is, however, your managers choice, as other answers say. So you may need to raise this with him/her in email, and be clear you want to be productive, and revenue producing, and seen as such, and you would like him as your manager to help find a way to ensure the amount of your time not billed to client projects stays reasonable. That is a managers role and a responsible, legitimate, employee concern. 

I would handle both aspects of this, in the same way. I would do this by email (puts it in writing, removes deniability and any claim that you his anything...) "As you know, I am not security qualified, and security needs to be done properly. While I would do my best, I need to emphasise that in my view, I am not the right person to do this specific task, as it needs very specific qualifications and/or proven experiences. Frankly I think Im the wrong person for this. Please reconsider carefully if I am the person you want to task with this. That said, as you know I try to do all I can, so if you do want me to do this, despite my concerns, please could you explain how exactly you want me to go about it, given my inexperience." If you want to."lay it on thick", end the last sentence with: "... so the client still gets the high standard expected , and is not at risk of being affected due to the above." Not only does this make clear you are being professionally concerned and amicable to any reasonable solution/direction, it also puts it in writing, which means its a lot harder to pretend they didn't know, or ignore it. Having it in writing can be a good, if innocuous, motive to a company, to reconsider a possibly damaging decision and ask themselves "what if it comes back to bite us" 

Try this absolutely honest answer: "I don't know the exact reasons, but I'm not able to book a technician before [date]. I'm really sorry about that. Would you like me to book you the first appointment I have after that?" Short simple and honest. 

The main issue is balancing 1+2. But as you have to live with your career and decisions/consequences for life, while other people only have to live with your choices for a limited amount of time, your primary responsibility is 1 not 2. Try to keep others happy, but unless there is a real issue caused by that working speed - tell them it's not about them, or about "looking good", it's that you love your work and want to carry on loving it! If needed, explain that you understand their position but you hope they will understand you want this, and try to smooth over things. You could also tell your manager the concern, if it continues or you feel it is leading to hostility. 

Not something to share. For one thing, suppose you inadvertantly get it wrong, or he gets the wrong idea. Now its a problem for you as well. 

I'm not usually one to suggest "going formal" but given the city and industry, and the apparent issue that nobody in the business will care if you are distressed by this business-wide problem (even if the overt behaviour became bearable I suspect they won't treat you fairly), that's what I would suggest here. It will have a chance of improving things, though it may not be easy on you either. My impressions from the question Before details, this is my impression from the question, which guide my view on it. 

Even if you don't go to a tribunal eventually, this has the best chance of causing change. It sounds like you might be in a situation where this is appropriate to gear up for. 

To start with, its important to summarise lifeguarding basics. Lifeguarding is about saving life. It requires intense concentration without a break - the 10:20 system is common, and a good example, requiring a lifeguard to scan the place looking for that one possible person silently in trouble, once every 10 seconds, for long periods of time, continually. That is why these breaks are crucial. Not just because of employment law, but because visitors lives depend on intense constant focus, and few people can focus that way for more than a short time without a break. As other answers say, go to the line manager or HR. If they won't listen, then you may want to consider if your responsibilities lie with the employer or the visitors.