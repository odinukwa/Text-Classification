Configure the switch so it is not accessible from the public-facing network, and ideally from a specific management LAN connection. Then connect using a VPN - configure it to use certificate authentication in addition to your logon. If you absolutely cannot do this, configure the firewall between this switch and the internet to only accept management connections from your IP address. This isn't perfect security, but it limits visibility of the logon screen so will increase security. 

You should plan to use a variety of companies or rotate them. I tend to encourage people to use a panel of 4 or more, as each has their spacialisations and specific experience. You will never be secure, but you can get 'secure enough' based on the risk profile your company wishes to accept. Don't assume that because you are small that you are not a target - current organised crime structures sell on exploit methodologies from successful large organisation hacks downwards, and if you are on the Internet you are a target whether you like it or not. Various questions over on security.stackexchange.com have covered this question so it is worth having a look over there. 

Of course psexec is no longer an external tool - SysInternals is now part of Microsoft (since 2006, I believe) From Mark Russinovitch: 

The fact you are using IIS is irrelevant - you just have a memory hungry config, so want a big chunk of RAM. Your best bet is to pop over to somewhere like crucial.com, and input your server type - it will then spit out various memory options which are compatible with your server and you can pick and choose your price point. The problem is that pricing varies dramatically so any single answer here will be dated far too rapidly for it to be useful. 

It is a control that could have been added by the admins on that server - concurrent logins (except where this expected) are a simple flag to alert of possible malicious behaviour. However, it is not something we see that often, and very rarely at system level - this is usually an application based control - so I would be more inclined to think that somewhere along the line something has just got broken, whether this is a password expiry, account disabling for some other reason, incorrect keypairs being used, or even configuration settings being set up incorrectly when your friend did that. There are a lot of good reasons to avoid sharing accounts, and not just for the sysadmins - you might need to go through the history file on your friend's machine to see exactly what happened at his end. 

Locking down by IP will help reduce the risk, but if the service is critical and you must strongly authenticate the two servers to each other you could also look at setting up an SSL/TLS tunnel between the two machines, authenticated by a certificate. 

I can see one major flaw with this - all an attacker has to do is hijack one communication and the app will then only talk to their computer. Realistically, it wouldn't be too hard to watch the traffic to see what would be required. Of course you could use encryption using a public/private key pair to avoid this issue, then you are authenticating - which seems like a much better idea. 

Under most VM platforms you can do something very close to what you describe. Have Win XP, Linux and Win7 as VMs. Treat the Win7 VM as a normal PC. Log in and out of it as you like and have it maximised on your screen. Not exactly what you have asked for, but it will look exactly like what you want. I have used VMWare and VirtualBox like this and the docs imply the others will work similarly. Same as all platforms you want to run multiple VMs on, go for large memory and fast CPU, more is better here. 

The the way TrueCrypt and similar full disk encryption applications work hides the encryption layer from the operating system/applications etc. There is a slight performance hit, as every disk access requires an encrypt or decrypt, but for a low load application it will just work. The slight caveat would be around unattended reboots - I am guessing you only use this server when you are on site, but if you needed to use it remotely, and a power cut had caused it to power down, you would need a physical presence to get it started up again. 

Vulnerability scans suffer from a couple of problems: false positives and false negatives. Which is why you always need to check the results, and why there is a thriving industry in proper penetration testing, in addition to vulnerability scanning. Generally, MBSA is pretty good at sorting out dependencies, so perhaps you have parts of .NET installed as part of one of your applications. 

We have a pretty canonical answer on this on Security Stack Exchange. So much so that it led to one of our top blog posts of all time: $URL$ That post includes a range of actions including degaussing, destruction, manual disassembly, disintegration, incineration, pulverizing, shredding, melting, Electrical scrambling and my favourite: Wanton Destruction In reality though, the simplest option with an SSD is to have the entire device as an encrypted volume and when you want it wiped just lose the key. At that point it is effectively random data. 

It is a trade-off, as @MartinVejmelka says. The reason you use key based auth is that the key is so far above current or near future brute forcing that you need to be either coming from your own PC, or have the key on a USB stick or similar. A password has the following issues: 

As long as you provide your devices with individual IP addresses this is a standard setup. If by static IP you mean your public IP, then you need to use NAT to allow your internal devices to communicate (your ISP modem should offer NAT as standard) If you mean your server has a static IP internally, you also need to provide your other devices with IP addresses that do not conflict. Are you trying to use the same IP for server and router? 

As someone who has managed many hundreds of penetration tests for organisations in the Fortune and FTSE 100 as well as very small local companies I have the following for you: Broadly speaking you are doing the right thing with regards pen testing in terms of using well known external companies to see what they can get access to, however the most appropriate way to do this is: 

Publishing configurations can help an attacker a little - in that it reduces the time they would usually spend in scanning/information gathering, but if you are a target then they would be carrying out these tasks anyway. Having directory or server names that indicate their function also speeds up an attack (eg FinanceServer01) so you are better off having a naming convention which doesn't give away free info like this. Realistically, if it makes your life easier to publish the config, then do so, but remove unnecessary info (passwords, certs, keys, hostnames) - focus your security efforts instead on making sure your patches are current, your config secures you against attack, and you monitor your most sensitive data (if appropriate) for intrusion.