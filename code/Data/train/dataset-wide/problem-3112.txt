This filter takes 1 parameter, to indicate if there's or not caching, and returns the minified CSS when applicable. An example of it's usage: 

With the maximum compression, you can reduce the number of colors up to 60%. Sadly, the images are all heavy-weight PNG files, and from level 5 onwards, they start to look funky. Still, it is an interesting concept, in my opinion. 

This review will be entirely focused on your class. There's quite a lot to improve. Let's analize by method: __construct() Lets check the first victim: 

To avoid 'poisoning' the object, I only created 2 variables and use one of them as an (The other is just to save if we are running in Javascript or PHP). Was this a good decision? What else can I improve on my code? 

It isn't the prettiest thing on Earth, but may work for you. To call it, you don't have to change anything! Just remove that on . With some bitwise operations, you can cut down this code by a lot! 

They don't vary much, and their differences aren't that big. It's up to you to decide which one you like the most. It is easy to make a 3rd version to allow array-like objects to be passed as the 2nd parameter. I hope this helps you. 

While looking at the code, the first thing that poped on me was the indentation. It is too strict, too inflexible, context-less, width-less... It isn't a good indentation. Right in the middle of your code, you have this: 

This can and should be written as vanilla Javascript. The use of jQuery isn't justifiable here but that is an exercise for the O.P. to try. 

This has the side-effect of changing the array! To combat this, you can make a shallow copy using the method. 

Pick one and stick with it. Inline styles While not entirelly bad, you are repeating them. You could just write a tag with the CSS styles. Or add it to your CSS file. Imagine that you want to change that padding to . As-is, you have to replace manually. With CSS, you don't have to worry. Inconsistent positioning of your s. You have them in a newline and right after an element. You should choose one. My preference is keeping them in a newline. It helps a lot to read the code. 

I had this idea of trying to re-implement the function in a way that could potentially be faster than the native function. With some testing, I've doodled the following function in less than 1 hour: 

So, no matter what you do, it will toggle the class? Why have this whole condition? Eliminating most of the code: 

I'm really sorry if I said something that might not fit at 100%. I'm not 100% confortable with C. But I hope I've helped you. 

I'll end the Javascript review here, since it is already too lengthy. Notice that I didn't made any attempt on making the changes incremental. I took right from the original code and showed you with the changes. All these changes are left as an exercise to the O.P.. 

Something to consider is that you are navigating to a page that triggers the error 404 I would recommend adding to the URL, being it now , which will be registered as a real attempt to get a 404 page. Or you could look for alternative method like creating an empty with your code there or a popup. 

This would speed-up your code by a very small bit, but it is important to notice. And to squeeze a tiny bit of performance, you can change: 

Besides this line being repeated, it also has the number of rounds to run. You should create a constant for that, at the top. 

The on the same line is target of discussion. In my opinion, it should be in a line on it's own but most people prefer this way. Other things like this: 

Your method seems kinda shady, and your class does way too many things: connect to the database, deal with articles, suppliers and whatnot. And if I do anything, a new PDO is created? Instead of: 

There's not much to say on this one. Using the handler, you can take advantage of it by picking a common parent node. Then you set the 2nd argument to have a selector. Like this: 

Yesterday and today I've made a very basic syntax highlight. It creates a function in the object that handles part of the job: 

This helps the code to be more readable and reduces the nesting level. Too many chained s and loops will cause your code to be hard to read. 

Usability is really easy: Simply pass multiple s as arguments. In PHP, it is required to be an with only numeric keys. This is due to the limitations of Javascript. Example of usage: 

Another way to improve the performance is to use and instead of , but the difference is neglectible. This final version, using the do...while loop takes exactly the same time as @Kruga's ES6 answer. 

And with this, I conclude my review. As I said before: the code is hard to read, follow and is very brittle. Object handling is it's weakness. 

logOut() Oh, so, it requires that you run this function to store the last login date? What if I close my tab/browser and walk away, like how many users do since ever? This will be storing defective information. To combat this, you can create a field with the old value of the login, before you login. This way, the value will be always present. And that is the value you use to display. And please, use local variables! 

I've decided to stick with the first option since it is easier to use. Some may disagree and prefer the second option due to separation of tasks and avoid surprises if they forget the 2nd parameter. 

While fiddling around, I've made a very simple and naive function to retrieve any repeated sub-string within a certain string. 

As far as I know, it is working as it should, returning when expected. Is there anything else I can improve on this code, regarding performance or readability? Or even a better way to do this, without that pesky ? 

This goes a step further and also deletes any tab or any other whitespace after and before a newline. An input like: 

Huh? The function is preparing to type the text? And only works for this example? Well, let me re-write this for you. 

I'm not accessing the property directly because it may decrease performance. Accessing a local variable is always faster than a property in an array/object. Also, since starts in 0 and your elements' id starts in 1, I had to add 1 to , to match the right element. Using an array, you also don't need to re-re-re-repeat everytime you need to add a point: just add a new element inside the array .