Language: Python 2.7.13, Robot Framework 3.0.2 (Python 2.7.13 on win32) Dependencies: BuiltIn Library, ExtendedSelenium2Library 

This methodology seems very inefficient to me. By the end of the program, I've looped through my list of keywords once statically and around 4 or 5 for every iteration of the loop itself. This is why I'm looking for algorithm suggestions. In addition, I'd like to get away from using to delineate lines, but unless I figure out how the compiler takes Robot Framework's code and says "this is what it equates to in Python", that probably won't be happening. Here's my code as it currently stands: 

Update I should clarify that I don't have XAMPP/WAMP or even individual Apache or PHP on Windows outside of WSL; I aim to have only 1 LAMP stack in my Windows, inside WSL. Besides having a fully functional WSL LAMP stack on Windows, the end state is to be able to access it from in any Windows browser so I could easily test the sites and access PHPmyadmin locally. Also, anyone is more than welcome to contribute directly in Github 

I found myself another way which is personal and comfortable (I don't recommend any company with customers to use this way in the form I'll describe below): SSH tunneling through port 80 to port 80 via Putty/OpenSSH, and use PMA securely and temporarily for 2 hours in a session (It is extremely unlikely that anyone could BFA PMA with a decent varied password in just 2 hours). Each time I want to use PMA I run this code: 

After a significant amount of optimization, I got it... mostly. The main looping variable for the While Loop is still clunky (still working through BuiltIn's method of accessing Robot Framework-style variables), but it's about 1/6 as long as the original with the same functionality, and runs significantly faster with less overhead. I'm now working on nesting the While loops. 

Given one of the main highlights of Robot Framework is readability, I'll show my suggestions to improve that first and then go into my mechanical suggestions. First, good readability practice in Robot Framework is to line up your cells by tabs (or sets of four characters depending on your IDE) and capitalize each word of your keyword uses. So, your code as sent would look like this. 

Changing the PMA path to something unintuitive and likely uncomfortable (instead of ). Using a permanent IP (what if you're traveling between countries)? Login through a recognized VPN. What if you don't have a free time to seriously learn VPN basics in some era of your life? Loging with some kind of authentication certificate. What if don't have one? Using mod_security for Apache users. What if you don't use Apache? Using a captcha. What if you login frequently? This might be a bit annoying. Future PMA versions starting from V 4.8.0 are planned to include support for IPSs like , via uthentication logging. Future PMA versions starting from V 4.8.0 are also planned to include 2factorAuthentication. 

I'm not trying to be too critical of your variable naming but I do have to be for completionism and for other future Robot Framework users looking for how to write readable code. Because (it appears) that you're using the Python version of Robot Framework, I'd say it's good practice to keep to the Python convention of naming variables, which is for local variables or for global variables and index variables in loops. Also, shorter, more descriptive variable names are perfectly acceptable for this size of program. Re-written for that, your variables should be , , , , , and . Mechanically, I'm assuming it works fine as-written, but there's a few optimization problems. First, having a custom keyword for a single action is usually redundant (unless you want to simplify a repeated action with a lot of parameters to a single word for readability), so you could re-write your For loop as follows (using the re-formatted variables): 

I use a Ubuntu 16.04 Nginx server environment with phpmyadmin (PMA). All my ports are closed besides 22, 25, 80, 443, 9000 (for PHP-FPM). A common criticism of the good software (PMA) as of 2018, is that it doesn't have good defense from Brute Force Attacks (BFAs). There are different common ways to cope with this and I admit I dislike all of them: 

I run it this way , or with a Bash alias . Note: stands for document root, which is in my case and defined in . I'd like to know what you think of the code I've written (especially, do you see any way to shorten it)?. 

A common feature of basic loops is the functionality, allowing the user to specify break points for their loop to stop. I've been creating a keyword to enable nesting loops in Robot Framework. This Nestable For Loop for Robot Framework includes the functionality. The basic code for a nestable Robot Framework For Loop is located here. This is a strict upgrade, in that it includes the functionality in the form of the keyword . requires a single argument: a Boolean expression written in a string. includes two methods to work with this kind of expression: and . returns True if the expression is a Boolean string (including unsupported Boolean expressions), and returns if the expression would logically evaluate to . Because the nature of this code is to be nestable, I need it to be as fast and efficient as possible, so I'm looking for performance and algorithm-based suggestions. 

The following code is aimed to establish a WSL based LAMP environment. This is instead XAMPP or WAMPP based LAMP environment which doesn't allow Bash. The script includes a cat heredocument called "AWSM" (Apache Webapp Substrate Maker) that is used to make an Apache conf file for the app, as well as a mySQL user and DB with the same name (you can then run it with your domain as an argument (for example, the domain of the actual site your run in WSL as a test version): 

That makes the keyword unnecessary, making your code easier to maintain. Finally, as another good practice, Selenium2Library is outdated. You'll need to download it separately, but ExtendedSelenium2Library is more robust, contains more keywords, and includes code to deal with Angular applications. The final code after formatting and optimization looks like this (I also took some liberties on comments that are either unnecessary or too wordy for what they describe): 

I don't currently have the code available to me, so I don't feel comfortable investigating the dictionary or sub-functions, but that's the result of the small optimizations suggested. It already looks much cleaner and shorter, at least on the bottom half. EDIT: After more editing, I've transferred everything over to an array-style implementation, further shortened some of the logic, and divided the code into sub-methods. Still interested in any further optimization suggestions anyone might have. 

Please review the following Bash script that uses to establish a "lightweight" Ubuntu-Nginx server environment mainly aimed to run small WordPress sites (about 5 plugins, about 25 webpages, about 25 images) on a cloud hosting platform. The heredocument sets aliases for personal scripts I already have and might use me later on. 

I've created the following Nix cron for daily and weekly scripts for a minimal Nginx server environment (as part of my larger script). The daily cronjob updates WordPress and brings back original permissions (that are changed by WordPress in its update). The weekly task clears accumilated WordPress cache, make local backups, and delete old backups. I wonder where this script could be shortened. 

I'm implementing things in Robot Framework that it does not support by default, including nestable For Loops and, now, While Loops. I'm looking for readability, algorithm, methodology, and/or performance suggestions. The While Loop is not as advanced as the For loop is yet. I'm eventually looking to implement nesting the While Loop and breaking it on a command, but at present it will take any Robot Framework variable (assuming it's an integer) and loop until it reaches the specified breaking point. The custom keyword Increment plays the part of a line of internal code incrementing the value by a specified number. At present, Increment only supports and with any integer, but I can easily make it support and for more advanced increments. The following code works, but as (still) a relative novice in Python I don't know all the tricks that could be used to optimize this loop structure and logic. The general idea, for those who have not read my other two RobotNest posts, is to allow the user to write nestable For and While loops in Robot Framework. My basic methodology is as follows: