The include is simply my own custom OpenGL function loader, which is too long to include in this question. It can be found here. I'd (preferably) like to know a few things: 

This also eliminates the need to call . In addition, the namespace provides a class which can be used over the default . Unlike , is a static class doesn't need to be instantiated, and you can just call like this: 

First off, the code inside should be indented for readability. Secondly, don't create a function as an instance attribute using , but rather, do . Why are you setting all the attributes of to and then ing them? It'd be much more simple just to do . Finally, according to this MDN page, the operator has nothing to do with freeing memory. 

Why do some of your classes have an inline comment, , and then a docstring describing the exact same thing? Here's an example of that: 

The reason this is better named is because the represents exactly that - a selection. You also refer to variables/parameters/fields of the type as selections across your code as well. Other than those two suggestions, most of the good points were made in @MatMug's excellent answer to your previous Rock Paper Scissors question. 

There are a few things wrong with doing something like this. What if the user enters something like , , or ? The best way to do this would be to remove all non-alphanumeric characters, and lower the string like this: 

Your code is actually pretty good! I do a few suggestions for general improvement, specifically regarding PEP8 and such. 

But, that's not all. Next you're going to have to change all and references in to and . Now is no longer a static method, and you will be able to run it from any instance of . Pimgd already touched on this a bit, but you should probably change your private fields to public fields and remove the extraneous setters. In something as trivial as this, getters and setters aren't really needed. When you have larger code that requires more logic for getting and setting fields, then use getters and setters. Finally, I have just a few nitpicks to cover: 

I'm currently working on reincarnation of the Cactus project, Cactus Reborn, and I've gotten the basic implementation so far. At this point, you can create simple, playable games. There are currently three usable classes/functions: 

This was a small thing that I noticed. Rather than having two separate experience modification functions, and two different health modification functions, I could simply provide two possible function overloads. This means that the public portion of the class would have these signatures instead: 

With an empty clause, any error that occurs in the block will be caught by the clause. This includes errors that aren't intended to be caught, like a , where something goes wrong internally. The proper way to specify what error you want to catch would be to write your clause like this: 

There are also three commands that are used. , , and . Each command argument is double colon, , separated, and look something like the following: 

I noticed from looking at your code, that you only use the function from the module/library. Rather than importing the entire module, you can just do . In your block at the very end of your function, you have a after you raise an exception. Raising an exception will exit the program, so this can be removed entirely. You also mention in a comment by the block, that this will never happen. If it never happens, then why do you need it? It can be removed as well. I did find something odd about this function. Underneath the comment you have an expression that's evaluated, but you don't return the value of the expression. Preferably, this line should be changed to . Finally, using to find the new appropriate indices is really the only good option, right now. You can always do , but that's horridly unclear. Just stick with . 

It's generally considered to be better to use plain / values in loops rather than what you've done here: 

Do note the use of as well. Using for string formatting in any version of Python after 2.6 is deprecated, and should be used instead. Here's an example of how is used: 

Should be docstrings, not regular inline comments. Rather than ing your program in a not so clean way, from the function, you should just replace any s, like this: 

I've always been bothered by the fact that there weren't any built-in functions that could replace multiple substrings of a string in Python, so I created this function. Essentially, you supply it with a string, a dictionary of keys (substrings) and values (replacements), and then a few additional options. 

That's about all I have. If there's anything else you might want me to cover, just mention it in the comments, and I'll see what I can do. Hope this helps! 

Variable and argument names should be in , not or . If the variable is constant, it should be in . Method names should also be in . You should have two blank lines between each method, rather than one or none. 

This is pretty good, but there are a few things that needed to be improved. Here are a few of those things, specifically regarding your, odd, design. 

Is there anything that can be improved here? This post is part one of a series based off of the contents of this GitHub repository 

When you want to perform type checking in Python, it's typically accepted that you don't use the function. Rather, you should use the function, like this: 

Variables/function arguments should be in , and constant variables should be in . Functions should be in as well. Classes should be in . 

Nitpicks There is no need to convert the result of to a using the function. Rather, you can do something like this: 

If you really think that the extra clarity is needed, you can always drop a few inline comments () above them. 

Yes, your code is correct, although I would recommend adding comments, and following the style guidelines of PEP8. Here are a few tips I have. 

Input validation I know you're probably aware of input validation, and even though this is a trivial program, it's still good to have. This means that this block of code: 

Nitpicks/Style Python has an official style guide, PEP8. I'd highly recommend that you read it, as it has some very valuable information. You do have a few style violations though, so here's a small list of them: 

How does it work? Each "project" written with this has a specific file structure that looks like the below. A file structure like this is required in order for the source control to work. 

This will add quite a bit of clarity to the user of your program. Instead of the program just crashing, it will give them a useful message, telling them what went wrong. 

You have a ton of code in your function, making it lengthy and hard to read. I'd also recommend using an object with string values as keys, like the below, rather than creating large chains of // statements. 

Proper input validation There are also many places where you get user input, and then validate it, like this: 

The first value of each list is the diameter of the circles, and the rest are positions. The nice thing about this is that it's easily expandable, rather than having to add a new or statement each time you want to add a "side". In addition, thanks to the tips from @Jonah, I'd also recommend the following things: 

After making all these changes, plus a few more, I ended up with the following, improved (hopefully) code: 

Finally, add some comments to this code. You don't need comments everywhere, but you should add some in places where your code may be slightly harder to understand just by reading it. 

First off, you need space between operators. You need to have one space before an operator, and after it. For example, and equals comparison would look like this: , or a variable declaration: Secondly, you have a lot of extra, unneeded blank lines. These can be removed, as it makes code look inconsistent, and not so great. You're mixing to curly brace styles, choose one, or the other. Don't mix the two styles, as, again, it will look inconsistent. Finally, on style, you have a lot of extra spaces. Remove these. 

That's about all I can come up with. If there's anything else that you want me to cover, just mention it in the comments, and I'll see what I can do. Hope this helps! 

By using a context manager, resources will be properly freed even if your program crashes or unexpectedly exits. 

First off, if you want reusability, turn this into a function. The function should have it's respective arguments. Secondly, instead of allocating a variable to store all of the JSON data to write, I'd recommend directly writing the contents of each of the files directly to the merged file. This will help prevent issues with memory. Finally, I just have a few nitpicky tips on your variable naming. Preferably, should have a name more along the lines of , and you shouldn't be using as an iterator variable. Something like would be better. 

Style Python has an official style guide, PEP8. You have many style violations in your code. Here are a few of those violations. 

You're inconsistent with how you place your curly braces, . The general style for Java is to place opening curly braces, , on the same line, like this: 

If this is intended to be a Python utility that can be imported with , then you don't need the following shebang line: 

Style You're a little inconsistent about how you're placing your s. Sometimes, you place them like this: 

There are many more bad things that could happen, but you get the idea. Don't do it. ;) If you do need to catch multiple exceptions rather than just one, you can write your clause like this: 

To me, they just seem a little unnecessary. In fact, writing out the expression or takes the exact same amount of keystrokes as writing or . Next, I'd highly recommend that you get into the habit of using Match Expressions rather than plain old statements, as it's more functional, and will give you more benefits, like Pattern matching, over statements. This means that this small chunk of statements: 

This will also mean that the variables and will have the default values of and in the Unity Editor as well. In addition, in your class, you also don't need to initialize in as well. 

First off, the general naming style in Python is for functions and variables, and for classes. On the note of style, you should also have two blank lines between top-level functions/classes/code blocks. Secondly, are you sure that you want to be using , rather than , as you did here: ? The function "counts" the objects in the list starting at , not , which means if you're using it to get indexes, it'll be off by one. Other than that, there's not much else that really needs to be improved here! Good job! 

To start off, is a bad way of "pausing" for user input. First off, there's a decently sized overhead just to execute a shell command, and doing this is rather insecure. If you really need to pause on user input, and ignore it, then just do something like this: 

First off, to answer your question, I think making classes for each view would be much better in this situation. The current way you're doing this with all these functions is cumbersome. Secondly, you have some style issues regarding PEP8, the official style guide for Python. Here's a list of some of those issues. 

Using this, you can do stuff like , and drop the un-needed parentheses. Finally, you have a few, not so great variable names. A few include and . Names like these should be expanded for clarity and readability. 

I'm not really sure what you're asking here, but if you're trying to go for an Object-Oriented approach here, you should be doing it like this: 

Finally, your other loop can be shortened to a generator expression as well. For more on generator expressions, see PEP0289. 

The function in your class should be changed to a magic method, in this case, . Here's how you could do that: 

Remove nasty comments. For example, your "block separator comments", are completely, and utterly useless. Remove them. Another thing would be to not create "title comments", . Comments should be helpful, many of yours are not. Again, another tip on comments. Many of your comments describe things that are already obvious from looking at the code. For example, you have a comment that says this: . It's clear that once the block works, that the loop is exited. Obvious comments like these can be removed. Variables and functions should be named in the style of , and classes should be in the style of . If a variable is constant, it should be . You need better variable names. For example, , or are completely unclear as to what their purposes are. Variable names should be long, but not too long, and as descriptive as possible. You also have many other places where you could do renaming, , and are just a few examples. When getting user input, instead of making the user enter everything in lowercase, lower the text using . Here's an example: . At the beginning of your code, you print the same character many times. Instead of repeating this character over and over again in your string, use string multiplication. For example, if I wanted to print 50 spaces, I would do . Why on Earth are you using ? Just use to print something. is unnecessary. Rather than checking if something equals false, as you're doing on this line: , you can just do . Finally, you have many PEP8 errors. There are way too many to list in one answer, so I'm going to link the style guide instead, and you can read through it. You can find PEP8 here. 

Any program error that you don't want to catch will go un-noticed . This is not good. You should be doing something like this instead: 

I'd like some suggestions for improvement. I especially don't like how I have to allocate a private variable as well, so if there are any suggestions for improvement there, I'd like some. 

It's hard to write function definitions with that many arguments in Python, and as far as I can tell, there's no real "correct" way of writing these. I usually just write them out like this: 

While the following issues aren't necessarily style-related, they're still good things to consider for writing clean quality code. 

Using this method, there's no need to call on the file, and the file is closed explicitly, so you don't need to worry about memory issues. I notice that you repeat the a lot. Preferably, when you have repetition like this in your code, you can shorten it into a function. In this case, I'd create the following function: 

Is extraneous and can be removed. In order to change your code to allow for the use of the exponentiation operator, you need to change the following code: 

First off, if you want re-usability, you should probably encapsulate this into a function with it's specific arguments. Also, the general style for naming is for functions and variables, and for classes. You also have some other style issues. For example, should be changed to . You also have various other style violations as well. To correct these, see PEP8, Python's official style guide. You have an // block with many s. 

Style Python has on official style guide, and you're violating many of these guidelines. According to this online checker, you have about 50 violations. Since there are too many issues to list here, here's a small list of some of the more important violations. 

I also noticed that you're mixing the use of single quotes, , and double quotes, . While this isn't a huge deal, I'd recommend choosing one or the other, and sticking with it. 

For now, that's all I can really suggest. If there's anything else that you want me to cover, just mention it in the comments, I'll see if I can cover it. I hope this helps! 

These comments aren't needed because your code is self-documenting. Just by looking at the code, I can tell exactly what it's doing. If you really want to use documentation comments, then you need to add are more useful description than "Set enabled", "Get content", or "Get title", and describe the arguments too, rather than just listing them. 

Unlike simply doing a comparison with the function, will return if the value you're checking inherits from the type you're checking the value against as well as simply returning true if the value and type match. If you don't want the additional behaviour of the function, then stick with . But, type checking really isn't something you should be doing in Python anyways. If the user passes the wrong type, simply let the function throw an error. Don't bother trying to check the type. If you truly want to give your user an indication of what types should be passed, you can use function annotations, like this: