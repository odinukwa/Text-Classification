There is no easy or short way to achieve this as for each side/direction, the side values are not consistent in the same order (Not sure if I'm making myself clear.. :D). The only possible solution I seem to find is following: Create a method to initialise the dictionary. It takes two parameters: and 

Solution for the Repeater - ItemTemplate Here's a solution that works when your data resides in an ASP.NET Repeater control. Following is a sample markup: 

You should leave the cast to a byte away. I'm no expert at enumerations so I went looking on the internet a bit and I think I found a solution. Also, I replaced the second with when adding it to the list. No need for doing the same things twice. 

Edit: I found that in your original code in the method, when making the recursive call, you don't make use of the extension-call: 

Asking for input Now that we have valiadtion on the input, we need to keep asking the user until the input is correct. We need a loop-mechanism for this: the is very useful here: 

Now you only have one loop over the collection, which will increase performance, certainly over a bigger collection. This must be applied in both methods. 

Stored url and data As of now, your code doesn't allow the same url twice in a row; it'll just return the stored data. This raises 2 questions/issues with me: 

I could also have used the method and positive comparison instead of . But this is inefficient as all elements have to be checked against the condition whereas will return as soon as an element satisfies the condition (like in your loop). You can take the comparison code and throw it in an extension method for reusability. It also makes your method-code cleaner, for example: 

Anyone may correct me if I'm wrong but honestly: I don't think so. (Offtopic) This can be rewritten: 

Naming conventions: You should follow the C# design guidelines and use for public members, class names and methods. is for private members. Give your members and methods meaningful names. Names like or don't mean anything, except for you. Try using and instead. Method names should indicate what they do and/or return. So a method name like is bad practice. What are you getting from the database? Instead, use , or . Try to be specific, only use general names like the last example if there's no other way. This also applies to the other methods, use or instead of . (same for ) String.Format: Don't concatenate all sorts of variables with string constants. Use the String.Format method. Place the format and add your values as arguments. This results in cleaner code that is easier to read and maintain. Example, change this: 

You could create a new class in which you define all sorts of methods like these to process a result and return it to the view-file where you will show it on the screen. Hope this clarifies it. :) 

Now when the remaining lifetime is greater than 0, your rover can happily move and will die when you keep subtracting the changes from its remaining lifetime. This gets me to another error in the logic. This is the formula you use to calculate the number to subtract from the lifetime: 

This makes that you have to check for different situations and so your if-statement cannot really be shortened to one statement. What you also can do is loop over the fields and do a count of the empty fields and validate this: 

Tip: new Constraint (C# Reference) I cannot reproduce your code and therefore cannot test the method. Please let me know if you got it to work using this method. Hope this helps! 

Who cares if it's not selected already? Doesn't hurt anything to set it to false again, plus now it's even more clear that each method is an unnecessary wrapper. Midi Class 

Again, maybe just personal preference, but I find this approach a bit easier to see how the hierarchy is being built up. 

Instrument Class Why not make this class an enum? By declaring the display Strings and key values as static variables in your class, it's already constant. For example: 

Your MVC usage is a bit skewed. We have the GUI class (clearly the View), MusicInfo (Unnecessary model that the View uses, but is also passed to Midi?), Midi (Controller, but is also directly accessing MusicInfo which should be internal to the View), Instrument (A model) and BeatBoxConstants (More on this later...). In the MVC pattern what is supposed to happen is this: 

Midi class. If Midi is no longer to be sharing the MusicInfo object (since it doesn't exist anymore!), it needs to know when to update the track, and what to update it to. One option (there are probably better ways) is to expose a method such as: 

Private initializers. I try to not use them if possible, but I do understand that they have a place. When code is short and simple (like this project), then I find it much easier to read if all of the UI components are setup directly in the constructor. I've found that it's easier to understand what is all happening and build a proper UI hierarchy when they're setup sequentially. A little documentation of what is being setup can go a long way as well. Plus, any variables that need to be accessed elsewhere in the class can still be final since they're initialized in the constructor. That said, in a very complex and large class it can be more readable to break apart the constructor work into some private methods. But even then I might argue that your constructor is doing too much, or that your class is responsible for too many things. 

In an example workflow, let's say we're playing a track and click the reset button. The view added a listener to the reset button, so that listener will fire. The implementation is simple and only notifies the views listeners the the button was clicked (the view is supposed to be dumb, remember?). The controller now is notified, and it is smart so it will know what to do! The controller takes charge and stops the sequencer (updating the state), and then tells the view to reset itself. And that completes the cycle! (Interact with view -> view notifies controller -> controller modifies state -> controller updates view) 

Resulting Code With all of the design changes in mind, here's what the result could look like: BeatBox.java 

can be removed Instead of using a for loop and iterating with a counter, you can use the built-in iterator and iterate over . 

MusicInfo Class Long story short, you don't need this (I also think there's a better approach than using a 2D array, but for now, let's assume the array stays). The 2D array that's being wrapped here is a UI component, so it can easily become part of the GUI class. The methods in this class are just syntactic sugar, and really don't provide any additional benefits. Plus: 

Back to the class, and the GUI class. Do away with . I view your UI as having rows. Each row is for an instrument, and each row has some checkboxes which represent beats. To model this, we can make : 

BeatBoxConstants Constant Class (of Interface) are a bad anti-pattern. Instead, we can easily just pass in the number of beats to the constructors! 

Your code looks pretty neat to me. I have a few remarks listed below. Variable names: Don't mix up names, this makes things confusing: 

Why mix fieldnaming with and without the underscore and capitalize some and do not so with other? Prefixing them with an underscore is personal choice but fieldnames have camelCase, according to the capitalization conventions of Microsoft. 

Summary I'm not saying that my code is perfect in any way. Probably my code could be revised and corrected as well. I only want to show you the way how you decouple user-input from class-definitions, use proper variable names, bring a proper structure and logic in your code. Please feel free if to comment if anything's wrong with my code. Edit: Thanks to the valid comments I received, I edited the code. The posters of the comments were absolutely right. I've also rewritten the Initial()-method to a more correct logic. Here's the result in it's entirety: 

UpdateDatabaseStatus(): You should only instantiate the when is not null. And since you don't use the variable, get the rowValue in one line. I also applied the naming tips already in this method. 

If you read this carefully, you'll understand that an exception occurs when something unexpected happens, something you do not have control of (most of the time). In your example, the fact that for a given ID, no user exists is not an unxpected behavior of code. It just means that there is no data in the database for that ID. When trying to get an object with given ID (which will obviously return null) and perform some method on it or get a value from a property, this will result in an exception. In this case this will be a . I suggest you rewrite your code to following: 

Furthermore, give useful names to variables. Names like or are not meaningful, try and instead. I updated the JSFiddle working example. 

Also, create another constructor that takes parameters so you can create a connection with other values. Combined you can overload the constructor and put all the logic in one. This looks clean and makes maintaining your code a lot easier. Example (classname is ): 

Now give 5 as input for and and voila... infinite power for the fella! Rethink a better way to calculate this, you could for example use a Pythagorean function: 

Since you only have two properties, performace won't be a problem. Even if you were to add a couple more properties. Hope this helps! 

As you can see everything is handled in the constructor with all possible parameters. The other ones just call this one with the right parameters and the necessary action is performed. Now you only have to handle situations correctly. If I pass and the item is null you'll get a . This was also the case with your code though. Update: (tip from Morten Christiansen) When dealing with lots of code in a switch statement, you can extract that logic into a method and call that method from the case. Example: 

While writing previous points I found that there had to be an easier way to achieve the same result. There are numerous ways to check for a palindrome. For numbers you can also use this method: 

Another way of using a method is making it return a to see if the parsing succeeded and using the parameter. This results in following method and usage: 

Using LinQ: Although not always the best option, you can achieve the same result using LinQ, using the method: 

I am a fan of loose coupling so I would suggest that you take the values of host, username, password and database out of your class. Pass the values through the constructor and set them in the constructor. This makes it easier to reuse your code. Second, in classes such as one that creates a connection to a database I would not "echo" stuff. You better throw exceptions on error or return meaningful values to the caller. Last, I'd suggest other names. This might be nitpicking but this has more meaning to me: