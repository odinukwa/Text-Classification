Create a new 'GRAMMAR POLICE' group in Skype and put troublesome people in there. Then you know whether they're going to whine about your lack of punctuation before you start speaking with them. 

People can act completely differently in the office to out of the office - it's entirely possible that this guy knows how to conduct himself in an office (and the interviews appear to bear that out). To my mind, your contact with him shouldn't really affect the outcome of the hiring process - if he gets a job then you'll have to deal with any bad experiences if and when they happen. In summary, you don't really know what's going to happen in the workplace, you met and interacted with him in a completely different scenario. If the consensus of the hiring team deem him a good fit, then I don't see why you can't go ahead. Unless you seeing him working at your company unsettles you and you want to sabotage that in some way (even if doing so unconsciously). 

Treat your military service as a job and list it on your CV. Since it's compulsory in your country, it won't be unexpected to see that on your CV. If you need examples of how to list these roles, ask your friends/colleagues. 

We use a ticketing system here as well. And I also get "off radar" requests. The solution is simple: "Thanks, is there a ticket number for this?" If the answer is no, open a ticket in the persons name so that it goes through the system. If the answer is "no, just do it", then just do it (at least you have the "off-radar" aspect captured in an email). Some requests are project-based, so they get worked on under an umbrella ticket or just by using the project reference. In our work, nothing should go into the live system without it having a ticket reference. The auditing people don't really like changes going through without any due process/paperwork/authorisation happening. 

The question usually refers to what's the name of the company you're working for, so you should lead with that. Any geographical/home working information can come up in subsequent questions. 

Concentrate on the work aspect of this. If the relationship is obvious, then address it with them both: 

Turning this phrase around makes things a little less forced in terms of colloquial English phrasing. 

Compartmentalise the issue and switch yourself into another mood when you deal with him, reason that it won't last long, and do your work as politely and professionally enough for him to be happy with what you produce. 

Facebook doesn't allow you to create more than one personal account for yourself - I expect you have explored this option and know this already. What you can do is set the audience when you post so you can control who sees what you post, although this might not cover your needs. I really suggest that you post this on the Facebook community to ask this question from the experts. There's sure to be people there in your same position. 

It sounds as though you've already left - you've told her already and blocked phone/email channels. Where you go from here is up to you. If you're having misgivings, you'll need to re-engage and you probably know where that will end up. If you want to stay away, you just need to look for another project. 

Don't use one of these wall arms. As you can see, they're more for occasional use than to be ergonomic. It's just going to rattle and wobble when you type and there's no room for resting your arms or any paperwork. I imagine that more expensive ones might have a cup-holder (if you're lucky). And you'll end up with big holes in your living room wall when you want to remove it. A far more practical solution is to obtain a small collapsible table that you can put all of your equipment on. this will allow you to work in comfort without too much disruption to the rest of the house. When your two days work is done, you can simply fold up the table and put it away somewhere for the other 5 days. Or you can use your dining table. This is what I do - I have plenty of room and I'm comfortable. 

Yes, you need to go look for another job. It's apparent that your team isn't a team, it's just the dregs of your company and it's unclear why you've been included in this team or even what your role is within it. So look for another job for a company that has clear leadership and management, and hopefully has people that you can respect. 

It seems reasonable to assume that you should do it as quickly as reasonably possible. If they've not given you a set deadline, that might be a test in itself - seeing how quickly you can work under your own steam. It might be an idea to also submit some sort of test plan to prove that you've at least thought about testing the app that you've written. 

Speak with your team lead and try to get the technical issues resolved as well as possible. Learn from your colleagues about how to diagnose and solve these kinds of problems. You're there to learn - you're not there to be fired as soon as something doesn't go right first time. 

You now know this piece of software better than anyone. So, when it comes to the demonstration, concentrate on the parts that work well (or at least work as they should). Any other features that don't currently work that well can be labelled as "in progress" or "prototype". Use these to discuss how these features can be improved upon (or, even better, let them tell you that these aren't important). Obviously, take a look at what you're demonstrating and know what works and what doesn't. Also look at any documentation/talk to people and understand what should work and how. Demonstrating knowledge and showing confidence in the system will engender confidence in you and what you say. This will help you get things back on the rails. It's between you and your manager how you pitch your role in this - i.e. if you tell them that the original developer has left the project and that you've had to pick up the reins. People do tend to respect honesty more than dishonesty, and attempts to cover up for a previous developer will invariably be seen as covering up (and people don't like that). Being up-front may reap benefits in allowing the project to be re-focused (previous developer may have led the project down an unwanted route anyway). 

You're not a Junior any more - you're a Senior. Congratulations on your promotion! If it hasn't been already, chop the project tasks up into bite sized chunks of work. Analyse each one and assess whether you understand enough to completely it, how long it'll take you. Take those time estimates and add at least 50%. If those estimates don't fit into the timescale requested, then you need to raise this as a risk - either you need help, or something needs to be dropped from the project. You also need to raise a risk for every task that you're not sure about. You'll get more points for forward thinking and being honest than hiding everything and failing at the end. If you need help, then build a sound business reason and ask for that help. Use this as a great learning experience, not many juniors get this opportunity. 

The first thing to do is forget about the issue with an accent, it won't be a problem at all if you're understandable. It's also not a cultural issue as such, there's many many people who feel nervous about presenting to people and the strategies here should be the same, and it gets easier over time. So, the usual things - practice, rehearse, make notes of what you're going to be saying in case you find yourself lost. Know your subject, and engage with some small chit-chat before the presentation to help you and your audience relax a little. Again, it's perfectly natural to be nervous. 

If there's confusion in the discussions you're having, this might well lead to the confusion and the tangled code that you're implying is already in there. It sounds as though you're piling spaghetti on top of spaghetti and complaining that the dish is overflowing. Depending on project timelines, this might be a good opportunity to take a step back and for both of you to reassess the large picture. Get back to the core requirements and see if the problems can be solved by wrapping up all of those little ad-hoc requests and bugs and look at getting them reanalysed and re-written, and get it done right. If timescales don't allow for a fundamental reassessment, then compromise with the latest requests and put them in the best you can in the time. Then let the bugs come out in the testing. After that, take your step back and see whether larger changes are more appropriate than iterative bolt-on fixes. 

Since the phone is essentially shared between the three of you, why not take it in turns? Someone answers the phone for a week and then passes to someone else. That way, Alice won't feel burdened with answering the phone every single time. If you move the phone to a shared desk, you can also move it to your/Bob/Alice's desk once a week or so. 

You're the "new guy". The chances are that there have been previous "new guys" before you so the team simply won't bother getting to know you that much. It's going to take time getting yourself fully integrated (I'm still a "new guy" after being at my job for 3 years), more new guys following you will help you rise up the hierarchy. You just have to wait things out and be cool about it, keep doing what you're doing. However, working to rule might not be helping you - it might be seen as you being resentful, or a lack of commitment, or that you'd much rather work elsewhere. Giving the impression that you care about the job/company will probably help you. 

It's just to discuss your performance so far and see if you need any help or have questions. Think of it more as a catch-up meeting. Generally these probation meetings are along the lines of 

Work the way that you want to work, as long as that doesn't negatively impact on your team's productivity. Of course, do this with the team lead's permission. Doing it this way means that you're not aggressively imposing working practices on the team and it's up to them to look at what you're doing and incorporating any good points that they see (or discard them as they see fit). Note that well written code doesn't necessarily need comments all over the place (I don't know what this code is like, so this might be subjective). Create your own documentation and submit it with your work. For a bug-tracker, I'd just use a spreadsheet to start with and encourage people to look at it to track your progress on bugs. People may buy in and add bugs to the spreadsheet if you guide them (but don't force the issue). No one likes a new guy being pushy, but it's good to see good practices demonstrated, and they're easier to adopt if they demonstrably help your own productivity. 

It might be an idea to speak with the Citizen's Advice Bureau. A smattering of advice on their website says: 

Put some research in. Google up the company name and see what's out there. Look at the salary details - is it a proper salaried job, or is it commission or piece work. Are they asking you to pay for "admin" or "arrangement" costs prior to you being employed? Question why they need your passport number. Do you have any colleagues who have gone through the same situation - what were their experiences? Is the extra money worth the uncertainty? Ask for references, what established companies have they worked for? Contact them and ask whether your prospective employer is trustworthy. Further reading 

As with any presentation, you need to practice, practice, practice until you nail it in terms of content, depth, and timing. If you can’t present your content adequately within the time constraints, then you either have too much content or not enough time. If you can’t change the time constraint, then all you can do is cut the content. 

The problem is that it's an unsupervised team. I expect they feel safe in ranting and moaning because there's no one to hear and rein them in. Even if you managed to stop the negativity/ranting, then they'd easily find other things to gossip about. If people are keeping up with their work, there's not much you can do about it except for ignoring it or using headphones when you want to concentrate. 

Of course, it depends on the situation in hand and it's up to the manager how to apologise in the most appropriate manner. Apologies can also show a level of humility and trust in a manager's team and can be seen as a constructive thing. No one really likes a manager who refuses point blank to admit that they're wrong. However, if the bad decision was something at the corporate strategy level, then it becomes a lot harder to apologise.