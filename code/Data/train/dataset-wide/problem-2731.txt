That way, your code and the client's one do no rely on a particular container type, but work with any compatible range. That's how genericity is achieved in the standard library. 

Before discussing whether the algorithm is good or not, there are many small things that you could improve to make the code more readable: 

Lazy evaluation Compute only what you need. If something can be computed later without a loss of efficiency, then compute it later. That's what we call lazy evaluation. Take for example these lines from the line-circle function: 

The function object would have had another advantage had Boost allowed its to take advantage of the empty base optimization. Unfortunately, this is not the case right now, but using a function object may trigger a free improvement when Boost finally implements EBO in . I would have loved to use ADL to find the most suitable to use, but always need an integer template parameter. And ADL is not triggered when a template parameter is provided by hand instead of being deduced. Add a construction function Let's assume that we still want to write a by hand. While the integer template parameter is always provided by hand, the ability to deduce the template parameter is still something we want to have. Therefore, we will add a construction function: 

You can provide an overload for rvalue-references to move entities that are meant to disappear anyway though: 

By the way, there are many other way to implement this function. Your current function uses a loop and therefore performs in \$ O(n) \$ where is the number of operators while you could rewrite it to perform in \$ O(1) \$, with a lookup table for example. That said, it shouldn't be a problem since you only have 4 operators. Variable declarations You seem to declare your variables at the beginning of blocks. It is not needed anymore with C99, you can declare your variable when you need it. You can also declare a variable in a loop and therefore write things like this: 

I think that the way you add and tags does not reflect the structure of the page. You should improve this: 

Here is a small C++11 utility collection to store any object that satisfies a given interface. Only the basic concepts are provided, I did not try to create a full collection: 

The truth is my answer isn't really personal. Since your class obviously looks like a signal class, everything I am saying tends to mean "make your design closer to those of existing signal classes like Boost.Signals2" :/ 

What I tried to do is to have a sparse array whose number of elements is strictly equal to the number of elements that are different from , hence the elements that are deleted when is assigned to them. Here comes a small example: 

Since you often pass as the template parameter, that means that in your class, (and it seems that the problem is propagated in the children types). I think that this is never the case in the standard library and I would totally expect and to be equivalent. You don't seem to be using directly, so I will assume that this is an error that you didn't spot. From the other s, I also assume that you are interested in exposing to the user of your class and that you don't want it to know that much how your class resembles a mapping type. Therefore, you should change to: 

Microsoft Visual C++ Your code has been written with MSVC and may work with it, but it fails on most of the other compilers. It's not portable at all. Here is what you could do to get rid of this MSVC dependency: 

That's kind of trivial, but you can also use curly braces instead of parenthesis in your constructor initialization list: 

You are organizing your algorithms into two categories: working algorithms and non-working algorithms; this is rather Manichean. You should try to design something where an algorithm is not "working" but "approaching the expected result better than the other ones". In other words, don't try to find "who works", but "who works better". The best thing you could do IMO is to get all the results for a generation, compare them to see which ones are closer to the expected result and which ones are farther. In other terms, you should give to your algorithms what I would call a "relative fitness" to know which solution is "relatively better" than the other ones. This relative fitness will help you to generate a new generation with the following steps: 

From your answer to my comment, I will drop the intended Python 3 paragraph (even though there are some goodies you may like in the most recent versions, such as the new that supersedes the old module) and go straight to the main point: Qt Designer is the way to go Writing user interface code is something that nobody likes to do. You could seriously save a good amount of lines of code by designing your main UI in Qt Designer and using or to generate the boring code so that you can concentrate on the Model and Control part of the code. Internationalization While it may not be important, it doesn't cost more than a few in order to tell which strings may be translated, even if you don't set up any translation for now. But if one day you want to translate everything, you will be glad not to have to reread your entire project to know which strings need to be translated. That said, many of the strings to be translated are automatically marked as such in the code generated by Qt Designer. Consistency is the key When reading the following piece of code: 

While this is the most versatile and optimized version of the algorithm since the beginning of this answer, it is still an order of magnitude slower than converting the Gray codes to regular integers, performing a regular addition and converting the result back to a Gray code. Nevertheless, it was fun to see how much this solution could be pushed and optimized. I hope that it may give ideas to people interested into adding two Gray codes in the future :) 

At first, computing mathematical formula thanks to iterators did not seem intuitive (to me). However, I totally do understand why you chose iterators instead of returning a collection; it's probably much more memory efficient and it is easy to create a wrapper function to return a container if one really wants to. I generally prefere code that looks like math formula when I have to write math-related code, but in this particular case, I find that the iterators and the modern C++ feel are rather suited :) 

You said that you packed all the suggestions from the previous question, but there are still some pieces of advice that you did not integrate into your code. Here is how you can still improve your it: legacy In your code, you are using the constant . While it will probably work on most of the compilers I know, this macro isn't defined anywhere in any C or C++ standard. The / constants are only a common POSIX extension. You should define your own math constant somewhere in order to avoid portability problems. Since it was the only feature from you used, you can remove the include. Perfect forwarding There are many places where you should use to perfectly forward your arguments from a function to another. For example, you could turn this piece of code: 

I realized that youare actually using Python 2 (for some reason, I thought that you were using Python 3). Therefore, You can probably improve the function . You are currently using in the function. creates and returns a list. You should use instead: is a generator; it will generate and yield a new at each iteration. Since you occasionally early from your loop, you don"t always need to compute the whole list of integers, and should be a best fit for this job. 

From a design point of view, one thing I would probably do to avoid passing coordinates everywhere is to create at least two classes, and : class Point: 

@MikeMB answer already covers some interesting points, but there are still some more things that you could improve in your code: 

I won't be of great help for concurrency-related issues but there are some other small things that could be improved in your code: 

Since type traits generally use many templates, you don't want to add even more extra keywords all over the place. Use alias templates If you have acces to a compiler that supports some C++14 features, you will probably want to use the alias templates for transformation traits to get rid of many and . Unfortunately, the alias templates for the query traits () have not been accepted, so you have to use . 

Work with larger integers than what allows Here, you seem to be asking for templates, so that your code works with any integer (and actually, any type which properly acts like an integer). I will convert the function for you so that you can analyze it, then templating the rest of the code will be left as an exercice: 

Also, you can get rid of the inheritance specifier for since you are using a . That does not change anything whatsoever. 

I then have no idea what my value will be since the size is 8 and I did not control the inserted values. Generally speaking, you probably should implement like this to avoid surprises: 

You are using , but you don't seed it with first. Anyway, if you have a C++11 compiler, try to use the new module instead. Standard methods that may use , such as are even deprecated in C++14. 

As I said in the comments, your system is pretty close to a system of signals and slots. Congratulations if you never heard of the pattern before, that's an excellent way to implement an the observer design pattern! I still have few notes: 

The algorithm was introduced in Boost a long time ago before making its way into C++11. Its principal advantage is that finding both the min and max element of a collection only costs at most \$max(\lfloor \frac{3}{2}(Nâˆ’1) \rfloor, 0)\$ comparisons vs. approximately \$2N\$ comparisons with separate calls to and . The algorithm takes the optimization logic one step further and allows to also find until which element a collection is sorted with virtually no additional comparison, while a separate call to would have added another \$O(n)\$ comparisons. While a bit obscure, this algorithm notably helps to optimize counting sort: some flavours of this sorting algorithm first need to know the minimal and maximal values of the collection to sort. In such a case, checking for free whether the collection is sorted allows to return early when the collection is already sorted, which is always something nice to have since it's free. Do you think anything could be improved with this algorithm, be it a matter of correctness, style or performance? 

is a half-reserved method name While it is ok to name a method , a regular C++ user will expect that method to return an iterator and also will expect that another method named , also returning an iterator, exists. There are no rules anywhere saying that this method name is reserved, but it is so commonly used for iteration that in practice it totally feels like a reserved name. To avoid a potential ambiguity, I would change the name to or some equivalent in your class. That may help you or others to avoid some problems in the future. Reorganize your includes Whenever possible, incude the heades you need in the implementation file and not in the header. Also, try to remove the headers that are not used: 

Since you seem to be tryingy to mimic the style of STL containers (at least, that's what your comments say), there are several things you could improve: STL containers subtypes Most of the STL containers have subtypes. I am pretty sure that some parts of the standard library use these subtypes. Therefore, if you want your code to work with the generic algorithms, you better add those subtypes: 

Of course, since this is not a macro solution, you will have to add another parameter if you want to inject the information into the handler: 

@mdfst13 has already done a good job reviewing your code, but there are still a few things left that you could change. It's mostly nitpicking, but there's no harm in being a bit pedantic in a code review: 

Whenever it makes sense, try to use boolean values instead of integers. The header defines , and that you can use to make your code clearer. Using booleans instead of integers can help to clarify your intent. For example, here is your function with booleans instead of integers 

That way, if you ever intend to change the signature of or in the base class (breaking changes in an interface are hardly a good idea, but they sometimes happen) and forget to change one of the derived classes, you will get a compilation error stating that and/or are not overriding anything but merely hiding the base class function name. 

But it means that you have to explicitly write everywhere if you don't want to leak into the outer namespace. In other words, you have to choose which solutions seems to best convey your idea while not bearing too much syntactic noise.