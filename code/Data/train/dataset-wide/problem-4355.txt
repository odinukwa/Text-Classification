I was exploring a company whose work is exactly my area of training / current work. I (believe?) I went through one of those options to say that "I am interested in what the company is doing and would like to hear more." However, it was awhile back; perhaps the company just monitors users and decides to email them if they look at particular parts of the website (Google could certainly do this). The body of the email I received is reproduce below, with keywords and names replaced. 

I have applied to a job and now have received credentials on a relevant skill / ability after having already applied (cover letter + resume + transcript). I informed the employer before hand that I had taken the exams (i.e. to show my seriousness about the work), but I did not receive the exam results until just now. Should I update the employer to tell them that I passed the exams? Or would this only be relevant if the employer decides to interview me? 

I am currently employed, but it is not a permanent full time job but as a research assistant in a university. However, the research I am doing is in the same domain of the company's main research. I certainly do not think I supplied any information that makes me sound like I am a consultant / full researcher looking to collaborate; instead I am interested in a position in the company. My worry is that I do not want to accidentally misrepresent myself. The lines about "learn about your work" and "discover how we might have the opportunity to work together" are what worry me. The company offers a different email address and contact to correspond about a possible position. My question is thus: should I (1) respond to this email and set up a time to chat (2) just go the hiring email route (3) or do (1) and then (2) if (1) goes well. 

One of my siblings is developing an app. I'm going to graduate soon and am looking for ways to add development experience to my resume - it seems to me that my options are either to help her out or to join an open-source project. If I list this experience on my resume, would the fact that the project is headed by a sibling detract from its value? Further, since my code won't be open-source, would that also count against me? 

I have heard that having an active SE profile is generally a good thing when it comes to the hiring process. However, is it possible for the reverse to occur? What are some examples of SE/SO history that could negatively impact your hiring chances? What sorts of things are employers looking for in a Stack Ex profile? 

I'm applying for an entry-level software engineer role at a 15-person company. I've found the engineering team leader on LinkedIn. Is it appropriate for me to connect with him and send a message in addition to my application, so that I stand out? What should I be trying to say or prove in that message? I have heard that this is a good idea, but I'm at a loss as to what, specifically, my message should include. 

1 Inevitably there will be people who just can't be bothered, either habitually or just at that moment. But treating questions that come to you as a potential failure of the information stores and trying to "debug" the failure sets the expectation that asking you personally is the "fallback" mechanism, and will still have the effect of making people embarrassed if they come to you without having tried to find the answers first. 

If you told me you had working knowledge of X, I would expect that I could assign you tasks to do with X and you could carry them out. You might be a bit slow at first due to having to ask questions, look things up, etc, but you know enough to have the framework for acquiring more knowledge organically. Without working knowledge in X, I would expect to have to give you some sort of training before you could carry out tasks to do with X. If you wouldn't be happy to be hired on the basis of your knowledge of assembly language and given assembly language tasks without much "extra support" getting up to speed with assembly, then you don't have working knowledge of it. 

One thing I think you should do is have much less faith in the usefulness of email records as an information repository. It's surprisingly difficult to track down an email where someone explained something to you when there's lots of other emails flying around. And remember that they're not domain experts; they may vaguely remember a discussion with you on a particular topic, but they're much less likely than you are to identify the correct keywords they should use to find that email again. If they don't thoroughly understand the topic they're also less likely to realise that a previous conversation that solved a closely related problem for them already contains everything they needed to solve their current problem because they don't know what they don't know. And no matter how perfect your email information is (either because the recipients remember it forever, or always find that email again when they need it), that still only helps the people who received that email. So any email that you're needing to refer back to with "for more details see my email on " should probably be posted on the wiki instead, so other people can find it. Most of the other answers here have focussed on making yourself less valuable as an information source, so that people are more likely to find their answers elsewhere. And you've been trying that yourself a bit, with not answering questions immediately if they come from repeat offenders. But I'm going to suggest instead that you focus (instead or as well) on trying to make other information sources more valuable. A key problem with information repositories (like wikis) is discoverability. How easy is it to find what you need on your company's wiki? My company's one is terrible. Searching for general keywords in titles results rarely finds what I need, and searching for keywords anywhere in the article results in way too many articles (many of them obsolete); the right one is buried in the noise. The top-level organisation of the wiki is divided roughly along functional groups, so to find something by navigating from the top I need to figure out "which group is most likely to have originally written about this topic, when it was originally written about" (assuming there actually is an article on this topic specifically, rather than information being hidden in other articles or just not present at all), but the group structure and responsibilities haven't stayed static and plenty of potential topics touch on multiple groups. The net result is that I can basically only find specific articles I already know exist (either by remembering the title closely enough, or knowing enough of the "rare" keywords that the article contains to narrow down the search without. I'm also one of the technical experts at my company, and I've been here a long time. Imagine how much worse it would be for people who don't fully understand the domain yet, don't know all the right terminology and linkage between concepts, and haven't yet built up a good mental model of how the wiki is organised and where they're likely to find things. The sad irony is that when you don't understand a lot about an area it's also much harder to find the information that will help you increase your understanding. It can be much easier to seek help from known experts (especially as getting that also gives them the "blessing" of an authority figure that what they're doing/thinking is reasonable). It can be very hard for people to get out of that mode, if the information repositories are daunting and/or rarely lead them to a solution they can be confident about. Because they don't find the information stores very helpful they don't use them, which means they don't get better at using them so they never become more helpful. So I'd suggest that when someone comes to you for help treat it as almost a "bug report" for the information stores you have. Ask them for more details on what happened when they tried to find information about their problem, and why it didn't work. But don't ask as an accusation that they should have found it for themselves, but rather ask as a source of information for how you can make the information more discoverable for next time.1 Is the information not actually there yet? Are they searching for the wrong thing? Does the content need some organisation with top-level "starter" pages linking to more details? What top-level organisation would serve the needs of people looking for information (start pages by product, by problem domain, etc) - and which people (there are probably different groups with different needs)? D you need to link some articles to each other? Is it just not widely known that there is an FAQ? Are the questions on the FAQ too specific, or too general (it needs to be clear to the person skimming the questions which ones connect with what they need now, and the connection needs to be clear before they've read the answer). Do you need links in heavily domain-specific source code to the wiki articles likely to be relevant to people who need to work on the code? Is there a good place in the code to embed those links where they'll be found? Do you need to train people specifically on how you've organised things and how you intend things to be found? In short, merely having all the relevant information recorded (either in peoples' email achives or publicly on a wiki) is not the same thing as having it discoverable by the people who need it, when they need it. Improving the latter could help you (and everyone else) a great deal. 

I just graduated and am looking for my first non-internship job. I transferred schools, and got a significantly better GPA at my newer school. How should I represent my educational history and GPA on my CV? Putting both schools takes up a lot of real estate, and it'd be nice not to put my subpar initial GPA on display. I am thinking of just putting my latter school and GPA and listing my graduation date. Is this ethical? 

I see this kind of phrase used pretty often. While it sounds nice on the surface, my impression is that there might be a more toxic hidden meaning here. Should I interpret this as meaning "We expect you to work far more than your assigned hours every week"? This seems like a more realistic interpretation than "once you do your day's work, you can go bowling". It seems to me that tracking "results" over "hours" might lead to situation where impossible demands are put on developers, and when any sort of complaint is raised, this "results over hours" mantra can be used as a catch-all defence. 

I'm in my fourth year of a Bachelor's in CS, and I've been looking through the job market. I've noticed that it's only very rarely that the technologies I'm acquainted with match up well with what's marked as needed on job postings. There tend to be lots of arcane acronym technologies which I've never heard about, and googling them tends to lead me down a nest of even more opaque jargon. Is this something I need to be studying in my free time, or do people normally learn these things on the job and then specialise thereafter? Is it worth applying to jobs even if they are listing technologies I've never heard of before?