It kinda depends on the scale of the company. 500k in sales at a huge company would be considerably less impressive than 200k in sales at a 3 person start up. There is also a difference in what is being sold. If it is a physical product, what is the profit margin? Is it something with little to no overhead? Honestly, if I saw numbers in a resume I wouldn't really think anything of it unless the numbers were considerably high -- in which case I would ask for clarification during the interview -- which will likely need to be done either way. I wouldn't put actual numbers in my resume for the reasons above. Without more context, they are meaningless. 

There is only a need to put the school you graduated from and the date of graduation. GPA is optional, but the only relevant GPA is that at the time of graduation. I think that adding the other school and the GPA at that school would just be too much noise on the CV. The only exception perhaps being applying for a position at the first school. 

I've never cared what domain the email address has when looking at the resume. If it is from a prestigious school, then they should have that affiliation already written on their resume. The email address itself isn't going to impress, I think. Same goes for the personalized domain. The exception here is if they bother to look at the site attached to the domain and it is impressive. Again, in this case, it can be listed elsewhere on the resume too, if it is impressive and the applicant has the primary role in the creation of said site. I personally see mobile email addresses / yahoo accounts / edu and gov accounts / personalized domains as the same, so I wouldn't spend too much time acquiring an email address that looks good, and just list the one that you could respond quickly with. With this said, meta data / signature should still be taken into consideration, and the non-domain part of the email address shouldn't be anything too embarrassing offensive. 

If there were no instructions to not share the code, and no licence on the code itself, then so long as you remove any company-specific items/information, then I would say that it is fine. I would avoid saying that it was for an interview for **** company in the repository or on a portfolio site linking to the repository, but rather just give a brief description on what the project does. However, if you are contacted by the company asking you to take it down, I would recommend just going along with their request, even if there were no legal implications along with the request, just as a professional courtesy. 

Try scheduling a meeting with your boss. Drop him an email asking for a short meeting to talk about your progress to date. See how things are going, where things are heading. 

My email client has a signature option. I don't put anything at the bottom, I just let the signaure handle it. Most of us in our office have something nice and generic like "Regards," for ours. 

Speaking as a former server, this isn't bad. Restaurants operate in a much different fashion than other businesses. When you go home is relative to the amount of business. My schedule only listed in-times and not out-times. I never knew exactly when I'd be off. Sometimes I would be out early if we were slow, sometimes I stayed as late as the closing servers (along with two or three others). The trial shift could be likened to a technical interview or a programming exercise. Think of it as a technical screening. They are looking for new wait-staff that either have experience or raw talent that can be honed into the type of employee they are looking for. Take what they said at face value. I would say wait until Thursday before you call them and see where they stand in the interview process. Also, ask for the manager that was on duty during your trial shift if they are available. If not, ask for the store manager. When you do call them, make sure it is on their down time. Down time depends on the type of restaurant, but for a dinner-heavy service, I would say 2:00 - 3:00 PM is a good time frame. That makes sure that they are fully out of any lunch rush and well ahead of any dinner rush. 

In your question you seem to separate self-criticism and constructive criticism. These two things are not mutually exclusive. Self-criticism is the source. Constructive criticism is only one type of criticism. I would think, like Edwin mentioned, 

You can always ask. If there's no ink to paper there's room for negotiation. Ask for what you see as fair value for your services. Write up your own contract and see what they say. Maybe even make it a joint venture. Draw up a rough draft for ideas you have and take it to them. Ask them "Is this something similar to what you had in mind?" 

I agree with everything Andreas said in his answer. It sounds like it's time to put him on a performance improvement plan. Set up a meeting with your student. Lay guidelines for him. And from here on out document everything regarding his performance. Maybe part of his plan should include the revocation of some benefits... like working from home. His time sheet may say 10 hours a day, but his deliverables beg to differ. You can still be supportive of him during this time. Let him know that you are disappointed with his progress so far instead of angry that he's not getting his work done. Let him know that if he really wants an internship with your organization, he's going to have to step up his game. 

I'll answer the question as it is asked. When I need to ask for help, I will usually go where I think I can get the answer the quickest. For example, if I don't know anyone, I will address either the manager or the whole department (such as the project channel in the company's slack) that is in charge of what I need information on. If someone answers me, I will continue going to said person as they have a history of answering me. If later someone adds on supplemental information that helped, I may go to that person instead when I need detailed information, but will continue going to go to the fast person when the detailed person cannot answer in a timely manner. If I don't have a means of asking the whole department at once, then I will stick with asking the manager for who can help me, and allow them to assign someone for me. If the manager isn't available, and I can physically go over to the desks of the department, I will either ask the most available looking person (by themselves, doesn't look like they are in too deep concentration, isn't wearing headphones), or just state my question in the general vicinity and allow someone to volunteer themselves to answer the question. I personally don't have a preference of the gender of the developer so long as I can get what I need in a timely manner, with the least amount of effort in asking from my part. I do not see gender as a factor of developer's competence. When asking questions, for me, it is mostly about getting a meaningful answer in a timely manner. 

It really depends on the company culture. If it is an older/large company, there is a large chance that it may require suits for work, but newer smaller companies are starting to dress more casually, especially if it is a non-customer facing position. Have you not seen anyone from the company, or pictures of the work environment? Emulating that manner of dress would be acceptable. However, your best bet is to just ask your contact what the expectations are. If you can't get a good answer from your contact, then I would recommend wearing a suit on your first day, and figure out what to wear on your second day on from there. You'll leave a better image being overdressed than you would being underdressed. There are still many old-fashioned people who take this sort of thing seriously in Japan. 

You've already asked him to explain why he did it that way. He gave you an answer that isn't acceptable to you, so rephrase the question -- "Why is it a good practice to write this type of test in this situation?", Tell him that relying on past tests is not an acceptable answer, and you would like to hear his reasoning on the matter. It is likely that his judgment is there, but explaining things is troublesome and annoying, so he just cited a past item as an excuse. You just need to force those answers out of him. If his judgment is indeed not strong enough, forcing him to explain himself each time will help develop that judgment. Let him know that this is to help him move up in the company (as he has come to you for advice, and you said you would support his promotion). If he is serious in his desire for advancement, he will go along with you. If he does not take these questions seriously, then he may not be the best option for advancement. 

Absolutely. Contact whomever is in charge of getting your review to you. Taking 5 weeks to get an internship review done seems a bit excessive to me. Just keep your tone professional on the call. 

The candidate should call back if they have all the information they need. It will show the candidate is eager to talk with the recruiter about the position. The company should call the client back. Take care of your customers and show that they matter to you! I would say here, an email would work better than rushing for the phone. Figure out who is going to call first, then finish the conversation. 

Apply for the jobs. The first step of getting the job is getting the interview. You will never know if you are disqualified from a position if you never apply for it. As for your skills.. what is your desired skillset? What do you want to be when you grow up? See @Cronax's answer as well. Opportunities can present themselves in a company to switch technologies. I have seen a co-worker start off as a database developer and wind up as an iOS / objective C programmer. Get your foot in the door somewhere. Be grateful for your first opportunity. But never stop being a student of the game. If you start off as an xyz developer, but abc is fascinating... get a book and read it. Do the homework problems and hone your skills. 

I'd say he needs you more than you need him at this point. The coding and deployment process may be outside your scope, but he needs the coaching regardless. Maybe you should explain the consequences of his actions to him. Lay out exactly what his poor coding / deployment processes do to damage his business. You mentioned that he is a co-founder. If you can, talk to the other co-founder(s) and see where you can get with that approach. 

If your self-criticism is constructive, then I don't see how your managers could frown upon it. If you're up for the task, maybe even do a self evaluation in the style of a performance review. Try and stage it at a mid-way point between when your organization does them. 

This is where you have to go the extra mile. Look up some free courses on Coursera or Udemy that are relevant to your current (and possibly future) role and take them. Look for something that offers a certificate and show it to your supervisor. 

It really isn't your place to say anything. What do you hope to gain by saying something to your boss? If your co-worker is already on the path to a new position with a different company it doesn't seem like there's much you can do to stop them. And if you aren't that close anyway, why would you want to? Regardless of how close you are, I'd start with talking to him. Let him know how uncomfortable this makes you and how you feel now that he has entrusted you with a "secret" so to speak. If you say anything to your boss, even the round-about method, it's going to raise red flags. I would keep this one close personally.