Creative solution time: have users log in to a webpage that adds the ip of their device to the list of firewall exceptions temporarily before using RDP. Any users that don't first log in to this won't be able to access RDP from the outside. Maybe even include a pick your own TTL option for users that know how long they'll need the connection. You can include logging to be able to include a method for removing all the exceptions created by X, in case that's ever needed. You can even require client certificates for authentication to the server, and distribute keys to each user to add to their devices, for added security. 

The ciphers from weakdh.org seem to be invalid for your system, so, yes, it's falling back to the defaults. The ones listed on weakdh.org may work on some other system that they tested on, or they just may be wrong entirely, I can't be completely sure, but what I do know is that they aren't on the list here, so they're probably not valid anywhere. To get a list of valid cipher suites for your system, from $URL$ 

Your DISM command isn't finding the required resources because it's checking for the source "online". Windows 6.2+ will (by default) check only with the update source server for component install/repair if an update source is specified for the Windows Update Service. If you don't want to set up your update source (usually WSUS) server as the source for repairing/installing components, then you can enable the following Group Policy: 

Right now, we've got a business critical application that installs an Outlook add-in. It is a bit slow to load, which makes Outlook 2013 kill it after a few runs, but I've mitigated the issue of Outlook 2013 killing the add-in by using the Office 2013 Group Policy Administrative Templates "List of managed add-ins" policy. I don't see a similar policy in the 2007/2010 templates, and have to remove the resiliency key from the user's profile whenever the key gets added for whatever reason. Is there a way that I can replicate the functionality of the 2013 policy for 2007 and 2010, or even disable resiliency entirely if granularity is not an option? If so, how? I've found several ways to selectively kill the plugin-specific resiliency subkey automatically, but this still requires the user to restart outlook if the plugin doesn't load because it was disabled automatically. 

There's no conspiracy, it's just that the list is HUGE (133,182,309 domains handled just by VeriSign (.net and .com) as of this writing, supposing an average of 13 byte-width characters per domain, that's almost 2 GB of just domain names, not to mention the associated information attached to a domain entry) and bandwidth costs money. You can request the zone file from or sign up as a registrar (to get better access to the zone file) for the individual zone sponsor. Continuing with the VeriSign example, you can look for .net and .com here: $URL$ and $URL$ You can also sign up to access the API of a whois database (usually will cost money because bandwidth isn't cheap), or download the zone file from a site that provides access to their cached copies, like $URL$ Again, accessing said list for each TLD will require its own process. Lastly, this information becomes stale the moment that you download it, since domains are being continuously registered/renewed/expired. This issue decreases the value of maintaining such a list available for download. Addendum: This doesn't begin to cover the case where the DNS servers you (or your intended clients) are set up NOT to serve all DNS records as they are registered with their registrars, or many other cases that would make such a list useless. 

No, ESXi is specifically headless. You could install an OS that has support for acting as a type I hypervisor such as Windows 8/Server 2012+, linux with KVM or XenServer, or run software on top of the base OS to act as a type II hypervisor, such as VMware Workstation or VirtualBox. If you do use VMware Workstation, you can connect to the virtual machines it's hosting via VSphere on another computer, if that's a requirement. 

You need to provide the entire certificate chain in order for it to show up as trusted. Here's the link I got for comodo's instructions on installing the cert chain in apache: $URL$ I got this from $URL$ which flagged your cert as not being trusted in all browsers because of an incomplete chain. 

So, the essential effect of a scheduled outage is to cease polling during that interval, so that the actual outage (caused by planned maintenance) is not recorded. So, to mimic this, you could retroactively delete the entries logged by the poller during a scheduled maintenance that was not included in OpenNMS. This seems to require creating SQL queries to modify the events database. See event maintenance for more information on how to specifically accomplish this goal, as the specific answer will be dependent on specifically the items you wish to delete. 

Like the title says, I've got a Dell M6600, running Windows 7, that connects to the network just fine, I can use it to browse the web, including $URL$ I can connect to it via RDP, it was joined to the domain (more below), no noticeable slowness in the network connection. The issue is that the active networks are reporting Access Type: No internet access, and I can't connect to some things, like I can't activate Office 2013 because "We are unable to connect right now. Please check your network and try again later". No software firewall is enabled. Here's what I've tried: 

The issue turned out to be driver related. (DOH! I forgot to try a different driver version when uninstalling and re-installing the drivers.) The OEM drivers caused the machine to have the "no internet access" symptom, and using a driver straight from Intel resulted in the system functioning correctly. The system is a Dell M6600 with an Intel 6200 WiFi card. The issue returned after I installed the WiFi driver from Dell, and I had to do a system restore to get the issue to revert, then install the driver from Intel, and the WiFi worked, as well as everything else. Thank you everyone for the excellent suggestions! 

(These were the only two versions I found on my network at the time of removal) Now, in WSUS, I’m still seeing these as being installed, and when I look at the machines themselves, I found the following files on the computers (there's a tab between columns): 

As an aside: you can further reduce the number of alert emails from a given system by using one script for multiple triggers by passing arguments/flags into the script to indicate the source of the issue. You'll have to keep track of the last alert time on a per issue basis (one way to do this are to keep the source/timestamp pairs in a dictionary/hash table and save the object to a file using Export-CliXML and load the object with Import-CliXML), then you can have the body of the email be a summary of all current issues reported in this manner. 

Compile the above and run from a command line to get a list of valid cipher strings for your system. 

You've got this set up to listen to , not . won't match , since there aren't enough s in the host name. 

The PowerEdge 2850 is a silly beast for OS installs. The easiest route is to use Dell's System Build and Update Utility. Boot to it, that'll help you set up your system so that you can install Windows on it. This one here is compatible with a 2850 and Windows 2008 R2. Someone on the Dell forums was able to get 2012 up and running on a 2800, which someone in the Spiceworks community was able to replicate with a 2850 and 2012 R2. These methods are not supported by Dell, so your mileage may vary. 

So, I was just reviewing my workstations for software they're not supposed to have, and came across traces of MSXML 4.0 still being on some of my machines. These are all Windows 7 machines, they had MSXML 4.0 installed on them and I issued the following commands to remove it: Uninstall MSXML 4.0 SP2 (KB954430) 4.20.9870.0: 

The trick here is to not have Windows Update do the install via the Automatic Updates mechanism. You can set it to automatically download, but for automatic installs, there's no way to stop the reboot timer from triggering unless there's a user logged into the system, such as with the No auto-restart with logged on users for scheduled automatic updates installations policy. Since this is for servers, I'm going to assume that this is not the default case, and that nobody being logged in doesn't mean the machine's resources aren't necessary at the moment. Set up a scheduled task that will trigger the install of the updates and report when the updates are finished, or some other action, so that you know the computer is due for a restart. I very quickly modified the script found here to suit your needs: 

I would set up the Action of the task to "Start a Program" instead of "Send an e-mail". The program to start would be a Powershell script that does this: check the time of the last alert sent, and if the last alert was more than 15 minutes ago, send a new alert using Send-MailMessage and update the last alert time. You can store the last alert time in a helper file next to the script or somewhere else. Example script: 

The registry is also littered with references to syswow64\msxml4.dll and syswow64\msxml4r.dll in the following locations (“\…” indicates several subkeys contain references): 

Put the server in drain mode using the web management interface. That provides the exact functionality you're looking for. 

I get 0x800F081E as a return code, which isn't a Windows Error Message, so I think it's either a message from DISM or WIMGAPI, from what I found at $URL$ Restarting the system after receiving this error code results in a successful installation on all systems in testing, so I've flagged this return value to tell the Windows Update Agent that the system needs a reboot if that error code is detected. I just don't know what this message is supposed to be telling me, so I don't know if there's any action I need to take post-installation, or if I need to modify the command to make it work better.