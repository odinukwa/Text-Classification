Guard Clauses You can save a level of nesting by using guard clauses. In this case, it just means removing the else: 

Naming You use in multiple places as variable name where it doesn't really make sense. The variable doesn't contain multiple forms, but actually multiple document names. This naming also leads to the odd to read loop. Instead, you should name name these variables (in , , and in the view). 

To protect against CSRF? Yes, using an anti-csrf token is the recommended way to protect against CSRF, and you seem to be doing it correctly. Although you should note that just one XSS vulnerability in your website would make all CSRF protection useless, see this article I just wrote about bypassing CSRF Protection via XSS. Although I'm assuming that either your instances of this object are not reused, or that you set to false/call when appropriate? Misc 

Now it's explicit what this function needs, and you can even use it outside of a specific request (eg when testing). It does accept quite a lot of arguments, but if you want to reduce the size, you need to do it right: Combine variables that logically belong together. Eg host and port could be part of a URL class. Formatting / Cleanliness Your formatting and code cleanliness is pretty good. Your code is mostly consistent and well formatted, your variable names are understandable, etc. A couple of small points: 

Profiling The first thing I would do when I have performance problems is profile the code, to see where the problem is. Profiling is not hard to do, most IDEs come with tools that can do it. There really isn't a need to optimize code that isn't responsible for performance problems, especially because faster code often is less readable. Most of the things I mention further down might decrease the readability of your code, and you should profile all of them, because it's hard to say what will actually help and what will not, because it's hard to predict what the compiler will optimize, etc. You will get better profiling results if you extract some code to its own function, eg the code that adds indices, the code that adds vertices, the code that creates the actual mesh, etc. If your worried about the additional overhead because of the function calls, you can remove them after you profiled the code. Unnecessary Checks in Loop You perform some checks more often then necessary. When you have three nested loops, checks that only involve the outer loop can be moved to that loop, so they are checked less often and you avoid going through the inner loops. You shoudn't overdo this though, because the extra variables might cause performance loss, and will lead to harder to read code. For example, you have this check in the inner-most loop: , but x is only dependend on the outer-most loop, so if x is for example -1, you still walk through the y loop, and through the z loop, which isn't necessary. So you could rewrite your code as: 

Yes. Generally, "routing" describes the process of mapping URLs to code in some form. The standard example would be mapping a URL to a method of a controller. On the other hand, "rewriting" doesn't map a URL to code, but maps a URL to a different URL. [But both terms are often not 100% clearly defined, and are sometimes used interchangably] Security: DOS If I visit your directly, without giving any parameters, I get an infinite loop in . You shouldn't need a while loop here, replacing the script path without the index.php file name in the request parameter should do the same thing. Security: Directory Traversal Your file is likely open to directory traversal and LFI in Windows (I don't have a Windows machine to test right now, but using should work). With current PHP versions, it is restricted to PHP files, but it should probably still be fixed. Correctness: URL encoding Because you use , the values you get will be URL encoded. So if I visit , I would get instead of the expected result. For the example this may be fine, but it will likely cause bugs in the future. Do note though that the URL encoding is currently all that protects you from XSS (and that the encoding happens client-side, so you should not necessarily trust it). Approach If it's just about mapping to , I would probably use Apache URL rewriting exclusively (I'm no expert, but it should certainly be possible). If you want the URL routing functionality, I would probably go with a more extended approach, which lets me define a whitelist of allowed URLs, and maps them to a controller method. 

Input validation You shouldn't just change the user input if it is wrong. If a user calls they will expect to get number between and . But that's not what they will get, because their assumption is wrong (your random number generator only generates integers). A user should be informed about this, instead of just silently correcting their wrong assumption. Regarding : Are you sure that there is a performance problem? Because it doesn't seem like it (instantiating a new RNG is something that probably isn't done all that often), and the code is quite hard to read because it does too many things (changing data and comparing data), and it uses tricks (shifting instead of casting), which is generally not recommended, as it hurts readability. Array Generation This: 

There certainly is. Not only is your current code quite difficult to read, it is also difficult to maintain. What if a seventh content type is added? Just copy-pasting isn't a good idea here, as it can quickly introduce bugs (which probably already happened, see below). It will also make it very difficult to see if the content types are actually all treated equally. The first thing you want to do is introduce a new function to get rid of the duplication: 

Input and general structure Right now, the only possible way to use your class is via the command line. This makes testing really hard. I would change your function to a simple setter, and read the word in outside the class (somewhere in ). And in general, your class should only transform words to piglatin, not also print and read. I would move to as well. And your public interface for is quite hard to manage. I would make all those methods private, and then either create a method, or just call them in . I also think that you could merge some of the methods. At least and could well be in one method ( or something). Your naming is sometimes not very precise. For example, also adds , which is unexpected. 

Performance You didn't post the code, but I would assume that it interacts with the database. Is this call really necessary? You don't seem to use the result. But if you do need it somewhere else: couldn't you just retrieve the id in the initial query? Have you tried storing the path to an image in the database instead of storing the whole image? As to your main query: is quite slow. Check out this question for faster solutions to select random rows from a big table. If you google for you should find a lot more results as well (for example here). Also, do and really need to be different tables? I don't know your whole db schema, but it seems that it could all go into the same table, thus saving you a . Misc 

Functions Some of your functions do too much (see Naming). I would for example extract the filtering from the setting of the username. Another example is your constructor, which is very long and nested. I would at least extract the database check to its own function, as well as the cookie check. Reduce nesting In addition to extracting code to functions, you can also return early to reduce nesting. For example: 

I think you get the idea. It would be better if you would catch those exceptions, report the problem to the user, and ask for input again. 

When you fixed the issues mentioned in the answers here you should post a follow-up question which contains a bit more code. Right now, I can only guess how might work (where does the data come from? how does model store it? how does insert actually work with real data?). 

I would also think about restructuring your enum, so that you can write the much nicer . This would also allow for easier addition of other objects than rock, paper, and stone. I would also probably move the counting of results outside of (because it's not playing, it's counting). Either move it to the calling class, or - for cleaner code - create a separate class, which contains all the code that's currently mixed in with (such as the initialization, the adding, etc). Something like would be a lot nicer than . 

This would load and display the remote file xss.php, which would lead to XSS. For better solutions, see eg here. When outputting images, you should use the image output functions such as , not generic file loading functions. 

You should still be concerned about it. Passwords aren't hashed because you assume that the hashes are readable, but as second line of defense, in case the passwords do leak (for example via a backup, LFI, etc). 

You don't really need to. It's a very simple method, I wouldn't expect any performance problems with it. If you really expect performance problems, you could save the result of and in a variable. 

It's a bit more work, but it's readable, well structured, and provides additional security; filtering input should never be your main line of defense, but it is highly recommended as defense in depth (depending on the input of course; some input you want unaltered, which is why the method is there). Misc 

You could make players register, and require authentication when submitting/retrieving the highscore. Then you can limit the amount of retrieving. 

You only use $integer in this one place, so just get rid of it (you can add a comment for clarity if you feel the need for it): 

If you always need the pressure, you might as well calculate it when loading the object (as the object wouldn't actually be complete without it). Otherwise, I would just set the value, returning it is unnecessary and may be confusing. 

If you still want to have all the power of a class instead of an enum, another solution would be to use a map: 

Your function seems to do too much. Handling input from three relatively different forms in one function isn't a very good idea. If you extract the handling of the forms functionality, your code would be a bit cleaner: 

Sure, the code is ok, but it's not going to be the fastest way to reverse a string(*) (I'm assuming performance is not the main concern here). Temporary Variables You don't really need the two variables, you are using them only once, right on the next line. Just write: 

@janos already gave you great advise about unit tests and using regex, but assuming that you cannot use them in an interview, here are some more comments: Long variable names I really like descriptive variable names, and yours are quite clear. But I think and are just as expressive, but shorter. Extract strings to static fields It's always good to extract repeating constants to fields. In this case it would be especially good for the decimal point, as a lot of languages do not use , but instead use for numbers; so a field would make later adaption a lot easier. Early return You can save one level of nesting by just removing your , it's not needed since you are returning in the if anyways. char to string would be simpler than to make a char to a string. repeated call to is just a simple array access, but still, to save repeated function calls, I would save it in a local variable, as you are accessing it quite often. Combine statements You have quite a lot of statements, a lot of which could be combined. For example: 

I think that your feeling is correct. I could for example imagine multiple usages for the function , but the way you are writing it, it can't really be reused, as it needs the value to be set. Ideally, the signature would look like this: . I also just noticed that it doesn't actually get the user, so which then returns true or false would be more fitting. 

Error Handling Returning false isn't a great way to handle errors. The calling method has no idea why the code failed, only that it failed. Throw exceptions instead. Also, sometimes you don't even return false, but just ignore errors, which makes it really difficult to find bugs. Functions Your functions look good to me. Their scope is narrow (most of them either load or save stuff), which is how it should be. You could further improve your code structure by putting these functions in appropriate classes. For example, and could either go in an class, or in an . Naming Don't shorten variable names, it makes code hard to read. , , , , , , and so on are very unclear. 

This would be a lot easier to read as it is clear what each argument actually does. Functionality Your method should be able to deal with setting multiple fields at once. For example by accepting an array of records and set_values. Structure Your update method shouldn't create a new pdo object on each call. Instead, reuse the same connection for all queries. Your method should also not echo. It makes it very difficult to recover from errors, or to control what a user sees. Throw exceptions instead (pdo can actually do this for you with so there is no need to check here). Your method should also not change ini settings. These should be set in some configuration class. With this, your method may look like this: