In that way the client also know from the return value if the record actual exists (but maybe deleted) or not (null is returned). 

Below I've reentered all your code with some inline comments and modifications (All begins with // HH or // HH TODO): 

Secondly, if the check of all masks follows the same pattern as showed, you can create a mask checker method like this one (in C# 7.0): 

All that said, bubble sort is not the most efficient algorithm, so if you have large data sets to sort I will suggest other more powerfull algorithms like quicksort, mergesort, heapsort or combsort where quicksort and combsort maybe are the easiest to implement (they are all well documented on Wikipedia). 

I assume that does not return a possible duplicate url-friendly title or else you maybe are positively redirecting to "Index" having a duplicate url-friendly title set on the model because is not checked for duplication before returning. 

2) The Set() method is strange for a singleton class since the ObjectService argument will always be the same (that is the whole idea of a singleton class): 

First of all I'll upvote the question for the effort. You split the problem into subproblems and you show good understanding of C# idiomatic as well as general programming skills. On the other hand I think you overcomplicate the solution, because your general analysis of the problem is a little too "chessish". Instead I would try with some kind of "mathematical" model: 

I can't see the necessity of the type parameter TException as it all works on base Exception? This has an unnecessary if statement as you have just instantiated the text object, so its length will probably always be 0: 

The core of your search algorithm is OK except for one thing: The while(true) loop will run forever, if the searchingFor is not in the array. In addition you should organize your code properly by separating functionality: test input/output in one function and the algorithm in another: 

Nice and clear code - a couple of things though: The total number of occurences (the sample size) is constant per input string: 

As a follow up to this first attempt to create and use my own implementation, this is version 2.0. The goal has been to correct the code where there were conceptual misunderstandings and to take the issues pointed to by answers into account. The overall concept is the same: A scheduler that can fire off jobs when they want to be in intervals as small as one second. Instead of using a timer, the Observer pattern is used by implementing an type, that notifies subscribers each second. The Scheduler 

The above algorithms is an implementation of this expression. A more literal version should maybe be: 

I think your solution is quite OK, it is doing what you want it to do. You can sharpen the if-statements a little by using for all but the first, because an animal can only be one kind. Alternatively you can experiment with a -statement instead which will make the code more clear. By the way: you don't need the flag for cats () because it's the 'lowest' level of animal type. You solution with a switch statement instead of if's: 

Below I'll comment on the xaml. First of all: there are many ways to do things and we may all have our preferences, so the below is my way: Position of controls: in general do not use margins to position controls absolute in the window. Instead use the grid with appropriate column- and row definitions. For your MainWindow it could be something like this: 

There is nothing much to say about the implementation of the algorithm itself. It seems to be a fairly one-to-one implementation of the pseudo code and it looks rather functional to me. You could though avoid all the argument declaration if you change a few things in the functions as shown below. Beside that I prefer to encapsulate recursive functions in a wrapper function but that - I think - is a matter of taste: 

Overall your code does what you intend and that's a good start: to print a diamond with numbers. The first improvement could be to handle an "arbitrary" sized diamond: 

To me it is much cleaner. IMO the type definition of Instructions do more damage than good resulting in an unnecessary double match in and . I think it's a good idea to extent the keypad and use it for validation of a step. My solution would be something like below. The concept is to think of the keypad as a coordinate system and then convert the result point of each instruction sequence to a key in the pad: 

That said I think both solutions suffer from a generation problem (I'm not a GOL-expert so I may be wrong): 

I've tried to review your code, and I have the following comments. Pro: All in all the code is well structured and the naming is easy to understand. The comments are helpful The separation of user interaction and processing is good Contra: Missing 

The only caveat is (as others have pointed out) that you don't check the before you start walking. That could be solved by using in a way like this: 

As others have pointed out, your algorithm is very inefficient. Especially if the size of the columns vary widely: 

Dispose There is no need to implement IDisposable since the only kind of owned object type is HashSet which is not disposable. I suppose that the object classes aren't disposable since you don't dispose them here. 

1) You should never use in a statement. Instead use or create a dedicated and use it in the statement: 

The first thing I notice is the somewhat misleading method name . I would call it , because it only checks if i is a factor of number - not if it is a prime factor. 

This does not ensure the loop running at least the size of the array, in fact it maybe not run at all. You should probably do something like this: 

When determine if a number is a prime, it is only necessary to check primes up to (inclusive) the square root of the number: 

I'm not saying the below revision is an improvement but it has eliminated the need for . The penalty is to have the index as a separate argument to which violates the idea of a state object. One could argue that the index is not a part of the (splitting)state but just an iterator variable and then everything are nicely justified again :-) 

This is great work and very useful. I have the following comments/suggestions: 1) The usual suspects: a) should/could be: 

Both of your algorithms is rather limited in use due to the -conversion, but you could change the fast version to something like: 

In large I think the sort function is right out of the book of bubblesort. IMO your naming is a little overdone. The long names are for an inexperienced eye hard to read. The ascending and descending sort loops are essentially the same except for the direction of the comparation, so no need for backward loop or special temporary variables etc. The swap mechanism calls for a swap function. All in all find below a revised version of the sort function. 

When it comes to Object Expressions as a mock for testing, I haven't found a valid approach in this case, because you can't extend an OE beyond the type you "derive" from. For instance the below straight forward solution is not an option: 

From this mathematical model and analysis it is very simple to calculate the result. Some comments on the code: 

As I see it, you're producing relative paths to the initial root path. I think, it can be done a little more easier in a way like this: 

I don't like the concept that you have to chain the -calls for every property you want to modify in the copy process because you create a new instance for each call. A simple non-generic solution could be to use the and named parameters: 

As stated in the comments the whole thing can be boiled down to 3 lines of code, if you use the framework: 

This will cause your algorithm to check 39996 numbers (= column heights) for no reason. So a minor change in your code could make it a lot more efficient, although it isn't still a very efficient approach: 

All in all All in all I would implement the class something like this (without any threadsafety considerations): 

I use , instead of IList/IEnumerable because there are at most 7 possibilities, so it is IMO a convenient way. 

For some kind of fun I've replaced your byte array with the buildin BitArray (as mentioned by Dmitry) in you class just to see the effect (it seems to be slightly faster). Further I've tried to implement the sieve algorithm as linq based. It all goes like this: 

Your code does not read numbers from the "console until input isn't a number", but reads 100 inputs strings from the console and returns those that can be converted to integers. If you want to read numbers from the console "until input isn't a number", you could do something like this: 

Anyone (?) could change these parameters on objects placed on the history stack. At least you should restrict and to be private settable only. 

However none of the solutions are very performant if diamond size is increased (> 2000) due to the concatenation of strings. In that respect a good old iterative solution is preferable: 

Analysis Basically you want to compare two sequences of numbers index by index. If they differ then save the target value, if not then increment to the next value of the input array. The index of the target sequence (here from min to max) is always incremented. Instead of the target sequence you can just increment a value starting from and ending on . All in all it could be done something like this: 

I'm not sure if I would have the _index as a class field. Of course it determines the state of the object, but since the Dump() is a one time event and the state is useless afterwards it isn't really to any use to have it there. The result of having it like that is that your WriteAscii() gets unnecessarily "complicated" and in fact needs to "violate" the state as it must backtrack. Instead I would suggest a WriteBody() as something like this: 

Overall I think your code is OK, you have done some good thinking about the data structure, workflow and user interface. I like the command pattern. I have the following comments: 

The "Counter" This is essentially the same as the previous. It notifies observers for every second and act fundamentally seen as a timer. 

As it shows, I have made the function generic (and guessed that cache is a Dictionary?). The last irritating comma (',') is removed by . 

A chessboard is an 8x8 matrix or coordinate system. A chess field can be converted into a matrix coordinate set (x, y) by: Two fields are on the same "diagonal" if their offset has equal length in x and y: 

Actually you can have anonymous types as parameters - called dynamics - but IMO it's not pretty (and probably rather slow): 

Some minor points: 1) You don't really need the variable, so just do the math in the call to TryGetValue(). 2) If are all positive you may the loop if . 3) It is stated that there is only one solution per input, so you can skip the check . This will never be true for the nums that add up to the target. As for the rest of nums it doesn't matter. 

First of all: your function naming is confusing in the way you use singularis/pluralis (-Record/-Records). They all returns a single (or null) object so stick to -Record. I would not filter the records by DATE_DELETED_DTE, but leave it to the client to check the returned object (for null and deleted-flag). That's because if you provide a function with the indclude-deleted-flag the client will have to check for null and/or rec.DATE_DELETED_DTE == null anyway, and he/she is not helped at all. So unless some clients are not allowed to access deleted records I'll suggest the following: 

I can't quite figure out in which situation you would use and in which . and what the difference really should be. I made some tests and overall it seems to work. I did though find the below strange behavior: Testing with these two values: 

2) The names sumI, sumJ, sumK are somewhat misleading because they aren't sums. Better names would be valueI, -J, -K 

is IMO not an appropriate type in this domain. I would use or maybe If you for instance run the following test, both and runs out of range: 

The latter is not meant as a better choice, just an example of another approach. The caveat is the inner list object. 

Shifting 500 positions is essentially the same as shifting , so you could consider any shift to be done in two consecutive alphabets (A - Z A - Z): 

I think there is a little problem with the performance of your implementation. When the number of elements increases (> 8 - 9) the time the algorithm uses to calculate all the permutations growths significantly which causes an "unbearable" delay before the permutation can be used (the function returns). The problem is that the function returns a list of lists, and the solution is to change it to return a sequence of lists as shown below. 

In contrast to radarbob I find a StringBuilder very useful in this context. Your code produces something like this: SELECT * FROM rw_db.v_sys_users WHERE 1 = 1 AND = @status AND((user_empid LIKE @param1 OR user_firstname LIKE @param1 OR user_lastname LIKE @param1 OR user_username LIKE @param1 ) AND(user_empid LIKE @param2 OR user_firstname LIKE @param2 OR user_lastname LIKE @param2 OR user_username LIKE @param2 ) AND(user_empid LIKE @param3 OR user_firstname LIKE @param3 OR user_lastname LIKE @param3 OR user_username LIKE @param3 ) ) which looks ok to me (except for 1 = 1 :-), but are you sure you want AND between the OR-sequences? I would say OR was a better choise. Below find my rainy sunday afternoon version with some inline comments: