You can access (a ) with like you would an array. So no other code needs to change (you just need any or calls). So you have no memory management calls and thus no headaches with leaks. Now a nice bit is you can replace with and it checks to make sure you access to the array is in bounds (and will throw an exception if not). This may help you track down your error. Initialize srand() one You should only initializre the random number generator once in a program. 

and just use where you use There is no need to have two versions of the function just use default parameter values. 

Design You are obviously not using classes (as this is a free function). This means you are exposing the implementation details of the linked list to the user. This is bad as you can not guarantee any of the invariants of the list. Invariants: 

Declaring variables using the comma is lazy and considered bad practice, but you should also use more descriptive variable names. i/j/k do not explain what they are being used for. Also if you function is longer and you need to change it looking for all instances of a variable 'i' may take a while longer because of all the false positives on a search so maintenance wise it is also a bad idea. There are a couple of edge cases where the declaration can go wrong. So in general it is just best to stay clear. 

There is a reason that the standard namespace is called and not . Its to make it easy to prefix things without bloating the code to much. Importing everything from the standard namesapce into the current context is very error prone and can cause problems in larger programs. Don't get into bad habits now. For details read: Why is “using namespace std” considered bad practice? Wide Strings 

For any combination of 3 letter words the distance between any hashes can not be greater than 78. Without doing any analysis I bet the distribution of 3 letter words is actually normal so a whole bunch of words have a hash within 12 places of 234. Writing hash functions is hard to do well so don't. Pick a well known one and use that. Building your own dictionary You use your hash function to build a dictionary like object using a vector. A couple of problems with this. But the main one is that clashes are not correctly resolved. Each entry in hash should be a list (so you can handle clashes correctly). Also 53 is rather a small size (though it is prime which is nice). But there is already a dictionary like object in the standard library. or . The first one builds a structure with the same access characteristics as a balanced binary tree. The second one has access characteristics like a hash table. You can choose either and it will work fine. In your node object you store pointers to the other nodes. 

In C++14 we added and functions to make the above more generic and work with arrays as well as standard containers. 

Edit (based on the large number of additions) I am re-writing this: General Notes: You should add header guards to all your *.h files. Vector.h Don't like your use of string conversion methods. Very Java like and not C++ like at all. Prefer to write stream operators which are much more versatile. 

Using is slightly different from anything else. Your code is fine here but for more complex classes you need to make sure you use the correct swap operator and to do this you need the compiler to perform type dependant look up to get the correct swap function. 

Not sure what the best is. But if there are any writers waiting then I would pause readers (no new read locks) until the writer has got and finished his job. But that may starve readers (especially if there are a lot of writers). So some way to configure the lock behavior to decide how it should behave. 

Yes you can either do some work with templatizing the iterator and then defining a const and a non const version from that. Or you can define the base class that knows all the iterator movements and then have two derived types that provide the accesses interface (one class is for const the other non cost interface). 

This should modify and immediately return the changed value. Since you have modified the current value you can return the value as reference rather than generating a copy. This is the post-fix version. 

Well we know that unsigned have a particular size . So we know that the max size of the array is . On most systems this will be on some it will be . But neither of these numbers is huge why not always use the maximum size (it will save you the time of calculating an exact size. You can also get away with no dynamic memory allocation by having a static array in the function (not thread safe but it does not look like that is your issue). Others have suggested replacing the by . DON'T do that (unless you think it expresses intent better). It hides the intent of the code. The code is supposed to express the intent in the most natural way possible. It is the job of the compiler to see that this can be optimized to a shift by 4 and I am dead sure the compiler will generate the most efficient code. 

Now all you need to do is define the relationship between elements. By default will use the to do comparisons but you can define your own comparison operator if you want a non standard way of determining max. If The type of (which holds your int/float) pair is actualy typedefed to then this is the default behavior. 

But why are you dealing with this. I would use a it deals with all the memory management issues for you (and your post id tagged C++). TO be honest I have trouble following the rest of your code. 

Yes. As noted above the compiler can not apply certain optimizations when a member is marked mutable. 

But when the object is destroyed currently you have to manually destroy the elements by calling otherwise you will leak these nodes. You should set up your destructor to call delete to make sure this happens automatically. 

I think a triangle is really better represented as 3 points. What if A and B are parallel! This also makes several of the other methods easier to write. It seems like you be able to get the distance between two points by subtracting them or a distance method (thus you don't need to expose their internal representation with getX() and getY()). It's OK to write a print method. But you should proably also provide the output stream operator. 

I would also note that you missed the move operators. Move semantics can improve the performance a bit as they avoid copying in a couple of situations). 

There is no indication that anything was removed from the list. There is also the possibility that might be multiple objects in the list that match the input requirements. So even if you remove one item this does not mean there does not exist an item with the same properties. Here you have two options: 1) Add another bool parameter (that defaults to false) to indicate that all matching items should be removed from the list. 2) Return a boolean that indicates if anything was removed from the list (this allows the user to manually loop until all matching items have been removed if required). In method again I would have used a for(;;) loop. You can also do one small optimization by not calling Call() on the actual head node (as you using sentinal that does nothing no point it calling the sentinal). 

You will see this pattern in most languages. The read is always part of the test to see if it we do something next (do work/enter a loop). You mention you know it is a resource problem 

Another potential leak. If realloc() fails then the original buffer is not affected. So you will need to release it if you return NULL. 

Again the only use is do tests and fiddling that should be part of the responsibility. You should send the transaction to the account which may reject the transaction if it fails any of the account specific validations (ie you can have a negative balance). Like this.