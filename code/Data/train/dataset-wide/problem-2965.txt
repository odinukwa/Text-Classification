I don't know how your regex looks like but for simple pattern with wildcards you can use the second parameter 

You shouldn't check the for . You should prevent it to be a at all and check the parameter passed to the constructor. If you however still want to do it then consider this: 

For someone like me who's worked with real events before it's very weird to see that you use the keyword but instead of using the or the generic you use your own delegates that have a different signature then the expected one: 

I also prefer the PLINQ solution showed by @CharlesNRice but as far as clean-code is concerned you could change a couple things. 

HTTP-Request-Headers configuration This new and immutable class allows me to chain http-request-headers configuration for the . 

The code is actually a TemplateBuilder. We have 2 different templates, French and Dutch. We need to change the template and then convert it to PDF so it can be stored in the DB later. The main method is . What am I looking for? 

So with a small refactoring you create a class what could be good for multiple users application. Other advantage is you can call the method multiple times, where in your setup this was impossible and even dangereous. Naming your class : A class is just so poor chosen. If you see a class name like that, what do you expect what's in it? It could be Utils for Strings like StringUtils or more like MathUtils? As you see at this name, you already know what to expect from it. A better name could be Constants : In android there is a class who have a lot of constants. In stead of doing this : 

The solution with a is definitely an improvement becasue it reduces a lot of repetitions and gathers all regexes and replacements together but I'd like to point to one flaw it might have. I don't know if it applies to your use case here but you should keep this in mind in case you should want to use this technique for something else. A does not maintain the order of its elements (See: Why is a Dictionary “not ordered”? . This means if you had a long list and wanted to have the most probable cases first there is no guaratee they will stay in the same order as you added them. 

If you really create a list and prepend more items to it right away in the next step then combinding the the constructor with the collection initializer is another option that might work for you: 

First of all you make 1 big fault by saying that your classes inside are private. They aren't, they are , more info on site of oracle. Then, let's start with the enum. Your is also package private. => change them to private. Your getter for the code is also a little off the normalisation, let's try to call it . Final result could be : 

You do not check if qc is null, what is possible when you get an exception. You have 2 options for this. 

What the hell? I hope this is old code created by resolving problems because otherwise this is actually your biggest issue (In mine personally insight). For the moment you check if it's equal and then reverse the result. There is nothing wrong with just checking for not equal : 

It's not a good idea to change state of the class the way you do it here only to return the field as a result: 

I agree this is the right type of the exception but I preferred it checking each value separately to give the user a hint which one of the parameters is incorrect. 

Additionally I want to be able to use the value without effort thus the implicit cast operator so that I can put the wrapper where I usually use the actual value and the compile will figure out the rest. 

This is not thread safe. Should you ever want to use a single instance of it with multiple threads they will overwirte each other's work. Most of the fields could be local to the functions making them pure ones and thus much easier to use and to maintain. 

As long that entity isn't saved (have an Id), I don't show the tab. In mine application I work MVVM so it's a little easier there to notify the GUI when an object is changed. Note: For the 2 solutions : the tab is always rendered in the dom 

This field could be because you set it in the constructor and there is no setter for setting this at a later point. LogFileFunctions.java Javadoc preffered 

You are in a while loop so your loop will continue as long is bigger then 0. So I'm guessing you inserted that code for the last bottle. You just have to change : 

Implement more methods to reduce method complexity Like I already showed you with the switch case, make methods what do less things. This reduce the complexity of your method. Readability of the code comes higher and troubleshooting goes easier. 

But more globally, combining these two elements is wrong in general, because will always fail on the directory. Have return a pair, and only call on the files; for the dirs, just print them. Finally, is misspelled; it's . 

when there's no way for this code to be run any other way; it parses its command arguments from the arguments of the invocation of Python. This idiom is used to distinguish script behavior from module behavior, and your script behavior is all over the file. If you want handle_files to be useable as an imported function, you'll want to pass it all its arguments, and you'll want the option of not processing command line arguments. So really, all your command-line argument processing should be inside the conditional instead of outside - that is, assuming you want to be able to import this module as well as run it as a script. If you don't care about importing it, don't use the idiom. If you're interested in importing as an option, you also won't want to call sys.exit() in any of your module-level code (e.g., the function). Raise an error instead, and when you're running the module instead of importing, catch and exit. I don't see the reason for the cmd_args() function. It's called once, and it creates module-level information; why should it be in a function? On the other hand, I don't like the references to the globals all over the code - a special no-no if you're worrying about using this module by importing it. If you intend to import, my preferred organization would be: 

The last part to change is the . It needs two constructors. The default one that the designer needs and another one that requries a level and that you can use at runtime to create the form for the chosen level. In this new form the (this needs to be fixed) method raises the event so that the implementation can handle it. It is passed a new type of : 

I find you can keep it really simple. For the sake of the example I removed and renamed some properties. It should just demonstrate the sample solution - not your final one so I used simplified objects. 

Create a new panel control with a picture box inside (you can create a property for it so that you can set the image later). In this control you can implement all the logic that should handle the resize. Give it a few properties that you can set and calculate the size and location values dynamiclly and internally. Use a flag (like ) to track whether a panel is in its normal or enlarged size rather than hard coded sizes. Here you can handle the event and take proper actions to modify the panel and the picture box. 

This is a nice example of magic number. It's better that you create at least a for it, but even better could be the possibility to change that value by a property file, with a default of 1000 if the property isn't there. Like this you could give the users easily control that value, because in mine opinion there could be people who want it slower or faster. To the infinitive 

It's cleaner code who saves a little amount of memory because you don't need to recreate the every time you call the method. 

The is for a testing purpose and to show your code works. A JUnit should be better but oke I can live with that for an test. You init the object like this : . This is actually a good start, but then you go so off. You need to implement a . The class should return you an array with the maximum sum, and this you could print out in the main. 2.Sum of int's is should never be an int. When you are counting int's together you have to take care with the max and min value of int. If your array has 2 values but both max int value, you will have an overflow. So it's better if you declare as long. 3.Scoping variables