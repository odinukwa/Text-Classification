Return a String instead of printing Instead of your method being make it return a and remove all the from it. Then from where you call instead do . This limits the side-effects of the method. For tiny programs this is not a big deal but in larger projects knowing exactly what a method will do is very handy -- especially if the method is what is known as a "pure function" which means it literally has no side effects and its output is directly dependent on its output. Consistent formatting In some places you have spaces before braces () and in others you don't (). It's less important whether or not you use them than how important it is to be consistent. Personally I put spaces before them. 

I recommend this, but it's ugly. I'd like it better if the throwing was at the top, but it's a trivial change you can figure on your own (It makes sense for all preconditions to be at the top). 

Everyone has commented about how to better replace the spaces, I will answer how to better test. I suggest making a proper unit test with Junit. This way you do not need to manually look at your output, you can simply run the test and it will tell you if it failed or passed. Unit testing is extremely crucial in a professional environment and is a very important skill to pick up early. (The below assumes your class is named .) 

This is worse. This is like saying . If you're set on leaving some comments it'd be more beneficial to leave some in the other methods with more logic involved like the method. 

The idea is simple, most people have some one directory containing all their projects as subdirectories. When you are in the top directory and you run this script like so it will run the command in each of the folders. I have another script called that fetches all remotes and fast forward updates them which I usually run each morning with this script. 

For a first try in Scala, this code is a nice attempt. There are not so many rudiments of imperative style programming, which are usually frequent. It is also quite concise and structured, which produces a good overall impression. However, there are of course a few things to adjust and to improve. I'll divide them in two categories: 

If we are speaking in terms of Clean Code, the entire method should be revised. Here are the main points that I can criticize: 

(either from or ) is THE object to use when you need to dynamically construct a String from numerous concatenations. Readability contains a terribly complex filtering condition and unnecessary s. Slightly changed: 

!? Be very careful with calls. Are you sure they are necessary in this code? Wouldn't there be a risk to break the applications of the users of this code? , if not in method, is generally a bad practice. 

The Question The approach is acceptable and it's perfectly valid to use a method like . But it shouldn't return an unused and can be : 

Equivalent of the original condition: we take only that match the required name. Each item is wrapped to a , which is a subset of the resulting map. Transformation of the stream of Maps into a stream of . Concatenation of streams of Sets into a single stream of . Unfortunately, we cannot join s so easily, that is why there is this intermediate transformation. Finally, the stream of entries is collected into a representing the result of the sequence. 

Yes, there is a cleaner way. Since you are using Spring, please check the annotation and the class ResponseEntityExceptionHandler. To handle exceptions, you'll need to extend and manage the returned in a method annotated with , for example: 

But I'm not sure that from the point of view of design it's a good solution, because it looks like a violation of LoD. There should be a better approach to solve it. 2) the calculation of should be moved into a separate method, which will allow to eliminate the last remaining in this part of code. 

Factory Method vs Constructor In your builder classes you have opted to use factory methods instead of constructors. While this is not necessarily wrong, exposing a factory method generally implies a semantically different operation than constructor invocation. From the Constructor Design guidelines: 

The advantage of doing it this way is that you only need to change the internal implementation details of each service class without it affecting other parts of the system. 

EDIT 1: Corrected code to prevent operators being appended when one already exists. EDIT 2: Added an method to trim off any trailing operators. 

I don't know which variant of MVP you are attempting to use (Supervising Controller or Passive View), but this: 

In this case, I don't think exposing factory methods on your builders is necessary, especially considering that all they do internally is call their respective instance constructors. Naming Conventions Generally speaking, methods should start with verbs. This is especially the case when implementing the builder pattern. As a result, I would remove the prefix from the appropriate methods (e.g. becomes ). This also makes the code more readable in my opinion. Both and have methods. I think the post-fix is redundant here since building a mock is already implied by the name of the class. Unit Testing When unit-testing, the general rule-of-thumb is to only test a single concern. In the unit test you have provided, you seem to be testing three separate concerns since you're asserting against three values on three different objects. I would split the unit test in question into three separate ones. Result DoStuffControllerBuilder 

@dreza's answer is correct. However, my concern is that since constructor injection is not being applied in , I'm going to assume that none of your other services do either. Given this, I'm also assuming that you're constructing your services manually (i.e. and other similar code all over the place). In which case, not only will you have to refactor every service class to accept dependencies via their constructors, you also have to refactor all of the code that uses these services. So to reduce the overall impact on the existing code base, you could do the following with your service classes (with as an example): 

Method signature This may be an unpopular opinion, but I like not using in method signatures and instead using explicit types. It makes IDE suggestions and readability a lot better. 

A short suggestion because no one has suggested it yet. Instead of returning or throwing an exception when the book you are searching for isn't found, you should use . 

It's unlike Java where single quotes are for characters. One exception to this is when using the in Strings, you have to use double quotes for this. 

My reasoning against returning is this: It is never 100% clear if a method will return or not in Java and maybe someone will think this won't so they won't guard against the null condition with . If you return an , it's an extremely clear signal that the content of the result may or may not be present. They still may handle it wrong but at least you can be more certain they know what's going on. My reasoning against throwing some exception when the book is not present is this: 

Note: I don't have much experience with the operator, if or something similar is valid I would prefer that instead of making the variable. DRY is still relevant though! While writing tests like this takes up more space I think it's more important that the test be clear. All that said I don't think DRY is completely useless in unit tests. Suppose you were doing more checks on , like making sure it's not , contains a specified number of elements, etc. I would put all those assertions in a separate method. Basically the assertions that are tangential to what you are testing. For example, you're not specifically testing the list has one element above, the assertion you care most about is that the only element is . You can't really do something like that so you have to assert that the first element is . Anyways, I tend to put these tangential assertions in methods like this: 

"0 is less than or equal to X AND X is less than or equal to 1" Which approach is better for understanding? Naming The function names and are simply too vague in . Their current role is access and changing pixel color values, so their names should reflect it: or . is neither very appropriate. Its role is to choose a pixel and fill it with a calculated color. Shouldn't it be named instead? Also avoid duplicate names with underscores like and in . First, the underscore is not conventional; second, the purpose of the reference is not clear. Should it be called or or other? Design Issues I think that there is a mess about the core part of class, concerning coordinates and colors management, and in function. 

With strict class equality, if another entity inherits from , it would fail to call and violate the principle of implementation. 4) Simplify : 

The methods prefixed with should be renamed to because assertions are what they actually do. The prefix is often used for test cases annotated with . 

The context of this code example is not very clear, so in my remarks below I will suppose that the code is about a generic implementation of depth-first search. 

Avoid Main Logic in Assertions occurs several times and this is something to appreciate. But the general principle is that assertions are used to validate pre/post-conditions or states, especially in dev phase and can be toggled on/off when necessary. They must not contain calls that change the state or pieces of main logic. If assertions are switched off, the main logic instructions passed to will just not be executed and the program will not produce the expected results. With assertions, the following approach should be used: 

However, for the should be kept, since there is no UI element that holds the value. What About Modal Dialogs? There is one important issue concerning the solution that you implemented. Often, applications need to show a modal dialog (that blocks its preceeding windows until the user gives some input). Currently, there is no way to plug the panes as modal dialogs. A solution for this issue could be found by providing the owner object through the s and calling and where appropriate. Refactor the Builders The definitions contain repetitive 

Scope and `translated are only ever used in your for loop. It's important to limit the scope of variables as much as possible. So it's probably better to declare them in the loop like so 

I know this is a small script but I am new-ish to writing Bash scripts and want to learn. The lines seem a little ugly, though they do work. Also I can't pass multiple commands in with a like because the ends the statement in the line, so I am wondering if there's a better way to write that line (or pass them in). 

If you throw a checked exception every single call of this method will need to be wrapped with . Checked exceptions are a pain to deal. If you throw an unchecked exception then you have the same problem of , maybe people don't realize it could happen. So they don't wrap it in a try-block. 

I actually just looked this up writing the answer. You can use a method called on arrays in place of a closure. Documentation 

I am only going to talk about the sports method, from there you should be able to get the info you need for the others as they are all basically the same. DRY isn't a big priority As I said in my earlier comment, DRY (don't repeat yourself) principle applies to production code more than unit test code. I think even in general it's easy to take this too far, readability is important, but that's off-topic. Your code however is tough to grasp. To me, something like the below is more clear. I like to specify "given/when/then" in comments (although usually I do nothing more than , etc.) but it's not necessary. 

The commented out line is basically the same as the but it throws which to me is just more informative in this case than , but it's up to you which you prefer.