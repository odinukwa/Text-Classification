If the cursor is null, you don't need to do anything in this function. So turn it into a guard clause: 

What I see here is that you go through the layers, and turn it into a set of pictures. That's your intention, at least. That's why you do . But then you loop through the layers and just read and write and the only thing is ever used for is ... If it's because of the similarity between and , configure your editor to use different colors for (local) variables and numbers. Also, that function looks like it does a lot of work. I don't know a lot about android, so maybe this is a bad thing to do, but could the drawables be cached? Magic Numbers & Unnecessary local store 

This should be , as the first word does not have a capital. (That's how we easily distinguish classes and methods from each other). 

Seems all you do here is getting a string... from either or . I'd recommend putting this in a separate function... 

Right now? No. But that's more because programming skill is not really the thing an employer is looking for when it comes to entry level developers. Entry level developers are supposed to be able to learn how to program and quickly at that. I guess that from a knowledge perspective, there's.... some issues with the design here. 

You already know that is null. You also know that is null, because that's what defines . So instead, try this: 

What you ought to do is make a copy constructor, then have the "clone" method return a or . That way both internal state is preserved, but simulations are possible. 

This also directly reveals to you when you are unclear. Right now, you've mapped a boolean to and . I have to read both the function name and the javadoc to figure out that maps to . What happens if we add split, and double down? Then we can't be sure that means anymore. For now, revising the comment to 

You should add a bounds check that is not larger than your array, because I don't see that explicitly mentioned in the problem statement. 

So how do we fix this? First, we need synchronization for starting a new thread. At the top of the class: 

That's an unnecessary local store. You don't do anything with the variable, and it doesn't have a name that clarifies anything. I'd remove it, just put the following in your for loop: 

Ahhh, tile based 2D grid layouts. It's an OO problem for sure. How can you keep things separate if objects on tiles need to know what tile they're on and their neighboring tiles and what's on their neighboring tiles? I did a similar exercise and I still need to think carefully about it. I do feel the best solution is the following: Create an enum . Create a class , give it a . Give a Cell a possible (like and ). Give a Cell a so it knows where it is. (see below in "how do we simulate a timestep") Remove a 's and . It's not supposed to know those things. Sharks don't have GPS. 

This bit would make more sense if you kept i as your index. Then swap the statement to get rid of the +1, ... 

It's as easy as that. The trick here is to realize that the points of interest in this case is where things change. And the problem variables don't change per timestep; they change per truck arrival and departure. The problem has even made it easy for you by guaranteeing all the trucks will arrive before they leave and that the trucks will leave at all. 

Additionally, is not yet required for your first if. So leaving that one out until it's needed speeds things up a bit. And since a return statement exits the function, we can use an implicit else: 

Now, that's regarding all the slashes for your functions. In other places, they are down right dangerous: 

I feel your approach is completely wrong. Why load the whole tree structure into memory? Because you're copying the same code over and over. And that turns you into a blind programmer. Instead, try this: Add depth to TreeNode. Add depth to the constructor of TreeNode as the second argument. Then declare root to be at depth 1. Declare an array of int (we'll call it widths). Size 32; you can't get deeper with your syntax for defining a tree. (Maybe you can, I'm not sure how well a list containing 2^32 items will function). Next, parse the list. Whenever you add a new node to the queue, . Whenever you create a new node, pass as the second argument. When you're done parsing the list, . That might be considered cheating though; we're not really using a tree. Anyway. 

This function is special because I had trouble placing the line break, but really, you're doing two things: determining how long the array should be, and then filling the array. So lets extract the first part into a function... 

I like the second one more, it's smaller. Plus, I don't wanna be the one who has to check if the balancing is done right by counting whether this spell has 10 components via a process which includes manually counting lines. From this point, however, you can go pretty much everywhere. Future proofing your schema is hard without fully knowing what data it will have to support, so I'd focus on getting the domain model right and then looking at the xml schema again. 

I didn't look at the specific performance issue you described. However, my general review: Readability 

Pretty close to the perfect implementation. However... Consider the Transitive relation of the multiplication operation: 5 times 2 is 10. 2 times 5 is 10. It doesn't matter in which order you multiply things. So when you multiply, say, 3 by 2, you're just multiplying 2 by 3 again. And the same goes for 5 by 2, 7 by 2, 11 by 2... but also 5 by 3, 7 by 3, 7 by 5, etc. What you'd do in this case is start off at the value of . This solves the issue where you're multiplying 2 with 3 and 3 with 2, thus checking the same thing twice. There's another issue: Now that we're effectively checking in the inner loop on the first iteration, it doesn't make sense for the outer loop to check for on . Instead, you'd want to check for there as well. 

Your code will give you for input 'banana' on the main menu. Of course, if random things like bananas are stuffed into a program, not a whole lot of good will come out, but I think it was intended that there would be an error message, not a crash. 

But you just did an explicit check for ! Did I miss something, or is this comment contradicting the code? Comments that contradict the code represent a conflict, and conflicts should be resolved. Never just delete the comment; carefully check whether the code or the comment is right. 

Defining the here as is causing you some issues with casting. Either define it as a and get rid of the casts, or (I don't know where the is defined because you removed the imports) alter the interface of to include the methods you need. 

That's not the correct way to wait for the . will get called whenever a file has been successfully read, so you can check for there, and call the rest of the function as needed. Right now you're spin-looping during at least partly CPU intensive (base64 encoding) operations. Which is a huge waste. 

Now you get a compiler error because you need to catch - maybe you ought to deal with that in a cleaner way, but for now I'm going to ignore it. 

That way you go to the database once and allow the database engine to optimize your one query, rather than the lot that you're shooting at it. You could do the same with other queries, but you'd have to do some more processing to split the resultset back to something you can work with. 

This could be a function called with an argument for the to add the button to and for the id. Similarily, you could have such functions for the left, right and up shift. That'd greatly simplify your code. 

There's no real need for all those checks if is already true. After all, it's not going to change the variable. So relocate the check: 

There's two ways I quickly see about this; First is just making a list instead of a 2d array. That way you can parse the input as a number and jump to the position in the board. The other, involves numbers as well, but you just leave it as a 2d array, and use the modulo operator instead. It gives you the remainder of a division, so 8 mod 3 is 2. Since you start at 1 instead of 0, you would need to do to get the tile you wanted to get at. Look up . Maybe handle it in the scanner, but beware of format exceptions. 

If you instead converted the Strings directly after reading, you could do input validation per input ("hey, you entered a 2 for your second binary number!"), and you'd save on doing all this conversion. You'd convert once, do the math, convert back 4 times (4 different results), and done. Something like this: 

Comments are nice, they help understand what's going on... but so does the code. Of course replaces things, we already know that the new string is the , and that calculates the length of the string is actually not what it does. You should replace your comments with comments with non-obvious things about what the code does (What does your regex actually do?), or comments about why the code does. Variable Naming Variable naming should be based on what the variable stores - usually its "semantic type". A "syntactic type" would be a String, Integer and so on. The "semantic type" is what it means - "inputString", "validatedString", "splittedString", "stringsToLoopThrough"... some of these are better than others. A semantic type doesn't have to include the syntactic type - you can have variable names like "index", "key", "value", without containing any notion of syntactic type. Usually the syntactic type is inferred, and at other times, it doesn't matter what the type is, just that it's the index/key/value/whatever. Based on that, I think you should name , , , and . seems to indicate a number. But it's a string array instead. A string array containing the words of the . So seems like a fitting name. It certainly seems logical that if you a on a space, you will get words. to is because of two reasons. First, by changing to , we signal that this variable is related to the variable. Second, by pluralizing the variable name from to (or -> ), we say this is a "collection" of sorts. Something which holds multiple values. to is to signal the relationship with . to has two reasons, first to again note a relationship with another variable, this time with . Second, I add the because you have cleaned the special characters out of the original string. The names aren't ideal yet - seems like a bad name, considering it doesn't have to be a , and it doesn't signal that it needs to be cleaned first. 

Is mighty confusing. There is no easily discernible pattern to it. If you had to explain the thought process that went into each step, what would you say? (Teacher, I don't understand, how did you create this?) Here's mine: 

I recommend hitting the auto-formatter in your IDE from time to time. Specifically; before committing to a repository and before posting questions to Code Review. 

Looks like you could benefit from a function that takes an integer as maximum value... and then returns an integer between 0 and max minus 1. Which does exist - you'd simply create a new instance of and then call . 

@Vogel612 has pretty much got everything covered. The only change I'd make is to add commentary with regards to input and output parameters... And I'd rename the argument from to or because you don't just want any node, you want the head node so you can flatten the entire list. Any nodes not under the supplied node wouldn't get flattened. 

Why? Because right now you've got one long piece of code that does everything, and it's confusing you and causing bugs. By splitting it up, it'll be easier to identify what you need to do and whether the code is doing it. If you do it right, you'll end up with code like this: 

You have a memory hog when using a large queue. Because you store the object references and don't null them on retrieval, one could store a object reference to an object that references a great deal of other objects. Once I dequeue this object, it remains in your array and is not garbage collected. 

This function is filled with repeated if statements containing combinations of previously tested variables. Consider storing those in temporary variables instead and reusing them. That should improve readability. Additionally, I can think of a couple things you could try to increase performance on an algorithmic level: 

But then you have "if it is true that b is not true, return true, else, return false". At that point, you might as well return "whether it is true that b is not true". Like so: 

That's a really scary comment. Are you sure you can't put your code in a private scope so you're not affected by external variables? 

A verb as a variable name seems weird to me. Especially as a boolean. Try to make your booleans adjectives, questions or statements instead. In this case, I'd go for . You'd get an aptly named method from this too, rather than .