For a website I'm working on, I had to get all the unique entries in an array and count their occurrence. It is possible a certain entry is only found once, but it can also be found 20 times. So I designed the following bit of code: 

I'm working on a clone of Hunter Story. You shoot monsters with your bow. Recently I implemented collision detection, this is all working correctly, and I don't think the code needs any dramatic optimisations. The only thing I'm a bit worried about is how exactly I implemented it. I'm not sure if it complies with OOP standards. The relevant code: Level: 

The array contains the the entries returned from the database. And the array contains the unique entries and how many times they occured in the array. This is my first php script (on a drupal webpage by the way) and as such I don't know that much about php. I'm pretty confident there is probably a more a efficient way to do this, using php-specific functions. Any and all tips are welcome! EDIT: I might have to clarify the structure of the arrays: has two dimensions. The first dimension is just a key for the second dimension. This one contains an array of drupal nodes for each key. uses the nodes from as a key and the value is how many times the node occured in EDIT 2: I printed the arrays, as requested by Boris Gu√©ry: 

And now, let's not be lazy and code this up properly. We'll need to introduce a type that can represent either a parse error, or an out-of-range condition. 

Bonus: Here's how I would format your original code (note the changes to whitespace and the removal of parentheses). 

A slice is a pointer and a length. The pointer doesn't necessarily have to point to the first item of an array! Thus, instead of maintaining an offset, you can update the slice itself. 

You don't need to define the variable as mutable if you move it inside the loop and take advantage of the fact that and are expressions. 

Unfortunately, the way you've written , that's not true. The following test compiles fine, but invokes undefined behavior (which happens to manifest as the test passing on the Rust Playground): 

where you state Define global constants your not defining your directories with the correct slashes for the Operating system You can use slashes fluently on your application as both unix and windows supports them but if you really want to be on the safe side then you should use As Doctrine 2.0 is only supporting PHP 5.3.0 you can replace with I would also create a constant called which would normally be created in a constants file, and should be one of the first included. I would convert the above to: 

The first problem i can see and many other's is that your hardcoding output data, why would you hard code output data on within a language that was built for dynamic content creation. I would suggest that you restructure your class to combine several entites into one, for example, when creating a html web page, i usually is constructed of 5 major compoinants, for isntance: 

If the function's body was inlined, the slice returned by would be unconstrained, and the compiler wouldn't be able to report an error if the slice accidentally outlived the data it references, causing subtle memory errors at runtime. 

Instead of using the crate, I recommend you use the crate. It's not as low-level as and it has more features. For example, with , we don't need to add a magic value in . 

You can use instead of . This requires adding calls where the compiler did a copy when the bound was present. 

Next, you've got some deeply nested sets of matches. You're also performing some unnecessary clones in those matches. Let's address this first. When you match on a lvalue that you can't move, you can obtain a reference to an interior value by adding before the binding. This means that the bound variable will not contain the value directly, only a reference to the value. For example: 

I don't know any C, so I can't comment on the actual code. But it seems to me like you could move the text to txt files or xml files, instead of literally placing it in your code. You could probably walk through the txt file and print the text in a loop, rather than each line on its own. If you really want to keep the text in the code, you could move the print lines to separate functions to clean it up. As an example, let's clean this part: 

This seems a bit better already :) But I think it would still be better to move the text to .txt files 

(Keep in mind that I've left out all irrelevant code. If you want to see the sources, follow the link below). It's quite a bit of code, but I'm not looking for code optimisations. I only need to know whether this is a good OOP implementation. Would I be better off having a separate CollisionDetector class, where I pass my colliders (Arrow and Monster) in? Should I implement the collision checking in the colliders themselves? Or is there perhaps something I haven't thought of? If you want to see the full project, check here. It's made in Java with the Slick2D framework. 

Also another major issue that I see is that your code is extremely invalid, you should google W3C Validator and validate your html 

When it comes down to the 's then you can increase readability by doing a switch statement: The main point is to remove the not so required and in places. $URL$ 

And i would use link / script tag's to include this to your page, the reason for this is that if you have multiple pages you would have to copy and paste each block of a css and javascript to that page, and then when you make a small change you would have edit lots of files. When it comes to PHP, you seem to be doing the same thing, directly typing the code into the main page, as stated before this would cause issues with updates, so place it within a template and include it: You can make your templates a lot more flexible this way, here's how i think your layout should look: