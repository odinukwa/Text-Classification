My suggestions: Don't use to compute the power of an integral number Floating point math can lead to errors since they are not guaranteed to be precise. It will be better to create a version of that works only with integers. The following should work: 

I understand that you have some concerns about using containers from the standard library. However, it's OK to use of member function templates described below since they don't involve use of standard library containers in the interface of the member functions. Here's how I see to look like: 

Suggestion for physical layout of members A user of the class is most interested in the section of the class. They are least interested in the section of the class. Ideally, we would like to hide the section of a . Hence, it makes sense to me to move the section of the class to the top of the class and move the section of the class to the bottom. 

It is inefficient since you can avoid half the work by realizing that if the number is not even, it will never be divisible by 2, 4, 6, etc. Here's my suggestion for an improved version: 

Use instead of just The standard include file is guaranteed to declare . Some also declare but in order to make the code portable, use . Improve implementation You have the loop 

Is an Ace is to be put before a Two or after a King? Is an Ace of Diamonds to be equal in ordering to an Ace of Clubs? Is Two of Diamonds to be less or greater than Three of Clubs? 

can easily be implemented without the construct if has a function, such as , that returns the right object. 

Does not use . Does not use dynamic memory allocation. Does not use virtual member functions. Uses class templates for and . Defines the units in an extensible manner. 

Excellent code. I would restructure the code to obviate the need for member functions in . Create a global function, . Use the global function from and leave the details of how is implemented as purely encapsulated detail. GameManager.h 

That will also allow you to print a to any . Use manipulator in the spirit of the standard library Instead of using 

I think or is a better function name than . When the function returns, the input indices are sorted/ordered. 

Then, in GameManager.cc, you can define as a or even a . You add member functions that capture distinct functionality and don't have to worry about whether a function needs to be or The implementation of can be: 

When you read the numbers, make sure that the user hasn't entered a number that is beyond the suggested range. 

in yet all the functions to which you are passing those values -- , , -- have arguments of type . I suggest changing all of those to be of same type. A better type for them would be . Then you don't have to worry about dealing with negative numbers. It is possible that a user will enter numbers too large for the purposes of this program. To deal with that eventuality, provide the users with appropriate feedback about the maximum admissible values. For example: 

My suggestions: Make a private, nested class is an implementation detail of . It's best to make it a private, nested class. does not follow the rule of three allocates memory in its constructor and deallocates the memory in the destructor. All such classes should follow The Rule of Three. You can get away with disregarding the rule of three if is a private, nested class. Even then, there is a possibility that you will run into problems if the implementations of any of the member functions of is not mindful of that fact. Provide function in You had to make a of in order to be able to access . Had you provided an function, that would have been necessary. Given the choices, I would recommend providing function(s) in . Fix the memory leak in You have: 

That works for small and short lived projects but quickly becomes a problem when the types of errors you have deal with keep increasing. s are best when the enumerators are fixed for most part. For example, you can create a simple like below: 

You can use the former syntactic construct by providing and non- versions of user defined conversion operators. 

It's not used anywhere in your posted code. It's not clear what the purpose of the macro is. Unclear purpose of macro You also have 

This does not sound right to me. If you ever decide to create a set of s or sort a collection of s, I assume you are going to rely on this function. In order to sort a collection of s, you have to answer the following questions: 

which is used only in . I would move the global object to an to be local variable in the function scope. You also have: 

The reasons for failure is ever expanding in real world projects. It's best to capture the different types of errors through simple class hierarchies. Example: 

No need to use an array for The value is read and used inside every iteration of the loop. It can be a simple . Not only that, it can be in the scope of the loop instead of being in the function scope. 

This resolves both issues. Suggestion 2 The member function seems a misnomer to me. What's being "added" in the function? A better name would be . I would go further and create two functions and . 

you allow multiplication of matrices that don't result in a square matrix. However, if you multiply the following matrices with just that change, 

Majority of the functions that operate with don't use in their interface. I would move them to be functions in namespace. It's not clear what the purpose of the member variable is. It's better to have a function that returns an empty rather than be committed to a member variable. I would change: