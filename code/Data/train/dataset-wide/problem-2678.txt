You can use 2 custom attributes instead of one. In this case you should not swap value, just replace it. 

Handling exceptions If you create library user should be aware what is going wrong if he uses it in the wrong way. 

You can find full list at codeschool At least you can replace your div#some_id with section#some_id which brings more semantical meaning. Если можно, я буду писать на русском (: 

Garbage timeout Look at dummy example of garbage timeout at fiddle. I'm creating array of 30M elements of , that are binded to root object - window. 

But, as you saw before, you have to optimize frontend and backend in different way. How to solve it is up to you. 

About code style, I highly recommend you to read angular code style even if you have no idea what is it. It contains a lot of sanity approaches about how to make HUGE classes clear and smooth. About comments: they needed only if you have no idea what is going on, or it is hard to understand. Don't overuse them. UPD: I always met problems of bad design when I have no idea how should I do something. Fist stage - write you code, code that will do what I want. Second stage - refactoring. Take one piece of responsibility and move it into separate location until all code is rewritten. As I see, you already have such pieces, that can be placed in separate location, e.g. plugins like they are really tiny, but there are no need to write ugly comments, that make code unreadable. Move it into single file, and configure grunt-contrib-concat for glueing all pieces together. Then I'd start refactor . There are a lot of thing that you can do from covered code style above. Firstly make constructor for your plugin, and move there this code 

I'm annoyed that you pass an empty in your method. I think you should split your method in two. One that is parameterless, and , to start the recursive algorithm, and another, (from C#) that has the parameter for the recursive algorithm. Also, maybe it's a convention in Java (I'm not very used to Java), but I think you should remove some white lines, it would make your code more concise. 

The is a pretty solid generic repository itself, so your implementation over it isn't useful at the moment. The only use such a repository would have (I think), is to create an abstraction of the DbContext. You've almost achieved this at the moment. Let me show you what I mean. 

Your solution seems good, but your comments aren't helpful (as tim stated). The explain the use of the and operator. I think the intention is good, but these comments aren't helpful to you or to anyone that already knows what these operator do. You should remove them and assume the next developper who will go through your code will go check on internet to find the signification of these operators. I think you should add an helpful comment to the algorithm that would explain why you shift bits to the right in your loop as it will explain your algorithm. Remember, comments are there to explain why, not how. 

Theory Fist of all check this article about memory management, it will help to find leaks if any. Look closer at this part 

IMHO: first way is preferable, because you can see objects signature just by looking at constructor with no need for overview whole source file. Just don't forget to sort methods and properties in alphabetic order for quicker search (it really helps, do not ignore). 

Here, you will receive which is not very informative, probably you would like to make your exceptions for such situations. Performance of string concatenations As you can see from this post, most efficient methods are using , and list comprehension with . I recommend you to rewrite your method to use list comprehension and make all required checks in the beginning of the method. Sanity defaults 

Complexity Sequence definition $$ F_{n+2} = F_{n+1} + F_n $$ which means that your complexity is \$ O(n) \$. Matrix definition $$ { \left ( \begin{matrix} 1 & 1 \\ 1 & 0 \end{matrix} \right ) } ^ n = \left ( \begin{matrix} F_{n+1} & F_n \\ F_n & F_{n-1} \end{matrix} \right ) $$ As you can see with matrix definition we can improve complexity using exponentiation by squaring which tells us that $$ A^{2n} = A^n \times A^n, A^{n+1} = A^n \times A $$ Which means that complexity using matrix definition is \$ O(\log n) \$ Big integers Fibonacci numbers are fast growing sequence, so in order to store values you have to use arbitrary-precision arithmetic. 

Your code quickly crashes due to IndexOutOfBoundsException. If you make this method private, you'll never deal with this error, and people who use your API will have one less method to try to understand. Better for everyone. 

Data Types This was you first bigger OO mistake to me. When you think of a deck of cards, do you think of a randomly accessible array of cards? Do you think of a stack of cards? It is possible that your game may require your ability to draw cards from anywhere in the deck, but from the code you've provided it doesn't seem this is the case. I'd like to see 

On another note, as I wrote that last method definition, I realized that it means "Recursive Helper Quick Sort". The first time I read it, I read "Rechel Per Quick Sort". Which is why you want to use Camel Casing. Method Visibility You correctly point out in your JavaDoc command that quickSort(int[] array) is your public API. But you don't enforce this by leaving the two helper method public as well. By leaving the helper methods open, you leave an easily misused method available to be called, namely rechelperquickSort(); Imagine a client who doesn't know better makes the following call 

Notice I could have create a function, but that's not good as it's confusing. Also, this function doesn't need to be in the scope, it could very well be reused anywhere else. Next, we want to disable the and turn it red. I wouldn't write a function only to disable it. But, writing a function to disable an element for a time span seems like a good plan : 

It's long, you get it! :p Now, you have two options. Either you use the iterative approach, which is probably the best solution because it computes Fibonacci's number much faster, using summations of previous values to get a result. 

I'll leave the implementation out of the review as the question gets long already, but I'll add a link to the GitHub repo at the end. 

I also think you should pull out the method of this class and put it in a class that is used only to start the application with the good parameters. Doing so, you could use your class to only find missing integer. This way, if you ever want to reuse it, you will be able to without bringing the method with it. Also, you could make your class respect the OOP more. You could input the in the constructor like so : 

Some stylistic comments. Spacing The proper use of white space makes a big difference for code readability. You use white space inconsistently, which suggests a lack of attention to your code, and differently than Java standards, both of which make me want to read and understand your code less. So: Method definitions should be arranged as such 

Spacing You use spaces inconsistently. In general, this suggests a lack of attention to your code and is unpleasant to read. The end of your compareTo method, for example, looks like 

I'll start with more style oriented comments and move to more general OO concepts. And I'll skip what's already been said. Enums I much prefer to see enum values declared on individual lines, for readability. I also don't think including the word "enum" in your enum definitions is helpful. I'd like to see 

When you've got a hundred characters hardcoded in your code, readability really isn't the issue you should focus on. Don't use the just for the sake of making it cute, especially in cases like the Euler Projects where you want your code to run as fast as possible (At least, that's my objective when I do these!). A method name should always reflect an action. Otherwise you'll you a property. So, if we focus on this, we should change to something like . Now, this algorithm is about numbers, not characters. You used the because it would be sooo long to create an array with all the , but you need to change that as "soon" as possible in your algorithm. Meaning, the should receive a or an , to your choice. 

Right now you're stuck with the use of a constant. should receive, as a parameter, a . You then have 3 options for method signature : The first one has the advantage of being sure that the inherits . 

Hashing We know enough about decks and cards to write a perfect hash function (one which will return a different value for each of the 52 different possible cards we could have) with the use of enum orinals. 

Separation of Concerns I would like to see the association between a Card and an Image in a different place in your program. In general when you build GUI applications, you want to separate the things the User sees from the representation of data in your program. With you current design, you make it challenging to build a flexible UI. What if 3 months from now you decide you've got a good game, and now you want to support multiple "skins" on your cards, so that users can customize the UI to their liking. Now you've got to come change the implementation of the Card class - not something you should have to do to make a change to the way the UI looks. 

I didn't do anything about the since it shouldn't worry you too much to repeat the loop in some operations, adding reusability for a loop seams a little overkill and would probably make the code harder to maintain. I'll ask you some questions in the comment of you post, if you answer them I might have some other things to review, but for now that is it! 

First of all, your code doesn't compile, you have a poor lonely extra closing bracket in your method. Next, your method shouldn't if doesn't work. If the entity doesn't exist, you should return false. Otherwise rename your method so that it is clear what you are doing! Also, you shouldn't blindly catch every possible exception. Imagine an is thrown because the connection cannot be established to the database, you will catch this exception, then try to insert into the "broken" database. I don't think you need to catch any exceptions there because you already check if your entity exists. If you need to catch, you might have another problem in your code. The second method is weird, why does it exists? In your view model, your should be marked . Also, if your application ever needs to offer multiple languages, you should consider putting this message in a resource file. This code doesn't compile, an cannot be null, so your if should only check if the is greater than 0.