I wonder if this question will need to be moved to the SharePoint SE site, but I believe this could be a simple a SQL Server security fix. A little back story: Back in April we upgraded our SharePoint SQL Server backend (mirrored) from SQL 2005 to SQL 2014. We did this by way of mirroring from SQL 2005 (primary) to SQL 2014 (mirror). I don't believe the security settings and logins were extracted from the old server and placed in the new. I'll have to reach out to my infrastructure department to see if the server has been completely decommissioned. My SharePoint Admin is trying to create a new site from the SharePoint Central Admin Site (SharePoint 2010), but gets the following error. 

This server was recently installed and configured. I was in the process of creating some maintenance plans to backup the logs and DBs on a daily basis. Regardless of my method to perform a full backup, it would fail immediately citing the generic error message 

I've setup log shipping between two servers (they used to be mirrored). What is the simplest or most efficient way to mirror the system databases between the primary and secondary? 

You're correct about how the VLFs grow in size. Check out the following video from Jes Borland for some more tidbits. How SQL Server Works: Log File (Video) 

Yes, you can do what you're asking. You should have your database in full recovery mode and then be performing log backups (via jobs/maintenance plans). $URL$ 

I'm migrating some TSQL code from one server to another. The server I'm moving it from is production, so I'm not easily able to adjust settings for obvious reasons. The code runs fine on the production server, but the firewall is off, we don't desire this configuration and want the firewall enabled on the new server. How can I leverage Extended Events to tell me which ports are being used during TSQL code execution? Or do I need to use something like WireShark? SQL Server Version: 12.0.4213 Windows Version: 6.3.9600 N/A Build 9600 (2012 R2 Standard) VMWare VM 

Full disclosure, I'm not getting anything out of this "plug" and I don't work for Red Gate, it is a free real time monitoring tool that'll monitor log shipping. Red Gate Log Shipping Monitor Microsoft TechNet Article 

When I posted this question, I had all, but “NetFx3-ServerCore-WOW64” enabled. Further, my problem was an assumption on my part. I assumed that these features would be installed along with SQL setup, this wasn’t the case from the CORE installation, you need to make sure these features are installed/enabled BEFORE the SQL 2012 installation begins. When I performed the GUI-based installations, I didn’t have worry about enabling the aforementioned features. Moral of the story…DON’T ASSUME ANYTHING! ALWAYS check prerequisites if you’re having installation problems for any software/hardware. 

and reasoning from these relations you can infer the entities represented by each of them and the foreign keys towards other relations: 

A foreign key in a table that refers to a table is a column such that all its values must be present also in the primary key column of . So, the question is meaningless if you intend that a foreign key is two different column (this of course is impossible), while the answer to this question is always “yes” if you intend that the values of the foreign keys are also values in a primary key in another table. 

The algorithm that decomposes a relation schema to produce the BCNF operates in the following way: at each step, a dependency is searched that violates the Normal Form. If one if found (as in the example), the schema is decomposed in two subschemas, one with the attributes of , and the other one with the attributes of the relation minus all the attributes determined by . Then the same steps are applied to all the schemas obtained, while there are other dependencies that violates the BCNF. So, in the example, the original schema is decomposed in the following two schemas: 

In the book, "Garcia-Molina H., Ullman J., Widom J., Database Systems: The Complete Book. Pearson Prentice Hall, 2009", Chapter 5, "Algebraic and Logic Query Languages", on top of page 217 of the 2nd edition, there is a box titled "δ is a Special Case of γ", that explains how the duplicate removal operation δ is redundant, since it can be replaced by the use of γ. Simply group by all the attributes of the relation, without any aggregation. This will replace each group, consisting only of tuples wich coincide on all the attributes, with a single tuple. And this is exactly the semantics of the duplicate elimination operator. 

The answer is yes. Here is an example. Suppose that you have a table , with columns , and also a table , that contains additional information about certain special projects, with other columns, referenced by other tables, etc. So you have in this table a foreign key for the table, which contains the “general” informations about those special project. This foreign key, let’s call it FkProjectId, is also a primary key for the table. 

A BCNF for your example In your example, a BCNF obtained with the classical analysis algorithm is the following (starting with a minimal cover of F and producing a decomposition with a cover of the projection of the dependencies): 

Yes, for instance you have the information on the file (name, size, data creation, etc.) repeated for different accesses to the same file. 

Is there a command at the CLI or in PowerShell that will list the components installed for SQL? I'm looking for something like the Feature List you can get from running the discovery report from Tools in the SQL Server Installation Center program option. I'm running SQL Server 2012 on the CORE version of Windows Server 2008 R2 Enterprise. I've searched around the Net, but haven't found anything useful. 

I have a single instance database server with several databases. Some do not require log shipping and some do require log shipping. Is there a way to edit Ola's LOG backup job to ignore the databases I have configured for log shipping and backup all the remaining log files? The only way I can think to do this without turning up a new server or create a secondary instance is not using Ola's script and create my own custom maintenance plans. 

We created a SQL Login account for reporting use only (SSRS), we'll call it 'MyReportAcct'. We've used this account for some time and it is created for every newly installed instance. It has been working as you'd expect, except on a couple of mirrored instances. I've not seen this issue on any standalone instances in my environment. Randomly, reports will stop working and there is nothing being changed based on our internal processes for Change Management, Windows Logs, and SQL Error logs. Here are two of the error messages we receive: 

Situation: We recently had a consultant company build new Lync 2013 Servers in a mirror setup. There are two security principles set, SA (disabled), and a AD group that is only associated with the Public server role. 

I have a few databases in which the frontend application manages certain maintenance tasks. In this particular instance, I'm running the INDEX OPTIMIZE job every night and every so often it clashes with the application and fails. The following is the error that I receive: 

I find it hard to believe that there aren't better native tools to filter SQL Server Error Logs. Even Windows Logs have better filtering capabilities. I'd like the ability to remove certain events from the results or a list of events from the results or to be able to search for a very specific error/event. 

Are there any configurations that I can change to stop this? It only appears to be coming from two servers. 

In short, put the OSes on slow storage and all the data/log & backup files on fast storage. I know that my environment is different that yours, but I think similar principles apply. We have a SAN and the storage pools range in different speeds, 7.2k, 10k, 15k. We install the OSes on the slower drive pools and have all backup files and data/log files stored on the 15k drives. There was a time when we accidentally put everything on the 15k drives and we didn't notice a performance difference. It was brought to our attention by our SAN admin after an audit that the OS was stored on the faster drives. We monitor SQL Server performance with perfmon and Dell Spotlight. For grins, we went and looked at the historical metrics that mattered, and saw nothing to note. 

make a group for each different combination of employeeId and date in the Sales relation, and for each group produce a tuple with employeeId, date, maximum sale price of the group. 

Without any knowledge about the workload of the database, is almost impossible to answer to a question like this. How often those “extra” data will be used? What are the most common queries? How frequent they are? and how much it is important the speed of the execution? The general advice is always the best one for me: make things as simple as possible, than optimize if you need to. So my advice is: create a single table, look at the performances, and only if those performances are not adequate to your objectives, split the table. 

The important thing about the 2NF is that in each (non trivial) dependency the determinant should not be a proper subset of a key. In the example, the determinant of AB->C is the full key, while the determinant of C->D is C, which is no part of any key. So the schema is obviously in 2NF. 

Note that this decomposition preserves the functional dependencies. Addition How the decomposition is obtained? Starting from the original relation: 

Let’s try it for the dependency BC → A. Initially: BC+G = BC, using R1(AB), BC ∩ AB = B, B+F = BD, so intersecting it with AB gives B, which is already in BC+G; using R2(BC), BC ∩ BC = BC, BC+F = ABCDEG, so intersecting it with BC gives BC which is already in BC+G; using R3(ABDE), BC ∩ ABDE = B, B+F = BD, so intersecting it with ABDE we obtain BD and we can add D to BC+G, which now becomes BCD; BC+G is changed, so we must restart checking for the new value BCD. The first two relations do not give any contribute, since D is not present in them. The third one must be considered again: using R3(ABDE), BCD ∩ ABDE = BD, BD+F = BD, we can not add anything; using R4(EG), BCD ∩ EG = ∅, nothing to add again. So we have terminated, beacause no new attribute can be added to the closure, and since BC+G = BCD does not contain A, we can conclude that at least this dependency is not preserved, and so that the decomposition does not preserve the dependencies. And since you asked how to decompose a relation without losing dependencies, you can look at the synthesis algorithm to decompose a relation in Third Normal Form (3NF). You can find it on any good book on databases, and it guarantees to preserve both the dependencies as well as the data (lossless decomposition), while reducing redundancies and anomalies. In this case a decomposition in 3NF is the following: R1 < (ADE) , { AD → E } > R2 < (BD) , { B → D } > R3 < (ABC) , { BC → A, AC → B, AB → C } > R4 < (EG) , { E → G } >