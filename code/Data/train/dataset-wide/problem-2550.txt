Applying those changes to the code make it about twice as fast. Here is what I end up with for the function: 

Turn off screen updating in excel. Set the calculation mode to manual if you have other formulas and you are changing range values. If possible load all the data into an array and only write it to the sheet once. 

Here are a few tips that I have used often to speed up macros and code that runs against excel sheets: 

I have had significant speedups when doing those from inside Excel using VBA and outside over COM using python. Here are a few snippets on how it is done, I used the Excel VBA syntax although you would want to adjust them for your code. 

You're using it like it creates another instance of jQuery, or something similar. What it actually does is relinquish control of the variable. Due to other libraries using , jQuery needs to be able to return and reset what originally was. Imagine this: 

It's better to use an object here, as later you can extend it without having to spend pointless LoCs on s and ing. 

seeing as they all have the same error, it would be easier to wrap the entire conditions block in one big You've got some duplicate code here too: 

IIFE: In your IIFE, you give it the name , however in an IIFE that function name has no meaning, the function itself is discarded in favour of its result, meaning the name is redundant. 

I can't really comment on the performance since I found it difficult to read, especially the spaces around the operators throughout the code. As you mention though, I would focus first on cleanup and applying PEP 8. There are many issues with spacing around operations, spacing between/after definitions, line length, etc. That would help with the readability. The other part that seems difficult is the "main" logic near the bottom. It is good convention to place that in a "main" function and then use the "if main" at the bottom. So you would have somethning like this: 

As was already mentioned, I also am not crazy about -1 return, I would rather see it raise the exception rather than an odd exception later about integer subscript so I removed the try/except negative 1 return. Here is the code I came up with after applying the changes mentioned above: 

You should consider turning the hard-to-understand variables like into something more reader-friendly, and easier to understand. 

Your file is a little different. I found a lot of instances of massive strings to be appended. Consider using instead of strings. What I also saw is that the jQuery you have could be replaced with vanilla JavaScript equivalents, meaning you could chop the library entirely out of your code. 

Structure: So, as and follow the same style, as well as and following the same style, so you can substitute those out. Additionally, the and functions can be taken out, leaving: 

Seriously, you need to format this better. Try using Python's style guide, PEP8. when running your code through the online analyser, it threw 20 errors immediately. When coding good Python, PEP8 should be your goto style document. 

Use a context manager to do the file opening rather than the try except up top and then closing the file manually at the bottom. Don't bother with just do . Stripped both sides of the line rather than the right side first and then the left side later. Pulled out regular expressions and the parse flag, just use the mode as the flag, set it to if the mode is not of interest. Changed the , just use .... but it may be even easier to just lookup the "mode" in a list of "modes" you are tracking so I changed that. I changed the mode naming to match the file. That was just to make things easier. If you really want them renamed perhaps the modes could be a dict rather than a list. Replaced with style check. Before setting the values into the record, I checked to make sure there was something on the right side of the equal . This may be something that the regular expressions avoid but it didn't run right for me. At the bottom of your code you should put in the . There were a couple pep8 issues with line length. I just broke them down a bit. Removed all imports since I didn't need them anymore. 

In both and the executions are very similar, so, you could consider combining them, and splitting the possible pathways at 

When you are going over items in a dictionary or array, you can the comma on the next line, so that it's easier to understand. However, trailing commas are not against Python, so leaving them as they are is no problem. 

Join the array into one long string with a space as the 'glue' character. Use to find all commas and remove them. Split by space Add each non-empty component to the components array if it is not already in there. Join the components together. 

Magic numbers: Building on the last point, you call array indexes at , , , , , : What are these points? What is at that may or may not be in ? You ought to move these array indexes to their own variables to declare the importance that each of these indexes holds. 

Unfortunately I was not able to get the code to run and produce any results even though I adjusted it to load the data file. It just returned an empty dict. Rather than try to figure out why, I took a look at the things I would change based on reading through the code and just made those changes, it seems to work after I did that, not really sure what the cause was but I did do the testing on Windows which may have had something to do with it. Here are the things I focused on: 

There is quite a bit of code there. I would start with PEP8 formatting as it makes it much easier to read. The other thing that came to mind is using namedtuple() rather than using the indexing all the time, this may help with readability. As far as performance goes, the best way to confirm may be to do some profiling.... Since I went through much of the PEP8 formatting just to try and see what was going on, I have inlined it here along with the profiling setup at the bottom: 

Instance method vs. class method vs. function: You declared a constructor function whose instances all come with their own individual method. Since the method doesn't rely on other instance properties, it should probably be a class method instead. In JavaScript, a class method is simply a property of the constructor function: 

In my opinion, the semantics in JavaScript are too weak to help static code analysis or to allow for compiler optimizations. Where is (mis-)used to signal immutability, I'd go with e.g. declaring identifiers instead. Is my thinking flawed? When writing robust, maintainable code, which of the above samples would you prefer? Is there a middle ground? 

However, unless your will have additional properties later on, a simple instead of a class will do the job just fine. Instance properties and side effects: Within your calculate method, you create new instance properties such as , and holding the result of the calculation. This is called a side effect. Pure functions without such side effects are easier to understand and debug. Also, those property names are not very descriptive. Consistency: For different inputs, the values of and the return values of are inconsistent: 

In looking at your code, it seems well written and solves the problem in a straight forward manner. The one thing I would do is to remove the else after your argument check and remove a level of indent. That just helps to keep things flat... Flat is better than nested. Now onto optimization and potentially making it more complex than it needs to be in order to make it faster. In these problems it seems like a reasonable thing to do even though....Simple is better than complex. Here are a couple things I looked at as potential issues: 

The second part is a little trickier, what it does is uses math.log10 which gives a count of the digits, then it does a mod 10 to get the right most digit, looks up that power to add to the total and then finally does integer division to divide by 10 effectively moving the decimal place 1 position to the left (dropping the right most digit we just dealt with). This is probably a little different between Python 2/3 due to changes in int/float division. It is basically doing what you are using to do but without converting to string and adding the power of 5 dict lookup as it goes along: 

Your code has a call in the loop, I would remove this from production code on your website. It's test-code at best. 

You don't need all this extraneous stuff around the PHP. If you at the top of your code, the rest of the HTML would build by itself. 

Magic Numbers: What is 14? And why are you dividing it by the amount of results? Magic numbers should be moved to another variable to increase readability. 

/ comments You should probably consider those. And this belongs in an issue tracker, not in your code. As a general rule of thumb, it's best to write your code to explain itself, helpful (but not oversaturating) comments would be good though. 

class: Instead of modifying the style properties on each spoiler, you can just take away the spoiler class.