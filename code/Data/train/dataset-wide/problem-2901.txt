the true condition should usually precede the false. so if I used the if else` this would be better: 

You may be over thinking it. It's actually very simple. The only ambiguous thing is if the year is two digits. In most cases a two digit year can be fixed like this. I believe in your use the month and year will be all be future and nothing from the 1900s. 

This is confusing when the first passed argument is $parameters $controller->view($parameters, $req_body); And the accepted 2nd argument is 

When dealing with Serial devices you have to keep in mind diagnostics. When things are not working, where is the problem? Avoid devices that do not drive the DTR and RTS signal. The troubleshooting procedure is to read DTR and RTS then disconnect connect the cable and read them again and see if their was a change in port status. If the serial port is a USB to RS-232 adapter, the device driver may always report DSR and CTS as active regardless if the connected device's actual DSR and CTS signals. Many times the Available and the Port number the device is connect to is unknown. You should include a routine that reads the status of all ports supported by the OS and report the status of each port. If a port exists at that port number read DSR and CTS and include in the report. Most serial device support the Hayes AT Command. If so, issue a command and read the response as part of the device initialization routine. 

Check validity of all passed parameters. Then determine the best, most specific and user friendly response. The best user response is to fix the error when possible. If a parameter is missing, add a default. If you had an HTML error on your web page, do you expect it to render? Would you like it if a single HTML error returned a 404 response? If a Browser was that rigid it may not get much use, same goes for your API. 404 is not an appropriate response when the document URL (index.php) is correct. Additionally this will confuse some users as to why. They may just think your server is down and they go somewhere else. Consider using an alternate response such as 409. You want to make it as easily as possible for the user to understand what their mistake was. 404 should be reserved for an error in the URL Also for diagnostic and support issues, use various response codes for different issues and document them for the user. You could use a text header and a message identifying the specifics problem with an error message. 

I have a console application that I'm trying to make with minimal redundant code. I have 4 functions, Create, Read, Update, and Delete. 

I am asking this for coding style. I have a program class that calls a function(of a data access class) that reads from a table (using entity framework by the way), and I'm preparing to write the . Is it better to pass the function a 2d string array , reading each field and each row, and put it in the 's out parameter to return to the main program and have the main program display it? or just repeatedly call the and in the main program print each record out individually to the console? I imagine that my will look something like this: 

You see how the above class is very similar to the DbResult class and works relatively the same way? This is how I might make a class for Services, but is there any way I can make a class that does both DbResults and ServiceResults without becoming more ambiguous like the following class example below? or, is it ok to be ambiguous like the result I put below? 

I also have a class called ServiceManager, which checks to see if the SQL Server (SQLEXPRESS) service is running on the local machine. 

I also have a helper static class that provides some functions to make some tasks easier. 4 CRUD FUNCTIONS 

Here is my problem. Do I need to give a new identifier to each delegate I write of the following delegate type? like so: or could i use one delegate that accounts for any Datatype I need to use so i don't have to keep repeating the code? Something that may or may not be relevant: I'm calling these functions to prompt user's input for new fields to add for records in a database. So database field types are the data types I'm dealing with, but I'm using this approach for learning purposes to try and minimize redundancy. 

I'm looking for a way to simplify this code, because I could develop more overloads for I made the string and int both of class so that in each overloaded function, the catch block could return the same value. The problem is I need, if possible, no overloads of . The function overloads are both identical, except for the type of delegate they are passed. Is there some kind of variable that would encompass any delegate that can be executed? 

I am wondering if in particular the function called and are unnecessary. It seems to me that the logic is more cluttered if i do away with those functions. Please provide me with your ideas and thoughts. If you have other thoughts please let me know. man is an entity class generated by entity framework. TestDataBaseEntities is the DBcontext item. 

These JS files are cached for 10 minutes, requiring the Browser to download them on every time you linger maore than 10 minutes. Also they should be combined into a single file to reduce HTTP Requests. One other JS file: is cached for only 30 minutes. The above are just a few things I found wrong spending about two minutes. There is no excuse for HTML or CSS errors or 0% MobileOK. MobileOK is tough, 20% is OK, 80% is very good. Zero is too typical. These guys are supposed to be experts. Why can;t they get the simple stuff correct? Too many dysfunctional sites. The Web is a mess. Too many dysfunctional sites. jQuery is a factor. The problem being that a Web Designer will want some functionality and search for a solution. Many of these published "solutions" use jQuery. The Designer copies and pastes with no knowledge about what they are doing. The result is a hack job. I assume Bootstrap is supposed to do responsive mobile. Responsive Design is one thing and mobile is another. I guess that why when they say 

I think the transition is smooth enough. Where I have a problem with this design is when the window width is 501-767px. This covers the common qHD, WVGA, FWVGA resolutions. The problem being when the column width changes from 50% to 33.33%at 768px width. At this point the red page header is taking up a large percentage of the vertical window real estate. I do not have a way to test this on a mobile device that is in this width range in landscape. 640px is a very common landscape width. If this 33.33% width holds in landscape, the the whole window may be red. 500px seems to be an arbitrary width to do the switch. I would think a common screen width like 480px would make more sense. 

Only one query was necessary: It would be better to remove the DESCRIBE Query and use after the SELECT Query: 

JS I have two functions one for each the two EC methods. function ec() is for EC method 1 functions ecp() is for EC method 2, pairs the current selected section with the previous. Normally obe one of these functions is used on a web page. The div id="s999" is for the initial value for so there is no null value to prev. The reason I have var is for when the same section is selected as previously. I do not care if is expanded or contracted just contracting it is much quicker than an else if to check its display state. But I need to remember what I am doing with the passed . If the same section is clicked and I toggle the display state, if it is being expanded the toggle would contract it again. The line of code: 

I think you started writing the admin class wrong. I'm a beginner at OOP myself, but one of the most usefull tips I've encountered so far is to use your code before you write it. So when you start writing the code, you know how you want to use it instead of writing code and figuring out how to use it later. This might seem silly, but i'll give you an example: You want to check if someone is an admin. If he is an admin, you want his row. If he isn't, you want to do something else. If I would build your index.php and I didn't write the admin class yet, I would create an index.php like this: 

Use PDO and prepared statements to connect to your database. It is safer. An example of doing a database query: 

Use the built in PHP function instead of . It is much safer. Every time you use on the same password, it generates a different string. To compare a password to the password_hash stored in the database you use 

Now, in my register controller I connect to the user model and inject the database connection like this: 

I followed the tutorial Build a PHP MVC Application and have implemented a database connection. I made a seperate database connection class and I call it in the controller. It works, but now I have to inject it whenever I call a method from the user model. Is this considered good (dependency injection) or bad (repeating same variable over and over again seems useless)? I was thinking about moving the db_con method to the user model itself, but then I'd have to include it in every other future model as well, which is repeating code. Perhaps I should inject it in the first controller method: would become ? I don't know anymore. So many possibilities, but where would it fit best? 

Store the token inside your users database and cookie/session. (example of a users table in this scenario: username, password_hash, login_token, ...). Whenever you want to check if someone is logged in, compare the login_token from the database with the login_token inside the cookie/session. And when a user logs out, set the login_token in the database and cookie/session to 0. 

I recently switched from mysqli_ to PDO for the SQL injection reason. I'll give you a very basic example of connecting and searching a row: 

We've used a function we didn't write yet. Writing it will be easier, since we already know how we want to use it and how it should behave. 

Note that when I use bindValue() on $variable1 and $variable2, the database already knows what the query is, which makes the query invulnerable to SQL injection.