I get the feeling you just want out at this point, but simply walking away from the project at this point could still be misconstrued by some observers as being unprofessional. Why not introduce some documentation,contract-wise at this point? You can state terms on which you will complete the project and when they fail to sit and agree to a contract (which they probably will, their thinking being that they've been able to get this much out of you at a discount), you can courteously moonwalk out of the project. 

If you can honestly say to yourself that their world will not end if you didn't give them that overtime, you shouldn't worry. You gave too much detail/info in your email so you might want to blanche over all that detail with "For a number of extenuating circumstances, I will be unavailable". Your letter as it stands now seems like a polite way of giving them precise anatomical direction as to where they can shove their OT. Just sayin'. If their perception of you is the way you say think it is (you're the veteran developer), I'd think they currently hold you in high esteem. Your letter kind of poopoo's all that esteem there (IMO). Your desire to acquiesce their overtime request should not be held against a contract (at least I wouldn't), more to an off-book request from an entity that values your time and input. 

Senior members of staff could have different motives for coming up to a set of employees at certain times in the day, not just to be nice. They could be subtly reminding their juniors to get something done, or be checking in on them, or do so because they may not get the chance to touch base with those people for the rest of the day/week It's the morning and everyone should have stuff to do. So not everyone will appreciate the interruption of a greeting in their morning ritual. The fact remains that some people will rather keep their distance until they have business with you. That's just people 

Is the public shaming absolutely necessary? I guess it's typical of office politics and social economics to apportion blame. Where I'm from, in the event of an impending deadline slip, the developer (and/or) his team mates double down and try their damnedest to deliver. The execution may come later. Your role (I'm assuming as manager) is to try to not take sides (unless someone is likely to be fired, in which case some rear-covering maybe necessary for the developer. The manager usually survives such events). You already have the facts and have already adequately apportioned the blame already. Tell it as it is during the interview 

Results-oriented in my experience usually means that the output of your efforts is what your productivity will be measured by. I've had the (mis)fortune of working in such areas and it's had the following implications: 

This appears to be a flaw in the process of issue reporting in your organization. Take a Doctor's visit for example. Many people have become wikipedia doctors thanks to a few hours researching their symptoms online. Now, the model for diagnosis encourages and even requires user(patient) feedback. You now have patients poisoning diagnoses with stuff they read online. The current model of your error reporting permits or probably even encourages too much feedback from the bug reporter, forcing you to have to play 21 questions with your analysts. I'd recommend 

Technically speaking, a condition as that is a disability so you should be able to request such an accommodation both informally from your team mates and formally through your manager and your employer is legally obligated to accommodate you. The level of detail you choose to share with your team mates like GreenMatt stated depends on your comfort level but it's imperative you establish somehow to them that the current mode of operation will significantly affect your ability to execute your functions. It will be a moot point if you suddenly drop that as a reason for missed targets during an evaluation (like a "My Dog Ate My Homework" type situation, when your dog actually did eat your homework). A family friend's daughter had a somewhat similar situation where during a certain point in middle school, she developed a vision impairment. Being that she sat in front of the class, she simply couldn't see what was on the board in front of her and failed to tell anyone. Needless to say, she went from second in class to bottom 5 that term and that's how we found out. 

I want to believe that in those seven years, you've gained some very industry specific knowledge (as a finance developer, I've mastered , settlement, reconciliation and dispute arbitration). So you need to be able to categorize some knowledge/experience as industry-specific. Subject matter expertise is invaluable in the ascension to senior roles. Get a vendor neutral certification. Something that has absolutely nothing to do with core programming. Look toward these three , , ,and/or . These certifications are in order of responsibility to the certifying body. With PMP or ITIL, you can simply get the certification and start practicing right away and start getting returns on your investment without having to pay a maintenance fee or annual recertification credits etc. EDIT(clarification) Getting the cert puts you in the right frame of mind and gives you the necessary training to assume more responsibility and a different point of view in the business. Pick two or three of the technologies that you've used before and devote extra chunks of your spare time to further develop yourself in them. No one likes a Jack of all trades, master of none. As a tech lead/manager, it's strongly advisable that you're a subject matter expert or close to one in a specific technology. A general can't lead his troops without ever having been in the line of fire himself. In-grain it in yourself that you're no longer looking for a programming job during your job search. You're looking for Project management, team/tech lead or Senior developer roles. Job searching is as much as what's in the market as what you're in the market for. Don't sell yourself short or out of what you're positioning yourself for 

Prudent? No. Naive? Probably. Like HLGEM rightly stated, it's not their business and a hiring decision based on that information is borderline illegal. Such information, I believe falls under the no-need-to-know category. It's almost effectively the same as stating it on your resume along with: 

Like Agent Smith said: Purpose. To what end do you want to include images on the resume? Aside from the primary risk of not knowing how such a resume would be perceived by the hiring manager, you're not really sure who or what will be the first reviewer of your resume: man or machine. If the image(s) you intend to review are pertinent to the content of your resume (a logo from a professional certification for example: Sun used to dish those out), then it's totally worth the risk. If it's a logo of a previous employer (like you've illustrated in your question), you might want to reconsider If its solely to impress, I would recommend caution. There are no guarantees regarding the vendor/version of word/text processor your resume will be viewed on. A vanilla resume is a better viewing experience than a resume with misrendered or missing images, caused by a hiring manager opening your resume with Office 2K (or some ancient version of Wordperfect) Generally, don't expect or require whoever or whatever is going to view your resume to need special or newer versions of software to view your resume. Very few people will take the trouble. 

Show some effort in the direction of the new task: I would imagine your manager would not be impressed by offhandedly declining a task. You should have carried out some (somewhat verifiable) research on the new role, it's range of responsibilities and the job requirements, vis-a-vis your current role and career goals. This should present a view of an employee that's willing to make some kind of effort. Be upfront and eloquent about your misgivings: Prepare to state as clearly and professionally as possible, how this new role will defeat your career goals. Try to not paint the situation as I don't want to do it, rather as a I don't think I'm the best fit for this, given my current task balance. Your manager would likely counter with reasons why he thinks you're a perfect fit for the gig, wherein #1 above would come in handy. You need to be able to give a tenable reason for not taking the position, as against I don't want it. Be prepared to compromise/have an alternative recommendation You should have(or prepare for) some form of compromise. You can come with a recommendation of a colleague, who you feel might be a better fit for the position. It's advisable that you discuss with the colleague first, so you don't inadvertently set anyone up to fail. Recommend your colleague as a viable alternative and if there's no escaping this gig, you should try to come up with an arrangement in which you still get project management responsibilities. 

You may the 2-up management in both cases (depending on your organizational structure and reporting lines) and as a result they'd be in the loop, and things will naturally work themselves out. Your superiors would then have to reply with them in copy. If they end up refusing in mail, the 2-ups will at least be in the know, and you could then approach them (preferably in less officious tone and circumstance) on "that issue you raised a couple of days ago." 

Networking (, The art of) is not an endeavour you always undertake for immediate or medium-term gain. You don't need some life-threatening emergency to reach out to someone. LinkedIn, through it's endorsement and sharing of articles gives an easy way to stay on a contact's radar for no cogent reason. Think long-term. I presume you're familiar with the HTTP protocol as a developer. You know what happens to a HTTP session when the user doesn't do anything for a while? It dies. And this is what will happen to all those links the business cards and chin-wagging you engage in at conferences. You need to find a way to chip in a hello (read: ping) how's the state of "The Business"(whatever that may be for your contact) every couple of weeks/months or you'll just fade into the ether. 

The journey to being a known brand in any shop will undoubtedly require you to have a grasp of these skills. Unless you've resigned yourself to a future of being the Milton Waddams of your shop, you'll eventually need to get your name out there and mix with people. Depending on the size of your organization, your relative obscurity might hurt you moving forward. Sure you bang out great code, but it'll be all too easy for your work to get lost in the deluge in a large organization. Or worse, someone else could steal your shine (or outright take credit) for your work. And no one would care, because they don't know who you are. If you love your job and enjoy the action, you should at least, be willing to position yourself as the go-to guy for certain things. That'll pull more action your way. Even if you decide you're going to stay above the fray of office politics, your visibility will guarantee that you're getting bigger and better projects. Squeaky wheel gets the grease, they sometimes say 

The objective here is to demonstrate responsibility, integrity and possibly compassion to your CTO; "Hey this guy may be backing off, but he has the integrity to not leave destruction in his wake". Think of it like quitting a job where you're the load-bearing developer. You hate the strain, but you don't want to leave a bad taste in everyone's mouth when you leave 

Is it acceptable to reference (or possibly provide copies of) performance appraisals during an interview (or as part of a resume), if one has gotten especially sterling reviews during performance appraisal (which mention distinct achievements from the perspective of management)?