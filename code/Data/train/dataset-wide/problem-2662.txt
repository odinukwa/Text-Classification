Just returning from the method if the is already running hides potential bugs. Since the bot is not started by user input, but by creating and starting it, you might throw an exception, because calling twice is a mistake of the code that is worth finding. In normal circumstances, it shouldn't be called twice anyway, and if you want to be sure you can expose the bot's running state with a method so the caller can check first whether to call or not. The name tells you that you just made that method to make your method shorter, but not the intent of the method. To see what it does, you need to read the code, and to do that you have to jump through your sorce code. A better name would be for example , if that is what it is doing. 

Design You have implemented the class as a singleton, but made the constructor public. That makes the use of the singleton pattern kind of useless. Since you want the class to only be instantiated once, which is inside the class itself, you should make it . 

The paddle class could look similar to the ball class, i. e. it has its position, size and speed, and methods for and . 

This formatting is confusing. The constructor is on the same indentation level as the class declaration. The same thing in the actually made me double-check a few times which class I'm reading. To be more readable, it should be indented like this: 

This name is not good, because it does not tell you what kind of answer is being checked, and what a positive result means. A better name would be , or just if the parameter names are explicit enough (which I would say here they are). Considering that the method just does a simple logical comparison with values that are all provided as parameters, you might just remove the method and replace its calls with the comparison. As already hinted by kyrill in a comment, the method should not return strings (which are even very inconsistent here), but or boolean values. Then you can handle printing out the strings where you call the method depending on its result. And the does not do anything, actually it never does anything, but everything that comes after a will not be reached. 

We can improve readability by formatting very long lines (like that long string concatenation) on 2 or 3 lines, introducing newlines where we can devide it into logical parts: 

and seems a bit confusing. Isn't decreasing also a kind of updating? Shouldn't the opposite be called ? Maybe you can use just one method for both cases, and control the amount how much it is increased or decreased with a parameter. Logic Your method does not do anything, because all that happens when you call it is that a local variable is assigned a value, but it is not used afterwards. After the method had been called, the local variable does not exist anymore. So you could remove that method alltogether, and remove the calls to it from the methods and . Then all that remains in those two methods can basically be done without methods, because you can simply change the value of the score and then print it, which is hardly worth a method. Not using a method there will probably also make the code more readible, because it is hard to find a method name that describes well what these two lones of code do. 

The constructor of your class takes a parameter . What is that value? Better use a name that tells you what kind of value it is (e. g. level, age, etc.). 

Another example why abbreviations can be hurtful. It is easy to misread and . Better name them and . 

Looking at what you are doing with it later, you probably do not even need this if-else code, since you are only using the value as arguments for the and functions. These functions should be able to work with values that are positive or negative multiples of Pi. The next two lines, where and are defined, contain multple "magic numbers", which makes it difficult to guess why the values are calculated like that. Using proper constant names for these values and adding a comment would help. At least that calculation is properly abstracted in the function, rather than written in . 

The algorithm for the hashcode could be this one, as also commented above by radarbob. I will leave it for you to adapt it to your own class. General Your class has public fields. It is better to make these private and grant public access to them (if needed) via properties. In this case, for something like a triangle, making it a struct instead of a class might be also suitable. 

After changing the data type, you can generate a random double value in a range by scaling the range with a double between and . gives you a random value between 0.0 and 1.0: 

This comment is obsolete. The code tells you that it is for array1, even better if you improve your variable names and access the array's length directly, like . Note the spaces that I added, to make it more readable. Saving the value in a variable an then accessing it is obsolete. Just do . If you use instead of , you can replace the whole loop with 

How can you have an array of being poisoned? I don't quite understand what these 2 values represent, but if they are different things related to being poisoned, better use two variables. Also, implies a boolean value, so better not use it for int values. 

Here the inner loop can be a for-each loop. Also it should be in a separate method, because what it does is . The variable should be called or . 

Being pedantic about the terminology: Not the class, but the IDE, complains about the unused value. As hinted by markspace, I agree that first creating an instance of the game and then starting it is the natural way to think about it. Don't add to many side effects to the constructor that the user might not expect. To get rid of the warning about the unused value, don't assign the instance to a variable. Just do or . Here is my recommendation, with fixed formatting and changed class name (since sounds like a method name). I also removed the constructor from the main class; I don't think you need it, since is static. 

It would be better to define constants for width and height (using the keyword) and then use them like . This way you can easily change the values at the start of the code without having to search for the line where they are used, and when you see the names in the code you immediately know what they mean, which might not be the case with so called "magic numbers", which are arbitrarily chosen numbers that occur in the code. The indentation, not just in this function but in all code blocks, is weird, because usually you indent Java code with 4 spaces. When I tried your code with processing (version 3.3.6) it seemed like it automatically indents 2 spaces. I'm not sure if it allows for changing that in the settings. 

That way, you can "short circuit" the evaluation of the conditions, because if the first one (or one of the first ones) is true, the following ones will not have to be evaluated, and less jumps in your code will occur. 

Do you really need a ? It seems like you always use as value and actually just want the keys. Use in that case. Call it or similar, instead of table. Use a name that tells you what you use it for. 

Better save the result in a variable with a speaking name, or define a method that returns the result of the expression, again with a speaking name. Such a name could be . Also using parantheses to group parts of the expression (even if they are technically not needed) can improve readability a lot. 

This comment already reads like a function name, so pack the code inside of a function. This way you don't even need the comment, because the function name tells you all you have to know. It could look like this: 

Thinking the object oriented way Many beginner programmers think about their program in terms of code and variables, at a very low level: "How do I get the information I need? I will just make it public and access it directly. That's the easiest way." The problem with this is that everything is connected, once you introduce errors (and you probably will) you will have a hard time trying to fix them, because even the fix of the error might introduce new ones. Thinking in an object oriented way means thinking about your program in terms of objects or components in a system. You should be able to replace a component with an equivalent one, without having to change its surroundings. At this stage, you should not be thinking about any code, or variables, or data types. Instead you should think about attributes and behaviour. What does the ball do? It moves around. Does the ball have a score? Probably not. The player has a score, or in your case the paddle might manage their scores, since they represent the players. In your case the ball has two scores, probably one for each player. That is nothing the ball should be concerned about. Who tells the player to press Enter to start the game (i. e. that the game is ready to be started)? The game should do that, but in your case the paddle does it. I think the classes that you have are fine, just not how they are used. Before writing the first line of code, think about what your program contains (i. e. which types of objects or components). In this case, you would have a . The has two players represented by s, and a . So far this is close to what you have. Now you think about the attributes. The has a and . These are nobody's business, so they are neither public nor static. Make them private and instead of the drawing the , have the draw himself. Because he already knows everything he needs to know. 

The name suggests that it returns the player that won, but instead it returns a boolean. A better name would be . 

Comments should tell why something is done, not what is done. What is done should be told by the code. 

Since we said above that not defining these functions might be better, you can use lambdas as callbacks. Lambdas are anonymous functions, that means you do not have to define them with , but you can just use them where you need them. In the cases where you just change a variable however, you will still need the function. This is what it could look like: 

is very unconventional, and unconventional is usually bad. It is important to be consistent with your naming scheme, otherwise it will be difficult to read the code. The convention would be to name it . But now it is only consistent in style, still not logically. You didn't name the other functions , so I suggest to leave out the "win" here as well. After all it is pretty clear what is checked for in tic-tac-toe. Furthermore, a method should only do one thing, and method names that contain "and" are often a sign that it should be split up into two methods, here and , or better and shorter and . Note that these names might still need to be changed if it turns out that we find a better way to do the algorithms. 

Especially in the API of a class, i. e. its public members like this method, you should use interfaces or abstract types, rather than specific implementations. If you replace with , you can use any implementation of that you like, without having to change many parts of your code. Style The Java convention for class names is . should be . 

Printing the level here is a side effect that you might want to prevent. The method should do only what its name implies, which is getting the level. A better name might be or , since is normally used for just returning a value that is already there. Then you can print the return value where you call this method. 

This would look much clearer as a statement. Note that this did not work with strings before Java 7, but you should be over that. 

Then you access them in your code, which makes it easier to see where the same values are used. You are using the same method call to access another element of a different map, so again you can use a variable to save the result and make the code clearer and shorter: