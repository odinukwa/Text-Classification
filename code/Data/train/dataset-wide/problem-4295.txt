I think that perhaps what is being missed here is the emotional as well as the rational response. People are put out by the fact that they have to do work that they formerly didn't have to do. While you have completely legitimate reasons for that, people need their emotional state acknowledged before they are able to move on to understanding. My evidence for this is the fact that you keep having to restate your reasoning. You have to do that because people aren't really listening to you, and they aren't listening to you (probably) because you haven't yet managed to push beyond the emotional portion of the conversation. Here's what I've learned to do in these situations (bolstered by several years of working in tech support for cell phones, an arena where a lot of the time people will call in angry because they don't understand how to use some aspect of their phone and need to be talked down from the anger before they can move on). 

I feel like there are a couple of issues with this approach... Pick your battles. I understand how annoying it is when someone else you work with writes bad code. It makes everyone else in your department look bad because end users tend not to understand the difference between a bad UI and a good backend, for example. That being said, you really ought to review with yourself whether or not this particular issue is worth spending relationship capital with this supervisor (or whomever else you have to turn to). Along the same lines... Try to keep your circle of concern within your circle of influence. Sorry to get all Stephen Covey here but I think this applies. According to the rules as written, you have a distinct vertical in place. You are supposed to review this other guy's code, but when someone else comes by and marks it off as approved, you no longer have either the need nor the authority to review said code anymore. It's outside of your circle of influence, and hard as this may sound, you kind of need to push it outside of your circle of concern as well for the sake of your own sanity. If the system as is happening is failing right now, consider allowing it to fail once or twice. Consider this: your partner puts something into the code that you know is going to eventually cause your solution to crash (I'm a little bit skeptical of the "infinite loop" thing that was proposed in the comments, as most modern IDEs won't even compile if you do that, but certainly the general concept of putting out untested/sloppy code exists) and said code gets approved and follows the path to production. What happens when the bug is caught? If people are coming to you asking how you let it through, you should have a chain of evidence that says that you did not, in fact, touch or otherwise approve said code. On the other hand, if it ain't broke, don't fix it. I've also run into some pretty damn inflexible developers in my day to be honest. What is "broken" to one person is simply "another way of doing things" to another. If you saw a bug and the bug never actually fired, is it really a bug, or did someone else just come up with a different style of fixing the issue than you did? If it performs worse than your way, then that may be an opportunity to say "well, I would have done this like X", but the reality of programming is that there is rarely only one proper way to fix things. 

Some companies/owners/HR departments weirdly take it super-personally when you leave for a similar position at another company. If you want to ever consider going back, consider those eggshells that you have to walk on. 

Just because you've found an effective way to compensate for something doesn't mean that it isn't a weakness. I think it's still a perfectly valid response, and I agree with other answers in that I, too, have been in many, many interviews with that question asked and not once did they say "no, that's not a valid answer". If you can find a better way to do it, though, by all means do so. There are, as always, two things you want to avoid. 

Having been in this situation myself several times, your best bet is to point out the pros and the cons of both choices, advise on the course that you recommend, but then go with his decision. There could be a lot of reasons why your client wants to start over from scratch. Maybe it has a long history of bugginess and end users have lost confidence in it. Maybe there are issues that might come up with upgrading and the like down the line that he can't discuss with you but which he nevertheless should take into account. Maybe the solution was someone else's pet and he's disliked the way it worked from the start. Maybe he just has a bee in his bonnet about completely re-doing it. The bottom line is, you generally want to think of yourself as a consultant in these situations. Helping the other party to make the most informed decision that they can is the scope of your job. Actually making that decision for them may not be and in many cases is not. In development in particular, there is rarely one absolutely correct way of going about anything, so why use political capital to try to get someone to do something they aren't going to want to do? As long as they know that you are reticent and the reasons for your reticence, you have done your due diligence. 

I would say that the work equivalent of the ignore feature has been around far longer than Facebook or Twitter. Just create a rule (assuming you're using Outlook, though the process is similar for any other email client) that re-routes your ex's email to a different folder and then just never look at that folder. It's pretty simple and easy and you won't even see the header, so if she's in the habit of riling you up with those, that tactic won't work either. If in the unlikely event she actually does have some kind of interaction she needs to you, you'll probably wind up hearing about it from someone else. At that point, fish around in the folder for the email (this is why you don't want to delete them, although you could set a rule to do that too), and if pressed say something like "sorry, I get a lot of emails, I guess I just missed yours". Then, once the situation is at hand, you can go ahead and move forward (you could even set a separate rule that searches for the header used in that particular email chain so that one group of emails is re-routed to your regular inbox). That's really it. You don't particularly need to tell her not to contact you; the email system will do that for you, and best of all, just like the new feature on Twitter that allows you to ignore someone without blocking them, they don't get the satisfaction of knowing that you are bothered by what they are writing to you. 

It's probably not that big of a deal but the time to talk to HR or whoever about handing out T-shirts to prospective employees comes after you get hired, not before. It's unlikely they gave you the shirt because they expect you to wear it to work or anything, but you'd be surprised at how "little" things like turning down a gift might sour a manager towards you. It might not but why take that chance? 

I think the bottom line here is, they're still trying to sell you on their company and whether that's rude or not is a little bit up to you (and of course up to body language, verbal tone, and so on - for all I know this guy really was rude when they contacted you, it's just not manifest in the information which was presented). 

I don't know specifically if you work in your company's IT department or not but I know that IT people tend to be really, really bad at doing the above, and that's a big part of why at so many companies they get the reputation for being kind of jerky. If you can prove to be the exception to this by practicing soft skills, you can go a long, long way. 

My experience as a contractor is that, in addition to the ease of letting someone go cited elsewhere, it is very hard to evaluate a prospective employee, particularly in software development, by an interview. You can ask them the FizzBuzz question all you want, you can have them whiteboard answers and so on and so forth, but often all that brings you in is a person who has memorized a few programming tests and BSes well in interviews while leaving a more competent but perhaps less socially able candidate outside. And all the while, you have limited time in an interview situation - is there going to be time to judge if a candidate is competent and is a good cultural fit for your team? What a contractor does for a large business is say to them "we have hired this guy out on other jobs and we think he is worth employing". Even if that information isn't 100% reliable (I have heard horror stories), it's still information that you can use and which most of the time is very useful. And if it does turn out that the guy was one of those BSing types, you can, as noted, get rid of them relatively quickly, and if they're bad in some of those horror-story ways I've heard you can choose not to do business with the contractor. All of this is information at your disposal that you simply do not have if you hire a guy off the street - if they're bad, there's no way of telling from that interaction whether or not the next guy is going to be as bad. Also, my own gig, for example, is rather specific - I develop and administrate a specific piece of software - and IME there aren't very many of us in the country who can do this. As a large company, your choices are putting out ads on dice and so on and hope that you can find one of us, try to train up somebody from within (which can itself be problematic if you don't actually have anybody else there who can do the job already), or... hire a contractor that specializes in the specific thing that you need. I recently worked at a Fortune 50 company that, over the entire course of the time I worked there (a year and a half; since this company was partially based in California there were limits as to how long they could hire out temps), they had I think my boss said 4 qualified applicants interview (3 of us wound up getting hired). Not everyone is a generic front-end developer or whatever. 

Speaking as someone who works in software development, took 11(!) years to get his degree, and even at that doesn't even have a degree in a relevant field (I mean, I can create an interesting narrative for how a creative writing degree applies to coding but it would be complete BS), let me say this: once you get your first job and even a little bit of relevant experience, nobody cares about your degree, period. As to where you are right now, if you're in the US then you're still very much in luck because there are way more jobs out there than there are qualified programmers. Okay, so maybe with the time it took or your grades (no idea what they are like but just throwing that out there) you won't get straight into Google or Microsoft, but there are plenty of smaller companies that need people willing to learn their business rules and able to create programs for them, and for that matter there are scads of contractors and recruiting companies out there to connect you to those places. 

It really depends. Do you have a good reason for missing 6 years in the workforce? For example, did you take time off to parent a young child? Some places will not necessarily treat that as a detriment, although there is a semi-understandable sentiment at some places that if you took time out like this before you might do it again (I think it's technically illegal to refuse to hire someone on this basis but let's face it - an employer will find 20 ways to not hire you if they don't want you for any reason). Prison? That might be a bit harder to explain. Can you spin the time off into its own job description? I'm not saying you should turn "parent" or "homemaker" into something - any employer is just going to roll their eyes at that no matter how you happen to feel about those being legit occupations (and for what it's worth, I think they're legit too) - but did you do something else? If you worked outside of the industry, by all means put your work experience there if you think it's at all relevant (i.e. you might want to think twice about putting Domino's Delivery Driver down there if you're applying to work in software development, but customer service for a phone company? Heck yes, put that in there). Realize in this situation that you most likely will be asked why you were out of industry at the time. Even if you only worked part time, you can surely turn that into a job description. Prospective employers do not have to know that the dog groomer job you had only filled 16 hours of the week. Is it a job you spent a lot of time at but were fired from in disgrace? I'd still list it. Nowadays from what I gather most prospective employers can only ask the most basic of questions to former ones. In the early 90s they could still ask "would you hire this person again?" but I don't think even that's the case any longer. They can ask "did this person work here between 2004 and 2010?", which is a question which can basically only be answered "yes" or "no". If the old employer volunteers any more information they risk setting themselves up for a lawsuit, or so I am told. The strategy to not list your year of graduation at all and to just start from your work experience is okay, but there are a couple of red flags. One, HR directors do look over resumes to find keywords and the like but also to look for reasons why to not grant you that interview. For many companies an unaccounted 6 year period is one of them. For several, not filling in date ranges in areas they expect to see date ranges is one. It makes it look as though you're lying or hiding something. Even if you're not, or even if you have really good reasons to do so, a lot of HR people don't know you, don't care, and only really care about whittling down the number of applicants to send to the next level of the interview process.