Dictionary and switch are far from the same, even in your case. As a general guideline I use a dictionary as a lookup mechanism and a switch as flow control. As a lookup mechanism a switch is less efficient than a dictionary. Maintenance wise, adding new values to a dictionary is not changing code per se. Modifying the dictionary will not cause a change to the code calling it. And a dictionary has a built in error check - you can't have the same key twice with different values. However the switch is very much involved in program flow control. Therefore changing the switch code is higher risk than changing dictionary content. Finally, using a dictionary decouples your data from the code that uses it. It makes the data re-usable. And you don't have duplicate switch code everywhere the data is used. 

Customize test messages. Without it one gets and that's it. I like to know the expected & actual values without having to read test code. When running hundreds of tests this becomes essential, IMHO. Further, it has a self-documentation quality. 

*Show me your data structures, and I won't usually need your code; it'll be obvious." - Fred Brooks, The Mythical Man Month 

Exceptions as Error Handling If you do this make your own Exception class; if only to give it a name that conveys intent , for example. I suggest the above because using exceptions this way is considered poor coding practice. It perverts the intent of exceptions. Further, exception generation & handling is relatively computationally expensive. 

Good Abstraction makes methods shorter I suspect this is the hidden "Ah-Ha" lesson. NOTE: the code samples are for inspirational purposes only. It is not a comprehensive refactoring of the entire program. For example instead of do this , that says what it does much better and will be very short indeed. Make enumeration for menu choices 

I infer that doing the calcs in the constructor is trivial as well - no problematic user-perceived lag, hesitation, slowness. 

Code file organization Putting the code under a "testing" namespace is misleading, the seed for bad solution organization, and just lazy. The convention I've learned is that test code is not only in separate files but also in its own project(s), generally with file and project naming that "pairs" it with the particular target code. As your applications grow and you implement continuous integration you'll be glad you took the time. 

I would add some structure. As a general statement I'd say that good structure(s) helps reduce code. Make collections (list, array, whatever) for each of Smokers and Threads. I would also look into string formatting so you can loop through the Smoker collection and do your output. You do not want to hard code "Pat", "Mat", "Tom". The Smoker class has a Name property, use it! 

The can have a "type" - with all the types defined in an enum. This eliminates the need for subclasses. 

Calculating Price Polymorphically Each sub-class will calculate it's own price. So far it seems that a "Price" function is sufficient. It will be as complex as needed to calculate its price in combination to its sub-parts. Client code will only do one thing. Call "Price" - and that thing calculate's its own price. In turn, that thing calls "Price" on each sub-part. It does not matter that a pump consists of motors or motors consist of pumps or that anything consists of anything else. Because every thing is a Product and every product has the same structure and the price is always calculated the same way: BasePrice + sum of component prices + sum of options. The client does not know, or care, what the product consists of - just give me the price. This is polymorphism. 

Why do you have HEAD and TAIL NodeTypes? Doesn't their position on the branch tell you that? I'm concerned that you have structure traversal code infused into class. Classically the structure - tree, queue, List, etc. - is independent of the objects it holds. I would think greatly upon using something like , , etc. Use that structure's inherent reference/traversal features in the context of . - wrapping (inheriting?) that structure along with your concept of into a class that is essentially a class. I wonder, is what you are really building? In any case I suspect the separation of concerns will make the idea standout better conceptually and architecturally. How many palaces do you have defined I wonder. Why is enum defined inside ? That's unusual. You want it hidden from client code? I don't think so since you have method parameters of . 

It's flawed, in several ways. Premature Optimization The code smell I get is that the whole point is avoiding instantiating and then disposing elements. Reasons we stay away from optimizing up front 

THIS - Let the Visitor do the walking and talking (decision making). And the decision to evaluate empty squares is delayed as long as possible - push details down. Note that Board, Square, Piece visiting logic is decoupled/layered. 

What is about? debugging? And why does this constructor not care about score and HandRank? How is it that two very different constructors both build valid objects? Why pass a card array when defines a ? Use names that use poker terminology. Not , rather for example. The scoring/evaluation must be refactored out of this constructor. If you did I suppose you would not be passing in that other constructor. My initial cut (a little DSL there) would be separate methods for each score type. 

Assumption: We take the next person - or group - in line and put them on the coaster if there is room. If no room just wait for next time. No group can be larger than the coaster capacity. For now, just ignore them. Use the class Write a single method (sub-methods as needed!) to fill the waiting line. Prompt the user or hard code it. If a 10-person group shows up. WaitingLine.Enqueue(10). If 1 person shows up. WaitingLine.Enqueue(1). WaitingLine.Dequeue() to get next in line. Add that value to a DailyRiderCount. When the day is done, multiply the DailyRiderCount by the cost of a ticket. 2/3 of the original code now goes away. Now it is running faster too. 

Throwing an exception in doesn't seem right to me, but not wrong per se. I don't see a practical difference in passing or casting resulting in . 

No. No you don't. Reuse the function; passing in 1) prev. question's answer 2) this question's ID. Perhaps the questions are numbered and that should suffice as an identifier. 

Move If's to the top If the table is null or has no columns then there's no point in going on. So check for this up front. This removes 2 nesting levels. 

The tables are reference-able by name. The property is a which has an indexer for referencing by name. 

Should inherit ? already implements , for example. You'll get all the built-in goodness and it will be exposed at the 'class level' to the client. There's lots of nifty search and sort methods that take advantage of implementation. 

Exceptions Use to capture context. It will be very handy to know parameter values when things blow up. To facilitate the above, and should override . Then you can do this. 

If this method then I want to see the dependencies. So The general idea here is to name things in business terms. It's fine that the thing we're dealing with is a file, but so what? That's just an implementation detail. However if this method is already a well encapsulated, "rubber finally meeting the road" kind of code then there isn't much to fuss with. Are we talking about "dependencies of a file" or "the dependencies are files?" If the former then I'd look upwards in the code structure and figure out just what this "file" is in terms of your domain and potentially rename some things. 

Make that a function. Call it for every question, in order. Every time any question is answered always call it for all questions (in order) as this will handle arbitrarily changed answers. 

I think the main problem is that everything is . So client code can do anything anywhere at any time - a free-for-all of code calls. 

I want to emphasize that you should not dump raw XML into your constructors and parse that out - I mean for example a single team's XML into the constructor. Instead your "DAL/Factory" should parse it all and: 

This is a violation of OO principles. Single Responsibility, Law of Demeter (least knowledge), Encapsulation ... a discussion for another time. As a practical matter do not force the client to have to know how to manipulate the class properties. should know how to iterate itself. The client should not tell the object to resize, or how. 

I'm going to try to attack from a perspective of refactoring. In my mind "re-write" means starting over. In you want to say this: 

Superfluous Tests I argue that the two "addToCart" tests is one too many. There's nothing specical about adding one and then several others; unless there are special requirements like duplicate items not allowed. Or something special about adding objects with particular different properties. Instead I rather see how passing null works. This is clearly a different/special case. 

Checking for incrementing or decrementing sequence should be a dead simple one liner each. Why does it involve an array? In that context what does being mean? 

Next Kata Cycle: Object Oriented Taking an OO approach will make the code more Openy-Closey because good classes are focused and then tend to have "one reason to change." This good application of Single Responsibility Principle gives the classes a quality such that the Open-Close principle is a natural byproduct. In otherwords O/C principle is not a guide for construction as much as it is an indication of well formed classes. SPECIAL NOTE: It will be a long time before I get around to actually calculating the grocery total cost. There is a lot of OO structure to get into place. SPECIAL NOTE 2: These are in no particular order and are not complete. This is a sketch to get across the idea if thinking object oriented. 

Create Custom Collections This hits lots of OO principles like encapsulation and Law of Demeter, but mostly the single responsibility principle. The custom collections will have the responsibility for things like: 

Given separate event handlers code can be simpler because a parameter is not required and code is greatly simplified. The loop is unnecessary. Note that , are now indexes, not the objects themselves - which actually means only one of these is needed. There may be some redundant code for showing & hiding but the simplicity is very compelling. 

type safe avoid typos self documenting - all the possible class-types are defined here. Query string validation - now that we have a definitive list of all possible class-types we can verify the query string contents against the intelisense in visual studio 

IS A so a client could do all kinds of sorting dynamically using LINQ. Call the above, then, "default sorting." Future OO Refactoring I think and should merge into one. 

limit the body of to the code that you really need to cover. This also means you get specific about the exceptions caught there. catch exceptions as close as practical to the likely source; and database calls is a likely source. Then you can capture lots of good information about your , , etc. objects, parameters passed, etc. and put that stuff in the property. 1 & 2 go hand-in-hand still have an exception catch higher up as suggested by svik. 

I will address the "big picture" algorithm of this program, not the prime number bit. Ideally, have the upper most method(s) read like a summary. This structured programming approach may seem like overkill for such a small program but even the smallest programs benefit from good structure. 

I see another model "class", let's call it . This is effectively the game itself. It will contain , the player's guess, and a method, let's say, that makes everything happen. The controller can access and wire it to the view - a button in a GUI or a keypress event in the console. MVC! 

To illustrate #1 above: do you really want to throw an exception if there is no regex match? Then do not put that in the block. And it should not be in that method in the first place. 

If this method is getting the query, why are you passing in the query? If you are passing in the query why is a query being defined? 

All validation logic should be in an appropriate "validation service" class as @meWantToLearn said. I assume something like this is possible in : 

Follow Through with the Object Oriented Answers Some of the answers I've read call for a , and implementing a is exactly the right object oriented answer. BUT it's not the right kind of collection. EDIT explicitly address cyclomatic complexity 

Has no business in the class. In as much as contains both of these objects, this logic should be there as well. And of course it needs to be encapsulated w/ descriptive name. Edit Explore the idea of having implement , then the above is the meat of . Then can also implement and can call it it's own implementation. Easy Peasy. End Edit Fractal OO Go deep w/ abstraction/encapsulation. For example: 

Single Responsibility - An items collection This is a really excellent exercise for understanding SRP. Make a class. Put the enumerator in here. Have simple properties like "total price", "total quantity" and any others appropriate for lists of things. Override for a nice listing. Refactor to use that. And generally fine tune the item list and shopping cart classes for SRP-ness. will still have a total method; which will call the collection total method. This is one example of how a shopping cart client will talk to the shopping cart and be ignorant of shopping cart implementation. It is also an example of "Maximize cohesion and minimize coupling" (I love that phrase!). As for general implementation I prefer to "have a" generic List (or other appripriate NET-supplied collection class) instead of inheriting from List or implementing ICollection, etc. Why? Because it hides all the .NET-supplied pubilc properties and methods and I expose precisely and only the functionality I want. It goes to design intent, SRP, defensive coding, user requirements, domain specific language, etc. 

There's no point in an abstract class with nothing in it. I assume a product has name, description, price, a SKU (product id) at least. 

I've written this in C#, but it should translate to Java easily. I made call itself, reversing the order of player1 & player2. This eliminates fully half of the 'if else` maze. 

is fuzzy Looking at the original code as just the method parameters together w/ the overall control logic, it is not at all clear what I'm seeing. Also, the seeming nested-repeated logic is making me wonder about flawed logic or poorly structured logic. I wonder if you get the outlier conditions out of the way first thing then all the logic is clearer. 

Communicating through design How would I interpret - make an initial guess about - design, intent, and use from what I see here? 

There is an answer in here I hope, and it is a polymorphic perspective. Your description is very reminiscent of a problem where using simplified the hell out of things. Ask yourself if each enum member represents a different class or perhaps groups of enum members represent states for given classes. ... and/or ... Where's the context in such an abstract array? It's hidden in a morass of es. Does the length and/or value of certain element(s) determine the "type?" If so then a three step process will break apart the existing code, simplify, and clarify. 1) Evaluate for the type, 2) instantiate via a factory 3) do whatever with the instance. Create a class that will hold the array (whole, intact) plus appropriate key fields (values extracted from the array). A super-set of key fields so any byte array "type" can be held there. Add a field for the type itself (likely an enum), as distinct from your Code enum. This class will take an object in its constructor. I had a case where seven distinct "types" were clearly in two groups (per data meaning/use by the users). It was convenient and practical to design only 2 classes. Create "Processor" classes as needed that do stuff with and to these "byte[]-EqualtityComparer" instances individually and in collections. If you need collections I strongly uge you to create type-specific collections (2 in my case) that by design know how to use the class. In my case I was looking for duplicates.