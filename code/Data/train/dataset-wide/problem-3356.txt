Yes, MySQL locks the table completely whilst it does the ALTER TABLE statement. Most of this time is spent in physically copying the table, which is why it is recommended you put all your necessary changes together in the one ALTER TABLE statement. There are several approaches to mitigating this problem on a live database if you can't get a decent maintenance window. First of all, many environments have timeouts of several minutes waiting for a table to become available for their query and don't know (and it's really difficult to check) just why the table is locked. I've used this quirk of a live website to do changes to tables. On a site I used to look after, I figured we had an allowance of about 7 minutes before someone started noticing. :-) It helps to make sure your boss is on your side. Another way to do it is to do the select-insert-rename trick. This works well if the table either has fairly low frequency, or is purely the target of s. The basic steps are to copy the table's schema, make the necessary changes, craft up a statement to do a from the old to the new, and rename the tables (do the rename in one statement). You also need prepare ahead of time a statement to copy over any "new" records that got added or updated between the and the . I also did this a few times in a past job. However, there are come caveats: 

The command histories for each window are in memory for each bash session. You'd have to have bash write to different history files for them to persist and remain separate like you're asking. You can do this by setting per screen session. I imagine the way to do this would be something like this in your startup file: 

You need to add your hosts by name, first. The registry interface will have an option for this, probably called something like 'Add Host'. It adds them in a special way to the DNS tree so that you can then use them as nameservers. Once you've added them, you can point to them in the same interface (as you've already discovered) as your name servers. Sounds bizarre, but it's a basic 'bootstrap' problem. 

Ext3 is a very good, all-purpose filesystem suitable for the vast majority of things you could use a Linux server for. It has only a few known performance quirks, the main one is deleting tens of thousands of files in a hurry. It is also not recommended for storing lots of very large files, such as motion video as used in a DVR system, or lots of very small files (tens of thousands) in a single directory. Alternatives which cope with those extremes better are XFS and JFS, but if you're not likely to need any of those three scenarios, then ext3 will be fine. (ReiserFS also handles the lots of small files problem and deleting many many files at once problem quite well, but doesn't handle lots of huge files all that robustly.) And if you're doing disk-heavy activities where speed of the filesystem is going to matter, then EC2 is going to be a bigger problem than the filesystem. 

You will need all the -dev packages for the libraries you're compiling against. That meant mysqlclient-dev, httpd-devel amongst others. 

You will need the normal build chain (gcc, binutils, make, autoconf, ...) plus Apache's dev library at the very very least. You might want to run first and see what options are available; a number of them will need extra dev libraries, such as for MySQL support. And some options might need configuring if RHEL4 has some directories different to what the build/install scripts expect. 

I remember researching this a little some years ago. If you use Courier for your MTA, which means maildir storage, you could use SqWebMail. This is not SquirrelMail, it is Courier's own webmail client. The advantage of SqWebMail is that you don't need to turn IMAP on because it plays directly in the maildir storage. However, it's really quite a plain client. I eventually got tired of it. What I use now is caleld IlohaMail. It connects using IMAP and is quite bandwidth friendly. It's not as fancy as RoundCube or SquirrelMail, but it may still appeal to you. 

Note that this doesn't solve the problem of updating the history file when your shells are terminated by a reboot. 

You will understand your database security and how it is implemented. You will get to remove access that is no longer required. 

There's soemthing about PHP in a website which means the MySQL connection thread is not thrown away even though you've torn down the socket cleanly; it still hangs around waiting for it to be reaped. You want to look at your setting for . On default installs, this is insanely long. A website will only need this to be about 20 seconds. You will probably also want it this low if you're using persistent connections. 

Some virtual environments name some of their virtual devices with names that are a bit tell-tale, for example, VirtualBox presenting a graphics card that calls itself "VirtualBox Display Adapter". But looking for those ties you to a particular VM and possibly a narrow range of versions. It might be possible for your code to see what sort of virtualisation it could set up. If that fails entirely, you might be in a VM. But you just as might easily be on a box that doesn't have any VM capable hardware. 

Have a look in a musical instrument store, specifically one that sells electric guitars. A lot of effects pedals are 9V powered and have both a battery and an external power socket. Since the people who buy those often have several, there are also looms/splitters available so one power supply can power half-a-dozen pedals. I know you wanted 5V, not 9V, so you'd have to modify or replace the actual power supply. You could also look in an electronics parts store (In Australia, I'd point you to Jaycar.) or one of those PC oddment stores that sell less common PC stuff, like POS-terminal keyboards and USB-SCSI adapters. They often advertise in magazines. 

The short answer is yes. The way to do it is to enable . Courier supports a Mail Submission Agent (MSA) which is just like a Mail Transport Agent but is intended for non-local mail injection. MSA servers not only listen on different ports (587), but are capable of correcting minor errors in the SMTP data from the client's mailer. The other main benefit is that you can easily and simply disable relaying from external hosts on the MTA and enable authorisation on the MSA. This neatly gets around trying to authenticate from particular domains which is almost impossible because the authentication request happens before the from domain is provided. The biggest downside is that you have to change all your clients to send mail to port 587 instead of port 25. 

It is possible to run multiple MTAs on the one machine, but they have to bind to different ports. I know for a fact that Courier can listen to whichever port you like; it uses this feature to run a second server on 587 as an MSA, should you need it. However, MX information cannot be directed to a port, only an IP address. The only way to test this is to manually send data to the non-standard port. 

You're running out of memory. That's what OS error 12 is. (see /usr/include/asm-generic/errno-base.h) It looks like it's happening on startup. What else are you running on the box? How big a buffer pool are you asking InnoDB to create? Are you running 64-bit or 32-bit? Do you have any swap? Wade. 

The first general thing you should do is look at the memory parameters. The default settings for MySQL are very very conservative. Whatever engine you use, you will probably need to raise a number of the memory parameters by ten or even a hundred-fold. The next thing you should do is look at the table cache. The default value is 64, which is only useful if you have no more than about 60 tables. You will want to raise that a long way. The third thing you should do is look at the thread and connection parameters. The default wait_timeout is hugely long for most web-based applications and can be reduced to something like 30 seconds. This will improve memory usage as well, as MySQL will reap connections sooner, leaving much less lying around in a 'sleep' state.