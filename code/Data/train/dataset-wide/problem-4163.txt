Don't you think automating your team's build process will look great on your CV? And if they ask you why you want to leave the company, just say, "Because they wouldn't use my automated build." Seriously, like all programming you have to work within restrictions (memory, frameworks, operating systems, business goals, time, etc.). The job place and life in general are no different. 

Isn't this your job as a programmer? Do you think every time someone runs a report or exports the results into a presentation they give the programmer credit? That only happens in movies at the very end. I suggest you start to establish the size and makeup of the team to manage this project. It will change over time, but it continues to be used as the criteria for membership. Also, are you the only person in charge of this project? Find out who is and suggest to them, you will write this up. If they're in management, they'll be happy you're doing the work and are less inclined to get involved with the details. You may want to point out that a small team is easier to manage, so you only want top people who can contribute the most. Just remember, you can try and make everyone happy and let them get involved in this project, but if it fails, it will be reflected on you. The ones that get left-out can bad mouth you all they want, but the project will speak for itself and you. 

If you think there is a benefit, then include it in your cover letter. One of your hobbies could be a connection to why you are interested in this company and/or their industry. If you don't have a lot of job experience (recent graduate), a hobby or interest is a way to show why you've chosen a particular field. Otherwise, you're wasting valuable space on a resume. There is an outside chance a person bias against one of your hobbies could be held by a potential employer. Avoid the chance of irrelevant information clouding their judgement. 

Make sure you not only estimate how long it will take, but how long will it take before you have the time to work on it. If something takes two hours to do, it's very difficult to say when it will be done if you don't even know when you can get started. You have to factor other task times, interruptions, etc. A pitfall many developers fall into is being too eager to please and not wanting to be the bearer of bad news. Of course he wants things don't on time. Who doesn't? There are a few tricks you can use to help you: 

Unfortunately (for the candidate) he/she may be the most skillful, but not have a lot of job experience. An employer may think they're the best, but since the market/other employers will not pay this person at the top of the salary range, they don't either. The real reason may be that they don't feel they have anything to lose as long as they stay in the range. 

Once you have a reputation for working hard, it's much easier to not be labeled a slacker or being lazy when asking to work on a different type of project or environment. Most people think of lazy as someone who doesn't work hard at anything. You're just asking to work on things you enjoy. Good employers should always look to get people who enjoy the tasks they need to get done, but it's rarely a perfect match for everyone. You picked up the slack and took on a project that nobody else wanted. They should consider themselves fortunate that you're doing it, there's no reason to expect you want this type of work all the time. There was a project you liked and now you have one you don't like. There's nothing wrong with letting your boss know you would like the opportunity to work on more projects like the first one. Hopefully, they could find people who would rather write documentation or at least consider this with their next hire. 

The question is, when will they start to get their work done, so they can go home when you do? The President could decide to give you more work, so be careful about your push back. The ideal solution is to look into why this group is always so far behind. The expectations could be unreasonable, which would be hard to fix, or you may find them to be highly inefficient. To hide short-comings, some people will do things to make them look like they're working harder or doing more. Others may have a life-style where they want to work later hours because the bars and clubs haven't started yet or they want to wait for the traffic to go away. For some of them to complain to the boss about your not working makes them sound childish and unprofessional. One thing I've learned through experience, is that I get more done in less time that those with less experience. I know how to get started working quicker, when to ask questions and manage may workload. Seems like someone who does that shouldn't be punished. 

Is it possible you're conflating large companies and agile? Some larger companies are a little more literal in their requirements whether it is due to them being more selective or they sometimes have people involved in the early stages of hiring who don't really understand technical requirements. If you don't have experience in an agile environment, they may prefer hiring people who do. There may be concern about you not having experience on an agile team. It can be a controversial topic. Developers either love it or hate it. They may be assuming you've tried to avoid it in your career. Unless you start interviewing with smaller and or non-agile companies, it is difficult to determine what he problem is. 

There are the benefits from convenience and access to information, but things become important when they are made important. I don't know about your email system, but where I've worked, no one uses the excuse "I didn't get that." because someone will reproduce the sent copy. Email is always on (not a great thing), so it should pop up with every message. If anything, check your spam folder. There have to be consequences and there are no excuses. Email is a horrible archival system. Employees get replaced, so much of the old email is lost. I think the better solutions are highly accessible (web, mobile, desktop, etc), offer notifications, great search tools and have buy in from upper management all the way down. Integration with other data stores (CRM, reporting, etc.) is a big benefit as well. People use and rely on good tools. People rarely choose the dull knife over the sharp ones when they're in the same drawer. For code format, you can attach files that can be opened with a code editor. Do non programmers need access to the code anyway? There are too many products out there and some are better for different situations. You'll just have to do some research. Hopefully, the rest of your team recognizes the problem and will help you in this search. 

I think you have to be willing to accept that perception is reality. With some cooperation, the team and your supervisor should be able to inform and educate the company on the benefits of this team. Hopefully, your supervisor had some foresight into allowing this team to develop the way it has that there will be people who object. Extra effort has to be made to demonstrate you team does do quality work. If I were your supervisor, I would suggest the analyst bring any concerns to me first out of professional courtesy. There may be some legitimate concerns. I don't see this as all or nothing and the only solution is for all of you to pretend you're working in Corporate America circa 1950. Is leaving the Nerf fun at home too much to ask? You also have to be careful how you interact with other people. When someone presents an emergency, being glib ("I'll get to it just as soon as I shoot the hipster.") can give the wrong impression. And yes, impressions matter. People notice your group "playing" and object because they are actually working. They don't see the long hours, bug fixes under pressure and the weekend upgrade. A good supervisor would point out these things and make an effort to convince the company to take the good with the bad. Another point for a supervisor to make is to consider only one person is complaining. Of course there may be more, but we're trying to make a case in support of this group's antics. It's possible the analyst needs to get to know everyone. This is why it is important for technical staff to get to know everyone on an appropriately work personal level. The attitude needs to be, "I'll ask Mr. Fox to do it, he always gets things done." and not, "Great! Now I have to go over to the Boy's Clubhouse to get something done and hope they don't put my eye out with a Nerf Gun." 

The non-technical companies that are getting the most out of technology are either doing things very uniquely for internal needs (workflows, approvals, information sharing), but more than likely, making it easier for their customers and vendors to do business with them (client sites, mobile apps, data transfers). Start thinking about how you can present these items to them instead of waiting for them to come up with their own ideas and bring them to you. If you don't want to be considered a cost center, you're going to have to maneuver your ranking in the company to report to the highest person possible. That's rarely the CFO. 

Can you build this? Have you ever build something like this before? How much do you charge? When will it be done? 

Apparently, your manager doesn't have a choice. You having a 20+% chance is better than nothing. You indicate the manager is aware of your skill level, but pose the question as if you have to create this on time or it is the end of the world. Keep in touch with your manager. Try to hit short and manageable mile stones. At some point you may be able to reassess the project and possibly remove some of the requirements. Don't be so afraid of failure that you don't stretch your skills and come up with a piece of this project that is useful. Edit: Also, consider getting some training. A one week class may move this project further in the long run. I think this is part of the idea that your manager is aware of your limitations at this point in your career and has an opportunity to excellerate you skill level. 

I don't know what your expectations are for a passive job search, so you may want to decide what you want to get out of it. Then you can decide on the content. Like many things on the internet, it takes some work to direct people to any site. If you plan on getting a great job in the near future this way, You'll need more self-promotion. You could create a LinkedIn profile or even a Facebook page if you want. Other than showing your ability to build a website and possibly demonstrate online marketing capabilities, I'd hate to think anyone would hire you or choose not to hire you based on the content. "Can't hire this person. They like to sky dive which is very dangerous. What would be do if there was an accident?" The imaginations are going to run wild. You would be better off doing some sort of job related blog. Written communication skills, technical know-how, and the willingness to take the time to put it out there will impress more people IMHO.