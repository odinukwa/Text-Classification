He will probably comply, then absent mindedly whistle again later. When it bothers you, you can now say something like: 

or, if the manager had already indicated they were doing it and you just felt like passing on the information about A and B: 

Just as the important thing about a whiteboard programming test is the conversation it facilitates, the important thing about a take home test can be the conversation it facilitates. Tell them to keep the code handy because there will be a conversation about it afterwards. Then, for those whose submissions are good enough for a phone or in-person interview, you can ask stuff: 

I think you're most likely to end up in the first (some hip young startupy kind of place) or the third (a somewhat more staid place with older staff and more of a history). In either of them, asking about the tattoo policy in the interview, and saying you have one, could count against you (though for opposite reasons.) In the second, it will make no difference. I see essentially no argument for asking in advance, other than "I refuse to work with people who have a prejudice against tattoos" - and I don't recommend you take that position. 

You are right to feel a pressure to do something. I meet developers like this all the time, whose skills are slipping away. If this is your last job before you retire, and the company and the work will last that long, you don't have to do anything. But if not, then you should. Because when the work stops, where will you be? You feel, I expect, as though you are standing with your hand on a doorknob, but not opening the door and going through it, which makes you feel bad. But you know what? Your peers are just standing in the corner and haven't even found the door yet! And you don't have to burst through it right now. You can start by opening it and looking. Just look at all the shiny new tech that's been released lately that you could choose to learn about. There are new .NET versions released all the time. You don't need to catch up on everything that's been released since you stopped keeping up; just learn the very latest stuff. Free videos and tutorials are all over the web, and if that feels a little too unstructured for you, there are proper courses you can buy. For example PluralSight (disclaimer: for whom I write, but not courses I expect you will want to take) has a $29/mo subscription with all the courses you can watch. There are offline readers to let you put courses on a phone or tablet and watch during your commute or in the evening instead of whatever you do now. One way of "looking through the door" is to make a list of tech and some resources you could learn it from, as well as what it's good for. This will help bring the huge universe of Stuff I Should Have Learned down to a more reasonable level. Then, if you decide to learn a technology, set yourself a very specific small goal. For example, if that xml-processing stuff you're writing now is for a Windows app, "I will learn enough WPF to be able to open a file, read the contents, and put them on the screen." If it's Web, then enough MVC (Whatever the latest level is) to do the same thing. If you work with databases, add a clause in there about doing a simple statement (a select maybe) against a database. Then launch into your learning process evaluating things against getting you to that goal. A long article that's full of history and shiny screenshots to persuade you why to use a technology is not as helpful as one with code and the like to show you how to do what you want. Once you've written a "hello world" app in the new tech, take a long hard look at your current job. You can't deploy stuff to customers with the newest versions, but is there a task you do all the time that would be quicker if you wrote a small utility? Maybe some powershell? Maybe a little WPF app? Look for something useful like that, and still in your free time, evenings and weekends, write it. When it's done, start using it. After about a week, go tell your boss what you did. Something like this: 

Some managers will push a little harder for details. Others will offer you paid time off, especially if you have family business to deal with as part of the loss. But all managers will appreciate you giving them an explanation that is not about work, your team-mates, or anything like that. Because when you're vague, that's what they tend to fill in for themselves in the blank place they have for the reason you're behaving as you are. 

Your apology needs a little work. First, it has passive tense in it: this feature was turned off. Part of apologizing is owning your mistakes. Second, it has too much detail, they don't really care why you missed it. The reason you missed it is it wasn't top priority in your mind and you got caught up with something else. Third, you wait too long to address the emotional aspects of your error, putting it after your detailed technical explanation that implies it wasn't your fault. A good apology: 

You're thinking "should I work longer hours?" and in some offices, the answer is yes. In your office? How could I know? How could anyone? Even if you're observing your buddy working long hours and getting a good review, correlation is not causation - his success might be tied to something unrelated. Here's what worries me about your question. A review is supposed to be a two-way conversation. Here's how you did over the last year, and what I want you to do next year. And you said about this: 

I suspect most people would advise the first or the last approach. The first is the easiest and in many cases the right thing to do. I have spent literally years trying to make someone show initiative, value my money, and care more - essentially the third bullet. It's exhausting and not a lot of fun, and not very lucrative either. If it's expensive for you to acquire replacement employees then you may have a motivation to try to improve the ones you have. Start by just assigning them more - they clearly can do more and whether they ask for it or not, give it to them. Make sure that what they deliver is appreciated. Make sure everyone knows why they do these things and how it brings money to the company. Do not start using scoreboards, bonuses, or any system that can be gamed. You want their motivation to come from inside. Push work on to them instead of waiting for them to pull it. Whenever they say "that wasn't in the instructions" have them update the instructions on the spot so it will be there next time. Some of them will quit. They like being able to goof around on Facebook or whatever. Some of them will step up. At least you won't be converting your hard workers into not so hard workers. But stop paying people not to care. And don't wait too long to realize you can't always make people care. 

Probably the strangest place I've ever done an interview was in the stands at an arena. The candidate was employed elsewhere and had kids in hockey; I had a kid who skated three nights a week. Trying to set up an interview, every evening timeslot was out because one or the other of us was at the (same) arena. So we met there, went to a quiet part of the stands, and conducted an interview. There were technical and cultural aspects to the conversation, and I hired the candidate. I learned about creativity and problem solving, confidence, and community and volunteer spirit by meeting there. I doubt a coffee shop could offer the same though. If you're being interviewed somewhere unorthodox, I have two pieces of advice: 

Fix that. You probably didn't think it was going to be a continuing thing. If you're using work items, and he checks in against the work item, do your checkins against the same one. Consider using a code review tool that creates some sort of artifact of what needs to be done (a plain text document in which you write notes, if nothing else. Or if you make the changes, a diff showing what you had to to do.) If you can, instead of fixing the problems, assign him the task of fixing them. (Probably that is the only approach that might get him to do it right the first time.) Keeping track of the rework and cleanup you do will give you a chance to see if there is any improvement over time. Maybe at first you had to make changes to 100% of his "completed" work. But now it's 75%. While that's frustrating, it's an improvement. Then if you want to go to your boss, you have data. "I have to edit over 80% of his work to clean up technical debt - I'm not talking about formatting or commenting either, I mean not validating the parameters that are passed, no error handling, not considering the possibility someone might cancel a transaction, and so on. It was 100% at first and I've discussed every one of my changes with him and asked him to do a more complete job, but I've seen only this marginal improvement." Then you pass over your summary of what you've had to clean up. Then you pause and say "I know on the surface it looks like he's super fast compared to me, but that's because he whips through the easy part doing a careless job, plus I am spending time fixing all this. Like I said, I've shown him all this and asked him to write code that meets our standard, but I've had no effect." Then, you pause. Ideally you don't need to carry on and say "can you talk to him about it?" But if your boss just shrugs when you pause, then ask directly. Important aspects of this approach: 

This depends very strongly on your employer. If you are at the point where you cannot work then to be honest I don't think there is any downside to going to HR. A big retail company is sure to have one. If they are useless and unhelpful you have lost nothing by talking to them because you were going to leave anyway. They might well surprise you though. If you are covered by short term disability you may be able to stop coming to work and collect that disability payment instead. Typically there is no waiting period for short term disability. However you must be diagnosed by a doctor; you can't just announce your own diagnosis. Further, the insurance company will demand that you be treated - therapist visits, medication, etc. You can refuse to accept certain treatments, but they may suggest the coverage will stop if you do - this may or may not be a true threat. I had a staff member whose approx. 4-year-old was diagnosed with cancer shortly after his marriage fell apart. He was unable to work and was of no use to me (he kept coming in, but was getting nothing done) so I told him to go on the disability so that I could stop paying him. They would only confirm his coverage a week or so at a time - this added to his stress significantly. He strongly resisted seeing a therapist but they insisted and in fact I believed it ended up helping. If your company doesn't have short term disability, they may "self insure" - that is, pay you even though you're not coming in. The HR person would know this. If they have nothing at all that will help cover your salary, then you can talk to someone at EI about making a claim. This will likely involve giving up your job completely (though your employer may tell you they are willing to hire you back later) and applying for EI. Your eligibility will depend on things like how many insurable weeks you have worked. There are people who will help you with this, but you have to reach out to them. Some, like your managers or HR, can try to reduce your stress at work, though that's a tall order in retail during November and December. Some, like HR, can tell you how to apply for short term disability, and let you know what to discuss with your doctor. Your doctor can help you not only with qualifying for various income replacements, but with actually handling the stress and the physical symptoms it's causing you. The folks at EI and your insurance company may help keep you fed and housed while you deal with the stress. There is a whole army of people for whom this is their job. Swing them into motion now, while you still have the strength. Don't start with a lawyer; that's for when the nice, pleasant things don't work. 

This is one of those questions that doesn't have a win-the-job answer, but has some lose-the-job ones. Stay away from those. For example: 

There is nothing wrong with preferring to work than to socialize. Yet your colleagues are objecting to your behaviour. Why? There are a few possibilities. One you have come up with is "They hate me for concentrating on work." Let's try some others: 

I would definitely not start low level - "this code is inefficient" or the like. That is just going to cause a lot of defensiveness for very little gain. Mixing and matching an agile project and a waterfall project is insanely hard. The waterfall people want to establish the interface between your projects (file format, table layout, api, whatever) in advance, then go away and write to that interface. You want to just get started with the simplest possible interface, the pieces you know for sure you'll need, and then come to them saying that you need to add or change something and have them react to it. To you, this is responsible, agile, and fast, because you didn't spend forever arguing about design at a time when you couldn't possibly know the answers. To them, this is cowboy, jerking them around, constantly changing the ground underneath them. It's a recipe for disaster. I suggest you surface this difficulty to the next person you have to work with. Talk it through and decide together whether you will fully design your overlap/interaction together first, or start simple and be prepared to change it as you go along. Really listen to the resistance you get from the other developer. They are not automatically wrong. Agility is great when you own all your boundaries, but it can cause extra work when you don't. On some projects, that extra work is still less than the days or weeks of speculating and arguing that led to the creation of a suboptimal design you were stuck with. But not on all projects. On this one, it might make sense to fully design the boundary between you and the other developer before anyone starts. Then go ahead and be agile inside your silo. For the larger issue, that you think they (a) write crappy code, (b) should be agile like you, (c) should use a consistent and modern toolbase, and (d) should be doing more testing and more sharing code between projects - tread very carefully here. You've tried just being great and seeing if they want to copy you, and they don't. It's not at all clear to me that you see the benefits to them of keeping right on the way they have been. You will never persuade them to change their ways without understanding why (beyond inertia) they don't. You will probably also need the explicit support of your manager to lead a "best practices" drive that changes existing code dramatically and teaches these developers how to do it from now on. Doing it on your own? They're just going to keep brushing you off because they don't have time for that, they have code to hammer out.