Your indentation could also be improved. Use a consistent 4 spaces (or 2 spaces, or 1 tab, if you prefer--4 spaces is the international default, however): 

is by design, as I only need to be able to access the s out of this class. This method gets the trees stored in the second level so I can get the items in the third level. returns the menus stored in the top node(s) based on which version of tutorial the user wants. gets the s stored in the deepest levels of the tree based on which version the user is in and which menu they just opened. These methods are the part I do not like, partially because there is no easy way to search the tree for a value. P.S. I'm not sure if this is more of a tree or a file structure as I need it to be able to have multiple nodes at any level, with the true "root" being the variable holding it all together. 

When second dao fails to delete and you have transactional daos not service, the first entity is lost. And you method should not return boolean, but let bubble the exception up into the service layer and let service handle the exception. 

EDIT Also do not put on your DAO classes but on Services. Service method describes unit of work which should be done whole or rollbacked. Consider this simple code 

In Option #2 you cannot be sure that user of your class will pass new Object as a parameter. If you really want to create a clone of parameter you should create on yourself or implement some method on MyReferenceType 

I would separate calculations of shoe sizes and distances into separate classes. It is called SRP Name your variables properly is just a random letter not a name for a variable. For methods with a lot of arguments you can use some wraping object 

Besides what Flambino wrote I have a small remark to (3): Why are you storing unnecessary information in the DOM? I would prefer a solution, where you use a simple variable to keep track of whether the button performs an action or not. So you wouldn't have to update the DOM twice for nada. The DOM is a bad place for storing the state of your application. 

Even better: you have microtemplating on board, which means: You could define HTML including placeholders within a script-tag 

I wouldn't say, mine is better, but I prefer it this way: 1) One entry, one exit 2) One variable changed if needed. 3) Easy to follow. 

a) CRUD and ajax There is no clear answer to that: it depends. If you are working with browsers as clients of your interface/API, there are only two of the many implemented, namely and . This is, what we all know from our standard specified under . These were the genuine methods available (rooted in historical decisions, but I see no reason to stick with that; browser developer should change this constraint). In order to use a restish API, which has e.g. also support of , , there is a way to circumvent this constraint. Many frameworks provide parsing a hidden -field where the "rest-method" is defined and map to the according controller. As you can see, it is not always necessary to do it asynchronous or with javascript. So ajax is only one - but a nice one - option to play with. Unless not otherwise restricted (managers, users etc.) I would always go for ajax. b) Is ajax safe It is as safe as you make it. There are possibilities for securing your endpoints. But as I said, I am not quite up to date, what Microsoft offers, there are possibilities for sure. c) Is it fast It is as fast as your hardware (connection, server etc.) allow. There is no difference in terms of performance doing something like a or a . The main difference is, that a traditional is a) not asynchronous and b) you are loosing the current context. d) Form of CRUD requests You form your actions via and : 1) Get a list of all Users: api/users 2) Get information about user 1: api/users/1 3) Get all users, which are from Seattle api/users?location=Seattle 4) Get all male users, which are form Seattle api/users?location=Seatte&gender=male 5) Create a user api/users/ sending a JSON representation of the created user {"name":"Doe", "firstname":"John","city":"Seattle" ...} 6) Update user 1 / api/users/1 sending JSON of the changes {"city":"Miami"} (if he moved to Miami} 7) Delete user 1 api/users/1 If you want to specify the output data from the server, you could set the field in the header e.g. to or . As you see, there is a big advantage in using a RESTish API: you have a set of universal verbs, which each service speaks, which is easy to learn and to adapt. These are the basics of the REST-philosophy. There is more to say, but not in this post ;) 

It is excellent that you use the HTML5 tag instead of a plain old . You may just have removed this for brevity (many people do), but when you write HTML, you should build your page like this: 

I decided to help @Matt out a bit and ask a PowerShell question. This is a simple guess-the-number game learning how to use functions with and without parameters, and use the input and output functions. All comments are welcome. 

Your CSS is validates perfectly, you can validate it at the W3C CSS validator here Your HTML has a few problems the validator finds here. First, you need to specify a doctype, like this: 

Notice how I removed superfluous variables, moved some variables into a tighter scope, used more meaningful variable names, and tidied the code up a bit. 

Dead code does nothing, except take up screen space, and confuse people who don't know why it was written and removed in the first place. Braces This is a bit of a holy-war. However, at least one bug (the Apple SSL bug) was caused by missing braces. Personally, I use them: 

If there is no formula to calculate shoe size from one unit to another i suggest you to put sizes in some data structure and map them together. For example in Map. Then you just query the map instead this if-else hell. Same applies to the mapping. Also i see you use Strings a lot as a constants. Consider creating enumeration of some of them. 

Classes in model layers should be aware only of interface of underlying layers (DAOs or something similar). If it contains than you are telling your business model what view you are using. Send text from textfield directly in you service (model) methods. Or better send them some DTO wrapper object. You misused and . belongs to the controller or view layer and belongs to the model layer and check the business requirements. Also you duplicate the name of the cities. When you want to add new city you have to change the model and the view. Put them in one place (maybe something like CityRepository accessed by the Model layer classes) and get the cities from there. So to recap Model is businees view. It should contain validation and perform your business task (in your case some traint icket processing) and should be aware only about data model. View should be aware only of controller and provide interface to interact with and methods how to get the data from the user Controller Drives the flow - it gets the data from view, wrap it in some business objects (like TrainTicket, User, etc...) and pass it to the model, takes output from the model and present it through the view. 

I really hate that humongous in . Should that be a // series, or is there a better way to do it entirely? 

One thing is is not only checking the prime, but also printing it. This could be moved into , or I could write another function to take care of that. After profiling my code, these are the results I got: 

This can be improved and made more Pythonic. First, there is the and keyword, which you already know of as you used it. Why not utilize that instead of doing two loops? You will have to change the logic slightly: 

I like the way it is displaying, but I doubt it is correct to use spaces to create submenus. I also am doubtful about my removing and entered the submenus the way I do. I have looked into a couple different methods, but nothing really seemed to suit my needs; I will appreciate any input. I will also appreciate comments on my use of GlobalVars; I think this is the best way to hard-code data, but I am not quite sure if there is a better way; the default apps use JSON files, but I don't know how to use them. Is this something I should learn and implement, or is it fine the way it is? Screenshot of what I am doing: 

You iterate over all books in the library, and if one book matches, you return the whole library. That's not, what you intended. And more Do not return ! Please, never ever! That doesn't make any sense and leads to excessive use of Guard Clauses against . It is a clear antipattern. In Java8 there is a nicer solution if you want to hide in an optional. Say, your teacher asks you to look for a specific book on the shelf and you do simply nothing - what does that mean to your teacher? A) you are deaf or b) you are dumb or c) you are neither, but there is no book. If someone asks you for a list of books, when there is none, simply return an empty list, and say politely: »Sorry, the list is empty, because there was no such book«. 

Besides the nice OO-solution, another (procedural) solution to your looping problem is possible: If you have cases, where you iterate over a collection of and only the first element needs special treatment, you could it off your collection, treat it like you intended to and iterate over the rest, so in your case: parse the text until "headline" is reached and iterate as intended over the rest. You could make use of to shift the first element. Pseudocode: 

That assignment only assigns , is unassigned. As I mentioned earlier, these are redundant anyway, but you should know about this behavior. If you want assigned too, you have to do . 

It is good the way you do not use . This practice will save you a lot of headaches later on. In fact, the only problem I found with this code is that you do not use braces around one-line statements. 

Why not create a method for this and pass the necessary values? You would have to pass several values, so this might be a pain, but it would have less repetition than this way. 

This lets browsers know which version of HTML you are using. This is the current version, which you should be using. Second, you should enclose your entire HTML in a element. Third, you need to have a element with a element. The element is the page title that appears on tabs. You can also link external files, like CSS and JS files, here, as well as specify which character set you are using, typically UTF-8: 

Your method is very long. This is code smell - if method is long it maybe do a lot of thinks, but method should do one thing. I suggest you to split method into smaller peaces which defines smaller units of work and are reusable and easy to read. If you put piece of code into method you give name to the code which work as a hint to he programmer what code enclosed in method does. Also use full name of variables, not some abbreviation like . You write them once (if you are using ide) but read it multiple times so you invest the effor into the writing the proper name. I did not checked your logic. Your logic should be captured in unit test - if there is no unit test i would hesitate to refactor some code. If there is no unit test dont write them now if you dont have business requirements, but you ca try Characterization testing to capture current behavior of the method. Because without any test you cannot be sure if you did not broke something when rewriting the method. 

In question five, you have multiple inputs. Why don't you handle it like this instead of having multiple // statements? 

Please tell me the good, bad, and awful so I do, don't, and don't do the same in my next venture into VB land. 

This looks just a bit messy in places. Am I missing some ways to clean it up? P.S. The owner of Rubberduck says to use (and it is pretty obvious what things are once you know the project internals :P), so you needn't comment on that. 

Wait a sec--why does your game player know when the program ends? What if you had two games, and the user was just exiting this game? Only should know when the program ends. 

That first is not closing an element, it should probably be a . The first needs to be above the tag, and the second is invalid. I changed it this: 

Of course, the implementation is according to the specification correct. But that doesn't make really sense. I would prefer two alternatives: 

I think, there is room for some improvement: 1) You are mixing OOP with procedural code If you choose one paradigm, you should stick with it. Besides: why are you abstracting into a class and not the whole ? 2) DRY - Don't repeat yourself 

I do not get the reason for having two functions for asc and desc ordering. In principle, if asc is a call to a function , then desc is nothing more than calling the same function with reverse order of parameters . No need for code duplication. As far as I can see, the only difference beside calling your sort function with different parameters is, that you in the asc-Version have lines, which contain and the desc-Version calles . You could refactor this out into a call resp. . Besides that this code has to be broken down into smaller easier to understand sections - I really do not want to get my head around this - you have to avoid code duplication by all means, since it is the N°1 source of errors: if you change a statement in one place, you have to make sure, it is changed in every further place.