loadValues() is rather problematic. It checks for each possible data-attribute and if present overrides the value in . These repeated checks are just duplicated code which could be eliminated by just calling without parameters to grab all the data-attributes. But the fact that it's modifying is a real problem because the function is used like so: 

Definitely. The is already a pretty large component. I'd suggest splitting it into even more smaller components, like: 

Of course the itself is a lousy name for a function, but it's more of a helper in here I guess. I see no reason why you would use and options object instead of passing in just two parameters, but even when you use an options object, it would be simpler to extract its values into local variables and work with these. One can also easily drop the use of in favor of simple operator, which is the canonical way of implementing default values for parameters: 

If we're talking about security, we should first ask: what are we really trying to achieve? Why do you want to disallow direct access to ? If one is on a mobile device, why shouldn't he be allowed to directly go there? What kind of security problems are you trying to prevent by not allowing such direct access? Seems to me that it's more of an inconvenience for the user. 

You generally should not to nest your components. Though when the component is small enough, like a one-liner, it's fine to do so. In your specific case, you can make use of withComponent method to change the tag name of an existing component: 

Nevermind: I thought that the original code tries to skip over undefined values in array with this nested loop, but turns out that this is just an awkward way to avoid going past the last element in array. 

I would still question your decision to use binary encoding for storing the deviations. It has several downsides besides the extensibility problem: 

It's pretty hard to understand what this code does. There's a lot going on and the code doesn't communicate well what it's doing. Like the variable names and look completely arbitrary. My main suggestion is to split this function into two: 

I guess it comes down to an age-old question: which criteria should you use for splitting up your code to modules/classes/functions/etc? A good guideline to follow, is the single responsibility principle, which states: 

That's better, but we still need to loop through all the views to find out which ones need our data. Perhaps there are hundreds of views and only three need the data. A better approach would be to use a publish-subscribe model. Instead of having to loop through all the views, each view that needs data would subscribe itself on the view who's data it needs. When the data for that view is loaded, it would publish this data to all its subscribers For example: 

As this looks like a school assignment, I'm answering with a bunch of questions for the student of algorithms to ponder: 

So you load data for each view, but then you also go through all other views to pass this data to them when they happen to need it. However you don't only pass the data from currently loaded view, but you try to cover all the views (some of which have not been loaded yet). So the first optimization to make is to eliminate this third loop through all the views. Just passing the data from currently loaded view to the views that need it: 

Within this loop, there's another low-level for-loop, which I would again replace, say... with an method. Now, in your code the loop goes over all the parts of the key, checking each time whether it's the last part. Instead of this, I would first remove the last part, loop over all the other parts to ensure all these are initialized, and then simply assign the value to the last position. With some additional improvements to variable names, I would write it as such: 

And don't take my word for it. Run your JavaScript through an analyzer like JSHint - it will warn you about these and other issues. PS. I think overall your code is very nicely and cleanly written. It just falls short on looking and feeling like JavaScript. 

You're passing your app state as the parameter to almost all the functions. This suggests you're better off combining these functions into a class, where you could assign these values to which would be automatically accessible from all methods in class. Alternatively, if this all is a tiny app, you could just use global variables, which too would be accessible from all functions. 

First off, consider which browsers is this DOM library supposed to support. Then test that it works in all of them. 

As @kruga and @qntm have pointed out, it's easy to write a function that checks for the right ordering as long as the input only consists of numbers. Like so: 

I doubt that these apply in your case. Perhaps you have some other valid reason. If you don't have a strong need to use binary... don't. The future maintainers will thank you. 

Each of these arrays in keeps a count of how many winning points a player has already scored in rows, columns or diagonals. These arrays are checked after each turn to determine if player has won - first player to get 3 marks into any of these arrays wins. However, instead of just looping through all these arrays to determine the winner, some kind of very convoluted logic is applied, which only checks the row, column and diagonal where the last move was made. Maybe an optimization, but completely needless for such a small game. But really... you should just store your data in a simple 3x3 array and inspect this array after each turn to determine the winner. And try to think of how would you build a tic-tac-toe of 100x100 grid. 

In general, I would say: no, just serve the same page for all kinds of devices, regardless of mobile or not. Perhaps though you have some sort of reason why you want to serve one kind of page to to mobile users. Without knowing that, however, I can't really assess whether your solution is good or bad. 

Avoid logic in tests. Logic is error-prone. While hard-coded values are a big no-no in normal code, in test code they're usually OK. Instead of: 

Regarding performance There are three rules about performance: measure, measure, measure. If you seek for a more performant solution, you should first determine how slow your solution currently is. So, you should measure how many seconds, milliseconds or microseconds this code takes to execute. After that you can come asking for performance help. Telling us how slow exactly your code currently runs, why that speed is not acceptable for you, and what would be an acceptable speed. 

Shouldn't the values be all skipped, returning as a result? Herein lies the main problem with this function. It's attempting to perform two distinct operations: 

You should avoid mixing calculations with input/output. It would be better if your would not call the output function directly, but instead would just return the result of its calculations: 

So in conclusion... this whole big doesn't really seem to provide many benefits over the jQuery.ajax() API. Perhaps all you need is a simpler helper function to wrap it in. 

Better to first think what is the responsibility of a particular controller and what's the suitable level of abstraction for the code that accomplishes that responsibility? For example in both controllers you have the following checks: 

I would not worry about efficiency here. Rather I think the search is not very useful: you can only search by exact value of "to" field. Try to make it work so that you can filter by only writing part of the destination name, like "Ams" instead of "Amsterdam". Filtering on every keypress would also be nice. Note that the filtering isn't applied to the newly created entries. 

The first one will be animated with and default delay, but the second one will be animated with both and because each time is ran, the values it overrides in will stay there. This jQuery plugin is hard-coded to a concrete selector. Instead of selecting class directly inside the plugin, you should use the context element: 

I would expect MySQLSessionHandler to change when you need to change something in the relationship of how you're storing the session data to MySQL database. However I would not expect changing how session ID is generated to require a change in MySQLSessionHandler. The SID does not have much to do with MySQL - you might use the same ID generator for FileSessionHandler or PostgresSessionHandler. 2. Replying to another comment: