Have added a in front of the test to allow for using this method with default parameter of in which case it ends up counting all elements in binary tree. This general approach opens up for counting whatever you feel like, but you need to call it slightly different. Here are some examples: 

Output example Output when running this script, without the extended icmp handling, surrounded by a command on a file of size 1.550.000.000 bytes which was a serious duplication of a slight modification of your test input: 

Code review of So far, it's been mainly style reviews and questions related to your choice of names. Lets review some actual code, and lets focus on the method: 

This version does indeed work, also with different types and values of default parameters. I do however not like that you'll manually have to specify the default parameters at the beginning, which I guess could be built using introspection as well (with some extra magic). Nor do I like the regeneration at the end. This applies to both these version, as well as the version suggested by Joe Wallis. But it does work, and can absolutely be used in the generic case as well as in my specific case. Added: I did however not really like the regeneration in Joe Wallis' version (or my first version in this answer), so after thinking a little on that, combined with the idea of calling only once from Barry's solution, I changed the last line of the previous code block. Now I would only like to simplify the -loop somehow... (and possibly autogenerate the argument list) Addendum: Taking it to the extreme Thanks to more hints from Joe Wallis, here is the extreme variant where the instance values, and default values are gathered through introspection, and through a bit of magic removed if the tailing end is equal using multiple reversed lists and itertools.dropwhile. Resulting in the following code: 

Contrary to the other answers I would keep the next to the error handling, as it clearly indicates that your program will terminate at this point, and that is useful information to have. I would however consider to join the two exceptions, and potentially expand the error message with the type of exception caught. Note that the best practice to capture two or more exceptions is like the following: 

Style review From a style point of view, you are violating PEP8, and should name your variables somewhat differently. Maybe something like: 

Last night I kept on coding, after realising the point now also made by 200_success, that my main method was too large. So I implemented a version using classes, but I got somewhat carried away regarding the turtle association... The code has some flaws, so I didn't post it last night. Today however, this is much better, and I've also incorporated most of the comments from the answer by alexwlchan. I really like the neat generators and calculation shortcuts provided in the answer by 200_success, but they didn't fit in the themed version given below. Will strongly consider his suggestions later on, as they are really good advice for more proper code. 

Finally you can reduce the number of attempts by a little if you start out attempting with a little higher delta value/range and let it shrink as you get closer to the top1. It can be shown that the optimal delta offset is the result of \$\frac{\sqrt{1 + 8\cdot {floors}} - 1}{2}\$. With these suggestions, and a simple loop to test for all available floors we get: 

The %timeit call will then automatically decide how many rounds it will run with a few repetitions, and present the lowest execution time of all these executions. Using in a loop A natural extension for me was then to do all of my variations in one go, and therefore I started doing stuff like this: 

There has already been some good and valid points made in the other answers, read these carefully and try implementing them. In addition I would give some other pointers which I've stumbled upon when reading your code: 

This code will catch the error situation, and as it stands it will display an error message with the offending line. I've set it to use option b), that is continue with next line. If you want to use an empty string and write the output to file file, uncomment option a), and comment out option b). 

Alternative version I've made an alternative version were I've cleaned up most of this, but it does introduce some other concepts as well, so let me start explaining a little on the reasoning behind it: 

Your code seemed to be unneccessarily complicated, and the main issue is that you are indexing a lot of lists, instead of using the elegant pythonic approaches for reading lines and characters in lines. Compare these two up against each other: 

This would replace your , , and method. I also changed the to a simpler logic for checking whose turn it is, what to play, please enjoy: 

But in general, nice, clean code, but a little thin on documentation and error handling of os-operations. 

That is the original and the solution by SuperBiasedMan took around 1.5 hours to complete, whilst my solution took 4.5 minutes. (The fake coin_flip variant under a minute). I think it is somewhat clear which solution I would prefer! Sorry guys! :-D 

Realise your own resize Why would you want do this? You are already relying on the native array, so I don't see the issue in using the native approach for resizing. However some options to handle resizing issues, or implementing your own version here: 

But at the end of the day, you also seriously need to reconsider what you are doing, because checking 40 000 orders (from cr) against 300 000 nodos seems just plain wrong, something you should be using a database to solve. This is a massive amount of data you are processing. 

In addition your code calculates the modulo one time too much as you could already know the answer for . A good way to handle this, minimizing calculations, is to build a list of all fizz buzz words, and then for the final output check if you have values in the list and join them together. If no values in list, return the string version of the number. Code refactored Here is an alternate version combining these suggestions, and an extension allowing for additional fizz buzz words: 

Addendum: Unique exception messages One way to generate unique message is to repeat something related to the method/function you are executing and the failing situation. Lets say that your missing file was within creation of a user account, then I would have preferred a message like: 

Possibly without the parentheses around . No need to do an , and then repeat the output of the condition in the statement. And in the calculation of couldn't it be just: ? Is Lua very fond of globals? In your function you initialize the , , and so on. All of these seem to be global variables, so I'm guessing Lua is rather fond of globals. To help this look a little tidier, though, I would consider adding , , and so on methods, to help keep the base function simpler and more understandable. Simplify your statements You have quite a few statements testing for plus 0 through 7 (or similar). This can be checked either using loops like suggested by pkisztelinski in his answer. Or since it seems like you're mostly comparing towards an 8 bit (or pixel) values, you could divide your coordinates by 8, and see if the thingy you compare towards is equal. Another option is to check the absolute distance towards the target. Instead of testing all variants of vs . Check the (absolute?) value of . If less than a given limit, they are too close... If you still need multiple conditions, group them This looks ugly and is confusing, even though Lua has proper precedence of and which seemingly makes it work: 

This is not Linq syntax, but it is still a rather neat way of adding newly created objects without (in the alternative method) using temporary variables. It also connects the initiliasation and default setting of public properties/variables neatly into a block of its own. 

Do however note that I don't recommed the variable naming, and the lack of comments on this code. According to Rosetta code this should be faster than a version based on , but I currently don't have time to run time verification on that.