I've written 3 factories as a part of a sign up process in AngularJS and Firebase. After completing them, I thought to myself, would any of these fit better as a service instead of a factory? From my research it's a bit fuzzy when it comes to choosing whether to create a service or a factory. If so, why would they fit better as a service? How can I tell when to create a service and when to create a factory? I've documented the to explain what they do, and the ones that lack a documentation explains themselves in the name. 

I need to concatenate 3 input fields into a string which is formatted as a date , using or will not work in my scenario because Firebase doesn't allow it for some reason. I came up with a rather ugly solution, but I'm not quite sure how to improve it. is bad for performance, but I think that it is needed because I need to completely remove the properties from the object once they've been used. 

should be private! File naming I was taught that is a C header, and for C++ it should be used or . I know it is not entirely true, but using: & for C only and & (or & , or & , or even & if you want to be particularly unique) for C++ only provides a nice distinction between C and C++ files without even opening them. It could also be used by some shell script if needed. Further reading: Try: $URL$ 

Does it really need to be ? How many rows do you need? Is it stable? Is it robust? is guaranteed to be at least 16 bits long. I would use: 

(Side note: I prefer to have modifier after the type, this frees your brain from remembering how to read such things: .) Also try to have variable in capitals, and maybe name is more descriptive. If something does not change, it does not change. Instead of: 

I'm trying to grasp this whole MVC design pattern idea but I'm in the dark if I'm doing it correct. This is where I need some feedback on what I've done so far. Here's what I'm wondering: 

To start off, I can't see a single semicolon being used here. You should always close your statements with a semicolon. Also I can't quite understand what you've done here: 

Is this a property in an object? If so why have you named it ? Give it a proper name such as or something along those lines to make it more obvious what it does. Now it's just confusing. And for the other function you could name it . If you included some additional markup it would help your question a bit. 

You won't need to change your docs, when parameter name will change. Also, I don't know why people use this comment style: 

In such a case it should be 32 bits wide. Documentation Parameter name is duplicated in the function doc. Instead of: 

Having braces around the "one-liners" eases adding new code and reduces the frustration related to adding the braces after. No more "I should've added them at the first place". ;) Field visibility These: 

Eclipse can add this automatically. And this is also something that is useful, e.g., when your GPL-licensed code will be copy-and-pasted in some other project. If so, you'll be famous, which is what programming is about anyway. :) Headers Someone else pointed it out in the first part. But... Do you need all of: 

This might need a bit of editing but you get the idea. However I'm not sure if any of these are actually better ways of doing what you want, but it's other ways of doing it. It might make everything more manageable if the code gets even bigger. Hope this helped. 

And then just call the function so you don't have to repeat yourself every time. OR another way would be to put all the elements you want to manipulate and the classes in two arrays, and then just call the functions using a loop and the index in the array. 

Personally I would create loops for this, it's very unreadable at the moment and you are repeating yourself a lot. Remember the DRY rule (don't repeat yourself). Also if you do it via loops it's easier to maintain and change in the future. 

to remove seventh row. But what does it syntactically mean to subtract from a table? Why is it removing the row? Why not column? Ideally, mathematical operations (, , etc.) should be used only with mathematical objects, e.g.: numbers, matrices, vectors -- but not , I mean mathematical vector, note that the does not have overloaded to add more elements. I think that this is because library designer knew that it makes no sense syntactically to allow such an overload, etc. Such a syntactic sugar could be useful in small implementation, but I would definitely avoid it in larger designs. Consider, e.g., in a 100 kLOC code base that someone encounters: 

This shows intent more clearly. (Some may say that too clearly. ;)) There's also another problem with: 

3. Sample usage Here's some sample usage to show how a user can get the return values. Basically, the user would send in their function/functor to the dispatcher and would take care of the rest; the dispatcher would return the from its submit-a-function function. 3.1. Example 1 This example is pretty much just a test of the template deduction rules and shows how you can use a collection to erase types. The main feature is that you can have a collection of functions that all have different signatures and return types. 

Basic algorithm Since you have very large files, you should consider streaming the file one line at a time instead of loading them all once; your program would use a lot less memory. You would also not have to copy your , which is very large! In order to know which files you've already processed, you could create a new file that holds a list of all the files you've processed and write to it as you stream from the original file. This is of course, assuming you want to keep the original file intact. I will continue under this assumption as the other case (simply delete from the list as items are processed) is simpler. Check the Notes section for a better idea that you can implement with inspiration from the following section. Implementation The following is a sample implementation for the algorithm I described in the previous section. For brevity's sake, I did not include the items mentioned under the Form section, nor did I include exception checking; I will leave those things for you to figure out. It is also most likely not as optimal as it should be, but it's merely meant to show you streaming. Sample 

You won't need to think when/if the first line is only short description. Besides, it also look more consistent when adding file header, e.g.: 

It can throw. Most people won't think that an operator may throw. Especially when it looks like adding to some . [/added 23.04.2018, 16:36] Braces I prefer: 

Putting it in an unnamed namespace in the implementation file assures that this function won't be visible in the symbol table. Duplicated functionality? The difference between: 

This way you "re-use" the fact that returns / -- so it minimises the burden of analysis. You intuitively expect when some operation returned that something went wrong. This is only if you really need the operator implementation. Personally, I think that it creates more problems than helps with anything. I seems quite concise to write: 

In a bigger project of mine I'm using angular to create a dropdown menu dynamically and then toggling a dropdown menu for some of the menu items. This is why I got a function that toggles the dropdown menus for only the items that should actually have one. However, I feel like I should try to DRY this out a bit since I'll be repeating the same function even more than what I've done so far. How can I improve this code? Should I create a self invoking function or something similar? Here's the functions (they're part of a controller object that I left out): 

I've made my own pagination service for my forum that I'm working on. I'm quite happy how it turned out but it feels a bit rough around the edges so I would like to know how I can shorten this code and make it more efficient and better structured. The comments are overly redundant just so that I can pick up on the flow of the program really quickly now during the production phase whilst working on other things simultaneously. Figured it'll also help you guys understand what's going on easier so I left it in. Any pointers here are welcome, let me know if you need any additonal information. The markup (excluding banner): 

If I remember correctly it should contain "forward-decl" of . These are only used by the implementation: 

I disagree with that -- this is why these tokens are keywords -- and I don't use spaces. But this is only my opinion. const-correctness The space character could be . Instead of: 

I would (incorrectly) think that it decreases some integer named by . To "decipher" it you need to find what is and the go to its implementation to figure out how is overloaded. (Remember, as I said, it could, for example, remove the 7th column, there's nothing specific about rows in a real table. ;)) Compare this with: 

Do you want to pollute the global namespace with this operator? Is a part of the ConsoleTable interface? Instead do this (I avoided the "try" word on purpose):