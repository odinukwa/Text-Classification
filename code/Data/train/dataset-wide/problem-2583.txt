This takes the average run time from ~45ms to ~10ms on my machine (YMMV). I also think it's a more intuitive solution: 

Now, look at your code: which rule will be in-lined first? Now, I haven't actually compiled your code, let alone run it, but I'm sure you'll apply the styles in the wrong order. And another example: 

Other answers have covered all of the points I'd make about the code already; I just wanted to get a bit physics-y. Your implementation treats the "parentObject" as a fixed body and there is an implicit assumption about the relative masses of the two bodies. That is to say, you are assuming that the parent object will have a mass very very much greater than the orbiting body and so will be relatively unaffected by the pull of the smaller body. That's fine for something like a satellite orbiting the earth but would be a bit odd if you have similar sized bodies orbiting each other in a different context. For example, here's a two body system with bodies of similar masses in an elliptical orbit: $URL$ Now, treating the real world as the real world is obviously much much more complicated. However, you could easily satisfy the physicist in me by renaming your object to and ensure that the mass of the parent object is much greater. This comes with the caveat that I don't actually know Unity so I might have misunderstood how the code works. 

You're naming your parameters incorrectly. The naming guidelines for parameters specify camel casing. Your method declaration should look like this: 

Now, this is the most troubling line. Constructors should not do non-trivial work. When I first read the code I thought: that variable is unused, it's probably there by mistake. Do you know about ? There's another place where you're reinventing the wheel: 

Many people, myself included, don't like to use s. They just add noise - especially on such a small class is one step too far IMO. The method name isn't accurate either, you're setting the value if it exists or not. The exception message is really odd if you specify a property without the attribute: 

Now you only acquire the lock once and do everything while holding that lock instead of having to keep acquiring and releasing between items. 

I'm reluctant to give you too many pieces of the puzzle because it's clearly an assignment (well done for disclosing that btw). I think I can start you off in the right direction though. Firstly, as you guessed, you need to encapsulate what you think a card is. It has a rank: 

I'd generally never put a space after an opening bracket or before a closing one. That's the stylistic stuff out the way, I haven't mentioned semicolons because I don't want to start the other JavaScript holy war. Hoisting No, hoisting isn't good. It confuses beginners and I don't like having to scroll below the line I'm reading to find the function. Declare your functions first. 

If time performance really is critical (I doubt it is), you can create the lists with an initial capacity equal to the size of the bigger list. That way the lists won't need to resize and will be O(1); if you did that then this is O(n). 

You're very unlikely to actually get on that if statement meaning you're unlikely to call ApplyTick and almost certainly won't call it the number of times you want to! That's because a Tick is a really, really small measure of time... I want to say 1/10000 of a millisecond. Edit - I misread your if statement - I thought you were using Ticks (due to the field. It's still not a great idea but less serious than the above implies. You shouldn't need a stopwatch at all for this sort of thing. 

Just a very quick note: you really don't want to be using for messages passed between different computers! If the other computer uses a different encoding your message will be garbage. Take a look at the msdn docs: 

Yes if you never want to know why something went wrong. You should log the exception so you can diagnose issues later. Swallowing exceptions like that is rarely a good idea. No. Web requests return status codes. It could be returning a 5xx error which would indicate that the directory was not created successfully but you'd be acting like it had worked. A response successfully is not the same thing as a successful response. 

The definition of a "word" is a bit loose here. You could do a Regular Expression match to get the indexes which would allow you to use the "\b" word anchor. I've just assumed (as your OP) that it's simply a sequence of characters. 

Comments shouldn't tell me what something is, the name of it should. I don't even know what to say about this: 

} Any common behaviour you should find behind all pieces you should add it to the base class , for example they can all move... Edit I thought the above made it clear that I think there should be an abstract method on the piece class that deals with movement. I didn't commit to making a suggestion on the signature of the method because I haven't seen what you're doing currently. I have the impression OP intends on "moving pieces" entirely within the board class. 

You have a lot of magic strings around the place: "Inspection", "Meta", "CodeInspectionSeverity_"... They should be well named constants. 

It's a bit more code but it means you don't have to build the string yourself. Expression bodied members save some boilerplate: 

It seems to me that it would keep all of your string mangling in a single place. P.s. Code typed into browser so might not compile but I hope it illustrates my point :) 

One thing I find really useful when dealing with projecting to model classes is either use automapper, or write an extension method: 

I would argue that a point should be immutable - i.e. it doesn't change after you've created it. I would implement with full readonly properties: 

Name your constants! E.g. the double quote and the space. A single space is the most difficult thing to read in source code (in my experience). 

is a poor name IMO as it's a list (even if it only has one item). I think it should be pluralised: . There's no need to call which I think makes the intermediate variable pointless: 

You could write the above using if you'd rather. Go through your code and keep pulling out all of the methods aiming to get each one to do a single thing. For example, I'd probably pull out another method from the above () called and have that create the . Other thoughts or never in names. What you're doing with your parameter is very confusing. I'd have no idea what it was for a lot of your method. It's easier to use than calling / most of the time. You almost certainly want to log rather than just the message. You'll want the stack trace when you're tracking down problems. 

I've used spaces rather than a tab as I prefer that. I'm not going to recommend one over the other as I don't want to start a holy war. Spacing You're inconsistent with spacing around your brackets, sometimes they get a space and sometimes they don't: 

You can then either check the query's IncludePosts property OR have a different handler for the specialised GetCustomerWithPostsQuery query object. 

You should write instructions out the Console. Users don't like spamming the keyboard hoping to do the right thing(TM). 

What I'm really trying to say is: don't create your own serialization. There are already multiple good options that support a lot of configuration. E.g. think about attributes to control how or even whether a member is included. 

Don't use unless you want to specify advanced options; use . However, don't use for fake asynchrony - you'll just slow things down. 

I renamed to which is slightly easier to read IMO. I've also introduced a variable for as I don't like lines of code that do 2 things. Edit: Short and concise methods are brilliant and a very good thing to aim for. However, consider your method at a glance: 

I've never seen anyone do this and I'm not sure what you're trying to achieve with it. Just have your defaults as a local variable within the IIFE and close over it. You're creating a new endpoint variable on every call of . Create it once in init e.g. this is pointless. I don't think that you should have prev and next classes as an option, just name them uniquely e.g. 'instaSlider-next' - it's the kind of customisation that most people would never want or need. has no need for all 3 variables, just create one and build the entire html string and append it. Don't use tags for spacing - people will come and eat you. 

Just looked at your event args and recommend you read this blog post by Eric Lippert. It has some pros and cons of what you're doing there. 

C# should never snake_case anything. All methods, regardless of accessibility, should be PascalCase: should be . See the capitalization conventions on msdn. I notice that you're not using at all. Just wanted to double check that you knew it existed. e.g 

Then your parsing code can consume each logical bit at a time. As I mentioned in my comment, I'm fairly confident this is an implementation of the shunting yard algorith which you may find interesting to read up about. I never seem to have enough time, there's a lot I'd like to say but I'll limit myself in the interest of at least saying something: 

Your current implementation also has a bug. You are assuming that the source text contains - if it doesn't you'll get an on the substring. 

In terms of simply making your code better (keeping with the brute force approach) there are a couple things you could note. 

I must admit, personally I think the api is really good, I've never needed an implicit conversion to a string or felt the need to rather than append to them. 

If you only consider positive integers, it looks like is getting smaller too but actually only the array is getting 'smaller' as negative numbers or 0s don't make target closer to 0. That makes the whole solution something like: 

That's not a good hint - I've already called . The message could also be more specific as you didn't find a not any old attribute type. The point is you've extended 1 line of code to an entire class for no benefit. 

The algorithm for the method is just from the wikipedia article with and the other way around, see: $URL$ The reason I'm using a static factory method is that I don't like constructors that do non-trivial work. Here's a simple test harness that prints the primes under 100: 

Should be rewritten so that you validate the in the constructor. Or better yet, avoid the exception altogether: 

is it really so much effort to type the remaining 7 characters of ? Don't abbreviate. . is a terrible name. I'd suggest . - may be a nitpick but I prefer over and definitely over which is another needless abbreviation. isn't a bad name but it could be better. is a bit of a mouthful but it's unambiguous. I'd remove the default value on and rename it to . I'd also verify that it's greater than 0 and throw an exception if it wasn't. 

I would remove your class entirely. It also violates the D in SOLID because it depends on your chooser directly. 

A list that doesn't allow values is really odd. There is no reason why you should disallow . You wouldn't stop me adding to a list of integers. 

What I've guessed from your code (and I might be wrong) is that you need to get some string from a type used in a persistence layer. The string might be a table name, or a value for a certain column. I've decided to call this a discriminator. Multiple types can have the same discriminator but each type can only have one. I think it makes sense to introduce an inheritable attribute here, let's do that: 

That's a seriously impressive answer from Heslacher. I remember doing something like this a while ago (turns out to be nearly 5 years ago) and thought I solved it completely with regexes. I've slightly modified it to use an object as it originally used a dictionary: 

By not blocking, the framework can respond to more client requests! It's definitely the right thing to be doing. Update: explanation: 

You should throw the most specific exception type available. If the argument is null and that isn't allowed. .