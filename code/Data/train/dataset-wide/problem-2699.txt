merge multiple input files (at least one) to an output file each line is treated as a line, not necessarily a "word". If the input files have just one word per line, then the output would be the same as the original specification. take the input files from the commandline (the first file is the output file). 

... takes a client network connection, pulls the name, and then establishes a loop for reading and distributing messages. It distributes the messages by pushing them on to the channel. Let's simplify that code a whole bunch, and point out some problems as we go. First up, you need to learn the statement, and use it for closing the client connection. If you change the first line of the function to be: 

It has a lot of parameters. It is past the point where a structure may be a better solution, but I left it as a lot of parameters for you to correlate things back to your code better. Playground You can see this running in the playground: $URL$ The full code I am playing with is: 

Try-Catch There's no code in your function that throws an explicit exception - why do you have a try/catch? All integer parsing comes from digits in a , so there can be no illegal characters, etc. Character-to-digit-value Your code has a lot of this type of logic: 

With the above code, you do two sorts, and 1 loop through each value. The net result is that your performance complexity is simply \$O(n \log n)\$ where \$n\$ is the longer of the or variables. By sorting each side, you give yourself a significant algorithmic advantage. 

I am a strong believer in early returns in all languages that support them (not all languages do). They are common throughout the Java code-base, and they simplify the variable space tremendously. I feel it should be taken even further though. I sometimes create functions just to use the early-return feature. Sometimes, when you have nested loops, you want to break from the outer-loop in certain conditions in the inner loop. By putting the inner-loop in a function, you can use a return to 'continue' the loop in a way that is neater than having and logic directly. The early-return concept is more than just a 'different' way to do things, it can make complicated logic more simple. 

You have a large amount of code duplication. The highly technical description of your problem is 'DRY' or Don't Repeat Yourself. I would say that fixing three issues in your code would make the rest of the code a lot simpler to manage. Once those three are done, you should bring your code back for review. 1. Resources You have completely munged the names of the resources in your Layout.xml file. Your button resources should have ID's that match the button. Why is actually ? You should re-identify all your resources and make the resource names match the use of the resource. This is a simple fix, but would have been better to get right the first time around. 2. Button Arrays You should specify your buttons as an array of and you should populate it accordingly. Even better would be an enum of Button. 

This class monitors services simply by their active TCP socket. It has a main method which monitors 10 ports from 40000 through 40009. Here is a simple dummy server that creates services on those ports.... (and I used it for testing). 

Algorithm Your algorithm is a bit messed up too. Basically, you scan the chars, and find the first occurrence of each char value. If it's the first one, you then use that to scan the value, and you count the 'hits' in there. There are two issues here. The first issue is the performance of the 'first check'. The performance is \$O(n^2)\$ where \$n\$ is the number of chars in the value. Then, for each unique char, you then do a loop through all the chars. The loop through all those are disguised in two steps, first the while loop, and then inside that, the search. The net result is that you have a performance of \$O(nm)\$ or \$O(n^2)\$ depending on whether there are more characters in the or strings. There is a better solution for both the uniqueness testing, and for the searching. Consider sorting the chars in each string: 

Naming. Once is an OK name for the class, but the method name is a problem. This is an 'atomic' operation that sets values, as well as gets values. A method called something like "Trigger", and changing the class name to a common term like , will give you the semantics like: 

OK, taking in to consideration that memory footprint is a concern, then there is some scope for improvement. First, lets get through some of the basics.... Firstly, your code has a bug, It fails to sort data with duplicates: 

The Integer.compare static method will not need to create the Integer objects from the ints. I like the continue and break statements in Java, and use them regularly, but, your use of continue here is not necessary (and you do not use a 'braced' 1-liner here....!!!): 

Where does this function come from, what does it mean? As for the rest of the code, well done. (Oh, and I even quite like the Christmasy font!) 

It is unusual on Code Review, to recommend a different approach, but this process can be simplified a whole bunch..... and avoid perl entirely..... 

Note that your pasted code is not indented correctly. You indented the class definition, but the class contents are at the same indentation level. Additionally, I prefer whitespace between method definitions, an empty line. Actually, I ran your code through a pep8 checker, it pointed out all the compressed-statements too (no whitespace around operators). Here's your code in a format that passes the pep8 check: 

(Note the return type is the interface, not the struct). Now, here comes the trick, you need to link your interface to a pointer of the struct, not the actual struct instance. Your full method will be: 

(see how the class name is used as the first generic token? I have added that as a comment in the second declaration...) With the above changes, your generics are "fixed". The implementations for TicTacToe examples had to be "corrected" to have the correct return types and order for the generics as a result, though. Specifically, the Move/Action was not originally part of the generic type for the Agent, but it had to be added to correctly reference the State. Wow, that's a lot to digest, but I hope it makes sense. Cloning The use of the Cloning class is odd. I realize you think it may make cloning simpler, but the truth is, I don't think it will. When you have a need for specific style of cloning, and you also have control over the classes you are cloning, then it's simpler to just add a special clone method to the class. For example, I recommend adding to the interfaces. Note that you now have a nice generic type as well to return the value in (which clone does not): 

Bottom line is that you have only given a fraction of what is needed for a good review, so, I will take a stab at doing a review with similar feedback.... A good alternative approach for your code is: 

You can avoid the conditional checks on 1 or 2 steps, and you can also remove the calls because the square of negative numbers are always positive. Try-With-Resources I really like that you have used a try-with-resources to open the buffered reader (though again, @spyr03's suggestion to use a Scanner is a good one. My special point here, though, is that one of the main reasons that try-with-resources was introduced, is to ensure the resources are always closed in a sane order. There is no need to explicitly close the buffered reader at all... the try block is designed to do that for you. 

Summing, not max I believe the better solution to this problem would be to sum all the values from each array, and then to compute the ratio afterwards. The math is simple. If you have the two data arrays and the corresponding set where you know that is some factor times larger, then you have: 

and the first time through the loop it will always display 0 because it never waited between readings. You should put the as the first thing inside the loop, or, while you are using top as a test, you should comment out the because the top call essentially is a . /proc/stat Your processing of the stat files is broken. The format for the file is (taken from my machine): 

There are a number of concurrency issues in this code,. I can point out what I see, but correcting them will require some significant rethinking... and determining what the rewrite will need will take more than there's time for in this answer. Concurrency issues: 

Concept The basic concept of having a channel that you hand out to all receivers, and then close that channel as a signal, is a good one. The way you use that concept in your example usage, is a bit contrived, and I don't think it represents a real use-case, but it's good enough for an idea of how it could be used. Communication In Go, the best practice is to use "communication" over "locks". This is documented in the package as: 

You are not clear in your question what the purpose of your class is... the code suggests that, for an input list of size , that once you have 'pulled' k items from the that the histogram of the results will exactly match the histogram of the input frequencies. Additionally, for every 2k elements you pull, the relative frequency will remain unchanged. Unfortunately, your code does not actually do a very good job of randomizing the values. For example, consider data with the input frequency of (i.e. 1 and 9 values). What your code is supposed to do is: For every 10 times we pull values from the : 

That line says that, if the computer is talking to itself (on the interface , the 'localhost'...), that it is allowed to listen to itself. The other line: 

need to transform class A to class B. also need to transform class C to class B. JMapper can help. there are other classes that need transformations as well we should make a generic factory for it. we can also make the concept referencable as an interface, so things other than JMapper can do the mapping if necessary. 

Self-call with swapped args trick One trick I have in the above code, is the simple 1-level recursion if the argument-length guess is wrong.... it's a common trick that sometimes confuses people: 

I much prefer the above solution because it fits my way of thinking. On the other hand, it has other benefits too.... for example, it only checks each value once with the modulo's. Your solution could compare values multiple times. A worst-case scenario for your code is that you have data that is all odd. In that case, you will check the modulo of the data at \$2n\$ times. With my code, it will be checked just once. 

implicit type conversion You do an implicit type conversion in the output which is not "old-school" either. Adding a number to a string is... complicated. Unnecessary reversals Why do the reverse mechanism? Why not just build the digit string up backwards to start with? Instead of: 

Note that you still have a synchronization vulnerability - the other column's column could be changed between checking for whether it's column is null, and using the column in the equals. You could still get null pointer exceptions if someone changes the other column in the middle of your equals. You should consider synchronizing on that other column too: 

I know little about AspectJ, but have a number of more basic points to call out in your code. Hygiene 

You can use that class anywhere you use an ExecutorService, and the threads will be much nicer to use. Consider your constructor: 

At this point, the security 'level' is not changed from your original code. Unfortunately, if someone knows your code, and knows all the hashed passwords, they can easily rebuild this function, and then just start running dictionary values through the same algorithm, and if there are any hits, in any of the password hashes in your 'thousands' of users, they will gain access to your system. The probabilities of getting lucky are proportional to the number of users you have. What you have called a 'salt', is not actually a salt, it is just a way to make the attack slightly harder. A real salt is unique for each user. When the salt is unique, the potential attacker has to be able to know the salt value, and then guess the password too. The odds of getting these values are not dependant on the number of users you have the password hashes of. The trick for the salt is to create a random value for each user, and store the salt in the database with that user. 

Now imagine if you also want to select an interior color, automatic, or manual transmission, etc. What happens when you have a lot of inputs is that it becomes hard to 'align' the values with the parameters of the class.... you have to cross reference them, and count the values to make sure you are putting the color in to the color parameter, etc. Finally, what if you want some default values as well... or you need to validate combinations of choices.... like, you cannot select 'abc' and not have > 150? Validating that all in the constructor is ... hard. The builder class is the solution to this. It makes the construction of the class a sequential process... you add the data to a builder, it accumulates, validates, and isolates the inputs until you have captured all the information you need. Making sure the right parameters are given the right values is easy because the method has just one argument, and a logical name: . Then, the builder organises the data in to a single call to the constructor (often private) of the Car class. It is common to make the Builder class a sub-class of the class that is built, too. Putting this all together, the builder has special permissions to access the Car constructor, the builder accumulates and validates the inputs in to changable values. It then calls the ugly constructor itself, creating a single, immutable class instance, and only one place in the code has to have the ugliness. 

Having listed the above concerns, there are some things missing which are also concerning. For a start, there's nothing in the that manages concurrency (but there is in the . It is your stated goal to have a thread-safe operation, but you have nothing so far that actually supports that - you completely rely on the implementing classes to implement the right systems to support thread-safe operation. An implementing class could initialize your class with a simple , and then you're borked. Implementations -> Head-Scratchers In your various implementing classes, you have a number of other head-scratchers: 

Not Fast Enough - BENCHMARKS UPDATE: After benchmarking your code, against my suggestion above, I found your code was faster than I expected. This runs against my experience with Locks, which I have, in the past, found to be slower than synchronization due to the double-lock process (lock barrier going in, and again when coming out). I was expecting the plain-jane synchronzation to out-perform the complciated locking, and I was wrong. So, I investigated, and have the following thoughts on the results: 

Code Drop This is the final version of the code I have. The code above has gone through a number of iterations, and was inconsistent in places: 

consistent use of braces (on the end of the line, not start of the new line) consistent spacing between values and operators to 

Adding a new rule is easy, just insert it in to the chain at the appropriate place.... I hope the above is enough to show how the chain-of-responsibility pattern can be applied. 

Then, statistically, there is no value in doing the md5 on the password before the concatenation. It actually may make things worse because it makes the input value to the outer md5 a predictable length.... I would just simplify things as: 

That code creates an ExecutorService which has threads named things like your code's results. Now, with that code available, I can have a really simple problem space: 

Using a "ternary" expression, and a little bit of manipulation on the math, you can reduce that to just: 

Note how the generic type of the node is different to the list , but that is because they are in different contexts, they are actually the same when you use the Node class like: 

Terminal Funkiness You the terminal.... and you play with terminal colour and boldness, etc. What if you are on a simple terminal that does not support these features? Your program will either fail, or will look really ugly. A user operating in a terminal is looking for efficiency and usability. The trates you have added are not efficient, and ruin the usability experience the user wants... (otherwise they would be in a GUI...) Printing out a huge banner is also not useful... what if the user has a small screen... it's ugly,