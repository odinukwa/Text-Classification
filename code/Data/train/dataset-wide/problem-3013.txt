This brings me to my next point... Date objects can be compared directly Instead of comparing hours to hours, years to years, months to months, and so on, you can compare two date objects directly to see which one comes earlier or later. You can even subtract one date object from the other to find the time (in milliseconds) between the two dates. The code below will populate the variable with a number representing the number of days since the sale started (assuming is the sale's start date and is the current date). 

Eliminating functional differences between Vanilla JS and jQuery versions Your vanilla script and your jQuery script are not functionally equivalent. Your vanilla is selecting the container by its ID, while the jQuery is selecting the container by its class and then selecting the images. Your vanilla script would more closely resemble the jQuery by using and/or . e.g.: Making it work for multiple containers Your code will function strangely if more than one image rotator container is on the page: the jQuery will grab image elements from all the containers and only set one to active at a time, while the vanilla javascript will only change elements in the first container it grabs. (EDIT: As you noted in the comments, you can work around this by selecting the different containers by ID before passing them to your function, but that approach requires manually specifying IDs both in the HTML and in the JavaScript. Ideally, you'd be able to just add more elements with the appropriate classes in the HTML to take advantage of the existing image rotator functionality.) With a little tweaking, you can ensure your code processes each container separately (allowing each container to have its own active image). 

Having braces around the "one-liners" eases adding new code and reduces the frustration related to adding the braces after. No more "I should've added them at the first place". ;) Field visibility These: 

Does it really need to be ? How many rows do you need? Is it stable? Is it robust? is guaranteed to be at least 16 bits long. I would use: 

Do you want to pollute the global namespace with this operator? Is a part of the ConsoleTable interface? Instead do this (I avoided the "try" word on purpose): 

I also prefer to copy all includes from the header file to the implementation file. The rationale behind this is that it ensures that when interface change is made, it will not impact the implementation file. And you get the implicit-include problem solved at no cost. But I can't guarantee it is how the C++ code is written nowadays. Interface Does it really belong to the interface? 

You won't need to change your docs, when parameter name will change. Also, I don't know why people use this comment style: 

TaxiMeterApp This class also doesn't need to depend on , the only useful information is the amount of the base charge. One now takes as a parameter since the distance is obviously not known when starting the taxi meter (the base charge is, however). I also removed the App from the class name because I think it has no value and only bring visual noise. 

Note that I'm not totally comfortable with this method because it has 2 responsibilities: creating an excel file and filling it. Long answer Now you might wonder how I ended with the code above, so let's begin... Filename requirement You stated 

At the moment there is an method. However since you should add cans and not set cans, you should rather take as an argument the number of cans you should add: 

Beyond the requirements The two setters are superfluous and can be removed. Also, Java class naming convention is CamelCase so you should rename to . Since your class is not meant to be inherited, you can mark it . Here is the full resulting class 

You won't need to think when/if the first line is only short description. Besides, it also look more consistent when adding file header, e.g.: 

I would (incorrectly) think that it decreases some integer named by . To "decipher" it you need to find what is and the go to its implementation to figure out how is overloaded. (Remember, as I said, it could, for example, remove the 7th column, there's nothing specific about rows in a real table. ;)) Compare this with: 

Don't use -- in most cases it only clutters the code. I prefer to have some distinction between the c-tor parameter and the class' field, so I use "naming convention": becomes in a c-tor. Using prevents compiler from copying every column. 

Eclipse can add this automatically. And this is also something that is useful, e.g., when your GPL-licensed code will be copy-and-pasted in some other project. If so, you'll be famous, which is what programming is about anyway. :) Headers Someone else pointed it out in the first part. But... Do you need all of: 

There's still a bit of duplication between the but I think you get the idea. The goal is to avoid duplication in order to have tests that are easy to understand and maintain (clean tests are as important as clean production code). 

Extracting UI calls Finally the UI calls must stay in the UI-part, namely into the JavaFX controller. Typically it could looks like this (simplified): 

I see at least one big problem in your method: there is no separation of concerns. Everything is mixed into this method: common rule for password double-checking, business rules for password validation and UI calls for user response. Extracting the business logic The business logic in your case if the password validation specific rules, as you named them rule1, rule2a, rule2b, rule2c and rule2d. Everytime you will need a password validation, you will need these rules to validate a password, therefore I would extract these rules into a BO. 

The requirement is fulfilled. However how it is implemented is a code smell now. It's a good practice to have only one main constructor doing the fields assignments, the other constructor just calling the main one with other arguments: 

This ensures that is invoked every 80 milliseconds while typing out the search text, and then every 10-seconds between search texts. Another option is to use the method to make sure you don't have duplicate timeouts for the same function call running in parallel. 

Here's a working snippet that demonstrates another method of using closures to maintain live references to HTML elements. 

Note for Old Browsers: Above code only works in IE9 and up. I've noticed that works only on DOM elements in Internet Explorer 8, so to work around that I can wrap the above in a try/catch and if it throws an exception just use my old key-polluting method of calling directly. Also note that this code will start to behave incorrectly when the array length exceeds 4294967290. Alas! Such is the price I pay for using the more efficient instead of the more reliable 

Timeout/Interval Overlap This one's not a biggie, but it's good to be aware of when working with and . Your interval function is running every 10 seconds to invoke , while within the function a timeout is running every 80 milliseconds to invoke again (until the end of the search text short circuits that behavior). If the code happens to be in the middle of writing out some search text when the 10-interval kicks in, you'll see some unusual behavior: multiple characters will be written within 80 milliseconds. For something like this, that's probably not a major issue (you'll only see it happen when the search text is abnormally long or the interval time is abnormally short), but if you want to account for it, you can eliminate altogether. Instead, you can put a 10-second timeout in the "dead end" branch of the function (the block that short-circuits the 80-ms timeout upon reaching the end of the search text), just before the statement. 

This shows intent more clearly. (Some may say that too clearly. ;)) There's also another problem with: 

have inconsistent bound checking, which may cause confusion when quickly screening the code, i.e., you need to mentally switch between and , which consumes your "brain cycles". :) [added 23.04.2018, 16:36] IMHO, the preferred way would be: 

to remove seventh row. But what does it syntactically mean to subtract from a table? Why is it removing the row? Why not column? Ideally, mathematical operations (, , etc.) should be used only with mathematical objects, e.g.: numbers, matrices, vectors -- but not , I mean mathematical vector, note that the does not have overloaded to add more elements. I think that this is because library designer knew that it makes no sense syntactically to allow such an overload, etc. Such a syntactic sugar could be useful in small implementation, but I would definitely avoid it in larger designs. Consider, e.g., in a 100 kLOC code base that someone encounters: 

If I remember correctly it should contain "forward-decl" of . These are only used by the implementation: 

The performance benefits vary depending on the browser's implementation of ECMAScript, but you can usually get a modest performance improvement by selecting the parent element first, then selecting only child elements of that parent element. This jsPerf test somewhat demonstrates the difference. In native JavaScript, this is done by selecting the parent element with , , or . You can then call a similar selector method on that element instead of on to limit your search to only child elements. Native 

Consider More Specific Function Names I can see what you were going for with , but and are a bit abstract. In general, try to make your function names into verbs or verb phrases that indicate what the functions do. I'd suggest renaming to something like , and to something like . The extra effort of going back and renaming your functions pays off in the long run by making it easier for others (and your future self) to understand what the code is doing at a glance. 

Von Neumann extraction is a technique to remove bias from a source of entropy. You extract an unbiased array of bits from a biased one by comparing pairs of consecutive bits in the array and returning the first one when they are different, or nothing when they are the same. The extracted array will be smaller than the source array, but will be more balanced in terms of overall 0s and 1s. To accomplish this in JavaScript I ended up writing two extraction methods: one for extracting a bit (given an array and an index) and one for extracting an entire array (given an array). The code appears to work as desired, but I'd love to hear any insights or suggestions related to best practices, naming conventions, performance concerns, or problematic edge cases. Here's my bit-extraction method: 

Exceptions are (badly) swallowed is closed but not opened in this method. This could be a major flaw because it induces a nasty side-effect. It is a general idiom that the one who opens a resource is the one who closes it. is declared in the , no need to close it manually ! (it will be done automatically) 

This kind of requirement is the kind of which clutters the code with at least one and is in general irrelevant. If you are okay to have a number in the filename (going from 1 to n), then why not having 0 ? After all, the requirement behind that is that no filename should be erased by another with the same name. So the real problem to resolve here is how to make sure this method won't create 2 files with the same name ? Since you stated 

I also suggest that you declare of type instead of so that it becomes unambiguous for anyone reading that the synchronisation in is guaranteed. 

Meter I think this class totally useless since you only wrap an (for nothing ?) Don't you think it's a bit redundant to write instead of ? I would remove it. CarType As Tunaki said, I won't couple the distance into the , this has nothing to do with a . Don't you have the feeling when you compare , and that there's a lot of redundancy ? From my point of view, it's screaming for an enum since the only difference between all of that is the value of . I would refactor all of that into the following: