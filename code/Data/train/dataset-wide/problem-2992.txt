Side note: You can also use the object initializer syntax instead of constructors, but I'd recommend sticking with constructors for now. 

Other than that, there's really not much else to comment on, as the code is rather short. Good job so far! :) 

This is ultimately better than generating a list of counts corresponding to each value as well, since it's less memory-intensive and much easier to work with. In addition, if you want to take advantage of the powerful module, you should add this to the top of your code: 

One of my current side projects includes a stack-based interpreter written in C for a programming language I'm designing, SSBL. Since the entire language is stack-based, I needed a way to create and store stacks. Currently there are three separate stack types: 

By using the constructor to initialize values, it means that you don't have to initialize properties/fields like this: 

First off, using for string formatting is deprecated if you're using Python 2.6 or higher. You should be using instead. Here's an example of how you can use . 

Proper input validation Suppose one has a line, like the following, similar to some lines in your code: 

There are quite a few things that can be improved here, so let's start with the obvious. Rather than having multiple individual conditional expressions to check the value of a variable, simply create a list of all possible values and use the operator to check the variable's value, like this, for example: 

Creating a function The functions , , and are all identical. There is no reason that you should be repeating yourself over and over again. To help prevent the repetition, create one simple function with an argument named . The signature for the function should look like this: def play(word_list): # Game logic goes here You'd simply pass a word list, like or as the argument, and then use the argument in the function. 

Next, why is the method ? If it's already attached to the object modeling a phone (), then it should be non-static, and not take any parameters, like this: 

There are many more comments in your code like this one, and I'm sure you'll be able to pick them out and improve upon them. If you really want to have a useful comment, I'd highly recommend using an XML Documentation Comment. A typical XML Documentation Comment looks something like this: 

Nice work. You can make a lot of headway by using attributes. These are attributes you can add to any element to store whatever you want in them. They will be available on the property of the HTMLElement, and will always have string values. For instance, given the following HTMLELment: 

The JS files should go at the end of the . Usually, you want all JS in external files. In practice, I find the only exception to be when the server is injecting data, for instance, if data about the current user needs to be available to JS it would go directly in the page and not in an external file. 

2: Slicing the string is fine. If there is more to the question, then please elaborate. 3: Use of the variable to store the match is not too clever. I recommend against assignment inside the condition, though, it's just something that can be error prone, in general. Down the road you may make an edit and forget to have only one , or something like that. It's usually considered against best-practices, but is not invalid or anything. 4: As I'm not a compiler guy, take this for what it's worth (there is probably obvious conventional wisdom that I don't know about). Using a single token type for these four operations seems fine to me. They all have similar characteristics. But, it will likely be an issue if you broaden this usage to operators that have different characteristics, like the unary (e.g. ). Having said that, you may end up keeping these four operators under one type. You may end up wanting to group on precedence, though. 5: Not a question. One thing I want to note, the and methods are organized in a way that is a little strange, to me. You consume a token (move forward), then when you are getting the next token after that, check the type of the previous token. I like to have separate methods for the various tokens I have. For instance, you might have and . Each of these can attempt to consume the correct type of token, and if it fails return . The method that called them can decide if that is an error or if another type of token should be attempted, like . As a side note, a scanner I wrote for a DSL: JavaScript and Python. It uses a mix of regular expressions and character comparisons for consuming content. The scanner has a property and a property, and any time a token is created the content spans from to . Then, is moved forward to . 

If you're interested about Cactus, you can visit the new repository, the /r/CactusEngine subreddit, or the official chat room. 

tl;dr: If you are planning on adding more methods to each of these classes, then use them. If not, then don't. One of the first things you should check when deciding whether to use a class or not, is if the class has two or less methods, , and another function. Since your code doesn't like complete quite yet, I'm making the assumption that there will be more functions added to each of these classes. Now, I do have a few things about your code that I want to point out. Here's a list of small things you could improve. 

These two naming criticisms are documented in PEP8, the official style guide for Python. I'd recommend taking a look at it. 

Nitpicks Why do you keep calling ? As far as I can tell, it only pauses execution and isn't needed here. It's rather annoying to have to wait when the code executes. You should also add some blanks lines into this code, as well as some comments. By adding blank lines and comments you can improve the clarity, and readability of your code. I'm also noticing a few inconsistencies with your calls. For example, in many places, you use quotes, , to a message, like this: 

In short, the only "good" way to check if an email address is valid is to ensure that it contains an character. 

There's not much for me to review, but if you want me to cover anything else, just mention it in the comments, and I'll see if I can cover it. 

If you really want to add comments to these, then I'd recommend not inlining them, and placing them like this: 

Generally, it's best to have whitespace between comparison, boolean, binary, mathematical, and assignment operators. It makes your code much clearer, and cleaner to read. 

For example, your function would become the following (assumes you've done this for your other functions/variables as well): 

First off, you should be using docstrings to describe your functions and classes, not regular comments. A typical docstring might look something like this: 

This is obviously not quite complete, and it's very monolithic code, but any suggestions are welcome. 

I also decided that defining a base class with methods like the character would be useful if I ever need to create entity-like creatures/NPCs.