If you can, give him a little space to get used to the fact that you're not interested. If he was interested, he's got the hint that you're not, and with some space and time, he should get over it. If he wasn't, then neither of you was interested and everything's fine. If you confront him, he'll probably stick to the "not into you" line, and might even get annoyed, which doesn't do anyone any good. He's said he's not into you, take his word even if it's not true, that's your fastest way to resolve this situation. I don't know the precise circumstances of your pair programming or how much of a requirement that is, but if you can get on with some stuff on your own and then have him look through it, or break up your time with him in some other way ("We can work on Project X until 11 but then I need to {perform other task} so it's done before lunchtime" or similar) then that can help ration his time with you and give you more control over things. If you can, find reasons to spend time working with the other developer - more expertise, or a fresh pair of eyes, or whatever. Talk to your manager, express a preference for less pair programming with your current task, more development and then review. Try to express these things as positive changes rather than just "My colleague is acting weird" - that turns it into more of a conflict with your manager looking into it, and that makes it more of a problem, and focusses more attention on his (probable) lie about not being interested, which makes him feel worse, which just makes the problem bigger. If he's doing anything inappropriate or unhelpful in a work context, keep a diary of what and when, and take that to management as evidence. But if he's just unhappy and things are awkward, bringing that to management makes it look like there's a problem between you and him. I get that you want your voice to be heard, and you're not comfortable having to spend so much time with him, but try to present positive reasons for being elsewhere rather than negative reasons about your colleague. Above all, stay professional, and focus on the work and getting it done. If he's more interested in something else, and is now sulking/whatever, then this will become obvious and his behaviour will be looked in to. I very much hope that this problem will pass, but if it doesn't, you'll be very much on safer ground having been trying to not just get on with work but improve things. 

First: you said in previous questions that you've had health issues including difficulties with anxiety. I fully sympathize with how difficult that can be. I strongly encourage you to look for whatever kind of support system you have available to help mitigate those problems. Any problem gets a lot harder to solve when you have anxiety to deal with. There may be support available through your work, while you still have a job. Talk to your doctor. Use the resources at your disposal. Now, to consider your questions: 

Give huge bonuses for cooperation that leads to good outcomes, and fire people who sabotage their coworkers. Huge bonuses. Like absolutely enormous. You know, like the bonuses that CEOs routinely grant themselves at the expense of the company. 

then you answer the question truthfully. Many companies have entirely reasonable policies that employees who have signed an offer letter with a competitor are security liabilities. (Whether you have to volunteer that information depends on your agreement with your current company; read your employee handbook.) It ought to go without saying but I'll say it anyway: Be prepared to be escorted out of the building by security at any moment after you announce your intention to resign. Make sure your personal items are already cleared out or nothing you wouldn't mind leaving behind. Another thing that ought to go without saying: if your current company asks you to sign anything other than your resignation letter or your final paycheque, do not sign it. Some companies will suddenly produce a noncompete agreement on the day that you're leaving that they "forgot" to ask you to sign on your first day. They are not in a position to get you to do anything; they can't legally withhold your pay, and threatening to fire you on your last day seems ineffectual. If they pressure you to sign anything, the right response is: 

You can't show the source code, but you can explain your workflow processes. So, something like: Engineering Intern, BigCompany Ltd (Start Date - End Date) 

This may not immediately read like "brilliant coder!" but this will show that you've worked with an existing codebase, you can communicate with people to understand the problems they're having, work with the existing design to understand that your fix isn't breaking something else, and generally explain what you were doing during your internship without having to go into source-code-specific details. Again, as noted by Lilienthal in the comments, be prepared to talk about all this at interview, go in-depth about how you did things, but not about the details of the source code you were working on. 

Start by being patient. Explain to him that there's a lot to take in, so you're probably not going to grasp all the details immediately, and you're going to need him to go over some of the knowledge from time to time. Add that it's better that you learn this stuff well, and make sure that you've got it right, than have him just deliver one presentation, expect you to immediately learn and understand everything, and then have you make mistakes. On the other hand, also try to reduce how much you need to ask him by writing down as many of the details as you can when he's transferring knowledge. Hopefully this will help you remember things, but more importantly, you have the details written down somewhere which means you can consult that source of knowledge, rather than your colleague. His expectations of instant understanding are unrealistic, but there's little to be gained from direct confrontation, so if you explain what you need to know, and point out that it'll improve the quality of your work if he tells you this - plus you make an effort to write it down - then he can't have so many reasons to grumble. 

Again no offense intended but be realistic. Would you do that if you were Bob? I wouldn't! The supposition that Bob will take one for the team and be happy about it is not realistic. Bob will quit and angrily badmouth his former company on social media. 

No one wants to be in that situation. Everyone is in that situation. So step two: Get used to it, and stop caring. The question that should be on your mind is not "do my undeserving no good slacker coworkers deserve their bonuses?" The question on your mind should be "am I getting an adequate compensation for the amount of work I'm putting in?" The answers to those two questions have nothing to do with each other. Put another way: the only way to control what bonuses your slacker coworkers get is to sabotage and badmouth them. Do you want to work at a company that encourages that kind of behaviour? Worry about what you're getting, not what anyone else is getting. Make yourself look good by enabling everyone around you to share in your success. 

You expected fairness and loyalty and thoughtfulness from a corporation. That's a great mistake to learn from, particularly since this mistake cost you nothing. Don't make that mistake again. 

Everyone does things differently, and what they're looking for to fill each job differs, so there'll be a huge variety of things that might be included. What it sounds like you will probably get is an interview with a prospective team lead, an interview with a senior developer who may ask you technical questions, potentially a technical test or problem-solving exercise, possibly preparing some sort of presentation, possibly some sort of technical quiz, possibly also an interview with someone HR-related to see how you'll fit in. It won't be all of the above, but I think that those are the most common elements you'd expect to see. If there was significantly more than that, the interview would be more than three hours. They may or may not have other candidates around interviewing at the same time, so you might be sitting around with them and waiting for part of this time. Be friendly, remember that while you may be in competition for the job, the company will be looking for a team player. In general, be prepared to do stuff as well as present yourself to interviewers, but for a junior development position it may not be too specific or demand you show specific technical knowledge they're expecting you to already have. Try and relax and treat it as much as a learning experience as an interview. Being a bit development-specific, make sure you know what technology stack/languages the company uses, and be prepared to work either with them or with pseudocode that looks like them. The more you can look like you'll fit in easily and need the least training to adapt to what the company is doing, the better you'll look. 

One day shortly before I left MSFT they gave all of us personality tests, because middle management was obsessed with faddish metrics. Those personality tests showed that, SURPRISE, the people who were hired to build code analysis tools in a highly competitive environment were (1) analytical, and (2) competitive. Being competitive is great. People who enjoy competing should be hired for competitive industries! The trick is to incentivize competing with your competitors, not each other. A question you did not ask but seems germane: 

and hand it to your manager. Notice that Company A was not mentioned. If anyone asks any nosy questions about your personal life such as where you intend to work next, then the answer is: 

The specific algorithm is totally unimportant. It's a jumping-off point for the real task of the interview, which is determining if the candidate can reason about code using the tools in their toolbox. I have never once had to solve the tower of hanoi problem in my job. I have many, many times had to rewrite a recursive algorithm into an iterative algorithm with an explicit stack in a stack-constrained environment. A candidate who cannot do so is unlikely to succeed on my team. So, the answer to your question is: solve the problem in good faith. If the problem is really a "fizzbuzz" -- just a test to see if you can write code at all -- then you will pass it quickly and the interviewer will move on. But I would use a simple, standard problem as an opportunity to probe the candidate's skills more deeply.