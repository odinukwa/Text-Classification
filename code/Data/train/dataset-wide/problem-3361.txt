The file should contain a record for each name server you want to use. Normally, they will be used in order but there is option that can be set. If having the master down causes resolution to fail, either the slave is not listed or is not reachable. Check man for more details. You may have the utility installed which will rebuild the as interfaces change. It has its own man page. 

The quick answer in a corporate environment is No. DHCP is used for hosts which are expected to be clients not servers. DHCP addresses are not usually listed in DNS. Servers are given static addresses and appropriate DNS names. The long answer is maybe. The corporate DNS servers may be configured to allow DHCP clients to register their address. If so, and if the client actually registers its name it should be reachable by name. DHCP is now mostly used for the private DNS ranges 10.0.0.0/8 192.168.0.0/16 and 172.16.0.0/12. These are not reachable across the Internet. Unless your corporate network includes the remote site, it is unlikely be reachable. 

My usual Shorewall firewall configuration starts with the example configuration for the number of interfaces on the server (or access zones: NET, LAN, DMZ). Note that if the zones share interfaces and or routers the may be less secure than they could be. Then I adjust rules as required. I often to disable any default outbound access policies. These are replaced with rules allowing outbound access on the required ports (DNS, NTP, SMTP, etc.). 

runs the local program to deliver the mail rather than connecting over the network stack. In your case, exim4 is used as a drop-in replacement for sendmail. The mail will be treated as a non-smtp delivery. Rate limiting will need to be done using a non-smtp ACL. 

Don't use the current IP address in your code. It is standard practice to listen on '0.0.0.0' which will listen on all available servers. You can add the ability to set the listen address from a configuration file and/or the command line. That should solve the issue of having to modify the code every time you change networks. Getting a static IP address is beyond what I can answer here. It requires a static network. It might be possible to configure a host with a static IP address to forward requests to your server, but the best solution would be to host the server on a host with a static IP address. 

If you are not comfortable with the way it works, you are likely better off using gmail as vortaq7. I do run my own email services, and have been researching the quality of the servers connecting. Even the big organizations get it wrong occasionally. Small operators are more likely to have minor problems. Surprisingly, the companies running mailing lists for major customers can do a very poor job of configuring their servers. It is frightening how badly automated emails systems are configured. In some cases such as the airline industry these are likely legacy systems that haven't been updated. If you are considering setting up your own email service you may want to read my rant on Running an Email Server. Its more directed at marketing types who tend to get very bad setups. It does cover the basics and may make you feel more comfortable running your own server. My other postings on Electronic Mail are directed at setting up particular services. They may give you an idea of some of the things you may have to deal with if you do setup your own server. 

If your domain gets or send email you need a backup DNS to establish your credibility and ensure future delivery of email. If a mail server looks up you domain and finds it doesn't exist, it will immediately bounce your email. However, if it DNS lookups succeed and the server is down, then the email will be queued for later delivery. Only if you are down for a few days will your email start bouncing. (Some poorly behaved automated delivery systems try only once and may fail to deliver messages even if your server is up.) 

Just ensure local_domains does not include any hosts you want to require authentication from. This will prevent an open relay situation for those servers. However, it is common for servers to send email via the MX to the internet. Generally you do not want to require authentication in this case. Ensure relay_to_domains is empty, or contains only domains that you want to allow relaying to. (You are an open relay for any domains in this list.) Make sure you require STARTTLS before accepting AUTH requests. Otherwise, your passwords will be easily sniffed. 

Run the plugin with -h and it should give you documentation on how to use it. Normal paramters include the host to test, limits for critical and warning limits. DNS test will likely include what you want to look up. 

If you are registering your DHCP clients in DNS, then you may show stale information in DNS. You should be careful when allowing DHCP to be registerd in DNS. It is possible, for DHCP clients to register using service names like , , etc. This could allow them to replace services or perform man-in-the-middle attacks. 

You will likely need to authenticate with Gmail to sent the messages. Otherwise the mail may be treated as Spam. This is done by configuring a client password (where your server is the client) entry. For an Exim4 install I would do the following: 

Then you will need to determine if these are legitimate queries or not. If the requests are appear to have a source address which can't reach your server directly, then it is likey malware that is sending the queries. For UDP queries you can't necessarily trust the source address. Faked source addresses have been used to launch DOS attacks on servers. 

You should configure the server to use a smarthost as a relay. Normally, your ISP will provide a relay for you to use. If you want to send directly to the Internet you need fixed IP address with a PTR record pointing to an A record which returns the address. Otherwise many servers will block you. You should also have an MX record for the domain you are sending from that points to your mail servers name. SPF record for both domains can help unless they forbid your server from sending for that domain. Spamhaus lists many of the dynamic IP address ranges and you will get blocked if your IP address is listed there. If you are listed in other blacklists you are also likely to be blocked. Just because your mail server has accepted the message for delivery, does not mean that your mail server will be able to deliver it. Try the command to see if your server is still trying to send the message. Email is store and forward, and your server may take up to a day or so to tell you it is having problems delivering the mail. EDIT: The easiest solution is to use the command and select the smarthost option. Use your provider's email relay and things should work well. Make sure you use a valid sender email address. While GMail may work, it is extra effort to setup the required authentication, and they may limit the amount of email you send if your don't have a paid account. If you want to run your own mail server you could start with my article on Running and Email Server. You may also want to review my Email Policy document and the documents it lists. I have several other posts related to email. My server of choice is Exim. 

Data buffers will remain in the pool after they have been written. These blocks will be quickly reclaimed if the system has a need for free memory. I've used systems where it would take several days to fill memory to the point where data buffers needed to be reclaimed. While it appears you are using slightly over half the available memory excluding buffers and cache, the buffers and cache can contribute significantly to performance. If this was happening all on one server, this might force block from mysql files out of the buffer pool. These would have beed served from memory rather than disk when a read was requested. This might slow down the mysql performance until the blocks are replace. However, on the remote system actively read blocks may be forced out as the data is read into memory. 

I did a blog posting on setting up an email server. Other than DNS, I think you have done a good job of covering everything there and more. Legitimate bulk mailers tend to do a poor job of configuring their servers. I don't know why as it is their business. 

If you generate the email from a webform, then ensure you are sending with an address that belongs to your domain. You can do this by adding a Sender header with a noreply address from your domain. This should also be the Envelope sender for the email. 

There are problems with DKIM and verifying the sending server. By signing with your DKIM signature it is possible to be reasonably certain that your server handled the message at some point. You can also be reasonably certain that the message was not changed after that point. This can be important if I present a mail message as evidence. (For instance, I can't change the price offered.) I find a high percentage of legitimate DKIM signed messages can't be verified because the public keys are not published. (or at least aren't published correctly.) The fact I can find the signing keys provide me with some assurance that the sender is not trying to hide the origin of them message. Combined with SPF I can rank messages signed higher or lower on the SPAM scale. If you are a permitted sender, I may choose to rank the message higher on the HAM side. Otherwise, I may count the message as more spamish. A cleaner way of doing the signing is use an address in your domain in the From header, and put the clients address in the Reply-To header. Alternatively, you can put an address from your domain in the Sender header. Either way it becomes possible to match the Envelope sender to an address in the headers. While there is no need for the Envelope sender to be included in the header, some servers will rank you higher on the SPAM scale if it doesn't. In some cases, they may refuse your mail. 

As you are using , it is likely you are running some distribution of Linux. If so, you can used to block outgoing connections to port 25. In your case, you may want to drop the connections so that they will stick around for a while. Monitor the system with to determine a process is trying to send a message. Then you can check the process to see where it is running from. You can use to prevent the process from running to give you even more time to examine the process. If you do need to send emails while doing this, exempt the user the runs as from the rule. This will allow to send mail while blocking other users. If you have a web server running, it may be that you have a script included that send email. Some of the available scripts allow spammers to send email using your server. There are a number of other ways to send email from a server that will not be caught by a virus scanner. Until you identify how the email is being sent, blocking with may be your best bet. 

The network and broadcast addresses will be determined from the IP Address and netmask if not provided. Your ISP must provide of these. They should be able to provide the broadcast and network addresses, although I never configure them. If you have fixed IP addresses you won't want either DHCP or hotplug. Both of these are for non-server configurations. DHCP is used to get an address from the router or other DHCP server when connection to a network. Hotplug is used to select the appropriate configuration from a set of configurations when connecting to different networks. Hotplug would be appropriate for a laptop used in an office or at home where DHCP was not sufficient for configuration. 

Munin does a good job gathering these statistics and others. It also has the capability to trigger alarms when thresholds are passed. Its warning capabilities are not as good as those of Nagios. Its gathering and display of historical data makes it a good choice to be able to review whether the current values differ significantly from past values. It is easy to setup and can be run without generating warnings. The main problem is volume of data captured, and its fixed frequency of gathering information. You may want to generate graphs on demand. Munin provides many of the statistics I would check using when a system was in trouble. It's overview page is useful for identifying possible problems. Nagios is very good at alerting, but has historically not been very good at gathering historical data in a manner suitable for comparison to current values. It appears this is changing and the new release is much better at gathering this data. It is a good choice for generating warnings when there are problems, and scheduling outages during which alerts are not generated. Nagios is very good at alerting when services go down. This is especially suitable for critical servers and services. 

IPv6 addresses are not precious, although hosting services are unlikely to want to become tunnel brokers. IPv6 should not require NAT although there are experimental implementations. The major advantage of IPv6 over IPv4 is that NAT is not required. If you are trying to get IPv6 on your LAN, configure your LAN for IPv6. The disadvantage is you need to firewall appropriately, as you no longer have NAT protecting your network. You could use 6to4 to create an address based on your LAN's external IP. This will give you a /64 block for your LAN. You could then route this over your VPN to provide IPv6 access to your server. This would not be globally routable, as external hosts will route to your LAN. (You could try the same on your server.) I documented my experience with Implementing IPv6 6to4 on OpenWRT, which is mostly applicable to other Linux based servers (configuration is different). However, I would recommend using a tunnel broker. They will provide at least one /64 block, and will provide additional blocks on request. Skip using a VPN for IPv6 and use Firewalls to limit/permit access appropriately. I switched to a tunnel broker and documented additional setup in Implementing IPv6 Part 2. 

If you want to use your own PHP error pages skip the all above steps and just add error document settings in your pages. It appears you just want to direct apache2 to use you pages, not get it to sever the apache2 custom pages. (You can use the same document for multiple errors.) Add lines like this to your site specification. 

SPF needs to be configured for each domain. While you can use wildcards, this effectively creates all the possible sub-domains that match the wildcard. It is rare you would want to use wildcards. SPF does not apply to records, and your domains typically shouldn't be sending email. If you want to protect domains which should not be sending email from being used to send spam, use an SPF record like . I would recommend doing so, but many domains do not have this coverage. (I seen many of them being rejected by my spam filter.) This should include web domains which some spammers tend to prefer. The domain used in the envelope from address, , , and similar headers should have an SPF record like . This will cause problems for senders using other SMTP servers to send email from your domain. SPF will be applied to the envelope from address which in most cases should match one of the sender address headers. If you want to allow other SMTP servers to send on behalf of your domain you can use the mechanism. There are limits to the number of domain lookups that can be applied, so deep nesting with mechanisms like or may cause the check to be fail before all mechanisms are completed. Your are also likely to import a mechanism which will significantly defeat the purpose of using SPF. Setting up your SMTP server to accept authenticated connections from your users on the Submisssion port (587) will allow them to use your mail server to send email. The Submission port should be configured to enable StartTLS. Authentication should require TLS. Your SMTP server should have an SPF record allowing it to send email. A record like would be appropriate. Consider looking at which will allow you to publish a policy on how email SPF and DKIM should be handled. You can also receive feedback on how well your domain is meeting your policies. This can include indications that your domain is being used to send Spam.