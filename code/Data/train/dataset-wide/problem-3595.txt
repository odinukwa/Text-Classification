Length of System Up Time If you want to find out how long the system has been online you can do this (this is also an alternate code style): 

Exchange servers were designed to be constrained endpoints. The session configuration is a bare bones configuration schema with limited exposed methods. As Exchange servers are exposed to the outside world the designers are obsessed with security. The command you're trying to use is trivial in your existing context as you specified the environment you wanted with your instantiation. It is strongly recommended that you work within the existing session configuration (for remote) or run code locally for access to all methods. However, if your risk tolerance affords it you can create a custom session configuration schema using information you find here. 

In your case you're trying to equate one variable's contents to the object, it'll never match because only is -eq to . An empty string ("") is a object without a value. Which is why you want to use it with comparison operators (-eq, -lt, -ge) to evaluate other strings. 

An option that I know of would be to use Novell ZENworks as it supports the OSX environment. You can research more about it here: $URL$ Novell typically is less expensive than Microsoft solutions. But is also less reliable in my professional experience. This option may not be feasible as you're dealing with a relatively small client base (cost x users). 

Novell Identity Manager is also an option, though AD really is better suited for the task. Novell's solution requires an eDirectory Vault and the Novell Client on each system. Check this link if you're curious IDM Implementing Password Synchronization. IDM allows you to build drivers which synchronize passwords between eDirectory and Active Directory. If you propose this solution, you're exec will likely acquiesce to using AD as Novell has increased cost and headaches. 

You asked for the entire class to be instantiated. Looking at the class enumerator on msdn I'm not surprised it failed needing administrator access. You could try querying the specific properties you need and see if you trigger an exception, but most will require admin access. Here's the msdn page for the class you're using: $URL$ 

When using network resource file systems, and UNC paths, you should use the PSProvider in Powershell. Here's a couple examples: 

The change you're seeing is a trivial one. The value is being changed from null to an empty string. This is not uncommon for drivers, firmware, or interfaces (wmi, cim, custom applets) to make slight data changes this way. While I can't point to a specific line of code in your circumstance, I can tell you the most likely way this is occurring. It's not unheard of for a developer to set their code so that null variables are disallowed. To do any kind of work with the object it must be serialized and instantiated. When that's the case the property are assigned their values and a null is transformed into an empty. Believe it or not null and empty are totally different from a programmatic position. There should be no danger or adverse consequences from this. The failure's your seeing are most likely attributable to something as yet undiscovered. Perhaps the error messages or logs might help? Certainly post them if you have them. 

Erm..... First hit from google (search string mx record lookup) was: $URL$ For those who have never used it, it has a history button to show previous mx records for a given domain. 

Looks to me like you're just running into trouble translating the VBS code into powershell. There are some subtle syntactic differences such as: 

The WMI class uses the MSI provider to collect installed program data. This means you're only going to get data on software/packages installed using MSI. Further, calling this class causes a repair action to be executed on every program it returns. Most of the time this isn't an issue, but it will fill up the event log and can cause issues for some software. You can get more detail on this link: Win32_Product Class Most scripters, coders, etc use one of two things; 1) Registry Query, 2) WMI query of the SCCM class . Obviously the SCCM class requires SCCM to be installed on the host. You can read more about that HERE. So that really only leaves the registry query for most folx. Don't fret though, because all the work was already done for you by TSG. Your pot of gold is "Use PowerShell to Quickly Find Installed Software" While I'd do things slightly differently than in that post, it has all the heavy lifting already written. With a little aptitude and some google searching you can customize as you wish. 

You have two Environment Resource's (variables) which have the same Name parameter value. This is likely causing a conflict when the engine goes to create the environment variable. I recommend you change to something like this: 

The error is trying (in microsoft fashion) to tell you that it needs a script block after a . Replace the line with the following to continue past that error: 

Starting after 2008 R2 Microsoft changed "Services and Applications" to "Roles". Also in the referenced example, "Under Actions (on the right), click Move this service or application to another node" is now "Under Actions, click move, then either best possible node or select node". 

When using the New-JobTrigger cmdlet to create a startup trigger it's a good idea to specify a random delay period of 30 seconds or more to avoid conflicts at startup. This will also help ensure a greater chance of success for the job. 

To solve this I had to change my location from the CMSite provider drive to a filesystem provider drive and then initiate the BITS Transfer. Apparently the CMSite provider doesn't inherit this operation. 

calls .Net and creates objects using a constructor in the class. You can find out what "type" the data is by piping the cmdlet to like this: 

You'll need to ensure your Linux servers are CIM enabled and then use the CIM powershell cmdlets to interact with the Linux server remotely. You can read more about it here: CIM Cmdlets for Non-Windows OS If you're new to CIM, as in this is the first you've heard of it, you'll want to familiarize yourself with what CIM is and how it works. Then attempt to try the CIM cmdlets. 

Which of course returns the cluster object. So, what's going on here? What's different with ? Edit Version info from Powershell: 

Microsoft instructions advise to use "Services and Applications" but it's missing from the Failover Cluster Manager. For example, the documentation for Test the Failover of a Clustered Service or Application. Where is the "Services and Applications" option/section? 

If you're using the parameter to selectively choose your tests, there are two safe storage tests you can run. They are: 

Detail My first thought is that I'm using the cmdlet wrong or winrm isn't working (it is). I also thought that maybe there's a difference in the way it's called that's causing the failure. Following that logic I reviewed the following technet page on the cmdlet: Research: $URL$ Based on the writing there, I couldn't discern an obvious user error. So I've tried a few things to figure it out. First I thought maybe I'm just constantly screwing up the typing so I did this: 

and an empty string ("") are two different data types to powershell. Replace any instance of with and you should be good. Almost all MS provided cmdlets are set to . I'd like to expand a bit on what is. Powershell is an OOP (Object Oriented Programming) shell with direct hooks into .Net. is a placeholder and an object in it's own right that represents nothing. Don't worry about fully understanding at this point, a lot of people (even some programmers) don't understand to the Nth degree. So why is this relevant now? Let me link you to THIS REFERENCE but I'll copy the relevant info here... 

Use process explorer (procexp) to track down the hog. You'll need to add additional columns in the view pane specifically for disk reads and disk writes. Once you have the culprit you can go from there (engage the vendor or developer). You'll likely want to see what that process is doing and you can use process monitor (procmon) to do that. When you launch procmon, you'll likely want to filter out everything but the process you're investigating. Those two tools come with their own help documentation (and it's pretty good). To deep dive even further, I'd recommend the windows internals books from Mark Russinovich. Process Explorer Process Monitor Sysinternals Process Utilities Windows Internals Books 

Summary When I call powershell returns the name of my cluster. For simplicity sake, lets call it . If I call it fails with an error. Error: 

I feel like I should be able to cast as an in the param block and preset it with data, and return as the same datatype, but I couldn't figure it out. If anyone does, or finds documentation why it won't work, please answer. 

The Powershell cmdlet queries a myriad of data and performs validation tests which it wraps into a pretty report. If you run you get a list of item's you can individually query with the cmdlet. There's a common naming scheme when you read the 's. They all start with either "List" or "Validate". Obviously "Validate" is going to actually test the failover by failing. But naming something "List" makes me think it's just a query for data as is at the time it was run. I've tested this with the following script: 

The split between Validation and List is intended to direct what result to expect. Validation tests are boolean and return pass/fail, yes/no, up/failed, etc. The List tests return statistical and operational data for review. Microsoft built the tests with Zero Downtime in mind. And for the most part that's true. There are tests which will trigger a failover and cause downtime. They are: