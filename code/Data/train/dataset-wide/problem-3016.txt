I suppose that uses an iterative integration algorithm which is quite expensive. Therefore, another optimization could be to integrate functions analytically if possible - But that depends on your use cases... 

As suggested from t3chb0t, I refactored the code to a more OOP style solution which seems to fit better :): 

In productive code, the methods should be commented. Especially the prerequisite that has to provide the corresponding operator ;). 

It would be better to create a of jobs and use it in the foreach loop. Otherwise, you have to parse field as many times as jobs are available (at worst). If number of jobs is less than 10, it is more performant to iterate the list of jobs instead of using a : 

For me it feels better to use a factory for creating commands compared to registering all commands to the DI container. However, it is more effort to create and maintain the factory interface. [Edit] Alternatively, it is possible to create a generic factory for commands. That doesn't require to extend / maintain the interface: 

You used very descriptive names for all of your labels. This is good. Please allow these 2 observations: 

Smaller instructions are generally better With the 32-bit immediate value, the instruction in the MainLoop is quite long (7 bytes). You can store the zero in and move that to memory. This also eliminates the need for the mention "qword ptr ": 

The way you find out about the number of left over bytes is too complicated. It's correct but needlessly involved. Basically all it takes is anding the original counter with 7 to extract the lowest 3 bits. Simpler, shorter, and using one register less which in future programs will always be handy: 

Looking at the code I've just written above, I don't think there's anything ugly about it. It's the cleanest way to do it, and overtime it'll prove that it is self-explanatory. 

I find it confusing to see how the byte dump is presented. I imagine that you separated the numbers yourself to make the immediate operands stand out, but looking at more resembles 5000h than the actual 0050h that it needs to represent. 

You don't need to wrap the returning taks in a new task. The following has less overhead and is functional equivalent: 

You could also solve it without sorting by xor all expected number and afterwards xor all elements from the array - that should be a little bit faster: 

Local functions and delegates (without recreation) are almost as fast as the static version while recreating the delegate each time is ~40% slower. Note that the performance difference is not noticeable for common programming tasks - so don't care about it. 

Your implementation does not work. It is not enough to generate a key based on the hash codes of column and the row. The key must be an identifier that is unique for each combination of column and row. That is not the case for hash codes because different combinations of column and row may result in the same hash codes. 

A small error here. On exit with Ignore the register will hold an uppercase J. My main concern here is why you want both the register and the ZeroFlag express essentially the same thing? If you would stick to only return result in the ZeroFlag then you could save extra bytes and at the same time get rid of the , , and registers being modified which is a good thing. 

Lookup table. The lookup table (LUT) is filled with classification bytes. No need to have the data in this table repeat itself. There's more to gain from re-using the same lookup data (caching) than that there's to loose on the additional instructions to fetch it. The LUT can either be created at run-time with an initialization routine or at compile-time. It's easy to fill the LUT by hand. For the simple FizzBuzz a mere 15 bytes. I chose to let the assembler do the work. Lookup tables are powerful instruments. I wonder if ever any applicant when confronted with the original FizzBuzz task has used this approach. Not sure about what the recruiter would have said either! 

Is it desired, that properties that are null are not allowed? If so, it is also possible that dependent properties become null after the LazyProperty was created - so IMHO that restriction can be removed. 

The entity framework already has a method for loading related data: See this link section 'Include related data'. Older versions of the entity framework have similar methods. That would turn your method into a one liner ;) 

Not sure if I get the problem, but one solution for reconstructing the original list (even 3.000.000 items) with a dictionary is: 

Update AdrianoRepetti mentioned in comments, that the solution above may result in rounding errors when adding two angles in degree for example. That is a valid point, so the code below stores the values as well as its unit as internal representation. That allows to avoid that kind of inaccuracy. The API remains the same (except that the precision changed from float to double): 

Because this variable really is a register, and because the preferred way to find out if a register is zero is to it with itself, you should write instead: 

Size optimizations. To clear the EBX register use . It is shorter than . To jump if the ECX register is clear use . It is shorter than the combo . Please note that I changed the destination to cope with the possibility of the argument Dimensions being zero! Your code would erroneously have used mask3 in this case. 

Decrementing counters. Given that the output is to be redirection friendly and that the matrix on the screen shows up filled column wise, adjustments to these decrementing counters are necessary. These adjustments account for the missing decrements due to the step when going to the next column. The numbers aren't processed in natural order. Hence. Instead of decrementing I could have used incrementing on the counters. Usually (1) doing so requires an extra instruction that will certainly add to the code size but not necessarily slow things down. (1) It's possible to avoid the additional while still incrementing when we start from negative numbers and move towards zero. 

That code fulfills the open/closed principle because you can add new request handlers without modified existing logic. 

I am also new to F#, so I have just 2 small annotations: The function that parses the string to Int32 can be simplified: 

And in the very unlikely event, that you find a start number where the collatz conjecture does not ends up with 1, your program remains in an endless loop and you will never find out which number it was ;). 

For the case, that the value couldn't be parsed, I would throw an exception (or at least add logging). If that case occurs, you have a serious problem. Actually, I would prefer to store the underlying integer value because: 

It would be better to give the interface an additional "Name" property that returns the value of . Than you can iterate over all implementations and get the first with the corresponding name ;). Example: 

That's fine but you could use the fact that PrimeMode is equal to zero here and just have it incremented instead of using the space consuming immediate value: 

A loop like this is wasteful because of the uncondional jump that gets executed on every iteration, on top of the conditional jump that needs to be processed anyway. You can make the conditional jump the only jump that gets executed repeatedly. 

Currently your calculation shifts the BPB_RootEntCnt 5 times to the left immediately followed by shifting it 9 times to the right. Can you see that this comes down to just shifting it 4 times right? To get code that won't fail on exotic BPB_RootEntCnt values use next calculation: 

Binary decision tree. Next table shows that using a binary tree reduces the number of divisions enormously. Moreover it gains importance as the number of test cases rises. 

The UPDATE_SECTOR proc deserves a better name. The LOAD_SECTOR proc does exactly what its name suggests. It loads into memory a disk sector. The UPDATE_SECTOR proc on the other hand doesn't deal with the contents of a sector. It merely changes the value of the variable varSect that holds a sector number. Better names then would be UPDATE_SECTORNUMBER or UPDATE_VARSECT. When it comes to actually updating the sector number, I see no benefit in checking if the increase is zero or not. Given that all it takes to raise the dword variable varSect is 

First of all, I think the code is well written and the algorithms are implemented pragmatically and simple. Performace SplitWordWithArray 

If a boolean (without error message) is enough, I would prefer the boolean return value because of its simplicity. Otherwise, I would even prefer something like an object that contains a success flag and an optional error message (or even other information like the exception) as return value. Another option is to throw an exception - may be also valid in your case. For that kind of error handling, the command should be executed before being pushed to the obviously. 

One optimization is to use bitshift for numbers that are multiple of 2. Not sure if that is significant, but in therory it should be faster ;). The code example below has also a few structual optimizations: 

I am interested in general code improvements (e.g. naming, simplifications, bugs, ...) and alternative approaches to address that kind of problem. However, any constructive feedback is welcome of course :) 

If you're really interested in becoming better at x86, you should avoid retrieving the parameters using relative addressing. It works and it can shave off a few bytes, but it is very error prone! Imagine at some point in the future you need to preserve more than . It would require closely checking all the code. Using prologue/epilogue code isn't that much more difficult: 

Because these variables really are registers too, and because the preferred way to zero a register is to it with itself, you should write instead: 

Your comments certainly explain well enough the purpose of the code, albeit this one (; Preserve ESI) is a bit superfluous. What would greatly enhance the readability is you writing tail-comments in stead of whole-line-comments 

This part is essentially calculating the opposite of the number in the register. Why not use the instruction? It's well suited for the task. It gives smaller code and doesn't clobber the and registers. Also note that the ldxsetup1 label isn't really needed in this program. It's noise. 

You should use a long-running task for the background task. Otherwise the thread will be taken from the ThreadPool (which is used for short running tasks usually) 

Creating multiple types for implementing different representations of the same type is probably not the best option. A simple solution is, to create one type that uses internally one of the available representations (it's rad in the code below). Further more, the type should provides methods for creating a value from any of the available representations and converting the value back to any of the representations: 

Hopefully you catch the validation exception and handle it because unhandled exceptions are not an appropriated way to notify the use about validation errors ;) 

2) You could improve performance of your seconds code with "client side indexing" (using a dictionary): 

It is possible to use a linked list of chars and navigate with the linked list nodes. That should be fast and uses minimal memory consumption.