With those small things out of the way .... and, by the way, the change from Vector is not really 'small', it has a big performance impact.... then you can look at the bigger items. 

We do that by making the 's point to the 's . We now have a kind of 'fork' in the list, with the second dangling part way through.... We have now removed the A from the main link chain, and we need to advance the head pointer to C.... Sunce Nothing is pointing to the second A now, it can be garbage collected, etc... and the final result looks like: 

The advantage of doing things this way is that you don't run the risk of a bug where you forget to call . Note also that I added braces to your 1-liners. My experience suggests this makes for more reliable code when your code enters a maintenance cycle. 

The range is non-uniform: long values have up to 18 significant digits or so (19 for unsigned). decimal has as many as 29 significant digits. Since you are dividing a random long value by the max long value, you are essentially able to create about \$10^{18}\$ possible decimal outputs, but, there are actually \$10^{29}\$ actual possibilities. What this means is that your method will never produce the \$10^{10}\$ or so of the possible values.... that decimal can express, between each actual output. Let me express it this way, your code produces values like (using an example decimal representation...): 

The performance problem is still related to creating a socket each time you want to send data. Here is a revised version of your code... note how the socket is kept open all the time (unless there is a failure, at which point it will re-connect....): 

You are treating and as if they are Globals, and, since they are globals, there is no reason to return in the function at all. As a result of this, your code is not re-entrant (you can only have one method calling your at any one point in time). The right solution to this is to pass the and values as parameters to the method, convert it to private, and create a new public method which creates the instances as you need them..... 

in the above code, while performing the forEach, any of the following things are possible (and other things as well, I am sure): 

Your self-review is about the same as what I would say .... and the issue is that you are using on the public side of the API. The people calling your and methods should have no idea that is a concept. You want to have just a string value to give/take from the shelter. This also fixes the broken generics on the Enq method. Something like: 

Since this question is marked as beginner, let me compliment the neat structure and consistent style I see throughout. It's well done. Variable, method, and class names are all meaningful, and useful. The validation and error handling systems are uncommonly comprehensive, and again, well done. Validation The validation should provide more feedback to the user. Saying 'not enough arguments' is fine, but then you should also say how many are expected. Does the user have to engage on a guessing game, bouncing between too many arguments, and not enough arguments before discovering how many they need? Pre-initializing variables There is no need to preinitialize variables. The following: 

Note that in a raw performance benchmark, I suspect your solution will be (slightly) faster, but I prefer readability over small incremental performance gains, unless performance is extremely critical. 

There is no good way to handle the overtime rate other than with a conditional somewhere. Ternary conditions may help a bit..... 

A big part of this system is the use of listeners (and interfaces). The is how the model communicates with the Controller.... the controller then uses those events to trigger changes in the view(s). The View Most of your code duplication is related to the view. I strongly recommend that you create an enum called 'CalcButton' (or similar), and this enum looks something like: 

I have tried to find a way to make it work to my satisfaction below, but, frankly, I don't think it is possible without changing the code so much it is no longer 'yours'. I think the reality is that a secure mechanism for this will necessarily rely on having a lock that contains both the unpark and the queue management.... at which point, using the park/unpark is no longer the right tool, so it defeats this process... Feel free to read through what I was about to write, but, I am essentially abandoning it.... 

The above toString will be null-safe. If someone stores a null value in your Node, the will fail, but the will be right. 

Despite the above issues, in general, the code is good. The variable names are descriptive, the function names too. The code does flow quite well, and I don't feel like the functions are doing too much. http errors It's common in http-handling code to have a helper function to allow child methods to return an error, and then you catch that error and return a consistent, reused, error message system. Consider a function like: 

Build up two Strings, one of spaces and the other of 'x' characters. Each should be at least as long as the longest value we will need. loop through the rows and use parts of each of the two above strings. 

creates and starts a thread. The thread that is started is a regular thread, as opposed to a daemon thread. The JVM will exit when all threads complete, or all the remaining threads are Daemon (background) threads: see . You should typically use Daemon threads (and I believe that Java has a bug in that Daemon threads should be the default). Additionally, there is no reason to 'Declare' the Thread variable before assigning to it. Finally, for many reasons, it is nice to give threads names. I would have the code: 

Without knowing more about the code and it's context, I can think of only one thing that may help, and this is an extension of Simon's answer: 

You are not supposed to add a to the multiple times. But, it is possible that two threads, each processing a page, both pages with a link to the same URL, will hit this code at the same time. Both threads may cal at 'the same time', and both threads will add the to the (even though the refs are different lists in each thread, the is not. Only one of the threads will successfully add the newUrl to the though. You can use this to your advantage with the return value: 

(Filesystems with > 80% usage). Youa re aware that the df command will go a long way to solving the whole thing for your, right? grep/awk/sed 

So, in Java, it's 1.152 seconds, which is 5.6 hours. So, in the day it can save you to use Java, you can learn the code, and run it. Now, I imagine that C or C++ will go even faster.... why not try those? Regardless, here's the Java code I wrote, and, even though it is long-winded, and more verbose than the Python, the results are good. (Note that in Java the concept of the 'product' needs to be manually implemented...): 

OK, now for some of the bigger things... You ask whether you should get rid of the method. The answer is probably . You are setting up a recursive call chain with the method. You often need an 'entry' to a recursive method, and the is this method. The method will pre-and-post process the data required by, and created by the recursion. Right, you want to find directories which have no files.... What I don't like about your code is that it calls 'listFiles()` twice. We can fix that with/in the recursion.... A method like the following will serve you better, I think: