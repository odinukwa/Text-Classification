Hope this helped. If you want more feedback I suggest you to fix these problems and ask another question with the updated code for more feedback. 

About the choice of your variable names, don't use and . They are too general. Actually is a function in Python so using that variable you made that function unusable. That is really bad. If you want such names use an underscore after there names. That may take out the problems of accidentally using in-built keywords. Other than that I think this is good. Calling functions by using dictionary to store their values. I learnt something. EDIT You are using in your function. This adds a whitespace at the end. The problem with that is that it adds a whitespace at the end of complete string also. I mean after the last word there is an extra whitespace. So you should use 

I guess people are not too keen on this. I will add my own two cents which came to my mind and which I have added to the code. If anyone is interested they can see the code at my github. In the code a variable has been used only for the purpose of differentiating between the different category lists. This variable makes the a little less useful. I mean why can the object not raise the proper event instead of having the to do something other than mediate between the objects? It can be solved by adding more events and raising the proper events through an auxiliary function. Encapsulate the type of the category list and based on that raise proper events. Second thing is regarding the way the events are declared and subscribers are added. It would be better if a common pattern is used when declaring and subscribing. The use of function would be better. 

Firstly I'll get rid of all the semicolons. They are not helping at all here. Then I'll add two setters for and and just use the map constructor provided by groovy? Do you really want to read 

I will give you an idea. You need to have a dummy class with the functionality that you want. As you haven't provided much details I will make the assumption that the all models are sibiling classes. Same assumption for other things. After you have the dummy class you can just sub-class them and give the infoVariable a new value and override the method. In action method just call super with the appropriate variables. 

The first term is for upper right corner of each ring. The second is for upper left then lower left and finally lower right. I laid it out barely to make it easy to understand but you can certainly make it shorter. It is actually easier to find an equation by considering the rings to go from x = 3, 5, ..., 1001 

The bottom line is manual loops give you a lot of errors. Off by one errors. Avoid them if you can. Use equals not == in Java to compare Strings. Always Didn't check but this may be a bug. Always use equals. You don't want to get surprised. 

This way the logic is clear. The reason why does not work on Windows is because different operating systems have different line separators. A quick google search can tell you what that means. The assumption that the methods should be static will cause you to have a single . You don't want that. means belonging to class but what if you wanted to have two stacks in your program? You should have instance methods. About this 

Having a enum which enumerates the sub classes of a class? Not a good idea. You can use the sub classes themselves if you want like above. BTW in your design, if your bathroom has two taps then how are you going to use the second tap? The method just returns the first instance of that type. About casting, you will have to cast it somewhere when you are storing as a superclass but using sub class specific things. 

You don't need to create a list if you are not using it elsewhere. In the function you can avoid the overhead of list creation because you are only interested in the sum of the elements. 

Why? This is something that should be present in the constructor. After you move the x and y for Paddle and Ball inside the classes then this big initialization will also move to their respective constructors. Except their names there is no actual difference between and . I went ahead and deleted one and things work perfectly fine. This is copy pasted, right? 

I think it should be possible to refactor it more so that the comes only inside the loop but I didn't take the time to do that. Hope this helps. 

I hope that the function in which you actually created the object is also static otherwise the amount of mess that you can create has no limits. Make static variables only if it means sense that every instance of class should be able to use it. Don't use it for the sake of ease of sharing data like a global variable. Also like Simon said you didn't create the at the first line. You made a reference variable that is capable of holding a reference to that kind of object. About the line - The object reference is gone from the current reference variable but whether or not the object reference is completely gone depends on whether you passed it around or not. Use instead of making a new object. But be aware that if you use then there can be side-effects if you have passed the object reference around to some other object which is storing it. If you need to pass it around and want the to be like a new one then it would be better to use . That can help you to avoid side-effects of clearing. So choice is yours. Depends on the situation. One more thing, if you are just using the list as a global variable only so that you don't have to create a lot of local variables then don't do that. Instead make a lot of local variables which fall out of scope as soon as the function ends. It may seem inefficient to create a lot of objects but if all the objects are short-lived then it will be garbage collected easily as is optimized for it. Also that can help avoid side-effects which can become a headache and break . 

You can use methods instead for the 2 ifs that have been copy pasted. If you use the previous approach of updated location instead of maintaining them separately as and then there will no problem in assigning the results also in the method itself. Look at the method and break it down into methods giving meaningful names. Wherever you have copy pasted you can use smaller methods. Every time you want size you are creating a object. Why? It is not changing so you can keep returning the same one. 

I changed some statement like to for readability. I just commented on basic things like style. I'll leave the review to someone who knows C++. 

See the part? No need for the condition. In I would take out the particular bindings out. The bindings should be passed from outside should not be in the paddle class. 

That is a general thing - use enums instead of instance variables. But in your example you don't need that. You can do something like 

I removed but you do realize that that it was actually there. No need to use Java 8 everywhere. And notice that if you don't return anything you don't need the void in case you specify the access The part about using for and using Apache commons has already been said. Just giving my upvote. Lastly you are aware of @CompileStatic. Right? Use it everywhere unless you are using dynamic things in groovy. 

Take a look at Python Performace Tips and search for list comprehension. As far as I can understand your code you can use it. An example would be this function. 

There is a very easy solution. In all cases I'll avoid x = 1 as it is a corner that doesn't fit the pattern. The pattern of each ring can be generalized easily into an equation considering the rings to be numbered as x = 2, 3, 4, ... , 500 

Running a loop over the range 2 to 1001 with step of 2 and then adding 1 gives you the answer. You want to simplify it further? You need the formula for summation of series of n^2 and summation of n. That makes this into an program instead of current . For example the first term would become with summation running from 3 to n with step of 2. Its value is 

I wanted to know whether this can be written in a better way - according to either algorithm or Python. 

If the word entered did not have any vowels then what? It is an infinite loop in that case. Now starting with your functions. You can use a triple quoted strings in the function. It can be made like this. That way if you needed to change something you can do that without adding any other function call. Also it is clearer this way. The same for function. 

I think there is a bug in your code. You are using a class but using in your code. I understand they are different but I think you have messed up C with c in your code in the function. It is confusing whether or not you have messed it up. That is all I can think of because I don't understand what the code is doing unless. Please edit your question to add sample input and output. 

Is this code ok from functional programming perspective? I am open to criticism from any perspective. EDIT 1 Code after @Pedro Rodrigues suggestions 

Update 1 As limelights has suggested, use of is better than use of in Python2. If your or are big then using would return a list which occupies memory while use of returns a generator which is much more memory efficient. Performance might suffer a bit but in most cases it is worth it. 

I am not used to classes till now either but I can offer some other optimizations for your code. Firstly you should go over PEP8. These are style conventions but they would help you write code that is considered good. Maybe PEP257 also for how to write docstrings. You can use list comprehensions - PEP202. They are more efficient and readable. So this 

Then just implement the parts which make sense for your sub-classes. You said there is a lot of same stuff and just a small bit of difference. Isn't that a sure sign that you need inheritance? The abstract super class can give you the generalization that you need while still preserving modularity.