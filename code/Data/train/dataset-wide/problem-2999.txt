All top-level definitions should have a type signature always, full stop. is always . Since you're not doing anything fancy with your , just use the functions. 

encapsulates a notion of “failure”. provides an alternative value in the case of failure. is a typeclass that exists. 

Your normalization function is more complex than it needs to be, but consider what having to normalize says about the representation you picked. Here's one version that doesn't change anything about your data types. 

Associate words with the line number they first appear on. Remove words from one group using entries from another. 

It's a small change, but users of can rely on the field names rather than a tuple ordering. And now , the piece that glues it all together. Our type is still correct, which is awesome! No changes there. The implementation though is doing a few different things we'll need to adjust. In an informational sense it's determining the genders of all of the clients, then accumulating a count of each . What it looks like though is some weird tuple math to produce a value from nowhere! We can rewrite it given our new implementations to be a little prettier, but first we're going to need a way to add two s together. 

One typeclass it would be appropriate to instance is , so that you can have a more semantic computer-player interface. I'll toss in and instances because they make the instance more future-proof. 

The code became even better readable and when the validation has to be adjusted it is obvious where to make the changes plus you can validate the Route at any line in your software with the guarantee the validation is up to date. Approach 2: Move the assignment to a respective setter and throw an . 

This is an addition to other reviews. Code Quality: include 'home.php';: In the context of your shared script it's not obvious what it does. I recommend to rename it to e.g. . Further depending on the content there are other more beautiful ways to handle "that". require_once 'class.user.php': Including classes manually shouldn't be practiced anymore. Okay, maybe in an application which has like 3 files in total. However, in larger applications you should use feature provided by PHP using . So, when you try to instantiate a class PHP automatically tries to include the class once if it does not exists in the current context. View & Business Logic are not separated: Nowadays view and business logic is separated to provide a better overview. Further it grants a better maintenance if implemented correctly. Check patterns like which stands for Model View Controller. Other header("Location: index.php"); You perform a redirect without specifying the reason like . 

You include an autoloader in the test class. From UnitTests I am aware of a bootstrap file. If such a class exists/can be registered for functional tests as well you should move it to a respective file. 

One question is what goes in for the where we used to call ? Well, ! One more complex issue of style is the usage of in . Top-level s are better represented as guards in Haskell, it's easier to extend guards and their usage is more idiomatic. 

Appendix † An inefficient but important implementation. Note that performance is O(n²) (consider e.g., ). 

This is pretty slick. You might want to add definitions and exports for and for convenience. The parentheses around in the local definition of for the instance are unnecessary. You could also implement or replace with . Why pattern match when you've got a handy higher order function? Definitely add a comment to explain , it took me a moment to realize what it's doing (it's certainly very clever!). Cleaning up is a very interesting problem. The easiest portion is realizing that the back diagonals can be found by the same exact process as the forward diagonals if you just transform your matrix with . The next key step is realizing that if we can generate the full length (as opposed to k-length) diagonals, we can use again. 

I don't think there's anything wrong per se, but it's very narrowly focused without much opportunity for reusability. You'll not often go wrong if you attempt to mirror the reality of what you're modeling in your functions and type signatures. For instance, consider that a roulette wheel is an unlimited source of randomly chosen values. One way to express this in your Haskell program would be... 

Classes are included manually Instead of including classes manually it is recommended to make usage of the autoloader function ($URL$ The advantage is that you don't have to worry about including a class. 

Script is terminated in the constructor The script should not be terminated in a random class but by an . The type of the exception decides wether the script has to be terminated. Commonly a leads to a termination. Possible Route class 

PHP-tags are closed It is not recommend to close the PHP-tag. It can happen that you have an empty space after the closed PHP-tag which leads to error. Not closing them reduces headaches :) 

In general your code is a good start. Keep going :) However the class should be refactored. Issuelist: 

Description: This section describes missing setter, multiple returns and if-conditions. In the constructor of the class Route are multiple returns. This makes the code less maintainable. Having more than one return means there are multiple scenarios when the constructor can be stopped. In case of a bug one need to debug through the whole method to figure out the return-point. So, at this point a switch to if-else-if-else should be performed. Below you see a minimalistic sample. 

As others mentioned the code is not completly OOP. A real OOP application does not contain functions but classes and methods. Well, except of the file that includes the class that initialize the application and the autoloader function - AFAIK function expects a function only. The autoloading part is missing as well which is part of dependency injection. I recommend to get into it. In the constructor of class User you do not validate the email etc. that are stored in the session. They should be a) passed as arguments to the constructor and b) validated. E.g. in the method. Another point is the php closing. To avoid errors never close php. It's hard to figure out a space or another character after php-closing. 

Now more general advice, you should include a type signature for all of your top-level definitions. This is important for a few reasons. One, it acts as a check on your understanding of what your functions are doing, the compiler will complain if your signature doesn't match what your function really does. Two, it serves as a surprisingly powerful form of documentation for readers of your code. And three, it can help the compiler infer more of the types you use within functions without needing annotations. As an example of that last point, look at how you had to annotate the line with . If you had given the compiler enough information to go on elsewhere in your program, it would have been able to deduce that on its own. Here's how. 

Next, we know that the cycles begin with a monsoon and thereafter proceed regularly indefinitely into the future. 

This works! I've imported from here to account for our function sometimes returning ( drops all the s and returns a list of the values). We use a right fold to accumulate our values, and a starting value of for our accumulator. There are a few ways to go from here to clean things up further. You could get rid of the value by using , at the cost of adding another composition with into the mix. If you have sharp eyes and a working knowledge of the Typeclassopedia you'll note a striking similarity between the way we use with a right fold, and a . If you don't have a working knowledge of the Typeclassopedia, our motivation is that s allow us to specify an identity element and an associative reduction operation, revealing some higher level abstractions (and functions) we can use to wire our code together. Let's make a . 

Recommendation Curly brackets are sometimes in same line as a method header and sometimes in the following For the sake of a good code-reading and understanding code should be structured. Write curly brackets either in the same line as the method header or in the following. 

Variable definition You sometimes define variables in camelCase and sometimes with underscores. I recommend to use one spelling type only. PHP If function is not part of a class consider developing a database class that handles it. Another option is to add a function to each of your Model classes. This makes your code easier to read. For more details check mvc pattern. In the function you establish a new database connection with each call. You can avoid it by promoting the function to a proper class and define a global attribute holding your database connection. JS In your javascript you have html code. I recommend to either load it with rest of the dom and hide it by default or load it using ajax. I personally compare it with inline css. HTML In html form you have an attribute . It should be in a javascript file. I compare it with inline css as well. "QUOTES" Also see CodeX answer. As tim mentioned and other variables not provided by yourself have to be validated and parsed by htmlspecialchars e.g. to avoid XSS. A bit about security I've added this section due to mentioned XSS. Security is a very complex topic and must not be underestimated. There are a lot of options to implement and grant security. What kind of options you choose depends on your time/budget but also kind of project and data that are going to be stored in your database. I kindly ask you to think wise about the data that will be saved in the database and make researches about proper security measures. There are a lot of PHP Frameworks. I recommend to take a look into some of them as those provide security standards. 

I think you're tripping yourself up by position-encoding the colors. Position-encoding is usually a code smell in Haskell, what you probably want is an association. Consider the difference between and , and just how much more expressive of intent the latter is. (You could be even more specific at the type level with something like but that's probably excessive for a small game.) So then how do you write a function with type ? As you noticed the may be in any order, so to compensate you can filter for each individual color, or you could leverage the instance and the original list to group identical colors together. After the colors are in order, what's left is to simply run-length encode the list. 

This isn't a code review question, but I don't think it's particularly verbose. It's certainly no worse than JUnit looks to my eyes. 

Nice question! This is a little trickier than the usual “clean up a string of s” in that you want short-circuiting on the case, and continued computation on . There is—of course—a function for that. Skip to the bottom for the answer, or read through for how you might find or derive it. Finding the Answer Hoogle. Pretty much always Hoogle. Think about what you've got and what you need, then start testing types against Hoogle. In this case you've got a sequence of values that you want to reduce to a single value. The key insight is that the sequence must all be of the same type, so it's possible (and thus probably necessary) to create a list (an actual ) of them. Thus our candidate type signature—