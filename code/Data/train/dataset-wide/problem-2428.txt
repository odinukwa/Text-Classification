This docstring is too long to be a one-liner. Preferably, it should be expanded out so it's easier to read. 

There are many other places like this in your code, so I'm going to recommend looking at PEP8, Python's official style guide, on how to correct these. Finally, in all your conditions, are just conditions. If you're not using , then all of these conditions will be evaluated if they are true. Are you sure that you want this? 

While identifying bad names is important, fixing them is even better. Here's a small list of tips to follow when naming variables. 

The way you're printing multiple pieces of text is odd, as well. For example, the below piece of code: 

To start off, I'd highly recommend that you check out Python's official style guide, PEP8. From just taking a quick glance at your code, I can see quite a few glaring issues regarding style. Here's a list of the major ones: 

Whitespace. It looks nice, and is important. Use it. There are many areas here where you could insert some whitespace, and then the code will magically become much easier to read. Here are a few areas where whitespace is needed. 

You could use a loop instead. By using a loop, you don't need to declare an iterator variable, , and it looks cleaner as well. 

First off, indent your class/namespaces. It makes things look a whole lot clearer. Even it's not necessary, you should still do it. Secondly, do you need all those s? I don't see you using , , , or . You can get rid of these. Finally, you shouldn't be trusting any user input. If you want user input to be converted to integers, I'd use , rather than just . 

Proper string formatting As of Python 2.6.x, the string formatting operator has been deprecated, and the new string method, , is now preferred instead. Here's an example of it's usage at the Python command line: 

In any version of Python 2.x, when you create classes, you need to have them explicitly inherit from , like this: 

First off, don't use over in loops. While works, using is much clearer. Secondly, you have inconsistent indentation. While in Python 2.x, this doesn't affect much, Python 3.x will throw an error. Never use without a specific error to catch. There could easily be an error that goes un-noticed. Most of your names are okay, but there are some like , or that should be clearer. Variable and function names should also be in , and classes should be in . Names like should be renamed to something else, like , for example. You need more blank lines. There should be two blank lines in between each code block/function/class on the top level. Finally, you should avoid wildcard imports like this: . You should either import the entire module, or any classes/functions/variables that you need. 

Don't import multiple modules on one line. If an error occurs with one module, it can be hard to distinguish where the error came from. Some variable names could be better. For example, the names , or provide no useful information. Try to find any other names with not so great names, and see how you can improve them. I'm not an expert on asynchronous programming, or any of the modules provided in Python made for this, but if you want to do a task like this, Python 3.5 will include the and keywords built for asynchronous programming. 

First off, variables and functions should be in , not . Only classes should be in . If you have a variable with an unchangining value, (constant), it should be in . Secondly, I'm noticing that you're putting variables in parentheses in a lot of your expressions. For example, can become , or can become . You should be using context managers to manage files. When you just use , and then close it using , certain memory issues can occur. The proper way to open a file can be seen in the below example: 

Now you should be able to generate random numbers from 1-6 in a cleaner, and more readable manner. I've also noticed that you're repeating a lot of code. @Caridorc already touched on this a little bit, but I'm going to expand on it a bit further. Rather than keeping it in the override, you can simply put it at the top of your code like this: 

Nitpicks You're also converting the result of an call using the function in many places. This is not needed. You can just call like this: 

This, is really really cool. It's good to see a somewhat proper implementation of Object-Oriented-Programming in Javascript. The only small tip I really have is to add some comments. Right now, the only comment I see is the small "about", and the usage information. Preferably you should add some comments over your methods/functions, and any code blocks that may be harder to understand. 

There is no need for the inline comment, , it should be removed. On the note of comments as well, docstrings are generally written like this, with newlines: 

If your program unexpectedly exits, or crashes, resources that are taken up by the opened file aren't freed. This can be bad in some situations. The proper way to open a file would to be using a context manager, or , like this: 

Default class access modifier Unless otherwise specified, classes in C# are internal by default. This means that you can remove the access modifier in places like these: 

Essentially what this does is "catch"/"ignore" the when the user enters invalid input, and jumps to the block. 

Firstly, the field that the property s and s should be , if you choose to not use auto-properties, like this: 

Other than that, there's not really much else I can find that's wrong with this. If there's anything else that you want me to review, just mention it. 

This is really cool! I do have a few small tips though. First off, rather than creating an entire function, in this case, , that returns configuration data, I'd store it as a public getter, like this: 

If you need to support pre-Python 2.5 for some reason, then you'd have to write some hacky code using and . You'd end up with something looking like this: 

There's no need to worry about the arguments of the constructor having the same names as the fields, the in and the in will evaluate as the constructor arguments, rather than the fields. In short, the class, after a few other minor changes, the class will become this: 

As the classic Stop Writing Classes puts it, one characteristic of a class that should be a function is if the class has only two methods, , and another. This means that your class would become one method, like this: 

Use a global state. I wouldn't highly recommend this, but if the program is small and trivial enough, then it's probably okay. Represent items like a , or a with objects. 

Secondly, the two variables near the top of the file, , and , should be in one docstring, at the very top of the file, above the import statements. Using , or is not very portable, or cross-platform. At the moment, the most portable/cross-platform way to clear the screen would be this: . Add some docstrings to these functions. Preferably, these docstrings should also be fleshed out with useful information on what these functions do, and how they do it. Most of your naming is okay. You do have some odd names like , or . Preferably, variables with multiple words in their names, like these, should be named like this: , . In terms of how names are styled, functions and variables should be , and classes should be . If the variable is constant it should be . You don't need to include two parentheses after . By default, you can write a class declaration like this, , and by default, it will inherit from . Only use the parentheses if the class is inherited from another class, like this. . You mention in the variable, that the user shouldn't enter punctuation of any kind. This is sort of a hacky way to get user input, so I'd recommend using to remove punctuation. Here's an example that removes periods, commas, and apostrophes. 

While doing something like this in a minuscule codebase probably won't affect much, doing this in general can result in some bad issues: 

You're doing something wrong. Just calling with no additional useful info is not helpful. Preferably, you should do one of the following: 

Don't put a comment before each variable at the top. I'd recommend separating them into related groups, and describing each of the variables in those groups in a comment at the top of each group. Why are you not using spaces in between operators in your loops? For example, would become the following: . Why are you using at the top for function declarations, and for other declarations? I'd recommend choosing one style or the other, and sticking with that. Finally, your variable names could be more descriptive. For example, I know that the variable describes the length of a variable of some type, but what is it the length of? I'd recommend something like the following: . 

Finally, when getting user input, you don't need to convert it to a string using the function. You can just get it like this: . 

Disclaimer: I'm not experienced with this field, but this question definitely needs some activity, so this is my attempt at an answer. If there's anything that you want me to cover that I don't mention here, just tell me about it and I'll try my best to see what I can do. 

Finally if you ever implement a more advanced command system than just or , I'd recommend using a dictionary, rather than chaining // statements. 

I think the interface is pretty clear, but if you have any suggestions, they would be greatly appreciated. 

It should be relatively self-explanatory what this chunk of code is doing. It's called when an instance of is created and sets the value of each property to the corresponding argument passed. An example of creating a new instance of this class might look like this: