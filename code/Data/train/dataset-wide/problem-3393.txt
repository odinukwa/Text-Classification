I look after an old Debian linux box (running etch) with only 512 MB of RAM, but a lot of external storage attached. One ext3 filesystem is 2.7 TB in size, and fsck can't check it, because it runs out of memory, with an error such as this one: 

Am I correct in my understanding that these addresses are invalid? Which system has responsibility to prevent a message with invalid addresses in the header being sent? The sender's user agent (Outlook, whatever)? The mailserver the user agent submits the message to? Our mailserver? I suspect that the sending SMTP server was MS Exchange; is there a known issue that allows addresses like these? 

No, you're not safe. The idea with RAID 5 is to have N+1 disks (providing total storage equivalent to N disks), with enough redundancy to recover if one disk fails. (The parity is actually distributed over all the disks with RAID 5.) However, by partitioning each of your 3 physical disks into 2 partitions, you've set up 5+1 500 GB partitions (providing 5*500 GB space), with protection if one partition fails. However if one drive fails completely, you will lose the two partitions that are on it, and you don't have enough redundancy to recover from that. The usual trick with RAID 5 is to leave your physical devices unpartitioned (or with only one partition each), create the RAID array, and then partition the resulting device if necessary. Even if you add another 500 GB partition, you still won't be safe if you still use RAID 5, because the extra partition won't add more redundancy, only more capacity. You would have to switch to something like RAID 6, which provides protection against losing two drives. 

Zen and the Art of Motorcycle Maintenance: An Inquiry into Values (Often regarded as one of the best books on any topic.) This quote (found here) is relevant: 

Depending on the application and level of security required, biometrics can have a literally fatal flaw. Let's pretend that the bad guys really want whatever's protected by the security system, and are willing to kidnap and/or kill someone to get it. 

I ended up trying what womble suggested; here are some more details that may be useful if, like me, you haven't seen this new functionality in e2fsck before. The "scratch_files" configuration option for e2fsck became available sometime in the version 1.40.x period. (In our case, we had to upgrade to the latest Debian distribution to get this functionality.) As well as the "directory = /var/cache/e2fsk" option that was suggested, there are some further configuration options to fine tune how the scratch files storage is used. I used "dirinfo = false", since the filesystem had a large number of files, but not such a large number of directories. If the situation was reversed, the "icount" option would be appropriate. These options were all documented in the man page for e2fsck.conf. BTW, Ted T'so wrote about these options in this thread. I found that e2fsck was running extremely slowly, much more than predicted by Ted. It was running at 99.9% CPU utilization most of the time (on an extremely slow old processor), which suggests that storing these data structures on disk instead of memory was not the main cause of the slowdown. It might be that something else about what was stored in the filesystem made e2fsck particularly slow. In the end, I have abandoned the filesystem check for now; the filesystem was due for a check, but didn't have errors (as far as I know), so I'm going to arrange to check it at a more convenient time when we can afford to have a week-long outage. 

The timestamps show that the open() call took 20 seconds. (It was actually much longer, as the strace was started some time after the command was run.) But immediately subsequent runs of the same command don't have the slow open() call. But some time later, it's slow again. The server has been restarted, and the problem continues. There's nothing being reported in kern.log, and the hardware isn't reporting any faults. The server is still partially functioning, so we're not taking it down immediately. Outside of work hours, we'll be able to run more tests, including a forced fsck on the filesystem in question. But we don't really have a good idea of what the problem might be, so we're looking for any theories of what might be wrong, as well as ideas of what tests to run to further diagnose the problem. Any suggestions? Update I should have pointed out that this particular filesystem is on an Apple Xserve RAID device (connected via FiberChannel). The RAID Admin tool is giving a green status light for all the drives, as well as for the array as a whole, and there aren't any events in the log that indicate any kind of problems. 

Note the "open failed (error 117440512)" line; we also got "open failed (error 16777216)" It seems that the triggering of this failure may be load-related. After restarting NFS services, NFS continued to work for quite a while (but with few clients connecting as far as we could tell) before it failed again. There's no firewall running on this server; /etc/hosts.allow and /etc/hosts.deny are both empty (except for comments). We're currently at a dead end with this problem. We don't have an easy way to go back to the pre-upgrade state. However, we're accelerating our plans to migrate this service to a new server, but as that will be running more or less the same OS and kernel as the server that's currently having problems, it would be good to get a better idea of just what's causing the problem so we can have some confidence that we won't encounter them on the new server as well. Any ideas, or tips for other things to investigate or try? Thanks, Tim. 

When our user tried to reply-all, the email was rejected by our mailserver with a response of "501 5.1.3 Bad recipient address syntax". My understanding of RFC 5322 (which obsoletes RFCs 2822 and 822) is that a single quote (') is valid in the local part of an email address (before the "@"); e.g. as an apostrophe in an address like "o'brien@example.com". However it is not a valid character to use to quote the whole address, and therefore the addresses above are not syntactically correct, and our mailserver was right to reject the reply. I have a number of questions: 

We've recently upgraded an NFS server (called "ian"), and after the upgrade, NFS is broken, whereas it wasn't before. The server is now running Debian "lenny", with kernel version 2.6.26-2; it's a truly ancient Dell PowerEdge 2650. Here are the details of the problem as we've recorded them in our ticket system: Here are some of the log messages on ian related to this: kern.log: 

We found that after rebooting ian (which we did a few times) that NFS did actually work for a while. While it was working, the above command gave this output instead: 

We've been having problems with our Samba fileserver running on Debian Etch with Linux kernel 2.6.16. It's an old Dell PowerEdge 2650 server, but it's never had a problem like this before, and the problem started this morning, without any configuration or other changes being made. While the problem manifests in many ways, they could all possibly be explained by the open() system call being very slow to complete. Here is an strace of "cat logon.bat", where the file is on a local ext3 filesystem: 

It's hard for programmers to recognize good programmers; e.g. it takes companies like Microsoft and Google a day's worth of interviews to satisfy themselves, even after initial screening. Similarly, it's hard for system administrators to recognize good system administrators. On that basis, I claim that it's extremely hard for programmers to recognize good system administrators. That doesn't mean you should give up, however. But why not enlist the help of a system administrator to help you in the interviews? It may sound like this creates a circular dependency (because how do you know who to ask to help you?), but I think it should be relatively easy to find a friendly sysadmin from among your professional contacts who might be willing to help out with something like this. You probably wouldn't want them to make the choice for you, but they should be able to give an informed assessment of their technical and other relevant abilities. 

We rebooted into the previous kernel (vmlinuz-2.6.20.6 from 2007-04-07), and we still had the problem. We enabled debugging messages for the lockd/nlockmgr/nlm like this: # echo 2047 > /proc/sys/sunrpc/nlm_debug The messages weren't obviously helpful. Here's from when NFS is working okay: 

Depending on the answers to those questions, I expect I'll submit one or more bug reports (to vendors and/or administrators of the sending mailserver), as well as advising our user to remove the single quotes before replying. Any other suggestions for this situation? 

Logcheck is a good way of monitoring production systems. You configure it to ignore the "normal" log messages, and it emails you everything else every hour. However, because it doesn't alert you to messages as they appear, it may not be so useful in a development situation where you are in a code-run-debug loop. 

In the second case, renaming a directory doesn't create a new directory, it just changes the name of the already-existing directory. In fact, your example does two different things, depending on whether "folder" exists as a directory already. If it does, mv works as in the first case above, i.e. moves "FOLDER" into the "folder" directory, so it's now "folder/FOLDER". On the other hand, if "folder" doesn't already exist, it just renames FOLDER. Yes, it can be quite confusing! 

Given that the problem appears to have begun before this kernel bug was logged, it may not be the cause of the problem, or in fact related at all. This kernel bug has only appeared this one time, even though the problem has reappeared after multiple reboots. Although the problem began yesterday (and was presumably caused by the OS upgrade of ian the night before), it wasn't brought to our attention until today. Some other debugging tests: