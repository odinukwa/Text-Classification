You would ideally title yourself as a software developer or software engineer. In your case, you have experience with back-end languages and frameworks which, in some companies put you squarely in programming the back-end of websites, far removed from the design. Other places would have you using a lot of HTML, CSS, PHP and some frameworks, bridging the contexts of design and function. The degree of specialization often depends on the company size. Website/graphic design is concerned with the presentation and organization of information in the medium. In a perfect world, having an expertise in graphic design would carry over well into website design, but website design comes with its own idiosyncrasies and rules for good practices. So those designers have to understand the technical requirements and limitations for design for an online medium. 

If you can sleuth your way to the original job listing, skip the middleman and contact the company directly! Now, not all technical recruiters are terrible- from my experience the bad ones tend to be the ones that scour through so many resumes and jobs. I applied to a newsletter for one that gave weekly job listings, but getting a response from any I was interested in was futile. I had a better, more personal experience with smaller agencies. They tend to have less candidates coming their way and you won't get so lost in the shuffle. 

Try packaging your work and making it easier to review. Estimate the time it will take to review the items. If you have a lot of small independent items, package them into sets of code into logical chunks that can be reviewed within a specific period - like one hour. Schedule a meeting and send links to the repo items. Talk to the team and explain you are trying to clear the backlog through a series of short and targeted meetings. From the other side, you can put everything together into a growing, single review request. But this is sort of pushing in the direction you don't seem to want to go. Every time you complete a new unit of code, add it to this single request, and update the total time. It may be that people just aren't thinking about the backlog growth. If you manager sees a code review request and it says, "This is a code review request for item X committed on {x/x/x} | {21 days ago}, item y committed on {x/x/x} | {20 days ago}, item... It will take approximately 40 hours to review these 200 items", it will drive home the point. 

It sounds to me like you've got quite the predicament, and you are trying to hold to some unreasonable ideals. 

Well that's just too bad for them. Talk to them anyway. Self empowerment may give you the ability to make your own decisions, but it doesn't free you from the responsibility to live up to those decisions. If I had a team like that, talking to them would be the kindest level of response I'd consider. One might say "Oh, but the SCRUM master is supposed to resolve impediments like this. Everything should go through him." Well tough. He screwed that up when he went to you to tell you you were fired and failed to do so in a sufficiently courteous way that you accepted it. A SCRUM master is expected to have better people skills than that. So what do you say? First, you want to find out if they actually decided to "fire" you. You have one person's word on that, and I do believe this is the kind of situation where the team should be able to directly say their piece. Second, consider what "firing" means. You claim to be a hands off manager, but they want you gone. Understand why. They aren't writing the paychecks, so the decision to fire you isn't a "oh they're not pulling their weight" kind of decision. That's a "this person is actively getting in the way" kind of decision. Something really isn't adding up here. You need it to add up for you before you make any meaningful decisions. Being an anonymous person on the internet, I can't say if its you or them or the SCRUM master, but something is really really really wrong in this scenario, and you better know what it is by the time you're done talking with them. Work with them. Be a manager. Find a way to solve the problem. Find a way for you to be able to do your job, while they do theirs. Make it happen. Now, if their answers provide you with sufficient closure to honor their self empowerment, now you have to show the team what happens when you "fire" leadership like that. Say "Fine. I'll stop acting as your manager. You can't actually fire me, because that's not your position, but if you want to play this game, we can play. I was your manager, helping insulate you from corporate politics and the stress of reporting to upper management. Now, I am your upper management, and you no longer have that insulation. Now since I can't actually remove myself from this position, I will instead simply begin relaying tasking from on high." Explain that just because the team voted, that doesn't mean you don't have obligations to upper management that you have to fulfill, and will continue to do so. Then, get help. A mutiny is not a small thing. Your entire team just voted you off the island. Don't underestimate it. Get ahold of someone above you to help. Maybe you call your boss on leave. Maybe you talk to your CIO. Someone needs to know that there is a major people problem in your company, and that you are solving it. The second half is clearly important. Never go to leadership with problems, go to them with solutions. The solution I would recommend is to craft your image as the "manager bearing requirements" by choosing things to require which leadership (i.e. CIO) would want, which is crafted to build some self-realization to go with this self-empowerment. They may think they're free to do what they want, but you are still obliged to make them a successful team. If you have to do it from afar, do it from afar. Find out what about your hands-off approach was so intimidating, and make sure you don't ever do that. The end goal is to get them to realize you are on their side. If they are truly self empowered, then they need to come to the realization that you are a beneficial part of the team. They will only come to that realization if they are successful. If they get deluged with impossible deadlines and hopeless red tape, they'll never see it. Just make sure that it all adds up. 2+2=4. A "hands off" manager is "fired" by the new SCRUM master for being too intimidating while two layers of management are on leave? Something doesn't add up from here. You're closer to the situation. Figure out what doesn't add up, and fix it. 

Your role in the project is important. If you are a technical resource, it is not your job to "rescue the project". If you are the project manager, it is different. If they want you to do both...run? It sounds like you are on the technical side, since you talk about the technology stack. If so, I would look at this as almost a win-only case. If your skills are sound, and you are motivated, you should be able to do something with the technologies. To your advantage, the bar seems pretty low - failing slower is an improvement! As long as you have been clear about you strengths with the technology, you have set the expectation that there is some learning involved. At a minimum you should expect some time to improve your skills on your own, but you could also negotiate some training. Tell them you would like them to bring in an expert for one day to give you some 1-on-1. Accepting the position shows you are a team player. Discussing your concerns in the process and proposing risk mitigation shows you are a smart team player. If the project succeeds, you are part of a turn-around team and people will remember. If you are successful and "save" the project, the rewards are even greater. If the project continues to fail, and you are not adding to the problems, it will have a minimal negative effect on you. 

I've recently started to look for a new job in my web development career, applying to several places. Not wanting to be very picky, I applied to a lot of jobs where the required set of responsibilities fits my experience, without putting much consideration as to what their primary product or service is. I only took some consideration the age of the company and how reputable they are in their industry. IT jobs are common in almost every organization. Some do business making X and others are non-profits contributing Y and Z. Naturally some industries interest me more than others, and others not so much. As an example there is a web developer job available for a fashion magazine publisher. The job fits the description of what I am looking for, which is web software development with a possible opportunity to learn new languages. The industry that the company participates in, however is not really a great fit with my interests. So I may show passion in the work that I do, but not so much the end product (if they offer me a complimentary magazine I take it simply as a good gesture). Is it fair to the employer to apply for work if you cannot see yourself fitting in with what they are producing, or would it be a waste of my time and theirs? To me, it seems like a more intimate relationship with corporate interests is needed, since it's not like taking a fast food cook job. Because of that I feel like the passion and interest in the end product could mean the difference between being able to move up to a significant role in the company and just going through the motions. 

Look up, not down So Mister Positive has a very good answer of "go get a new job." Its positivity may be dubious, but never forget that that is the one power an employee always has over their employer. Now if that isn't the answer you are looking for, look up. Look at what other people are trying to do, and how you might be able to help them do it. Have you looked at why you get handed 60 parcels, while the others are handed 30? Your boss was right when he said it's not about fairness. Your boss has a job to do, and employees to do it with, and they are allocating resources as best as they can. You have demonstrated the competency it takes to handle 60 parcels. Your coworkers have demonstrated the competency to handle 30. If I was the boss, and I had to divvy up 120 parcels, I wouldn't divvy it up 40, 40, 40. Why? Because I know two employees won't perform to that level. I'll have jobs that didn't get done, and I'll have to be reporting up the chain why my team is behind schedule. So, assuming you keep the job, you should expect to be shouldering 50% of the work when you represent 50% of the useful capability. Simple as that. Now I can see why you don't like this, and why you want it to change. The trick is that you have to do it the right way. You can't just ask your boss to do less work, because the work needs to get done, and his team can't pick up the slack. He simply won't go for it. The trick is to be interested in your boss' job. Start developing an interest in how these parcels come down the chain. How the deadlines are set. How the funding is managed. Look for ways to make your boss' job easier... that just happen to also involve you doing a smaller number of parcels. You can always just leave, but if you want to fix the situation within your current employer's environment, that's how you do it. You give your boss the opportunity to make their life easier, in a way which conveniently makes your life better as well, and then you let your boss take it and run with it. You also should be able to figure out rather quickly whether they are grooming you to take over that management position or not. If they're open with the details, they probably want to promote you, and you just have to show that you're ready for it. If they're very closed and refuse to let you in on anything that matters, then they may just be taking advantage of you. Remember, salary isn't everything. It's important, don't get me wrong. You can't ignore salary. But there's a lot more to a job that you want to wake up in the morning for. Most of those things are not measured in dollars. 

I'll give you the Shark Tank answer. If you believe in the startup and you are a founder/owner, commit. Most startups do fail, but one of the reasons is lack of commitment. What happens if you go from one day a week at the startup to seven? Can you get the product/service to market or to an investable stage quickly? What is the reward? Will the startup bring you millions or wages? If you can bring a $million product to market in three-six months of 7-day weeks, you should quit and crash on friends couches (or call mom & dad about your old room). If you still think part-time is better, it's hard to say. You said there is no legal conflict, so you need to think about perceptions. If you say it's personal and they find out it's business, that could be a problem of perception - they could feel lied to. If you are just "average" as you say, they should be fairly neutral towards you - less likely to feel "hurt" than if their best employee wanted to leave. If they like you personally, they may be more willing to help you start your own business. In that case being direct is best, even better if the company is small and young - they may admire the entrepreneur in you. 

The last two weeks have fallen really short of these expectations. If I don't have work, I don't have hours to report, so I do not get paid. This makes me feel like I've been put on furlough, but doesn't that usually apply to paid employees and not contractors? 

Sounds a lot like my previous job... I was contracted to get a start on .NET and Flex projects and in the they put me working on LAMP/WAMP stacks (which is what the company eventually got into and dropped everything else). But in my case I was already familiar with those stacks whereas you will have to take on something new as a challenge. I would say just go with what you've learned already because in the end, these languages/systems are just a tool to meet the end of a goal. As someone just coming out of a training program, you won't have much say in the company until you can produce some results. Leverage your back-end experience to work for Javascript, and learn a framework or two. You'd be surprised how complex the language can be. Also, you'd get a better understanding of how server-client interactions work. Also, understand that the demands of a company may constantly change, as it was in my case. However, we cannot tell exactly from your question if this will be for one project only, or if the company wants to keep you in front-end for the long haul. If you are being compensated fairly, I wouldn't complain about it for now. Part of being a competent and reliable worker is to adapt to the dynamics of the company. 

You may need to find out what he considers important. "Good style" is just that, style. It needs to bend to meet business needs and he needs to know that. However, there may be an underlying fear that he is dealing with which needs to be addressed. As a case study, I worked on a team which consistently produced software at a slower pace than the customers needed. Management was continuously angry with us. We had a good reason for the slowness. Management had set up a hostile development environment where no piece of code could be changed without an explicit command to do so from our customer. Unfortunately, we had the explicit requirement to maintain this software for decades, while few if any of our customers ever thought more than a month ahead, making it impossible to do convince them of any long term ROIs. We were given great responsibility for the software, but little to no authority to do anything about it. Our mantra was "The first working prototype shown to the customer will be your final implementation." We never did resolve this roadblock. Management never did work with us to support the program in a way commensurate with our responsibilities (we were actually ordered not to try to resolve it, because merely bringing the issue up would risk continued funding). The program ended up dying instead because nobody would address the underlying business failure. We spent a lot of time after this, as developers, trying to figure out what exactly went wrong, and what we could possibly do next time to avoid it. One of our takeaways from this exercise was the value of having multiple ways to approach a problem. He likes a ORM style, while you save eons of computing with an SQL command or two? Make it so that both can exist side by side. Quite often the value of an approach is not obvious to the other side until long after it has been finished. Allow both styles to coexist in the wild, and find out which one survives the rigors of business. Develop a sense of harmony between approaches rather than trying to dictate the one approach to rule them all. Perhaps he does all of his primary development using his extreme style, but the final product requires the addition of hacks. He may be in a position to isolate those hacks enough so that they cannot endanger the rest of the software. If he doesn't accept this, then he is actually in the wrong. He is not the voice of the company, he is merely an employee. His voice is part of the whole and not the center of the whole (unless you hired him to be the center). An employee who cannot flex because they hold to principles in violation of the company's needs does need to be let go. But contrariwise, developers have a viewpoint of the software which cannot be found anywhere else. The business does need to flex when the developer points to a problem that is hard for anyone else to see. The goal is to figure out how to have the two points of view coexist long enough to explore them properly. However, that can eventually fail if one side is particularly stuck in the mud. At that point, you will need to hold a polite discussion explaining that his coding style is not the center of the world, and if it gets in the way of business, he will be given tasking which provides him less and less freedom in the approaches he is allowed to take. Alternatively, he is free to agree to give ground on things like "size of paycheck" in exchange for freedom to do his job. I didn't want to create yet another answer suggesting iterative development, but I did want to tack it onto the end of my answer. Iterative development gives him the opportunity to explore "good style" in one iteration, and then have you apply the business thumbscrews to turn it into a useful product. You may not know a priori that a task can be done in 30 seconds. However, after the first iteration, you should have a sense of time. This sense of time should allow you to provide timing requirements in the second iteration. If you give a business requirement for a query to take under 5 minutes, and he says it can't be done, then politely take the task away from him and do it yourself. Let him twiddle his thumbs until he starts realizing his paycheck is in jeprody. 

With my experience, I am terrible at reading people, to see if they are open to casual talk for a while, or if they don't want their work to be interrupted, so I don't know when to start chatting with them. Also, my own life isn't very interesting to talk about, as I don't go out on a typical weekend. I don't want to start talking "just because". I am good at staying focused on my own work all time, but usually when I talk I tend to catch people at a bad time (they are quickly interrupted by some work-related order). And at work there are conversations that can be over 15 minutes long. This is not a problem for me in non-work related situations, such as a friendly outing or a party, because I know people want to talk. But at work I either risk being labeled a shut-in or a guy who slacks off too much. How do I balance it? How do I know when to start/finish a chat, and make it sound natural without being forced or contrived?