I think you need to take a step back and evaluate your station at this company, or rather, where you want to end up or if you can even play both sides. From your post I see two groups of people. The first 

I would ask for specifics personally. Being charged with doing low quality work would be awful for me and I would want to know as soon as humanly possible what the issue(s) is/are so that 1. I can work to correct them. 2. Not take them to the next job. It could be the scapegoat that the company is looking to reduce a headcount because the next contract is smaller or too far away. There is the possibility that you are in some sort of rut and you just don't know it. You may think you're doing just fine, but to the outside observer your work quality is bad. You may not be able to just get another job and be fine. Could be stress, passion for the field diminished, being repetitive or anything. I think the best thing is to get your head around what exactly do they mean by low quality work. Ask for specifics or a formal review. The company has invested in you, training benefits etc. Additionally you were able to negotiate into something you wanted so they had to have liked your credentials and experience at some point. 

If you have any other connections to the business, I would bring this up with them immediately. You should be able to get into contact with her boss and discuss your concerns. Being bullied in the workplace is no way to go. It would also behoove you to start making a point to communicate by email whenever possible and archiving 'over the line' conversations to a flash drive because these things often boil down to your word against hers. Getting your workmates together to corroborate on these issues would also help. Depending on the laws in London and workplace rules you also may want to try and record your interactions. There are some places where recording is illegal without consent of all parties. There's a chance she was moved because she acted this way with another team and instead of firing her they gave her new people. 

So, assuming it's (perhaps!) not just that junior who has this misconception; assuming your fears are about your promotion (will my boss think like this junior? will my other colleague fighting with me over promotion will tell the boss that I keep needing help in my tasks?); assuming you still want to ask for help (for reasons you do it now)... 

Steps to help him stay From all my experiences, as an employee and as an employer, a decision for firing is made well before the "termination warning is given". However since other answers focus on "can't help him", let me offer you precisely the steps to help him. Let me say also this: I tried them, and they didn't succeed, my colleague was still fired. He was given an extension though and his firing proceeded in a way that made the team know more about it. Some of us chose to look for other jobs. Good luck to you. 

Talk to manager about your doubts - ask why is he fired, honestly tell you don't see the reason. Protest his firing, if you strongly feel it's unjust. Ask for better conditions for him. Him having someone having his back speaks well of him, even if he is incompetent. You may give the manager a pause, a cause to rethink. If he pauses and then still goes with "fire him", then you know decision has serious reason and was made already. If the amount of work he was given seems unreasonable, verify that with other people. Ask them if they also think that. Tell to your / his boss that that's a bad move and it makes other people afraid that same will happen to them. Perhaps add "in light of talk about company going for sale people wonder how many staff we are to lose prior to acquisition". This is something that I honestly am hesitant to add, may hurt you and others if played wrong. Get your colleague to profess what he wants. You should know if he wants to stay or not. BEWARE! People almost always say they want to stay, while few months later, in new job, they almost always say they are better where they are now and staying would have been a bad move. How much of it is rationalizing and how much is truth, you may never know. In my cases they really seemed happier. Carefully weigh in that if you succeed and he stays, this will cause stress. He went through "termination warning" and had Damocles' sword above his neck. It's not gonna go away like that. So, your help doesn't stop on "him NOT getting fired". Consider it likely you'll end up diffusing several situations later on, where he (or management) over-interprets some words, actions. It's a large responsibility. 

Then you can go on LinkedIn and look up their profile and get a feel for their past career - don't send them an invite before the interview). You should ALWAYS know who you're meeting with in advance. SALARY Don't afraid to ask this question to the recruiter or person who set up the interview: 

Did you ask them on the phone what position you're being interviewed? If no, call them back and ask as well as for an agenda of the interview (how many people, their names and titles, what role they play with respect to the position you're interviewing for, what would they like you to come prepared to talk about). Normally a recruiter is prepping you and giving you all of this information, but if it's a small company and an untrained recruiter, that would explain why you didn't get this information. Adding to the above, if you speak with them before the interview (you should), ask them (them meaning whoever set the interview up), what in particular impressed them enough to want to bring you in? If you went through an external recruiter (one that does not work at the company, but is hired outside of the company to find candidates), make sure he/she can assure you that they understood the requirements of the position. I have seen time and time again rookie recruiters send candidates on interviews for positions that were a complete mismatch. Not fun. If it's the in house recruiter at the company, go ahead and ask them the same question. 

Is another popular one. Personally, I was appointed the role of communicating technical bulletins that affected the business because I translate business to IS very well. Maybe you have something like that you can put on there. I think you always have to be thinking about 'What is going to make them believe I have these attributes?' because as you stated, everyone puts those on a resume. 

The company I work for has a basic competency test for Office applications. It does not disqualify anyone but it rolls up into the final consideration. I hope it would be similar to that. A year ago when you were asked to take it how did you do? If you did poorly I would assume there would be a section that gave you areas to improve. Do that, quickly. If you didn't take it, I would try to take it in advance to get that feedback. Odds are you're going to be fine, if you're a respected developer right now you've got the fundamentals. You just need to relax and do what you know how to do. Maybe it wouldn't hurt to spend some time on CodeChef, ProjectEuler, SPOJ or any programming practice site to make sure you're ok or at least familiarize yourself with that style of problem. Check out FizzBuzz There is a whole other discussion to be had on the effectiveness of such a thing. I see the point, but it's a bit heavy handed. Especially if you've got competent developers already working on staff. 

If my friend is doing demanding work, I may not ask, despite him most likely having the answer, unless circumstances are really favourable. Bosses look for people who get the job done. If they get others help it's OK, as long as lower priority task doesn't pull folks who work on higher priorities. So... don't pull others to help if they do work more crucial and don't BE pulled to help while your task has priority... unless circumstances really show this is how it should be. Competition in IT EDITed after @Cantalope's comment: 

Verification on the surface may actually suffice - that is, you may have your answer after round of brief conversations in the kitchen or during company after-party. Informal setting, simple question, done. "do you think folks like X or Y would admit they have a problem or they don't know the answer? I was wondering lately how we as a team stand on ." "I think X dislikes admitting to not knowing for he believes that makes him look weak. Would you agree?" Later just distinguish if he agreed with "he has this problem" or "it makes one look weak". Changing their perception needs to start from putting "asking for help" and "getting their input" on same level. First has ramification of you being weaker (to some!), second (usually!) implies THEM BEING GOOD ENOUGH to be asked. I usually use both, so the message is clear for everybody around me, that I consider them same. After a while, if I ask somebody for help in X, everybody knows the guy is good with X. Feel free to also employ pre-reviews, especially if you guys do code reviews. Get one technically sound person to pre-review your code and ask what can be done better. Follow on his advice. Then get him to review that code. Guaranteed approve, most of the time. Changing their perception is about showing them the power coming from being liberated and not having to pretend to know it all. Focusing on real job, getting shit done, using THEIR knowledge for it without care if this makes you look weak. Freely admit that team makes you stronger. Thank for good idea here or (jokingly) for "being of use there with this nifty test trick". Is this about reputation? How often you ask? How often you are asked? How much time you spent on "your due" before asking? How much they do? If you ask series of questions without doing basic research, your reputation may take a hit among your peers (not to mention folks lower in hierarchy). If I'm unsure how difficult problem I'm facing, I sometimes do a round and ask (in passing, marking I'm after quick-and-incomplete-on-the-fly-answers). If most of my peers seem to have no inkling about the issue or all are pointing to local expert, I know it's not just me. If some had, I can see if I need to improve here. Which leads to... Have you ruled out rusted (while basic) skills? Perhaps it was an easy question? Recently a very mature junior (older guy, changed careers, very deep learner) told me about seniors in his new workplace. Despite Java 9 coming out and Java 8 being out there for years, they never bothered looking at it and they keep saying how difficult it is. When he coded few things with Java 8, three of them rushed to his screen to look. He slowed down, coded this again so they would see how he did this, proposed he could show something about it if they wanted and generally never made a fuss, but he told me that it was a somewhat bitter-sweet feeling. So, while from your story it doesn't seem to be the case... double-check it. Perhaps your question is generally perceived as easy material? I had a few times asked for things that were easy to find and few moments with Google would've answered me equally well as my unfortunate co-worker who had to spent several minutes with me. I was quite embarrassed later when I found how easy was to find this in Google. Happens to the best among us, I think. Don't get me wrong here. Nobody knows everything. Having rusted skills is a natural thing. But so is being perceived weak - especially by those, who see those skills as a must-have. If in your job, coding is perceived as primary skill, and your coding has rusted (cause you are an architect for instance and are rushed from meeting to meeting), this will change how you are perceived. Deservedly so - strictly on coding-meter you are weaker than you were. Now couple this with bussiness-as-usual and you're too busy to spot this and too busy to fix this. So you ask for help more, because you know others may help much faster than it will take you to re-discover how this or that worked... Similar loss of credibility follows if you deemed an out-of-comfort-zone question too time-consuming while it wasn't (not doing your due before asking). Summary 

For me, I had to own the space. I got sick of having to react and fix everyone's terrible spreadsheets. I had to have a heart to heart with my manager and explain that there are better ways to do this. You have to come in with facts and numbers. For me it was explaining how much time we waste trying to translate and copy between all the other half baked 'solutions' from non developers. Here's how I wanted to do it differently and what the end benefit was. I often phrase these things with the 'let the brain surgeons do the surgery'. If your boss is paying a chemist to do chemist-y things, every hour he or she spends trying to write code is a loss of productivity. Can that person smash the code in, probably. Can they do it effectively, probably not. Will that solution handle change or will the chemist have to spend more time in the future figuring it out? Yes, every frustrating day yes they will. To me, that's where you need to start your conversation. Chemists programming is time wasted. When you program a solution, there's a good chance that it's going to be easy for you to update and handle changes because you've got the experience to know that you're going to have to make them. Many people without that experience tend to program 'heads-down' and very specifically to the task. As soon as the input changes, it's game over. Additionally when you're working on something you're going to have a better chance at realizing if another group can use something and adapt the solution for it. Also, I've got a lot of mileage out of speaking with conviction and passion for the craft. The Chemist, does chemistry. They're going to go the extra mile for a test or formulation, but not for some crap software they have to waste time building to get them there. That's where you can supercharge results because you have two people working on things they enjoy to get to a solution.