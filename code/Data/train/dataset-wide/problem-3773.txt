It seems like the most reasonable way to handle the situation when the conversation stops, is to simply say something like "I'll give you some time to think about [repeat exactly what you want him to think about]. I will follow up with you tomorrow morning. In the meantime I am going to assume [xyz] is the direction we are going to take and proceed from there." Also, since verbal communications between the two of you doesn't seem to be very strong, you should probably do your follow up via email early in the morning and only go talk if he doesn't respond to the email. Speaking of which, maybe email should be your number one choice of communication with this person, if that is more effective than face to face. Nothing you do will improve the other person's communication short-comings. Only their desire and willingness to work at improving that skill will do that. So the best you can do is figure out how to make it work within the limitations you are presented with. 

You haven't even started or defined the project. Thus, it sounds like you are in the internal research and development phase. That is awesome. Those are the funnest projects to work. You could do what others have suggested and tell them it is not possible to give an estimate but then you'll likely end up never getting the opportunity to help define new products in the future. Your lead will just assign those tasks to someone else. Your lead is fully aware that the project isn't defined yet. I'm sure what the lead is expecting is for you to start working out the scope and activities needed to build the product down to a level that you can give some estimates. Obviously you won't get all the scope correct and you will certainly miss a lot of features. But what you've done will at least be the starting point for discussions. Most likely, your lead needs to just present a ballpark estimate to management so they can decide if they want to even pursue funding or not. If your estimate says 3 years but they have only 6 months of budget then that's what they want to know. If your estimate says 1 year, then they'll probably assume 1 1/2 to 2 years is what will really be required. The way you cover yourself is to be very specific as to the scope of work you are quoting. 

Tom obviously has the "big-picture" architecture in his mind. This makes designing the smaller pieces and seeing how everything fits together far easier. Rather than focusing on the minutiae, you should focus on understanding the architecture that Tom has in mind. If you have a decent understanding of good design techniques then that should help you immensely. If Tom doesn't already have something describing the architecture written down then it would probably be very worthwhile for you to take a shot at documenting the architecture and then get Tom to help fill in what you missed. If Tom is as good as you say then I'll bet his approach is very systematic and actually quite easy to follow once you learn the "whats" and "whys" of what Tom is trying to achieve in the architecture. Once you understand the "whats" and "whys" then you can focus on the "hows" and I'm sure it'll be a lot easier then. From your description it seems like you are simply implementing things the way Tom is telling you without understanding why. That's why you aren't feeling like you are getting better. You really need to understand the why's or you'll never improve and you'll be needing Tom's help every time you tackle something remotely different. 

You will face this situation throughout your professional career. If the only reasons YOU can come up with that supports your way of doing something is that "YOU think it is simpler/less complex" or "YOU like it better" then get used to having the over-bearing people walk all over you. I went through the process in my early career. My solution to the problem was to develop my expertise and now I know why my solution is better (in the situations where it is) and I can explain the reasons in concrete terms. I can also show where the other solution is less desirable. The key is that those reasons need to be demonstrable reasons and not just vague opinions like I think it is less complex. In the meantime, see what you can do about breaking your project into "relatively" stand-alone pieces so he can do his part the way he wants and you can do yours the way you want. You'll still have to negotiate the overlaps, but at least this will minimize the issue. 

At some point a "pure" developer will begin to top out in the salary category, which is why "good" developers eventually give-in and take the management path. IT HAS NOTHING TO DO WITH BEING ABLE TO KEEP UP WITH NEW GRADS. Nobody expects new grads to hold a candle to good experienced developers unless their projects are fairly trivial and mind-numbing. Yes, some companies do have "technical" paths but those are always much steeper hills to climb than the management route. So it is an option, and actually quite a good one for somebody with a PhD, but you'll have to work much harder, much longer and be luckier to raise through the ranks on this path and you'll still likely not be compensated nearly as well as those who took the management path. However, if you want to be a "pure" developer then there are routes you can take which improve your chances of not being priced out of a job/you hitting the salary ceiling and you really can work until retirement with a nice paycheck. 1) Get in an industry where domain and business knowledge is hard to learn and it matters. A developer who understands the business side of things and can communicate effectively with the company domain experts/scientists is invaluable to a company and can demand high-pay and the company still thinks they are worth every penny of it. 2) Learn to build software systems, not just be a programmer. This means being skilled at the entire software development life-cycle process. The new grads can program, but they generally can't build large, maintainable or robust systems. Building maintainable and robust applications usually takes many years of seeing the "wrong" way of doing things to understand why the "right" way is necessary and when the "right" way applies to your specific situation. Building large systems requires skill in all phases. If you can't properly gather requirements then you aren't going to build what the customer wants and most certainly won't be able to give a reasonable cost estimate. If you can't do high level architecture then you might have some terrific software modules but they won't play well with each other. If you can't design clean modules then have fun tracking down bugs when you start integrating all the pieces. If you can't code well then your app isn't going to work no matter any of the other stuff. If you can't test well then your customer is not going to enjoy finding all the bugs you missed. Companies who can pay high salaries, are willing to pay high salaries to people they know will deliver a working product that doesn't tick off their customers because it is so bug-ridden or doesn't meet their requirements. 3) When you get older and start a family things do change but you compensate. As a young single person, you tend to put in a lot of hours but you also put in a lot of goofing off and wasted time to go with it. As a person with a family, you put in 40 highly productive hours and get to spend time with your family. Not really an issue, as long as you set the expectations properly with your employer. Family is First! 4) Find the right company Of course you can do all of the above, but if the people that run the company don't see things the same way then it won't matter. So don't be afraid to move around between companies until you find the one that is a fit for your career desires. Believe me, there are hundreds of companies that are a perfect fit for 1, 2 or 3 from above. 

If you have a dollar amount you want then tell the company that amount plus some padding, but I don't think you can give a number without also comparing benefits. If you have no idea what you are worth, then simply say you are looking for a competitive offer for the position you are being hired for including benefits. That way, if a company knows they are light on benefits then they very well may offer a higher salary. Don't simply look at the salary, you may be quite surprised at how much your compensation can be dramatically improved by a company with good benefits. 

email is too much work on your part. You have to collate, read the email, possibly enter the names and dates into your own document etc... A better idea is to simply create an Excel spreadsheet on a shared network drive. The spreadsheet has a calendar. People fill in their name and reason code right on the calendar for the days they will be out. e.g. John Smith - PTO or John Smith - COMP or John Smith - OOP. Then you can quickly see who is out or is going to be out on any particular day. If you are concerned about people giving proper notice in advance then you can create daily backups of the file. You can even automate the backup process if you are so inclined which also eliminates effort on your part. You can take it even further and have the backup process send you an email that collates any changes to the document from the previous day so you only have one email instead of separate emails from a bunch of people. 

Are you sure your boss is essentially "requiring" you to attend the meetings or is it possible that your boss is trying to help you become more successful and giving you advice on how to become more "visible" and integrated into the team? Maybe your boss has heard others talk and is giving some advice to alleviate their concerns. While most people don't like office politics, it is pretty much a necessity to play the game at some level if you want to succeed. You didn't mention that others complain about these meetings. So perhaps, most of the staff views "being part of the team" as including enjoying the camaraderie of having lunch with each other. Those who choose not to participate might give the impression that they don't want to be "part of the team". I've worked at companies where everyone likes hanging out with each other and that includes frequent lunch outings. I've also worked at places where people act like it is a punishment to spend time with co-workers and they are doing a big favor by doing something simple like going out to lunch with you. It sounds like you prefer the latter type of environment. Perhaps next time you interview you should ask questions about the team interactions and avoid the places that tell you "we like to do activities with each other". 2 to 3 meetings per week sounds like a lot, perhaps a win-win situation would be for you to attend 1 meeting per week. Also, maybe asking a couple people to lunch 1 or 2 times a month might help offset concerns about your not wanting to be part of the team, if this is indeed the real issue. 

You really should be thinking of your group leader as your manager from a performance evaluation standpoint. Also, while your group leader isn't responsible for assigning projects to you, they could be your best friend in helping to get you assigned to the type of projects you really want to work on. But even with this structure and having 125 developers working for them, I never heard that the manager was not willing to have a meeting with a developer if they asked for one. I was always also quite amazed at how much my manager knew about me despite my seldom having any interaction with them. So the process works, even though there are some obvious downsides. 

First thing I might do is upon getting hired is to ask the contracting agency how THEY want you to handle this type of situation, being that you've experienced it a few times. Then if it does occur you can always tell the PM whatever your contracting agency told you. However, in real life, I would probably recognize that there's something frequently called "casual overtime". 2 to 4 hours OT just to get a job done on time that occurs infrequently (e.g. 4-5 times a year at most). If that were the case then I'd probably just go ahead and do it because you probably wasted more time than that and were still paid for it. If its more than that then I would probably go along with the customer request (because one of your jobs is to keep the customer happy) but I would also certainly contact the contracting agency ASAP and get direction from them. They could very well agree to pay you something extra without billing the customer because they want to keep the client or they could handle the situation without the customer actually finding out that it was you who spilled the beans. 

While other answers seem to be giving lists of skills that are needed to be considered to be at a "more experienced" level, I think the difference is far simpler. It all boils down to how much oversight and direction you need and how does that scale. I'll use sub-product to try and keep this from being software specific, but think of a sub-product as a module. New grads tend to require lots of oversight/direction. They need to be taught the details of specifically how things are done at this company. They tend to be told exactly what they need to do. They tend to work on well defined pieces of a sub-product. Slightly more experienced people but still junior might be given entire sub-products that are well defined and done under the guidance of a more senior person. As you get a little more senior then you are given responsibility for defining the exact details of a sub-product as defined with minimal details by more senior people. More senior and you get people assigned to help you with your larger sub-product(s). More senior and you start to get involved in identifying all the various sub-products from some specification already defined. More senior and you are helping create that specification from some vaguely defined customer needs. More senior and you are actively looking for customer needs that will bring money into the company. In other words, you are defining your work assignments. In general, it boils down to the expectation that the more senior you rise, the less guidance you need, the bigger products you are able to successfully complete and more people that you are directing. So you may be a great "whatever your specialty" but you are still going to have a huge learning curve on how to do things the "company-way". Thus, a lot of oversight. You'll also need to prove yourself before you get out of close scrutiny. Thus, a lot of oversight. You'll learn that techniques and practices that worked great for smallish projects just don't scale well once things get bigger. Thus, a bigger learning curve than you might think. So you'll have a fair amount of do-overs, making you less efficient than someone more experienced. Even if you are a great "whatever your specialty" for a college student, if you haven't spent 8-9 hours a day practicing and applying those skills for a few years then you are not nearly as good as you think you are, no matter how smart you might be. More specifically to software, you can't give a code-sample and show what the differences would be because it's about the entire system and not just the code snippets. It might be better to point out what is likely to occur if a new grad/junior developer is not given the proper oversight. The 2 most common problems I've seen are 1) They write absolutely terrific code but it solves the wrong problem. 2) They come up with a design and code that they feel is much better than how they were told it needs to be; the problem is that it doesn't work with the rest of the system so it can't be used.