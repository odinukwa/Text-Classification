As for the seed I think injecting that is overkill as well but you can make it an optional constructor argument and dependency inject as necessary. 

I have serious concerns about your use of TempData here: $URL$ My problem is it assumes your resource requests are single threaded (on a per-client basis), so if you have a client attempting to access more than one resource simultaneously I think your counter gets thrown off. From my reading of that link I posted it wouldn't know if a subsequent request was in parallel or sequence to your initial 500. 

The main problem I see with this approach is you have magical strings, which are not compile time safe. I highly recommend you look into using an ORM like entity framework 

I have no problem with your model. Your problem is you don't implement commands so you have code in your view which is not ideal (and I'd say wrong). Look into ICommand. Prism has a DelegateCommand class that will create a command that will invoke a private or protected method on your view model and then your button looks like: 

I refactored your service base code into another class, which raises an event DataChanged. This way you can subscribe to multiple queries and databases. I also created a SqlDatabaseDepedency class which starts and stops the SqlDepedency for a database and implemented in a singleton pattern using unity (singleton on dbName). I also used Microsoft Enterprise Library's data access block for better database code. Let me know what you think. 

Then if you want to you could wrap it in a function and call it with the conditions array and number of loops as parameters. You can also shorten your divisible to: 

I'm guessing there's more to your function than this, but you probably want to have it in a loop of some kind and then ask at the end of the function if the user wants to keep rolling, if they don't want to keep rolling you can change the current player index. More about your functions Make the rool2Dice function simpler, does it really need that many parameters, you are passing the exact same most of the time. If you have any more questions just ask away, good luck. 

Rethink your function Instead of using if statements you can store the points in an array and then the current player variable could be an index for the array (so not a string value, use and integer instead). Try to think in numbers instead of strings. Code example: 

But I think that you don't really need that function because you can just use the % operator and your code would be cleaner and quicker to understand. Just for future consideration. Hope this answers your question. 

If you really want to use strings though you could use a map but I think it will just make your code more complicated. Coin: Just do the coin check at the start of your function by setting the start index for current player. For example if you want the user to start if the coin lands on heads which you can represent as 0, you then just set the current player index to a random value between 0 & 1. Example: 

What pattern are you following? Normally with MVC the controller constructs and populates view models and instructs the View to render them. Also with from what I can tell you're misusing inheritance, NoTabsOpen and and TabsOpen is a state of the View-Model and you shouldn't be switching controllers based on state, a controller is a resource (in the web world represented by a url) that consumes state. I would recommend: 

Also I noticed you're using ObservableCollection which leads me to believe this is WPF, you should really look into MVVM as it's a much better pattern for WPF. 

I implemented ModuleHelper as a class (Module) that exists as an instance for each namespace loaded. And then made a ModuleHelper static class that creates the singletons for the calling namespace as needed. I used Unity to manage the singletons, but you can use your IoC of choice. 

Just an idea but maybe create a custom collection type to hold your variable classes and load the types into lookup dictionaries to make your property queries faster. This will obviously add some overhead at load, along with memory additions, but my guess is it will be worth it. Please let me know. 

I agree creating a IRandom interface that you inject into your dice and implementing a RandomMock in your tests would be overkill. In my tests I would just 

Your mapping is designed to call a stored procedure when you call context.Applicants.Add() and context.SaveChanges(). Your second code manually calls a stored procedure, that is not what you want to do. Simply keep your mapping: 

Basically there is an input field on the website. When user types an URL in the input field, an ajax request is made and the method above is called with the URL the user typed (He could change 10 times the URL which means it will go 10 times through that method). When I've the data as base 64 I send it back to the browser of the user which displays the image. Then the user can crop the image as he pleases and when he is done he presses OK. Afterward I crop the image on server side with the (that I already have because of the previous ajax req) and save the file. I would have done the process of converting an URL to base 64 on client side if I could but after some tries it seems like it is impossible because of cross-origin issues. Whole code works though. 

The weird thing is that if now I access a "child" of a post it will have only the votes by the current user: will be either 0 or 1. The thing that I don't understand is that if I load the data in two separates query it doesn't work anymore. Like this : 

Here all the post are the "parent" posts and the children post are get with the method . Since JPA would requery those, they wouldn't have the Filter on I put in the left join assossiation in the query. So I thought I had to query all the results with the correct and remake the three with the parent id and the method. It turns out I don't have to. In other words : When I query like this on the list I get from the query, I have only the vote by the current user ie: will be 0 or 1 (he voted or didn't). But this : will be >= 0. Because the children are requeried. So to fix that I query all the data with the correct votes like this: 

You could just have an array of the tank parts and then iterate through them using a for or foreach loop. Using this method you also make your code more expandable, for example if you want to add more parts like different tracks for the tank. You should also try to generalize your code, the hull part should work the same as the gun part or turret part, this will make it easier to iterate through them aswell. Example (Code not tested): 

You could make some sort of struct or class that stores the text printout and the number i should be divisible by. Then you just need to create as many instances of the class as you need and loop through them. One other approach is to have a hashtable and store the keys in an array that you loop through. You can use whichever one you feel makes the most sense but the first method should technically use up less memory because you only store the text once for each condition. I might be wrong though, I don't really use Java. Example (Not tested and not written by a Java developer): 

It's easier to learn this early instead of developing bad habits then trying to fix them. You are using pointers very weirdly by passing dest as a char**(a pointer to a pointer of a character) then dereferencing it to set it as a pointer to the correct location in the string. This is again why you shouldn't use defines such as PCHAR, because you forget that they are actually pointers. Don't think of char* as a string, think of it as an array of characters or a pointer to the first character in a string.