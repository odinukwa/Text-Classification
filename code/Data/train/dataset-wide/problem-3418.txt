You need to provide a configuration line in addition to the configuration file. You have configured one of two options for CA certificates. You may not need either. This may be configured with the file that should be the GoDaddy provides documentation on installing your certificates. According to that the gd_bundle-g2-g1.crt should be configured with the parameter. This parameter is called in Apache versions before 2.4.8. 

tinyca2 is a nice graphical front-end to generate certificates. It is packaged for both Debian and Ubuntu Linux distributions. You will be able to generate the keys and certificates for the server and clients. They can be exported in a number of formats. I would recommend documentating proceedures for installing your ca-certificate as well as the client key and certificate. Setting or changing the password on the client key by your users should also be covered. I second using mod-rewrite to force access to $URL$ 

On most systems you will be well under the ephemeral port range. These are used for outbound connections, so they shouldn't cause an issue. You are generally free to use any port for any purpose. Using standard ports makes it much easier to find the ports for an application or to guess what protocol would be appropriate to use to communicate on the port. This is generally the best option, but in cases like yours at least one application needs to move. Using a simple transformation such as you are suggesting works well. Other simple transformations when you have a variety of ports like this is to add a number such as 1, 10, 100, or 1000 to the port number. Smaller numbers tend to risk hitting nearby ports. 1 doesn't work with applications that use consecutive ports. An option that would allow you use the existing ports is to add an additional IP address. This only works if you can specify the IP address the application will bind to. If you need a DNS entry for one or both applications, consider using a service name for one or both applications. 

A PBX (Private Branch Exchange) is a device to switch calls between telephones. Some like Asterisk support VOIP (Voice Over IP). When I looked at implementing Asterisk a few years ago, I found I was looking at a hefty hardware expense for the phone interfaces. FreeSWITCH is a VOIP switch and handles switching calls between VIOP endpoints (connections). The switch is implemented in software and may not have any physical phones connected to it. Calls may be switched to softphones (software phones) on PCs, laptops, or other devices. Another option is to redirect the call to an existing cell phone or landline (hardwired phone). Some softswitch software can ring several numbers at once and may allow you to listen in to the incoming voice mail message before accepting the call. A softswitch may allow very complex call routing plans based on who is calling, time of day, and other factors. Follow-me routing should be simpler to implement with a softswitch. Both may include IVR and voicemail (although it is more or less standard on softswitches). For many purposes they can be considered interchangeable, but the technological lead is likely to favor the Softswitch. 

WARNING: Your IPv6 addresses will be globally routed, ensure you firewall traffic to and from the Internet. Don't assign services to link-local addresses. Assign a separate /64 to every internal subnet. Assign a fixed IP address to servers and routers. These can be entered into DNS. (Some IPv4 DHCP/DNS servers will identify the corresponding IPv6 address using the associated MAC address.) You should configure RADvD and/or DHCPv6 to handle address assignment. IPv6 addresses are generally self-assigned based on one one of these services. DHCPv6 allows you to assign fixed IP addresses. If you are not getting a static prefix (which you should), the configuration of the address assignment will need to update when the prefix change. (It is not that important that your external address be static as the route to your prefix should update appropriately.) IPv6 privacy works by periodically assigning a new IP address for outgoing traffic. Don't be surprised to see multiple global IP addresses on you devices. 

IPv6 is dependent on a variety of ICMPv6 packets to keep the network functioning. To enable Ping you need a rule like. 

Use separate config files and start one of the servers specifying the config file. To use a different file use option followed by the config file you want to use. If you want to make this persistent, you will need to create a copy of the script that starts sshd and modify it to use a different pid and the new configuration file. More modern distributions use which uses different control files, for which you will need to create new copies. It may be possible to achieve what you want with a single sshd and a block. (as mentioned by joschi). You will need to add the additional port(s) and/or address(es) to the configuration. Match will only allow some properties to be changed. See the documentation for which may be output by the command . You match line might look like: 

An alternative for email to this server is to use a subdomain (app.example.com). This will need an MX record. In that case I would consider using the same name for the SMTP server. Setting up to recieve email is significantly more difficult than sending. 

There are a number of recent changes to both server and client software designed to resolve issues with SSL/TLS vulnerabilities. It is possible one of these is causing an issue. If your certificate has only a SHA-1 signature this may cause it to be rejected. 

There seems to be an inconsistency between the and listings. Something not listed is using a lot of CPU. Try changing the sort order of top to %CPU to see where the CPU is going. It looks like you have a severe memory leak in the application you are running under apache. Try reducing MaxRequestsPerChild to 200 or 100. This should cause servers to be recycled before they have leaked too much memory. Reducing MaxSpareServers to 10 or so may free up some more memory. I use a modified log format to show the execution time for requests. You can use the excution time field to determine if requests take too long to service. This is the log format I use for a host with multiple virtual servers in the same log file. The value replaces the which is always . unless IdentityCheck is enabled. (IdentityCheck relies on being enabled on the remote server, which is highly unlikely.) 

If you have lots of small files then you may run into blocking and directory overhead in tar. The important information is how large was the source directory. tar may have compressed empty space in files by not allocating blocks for them. Try the option to . You could try comparing the list of files generated by to the files extracted. Extract with to see if you are getting any errors on extract. Try recreating a copy of the tar to see how large it is. 

I sign for multiple sender domains with the following configuration items. All site use the same private key. Setting the private key would be more difficult if they used different keys, but it can be done. I use the selector as the private key file name extension. It is currently . 

You want to accept established and related traffic first. This will usually be most of your traffic, and you want to process it as fast as possible. The connections will need to be accepted by other rules, before this rule will be applied. If you are just learning about iptables firewalls, you may want to use a firewall builder to build your firewall for you. This will help you get the policies and common rules setup with a minimum of effort and likely of better quality than you could hand code. I like Shorewall, but there are several other tools available. 

Your Equipment Protection Policy may be void if you do so. The surge supressor does things to the power supply that can cause problems for the UPS and attached equipment. If you need new plugs use a distribution strip that doesn't do surge suppression. See $URL$ for some details. 

It could be done with a router placed after all the routers that match local users. An alternative would be to put a callout router early in the list that calls out to the second server and accepts mail if the user exist there. This would be my preference. Routing would be: 

NSS provides access to a number of name database such as: passwd, hosts, services and groups. Lookups can be done against a variety of sources including both files and LDAP. It may co-operate with a caching daemon to keep local copies of recently accessed data. PAM provides authentication based on a number of rules. Depending on the version it may have a separate LDAP module, or its password module will be LDAP aware and able to authenticate against LDAP. 

You may want to configure this as a zone rather than a forwarding zone. This will require that the the primary server allow zone transfers of this zone from the slave. You can also configure the primary zone to notify the slave zone when the zone changes. There are two caching values for a domain. For positive matches, the caching time can be set for each domain but is usually but defaults to the value specified in the $TTL line. For negative matches, bind uses the minimum value of max-ncache-ttl (default 3 hours) and the minimum value from the SOA record. If you don't search for the domain before the primary is loaded, the forwarding domain should forward the request, find it and cache it. 

The two routers R1 and R2 will do the tunneling. Packets originating from R1 will have an IPv4 header with R1's IPv4 address as the source and R2's IPv4 address as the destination (R1 sends to R2). Return IPv4 packets will have the source and destination addresses reversed (R2 sends to R1). The IPv6 addresses of the hosts A and B will pass untranslated in the header of the encapsulated packet. Normally a minimal 20 byte IP4v header is used, so the IPv6 MTU (Maximum Transmission Unit) on the tunnel will be at most 1480 bytes. Encapsulation just consists of adding an IPv4 header to the IPv6 packet and routing it using normal IPv6 routing. The un-encapsulation just removes the IPv4 header, and routes the remaining IPv6 packet normally. It is possible for an IPv6 packet to be passed through more than one tunnel between the two hosts. The IPv4 addresses in the IPv4 will always be the address of the tunneling router (source) and the address of the tunnel end-point router (destination). EDIT: The following was written to describe the case of described in the following paragraph. The other paragraphs supply additional background. HostA (IPv6) and HostB (IPv4) will be unable to communicate as they don't have compatible stacks. If HostB was had an IPv6 stack they could communicate. A dual stack host could do its own tunneling, in which case its IPv4 address would be used as its IPv4 end-point address. If NAT is being used then the address of its router would be the IPv4 end-point address while the packet was on the IPv4 network between the routers. IPv6 does not have NAT so the IPv6 addresses will never be translated. For an IPv6 only host to communicate with an IPv4 host, protocol translation is required. Host A could address Host B using one of the IPv6 schemes for encoding IPv4 addresses in IPv6. Router R1 would need to perform the protocol translation. (Although I don't believe there are any such routers on the market.) Again, the IPv4 end-point address on the IPv4 network would R1's IPv4 address. Some network options may not get translated during protocol translation. 

Don't assign the user id or group id 0 to the user you are targeting. Add the user to as specified. Then flag that will be uses also as documented. will be used to run command as root (user id 0, group 0) when needed. 

Install a munin server, and run a munin client on the virtual instance. It will log memory usage and a number of other useful statistists over time.