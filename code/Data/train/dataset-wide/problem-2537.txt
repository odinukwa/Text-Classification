Instead of iterating over the input string like that, converting every single character to a new , actually doing all of this twice, and adding each to a collection, you can convert the string to a list of s (for each character) like this: 

The account should not need a method to display the balance. You already have getBalance(), and the ATM is responsible for displaying it. Furthermore, does not display the balance. Instead it returns a string. Method names should describe what the method does (or sometimes what it returns) as precisely as possible, but they should never say that they do something that they are actually not doing. 

That makes it very difficult to see where a block starts and where it ends. Another thing is your usage of newlines and spaces. I recommend having a look at a popular c++ style guide, like for example Google's. Independently from a specific style guide, it is common practice to format this: 

might be idiomatic enough in the context of an RPG, but I would still recommend naming it , and derive it from a . I highly advise against deriving from , or even having anything named , because that could basically be anything, depending on the interpretation. Better call it , if that is what you intended it to represent. 

and are bad method names, and the methods alltogether are obsolete, since it is more readible to just see these 2 lines in your code than not knowing what actually does. 

with spaces after keywords like and , before opening braces (when putting them on the same line as the condition or method header), and around operators. When using if-else branching, it is good practice to use braces even for single lines, or at least use new lines and indentation without braces to make the branches clear to the reader. For example instead of this: 

In the following, when you have conditional returns, you don't need an else. Also it is unclear what your does. Does it change the instance and return itself? Does it create a new instance with the new values? Since resizing is usually associated with real objects, like for example images, for I would use the method name instead. Then your algorithm to recalculate the dimensions might actually go into the class/struct. 

This is redundant. You have the same code twice, with just different conditions. You can already see why this is bad: You typed the output strings differently without realising, so in some cases when the player is out of bounds the output will be , in some cases it will be . This is a bug, and a very simple example of bugs being introduced or at least made much harder to find by redundant code. To fix it you can either combine the logical expressions into one condition: 

Still had to add it. Rather add these five characters to every usage, enjoy your IDE's code completion and prevent name mangling problems when you import hundreds of very common names, that could easily be used by other libraries or your own code. Coding style Your indentation is quite off in multiple parts of your code. For example: 

The input is not the user. You could call it , but even that seems redundant. Since the intent of that line is to ask the user whether to play again or not, you could just call the variable , then check whether Pythonic code Code is considered pythonic, if it uses the language's features appropriately and thus is more readible to people familiar with Python. For example 

You wrap your public variables and functions into another class, called or . This way you can instantiate your game by just importing the class, then doing 

You are right in that regard, however for many beginners of object oriented programming (OOP) it is difficult to understand why this is a problem, and how to fix it, even when they know they should. I will not go into detail about object oriented principles, although I recommend to search and read about them. Instead, I want to give you the short version: Splitting up code into classes, and hiding their details to the outside, enables you (and possibly other programmers in bigger projects) to focus on small amounts of code and to literally forget about the rest. Your program is already fairly complex, and changing values in one class affects others as well, which should be avoided. Especially hiding information by making it helps prevent errors. But if class A has the information privatly, and B needs it, how does B get it? The answer is: A should give it to B if needed. B should not be allowed to access it himself. The first step to avoiding (or even both of them independently) is to just not use them until you need them. This applies to methods, because variables of classes should never be public and almost never be static. 

Or, even better, define a function to check the bounds (this is way more readable and maintainable): 

This should ring alarm bells, because it leaks the internal state of an object, which means that you could also change it from the outside. Instead you should always access fields (class variables) via accessor methods (and only have these if you really need to). That way you can add a getter method, that allows to read the value, without anyone being able to change it. Inside of the class, instead of this: 

The compiler will concatenate the strings during compile time, so no need to worry about performance of string concatenation. 

These member variables are already set to 0 by default. It is good to be explicit, but I would do it in the member declaration rather than the constructor to make the code shorter without losing readability. 

This way, you can use them in the if-conditions without the risk of confusing the values due to them sharing the same variable name: 

You have the in the class. Shouldn't that be part of the ? The Game can't score by killing NPCs, and neither can the NPCs score by killing the Player. So the score is an attribute of the Player. 

Your bank account only supports full dollars as balance. It cannot have 13 dollars and 37 cents, for example. Note however that money should not be represented as floating point numbers. Instead you should use an int (or long) to represent the cents, and then calculate dollars and cents from that. In a real banking application, you might even use a millionth of a cent as your normalized scale. 

The second one is actually how you write formulas in maths. So when implementing a function to represent that formula, go the same way. (Hint: Maybe this code should be a function.) Using Functions 

When checking the diagonals, your conditions are not mutually exclusive, so there is no need for the . Also, you are returning true in both cases, so you can combine both conditions to a single expression, and return the result of the expression. 

That comment adds no information to the method name. The method name is already very explicit. The comment rather even adds wrong information, because you don't actually split the string. You could consider ing the return values, so that you can iterate over them without needing the complete list in memory. 

Again we use intermediate results and save them into variables. This increases readability, and reduces the need for comments. 

Note that previously to Java 8 this results in the first element being an empty string, which must be handled accordingly. Then add all of the characters in the array to the collections: 

Saving intermediate results of calculations like this is good, when you need them more than once. But here you don't. So is more readible if it is inside of another formula than . 

Instead, just write . Naming The Python convention for function names is , also called snake case. I suggest you look up PEP8, which is the official Python Style Guide. Also Google's Python Style Guide is pretty popular. Your method names are not very well chosen, because they don't tell the reader what they do. returns a boolean (true or false) value, so a better name would be or . But since the function can be reduced to an inline , I suggest even removing the function and using the simple boolean expression instead. The following is also very misleading: 

It is good practise to define an interface (or use one that is already defined) and implement it in your class, especially for containers. That way a user can replace your implementation by another one (or vice versa) without changing any surrounding code. 

The problem with public static Almost all of your methods and variables are . You address this problem in your question: 

In the second block, you are first initializing a variable , but then you continue using the variable that you used in the block before. This way you are changing values that you already set, and not changing others that you expect to be changed. I think all occurences of in the second block should be instead. However, if you were using functions as I explained above, this problem would not occur and you would be less likely to get this bug, which is probably caused by copy-pasting code and forgetting to change it. 

This is what the indentation and whitespaces in this part of your code should look like. As above, you do not need the variable . Just use the value from the array directly. If you change to , replace with . 

The same applies to many more blocks of code that begin with such a comment that sounds like "do this and that". 

In , you have only one public method, and that is located at the end of the class. Better move the public members to the top, so that you can easily see what the class's interface is and what it is supposed to do. Then you can scroll down if you need details about the implementation. 

The loops are obsolete, and do the same checks multiple times. Because your board is just 3x3 big, I suggest to just do the 8 checks, which would just be 8 more readable lines. If you do want to use for-loops for the rows and columns, you only need one for each, so two sequential loops, not nested ones. For the diagonals, as you did correctly, there is no reason to use a loop. I added suggestions at the end of the answer for how to implement the loops correctly, for when the board size is not known or might change. 

I had to google "theta" to understand what you mean here. If you want it to be the angle, don't give the angle a name (alpha, beta and so on would also be very frequently used). Just call it angle, or orientation. Also, declare each variable on its own line, to make it look clearer and more readable. 

You can further improve it (in terms of performance) and reduce redundace by first checking the middle cell, because it is required to be set for both diagonals. However, the performance gain is negligible, and the readibility arguably is reduced. If you do it this way, I recommend putting it into another private method where the method name tells you what it does (e. g. ). 

What you probably mean is that it is the class that controls everything and such is on top of the logical class hierarchy. But when talking about super classes, you usually mean classes from which other classes inherit and thus are on top of (or further up) the inheritance hierarchy. In your code for example, is a super class of . White space To make your code more readible, you should add blank lines appropriately, to separate logically related blocks of code. For example, add a blank line between methods, and two blank lines between classes. Inside of methods you can add single blank lines wherever it seems appropriate, for example around loops. You should add spaces around operators (like instead of ) and after commas (e. g. instead of ), however not before commas, as you did here . Refer to PEP 8, which is the Python style guide. Naming Your naming scheme is inconsistent. Python uses , not , for member names (see also PEP 8). You mixed both schemes, for both methods and member variables. It is always better to be consistent with one naming scheme, and prefered to follow the conventions of the language. 

This is not pretty, and probably useless. Since you need to access these values via strings as keys anyway, you might as well just access the global variables. These nested dictionaries do not really simplify the access to the variables, rather make it harder, and since at no point in the future will suddenly point towards , you do not need to abstract the variable access. 

I like to improve readability by separating groups of members with different access modifiers with a blank line in between. is valid in Java, but the syntax stems from C. I would always use , which is more idomatic in Java. In my opinion it is also way more intuitive, because it reads like "an integer array named queueElement", rather than "an integer named queueElement array". Since an array (usually) contains multiple elements, the convention is to use a plural name like . 

(Note that again I omitted the parameters just for the exmaple.) Doing it that way you can also avoid setting a variable named , which is misleading because no matter whether the result is true or false, in both cases the function has worked. Just the result of the check would be different. Algorithms and Data Structures You are checking the board as if it could have a dynamic size. But since you hardcoded the size to 3x3, and it is always 3x3 in tic-tac-toe, you can just do some simple checks instead of these 3 very long functions with nested loops. This is the vertical check (board is your arr, since field fits better as a name): 

Your initialization of is redundant, since you assign 0 at the start of the loop anyway. So just declare it before the loop, then assign it in the loop. Performance Expecting the likely case that your string does not contain the substring candidate and returning early can improve your performance in many cases, so check before looping whether the candidate is longer than the containing string. 

Note: I did not check whether your code matches the formula correctly and I am not an expert of the mathematical background. I only refer to your code. Style 

If you read this, do you know what it means without reading the code next to it? Is it a sum of sums? A product of sums? Or a completely different thing altogether? When trying to find a good variable names, think about "what is this"? The answer might be e. g. "the product of sums of squared numbers". is long, but it tells you what it is. Implementing Formulas Judge for yourself. What is more readible? 1. 

Concerning your question: When dividing an int by an int, or when converting double to int, the result is always an int. This means that the result is being rounded down, never up. The part after the floating point is just stripped away. I suggest the following improvements: 

Having classes for and seems a bit too much. Rather have a class which saves the positions of the players' symbols and checks when the winning-condition is fulfilled. If you want to use the and classes to better organize your code, make them private classes of the , so that no user (even you) of your code creates instances of them where they are not needed. 

Your indentation is weird. Use 4 spaces (less common tabs with width of 4 spaces) for indentation. You have sometimes 3 spaces, sometimes 2. Since is a boolean expression, you can return the result just like this: 

Having your main class named is unusual and confusing, since it is a , more specifically . Either of these two names would fit much better. You explained that the name stems from a former project that evolved into this one, but most IDEs are capable of easily renaming classes, as well as their containing files, automatically without the need to search and change every occurence manually.