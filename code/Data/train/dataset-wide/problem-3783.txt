I'm in school right now, and in a couple of years, I'm going to look for work as a software/systems engineer. The thing is that right now, I'm 32 years old. With age being a potential issue, where is age less of an issue? What type of company/culture should be absolutely avoided? Any warning signs? Some backstory, if you have the time. (TL;DR, I'll be an "old" man in a new job, and it could suck.) I've got a couple more years to go before I graduate with a BS (Yes, I know degrees aren't everything, but I have none at all, except for an Arabic AA.) in CompSci, as well as several AASs (in Computer Programming, Web Development, and Comp Sci) and several certs (C++, Java, OracleSQL). Right now, I'm just not comfortable putting myself on the market because I don't feel yet I'm even an "average good" programmer, though I'm putting tremendous effort toward that. On the bright side, I didn't start out software/tech ignorant. I was in the Marines for 8 years, finishing the last three in Special Operations Intelligence (Signals), and did contracting for a year in a company that specialized in networking centric geolocation. Got laid off and went back to school. Then was hired as a contract worker for Google for over a year and a half. I've had plenty of computer science exposure and OJT in programming (also UAS systems, remote sensing, GIS, database design/implementation, and SDRs), but have only really dedicated myself academically to Computer Science/Software Engineering in the last year, after realizing this really is what makes me happy, and where I seem to have the most suitable talents. Thing is, I'm going to be a 34-35 year old entry level employee, working with 22-24 year olds starting fresh as well, but they are all shiny and new(and may actually have more experience in tech industry), which may make me look bad. People my age will have over 10 years experience and will not be my peers, likely having senior positions in company. I feel it could be a situation where it looks like I'm experienced because of my age, but when I behave like a new guy, which I will be, I'll be treated like an idiot, instead of a new guy. I've got a family to worry about, so this is really stressing me out. 

Your experience in the field you're leaving, in the form of abstract things accomplished (teamwork, projects, generic improvements, etc.), leaving specifics of that field completely out. No jargon (no technical keywords), just imply that you know them. Your attempts at the new field. The humble courses, the simple experiences based in youtube vids, whatever. It's hard to word these things professionally, but not impossible. Finally, and this is the key, put the jargon in, both of what you already experimented with, and with what you aim to learn next. Be earnest, but be determined. 

This means doing homework, which in turn means you shouldn't be pressured to take the offer on the spot. Study the details of the individual proposal (not a vague we could give you health benefits) and make an informed decision. 

The company offers these benefits because it exchanges some of their costs for other costs. In some ways they're spending more to make you happier, but most usually they're just trying to save money or at the very least make you happier while breaking even. You should, then attempt to do the same calculations yourself. 

Clarification: this question vs technical debt This question has to do with me challenging long-standing beliefs about a product without committing career suicide. Rather than strictly be about dealing with technical debt, there is this: management suggests that perhaps the code is so complex that I can’t understand it, and posited the mistakes are by design; that the original developer is so meta, that what looks like mistakes are actually strokes of genius. Perhaps another reason this isn't quite about technical debt is that the difference between 'genius' code and technical debt is that management communicates that I'm not supposed to alter 'genius' code, and that 'genius' code isn't technical debt: it's the secret black magic. I wish management would think of it as technical debt. Instead they don't. Management isn't concerned with the time, cost, or money directly –– although that is some concern. 

Details Most of the time, I wouldn’t be nervous communicating this to management. Unfortunately a long line of piece-meal maintenance by people, some of whom had little development experience, who only “touched” the code long enough to add a patch here or there, then move on, has painted a picture to management over the years that the project is just one step away being production ready. That is woefully not the case. A short list of issues in the genius code I have come across in the ~1.5Gb code base are... 

As a counterpoint to some of the other answers, I did what you are asking about when interviewing for my current position. After stammering out a mediocre answer in front of a white board, I told the manager (now my boss), that I don't do well in such situations, but I understood his reservations (he gave me immediate feedback). The company gave me a take home programming test, which I did. I also spent a little time coding an answer to what I was trying and failing to say in person. After I was hired I was chatting with my new boss. He said the fact that I continued with the original problem and showed better what I was trying to do was beneficial in their evaluation of me. Would they have hired me simply via my take home submission? Probably, but that extra work helped. Also, look at the down side: What harm does it do if you suggest other/better answers in a follow up email? If they don't like you, you have spent some time you won't get back. If they are on the fence, you might snag an offer. 

Take into account sick days, vacation days, extra vacation pay and compare it with your early salary. For example, because of some yearly benefits, my usual monthly pay is my yearly pay/13,3. Benefits such as in-company lunch usually result in more worked hours, including spontaneous meetings at the lunch table. Still, I don't think that's bad, because I tend to make poor decisions about what I'll have for my own lunch and I'm happy to delegate that. Health benefits should be compared to having your own health insurance for yourself. Keep in mind that insurance is a business that buys risk to sell, well, insurance. :) So even if you (for example) wouldn't buy your own dental insurance, you should still compare with buying dental yourself, and then, with final numbers in hand, decide whether you care about having dental. Research how taxes apply to all of the above. In most cases, it works differently whether the company is paying or you're paying. 

Give a heads up about why you kept looking and that you found what you were looking for, no later than when it gets too disruptive for them to get the work interrupted. Ask for a full-time position counter-proposal. If you already got figures from the prospective job, ask for a counter-proposal suggesting a figure (but I would suggest against just saying what it was). Suggest a replacement or two. Get involved in the process of such replacement, whether it was your indication or not. If the replacement isn't very good, but it's still better than nothing, say so respectfully. Offer to be on call for limited reasonable questions (I'd say no longer than 20 minutes a call, no longer than 1 hour a week) for a limited reasonable time (more than 1 week, less than 2 months). 

TL;DR I inherited a project. Long story short, the code I am tasked to maintain is bad. So bad, in fact, the product is not only incomplete but non-functional and has been for years. How do I communicate to management, in a way that isn’t embarrassing to them, in a way that doesn’t make me look lazy or stupid, that a valuable product is in a dire state? 

I should add that when I first started working on it, it didn't even compile. And when I got it to compile, it failed at runtime. It’s a nightmare. The problem is, the management has received assurance from whom they inherited it, and from previous “gung-ho” developers, that it “works,” so have invested significantly into it... And now the buck is passed to me. And they want it in production in about 2 months. When I suggest that previous developers may not have been entirely honest or understood the product entirely, management sends mixed signals about “just get it done,” and “why isn’t it done yet” ... and “we’re not really sure it ever worked” to “it was working when you received it,” and “we’ve never seen it work” to “it’s already in production.” [EDIT: pasted most of the next paragraph into the TL;DR section.] Management also suggested that perhaps it’s so complex that I can’t understand it, and posited the mistakes are by design; that the original developer is so meta, that what looks like mistakes are actually strokes of genius. Granted, I’m no genius, and maybe that is the case: to which I offer my previous observations about the very fundamental issues I found. Perhaps there’s politics at play above my level. 

I would prefer to make this a comment, but I don't have the rep yet. I work in the U.S.A. in software startups; if you are working in a different industry/sector or country, my answer may not be applicable. I also like to find out about the financial health of a company when I am interviewing. I usually preface my question with, "I know that you are private and that financial information is sensitive, but..." and then ask about burn rate, how long they can last at their current ops level, etc. Most companies are willing to share, in rough numbers, this information. I agree with David K that revenue per employee is not something most interviewers will have at their finger tips. As far as it being a good idea to ask, I think it's entirely reasonable for an interviewee to get some idea about the state of the company with whom he or she may be working. If a company is very guarded about this info, it's a red flag to me.