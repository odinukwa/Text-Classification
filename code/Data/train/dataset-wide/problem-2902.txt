Okay some minor things here: As I mentioned in a comment: Naming Why did you give your private methods the prefix ? Looks code noise to me. Also these methods use . You should consider using an -parameter (that may, or may not be defaulted to cout) instead. This way you could let the caller of the method decide whether he wants the output in a console, or a file, or sent to the international space station. One of your methods is called . Consider calling it as method names should generally start with a verb. Pointers Next thing: 

Open/Closed-Principle: Lets stay with your -class. As mentioned in the SRP-Section, it contains the field . In case your requirements change and you want a differently shaped board, you violate the Open/Closed-Principle. You have to modify the -class. If you change the static field to a parameter in the board constructor however, you can easily fulfill this principle: 

Well... You can always be very dogmatic about programming principles. Your code looks rather good to me. Anyway, I'll name some examples. Single responsibility principle: 

No idea what is. Neither does the next reader. Or you in 2 weeks. Rest looks good to me. Just make sure every API-Function has its JavaDoc, rest is really up to you (in my eyes). 

Dependency inversion principle: Dependency inversion is awesome. Imagine if your class didn't even know which game is being played? It just says "There is a number of players, a game, and a mechanism that decides who's turn it is". It gets these three objects as parameters and boom. Completly reusable for any turn-based-game. Another example: Your class Player. It should be an interface that is being implemented by either or . Your gets two Objects, that implement the -interface and does not need to know whether one of them is a bot. Or both. I hoped I gave you a little insight on how you can improve your code according to the SOLID-Principles. If you have further questions (which are not "can you program this for me"), don't hesitate asking. 

Where does this line come from? Why 5? Ehy log(2)? Why divided by 3? Coming back to question 4. Here a comment might be appropriate. Additionally you might want to move that into its own function . 

Well this is a fairly unusual question. You try to implement an algorithm that is supposed to be as fast as somehow possible, but your question is whether this is "clean code". Have you ever looked into something that needs to be as fast as possible (e.g. a driver for a GPU)? There's absolutely nothing clean about that. Those are optimized by hand until the last bit is set where it might have the 1 in a billion chance to run one cycle faster. Now I'm not saying that clean code can't be fast. But this is usually not the main concern of a software engineer (I'd like to emphasize usually, because I'll be beaten to death by many developers right now.). Clean code often lives from big refactorings, creating multiple classes and hundreds of functions which make exactly clear what is supposed to happen (and when). If you do this to an algorithm like yours, it might harm its performance (e.g. because the compiler doesn't manage to inline function calls etc). On the other hand we're looking at java code ...(and once again I'm hiding under the table because all java developers are shouting at me). But now lets take a look at your code: 

What is the responsability of the -class? A board is supposed to hold some sort of players and objects for a game. In this case: The 'X's and 'O's. Hold them, keep them, no more, no less. Your class however does the following: 

I think the main problem of your implementation is that lock() performs Busy waiting. This will cause a thread that is waiting to get the lock to repeatedly waste CPU-cycles by polling (multiple times in one time slot) whether the lock has been released. Easiest fix for that is to perform a call to after trying to acquire the lock. This will cause the thread to exit its time slot and therefore let the other threads do their work. 

Also you are mixing with raw pointers. Consider using or where necessary. Nested class I rarely ever use nested classes, but your case here seems like it's worth an exception. This inner class is only used inside the outer class and has no sense whatsoever outside of the class. So making it an inner class seems like the way to go. 

Gotten lazy at the end, hm? I can live with and . But what really bothers me is . Your describes the point at which the array is split. Lets call it like that: makes a lot more sense. (I am personally not very happy with the variable name as it may describe a keyword in another language, but I've seen it so often that I'm just going to leave it untouched.) 

Here's a little to start with: implements . implements as , and as . These don't error on being out of range, instead doing nothing. is a bad name because list is also a verb and set is also a noun. is . should be called or , because you aren't generating the neutral element or inverses, and are using either commutativity or associativity to only append the original generators to any new elements, and only to the right. 

To bring 's last lines closer in method with the rest of your code, you could do and put another to the right of . (Or , because the repeats everything anyway, but that's kinda incidental.) When you implement a transformation of a simple partial algorithm into a safe one, chances are 's already got something, here . in its prefix form allows me to not close each option with a multi-line closing bracket, and shuddup indentation blocks split code into units just as well as names do, and then you don't need to choose names for everything. Each option even already lists a description of what it does! 

Have some rewrite rules applied, combinators used and helpers inlined while I think about your algorithmic question. And make a . 

It'll lazily take no more memory than it takes time to find the first result if you do not try to enumerate all possible results. For / to only try one option, you want 's / behavior, not 's. You could parametrize your Parser type in the used so the user can change it on the fly. yoctoparsec uses this "push" style. 

The third case subsumes the second. All possible result lists are prefixes of the same infinite list - let's define that instead. captures this pattern. A combination of and captures . 

and both call their argument , leading to mixups. maps the integers to , not . You are looking for . 

In real code, I would consider this to be too much naming for this little code. Most of this would probably be used only once and could thus be inlined. Since the exercise required implementations for all these, it's okay. is . is . Did you try compiling this? means that shouldn't work, and elemIndex takes the Char before the String. 

When you need to reverse afterwards, that's a hint you should have folded the other way. But this can even be written in terms of : 

(Edit: Actually that one throws out the first of each two equal elements, not the last. Here`s one without that problem: 

Calling a monadic action a given number of times doesn't need manual recursion, and thus also doesn't need to give the repeated action a name: 

Ignoring what kind of error messages you get, you don't need to handle error cases yourself: (!!) already does that. 

And then, if you don't mind making it more defined, make this and the above similar snippet use the same first argument to foldr. 

I don't see the definition for , and your first code paragraph doesn't look like Haskell to me. You have one more place where you could use your . Both uses are for , so you could instead wrap in your name for it which returns a . Assuming a lens into the content field of : (note that ) The source of $URL$ seems to want to give you the attributes in s too. Maybe they have reason for this - should you also retrieve that in ? If so: 

's name makes look like a crutch, and that is good, because it is one. I would inline definitions that are only used once and do not deserve to be in a library: 

A more potent approach is to return not the length at which to split, but the results of the split. In fact, makes this work out of the box: 

This is the backpack problem and NP-hard. We won't be scaling well in the worst-case whatever we do, but we can do a little better by, for example, only keeping track of suffixes of vendor selections that can't be undercut in time and price at the same time: 

is . points out some redundant brackets and suggests using in . , and are superfluous once-used one-liners. All the passing can be abstracted with the monad. For example, becomes (I assume reversing the order of adding does no harm) and can be inlined. And s are , so no need for . And becomes and can be inlined. (I note these because it might otherwise look like I'm rewriting the code from scratch as opposed to reviewing.) 

Successive elements of the list returned by genPositions and xs are zipped together; captures this pattern. i is now not needed in its non-rooted form and I recommend changing the interface to take N as an argument instead. Non-square arguments can currently crash !! anyway. genPositions is only used once, therefore I inline it. 

We're passing around a lot of setters and getters and indices, if only there was a library that specialized in that... Enter .