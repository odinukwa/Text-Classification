Solved Hopefully this will help others: The error messages didn't state what was the issue. Perserverance and troubelshooting highlighted the need for the following packages: ruby193-rubygem-foreman_setup ruby193-rubygem-foreman_bootdisk genisoimage ipxe-bootimgs Foreman 1.5 is now up and running. Thanks all for your help. Dan 

How can I access elements of an array in puppet manifests i.e. create a for/while loop? Let's say I have in my nodes.pp 

I'd like to print out the above using my template file, however I can't be certain of how many entries will exist, I want to end up with a file like so: 

I'm at whits end now, can someone please help me to understand what it is I'm doing wrong here: my nodes.pp (nothing else in this file except this definition) 

No matter what I change I keep getting this on every run on the test server, the run just terminates straight away: err: Could not retrieve catalog from remote server: Error 400 on SERVER: Could not parse for environment production: Syntax error at '='; expected '}' at /etc/puppet/manifests/nodes/nodes.pp:3 on node test On line 3 this is what I have from the above: net::addr { 'routing': What am I missing here? Please help as its driving me to despair! Thanks Dan 

My FastCGI (PHP-FPM) application may encounter a situation where it needs some time to heal itself up. I'd like to tell to nginx that it should wait a few seconds and then resend the request to the FastCGI backend. I have already experimented a hacky setup where nginx is configured with (see docs) with an upstream with same fastcgi configuration twice: 

I'd like to make a backup of a MongoDB replica set in a way that I can ensure the database consistency at the time when the backup starts. As the documentation says, flag to will copy also the oplog during the backup process. However, this ensures the integrity to point of time in the end of the backup process, that can be tens of minutes after the process started. Some approached I've been thinking: 

Update 1: Some background to my question. Puppet, during the initial setup of a node, works rather intensively and thus reserves resources of a fairly small virtual machine (in my case, Vagrant on dev machine). When the setup phase came to a point that some of the services, in my case the background workers, were ready, Puppet starts them and the workers start to receive jobs from a queue. This workload slows down the still-going-on Puppet node setup process as well as the Puppet slows down the workers, until the whole setup is done and the box is in a stable state. This is why I started to think that it would be good to let Puppet to work the initial setup to its end before all services on the node are started and why I was wondering whether there is any simple way to do this with Puppet. 

I'm new to foreman and am having trouble gettin this working on a rhel (6.5) server. Here's the error I get when running "foreman-installer -v": 

When I run the puppet client i keep getting the following: err: Could not retrieve catalog from remote server: Error 400 on SERVER: Could not parse for environment production: Syntax error at '='; expected '}' at /etc/puppet/manifests/nodes/ test.pp:3 on node test.myincorp.net addr.pp 

I'm struggling to understand how to add the route options to my routes file in rhel. Let's say I have the route: ip route: 

my question is how do I refer to the current loop of the hash iteration. I want to be able to use the "dev" field in this manifest, but since the hash has ip1,ip2 I can't tell what number its on? Thanks Dan 

I'm struggling to get this to work and don't understand where I'm going wrong, can someone please guide me on how to correct? Basically I want to get an array in my nodes.pp, which is then used by my templates file by cycling through it and writing a line of each element: nodes.pp: 

I want to create a named interface file such that the output from ifconfig shows vlan10:HR or vlan10:Desks. I know how to create this in sales with Ifcfg-vlan10 

Especially when setting up a completely new server from the scratch, puppet tends to start dependant services as soon as all their dependencies are satisfied. This sometimes leads to situation that services are started unnecessarily too early while the setup of other packages (not maybe dependant of a service) is still running. Is there any one-liner definition or recipe that would automatically make all services to start/refresh in the end of the whole catalogue run? I tried to figure out if run stages could be utilized but that would, in my understanding, require that all service definitions are explicitly defined to "last" stage. 

We have bought some reserved EC2 instances in different availability zones in eu-west-1 region. When launching a new instance, via API or AWS control panel, we do usually set "No preference" as the availability zone. In case of we have an "unused" reserved instance in an availability zone, does AWS still prefer that very zone even "No preference" is selected when launching the instance? Or, should we explicitly define the availability zone to match the inactive instance reservation? I tried to look for the answer from the AWS documentation, but without luck yet: 

I have a linux router between my private network and an unknown network. The unknown network can be another private network, I do not have control over that at all. Most of the devices in my internal network connect the outside world over an HTTP Proxy residing in the Router, so there is no need for NAT between the private network and the unknown network. However, I have one device (Device 3) that should be able to connect to a set of public IP address directly. Because the unknown network can be also a private network, NATting might not be an option (due double NAT). Device 3 needs to connect a set of known public IP addresses and ports that cannot be changed. Device 3 can be isolated to another network logically (with DHCP configuration from the Router) but not physically. Apparently Device 3 cannot utilize the HTTP Proxy (CONNECT) provided by the Router. Can I somehow configure my router to allow Device 3 to connect any public IP, and if yes, how? 

That is worker recycling as the configuration directive sets. I (reasonably) assumed PHP-FPM would courrectly process any accepted connection/request before recycling the worker, as this task does not imply any kind of emergency. 

then use in combination with 3. ?dct=portfolio_ -> ?dct=services_ Finally, to redirect old domains to new ones, it is the kind of arguments filtering explained on the link provided by @wurtel, although I would once again use a map instead of . 

Using prefix locations, you ensure that whatever ordering you use, the result will always be the same. 3. Minimal configuration Here is a minimal configuration aiming in the direction of what you wish. There is no obvious translation rule from 2xu-glid to Glide%20SX%202012%20-%20%20Super%20Partno. If that depends on non-trivial conditions and complex checks, it is probably better to use scripting to do it. Using inside nginx is dangerous without knowing what you do and could wreak havoc. You can also use a bunch of nested locations to split your translation rules into modular units. Note that I use a single rewrite here, so it does not need a flag nor does it need to be enclosed in a location. That is because there is only a signle way that configuration might be resolved. Also note the use of at the end to ensure no file is ever tried to be served (the default behavior, when no suitable location is found, is to try to serve either a file or , depending on whether the URI ends with ). Since no is defined, the default internally set would have been used. 

Is there any other way to ensure that I'll get an exact (~5 seconds window) dump from a certain, defined time this way? 

The PHP application will reply with when it needs some time and space, making nginx to "move forward" to the next upstream that is apparently the same server. Unfortunately nginx does second call in milliseconds. I'd like to delay nginx second call by a few seconds to make sure that PHP backend is fully up and running after the erroneous situation. So, how to add proper delay before the second try? Behind the scenes, I need to recycle the whole PHP-FPM process due how MongoDB driver handles replica set failover. That's why I can't handle the case fully at PHP level but need to release the PHP process for a short period. 

I have a common puppet recipe for a set of our servers. One of the puppet-managed files is that contains the original , and entries. The problem of the common file here is that all cronjobs are run at the exactly same time in all of our servers. For example, daily backups consumed all our backup server resources as all servers are feeding it at same time. What is the preferred way to randomize the exact minute of the daily/weekly/monthly runs between servers, while still keeping the puppet recipe common between all servers? I have been thinking a few different options: