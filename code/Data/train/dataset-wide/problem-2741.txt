Exercise description: Find the most common number in an array of numbers. Create a software that takes an array of numbers as parameter. The return of the function shall be the most common number. Example: Assume that the list is ... 1, 5, 1, 3, 5, 5, 2. The program will output 5, because this is the most common number. Note that if there is more than one most common number, the program will just print one of the most common numbers. My solution (written in TypeScript): 

Task is basically: "Write a function which takes two number as the first two parameter. The third parameter is one of the arithmetic operators (+ , - , * , /). Execute the arithmetic operation (number1 operator number2) and return the result of it." Here's the first idea I've had: 

I should mention that I've tried to implement everything based upon what I've understood in the corresponding lecture. I avoided to lookup the internet. Instead figured out everything myself to become more confident with these data structures. I seems to work alright. But I'm sure there are flaws. Perhaps even errors. So therefore: All hints, comments and suggestions concerning improvements highly welcomed. 

They let automated tests run upon the code. It passed that test but I'm still not sure about it. So therefore: I would appreciate your comments and hints concerning my implementation of the described task. 

Currently it is necessary to write certain mandatory code in HTML and CSS. Afterwards the JavaScript function can be used. Should I try to concentrate more on JavaScript only? I mean: Should I try to reduce the mandatory HTML-, CSS-code to a minimun? Or is Okay the way I have done it? The parameter of the JavaScript-function are optional. But actually the first parameter (CSS-selector) is mandatory for the function to work. If it isn't correct to code will silently fail. Should I change that? Return with an exit-code which signals an error? Perhaps even throw an exception? Looking forward to read your opions about the points I have mentioned. Other hints would interest me too. 

I still like the eval-version a bit better. Can't see any harm which eval should create here because it's controlled via regular expression what is passed until that point. What's your opinion? Which implementation is better one? Looking forward reading your answers. 

After reading a bit about CSS3-text-shadows and seeing a few advanced examples I had the idea for a "neon light"-banner. Next idea was to animate it. Finally it has become a mixture between a Sass-mixins and a bit of JavaScript. One more thing I should mention: It's a fun-thing. I'm not intending to use it somewhere productive. So I didn't bother about namespace, globals etc. Here's the code ... 

After learning a bit React in the last weeks I've decided to make a toDo-list. I've got the basic-functionalities (create, update, delete entries) finished. I'm going to enhance the app with a feature for to define priorities. Moreover should it be possible to change the order of entries. For the final-syling I'm going to use Foundation. But before going on I would appreciate to read the opinion of more experienced React-developer. So therefore: Any hints and recommendations concerning flaws and possible improvements welcomed. 

But I'm sure there's a lot of room for improvements ... So therefore: Hints and comments from more experienced Assembly programmers very appreciated. :) 

Because not in a special hurry I've avoided to search the internet for other (already available) solutions. So the code above is the solution which came to my mind. It seems to work as expected. Please see the added testing. Nevertheless I like to ask: 

First of all: Very long lines are stressful for the eyes to follow. So using more line breaks would be nice. Second: You got an error in your code. Third: I would structure it different. Might not be the ideal way. It's just the way I would do it: 

Live-Demo on CodePen: $URL$ Finished with that I had to admit that the version with the array isn't actually less code. I personally still prefer the second approach with the array. Would like to read your opinions! Any hints how the code could be improved would also be appreciated. 

Working Live-Demo Is it all done in a good way and manner? What would you do differently and why? Looking forward to reading your comments and answers. 

It works well and it has passed the automated tests. But I'm unsatisfied with the method "updateBook(int index, String title)". That's just too much code for to accomplish such a simple task. In my opinion. In JavaScript they have these method "splice". I guess that won't work in Java because Array-sizes can't be changed after construction. Nevertheless: Is there a better way to write that method in Java? Other hints, comments and recommendations concerning my implementation welcomed too. 

Following exercise: "Write a program that takes a number (of size 4 bytes) x as input, and then reverses all the bits of x, and outputs the result. By reversing all bits we mean that the bit with original location i will move to location 31-i. Small example (for the 8 bit case): if x == {01001111}_2, then the output is {11110010}_2. In this example we reversed only 8 bits. Your program will be able to reverse 32 bits." Full exercise-description can be seen here: XORPD GitHub I tinkered out the following idea. Please take into account my comments too. 

The URL of my Codepen (with Babel-support configured) : $URL$ Just in case the ES6 syntax shouldn't work in some browser ... My uncompiled Sass-code: 

Create a div-element and take control over it using a Vue-Instance. Print an array of hobbies into the div-element. Provide some default hobbies. Add a 'New Hobby' button and a text-input element. So that the user can add additional hobbies. When a hobby list-item is clicked, it shall be removed from the list. Add a "Hobby deleted"-paragraph which is only shown when a hobby-item has been deleted at least one time. Above the list of hobbies add a hobby-counter which shows the current count of hobby-items. Style the hobby-list depending on whether you have more or less then 3 hobbies in the list. Outsource your hobbies (the list-item elements) into a component (so that it becomes re-usable). 

Please compare the result on the screenshot with the example-value from the exercise-description. What to think about my solution? Is it valid? Or does it have to be improved? Is there a better way to solve the described task? Looking forward to read your hints and comments. :) 

I'm sure there could be improvements. So therefore: Any suggestions, opinions and hints concerning corrections and/or changes welcomed. 

Here's a working Live Demo. The complete project folder on GitHub. The recursion part is for to avoid weird looking delays which appear when the given string contains a sequence of more then one blank. What do you think about the validation part? Are there flaws with the validation? Is it exaggerated what I do there? And what do you think about my solution with the recursive function for to avoid a delay of the next character? Would appreciate your opinions as well as other hints, comments and recommendations. 

I try to learn (flat-, FASM-) Assembly currently. For to become more familiar with the concept of branching I made a tiny program. Inspired by an exercise I had to do once in school when learning PHP. "Write a program which takes an integer given by the user. The program then calculates and prints the square numbers from 1 to the given number." Here my source code. I have added comments in the code. Trying to explain my thoughts and motivations.