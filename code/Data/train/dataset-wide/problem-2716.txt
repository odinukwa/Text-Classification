Judging by the overall structure it looks quite good, I would change a few things though with respect to formatting: 

I do not fully get what your error handling code does though, there also seems to be logic ongoing which is not neccessary, all I see that you are really using is the method call to . Therefore I suggest to add the following to your class: 

I'd like the review to focus in particular on maintainability since I am new to user scripts. Also, please note that the structure of the content on the web page cannot be changed, as example some div' classes will be named weirdly. The userscript: 

could be rewritten as the following (I checked and is indeed an interface that qualifies to be a functional interface): 

The goal of the following code is to be able to use an Xbox Controller in a Java program, it works with the jinput library. Unfortunately this library is rather old, has little to no documentation and uses a polling system. There are some existing event-based (xbox) controller input systems, but most of them are embedded in 3D game engines, so I got the idea to make my own library, these are the ultimate goals: 

My project here works upon output that comes out of a Tesseract OCR scan using hOCR format, then I read it with JDOM 2.0 and finally save it one of my own objects, which at a later point needs to be serializable. I have spotted one major codesmell, which is a for-loop of 5 levels deep. An example hOCR output file: 

type represents the set of all values that can/can't be filled in a square. This type is specifically defined for storing bit-fields for representing a set of values. This follows the following convention: 

The following is the header file, containing the primary functions that are used in the evaluation process: 

These are the definitions of the generator functions. This shows the vital functions involved in the analysis process (the process to determine the priority of selecting blank squares): 

The signed integer values from represent the numbers in the Sudoku puzzle board. The value zero signifies a blank-box in the Sudoku puzzle board. 

Though this algorithm may seem to provide an alarmingly bad worse-time complexity, this algorithm almost never hits the worse time complexity regardless of the (legal) puzzle entered. List of types defined and used throughout the program : I. BoardGrid 

Rule-based search: This method involves identifying the set of blank squares that can be filled immediately with the available information. For each iteration, the amount of information increases, and eventually as each squares get filled, the puzzle board gets completed. guided brute-force search: The evaluation algorithm, on a high level, is a brute-force algorithm which relies on an analysis method which prioritizes the blanks that are to be filled first. During each search iteration the rule-based search is called to complete the evaluation if the amount of information on the board is sufficient (as each depth first search iteration increases the amount of information on the board). The analysis method that guides the depth first search: This assigns a weight value for each of the blank squares based on a measure which determines the influence of filling-in that square with a possible value. 

I could probably take a guess at what some of them mean, but you really should be one naming them properly. I would expect for example, not something named . You should not put multiple declarations on the same line, as observed in . Your method names and are very confusing, they sound like some mathematical operations to me and looking at the context I cannot figure out what they are supposed to mean. Your indenting is off at various places, there should be no white-space on the same line when calling methods, like in , you should be happy the compiler even accepts this. 

Streamify This suggestion can be a matter of taste, but I believe a piece of code written in a functional programming variant is easier to understand than some calculations involving loops and more importantly it is less error-prone as you cannot possibly implement the method incorrectly! 

I decided to roll out my own EventBus system which is intended to be thread-safe. Hence a review should focus extra on thread safety apart from all regular concerns. The can work in two ways: 

I have decided to create my own , because I wanted some abstraction and a couldn't give enough in my opinion. I'm also using the class, as I really like how it is being used in JavaFX 8 and figured it would be useful. The basic properties of a cursor are: 

I had written a Sudoku puzzle solver that accepts puzzle boards, and completes them with the least possible time. Rather than purely depending on brute-force, my algorithm first attempts to fill in the squares that have an obvious solution. And for each square being filled this way, the amount of information increases (I.e.., more number of squares get filled which aids in filling in the remaining squares) which makes the further iteration process easier. Once this method fails (this happens if there isn't an obvious answer to fill-into any of the squares), the algorithm immediately switches over to brute-force search. (Note, the source contains a few spelling mistakes, like the word recursive misspelled as Recrussive. Please ignore spelling errors. Anyway, it has been a while since I touched this code, and this was my first object oriented code written in C++). The basic working (High level view) 

The program first determines the set of all possible values that can be entered into every blank square in the puzzle board. The possibility set is determined by iterating through the row, column and the block, and eliminating the set of numbers already present. The possibility-set is stored as a bit-filed value for each square. Every blank square with a single possibility gets the number entered into it. The algorithm is repeated from the first step again, until there isn't a square with just one possibility. If there aren't any blank squares left, the current board's state is returned as the result. It chooses a blank square and enters a value into it. The process of choosing the blank square, out of all the available blank squares is guided by an analysis algorithm. The value entered into this blank square is chosen from all the possible values that can be entered into the square. A recursive call to this function is initiated with a clone of the current board's state. Note that the current board state now contains the modification done to it at the 4th step (entering one of the possible values). Steps 4 and 5 are carried over until all the possible values in each of the available blank squares are tested with, or until the puzzle gets solved. 

Min/max position locators in class This is essentially the same as the previous suggestion to use , but I'd still wrap it all up so the mainline code doesn't have to see how it's implemented. This way or that, it's significantly cleaner, with an appropriately-named . 

Shorter is good, but which reads nicer? Which is more communicative? With static imports, you're still left with: 

Justifications (working backwards) PageAreaCollection Static utility methods strike me as un-OO, particularly when there are other options. Create a type, with type-appropriate methods: code shrinks, and reads better: 

Don't put type into name ( etc.) Lose the Hungarian; appropriately-short methods remove its utility. Create an and method to get specific coordinates. Create and methods in a taking an . 

Essentially the same if needs to be in the collection. My quibble with having the method in the bounding box is that it makes getting the position a bit bulky; I'd actually prefer this: 

IMO the amount of extra work/code to remove the method from its rightful place (a method of a collection) isn't worth the effort. in bounding box The and utility method could live in the collection, too, if the bounding box class isn't yours to finagle. 

For me, these things progress in stages. The first thing I noticed was that the logic of the two chunks was identical, just using different values. In my head: 

I'm not an expert on HTML, but I am quite decent in using it and can give you the following pieces of advice: 

I'll review this code with keeping in mind that you want to leave Apache Spark intact, as you intend to use it in the future for purposes it is intended to do. I strongly believe that your current code can be written in pure Java 8, though that is not the point of the question. Use lambdas wherever you can! This will greatly enhance readability of your code. As an example: 

In general I would never let Reflection do such a task, I would add with the following code, either a public constructor taking all arguments of the object (which you can get from the ), or if there are too many arguments (more than five usually), you can also emply the Builder Pattern. 

The method where the real deal is being done. Here you set up the mappings and convert your data. A tricky fact to observe is that in it has a , which is really of type , hence returns , but since we know that it is of type , we can safely cast it to . I've verified and this code works on Java 6 minus . The code should be called like: 

I just created the following code and am wondering whether it is logically correct (all other feedback is of course also welcome): 

This Sudoku puzzle solving algorithm follows a brute-force approach mixed with rule-based approach. To further improve performance, an extra analysis step is added, to determine which squares to be prioritized while choosing it to be filled. The priority value is inversely dependent on the number of possible values that can be filled into a particular square. This value is used in computing the priority weight value of each of the blank square that is to be filled. This priority weight value helps in ordering which squares must be filled first. 

The value represents a null-set. The values starting from to represent the values in the Sudoku board. For example, the bit-field value represents the set of numbers: . Therefore, unlike this stores multiple numbers in an integer field. An object of this type is used for holding the possible list of values that can be inserted into a particular square. 

This holds the priority value of each square in the puzzle board. This is used during the evaluation process, where each instance is sorted based on the . A detailed explanation will be provided in the later sections. 

The class's function solves the entire puzzle. Understanding the functioning of this function will be enough to understand the working of the algorithm. The following, 

The following defines bit-field values associated with each symbol accepted by the sudoku board puzzle: