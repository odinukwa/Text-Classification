Poptop doesn't seem to have any support for IPv6. And its maintainers recommend you don't use it anyway, for security reasons. 

Either of these distributions will receive important security updates in a timely manner. As for overall security I'll have to give the edge to RHEL/CentOS, if only for shipping with reasonably secure defaults for all common services, as well as SELinux enabled and enforcing out of the box. All of the Debian and Ubuntu boxes I've had to manage have needed work to secure their services. Even so, this is pretty minor. For the most part, I think this is a non-issue, and your choice of distribution really needs to be made on factors other than "security". 

Finally, I'll do a traceroute and look at the actual network path taken to reach the IP address. In this case... 

You are using Docker on a system with SELinux installed and enforcing. Under SELinux, files meant to be shared from host to container must be given the appropriate SELinux context, . So you need to set up the appropriate file context: 

Assuming you're using rsyslog, which is the default on Debian squeeze: Use rsyslog's mail output module to send yourself email. You can configure which messages get sent to you in the usual way: 

HTTP cookies are a hot mess. There is no real standard; the RFC, for what it's worth, merely attempts to document what actual user agents are doing. In any case, the RFC you probably want to read is RFC 7235, which specifies that proxies are supposed to send a Proxy-Authenticate header with the 401 error to request authentication information, and user agents receiving this are supposed to retry the request with a Proxy-Authorization header containing the authentication information for the proxy. A number of challenge/response methods could be used to supply this information; the most widely used being "basic" (RFC 7617) as pretty much everything that speaks HTTP implements it. The IANA maintains a registry of known HTTP authentication schemes. As a general rule they use the HTTP headers named previously, or they are noted to be noncompliant. None use cookies for authentication. Whether it's allowed for a proxy to add or change cookies, I can't say. The RFCs really don't seem to be very clear on this point. It's certainly unexpected behavior, especially for authentication. And BlueCoat has a long history of being mediocre in quality... 

So I speculate that something went wrong with the domain transfer, and you need to contact your registrar to have it fixed. 

I think the best solution for this problem is going to involve multiple things. None of them involve blocking bots. 

This is a systemd unit which is capable of instantiating multiple copies of a server with different configurations. To use it, specify the name of the instance you want to use. For instance, your existing configuration seems to have the name : 

You start by going to another certificate authority. CAcert.org certificates are not recognized by the most common browsers. 

You're missing a line in your . Start with the standard default .htaccess provided by WordPress, and I think you will find your problems go away. 

I don't see why not, but your web application needs to be very explicit with Cache-Control headers. While the default for http is to cache, the default for https is not to cache (note that these are not official, but what browsers commonly do). If your app relies on the default behavior and does not set Cache-Control appropriately on every response then you may find strange things happen when you switch to https. 

The long-term solution is probably to stop using OpenVZ. I have yet to find a single public OpenVZ provider which manages to run a decent configuration. 

A Vagrant KVM provider exists which uses libvirt for controlling the hypervisor. Thus it (in theory; I don't know if the provider implements it yet) can be used to deploy either to the local workstation or a remote hypervisor. A Vagrant libvirt provider exists which provides more general provisioning via libvirt, and thus could (again, in theory) be used to provision VMs on any libvirt-supported hypervisor, such as KVM, Hyper-V, ESXi, etc. 

Vixie-cron was replaced with Cronie in EL6. Likely it wasn't installed in your "minimal" installation; they really do strive to be minimal with it. 

DD-WRT had a public status page (which can be a security risk); OpenWrt does not. However, LuCI does have an API, so you could write your own status page pretty quickly, and secure it properly. 

RHEL 5 / CentOS 5 cannot boot with UEFI, but Hyper-V 2016 creates Generation 2 virtual machines by default. These always boot with UEFI only. To install CentOS 5, you will need to create the virtual machine as a Generation 1 virtual machine. WARNING: CentOS 5 is past end of life. You should upgrade to a supported OS distribution immediately. 

It says Administrator successfully logged in via Remote Desktop from somewhere in South Korea. If the administrator isn't in South Korea, you've been compromised. 

You should use subscription-manager. For connecting directly to Red Hat, Red Hat Network Classic has been deprecated and this service will end in July 2017. You're expected to have switched all systems over to subscription-manager before that time. This doesn't entirely apply if you need to connect to an older version of Red Hat Satellite. In this case you can continue to use rhn_register to connect to Satellite. 

Debian jessie includes ipset 6.23, so that should be no problem. But because your VPS provider uses LXC, you will need to ask them to enable ipset to work in your container. 

Your is not within the block to which it pertains. It's outside the block, which is not allowed. If you tried to reload nginx with this configuration, it would refuse to load and continue with its old configuration. If you tried to restart nginx with this configuration, it would fail to start. Put the within the block. 

The problem with tricking the computers is that, while the clock will appear correct, the actual times stored in the system will be one hour wrong. Eventually you will get a timezone update for your operating system, if it is still supported, and then the time errors will appear. This is how you deal with timezone updates generally (the right way): For Linux systems, including Linux based NTP servers, you don't need to do anything except to ensure that the package is kept up to date. This is always updated as far in advance of DST changes as is practical, as it is maintained by the IANA. In fact, it already accounts for Ramadan in 2016, 2017, 2018, 2019... I didn't look any farther. For Windows systems the issue is more complicated. Microsoft have a poor history of distributing timezone changes in a timely manner, and particularly with Morocco, where in 2014 it distributed a hotfix for the Ramadan DST change three weeks after Ramadan started! In any case, at the moment you should have correct time until Ramadan if you have applied the December 2014 cumulative time zone update. Microsoft states they will distribute a hotfix to account for 2015 Ramadan at a future time. Especially with Microsoft's terrible track record at distributing these updates, you should try to push them out as soon as they are available. If Microsoft have not made a hotfix available before Ramadan, I would work around the problem by using a GPO to change the system timezone on all Windows systems to GMT, and then change it back at the end of Ramadan. As noted above, Linux systems do not need any correction. Finally, note that Server 2003 is going end of life and will not receive further updates. This means it won't be possible in any reasonable manner to update its idea of daylight saving time. You should decommission any remaining XP and 2003 systems as soon as possible (not only for that reason, but for all the other reasons). 

You seem to be trying to install packages from the repository (and for PHP 5.4) but the repository isn't enabled or not present on your system. If you haven't already installed the remi repository, do that now by installing the appropriate remi-release package. Then you need to edit and change to for the repositories you wish to use. For PHP 5.4 on EL 6, you must enable both and . You also need to have the EPEL repository installed in order to use remi, though it seems you already have that one.