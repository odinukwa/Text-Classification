I have a number of suggestions: Exceptions I don't think your constructor actually . Remove it? Braces in if-blocks Use braces even for one line if-blocks. 

just a few ideas from the top of my head. I would define a variable with your start directory at the top of the script, so to that you can always refer to absolute paths in contrast to using often. In case you ever change the structure of your script, this will ensure that everything keeps working. 

I think the is not needed, as this is the pre-condition for adding a method to . Code Documentation Your code is lacking any form of comments in the code. In my humble opinion, at least every public method should be commented. For developing it might be useful on private methods as well. For example to me it is not obvious (by reading the method names) what the difference between and is. Comment ratio depends on your personal taste a lot though and is very dependant on the methods' names. Other Comments could probably be inlined. It is only used once in . : Maybe rename to to: or similar? : Maybe rename to or similar? : Maybe rename to or similar? Someone with more expierence implementing anotations than me should probably answer your questions about the annotation implementation, so I'll not comment on that. 

As for the structure, I'd probaly create all the directories in one 'paragraph' and add the templates in a second step, just so that you one place where you can clearly see which directories are being created. But that might just be my personal tast. In the template creation I'd use absolute paths here as well, using the new variable. Keeps you from having to navigate around a lot using which might cause confusion later on. Hope this helps! 

The most important thing is to be consistent. You had essentially zero spaces in your loop, but you use them here: 

I use the following query to get 100 phrases (for two language pairs). This requires limiting the results to the language pairs, then finding their translations in the table: 

This is probably the noobiest SQL question ever, and I'm almost positive there's a or something in PostgreSQL for this, but I can't find it so I'm using a naive method. Here's a bit about my schema: phrases: 

I can't think of a more efficient way to pad a binary string appropriately... I don't think that there's any need to improve the method as it's now obsolete compared to . However, is there any way that I can improve ? PS - magic number 8 would be a magic number that never changes, so I don't think I need a or anything like that! 

I would suggest following just about any style guide (but let's say particularly Oracle's) when it comes to white space. For example, the following loop is far too difficult to read at a glance: 

Variable naming It seems that you're trying to shorten your variables too much: , , , , etc. are not fantastic. It takes more effort for the reader to understand these names as they're used. Instead you could use something like , , , , etc. Those are a lot easier to follow. I would definitely avoid naming anything just i, because are almost always used in loops (as you've done yourself!), so using to name a is not a good idea, primarily because it's misleading due to the conventional uses of . 

I agree that the String should be left out of the name, as this is quite obvious in StringUtils. How about this short version? 

Start parameter adjustment The adjustment of can be done before entering the while-loop. Making the while loop shorter and easier to understand. I suggest placing it at the beginning of the function, as you are adjusting an input parameter. Some people think it is bad practice to overwrite a parameter's value, but that depends on your personal taste. I think it is ok in this case, if done at the beginning of the function. A different way to handle the situation of an incorrect input would be to throw an exception, because clearly the input is incorrect. Documentation I'd sugguest adding some comments to at least your public methods, so that the user of your utility function knows how to use it properly. This would also be a good place to document how you handle incorrect input (e.g. the correction of the start value to one, in case the entered value is smaller than 1). Pattern as static variable As the used pattern for splitting is a constant, you could handle it as such buy using a static attribute like this: 

I like the Idea of this very small framework and it looks like a nice way to measure runtime quickly. I just have some minor comments. If-Statement 

This saves the jvm from compiling the pattern for each new instance of the class. Micro optimization You can save yourself the boolean by checking instead.