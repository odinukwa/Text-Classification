I'm not really concerned with performance... I know about the various sieve options (Eratosthenes, Atkins) and decided that trial division for a single prime was adequate. 

That would show me that you're thinking about how your classes might be (mis)used in the future. I'd probably give you a F2F assuming your code ran correctly but we'd have a lot of talking points from this (a good thing!) As a mental exercise, can you justify why you've created the classes that you have? 

Edit: I realised that I've only given you an opportunity to create a single parallel line but I think it's straightforward to call the method more times with different offsets! You didn't show your class/struct but it's worth noting that should be at least PascalCase () but preferably renamed to something more like: and renamed to be or similar. As and are also public, you should PascalCase them too: and . 

I've removed your labels for the constructor parameters as I think it's fairly obvious without them. Cleaning it all up and including advice from other answers: 

I generally have a separate class for IoC container configuration but your code is certainly sane. The main method is a bit too long for me so I'd look at pulling out some additional methods: 

Then you could actually use 'correctly' as it will return false when you get to the end. To be completely and brutally honest, I'd still rage erase all of this code if I found it in a project I worked on. Why is it an enumerator of booleans? None of it's particularly obvious. As an aside: 

I think that's better because you've centralised your logic (I'm not overly fond of the name though). You could potentially remove the method from and put the logic in the extension method but that's up to you. 

I'll only focus on a single point: Why is the return type of ? Consider what the rest of your API tells me: - interesting... Is that defined before a step is run? I doubt it. You're also relying on exceptions for control flow: 

3 It's better to be in the habit of using and to avoid subtle bugs caused by type coercion. 4 is better written as 

Other than that there's some style points that could rely do with some work: Classes should be named in Pascal case (upper camel case). should be . Methods should also be Pascal case should be . What the hell is even doing. Don't mix concatenation and it kills a puppy. 

The second output has 1 fewer 'character' in it. Using NormalizationForm.FormD decomposes the string into its canonical form. I could have written but I would have had to look up the modifier character (which, I've ended up doing anyway). 

Break the underscore key off of your keyboard. Just use camelCase for variables. Edit I think one of the other reasons for saying it isn't very OO is the fact that your CalcTax method (should be CalculateTax) takes a list of parameters when it would be better served by taking a object. 

You can't currently play with the numbers on the numpad of a keyboard - they have different keycodes to the numbers along the top. It's normal to function names rather than . Avoid abbreviations e.g. the in . - isn't a keycode at all, it's an . Try to remember your semicolons - it's not required but many people (myself included) prefer to see them. There are a couple of very subtle edge cases that can cause problems if you omit them. is evil. You really don't need to invoke the interpreter to do a simple sum! Here's an example of a simple constructor function (and usage) to show you a way of doing it without . 

I'm not a crypto expert so I'm reluctant to say much more... I can't help but feel you have over complicated this code though. I'd rip it all out and use the default implementation see here which (as the comment states) uses PBKDF2 with HMAC-SHA256, 128-bit salt, 256-bit subkey, 10000 iterations. 

I think I remember reading once that the memory usage of a is 12 bytes per entry + size of the entry. So you're looking at 12MB + 1,000,000 * (2 * accountNumber.Length). So basically nothing in the grand scheme of things. However, you are gaining constant time lookups which should be a huge benefit to this kind of work. 

You're making life harder for yourself by not allowing the delegate to have a return type. You could create an overload that accepted a instead. 

Note that is so much more useful than just the message. You'll get the type of the exception, the message and the stack trace. 

That is a detail but you're tying to it! It should be possible to replace that dependency with a different one if you want. The standard way of doing that is with Dependency Injection. e.g. using Constructor Injection: 

I would definitely use a regex for this. It might not be the most performant solution but I think it's the simplest. You can handle the nesting problem by making the quantifier lazy by appending a to it in your pattern: 

Great! The main method is now much shorter and easier to reason about. However, we've just moved the problem elsewhere. So let's look at the piece: 

But, we can go further. You should prefer returning interfaces rather than concrete representations. Do you need indexed access to the EndpointAddresses? I doubt it, return instead: 

As for your question about directives: should be killed with fire seems like a good candidate but execution isn't great (will come back to this if I get time) By removing the directive you can change your view to: 

You'll notice that I've changed the name of the parameter to culture name as I think of code as being the numerical code see here. So: 

E.g. for number 2 at the least you'll have to escape to and escape any which is not part of an escape sequence (or just always escape it). 

I'd suggest that you aim for consistency with your generic type names too. Why vs ? I'd suggest for both. You could do it just with a foreach: 

I've also added braces as I prefer that. Edit: Modifying to not use shaves about 1% off execution time (mileage may vary). Further edit: Accidentally ran the test for speed comparison on Debug. Running on Release with no debugger 10 million iterations averaged over 5 runs: With - 311ms With - 287ms 

For what it's worth - I'm going to give you a Linq alternative which on my machine is comparable to your solution in terms of speed (on a smaller file though) with significantly less code. 

No it doesn't. represents the prefix of an IRC message. The constructor is the thing that is parsing a message for a prefix. 

As I mentioned in a comment, your main method isn't really helpful to see how you intend to use this because it's using an undeclared and is the name of a type which makes it look like you're calling a static method. I assume you have some fields or properties with these names. I'm mostly going to limit myself to your class. It has very confusing behaviour in at least 2 ways: 

I would say that I don't generally like generic repositories but I won't get in to that now. A lot of people use the pattern and I don't know of any canonical 'this is bad' sources so am happy to disagree over it. One thing you do need to consider though: multiple column primary keys. That's why takes an array (params). You're making a method that will throw if the object has a multiple column primary key (). 

I needed a priority queue so I used the first one that came up in Nuget for that search (OptimizedPriorityQueue) which provides the class that I use in the implementation: 

I'm not going to blame you for the database schema but storing passwords in plaintext is evil. Only allowing integers makes it even worse! I'm going to assume you know about hashing passwords from your Java background - if there's any way you can implement that here - please do! Are you aware that you're also reducing the security by parsing to an int? and are not the same password as but your code will treat them as equal. FYI, users don't tend to like exclamation marks in messages. 

That should be a method by itself! It's basically the most unreadable variable declaration I've ever seen (sorry if that sounds harsh). Then there's this: 

It also looks neater if you use consistent capitalisation. E.g. should really be . Although, I don't do all capitals SQL - I've never really seen the benefit. Combined with Heslacher's answer: 

Magic numbers make code harder to follow. Why are , and significant? I have no way of knowing what they represent from your code. 

You should use parameterised queries. Other comments I prefer to see all SQL keywords capitalised or not (I personally just go all lower case and face the wrath of my colleagues), a schema on your table name, PascalCased column names and a list of columns to be returned. Also confused about the name "tblOperator" - it's fairly obvious that it's a table you don't need to prefix it. All of the other comments I'd make about not disposing resources etc have been mentioned already but one other thing I'd note is that I've worked with data access layers (written by others ;)) passing around data tables - it becomes an absolute disaster. You should return strongly typed objects, e.g. an class. You could invest in adding an ORM like EF or NHibernate but you can also write the rehyrdation code yourself. 

The approach is a good one, you just need to copy the value of the variable. There are many tricks for that but you can improve readability by introducing another function . 

I think it definitely makes sense to use an object hierarchy here. What's the difference between a black and a white pawn? Its colour! (which will affect which way it can move relative to the board). All pieces must have exactly one colour, and we have two to chose from: 

But you'll soon see that the unit test above will never complete. I'm hoping that you can also see that the above code is really odd. Why should a labyrinth know if it's solved or not? I'd expect the test to look more like: 

Your namespace is far too generic - it's much better than but you should use something like in your real app. 

Notice that the second parameter is now an array declaring the names of the services/modules you require and finally your controller function (this is the recommended way). 

What problem are you trying to solve? I've left your code doing the same things but rather than interrogate the DOM each time I've cached everything in local variables. 

Now you don't need to look up the connection string - you can rely on the Enterprise library to get it for you: 

Shuffle the remaining socks to be paired Draw one sock at a time comparing to the previously drawn sock If the socks match, put them in the matched pile Otherwise, add the previously drawn sock to the unmatched pile Compare all socks this way Start again with the unmatched pile 

So firstly, read style guidelines and the naming guidelines. I'm not going to give any specific guidance here because I'll be here all day. Please read the guides. 

You'll notice that I've also declared the reader as an . It's generally better to code against an interface if you can. 

(My emphasis) You can read about best fit fallback here: Character Encoding in the .NET Framework. This is generally the canonical link for an introduction to character encoding (and why unicode): The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!). 

For what it's worth I think you've over complicated this. It seems to me that you care if you succeed or not and then want to pass as much information on to someone who can figure out what went wrong. The only 2 lines that are in the try block are parsing to doubles so just catch and beef up the information included. 

I've chosen IQueryable over IEnumerable as it looks like you're using entity framework. If you're not, feel free to use IEnumerable again. Then your queries look nice: 

Which is clearly incorrect. Your code is also needlessly complex - you should be able to do this with one iteration through the source array: 

I think there's a simpler algorithm here that leverages a . Note that I'm trading reduced complexity and time for more memory. 

All of those questions (and more) would need to be supported by your final design. If you just wanted to support 2 for now, you could track the up and down votes separately. As for your code, I'd split out the up and down votes and add a get only property called . Worth noting, if you plan on supporting multiple regions you have to store you dates and times unambiguously. Usually, that means storing in UTC. so 

But, delegates are hard to name when they're not used in an event handler... sounds like I can open anything. However, you add "Excel file" to the filter. I think you should remove the parameter and rename either the class or the method. e.g. or . would sound better to me as . 

It's seems really backwards to have a that knows how to write itself to a given . I'd strongly recommend revisiting this API if you can, familiarity is much better than clever IMO. 

Looking at the documentation for reveals a option that would allow you to cancel the request before it's sent by returning . 

I've added comments but I think the code is pretty clear. I've also modified the code a fair bit as we support quite a few different ways of deciding where to split. You'll also notice that it's greedy - I.e. it tries to keep the string as long as possible. 

As pointed out by mjolka in a comment. It would be advisible to implement () as well. See the documentation for why it's a useful thing to do. Further edit... It does say in the comments for but you should additionally override and e.g. 

That results in a and this is the wrong site for that! Your problem is and because you've defined to just be you'll infinitely recurse. Use ReferenceEqual instead: 

A better alternative would be to create a class to encapsulate gender, age and name. Chain of responsibility doesn't fit here IMO. You only have 3 independent factors making up part of a string - CoR is too complex for it.