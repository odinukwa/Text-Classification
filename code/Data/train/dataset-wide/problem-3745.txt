My boss, for the entire company's workflow, uses Google Sheets as a sort of feature-tracker/TODO-list. The company employs 7 people, aside from the CEO (my boss), who all work remotely. There are 2 software developers (myself included), 2 linguists, 2 marketing personnel and the CEO's son. I did once suggest to my boss that we at least move to a tool like Trello that functions similarly, but with much more flexibility. This was when he said that Trello would be a new tool that everyone has to learn, and he doesn't want to do that as everyone is already used to the "Google Sheet flow", and that it would be difficult for everyone to migrate. The problem is that if things are pushed into the backlog, as in "not important enough for this next release/campaign", they are often forgotten about. We will continue to add things to fix/add at the top of the list, and things that were low priority before become essentially non-existent. It's also hard to tell why we backlogged something because of the limited flexibility of Google Sheets, and having progress tracking is out the window. Here's an example from my Sheet (feature tracker) for a high-priority Android app fix that got mixed in with other work: 

Reviewing your current setup and get it in order to be able to sustain growth (scalability, power, etc.) Getting better service availability (less downtime) with a faster response time in case of trouble. 

From my (admittedly limited) personal experience, you shouldn't feel compelled to tell your boss about it. I had a great working and personal relationship with my previous manager, but really didn't feel like taking any risks with the president of the startup I was in. While I knew I could absolutely trust my manager, I also knew he couldn't just keep this to himself, and would have had to report it. So I kept it from him until I actually had to give him my resignation letter. It was a shock for him, but he understood, and we kept close contact even after I moved. We're actually going to a concert together this summer. While this is not be a proper answer to the question "should I tell my manager that I'm looking to quit", I feel it addresses the social aspect of the question. 

Prepare a list of things you're going to have to do for the client in addition to the project - i.e. if you're creating a template sometimes you have to upload it to the server and set it up for the client - it means extra work time and you should remember to bill for that. Same goes for extra consulting time over phone or email. After a year or two you will have all such issues on your mind and you will remember to bill the client for them. You can also tell the client that When you take on a project that includes some new technology/platform that you're not yet familiar with, you should take that into account - I belive that you shouldn't bill the client if you spend extra hours gaining new knowledge, even if it required for the client's project, unless the knowledge is client specific. For example if you want to take on web development projects using PHP & MySQL the client shouldn't pay for you to learn how to write a MySQL query or how to install a template in Wordpress but he should pay if he wants you to support/modify/patch his existing project written in PHP using some in-house libraries of some small software company Regarding fairness and to the point - if you spent the time for the project and handling client's technical issues then it is not zero percent progress - the progress should include the preparation steps as well. And if you spent the time resolving issues both of you had no control over then you should explain this to the client and he should understand that you've spent the time for him and you should get paid. Optimally all such issues would be in the contract and the client would be notified of the issue before you actually spend too much time working on it. If you want it to be completely fair then you can talk to the client, explain the issues and suggest to bill him by a lower rate for those specific issues, as @a_mediocre_riot suggested 

Aside: You mention that you want to be able to gauge a candidate's ability to write code, assess its quality an cleanliness, etc., right? Well, have them do some simple programming task that requires a bit more thought that the typical FizzBuzz questions (which are designed to weed out non-programmers, or incompetent programmers). Personally, I would aim for a question about describing a real world system in code, and not some complex algorithmic "mathy" question, but of course what you ask is dependent on your industry. 

The CEO of a startup that I work with has, unfortunately, grand ideas about software that we can build. It is in a field that I am interested in, so it excites me, but at the same time I am realistic - there are a dozen other companies that specialize in this software, and they have vastly more resources than we do (I would be the only software developer, and I work about 30 hours per month with this company). Let me be clear here: the software we're talking about has been in development by multi-national corporations for decades, incorporating bleeding-edge research and millions of users' data. We don't have employees, decades, nor experience enough to understand academic research in order to build and improve the system. How can I gently tell my boss/partner “dude, I really wish we could make this, but it’s literally impossible given our resources”? PS - I am on very good/informal terms with the CEO, so letting him down easy in a conversational way would be most logical here. However, I'm looking for a more diplomatic way to break this news to the CEO, especially considering how a manager/project lead would want to learn about the inevitable failure and potential damage to the company should such a project be persued. EDIT: this is clearly not a duplicate of the one proposed. Simply reading the question and answers shows that... 

If you would create such list it would be much easier to predict the amount of work - you won't have to think about the whole project but of each separate element/point It would also remind you of the possible issues you could come across As a bonus the client would know exactly what he's getting and for some problematic clients the list would prevent them from demanding extra work that supposedly had to be done in the same project and if some extra issues arise, that weren't mentioned earlier then the client should be billed for them but you should always tell the client in advance that if for example you have to upload the files for the client, instead of just zipping and emailing the files to him, then he must provide the correct account credentials and if there would be a problem with the account then he will decide whether he wants to pay you for handling the issue or he wants to call his hosting company and get their support to handle it... 

Sharing code with an interviewer is a blatant violation of the Software Engineering Code of Ethics and Professional Practice: 

There are probably more benefits... How can I start a discussion within the company to migrate to a better workflow management tool? 

I am a freelance software developer and have three clients that I communicate with via email. I have mobile and desktop notifications set up for my several email accounts (work, personal, university). If I see an email notification, I will generally stop what I am doing in order to respond, even if the email is from a client that I am not currently doing work for (I stop/start my clock accordingly). My average response time is about 5 minutes if I am currently in a situation where I am able to respond to an email. I feel that I have given my employers the impression that I am always available. Should I be waiting an hour (or a few) in order to respond? 

This is a great question, an issue I believe many freelancers come across at the beginning. I think you should split the question: A. How can I correctly predict the amount of time I will spend for the client ? B. How can I get the client to agree to pay for the time I'm gonna spend ? C. Is it fair I'm gonna spend my time on issues other the specific work for the client and possibly won't get compensated for it ? 

The problem will partially solve itself once you gather more experience handling such issues as it will take you less time to handle and you will take such issues into account when you predict the amount of time it will take you. A nice tip is to double (or even triple) the hours you initially predict as there will always be some surprises When the client approaches you with a project you should create some sort of technical specs for the project or at least a list, specifying all the elements you will handle for the client. Afterwards you should make it as detailed as possible (don't worry - it will go faster once you get the hang of it) and once each element is detailed enough it should be easier to predict the time for each element. You don't have to show the complete detailed list to the client but I find that showing at least bullet points allows the client to remember extra issues he forgot to mention, both of you will know what you've signed up to do and as a bonus you will be able to explain why it would take the time you're asking to pay for. As a simple example - if the client orders a login form then the list could be: 

It'll most probably get more expensive at first, but on the medium to long term it will be way cheaper and you'll get a better QoS for your players. 

I feel like there is no written rule for this. You want to give them something that will help them later on, so I think the first thing to do is to be sure they want to take it. If the interview is going well, and you feel like the interviewee is feeling relaxed and/or confident, you may evoke his grammatical mistakes. Judging by my own situation (not a native english speaker), I'd gladly accept to have my resume looked up and corrected by a native speaker. On the other hand, if you feel like the candidate is getting crushed during the interview, he's going to have other things on his mind, and at best it'll just elude him. In any case, I'd refrain from starting the interview with such feedback. If I were to receive such feedback, I'd rather receive it at the end of the interview, probably after the questions window, like a casual tip rather than something that could be interpreted as criticism, but before the end as I could want to discuss this feedback. 

This sheet is now about 75 lines long for the next version release of the app, with some duplicated information and no visual organization except "what's on top is most important". I've been testing out some free workflow/task management tools for the past few hours (on my own time) and I am convinced that it would be beneficial for all the employees of the company to use such tools. What benefits about employees and management can I use to convince him that it's actually a good idea? I've come up with the following: 

From your question, I'm guessing that the candidate did not get permission to share the code. Code is owned by the employer, and confidential, unless stated otherwise; so, in this case, this is unethical behavior and you absolutely not accept the code. In fact, dismiss the candidate immediately. Edit: To clarify, the ACM's SE Code of Ethics is not law. It is a simple set of guidelines as to the "do's and don'ts" of our industry. However, many universities and employers are adopting the code as our standard set of ethical guidelines, making sure that students and employees are aware of the code, and follow its practices. E.g. in my computer science degree, I've had at least 4 significant projects involving the SE Code. Many employers in my area also test candidates with ethical questions during interviews, expecting them to have knowledge of the SE Code and to employ it in their responses.