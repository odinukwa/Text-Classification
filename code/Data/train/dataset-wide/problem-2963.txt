Are useless in code. They should be in a product backlog or something like that (An issue on your Github, a note on a napkin on the side of your desk). Keep as little comments as necessary. But I understand, right now, that it means this code might not need to be reviewed as it will change. Don't use brackets when it's not necessary like here : 

You have a problem with your disposing. The method is like cancer. Once it's somewhere, it has to be in your whole object graph. Because if I dispose my , wouldn't I want the to be disposed too? So, should implement too and call . Since your is shared between all your (from what I understood), shouldn't its clear the list of ? Also, maybe you'd need a method , so that if I don't want to be notified by you anymore I can unregister myself from your observers. Overall, I must admit I feel there's something wrong with your approach. It'd be good to see what the class looks like (because I feel you should have one. Some code in will be repeated in all your child classes otherwise). But you have a good at disposing of the observers, your naming convention is perfect and you're close from a very good pattern! :) 

This could be extracted in a method but beforehand, we need to create a small data type for your anonymous type because methods cannot return anonymous types. 

These comments don't really need to exist because the person that can read the comments should be able to read the code. And the code should "tell" exactly what your comments are saying. Usually, comments are used to explain a complex piece of code or to provide additional documentation in regards to the code. Exception handling 

Try and keep it the same way everywhere. (This order is out of my hat, it doesn't exactly respect the C# coding standards if I'm not mistaken). 

You use in your , this represents a max value of 18,446,744,073,709,551,615, which seems a little overkill for your situation. I'm pretty sure an would be enough, as the max value is 2,147,483,647. Also, your method being named , it is difficult to assume that it is going to return a . I'd think it would return an , as all the methods named in the .Net Framework. You could name it , otherwise it seems like will return the number of character in the instead of the number of times each character appears in the . 

Since we don't want a separator at the end of the code, we need to do , and we need to see how many separators will be neccessary, hence the . 

Now, your logic is separated in multiple methods, which is better but not perfect. If you want to push this even farther (for testability for example), you'd need to implement an , let's say (I can't tell more because there's a little lack of context). So now we'd have : 

Now, the explanation : Having the interface, you can do dependency injection. (If you don't know about this, you might want to look at it on Google, it's quite interesting/important I think). Now, the client of the repository doesn't know it is using a , you remove a dependancy. Also, if you wanted to test your class or change the implementation for a repository that uses NHibernate for example, the client () wouldn't need to change its code. You would just need to set the parameter to another implementation. From my experience, too much abstraction with Entity Framework makes you unable to use the to its full potentiel. Though, if you want to try and make a generic repository with a little more flexibility, I think you could implement a method, like @ba2887 said, though I'll explain why you should use it in more details. The method would look like this : 

Notice I've changed and for and . It's clearer! One could argue that and should be in the same method, and have slightly different parameters to decide which to show, but I think it's best to keep them separated. After all, maybe you'll end up asking for a feet/foot height as "5'1''" instead of inches. That way your methods can change their logic without impacting the other one. 

Neat, isn't it? (Well, I think it looks neat) Note that the C# is retroactive, meaning you could pass a there or a method with the same signature without any problems. So it doesn't make a huge change in your code but I think it'd be better this way. A detail, but your and members should be marked as read-only, no one should change that instance. I don't think nor should be . What's the point of having a centered event handler module if every listener needs to call or every one in awhile to see if there's new events they need to be processed? You might want to consider running the method on a timed thread or call it when there's a new event that is queued or when there's X events that are in the queue. That : 

If you want it to be , you'll need to read on the pattern again, because something is wrong. Finally, your API as a big security flaw. You're using an to update your database. What does that mean? It means that if I send http get requests or use Cross-site scripting to inject an request on vulnerable websites to your website, you've been hacked. Your data will be corrupted because nothing would stop anyone from sending thousands of thousands of requests to your site. You need to use HttpPost and to setup security measures on your website so this doesn't happen. Overall, you need to check how to use the and read a little bit on web security! :) 

I know it's a method, everyone will know it's a method. And the return is pretty obvious too. Keep it simple, where you don't think comments are a must, don't use them. It's your tool, use it wisely :)