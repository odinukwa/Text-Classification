The algorithm you used is the way I've always seen it - flooding the matrix. I think my sister had this question at her first interview, and I think she did it the same way as well. 

I'm going to be brutally honest, because I think it will do the most good for you as you look for a job. You say you "have the right frame of mind" and "just need someone to 'nudge' [you] in the right direction." You're way ahead of most of the pack, as you are capable of something much harder than FizzBuzz. However, this code needs a lot of work and a lot of reorganization. It's going to take time to learn the culture of C#, and it's going to take time to learn OO principles in an effective way. If I were you, I'd start writing a lot of OO code in C# in my free time and posting it to codereview. This is C#. You don't need to call on strings. Instead, do: 

returns the price plus the tax. If it's going to do that, I would name it . There's also a lot of repetition in the method. Find out the part that's not repetitive, and do that first: 

Instead of putting the logic in the method, we can change the header of the method and let it populate a list of items visited by that cluster: 

Sure, they could still pass bad values, but they have to try harder by explicitly creating an invalid enum value. Also, making it a scoped enum provides extra type-safety and prevents naming clashes. Either way, I think it makes sense to throw out of the constructor immediately if the key length is wrong instead of waiting until the function. If you want to enforce a valid value at compile-time, you can use a , or you can use a smart-enum pattern. This is an example hacked together real quick: 

I would get rid of the continues on the for loop. They can get rather confusing, especially with three of them in there. You can use and to do so: 

Use when you can. It lets the programmer know (reasonably well) at a glance that a variable will never be modified again. The variable can be declared as such since it's never changed. Also, returns a , so I'd probably declare it as such and cast later: 

Your code can benefit from RAII. For example by creating a small struct with a destructor to hold a single . Then you don't need to worry about calling in the correct places as the destructor will do it for you. 

You use lock locks in the get and release methods. This somewhat defeats the purpose of using the threadsafe pool. The getPoolSize doesn't need to wait on finishing the get or release as is thread-safe and the pool's size is fluid anyway when multiple threads are contesting over it. For shutdown you can use to clear the pool to another collection when shutting down: 

If you don't mind using more nodes you can simplify Node 2,3 by letting it ADD UP ADD RIGHT and MOV ACC, DOWN (and MOV 0, ACC) Then Node 3,2 and node 3,3 is a copy of node 2,2. This removes 2,3 as a bottleneck that needs to gather 3 values and instead will let the other nodes help gather them. 

Also don't worry about having to the args; you are creating a new thread, this is much more expensive than a quick call. 

Same in stack don't expose that it deals in nodes and don't let calling code access them. That way you have more control over the lifetimes. 

This makes it easy to change the semaphore to a fair one by passing true to the constructor. Though I expect you will want to implement the wait queue yourself as an example. If you want to go a step lower and no use the pre-implemented locks can instead use LockSupport which lets to park the current thread and unpark it from another thread safely. 

but you don't use it after that so there is no need to keep it anyway. You can upgrade the algorithm to A* by guesstimating the cost of the remaining path and comparing the . As long as the guess is lower than the resulting cost then it will remain correct. 

When you update the vertex' estimated distance you should signal the openQueue to update it's position in the backing array. 

You should also wrap the result of , and so accesses to them are also protected by the locks. This cascades downwards to include the iterators, streams and entries. The only thing you should ever return bare from the wrapped map is the keys or values themselves. Unlocking a LockWrapper or forgetting to lock it results in an error. 

Just pick one. Here I just return void, keeping with the semantics of the rest of the parameters (pass by non-const reference): 

Of course, then you have to fix the other parts of your program that use them. In addition, I'd stop doing assignments inside of parameter lists and and headers. It's dangerous to do so, especially as a beginner. Here I've changed the first : 

Using namespace std pollutes the global namespace. It's better to use everything with its full name (, , etc...) 

I'm almost alright with not declaring local variables though. The function names are descriptive enough, especially knowing we're traversing a tree: 

Consistency is important. The rest of your variables start with a lowercase letter, so name the variable in the same way: 

Another shameless linq answer that doesn't require reversing or creating a new enumeration and only goes as far as it needs to: 

I changed the logic a little, because seems to neglect to grab the item to the left of the current item. Also, in the for loop skips the entire row above the current item. I would add the enumerable in the traverse method into the for loop: 

It's also a little confusing that you return from to indicate that you want to keep running the program. I would probably change the name to and return to indicate that you want to continue. Float literals have an on the end of them: 

I removed because I don't think it's necessary. I would also check for malformed input, as can fail with an error, and can be something other than , , and . Before I got into the industry, I had flaky UIs that worked if you used it how I, the programmer, intended. There were quite a few ways to misuse it and break the program. One of the first things I learned on the job was that that was not going to fly. Ewan's answer is great for the OO principles, so I'll neglect to cover that. 

shouldn't be a property on the program. Nothing is going to be accessing the file, so if it's going to be in there, it may as well just be an instance variable: 

Since there are only three valid key sizes for AES, it makes sense to not even let the AES class be instantiated with any value. I would introduce an enum similar to this: 

Actually if there is any virtual function you should include a virtual destructor so proper cleanup can happen if you a and it happens to be a (otherwise the destructor of is never called). 

Euler project problems are best optimized using a different algorithm, the double for loop leads to O(n^2) while it can be much faster using a sieve method. I'll be keeping an array of all already found primes to test against. Besides that the inner loop should only run while (if there was a larger number that divides i then we would have found first) and put the sum part out of the inner loop: The if is true once in the inner loop at the final iteration, you can then move the code to the outer loop after the inner for. Using the array: 

There is no way for the producer to check if the queue is full. It will just overflow the buffer when asserts are disabled (which they will be in production). 

Instead of using a raw array to store the children you can instead use a . This will better optimize the allocations that you do. Using a map will also remove all the for loops for searching a key in a layer. 

Patterns should be pre-compiled and held as a static field to avoid recompilation. Using reluctant qualifiers we can match only up until the first closing tag. 

As for synchronizing if you only needed the consumers to run once you could have used a but that cannot be reset. So you'll have to use a . With a cyclic barrier you can make the producer the Runnable that gets invoked when the last thread calls its . Then you can be sure all but one consumer threads are waiting for the producer code to finish. 

Add a buffer length parameter and then use to avoid overflow. Your testing code hides the usage of the function. It's clearer to put it on a separate line: 

I see that your function actually does 2 things, computes the ranks and computes 2 averages (one filtered and one not) and the computing effort of the ranks is not reused for the averages. It may be more advantageous to split them out into their own functions. 

Capturing groups can be handled my marking some states as starting or ending captures. During simulation you then have a list per NFA state of captured substring indices that you propagate along. If the current DFA state contains S1 with a capture with an outgoing connection with to S2 and it sees an then the new state of the DFA will contain S2 with those same captures. If 2 paths with captures lead to the same NFA state then you discard one of them based on a priority rule that is filled in based on the greedyness of the operator that led to the merge.