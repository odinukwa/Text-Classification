But if you fix the code as I suggeste above you don't need this function. There is a simpler way to write this: 

So you have just allocated as much space as the original. So we are at . But then you make a recursive call. Which will do exactly the same thing (but with half the array). So we are at then you will recursively call it again. Eventually you will allocate a total of space (plus control structures). An easy way to get around this is to make your interface allocate the scratch array then call your internal merge sort passing the original and a scratch area. So the total amount of space you will use is (and only one extra control structure). 

Over Complex Singelton This is over complex because you are using pointers. It also leaks resources at the end (luckily no destructor) but there is a principle holds. You should make sure you objects are correctly destroyed. 

Lot of extra work in delete. I don't think you actually need tail. Bug in print. If the list is empty then your print is going to hit several places where it de-references a nullptr. Destructor can be simplified. You only need to loop over the list once to delete it. You don't need to unlink the tail from the head to make it work. Comparing pointers will still work after a pointer has been deleted. You just can't de-reference it after deleting. 

Getting close to a release of generic server. Nisse Server: Part 1 Helper Functions Nisse Server: Part 2 Socket Layer Nisse Server: Part 3 Stream Layer Nisse Server: Part 4 Server Nisse Server: Part 5 Handler As a demonstration protocol (also for testing). Here is a class that pulls it all together. With this we can have a function server that implements the "Simple Protocol". The "Simple Protocol" (is something I invented for testing) is simply this. 

First the move constructor you are doing the equivalent of a memory copy of the without taking into account the type of what is inside. But you are still applying the destructor to these objects. 

There is a slight problem with this. If an exception is thrown you will leak memory. That is why in C++ we use smart pointers to make sure delete is called automatically and correctly. But if you do as I have shown above you do not even need to call delete. Same comment as above. 

Technically you don't need to test all the numbers less than the number you are testing. Some have pointed out the easy optimization of only testing up to the square root of the number. But an even better solution is to only test the primes below your number. 

The use of exception specifications in C++ was an experiment that ultimitely showed it was a bad idea. The only useful specification was the no throw specification (and then only when you made sure it really was no-throw). 

OK. Putting the braces indented is something I personally don't like. But that is an accepted standard style so; though I don't personally like it you should be OK with that as long as you are following the coding conventions of your office. Be consistent with your indenting. 

The variables x/y/z are not used to pass information between different loops. So rather than declare them at the top declare them as close to the point of use as possible. You loops should look more like this: 

I also think I see a common sub expression in there. Extract that and assign it to a meaningful variable name to help document your code: 

To avoid the line being to long I put the initializer list on the next few rows (indented). This will prevent lines from getting to long. Also with more members you want to initialize one per line. 

This allows you pass your to a function as a const reference and still call these non mutating functions. Efficiency You may want to cache the sum in a mutable member. Invalidate it if the vector is mutated. There is no point re-computing this value if the vector has not changed. 

Avoid not using braces. It may seem like a waste of time. But get used to using them they will save you from bugs now and then and they do no harm when not needed. 

Yes in C it is traditional to put all the variables at the top of the function (so fine for C). But in C++ this is considered bad practice and sloppy. Declare variables as close to the point you want to use them (preferably just before you use them). That way you can see the type at the point you are using them. 

Once your programs are more than 10 lines long it starts adding complexity including the whole namespace. SO best not to do it. Get into the habit of not using now otherwise breaking the habit is hard latter. Don't put bad comments in you code (in fact try not to put comments). A comment should explain what you are trying to achieve (or potentially why) (NOT HOW). The code explains how so don't duplicate the code in comments. The worst thing to find in code is comments that don't match the code. 

But the design is a bit shitty. I have to scan the prime array to find out how many I have this not very nice. Also it makes any code using it inefficient especially as that information is readily available. Ownership semantics The huge difference between C and C++ is ownership semantics. Note: Ownership semantics is defining who owns a resource and therefore who is responsible for releasing the resource. Only the owner can/should release the resource. The major pain point (source of bugs) in C is caused because there is no way at the language level to define ownership semantics of a resource. In C++ we have these semantics and thus have stopped using pointers (because these have no ownership associated with them). So a C interface that looks like this: 

I think you will have better success using templates and duck typeing rather than a polymorphic interface. The C++ standard library uses duck typing to achieve the same affect you are trying to achieve here. This is what I would do: 

I think you can optimize by unrolling the first and last loop. These two iterations are the only ones with special conditions about the number of bits being read. The main body of the loop will always read 8 bits per iteration. By doing this you remove a conditional branch from the loop allowing it to run optimally. 

Friend Functions. Its a lot simpler to just place friend functions directly into the class declaration. Rather than: 

I would have lowercased the first letter on all these. The reason is that types are extremely important in C++. So you need to be able to distinguish types from objects. Use the Initializer list 

But having this just means your code is tied to this one board. You can make your code much neater and thus much more re-usable by encapsulating this information into a class with methods to manipulate the state of the board. Also by using encapsulation you will prevent accidently modification of the board by other parts of the code becuase you can protect the state of the object by making it private. 

Horrible formatting. The above '{' is indented way to far especially in relation to the line it is encapsulating. 

The manual close indicates that you should be wrapping the file pointer in some RAII structure so that it can not be accidentally be left open. Currently your code is becoming a maintenance nightmare as any new developer will have to remember to close resources manually (when things have to be done manually this is a bad design as it will cost in maintenance bugs) Overall structure. I don't like the two phase creation. 

In this function you get information from the object. You do some calculation then I would expect you to put the result back. But you never update the object (which is weird). OK ignoring the weird part. You can have a method that manipulates the state of the object when two players are fighting. 

Sure you need a print. But why limit it to printing to std::cout. Sure you can make that the default but you should be able to print to any stream. You can also add an output operator to allow you to use to print the stream. 

I like it. Its called programing (where the code uses data to define its structure). This is usually considered best practice. 

You have got the basics. Though @Jerry Coffin points out some good points. I would take this one step further. A is good for the general case. Where the thing you are finding and comparing can be arbitrarily complex. But here the thing we are comparing is a . Very simple and a very small number of them (even if you use all 256). So I would change to use an array of integers. One integer for each character. Though lets use a vector do easier comparisons. 

Building issues It rebuilds everything every time for two reasons. The rule performs a before it starts. So obviously it has to rebuild everything: 

But this stops the object from being an object. The only thing you are allowed to do at this point is call the call placement new to make it a real object again (or pass it around as void*). So calling the destructor is not really a good idea. Move the code for releasing resource into another function and call that from here and the destructor. OK. So after a move the source should be in a valid state (but can be indeterminate state). 

Pointers have no associated ownership semantics. This is normal in C. But if you are writing C++ you should never do this. Ownership symantis defines who owns and thus who is responsible for calling delete on dynamically allocated objects. If it is an automatic variable you should probably be passing a reference (or in the case more likely making a member of the graph object. Also you manipulate node and adj_list directly from add_node. Again fine from a C perspective but not from a C++ one. You should ask the object to manipulate itself by asking it to perform some operation (ie method). Since your code is so intertwined without methods it makes it real hard to read and understand. So that's about all I have. Update: Comment on update section For every call to there MUST be a call to . Without this the code will leak memory. In your case here we don't actually need any calls to new so we can remove all the leaks by just using normal automatic variables. 

A quick Google reveals that 500 M/s is achievable for SSD drives while normal HD achieve approx 100 M/s. So it looks like your desk top has normal spinning platter hard disk and it was going at the top speed. Laptops are known to slower. Especially when they get hot. The hardware is designed to physically throttle the system to make sure it does not overheat. Why not create and open the file in one line? 

On failure you return EOF. Yes I get that it is -1. But your making assumptions. Follow specs to the letter. Things like this scare me: 

This exists in the standard library as std::isdigit() If this is C++ why are you passing C-Strings around. 

Just have to say that @user1118321 advice about the loop is wrong. In fact what he has suggested is an anti pattern (a very common mistake). Now I agree that it would be nice to make that conditional shorter. But that is achieved by using his first bit of advice and creating a class (object) for back accounts. But the pattern as advocated: 

Alternatively harder the actual operator. The problem here is that can only take one index. So you need an intermediate object to do this correctly. @Mateusz Grzejek Did a good first version. But its a bit inefficient as it requires a copy of a line. 

Given that the function actually only checks for duplicates I would return a bool as a result (unless the output here is being used for other purposes) and I would pass the parameter by const reference. This prevents a copy (if the compiler is feeling sloppy) but more importantly is an indication that it will not be modified. Avoid C style casts in C++ code. There is absolutely no need for them. There are a whole set of new C++ casts that are designed to be much more easily seen. Avoid C++ style casts as much as possible. They are an indication that you are overriding the compiler because it can not do something you want it to do. 

This way if I am working on a project I can leave it (potentially in mid modification) and work on another library without the two being affected. The two will only ever interact after they have been installed into the build directory. This means I also add the following too my makefile 

That line is nearly always wrong (in every programming language I know). Especially in your case that should never be true (since you know where the end is). Remember that the last successful read reads up-to but not past the EOF. The eof-flag is only set when you read past EOF. So on the last good read you will read up-to the end of file processes the data. There is no more data left in the file but the eof-flag will not be set because you have not read past the EOF yet so you will re-enter the loop. The next attempt to read data will fail (setting the eof-flag), but the read has failed and thus left the variables you just read into in a questionable state. Luckily you don't get into that state because you move after each search. But it is a sign of the wrong type of test. This should be: 

In bool you catch all and return true/false to indicate success. This is fine on an internal interface. But you should note that not all exceptions derive from . I would catch or mark the function as noexcept (or both). 

I will go to the cliche of saying I don't see any benefit of using this over std::vector (and I do see lots of negatives: Two of the big ones are ease of use and efficiency (Both contradicting your own design goals)). 

So when you you have a size of 1 and first test is true. Then in the second test is out of range of the bricks vector (as you just deleted the only brick). Ownership This does not express ownership. 

Methods that do not change the state of the class should be marked as const. That way the compiler has more information for debugging. Also if you must return a reference here then it should be a const reference as I would not expect you want the user to be able to change the size of the list via this value. I would expect: 

Prefer to use the initializer list All the members of a class are constructed before the body of the constructor is executed. So in your case you are constructing the member then (in the body) calling the assignment operator. If you use the initializer list you construct the member using the parameter. 

If we change the code so you include values on the line (ie first or second == 0) in an appropriate quadrant. You don't need the last if statement which reduces the number of comparisons so that: 

So it goes out of scope at the end of the constructor. Which means the destructor is called. Which means that std::terminate will be called if the thread has started. If the "thread of execution" has not started (ie it is not joinable) then it is just destroyed and no "thread of execution" was ever created. So either this will cause the application to terminate or no thread will be created. Code Review Lets not place a huge function in the middle of the constructor. Lambdas' are nice but there best for one liners. If you have a whole complex function run then move that code into its own method and call it. Don't use an if statement to return true/false. Just return the expression you are using for the test.