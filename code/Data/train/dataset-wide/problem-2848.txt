Like the means you are really trying to optimize for performance. But you don't really want to include that in debug mode. May I also suggest: 

My main problem is that it is as bad as . It provides exactly no type safety. There is no validation between the format string and the parameters I pass as arguments. In fact is safer as most compilers have extensions that actually validate the parameter types against the format string (that will not happen here). Second problem it provides no support for user defined types (or standard C++ types). So it provides no extra compactness when I use other types. Third I am not in love with returning a string. What happens if I want to pass values to a stream. This means I have to inefficiently build a string (which can grow large), return that then pass it to the stream I want to place it on. Personally I would pass a stream (and return it). That way if I wanted internal string formatting I pass . If I want a file I pass a if I want to send it over a socket I pass a socket stream etc. 

Q: A but you can create other types of iterator from your iterator. A: Yes. But this new type is not comparable to the old type. 

But if we look at we see that it also has a constructor that accepts two iterators so you can simply use this to construct the vector: 

If the interface takes a by reference you can tell if it is taking ownership or not. When you pass a unique_ptr to an interface the parameter is normally a value parameter this forcing you to use to transfer ownership. I suppose in this case it might be OK as you don't know if you are going to take ownership but the use case worries me a bit. This is way to long with way to many special cases. It should look like this: 

Now the standard does not. But there have been many/many arguments over this. I think you will reduce errors be detecting this and shutting them down. Don't try and get string size yourself. 

But what if the type T (stored in storage) is not swappable at the byte level. Very probable (that's why we have copy/move constructors). So when you do the swap here you should use T's swap. 

The standard does not say this (it is at least 8 bits) but it is actually defined via the macro CHAR_BITS so you should use: 

If you put this in an array. Then use the country number as the first index and the soldier number as the second index. Then you can use a simple loop to check each of the soldiers. 

Have been replaced by C++ versions (these are from the old C library). They are known to be not very random and have several issues that make them hard to use correctly. You think this would give you an even distribution of numbers in the range 1..100 ? 

You should probably also check . But unless you explicitly want that error message you don't need the test; just use method. 

The file stream constructor takes a name as a parameter. Also the destructor of the file object will automatically close the file when the object goes out of scope. So we can change the above three lines to. 

Note we need to change the from a into an to make sure that EOF is not truncated out of the value. Not an error: But you are implementing an O(1) operation is O(n). 

"Personally": I like putting private member variables at the top of the class. That way when I start reading the constructors I can easily refer to all the member variables (as they are beside the constructor) and not have to scroll down 500 lines to see which members have not been initialized. 

Here simply printing the string. But by changing std::string here I can modify how the output is printed. Thus encapsulating and changing the printing behavior. 

No. You should have the option of having a checked access. But in most use cases you have already checked the range. Thus forcing a check on each accesses becomes superfluous. Standard use case might look like this: 

This is because type information is much more important in C++ and that extra symbol conveys information about the type. Your return references, why does the function not return references? 

You dont want to build a random nuber generator every time you want a random number. You byuild the generator once then ask for numbers, 

We are assuming this is a multi threaded environemnt. Thus all methods need to guard against access by a different thread and lock access to members. 

You must also exit the function by returning a value. Not doing so is UB. If the stream fails to open your code fails to return a value. 

Dictionary is a very common word. I am thinking that there may be high possibility of clashing with existing software. I tend to try an make my include guards unique by including the namespace as part of the guard (My base namespace is also my website name so it is unique). 

Using pointers like this (RAW pointers) is also discouraged as it very dangerous. If an exception occurs you will leak the pointer. You also have to keep track of the object and remember to call delete on it, which is error prone (as shown by a decades worth of C code). So we usually use wrappers to make sure the delete is called automatically. 

We use this to help us identify what the function is doing. In C++ the and the are part of the type information. So it is usual to push these left towards the type rather than the name. Note this is basically the opposite of conventions. But is much more rigorous on types and safety than . 

Front/Back The methods and should return references to elements (not pointers or iterators). This will make your type consistent with other container types (and thus interchangeable). 

Since we have no clean implementations: The thing to notice is that the push_back() and erase() become trivial if you use a sentinal. This is because you do not need to test for NULL in any part of the code. 

But I would go the other way. And use a factory object pattern. Factory object You are using a set of static methods as your factory. I would swing this around and actually create a factory object. The problem with static functions is that it is hard to use test code with them. It is much easier to mock an object than static API. Ownership Last. You are not expressing ownership semantics for the created object. 

You have taken the stance that your ranges are inclusive of end. As you will notice this actually makes your code harder when you have empty ranges. But also it makes your split inaccurate. 

Doing it this way, makes the compiler generate the actual numbers (so there is no chance that somebody accidentally puts two identical numbers into the list). Also if you change your signature to use the enum people can not accidentally pass an integer, as the compiler will spot that and force them to use the correct type. A base class with virtual members. Must usually have a virtual destructor. 

This are not very good requirements. Interface: As your tree is a just a container of data you should not define your requirements in terms of modifying the structure of the container (so you should not mention nodes (nodes is an internal representation that should be transparent to the user)). Better would be to define the characteristics you want to see from the container. Example: Adding/deleting data from the tree should have a complexity of O(log(n)) or better. (Note log(n) is the standard characteristics of a binary search tree (BST)). Searching Your tree does not define very efficient searching. This is becuase the data in your tree is not structured in any particular way. So to search the tree you need to search every node in the tree. If you were using a BST then you would only need to search log(n) members of the tree to determine if the tree contained a specific piece of data. Traversal Your tree does not really provide any mechanism for traversal. You have a traversal function that prints the nodes but it is not generic enough to be useful for anything else. What you should have done was implement the visitor pattern. Performance: To be blunt the performance of your tree is diabolically bad. Because you don't specify any ordering you have to manually find a place in the tree to insert your data. You return by value (thus copying) rather than by reference or const reference. Overall You would be much better using one of the standard containers. you can use it has add/delete/access characteristics similar to BST O(log(n)) (it probably implemented as one underneath but you don't need to know that). You can increase speed by giving up space by using here you get much better add/delete/access characteristics O(1) the disadvantage is that the elements are not ordered so traversal of the container returns the elements in a random order. If you want some manual control you can use a std::vector. Adding/deleting stuff from the end and accesses is cheap but deleting/adding in the middle is expensive. You could use a heap ontop of the vector to mitigate these issues. 

Also the assignment should not be to NULL, but should set the new head of the list. Also the interface to remove elements takes an LLNode pointer. But no other interface provides you with an LLNode pointer. So you are stuck in a chicken and egg situation and not able to use the interface. 

I am fine with for iterators. As there creation is obvious and I don't need to know the exact type. Just the fact that it is an iterator. 

Now your sort is generalized for any type that supports iterators (a pointer can be used as an iterator into a C-Array). But you can now also sort vector's lists and any other standard container type. Don't Declare variables before you use them 

Put the include guards first. No point in re-including header files if you don't need to Never use in a header file. Anybody that includes your code now has all the standard stuff pushed into global namespace where it can cause huge problems in other peoples code. I would even say never use this in your normal source files (but others think that is a bit far (I don't)). If you must import stuff keep it as confined as possable and only import what you need etc.. (still don't do that in global scope in a header file). Double underscore in an identifier is reserved. DON'T DO IT WILL BREAK SOMETHING WHEN YOU LEAST EXPECT. 

Personally I think you are way to concerned about micro optimizations. These should be irrelevant to you. The compiler is very good at this kind of macro optimization. 

Make a copy into temp. -> Dangerious as exceptions can fly. Swap the temp and current. -> Safe as swap should not throw exceptions. Destroy then temp. -> Safe as the state of current is now good. 

The other thing you should do with is mark the function as non throwing. This allows optimizations when you use your class with the standard library that are not available otherwise. So I would have written this: 

You don't do memory management correctly anywhere There is already heap functionality in the standard library. There is also a priority_queue that is based on this heap functionality. Dijkstra usually has a start and an end (not just a start). Is Dijkstra() really a method on the graph? I would have made this a standalone function. Your vertical spacing is very dense it makes it hard to read. 

Iterators are not compared with you need to test against . While we are here prefer to use prefix ++ (here it does not make much difference but in other places it can so it is a nice habbit to get into (especially with iterators)). 

As mentioned last time. Prefer , prefer std::begin/std::end over method calls. and prefer range based for over all of them: 

Apart from the bad idea of garbage collection. You are using pointers where you should be using references. Basically your code has no concept of Ownership Semantics. 

OK. You mention in a previous post you are using an old compiler. So fine if you have to use an old compiler this will work. But moving forward this should really be done using . This class is not needed though. 

One assumes that is -1. Personally I don't see a point in hiding this value inside a variable it makes the code harder to read. The documentation says connect returns -1 on an error. 

To show ownership in this case I would use std::unqiue_ptr. This is an object that takes a pointer and indicates that it ownes the pointer. 

Singelton is an anti-pattern The singelton is a bit of an anti-pattern. They make testing hard. It is often best to combine a singelton with a creation pattern (to allow yourself the luxury of creating different types of singelton for different things (ie testing)). But even better is not to use a singelton. Pass the Texture manager around by reference. Prefer not to pass pointers. Pointers do not convey ownership information. So the user of your class does not know if they are passing ownership of the object to your methods (or even if the object should be dynamically allocated). 

Check Invariants and return quickly. If you check you invarants quickly at the top of the function and return. Then you don't need to indent the rest of the code. It is obvious that the remaining code is only being used if the invariants hold. 

You can use as an unordered container as is. If you have an unordered container it does not matter to you what order the elements are in. If they just happen to be ordered does that matter? The reason for using is that it provides faster access to the elements. You give up an ordered property to get better performance. 

You have to remember to release them. The above code is correct. But basically you have to find every early return from a function and explicitly make sure that you have manually released all resources just before the return. This is why a lot of C guidelines forbid early return (it's hard to validate that you got it all correct). C++ introduced the concept of RAII that handles this automatically. By using a locally scoped object the destructor of the object can release the resource when it goes out of scope (happens on function exit). So resources are automatically closed without need for the programmer to check every exit path from a function. The standard has several types that help you do this for raw pointers. or but normally this is done as part of normal class creation. You make sure your object obeys the rule of 3/5 and then your resource are handled automatically (this is why is so useful all the memory management is wrapped up inside and you don't need to think about it). This concept becomes even more important when you remember that C++ has exceptions and your function can exit because a function you called threw an exception which has cause the stack to unwind. The language guarantees that local objects destructor are called when stack is unwound thus RAII gurantess resource destruction even when exceptions are thrown. Currently as your code stands it is not exception safe. In C++ (unlike C) early return is not only embraced but encouraged. Reallocing every prime. Sure you can do this. 

For this structure of a stack. The list is not the optimal data structure. A or is probably better. But we have a built-in which is actually a container adapter that wraps another container type (by default it uses ). 

Not sure that's how I would have written in. Its not normal to call and on an iterator. I would have arranged for a some type to represent the stream as a container: 

It is also a good idea to define the streaming operators for most classes. This allowsd you to serialize and de-serialize the class to a stream (file/string etc). So now the class looks like this.