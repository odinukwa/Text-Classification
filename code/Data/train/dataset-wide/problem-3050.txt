Your view will be simplified too. Instead of calling you can treat the decorator as the binder object. 

Personally, from my experience of reading and watching educational materials, the newer syntax is preferred where possible. It's also less keystrokes: instead of is easier for me. 

I wrote a random world generator for the classic Snakes and Ladders board game. Snakes and Ladders is a dice game played over a grid, usually 10x10. You win by reaching the last square first. The board has ladders and snakes that connect specific squares. Land at the base of a ladder and you climb to the ladder's head (good). Land on the head of a snake and you slide down to the snake's tail (bad). Snakes and ladders are key value pairs; the represents the start point, and the represents the end point. Both are identical except that a snake's start point must be greater than its end point, while the opposite is true for a ladder. World rules: 

Doing so means the placement methods for ladders and snakes only have to worry about working out the range and populating their respective hashes, which are the only two differences between them. This reduces duplication. 

I think some of your expectations might lead to brittle tests. I would modify the expectations a little. For example: 

I suggest you extract two methods: to check if the user is authorized, and to handle behaviour. You would then end up with this: 

The idea is to isolate presentation logic that is only needed for the report, in the report class itself. You then have cleanly defined responsibilities for each class. 

Handling of special values Ignoring for now, that the choice of returning a special value instead of throwing an exception (or using some other means of indicating error) when ing from an empty queue isn't that great. Then, if you have a special value ("magic value") like which will be returned on an empty queue, then it's crucial that you cannot push this value into the queue. So check for that in and . Useful testing 

Note: Untested, it may be necessary to have the token concatenation () in a helper macro. Using it as such: 

Here you call , discard its result (return value) and then call it again, this time assigning the result to the local variable. separate calculation and output Instead of 

The lambda returned by above function cannot be used with your unroller. To fix it (as a user of your unroller), you need another (non-mutable) lambda which references the original one: 

All in all there's not much to criticize. Be sure to fix the bugs mentioned in the other answer, though! 

Live example. Note that this may destructively modify the list argument. The helper function is defined as follows: 

I think you do this to clearly separate between local variables / function parameters / global variables and the data members of the class. I've done this, too. But I think it's a reasonable assumption to make that somebody reading your code knows that data members can be accessed without , and to know (at least roughly) the rules regarding name resolution. And, moreover, you already have something in place to distinguish between data members and "the rest": That prefix. I read that as ember, or alternatively as atrix. Having both just means more to type and more to read. And the long lines suffer somewhat from that "more". Compare: 

Finally The habitable range for ladders and snakes is the same, so this can be replaced with a single range : 

Ideally you will want a nice helper for this. Now you can helpers from inside the decorators using the context. 

With the benefit of several days of thinking I'm going to have a bash and review my own code. To aid my understanding, I made a rough diagram of how my objects interact with each other. The Portal class remains unchanged, so first up it's Cell. It's decent, but it can be compacted. 

I wrote this jquery plugin to do remote validations on the server. The code self explanatory. When the field blurs (event is customisable), the plugin checks to see if there is a value and sends the request. Nothing fancy, but since I'm relatively new to JavaScript I'm sure I might have missed a few things. I think the init method is a bit long in the tooth. I am also calling from a bunch of places in the method, but that might be necessary. 

A square can technically contain the tail of a snake and the base of a ladder, or head of the snake and head of a ladder. But this could have weird side effects (presumably why I've not seen a board with those characteristics): You slide down a snake only to reach the base of a ladder that takes you to the winning square; or you climb up a ladder only to reach the head of a snake that drags you down. While not fatal, such side effects muddle the role definition of ladders and snakes; in that, ladders are no longer necessarily good, and neither are snakes necessarily bad. Example World 

I cannot provide an answer for this, as I'm not sure myself, but instead I leave a comment on two regarding your code: Don't break encapsulation 

In some code I'm working on there is a (narrowing) conversion from to . The legacy code has some checks in place after the conversion is done to at least warn about values that could not be converted or whose conversion error is larger than some threshold (0.1 for example). Just for comparison: 

Whether that's better in terms of readability is ... eh ... let's say "debatable", too. And of course it changes semantics: and are now used, instead of . Instead you could also keep the manual indexing, but make sure you run over the correct range: 

The result of this expression is a (ยง6.5.6/9). Assigning it back to a pointer converts an integer type to a pointer, which IIRC should give you a compiler warning as it can lead to all kind of trouble. relational operators with pointers Comparing pointers with relative operators is undefined behavior if the pointers don't point into the same array (ยง6.5.8/5). 

This code lies directly on the (most) critical path, and felt very inelegant (and wrong?) to me, so I tried to improve it. Note that I don't intend to replicate the exact same behavior as the legacy code. 

Of course you can also make an (template) member function of a class containing a named and drop the parameter. Your is then: 

This will be costly ... thus you get yelled at. To avoid such surprises, use the qualified function name when you are sure of the function you want to call: 

The rules are a win earns three points, a draw one point, a loss zero points. For example, if we feed the method this match data: 

Finally, should you add more classes to User, Series, and Lessons, you must modify your method, and add the necessary conditionals. So ask yourself if this code really belongs in the method. My two cents. 

Explanation We use to create a new array from the existing numbers array. The new array contains the first 11 digits of each number from the original array. Each element is an int, converted using , which lets us apply to sum the array. We then convert the sum to a string, and take the first 10 chars. And voila, you solved it. This assumes you already have an array of strings, as is the case in your code: 

Is there a better to test this requirement other than to iterate through all the possible scenarios? I'm doing something like this. 

I added a feature that allows you to send in a Regexp filter instead of a string. It's my first use of Procs, and I'm sure it can be done better. It's not very readable, and probably not efficient. 

The best way to ensure a bullet proof implementation is to avoid having a square contain more than one object. For example, there's an edge case where a square can contain a ladder's head and a tail, causing you to progress even further. To do that, the placement should be delegated to a method that checks if the square is occupied. This requires tweaking the initialize method, but it's worth it: 

Note that this is the bare minimum of information we need out of a test case: An indication when it fails and which test case failed. Testing frameworks can give you far better information, for example a comparison of the expected value of a function call and it's actual value. Start with a simple case: 

Don't recur, iterate. Common Lisp has no guarantee for tail call optimization. Thus recursion might get expensive even if the recursive calls are in tail call position. To avoid this you can write your code in an iterative manner, e.g. using . 

test corner cases Does your function work well with an empty string? A string with only vowels or consonants? A string with only punctuation? 

Just always use . Saves you from potential headaches when you later add a line of code without looking too closely. Consistency Just some small oddities, nothing of real importance: 

test your code You really should! Every (in an ideal world) piece of code that you write should be tested. You might want to look into TDD (test driven development) and build up good habits from the start. making it faster Do you really need to obtain the length of both strings? Take these two strings as example: 

performance related comments still under construction ;) Ok, I got a bit hooked up here, and I think I've got something usable out of it. I'm though not yet posting the code as it's late here and currently really a mess, so I'll tidy up tomorrow and post it then. Teaser (ignore the x-axis label): 

Try not to use with and conditions because it becomes confusing. It's clearer to use negation: . Some people are boolean impaired, including myself. I'm not sure under what circumstances the hash does not exist. So checking for its presence may be redundant. 

I'm building a JSON API. I'm writing my controller tests so that they compare the response body to actual JSON I'm generating in my tests using ActiveRecord. I wrote two helper methods that make the process easier. The first simply parses the actual response body and returns it. 

Am I testing too much? Is there a better way? Running 70 or 80 tests for something like this seems excessive. As an aside, can my regex be expressed better? 

What happens if you changed "Logged in successfully" to "Welcome, mate!", or "Merry Christmas, Mohamad"? Your tests will fail even though the code is sound. Is "Logged in successfully" part of your spec? Or is your spec "The user should be signed in and have a session." I think that looking for a specific CSS class on the page, as well as other classes, (link classes that should or should not be present if the user is signed in) might be more robust. I would even look for link text, like "Sign in" and "Sign out". Sure, those can change too, even CSS classes. But they're less likely to change than messages to the user. 

I was not able to get @Jerry Coffin's particular implementation to work, but I used his idea to create this similar \$O(n)\$ implementation. As he describes, we reverse the array at \$A[0..S-1]\$ and \$A[S..N-1]\$, where \$S\$ is steps and \$N\$ is the length of the array. We then reverse the entire array.