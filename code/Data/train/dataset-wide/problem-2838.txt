Again, and are functions/methods, but since those are actions (as designated by verbs), we write parens behind them. 

In general, the code is OK, i.e. I don't think it must be changed. However, to increase clarity, I would do a couple of things differently: It's probably better to write an method for your objects, so that whole inner loop is a single function call. Then, you can use to shorten the outer loop like this: 

If those contexts are Django model instances, then you can be more efficient with the queries and fields instead of separate methods: 

Since you are writing Django code, you don't need lambdas at all (explanation below). In other Python code, you might want to use list comprehensions, as other commenters have mentioned. s are a powerful concept, but they are extremely crippled in Python, so you are better off with loops and comprehensions. Now to the Django corrections. 

is a . s are lazy-evaluated, i.e. the actual SQL to the database is deferred to the latest possible time. Since you are using lambdas, you actually force Django to do an expensive and filter everything manually and in-memory, instead of letting the database do its work. 

Also, depending on what does, you can either put that call into or into . Either way, your top-level code works with objects and thus shouldn't know too much about single elements inside those objects, that's something the object itself should know and do (see Law of Demeter for reasoning). 

I use a here as I couldn't get the styling I was looking for in a . I also created a minimal version of a , so I can search on fewer properties. Reading around there are solutions but many are < 5 years old. I'm also aware that can be slow so I suppose I should be looking at a different approach to the itself. I'd appreciate any help and advice, thanks! 

Sometime ago I asked a question regarding a slow Filtering method for my . Months later and I have a relatively quick method, though I am still looking to improve performance, especially when the user is deleting text from the SearchBox as this seems to slow down more than if the user is typing characters in. OnTypingIntoSearchBox 

From the code you can see there are two more methods involved in the filtering; CompanyMatchesFilters 

I have a method that retrieves information relating to a Contact that was made between two Companies. I am looking to improve my code in any way and am intrigued in hearing any recommendations you may have on how this method can be improved. I use it throughout my program but modify it according to the DataModel I am attempting to load. 

I hope that isn't too much code - apologies if it is. I'm essentially looking for anyway to improve the efficiency of this filtering method, either by the user searching through typing in text or by checking specific checkboxes. 

Again, a function/method, but a property of a document object, not an action, so no parens. A boolean value or an integer is strictly speaking not a real-world object, but it's more like an object than an action. 

I would suggest moving the CSS selection logic to a custom template tag or even a filter, e.g. . After that your templates will look much cleaner and that logic would still belong to the presentation part of MVT (Model, View, Template). You can split your tuple in the definition of the loop so that you don't redefine the variable. . Use reverse URLs, no question about it. You'd hate the day you have to change them otherwise :) Go even further, use URL namespaces. 

I prefer to make a distinction on semantic level: there are no functions or methods, but instead there are properties and actions. Every property is an object (in real-world sense) and an action is something done on an object. A good mnemonic is probably to read as . Consider a variable: 

The last line will cause Django to actually evaluate the and thus send the SQL to the database. Therefore you might as well want to return instead of and iterate over it in your template. 

Even though is probably a function/method, an author is an object and a noun, so it's a property and thus no parens here. 

I have around 350 loading into a and am already noticing some lag when filtering on their . This concerns me as we could easily reach > 1000 quickly and I need filtering to be as quick as possible. I'm trying to avoid calling as I know this is expensive but I am not quite sure how to do this here. Here is my code: C# 

I really see no reason for anything to slow down purely based on the selection of the radio button, is there a way to improve this code? 

I have re-written my filtering method to try to improve performance and I feel that although this is the fastest yet, there is still room for improvement on some of the slower machines my program runs on. The is bound to an , as the user enters text into my each that matches the filter is added into a filter . The is limited to the first 25 so as to enhance performance. Here is the method that is called as the user types; 

I have a DataGrid that I filter when the user inputs text into a search box. The column that is filtered is based upon which radio button the user selects (Name, Town or Post Code). Although initially nothing happens until the user has started typing into the searchbox, for some reason there is a noticeable delay in selecting the different radio buttons. Intuitively I thought that something was happening when the radio button is clicked, but there is (as far as I can tell) nothing being called. The C# program is relatively long, so I'll include the XAML for the radio buttons and the methods that they are being used but not the whole program, unless nothing is found originally. SearchGrid