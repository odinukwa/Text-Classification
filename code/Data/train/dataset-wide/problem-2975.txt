At now user can set and to . I think it is bad. It is twice bad since you don't check these fields on when use them. I recommend you to turn and into readonly properties like that: 

is wrong! Don't catch . If you suppose something can be null check it for null explicitly and do appropriate actions. 

You don't need perform divisions like (where index is ) in an unchecked context since overflow will never occur in this case. Also you don't need suffix for . 

It is common practice to use static methods-creators instead of constructors. But this approach is used in cases where you need to convert some objects to the object of desired type. It is the main reason for such methods â€“ conversion from one representation to another. But you use your method for side effects and it is not good in my opinion. If I call I'll expect just to get a new instance of the . I don't expect that this method will do something else. I would create method but not in the class. Adding to database is not a part of employee functionality. 

You have one exception for different parameters and I believe it is wrong. You should separate validation of each argument and also use clear message instead of just "something is out of range". Also I recommend to use only for arguments that represent single value that is out of range. of an array argument is not an argument itself. Some invalid value inside the array is not an argument too. So define validation methods 

you should definitely extract all this values to named constants since it is unclear what these magic numbers mean. And finally I recommend to change everywhere in your code on and use to produce result collection. It is not good to pass changeable collection between multiple methods. For example will be turned into 

The big advantage of this approach is you can forget about edges building code and operate only by dictionaries above. If you need to add new city in your network you just add one new constant to enum, new entry to dictionary and new entry to dictionary. All relations between cities is super clear since you now manipulate by semantically named constants rather than magic indices. Also now you don't depend on order of vertices inside list. 

I believe it is not good to pass builder to constructor as an argument. I recommend to read Constructor Design guidelines from Microsoft. If you have any non-simple calculation in constructor it will be better to move it to a static method. In your case I would firstly create model and then pass the built one to the constructor. Unfortunately I don't see where and how a builder is created so maybe your solution keeps a good balance between complexity, flexibility and beauty. It seems that here 

But it's just another way. is not a problem in your case since there are only 4 possible directions and this situation will not be changed in the future. 

First of all, why has 10 elements and everywhere you counting from 1 to 9? Let this array to have 9 elements and count from 0. 

@chatton already said about magic constants. I'll just show how nice you code will be if you turn them into named ones: 

Just small note about combining path parts. You should never combine them manually with backslashes. There is the method and you should always use it. Instead of 

The main problems of your code is a lot of magic numbers and code repetition. What is ? ? ? Looking on your code other people should easily understand what it does. 

Also, can you say what purpose of ? :) You perform swapping of array elements many times and repeat the same code in all these places (loops commented as shuffle arrays). Define the method and use it: 

Are you sure you need setters for observable collection properties in the ? I believe no. So remove setters from the , , and properties. Starting with C# 6 you even don't need private fields: 

method has signature. You should avoid such methods and use instead. It is acceptable to mark event handlers with . is used only in event handler, so do the following changes: 

Please use conventional naming of properties. instead of for example. Also, why do you use instead of if you use index only to get an element of collection? Use and your code will be much clearer. First thing that should come into your mind when you encounter many and calls which need to determine if an element should be added into a collection is to use . Use for and . Main problem of your code is a lot of repeating loops and duplications like . Please learn programming basics and particularly C# basics. All your code can be rewritten like: 

If you are adding something to you don't need to call since it will be called automatically. So this code 

I recommend you always write access modifiers for class members and for classes itself. It will make code more clear and understandable. So instead of 

Also I recommend to define all those lexems as named string constants instead of literals. In you have a long too and you can simplify it with dictionaries as well. 

Accessing of an almost always a sign of bad code. You should attach a command to your button which will execute some actions in view model. Those actions will update some properties which will raise event. It will cause controls in the view that are bound via bindings to those properties get updated. It is the correct workflow in a WPF application so you should definitely refactor your code. The first thought that come to your mind where you need perform an action on button click should be using of . Also you use view related classes inside a view model: 

You didn't move every class to separate file. You didn't define all your magic numbers like 21 and 52 as constants. Also there are blocks of code that can be significantly reduced. For example this code 

Also all properties in C# should have PascalCased names according to naming guidelines. So the is a bad name and you should use as well as and . 

you don't need extra and . They make code a bit noisy. Also in this method I recommend to check for and throw if it is. I also recommend to use separate methods for and callback of . The code will be cleaner. At now in-place event handler and callback add extra indention levels and make the constructor too big. This causes code of the constructor is hard to read. This 

Using UPPERCASE_CONSTANTS_WITH_UNDERSCORES violates naming guidelines used in C#. Just use PascalCased names. 

You don't use WPF as you have to. In WPF you don't need to perform clear/draw sequence. The right way is to use MVVM and update coordinates of the snake's blocks in view-model. In XAML you will have with as its panel. should be bound to collection of blocks and each item should have bindings for and . In fact each item will be wrapped to where there is no your bindings to coordinates, so you can consider to write your custom -based panel which will search for coordinates in each child. I'm just describing the right way you should work with WPF, there are variants how you'll implement all this stuff. 

But if you can't check if the can be safely called before its execution then dealing with exceptions is a good way and I would stick with it. 

Also local variables shouldn't use underscores. Use to name them. So use insetad of . And I suppose this method should be . FindPathsBFS and should be changed to and . You use only in this method so this field have to be removed and turned to just local variable of the method. If the purpose of this method to calculate min distance then rename it. Your code suffers from side effects. Calling some method shouldn't mean setting a lot of external properties. 

Use to name local variables instead of words separated by underscores. Although there are no guidelines for them it is common practice among C# programmers. You should always call to get instead of creating . , and any other writer implement and thus should be used within section: 

So if you are able to check that call of a method can cause an exception before its execution, create the method for checking some conditions and call it before: