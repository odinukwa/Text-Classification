My $0.02 In my opinion, if you're not going to use OOP, you should use functional programming as this is entirely too much to return from a single function. However, if you're refactoring code I'll assume you need to keep the function signature the same. Obligatory Formatting Gripe Some fanatics will tell you that you should absolutely always use the curlies in your loops and conditionals and they will point to the Apple SSL goto fail bug. I'm here to tell you only a Sith deals in absolutes. Apple's goto fail was caused by the conditional being on two lines. If you can fit the entire conditional or loop on a single line you can greatly improve readability and code length and there is no good reason to use the curlies. Also, in my opinion, the way you have your curlies indented and on the next line is very difficult to read, but at least it's consistent. Assuming variable types Your code makes the assumption that EVERYTHING is a string. While you may not be able to go back and change every place that uses this function to pass in an additional parameter, you should at least provide for an optional parameter to provide that information in the future, and preferably update old code as time permits. Pointless Variable At the end of your function you are creating a variable and then immediately returning it. You're wasting time storing this in memory and then immediately disposing of it. Just return the result of the instead. Putting it together 

The browser will replace spaces in the url automatically, so this is not nessecary, however, what if someone passes in "blahblah#importantstuffhere" for that param? The browser will ignore everything after the hash unless you properly urlencode it. JS has a built in url encode function, behold: 

The second ternary operator contains invalid HTML. must be a child of or , not another . Using seems like overkill in the loop. it would be faster to just use an operator. Also, it's generally better practice to creatte and append to an array than to a string. Every time you add to taht string in that loop, the entire string has to be loaded into memory all over again. It's much quicker to use a buffer liek this... 

You can also clean up a little bit by putting the div on the outside of the logic instead of duplicating it. You'll get an empty div there if the form is not submitted though, so consider that. 

How I would do it (Assuming I wanted it to be as fast as possible, and that you want it to output what you said it should output rather than what it actually outputs) 

Seems like you've figured this out yourself already, but I'll state it for you to make it clear... The idea behind functional programming is mainly to make things easier to read and maintain (by being "declarative"). Usually/often this is done at the expense of performance. For example, it's a whole lot faster to iterate thru an array with a for loop than with the method. Project Euler (or anything involving large numbers or heavy processing) is probably not a good place to practice functional programming with Javascript. That said, this problem in particular doesn't justify the use of more than one function anyway. Your algorithm is overly complicated. 

Generally speaking, you should keep your markup and your PHP logic separate. And the intermediate variables don't really have a purpose, just use the values from the array. You've got two opening form tags and no closing form tags. Your first condition (i there are records in the table) does not close the or the create a . Your delete button is no button at all, it's an input wrapped in an anchor tag (). That's why it's not working as expected. Either remove the anchor and give the input a type attribute of "button", or remove the input and put some text in there instead. Use a prepared statement. It's not cool to throw variables into your queries all willy-nilly. You will anger the code gods. Here's a quick re-write (assumes you're using PDO - If you're using MySQLi, see the docs to convert the prepared statement to MySQLi) I'm just going to go ahead and post this since i spend three or four minutes on it, but after looking at this code, there is no way this was working as you had it. This site is for reviewing working code, not fixing broken code. If your code doesn't work you need to ask on StackOverflow in the future. 

Personally I would avoid using either or in this case. They're slower and harder to read, and I would certainly avoid that looping thing. 

Note that you should keep the parentheses if it makes the function easier to read, in this case, in my opinion, it does not. 

Unless you know for sure that the degrees, minutes, and seconds are always going to be 2 digits each, this approach will cause issues. I would recommend using 3 separate inputs for each value and automatically tabbing over to the next one when the first one is filled. If you do know they will always be 2 digits, why not just concat the value with instead of putting them in an array and joining them? 

Stripping tags (DEMO) All that's left to do is diff the array of tags to remove with the array of tags that exist to get an array of allowable tags. Then using a clever we can generate the second parameter for . 

You don't need the element to exist before applying event handlers. For example, in jQuery, rather than writing your handlers in a you can attach the handlers to the document and wait for them to bubble instead, like so.. So, in jquery, 

This is taking so long because Google is geocoding each of your locations one by one. Geocoding takes a lot of time as the world is a very big place and you have a lot of locations. You can save some load time by geocoding in advance and passing in the latitude and the longitude in place of the location name. So for example, instead of 

This is 4 lines compared to your 8 and it only registers a single function in the event stack. Major memory improvement. And this code does not require the DOM to be loaded first. 

I don't think so. This would only serve to make the computer iterate over each value twice. I don't see how that would make it simpler. 

Note: If you have an odd number of chars in the barcode, this regex will not account for the last char. If you have an even number of chars, you will still need to pop the last char off manually. If you don't want to include the last digit or two digits just trim them off the barcode first. See here for an example.