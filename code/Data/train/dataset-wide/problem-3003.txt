Using is justified only for big numbers, in your case using is enough and could be a bit faster. Here is another solution: 

In this case changing fields in or won't break . You can enable extension to get only specified fields : 

I switched arguments in because this allows to define function more concisely and it is also correlates with update/insert from : they have collection as a last argument. Now it is possible to skip directly to and implement it in couple of lines: 

'encrypts' each letter of input string independently of other letters. This could be emphasized by using at the top of instead of hiding it in helper functions: 

Haskell is great for it's declarative style programs and most of the first hundred Project Euler problems are easy to write in such a way. First of all, this problem is about ratios, so let us import module. 

It is possible to create cyclic directory structure with symbolic links, so it may be reasonable not to traverse them. E.g. you can use from package to traverse only real directories: 

From that nice formula it is easy to see that the process of computing √2 is iterative. You just need to decide what function to iterate. Let us consider this one: 

With LambdaCase extension it is possible to write without (but it does not seem much more readable): 

It is really nice that you provided domain-specific type aliases. This makes type signatures more readable and allows to easily change underlying data representation as in this case. 

aren't particularly useful to someone who doesn't know what is ("Why would a piece of code be a number?"), and is probably still not useful to someone who does know what is. Something like 

is a lot less ambiguous. While we're on this topic, a lot of variable names used here are quite generic. One-off names like are fine, but and aren't particularly clear about what they refer to. Instead of , how about , or, since this is OEIS-related, ? The method is also not well documented, even though you give a good description of how it works at the top of the post. Consider putting your explanation, or something similar, in as a docstring. General readability This 

Note that I've also flipped the for readability since it fits going left-to-right. Print if not 1 Speaking of , this reads as "halt immediately if the number is 1, else print the number then halt". This could be more clearly expressed as 

to "print the number if it's not 1, then halt". Alternatively, you can use as an idiom for "if not equals", and do 

Outputting characters This only concerns your testing code, but outputting single characters should be done with quotes for readability, i.e. rather than to output a comma. Would-be readability comments In terms of general ><> readability, I wouldn't call this particularly readable, but under the constraint of efficiency it's pretty good. However, if the goal were strictly readability, here are a few comments: 

I agree with the other posters that a visitor pattern would be a viable solution. One important reason being, that a node usually holds some payload, not just other nodes, and you want to have a mechanism that allows you to be very versatile on what you want to do with the data in the tree. You may want to count the number of nodes, you might also want to count the number of nodes, where the payload matches some criteria, or you want to count the number of nodes that do not have a left and a right sub node or whatnot. You don't want your node to contain a method for every possible question you want to ask your tree. You might want to read my blog post on the LOD and structure agnostic access for a rather freaked out, but general solution. But be warned it's possibly not the kind of code you might be used to and you might not find it particularly "pretty", as it trades type safety for "simplicity". But a visitor is not the only good solution out there. You may prefer to implement a method that returns an iterator, or even a Stream of nodes. This way you could use the Java stream API and be very versatile. As for the interview: I often feel that programming tasks in interviews are misplaced. The résumé should give you enough of an idea if you've got an experienced programmer or not. Once the person is hired, code conventions, code reviews and tests should shape the quality and style of the person's code to your needs anyway - and there's a probation period to see if the person is not up to your standards or toxic. The only thing that a little piece of code is good for, in my opinion, is to sort out freshmen and students who don't know how to code, but claim to do so. In job interviews I might like to talk about a piece of code and discuss its style, not for the sake of labeling the answers "right" or "wrong", but to see how they think about code: Are they the pragmatic kind of programmer, are they code-poets with a love of style and readability, will you have to brake their tendency for over-engineering or will you have to nurse them a bit more? Do they make good points, are they the timid or the outspoken kind of person? You might feel you lack the one or the other kind in your team and that might make a difference in the end. But I feel that, if I look at a résumé with plenty of projects on it, that I should be able to assume they know how to code and I don't want to insult them with giving them programming tasks that are not related to their daily work at this company, but rather to their first year in algorithms and data structures class. Discussing your piece of code above, I would, for example find it perfectly reasonable, if the candidate said: "This is a pragmatic solution for counting nodes and maybe something similar, so if that's all there is to it, I'd be fine with it. Still, if it is foreseeable that we need more than just two or three queries, we should have another object do the query." That'd be bang on. 

(Btw, why "movie"? we were talking about "films" all the way.) I'm using partition from to extract matching movie(s) from database. Also there is funny syntax I'm using to update movies: 

It may worth inventing your own combinators with semantically appropriate names. Here is an example using ExceptRT monad from errors package: 

creates cycle from a list. skips some characters and returns list starting from . Try it in ghci ( is infinite so be careful with it). 

Snap catches all exceptions thrown within handlers and converts them into responses with HTTP 500 code. So error handling in your code is pretty fine (if you are ok with converting "postgres is down" or "invalid query" into HTTP 500 code). Side note 1: You are setting at the top of the handler. It is easy to forget to add/remove this code if you are modifying some part of handler that is actually writes response data. It may be more convenient to define helper function: 

Now you just squares of digits and get index to precomputed cache of chain results. Here is the full code which on my machine is 15 times faster than the original one: 

The code seems a bit too verbose because of explicit search tree construction. It is possible to make it more concise by using list monad for building search space. Here is my attempt to rewrite it: 

Vectors as arrays If overhead of trees is too much for you, it is possible to use which is for real arrays in Haskell. 

to save a tick. Division by 2 loop It's a bit more logical to separate the initial zero check from the rest of the first line, which divides out factors of 2. This is also a bit more efficient, since we save on the jump. 

First off, I'd like to say that you're asking two questions which are at odds with each other. Having readable ><> code usually requires a decent amount of whitespace, but minimising the number of ticks requires reducing the amount of whitespace and a bit of golfing. I'll assume that you're primarily aiming for the latter, while keeping the code as readable as possible under this constraint. General comments Less than A minor one about your explanation - is , so by having at the top of the stack you're checking whether , not . If it were the latter, your code would fail for numbers like ! (no factorial) Floats Just a note of warning: both the online interpreter and the official Python interpreter use floats for division, so this program would most likely fail for large numbers. Unfortunately, I don't know of any good way to perform integer division as efficiently. Wrapping and reading direction Wrapping the last line doesn't affect efficiency, so it's more readable to have the follow the . Also, if we wanted to save every tick, we could have this part on the second-last line instead: