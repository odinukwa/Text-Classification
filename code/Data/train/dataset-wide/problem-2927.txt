Prefer to construct data members through the member initializer list. Prefer the literal type instead of the macro . 

If you want to iterate a dictionary by its key-value pair, Python's built-in dictionary includes the method . 

The word "copy" implies an operation that is non-mutating and non-destructive. When I copy something, I expect to have my original and something new. Allow for the case that no copies are generated. It shouldn't be an error if I ask for 0 copies, just give me back my original object and an empty container. If I pass in a k > 0 as my number of , I would expect some container with a bunch of copies of my original object. Not one extra copy to account for the original, but k copies. I actually prefer a container of multiple copies of my original element, as I can then decide whether I want to append the various copies or interweave each individual element. If my , this is an exceptional situation of user input error, and should handled appropriately. 

Make sure you understand the requirements of the problem. From the problem page, we see $$ 0 \leq K \leq 1,000,000\\ Subtask_1: 2 \leq N \leq 2000\\ SubTask_2: 2 \leq N \leq 100,000 $$ Whenever values are within a sane countable range, just use . Once a number gets to a point you wouldn't want to personally count to, say a couple thousand, then move to the fixed width types provided by (, ). For this problem, and are best represented at 32-bit integer types () instead of (which is at least a wasteful 64 bits). The worst case scenario for this problem is that every pair meets the hardiness limit. The first few \$N\$'s produces counts of \$[1, 3, 6, 10, 15, 21]\$, which would be the sequence for the triangle numbers. \$N = 100,000\$ would be the \$99,999^{th}\$ triangle number for our sequence (started at 1). To find the \$n^{th}\$ triangle number, we can use the formula $$ T(n) = \frac{n(n+1)}{2} $$. So, $$T(99,999) = \frac{99,999(100,000)}{2} = 4,999,950,000$$. Use of a 64-bit integer would be more appropriate since a 32-bit integer cannot store that worst case count size. 

Consider a sequence of distinct integers. $$S = [1, 2, 3]$$ For , the mode is the empty-set (no mode). 

Also, some non-member free-standing functions, like comparisons, math functions (abs, sqrt, pow, invert, truncate, modulus, negate), boolean conversion (including ), increment/decrement, sign determination, etc. 

When defining members with constants by default, prefer default member initializers over the other forms of initialization. You may omit explicitly defining the compiler generated constructor if you have no other constructor defined. 

Do not in header files. Most C++ implementations transparently inject static constructors into every translation unit that is included in. Instead, and provide a stream parameter for library users. In the event you only need to forward declare a object, prefer . only what you use. Every file should be able to compile on its own and should not rely on transitive includes. Including is unnecessary. 

Spacing helps distinguish different language constructs. Consider adding spaces where appropriate (e.g. before the and surrounding the ). You should prefer member initialization lists instead of assignment in a constructor body. You'll get a performance increase from non-POD types, increased readability from the uniform initialization across all members (const/references require member initialization), and prevent common errors (e.g. use before set errors). 

Member functions that inspect but do not mutate the object should be marked with a suffix. Mutations can happen internally through direct access and externally through references, so marking functions as (read-only) prevents mutation. Strive for -correctness. Return by value is inefficient and doesn't allow for external mutation of the value. As stated in the review of , you don't want to return a dangling pointer. The simplest solution is to delegate construction of a static variable to be referenced. 

You can simplify this problem by filtering/partitioning any non-positive value from the array. Once you have a filtered array of positive integers, you can use the filtered length to determine the upper-bound of the lowest positive integer. For a distinct sequence of integers \$D = [1, 2, 3, ..., n]\$, the lowest positive integer is guaranteed to be \$n+1\$. If you remove any value from \$D\$ and replace it with any other value (or simply remove it), then the lowest positive integer of \$D\$ is in the range \$[1, n]\$. To find it, we can simply track integers in a boolean table, upto \$n\$, marking the ones witnessed. A linear search of the boolean array for the first unmarked entry will give us a zero-based index of the lowest positive integer missing. Add one to make it one-based once again. Filtering, marking witnesses, and searching are all linear operations. Note - Since you know the upper-bound, you can narrow your range further by making a second filter pass which removes any elements larger than the array length. Would help with data locality if you have smallish arrays loaded with largish values. While using a boolean array does meet your space complexity requirement, a constant space solution does exist. Remember that every element in your filtered array is positive, so we can repurpose the sign bit of each value as a signal that we've witnessed a value of the sequence. We can use the indices of the filtered array the same way we did the boolean array above. Rather than search for the first element marked false (unwitnessed), we search for the first value that is still positive. 

Use class access modifiers to prevent users from calling member functions designed to be used internally only. For pointers and references, prefer the C++ declarator layout. C++ emphasizes types, not variables. Anchor symbols to the type () or leave them unanchored (). Whichever you choose, be consistent. Note: This enforces the suggestion that you should only declare one variable per line. 

This is probably not the intended purpose of as copies and buffers are used in the background to handle resizing. You could just use the erase-remove idiom. 

Can they point to ? What happens if they do? Your options are either to check for null on assignment/use, contractually mandate not be null (, ), or use a plain reference. 

Naming is important. When users of your library encounter your code, can they tell what it does? There are many tree types. doesn't provide the type of tree it is unless its qualified by its namespace. That could be declared away by others. Instead, doesn't it make more sense to name the class ? Make working with your library code easier for readers and writers. 

This function does not change the state of the object and should be qualified with at the end. As far as naming goes, avoid using the name for your getters. implies a mutating or possibly destructive operation on the state of an object in a non-by-value world. When you get cash from an ATM, you are taking cash out of the machine, leaving less in it. Consider naming your getter and pre/suffix your member variables. This seems like a good candidate to overload . 

Be consistent with your spelling. Rather than tracking the state, simplify the logic and just return as soon as you encounter a bad character. Prefer the member / to make it clear to readers that the elements of the range are immutable. 

Rather than memoizing the applicable portion of Pascal's triangle, you could calculate the value much faster either along the row or along the diagonal. Let \$n\$ represent the row and \$k\$ represent the column. We know that \$\tbinom{n}{0}=1\$ and \$\tbinom{1}{k} = k\$. To compute the diagonal containing the elements \$\tbinom{n}{0}\$, \$\tbinom{n+1}{1}\$, \$\tbinom{n+2}{2}\$, \$...\$, we can use the formula $$ {n+k\choose k}= {n+k-1\choose k-1}\times \frac{n+k}{k}, ~ k > 0. $$ To calculate the diagonal ending at \$\tbinom{7}{2}\$, the fractions are \$\tfrac{6}{1}\$, \$\tfrac{7}{2}\$, and the elements are $$ \begin{align*} \tbinom{5}{0}&=1,\\ \tbinom{6}{1}&=\tbinom{5}{0}\times\tfrac{6}{1}=1\times\tfrac{6}{1}=6,\\ \tbinom{7}{2}&=\tbinom{6}{1}\times\tfrac{7}{2}=6\times\tfrac{7}{2}=21.\\ \end{align*} $$ Looking up on the table to verify, \$pascal(7,2) = 21\$. Applying this, 

(requires ) provides simple lexicographical comparisons that works at compile-time (unlike s comparators). We can create s on the fly with . 

Keep functions short and simple. Functions that are focused on a single logical operation are easier to understand, test, and reuse. Instead of having a function "do-it-all", let's take a different approach where we break-up the code into abstractions that perform single logical operations. Some pseudocode: 

Do you really need the level of protection an anonymous namespace provides? Prefer using a named namespace (, , etc) to protect against accidental usage. Use anonymous namespaces for details that need to be limited to the local translation unit. 

as little as possible and avoid in library code. Most implementations will include static constructors into every translation unit whenever you . Don't impose this cost on those that use your library. is used your test code, so you should relocate there. 

Note - Example code for exposition only. and are part of C++20 (Library Fundamentals V2). is just a helper for over a container. If you would like to play with these features now on gcc/clang, see mnmlstc core. If your base is never going to change, you don't need a generalized base conversion solution then. The base conversion could be specialized for your specific use case, from sizing the appropriate buffer to strength reducing the expensive operations (like division/modulus). Always measure before optimizing. 

You can extend it to take any timer object (countdown timer, named timers, etc) if you wanted that functionality. Use consistently Your implemented function does not mutate the state of your and can be marked as . Avoid latent usage errors by properly ordering headers 

Be safe and always brace your single-line body scopes. They can't be misinterpreted by maintainers (both human and machine). 

Keep previously computed results around for operations that could be costly. The complexity of is constant on average, linear in the worst case. 

only what you need. This is likely the result of dumping your library code and test driver into the same file, but results in successfully being compiled when you actually meant . When providing a streaming interface, prefer including instead of to avoid injecting the statically-constructed default streams into every translation unit that includes your library code. Provide iterators to traverse the container. Iterators will also allow your code to interface easily with other libraries like the C++ standard library, boost, etc. 

Consider what types of values can be passed into the function. While things like primitive types and small objects (2-3 words) are cheap to copy, not everything will be cheap. In the case of a templated type, you don't know the size of the object passed in. Pass the object by const-reference. Don't introduce a variable until you actually need to use it. doesn't need to be declared at the top of the function and all you are doing is asking readers to track variables that aren't needed until later in the function. Declare it before the loop. Consider offering users the strong exception guarantee (should failure to append have side effects?). What happens if throws some variation of the exception? 

Say we want to the maximum value of . For the built-in integral types, we can construct them with the value . Constructing a with a value of only sets the low bits. You should check to see if is negative and set the high bits appropriately. 

Other options include using typesafe with containers like Alexandrescu's , , or classic / result types. If you don't care about the error type, you could use an . 

The logic for the loop is up front. Prefer initializing loop variables in the initialization when not used out of the loop Avoid magic constants 

The symbol is still vulnerable to collisions, but the likelihood of someone declaring a macro name of the same format won't be nearly as often. This example uses random.org's random string generator. 

You had opportunities to reuse code. Write an adaptor composed from two s or another standard container. Instead of using raw pointers for resource handles (ownership), use smart pointers (). Manual memory management is tedious and error prone. Smart pointers are simple to use (/) and provide leak-freedom by default. Note: wasn't included in the C++11 library. You can find implementations on SO. Inline with the modern C++ approach, containers should have a constructor that takes a . ing multiple values onto your would have been simplified. 

Now you can write the short and simple functions that are easy to read, test, and maintain. Get familiar with the standard algorithms found in and . Do you really need to sort the entire data set? Would partial sorting () suffice? For even-sized data sets, you could pair up with to find the two values. As Vnp mentioned, is a candidate for summing up a range. 

Is there ever a situation where either or exists while the other doesn't? What happens if the callee passes a that is ? 

Since programmers and their tools work mostly from header files, prefer to assign default values at the function declaration site, and only assign to that parameter once. 

You're pack expansion could be abstracted into a general purpose function that applies a parameter pack to a function. 

objects are contextually convertible to . They are also overloaded for . does not predict when you will reach end-of-file. It's purpose is to tell you if it has attempted to read past the end of the file. The simplest solution is to check if the stream was successfully read from (). 

My main concern would be what questions you asked. For a generic stack, maintaining a full list of minimums can be expensive. If, through communicating, they were looking for a solution for an integral-based stack, a different approach could be used. While you had a driver just to make sure everything compiled and ran, it would have been nice to see actual tests. 

The biggest issue is that it only returns 1 letter/count pair. What happens if you call . Your function returns the pair that is first encountered that sets rather than . If you want to return all of the max pairs, build your count hash, find the max value, then return all elements from your hash that has that max value using .