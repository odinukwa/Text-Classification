Indeed, you are not in a position to push for code reviews. However, you can suggest using code reviews. It may even be the case that they recognize what advancements can be brought in through a "fresh pair of eyes" and using dedicated code reviews may be exactly such a thing. 

If then they still want to continue talking about the events leading up to your outburst, discuss the situation. You've clearly stated it doesn't excuse your behavior and clearly made the disconnection between her being wrong in the first place and you reacting disproportionately. 

This question has a lot of answers already, but what I feel are the two important factors haven't been mentioned together yet. On top of that, there's a third thing that I don't think that has been mentioned at all yet. Should you use this information in the hiring process? No. Definitely not. In fact, I believe that you will be unable to make an assessment without taking this into account (humans are flawed beings like that). I would consider making a statement somewhat like this to the person you are supposed to report to on this matter: 

A lot is going on There are quite a few things going on here. Many of these have been addressed, and I will briefly mention them and my vision of what you should or shouldn't do about them. However, there's one point I haven't truly seen addressed yet which I take to be the biggest problem and I will address that in more detail. Bugs & style fixes You fixed the problem while at the same time changing the code. In my opinion, this isn't a big issue, but it is generally better to keep separate things in separate commits. This would have had the added of separating the conflict from the bug fix here as well. Differing views You disagree about what version follows the conventions better, is more readable and is more maintainable. If he's your senior, it might be good to follow his lead on this. Alternatively, it might be good to have someone else from the company have a look at the code together with both of you, looking at it from those three perspectives. Tough code The code was hard to understand to begin with. I've found it to be useful to ask questions about the code in such situations, especially if you know who wrote the code (and/or the code was written recently). Asking questions can both lead you to understand the code better and help the other person see why the code was hard to understand to begin with. This often brings up ways the code can be made clearer all by itself, which you can then discuss before implementing them. The attack The other person gets pretty aggressive by suggesting that you have to part ways and that they are going to your manager to keep you off certain code. As written, this is pretty serious. It depends a bit on which way the difference between the actual things he said and the way you paraphrased him here sways, but purely by the way you have written it, this alone should be reason to talk to your manager. If you do, don't make it about the code, but about his attitude towards you where he seems to consider making threats to you okay. His code He doesn't want you to edit his code. In my opinion, this is the biggest problem. This is a pretty toxic attitude and I think it strikes at the core of the issue. Hobbyist programmers are often very protective of their code and sometimes that can be seen with professional programmers that have worked on code by themselves as well. However, it does not have a place in any professional setting and is extremely toxic when you're responsible for the code as a team. Ultimately, the problem is that the code isn't his. The code is the company's or perhaps the team's, but it's not his. Instead, it is code he has written. I think it's important not to refer to it as his code, but as code he has written. Without stating it isn't his code or correcting him when he says it's his code, it can be beneficial to consistently refer to it as code he wrote yourself. This goes both for the moment you are discussing the situation with him, as well as when discussing the situation with other team members or a manager. First of all, I'd say that I would let this incident be what it is for now. However, I would also not go out of the way to avoid touching code that he has written in the future. It sounds like this is going to be a thing that is going to come up again and walking on egg shells all day isn't going to be of help to anyone. Assuming you're in a team with more members than the two of you, the first thing you could to is talk to other team members about the issue. Ask them if they have experienced the same behavior and how they handled or would handle it. Your coworkers are a resource that shouldn't be underestimated. If there are no other members on your team, you can instead ask other colleagues that have had to work with this person in the past. Then, if this programmer turns out to be overprotective of the code he wrote on another occasion, look to apply the suggestions from your colleagues. Beyond that, you can also ask him if he is upset because you changed code he wrote or that it's that he thinks the change affects the code negatively. These are two completely separate issues and it's important to make him aware that they are. After that point, it seems like it would be time to escalate the issue. Talk to your team lead or manager (whichever is more appropriate) and explain to them that this person seems to take issue with you touching the code they wrote. While you are open for discussion about the quality of any code (which you should be), it seems that it's seems to be the fact that this person wants the code that he wrote not to be touched (by you - if that's what your impression is). Explain how this falsely partitions ownership, responsibility and understanding of the code and how that's detrimental to the product and increases the way the company relies on specific people. (Of course, such an explanation shouldn't need to be nearly as detailed when talking to a team lead as when talking to a manager.) In conclusion So, essentially, I think that the most important thing is to separate out the different issues and tackle them individually. This should also make a it a lot easier to deal with each one of them, as you now know what's going on. 

Yes. However, before doing so, read on and make sure you raise the right "this". Indeed, as the junior member, it's not your place to say "this other developer is writing bad code". However, there is clearly a difference in what you consider quality code you consider acceptable and what code other team members consider acceptable. That is something that would be good to discuss with your team lead. This way, it is much less about faulting someone else and more about finding a good way to continue from here. This may mean that your team lead tells you that you can relax your coding standard. It may mean you end up finding the correct middle ground. Either way, you feel uncomfortable because of the differing standards people hold their code to, so that should be what you discuss. It shouldn't be whether or not someone else is writing code that is acceptable or not. 

Open a door If you feel like offering your support, do so indirectly. Let this person know you're available if they want to talk. A good way to do this might just be to ask them if they are okay. If you don't know this person well enough to ask that, you probably shouldn't try. Don't use the confidential information You have this information you shouldn't have. Don't use it, instead focus on the things that are public knowledge. Don't ask whether they are okay because you knew about their situation, but ask it because they come across in a way that may suggest that they aren't. You mentioned several visual indicators that something might be wrong (hair loss, tiredness, pale). These should be the reason you are checking in on them, not the information you weren't supposed to have. Respect it if they don't use the door If they answer your question by saying they are fine or by saying that they would prefer not to talk about it, that's that. Don't pressure them into it, just leave it be. Your outlet Besides treating the other person properly, it's also important to feel comfortable about the situation yourself. However, you shouldn't involve the other person in that. Instead, talk about it to a partner or friend who has nothing to do with this company or the person in question. Yes, strictly speaking this is breaking the bond of confidentiality. However, this way it's entirely inconsequential for the person it is about, so it's not so much breaking the intention of the confidentiality. 

At this point they might be able to guess in which direction the event was. However, they don't know for sure or know the details and you handling it professionally should (hopefully) prevent your colleagues from losing respect for you. It should definitely be noted that this is a very delicate thing and needs your own judgement as to whether it is appropriate (and possible) for your situation with the people you work with. 

Your experience is based on a single encounter and it is hard to tell how accurate it is. Even if it is entirely accurate, parts of it may be misguided (i.e. the notice of protecting troubled young women) and without disclosing the information to others, they can't make decisions based on that. Finally, even if it is all justified, it will definitely not look like that and it may even put you or your company in a tough spot if he hears what happened. Should I do something else with this information? Yes. It would be a good idea to disclose this information before he starts working with you. (It could be postponed till after he is hired, in my opinion.) This is because it doesn't benefit either you or him if this comes out later on. However, in your situation it is a complicated question who to talk about this with. It would be best to talk to someone who isn't involved with the hiring process. A (confidential) counselor might be the best option, but small start-ups rarely have these. The next step in the chain would be the HR department, but if you have one in this situation, they are probably deeply involved with the hiring process. Lastly, one could think about a superior in the company (i.e. your manager, or perhaps even the CEO). If the company culture is such that you can talk well to the CEO and that (s)he isn't involved in this particular hire, it may actually be a good option. However, this should of course be done at your own judgement. Postponing this message until after a job offer has been made (or perhaps even after he has been hired) might mitigate the problem of this person being involved in the hiring process. It can also be a good way to make it clear that you are not trying to influence the hiring process but just wanting to prevent surprises in the future. Of course, that does not let you off the hook in making it absolutely clear that it isn't your intention to influence the hiring process. How about him not being a good fit for the team? That is, honestly, what probation (or trial) periods are for. It is hard to get to know someone well enough just during a couple of hours of interviews. It is still quite hard to get to know someone in just one night. However, the first weeks or months of working there should give a much more complete picture. If things are as bad you think them to be, that would become clear enough as he starts this job. Where I am from, trial periods are completely standard. I have absolutely no idea what it's like where you are from. If your company doesn't do trial periods, you could think about suggesting them. The good thing about a small start-up is that there's often relatively much room for suggestions like that. It is a bit of a minefield, though, and it should never be suggested to have such a trial period just for this candidate, but rather to make it part of all job offers the company makes. You could suggest it with the previous statement about abstaining from making a recommendation, by adding something like the following passage. Do note that this kind of thing does need some judgement from your side because you will need to be sure it does not get interpreted incorrectly. 

There's a number of answers here already, but while they all agree that you should go, I think there's still some more to be added to the answers. Should I go to this meeting? Yes. Is this a strike that will count against me for the rest of my career? Maybe. Many of the other answers and comments give a firm "yes" to this answer, so I guess there are definitely cultures in which it is. However, where I'm from, I don't think it would be. This also is in line with the HR department being against you or being there just to prevent lawsuits. They may be in another country, but they are definitely not in mine. You will have to gauge their position yourself, I am afraid, as it can vary even from one company to the next. However, also consider that there may not even have been a complaint to HR. Instead, the person in question may just have wanted to talk it out and when she felt that she couldn't get you to do so, approached HR for a helping hand in that. Should it have gotten to the point where they demanded this? No. A question should have been enough. If someone lets you know they would want to talk about an incident that happened, you should. Even if you think the incident is done and closed, this clearly shows that the other person does not and that should be enough reason to talk it out. Whether the question came directly from the person you snapped at or HR shouldn't matter in this. (Of course it coming from the HR department gives you some leeway to separate the question from the request that was the intention behind it, opening up the possibility for an answer like this: I wouldn't particularly like to do so, but I will.) Was there anything before that I could have done differently? I won't tell you that you shouldn't have snapped. Of course you shouldn't have, but it can happen and I can't say that I never have. However, I will say that you should have talked to her sooner. Unless your manager specifically stated that he wanted to you to apologize by email, I think it would have been better to apologize in person. Apologies that aren't handled face to face have a tendency to feel "flat" rather than sincere. On top of that, it also leaves little room for a response. Having made that apology in person would probably have prevented things from getting so far out of hand. It may even have gotten you an apology in return. Is there anything I should avoid now? Yes, do not bring up the situation that led to you snapping. Don't be afraid to discuss it, but also don't bring it up. This discussion will (probably) be about you snapping. Don't confuse that with the events leading up to that. If your colleague (or the HR department) brings it up, you can say something like this: