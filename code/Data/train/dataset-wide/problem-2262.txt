Greenstone Walker is right. If you are granted SA rights, there really isn't much to do there to prevent it. I like that you are worrying about protecting from your ability to make such a mistake. I've seen people burned by an "oops" restore before. Not pretty. There are potentially a few things you can do, though. Your milage may vary but some ideas to get you thinking: 

The Manage Connections dialog is for a connection to the Database or Instance you are performing maintenance on. So if you type in a sql authenticated user called 'bob' there, the user bob will be the one that connects to the instance to do the maintenance tasks you are specifying. You can prove that out by running SQL Server Trace/Profiler (in a dev environment) and seeing the connection being made. That is basically the user that is connecting to the objects within SQL Server. The connection to the folders and external resources will be, in this case, whatever your SQL Server Service Account is running as. It's a bit confusing but it sort of works like this: 1.) Your SQL Server Agent Service Account (or the proxy account used) will do all of the executing. It will call out to the maintenance plan, it will handle the job logging for job history/etc. 2.) When the maintenance plan is run - any of the tasks inside of it will either use whatever permissions the agent account has, or whatever you have explicitly defined in the maintenance plan connection manager -as you have done. 3.) For any access to resources outside of SQL Server - the SQL Server Service account will actually be the account interacting. So to write a backup to a folder, your SQL Server Service account will need that permission. The agent tells the server to run the maintenance plan which tells the server to do a backup. The service account of the SQL Server service then performs what it was requested and it writes out the backup. Also You didn't ask here - but I'll mention it again like I did in the last answer. I don't get anything for recommending a free resource - but the Ola Hallengren maintenance solution I mentioned on a related question from you is a really good resource. It will intelligently do your index rebuilds/reorganizes so you only touch what needs to be, it will add more control and intelligence to your statistics updates, it does a great job with backups, etc. But the nicest thing going for it? It gets rid of the black box of maintenance plans and takes a variable out of play for you to have to worry about seeing inside of with some of the more advanced security questions you are trying to get answered. 

For most applications hitting SQL Server 2008 R2, you would be fine going either way, I think. support is being removed after SQL Server 2012 but until it is, you'd likely be fine either way based on your standards and your needs. That said, I'd look to future supportability and consider going with the Native Client. I would say a more important decisions would be to consider using the Native Client for your .net apps if you aren't already. 

Some People are in favor of keeping their "C" drive dedicated to just the OS and OS binaries. This can give you some different options for recovery in the event of a crash on the C drive, it can help keep the OS from causing or receiving space related issues from sharing with other apps. You are isolating SQL Server's binaries from other programs and ensuring availability of some of the critical folders like the Logs folder where error logs go - this folder needs to be accessible for SQL Servers start up. You are protecting yourself from others, basically. 

Yes, most likely. This is a short answer, but it sounds like you are really just asking - Can a job on SQL Server 2008 calling an SSIS package built on 2008 connect to a database in SQL Server 2012 and do some work within that database? SSIS can connect to many OLEDB/ODBC compliant connections. You could, for instance use an SSIS 2008 (or 2005 or 2012) Package to read data from one Oracle database, do some transformations and the write the results of that to another Oracle database, never talking to SQL except the SSIS engine. So an SSIS package in 2008 should be able to work with a connection to 2012. Some caveats like - if you are using a deprecated command structure in an execute SQL task - it will fail.. Or test it and verify first. But this should work, if you are just asking if - from within the SSIS package can I talk to SQL Server 2012. 

Is there some component that needs to be reset or restarted after a database restart? Do you have to follow a very specific order of operations for a SQL Server shutdown/restart during maintenance windows? That probably looks like the application or middleware servers going down first, then the database. In a cluster failover you get the DB going down first. What does this mean for you and your company? Do your third party software package vendors support installations on a cluster? They should, it isn't much different but they may have guidance of things to consider during a failover. Do your apps automatically try to reconnect a certain number of times? If not, can they? This may be a good thing to consider in your clustered environment to save some time in the reconnection and getting back to work post failover. 

So is basically saying "Open this query on the linked server" - It's the preferred method for doing a select when able for me. Instead of saying something like 

Split out your drives. At the very least I'd love to see separate drives for (Your Mileage May Vary here also, really depends on performance profile of your setup): 

When formatting your drives for Data files and TempDB specifically, consider doing the 64KB allocation unit size. (Source) Now is your chance to maybe clean up some of those security holes and flaws that could exist. Look to build with best practices and least access. 

So How Do you Start? Entry level jobs. Perhaps getting a job as a developer or general IT admin with some DB skills on the job. Going to community events and user groups and learning and applying yourself. Trying some volunteer or helping gigs with non profits or start ups. Basically get near databases. Work out a career path where you can do something with data. I started out working as a support rep. Dealing with all sorts of questions, but SQL Server questions were one of the types. I studied hard, became a go to person for tough SQL problems and moved up from there. Then I worked as a Jr. DBA someplace and the rest is history. Patience I was just discussing this question with a friend on twitter and they mentioned "you don't get there overnight" - That is great advice. I see a lot of people starting out who want to be the senior DBA right now. So you need a little patience and humility thrown in there. The first years of a DBA career are learning, figuring out which way you want to go and a lot of support time doing tasks that are basic. While you learn in these tasks and disciplines and prove yourself, more and more tasks will be added and more responsibility granted. If you stick with it, work hard, keep things online, build the right character and grow in your skills continually, you will get to senior DBA and do more fun stuff (well combined with more meetings and time spent with project managers) - but it is a marathon and not a sprint, in the DBA world. These answers are opinions, and that is why this whole thread not survive, but if it helps you out - copy and paste it and give some of the advice a whirl. Best of luck! 

So here is where having more information can really help. On first blush this could be a problem with a simple index create as a solution. Perhaps there is no index on the clientID in each table. Perhaps there is no index on the ClientName. But there could be other factors at play, too. It is possible that the vendor issues this query as a contains search using the syntax of and then no index on CompanyName would help. It could be that the database design requires a lot of key lookups and an index isn't the solution. Either way - 6 minutes for 15 rows is not acceptable. I would look at those tables and at least verify that the CompanyName and ClientID (or whatever the columns are that contain those values) are indexed on each side. I would also strike up a conversation with the vendor. Even just you adding indexes could be an action that violates your support contract. Perhaps there are considerations that they already have. And you shouldn't have to be working through someone else's bad design or poorly performing application. You can gather some data to help you. Play with the PAL tool and look at your performance data on your system. If you have a development/test environment and you can recreate this, perhaps through playing with Extended Events or SQL Trace you can see the query that issued and then run the query showing a query plan to get a sense for what is happening. But I would definitely loop the vendor in to a question like this. 

Unfortunately this is an "it depends" type of question. We could theoretically give you answers from our own experiences, but you will need to test. If you do bump into issues they will not necessarily be impossible issues that you cannot fix, they will require testing and tweaking. 

In SQL Server, you need to keep table names and column names static in code that isn't dynamic. To do what you are trying to do, you'd have to use Dynamic SQL - declare variables for your SQL Statement, populate the SQL statement dynamically - using your @TableName variable to supply the table name - then execute the dynamic SQL. There are a lot of gotchas to think about with Dynamic SQL. A good place to start is a rather lengthy piece on the good and bad side of Dynamic SQL from Erland Sommarskog in this article, "The Curse and Blessings of Dynamic SQL" 

I have a feeling that this may be off topic and/or opinion based and may get closed, but I'll answer anyway for now. This is from a Microsoft SQL Server perspective, but it really applies well across the board in my experience. I've been a DBA or a DBA consultant for about 15 years now and I've hired and been on the hiring team for junior, mid-level and senior DBAs. Others may have differing experiences in other answers.. On Certifications I don't look at them. Especially when I am hiring someone who is relatively new. If you want to use a certification process to properly and effectively study to learn and to find where your gaps in knowledge are - then definitely. If you think the certification will make you hirable in and of itself - it just doesn't typically hold true. But it is a catch-22, some recruiters will ask for those in job requirements. But then so many people just pass low-level certs with brain dumps and a complete lack of testing. When I see a resume with little experience and a lot of certifications, I get nervous. I guess the takeaway on this topic is: Certifications can help, but they are seldom most important or even top of criteria On Becoming a DBA My first question back to someone who wants to become one is why? In fact if you interviewed and told me that you really wanted to become one I'd want to hear why. Most of the best DBAs I know fell into it from development, system administration or other career paths. This does not mean that you won't be successful if you want to be one. I just like to know why. If it is because you have the right mindset, you like troubleshooting, you like to keep things in order, you like to make sure systems are alive, data is protected and you are drawn to the career field? Then that is great. What Skills Are Important? To a new DBA? I want to see you have a proficiency in the basics of being a DBA. You need to know what the most important job is (and back it up with a why and how you will do it). My personal opinion is Recovery - because without the ability to recover you don't have a DBA and how I'd do it - I'd focus on the restore end and work hard at making sure that everything we did had an eye towards a possible restore. The implementation, the testing, the best practices in place, etc.. Now is that the only right answer? I don't know. If you said security and you explained it right, I'd be interested in hearing more. Basically, though, I want to see that you have the right character traits (below) and the right basic knowledge that you should have at your skill level and experience. Starting out? I want to see that you can backup and restore.. That you can do some basic investigation into current activity. I want to know that you understand some of the basic building blocks of performance (what resources are important and why, how DB Design and development affect things) and have a lot of the character traits I describe below in place or heading there. Character Traits I wrote a blog post about this (Six reasons I won't hire you) awhile back. I won't regurgitate everything I said there here- but basically a good DBA is someone who has: 

Immediately After Migration Lots more here. And a category of "On migration week" could be added and maybe someone will or I will edit and add later. Some things here that come to mind straight away: 

The best two books here are both from Itzik Ben Gan - Inside SQL Server T-SQL Querying and Inside SQL Server T-SQL Programming. Read the Querying one first. Covers all the important information on how queries are processed, thinking in terms of sets, etc. Covers all aspects of querying. The second book goes into programming constructs when working with T-SQL. Amazing books. 

The SQL Server service account is ostensibly the account which will be creating the file. It isn't your account. But the service account. That said, sometimes I've seen issue where UAC can cause issues and you need to run as Administrator. If you use the SQL Server Configuration manager to change service account the necessary permissions should be granted but it could be you are trying to write to a drive not originally configured or that has bad permissions changed. Should be the service account, though. SQL Server service, not agent. 

But best takeaway for doing that- test with more data - always makes sure you have data consistent with production and expected future production. Query plans start looking data when you give more rows to the tables, and try and keep the distribution what you'd expect in production. And pay attention to things like including Order By or not, here I don't think it makes a terrible bit of difference in the end, but still worth digging into. Your approach of comparing this level of detail and data is a good one. Subtree costs are arbitrary and meaningless mostly, but still worth at least looking at for comparison between edits/changes or even between queries. Looking at the time statistics and the IO are quite important, as is looking at the plan for anything that feels out of place for the size of the data you are working with and what you are trying to do.