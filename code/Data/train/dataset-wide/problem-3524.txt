While your host resolves to your server's IP address in the DNS, your host does not. It is being answered by another server entirely. It appears that it is being answered by some server hosted by Namecheap, which is returning a redirect to www. but dropping the path and query string. It does not appear to be capable of preserving them. You can fix this by fixing the DNS record so that it is an A record pointing to your server, instead of a record pointed at Namecheap's broken redirector. 

In practice on the public Internet, messages in which this is done are uncommon, though they do occur especially in enterprise and academic environments where it's much more common for one person to send email on behalf of another, or of a group. I've never actually seen spam that does this (and got through all my other controls). I would generally consider it unsafe to discard or raise the spam score of such a message. 

MySQL 5.6 has only just reached GA on February 5. It will take some time (days or perhaps weeks) before any packagers have stable builds available, because changing the MySQL version affects many other system packages. 

Your local yum cache appears to be out of date. Run and then try again. Or it could be that the repository is broken. In that case you'll need to contact the repository maintainer. 

But there's more than that wrong with this tutorial! The second thing is that nowhere in it does OpenVAS ever get configured to actually use redis. It relies on the compiled in default, which as we have seen is wrong. To fix this requires setting a configuration directive in , something which the tutorial never mentions: 

This is one thing that the 410 Gone error can be used for. Google and other search engines can use this information to determine that a URL is no longer valid and is expected to never be valid again, and thus remove it from their indexes. 

Use your out-of-band remote console (IPMI, iLO, DRAC, etc.). If you can't use a remote console, start a temporary second copy of sshd on an alternate port with the original configuration, and connect with it to make your changes. If something goes wrong and the new sshd configuration breaks, you still have one running on an alternate port to connect with. 

The error message from told you why it didn't work, but for some reason you didn't act on that information. You should do what it suggested and stop the ntp server first, then try it again. 

You need to put the files in some other directory, not under . Such files are intended to be accessed only by the system administrator, and it's a very bad idea to allow any other user to get in there. As you can clearly see from your directory listing, the permissions on allow only root to read and write that directory. All others have no permissions at all. This is why user prosody cannot traverse that directory. 

Don't use inside blocks. This is one of the most common nginx misconfigurations. Instead, place the in the block, and use inside blocks that need specific directories outside the normal document root. 

This will cause nginx to handle itself. It will then try to serve the file out of the defined document . By the way, you probably want to use different error pages for 4xx errors and 5xx errors. "Not found" or whatever is not what you want people (or search engines!) to see if a backend is down temporarily. 

If you need to build a lot of RPMs, or you're creating a repository, you may want to set up an automated build server with something like koji. 

Wouldn't something like Avahi work? This is even installed and nicely packaged for most Linux distributions. Just give each instance that needs to be reachable a unique hostname, and Bob's your uncle. 

Your email is being sent from "apache2@prod.xxx.com", and the domain prod.xxx.com is not the one for which you set up an SPF record. You can do one of two things: 

The best explanation I have seen is in the introduction to RFC 4862 (which you should read in its entirety later): 

The Debian/Ubuntu version identification is a Debian-ism which isn't present in standard OpenSSH. You can disable it by setting in . The end result will be: 

This is where things are going wrong. When this runs, the configuration fails to validate due to the permission problem noted earlier. 

Matching the PTR and A records makes it possible to verify the claim made in the PTR record by automated means. If the A record isn't provided, one must go to the whois records to verify whether the PTR record accurately represents the entity in control of the IP address, a tedious manual process that's difficult to automate and is often wrong or out of date. This is important for security reasons in many contexts. One that I'm familiar with and will give you an example for is: 

And I suspect you really do not want to be sending 301 redirects, as the user will then see or right in their address bar. Perhaps you really mean to process these URLs internally only? In that case change to . 

OPcache dumps the entire cache and starts over whenever it hits any of its configured limits. This behavior is a bit annoying, but it's what we're stuck with for now. Since you aren't hitting the memory limit, my guess is that you're hitting a limit you aren't collecting metrics on. In particular, you aren't collecting metrics on the number of cache keys (files) in use. I suspect you are hitting the limit of 65407 which you have configured, and should raise it. Whether you are hitting that limit or not, you should begin gathering this data. 

It's clear that even 40 is too many Apache processes. You have only 1GB RAM and 2GB swap, and you're using all the RAM and more than half of the swap. The reason your processes are in D status is because your virtual machine is thrashing in and out of swap. It's unlikely to recover on its own; you may as well reboot it. Decrease the number significantly. For a low traffic site on a micro instance, I can't imagine any way you would need it to be higher than 10 (nor for the instance to be able to handle much more). In fact, the settings you have commented out look like a very good starting point, and you should probably restore them. Once you've recovered, you can start looking at what else on the system might be eating up lots of RAM. 

This will be just a static HTML document that contains whatever you wish, and you can be as rude as you like. 

Delete at least one of the old kernels, as alexus said. Then: Edit and specify the limit of the number of kernel versions to keep. It's set to 5 by default, but your system seems to be capable of handling only two: 

You're actually receiving mail with ssmtp? That's a strange configuration. Anyway... So ssmtp reads a file (which may or may not exist, and which your distribution's copy may look for elsewhere, so check the man page!). If you put something like these in the mail.rc then it will forward your mail: 

Place your rules in a file in the directory, with a filename ending in . This requires systemd 226 or higher, which in Ubuntu means 16.04 LTS or later. (And if you think that looks like JavaScript, that's because it is JavaScript.) You can also limit it to specific users by checking , e.g.: 

What is this about GNOME Display Manager? That shouldn't be present on an installation-only media. The fact that it is present makes me think you mistakenly downloaded a live media image. Go back to your mirror and get the correct netinstall image.