When you are overcomplicating stuff things get progressively more difficult and prone to bugs. Shorter most of the time really is better. Now let's break down your code and review: 

Currently you calculate the same thing over and over again for each prime. You could use a sieve to calculate all primes until a limit (for instance) that way you have to calculate the primes only once. 

I was playing around with the pygame module, and decided I should try to make a game. I like to play Gomoku, so that was the game I decided to make. It is my first experience with pygame, thus I'm guessing there is plenty to improve on. Any stylistic review or more pygame specific would be helpfull. 

Perl localhost test enviroment I have tried to create the important features of the webpage, namely that you can post the and , compare it to a database entry and give back the result. I have used the as I think it would be the way of keeping things simple. My recreated perl webpage 

We need to remove at most one element from the list, so if it is already strictly increasing we can return true, since no element has to be removed If it is not we will continou, what are the possibilites from here? 

Should add a second white line between imports and your functions Line too long, at your statement Continuation line under-indented for visual indent style formatting is recommended against 

Use In my opinion argparse is better then the getopt way, Divide your code into functions for seperation of control Use string formatting Uphold PEP8 guidelines for a cleaner code 

Divide code into more functions/classes! You say you want to make it run by an AI... as is, your code would require a heck of a rewrite. But if you would have divided your code into more functions, the AI can reuse a lot of the functions you created for a single player game, and thus making your code easier to maintain, or add functionality. What functions/classes should a game of pong have? 

Code suggestions I would use a instead of a dictionary, since it is much cleaner looking and easier to use. When to use a namedtuple! Using the above suggestions and adhering PEP8 I get the following. 

You could use a context manager over the connection Using a context manager would improve the readability, see PEP343 There are some resource out there how to implement such a thing Make the login a separate function I think it can be optimized in one SQL request? Yes, but without the database itself it is hard to test, a github repo or some more information would help. However you could improve on your google-fu, Simply typing "mysql join 3 tables" would have given you the answer you are looking for. $URL$ 

Are my use of OK? I feel how I use Regex to parse the password from each site is bad, can this be avoided somehow? Any other styling/issues? 

Python and the power of unpacking may help you in this one, As it is unclear how your Class is used, I will give an example of how to initialize the dictionary with unpacking. This will work on any iterable. True to it's name, what this does is pack all the arguments that this method call receives into one single variable, a tuple called *args. The same principle applies to **kwargs too, except that in this case it applies to keyword arguments. This most of the time corresponds to dictionaries An example on how to use to initialise your dictionary class 

Using a structure like this will improve the code alot, and adding an AI (or other improvements will be easier after this) Avoid working in the global namespace This point is interwoven with dividing the code into functions/classes, see this link as to WHY working in the global namespace is considered bad. Wrap up your code into a guard. This will make your code be runnable from the command line, while also be able to be imported into other scripts 

Where does the variable comes from? is a global variable out of scope of the function. (which is BAD) What does stand for? 

Bob is jamming it's way through the city deauthenticating people from thier wifi for a few seconds. First scanning all possible wifi-AP and then pretty printing them, afterwards you can choose a wifi to jam and it will perform a deauth for a few seconds attack using the framework. This all works as intended but I'd like an intermediate review, before I try to add more functionality. This is one of my very first bash programs so please be gentle. As I'm unskilled in bash. 

You can first fill the list with chars, that will work as non guessed. If the user input letter is in the word to guess. You can loop over the string with and fill the place in the list where letter matches. As a return you can check if they are all filled(not chars) nicely with the keyword 

Here is another approach, directly iterating over the string. And making combinations of them, lastly checking for distinct values by comparing to the set 

Naming should be instead of for functions String formatting looks alot nicer then string concat in prints Use a if body Don't catch bare . 

Note that using wilcards would be considered bad form in a regex You might want to change that to suit your needs. 

Use parenthesis with the statements, this will make your code work in You could use some formatting to make the string concatations a bit nicer looking 

You don't need to copy the variable, since you do not change the original list. That temp var is not needed. This could also use some list comprehension, with proposed changes that becomes: 

To first understand how MiTM works I've made a few MiTM scripts, but this time I wanted to defend myself against such attacks. I'm unsure if my idea even works. The code seems to be working but I make a few assumptions and I'm not sure if those are correct. Assumptions 

Review Your implementation is quite good, but ofcourse there are always some things that can be improved upon. 

Sometimes, I'm reviewing old questions written in Python2, with no parenthesis around statements. Or I'm changing one of my older codes, also without parenthesis around print statements. It annoys me to do this manually, so I decided to write a little perl script to change it for me, however it looks rather ugly. And I think I'm missing some obvious regex to do this? I don't yet write to another file, but just print to the commandline. Note that I'm making the assumption that lines that print and are net yet ended, end with 

I've posted a few questions about natas a wargame. But I'm stuck at natas29 it has to do with Perl. I've never coded in Perl before. Thus to help me beat the last few levels, I decided it is time to learn Perl. And what better way to learn it, then with wargames from overthewire. I made a small Perl program that beats the first few levels of bandit (in combination with some bash commands) I'm specifically looking for answers that provide insights on how certain Perl operation could be abused, but any review is welcome. 

Use inheritence, they derive from the same super class, but for now they have different constructors. Alot more typing ;) You could use a to get a visual representation of the stats, these can also be handled by the parent Class. If you use you could use the fancy , see the relevant PEP article. 

looks clunky as hell! How can this be made beautifull again? Is my general logic ok, or should I have divided the problem in easier to comprehend functions? Any stylistic review is welcome too. 

Question I love using NMAP and other related tools to scan networks really fast. But using a tool and understanding how it works are 2 different things, thus I tried creating a program where I can scan a subnet for open . I am using on a machine in It works, but is rather slow. Will be working on later on, so that is not under review. Before I continue with coding, I'll want to know a few things: 

BUT I think if you put this conditional before your block, this would be one loop, because after this conditional you kinda repeat yourself alot. 

I really tried my best this time to make it hard for all code-reviewers to critique my approach by making it readable while still keeping it simple. However as always I wonder how I did, and therefore feel the need to post it here. Is there anything you would change or improve to my implementation? 

Use instead of manually opening and closing Use instead of the structure Improve naming of your variables, PEP8 is a good guideline Use List comprehension at reading input 

I have been tinkering with Natas a wargame from $URL$ I have been doing that the past few weeks whenever I have the time. After finishing the entire challenge, I thought it would be fun to write a Python script that automatically solves the challenges. I've learned alot about the module doing this, and it was fun rewriting some of the PHP cod to Python. It executes a function that is rolled from a function dispenser to get the password for the corresponding link, afterwards it creates the new link (with a username and password). The dispenser then finds the next function with that link. After finishing I do have some question regarding my code: 

I know it's only a challange, so I don't always feel the need to us proper variable names. But I fear when I come back to this challange, I'm confused how this worked again. Any review is welcome. 

README.md Tetris game I am working towards making a Tetris game where you can challenge an AI. Multiple parts have been finished, but a lot is still under construction. However I would like an intermediate review. The code I will post is a fully working 1 player Tetris game made with python3.6 & tkinter. If you are interested, Check the full github online. Controls 

Mostly this is just for fun, but I'm still not that good in webscraping. Therefore I post it here for a proper review. 

3. When dividing code into seperate functions it makes for a more readable code, and that way it can be imported by other programs. 

That looks alot better no more long , and it shows all players have to do the same. Secondly for the main game which I rewrote in a function also no more because we can iterate quite nicely over a dictionary. 

This could be done in one loop, by tracking if any of the current visited vertex in the dfs, are in either the last or first (row or collumn) Alternative code 

There are some valid points in the other answer but it doesn't address all problems with the code. I have a few additions to make it cleaner IMO 

Tests The description is a rather simple one, when pipes are leaking then things become interesting. So here are a few Testcases if you want to have a go with this. 

Your double while loop looks silly to me, I think it be more concise to use 1 loop and use a structure within 

Dry The don't repeat yourself principle, (which also handily removes duplicate lines and therefore greatly reduces LoC) Your and the main game which should really be in a function! are both DRY because each player has the same possible moves and that is were I can shave of the most lines. If I change the function that it has as a player as argument we avoid alot of repetition. Same goes for the other PEP8 & Readability There is this amazing thing called PEP, which helps all python programmers to make the code more readable, if we adhere this we can improve the following: 

I have done this challange before and I quite liked it, now let's dive in teh codez... Review of your code: First of all those 2 while loops look kind of silly, and that is what is giving you your TLE's, if you wanted to improve the timing on your code, I would start there. This should be possible with a 1 loop, now when for instance you look at the last test... one of the last elements needs to be changed. You change it, and it works... but then you loop through the entire array again means we start checking from beginning which is not needed. And after that you check the array yet again but this time delete another part and loop through it again! After your second loop finishes you check the outcome and that is a little too late. 

Just a simple utility that logs the pressed keys in Python and takes a screenshot everytime a new PID is opened. Ì got bored at work, so decided I was going to have some fun with this. Made in Windows 

Review Yes the first option would be better as memory might become an issue with really long numbers (say you have a 10 million length number). But that implementation could be improved as well 

Reads alot better in my opinion. I would suggest to read up on PEP which has alot of nice pointers for Python style. Algo This should be possible without recursion, when I choose a big value you will get an error: 

Sorry for the long read, but this was actually quite a difficult challenge. That is why I wanted it to share it with this community. Any review is welcome. 

Try it out for yourself to see the difference, and if unclear what is going on you can always ask me 

Use a nested generator expression. DON'T hardcode variables, this will make your code very static. Make a function, to accept different variables. 

Yes there is list slicing. Just with list slicing only the reversed could be Where the last is the step, and means we step over it in reverse This returns a list and not a generator, thus your reverse could be return a[:k + 1] + a[k + 1::-1] @user2357112, I feel like a rookie now. I made a mistake, intuitively while fast typing I thought list reversing would be like this but instead it works differently, with exclusion. , and becomes: 

Why does it has to be a ? Maybe it is preference but loops look cleaner. Reversing can be done by using function which reverses a iteration 

You could avoid this by increasing the recursion depth but this is more of a hack then a solution. How about a based approach to avoid the recursion? 

Be sure to check out PEP8. There are some nifty tools which will alow you to check your code for PEP8 violations. For instance, PEP8online Return when search not succeeded instead of Add a and a overload 

Make it work for both and . use a body. Added a dictionary to map the (no more need for an block) According to the python style guide, functions and variables should be