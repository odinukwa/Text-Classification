Good that code allows a leading . Pedantic point. overflow is undefined behavior and that is the result of the following with , a string that should "work". 

Allocate to the size of the de-referenced type. With above change, size to the variable, not its type. Easier to code, review and maintain. 

Minor: Why isn't the first vs. . Just to maintain symmetry? Why use instead of ? Portability? If C99 or later available as the minimum standard, better to use . 

With the context of OP's code with small strings, using is not a problem. For maximal functionality, C best uses for array indexing and so should . Recommend to define variables closer to where they are needed. is superfluous. 

Using Roland Illig suggestion of returning the square of the distance was significantly faster (3-4x) in all cases. If code can use the square of the distance rather than the distance, certainly that will make for the best performance increase. 

Avoid magic numbers. The is is certainly derived from the 512 in Use a macro to define both or derive it. 

Really not a fan of using to hide a pointer. In the end this is a style decision. In my experience, hidden pointer types are harder to debug as they tend to be surprising. 

Should have a negative value, so will return a negative value which causes out-of-bounds array access. Various ways to handle that. For me I would use an unsigned type like or . Also amend calling code. 

B2. Although is OK, consider adding a scrub. By zeroing free'd resources, code that inadvertently accesses free'd data tends to fail quicker. Sooner bad code fails, easier it is to ID and fix. 

5) serves little purpose - it is always . Drop it or if code should correlate to the type of references, than use that directly. 

Incomplete prototype declaration. Using allows following code to wrongly pass parameters and the compiler does not warn. 

The is only possible when . But this is minor. In a more complex code having this stand alone may be preferable. 

Allow for atomic error handling. In addition to getting the error, it would be useful to have a test and clear to allow simpler error testing. The point is that once upper level code tests positive for an error (the error is caught), the global test status should be immediately cleared (atomic) to allow for subsequent setting without a chance of intervening code messing up things. 

Recommend to include the corresponding header file first. If relies on any include file, then it (the .h file) should include them. View this from a user's perspective of the functions in the .h file. The user should not need to know .h perquisites, let the .h file include them itself. By including the .h file first, any missing needed headers will surely cause a compiler warning/error. 

Potential inconsistencies with not limited to 15, , range may be as small as -32767 to 32767. Suggest: 

Instead allocating to the size of a type, allocate based on the variable. As code develops and the type of changes, the following is automatically the right size. 

I'd expect non- function names tailored to linked lists. Example: is too likely to collide with other code. 

Conclusion In all, using FP math to solve an integer problem has various unexpected corner concerns and so is hard to insure code is right for all . 

Primary review requests (of the non-test code) Portability concerns: Might a common or rare case fail on some select systems? Handling of exceptional/error cases: Any suggested alternates? Performance concerns are appreciated when they are backed with real measurements. General comments (on any code). 

Soapbox: Overall, the core issue with modern code efficiency improvement is that it is unlikely to be a good investment of coding expense/effort. Spend time writing good code without employing tricks. Real efficiency improvement comes from higher level choices than this - which can vary from implementation to implementation. You may code something faster on a select platform, but be slower on the next as the big O() is the same, 

I would add and to the list of "numeric" characters. Suggest to invalidate all white space as a delimiter candidate. This will handle "How can I deal with the situation where an arbitrary number of spaces follow a delimiting character?". 

will read the entire should it encounter an embedded as will not break the loop. Better to continue loop if exist and the buffer just read is max length. 

Clean-up When using passwords, good to scrub buffers: a small step to avoid memory dumps harvesting information. 

Rather than , consider having return a value that can be tested. returns for at least 3 reasons: , input error, scant buffer. Calling routine only looks for the common does not check for a result in , yet later code dereferences that pointer also without checking. Pedantically, is potential undefined behavior (UB) when is signed. functions take a in the range of or . Solution: String array indexes as well as memory allocation work with type and not like this code employs. This impacts portability/correctness once the array size exceeds the minium of ,. In , does not check for potential overflow. does not check for memory allocation failure but leaves that for the calling code. IMO, the exit handling should be in . should be so a complier properly complains if called with a parameter as in 

Notice this form avoid in 2 places. Negation adds to complexity. Don't you not think it is not so and not so when not done? 

Should code trust that the string will convert to a valid number of hours? Look to or if in doubt (or experienced). 

I ran test cases and found OP's functionally correct for finite float over a 2,000,000,000 test cases. As a test case, I tried OP's original versus the below and was at least 10% faster with the new code. Of course, that is just one platform comparison, yet aside from NaN issues, the below code is functionally similar to OP's and as a plus, is highly portable - unlike OP's. The point being that OP's compare method needs some reference point to justify the bit magic.