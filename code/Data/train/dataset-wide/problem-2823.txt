But the question states that the input is one value per line. Personally I would validate that there is one value per line. Here you are calculating the factorial multiple times: 

So now both object are sharing the same pointer. So far this is not a problem (though probably not what the user expected). But when and go out of scope at the end of the function they will both call delete on the member (double delete is undefined behavior). The same rule applies for assignment operator. 

Design. You use a mixture of int and doubles to represent monatary units. This is not a good idea. double (like all fixed with decimal representations, can not hold all values exactly). You should use an integer like type (where all values are represented exactly). If you are in America and using dollars and cents then I would use an integer but the balance of the account is held in cent. When you print it out you can then place the decimal point in the correct place. Code Review In: 

If you run from the command line it is not needed. If you are running inside an IDE set up your IDE so that it does not close the output window when the application finishes. If your program always succeeded. Then I prefer not to return an exit value from main(). The compiler in this one special case will plant a for you to indicate success. This is a good indication that you have designed your application so that it never fails. 

Combining business data and resource management into a single object breaks the separation of concerns principle. By making your object do both resource management (handling the actions of a list) and business logic (packet data) you might be making it more compact but you are making the code more complex to handle this situation. As a result you will pay for your compact data with more code. 

In general there is still too much reaching into objects and interacting with their members. Your classes should define an interface that are verbs that allow you to interact with them but they should not expose the members. In particular the gxd_data and Map obejct are so interrelated that you should just make gxd_data a normal member of the Map (or pass it in by reference). Edit To try and find things I started wrapping things. Note this is not a perfect design because I did not have a good test environment thus I was trying to wrap code without altering it too much: glx_data.h 

Note: array access is not validated against the array bounds. Normally you don't check as we do not want to impose an extra burden on the responsible just because there are bad developers. But it is traditional to add at() method that does the same work as operator[] but also validates the bounds of the array access. 

Check error status: Well the first thing you should do is check the error state of all system calls. From: sem_wait.html 

No need for the type T here. In fact putting it here is probably a bad idea. As it allows you to search a vector of double with an integer. Now there is not much you can do with compiler standard conversions but at least you can make sure that the value passed to the function has already been converted to the correct type for comparison. 

If you want the student to access any methods on the book directly it needs to be public. But you can pass some identification to the object. It can then invoke methods on the book via the LMS and the book identification. 

But to be honest you don't need this constructor at all. I would just remove it. Don't dynamically allocate a node in the destructor. 

I know it looks simple. But if this node is default initialized some of its members are in an indeterminate state (as you have no initializer list and some values are POD). When you perform the on these members it needs to read them to move their value. If you read a variable that has indeterminate state this is undefined behavior. If you really on zero initialization in your code to make sure the members are initialized. Then your code becomes brittle. As a change in the use case in a different part of the code may result in the use of default initialization and you are back to undefined behavior. So make sure you initialize all members in a constructor. I would use the dead simple: 

You are converting this every time!!!!! You should convert it once when you read it in. Conversion is really expensive. (I mean the calls ) Don't manually flush the stream 

You are really writing C C++ has its own language specific features to handle multi threading. Your interface is broken. The only way to test the value of the counter is via but by the time you can use the value the counter may have changed. 

You want the internals of the array (ie. the array members) to be aligned to . This is technically aligning the array (not its members). I have not read up on the requirements of the array (so this may work) but this seems a bit doggy. Just point this works because is a special case (guaranteed to only have one element that aligns with the specified data type). In general aligning containers on their content data type may not work. Initialization 

Because this still allows and to be parsed as numbers. You really need to break this up into a couple of expressions to fully parse numbers. 

You have the 1st list but seem to cobbling the second list out of thin air each iteration. Code Review. 

Refactor common code into a function. This way if there is a bug in your code then you only need to fix the bug in a single location (this prevents cut/paste errors). Here is the point where the constructor will help: 

It may be in every C++ book but in real programs (more than 100) lines it causes more problems than it is worth. You can easily get tangled up in all sorts of problems with name look-up. The whole point of being so short (not ) is so that it is simple to prefix items in the standard library easily. You can also selectively use to bring specific objects into the current namespace. 

Subtracting two iterators requires that they are at least iterators. But the standard comes to your help here: 

@Morwenn already suggested using scoped lock to make sure the mutex were correctly locked and unlocked. But I would also move the sleep outside the lock. This causes the current thread to stall but the other thread can not continue as the lock is still held while it is sleeping. 

I can see that there is no else. You are just asking for trouble when the code goes out of sync with the comments. Comments are for describing why you are doing something. There is no point in describing the code with comments the code should be readable by-itself the code describes what it is doing. You go to all the effort of making the counter inside counter_base atomic. But this is a complete false sense of security as the variable inside is not atomic or protected in any way. Also there is no checking of the counter when accessing the element so you can just as easily hand off an invalid pointer. 

I understand you are trying to make your exceptions easier to use by adding a couple of stream operator to the class. But you can achieve the same affect with greater flexibility using std::stringstream. 

The problem here is that you loose control of leveling up. With this technique anybody can write an alternative way of leveling up. Then if things change you need to find and modify all the techniques when you change how leveling up is done. This should all be part of the player class that way leveling up is controlled as part of the player. It is done in one place (and only one place): 

With an enum there is no space taken up (though potentially the above may be optimized out). C++11 also allows you to specify the size of an enum: 

In my ongoing attempts to become a better blog writer I have some written some more code that needs reviewing. Full Source: $URL$ First Article: $URL$ This is a Simple Client Server implementation using RAW Sockets. MakeFile 

Though personally I would probably have written an input operator that read everything directly from the stream. Rather than copy strings all over the place. Conversion is hurting. 

Lots of good stuff from and . Destructor I missed an obvious one. The destructor (to be like an array) must destroy the members in reverse order (taking the catch and throw out for now as I am still working on that). 

The system header files aready define FALSE/TRUE. Also in this situation you define TRUE as 1. This is not correct. The only thing you can say about is . Which is not necessarily the same as 1. 

Does this really have any meaning for a tree? The nth child in this tree. What about the next tree down. Seems like a very strange interface. 

Select You are using incorrectly. It's not going to break anything as it is used here. But this is not what it is designed for. 

Its a nice trick. But I don't see what it buys you. So you have a std::string object that you now use. 

Design. Do you actually need to count all the characters? I would just record that I had already moved them as I moved them from source to destination. 

If the log level is not going to print anything. Then calling the function is a complete waste of time. You need to defer the call of and only call it when it will generate something useful. Bad Code: This is not even legal C++ 

Its a bad habit that will cause you grief one day. See every other C++ code review for a good explanation. Pass by const reference You are passing the parameters by value. This will cause both the vectors to be copied. 

General comments The algorithm you are using is too complex. Some of the answers on SO show you how to simplify the algorithm so I will not repeat that here (they are all good). Code comments Don't put two variables on a line: 

Especially since you have very little (none) vertical white space. This makes the code very hard to read. Please one variable per line. 

This is because you never expose a object via the interface. Though personally I would make node a private sub class inside the class. Use a constructor in Node to set it up. 

Do not fall in to the mental trap of thinking that you are saving space for re-use. The compiler is quite capable o doing that all by itself. This test seems a bit redundant: 

Requiring all members to have a member called that has a type of is a it funkey. Technically with a tiny piece of work you could actually get the type automatically from the object (so we can ignore this). But relying on the member is not how we handle this situation normally. Rather we pass a type that knows how to compare objects. Normally I would do: 

If you run this file through your program. Then the s no longer line up. You have broken the indentation of the file. The whole point of the exercise is to make sure you maintain indentation. 

I have no idea how much space I am allowed to use in target. Either allow the function to allocate its own space (and return the pointer) or get a maximum size passed into the function. If you pass in a size the return value is usually the amount of space you would have needed to succeed. This allows the user to do pre-flighting to work out the size required. 

Also its really simple to read. I also notice you missed the move assignment operator. This means your class will only use copy assignment (which comes into play when you look at your move constructor). If you change the design writing these becomes trivial.