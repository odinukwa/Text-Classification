You should just write "Furloughed". Just be honest, it is what it is. Potential Employers know that things happen throughout a persons career and that during economic uncertainty people who thought they had job security get laid off all the time. Ask your employer if you can get a good reference. The sooner you get another job the less risk they have of having you take unemployment. 

I'm doing very well in my position, The other manager at my pay grade(who was hired around the same time as me) is doing very poorly. He was basically stripped of all of his responsibilities(but not title or pay grade) and put underneath me to learn from me on how to succeed. I'm not sure how to treat him, I know that training him is an objective for my next promotion, but he knows less then most of my employees and is technically at my same management level. I've been directing him as one of my employees but going into the bigger picture on why things are done a certain way. I've been showing him what I do and trying to delegate things as I feel he is figuring them out. There are times when I just have to tell him to do something, but it doesn't feel right and I don't want him to resent me for doing so much better in my position. What advise can you give me on this situation. Should I be hard on him? Should I treat him more as an equal or an employee? I guess I feel a bit guilty because he moved across the country for this promotion and now he's basically at the same place before moving away from his home. 

Be honest on your resume and in your interview. Talk about how you work on teams and how you interact with people. Talk about your experiences and accomplishments rather than programming skills and understanding of algorithms. Smart employers don't hire managers or leaders based on their technical skills, they hire them based on their soft skills and leadership potential. If you're unfamiliar with some of the processes just find out what type of development they do and study the SDLC. Also the PMBOK (Project Management Body of Knowledge) is always useful. When I didn't know something that my direct reports knew very well I wasn't afraid to be humble and just ask them to explain something to me. It made them feel valuable because they knew more than me and respected because I came to them as a source of information. 

It would not be acceptable, all places of employment are looking for one thing in an employee. Someone who follows instructions. If you make your own application it's not following instructions, it's saying you are going to do your own thing. Many larger business have those forms in a specific way for a specific reason. I'm required to use a company wide form when taking applicants, and I'd be sited for non compliance if I failed to do so. They are going to: - Look at you funny - Ask you to fill out one of their applications. - Laugh about you after you walk out the door and toss the one you made in the trash. If you want to customize something you should make your resume shine, or get a haircut and give a fresh shave. Just fill out what they ask on the application. It's all about the first impression, "Looks the part, followed instructions, was on time, was polite" that's what you're hoping to come across as. 

True and false. I've had jobs where I contributed code in Java and C#, but Python is my bread and butter and I can confidently say that though I accomplished the tasks I needed to accomplish in those other languages, I did so without familiarity with language idiom and my code certainly had "an accent" that gave me away as a non-native speaker. 

Yes, very much so. I would only ever consider walking out of an interview in this manner if I had been unambiguously insulted or purposefully misled. I would be aghast as an interviewer if I witnessed it (as I do my honest best not to insult interviewees). To see why this is so rude, transpose the interaction to a different social situation: if a stranger were telling you a boring story at a party, would you stand up, announce "This story is boring and not a fit for my interests" and walk away from them? More importantly, wouldn't you be upset if you were passionately sharing stories about your lovely pet cocker spaniel and someone behaved this way towards you? 

By being extra good! You're not experiencing a witch hunt; you're experiencing the doubts of people who are unfamiliar with your work and your capabilities. This is heightened because performing well in your current role is taken as strong evidence of competency (as I found when trying to get a job as a hobbyist without that track record). It's amazing how much this sort of proof matters; in 2011 I couldn't pay someone to let me program for them but after a year of experience with the job title programmer (during which I was not a very good programmer even), I started getting recruiters reaching out weekly or even daily. You've got to give interviewers a warm and fuzzy feeling about your ability to accomplish the task they need completed. You can do this by refreshing your skills, sharpening your interview technique, and showing them work you've recently done. If you've not done work recently, now's as good a time as any to jump into a side project that will dust off your programming skills AND give you a finished project you can discuss with interviewers. 

What I'm about to say might sound silly or superficial, but it has been born out in my experience during my past ten years in the workforce. I've found that companies that describe their developers as "IT" and that put items like "writing markup" in their job descriptions tend to be more traditional, less flexible operations. IT also tends to be a cost center within a non-tech organization, whereas development tends to be "where the magic happens" in a tech-focused company. Having been on both sides of that divide (four years in QA/programming in an IT role, the rest in non-IT programming), I'd encourage you to aim for the latter sort of role if possible. In my anecdotal experience, IT cares a lot more about the certifications you have and how good of a candidate you are on paper (e.g. do you have any gaps in employment?) whereas software shops seem to care much more about "can you solve this whiteboard problem/take home programming assignment" which I think would work in your favor. This is somewhat tangential to the rest of the answer but still worth your consideration! 

What makes this a good answer? First, you buy some time by repeating the question and explicitly stating you need a minute to think. There is nothing wrong with taking a minute to think - when candidates rattle off prepared answers I often detect insincerity. Second, you clarify the scope of your answer - you're not going to tell them about overcoming challenges, or your biggest weakness, you are actually going to find a mistake and tell about making that mistake and trying to solve it afterwards. Third, you do just that. You choose a mistake that isn't insanely bad (one time, I stabbed a fellow student, which in hindsight was totally a mistake) but that isn't trivial (I forgot to get ketchup on my hamburger) either. You tell a story of the appropriate length, which contains a minimum of excuses, describe the consequences of the mistake and what happened after that. There are many bad answers to this question. Claiming to never ever make any mistakes is a sign of a delusion. Telling a LONG story about how totally unfair it was that you got a low mark when the prof was clearly to blame and your mistake was not trying to get the prof fired right away is also a red flag. Telling a very personal story may also be wrong. Some personal stories may be ok if they might relate to work - say you overpromised something and from that learned never to overpromise, or you missed a personal deadline like the last day to shop before Mother's Day and you learned from that to plan things in advance. It takes some skill to answer a slightly different question than you were asked, but if that's your plan, do that. Don't give a big "you suck" speech with 3 or 4 options that would be better than what the interviewer asked you, and then trail off after offering to answer one of them. Just reframe the question and answer the one you'd be willing to answer. If (and I would be astonished if this happened) the interviewer replied, "no, I mean a life mistake like choosing the wrong school, cheating on your lover, getting in a car accident, drinking too much and getting arrested, that kind of thing" you could certainly give them the speech about being personal and not related to web development. If. But a better first reaction is simply to answer the question you'd be willing to answer, and answer it well. 

You can list shortcomings under "development", but don't assume it's just code for "put your negative feedback here." An excellent entry would be 

And don't say any more than that. Possibly mention that you'll make up the time by staying late, but don't volunteer what the appointment is for. Of course, you'll be asked "What kind of appointment?" but you don't need to answer. Practice saying "it's personal, and I can't miss it." Practice saying "I know it's inconvenient. I can't move it." [Notice the absence of but in these sentences - say them with and without but out loud and observe how much more powerful they are without it.] Consider saying "it was inconvenient for me to come in last Saturday but I did; I'd appreciate a little flexibility here." Stand your ground and go to your appointment. I sincerely doubt that you will come in at 11 to find you have been fired. Will people suspect it's a job interview? Almost certainly, though it could as easily be a marriage-counselling appointment, a meeting with your parole or probation officer, or a trip to the divorce lawyer's office. There are plenty of things for them to suspect. If they think it's a job interview, will they take that into account when promoting or reviewing you? Yup, though it might have a good or a bad effect in those cases, and besides you don't plan to be around long enough to get a promotion or even a review. Will you be given a terrible reference for no reason other than you (without lying) took personal time for a job interview? No. Not at any place whose references are of any value. 

It helps to have something to show or a story to tell about your break. If the break was, "I was just burned out on programming" I totally get that, but you'll want to have a positive spin to put on it when it comes up in interviews. It'd be nice to just be able to be straightforward in your reasons for this but I think a little personal marketing here would improve your odds. Have you had the chance to work on anything interesting these past two years, or travel, or maybe follow a non-programming passion? 

I've only ever felt like I'd encountered hostility in an interview once. I was given a toy version of a problem that a company had solved in production by the engineer who had solved it. When I whiteboarded it, he replied with "Yes that's correct, but it's suboptimal" with an emphasis and tone that made my blood boil. Luckily I was able to recognize that having this out with him was suboptimal and kept my indignation to myself. At the end of the session when he asked me if I had any questions for him (and I'd had time to cool off), I asked him how he had solved the problem in real life. It ended up being a net positive interaction, I learned something and in the end was offered the job. How can you (or others happening upon this question) avoid this in the future? 

It sounds like your friend became defensive. Your friend and the interviewers may have different outlooks on the role of an engineer... and that's fine. If he wants the job despite this philosophical difference, the onus is on him to convince the company to come around to his point of view. Getting angry because somebody doesn't want to buy your product is a poor sales tactic! Take the feedback gracefully and consider it later. Maybe his coding skills have atrophied a little? It happens! Maybe this isn't his primary tech stack? Understandable! If he's applying for roles that place a high priority on coding skills, it may make sense to brush up his hands-on coding before the next round of interviews. 

I understand where you are coming from completely. I am a software engineer who started off as a hobbyist and I had a bear of a time convincing recruiters and HR departments to give me my first chance. It sounds like the barriers you are running into after not doing dev work for a while are quite similar. With that in mind, my advice: 

Some questions are impolite no matter how much you sugar coat them. The people in the room were reacting to the content and implications of the inquiry, not the phrasing. "If you don't mind, kindly a . Thanks a ton!" is still " a " even if you are smiling. 

If you also took time off from personal software projects, it'd be good to pick that back up now instead of after you return to the workforce. When I was trying to make the jump from hobbyist to professional, side projects provided evidence to bolster hiring managers' confidence that I wouldn't just crash and burn on day one. Here's an example I created (much later) as I was trying to learn a new language (Rust). It's an amateurish Tetris written in a language I had not mastered. Even given that it is less than professional grade, being able to point to work I've successfully completed in a language that was new to me has helped me make my own case. Demonstrating your C# proficiency in a side project would de-risk the hire from the company's perspective.