I think that for your first case, you should follow @Jeroen's advice and use since exception handling is expensive, you don't want to throw an exception every time this might happen. If you really want to wrap exceptions, you shouldn't wrap them with , since it is very abstract. Every exception is an . Now, if you're still really sure you want to throw exceptions, you should use custom exceptions. Something along the line of when your ID doesn't exist in your data store. This exception makes it crystal clear that the record wasn't found, and the developers using your API will understand it right away (if they don't, you have another kind of problem!). About the , I really don't think you should catch it at this level. You should let the client (UI, web service, etc.) decide what to do with the since you have no control over it. 

So well, that's less code! :) You shouldn't call twice. It's the most costly operation in your code, so you should call it only once! Same thing for . Instead of typing all the time, you should create a variable to hold it! Not that accessing an array is that expansive, but well, it'll help for readability. So, let's check the final code : 

With this approach, there is code repetition, but I'd say it is neater. We can fix the repetition by using with a little tweak (god I hate this word). 

Note also that the recommended use of is when you can figure out what is the type just by looking at the code, so : 

Another problem I see is that you use when you don't really need to. Your condition to break is right after the assignation of your assignation, so why not just at that point. And right after your , you the values. So you should the product right away! Next, instead of having and variables, let's try to keep it simple with only . 

Again, I don't like nesting. I feel like in such algorithms there's no real choice but maybe I'm wrong.. Is there a way to make the code look better/more explicit? 

The first thing that needs to be addressed is the indentation and the spacing, because that's the real issue here. You should line your braces with the start of the line above it, like so : 

Also, I'm not sure if it is a preference or not, but classes name should represent something that can do an action, not the action itself, so should be I don't know why you return a boolean in your validations if you never return false but throw an exception. You should make a choice between return false if the validation fails, or changing the interface signature to and return if the validation succeeds. You could use the validators returning void with the following signature 

You compute the sieve twice while the result could be cached. Compute the prime numbers at most once, and you'll save some processing time. You could potentially keep the prime numbers in a binary tree, which would make the search a little faster than a simple list. When you ask for a specific range, check in your tree if this range already exists, if so, pick a random prime number in this range. If there's a part of the range that already exists, compute the rest of the range and add it to your tree. If the range doesn't exist at all, compute it all and add it to the tree. If you use this generator a lot, you'll realize the performance will be much better. Also, maybe create a to hold all this information. 

Your method could be more performant! Let's work on this first. Using to keep characters to include and exclude isn't a good plan. String concatenation is kind of expensive and researching in a is a \$O(n)\$ operation, meaning you need to go through each element of your string to find if a character is contained. You should use a for excluded characters. The is a collection where each element is unique (which is another good thing for your set) and checking if an element is contained is an \$O(1)Â­\$ operation, because the elements are indexed by . For your inserted characters, an would do just fine. This will be much faster than using two strings to keep your content. Your variable names should reflect names, not verbs. Meaning should be . 

The code right above constructs your code in 2 times, the first where we will add one number and one letter one after another until we reach our . The second part will have the responsibility to add your separators. The real advantage is that you don't need to worry anymore about your array's indexes, which could become confusing. Now, if we want to remove the second loop, we need to be able to tell when to the at the good moment in the first . To do so, we need to be able to tell how long will the final code, including the separators, will be. Let's introduce another constant to do the maths! 

Creating a syntax tree from the tokens The algorithm yields the following results in these test cases : 

This way each of your is independant. Next problem, there is no relation between your and your . This is bad. A works in a (in your example, we'll keep it simple), but in your code, we don't see this relation. To keep it simple, we'll say that a with a . What does it mean? It means that the method should receive a parameter. 

So, let's look at that timer! This class as an property, which well... auto-resets the timer at the end of each interval is set to . Which will be the main difference between your and methods. 

Your validation doesn't have to be in the controller, I'd even say it doesn't belong there. You should probably think about having Command validators that would be some other classes that say if your command can be launched. I would want to give you more information, but the lack of context on the code makes it hard for me to show you how I would build the controller but it would go along these lines : 

Right now, you have one function that takes care of all this, we should split it. Because, shouldn't disable a textbox, that doesn't make sense! :) You need to have functions that aren't coupled to your inputs, so we'll try to introduce parameters instead of accessing the all the time. 

Notice that the method is now , since it's an helper method. You'll be able to use it in any context, which is great! I changed the parameter to , as it's clearer this way. You didn't pass a , you passed a as a parameter. It's important to be very clear. I'm copying the . I'm not 100% sure that's useful, but it's to avoid a problem with references. If for example I did : 

Was I so naive in 2015! I had a flash during my sleep. Why would have the possibility to add a single ? That seems to break the Single Responsibility Principle. To fix this problem, I added an method, which initializes an empty collection for the 's . The method then calls on both the nodes of the new . 

It might look like nitpicking (and it might be!) but it improves readability by a ton. Talking about nitpicking, I think your loop could use some spacing : 

You shouldn't use a constant, as it is... constant. You then need to recompile your code to change the algorithm, which isn't good. You could retrieve this string from your file, which means you could configure it without recompiling. If you don't mind being stuck with constant algorithm, I still don't think you should them. Retrieve the from a maybe : 

Overall, your code is very good, there is not much to review.. In your ViewModel, you might want to use to do client (using jquery unobstrusive script)/server validation ex : 

Now, if we want to get rid of the that is a little difficult to read, and keep the fact that you alternate between a number and a letter in your code, we will try and use a instead of 2 

I don't think you should have constructors that don't take a as parameter. It doesn't have any value since this way the won't be able to operate. If I want a machine that'll execute 0 operations, I'll pass an empty . You should specify visibility modifier for your class members, at least I think. We could argue that since the default value is private and that considering OOP members should always be private this wouldn't matter, but I think it would add to the readability! In your method you could use instead of 

This method works as well if you want to have parameters to your method, but I didn't this explanation because I don't know if you need it.. 

You should have a method to initialize a user (or log it in, whatever floats your boat :p) and one to retrieve the currently logged in user. This way the user of the class has a clear understanding of what's happening "under the hood". As I said, I don't know JPA and it makes my confidence over what I'm saying a little less high, but I know that using reflection in a unit test it bad. Usually it's because it's an implementation detail. That's exactly what it is at the moment. Your variable is useful to you and no one else. Your unit tests should test what is useful to your client. And if the unit test have a hard time doing it, your client will have a hard time using your code. Overall, JPA or not : Reflection in unit test = bad unit test = bad design choice. Think about refactoring your class to change this and I'm sure one day you'll think "Darn, that guy from Code Review was right, I would've been stuck if I had keep the implementation as it was." Otherwise, @chillworld's answer is good, that's something you can do. But I wouldn't encourage it for such a trivial case! :) 

We can now use a instead of having chains of . There's also a third solution, that I don't really like, honestly. It involves reflection, meaning it is slower and well... not really clean. I'll show you anyway because well, I'm no master of you. :p This solution works using the first interface. Don't forget that using reflection, you loose the compile time check, which is not a good solution.