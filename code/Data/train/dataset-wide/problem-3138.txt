Thanks for sharing your code! Let's see what can be improved. Design You're mixing a lot of things in your code. This makes it difficult to read and write. It also violates the Single Responsibility Principle. I'd recommend separating those three "responsibilities" in different functions/classes. The easiest way to do it is to have three functions: 

You should also wonder what you're going to do with bubbling events. If there's an event which is not handled in the layer, is it going to bubble up and be handled by the map? For all browsers? Those issues (and many more) are already covered by jQuery, which is why I don't suggest rewriting half of their event-handling code and simply use it directly. Why not writing your API as a jQuery plugin? 

Never Trust User Input. Depending on the value of and , could now contain a or anything else. Even if you have sanitized your inputs earlier, you now need to use a prepared statement, either with mysqli (close to mysql_*) or PDO (object-oriented). 

This specific run took 12.7 seconds (original.py:5). It spent 4 seconds in the generator, 2.4 seconds in , 1.7 seconds in , and 1.3 seconds in . That's a total of... 9.5 seconds out of 12.7 seconds spent in the line. This would have been impossible to figure out without profiling (as you can see in kyle k's comment). It's the number one rule of optimizations: since you'll spent 80% of your time in 20% of the code, only optimize what you know to be slow! Removing the 80% So, how can we replace this line? The idea is to use instead of . The issue with is that we only see hexadecimal digits, not bits. Since 20 bits is 5 hexadecimal numbers, that's not an issue here. If you needed 21 bits, then you would ask for 6 hexadecimal numbers, which is more hashes than necessary, but still worth the speed up. Here's the new code: 

You're repeating yourself before and after the loop. Use a construct to avoid this issue. Be careful about your indentation. For example, is not the starting of a block, and you should not indent what's after. Java IDEs can indent code if you don't know how to do it. When checking for , don't use but for the second block. It makes it clear that the two conditions cover every case. The variable is not used anywhere. Never keep dead code around, it simply confuses the reader. 

I prefer handling error cases first, even more so when they are really short. It helps knowing that the is the normal case. When putting the error condition last, you can not see it and have to remember "maybe there's something else", which is cumbersome. For example: 

As you say, describe both an event and a namespace. More specifically, they describe an event on a namespace or the whole map, which is why it makes sense to add back the "layer" object. This is the simplest way to show the difference between "event on a layer" and "event on all layers": 

I believe this is more trouble than it is worth. You may be shooting yourself in the foot since your complicated solution might not work as you expect for the different configurations you want to support. Designing for accessibility is not only "turn off CSS and JS and see how it works out", but "test that my code works for all these settings". I believe you're doing it wrong here. A simple proposal Did you consider the simplest approach? 

Please use braces everywhere, the code you're using is known to lead to difficult reading and subtle bugs. Consider: 

This one wouldn't be needed with a standard way to distribute your file. Also, the pathlib documentation advises instead of . 

I also used a list instead of a tuple to check for endProgram since it's more idiomatic. I don't think there's much more to do at this point to reduce size. You could find a smarter way to compute the shipping cost (see Kolmogorov complexity) but that would make it harder to change the rules for no good reason. The block which compute amountCategory isn't too nice but since s are not expressions in Python you can't write . You could use a function if you wanted. 

Please document your records: types help but I also want to know that the first integer is the document id, and that the second integer is the score, and I want to know it in the record definition. :) Also, watch out your indentation for the last brace. Names: describes the container, but not what it contains: be more specific. The same applies for , I think you could name it or , but I'm not sure. Names are hard! In , I wouldn't alter the logic of your call just to remove the score of . I would pass the whole tuple to , and remove the score after the sum has been made. More generally, it makes sense to have function interfaces that get one or multiple 'document' rather than just document ids just because you need that right now. Defining a specific document type, for example, would help too. If you changed to get a full document including its score, you can call to retrieve scores and to get the sum. That would probably be easier to read but would require two passes: that's up to you! 

Defensive programming is not recommended in Erlang, which means you could/should remove the and clause. Using lists:nth is generally bad practice since it has a complexity and this means using your list like an array. For fixed-size lists, use tuples instead. Here's an example: 

You could also consider that droping the quantity to zero is the same than removing the item. This is easy with a and no in the 'minus' and 'quantity == 0' case: 

C-style allocation, when you could have used a C++03 vector or a C++11 fixed-size array. You're not even freeing this memory. 

Please don't use global variables, you don't need them and they only clutter your code. The good thing about a function is that I can understand it by only looking at it. With global variables, it's not true anymore and I need to be aware of all those variables. 

It feels wrong to put both versions of the code in one single function. It would make more sense to have an and function. Your code doesn't work for or . You are lucky your code doesn't segfault. For example, for "a9", temp is only two characters long, and you're writing in nine characters: you're writing outside of the allocated data! You should run throught the string once to see how much memory you're going to need. 

I think the way SE displays the code doesn't help. This one is borderline code obfuscation. It's better in your repository (without the comments). :) Consider using a temporary variable. 

They key here is to to be able to abstract common functionality away. You're not expressing "node[i] is in the neighbor array" nicely. Simply write a function which does it for you: 

Those last two methods make perfect sense. I hope my comments helped you to better understand the way MVC works. 

Of course, you don't need to only use nested functions, you can also define or before defining . OCaml tends to only use functions that were defined "earlier", so using for this is abusing the system. 

If anything, I think I would use more than two lines. If you want to stop worrying about such things, I highly recommand yapf. 

You said that the distance between two cities can't be guessed. Does that mean that is different from ? If so, the only thing you can do is to store nÂ²/2 distances, n being the number of cities (since ). If you don't want to have to guess which city goes first, you can specify some order: the first city in lexicographical order always goes first. 

About your valgrind issue I don't think the valgrind warning is about uninitialized fields in Matrix. Your functions does the initialization, right? I tested myself with this code: 

Keep it simple What do you want to do when the mode is invalid? Who is going to see the error message? Is it acceptable to crash the application to make the error noticeable? Or do you want to try recovering in another function which called this code? 

Anyway, based on other GUIs I've worked with, you don't need to worry too much about the code quality. Popular frameworks usually provide... GUIs (eg. Qt Creator) that allow you to create place your elements, and then generate code that looks like yours (not always too good). If this is possible in Maya, go for it. You can go with that approach yourself too: separate GUI code from everything else, and use parameters in for what is likely to change in the future. I also recommand that you follow PEP 8, especially the section on whitespaces. This is a standard that a lot of Python developers follow: it makes it way easier to work with other Python developers that share this convention. 

First of all, thanks for sharing your code, this is the best way to improve yourself! The M in MVC A Model in any MVC framework should provide an easy way to access a specific type of data. It allows you to stop worrying about database details and only access your specific type of data in a meaningful way. For a StackOverflow-like website, this means that your Controller can relax! Your controller doesn't want to know about . He just wants to do and know that all details (including security) are going to be handled by the Model. The model should be in charge of ensuring everything goes well with the database, but that's not what you're doing here. You're creating a Leaky Abstraction, and this doesn't help you. Try coming up with a model that reduces the work the controller needs to do. A few comments on the code itself.