I would have gone (and actually have gone in production code) for a class providing methods to obtain the values in the different units. This makes the streaming output slightly trickier but avoids the code repetition and makes it easier to lets say add Kelvin to it. I'd also prefer to use C++11 in class member initializers for the min and max limits rather than initializing them outside (unavoidable though if you don't have a C++11 compiler at hand). Also I don't like errors which say "This value is outside of the valid range" without telling me what the valid range actually is (which is not necessarily obvious if I don't have the source to check) 

Ideally you would inject the serializer into the class so you can mock it out for unit testing (in which case providing an interface for it will make mocking easier). 

Your implementation is broken, for example 15 should print but yours will print . 35 should print but yours will print . Turning an integer into a string can be done with . For reusability your code should be encapsulated in a class which you can instantiate and play as many games as you like. Once you have refactored the code into a class consider decoupling logic from output. For example you can pass in an to which you can append your output without having to care where it ends up. 

After that you use as index into the return string but you never check if stays within the allocated bounds. If there is a bug somewhere in the code or the input is formatted in a way you didn't expect then this could lead to a buffer overflow which causes undefined behaviour and is one of the main reasons hackers get access to systems. Not sure what the purpose of prefixing almost all variable with or is - smells bit of the widely misunderstood hungarian notation and doesn't make the code any clearer. You can reduce nesting a bit by checking the return value of and return immediately, like this: 

If you want keep something for the part then introduce two local variables to store the hash codes. There is also the general requirement that if two objects compare as equal then their hash codes should be equal. While this is implicitly caught by the tests I'd actually consider adding another test which checks that explicitly. 

You can use reflection to query the members of both types and match them by name. Something along these lines: 

should actually not be a member of the heap. It's only ever used in and that function is only called from . The way it's used is as a temporary scratch pad and as such should just be a local variable in . 

As mentioned by @svick you should seriously consider using which was added in .NET 4.0. You can increase the practical usefulness immediately by doing two simple things 

The use of defines for and are a pretty bad abuse of the pre-processor. You just use it as an automated copy-n-paste mechanism and copy-n-paste code is bad. has it's uses but in this case it's the wrong choice. 

Maybe it's a result of your simplification for the example but your looks like an over-engineered enum to me. What do you gain from it over using an and a for the current state? In general whenever you need to check for the specific type in order to execute some specific logic then your abstraction is probably flawed from an OO point of view. One design I've chosen in the past for more complicated parser is to have the state execute the transition. Something along these lines (does not compile just showing the idea): 

This doesn't make much sense: - should be . You are inconsistent: In the first method you check the type and use a direct cast vs in the second method you check the type and then use - either you trust the type is correct or you don't. Also in you try to not pass or empty strings to the sanitizer helper while in you don't. It would make sense if the helper method would support and empty strings. 

You will have to change your to accept a start index and a count which defines for how many items it is responsible: 

Design It seems like you had the right idea at some point about having a class (although it should be named ) encapsulating the properties of a movie like name, rating and reviews. Right now you seem to pass them around as 3 independent lists and the only connection is that the index in each list refers to the same movie. This is easy to get out of sync and you always have to pass around 3 lists - not to mention what happens when you want to add a 4th or 5th property. should just accept an as input to which you can add a new movie after you have gathered all the user input. 

Space required is 2 * O(n) (array and final string) and time is 2 * O(n) (encoding string into array, building final string) 

You'll need to add more boiler plate code when you want to have callbacks taking three arguments, then again more for four and for five, etc. The implementation isn't thread-safe and events are quite likely to be used across threads. Having to create marker classes for each event is a bit ugly and just adds more boiler plate code. It won't scale very very well if you have many different events, especially if they are called frequently, since you'll have to pay the price to search through the list every time. This could probably be mitigated by using something like a You could make better use of LINQ. This: 

Also you are performing the twice repeating the string parts which is prone to cut-n-paste errors and/or typos. You should at least store the result in a local variable. What's the point of sleeping 5 seconds after loading the file into memory? Seems like wasting time. While it's accepted practice to name simple loop counters with single letter variables in your case for the outer loop and for the inner loop would be more appropriate as that's what their meaning is. Looks like your are putting all requests in a queue which downloads all files 1-by-1. If the server permits you could look at downloading the files in parallel to speed things up. 

I tried running your implementation on my machine but with the following input (input is 25 random integers within the interval ) never completes (it's stuck in the bucket loop): 

First off your methods are not extension methods as the name would indicate. Not sure if this intentional or. If you want to make them true extension methods then I'd consider passing the parameter as rather than as . Other things I noticed: 

Update Disclaimer: I don't write much Java so the below is mostly put together from the Java docs and might not compile and could certainly be improved but should illustrate the idea of using a threadpool for executing the network check. Apparently there is no way of stopping it nicely but I leave that to you. 

just submits a single job but it doesn't automatically parallelize it. If you want to process the input in parallel you need to submit jobs each working on 1-nth of the input and then combine the results. I think your parallel execution code should look something like this: 

Yes I think you do break SRP. Currently your class is pretty much untestable due to the hard-coded implicit dependency on which is going to be very hard to mock out. You should definitely remove the connection handling (open, close, send, receive) into a separate interface and inject that instead. 

If two threads call at the same time they will not share - each will get their own list. So can be shortened to: 

I think the cleaning up is technically broken. When initializing the structure you perform a single call to to obtain a set of mapped memory pages. However on clean up you every single block allocated by the user of . As per man page: 

I would consider moving the whole pad-to-even-length and then split into pairs business into a separate methods as well. Also using a to represent pairs of characters seems to be more appropriate. 

You said that you are a beginner and apologize for your bad formatting. However there is no real excuse to write badly formatted code. Not sure what editor or IDE you use but if you use something else but notepad most editors and especially IDEs support auto-indenting and can re-format your code. Make use of it. It significantly increases readability which has a direct connection to how easy it is to spot bugs. Good formatting means: Proper indenting and to have spaces between operators and things like commas and semicolons. For example this: 

What you are doing in your second method is basically calling the async methods in a synchronous way just to then in turn wrap it into a task. This will have scalability issues because it's using up a dedicated thread (at least in the current implementation of the task library) while the async methods you call might have more efficient means of achieving their asynchronicity (like IO completion ports or timer callbacks) 

At first I didn't really like the implementation with the local but upon trying to re-implement it I realized it's difficult to restructure the code without making it actually more confusing - so fair enough. can't deal with any of it's parameters being . For you could check for and return or throw an . should probably have an thrown. Same goes for the naming convention functions: You only check for . This means you're never expecting arguments in which case you should use either use contracts or throw s or return empty strings. However given that this is a plugin meant to be used in Visual Studio as you edit you probably don't want exceptions bubbling up, so dealing with inputs might be desirable from a user perspective. I think can be simplified a little bit: