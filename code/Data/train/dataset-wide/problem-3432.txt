If you can reproduce your sessions that you think use too much memory in a dev environment, then the .Net CLR Profiler and its development web server are a good way to go about this. Here is a blog post that outlines the process of setting up the profiler and and pull InProc session data from it. If you can only pull the data from production, things get harder, but not impossible. See chapter 2 of the .Net Framework Production Debugging guide - it tells you how to pull memory data from running IIS processes that you should be able to analyze. 

Powershell Community Extensions has a cmdlet that can be used to set user rights. (And a to get user rights.) 

Nat - the first thing I would check would be that the Metadata property mappings in the SSP/Search Admin area are setup properly. For HighConfidenceDisplayProperty11 it should be set to People:WorkEmail(Text) For SIPAddress it should be People:SPS-SipAddress(Text) Make sure in the user profile properties that these are mapped to the proper AD fields. Also make sure that the profile policies are setup so that "everyone" can view the properties you are looking at. When you view a users profile page, does the work email or SIP show up there? What about if you go to edit your own profile? 

I don't think this is possible out of the box (because the selectable fields are only W3C fields, no access to the NCSA date format for example). You would probably need to write your own logging module to accomplish this. How "real time" do you need the logs? You can flush the log buffer manually using the command: perhaps you can schedule that to run every 10 seconds or something, giving you near-real time access to the logs, without having to do a bunch of programming work? 

Restart powershell and you will have your new prompt. To revert, just edit again and remove the new function. 

This is normal. Essentially, when the SharePoint search performs a crawl, it keeps track of the document, and who has permissions to the document. When permissions change, the search index isn't updated until another crawl is performed. See the "content crawling" section of this article. $URL$ 

With all that being said, there has to be a way to do this using the web.config healthMonitoring section, I just can't figure out how to say "turn off logging for all events". 

Here is a thread with similar symptoms over on the IIS.net forums. Basically, the 2 things to try are: 

Check out the built in (but undocumented I think?) stored procedures and . They should get you all the information you are looking for - just not quite as pretty as activity monitor. Example usage: 

You'll want to use adsutil.vbs for this. It should be in c:\inetpub\adminscripts\ The command line is: 

Here is a semi-official answer from Microsoft regarding IIS7. I have seen things on the web that say IIS6 has no limit as well, but nothing from Microsoft. 

This is more of a stackoverflow answer, but the following code at the top of your page should do it. This has to be before any HTML is sent to the user or it won't work. 

I've got this bookmarked from a while back, but I've never tried it: $URL$ The 4th post (by Edwin) has the solution I am talking about. 

test12345 seems to work as planned - it only alerts when items with TestField set to 12345 are added or edited. testblank "sort of" works. When editing items, it only alerts on items that have been edited where TestField is blank. The big bug is that when you add a new item, it alerts no matter what TestField is set to. I played around with this for a few minutes, and couldn't find a simple view/alert based workaround. I even tried creating a view in SharePoint Designer (where you can actually filter on field "Is Null") and the same bug persisted. The only workaround I could come up with is to create a custom workflow in SharePoint designer that sends an email when TestField is empty. It isn't great for end users, but it is something. 

Based on the screenshots, it looks like you might be attempting the install on Windows 7? If so, that is not possible, TFS Proxy will only install on server OSes. 

You can set the application pool for the web app to recycle when it reaches a certain memory size. Check out the help file for IIS manager to decide whether you need to set it for Virtual or Private memory. You'll most likely want to set the Private Memory setting (typically used for memory leaks) - the recommendation in the help is 60% of your systems physical memory. 

Backup your databases Verify your database backups are valid Really, make sure you have good backups of your databases Stop your SQL Server Start the SQL Server in Single User Mode (add the -m option to sqlserver.exe) From an (administrative) command prompt, run the following in sqlcmd: sqlcmd -S ADMIN:server\instance -d master -W -s "," -Q "SELECT Name, Value, Minimum, Maximum, Value_in_use, is_dynamic, is_advanced from SYS.Configurations Where Name = 'affinity mask'" of course replace the before running. Also, the at the beginning of the server name is important - this connects you on the dedicated admin connection. Assuming this returns the value you are expecting (the incorrect value), you can try to update the affinity mask to 0. Do this with the command: sqlcmd -S ADMIN:server\instance -d master -W -s "," -Q "update sys.configurations set value=0 Where Name = 'affinity mask'" Shut down the single user mode server. Startup SQL Server as you normally would. Cross your fingers. 

Are you using a login mechanism, or just anonymous auth? If anonymous, go into IIS manager, in the Authentication icon, choose the Anonymous Auth name, then click the Edit button in Actions. Check which user is specified there and make sure it has permissions to the site files/folders. If you have some form of login system, make sure that the user(s) you are logging in as have permissions to the files for the site, and make sure that the ID of the application pool you are running under has at least read access to the files. 

This isn't built into IIS, but there is a module you can install that will perform this functionality. It is called ARR helper, but it will work for any proxy in front of IIS: $URL$ 

With the stsadm backup operation, you can do full or differential backups, not incremental. You select between full and differential using the parameter. If you use the parameter to the backup operation, the backups are done at a site collection level. If you use the parameter, you can backup at the content database or web application level. You'll probably need to do some playing around with the parameter to understand the syntax required for the parameter. will give you a tree of everything in your server farm, and mark what is going to be backed up if you were to remove the parameter. See this TechNet article, especially the "Correction" community content by Mark Vogt at the bottom of the page for details about how to get this setup. 

This is more a "through obscurity" technique - but you can remove the "Add all authenticated users" link from the permissions page. More savvy users will still be able to type in nt authority\all authenticated users - but it keeps the average Joe from easily adding the group. 

The Web Deployment tool comes into play when you talk about wanting to script all of this. It makes it super easy to create a package for your application and deploy it from the command line. You can also then rollback that package easily if there are problems. ARR is also scriptable using the dlls. One other thing - if you are actually on Windows 2008 R2 (which is IIS 7.5) take a look at the Application Warmup module - it should make the warming up portion of this easier on you as well. 

You can't assign different SSL certificates to sites that are only differentiated by host headers. You would need to have the sites on separate IP addresses. Another option is to setup a wildcard SSL certificate (which you could then apply to all sites hosted under on the server.) There is a catch though - you still can't apply the certificate through the GUI. Instead you need to use a command line to apply the certificate. $URL$ $URL$ 

Yes this is possible, and is not considered a bad path to be going down. This is a very typical situation for people who have a geographically dispersed workforce (use a local my site but a centralized main site) or who want to separate out the my sites for performance reasons such as yourself. The only questionable part to to me is why run the my sites on separate servers at this point? I would think you'd get better bang for your (server) buck by separating the regular site from my sites, but keeping the 2 my sites together so they can share resources (and possibly have some failover capabilities? Depends on how many servers you are talking about.) Anyway - the proper way to do this is to have multiple farms. In your scenario it would be 3 farms: 

Try using the .Net process provider (you won't be able to see the results of the call, but it will give you some information about it that might be useful): 

Yes, you need to implement a load balancer (Windows NLB would work for this, but so would a hardware based appliance) in front of your sites. In this scenario you would have 2 load balanced "clusters" setup. The first would be for your content and the second for your mysites. It would look something like this: 

Based on your requirements - you are most interested in Web Content Management, which WSS isn't great at but you can make it workable. The big things in your list that are missing from WSS compared to MOSS are related to previewing and approving page content before publishing (and the built-in workflows related to such.) You should be able to create custom libraries with (custom-built) workflows attached that add this functionality though. There is a codeplex project that supposedly adds some of this stuff without you having to do the work manually: $URL$ but I can't vouch for how good it is. Also, SharePoint (both WSS and MOSS) do WYSIWYG stuff out of the box, but some people find it...lacking. If your users have non-IE web browsers, there is basically no WYSIWYG support. Even if you are an IE only shop, I would recommend adding the (free) Telerik RadEditor component to your installation. 

Building on squillman's answer - when connecting over TCP/IP, the named instances use different ports, and are most likely using "dynamic ports" (which is the default for SQLEXPRESS). Take a look at the SQL Server 2005 Network Configuration utility to figure out which port it is listening on and connect to that instead of 1433.