By recognizing the statement "If not conditionA or not conditionB, then controlA is false. If controlA is false, then functionB." to be "Only if not conditionA or not conditionB, controlA is false. If controlA is false, then functionB.", it becomes easier to see that there's no need for the control. Only if , controlA. If controlA, functionB. So if , functionB. This simplifying can only be done once you've removed the specifics of the code, as what specific code is executed is too much detail for pruning branches. 

Another assertion. This can be removed. Further shortening We can always go further. Right now we determine the next contentParseMode at the end of the line. That's a bit sloppy, because this means we can start with a empty normal segment... which doesn't make any sense. Better would be to put that bit of parsing at the start. Sure, it does cause a double parse for normal, but it saves us some duplication. Maybe we can clean up normal later. 

I'd make that . You could even short these to . This makes your code more readable AND uses less characters (less that has to be read). It's a win-win. 

You should use an IDE to indent your code properly so that you can properly read it. As it, the code is very hard to read. Most if not all IDE's will have shortcuts for this - if you're going to learn one shortcut (aside from copy, cut, paste and undo), it should be that one. As for your code - why does take an int parameter when you overwrite it with a number read from a scanner anyway? 

This would skip one cycle from the loop and remove a branch. Testing this version gives no large difference, and I see durations in the 120-140 ms range as well. Basically, I think the current version you have is good enough. If you do want to go FASTER, though, here's what you'd do: Don't print any output. The resulting code runs within a millisecond. String concatenation and output buffers hate you big time. Using gets the calculations down to 80 ms, but then printing the result takes another 40 ms. The code you have will run about as fast as things will go. Readability What you can improve on is readability. For one, I'd add spaces around operators: 

But now you have this weird thing where at the start, you say "I had changes", which seems wrong... and you always want to go in the loop at the start. So convert it to a do-while: 

This sort of construct, an else which contains only an if-else chain, can be simply written as an elif-else chain. 

What the... Have you seen the constructor? There's also . Those would make your loop irrelevant... unless there's a specific reason you're setting the array to 0? 

In here, you should check if and don't exceed and respectively. That way you can either limit the printing, or you could throw an error with explanation, rather than running into . In the same way, you should check the size of in , because if the weights and the benefits are not the same size then you'll throw an error at some point, and failing fast is better. 

I don't like . I can't give you a definitive reason; I understand why it's there. It's certainly better than having all sorts of in all your other functions. You throw when I pass in somewhere. But here's the catch. I don't know that I passed you . I gave you some sort of variable, and it comes from my pretty badly written code. And you say . I look through my code and I see nothing wrong. Like a teacher who has too many tests to grade, I get a report back: My answers are wrong. I get an F. That's not good. Now I have to study the material again. I wish I knew what to study. Studying the whole material means I'll be busy all night. If you said I'd have said "Oh yeah, that's right!" and been on my way. 

For the function... well, if you could restructure your data, that'd be nice. Right now you refer to each element by , which means that you need unique ids throughout the entire list. Depending on how accessing elements of the list works, you either have \$O(1)\$ for retrieving an element or \$O(n/2)\$. That is, either you can use the id to say "oh, that's entry number 35, let me see, one memory page fits 24 items, so I'd have to look at page 2, entry 11... there it is!" Whereas if you don't have such a translation ready, you're stuck with checking each item. For 13 items, it does not matter. For 100 items, it does. 100 items accessed via direct access means you have 100 retrievals, 100 items accessed via linear search means you have 5050 retrievals (1+2+3+4...+100). Look up "triangular numbers" if you wanna see how bad it gets. To fix this, you could do one of two things: 

Just like you define , you should try to define in your header. Additionally, it would be better to check with , because if something happens and default is lowered to 100, then you get 100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600... and then 51200, which is over the limit of 32000, but because you're using , it doesn't get detected. With , it would be. 

This lot of lines is... okay, but strange. You're obviously building this object, right, . I get that. But the variables you're assigning these values to, they're not temporary variables. These values are going somewhere else too. And that's not directly obvious on a first pass. Because I'd have gladly seen all this replaced by 

A minor bug: You get an for an empty list in . You don't have a comment stating you need to input a list containing at least something. Consider returning and adding a comment. 

I think what you've got here is looking pretty fine. You could move the comment explaining that it's recursive to the function header if you want it to be more explicit. The recursive function isn't doing anything strange, though. Usually, with recursion, one can unroll the recursion to be iteration instead. I wouldn't recommend that in this case. Right now, you have about 10-12 lines, depending on how you count. It's just two forloops. The whole function can be summarized as "make a div that contains, for each wpi zone, another div containing it's sub wpi's, similar to the div we make now." If you were to unroll this recursion then it would get messy. You did well. 

Lastly, I think you would be better off by renaming the variable to because that's what it really is. seems to point to the idea that somewhere, you have a list of circles, and right now, you're working on 1 specific circle. But that's not true, because you HAVE no list of circles and all that really matters is how many you've displayed so far. 

A minor bug: You get an for an empty list in . You don't have a comment stating you need to input a list containing at least something. Consider returning and adding a comment. 

For this sort of stuff, I'd write a wrapper. You have many of these null checks and most of them are on the wrong abstraction level, I think. Especially in , what you really want to do in a big method like that is program on a higher abstraction level where all you're doing is applying operations, not having to filter various results. You also have this: 

Like that. But what you have here is more like an object. You have two values to keep track of, and they are not related. This doesn't lend itself to an enumeration as you'll need to create each combination by hand. For that, I recommend using value objects. An example of a value object is a String. It's an immutable object of which you cannot change the value. So consider making a class like so: 

Python 3 has enums, and you should try using them. For example, you have attributes and equipment slots... 

"If a matching object is found with a different reference type its type is changed to if returns true." This sentence is missing a comma. Change to "(...)with a different reference type, its type". "If is null the pool's reference type is used instead." Also missing a comma. Change to "If `referenceType is null, the pool's (...)". At this point I think we can agree that you've written a marvelous piece of code. It's well documented, makes full use of the language's features (loop labels! Last time I saw those is when I was reading the spec for fun!), and doesn't seem to have any obvious flaws. As you can see, none of the things I pointed out relate to the actual code, save for the naming of some functions. The rest is all related to the comments and order of your functions. I'd suggest analyzing the code with various tools such as Sonar and whatever else is out there. I'd also suggest writing a set of unittests if you really wanted to polish it to perfection. 

Thread safety NameParts (and thus child nodes) can still be added via whilst is running. Your code is not completely thread safe. (partial credit to @AdriaanKoster for making me look in greater detail at thread-safety). 

This isn't the smartest move. Constantly rearranging strings, searching for delay characters... Better would be to have a loop like this: 

would check if it matches the secret pattern so far. would check if the player had input enough moves so far. is what is now. Your second pass The code you posted was the first pass of the program. The first write, so to say. Well, once you're done with your first write, you should match if each function name does what it says it does and not much else. That's how you could have discovered the turn design too. It's good that you extracted the button, but there's more to extract. Pattern would be the next thing to extract. It can have "matches" and "equals" and "extend" functions. That would help simplify some of the array functions you're using in , and . There might be a third class you can make responsible for handling the blinking animation so that you don't have this graphical logic stuck between your game logic. Lastly, not having an IDE at hand is no excuse for not cleaning the code up later. Just because you're prototyping things doesn't mean you're not allowed to use your tools. Autoformat does wonders, and generating code can help even more. Decluttering main I know from experience that it's best to keep Main.as as clean as you can. That way you can abuse it later if you need to test something, and then delete it without regrets afterwards. Right now there is no such testing place. To declutter main, start by taking a look at its member variables: 

It's not bad to have multiple returns. However, here you have needlessly complicated the look of the code by mixing various types of braces, putting in a double return... lemme rewrite it like so: 

It's a shame one is a double and the other is an integer, or you'd been able to merge both into some sort of function, keeping as a function which calls with a lengthy string. 

This is hard to understand. and were hard to grasp at first - when doing games programming, usually and are "delta-x" and "delta-y", to calculate object velocity. But it's dragon x y and chest x y here! So just call it that. 

Try to reuse the result of here. You call it three times in a row and that can't be good for performance. 

What it does is it looks for the smallest string in the array. So you could turn this into a function, with arguments for the array and the starting position ( will get you the end). The swap, 

Unused variable with a comment that speaks of functionality so large it probably requires it's own set of classes. What's going on here? Presumably, you have some code that you left out. Even then, I'd say that this is not the way to handle this kind of thing - "different folder" and "backup" sounds like an insecure type of redundancy. And starting at just because this will cause "it" to backup early sounds like a massive hack at best. 

I think if you were to replace your variable with a variable instead (?), a lot of the fixes in Game would become easier to apply. 

No unit defined, so tracking down business logica bugs is hard. Put it in comments, or, even better, in the function name. Something like . 

I know you're likely to add fuel to a vehicle in real life, but tracking applications usually don't do all the things that you'd do in real life. They just track the current status - which is likely to deviate from estimations, so would probably be better. ... That is to say, I'm missing a setter. is good, but I'm missing a setter. By the way, what is that int return type? Overflow? 

This might be correct from the problem statement as you've presented, but it's not how it works in "real" factorio. You need a smelter to make steel plates. You need an assembler to make pipes. You thus might want to revise your input script to either filter such recipes, or add an extra column for factory types. 

Code formatting can usually be done quickly. Your IDE will probably have some sort of ability to auto-format. Alternatively, both online and offline code formatters exist. Find one you like (or configure your IDE's formatting to your liking), and use it. 

The last issue in your code I see is that is being defined as a checked throw everywhere. It's leaking. I'd recommend that you catch it in the Oven for now. Later, you'll want to move baking a pizza to a separate thread, so that the PizzaBaker can take and work on multiple orders whilst waiting for the Pizza's that are in the oven. 

And gone are most of your troubles. The problem in this case, however, is that you do need to know what type your object has. You cannot "just" insert an object and get a value out. To do so anyway seems to imply bad design. If you wanted to go that direction anyway, consider making a map of Class, Converter of sorts. Something else you could do is leave the method you have right now as is, and just wrap your and conversions in a separate function. That would significantly simplify the method as well, boiling down to "if integer, finetime via integer, if long, finetime via long, if string, finetime via string, if date, finetime via date, else log error and return null". 

Yeah, we can. What else can we do? Well... doesn't change throughout the loop. And neither does . So we can cache . We can also cache . 

You declare here to be a , but then you overwrite the value without using it. Seems unnecessary to me. I'd set to . As for the variable in this snippet, why do you instance a when the return type of the row mapper is an instead? I'd keep the types used uniform. 

I'm calling it Magic Numbers because without the image, I'd be left wondering which index is which. They're magic in that if they change, the code stops working. But why it has to be those numbers exactly is unknown... to the reader, at least. Difference so far 

Here, in , you can get if the list is empty. I also don't understand why takes a argument. Either you want to take 1 node to print the closestSibling of, in which case you should remove the argument and accept a single node, or you want to take a list of nodes, in which case I'd recommend overloading: 

One of your public methods, (or that's what it should be called after you've fixed your typos), is lacking javadoc. I suggest you add it - in particular, explain what the parameters are for. Lastly, you might want to explain the purpose of the class by placing javadoc at the top of the class. 

I have to read a from a buffer, read a from the camera's current settings, add them together, keep new value within the bounds 0 to 100 and write the new value to the camera's current settings. This seems quite easy to me, and yet here I have a rather large bit of code. The brace style is company-mandated. Is there a way to remove some of the complexity from this code? Ranges: : full range of . and : 0 to 100, 0 and 100 included. : To be between 0 and 100, 0 and 100 included. Header file: 

"Cleaned" version (will probably not compile; check syntax around try-with-resources and the multi-catch): 

And, as Vogel612 mentions, is there any reason is not a boolean? I think that if the rest of your code looks like that, simply combining the functionality like this might fix the idea that the listener is doing a lot.