First off, the way you're commenting your functions is completely wrong. Proper commenting for functions uses Python docstrings. For example: 

Generally, the Python style is to indent by one tab, or four spaces. Functions and variables should be named in , and classes should be in . See PEP8 for more style information. You should also use docstrings to describe what your functions do. Here's an example of how docstrings are used. 

You also don't need to surround conditions in statements with parentheses. For example should be changed to . Finally, some of your variable names aren't so great. For example, , , or are not so great. Variable names like these should be more descriptive and describe what the purpose of the variables are. 

Auto-Implemented Properties If you're using any C# 3.0 or higher, you can use an Auto-Implemented Property, rather than manually declaring private property variables and the getters and setters. If you use Auto-Implemented Properties, then this chunk of code: 

That's about all I can come up with. If there's anything else that you want me to cover, just mention it in the comments, and I'll see what I can do. 

I don't recommend this though, as chances are, you can use a built-in error, rather than needing to define your own. 

In general, you should never do something like this. In the case of this example, you should be catching a , like this: 

You should give your variables better names. For example, while you might know what the variable , or does, people reading your code don't. Giving your variables better names also reduces the need for inline comments like . Rather than using the function to initialize an empty dictionary, you can just type the following: . Finally, you don't need the parentheses around the in . It can be changed to the following: . 

3.x Compatibility If you want to make this compatible with Python 3.x, you'd have to do a few things. First off, in Python 3.x, has been renamed to , so at the top of your file you might want to do something like this: 

Finally, if you plan to do more advanced stuff with command line arguments like this, I'd recommend looking into the library, which comes as a default Python package. 

These imports should be separated onto separate lines, as per PEP8, Python's official style guide. These comments at the very top of your file: 

For those interested, I've completely revamped this with a new, extensible version that you can find here. 

The loop should already repeat the code contained in it, so the call to would only add more recursion-related issues into the mix. The call to here is redundant: 

First off, you have a bug. On the line , you used the operator instead of the operator. This line should be changed to . Secondly, you have some spacing inconsistencies. For example, you wrote in some places, and in others, when it should be , and/or . You also have stuff like this, , or this , that can both be typed like this: . Try to find inconsistencies like these and change them. Finally, you have some indentation issues. The general style is that lines should be indented by one tab, or four spaces if they're in a block. 

I've been doing some 3D graphics in OpenGL lately and I needed a way to work with 4x4 matrices. My implementation supports the following operations: 

There many things here that can be improved. First off, let's tackle some best practices. Generally, doing stuff like this with isn't very good: 

And calling , is not how this should be done. doesn't properly close a file, and since opened files are unmanaged resources, you generally want to close files properly once you're done using them. To do this, you need to use a context manager with the statement, like this: 

Secondly, you have a ton of spacing inconsistencies. There should be two blank lines between each top-level function/class/code block. You have a few other style violations. For more information on how to properly style Python code, see PEP8. Some of your variable names are pretty bad as well. A few examples of not so great names include , , , , , , , and . Variable names should be long, but not too long, and as descriptive as possible. Finally, you should be adding some docstrings to describe you functions. Docstrings should contain a description of the function/class, and it's arguments. Here's an example: 

The general style for naming in Python is for functions and variables, and for classes. You should also have two blank lines between top-level functions/classes/code blocks, not, an arbitrary amount. You have a few other style violations. To fix these, visit PEP8, Python's official style guide. Secondly, it looks like you're using Python 2.x. If you're using Python 2.x, you need to have classes explicitly inherit from . For example: , not . If you are using Python 3.x, then you can use the second example. Finally, you can use string multiplication to print many characters. For example, the line can be shortened to `print "=" * 31. 

Rather, you should use a context manager. By using a context manager, you can ensure that the file is properly closed. Here's how you'd do that: 

First off, read PEP8, Python's official style guide. Since you have many style violations, here's a list of many of them. 

I'm currently working on an FPS shooter game and I needed a generic movement controller that supported both keyboard and Xbox One controller input. My main goal in designing this controller was to address two common issues that occurred in previous FPS controllers I've designed, which are: 

Personally, I'd prefer the top version, but as long as you're being consistent, either style is probably okay. The code contained in the file suffers from a lack of blank lines, and whitespace in general, which makes it very hard to read. I took the liberty of adding a few blank lines, and some whitespace in there, and this was the result: 

There's a few small issues that I noticed with this. The cons operator, , adds an item to the beginning of the list. I've done this in the method. Since most people are used to items being added to the end of the list, the method should be changed to this: 

In your class, in the method , you never do a check to make sure that the collider is actually the Player . In order to do this, you'll have to wrap the contents of in this statement: 

Creating a command-line utility, e.g, command prompt arguments and such. Creating a reusable function that can be imported and run with arguments. 

I've written my own local "source control". Rather than using a commit-based system, when you're ready to release a version, you can run a command which will create a copy of your source code, and it's saved to a folder. 

The namespace comes with a static class , which I prefer over while using Unity3D. Rather than having to instantiate , I can just call the methods directly from . Compare: 

OOP Design It feels like you're not using object-oriented-programming correctly, as your methods seem to be doing way too much. As the name implies, the magic method should only be used for class initialization, and nothing else. Right now, you're treating the method like the "main method" of your class. The best way that I can think of would be to do two things: 

While there's not much that's inherently wrong with doing this, it's almost always better (and safer) to use a context manager to open files. This means that the above code, using a context manager, would become this: 

This is not a desired behavior, so we should fix this. In order to ensure that the user enters the right input, we need to validate it using a / clause, like this: 

A slightly more detailed description of what the class/function does. An (optional) description of how the class/function does it's task. A description of the class/function's arguments. 

First off, for a beginner, this code is actually quite good! I do have some suggestions for improvement though, specifically regarding documentation and such. 

About a year ago I wrote a small library for drawing graphics on the windows command line. I mostly used it for small projects, like a raycaster and a raytracer. I just rediscovered it today, at the time of me writing this question, and decided that it needed a review. The library is split into six different classes: 

Removing duplication Rather than (again) recreating the function to run a different function each time, you can add an additional argument to the end of the function signature, . You function would then become this: 

First off, I'd venture to say that is probably too generic of a name, and doesn't give much information about the type. I'd suggest the following replacements that'd give more detail: 

In the case of integer input, you want to setup a - block, that will check to make sure that the user enters only valid integers. Here's what that might look like: 

Finally, rather than using a chain of statements, I'd recommend using a / construct. A typical / construct looks something like this: 

While I can often understand the performance reasons behind using fixed-size arrays to store vertex, triangle and UV data, I've often found it annoying because it makes dynamically generating meshes somewhat difficult. In order to fix this, I've built a small helper class to make the process much easier. It currently only supports vertex, triangle and UV generation, but that's really all I need at the moment. 

Also, empty comments, like the below example, should be either removed, or should have some details added to them. 

Since your post is a little unclear to me, I'm just going to point out a few small things that could be improved quiet a bit. 

This pollutes your local namespace with everything in , and it can lead to some name conflicts, especially if you're using a library like . There's a good reason it's named and not . It's easier to prefix everything with rather than . 

I'd also remove the various s, it's a little annoying to have to wait when playing the game, especially when it's more than 1-2 seconds. 

In my question to learn F#, I've decided to get one step closer to creating a programming language, and implement this simple Reverse Polish Notation "interpreter" of sorts. It does not allow for parentheses in input , and only accepts expressions containing the following valid tokens: 

There then would be the subsequent implementations of these overloads in . I figured that this implementation might be more user friendly, requiring the user to know less names. Some of my variable names are, iffy. Here are a few I found, and their subsequent replacements: 

Whitespace. Use it. It makes code much clearer. Here's a list of places where you can add whitespace to make your code clearer. 

You also seem to have a lack of blank lines between your rules as well. I'd highly recommend including at least one blank line between each rule, and a comment, if necessary: 

Nitpicks Other than the two things listed above, I really only have two other criticisms of your code, those two criticisms being purely stylistic in nature: 

But that's not all, we can shorten this two one line, by combining all of these s into one, and formatting one long string. 

It stores one value, and nothing else. Even if you intend to add more fields to this , they should all just be static fields that belong to the class, as things like make sense when they're stored in the Game class. In addition, with the struct, you're always going to have to add a qualification whenever you need to access info that pertains to the game. This will begin to make your code look somewhat cluttered and ugly. As mentioned in an answer to your previous Rock Paper Scissors question, this would be better named : 

Even though for one-liner statements, curly braces aren't necessary, I'd still recommend using them. This means that a statement like this: 

Simply attempting to convert user input to an integer isn't the best idea. What if the user enters a string, like ? To ensure that no errors are caused due to faulty user data, you should set up something like this: 

This code is pretty well written, although there are a few things that really bug me a little. First off, inline comments, like the one you've positioned inside that loop, are eyesores to look at. Preferably, comments should stay on their own separate lines. Secondly, your naming could be improved. For example, what does the variable do? It's name doesn't give any hint as to what it does, nor do it's contained items, and . Variable names should be descriptive, and describe the purpose of a variable, all while not being too long, or too short. Finally, use braces around your statements. Have you ever heard of the "" bug? That's what happened in a bug with Apple SSL. The error, in question, looked something like this: 

Why do all of your function arguments have default values of ? What purpose would these functions serve if they were run with all argument values as ? Secondly, you should have two blank lines between your functions, as per PEP8. Finally, I'd recommend adding docstrings to your functions, and your file as well. A typical function docstring looks something like this: