Here's the way I think about it: As a consumer of the I will never care about the specific sequence of validation steps. I only care about: 

Added to . Replaced with where applicable. Using extension method instead of an explicit static method invocation. 

Overall, code does not look very bad, especially for the beginner. There are a few things (some are stylistic in nature) which may help with readability and therefore with maintenance. Misc 

Little Warning The very last thing to say is that there's a concerning piece of code. Not a bug per se. I'd try to treat it as a warning. Original code: 

is better than because a) as a word denotes the result of summation rather than something that encapsulates the summation logic; b) reads better in the usage. In fact, you can even write , or if you prefer better consumer readability over function name -- . I know, these are tiny details, but for the reader they make a difference. Once mentioned it in another answer already -- I've witnessed a situation where in an inline function a developer interpreted as . Silly? Yeah, but who cares when one needs to work on Friday evening to fix a bug? 

Direction With latest version of Ecmascript we get that allow us writing asynchronous code in synchronous style. Consider an example where function returns you , and returns . We can use the following constructions then: 

I am very new to JavaScript myself, therefore it is hard for me to notice any other non-idiomatic pieces of code. B. Slightly Different Code Please notice that this is not a refactoring since I don't know what your models exactly look like. 

Instead of that you could rewrite your range function as a generator function (at a "cost" of it not being an arrow function anymore): 

What is ? Why and not (I like powers of 2 more) -- "magic numbers"? Why replace with ? If you extract this one-liner into a function, you can give it a good name, thus expressing your intent. At the moment, I didn't even try to understand why that manual transformation of a base64 image is needed. Unclear Intent When giving user a feedback, there's this that makes the code look only into the first result. Why is that? Put it into a variable, give it a name, and you will avoid the hard-to-read and explain what's going on. 

, , and similar names are meaningless/hard to decipher. TypeScript just like JavaScript follows naming convention. Stick to it. I.e. should be , -- , and so on... 

method is not a pure function, it modifies the provided object in-place. This may be dangerous in some scenarios (but probably, not in your case). The code above may or may not be easy to apply due to architectural changes -- it's your judgement call. If I were you, I would not limit myself to a rigid unmanageable data structure just because my database/service returns DTOs in this format. As mentioned earlier, generic representation enables generic algorithms which are used a LOT (meaning the effort pays off). I didn't have much time to test the solution (in fact, I still don't have access to my compiler), so burden of testing is on you. 

Context and Existing Code I am trying to "promisify" a third-party authentication library (auth0-js) written in JavaScript. Right now it uses callback functions and there are no plans to expose an friendly API. So, I'm writing a wrapper, to avoid callback hell in my own code. Here's a callback factory function which is actively used for creating Promises. 

One thing I wanted to mention is . What is the point of it if you are not using with s? Knowing that is not a recommended thing in (quite limiting, huh?) I don't see any gains here. Why not consider sticking to s which allow you a lot more than simple ? You only need to remember to on the end caller site, and use / or wherever it's absolutely necessary. 

Probably, not really a question for CodeReview. In my code the are not really used (only allow checking whether the state machine ). What is it used in real life situations? Should I drop it altogether? Or should I change it? Any other advice regarding code readability, maintainability, idiomatic TypeScript, etc are very welcome too. 

Side notes But wait, I can't change my DTO classes into IProjectTree. I am pretty sure your DTO structure is shaped by the Database or the service and you want to keep them as they are. This is the hardest part, and you may not like the answer. You will need to translate your DTOs into . It means, all your DTOs stay unchanged; add the type; and write a class that translates one thing into another (and vice versa). This will require a bit of work. And you will need to find a proper way to define the (the trivial solution would be an , the could then point to the source DTO ;) ). IMO, this would be a better design. Operating directly on DTOs is counter-intuitive to me. DTOs are not supposed to be used as a part of the domain logic, but rather as a dummy objects in client-server communication processes. Disclaimer 

Stylistically, it's better to declare before since the code is normally being read top-to-bottom. When one is immediately followed by another , they can always be merged into a single one. There is possibility of using in addition to that, which would simplify some things but I need better understanding of your context... 

Know your tool/language In typeScript you can initialize class' properties inline (this is the same as setting the values in constructor). You can also omit the type of the variable it is inferred. Similarly, if your constructor does not do any work, it can be got rid of. 

I am inclined to disagree. The test that verifies step execution order seem to be targeting the internals ("implementation details") rather than the contract. 

The other good effect is the reduced code repetition. Move Magic Code into Functions When I see lines like that they look Magic to me. 

Some Comments Are Fine While the following comment explains both the intent AND the implementation, it is better candidate for staying the way it is. The reason is Angular developers don't have to deal with these aspects on daily basis and a bit of context may be helpful.