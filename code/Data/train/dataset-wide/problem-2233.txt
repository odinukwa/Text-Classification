I checked and found that pluginis active. By default, Innodb_log_file_size=5MB. As per the MySQL Documentation, 

I am working on optimization of some slow queries in my application. I found a query in which datetime comparison has been used. Below is the subquery: 

I have a menu which is parent of multiple menu items and each child menu has their own child menus. This pattern is continued till 5-6 vertical hierarchy level. I don't want to write a query which contains nth level subquery as below: 

For example: as per MySQL datatype tutorial MEDIUMINT has 3 Bytes storage and can contains value from to . 

I am using Oracle LINUX5. I installed MySQL 5.1.73 community edition through RPM command and it was working. Now, I stop mysql by running below command: 

After installing MySQL-5.1.73, I placed default my-huge.cnf into /etc/my.cnf and started the mysql service. It was running without any issue. Now, I tunned some parameters in /etc/my.cnf file. Below are the parameters which I changed. 

Since MySQL 5.5 database has been added likewise . As we know that tables in information_schema contains statistical information like tables, plugins, partitions, processlist, status and global variables etc. Just like, performance_schema contains a lot of tables. 

Now, to verify whether InnoDB is available or not, I ran command. But, InnoDB is not listed in that. Then, I ran command below command: 

There are multiple views behind the logic of creating composite index in a table. Creating composite index is obvious when we have composite primary key. Beside this, we create composite index on the basis of our SQL query requirements. Ordering of column in a composite index plays a vital role in the selection of right index in query execution which improves the performance. If a composite index has only 2 columns then its easy to determine their order. 

Missing support for AUTO_INCREMENT columns in multiple-column index for InnoDB tables is a widely known limitation, as is the trigger workaround for when it is needed (see e.g this post). Yesterday, however, I ran into this thread claiming support for this feature was added as early as 5.1. I tried the following statement on my 5.7 install (mysql-community-server-5.7.19-1.el7.x86_64), and it appears to work flawlessly: 

My problem is that, for the life of me, I cannot find a positive statement of support of the feature on MySQL's documentation site - or elsewhere. I am rather wary of deploying in production something unannounced (which might be experimentally present) so I hope somebody can point me to the official status of this. Edit: It turns out that the manual contains, in parts unrelated, this rather oblique statement: “…an InnoDB table with an AUTO_INCREMENT column requires at least one key where the auto-increment column is the only or leftmost column.” which suggests, but does not state, support. Edit 2: Using information from @rolandoMYSQLDBA below, I also located this additional snippet: "An AUTO_INCREMENT column must appear as the first column in an index on an InnoDB table.". I am therefore accepting his answer. And in case someone is wondering, the multiple column index thing is needed for table partitioning - the customer has auto_increment PK on all tables and they want to partition on a date column. 

PHP connects with explicit utf8 charset and PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8" EDIT: Create table statements are like: 

Edit: The accepted answer is right on the money. I had since found about mojibake through different channel and expanded my woes in a blog post. 

This is what happens if - at some point - a UTF8-encoded character is interpreted bytewise as two latin1 characters which are then UTF8-encoded. Edit: What is happening is along the lines of: 

So, Value of should be 512MB. To achieve this, I have written below line in and tried to restart it. 

I have installed MySQL-5.6.x community edition on RHEL5. It was running fine. Since, it is my testing server. To find the differences in execution timing, I have to install the MySQL-5.1 community edition again. So, I decided to uninstall MySQL-5.6 first. To do this, I followed below steps: 

and uncommented these variables for InnoDB.In default file, it was commented even INNODB was active. 

After installation, , and are the default database. As per the MongoDB tutorial, when we insert data in collection a database will be listed in command. For a specific purpose, I want to create a new database but I did not find any information about creating a new database. I executed a command like or . For both of the statement I got below error: SyntaxError: Unexpected identifier Can I know what are the steps to create a database? 

What is the best way to handle datetime comparison towards improving such queries. Below is the table structure: 

I have a complex query including join of 4-5 tables. 1 months back, I have optimized this query and it was using the index. Also, . Just few days back, I found that this query is appearing in slow query logs again. When I analysed it, I found that one table in this query is not using index which prompts to higher join size as well as higher execution time. As a solution, I executed command on the table which was skipping the index. As a result Query again started to use that index and not appearing in slow query log. Now, I have below question regarding the above analysis: 

My application is running on MySQL 5.1.58 community edition. As I studied on SO websites that After acquisition by Oracle, new InnoDB plugin has been released and MySQL 5.1 with InnoDB plugin is the best for performance. Below is the command which displays the current InnoDB configuration in my system: