You could hide the errors to begin with (just put on them), then you don't have to hide them in your script. Also you can group your variable declarations: 

I'm writing a program to help with remembering complex bash commands. On invoking the program, it asks for a description of the desired operation, e.g., "increase volume" or "find orphaned packages", and displays the commands matching the input ordered by closest match. Matching is determined by splitting the command text into a string vector, then the description, and combining these with a list of additional keywords to compare with the input via . This is currently case sensitive, which I plan to change. This is my first C++ program so I've probably made plenty of mistakes. A couple things I'm still unclear on: when to pass arguments by reference, when to use and , and when to use pointers. 

When MyGame is constructed, it calls the Setup method of the Input class, which creates a dictionary using reflection: 

If you know how reflection works in .Net, then you know it's looking for the methods by name in the MyGame class. The Exit method is actually defined in the Game base class, which I don't control. What does everyone think of this? I am considering moving the MoveDown, MoveLeft, etc. methods into another class, like IPhysics or something, where I would also do the collision detection. Since I haven't gotten that far yet, these methods live in MyGame for now. EDIT: Initially I tried to focus this question as much as possible on the Input class, but I would be grateful for any advice. 

footer Footer is to be stuck to the bottom of the page. That is done by setting for everything but footer: . If there's little to no content on the page, 's "moves" the footer to the bottom of the page. In mode (2), when popup is shown, footer can't just take viewport's client height (), since it might have changed when showing popup (scrollbar might got hidden). So, it asks , which in its turn asks about client height viewport had before popup was shown. Another issue you might encounter with footer in mode (2) reveals itself when you scroll down to the bottom of the page, open popup, then enlarge window vertically. Footer is supposed to follow page's bottom edge. And in this case, the abovementioned formula doesn't work. You've got to add for it to work as just described. Also, after having closed the popup, you have to set according to the first formula (without ). In mode (1), you don't add to when popup is shown. In this case the formula takes the following form: . Additionally, consider a page having . When popup is shown, it might cross right boundary, if not taken care of. In this case, you generally want to increase page's : . Manager class 

If this is a web application, you can use an HttpModule to do your session management. Begin every web request by opening a session and beginning a transaction. At the end of every web request, commit the transaction and close the session. As long as you're wrapping all the hits to the database in a single transaction, you don't need to worry about efficiency too much. 

Both share the following code used for loading and instantiating the player object: (Don't get too hung up on the loading stuff. It's fairly complex and might take a while to step through. I just included it in case someone wanted to see.) 

In my game, I need to detect whether any buttons/keys are pressed at all before I try to process any input. This is easy enough for keys since the XNA library provides a method on the class: 

The reason this works is is a shortcut for . With JavaScript, it is usually recommended that you keep from cluttering the global namespace. You currently have everything contained in , which is good. But since you're using jQuery, you might as well use a jQuery plugin, which would allow you to do something like this: 

manager Manager handles 2 keys: 1. Escape. Closes the popup. 2. Enter. Closes the popup, unless popup decides to handle the key. has method. It's used to prevent manager from handling Enter key press. For instance, consider popup with a list of items with corresponding delete buttons. User tabs to delete button and presses Enter. Item is supposed to be deleted in this case, but manager should not close the popup. popup Popup is shown by creating instance of subclass (or class itself in simple cases). In constructor class notifies about the former being created. In response to which hides scrollbars if in mode (2), stores a reference to , and passes some info to it: 

Popup is simply put on top of the page. If it fits the viewport, it has (fixed position relative to the viewport), if not, (fixed position relative to the pge). With the latter being its drawback. Ability to scroll the page while popup is shown (with popup, that is) doesn't look good. Improved implementation. Page is enclosed in a wrapper. When popup is shown, wrapper shrinks to fit the viewport and its content (the page) is positioned (relative to the wrapper) in a way that it seems like nothing happened (page retains its visual appearance). But as a result, viewport scrollbars disappear. On top of that popup is put. In a wrapper, that fits the viewport. If popup doesn't fit the viewport, wrapper's scrollbars appear. 

If you don't have a strong reason for using the attribute on your element, I would suggest attaching the submit action to the form without it. This would work: 

In the Main method of the Program class (my composition root), I read the file and hand it off to the Input class: 

Then, the first implementation has the following. When the mouse is clicked anywhere on the stage, is called once: 

sets up an event listener for the tick event, then unsets it once it reaches the coordinates. The ticker is passed as a parameter: 

I tried whipping up my own extension method but, as I'm not really familiar with enums or arrays in C#, I'm afraid it's a little sloppy: 

The second implementation has this instead. is called on every tick regardless. When the mouse is clicked anywhere on the stage, is called once: 

This way, you aren't introducing another variable into the global namespace. Plus, the jQuery plugin architecture affords you some additional benefits, like syntax, etc. 

My game uses configuration files in JSON format. One of them is used for setting up control bindings, and it looks like this: 

When you think about it, it makes perfect logical sense. In the real world, you'd never even think of designing a car that creates it's own engine--that would be a nightmare. You of course would build a factory which would create both the car and then engine, and then put the engine into the car (inject it). The equivalent in code, would be to create a factory class, like this: 

Then, you would need to create a separate factory class which creates all of these objects and wires them together properly: 

By doing it that way, you only need the single statement. Another side benefit is that you can now store the list of valid combinations somewhere else, outside of your code, such as in a configuration file or a database. Then you could load the data from that data source into the dictionary at run-time. 

But again, the point is, you don't have to use that base class at all. At that point it's totally up to you how you implement each printer class. They may all share the same base class, there may be three different base classes, or you could implement them all separately with no shared inheritance at all. In fact, rather than using inheritance, you may want to create a separate helper class which includes all the common business logic, and then just inject it into each of the printer classes that need it, for instance: 

. Responsible for hiding page's scrollbars. Is not created in mode (1). . Basically an abstract class, that is to be inherited to make use of. Popups are shown by instantiating subclass. It has the following components: 

. It coordinates things regarding window event. On receiving the event, it notifies (if in mode (2)), then (calls 's and 's method). . Updates page wrapper's extents. . It "listens" for other two "events". It calls its method when showing popup, after images has been loaded. And after textarea resize. method notifies if in mode (2), or updates popup position (, , properties) if in mode (1). . In mode (2) popup updates vertical position on receiving the event. Horizontal position is handled automatically, since wrapper is basically a table. 

wrapper In mode (2) page wrapper is shrunk to fit viewport minus scrollbar width/height. Should it fit viewport unconditionally, page might change visually when showing popup. For instance, consider page having vertical scrollbar, popup gets shown, viewport scrollbars get hidden, and now page has more room to take horizontally. Right-aligned elements would move scrollbar width to the right. As a result, popup's wrapper should have the same scrollbars the viewport had. Or else, there might be empty space where viewport scrollbars were. To avoid that, passes 's method to via options, and when is about to be shown, it creates , and passes to the latter scrollbar state it gets from . In mode (2) when you click outside of popup (on the wrapper), popup closes. The naive implementation would be to close popup each time wrapper receives event. But then every time you click on popup itself, popup closes. To counter that, listens to event, and notifies about itself having been clicked. Then when event propagates to , it can decide whether to close popup or not. On a side note, it doesn't close popup directly. It calls method passed via option from , which is 's method. window/content change One other function popups have, they reposition themselves in response to window resize or popup's content change. The latter may happen in at least two cases: