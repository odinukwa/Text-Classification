I do have to say I'm not 100% sure about how you create because I lack some knowledge about the data you're processing, so please don't just use my code blindly but compare it to your results. 

There are repeated uses of . What if you need to change the CultureInfo? Store this in a single place and reuse it. 

Quite frankly this code looks very unfinished. Your style is inconsistent, indentation is all over the place, there are superfluous blank lines (after for instance), the comments are superfluous, there's code in there that doesn't do anything,... This also looks like a method in a Controller, and that's worrying. Because even if it's a mere 50 lines, if you have several methods like this pretty soon your controller class will be very bloated. Moreover this one method does three things: 

You also have a magic number: . "3" doesn't tell me anything, which you acknowledge by adding the comment . IMHO should be an and 3 one of its values. I'd also be careful with logic like : what if you need to add a new status? I would do this: . 

It's obvious doesn't contain the name, but instead an abbreviation, so the property is named incorrectly. Which you then "fix" by doing this: . And this sort is just... Why not have a numeric field -- e.g. -- and sort on that? 

Perhaps this could be improved further, but I don't have a VS ready at the moment. Which is also why I won't be tackling the second set of methods right now. 

Don't have methods like . DB Connections should be properly disposed of, and thus they should be used inside a using block, e.g. 

I'm a bit confused by this: if (account.EmailConfirmed) return View("ConfirmEmail"); //return page that will say the token has expired Your comment doesn't correspond with the actual code, especially when that same view is returned elsewhere. 

Avoid mixing German and English names. It adds a level of complexity to your code, even if you're fluent enough in both. 

I'd probably refactor that even more, but right now you only posted fragments of your code and it's too much work to fill in the gaps. 

But hasn't changed since then, so all of that logic is pointless. And thus you can remove it, which means you end up with the final version. 

What are these, fields of properties? If they're fields they should be private; if they're properties they should have a getter/setter. 

I really don't see the point of your original code, BTW. For instance, the is completely superfluous, since you're working with a . It is always going to return a . But why do you even check for ? You already know it isn't from the previous line's check -- -- so at worst it is empty which is your default value anyway! 

... can be solved far more elegantly by implementing MVVM and using commands, both of which you should be doing anyway. I'd write an example using your code, but you've not given us much to work with (and I don't have the time right now anyway). Also, is a really bad name for a method. 

I don't see why you create a in your controller, only to pass to to the ? Why not let the repository deal with all of that instead of mixing it all over the place? 

First of all: why a Windows Forms application? IMHO it's outdated technology, and you should look at WPF and beyond. 

Avoid magic strings. Things like the names of session variables -- e.g. -- should be constants, preferably in a separate class. 

doesn't seem to be used. It also again assigns even though this already happened in the constructor. 

Repeated at least twice. Imagine you need to change this logic: now you need to do it in two places instead of one. 

Embedding the email message in your code isn't what I would recommend: I'd consider moving those to a template, for instance. 

The moment you start copy-pasting code, you need to realize you're doing something wrong, and that such code should be moved to a method of its own. 

I get why you're naming things , ,... but I feel that's the wrong approach. Instead I'd propose a single class that contains all of the necessary parameters, e.g. like this: 

This should be in a DAL that returns DTOs etc. Binding a dataGrid to a dataTable is IMHO outdated, especially when you need to need to write this kind of code to sanitize the data: 

Why do you have a namespace that is called "database", and even worse, why does it contain controllers? You need to separate your Data Access Layer, your Business Logic Layer and your UI Layer. If this is a WPF project, implement MVVM. 

Background One of the projects I'm working on is an Intranet website which is a front-end for several kinds of data, each aimed at a different set of users. Access to the website is handled through ADFS; users are put into one or more Active Directory groups and it is this membership that determines what pages they get access to. The website was an afterthought to a larger project, and while usually we build Angular SPAs with an ASP.NET Web API back-end, it was decided that this should be a fairly simple ASP.NET MVC website. User management Managing Active Directory groups using the usual Windows tools is a rather cumbersome excperience, and thus we usually implement an Admin-only management page in our projects where we can easily search for users and add them to or remove them from the various Active Directory groups. We usually copy-paste these implementations and change the necessary variables (group names etc.), but that couldn't be done now since the front-end is in Angular (the code of the ASP.NET Web API back-end could largely be re-used). And thus I quickly whipped up a simple implementation in ASP.NET MVC. However, while it does work, I'm not happy with one part of the implementation. I suspect I'm not well-versed enough in ASP.NET MVC, and thus I'm hoping someone here might come up with a better solution. User 

Your casing style is inconsistent: , , , etc. should all be camelCase when they're local variables or parameters of methods. 

The also raises some questions: is cast to an -- so why isn't it one in the first place? Same with and others in that namespace. Why the need for and in the first place? It seems odd to use subclasses for such fundamental values. This whole block is just a mess: 

The first bit of code you post already shows a bad practice: is obviously linked to a button called , and that name is utterly meaningless. You say that this is what is triggered when you hit Load -- so why then not call it a ? 

I fail to see how (a badly named variable, by the way) can be anything other than or , so the second can just as well be an . But this code can be even simpler: 

UPDATE: The you posted is a completely superfluous wrapper class, if that's all of its code. should instead be something like and be filled with classes that implement , e.g. instead of . 

Underscores in front of variable names are only used for fields, not parameters. So this is doing it wrong: 

Is there a reason why has two different constructors? Why not simply have a single one which takes , and , that way you can concentrate on filling and and just have a single at the end. 

and are bad names. I guess the "1" and "2" correspond to "if input for operation chosen by user is only one file" and "for operations which require two input files", but that doesn't convey this to me at all. Name the first one and the other for instance. Same for and : I'd guess that each file is a specific one, e.g. one contains the mentioned elsewhere. So why not reflect that in their names? Even your UI doesn't seem to provide even the slightest bit of information -- until you click the button to open the file dialog. 

My main issue is that this code follow the "arrow anti-pattern", which makes it hard to read. Once you start nesting s, your code quickly becomes hard to follow, especially when there are blocks involved. I know how to solve this in C#; however I'm no Java expert so I can't advice you on how to solve this. In C# I'd possibly convert this method into a class and each would perhaps become a method, but I don't know if that's the right way in Java. 

There's always going to be a switch, but this way at least you're not repeating too much logic. You might even want to put those four parameters in a class and pass that class instead. 

Can't help you with your problem (which I don't really understand), but I did notice these issues with your code: 

Your method starts of with initializing twelve (12!) variables. That's a lot to keep track of, and it suggests to me that your method does far too much. Quite frankly, trying to figure out what does gives me a headache. Even with proper naming I doubt I could make much sense of things like . Perhaps splitting this method into smaller methods would improve things, but considering that everything seems to be linked together I don't know if this is possible. is barely comprehensible, even though it doesn't do that much. Maybe these two methods should each be a separate class, which would make it easier to work with global fields and split up the logic into smaller methods? I'd give you an example, but reworking your code looks like a lot of work. Plus I don't have an example of what the current situation is and what is desired, which makes it really hard to attempt anything. 

In several places your / starts with a negative check, e.g. and . I'd invert those: positive checks are easier to read. Also, avoid using when you can use . Matter of fact, why aren't you using ? 

doesn't convey that it returns a . Name it . (Also, is looping through all coordinates in your grid efficient?) Same for . 

To me it seems like does too much. Moreover, there is code duplication. It seems to me you can move some of it to a method like this: 

What if you want to move away from a console application and want to create a WPF application, or an ASP.NET application, etc.? You'd need to change so much code. Don't link your code so closely to the technology, instead move it to a dedicated class. If was part of a dedicated class that handled all of the game play, you wouldn't need to have all those ugly calls. The logic also feels wrong: calling updates , which is returned because you use it in . Considering you call in each of the three s, why not call it outside of the switch, don't have it return and simply use ? Also, considering that each of the s is basically the same, except for the message, why not simply use the to write the message and move and outside of the ? can be used in the same way as , so avoid concatenation. But again: these are minor fixes, the big fix is moving all that gameplay code to a specific class and only using in for I/O. 

should be defined as a , and that variable should be used in instead of ; that way you can also avoid . 

Your loop is close to 200 lines, that's waaaay too long. That's long for a full class, let alone one method, let alone part of one method. 

Even though this isn't that long (250 lines), I still feel that there's a lot of code in this class that belongs in a dedicated class, e.g. the update check, retrieval of the WoW directory,... Web Forms MVP is probably overkill for this kind of project (since I doubt there will be much functionality to be added in the future), but I'd still try to limit the code in this class to UI-related code, and move all other code to smaller dedicated classes. 

You seem confident your users won't enter an invalid value, e.g. "-" or "boo". Don't trust input, always check! 

I'm not fond of the calls to in the class, since it isn't properly testable. Considering that plenty if those calls repeat the same logic I'd at least move these calls to a separate method, e.g. 

Comments should tell me why, not what. If you suspect I cannot detect from your code, then your code is bad. 

In the end you've given us not enough to work with, and I feel your code has far worse problems than 200 lines of s. That long list is likely a result of bad design elsewhere, and moving the logic of each of those s to a separate class as proposed by @CharlesNRice is merely painting over a bad spot. That approach is still a valid one, but you need to fix the issues in first. 

Considering that your subselect is basically the same as your main select, chances are that this subselect is indeed a bit of overkill. Looking at your logic, what you want to achieve is to get the of the linked to the with the most recent , so let's use an and select only the first answer. I think this should do the trick: