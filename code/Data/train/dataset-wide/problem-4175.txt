Maybe some things aren't meant to be a "learning" opportunity. Rather it is what it is and there is nothing to be "learned" from it. It sounds like your manager is telling you to take the "chillax" approach to things. So the IT department can't handle your request. That sounds great. Just tell that to whoever requested it. Just say, "Hey, I just submitted something to IT and they're saying I have to give a reason to fit the goal of the company. Here's what I said..." Then just chillax. Your part of it is done. I would say bureaucratic nonsense is hardly a "learning experience" because everywhere is different. I suppose you could "learn" something by it. First, don't expect anything immediately and think of it like oiling a really jammed up gear. Just slowly drip oil in it, and eventually it'll loosen up. Might take a long time, sure, but the most important thing is not to get frustrated by it. Just slowly keep at it, and slowly things will start moving. It sounds like your boss is cluing you in that things aren't suppose to move fast just yet so you shouldn't worry too much. He didn't say you were doing a bad job, just complaining about it too much because you want things done too soon when it isn't suppose to. 

In other words, if the person writing the email is not aware that you might modify it, or you were not given authority to do so by that person (or, in some cases, a superior), any change in the text could be considered a breach of trust. Many consider written communication a form of documentation, especially in a professional context. While correcting obvious spelling or grammar mistakes might seem harmless, any unsanctioned change threatens the validity of the text as well as your/their credibility. I'll add that forwarding an email that the writer might not have expected to be forwarded, which might well be the case if it's written informally, can, in a worst case scenario, also constitute a breach of trust and/or confidentiality. 

Define an interface and clearly divide responsibility Like most web projects, yours has a clearly separated front- and backend (probably more so after the frontend rewrite), with a specific interface inbetween. Explain that you're willing to give him the interface he's asking for (REST API), but that the backend code - any part of it - is off limits. Hammer out the functionality of that interface together, but treat the code that connects to it as a black box - on both sides. In any project that involves more than one developer, it is good practice to code against well defined interfaces. This way you isolate your code against implementation level changes and allow for parts of the project to be modified or replaced without affecting the rest. It also allows developers to work together on a project without having to know, understand or agree on all of the code and technologies involved. Insist on writing down a specification (can be simple) for this interface, and insist that changes in this document have to go through both of you. This approach serves three purposes: 

The people they hire are strictly not the best software developers I know. Since they hire from my campus, I know of their hiring history and know many developers in the firm. (Please note, I use this term very responsibly, I do not mean to demean them.) I am apprehensive about the kind of environment, practices and pace I will be made to work at. Uptil now, I have worked (interned) at startups where I shouldered a lot of responsibility and worked with technologies that I struggled to keep up with, and the best part is, I LOVED IT. I loved the challenging fast paced environment, this is something that will be (I have checked with people currently working there) absent from a mammoth organization, and something I will miss. The technology stack they work it is laborious and old. I know that any true software developer should not be affected by the language he works in, or the framework followed. But some of the things they use are VERY old. Most of them must be used only be used by very few legacy software companies. The scope of learning and keeping abreast with the latest technologies is severely limited as a result of this. 

I recently quit from my first job out of college. I been there nearly a decade. I do miss the place and sometimes feel a bit of "emptiness" when I think back on it. I miss the people and the place a little. Then I think about why I quit there. I think about the things I do dislike and realize I made a wise choice. I think when you depart, you sort of only remember the good things. That's natural to do. I remember a lot of good things about my previous employer. But then I remember the bad things that made me want to leave and I know I made a wise choice for the better. I recall a research done. I looked up information like you did on quitting and I recall reading a research that some folks talk really, really bad about their employer and quit on those grounds. Then shortly after they realize they made a terrible mistake and the last job was actually really good. I think what these research fail to see is that people quit a job to a new job without researching the new job. They just jumped on the chance for a new job since they were angry with their current employer. I would say so long as you don't do that, you should be okay. The feeling generally goes away after a few months or so, at least for me. 

If he's willing to agree to these terms, I believe there's a good chance you can be very productive together. If he still insists of a complete rewrite, your best course of action is probably to end the cooperation there. 

This is part of or at least implied in your role/job description There is a rule or guildeline that supports your decision 

It should help you work together more effectively by clearly stating responsibilities and expectations. Whenever he brings up an implementation detail on the backend, point out that it's not in the scope of your discussion. You can use it as a basis for discussing shared concerns like gameplay. If you end up going separate ways (and he takes his code with him) or a few years down the line you notice your tech stack really doesn't scale well enough, you're left with separate, functional codebases and can replace parts as needed. Which you can worry about when it actually becomes a concern instead of wasting time arguing over it now. 

The worst they can say is no. However you can predict what their answer will be based on several factors. For one, and probably most importantly, if they still have a position open. And secondly, going to largely depend on how you left the company. If you put in your two weeks, and left on good notice, then it's going to come down really to whether or not they have a position open. When you quit a job, always make sure you don't burn any bridges. That means giving them a two weeks notice, and never telling them that you dislike them or anything. However, for future employers don't tell them that you were "frustrated" with your last job. Instead, just say you left to pursue new opportunities. Remember, don't ever say anything bad about your last company. 

I honestly don't think it is relevant to list Undergrad degrees when you have a master. I would just list the masters. The part about you pursuing a phd is quite important because it would tell a employer that you plan to pursue it and potentially limit your work schedule and/or work at different hours.