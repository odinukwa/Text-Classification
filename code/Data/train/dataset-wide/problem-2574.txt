Security This time I actually checked, and you are indeed vulnerable to SQL injection and XSS: The email parameter is vulnerable: 

Restructure It seems that your method currently does two things: It finds a category by name, and it calculate/finds some kind of price for a category. I would write two completely separate methods for each tasks, and then try to reduce duplication. 

So your code would be cleaner like this (but still using a blacklist instead of a whitelist for security): 

Return Early If you negate your if clauses, you can safe one level of nesting, which I think results in more readable code, because nesting decreases readability, and because it's clearer to what if clause the else clause belongs. Eg: 

I like your code. The public interface is mostly well thought out, it seems easy to use, the code is mostly well structured and readable, well commented, well formatted, etc. A couple of issues do exist though: Security: PHP File Upload It is possible to bypass finfo check (depending on the system), and thus to upload files with a dangerous type, such as PHP files. You should get the extension from the file name, not from a mimetype check. You could add an additional mimetype check, but the extension check needs to be independent of it. Security: Weak Extension Check Now, even if your extension check would work, it is rather weak as it doesn't check for equality. Instead, it checks if the extension exists in a given string, which is a weaker check. For example, a user may want to allow (which doesn't lead to code execution with most current server configurations), but not (which does lead to code execution with most current server configurations). The user will set , and they will expect that files can be uploaded, and that files cannot. But that isn't what happens. Misc 

No, it's almost always a sign of bad design (and not just because of the static variables, but also the static functions; only utility functions should be static). Another bad sign is that you import in your logic class. You classes also do too many things, which makes them very static, hard to read, and hard to write automated tests for. I would at least create: 

From a security standpoint, you want to regenerate the session id when the session state changes, to prevent session fixation. So you definitely want to do that when the session is created, and on subsequent writes. Additionally, you could regenerate the id in intervals of X minutes, but a regeneration on each request is not needed and causes unnecessary overhead (and may actually cause problems if requests overlap). Misc 

You can remove , as is already . And to get rid of the nested statements, you could use early returns: 

For now, I can't help you with performance, but maybe with readability. Raw Types You shouldn't just declare raw lists, because it makes the code hard to read, and also error-prone. 

Structure You want to make your classes as reusable as possible. Extracting all the words from a website is something that is actually useful in other contexts, as is spellchecking. Each class should have only one responsibility. You separated these rather well in text (scan, filter, spellcheck), but not in your code. Your class for example: 

This alone will probably get rid of about 120 lines of code in your class :) If you then also store your recipients in an array, all your nested s (and thus most of the class) could probably look like this: 

is generally used. Here is code to reverse a string that's also quite nice and that might even be faster in some situations. As to your code: 

I haven't looked at the security aspect of this, so you might want to wait for answers on that aspect. Function Design Your function does too many things (encryption and decryption), making it harder to read than necessary and hard to use. At a minimum you would need to document it properly, as otherwise, users would need to look at the actual code to use it, which isn't ideal. But really, it will be much simpler to have two functions: 

Wrapping PDO: General Approach Generally, wrapping PDO without actually adding any functionality is not recommended. See for example here, or pretty much any answer on basic PDO wrapper classes. Because what happens is that you take a class with a pretty nice (and well known) interface, and then reduce the power of that interface (you can only perform , if you ever need a different fetch type, you would probably add a parameter/method to your script, if you follow my advice below, you will throw exceptions, etc; at some point, your script will be very close in use to PDO, just with different function names, and slightly limited functionality). Wrapping PDO: Swallowing Exceptions The biggest drawback of your solution is that you take perfectly fine exception and turn them into null returns. This has two downsides: It makes your calling code ugly (too many checks), and it makes it really hard to debug your code, as you just swallowed all the information, eg on why the database connection could not be established, or why the query returned nothing (is there nothing in the database, or is the query completely wrong? nobody knows now). Wrapping PDO: Error Reporting Another thing that's a real problem is that you are setting error reporting in this script. This is really something that needs to be controllable (for PDO as well as for PHP), because you want all the error reporting possible in development mode, but none of it in production. If you just set these values in various scripts, it will be really hard to control. Your Questions So I would definitely not recommend this approach, but if you want to go forward in this direction: 

I'm going to assume that you implemented the right thing (the spec is a bit open to interpretation). For now, I just have a couple of small things about readability: Naming Some of your variable names are rather vague. 

At the very least add a new paragraph. But really, curly brackets are the right thing here. header redirect In your case it isn't strictly necessary, but it's good practice to always die after a header redirect as a client doesn't has to follow it, so code that comes after it will be executed as well. This may cause you problems in case you add further code later on, and expect the redirect to stop execution. Extract Extract is not a very good function. It's not secure to let a user have complete control over your variables, and it leads to bad code, as it's unclear what variables are defined. Just assign the variables you need directly. Misc 

If this is your intention, then that is fine, but otherwise you should check if all values are set and if they are all decimal numbers. At the least I would check for division by 0. Misc 

You are using a symmetric key algorithm, which means that the same key decrypts and encrypts data, which in turn means that you would have to exchange the key between the parties (which would need to happen over a different channel, for example paper mail). What you actually need is an asymmetric algorithm, which has a public key for encryption and a private key for decryption. If you need to encrypt more data than showing here, you can use an asymmetric algorithm to exchange the key of a symmetric algorithm (as asymmetric encryption is unpractically slow). This is how HTTPS works, for example. 

The structure looks ok to me (I'm not that familiar with laravel, but this is basically how MVC in a web context generally looks). A couple of minor points: 

* and . It's not entirely clear what this means, but because of the line , I'm assuming that it is some hardcoded value, which is not good enough. Having (correctly generated) random data is essential here. 

Your function level comments could sometimes be more concrete. For example : Always? No. Then when not? Why are two passwords passed? Does it hash the password? If so, how? Does it echo something to the user? When does it return what? Naming Your names do not always express what the function does: 

is obviously dangerous, as an attacker could update arbitrary profiles. It should be remove to avoid that someone uncomments it later for some reason. Input Validation While input validation shouldn't be a primary solution to any vulnerabilities, it is very good to have it as defense in depth. You validate the uid (although as @Ron mentioned, you later use the unclean version), but nothing else. It would be good to also validate other values, such as the email id (probably an integer?), etc. 

Usability: Names You might want to check out Falsehoods Programmers Believe About Names. Depending on the country your website will target, relying on first + last name might be fine, but I would definitely not filter the name. For example, you allow , which lets me to believe that you accept users with german names. But still, these people could not sign up. I don't know that much about alphabets in other languages, but looking at this wiki page it seems that you are missing quite a lot of punctuation, not to mention non-latin alphabets. Just let users enter their unfiltered names and rely on the standard protections against XSS and SQL injection. And as Gellweiler mentioned, use , so that people named do not cause problems. Security When echoing variables that could be user supplied, I would always use right where you are echoing it (eg . Do not rely on filtering that might be done at other places. Misc 

Which would call the function inside the controller with argument ? The more standard way of doing this would probably be to parse the URL, so it would look like this: 

With a simple animation class (in a real project, would more likely be , as the animation model should contain its logic itself, ie it should know what to animate, instead of having the main class/controller manage this. the main class would just be a loop constantly calling on the model, and on the view): 

Why are you doing this instead of using the fields directly? This seems unnecessary and confusing. Functions of Board Why are some functions not part of board? is, but and are not, for example. This seems odd. Comments Comments on functions are especially important when the variable names are not too good. But even if you change them, I would still like some comments. For example: What is the acceptable range for tile width? If I use for example 50, the board does not look good anymore. Another example: What happens if I set row and column to 4 instead of 3? And one last example: What does draw? Everything? Or only the game field, but not the players choices? Reset I extracted your init code in a function: 

OOP Your internal class doesn't have any state itself, but uses the fields of the enclosing class, which is quite confusing. could just as well be removed and its methods made part of . It's also rarely needed that a class has a field storing an instance of the class itself (linked lists would be an example where this makes sense). If I remove the field from your code and call all the methods directly, it still seems to work perfectly. I don't want to do a complete redesign of your code, but if you do want to use classes, classes such as and might be more useful. Error Handling Your code doesn't handle invalid input very well. As I had no idea what valid input looks like, I tried a couple of things: