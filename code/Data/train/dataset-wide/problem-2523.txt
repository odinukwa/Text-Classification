Then those population headers can be fetched from the DOM using document.getElementsByClassName() and stored in a variable: 

ES6 arrow function Nice work utilizing functional programming (i.e. ) and the arrow function. One improvement here is that there isn't much of a need for a code block (i.e. ) and statement. So the callback to in the method can be reduced to a single line like below: 

There is an Underscore helper _.pluck() but that is used to collect a value from each item in a collection at a given property (similar to Array.prototype.map(). Lodash also has the same helpers: _.filter() and _.includes(). 

That way it doesn't need to be re-assigned (and cleared after evaluating the neighbors) in every iteration (and the initial line can be removed from the start of ). 

I would define a mapping (similar to the second option in Valentin's answer) that is similar to a 2-dimensional associative array. This can be achieved in Javascript using objects. 

Basically after reading over the code, I interpret that the conditional (i.e. ) checks if the value at the given is not an array. A more robust way to do that is to use (the negated value of) Array.isArray() instead. That may not be any shorter, but perhaps a better way to determine if the property at is an array. 

It would be wise to cache those DOM references once the DOM is ready in constants and then reference those constants when the form is submitted. 

A different approach would be to add the objects to the cumulative array, instead of the ID, then check to see if there exists an object with that ID. Then there is no need for an extra array just to hold the IDs. 

Well I don't know of any principle that this violates but it might be better to add the click handlers in one spot - perhaps have a public method exposed by the GAU and then bind that to an event listener in reportAnOutage.js - kind of like the first event handler for the click on . 

Feedback The script looks pretty good. For a small script that runs on your local machine it appears to suffice for your needs. Is the goal to only show the latest link? Or would there be a use for showing previous links? Suggestions Variable naming This variable naming might be misleading: 

there are varying opinions. I try to keep methods under 10 lines if possible. With the method createPayment(), the lines that handle creating the payment and CreditOrder could be moved out to a separate method: 

So that can reduce those 4 lines to 2. It may be desirable to break those up into multiple lines for readability. 

Since it already uses regular expressions (e.g. ), a capturing group could be added with the two cases for tag names: (i.e. or ): combined with an OR operator (i.e. ), and refer to that value using a back-reference (i.e. for the first captured group) when adding the nonce attribute (in the replacement string parameter). See a demonstration of this in the snippet below (should be portable to NodeJS). 

One could also perhaps add each coordinate to an array and then join those with the new line characters (i.e. ), and also utilize Array.map() to construct . Redundant variable declaration, assignment I see these blocks: 

Those first cases are missing a so the PHP pre-processor will fall-through to the case. calls in constructor The three calls to in the constructor feels a little strange but then again it is difficult to know what the rest of your code looks like. Typically those would go in a method to render/send output. 

One could also simply use the load event. Many believe that modern browsers typically won't have DOM elements not query-able via JavaScript- especially if the script tag is loaded in the tag instead of the tag, and thus one wouldn't need to wait for the DOMContentLoaded event. 

For a demonstration of this, checkout this playground example. Are there any other improvements you can think of? 

One technique for this is to use a debounced function callback. There are jQuery plugins for that, or that article mentions ways to achieve it on your own (like I suggested in this SO answer). Suggestions Toggle the display using The and calls can be replaced with a single call to . Also, using the second form of .toggleClass(), the class name toggled can be added/removed depending on whether the menu button is being displayed or not (i.e. if the width is less than the break point). Thus the function can be reduced to two lines (or one if you move the conditional out of a variable): 

That line seems to serve no purpose. Input type other than checkbox? Are there other types of inputs besides checkboxes? If not, then the following line in seems too complicated: 

Additionally, the shortcut could be used in place of . Then to use event delegation, check the attributes of the target of the event. For example, the click handler will receive the Event object, which has the target property. The id property of that target can be fetched using and that could be used to determine which element was clicked and thus which action to take. Or could be used to determine if the target matches a CSS selector. 

For more tips about optimizations with Javascript interacting with the DOM, I recommend this article. It has some tips like: 

I concur with the great points that 200_successâ™¦ made. The suggestions below might not make the code much more re-usable, but should make it more robust. DOM-queries. Be aware that every query of the DOM is expensive! It is best to cache lookups for elements. For more information about this, I suggest reading Stop writing Slow Javascript - especially the section labeled Cache DOM Lookups. Using that information, it is good to declare the variables for the DOM lookups outside the functions so they can be re-used. Additionally, the code should wait until the DOM is ready, lest the queries to get elements fail due to an external dependency that requires a long time to load. For this, use document.addEventListener() and pass the type argument DOMContentLoaded, followed by the code to be run. In your original code, the functions like query the DOM each time for elements - e.g.: 

That can be removed, since the ruleset above that contains the same border style. class Instead of adding the style to the elements with class , make it a class like that can be added and removed in order to hide various elements (e.g. the outcome message). Rewrite Below is how I would simplify your code. Hopefully the explanations above support all the changes, but there may be a few things that you might have to research in order to figure them out. I also removed the class from the table cells and updated the code to check if that class exists on the table cells - instead, the member variable can be used for that discernment. Then there is no need to remove the class and later add it when restarting.