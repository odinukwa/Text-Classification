The rest of the code in the function is identical (of course, except for the variable names). This means that we can do some refactoring. To simplify the code, let's write a blank function that follows the same format as the others: 

This completely eliminates the need for any conditionals and function calls, thus speeding up your code by a lot. 

See a pattern in the first section of your code? I do: you have a bunch of variables that you are naming things like (mainly the number part). Typically, when you are naming a bunch of variables with numbers in their name that all are going to hold similar things, then you are probably repeating yourself. Let's look at this section first: 

An ID for you, an ID for you, oh; an ID for you, too. An ID for each button? That's a really bad design. A better design would be to identify them by something that they all share and is unique to these buttons. In this case, since these are the only buttons on your page, you can identify them with their tag name: 

then, you can just store this information for when you want to put the image on the DOM. To use this, you would create a new instance which would do the above in advance. Then, later in your code when you are ready to paint, you can specify (or re-specify) the source and name. The constructor would look like this: 

Like above, you'll have to call this function twice for each boolean. As shown above, the only changes really made were to the first argument of the two calls to 

CSS already has a special selector that handles when forms aren't valid: . This will attach a style when the form is not valid. Your HTML input box should have : 

Most of the properties of your classes are missing scope identifiers. For example, these properties of 

What if the user makes a mistake in their typing and accidently enters invalid input? Instead of exiting the program, you should just run the loop and ask for input again. 

However, there's a problem with this: your variable needs to keep its state, so if we just drop it in the function, then it will lose its state every call. So, that means we need to have this function return another function like this: 

Never trust the user! When you are grabbing the two input numbers for an operation, you show the user a restraint message that says that the first number must be smaller than the second. While your function technically do "handle" this by returning 0, it would be good practice to not call those functions at all and to instead print out to the user if they accidentally (or purposely) entered a bigger number first. You could include this in the extracted input-getting function described above. You can even create a loop inside this that repeatedly asks the user for proper input before actually returning the input. 

This, with the incrementing in the middle along with the conditional makes this area a little clunky. These lines can be easily reduces using a ternary operator: 

a person can bet different amounts on both teams. However, your function declares that, if they bet more on, say, team A, then their full bet is on team A. Now, I don't know what the rest of your code is supposed to do, but I assume you are going to have some payback for winning bets. Well, if a user bets (for example) 10 on team A and 5 on team B, then team B wins, how are you supposed to know which amount to payback? You wouldn't want to payback based on a 15 bet because the person bet 15 in total, you'd want to payback based on a 5 bet because that bet was on the winning team. There are two ways you could fix this: 

You repeat something like this a lot in your code. And, each time you have a big chunk of these writes like this, you are always doing the same thing: writing something to . It would be a whole lot faster if you just used one function call for each chunk of these: 

Note: I merged the two k1 and k2 variables into one since the k1 one is no longer needed when k2 is being checked. 

You did not specify that you are purposely reinventing the wheel here, so I'd like to point out that you are over-complicating some of these methods. Also, in your method, you are using a built in method, anyway. Here are some built in JavaScript methods that already accomplish the same task: 

However, this creates funky-looking and difficult to work with URLs. Really, you should aspire to use , but this calls for some server configuration. Read more at the docs. 

To me, it seems that your reason for this is so that, a few lines later when you are printing these values, you have some data to print. However, since this is not actual data that means nothing for the user and you are using it as a placeholder, you can use a conditional when printing these messages: 

I have one main problem with this function: you are hard-coding the enemy to be a "snake". What if you want to have another enemy? Are you going to create another practically identical function just to print out a word that is not "snake"? Of course not; that would not be very effective. To make this function more flexible, let's add a parameter to the function that is the enemy that the user is fighting. That is done simply like this: 

That way, you won't even need a switch statement at all! The user could enter numbers like , or , or anything else without having to be restricted by what options you already set in place! 

with getters for each field. This will make your code more OO. If you want to be extra OOP-y, you can put the method that generates the in this class, make it , and have it return an instance of with filled data. Over-complicating the time printing Again, you are over-complicating the time printing section. In my opinion, it is perfectly okay to have something like: 

What if you need to add another command to this list for whatever reason? Now, you could just add another , but then your code starts to look a little more messy. To make your code more flexible here, you could try splitting these built-in functions into a struct which stores the name of the built-in function and a pointer to a function to execute if this is come across. Then, you could create a function that checks if the command entered is a built-in function. If it is, then the function can easily handle the situation using the built-in function's struct. Here is a short snippet of what I mean: 

Right now, to keep track of what picture you are on, you are setting the current element's to "next". Instead of interacting with the DOM to keep track of which element, try this: 

instead. I think it would still work either way (I did not test it), which is one of those gray areas between arrays and pointers. 

Permission enum Right now, you are checking what permission a player has by using this method with these arbitrary strings. While this is okay, it could be made much more cleaner and idiomatic using an enum. Say you had this enum: 

Contrary to what people have been commenting, I think that the big comments going across your code to split it up is a good idea. In my opinion, it helps with legibility. The use of . It's a pretty good idea; I like it. 

ES6 Small, side recommendation: learn ES6 and use it with React. React (and libraries like Flux and Redux) work a lot better, cleaner, and easier with ES6, e.g., creating classes is more natural in ES6 since you use the actual class system. Also, things are just starting to move away from ES5 anyway, so it would be good to get comfortable with ES6. 

This seems a little redundant: the is going to be greater than 0, so why do you need to conditionals? Simply remove the outer one. 

I'm not sure how much of a difference this makes in efficiency (if it makes a difference in anything at all), but the part is unnecessary. If the conditional passes, will run and skip over everything else to go back to the top of the loop. If it does not run, it can just call down to and exit the loop. No needed. So the above code snippet will become this: 

The submit button can't be clicked in the first place if the value of the kit model is 0 because the change listener will disable the button. You can safely remove this part of the submit listener. 

Is this really necessary? You have (or you should have) all the information you need to turn off the exact slides/links that are activated. For setups where there are a lot of slides and links, your current solution can get slow. Well, we know the current slide number and we have an array of slides and links... 

User-supplied output buffer Right now, the reverse string is just printed straight to STDOUT. To make this more flexible and so that it follows the single responsibility principle, you could have the function accept an output buffer to stick the reversed string into: 

0X vs 0x This isn't the biggest thing, but most people have a lower-case 'x' when defining a number as a hexadecimal number. The code now: 

It is bad practice to just set the property in JavaScript. Why? Because you override every other listener that fires on that event. Instead, you should use . 

This will make your code a lot easier on the eye (and could made even better if incorporated into a comprehension). 

This will allow for a list of elements to be checked to be passed in and, if they aren't, it will check all the elements. As for when messages are edited, you may have to configure your a bit more (again, I don't have the docs up, so I don't know what you can do) 

Yeah, it doesn't look that much different, it just follows practice in a better way. Other than that, you code looks very Object Oriented - which is a good thing. Speed Like I said before, this code is very Object Oriented, so there isn't much to change in terms of speed and efficiency. But if you want to, instead of storing instances of classes in variables, you can just use the instance of the class for what you need right there. For example, in the first part of the first conditional of your DragonCurve class, you could change: 

Simplification with for/in loops Your loop through in the function you have for the variable is reinventing JavaScript's for/in loop which loops over and objects keys. Here's how you could simplifying that code: 

I don't know about this one. I saw it being used in some Python code before that involved an English words reference, but I don't know how accessing it's built-in dictionary works. 

As was pointed out to me, this could potentially slow the heck out of a program when first initialized if the storage contains a lot of data. As a simple fix, you can have have the method take an optional parameter of which data to take over in the form of keys: 

Fake for-loops and comprehensions At the beginning of your post, you say that you can't always achieve everything with looping in one line in CoffeeScript. When you say that, I assume you are taking about the : 

Braces In your function, I noticed that you don't have s or s before and/or after your if/else statements. You should always have these, as bugs can arouse if they are not present. That function should be written like this: 

You are correct. is indeed pseudo-random. However, its algorithm is actually quite good. In this SO post, a concern is brought up that the randomly generated numbers tend to all have the same number of digits. While this was statistically proven to make sense, you won't run into a similar problem since you are only dealing with single digit numbers. should be random enough for your purposes. However, if you want to get truly random numbers to be absolutely fair, check out RANDOM.ORG. This, however, would obviously be a lot more unwieldy than just using Math.random. 

No, the way you are doing this is just fine. However, as stated above, it does not need to be object-oriented for the implementation you have provided. If your code is going to specific to what you have shown where you paint the picture as soon as you create, then this ought to be a function. 

You aren't passing in a float value when you call . Also, I believe that you should allow more time before a timeout. Reading in 4096 bytes of data might take more than 1 second. Maybe 3 seconds would work. 

If you would like me to show you how your code would look with the above change, let me know in a comment. 

Refactor methods Look at your and methods. Then, put them in a diff tool. What's the different? Here: 

to get the factorial of . Note that you don't need to specify the second paramter because of the first conditional in the function. Now, you can remove this conditional if you'd like, but you'd have to either: 

To answer your question about exceptions, I think that you should only use if you know that there will be errors. It is always good to catch and stop an error, but there is no point in trying if there will be no error. Also, knowing that there will be errors helps because then you can catch the right kind of error, rather than just catching . You did a good job catching the error here and differing between using and : 

Don't remove the indentation inside of code blocks so that the code is on the same line as the signature. It makes the code harder to read as it's hard to piece together which goes to which signature. For example, this: 

Your code has really, really poor indentation. Luckily for you, you are using JSFiddle to write and run your JavaScript code. That means that, if you look up at the top of the screen, you can click the button, which will go through and properly indent and space out all of your code. Then, as practice, look at the difference between the ed code and the original code; what has been indented and what stayed the same? Locate patterns so in the future, you could write your code with correct indentation from the start. 

Bad UX I don't have much to say about the code, but I want to comment on the UX of your form. Whenever the animation is running, the user is not allowed to enter anything into the input boxes. This is very poor UX as it forces the user to wait before filling out the next box when completing the form. Animations can be cool, but if they become detrimental to UX, then it'd be best to find a middle ground. In this case, I'd suggest somehow fixing your animation so that the user is still able to edit the input boxes when the animation is in progress. 

Since the only purpose of that function is to use it in , you can just use an anonymous function in place of . Here is what I mean: 

This is a big, big issue with your code: indentation. It is excruciatingly difficult to read code that is poorly indented. Here is how indentation works: 

Well, if you have the license in one file (which you should) and then you have the file that you want to copy the license into, couldn't you just adopt a cat? 

I cannot review the content of your code because it is very, very unreadable, but I just wanted to point a few things out. 

Then, when you come to the conditionals, you only have to check if the user entered a lowercase 'r', 'p', or 's'. Also, I noticed that you tend to split up your messages a bit. By that, I mean that you split up your s and your s. Since the function takes an argument that it logs to the console, why don't you just put whatever you would've initially printed as that argument? For example, these lines: 

can be shortened. First off, you should be setting the new value of display separately. Then, you can create a simple and small ternary to set the style property of to that new value. Here is what that looks like: 

However, for the for loops after that, you don't need to type again, as it was already declared locally. Switches over if/else's Also in your function, you have a lot of if's, else's, and else if's right after each other that all compare to the same thing: . It would be a lot easier (and I'm assuming, a lot more efficient) if you created a switch statement: