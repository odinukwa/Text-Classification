The code you posted is quite big so I believe that's why no one has answered this question yet. For a better and more specific answer I would suggest you ask several questions with isolated sections you want to improve. Anyways, here are some basic improvements you could use: 

So lets break this down. The in the front is a safety net against unclosed scripts, which can be common if you use plugins in Wordpress, or if you concat and minify your files it will protect you from your function becoming an argument. Then we pass in , , and . We pass in and at the bottom assign it to jQuery. So now in this function, no matter what value the carried outside, in here it's jQuery. Then we pass in and . These are optional in your case, but a good idea since you do use references to in your code. It saves as a local variable, and also will be good when you minify your code as the reference can be changed to something like or automatically. If you don't use a or reference you can just remove them all together. Now keep in mind there might be times where you have to put your script in the header. Modernizr is an example of this. Then you'll probably end up using the . Don't sweat because all you have to do is this: 

If you didn't know already, this type of plugin is referred to as an accordion. I would suggest reading the code for the jQuery plugin (since you are using jQuery) to find out how they do it. With this you can get ideas, see their organization, and if you find something that can be fixed/improved you'll have the power to contribute! To add to redexp's answer about the method. In your click functions you might want to prevent the default browser action on a link, which is to direct the page to that link. Since you just want to perform something on your page and don't actually want the browser to leave the page you should prevent that action. The difference between the two is that does that and at the same time stops event propagation. Propagation being when you click on an element, it triggers an event on the element, and any events on its parent elements (because technically they were also clicked). Whether or not you need to stop propagation is up to you, so pick accordingly. So basically: 

What I suggest is read the jQuery source. Check out how they do it. In their init method they return this for certain cases, but not for others. Like when there is no selector: 

I apply all this stuff to this selector, one after the other. If I want to continue chaining but change my selectors, I can use stuff like and continue with my methods. - Save function calls: If you read the jQuery source code you'll see that shortcut methods like , , and etc. all reference the method. All they do is basically call the method with some variances. Well why not just go straight to the meat and potatoes? Check this out: 

When you use the method, jQuery calls the method. Then if you still call another function inside that, that's three function calls that could be spared if you simply used this: 

Don't be intimidated be the size of the book, I just like to write out and explain in as much detail as possible. Well anyways, I've pretty much re-wrote the whole plugin. I've applied a more object-oriented approach and re-factored the plugin into the Module Design pattern. It's now much easier to add functionality and debug code. I've also added in some safe guards to properly initiate the plugin as well. At the end of the code, and inside it, I've included a few links for reading and watching materials. I highly recommend you go through them as they can explain the concepts demonstrated here a lot better than I can. 

This jsPerf can demonstrate what I mean by this. In most of the modern browsers this is less of a problem, but is evident in the older ones. 

Props to you on your first plugin! Well here are a few pointers in no particular order: - Double Wrapping: When you cache , you're wrapping the element with the jQuery object. And then you do: What this does is wrap that object twice. You've already wrapped it so you don't need to do so again. Just do this after you cache. So this is how you should do it: 

This works just fine and fulfills all the requirements from the assignment. What I want to know is how can I improve this code while still remaining within the requirements. Also any reading materials/videos that you think would be useful for my learning please feel free to share them. Main Race file: 

When you cache a selection like you did there, the gives you a new jQuery object with the results from the search which then are stored in . So doing this: is the same as doing . You're wrapping it twice. This is a common mistake with beginners and Jeffery, in that screencast, explains it much better than I ever could. 

From what I could understand from reading your plugin, I've cached your references for you. I didn't change anything else except for calls at the end. You can use a space and put in several attributes to be removed at once. Anyways here's your code: 

If you wanted to change your code a bit here's an example with using child selectors. If you have question about any of these methods just let me know and I can explain them. You can also read up the jQuery documentation for each one to get a better idea of what's going on. Also here's a Fiddle: $URL$ 

You'll see several variations of this all over the internet as you read to find out more. The one I recommend you use in this case is like this: 

Probably the most important thing you should be focusing on is the idea that ID's are unique. There can't be more than one element with the same ID. If you're trying to select several elements, jQuery will stop looking as soon as it hits the first element that mathces the ID. You should use classes instead. That said, it's up to you to make that change. I cannot determine how to do this, or the implications it will have on your site, just based off the code you posted. Second most important thing is you should cache your jQuery selections. If you use a selection more than once, you should cache it. This way jQuery doesn't have to go looking for that element(s) every time. You then simply reference the variable you saved the selection in. I've also replace your variable inside the callbacks to use instead. This is the index. It counts how many times you've gone through this callback and is more appropriate for what you're trying to do. I would also recommend starting at zero since JS is mostly zero-indexed and will make your life easier if you need to manipulate any of these ID's later. Anyways, I'm sure there's more you could improve on, but without changing the HTML and while keeping this "the jQuery way" there's not much else I could change. Here are the few changes I've made: 

- Save function calls: If you read the jQuery source code you'll see that shortcut methods like , , and etc. all reference the method. All they do is basically call the method with some parameters. Well why not just go straight to the meat and potatoes? Check this out: 

Here they don't return the jQuery object, since this utility is for arrays. My point here is that there's no one shoe fits all. It depends on what you're trying to get from your plugin. Also chaining is expected but not on something like $.map(). Also keep in mind, in your callbacks should refer to the element in question (ie. in a click callback refers to the clicked element). If you're not playing with an element, should refer to the global(window) object. 

- Cache your selectors: As a rule of thumb, if you use a selection more than once, you should cache it. What happens when you use is jQuery has to jump into the DOM and look through all elements that would match that selection. So you should really do a search only once, and save your results for future use. This way you can look and play with them whenever you want. Ex.: 

If you have a finite number of elements that you need to add to an array which follow a pattern, use a for loop. If you don't know how many you're going to need, a while loop will do the trick. Loop through them and use the index to assign the numbers accordingly. 

You'll see several variations of this all over the internet as you read to find out more. The one I recommend you use in this case is like this: 

Don't feel intimidated by the following wall of text, I just like to over explain stuff sometimes. I think it's better to have more information than have too little. First of all and probably the most important thing you could do to improve this code it to cache your selections. When you write this: , jQuery has to jump into the DOM and look through all elements that would match that selection. Keep in mind that DOM manipulations are the most expensive when it comes to performance/resources. So you should really do a search only once, and save your results for future use. Just put 'em in variables: Then in your code just replace with and do all your stuff on it. As a rule of thumb, if you use a selection more than once, you should cache it. Best place, in my opinion, to do that is at the top of your code. By placing all your variables and selections at the top, you can see at a glance all the elements (or at least most of the elements) that are going to be used/manipulated in the code. Next thing you could do is save some function calls. The method you use if you read through the jQuery source code, you'll see that it simply calls the method and passes in the stuff you set. It would be better if you just went straight to the point by using the directly. This way you save a few function calls. Not a tremendous improvement, but something that will benefit you in the long run. In your click functions you also might want to prevent the default browser action on a link, which is to direct the page to that link. Since you just want to perform something on your page and don't actually want the browser to leave the page you should prevent that action. You can do it by passing in for and running . If you want to read more on this I would suggest this article by Chris Coyier. Also since you are showing and hiding quite a bit, it might be hard to keep track of what is showed or hidden at any given time. I say don't worry about it. Let jQuery magically handle it by using the method instead. If the element is hidden it will show it, but if it's not hidden then it will hide it. Simple and easy. If there's a point where you want to be specific about it you can always just use the methods you're using now. Here is your code with these examples in them. Keep in mind that these are simple improvements which don't really change the order/logic of your code but just help you make it better. Anyways here: 

I would use a for loop to test all values first. If one is invalid you can stop and fix before going on with the code or submitting. Here is a fiddle without the submit callback so you can see how this would work. The following code is explained in the comments. 

I think your code is good and more importantly it works. The main thing I would change is that huge if else statement. You repeat yourself a lot there. Here's another way you could do it: Also here's your edited fiddle. Acho que o seu trabalho está bom e mais importante ele funciona. A parte que chama minha atenção é o if/else enorme. Você se repete muito ali. Outra forma que você pode fazer é assim: 

Since returns the appended node, you can chain. I would suggest you go through and try to spot these yourself. Cache Array Lengths - The loop is undoubtedly one of the most important parts related to JavaScript performance. Try to optimize the logic inside a loop so that each iteration is done efficiently. One way to do this is to store the size of the array that will be covered, so it doesn't need to be recalculated every time the loop is iterated. For example: 

You do have a lot of code for review so here are some quite general suggestions: Code length shouldn't be a problem when you minify/gzip. Even though it is 300+ lines. If you can reduce more, power to you! I see you've used prototypes well and that should have already reduced quite a bit. Maybe focus on the Builder constructor for future reduces, as I do see some very similar, but not repeated, code there. The main thing I'm concerned in Builder is all the appends. What you might want to do is separate your tests, and set variables with the results, then call a single (or fewer) appends if at all possible. You avoided a common beginner mistake of putting an append in a loop so kudos to you. Some reading materials for appends which I recommend: $URL$ $URL$ I'll add more to this answer concerning the rest of your plugin as I get some more time. One last thing that can help you with scopes is if you use Chrome Dev tools and set breakpoints, on the right you can see scope variables and a whole lot more. UPDATE: I've seen your update and refactored parts of the Builder for ya. Here's the Fiddle. The parts I've edited follow: 

I highly recommend, if you're going to use jQuery on a regular basis, that you take some time and read through the source code of the methods you're using. To find them quickly just use and type . That should jump you straight to what you want to know. This way you can understand what and how you are doing things, and even find better ways to do them on your own. -Playing with visible elements: You're if statements from what I can tell are trying to detect scroll position and etc. I highly recommend you check out this tiny plugin. It basically detects if an element is visible or not at any given time. This may or may not help you out but I just thought I'd throw that out there. -Things I'd write differently: Here's an example of all of this summed up into your actual code. I've included comments so you can relate to the reading part.