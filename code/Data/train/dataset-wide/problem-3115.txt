In general I found your code easy to read, and follow. When implementing complicated math in an algorithm, it is important to document things carefully. Why does the following make sense? 

find the highest-set bit in the value with (which will be '32'). Note that this value will always be a power-of-two. find the power-of-2 larger than this value using the left-shift operator: (left shift by 1 bit, to get 64. get a mask from this value by subtracting 1. 

Now the duplicate functionality is clearly available, and conveniently included in the interface. The implementations now also get to choose how deep the clone should be - which is probably a detail of control that is useful to include in the class, not as parameters to some Cloner instance. Factory methods I have removed two of your factory methods. I find factory methods to be an anti-pattern unless subclassing is prohibited (i.e. if the class is final). For example, in your class you have: 

What happens if there is an IOException part-way through the ? You end up overwriting the old copy, and losing the new one. Your data is gone. A more traditional way to prevent this sort of loss is to write the output to a new file, and then do an atomic 'move' operation: 

DISREGARD BELOW HERE Right, you'll have to work with me on this one.... (it takes multiple 'heads' to work around 'threads'....)... First, let me restate the problem I think you are trying to solve: 

The above things should all be resolved..... Alternative Create a class that generates the names for you. Consider this class: 

So, working off this, and using beginner-level C++ (I am a Java person), I put together the following functions: 

then you will iterate over all values added up to the last add. (but with slightly more risk that the last values may be null) 

Your pattern is close to what is recommended on the official Android dev network.. Formalizing your callback as an interface is the right choice, and passing an implementation of the interface to the dialog is also right. Where things differ is that the recommended practice works through the DialogFragment. I can follow your code well enough, but, to follow the path-of-least-surprise, I would recommend tweaking it to be more standard. It should not be hard. Note that the typical practice passes the whole DialogFragment back to the listener. This would work, and because the listener also built the fragment, it makes sense.... but, if your dialog is built in a place that's different to the listener, I would recommend a data container/Bundle instead. 

Your code deliberately fails on an empty input array. This is an artificial constraint. The code would actually work (or should actually work) except you have the condition that throws an exception: 

The code looks nicer this way, but requires scanning each table three times (which I think will be better than the potentially thousands of times it may have to happen with your query...... I have put together an sqlfiddle for this 

Now, even with the simpler code, you still have the two threads, one needs to wait until a condition is met, and when the condition is met, it needs to execute some work until the condition is reverted. In your 'working' thread you want a method to call which will start the lights blinking, and then which will stop the lights. The pattern to use is: 

It has been a while since I messed with SQL Server procedures, but, in principle, I don't mind your solution. The while loop is not set based, but that is not insanely slow, either. For a limit of 20 fields I don't see it being a real problem. SQL often ends up being a cacophony of copy/paste, and a set-based solution using raw operations is possible. @ckuhn203 has shown that. I am not a huge fan of all the UNPIVOT and other operations though. I would consider a much simpler (though heavily copy/pasted) version: 

Note that you can remove the channel completely. Edit: Note that by dedicating a response channel for each command, you can do things like return the actual channel from the function, like: 

Yeah, without giving too much away (this is obviously homework).... First though, the assumption I make is that the assignment is: 

And that method should handle the server communication. You should have a second method, perhaps Person.toJSON() that converts the Person to a JSONObject. I know I have used a different capitalization for vs. . For some reason, it makes sense to me since JSONObject is capitalized that way. Strict conformance to code-style guidelines suggests the method should be called Once you have separated the concerns, the method should be completely reusable. If you want to be smart, create an interface like: 

Note how, in this class, I use a trick for the , where it is advanced in the finally block of the call. This is a pattern I like because it makes the method very light-weight, and it is always a step-ahead of the data. So, that is a single-purpose class, it converts a to a line-at-a-time . Now, you need a unique ... which can look something like: 

Normally I am against updating a loop-counter index inside the loop, but there are times when it makes sense. This is one of those times. Note, the skip variable is being calculated naively in this code. It should be smarter about taking the sample-size into consideration, and making sure it hits the beginning of the sample rectangle properly on the next line.... as it stands, if the rectangle is an odd-size, it may cause the start position of the next row to not be on the rectangle boundary. On average, I don't think this will make a difference, but that is your call. 

Note how I have reused the DRINKS array when both printing the prompt, and selecting the Drink. Also note that you can add drinks just by changing the array. Finally, I find that using is convenient when formatting data. 

What those numbers mean, is that 200_success solution is the fastest. Slightly slower, is my "modified" solution which I will present in a bit. Much slower is my solution using the Stream I presented above. Finally, pulling in, in a distant last place, is your code. 

The above system will write out the data in the same format as the input. Using a buffered approach, rather than a line-by-line approach, will be more efficient. It also preserves the end-of-line system used in the source files, rather than forcing a new, and perhaps broken system on to it. The output will be UTF-8 because I force it, but you should consider making that a parameter as input to the merge. 

This is going to net you a potential 5X improvement. That's pretty complicated though. What would be much simpler is to use a different axis to process the parallelism. Your comments indicate that you have multiple files to process.... you should do them each in multiple threads... Consider the following structure: 

This will give you better scalability in the future (or the present if you are already multi-threaded. Enum Magic Numbers Enums are a great concept in Java, and, it is one of those places where I believe magic numbers (special values with little apparent context or meaning) are really useful, and are OK. You can embed 'magic' in with the enums and not worry too much about the readability... enums are supposed to be magic things.... So, I would consider code like the following: 

Structure Functions..... you need more of them. Your large, monolithic main method makes your code hard to follow, and separating out functions would help a lot. Oh, and errors ... you need to handle them. For a start, take this block: 

Now we can even remove the map from the sendMessages` go-routine. Read up on the statement which is how communication from multiple sources is handled: $URL$ Conclusion This post has been long enough already... hopefully you'll get something out of it. I hope that you at least get how the unbuffered channels can impact things, and that communication with select-statements allows you to localize resources to just one routine, meaning mutexes are not needed. 

Normally I would take issue with the short variable names, but, in this context, with the generic array data type, is not too bad of a name. The only style issue I have other than the , is that you need space around the operators in your conditions and assignments. The code: 

It's debatable whether that code is worth it, but you may want to try it in your environment because it may compile a whole lot better (or worse....) on Android. 

This is repeated for each file. It's unnecessary, and can be removed with the option to inotifywait. You are using the event to track. This is triggered when the file is created... but is that what you want? A download may take a while to complete, so moving the file part way through a download may not make sense. Many programs will continue based only on the filehandle, which does not depend on the file location, but not all programs will behave well if the file is moved part way through. You should consider tracking the event instead. This will only trigger when a file handle is clsed after a write to the file handle. I expect this will track the 'end of download' rather than the 'start of download' (the way you have it set up) will only notify when the first file is created. This leaves you open to race conditions where a download may happen when you are copying the file to a new location. This new download will not be triggered on the next cycle because it started before the wait. As a result, you are at risk of losing events. 

Your concurrency/integrity of the code, and the way you have shown it used, are fine. The design, on the other hand, is very questionable.... I would recommend that you do not use this pattern at all. If you are going to use it (your comment here says it is used already), then I recommend changing the name. It is not a wrapper, since you can't actually access the lock through the wrapper. Instead, it is a 'Locked Session', which can be closed, and downgraded. The following code looks/reads better to me: 

Now, this client/server setup is simple. It is a call-response type only, with a 'success' indicated by 'OK'. Anything else is a problem. The protocol can be set up that the client pushes the arguments, and then closes that stream.... and then waits for results. Closing the stream has the advantage that we can read the arguments nicely (wait for end-of-stream): 

Once we have the code like that, it is apparent that the last check is unnecessary, and since the comments are repetitive (the comments duplicate much of what the spec and code say), they can be mostly removed, reducing the code to: 

For more robust solutions I recommend specifying the charset encoding that you require the file to be in, and using an InputStream with an InputStreamReader to get the encoding right. EDIT: Finally, none of the answers so far (including mine, until now) have addressed the OP's actual anticipated usage. He wants to compress the file. The logical solution for this would be a CompressedOutputStream, and a byte[] based InputStream 

Use the 'repeat' as a flag set to negative for nothing. This allows for input like which will output (which would be impossible without the 0-repeat option). Note that the repeat is now also used as a flag for the isDigit check. a do-while loop instead of a while-do loop (as per Josay's comment). 

For example, suppose your stream is split in two, and the two parts are accumulated in two maps and . Your collector should produce the same results regardless of whether or whether . Your streams will produce non-deterministic values for your inputs because your Collector is non-deterministic. I am not certain how I would solve this problem.... there has to be a way to 'tag' the data at the beginning of the stream such that it is labelled with a 'key' sooner.... instead of arbitrarily, and non-deterministically assigning one later. Conclusion I believe the code produces results that are 'correct' for the context of the way you use it, but the results are non-deterministic, and thus are going to be a problem in the future when things go wrong. You need to do something to fix the non-determinisim earlier in the stream: 

That whole array is a lot of work to create, just to throw it away again. You can make that a constant: 

Note the use of in case the input word is something like ... we don't want the word to be interpreted as a regex pattern itself. Complex split: 

The above code only initializes the first position of the score 2D array, and the remaining cells in the array are left as null-characters. When those null-characters are printed in the : 

This is one of those occasions where a 'sparse' dataset may be very helpful. But, first some nit-picks: 

Generics can only go so far to help you, and, this is one of those times where it just does not help all that much. In essence, you have the following: 

is doing integer arithmetic, in your case, you would expect to be but it will be plain because the integer division is done before the value is converted to a double. Consider using: 

The switch statement will be optimized so that there does not need to be more than one modulo, and there is no concept of an ... just a single condition check. 

Assuming the list remains virtual (yielded instead of real), then your algorithm is essentially space-complexity O(1). If the virtual list is really generated, then the space complexity is O(n2) The time complexity is something more than O(n2). Probably closer to O(n3). For each value ( O(n) ) you find all values (also O(n) ), and then after doing that, you count each 1 and each 0, which is another two O(n) operations. So, your code runs at O(n3) not O(n2) Code Review is not really about helping you rewrite the code, but, there are some changes I can recommend... Firstly, in complexity analysis, doing two O(n) operations one after the other, is still time-complexity of O(n) ( time complexity of O(n) means that if you double the size of the input data, the time to execute will double.... and that is true if you have 1 O(n) operation or 100 O(n) operations one after the other). Use this to your advantage. I can't spend the time to do it all for you, and I am not even certain how to arrive at a fully O(n) solution, but the process you should probably follow is: 

You are close to right on the complexity. You have two dimensions that are independent in your system though. The sort is sorting the letters in a word, and its performance is dependent on the length of the word, not the number of words. You have essentially an outer loop which is linear \$O(n)\$ and an inner sort which is dependent on , the number of letters in each word...., and those combine to create an overall complexity of \$O({n} \times {m}\log{m})\$ If you double the average size of each word, the execution time will slightly-more-than-double. If you double the number of words, the same will happen. Now, how can it be improved? 

When dealing with offset arrrays (using position 0 to indicate character 32), it is important for readability to use symmetrical access patterns for the process. In your case, you load the values as , but what you use to read them, is accessed by .... and this asymmetrical access is inconvenient. You also have no handling for out-of-bound characters.... can you trust your input sources to not have a carriage return, or a tab? Even esoteric null characters, or other binary values. I would have a catch-all 'bucket' for invalid values. That will prevent segfaults or other undefined actions. You have a small bug in your code. In the print-loop, you increment the last character received.... what is this line for in the 'print' loops: 

which has 4 leading significant white-spaces.... your code is introducing bugs. The bottom line, is that you should only be storing significant data. It makes everything faster, smaller, and more efficient. 

Now, when people use your class, they have access directly to the configuration too (with, and without your 'helper' methods). The bottom line though, is that your implementation does not enforce type-safety between the and the . The only thing it does is return null instead of throwing a ClassCastException when people use your code wrong.