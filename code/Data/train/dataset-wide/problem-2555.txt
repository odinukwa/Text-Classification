They can never exist at the same time, so it's pretty pointless to have them named differently. You should just stick with the standard index variable name: . : This is a bit long and icky, I would consider smaller names like , , or something similar instead. 

I really can't keep my poker face on this one; This code is bad. You have so many copy-pasted blocks absolutely everywhere, that I'm getting high from all the paste (glue). Generic jokes and bad puns aside, this does need refactoring. 

Just the variable directly. I'd also like to point out that and are identical in function, just named differently. Consider the following instead: 

Making a shorthand accessor for your variable is unclear, can represent many other things. Try to be a little more clear with your variable assignment, and additionally try to avoid abbreviations. 

You have over-indented the lines, and there shouldn't be a space before your semicolon. To convert this into a working statement, you could do the following: 

Notice also that I reversed the conditions there. This method means that the code is more readable, and you can solely avoid getting buried in layers and layers of conditionals. You could even turn those checks into an object, where the variable is the key, and the error message the value. 

is stored as a boolean, not a variable. Meaning, you can simply test it, without the need for functions like and . 

Declare the outside the function, so it can continue recording results with more function calls (There is a way to do this inside the function, but I couldn't figure out how.) Declaring the game (Notice the all-caps, meaning it's a constant) There's two special rules: and . They can be tested like described above, and like testing whether the input exists inside the variable, because if it didn't, it would be . By using the same testing rule, the can be tested to see whether it's inside the object of the , depending on the result, the respective counter is incremented, and the result returned. 

Regex ಠ_ಠ Regex is evil, the worst. seriously. stop it. right now. kill python.exe right now and change it. You use beautifulsoup, a dom parsing library, literally a few lines later, but you choose to use regex. You sir, are evil. I would suggest looking further at beautifulsoup, or taking a look at Scrapy, a scraping library for Python that makes use of generators to scrape large element sets (and even has cloud support!) 

You should make sure you leave whitespace before and after your binary operators and in particular, your comma in , but don't add extra whitespace in your statement, between the brackets. If you're interested in ternaries, you can condense the following into a ternary by reversing the condition and using : 

Look at this page(It's w3schools, I couldn't find a MDN post on it, sorry) on HTML checkboxes, this may be exactly what you're looking for. Then, you can iterate over the array of checkboxes and add the indexes of the ones that are checked. 

There's probably not a need to initialise the variables at all, but, you'd need some nice comments explaining what does. Also; . Although 12 months is a year, it'd be better to express that as or something similar. 

Missing syntax: In JavaScript, while the engine does not need it to run, you're supposed to have semi-colons ending every line: 

structure: Building on my point above, if you used a structure, you can extract most of this logic into separate parts, and use a generator to fetch the next page instead of a incrementing the page param. 

Template strings: Provided that your system allows for ES6, you can use the magical template strings to build your content: 

PEP8, Python's official style guide suggests naming your variables like this , rather than , and also using rather than an abbreviation. 

However, I would still recommend moving this to another file to condense your code in this file, and in case you ever needed to call this Dictionary from another file. And then, instead of your massive loop, you can use a simple Dictionary lookup: 

Building on the last point, those are reserved for docstrings, which means you shouldn't be using them in functions, which means the following needs to go: 

For this example, a negative iteration is the way to go, because otherwise as @Tibos pointed out in the comments below, the array indexes can get messed up and end up leaving them in. For example, if were , a normal loop here with would leave . 

In the same way you use a with an , you combine the first pair, with the secondary statement into one line if you like. 

If you've got that many elements, it might time to use a library (like jQuery, Ember, Angular or React) to manage your data and make the HTML layouts for you. However for just a normal HTML file, line breaks aren't necessarily bad. Extra lines don't bloat the files, so you don't need to worry too much about the files being bloated. Like I said before, code readability is an intensely personal thing. While I (and any other reviewers) can take a look at code at tell you how readable it is, you're the one developing it, and it's your creation. 

Hmm, when it comes to horizontal lists, there's not really a standard best-way-to-do-it, you've just gotta see which works best for your solution. s are one option, even replacing your tags with s. Or, on the other hand, you could try a . 

You need to capitalise on the concept of better storage methods than a massive amount of s. Consider using a instead: 

Hacked Version 2 You updated your code on the website (although it still applies to the code above), so I figured I'd give it a second go: 

Your structure: You're currently indenting all your declarations with a large amount of space. Stop it. By following my last point, you can avoid that kind of behaviour all together, but really, it's horrible. And sometimes you mess it up. 

Next, ; this function doesn't actually get strings (plural), but builds a string (singular). You shouldn't be iterating over every element in like that, for future reference, you can use a loop, but, you should use a here, rather than a loop. Using an lets you join all the strings together, at those joining points, append a string (). You shouldn't build SQL Queries as strings like that. Use instead. 

Using : You shouldn't be attaching new functions to primitive prototypes. What happens if in ES7, they add a function to the array prototype called ? And your code is sitting mixed in with production code. Then Bobby Maintainer tries to use s functionality, and finds it doesn't work the way he expected, because your version is overriding the language specifications' version. I would avoid using s on primitive types unless it's just practice, don't ever use them in production code. With the exception being polyfills, of course. 

String concatenation Instead of string concatenating everything at the end, consider using an Array join to "glue" everything together with a common join (). 

HTML is what's known as a markup language, which means the actual meaning of the elements (whether you choose or ) is up to the code to interpret. Browsers have their own CSS files they apply to every page, so which tag you choose to use for an element doesn't really matter. Except for types like and that have special purpose in the browser That said, using tag names that better suit the purpose increases the readability of your code and improves maintainability for future development. Standards like HTML5 add more style rules for elements (as well adding more special purpose types like and a bunch more stuff). There's not an optimization tradeoff as the CSS engine doesn't treat rules on different than rules on . 

By using pages, you can simplify your returning dataset and help to reduce the massive call times of the query. 

This is not how you do that. Instead of using get rid of the as is a valid array index, and is helpful in many situations. Instead of using , alongside an array, use . Instead of using an loop with duplicate logic (string assignment), use an array instead. 

Unnecessary logic: In your block, you check whether the number is divisible by 3, then by 5, then by 3 and 5. You don't need to perform the last check of 3 and 5, the first two make up that one. 

There should only be one , and with that having in there is superfluous, by keeping it as an object just with the and would be much simpler. 

I'm getting address (physical address, not digital) input that's obfuscated, and looks like the following: 

You're not really ing the final results, you them based on the conditions, you don't them and then filter them. 

The character shouldn't be in a URL, but can be. You don't really need to add to the beginning and end of your regex every time. I see a lot of people do when they could really just do with a case nsensitive search. Becomes: 

You should avoid having to manually update that, instead, by fetching the keys from the object. Something like this would work: 

If you want to make your site builder really dynamic, you shouldn't keep the page variables inside the constructor, use an like function and keep them as external options. should not be an object, you should use the functions in a mould, for example: 

I'm not a Gmod developer, so I'm not familiar with the spectating abilities built in, but, I'd assume that if any exist, they're probably better to use than re-inventing the wheel. 

First, your game doesn't have a name! (Which is why I renamed the question like that...) A few direct things to focus on: 

Otherwise, your HTML isn't indented correctly. Four spaces plus the parent's indention is where the children elements should be. 

Array joins are faster operations than string concatenation, but some people prefer the latter, while personal preference, I would suggest considering it. Additionally, the following could be improved. 

Make sure you include brackets in your statements, because as @EthanBierlein pointed out, funny business (serious bugs) can happen if you mess them up. 

: this seems unnecessary; I wouldn't bother doing it. I thought this was unnecessary, but I was wrong! as you receive arrays from , it was necessary to transform it into an singular array, instead of a 2d array. Instead of that, attach to the end of your , so it would look like: 

Seeing as they're identical besides one string, it would be easier to have the only deal with the value of the string and have the rest of the function call separate. 

The following code does the same thing for both 'cases', meaning that no matter what '' is, the same result will be given: 

You don't really need to worry about your code violating DRY principles, the loop cases aren't really similar enough for that. If you had something like twenty identical lines in there, maybe so. 

Getting and assigning listeners: There's duplicate logic as far as assigning listeners go, consider moving them to a function: 

Yeah, that's exactly what it's for! Mozilla Developer Network says that the element is for representing heading elements, specifically even quoting usage designed for a wrapped section's header.