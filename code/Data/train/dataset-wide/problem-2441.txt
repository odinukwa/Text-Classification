Is there a more optimal way of retrieving the character for the letter? I would assume that I would just replace my Entry set loop with another map, but I do not want to bloat the code, because it will reduce scalability. 

I have written the following Tampermonkey/Greasemonkey script. I am trying to obtain a list of all CSS rules for a page; across all stylesheets. As of now, I am just iterating over everything. Is there a faster way to obtain the rules? Also, I feel that there is a more efficient way of converting the CSS text to an object, but right now, all I can think to do is to tokenize the property-value pairs by spliting. 

So, I am not sure if I should have extend , because the and functions are already parameterized with . I guess I don't really need compare to... Does this structure look good? I used a instead of a because as3commons and the default flex packages do not have this structure defined. How easy will this be if I were to create it. Things that I am in the process of working out now: 

As you can see, I have modified the Point Objects fields, although they are inaccessible through traditional method calls. I was able to bypass Java's typechecking which I find both neat and dangerous. Does this mean that anyone can just wrap another persons class, unless it is immutable, and inject data? Point.java 

I have become interested in reflection and I wrote a class to wrap an Object so that I can access its private instance fields. The code works great. I do not need to wory about the exceptions in the and methods because I cast the values appropriately through my wrappers accessor/mutators, but I was wondering if there is a better way of dealing with different types? Example 

You know how to code, just use the above algorithm. To change the width of the trunks, just add change to format accordingly. Honestly, your ability to loop shows you have a talent, and put a lot of thought into your code. But in this case, where you are producing a static image, it is over complicated and unnecessary. Save your code for situations, where you require user input; I am sure it could be modified to be useful for a more dynamic website. You can achieve the same result using css and no js. I think the use of js is an overkill. With websites, if you can achieve the same result will good css, I think (my opinion) that it is the better way to go. Back in the day js was treated suspiciously and often disabled on web browser, but this is less so the case now. However, I would recommend, that if you can achieve the same result using css, I wouldn't code such a thing using js. Personally, I would reserve js for client side validation, or interaction in a dynamic website. Not for producing a static image. My opinion. Edit Also, you have a lot of nested looping going on.. and I haven't addressed that in this answer, I am sure that could be optimised. 

I just had a bit of a play with this. The solution is at the bottom, but I'll show the steps I took. Using a visual determination of whether two rectangles overlap. For rectangles that do overlap: 

@dreza's answer is correct. However, my concern is that since constructor injection is not being applied in , I'm going to assume that none of your other services do either. Given this, I'm also assuming that you're constructing your services manually (i.e. and other similar code all over the place). In which case, not only will you have to refactor every service class to accept dependencies via their constructors, you also have to refactor all of the code that uses these services. So to reduce the overall impact on the existing code base, you could do the following with your service classes (with as an example): 

I don't know which variant of MVP you are attempting to use (Supervising Controller or Passive View), but this: 

In this case, I don't think exposing factory methods on your builders is necessary, especially considering that all they do internally is call their respective instance constructors. Naming Conventions Generally speaking, methods should start with verbs. This is especially the case when implementing the builder pattern. As a result, I would remove the prefix from the appropriate methods (e.g. becomes ). This also makes the code more readable in my opinion. Both and have methods. I think the post-fix is redundant here since building a mock is already implied by the name of the class. Unit Testing When unit-testing, the general rule-of-thumb is to only test a single concern. In the unit test you have provided, you seem to be testing three separate concerns since you're asserting against three values on three different objects. I would split the unit test in question into three separate ones. Result DoStuffControllerBuilder