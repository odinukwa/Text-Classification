Because those options are easy to read and easy to understand. They feel natural. Your code does not. It's clever, but it is obscure and it is easy to get wrong: 

Andrew also makes valid point about common conventions when it comes to events, check his answer. In my inner modules, i would probably break it and use as event type though, but in code availible to others you should use . 

has inconsistent behavior. Sometimes it creates new elements, and sometimes it does not. This can produce all sorts of weird side effects associated with shallow cloning. Modifications that are done to transformed tree in some cases will affect the initial tree. To avoid that you will have to do deep cloning during transformation. However, if initial tree is always discarded after transformation, then it does not matter, I guess. 

1) The behavior and timing of method is hard to predict, so you should avoid using it unless you 100% know what you are doing. In my experience, it is only used as last resort measure in rare exotic circumstances. It should not be used as part of regular workflow of your app. In you case, for example, I highly doubt that aborting a thread does anything useful, since is a native call, and it probably can't be aborted by CLR. 2) Last time I checked there was no method that supports cancellation. But that was a long time ago, maybe things have changed since then. But if it is still the case, there are other options: 

While technically this is still two classes, you can now cast your collections to and process them in generic manner with your other resources. 

I have written event aggregator with the following API (just for the fun of it, I am aware that nuget has like 100 similar implementations): 

Here acts as replacement. The idea is that any object can subscribe to "events" by calling method and any object can invoke "events" by calling . acts as a mediator and passes messages from publishers to the list of subscribed s. P.S. Note, that some commonly used frameworks (e.g. Prism, MvvmLight, and most other MVVM based frameworks) got you covered and already have some messaging system in place. Nuget has multiple standalone implementations available as well, if you are working on, say, Unity project. However implementing your own event aggregator is a great exercise (I have actually shared my implementation on SR, when I was playing around with Dataflow). 

Personally, I really hate statements, because more often than not they are used to make an excuse for a bad code and/or laziness. In a project I am currently working on I recently found the following comment left by one of my coworkers: 

Your code is really hard to follow. I think it is beacause the API you used is just way too complex for such a straightforward task. It's also weird. Like, why would result class... collect itself? I had troubles wrapping my head around this stuff. I think you should keep it simple: 

which is not a big problem in itself, but it makes a task of increasing the size of playing field much harder (you would have to tweak all those numbers). 3) I feel like a tuple is not the best choice of type for . Some sort of will probably look and scale better. 

You do not handle multiple files being dropped (that is why there is an array) You do not handle being . 

You do not need to re-caclcute sum on every iteration in your method. You can simply create two varaibles which would hold the sums of two "sides" of your array. Then on every iteration you can simply add the item value to the first variable and subtract it from second. You can use method to get the initial sum value for "right side". I see no reason to keep splitting the array once you have found the split index. You should probably merge and methods into one to fix this issue. You can avoid creating pairs this way as well (i think they are not needed here). If you want to actually split an array you should probably store (or return) the split index as well somehow. Your class can be made static. 

There is a in my application which I want to close automatically after a certain delay. And I want to have an attached behaviour which I could turn on/off and use with other popups. Google came out empty, so I implemented it myself: 

Edit: as mentioned by sir t3chb0t, there are cases, where can throw. So it might be a good idea to swallow exceptions inside your method and return in those cases. But it also can be a very bad idea. It depends on use case, which you should carefully evaluate. 

While you are only asking about event i feel like the general review will help you as well. So here it goes. 

Long story short - you will have to adopt WPF way of doing things, which is MVVM way. Frankly, your code is a mess and I can't see any minor refactoring that would change that. You will have to refactor the whole thing: 

I think you do not fully understand the concept of members. Until you do, you should avoid using them. Keep it simple. You should avoid creating methods, thats what properties are for. In your case, you might want to use indexer instead of properties though. You should not re-create class if you want randomized results. Create it once and re-use it. 

It is my understanding that "client" class should handle the connection. It's job is to keep connection open and send messages to the server. Why does it expose then? Shouldn't some other component, that is not part of the client, be responsible for processing/parsing messages? 

Native methods return error codes, so it is good practice to handle those codes somehow, not just ignore them. For example, if method reports, that there is no sound driver or no sound card or w/e, it makes sense to notify user somehow. Write warning in the status bar of your window or something. It is meaningless to initialize , since its value will be overriden anyway, wont it? And, if its your real code, you dont have to recieve current volume in order to set it to begin with. should be refactored to . More complex example: 

So if I were to see in code, I would assume, that 3 and 4 are the first two numbers of the sequence, and that it will go as and not as (3+3 =/= 7). 

The way you described it, the should represent the action to be performed. And it should not matter, whether you invoke this action via menu button, toolbar button, hotkey combination or whatever. If that is the case, then it should not depend on interface. You should reverse the dependency. The button adding itself to menu looks weird. I think you need an abstrction for menus and toolbars with method, which would take your button as argument. Again, reverse the dependency. method looks pretty generic to me, should be easy enough. I don't like parameters. It feels like half of those should be properties in interface. Class name starting with underscore is something those eyes have never seen before.:)