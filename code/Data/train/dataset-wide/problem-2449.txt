The RegEx will match a single non-line-break character and check if that is followed by the same character any number of times. here is the complete match and is the first chaptured group value i.e. the character. 

Eight Digits Digit-Space-Three_Digits-Space-Two_Digits-Space-Two_Digits Digit-Hyphen-Three_Digits-Hyphen-Two_Digits-Hyphen-Two_Digits Two_Digits-Space-Two_Digits-Space-Two_Digits-Space-Two_Digits Two_Digits-Hyphen-Two_Digits-Hyphen-Two_Digits-Hyphen-Two_Digits 

Using common class Sometimes, adding all the elements under a container is not possible. In such cases, adding a common class to all the elements will allow to select elements using class selector. 

This means, if is falsy, selector will be . So, there will be no case when the will be empty and error will be thrown. That means, there is no need to handle that error. And, I'll also suggest to use as default parameter. This will select all the elements having attribute. 

If the expressions do not contain spaces in between them, can be replaced by (one or more non-space characters). JavaScript => => n * In the three functions, you're first using to get the matches then iterating over it and using inside it. This is not at all necessary. Simple is sufficient in this case. Rewritten 

Less DOM interactions. Using this code, there is only one DOM dive to get and set the updated innerHTML. Single regex to replace multiple strings has better performance than multiple replaces with single string Shorter code 

If second parameter is truthy, element will be disabled. If falsy then element will be enabled. Putting it all together 

Replacing HTML jQuery accepts a function which will receive the current of the element on which the method is called as parameter and replaces the returned content to the element. The code can be written as 

The events bound on are not needed to be wrapped inside . Also, multiple statements can be chained and function reference can be used directly as handler. 

Global Variables: All the variables defined are global, which is bad practice. Avoid declaring global variables. Wrap the code in IIFE and define variables using keyword. Naming Conventions: The names of the variable should give indication of it's purpose. The names should be in camelCase format. Caching: Cache the DOM element reference and use it. This will save the time to dive into DOM again. Missing Semicolons: Although, this will not cause any errors since JavaScript's Automatic Semicolon Insertion(ASI) will add the semicolons, it's good practice to add them. Also, depending on ASI can cause the semicolon to add someplace where the symantic will be changes. Ex: When declaring multiple variables if we forgot a comma, the successive variables will be declared as Global. Comparison: To compare variables use strict comparison operators( and ). Loose comparison will cast the operands before comparing variables which could lead into unexpected behavior. Using ladder: For mutually exclusive conditions, use . If the condition is satisfied, the next conditions in are not executed. Or statement can also be used. Nested : Use nested loops to iterate over the and update the values of each cell.() Appending Markup: Instead of appending markup(like element in ), IF POSSIBLE, add the markup in the HTML and only update the text-content of the element through JavaScript. This will avoid adding multiple nested elements if the function is repeatedly called. Comparing Variables: is equivalent to which is more readable and easy to understand. Also, this will save an operation(Logical Not). Using string parameter to : Don't use string parameter to the and functions. You can pass the function reference as Un-Needed Code: In first variable is assigned to zero and then it is compared with zero which is always going to evaluate as . The condition is not necessary there. Similar Functions: The functions and are similar. Both are redirecting to some page. This can be combined into one function accepting a parameter as redirect URL and redirect to that URL. Same is with and functions. Logical Error & Dead Code: The expression will always produce value between one and seventeen. So, the code written for comparing it 18 through 22 is dead code, which can be removed safely. Or, if you want to generate the random number between one to twenty-two replace the by in that statement. Binding Events: Use to bind events on elements. As in the current code, no event binding code is shown, if inline binding in HTML is used, use to bind events. 

They are not searchable and can be easily confused with numbers. For example, and , and /. Dead/Unused Code Variables and are not used and thus can be removed. Overriding Variables Variable is used to get the first line in the file and then inside it is again used to store the match result. This will work fine, but will also confuse other users(or you after few months). The variables should be used for single-purpose. Slice down input data Inside , data is used to search for the name. here is complete data with the number of records on the first line, name-numbers and then names. This data can be sliced down to keep only name-number. This will reduce the data to work on and will improve the performance. 

By making the some... part dynamic, we can make this code common for all conditions. For the message, we can use either object or array(in case of numeric keys) and store the message on that key. The colors , & can also made dynamic using below condition. 

Naming Conventions The variable doesn't tell what it contains. does reflect what it contains. , , , - huh? , the name of the function has nothing to do with filtering. It is iterating over some data and calling provided callback for each property. Global Variables is global variable. Global variables is bad practice. Please see Why are global variables considered bad practice? and I've Heard Global Variables Are Bad, What Alternative Solution Should I Use?. Using Proper Methods is used to update each element in collection. Here, is used just to iterate over the elements. You can use , , , etc. in such case. Diving into DOM In callback, you're diving into DOM three times to get the same element. The element can be cached and reused. Method Chaining in can be chained. Unnecessary code is not required as only returns properties in an object. can be safely removed and flag on the next regex can be used. Also, HTML is case insensitive. No transformation is needed when changing attribute. 

Moreover, the array contains space before numbers and an empty string at the end which is not required. 

To check if an element have a class, can be used instead of . The methods can be chained but there is better way to do this. To toggle the class on an element, can be used. This also accepts callback function. 

loops: loops is used three times in the code. Nested loops should be avoided. There are very few cases when nested loops are required. Always try to avoid nested loops wherever possible. In the first loop, the keys of the object are joined using tab character. 

Can we make this code dynamic? To make it dynamic, we need to first check what all things are different in them and by accessing them dynamically these three functions can be combined. First, we need to add some custom attributes on element on which event is bound. To take example, I'll use below element 

Getting attribute value jQuery provides method to get the value of the attribute value. Core JavaScript has property that allows access to data attributes. 

If using latest browser/environment that supports Arrow functions, the code can be made even smaller 

I think, the code i.e. HTML and CSS are minimal. Storing the tooltip on the HTML elements is correct way rather than storing it in JavaScript. So, NO. You should not only concentrate on JavaScript. 

That is too much code for such a small functionality. I've rewritten the code. See the explanation in the code comments. 

I'll suggest to move the styles in CSS classes and add/remove the classes using JavaScript. If ES6 is supported in the target environment, you can take advantage of its features like template literals. 

UPDATE: After editing by OP. Both the approach will work for the other functionality too. So, the answer will cover those cases too without updating it. OP just needs to write similar code for other functionality. 

Using with value accepts second parameter which will be converted to Boolean internally and depending on the value, the action will be taken. So, the and statements in the question can be combined as 

Naming: , . Using prefix when variables are not local/private to the method: , , Missing strict mode: What does “use strict” do in JavaScript, and what is the reasoning behind it? Really need those comments? Guessing a number, but comments concerning Use to compare variables. Which equals operator ( vs ) should be used in JavaScript comparisons? For default values, can be used instead of ternary. The default value for should be instead of . 

If running the code in latest environment where is supported, you can use it to iterate over elements. 

which basically says, when hover on , select next sibling and it's direct children , having class. Demo:Although, you cannot see images, you can see it works as expected when hover over an image. 

is the character matched by and is character matched by . Using ternary operator, correct value is subtracted from the charcode. If arrow function is supported by target environments, the code can be shortened to 

Targetting elements is generic selector and will select all elements on the page. There might be some elements which are not needed to target for this functionality. You can target only required elements using 

is the actual expression inside delimiters here. Similarly, other two methods can be written. Other small improvements: 

Now, looking at above, we can easily spot that many of the things are use multiple times in the same sub-pattern. Can we combine/reuse them? For simplicity, I'll use single backslash from here onward. You need to escape it by prepending another backslash to escape it in string. When I say nth road, it'll refer to the nth path in the above diagram. Review: The first road is straight forward. Match eight digits. Simple! The second road, . As you've used , similarly we can write as . Cool! It'll now become . The third road similarly can be written as . For fourth and fifth road, same can be used. Second and Third roads are similar except the separator used between digits. Is there any way to combine them? Back-reference. How can back-reference be used here? I'll show you: The character should be captured in capturing group and refer it with back-reference whenever needed. 

Just in case, if the case(uppercase/lowercase) is different from the one used in regex, use flag to make the match case-insensitive. Here's Live Demo: 

Above solution assumes that the value from the filter array always exists in the object. If this is not the case, you can first the array and then use on it. 

jQuery will take care of iterating over elements matched by selector and do appropriate action, in this case. 

I don't see any issue with code other than below two things. First, I'll suggest is to use instead of contains and then add/remove class. See browser compability and if target browser does not support method, use polyfill from MDN. 

I'll suggest you to combine all the replacement strings in one and create a single regex. Also, use the with callback function. 

I don't see any problem in your code except using of equality and inequality operators. Use strict equality() & inequality() operators. 

As Barmar explained in his comment, you can use the function as argument to and . These methods iterate over all the elements matched by selector so, there is no need of . Also, -multiline flag is not required in the regex and can be removed. Final Code: 

RegExp Constructor vs RegEx Literal is used to create a new regex. This form of regex accepts a string as the first argument and returns new regex. This is used when creating regex from a variable. Since this uses string, the backslash is used to escape following character. This will produce unexpected results when regex itself contains a backslash. Example, will return . When using a backslash in this form, they need to be escaped . This is not necessarily difficult but requires to take care of escaping. Passing regex literal syntax to the constructor is same as literal syntax to create regex. So, is same as . Mistake The regex for object doesn't work for all cases. means to match anything which is not AND . If the key of object contains , this regex will fail. Check this demo. Removing solves this problem. Not a mistake, but a validation. Using quantifier instead of . says, match zero or more of the previous pattern. For example, will match which you might not want to match and process. Better use of capturing groups The regex will match the string starting with to the literal and put the complete string in first captured group. Then inside , and are again replaced 

Use the same value in the query param as the ID of element in the HTML so it can be directly used as selector If you don't want to change the query param value and ID of checkbox, create a mapping of param value and the selector 

Improvement Here is the Demo of jfriend00's answer. Although, this is correct, this can be done without jQuery at all. Note: Here, I'll use old markup provided in the question. can be written in CSS as 

Looking at it carefully shows that this only create a string of values separated by tab. can be used for this. But again, as the objects are inside array, it need to be iterated over and then values can be extracted from object. New code using this function will look like 

Review The IDs an class names are very generic. Chances are that they will clash with other page/developers styles and will not work as expected. When working with jQuery and CSS, it's very important to name the things properly. You can namespace them with some prefix - in this case. The class names and doesn't tell anything about what it contains or direct wrong message. and is much better. will hide the elements on page load causing flicker. I'll suggest...(see Improvements section below) is used to stop ongoing animation. As no animation is used(or the code is not shown?), it can be removed.