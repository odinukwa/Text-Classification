Instead of using , just cast the square root to an , i.e: The should be outside of the for loop You might also want to add something to catch weird input, such as -> . If you have this you can also eliminate the first part of 

What it's doing Basically, this is just going through all the numbers up to the square root of , and seeing if they divide evenly. They divide evenly if . If anything divides evenly, then the number is not prime and the function should return . However, there is no anywhere in the program, and it actually relies on undefined behavior. Try going through it yourself with equal to 9. The loop will go until , and then it will terminate because of the statement. After that, the function doesn't know what to return since there isn't any statement outside of the loop. On my computer it defaults to , but if you compile with you'll get this: 

Reading the tests, I do not really see how a single slot is to be used. I only see how multiple slots inside a page are used. Also, I only see tests for several GET methods. If I want to verify that the results that are coming out are correct, I somehow have to read the config fixture file - a secondary source of information. This situation actually is bad. I want to be able to read the tests, and actually CHANGE some input values in a certain test method to see whether or not it changes the output and breaks the test. If I cannot see the input, I cannot play with the values. One final improvement: If you include files, they can actually return a value. You do not need to define a global variable that will transfer the config values. 

I find it weird that the bootstrap class actually changes the configuration. Configuration to me is a read-only value storage. It gets written in the config object only once in the life cycle of the application request: When it's read from it's permanent storage. The AppController for some weird reason has dependencies on a session manager, a configuration object, and TWO database connections. None of them should be the business of a controller. The controllers task is to be the combining layer between the incoming request on the input side, a number of models that act upon the data in the request as the processing step, and passing data back to the response as the output. Analyzing the input data from the request usually is done by helping objects that represent HTML forms to do validation (none of the controllers business). The models usually make use of some database access or session, but this also is not for the controller to know. Preparing a response means to push some values into the answer, which might actually be rendered by a template, but this also is not really the business of the controller. When I look at your AppController class, I see that it offers a whole lot of methods that have nothing to do with controller tasks, but with implementation details of a concrete application. I see methods like , , , that shouldn't be there. I especially wonder why does not use the to terminate the session. It was mentioned before, but I want to underline that if you force all the application classes to be extended from your frameworks classes, you make it hard for others to use your framework. For example the - for some reason they have to be extended from your mother helper class. A much better approach would be to only force the implementation of an interface, and offer an abstract helper class that already has a basic implementation that can be extended if there is no need to build from scratch. 

This can be rectified by replacing the statement with , and putting a on the outside of the loop. It should be at the end because at that point the function has gone through all the possible factors and found none that divide evenly. Improvements 

is never going to be larger than due to the constraints in the loop, so should also be of type . (Or should be of type ) The two statements at the beginning of the loop that check if is or are going to be the same every time, but are evaluated at the beginning of every loop for no good reason. Put them before the loop. The middle statement of the loop, and the at the end, are doing the same job, which is limiting the amount of times the loop repeats. Replace with and get rid of the at the end. I don't know what function you're using, but I'm guessing it's from . That function takes a , so either use a square root function that takes an or replace with . Mathematically, it's pretty much the same thing (though we can get rid of the unnecessary ), but we avoid using that function incorrectly. This loop will check every number up to the square root, but if has any even primes then it is a multiple of two. You check early on if is even, and then only check odd numbers in the loop. That will cut out half of the iterations with one quick statement in the beginning. 

Bonus: It is easily extensible should new fields appear. Negative: Still a lot of code duplication for three basic comparisons... But we will address it: Extracting all basic functions into separate variables (an array would work here, too), and adding the field that should be compared to this function, you get an almost universal arsenal of comparison of object properties. 

I must criticize your tests. They are not part of your question here, but available in your github repo. Your SlotTest does not test slots. It does test the page. Why? 

It converts currencies. It validates currency identifier. It fetches HTTP resources It caches fetched HTTP resources. 

Adding or subtracting monetary values is a common task. How can we add two amounts of the same currency? Simple addition. Let's add a method for it. Note that I add the method to the Money_Currency class, which can be discussed. If I do not want to do this, I'd need an independent class that does all the math. If you have such a class, try this different approach. If not, continue following me... 

I used C++ metaprogramming to build taylor series for sin, cos, and tan (not really for tan). The whole thing is on my github. Please give any feedback related (but not limited) to style, functionality, etc. Overall I think the biggest flaw is that the client needs to make their own struct with a member called , and pass that struct to the "functions." I would have just passed the double, but C++ doesn't let you use floating-point numbers as template arguments. Using a struct was the only way I could think of to get around that. Thanks! 

Everything looks right from this, so we can call it a day. Note that if generating a list of primes like this is what this function is used for, you should consider using a sieve instead. 

If the range at the end is just to demonstrate that your function works then that's fine. But if you specifically need the primes over an interval, try implementing a sieve instead. 

Although it does plenty of things, it has no answer to the problem of how to actually recognize which currency any amount is in. Adding two amounts might be valid, because you add GBP and GBP, but might actually be invalid because of GBP and USD. Your variable would only contain the integer or float value. So split it up. First create a class that actually represents an amount of money in a specified currency. This can be as easy as making a class with two public values, $amount and $currency, but usually you do not want to allow write access to these, so the two values should go into the constructor, stored as private properties, and be accessible via get methods. 

I have some criticism on details you didn't ask, but which should be addressed: Autoloading Make use of it! There is no need to make manual calls to . There even is a standard: PSR-0, which defines how you should structure your class and namespace names together with the directory and file structure. When I look at your code, I see some issues: Because the underscore was used as a separator before PHP got namespaces, it is considered a separation character in class names. Namespaces Make use of it! I cannot see a reason why the exception \DH_MVC2_Application_Exeption is located in the root namespace, and not called \dh_mvc2\application\Exception. It would be so much easier to simply inside the "\dh_mvc2\application" namespace. Whitespace and coding style Endless debates might occur, but I really don't like yours. Especially the inconsistent placement of parentheses. Personally, I'd rather prefer not to use that much spaces, but if you really have to, use them everywhere. For example, if you want to find the function "set_ini_default_paths", and want to make sure not to find "set_ini_default_paths_directory", you'd search for "set_ini_default_paths(" - which will find only function definitions, but not usage. To find these, you'd have to search "set_ini_default_paths (". Dependency injection Doesn't take place. Objects are created inside your class. There is no way I would be able to change for example the Config object if I'd use your class, I must use yours. I even cannot change the config filename! Include path Be careful what you add here. If a PSR-0 autoloader is used, there is no need to add anything to the include path. In fact, you'll get a good amount of performance if you include as few directories as possible, preferably only ".", to be able to include files with a relative path.