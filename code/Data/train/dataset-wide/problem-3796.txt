Training - most competent and educated people should be able to just read the manual, but for new and complex tasks or things that are not always cut and dry, working directly with an instructor is often necessary. In person, a good teach can tell when people are confused even though they don't ask direct questions. Meetings involving design and planning - for some people, there is no substitute for the white board. They're getting better, but most places don't have the technology in place to do this remotely. There is just something lost in the electronic translation. Maybe the next generation will be better at this? Being treated as a person and not a function. You may just process information, but when someone questions your work, asks you to do something or you ask someone else to do something, you want to be treated as a person. Electronic communications come across as terse and impersonal. It's easy to say no to a void. "That's not my job." It's too easy to be rude. I want people to know they are dealing with Jeff O. We have history, things in common, feelings that I want to be taken into consideration before someone just says no to me. 

You don't have to be someone's direct supervisor to require them to be professional and honest. This person should be confronted directly, but I don't know if it is as much about lying in this specific case or the impact this will make on future interactions. She needs to address the fact she will have to earn your trust again. Nobody likes to be lied to. If you get too confrontational about this specific instance, most people will just get defensive. She could have argued that she quickly viewed your email, but didn't read it in detail. For practical purposes, she didn't "really" read it. There are additional consequences when you can't trust someone. Imagine when she sent the request, instead of providing a solution, you responded with more questions to make sure it is a true emergency or ask for a more specific due date, etc. Communication is less efficient when there isn't trust. I would focus on creating and maintaining effective levels of communication going forward. Hopefully, she'll make an effort to be more honest. 

First, 18 months is a pretty short career. I don't think anyone expects you to have extensive experience at this point. If you're in a technical field, you may have some trouble-shooting and bug fix experience, but don't let that hold you back. 

As of now, you need to focus on the class project. Anything you get from this team member that helps the future startup is just an extra benefit. Team projects should be evaluated on: 

I think you need to be open with this person and tell them this situation has to change. He can stop asking your for constant help, or the two of you need to go to your supervisor and work something out. The project may need to be adjusted for you to train and hold this person's hand. Don't be surprised if this lesser programmer was hired with the assumption you would help him along. It's the client that is paying for both of you. If he doesn't want to do that, let him fend for himself. 

It seems like your boss should have mentioned the benefits of your visibility. Otherwise, we can only guess. Do you have any interactions with other people at work? Yes, it would be great if your code stood on its own merits, but that's not reality. Many people won't see your code. Even something as simple as making a request to HR, do you want to be "the programmer" or a person who is recognizable and should be treated like a human and not a number? Talk about your projects. Show them you care and are passionate about what you do. No one can gain that insight just from your code. Why make it harder on yourself? Is it really too much to ask? I don't see this as playing Politics, but if it is, it affects the people who don't play along more than those who do. If your company was bought out, do you think everyone is going to go out of their way and review all the code you checked in to see how good you are? They're going to look at your name and not know who you are. Code doesn't get fired; people do. 

They say you should dress for the job you want and not the job you have. Your collegues may frown upon over-dressing and make it more difficult for you to get along, but the people doing the promoting/hiring may like it. I hate to see a company have two "sides", but if they do, you probably have to pick one. 

If you only have your resume on LinkedIn, you don't have the ability to tailor the resume for different jobs and/or industries. With the current technology, you're at the mercy of the person reading or the system they're using ability to scrape in your data and find what is important. In the future, there may be a capability to customize your resume information not only on how you set it up, but also customize the view for the recruiter/employer based on your preference. I made a career change several years ago, so I rarely include the details of that in my resume. There are some jobs where I think it is relevant. Since I'm the one selling myself, I like having that control and not leave it up to someone reading a lengthy resume. 

Many people in jobs are often too busy to provide enough supervision to interns and find things for you to do. Make sure you are keeping them informed on the status of things. As far as software development, here are a few things you can add to your list: 

Will you call me back if I don't get the job? Have you ever placed anyone with this company? What suggestions have you made to the company to make the job more attractive? (Salary, benefits, flex-time, telecommuting opportunities, get over your disgust for body piercings). You're right. For the most part they don't have a clue. In larger firms, you may not even get to talk to the person handling the account until you get a first or second interview. Their main goal is to help people who know nothing about hiring technical people and/or saving the person doing the hiring from getting 500 emails and phone calls. 

Stick with the technology and strong company. You're always wanting to work for them shows they've been around for awhile. A lot of times, a thesis topic can be driven by your expertise which was formed by the expertise of your professors. You need people on your committee who understand what you're doing. Rarely do masters thesis introduce radical discoveries. You want to grow and stretch your skillset. It's not purely just picking on technology over the other. I've seen Windows users switch to Mac just for a new challenge. 

Not all project experiences are created equally, but I don't think giving date ranges is important. Overlapping projects can look confusing. I would be more concerned knowing the following: 

Many modern jobs are more project based than time based, but it's ultimately up to your employer. I would say it it all right if you're getting things done and if you're doing company things on your time. The lines of being "on the job" can get blurry. I recall a lawyer saying, "If you're in the shower thinking about a client, it's billable." This should open a dialog with your boss so you can find out what her expectations are and possible additional things you can learn to benefit the company and hopefully help your career as well. 

There's no reason to assume the interview represents the tasks for the job. You always need to ask. Who wants to hire someone who can just do the bare-minimum? Hiring people with a good foundation (even if it is theoretical) and understanding of some of the underlying technology offers a chance to expand the software's capabilities especially when it comes to performance. Requirements change. Do you want to send the pregnant mother of your child to a doctor that just understands normal births or someone who is prepared when there are complications? They may have expectations that you will improve their code base. If there are tasks that are boring and repetitive, you should look for ways to write code to take care of that. Stop delivering what they want and give them what they need. There has to be a way to apply what you know to make their website a little less normal. 

Find out what gets in the veteran's way of doing is job. Does he need better tools? Maybe you need to work on managing the external pressures that are creating too much of a work load. This is the person you get technical answers. Be respectful of his time and don't just interrupt when you feel like it. That's bad for productivity. Workout a time/place to utilize his expertise. 

Are we really so shocked that people doing the hiring at many companies don't know what they're doing? They don't know how to identify a good programmer (in this example), so they'll hire the person that someone else was dumb enough to give a job for a few years. Most companies never last more than 5 years probably because they repeat the same mistakes. Expected Experience They explicitly stated 3-10 years, but offered someone with less. Don't take job postings literally. I don't know why they play this game, but they always "wiggle" on requirements. Personally, I think that is a good thing, but why post these numbers if you're not going to stick to them? It's a game. They think it will weed-out all the people who will take a random shot at a high-paying job even though they know nothing about it. Time Factors I've seen companies that base the pay-scale on number of years at that company. Other experience was not given much weight. In their mind it's just easier to do this and avoid negotiations and conflicts. Why wait a year to determine raises? What's so magical about 365 days? Skill Sets Same as expected experience. They shot-gun blast 25 different technologies and end up hiring someone who has a little over half of them. What does "understand" HTML really mean? Do I get to Google it? Am I expected to write it fluently? I've had interviews where answering "yes" was acceptable. They probably had the last programmer make this list before she left and all these skills were used for clients/projects that you'll never work on, but HR doesn't know that. Look for the company and most importantly team and leader that fits your style. Don't take the hurdles you have to jump over too seriously. Many companies mean well even if they don't really understand how to manage programmers. The princess has to kiss a lot of frogs sometimes to find a prince. 

I don't want to be over-simplistic, but your supervisor expects you to accomplish certain tasks. When other people refuse to comply to the things you need to do your tasks, you have to inform your supervisor or take responsibility for not getting things done on time. Make the request. When it is declined, explain that you have to give your supervisor a reason why this person thinks they don't have to do this. Maybe he is interpreting the security policy different than you and your supervisor are. Maybe his supervisor told him not to. You've jumped to the conclusion this person is playing some sort of office politics game without confronting the issue directly. It doesn't matter what he "feels" like doing. Everyone needs to understand what is expected. No one likes to go over someone's head or constantly have to have their supervisor intervene when they have a conflict with another employee, but some people leave you no choice. Find out the real problem and go from there. 

You'd think people would appreciate the additional information and opportunity of a candidate showing up 15 minutes early, but based on many responses they do not. Especially if you have a receptionist to run interference for you, I don't see this as a problem. It's not like having a party at your house and guests show up when you're not ready. If your butler answers the door, you can wait in the parlor while I get ready. There are times I wish someone showed-up 15 minutes early. I can then decide if that's to my advantage or not. There's less risk of our interview getting cut-off because of another appointment I have. Otherwise, I'm more than willing to make you wait. As others have pointed out, show up early to avoid the risk of being late. Many people will look at this negatively. If you're not comfortable with showing up too early, then just wait a few minutes before acknowledging your presence. Based on these responses, it can be frowned upon if you show up too early and interviewers are uncomfortable making you wait. 

Your resume should state the facts of your employment including accurate start and end dates. Focus your cover letter on explaining the gaps, short-term work along with why this isn't going to negatively affect your ability to perform at this job. If they just go by the numbers, you may not get an interview, but quality writing and communcation are a selling-point by themselves. 

You need to look into how your non-profit operates their budget. When money is earmarked for salaries and the equipment budget is very low, you don't really have much of a choice. Donors can be put-off if you're spending their money in ways they're not expecting. Paying people by the hour can add up especially if these conversations take you into over-time. Salaried employees that could be doing other work to bring in money would be considered a waste as well. I've worked at many companies that don't think twice about asking people to do extra work, but wouldn't let you buy a pencil with company money. Doing paperwork for reimbursement is a huge waste of time, but I don't see a company credit card in my future.