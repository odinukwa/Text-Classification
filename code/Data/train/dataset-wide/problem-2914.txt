Structure: Instead of having a function encompass everything, consider using a constructor, or if you can use ECMAScript 2015, use the structure. By using the structure your code would look something like the following: 

That's not really how you're supposed to use internals and variables. Consider using the chain instead. 

: Is there a reason you really want to be sure it's 1? Is passing into the functions directly not enough? 

Here's the code on GitHub too. If you want to run this code, comment out the lines relating to calling and it should run with posting messages in console only. 

I will extend mulquin's short post. Sanitizing your POST will enable you to make sure there are no SQL injection. Since you are using PDO - you should use prepare() function reather than exec(). exec doesn't escape your query. (as shown in the link provided by mulquin) Furthermore - you are not checking if the email is indeed an email or not what happens if its not a real email address (ie the format is not john@doe.com) - you will be storing gebrish at this point. So a bit of validation so that not only spammers won't just enter anything. 

: You're reusing a lot, consider using a function and processing the array operations there, and then simply calling it when necessary in your code. 

Rather than attaching to all of the elements, you can just write the CSS so that it puts that style on all children elements of the parent tag, and if you have certain elements that don't want to have that, you can just add to the CSS and escape it. 

Ok with all that routing question out of the way - I agree with mbanzon with basename being fine to check for internal directory structure to block people out... If you want extra security you can run a short alpha numeric check to make sure nothing funny is included. As for the white list - since this is a routing file and a static one a white list can also help speed things up as long as its minimal, one problem though with that is if you file system becomes extensive it maybe best to not have a whitelist at that point (you dont want your lookup to be too large to maintain and add. Side note: if your looking for interesting ideas symfony2 routing is pretty good (its being use at core with laravel). It is more extensive than your solution of course but still interesting to look at. 

Thus I advise jumping the gun and just switch to iterators since that it what the interfaces of the algorithms we use consume: 

will be responsible for handling the resource, this implies allocating it, moving it, assigning it, copying it and freeing it. will be responsible for string operations: catenating two strings, finding a character in the string, finding a pattern in the string, ... and will internally rely on for its resource handling. 

Your code has a call in the loop, I would remove this from production code on your website. It's test-code at best. 

That is, simply an improvement of what you have: IT IS JUST AS SAFE AS YOUR IMPLEMENTATION, WHICH IS: not very. 

It looks more like you're setting up css rules and what is ? You should be more descriptive with your function and variable names. 

You shouldn't have individual functions for each role, and a user probably shouldn't be assigned more than one role. Especially seeing as you can't be all three 

NOTE: function is only valid on model level and does not allow mass insert. Doing will allow to have a inserted as long as fillable is used however it will reject if there is a duplicate key 

You should pass the body of the mail as an argument and it will do what you need. The body part should have been on the outside and independent of the mailing function. This way if you decide to expand this - you wont need to copy paste a third version 

I've written a simple FizzBuzz in TSQL using some loops. Here's a SEDE link to run it in your browser. 

Using a : At the moment, you have a bunch of random, relational functions that pass input around, parameters etc. Use a instead, this allows you to: 

If you're writing the structure on string formatting, then I'd suggest considering JSON as a better alternative. It's a better alternative than reinventing-the-wheel, because, its support is inbuilt into many languages, including PHP with the and functions. 

Beware of recursion While recursion is elegant, in languages like C++ it can lead to Stack Overflow. As such, unbounded recursion should be avoided, and therefore your implementation of or or should be converted to an iterative approach (use a loop). Encapsulation It is generally recommended to encapsulate functionality. At the moment, anybody can fiddle with your internals (and point its member to whatever they want without using your functions). Once becomes however, only a specific set of functions will be able to access it: 

I'm currently using a make shift INSERT on DUPLICATE UPDATE function that relies on a DB raw query from eloquent. I'm looking to improve the quality of the code and the speed. Please take a look 

Too many variables - the majority of the time the need to hold onto the DB's credential inside the object is not necessary - it should be part of your configuration of the APP and invoked as such then passed inside to the DB object to initialize the connection - once that is done you don't need this info. If you change information then a new object should be created. Why? because image you do need to connect to two different DB (one for user, one for tracking as an example) - if you store your credential your stuck to this. Also as I can see from your constructor - your not even passing your credentials to it - its fixed from a global stand point. The majority of your class is just a smaller typing of what is already presented ie: query, then bind, then execute. Its a rehash of the system's PDO. Another flaw is your Single() function - it has the command - what happens if your query returns more than one result and you want to iterate it one at a time - you can't re-execute the query to grab the second row. fetch()'s purpose is to go fetch and iterate through the rows one by one. You can argue that you can use resultSet() to grab all then foreach but if you are returning 10K rows you will be in a heap of trouble. Next - lets touch a bit of the tracking class. One flaw is the getInstance. Singleton are bad for maintainability because you can't make more than one object of it and its hard to test it. Ideally - since all your functions are relying on the database - you should have passed it (aka injected) is part of your constructor and then call your functions which uses the DB. Its not like you will instantly use a different DB within the function because you are tightly coupled from it. Basically: your Track class is your repository, and your PDO is redundant because its just shorthanding the coding. thats my first pass through of your code.