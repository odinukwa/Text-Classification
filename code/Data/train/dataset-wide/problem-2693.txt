I think there are two major issues you should address right in the beginning when you start with PHP. Separation of Layout and Logic This means in general that you shouldn't mix HTML and PHP code. Later this will lead you to the MVC-Pattern. index.php 

Please keep in mind that some corner cases where undefined in you initial program and I tried not to add any new functionality. 2.) I'm not sure if it is good practice or even best practice, but at least it is common practice. 1.) Somebody else need to answer this part. 4.) The usage of final all over the project or not is more a religions discussion. It's the same with visibility. There are valid reasons to restrict possible changes to a minimum and there are other valid case to keep it as open as possible. Declaring variables final is in general intended to prevent changing them by accident. Short and clean methods will also address this issue and seeing all over the place, makes the code not more readable from my point of view. 

How to improve the overall code quality? I don't know much about C#, but I guess your analyzer is complaining mainly about the length of your method and its cyclomatic complexity. Try to split it in multiple well named methods and use guard conditions to reduce the nesting level of your s. Maybe you could also use the ternary operator instead of the in your first to extract the common part of the branches. But this is an highly discussed topic. How can I make it more extendable or maintainable? There is no real use in making something extensible, that you never plan to extend. So if you don't know possible (useful) extension points, you shouldn't desperately try to find some. You can refactor it later when you need it. Maintainable is in general achieved by readable code and a good test base. If you are not afraid of breaking something, you can do everything with your code easily. Will employing some specific Design Pattern here would have mad more sense? Actually I would say, you applied the Strategy pattern here already. This is more or less the default use case, having an interface and change the path finding algorithm. (Maybe building the graph should be splitt from traversing) 

If this don't need to be , just inline the one usage. Your variables is telling everything in that place. Unused code and are not used. If there is no code missing in your question, just delete it. is redundant and can be inlined. (to be continued after you completed your code) 

First of all don't use global variables or constants. Use comments to explain your intention not your code. Put every class in a separate file. Afterwards you have to decide if you want to use your Admin/User as a representation of a concrete admin/user (keeping the data of one user) or as a kind of manager providing access to all users and just use simple arrays as your concrete user. Mixing the public properties with the (actually static) CRUD-method is a bad design and will lead to trouble. As soon as you have done your first step I would recommend to replace your database abstraction by PDO or any other major library and don't reinvent the wheel. 

In later case: Is this adding any value to the reader? Just find a suitable variable name, as you did here, and skip the comment. Some of your method are pretty long, maybe you can extract some well name method to improve readability. Also reducing the nesting level that way, might make it easier to maintain the code. 

If you want to return the first item without a brand you have to add the condition to your second if. Otherwise you use the last suitable item. 

Why should an object know about a database (in an OOP sense)? I'm definitely no friend of the Singleton pattern, but a database is in most projects a valid use case. 

For explaining the Singleton pattern the ABC naming is confusing. Just come up with some real name, e.g. Database, Logger etc. Something that might need access to a common config. Instead of the config, you might want to add some mock code to init the database connection or get the logging directory. Please keep in mind that Java classes usually are starting with a capital letter. The static instance variable is usually called only . In which context do you want to explain the pattern. Maybe we find a more suitable example? Check $URL$ for a nice explanation and some examples and drawbacks. Please be aware that a Singleton might seem to help you sometimes in production code, but it definitely makes your life harder in testing your code. See "Dependency Injection" for an alternate approach. 

The big disadvantage of putting the validation to the setter is that you are never able to set invalid values. In most cases this is fine, but in some scenarios a valid user input differs from a more general valid field content. In addition the validation is also executed to internal setter uses where know that they are valid. That said, I recommend setters to be only setters and not more. The validation itself can be placed in a separate method or even in a separate class (depending on the complexity). If you only want to display one error message, throwing an exception within the validation should be fine. If you want to collect multiple error messages, you might want to build a generic validation class: 

The parameter in your method is "useless". I think in your application you will have no benefit from defining the capacity of the StringBuilder, it just reduces the readability of your code. In case you ever need an other millisecond, come back to this place. Nevertheless, padding strings can also be done with following common and shorter method: 

I recommend splitting your model (the database operation) from your view (the localization of your message). Depending if you prefer a return code or a exception flow your code could look like: 

If I get your code right you are creating random cards while dealing. I would move this at the beginning to make your dealing cleaner. I'm no ruby guy, so I have to offer some pseudo code: 

WKS is right, first of all you should split your layout from your logic and your logic from your database query. (see Model-View-Controller-Pattern) Lets start with your model (Model.php): (actually you could split it in a model for each entity/database table) 

It is in general a bad idea to run SQL queries in a loop, so try to create one join for all your queries. Now the simple Controller (index.php) 

Now you can iterate over all lines and every time e.id is changing you know that you have to display a new group. Are there really multiple users per Votes and Views pair? I guess Votes and Views are counting columns so your model is kind of strange. Maybe you can find better names, so it is easier to get an idea what you want to do. PHP: 

So in PHP you now only need to build the IN-clause. Split the phone number in substrings of suitable length (I guess 3-6 digits for Germany). Without any validation the snipped could look like: 

You can skip the same optimization in your method. In addition to that in Java you usually don't pass arrays around the system and modify them. If we make the the method private and keep the issue local, I think we can live with this for the moment. (List as parameter and new list as return values would be more common) 

First of all, better names than columnX would be nice. I guess the indentation is a copying-issue, otherwise this would be the next optimization. Furthermore I have the feeling that mixing the && and the || in your condition without parenthesis is not what you want to do? 

As stated in the comment, you need to think about your "error handling", if you want to stay with these debug flags. And as a drawback of PHP inheritance in this case, it is required to rename to something else like , because you can't override the original method. I nearly missed one last thing. In OOP you always need to be aware of the visibility of your methods and field. Please check my usage of and . 

Comments Inline commend are usually no JavaDoc comment ( vs ). Please check your comments, if they add any new information, that is not covered by the method or variables names, e.g: 

This is a really awesome pattern for building complex object in larger system and in tests. You could even reuse the builder and call create twice. Or change only one property and call create again. 

tl;dr . No seriously, your code is really hard to read. I'm not sure if you added some comments only for this question or if it is the a exact copy of your file, but it is to much. Every time you have the feeling that you need a comment do explain your code, think about extracting a variable or a method with a suitable name. Write a method , , ,, , etc . All this will help you and any other reader of your code to get a first overview of your code without digging into the details how e.g. you mapping is implemented. Anybody who is interested in the details can easily look in the method anyway. The main benefit, beside a more obvious structure, is the easier testability, as you can test every method at it's own. 

I think there is nothing else you can do here. All other ifs are totally different. Maybe you could extract method or variables do communicate the meaning of every branch, but beside that I thing we are done. 

I think in TDD the interface itself is not the first step (Except it is somehow already given). You create your test and step by step a concrete class. While going through this process you might refactor or optimize you API. Extracting the interface class do make your implementation interchangeable is the last step. Thinking about the interface in first instance might unnecessarily restrict you. 

Please check your naming conventions. I'm not sure from which language you are coming, but Java is usually using no under_scores but camelCase for variable and method names. Especially if you pick one notation don't switch in between of a single program ( vs. ). It is also a common pattern to start the method names with the verb. On the other hand, classes are usually nouns (?) and are never written in all-caps (). All-caps words are usually constants (). Although naming seems to be only a minor issue, it requires a lot of effort for the reader to understand your code, if she is used to a common pattern for a specific language. RoToRa mentioned already not to run any premature optimization. Usually any optimization will lead to worse readability. E.g. understanding requires reading the whole method (left=1|0|-1?). The meaning of is obvious. 

From an OOP-point of view, as an slightly different approach, you might want to extend PDO instead of a delegation (with PHP 7.1 strict typing): 

Assuming your array is already sorted, you can just overwrite the values every time. Skip the inner if. 

So we get: without loosing any knowledge. And the exception is not used, so we can skip it. In my opinion can be omitted in the class names, this is either part of the package name or the application name itself. Also don't need to be coupled to the that tightly. The Column array initialization in the Grid is strange. Common pattern would look like: 

it is far easier to test your code (automatically and manually). You don't need to type stuff anymore and there is nothing on stdout that needs to be read. As a first step you can simply move the content of your outer loop into such an method (plus some minor adaptations and appending to a StringBuilder instead of printing to system out). Afterwards it's time to write some unit tests, or at least two for your samples. 

In case you want to add more fields, you shouldn't use the but a separate method. See (Effective Java, Second Edition, Item 10) for more details. 

is in general a really weak test. Maybe you want to test anything in the session or the history etc. Testing is usually also not enough. What if your return code is buggy. You need to test the operation itself and not only the return code. 

As you see, there is no much "logic" left. I get rid of a bunch of ifs and could split the bigger problem in two smaller own. Now you could write tests independently. 

Your return types and the types left of the assignments should be as general as possible, so you only need to change the instantiation if you want to change the implementation to an other type of list. 

(Maybe the should be a ?) As I said in the comments, get rid of all comments without new informations for the reader. You could also move your switch into a separate method with a nice name to reduce the length of your main method. And the crop and resize_only part are also suitable for a private method. (This methods would also be very easily to test in PHPUnit; just a bunch of numbers and no real images required.) 

All calls have different parameters and different bodies. If there is no fancy JQuery trick, there is nothing you can do about this, and even if such a trick exist I have the feeling that this will result in a switch for every call. 

As you see, a lot of magic. If you write your own ORM let me recommend to automatically generate some abstract classes between your entity classes and your model and add all the getter to this abstract class. The getter itself can then call and you get rid of all this name guessing. Of course it would be easier to use an existing ORM. 

Just some general thoughts. Are your field by purpose? Do prevent creating a do tight coupling of your components while development you should start in general with and only increase the visibility where necessary. On the other hand if you "never" plan to add additional operations to your data object, make them public and skip the useless getters. Are the comments only for us now, or are this your real comments? 

I.e. will contain a array with all your answers to question 1. The sorting of the answers can be moved to SQL query, also if you don't need all fields you can restrict this in the SQL and don't need to take care of this in your PHP. 

Prevent SQL Injection You are passing user input directly to the query you send to the database. Wikipedia will elaborate some examples in detail and shows how queries can be manipulated. The easies way for you to prevent this, is using PHP Data Objects and Prepared Statements. I think there is no need for going in detail here if you don't have a specific question, there are many good tutorials out there. The important part is, that the user is no longer able to change the query you send to the database. Minor issues 

It really took me a moment to figure out what the methods did. I hope the new method name will help others (or my future self) to be faster at this point. Let's get back to your main method. You have two loops, one to the mid and the second for the remaining lines. You already notice that the lower lines are mirrored from the upper lines, so you can also merge the s and omit your At this point my remaining method looks like (Disclaimer: I like oneliner, many don't): 

Maybe I find the time later this day to compare the performance, but I guess 'efficient' in your question was related to the code not the execution time? Letharion did the work for me :) 

Of course you can use some fancy stuff here to deal card in the 3-2-4-2 order for skat. You could use some array_pop/shift to get the first/last card of you shuffled deck and assign it to a player. 

I know that you receive double, but you shouldn't get your system "infected" by double prices. This is just wrong. Convert them once you received them. Instead of comparing your s to find the , you could also just work with the and replace the zeros. This will also work with your double values and is a valid approach if you just want to render the number. 

Now you have a separate file for the representation of your data and one for the calculation. The first file is now only a simple template without any business logic. In the words of the Model-View-Controller paradigm this is the view. The model and the controller are now combined in your content.php. In a second step you would split the content.php into two files. One is getting the data from your database (model) and the other is connecting the data from the database with then view (controller). Unfortunately I have no time to continue this at this point. But after you have splitted this file we should concentrate on some conceptual details. But this will be far easier than now, if the responsibility are divided into this three files.