It is clear picture to your manager who thinks the job can be done in two hours what is actually involved. You have a clear picture of your action plan to take. The manager can also do a "risk assessment" and drop sections if they need it faster. 

Before any review, you need to document everything good/bad that has happened to you while working (as it happens). It should be 1 liner, and if a negative point detail how you addressed that point and who you discussed with. If there is any problem with your work then your superior should address it at that point in time. If not then it certainly isn't something that should be brought up in your review, and something you can push back on (eg. "OK, this is the first I am hearing of this, why wasn't it addressed when the situation happened?") Likewise anecdotal comments should be challenged (eg. "I heard you were not a team player" vs better comment "During incident X you did Y which was perceived as not being a team player"). One other point. Even if something is told in a positive light, it is very easy to have your pride stung. Often people will have a higher expectation of themselves then they realise. So always take valid criticisms as a learning experience, not as a personal attack. From what you wrote, it appears there is no surprises and your expectation met your managers. Lastly, "Searching Google for solution". Depending on your job this can be a sackable offence depending on how it is used. For example, if you were to put 3rd party code into a product you ship, you risk contaminating the whole project and losing man hours/money. Also possible litigation for your employer. This is probably why you got such a negative response for this. 

The keyword here is Team. If you adopt the posture of "This is how we are going to do it, end of story" you are going to get push back. On the other hand it is better to have clear objectives of what you want to achieve and allow the team to build the road to that objective. So if you believe process X is flawed, then point the flaws in the process and issues it causes. It helps to have some metrics to back up your points. After that discuss with the team on how best to solve this. At this point you can suggest how you want it to be approached, but don't force the issue. If someone shoots it down, then ask them to suggest a better option. Suggest running this option for a fixed time to determine the metrics on it, then if there is no major improvement over the current system you will change it again. If they are unable to offer a solution, then tell them what you suggested is the way to go, and you all will follow up in a few weeks to see if the approach can be refined or changed. The point to get across that the team is looking for solutions to issues you have seen in the current processes. In the cases where you have opinion based changes (eg. Source code formatting is always fun), get them all to agree on a fixed format and if they can't you set it then you do. If someone refuses, then you tell them they are free to write in the coding style they want, but they will not be allowed to check in until that code meets the standard laid out for the project. Any check ins breaking this convention will not be pushed into the build. 

Most CVs are scanned and fed into a system that picks up on the keywords. So I would recommend to trigger as many references keywords related to the field you want to be in. From a reading perspective I would recommend to put the related skills against the block of work experience area (again just the keywords). This allows the person reading it to get a clearer picture of your experience relative to the current time. For example: 

... and so on. Don't be stingy on those times. People have an habit of underestimating. Also factor in build times, backup times. Now this doesn't mean you are going to code like crazy for 6 days straight. Average over all. It should also detail what feature is waiting on what other feature, as well as what features can be dropped and still maintain a valid product. You also need to set the realistic expectation of working hours. Let's say you work 40 hours a week. That is 120 hours for 3 weeks (168 if you work weekends 8 hour days). You have costed 200 hours (40 * 5). This means you will be doing almost double the number of hours a week to keep to the schedule. You then leave it on your project manager to drop features or get resources to make it within the available time. If the project manager ignores you, you can voice your concerns to a more senior manager. You run the risk of burnout in your team, due to lack of control over what you are working on along with the hours expected to work. This can have a detrimental impact on the project. 

OK as crazy as it sounds, if your employees are complaining about money it means that there are other factors in their work that is not being met (assuming they are being paid enough for the job). If they were to give you a pay increase, it is not going to solve the underlying problems for you. I recommend reading "Drive" written by Dan Pink. Here is brief presentation on it. $URL$ So I would start with what is causing the friction that you would want more money. This sounds like long hours, less recognition of your work vs their bonuses. Once you have a list of what is the problem factors, are there solutions that will improve morale in changing those processes? Are these solutions you can bring to them to make the work style easier? 

In this situation the best solution is to have your project open source as well. This allows the interviewer to review your code at their leisure, and in the unlikely event they think you stole the code, they can compare against the other project. They would not hint at you stealing code (unless it was plainly obvious), but they may ask you why you implemented a certain feature and how it may improve on the existing project. If it doesn't, you can say you built it for yourself to fix minor annoyances, and/or to improve your coding skills. If you don't want to go the open source route, they are still likely to ask you those questions. They would not accuse you of stealing code, because they would have no proof and open themselves to litigation in the interview. 

Unless they are direct reports, then you don't have the right to ask this, and it could be taken as a negative response. They may also have agreed those start/stop times with the manager, which you would not be made privvy to (eg. Pick up kids, hospital appointments). If it is impacting the job, then mention it to the manager. If your reason is actually to ask a question, then use email or some IM that tracks when you asked/answered. That way if the question/response delay impacted the project you have a log related to that later on. 

One other thing from what you mentioned. Don't just go to ones you think are hiring. Again the majority will not be hiring on the spot. But will be looking for a list of people to check on later. 

You will find that if you give people the answer they will always come back to you. Also telling them LMGTFY is insulting even if it is the obvious answer. It straight out says that they are not worth your time. It also undermines your credibility doing this, as they will think you don't know the answer. The proper way to deal with this is the GROW model. It is used as a coaching method. The GROW stands for. 

That said, there is more to a persons role then their salary. So even if s/he is at the role you are moving into you also need to factor in their experience so far, other areas the work in you won't be doing, etc. So it is rare that salaries will equate 1:1. 

Ignore the technologies excuse. There is more to a SW engineer then just learning technologies, especially if you want to grow your career. If that is so important you can study this stuff outside of working hours. So first try to look at this less like "Abandon ship" and more how can you make the current project stable so that you can move. You have some clues to his already. 

Offer at least two solutions (which are technically the same) and let them pick which one. As long as they feel they made the choice it goes easier. It is a variation of "Morton's fork" and is used often in negotiation to give the other party a feeling that they are in control. It is also documented in the book "Get Along with Anyone, Anytime, Anywhere". 

The details section can go into more in relation to your job. This helps because it gives a clearer picture to the interviewer to your skills. For example if you only put "10 years Java experience" and failed to mention you hadn't touched it in the last 3 years then you are going to get a negative response from the interviewer. 

No item should be over 3-5 days (depending on length of project). For 17 days, I'd go with 3 day max limit for item. Anything over 3 days has to be broken down further. The Gantt chart should show what feature is dependent on another (ie. can't start before another is done, or can't be removed without removing other parts). Don't under estimate. Your boss will hold you to those numbers. You can pad some of the tasks, but don't over pad the numbers. Your boss will not believe the whole thing otherwise. If your manager is experienced, then they may pad the numbers internally (as few people believe a developer can correctly estimate how long a task takes. ;) You should detail stuff you may not think relevant. For example, machine setup, training, etc. Do not factor weekends/out of hours in your chart. 

The reason for this is to show you are not detailing exact information which could be used by you. 2. Go to the person who owns the company and detail out that you have tried to ask them to be quiet. Detail all the incidents in the last two weeks you have written above. If you have external contractors/vendors in your area you should also mention that (to show that you have no control over who may hear this information). 

Talk to him in private. Tell him that if he has an issue with your work, it is to be discussed in private. Not at your cubicle, and certainly not while people are around. It's totally unprofessional, and also undermines you in work. Document everything. Have a clean plan and workload. If you feel the goals are unattainable you need to have realistic details of what can be done and when. 

AVOID THE FOLLOWING If you think "I can do it in 2 days, I will cost around that", don't do this. Likewise if the manager says "I need this in two hours write the costing document to that", do not change the times involved, only drop features and detail the risks in doing this. 

With that in mind, take each area and detail what are the genuine flaws that need to be addressed (not just stuff that annoys you). Once you have this you can have two levels to this. 

In large companies different departments are given different budgets and objectives. Your project manager has budgeted money to pay your salary for your time. The other team has not. It is fine to help other teams, because in the grand scheme of things you all work for the same company. However you want to avoid a situation where your current project is impacted. Even if you are not the cause of the impact, it could impact your career. The worst thing you could possibly do to a manager is blind side them. They should be aware of what is going on in their team. Imagine your manager gets invited to a meeting where you get mentioned as being instrumental in a project he is unaware of. It's good for your career. Someone who is helpful and open about what they are doing in your team, means if/when you move or are promoted, the more likely you are to help them later on. It can help your manager build goodwill between teams, allow better sharing of resources. 

When you are asking them to keep the noise down, you should be talking to the person who is in charge. If not I suggest the following. 1. Over the course of 1-2 weeks make a note of everything you can hear that would be classed as confidential or a data protection breach (if your country has this). Do not use exact details. Instead be vague enough that they get the context. For example: 

I recommend picking up material by "Carol Kinsey Goman". She has done a lot research and books on spotting lying in the work. The short answer is you establish base lines by asking the interviewee easy questions they would know the answer to (true or false). When asking these questions you look at the interviewees body language. After this you have a baseline. Here is a video of part of her training which goes over a little bit on what you are asking. $URL$ 

First check your contract. What does it explicitly say about working hours and how long you are expected to work for. Does it say you have to work late all the time? Or just certain times? They can only hold you to the hours you agreed to in the contract. If it is not mentioned, then that needs to be discussed with them. Remember though, that any agreement needs to go into a contract, and make sure that the deadline is not changed as part of that update to the contract. Apart from that you need to check your countries laws as to how long you can actually work. Some countries have strict laws on how much overtime you can do within a set time, even if you signed a contract otherwise. 

As mentioned by others, the answer will vary depending on the country and state you live in. You need to look that up. Moonlighting laws aside, some things to watch out for is: Q: Does your project IP overlap with the companies? A: You risk contaminating your companies product, and invalidating any IP/patents they are working on. Q: Does your project compete with your companies? A: The company can have a case to claim ownership/damages. I'd also recommend reading this answer. $URL$