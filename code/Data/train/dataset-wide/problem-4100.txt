TL;DR I inherited a project. Long story short, the code I am tasked to maintain is bad. So bad, in fact, the product is not only incomplete but non-functional and has been for years. How do I communicate to management, in a way that isn’t embarrassing to them, in a way that doesn’t make me look lazy or stupid, that a valuable product is in a dire state? 

I should add that when I first started working on it, it didn't even compile. And when I got it to compile, it failed at runtime. It’s a nightmare. The problem is, the management has received assurance from whom they inherited it, and from previous “gung-ho” developers, that it “works,” so have invested significantly into it... And now the buck is passed to me. And they want it in production in about 2 months. When I suggest that previous developers may not have been entirely honest or understood the product entirely, management sends mixed signals about “just get it done,” and “why isn’t it done yet” ... and “we’re not really sure it ever worked” to “it was working when you received it,” and “we’ve never seen it work” to “it’s already in production.” [EDIT: pasted most of the next paragraph into the TL;DR section.] Management also suggested that perhaps it’s so complex that I can’t understand it, and posited the mistakes are by design; that the original developer is so meta, that what looks like mistakes are actually strokes of genius. Granted, I’m no genius, and maybe that is the case: to which I offer my previous observations about the very fundamental issues I found. Perhaps there’s politics at play above my level. 

Hand written thank you notes will get you bonus points. Don't go too cutesy. Be professional and mention specifics from the interview. Address it to the person you interviewed with, not HR. 

Why argue with this situation, unless the time punch system is cumbersome or unreliable. I'm salaried and have to fill in a time sheet every week. For HR purposes it is sometimes necessary to have all employees track hours. Also, some types of exempt employees are required to work 40 hours per defined work week but aren't given overtime for days they work +8 hours. Even high level executives are required to submit time sheets or record hours within my organization. Just clock in and out and stop complaining. Honestly, it makes you less desirable as an employee to protest against such a simple request. 

This reminds me of when I worked for a union store. The union beat us over the head with "buy union made only" rhetoric. Frankly, it was no ones business what I bought, where I bought it from or anything else about my private finances. I would typically respond with "my money, my choice" in a super sweet voice or some other short snip. But, I'm a very direct person and don't worry about what others think of me in general. You may not need to take my direct attitude. I might suggest laughing it off and say that the store was out of products made by your employer. Or, ignore the comments altogether, as it is your business what you purchase, not theirs. If you are further ostracized or poked at by the people who made those comments you may be in for a rough time for a bit. Next time either buy the items and take them straight home, leave them in your vehicle or wait until you're shopping on your days off. 

Details Most of the time, I wouldn’t be nervous communicating this to management. Unfortunately a long line of piece-meal maintenance by people, some of whom had little development experience, who only “touched” the code long enough to add a patch here or there, then move on, has painted a picture to management over the years that the project is just one step away being production ready. That is woefully not the case. A short list of issues in the genius code I have come across in the ~1.5Gb code base are... 

Clarification: this question vs technical debt This question has to do with me challenging long-standing beliefs about a product without committing career suicide. Rather than strictly be about dealing with technical debt, there is this: management suggests that perhaps the code is so complex that I can’t understand it, and posited the mistakes are by design; that the original developer is so meta, that what looks like mistakes are actually strokes of genius. Perhaps another reason this isn't quite about technical debt is that the difference between 'genius' code and technical debt is that management communicates that I'm not supposed to alter 'genius' code, and that 'genius' code isn't technical debt: it's the secret black magic. I wish management would think of it as technical debt. Instead they don't. Management isn't concerned with the time, cost, or money directly –– although that is some concern. 

I'm in school right now, and in a couple of years, I'm going to look for work as a software/systems engineer. The thing is that right now, I'm 32 years old. With age being a potential issue, where is age less of an issue? What type of company/culture should be absolutely avoided? Any warning signs? Some backstory, if you have the time. (TL;DR, I'll be an "old" man in a new job, and it could suck.) I've got a couple more years to go before I graduate with a BS (Yes, I know degrees aren't everything, but I have none at all, except for an Arabic AA.) in CompSci, as well as several AASs (in Computer Programming, Web Development, and Comp Sci) and several certs (C++, Java, OracleSQL). Right now, I'm just not comfortable putting myself on the market because I don't feel yet I'm even an "average good" programmer, though I'm putting tremendous effort toward that. On the bright side, I didn't start out software/tech ignorant. I was in the Marines for 8 years, finishing the last three in Special Operations Intelligence (Signals), and did contracting for a year in a company that specialized in networking centric geolocation. Got laid off and went back to school. Then was hired as a contract worker for Google for over a year and a half. I've had plenty of computer science exposure and OJT in programming (also UAS systems, remote sensing, GIS, database design/implementation, and SDRs), but have only really dedicated myself academically to Computer Science/Software Engineering in the last year, after realizing this really is what makes me happy, and where I seem to have the most suitable talents. Thing is, I'm going to be a 34-35 year old entry level employee, working with 22-24 year olds starting fresh as well, but they are all shiny and new(and may actually have more experience in tech industry), which may make me look bad. People my age will have over 10 years experience and will not be my peers, likely having senior positions in company. I feel it could be a situation where it looks like I'm experienced because of my age, but when I behave like a new guy, which I will be, I'll be treated like an idiot, instead of a new guy. I've got a family to worry about, so this is really stressing me out. 

I'm not a coder, but I'm a sales person (I've heard "no" more times than you ever will) and I'm also a supervisor (I'm tasked with motivating others), so I will give you my advice on general ways to improve your next review and keeping motivated. First, both you and your boss identified an area that needs improvement. So, do your best to improve and learn. Can you take courses? Make a conscious effort to fix just one of the mistakes or errors you do on a consistent basis and soon you will stop making that mistake. Repeat as needed. Second, while time is of the essence it typically takes less time (in any task) to do it correctly the first time than it does to fo back to correct mistakes. Do it right the first time and you may just find that you have more time to complete future tasks. Motivation can, and should, be internal in addition to external factors. What drove you to this line of work? What inspires you to stick with it? Keep those things in mind. As for your self doubt, remember that this company hired you and keeps you for a reason. If you continue to improve yourself, without being asked, they will have little reason to sever the relationship. 

If the employee is in fact an employee and not contracted or otherwise exempt under FEDERAL laws, then they have to pay for any mandatory meetings or trainings. $URL$ Louisiana follows the federal laws and doesn't have laws specific to their own state. If the meeting is voluntary, then the employer is not required to pay. 

You are judging by country which is prima facie prejudicial. However, there is more to it than that. For every objective injustice, there are available remedies. Apparently you have been either unable or unwilling to avail yourself of them. There are also insurances and/or business associations working from either your country or internationally that may cover things going wrong. I once subcontracted for someone who worked for a company more or less run as a sidejob of some high-ranking manager who employed partly relatives. The subcontractor had been burnt a few times since their engineering was pretty bad and they basically were on the outlook for scapegoats all the time and sue-happy. They had secured contracts through personal relations that were quite well-funded and were clearly going to blow them. But they paid really well, very significantly above industry average. The subcontractor's experience with this company was factored into his offers and he basically considered it equitable remedy. It incurred additional work and cost as every offer and delivery had to be watertight and checked and acknowledged in writing without fail. In addition there was the aggravation because of being a target for scapegoating. Basically we were talking about recording systems to be employed in cars, and they worked with their own switching power supplies on Eurocard PCBs right next to the measuring boards. I've seen their systems crash when you switched on the neon lights in the room (cars are not exactly renowned as the cleanest source of electric power) and you could measure significant AC next to the power supply just by forming a single loop with the cables from a multimeter. The subcontractor's job was the recording subsystem. So this was a system bound for failure and fingerpointing but inundated with money temporarily. And a certain scarcity of subcontractors still willing to work there. He crossed his t's and dotted his i's and cashed his cheques and paid his legal insurance and after all that came out ahead as planned, with his systems provably working as specified and, after initial tussles, certified as that. The project, of course, eventually tanked after being several years overdue and the company probably went into liquidation at some point of time and its company head reverted to his main job. The answer for you to take away here is that you can take on jobs you are sure to fail if you make sure that your payout is ensured at all steps, by advance payments at contractually ensured points of the project and taking out all proper insurances necessary to cover against a malintentioned partner. If you factor everything in into your offer, it's not a cause for worry when it gets accepted, and it's not a cause for worry when it gets rejected. Basically, you have conditions to adhere to when doing business in that country that have been shaped by your previous experience there. If stuff works better than expected repeatedly, you can factor those experiences into future offers conservatively, more likely than not based on who you are doing business with. It's not everybody's idea of fun to work under circumstances felt to be hostile. If you don't find yourself able to put together a working plan where you are secure against the kind of catastrophes you did encounter so far, I do not consider it amiss to tell your prospective business partner that previous experience with that country has shown you that your business models and procedures are a bad match to doing business there and that you currently see no way but to decline. 

My work used to be the same. We had a toxic director and gossip, banding together, and the like were some of the few ways we survived her idiocity. It was also one of the ways we caught her lies, which lead to her ultimate downfall. Since her departure things have settled down, though we still have a few pot stirrers in our mix. I've taken it upon myself to give gentle nudges to more positive chatter when the rants and gossiping begin. Instead of "yeah, he was completely out of line and a real jerk for saying that" (even if I agree) I remind the person trying to vilify another that we are all human and can only improve if we're told we made a mistake. We all have disagreements and misunderstandings. How we take action on the frustrations we feel towards others involved really make a difference in how our coworkers and managers see us. I had to mediate between my boss and my coworker (who is now my employee). They had a few disagreements where each had a completely different take on what happened. One thought they deserved an apology because they were having family issues and the other person should have taken that into consideration before saying what they said. (I know, vague, but roll with me a little on this) Instead of saying this directly, they went to every member on our team and complained about the other person. The other person thought there wasn't an issue at all and was shocked to find out how the other person felt about the situation. They were confused why the first person didn't talk to them. I reminded both that we have other things going on in our lives and that they were both reasonable people who shouldn't be afraid to talk to each other. It took a few days but they finally talked and sorted thing out. If you want a better work environment, help create it. Redirect to the positive when a coworker pulls out a dagger. Remind yourself that it will take time and it will be worth it.