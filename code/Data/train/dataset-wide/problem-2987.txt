Anonymous tuples With C# 7 you could use anonymous tuples for the trim arguments where the first extension searches for in any last row/column 

but this is still casting the result with so we're back at the beginning... this method is unnecessary. 

App The has a constructor but you don't use it in the event handler. Do those values should really be mutable? If not then let the constructor take all the required parameters. 

You first get something from a database to use this result to do something else with the database. This looks like it should be a join in a store procedure not not a loop. 

Reactive programming is fun but sometimes it can be a real mind-fuck. Improving my and wasn't easy but this is what I've got now. I'm still trying to understand what I'm doing, especially the cancellation so I'm not claiming it's perfect. However, I hope it's at least a little bit better then the last version. 

Note that in this implementation the only way to stop listening the port is to get an exception on . You might want to introduce the to have a control when to stop this process. With this approach registering and listening for all ports will be as simple as: 

method (if applied to ) is O(N) operation, and it's a lazy operation so it will do the filtering while consumer reads the result. 

And the usage will look like this (note that now all exceptions from third-party library will be passed through as if the code ran on the same thread) 

I don't like custom ORMs and would suggest you to use Entity Framework or NHibernate as a data layer, but as an exercise here are the fixes I would apply (.NET 4.5): 

Note that method throws exception if lookup won't find the class matching your criteria. If you prefer to return in this case - use instead. Also, if this kind of code will be called quite often I would suggest to create a that caches the mapping from previously looked up keywords (strings) to the type found. But in general your solution doesn't look correct from architectural point of view: you're trying to match a certain string to full name of the class (and that string most likely is not equal to full name, otherwise you could just call method). It may cause side effects if someone will add a class containing the same substring: for example your intention is to use string to lookup class, and it works correctly now. But after a year of intense development someone may decide to introduce some new fancy task called ... and bang, your code is broken, since new class may suddenly pop out instead of expected one. Update Since you're saving a full name of the type you don't need to search all assembly types for it, just do 

You can improve the method by changing the order of operations. It is requried that the file doesn't have the extension so you should check this first before opening any streams. This will allow you to remove some indentation and put the s next to eeach other and make your code more readable. By using the you can make it still shorter. 

EventHandler Delegate (Emphasis mine) For some strange reason the delegate does not enforce that and has no constraint. But if you want to stick to the convention then you should create new types like: 

I'm not sure whether is really ment to be an interface but if so, then you should probably ensure that this is true . It would save a lot of headaches later. 

IMO you should also check the repository to see whether the API correctly added the new user to it. I don't know what interfaces the might implement but for this 

You can filter all the data needed right from repository, and then iterate over collection containing required elements only: 

There are a number of naming issues here so it's quite hard to understand the code, I'll start from those: 

Even if your solution is (almost) correct, the actual problem is in a wrong formulation of the problem. The main issue in your question is the assumption of a certain order of records within a table. In reality SQL Server cannot guarantee original order of records when you do a statement without clause, even if you have a clustered index defined. In order to properly map 2 tables you must have a criteria for matching records. You provided a solution that won't generate consistent results. Imagine that you need to add another student/subject () and a mark for that. If you add one record to table and one record to table your data will be screwed up since record will be matched against 3rd record (). In order to fix the issue you must add a field or fields that allow unique reference of records, that is you must add both StudentId and SubjectId to table. Alternatively you can create a surrogate key in the table and use it as a reference in table. UPDATE. The main difference between original question and example in Edit section is that records can be ordered by unique key (primary key) in latter case, while in original question didn't guarantee specific order and produced inconsistent results. Your updated example is using mapping properly, according to (updated) requirements, and will produce consistent results as long as and are unique in corresponding tables 

Here you specify the scale and convert the size. It's not very intuitive how to use it with two different behaviours. How about a factory method instead? 

Possibilities I've created a simple renderer but you could add an abstraction layer to it and use it via DI to implement the method of the . You could then write various renderers that render simple strings or html or xml or whatever you want. As long as you keep each functionality in a separate class you can easily extend it and make adjustments to any of them without affecting any other working parts. 

I find the should be a . This would allow you to get rid of all those ugly checks. Then, I would create a new class and put two functions there that have wider usage then only for a fraction: 

Generally the most flexible solution (as I see it) would be to implement a repository and unit-of-work pattern (similar to in NHibernate or in Entity Framework). Basically it's better not to hide communication with 3rd-party but rather expose it in such a way that you have maximum control and flexibility. Primitive implementation may look like: 

Your code is correct, but can be simplified. method usually gets an expression rather than a in-place function that is immediately evaluated. Here is how I would write this test: 

The code overally looks good except that Ayende suggests (and I completely agree with him) not to wrap RavenDB sessions into repositories. I would just create an extension method to add these filters to 

There are a number of articles describing why a is quite a bad idea when defined on top of ORM framework. Main reasons are leaked abstractions and abstraction on top of abstraction. And your example shows why - any optimization requires the knowledge of underlying implementation (Entity Framework). Running this process in multiple threads may help, but will put additional load on the database server and thus is not scalable. Note that Entity Framework's is not thread-safe, so you cannot share the in multiple threads unless you spin up a new per request there (which I wouldn't recommend doing). Assuming that you're using Entity Framework 6.0, method returns , you can try asynchronous implementation of the data retrieval: