Yes. Prepared statements are the only reliable way to prevent SQL injection, and you should never write any SQL statements without prepared statements. It is bad style and very insecure. Misc 

This is also mainly a server configuration thing, but you can try to enforce HTTPS via PHP code. Vulnerabilities Your code is vulnerable to SQL injection via the variable which is user supplied () and then put into the query. Basically what you have is this: 

You could now use this student class in your controller to perform operations, get info, change info, etc. You can also use it in your views. This way, you decouple your controller and view. The student model now defines how a student looks and what they can do. You might now also want to add a student DAO, which retrieves students from the database, updates them, etc. Misc 

And are you sure that (now ) is really needed? I think the other cases cover it. Use early return If you return early, you can reduce nesting: 

If there are other reasons for your approach, you need to make them clear. But this is definitely not a good replacement for general-purpose if statements. And if you use this throughout a project, you have dependencies to this custom wrapper everywhere. Removing it later will be a lot of work. You will also need to wrap each return value from libraries and the standard APIs (which will be ugly in itself), or your code will consist of a mixture of standard ifs and your approach, which will not help readability. Readability Your approach is already more difficult to read than the standard approach, and with anything except a simple function-call, your approach would be even less readable: 

This restructuring did break some other parts of your code, but not that many. now doesn't work like this, so change it to: 

Where is your code, is the code I pasted above, and is the code I linked to. The main reason for this is that you are creating a lot of new objects. 

@Vogel612 already provided you with very good feedback, I just have a couple of smaller points in addition to that. 

Error Messages Going by the names, this seems to be an online shop or similar software with actual customers. In that case, error messages should be factual and non-insulting. You cannot know if this was an attacker, or someone who might just have made a mistake. Handling Errors Contrary to your comment, catching an exception, printing the message, and then continuing the script as if nothing happened is not handling an error. If you cannot recover from it, redirect to a custom error page or similar. Style Use correct indentation. This is really important and improves readability of your code a lot. Request Types Be consistent with your request types. Right now, you are checking , but retrieving . So an attacker could post the value and get around your checks (which isn't that bad because you are using prepared statements, but still). Return Early You can reduce if nesting by returning early: 

* the communication itself seems to be happening in a different thread, but not the initial connection. As you say you have performance problems on startup, this might be an issue. 

The important parts are that the method name should not be part of the comment (it will be added automatically when generating a JavaDoc), and that there are annotations for method arguments and return values. You can also add additional annotations. Many of your in-code comments are a bit redundant, for example . Structure 

You don't really have classes (and thus also didn't really take into account future extensions). I would think that the expectation is something like this: Create classes , (for the attribution, maybe also an class), a class containing a collection of , from which you can retrieve items via index, an class with methods for print quote and print attribution. That way, it would be easy to add a GUI for output, to add additional attribution information, add a date for the quote, etc. Misc There isn't really much to your code to review, but a couple of points: 

You should also change the variables so that they comply with Java naming standards (camelCase instead of snake_case). Remove commented out code Remove all commented out code, as it makes the code harder to read. If you think that it might be needed in the future, use version control. Comments You need more comments in your code. At least you would need a JavaDoc for . What does it estimate? What parameters does it except? How does it estimate? Refactoring Without working code, unit tests, and a general description of what the code actually does, it will be really hard for us to refactor this. My general approach would be to identify similar code at a small scope, extract both versions of it to new methods (with appropriate arguments and return values), and then see if I can change the signature and workings of those methods to use the same method for both cases. If it does work (confirm correctness with unit tests), do the same thing for the next biggest scope. During this process, I would also keep an eye out if creating objects might simplify some of the code. 

If your code is based on some tutorial - which I am assuming - you should choose a different one. This one obviously does not follow any best-practices regarding security. You might also want to check out the OWASP top 10, a list of the most common web application security issues, to get a quick overview. Comments You have way too many comments, which don't actually add all that much value. They can in fact draw attention away from comments that are actually important. Comments shouldn't just repeat what the code already told a reader (except function/class level PHPDoc comments, but they are meant as documentation). You can get rid of most of them by simply introducing more functions, which would also make your code more structured, easier to maintain, and test. You can - and should - add PHPDoc style comments to your functions. 

Your approach seems good to me. You can find some alternatives here, but most have downsides (not every server parses files, is self-contained but works differently for different PHP versions, etc). Additionally, you should think about moving everything outside the web-root that should not be accessible directly. You might also want to rethink how you handle the error. Using an imperative in the error message gives the impression that the user can fix the error, which they can't. This might confuse legitimate users that accidentally accessed the script. So instead of , something like would be better. Ideally, you would handle the case of accessing an existing but forbidden PHP file exactly like a non-existing PHP file is handled (for example by showing a custom 404 error page). And lastly, isn't that great of a name, as it's very generic. Something like , , or similar might be better. 

The second one is definitely better. In the first one, it's really hard to see that the is actually inside the . Personally, I would build the string completely in PHP, and then echo it, instead of switching in and out of the HTML context. This will avoid the opening and closing PHP tags being littered around your code: 

Other than this, your code looks good. You use prepared statements, so it's secure, and your style is consistent and easy to read. I would probably write as as it's more readable, but otherwise everything looks good. 

You say that you use prepared statements, but your code doesn't actually reflect that. just executes any query, without binding or escaping anything. You really need to use prepared statements though. Your current function isn't usable in practice and it's pure existence will likely lead to vulnerabilities (other programmers will likely use it as it exists, and it can't be used securely). Apart from that: 

No, this code isn't reusable. Currently, you cannot "execute queries" but execute SELECT queries with exactly one or two parameters. What if you need to add a third id? Or a fourth? Or have a query with no parameters? The easiest way to solve your problem is to just pass your array to : 

Efficiency and are not really needed as they are quite simple methods. If you remove them, you save two function calls on each iteration (which can really add up). Get rid of the list as it impacts performance by quite a bit and is completely unnecessary. Just add directly in the loop: Misc 

Note also the empty on the right side. You should do this for s as well. Unnecessary Variables You have which stores the output strings. But then you also have , which also stores the output strings, and then adds them to the . I would just make the a buffer, and then only add to it. One-time variables are sometimes nice to have, because you can name them and thus make your code more readable. But here for example, it doesn't add anything but an extra line: 

Recursive Functions Recursive functions generally perform worse than iterative approaches. An iterative approach might look like this: 

I don't think that you need and . The names don't really make clear what the distinction is, and I can't imagine that you'd ever want to load a library but not know if it failed or not. Also, instead of printing, I would throw an exception. That way, the calling code can handle the case (what if it's an irrelevant library? Now the user is still annoyed with a meaningless message; but what if it's a highly relevant library? Is a small message really enough?). I would also get rid of the distinction between and . If you follow conventions, they should be the same anyways. If they are not, it might get confusing, especially because it's not just this call, but also how they are stored in , I would also rename to . is not really needed (we can assume that it will only try), and makes it more fitting with . and are also not all that clear; if I didn't read your code, I'd have no idea what is, or what and what a is. and would be clearer (you can also skip the part, as it's clear from context. Finally, I would always check for directory traversal when including with a variable. It shouldn't really be necessary in this situation, but it's just good practice, and doesn't cost that much.