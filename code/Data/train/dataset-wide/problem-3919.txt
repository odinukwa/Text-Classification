I find the PERT estimation useful for software development tasks. Summarising: a = time if you fly through it, no delays, no problems b = time you think it will realistically take given known delays and known problems c = worst possible scenario, everything gets delayed, your other bosses give you extra work, and you find a flaw in your implementation at 80% through your plan Estimated time = (a + 4b + c) / 6 Variability = (c - a) / 6 Say you think a task would take a day in ideal conditions, and normally you'd get there in the next 2 days because of meetings, but there are a few stages that could cause problems and then it would be 9 days. Then your estimate is (1 + 4x2 + 9) / 6 = 3 days, variability is 1.3 days, so you would say "I expect to get it done in 3 days, but it could easily take 4.5 days." This way, they have an idea of when to expect it (for delivery to customers, you want to estimate the time to delivery in calendar days, including the effects of meetings, holidays and so on), and an idea of what a conservative estimate might look like. If there is a big variable, like 'it might break component X, so then I'd have to modify and rebuild that component, which would be an extra week', then flag that up in the response - 'I expect it to be done in 3 days, but it tests the limits of component X, so there could be an additional week there'. This is one of the hardest bits of working in small businesses with multiple competing demands on your time. So grasp it with both hands and don't shy away from giving estimates. The sooner you get a handle on it, the better things will be. If quizzed in person, don't be afraid to say "I can't give you an estimate that would be any use off-hand, let me send you something by the end of the day". Good luck. 

"Flexible work ethics" appears to be a particularly insipid phrase that has been sprouting up in HR/management speak. A Google search shows that it is popping up all over the place in job descriptions. Obviously, the intent of the phrase is not something that is unethical. In my opinion, this is just a case of really bad wordsmithing by some HR/management person. Somehow this has become a meme and now other orgs are using the phrase. 

Of course you should list it as professional experience. You worked full time on it, it has a user-base, and most importantly it is live and operational. The level of profitability is not important and doesn't need to be brought to the forefront, especially since you had no expectation that it would be profitable. The fact that it exists and is self-sustaining suggests that it could become a valuable asset. 10 man-months is a relatively short time anyway. At the very least, you could think of it as a "portfolio" piece and a springboard for useful discussion about business. 

You focus on your own work, and don't burn up valuable energy and good-will by trying to force this person to change. The fact that there are more projects, increasingly tighter deadlines and "tension" with upper management signifies a problem. It appears that the way your organization has decided to deal with the problem in the long term is simply to "work harder". This is a far more serious issue than just one under-performer. You might never know why an otherwise competent worker has decided to mentally check-out, but it could be for lots of reasons. Maybe he knows something that you don't know? Maybe he feels everyone else is on a project death march and doesn't want to be taken advantage of? If you take the advice of going to management with this problem, you have to ask yourselves whether or not you really want the help of someone who is being forced to help you out. In most cases that kind of help is worse than no help at all. 

I am working with a start-up small business, since almost 2 years now. I am their longest and also the highest paid in-house employee which gives me some benefits. I am also the only professional in my specific section, cross-platform application development. They frequently tell me of internal company matters and like to hear my say on them. The work environment is lax and not strict at all. Currently my November salary is due, they have paid the subsequent salaries but are dodgy about it. I have slowly incurred a debt, almost equaling the due salary. Here are some pros and cons; Pros 

I gave an interview in a company and there they claimed that we would give you what you demand with 10% increment every 6 months. I agreed and joined the company as a tech lead. It has been 2 weeks now and I have been given a draft of a would be contract in which I am being paid 25% less with 10% increment per year. The CEO iterated the salary as Base Gross Salary when I inquired about the salary which is clearly hocus pocus so what should I reply with? Update 1 I am in Pakistan, here laws don't matter much. I have signed an offer letter which mentions everything correctly. I did an email to the CEO yesterday mentioning it and haven't heard from him since. The probation period is 3 months so actually its far from. If I do resign, will there be a negative effect on my career or should I just hide this fact in other job interviews? Update 2 Well the CEO agreed to better terms than previously agreed upon after an intense back and forth of emails and many misunderstandings. Well at the end, a face to face meeting was all that was necessary when I gave away a hint that I'll be quitting the same day if he didn't provide a plausible reason for this (Thanks Kilisi). 

Of course, all this takes time and planning. But if your users are counted in the hundreds, it is worthwhile. If you don't believe in the technology adoption cycle theory, the concept of trying out your training on a small group of people FIRST is valuable. I should add that "innovator, early-adopter, majority, laggard" are just convenient names for roles that various people take in this process. They're not labels that apply to the workers personally. Its important to make that subtle distinction if you ever communicate this to the organization. 

(*) Before responding to the first listing, it might be useful to do a little research. You can do this even with the very slim set of clues provided by the anonymous job description. 

Change is a difficult thing for organizations to go through and it is really hard for everyone in the org to change at the same time. The good news is that scenarios like yours have been studied extensively. You'll want to read about the "technology adoption lifecycle" (and related concepts) and how to apply those ideas in a practical setting. This was originally applied to the diffusion of technology for farms, but it applies very well to organizations which are releasing new tools to their workforce. To boil it down into a nutshell, there are three phases to such a roll out: 

YMMV, but I always let unknown numbers leave a message on my cellphone so that I can review and follow-up if it is relevant. However, it is not uncommon for recruiters to make contact by going through the phone tree at your employer. This is an aggressive tactic. They know many people are very selective about answering their cell phones and that people answer their work phones because it is their job. If they can't take "email me and I will get back to you if I'm interested" working with someone like that is a bad idea for a few reasons, not the least of which is that it encourages more "boiler-room" tactics to be used on others in the future. 

I feel your pain, but you need to put some distance between you and your work You work for someone else. It matters to them whether the code they're paying you to build will work, but what should matter to you is whether the time and effort spent is worth the money you are paid. It is not your company, it is not your profit if it works. Your responsibility is to provide the best information you can, and then implement what they decide Management often makes mistakes in deciding what to do. But they are paid to be responsible for those decisions. The best you can do is point out the problems you can foresee, and your misgivings about a particular approach (ideally with reference to decent abstract frameworks like GoF), making sure there is some record in writing that you did so, and then accept whatever decision they do make. Otherwise you risk adding time spent arguing and bad vibes to the situation. If you hide from the project, you are not doing your job They don't pay you to play executioner to their projects, they pay you to press buttons and make the lights blink. If the horse won't go down the road to the asylum, they just shoot that one and get another horse. Don't be that horse. Reframe your activities in terms of what they deliver you Take a minute to write down what you want to get out of your job (and yes, money is one of the things), and what you are currently not getting. Acknowledge where you have opportunities to learn domain knowledge or wisdom from team members, and any niceties of working there. Try to find a path from where you are now to the sunlit uplands you are wishing for; maybe you need more time to learn code architecture skills, so you try to find a way to fit that into your week or your plan. Your current job is just one part of the puzzle, one object in the frame. There are others, there will be other opportunities, there will be other projects. Do the work, even if it will end in the project failing Better that the project fails because of the things you warned of, than that it fails because you stopped trying. Don't sacrifice your private life for it; I would only go those extra miles for inspiring or career-developing projects. Instead, just be a bit more cold and grit your teeth. You're paid to do this, and you are still taking that cheque, so let's get it done with. Spock put his best into a ship filled with emotional humans who made bad decisions, because he was committed to seeing it through Raise your concerns, simply and logically, but if they want to go straight through the asteroid belt, that's on them. Be more Spock. 

If the employer is taking the time to interview you and they know your background, then to some extent they are interested in you and are willing to be flexible with job requirements. It is not a matter of meeting "all" the requirements as much as being the "best choice" out of a pool of candidates. One successful spin-tactic that I've used in the past when confronted with an opportunity whose skill-set requirements didn't fully match my own is to emphasize that in almost any job you find yourself doing new and challenging things that were NEVER mentioned in the description. As important as the "desired" skill set is for any employee, it is JUST AS important that they be to be able to adapt to new problems on the job for which they don't necessarily have the exact skills. In other words, if you can show a track record of adaptability/versatility and support it with actual instances, that might go a long way towards convincing them that you can adapt to the job. 

In other words, it is not enough to simply prove using "data" that the more experienced person can do the work "better". There are other considerations. 

During the interview, it is very important to ask really good, pointed questions. It reflects well on you and if you really care about the quality of your work environment, you will listen carefully to the answers and evaluate them seriously. However, at the end of a long session of interviewing where both parties have had plenty of opportunities to ask and answer questions for literally hours, it is really hard to be authentic when asked "Do you have any questions for me?" If you really did ask all the questions you needed to ask during the discussion, there is nothing more to say other than to go over what the next steps in the process are (if this hasn't already been covered in detail). In other words, it is OK to say "no" if you've already asked all the questions you needed to ask. Forcing out a trite question just because you feel obligated to on the spot is awkward and will leave both parties with a bad feeling. 

Apparently a very understanding and cool minded boss. Say of the employee is valued and if an idea is termed beneficial, time is allowed to nourish it. Package includes accommodation, 3 time meals and any utility consumption. Overtime is paid double the base rate when company is doing good. 

Thinking about leaving makes me very scared as there are very few such offices with such benefits. Also I am also going to do higher studies later this year, to which the company has allowed me to reduce my work time accordingly with same package. Should I give them a warning, like pay me or I'll leave in a month? Finding another job wouldn't be difficult but for them to find another professional such as myself would be difficult. As I haven't ever like resigned nor got fired (the previous employer pulled out due to security concerns), am not very confident but I have persevered too long already. Update 1 I talked with the CEO, he said that as there are holidays in China so all the payments are delayed and when they'll get them, I'll get paid full. He said he can provide me with 1/4th amount by tomorrow, if its urgent... I am in Pakistan, so I am not seeking legal advice as its not possible. Hiring a lawyer and trying for a legal solution will be more expensive than recovering my salaries and will take years! 

At least 2 hour mandatory overtime, if the company is doing badly. Coordination issues in between management. Pessimistic approach towards payment collection due to fear of losing clientele. No HR department, so all concerns should be directly relayed to the CEO or the boss. 

I concur with Ajaxkevi here, but I would add this: In childhood, much of life is about obligations and duties and doing what you should do. In adulthood, however, you will see that plans and circumstances change, and that expectations of behaviour are more about approach (i.e. being clear and curteous to your boss) and less about about actions. You have not signed a binding contract, nor would one likely be even legal in most countries. You can do your best to keep the relationship with the company positive, and it will probably stay that way. It is worth keeping in mind that if you have been a great employee they won't want to sour the relationship either as you might go back and work there one day. They have no legal or even social right to demand you see out your term, since the circumstances that are causing the change are largely out of your control. As a side note, congratulations on creating a business at any age let alone so young. Success in business often requires you to make hard decisions about honouring vague agreements or not, or about honouring one arrangement over another. As long as you treat people fairly and openly, you will have a clear conscience when you need to give people unfortunate news. 

You turn it down You accept, and fail to improve things like you predecessor You accept, and succeed 

Yes, they are different An online coding test is intended to let the recruiters screen out bad applicants or to rank applicants so they can consider the 'best' ones. It is essentially pass/fail, because you're not able to explain what you're doing to the recruiter. An in-person test is much more interactive; you can explain why you are doing something, or ask for a detail you need but don't have, or ask for clarification of the task or question. In person they are hoping to see your approach, your thought process, rather than just whether you can do a puzzle or not. Don't overcomplicate things If you get a question 'replace all the %20 with space', then just use the built-in function. If they want you to code it by hand, they will say so. Anything that you can do in a simple and straightforward fashion that has not been forbidden is fine. You'd be surprised how many people who apply for coding jobs cannot write code at all. Sometimes they're just asking you a very simple question. In person, investigate the problem Online tests have to be specific about the problem they want you to solve, but in person the interviewer can just make vague requests, like 'can you write code that replaces %20 with spaces' without specifying what inputs to expect. It is worth just checking the parameters of the task; will the code need to cope with arbitrarily long strings, alternate encoding choices, empty strings, etc etc. This is a double-edged sword; you might look good for trying to establish such things before you dive in, but they might just say 'yes' to whether you need to cope with X, so don't skewer yourself with it.