Rather than using ViewData I might consider using ViewBag (if on MVC 3 and above) or even wrapping Author within a ViewModel. That what you won't need the cast on the view (if using a viewModel). Otherwise your MultiSelectList code is only one line. Don't see you getting much better than that :) Your viewmodel might look like 

As to your quesion. Is this code useful? In short. Yes, but only if you ever want to do only one thing with it and never want to re-use anything inside. Otherwise no. That's just a few comments off the top of my head. I hope those are a good starting point. 

Honestly if a colleague said that to me then I would immediately say. Great thanks. What do you think I could move out and why. It's great to offer feedback but generic feedback like that for me was never useful and I personally always prefer specific help to follow. Looking at that code it doesn't look like you any logic there to play with, so unless he is meaning the Model -> ViewModel mapping then yes, you could move that to a Mapping layer but I don't consider that a necessity. If you were considering that the code would probably benefit from using a tool such as AutoMapper to achieve this. Using AutoMapper The trick here is you define your mapping rules in the AutoMapper configuration so they can be reused whenever you need to map X -> Y. 

So your is a lie. Rename it to and set it to false (a cleaner, completely different solution will be given below). 

(the same goes for the ColumnDefinitions and any other empty tags) Declare styles that affect all controls of one type without a key: 

You can have both performance and readability using the newly-introduced (.NET 4.0) method (a reference to is required). With the stuct, you gain an additional advantage: your code will work for arbitrarily large numbers (assuming sufficient memory). 

Thanks for submitting your code for review â€” it shows that you care about code quality and you're willing to improve and learn. Note that OOP stands for object-oriented programming and does not have a plural form ;-) Alexandre has given you some good advice and one possible implementation. I'd like to critique your code a bit more thoroughly and offer another, more lightweight possibility. 

(Note of caution: you may want to choose a different name for it since this method already exists in LINQ; technically, this is an overload, which could create problems if a future version of C# adds this signature.) This makes it possible to adapt the LINQ expression: 

This is because you inserted a object into your Vector. Please thoroughly study generics as a better understanding of this important topic would have prevented the error. For now, just remove the cast and test your code. A complete solution is given later in this answer. No, really run your code now. You'll see that there is another problem: Sorting is not in the natural order You are sorting a list of Strings. This means that the sort order will always be alphabetical (1,3,10,12 would be sorted as 1,10,12,3) even though your documentation comments state that the lines are sorted in their natural order. You can't promise to do that without knowing what kind of input they contain. As it currently stands, you should just change your comments. You are appending to the end of the output file The signature of the constructor is: 

If yes then having the viewModel build itself is really limiting it to the knowledge of where and what data to obtain, even if the where of that data is abstracted out view interfaces. There are existing mapping frameworks out there already that may offer assistance if you were worried about the class explosion this might cause? Hope this helps give a different perspective or some more food for thought :) 

On a side note. Have you considered using the XmlSerializer classes? These might be ideal in your situation? That might look something like: 

I'm definitely pretty raw in the Javascript department so any comments or improvements on the code below would be greatly appreciated. 

Rather than based on return types or parameters I think it would be best to base it on the functional grouping of the operations so that those more closely related are all grouped into one contract. Much like you might consider when naming namespaces and putting classes in there. It's hard to know exactly from your example of what these groupings or whether even this is a good approach, however based on your existing contract I might start thinking can I seperate the point related functionality into a seperate . 

Doing this you can ensure your calling classes are completely decoupled from the implementation details of a connection. Otherwise any implementation of IDataContext would have been coupled to a SQLConnection and you lose the benefit of the initial abstraction. 

Finally, we've arrived at the implementation level: We're using the Scanner to gather some valid input. 

This gives a nice overview of what your code does - similar to article headings in a newspaper or chapters in a book. Here's the implementation. Your has been split up into concise methods. Each of them does one thing, so they are easy to understand. 

To fix this, you need to check the length of before accessing and . Failure because of unnecessary cast If the correct number of arguments is supplied, your program will fail with the following output: 

And that's it! Well, almost. You've probably got a pretty good idea what the enum and the helper class have to look like, but I'll show them for the sake of completeness. Helper data structures Some Java experts and professionals will tell you that every field should be protected by getters and setters. I disagree (and Robert C. Martin happens to be of the same opinion): Some classes really have no significant state to protect, so they should be classified as data structures without behaviour and may have public fields. Others will disagree, and using getter-setter methods is fine too. 

Error messages At the beginning of , you throw an with the same message for two completely different reasons. That's not very helpful for debugging. Instead, check them separately: 

In other situations, working with can be a replacement for explicit pixel sizes. Remember that hard-coded sizes are an obstacle to localization (where long words in foreign languages are cropped) and less flexible. 

Also, rename the other getters to and accordingly. (Edit: perhaps can stay, but is not a good function name.) Next let's talk about . You should move the constants that are defined at the top of into the class definition itself. I suggest making a constructor for a that takes in those arguments. This way, you have the ability to make several unique objects. If, for example, you want the user of your library to test the in a custom way, they can build their own objects. Provide that ability to the user: 

This clearly conveys the meaning behind your main function, without the specifics that don't need to be known by the user. Now, if you want to expand in any way, you have a more powerful API to work with. Now to your actual test function. There are several instances of duplicated code, note the three loops that run over the same range. What you should do instead is just loop over the range you need and do all the computation in one step. This would also remove the need for an array for the objects. The last loop is enough: 

Welcome to Code Review! You did a good job so far, but I have some style and logic suggestions for you. Let's talk about the class first. In its current form is a good container but it has two flaws. First, you declare the constructor to accept parameters but are storing them in variables. Either it should be all or should be all , but I am assuming for the rest of this answer that you want . The second flaw is that you calculate the in a separate function and not the constructor. This concept of a cached value is not the flaw, but the way you are using it, is. The only reason you would want to calculate that distance in a different location than in the constructor of is if it was a very expensive operation that might not need to be called. For this simple example, make the function and call it in the constructor as follows: 

I have some code that allows me to enumerate over months in a year. This code is used both in a Web application as well as a standalone exe. Although it doesn't have to be efficient it is used a lot so if there are any improvements that would be great (I haven't done any profiling). It also needs to be thread-safe. 

Alternative - XmlSerializer One alternative I have used in the past to parse Xml into objects is the .NET XmlSerializer. In your case you might do something like: 

I'm not sure of the purpose of the () method. If we are reading the file when we first access the singleton instance why do we need this method at all to be public? could we not ensure it exists in our constructor? When using the singleton pattern I always like refer to Jon Skeet's article on it. 

Note: AssignDBStatusMessage actually became redundant in this approach and TryDataBaseAction is seeming a bit weak now?? 

Typically I worked on the assumption that as much as possible my viewModels were DTO's perhaps with validation attribute capabilities, or I've seen some uses where they use message notification to provide updates to the view. I guess the theory is that the view models themselves could be populated by a variety of methods, or the data used to populate them could come from a variety of places. From what I gather a view model is essentially a method of of providing a set of data that is required by the specially by the caller/view in question. This data may come from a variety of places, and these places may vary. The viewmodel itself doesn't care, it just transports the data to the view that knows what to do with it. Also, in my mind by doing this I think unit tests may be easier to write. There are many ways of skinning the cat of course. My favourite flavor of the month is using a service like class to do any mapping from data model to view model. I've also heard modules such as Auto mapper are excellent modules for doing this mapping for you as well. NOTE: These are just examples of how you might use your Repository and IOW without making them part of your viewmodel. So in my current way of working, I do something like below: 

The point of doing this is that you're putting all the details of the object in the class itself instead of the main program. The function would end up looking something like this: 

You will have to for this functionality. This drastically reduces the number of computations and repetitions in your code. Its important to keep in mind the acronym (Don't Repeat Yourself) and if you see something that happens over and over again, see if you can write it once but get the same computations out of it. It will speed up your code and make it more readable. I hope you found these suggestions helpful. Good job and good luck! 

Now for your algorithm. The Pascal triangle is an inherently recursive structure, and therefore it would not be unreasonable to write a recursive method to calculate its values. This works for small values of and but it will most likely lead to a stack overflow for large values. If you want to stick to a recursive function, the best thing you can do is remove the variables all together and try and get the function into a "tail-recursive form" by which we mean that the function itself is returned as the last statement. Here's what I mean: 

Welcome to Code Review! I would suggest some structural changes to your program, first, before discussing the algorithm. In your main program, you scan for input of the row once before the loop and once inside the loop after . You can rearrange the code in the following way to write the scan only once and to also check for stronger boundary conditions. If the user types any negative number, the program should exit so we need to check against that as well. Also, the names can be and , they will not overload those in the function. Here's my suggestion for : 

Unfortunately, C# doesn't infer the type parameter of the output argument, so you need to specify it manually (in this case, ). 

Read up about sequence unpacking. There's no need to use indices directly, just assign the result of the split operation directly to both variables. 

These assumptions are unreasonable and when I first tried out your code on some text, it immediately threw an exception. Naming 

You'll notice the use of a class called . This is a Value Type. It has no significant behaviour; it just contains data and some static convenience methods to create instances of it, as seen below. Some OOP purists disagree with my use of fields; feel free to make them and add getters if you so desire. 

You need to look through your code with an analytical eye and discover the pattern that you are implementing. I call it default if (null or) empty. So I created an extension method to implement that pattern. 

It's important to study your code carefully and step through it in the debugger to verify that your validation is actually working (it was not). This is a lot easier if you have written readable, clean code. 

EDIT: I understand that you can't change the format (as per your comment), so I've added the code below to allow you to stick with your current file layout. The modification required is tiny: simply skip the first line, and only look for the smallest difference in lines that have more than one number.