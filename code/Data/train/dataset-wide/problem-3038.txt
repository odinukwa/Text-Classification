Server is a part of Message so server initialization is part of message itself. so updated solution: 

b. create an interface named as IView and implement it in your view , pass the instance of IView to data context of the view 

you dont need this whole code in this way , rather create a logger class and put this whole line of code there. Pass only dynamic parameter. Once you are able to cleanup , pattern can be applied easily 

okay first of all, you need to use buffered stream to read data from the file, there is no need to write data once in file as it might hung altogether. so I would suggest that read the file line by line , parse it and then write to file. 

Please separate out your code into at least two classes 1) Fetching data class 2) UI binding stuff class 4)inline SQL vs Stored Procedure Stored Procedure is good as your code lies at one place in db but creating Stored Procedure for one line of SQL is not a good idea. If your logic is going to be complex and big ,Use a Stored procedure other wise inline sql. PS: I have created a gist named SQLHelper class for you to abstract out the sql connection and command things, $URL$ 

I used nsubstitute and fluent assertion instead of Rhino mocks , It will make your test code more readable here is an example. 

3: Evolution Most people know Pokemon can evolve. Many of these evolutions are linear (a Krabby can evolve into only a Kingler). But some have branched evolutions. Eevee, in Generation I, can evolve into Jolteon, Flareon or Vaporeon. So what to do? We could store the three pieces of evolution data three times for each Pokemon, even though Eevee is the only one in Gen I that will use more than one. I consider that to be wasteful. We could store evolution data in a vector. That's better, but there's a clever and simple solution: go backwards. No Pokemon can be evolved to from more than one base form. Let me repeat that: There are no two Pokemon that evolve into the same thing. So we can store our evolution data one per Pokemon and instead of the evolution data saying "This is what you need to do to get to the next stage and this is what the next stage is" it will say "This is how the previous stage got to this form and this is what the previous stage was". So what does the evolution data look like? Well, in Generation I there are three ways a Pokemon can evolve: Level up (at a certain level), Trade and Stone (with a certain stone). So we have method, data and form. This is what it may look like in code: 

There are also no correlations between types and integral values, so the order in the enum does not matter. In addition, you will want a function somewhere that takes a type and returns a string, being human-readable. 

::EDIT:: In regards to the comment (not same as OPs code), turn the function into an iterator rather than returning a list. This will give you the speed boost of the prior code, and still give you all the places of occurrence: 

I wrote a Player package in Go. It builds correctly, but I would love a review on what I did and did not do "the Go way". I'm new to coding in the language, although I've gotten about halfway through Ivo Balbaert's "The Way To Go". The code consists of a struct and a bunch of setters and getters for the struct. 

For birth year 1989, sYear should be period 6. Now, let's generate a function that will hold the animal-element array above ($assoc) and contain two loops. The outer loop will decrement through the ceiling of the sexagenarian cycle divided by 12, and the inner loop is a foreach() over the animal-element array. This method is accurate all the way back to 4AD. 

After , it restarts again with . So let's put these into an associative array, with the associated element: 

If you are creating a database wrapper, why not make a lib out of the wrapper and stick it into a directory that other modules/classes can import? So, your class would be in a directory structure like this: 

Use PDO, not mysql_* as they are deprecated and dangerous. Break up your code into functions, this makes it easier to call and test. Throw and catch exceptions. You can omit the ending ?> 

so basically it is your choice : with optional params you cannot enforce user to input the value, so user can leave giving any input and complier will not complain. 

You have multiple options a. Use an event Aggregator where publish the message from the viewmodel and subscribe from view. see prism documentation for event aggregators:here is sample code 

once this is done you can further refactor your if else clause in a strategy pattern , so you will need a factory which will return class will handle the Archive rule or mirror rule inside a different class and your FileActionService will contain only processing logic 

Bind method should be used only when if your element is not loaded into DOM on pageload. So you could attach events to it using bind after wards. also if your using jquery >= 1.7 use 'On' method to achive it. but as per your js fiddle you don't need it at all. second you could declare a variable to store the jquery object of follow. Make sure about the variable scope though. 

Have you considered using views:- -views gives you an explicit way to reduce the complexity of code. so your whole line of code will drop to only few lines. you can replace each subquery with the same view name (or named common table expression as Phrancis metioned) then the optimizer knows it's the same thing and can either cache the result or restructure the execution path so much better than inner query 

After that, I changed how you output the block of text from a bunch of print statements, to 1 multiline print statement: 

Why not go with a template like Twig or Blade which would make the syntax a lot cleaner, while retaining most of all the controls. Also, remember that the view is for showing data, try to maintain as much logic OUT of the view as possible. Here's an untested version of your code with Blade: 

I just put this together, so I haven't tested it or anything, there might be bugs and someone else PLEASE come along and improve upon it, but I think this might be a good starting point to answering this question: OOP version of OP's code: 

My little attempt basically takes items that are repeated and puts them into their own separate conf files and just include them into the main conf files. On my servers, I structure them as such: 

Another way to do it, if the generator consistently returns small sets of data, is to just use . This is especially true if, like aforementioned, the generator returns small sets of data and that data is not dependent on an action (ie, data is static) and that data is not kept in memory for a long time (such as in a child that is killed (and its memory freed) once its served its purpose). The way to do so, is: 

After that, we continue with an if/else block which calls the function according to the user input. Our i/v/r/w should already be defined in the block above. One major change here is that we are no longer printing directly from here. Rather we are setting the output in an variable, which we later use to print. 

So you wanna be a master of Pokemon? Do you have the skills to make a Pokedex? The Pokedex is a piece of complicated machinery. As a result, this code review will be more focused on the conceptual approach; how your data relates to other data and the best ways to represent that data. It will not cover implementation details, such as whether the actual data is derived from text files, databases, is hardcoded, etc. Nor will it cover how best to organize the code in different files. So... here we go... There are quite a lot of things to think about when creating a Pokedex, even one as simple as what you've got going on. So first we'll take a look at design decisions. 1: Types There are (currently) eighteen types that a Pokemon can be. These types are well-defined and discrete; that is to say, there are no gradients between types and the set of available types do not change dynamically. As a result, types are best represented as an enum. 

5: Genders Pokemon have different chances of being male or female. There are also some that are genderless (many legendaries and also Ditto, and some whose design just calls for gender-agnosticism). 6: Pokemon Finally we can get here. Okay. Pokemon can have one or two types (in the dex; in battle, there are cases where they can have three). There are a couple ways to handle this. You could contain a single Type variable and essentially use a bitfield as has been mentioned before, but since a Pokemon can only have up to two types, I think this is overkill. Instead, I would recommend simply having two Type variables. Of course, this presents an extra conundrum. If we have our Pokemon contain two Type variables, what do we do if the Pokemon has only one type? Say it's a Voltorb, which as you know is Electric only. The second Type variable must contain a valid value, so what do we do? We could introduce a nineteenth type in our enum that serves to mark a type as None, but there is another way. The way the games do it (last I checked) internally is set both variables to the same type. So that is the approach we will follow. 

Again however, if some class extends it, they won't be able to access the var. Also, stay away from static. 

It defaults outside_mode to False, so that we can omit it and only give it a number to check if its within the range Checks if n is within a range elegantly Uses the retval var as a flip switch boolean Handles strings and outputs False if its a string Correctly outputs the expected output 

You should think more about how you arrange and style your code. Additionally, you should be aware of DRY methodology and keep from repeating code wherever possible. I made a couple of modifications to your code. Primarily, I cleaned up the arrangement and styling. After that, I added an Ohm class - which places all of your Ohm related functions as methods (again for code cleanliness): 

The only real optimization I see if taking advantage of Pythons english comprehension to unify the return statement: So, would read: 

To expand a bit, we are renaming the function and variables in order to align with PEP8 naming conventions. Here's the code: 

Basically, we're doing the check inline, as well as concatenating the php extension after check. Though this relies on the file not existing - you can replace with any other name. Additionally, we're not echoing on fail - rather we simply inform the user that the requested page does not exist. 

Any ideas on how to improve this to improve performance or reduce calls? Any review, refactoring or just general thoughts would be highly appreciated. What did I do wrong? What would you change? Thanks all! EDIT: adding rudimentary html snipped this acts on