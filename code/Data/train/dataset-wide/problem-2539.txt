You have the right idea, but you didn't quite know how to get there. You don't need that function to operate on the left or right lists. Just bind them to separate variables through a simple expression and you can add the items to each of the lists. 

Something that eluded me until now, use the attribute on the log function for both cases to achieve the same effect. 

I'm not sure what the point is for making a distinction between a size and the default size. But you shouldn't expose the default value as a field, use a property. That will give you much more flexibility should you decide to do other things when getting the value. No need for a backing field, it's a value type and it isn't all that complex. 

Really, the logic for cleaning up the queue should probably be external to the queue class itself. The person who knows how best to deal with the lifetime and ownership of the queue itself is, by definition, outside of the queue class. For example, if I were killing a queue, I wouldn't want all of its consumers to "finish up" emptying the queue; I'd actually want the consumers to stop ASAP, and just discard whatever tasks were left in the queue. I might do that by having the "killer" push a "killer task" onto the queue, and then making sure that any consumer who dequeued that task (A) decremented some external "count of consumers still living", (B) requeued the killer task if that count were , and then (C) killed itself. But if you only have a single consumer thread in your program, then the above idea might be overkill. It really depends on your use-case... which is why this logic shouldn't be part of the reusable queue class itself, if you can help it. 

Randomly picking a filename is decidedly not a good idea. The given filename may already exist, and urlretrieve will go ahead and overwrite the file. Here's a function for retrieving a unique filename: 

Note: I did not do error checking and exception handling, since the other answer covers that appropriately. I think the best solution would be some combination of mine and @MrGrj's answer. Also make sure your imports are at the top like @MrGrj's in the actual document. 

We use a generator to yield only filenames that do not exist, and use the finite to limit the generator since stops when the first iterable is exhausted. As a side note, is a very redundant name. A list implies multiple but so does the pluralization . I (and Brandon Rhodes) would rather name it . If this was ruby, you would want to just name it . 

You misspelled "ContinuationSignature" here; but it doesn't matter, because the type is unused. Remove it. 

The next step would probably be to write yourself the functions and /, and then implement in terms of those functions. 

traditionally means "don't copy the value, just reseat the pointer to point to the same heap object as ", then your use of will seem perfectly natural. To me it seems confusing; I'd rather write . 

A note on your English: You've said repeatedly that "I would like to assert my dequeuing algorithm." Unfortunately, the word assert does not have any English meaning that makes sense out of your statement. I think you meant "I would like to get some feedback on my algorithm.", or "Does anybody have any comments on my algorithm?". Also, it's impossible to evaluate your dequeueing algorithm without also seeing your enqueueing algorithm. Of course we can guess what the latter looks like, but if I'm just going to guess, then I don't need to see any of your code, do I? 

Here we use the method to do a subset check. Shifting is really useful for checking on adjacent data. Essentially for all the shifts we compare the n data point to the n-1 data point by shifting the data down one index. 

Use on or objects to do vector operations on adjacent data. Use slice notation to get even data points ( means all the entire index stepped over by 2). Do vector operations on entire series instead of each item on the series. This section of code is about 6x faster than the original iteration code. 

Note that your index is a which can be individually accessed to yield objects. Here's my take at your code: 

You could still randomly pick a filename, however I would still check if that filename already exists to stop overwriting. When you pick random numbers there is some chance that a number may appear in the same program run. A program is not robust if it steps on its own toes by potentially overwriting files it just downloaded. You could use this generator in the main function: 

I'm pretty sure you don't want to assert that is , because that would prevent you from using something like a with this algorithm. 

so, unless there is some good reason (good reason) to write the verbose and repetitive version, you should use the shorter version. Obviously it'll have different behavior when for example, but I think we can assume from context that is meant to be either a string or (as a special case) . 

First of all, let me just say that is a really bad name for a generic function. I would have called it... ! In fact, I'm going to do that in this answer, because it'll make the code a lot easier to read. Well, I'll call it , because we'll be including , and I don't want any confusion over whether we're accidentally referring to the standard library's 2-argument . 

I do have a suspicion that some of these splits are not needed. Also indexing the first element of each list in (from your code) belongs here, since it's an implementation detail of finding the links from an html source tree. 

You can use the argument of instead of setting . is not used and the url is passed into since supports http. 

Now that Failure is of dtype , you no longer need to check whether failure is equal to or , depending on whether you've shifted (through diff) and added a value. Since you are already using the same name to refer to new data, might as well use where possible to get a little speedup. You can use to generate a range of Timestamps instead of your for loop. Since the bad timestamps are already your dataframe labels, you can use them to drop the unwanted rows in the DataFrame. Index objects have set notation methods available to use. I did assume that you didn't need the column. If you do need that column, you could do something like: