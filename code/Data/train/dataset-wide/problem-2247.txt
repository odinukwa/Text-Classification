I believe you are running into the issue described in Subqueries that you define on merge articles are not re-evaluated. From the article the cause is: 

This is a permissions issue and you can find more details in the verbose agent log. Verify that your replication agent process accounts have the necessary permissions listed in the section Permissions That Are Required by Agents in Replication Agent Security Model. Note that Microsoft recommends that you use a Windows accounts for replication agent process accounts. Do not impersonate the SQL Server Agent account when you create the subscription, use a Windows account. The Distribution Agent process account for a pull subscription requires: 

When using Merge with identity columns â€” will need to specify an identity range management option of either automatic or manual so that duplicates do not occur. With automatic, replication will automatically manage the assignment of identity ranges for nodes participating in the Merge topology. With manual, you will need to manually assign "islands" of ranges for nodes using DBCC CHECKIDENT. Have a look at Replicate Identity Columns. 

The replication topology that you are describing is known as the Central Subscriber Model which is comprised of two or more Publishers replicating to one Subscriber. The dilemma you are having is how to go about initializing the Central Subscriber, which is a common conundrum. I have talked about this in detail in my post Central Subscriber Model Explained and have found through experience that the best way to initialize a Central Subscriber is with a snapshot, utilizing horizontal partitioning, static row filters, and setting the Action if name is in use article properties to Delete data. If article has a row filter, delete only data that matches the filter. If you have anymore questions please let me know. I hope this helps. 

Please check for orphaned rows for deleted subscriptions in sysmergesubscriptions and delete them. For example, the subscriber that this is failing on may have duplicate entries in sysmergesubscriptions, one being orphaned from a previously deleted subscription. This has been the cause of this error and solution for clients of mine in the past, ymmv. I hope this helps. 

It really depends on how old the snapshot is. After the snapshot is applied, the agent will need to also send all of the changes that have occurred since the snapshot was taken. Depending on how many changes have occurred, this may or may not affect other existing subscribers. I tend to take a new snapshot if possible before reinitializing a subscriber although sometimes that is not an option. I wouldn't worry too much about it impacting other subscribers. 

You cannot see the conflict tables from within Replication Monitor. However, you can view the Conflict Viewer by right-clicking your Merge Publication in Object Explorer -> View Conflicts. Alternatively, you can directly query MSmerge_conflicts_info. For more information, see View and Resolve Data Conflicts for Merge Publication (SQL Server Management Studio) and Microsoft Replication Conflict Viewer (Merge Replication). 

No you cannot change the default UI settings but you can create your publication and add articles via T-SQL script using sp_addarticle and set the appropriate @schema_option. 

You need to inspect the Conflict Viewer and observe the conflict types and the conflicting row values. Something to note is that the Conflict Winner column will display the winning row values which are pulled from the base tables. If you think about it, these values are volatile and can change, so the values you see in the Conflict Winner column may not be the values they were when the conflict occurred, keep this in mind. The Conflict Loser column will display the losing row values which are pulled from the MSmerge_conflict_publication_article table and these values are static. If you are unable to determine the root cause of the conflicts based on the Conflict Viewer, you may need to implement an auditing scheme. I have provided an example of how to do this in Auditing Changes in Merge Replication. There is a small chance you are getting false conflicts but auditing should reveal whether or not that is the case. 

Transactional Replication is typically used to off-load reporting to another server/instance and can be near real-time in a best case scenario. The benefit of Transactional Replication is that you can place different indexes on the subscriber(s) to optimize reporting. You can also choose to replicate only a portion of the data if only a subset is needed for reporting. With Transactional Replication you will need Standard Edition or higher for the Publisher and Subscribers can be Express Edition or higher. Have a look at Transactional Replication to get started. If you have any questions, let me know. I hope this helps. 

The first link you provided is official documentation for SQL Server 2012. $URL$ The maximum number of articles supported in Merge Replication is 256. This means that Microsoft will ensure up to 256 articles will work as expected. I'm able to exceed 256 articles as well but I wouldn't do it in production. You may want to consider splitting this up into multiple publications for production purposes. 

Yes - you can shrink the transaction log without it breaking replication. You can also move the publisher files to a different HDD by using ALTER DATABASE MODIFY FILE syntax, setting the publication database offline, copying the files to the new location, and bringing it back online. I would start with shrinking the transaction log and see if that helps. 

The Query Timeout message you are seeing is your Distribution Agent timing out, not your Log Reader Agent. You need to increase your Distribution Agent profile Query Timeout parameter value to alleviate the error. Please see the section To view and edit the parameters associated with a profile in Work with Replication Agent Profiles to edit the QueryTimeout parameter value for your Distribution Agent. Note that if you run your Distribution Agent continuously that you will need to restart your Distribution Agent for the profile change to take affect. 

Jeff - Have a look at the parameters for sp_addarticle. Notice the parameters @ins_cmd, @upd_cmd, and @del_cmd can be configured to replicate inserts, updates, and deletes as either stored procedure calls or straight SQL. DBA number 1 likely setup the production publication to replicate inserts, updates, and deletes as SQL. DBA number 2 likely setup the development publication to replicate inserts, updates, and deletes through called stored procs.