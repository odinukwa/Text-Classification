And so on. In a nutshell, that's what recruiters are looking for when trying to fill any position: can you do the job effectively. As far as being a mid-level engineer, the title isn't as important as what you know and what you've done. A lot of the time titles like junior, intermediate and senior only specify a political situation in a company (e.g. this guy has only worked here for four months, let's call him junior and pay him a junior wage). So your approach as someone with more experience isn't fundamentally different than the approach of someone with less experience than you, you just happen to have more experience to back up your credibility. Whatever the job is that you're applying for, prove that you can do it. 

I haven't gone too far down this route, but one thing I started doing a few months ago was keeping a 'reflection' journal on my own time. In lieu of manager or senior dev feedback I take the time every now and then to reflect on how things are going lately, what I've learned, how to improve, what action points I want to take going forward, and so on. I think in my case the most important thing is to just give myself time to think about how to improve. I also follow a bunch of business oriented pages on Twitter which offers a lot of great business, aka non development, advice. 

There are two major things you need to consider when trying to accomplish this: 1) Do I have enough practical experience in [x] technology to competently accomplish the job I'm applying for in the field, and be chosen over other qualified candidates? 2) Am I presenting myself via my resume in a way that will actually give someone enough confidence in me to give me the job? For example, if you've been coding in various languages since you were 8 years old and have built a compiler in your free time, and you can communicate the fact that you're an extremely skilled programmer in a way that will convince an HR person to give you an interview, you're set and should be able to make it work eventually. On the other hand, if you've only toyed around a bit with a few languages and are not actually that skilled, you need to ask yourself if you are actually qualified for the jobs you're applying for. If the answer is no I'd first ask why you are bothering to apply, and secondly I'd expect you will have quite a bit of difficulty breaking into the industry. Basically it all boils down to: am I genuinely qualified for the job I am applying to or not? And if I am can I convey that in a way that will get me a job? If you do have the requisite skill then I'd recommend spending a week or two researching IT resume strategies and how to sell yourself, because if you fail in that area you're dead in the water no matter how good you are. 

Every section, word, phrase should be geared toward the end of explaining to the recruiter and hiring manager why you would be able to fill the position effectively. 

I've been on a rolling contract for a little over a year now out of school, and prior to that the work I did was in and out of internships. I've heard that employee status is much more preferable than contract status, and I'd like to better understand why. I understand that employee status often comes with better benefits, like health-care, vacation, and salary, but one thing I'm especially curious about is if being an employee confers more job security than being on contract, and why? 

Sounds like your best option would probably be to find a shop of like-minded engineers and work with them. If you, as a very new developer, are noticing his company's tech issues already, I'd imagine the issues run deep and are systemic and cultural. As a young engineer, don't be too discouraged by this. It's your first job, and although there are other groups like this, there are plenty that are more friendly to engineers like you. You mentioned that you are able to pick up new languages and APIs readily, so finding new work shouldn't take too long. Lots of companies seem to be doing more hiring in the junior level range as of late, so your freshness to the industry is a potential advantage. If your career is the main concern, even taking a small paycut to work in an environment that rewards learning and your type of thinking would be wise in the long run. Learning is the most important element of any job for you at this point in your career, and the money will come if you learn your craft well. 

Recruiter here with 15 years of experience. You absolutely want to tell the recruiters you have worked with as soon as possible that you have accepted a position. Chances are the recruiter will ask questions and perhaps try to sway your decision, and since recruiters only get paid for making a placement, there is even a chance that the recruiter will go back to the companies that presented offers to see if they will sweeten the pot a bit and up the offer. If you are 100% decided on accepting one offer, be firm with the recruiters and let them know that you have passed on your commitment to your new employer. Be sure to thank them for their time, and if they treated you well you may want to let them know that you would pass their name along to anyone that you knew was looking for work. Recruiters love referrals, and you don't want to burn any bridges with the recruiter or the hiring companies themselves. You could ask the recruiters if they object to you reaching out directly to the hiring companies with a call/email to thank them for their time and for their consideration. I would have no problem with allowing my candidates to follow-up after declining an offer, but some might have an issue with it (the recruiters that have an issue are the ones you should worry about, and you may be more inclined to contact those particular companies directly). The appropriate person to address the letter to would be the interview team, and HR as well if you had a fair amount of contact with them during the offer process. 

This problem isn't about you, it is a problem with the company that frankly you should not want to deal with. Some extra hours during crunch time in software product development are expected, but what you are describing are sweatshop conditions that should be unacceptable to most engineers. If a company is asking or demanding employees to work 80 hours a week, the problem is that the company needs more engineers. What probably happened here is that the company underestimated the amount of time and effort would go into this project, and they are trying to make up for it. Paying engineers some amount for overtime worked is a nice gesture, but to expect employees to be available for 80+ hours a week is simply not sustainable for that period of time. If you are new to the business you may not know this yet, but I would say you could probably make the same amount of money and work half the hours. Other than the fact that you are burning out, you mentioned poor software quality. It is one thing to work long hours and to sweat for a product development effort that is incredibly successful, but exerting this much of your time into something that appears to be a failure at this point is a bigger issue for your career. This company's business model is unsustainable, and you will see turnover continuing which means fewer mentors to choose from for a young engineer like yourself. Find a company with a more reasonable work schedule. 

I currently work at company A. I have worked here for over a year and I love the environment, job, etc. During this time, I have also started my own side business that isn't related to company A, it is more of a product than a business. This does not affect my work at company A at all (performance reviews have been fine, getting raises, etc). I have recently launched my side business product and it is doing decently well for a single person start up. Now, while I mentioned company A is not related to the start up, it would help them in a huge way. So my boss contacted me today during work and asked me how the side business was going and I said well. He expressed a lot of interest to integrate my side product into company A. And here is the problem. He believes that because I work for the company A, my side product will be 100% free. Not only free, but work to tailor it to their preferences to fit them. I do love working for company A but I have also worked very, very hard on my product. If I am honest, I would not give the product away for free to another company(and I have not). I'm afraid by saying "hey boss, this isn't free", he will take it as if I am leveraging my position (get paid salary from company A who then pays me agin for the product). How do I treat company A as a customer/client and not as a employer of mine? How do I manage this situation without it blowing up? Edit: he never said "it's nice this will be free too", but I am very confident he believes this is the case. Having worked with him for over a year, you start to understand how a person works. 

Very simply, no. You are not required or obligated to go. In fact, if you truly do not want to go or not interested in the job opportunity, cancel and do not waste your time or the employers time. Although they won't be happy, it would save them time and money to focus on another candidate that is interested. Note: This probably won't look great on you cancelling last minute, so expect bridges to be burned. 

This is actually a very normal thing to do, not only in the computer industry, but also in virtually every other industry. I have found that the majority of people in cyber security for example, were usually in a branch of the armed forces. What's more important is that you go after the things you are interested in and pursue opportunities. You have just graduated, you still have plenty of time to figure out what you want to do. Because you mention the computer industry, I can confidently say this will not affect you at all. Some even may look at it as a very positive thing. This is a decision only you can make, but it certainty will not affect your future employment. You have a long, long career 

I'm in a situation where my Boss only wants very simple answers. The problem is that in the information security and software business, this doesn't really exist. Here is the situation. My Boss is in the process of drawing up contracts for clients where they pay us for services rendered, simple. My Boss brings me in, says "hey, based on our current stack (how everything is set up), could we support 20,000 clients?". My first answer consists of lots of questions. What client is it? How many hosts per client? What operating system? What services? What processes? How is their network set up? Etc. There is not a straight forward answer. My Boss than says, "I just need a yes or no answer so I can relay this to the client". I basically refuse to give him a answer and try to explain. He wants to say "x=2 and y=3 and so x*y=6. But it is never that simple in the software business because there are many other externalities. He gets frustrated because he wants a yes or no answer but we do not have the available information from the client to say so. I have expressed that we should tell the client "let's start out with 1000 hosts and we can build our way up as both of us are happy" but this gets refused. How do I deal with a Boss that does not understand the complexities and wants a clear cut answer I don't feel comfortable giving?