Background: I am working as a junior java developer. My long term carreer goal is becoming a software architect. That said, I have a big demand on myself to deliver a high quality code. So here is the story behind my question: I am responsible for a big refactoring in a core part of our buildsystem. I gathered the known requirements, put them together with what was already coded, and made some code-design decisions. I made those without the help of our senior software architect, as he wanted me to be fully responsible for the job. Since I am working for some weeks on this by now, I can clearly say, that I would do it all the same again, which is a positive sign (, isn't it?) After the refactoring however, they rushed in with a lot of new functionalities, thinking I would need some time to add these. After 3 days I finished my work and they were really surprised and couldn't even give me new work on the first hand. I started to optimize the code in regards of maintainability, documented the Architecture, etc. The Problem: The senior architect reviewed my code and did not get the reason for the choice of architecture, thought it was documented and I could explain all the patterns I used, and why I used it. He told me, my code was 'too textbook fashioned' with all 'the design patterns'. He continued something like 'you dont need to split the functionalities into classes, I would rather want to see bigger classes with a lot of functionalities, so I dont need to search too many files' Now the thing is, that he wrote the prior version of the tool I re-wrote. It was split up into 6 files, each having around 2000 lines of code with no documentation and comments at all. In the refactored version (before adding all the new functionalities, that your were not able to add to the old one), there were around 20 files having ~200-250 lines of code (including docs and comments). While I am now able to add a new functionality within 3-8 hours (tested) and can within a short time determine where an error occurred (normally bugs are fixed within 1-4 hours), he tells me, that I am too concerned about the Architecture. Note here, that there are ~150 files in the meantime. Looking at the code of the development manager, the senior and the junior architects, I am feeling somewhat offended. You cannot change any implementation without breaking the whole system (which is possible for my part). The Question: I feel very uncomfortable writing code that does not comply with my personal quality demands, but I am sure, that I will never be able to fulfill these demands, if I start writing code the 'way the others want me to', so I am 'quicker' (which is not true, otherwise there would have been no reason to refactor all the code). I cannot find any design patterns within our whole codebasis, and our architects admit that they know nothing about them. Both facts make me cringe, as we lack the very basics, like Statepattern or Factories. So how can I satisfy my own quality demands in this situation? How can I influence the way our seniors work? As I will need to work with and enhance the code the others wrote, how will I be able to make it high quality (in my way)? EDIT: Some of my not 'senior' coworkers already applied changes to the code I wrote and were surprised by the ease of doing so. My focus was on giving a framework-like architecture, where enhancements can be applied easily by everyone : To add another functionality, you only have to implement ONE SINGLE INTERFACE containing only a single function. The big thing around does not need to be understood without documentation, as long as it works. IMHO I think, that the easier such a tool is useable, the more complex the background usually is. 

One easy solution would be chat. Having to type to talk to a person sitting next to you might seem weird at first, but: 

One cup and one plate per person. Seriously, nothing else works. Hide cups and plates (in case you need them, for a customer or something) and only leave one cup and one plate per person. People will either start cleaning up for themselves or for others if they want to use them. I've done it twice, and it worked both times. The first time people started cleaning up for themselves, the second time they started bringing plastic cups and plates from home. In any case, the kitchen was clean. 

I strongly dislike receiving emails from colleagues that aren't strictly about our work, however interesting or useful they might be, and I would go absolutely mental if someone interrupted me by sending me a link via IM. That might just be me, but the lack of response from your colleagues probably means that they aren't exactly enthused about it as well. On several teams I've worked with I was (sometimes officially, others unofficially) the researcher of the team, and part of my responsibilities was to dig up anything new and cool we could use in our codebase. From my experience, what works best is a casual, in company blog. Every time you find something you'd like to share with the rest of the team, write a somewhat comprehensive article about it, don't just post a list of links without context. It doesn't have to explain the concepts / practices / technologies / tools in depth, but its essential that you point out clearly how whatever you are talking about applies to what you or your team works on at the moment. You could start with the rewrite, write a series of small and casual but comprehensive articles on what new things you introduced to the codebase, what decisions you made and why, discuss challenging issues you faced and how you overcame them. Show real examples from your codebase, point to actual tickets in your issue tracker. In short: context. At the end of the day your colleagues may still ignore you. But this time it won't be because you're spamming them, and you'll have excellent documentation of your thought process and progress of your skills. 

Some of this can be assessed by an interviewer through just watching the interviewee react to the whole process. Body language, word choices, who they pick to talk to, are all useful details. For the rest, I'd like to see examples if possible, but failing that I want stories. Stories of budget battles won. Stories of post-mortem sessions after a big failure of some kind. Stories of Big Problems being troubleshot through and how the interviewee handled status updates. Stories of unclued coworkers becoming clued through the interviewee's actions. All of these are useful and highlight different facets of the communications skills I'm looking for. They're also, not surprisingly, the kind of stories we tell each other over beverages at conferences. Focus less on the technical issues and more on the communications aspects, and you'll have a good stock of answers for these questions. 

I'm guessing that's part of a casual conversation. Well, it's summertime, and a security audit is a long and painful process, so I completely understand where your colleague is coming from. That said, it's a necessary process, and probably an urgent one, since you've already identified some issues, and the developer did everything but outright admit that there are further issues. If you doing your job creates friction between the two of you, well, then it's probably time for management to intervene. However, I strongly believe that a team fails as a team, and really don't appreciate the blame game. Before you do anything you really need to be absolutely certain that you aren't overreacting over something that was more of a casual and possibly humorous comment than an actual request for you to postpone / dismiss the security tests. 

Arguably the simplest form of gamification would be a friendly contest. It could be anything, as long as it's work related, fun, and not too competitive. Fun rewards could range from silly t-shirts to books, nothing too pricey, you don't want people to get fixated on the price. The contest topic should be something related to the current goals of the company / team / project, whichever applies most, and it shouldn't be anything more serious than a friendly challenge. Whoever fixed the most bugs this week gets a silly t-shirt it's quite different than whoever comes last will be fired. Next you could have some kind of leaderboard, if your work has easily quantifiable aspects. To continue with the bug fixes examples, whoever fixes the most bugs each week gets a gold star, or any other silly achievement token you can think of, and every now and then the leader gets a price, bit more pricey than a book (two books?), or a couple of days off work. It would be impossible to come up with specific guidelines for gamification, as the process is entirely subjective (what's fun for me may not be fun for you), and quite dependent on the nature of your profession and the dynamics of your workplace. For example, there were gamification elements in every job I had, even in the strictest and most disciplined environment I had to face, the army. Getting a bit more recreation time than the rest of my company for disassembling and re-assembling my Heckler & Koch G3A4 in record time (don't ask, I don't remember) would be one example. And, of course, no answer on gamification would be complete without a mention to Stack Exchange. Chances are there is (or there will be) a Stack Exchange for your niche, and if you think about it, it's a ready made gamification platform for your company. Have your team mates compete by providing excellent answers or asking great questions, and use the existing reputation / badge mechanisms to quantify their contributions and reward them. If you are a manager, you can always spice things up a bit and ask questions on work related issues yourself, rewarding employees that would give you great answers. What you need to remember is that gamification is not about getting direct and immediate results, but mostly about having fun. Small and frequent rewards, preferably awarding the less illustrious aspects of the job (think: documentation), and always light hearted in nature, as the core concept behind gamification is encouragement and further engagement, not competition. Further reading 

But your question was how to address this item in an interview. Personally, I've used my ServerFault profile and a few articles I've managed to get published to help address this very question. If you have anything like that out there on the Internet, even if it was just a casual forum somewhere where you went deeply technical and it helped, that kind of thing is valuable: it allows the Interviewer to see a sample of your work. If you don't have enough of an online presence to field this question completely, keep in mind that we all do communication every day. And these days, most of it is recorded. If you've ever had to shepherd a very expensive project-proposal through a budget process, you've effectively communicated and can put that on a resume. If you've received praise on the quality of the documentation you produced, that's resume fodder as well. When I'm looking for a sysadmin, the communication-skills I'm looking for are: 

If your current status is "waiting for Joe to finish what he's working on", then Joe (and everyone else on the team) should know about it. It's your manager's / scrum master's responsibility to either help Joe finish a bit faster, or find you something else to do while you wait. That's what stand up meetings are all about, keeping the team informed of every member's current status. 

A very popular choice in Europe is the Europass, an initiative of the European Commission's Directorate-General for Education and Culture. Other than a standard CV, the Europass offers tools for: 

A few of my colleagues have a tendency of sending a variety of off topic emails, ranging from the usual "funny" stuff to serious, but still not work related stuff. I really don't like that, my inbox is extremely busy as it is, other than the usual work related emails I get a ton of automated emails, from our PM software, our build & deploy services and a couple other bots. On top of that, I'm working remotely, and email is my main method of communication with the company. I could be deleting all the crap as they come, but that's not really a solution if they just keep coming. A messy inbox leads to messy search results, every time I don't delete a "funny" email, it just pops up in a search result six months later. Email search being as inefficient as it is, this becomes very tiresome after a while. How can I, once and for all, put an end to the madness? Most of my colleagues are IT professionals, I feel that they should be very accustomed to email culture, and I really don't understand why any of them would feel the need to share the latest cute kitty picture they fished out of Reddit with the whole IT department, or why they don't just send it to my personal email. Working remotely also means that I'm at a disadvantage when it comes to one on one discussions. Small clarification: "co-worker" includes management, up to the top of the hierarchy. Not the main culprits, but it's not unreasonable to think that they enable the behaviour by setting a bad example (once in a while).