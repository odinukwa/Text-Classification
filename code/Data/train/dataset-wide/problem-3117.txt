For adding and removing single host names, I would use a simple without the . Initialize it with an empty map and drop the additional latch. Update: I really doubt you need to replace the list of hosts all at once, but here's the combined form anyway: 

Finally, you're treating as a pure data-holder a la C structs which gives the list class two responsibilities. While this centralizes the logic maintaining the structure in the list, it makes the full list responsible for managing both the list itself (the head) and each node's internal state. Classes that have a single responsibility are much easier to understand, write, and test. Moving the node-specific logic from the list to the node class would simplify many of the methods, increase DRY, and make each class responsible for one thing. I'll provide one example for to demonstrate the technique. 

For the second part, use values as Josay suggested but place the flag inside a function that returns a closure. Each call to establishes its own flag without having to package them all into an array or object. 

Now clearly the second method name is not correct because you don't end the game with the first miniboard win. But that's the beauty of extracting methods: incomprehensible code and possibly incorrect comments are replaced with easily-refactored method names. Mistakes in reading and coding are more readily apparent because they lie closer together. Doing that for every three-to-five lines of code allows you to delete all those incorrect and misleading comments while improving readability. Yes, the code might be a little longer, but it will be much faster to read and verify. 

You're finding all solutions, but because the code overwrites the for every solution found you only see the last one. Try this: 

That's much easier to grok already, but let's tackle that complicated function next. What are its responsibilities? 

Is this desired? What about if the first and third intervals above butted up against each other rather than overlapping themselves? 

Solving the first problem is simple enough: use a to cause all incoming threads to block until the first list of objects is set. Ideally the system would start another thread to specifically load the data rather than letting the first random thread to come along and do it. This isn't necessary (see below), but it's much cleaner. For the second problem, wrap the list of objects in an to supply a correct memory barrier. You might be thinking, "Oh no! Not two synchronizers for each access!" but Java's synchronization primitives have improved greatly over the years, and the atomic value holders are even cheaper than full synchronization. 

While it merely hides the complexity in another method, it does clean up your original loop a little: 

On the surface the code in your question seems fine, but I can tell you from experience that once this door is cracked just a bit, it will continue to creak open wider over time. 

The problem is that it now hides the logging inside a method that doesn't seem like it should log, and the method returns a success status which is less desirable to exceptions in my view. Starting over, another simple improvement would be to extract the full code between pairs of into a new method of the same class. Again you have three possible exits: continue processing normally if the job is marked completed okay, continue the loop early if it fails to be marked but rolls back, or exit the method entirely if it cannot be rolled back. Here's where specific exceptions as İnanç Gümüş recommended could help: 

Obviously, this won't work if you're using Sinon's fake timers, so disable them for this test if enabled globally. Also, you'll need to figure out if a slow AJAX call will interfere with later tests when it finally completes and puts into the body. Maybe you want to put it into the fixture itself instead of polluting the global body. 

Notice that I chose to throw exceptions for missing sections/values or when calling the wrong method on each. You could also accept a default value for and have return an empty array when it doesn't exist. Configuration By passing the or to the class directly, you're coupling these classes unnecessarily. The should be given only the properties it needs; it shouldn't know how to grab them from a configuration object unless it's a custom object with named getters or a simple array with known keys (see next section below). The simplest form of configuring an object is passing the values to the constructor. 

While it seems like you're just shifting from multiple parsers to multiple factories, it is generally preferable to code to interfaces rather than abstract classes. Abstract classes are great for filling out the most likely implementation of an interface which many concrete subclasses end up overriding. When you find yourself building an abstract class that has nearly all of the functionality and only implementing one template method, a factory or strategy may be a better fit. 

I've found over the years that it's best to start with the normalized form and denormalize as-needed to solve performance and usability problems. Without a full description of what stores, we're left to guess about a lot of details. 

If you really want to drink the PHP Kool-Aid, you could implement the ArrayAccess interface so that clients could use 

Perhaps will better convey the fact that it's solving the puzzle. sounds like a function that fills in the initial positions from a file or string or something. You could shorten the "is the cell is filled" check by dropping the for maximum C-ness: 

All this would be done while reading the file and at the end while generating the final sentences to output. 

Once you've deleted the desired number of friends, print the processed list of friends and the remaining friends in the line (no need to parse and add them to the list first). If you run out of friends to read before then, remove the last friends in the list. Finally, you may need to employ some micro-optimizations as the others have pointed out: using buffered input, using a different tokenizer, or even scanning the input yourself given that it has such tight constraints. 

Update: Since you're storing the certificate (or not) so you can check its validity, I assumed you were checking it at a later time and ideally multiple times. If this is the case, extract the logic into a hierarchy using the Strategy pattern. If the certificate is checked once in isolation of any other data, this isn't necessary and I see no reason to store the certificate in an instance field. 

Another option is to forego separate classes altogether and check for a special value in and to signify a missing ZIP code. 

While not a problem, you aren't using the and properties and should remove them. You must call to get the actual path from the object. 

Double-checked locking is broken and must be avoided. The article explains the reasons in depth and provides several alternatives. In this case you can follow the advice in the "Making it work for static singletons" section by immediately initializing the static field. 

Deduplication If you're reading in a file with a lot of repeated sentences, you could force them to be unique and hold only one instance of each unique sentence. Combining this with storing the unique sentences in and instead of the indexes into a list and dropping the list would shave more memory to boot. You can also normalize the verbs, subjects, and objects as well to save even more memory, but this is really digging deep into premature optimization. You're essentially replicating Java's string internalization, but for extremely large files with lots of duplication, it might get you under the limit. 

Since you're writing this in Java, you should encapsulate it all into a new class. Assuming this is a learning exercise, you could even go so far as to model it as an array of thirty-two s. 

With this design you can reliability test each component in isolation. Merging these responsibilities into a single class makes testing difficult and blocks alternate implementations. 

Your question does not match your code. You ask to check that a key does not exist in the array, yet you are actually testing the value mapped to that key against some other value, presumably doing something else if the key doesn't exist. 

Ah, reading further I see you used this for and . Why the difference for post-order? You can also employ recursion in the other methods such as and . You'll need a helper method to start the recursion, and you can move the recursive methods to if you like. 

This introduces a common trick to simplify high-level logic: moving special-case checks into extracted methods. Writing to accept for also allows to handle the empty list and single-row corner cases. With that out of the way we can focus on combining the current best paths (accumulator) with the next row to form the new best paths. Rewriting your original code to build a new row is sufficient: 

O(k + log n) seems highly suspect to me. For small values of n this is equivalent to O(log n) while for large values it's equivalent to O(k). That they specified O(kn) up-front processing leads me to consider the use of a hashtable, but I don't see a structure that would provide the "closest-neighbor" capability required by the problem statement. Obviously this doesn't answer your "How can I do this?" question, but I question that it's even possible given their requirements, assuming you captured them accurately. At this point someon will likely provide a perfectly valid solution to blow my mind. :) 

These small refactorings improve the readability only a little, but they don't alter it significantly. The real gains will require expanding the model and moving away from a single, static method. Starting Over If you're going to model the stations with classes to solve this, go all in and model the lines and entry/exit times properly to avoid confusion. 

Combining this with the Null Object pattern would simplify others even further. Instead of storing in the root, left, or right child when there is no key stored there, store a shared instance of which implements most methods by doing nothing or returning . Since it doesn't store any data, it can be a static member of shared by all trees. 

That's a big mess of conditionals. Hopefully they all match the comments near them, though given typical code that's likely not the case. You are repeating a lot of HTML code that could be addressed using variables as @V31 demonstrated. If this is the entirety of the code I would probably stop there, but as this system grows you may want to generalize the conditionals and how they apply. First, you can create short functions to help ensure the comments match the conditionals and are clear to future maintainers, reduce the code duplication (DRY), and possibly allow reuse in other areas. The very first conditional provides a good example. 

The purpose of your program was unclear to me before reading the problem description. I could understand the logic flow, but I had no idea what answer it was seeking. 

You are breaking encapsulation and the Liskov substitution principle by exposing the individual parameter objects to clients. I expect getting a value looks something like this: 

If you really must have the first thread perform the initial loading rather than a separate thread that calls on its own, you can add back your beloved . This would be my last choice, however.