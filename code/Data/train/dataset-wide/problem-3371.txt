This can be done with NAT rules in iptables. If the MySQL server is on the same host, use a REDIRECT rules. Redirect all connections to port 3306 not to 10.7.7.3 to the required address. If the MySQL server is not on the same host the, use a DNAT rule. 

A lot of bots don't get the hostname right. I suspect that is what you are seeing. Looking at my mail database, I only see one record like this. However, a lot of bots trigger response delays and give up before they get to the EHLO/HELO step. I don't know the Postfix capabilities, but I delay answering the connection for several seconds if the DNS entries for the server aren't good. A proper mail server will wait and connect. Most Bots don't wait around, likely because they want to deliver messages as quickly as possibly, not as reliably as possible. Try doing a host look-up on the addresses which are failing. Valid mail servers will return a pointer to a FQDN (Fully Qualified Domain Name). This FQDN will almost always return the IP address you started with. If not, you likely have a Bot trying to connect. As the name is blank, this is most likely. 

Look at backuppc. It stores all the attributes in a separate file. It does de-duplication when you have multiple versions of the same file in your backups. If you use rsync as the protocol, then further backups are done at incremental speeds. Handles laptops and the like as well. Once I got my first backups running adding additional systems was a breeze. Bacula would be a good option to backup your backuppc repository to tape for offsite storage. EDIT: Reread your post so it is likely you will be reading using rsync. I believe backuppc may fit your requirements better than rsnapshot, and should have similar capabilities. 

Using the common directory allows me to avoid repeating definitions for each server. The config file has a path variable which can be used to specify a list of directories containing common files. If you have a lot of servers with the same rule set you could place the rules in the directory, or a different shared directory for that class of servers. I use to build the firewall scripts and . These are then distributed and executed using . I've tried some of the graphical firewall builders, but find shorewall with its config files easier to work with and verify. I keep the whole configuration directory in to allow me to easily verify changes before implementation. 

You are seeing normal behavior. Don't confuse used memory with unavailable memory. Many structures held in memory can be quickly downsized when memory is required. Expect your usage to increase as long as the system is up and lots of memory is available. Space used for disk cache counts as used. Once you read or write a file, the data tends to be cached until this space is needed. Log files tend to be write only, but get cached as they are generated. A few things that are noticeable from my usage graph: 

A hard bounce is an indication that you should never send a message to that address. The bounce message should contain an indication as to why you were bounced. If the address does not exist, then no amount of waiting is likely to resolve the issue. If you get a soft bounce, such as you should get for over quota, use an exponential backoff. This should be part of the default ruleset for your mail server. Fail the message after at least two days. If you back off to daily retries, it is common to wait at least a week before failing the message. You may want to periodically (first failure, and after a day or two) notify the sender of the delay. If you were hard bounced because of your configuration, then wait until you have resolved the issue. My mail server blocks for many of these conditions which may result in a hard bounce: 

It you want just the top offenders, consider running with a relatively long interval (60 seconds plus) in batch mode. You may need more than one running to capture the top offenders on multiple resources. I have configured systems to run for a few cycles when a resource was being over used. Consider running in batch mode to capture resource utilization. I realize this is server based, but it useful to determine times when problems are occurring. Run and enable notifications. This may give you a chance to get in and watch the server going down. You may be able to correct the problem before it goes down. For memory leaks, a steady increase in swap usage indicates a problem. I once watched a server slowly die over a period of days. The problem service was a program monitoring other processes for memory leaks. The system admin kept insisting the increasing swap usage was not a problem, right up until the server stopped responding. You may find that 's anomaly detection can be used to trigger a script to capture the system state when things go wrong. You may want a lot of information besides just the processes using the most resources. For a sudden influx of usage you may want a list of network connections (by address not name). Memory usage is also useful. 

You could also conditionally define a variable in the acl and wrap the subject line in a conditional inclusion. 

Thuderbird will likely be happier if you enable the submission port (587) on your mail server. Normally this would be configured to use STARTTLS and require authentication before accepting email. Authenticated users are typically allowed to send email to any valid address. Access to the submission port is rarely blocked by ISPs while port 25 is frequently blocked. Using port 25 will limit your ability to roam. 

Depending on the distribution you can configure this at startup by editing /etc/sysctl.conf or adding a file in /etc/sysctl.d. Normally forwarding is disabled by default, so you may have a line enabling forwarding. Some firewall builders will enable or disable forwarding depending on the configuration. 

The domain of the SMTP server does not need to match the domain of the server. If fact this is common. In fact it is rare that there is an exact match. Most mail servers domain names are at least third level domains (mail.example.com) while most email addresses are second level domains (example.net). If you use SPF (which I do recommend), then the SMTP server should be listed as as sender for the email domain. I also recommend setting up an SPF record for the mail servers domain as well. It is important the mail servers identity not look like it is being forged. This is done by setting up rDNS records for the IP address, and using the FQDN (fully qualified domain name) from the rDNS setup in the HELO commands issued by the SMTP server. See my article on Detecting Mail Server Forgery for more information on checking your servers setup. 

Note: This will not force word.php to be HTTPS To do that you would need an equivalent rule on the HTTPS site to redirect back to HTTP. Be careful that you don't leak secure information in that case. 

Port 993 is IMAPS (with SSL) dovecot may be automatically trying SSL as per standards. Check that the use_imap_tls option is set to false. If at all possible enable SSL on port 993 or use port 143 IMAP. 

If you have exposed you mail server to the Internet, expect most of the connections to be from spambots, and other illegitimate senders. I would consider just matching rejects for any Errors in fail2ban. legitimate senders should rarely generate and error, and will retry later if they do get banned. I do some nasty things to suspected spammers, and it has been years since a legitimate sender has had problems other than delivery delays. I use a few tests to check the legitimacy of senders: 

It looks like you are blocking the incoming VPN connection. All client VPN traffic should be tunneled over the VPN connection Masquerading should already be caught by an existing rule for all outgoing connections on eth0. You shouldn't need to add this rule. VPN connections will have a different device. You may need to add accept rules for that device. The naming of the device depends on the firewall and how they are creating the virtual interface they use. 

The MailDir tree should be owned by the user that is getting the message delivered. You can fix the home directories with this little script. 

If this is a user key (as it appears it is), then it will be located in the file for userids that the user had access to. You will need to search the .ssh subdirectory of the home directories. (If you have automounted home directories, you only need to search the directory on one server; otherwise you need to search all servers they might have had access to.) The problem will be finding the first copy of the old key. The user's home directory on commonly accessed systems will be a good place to start. Once you have the key you can grep for it on other systems and userids. Searching for the key value rather than the comment will be more likely to find all the keys. 

Backup copies of the key should be password protected and secured as if they weren't password protected. 

If you are running SSL for only one domain this should be no problem. Configure a virtual server on port 443 with the SSL certificate. Configure virtual servers on port 80 for all the domains. You may want the HTTP service for the SSL domain to automatically forward to HTTPS. If you configure all the domains on both HTTP and HTTPS, you may want to redirect HTTPS connection on the non SSL domains to redirect to HTTP. The Apache rewrite documentation should cover the rewrite rules required. I don't know the capabilities of CPANEL but either option should work. Comments by others indicate you may have to manually edit the Apache configuration for the first option. 

We have been experiencing slow timeouts for unreachable hosts is extremely slow. Recent testing in our lab shows it may be a delay reporting negative ARP lookups. Dumping traffic during attempts to open a telnet connection to a local zone which was down for patching showed the following. If the source was Linux three ARP requests were sent at 1 second intervals, and the connection failed in just over three seconds. If the source was a Solaris server an initial five ARP requests were sent to the broadcast address at 1 second intervales. 5 seconds later more ARP requests were sent. ARP requests continued with increasing pause times until the connection failed after 3 minutes and 44 seconds. Tests were run from a global zone to a local zone on a different global. Both global zones are running on Sparc hardware. The devices are connected via level 2 switching equipment. Are there any tunables which will result in a fast (3 to 5 seconds) ARP failure? Are there any other tunables which will cause connections to unreachable (downed) hosts to fail faster? We appear to have the same or similar behavior between a variety of servers running on Sparc. As far as I can tell, Solaris is trying very hard get an address by ARPing the address, and does not time out very quickly if no host is replying to the ARP request. 

Many browsers will open up multiple connections to load resources like javascript. I see four of the requests are for java script. These connection may be closed quickly. 

The public name server should respond that private address doesn't exit. If it is first and running you will get the public answer. List the private server first. The public server should only be used as a fallback. A solution on the nameserver side is to use a split configuation. This would serve up the private data on the private network, and provide only the public data on the public side. The public server should only offer referrals (google.com, etc.) on the private network. 

As a general rule, use REJECT when you want the other end to know the port is unreachable' use DROP for connections to hosts you don't want people to see. Usually, all rules for connections inside your LAN should use REJECT. For the Internet, With the exception of ident on certain servers, connections from the Internet are usually DROPPED. Using DROP makes the connection appear to be to an unoccupied IP address. Scanners may choose not to continue scanning addresses which appear unoccupied. Given that NAT can be used to redirect a connection on the firewall, the existence of a well known service does not necessarily indicate the existence of a server on an address. Ident should be passed or rejected on any address providing SMTP service. However, use of Ident look-ups by SMTP serves has fallen out of use. There are chat protocols which also rely on a working ident service. EDIT: When using DROP rules: - UDP packets will be dropped and the behavior will be the same as connecting to an unfirewalled port with no service. - TCP packets will return an ACK/RST which is the same response that an open port with no service on it will respond with. Some routers will respond with and ACK/RST on behalf of servers which are down. When using REJECT rules an ICMP packet is sent indicating the port is unavailable. 

This clause will cause the configured spam filter to be run and spam report logged in the Exim log. Spamassassin will already be logging this data to the maillog, so I would remove the logwrite message as soon as you are happy it is working. 

Typically zones will be assigned to interfaces or vlans with or without address restrictions. With tight rulesets, machines in the wrong zone may refuse to run correctly. 

I think your title is incorrect. Should it be "How do I send eMail from another Domain?" or something like that. There are any number of reasons you get classified as spam: 

Firewall zones help document what is happening. The standard groups have standard restrictions. It is much easy to identify the fault in this rule. 

If you have a static IP, you usually configure all the things you get from DHCP manually. This includes DNS and other entries. Your administrator can give you the appropriate values. This is the preferred configuration for servers and other systems which need to work even if DHCP is down. Alternately, your administrator can configure DHCP to provide your static IP address as a reservation. This will provide you the fixed address whenever you plug into that network, but allow you to obtain a different IP address when you plug into other networks. This works well for portable systems which need a static address. On many networks, your IP address will be essentially static unless you off the network for a long period of time even without a reservation. As you are running Linux you can configure your static IP address in addition to the IP address provided by DCHP. Many DHCP clients allow this to be configured. On Debian (Ubuntu) based systems you can configure the IP address using a statement to the DHCP setup in . A stanza like this: 

You are transferring data close to the limit of the receiving interface, although it not running at its maximum speed. Can your switches handle the speed? Your bottleneck may be the speed at which you can read from or write to disk or it may be bottleneck in the network. A few questions: 

It looks like some php code is running too slow to keep up with the load. It also appears that far too many php-fpm processes are being spawned. Look at the configuration for . Try setting it to 5 or 10 and monitoring CPU usage. Once you know the CPU usage you may be able to calculate a new value by dividing 80 by the average CPU percentage. That may be a good starting point. 

Your access logs should show who accesses what files. I would install shorewall and allow incoming access only to limited services. It is very flexible in allowing you to log connections into and out of the server. 

You can start with one option and change to the other later. Some application containers have plugins for web servers that add proxy headers specific to the container. If you are using HTTPS. you will need a subject alternate name for each domain on the certificate. Alternatively, you can use SNI in the front-end (web server or proxy) to provide the correct certificate to the client (SNI capable clients only). 

The two authentications are independent. You enable Exim to authenticate on outgoing connections, with a client authenticator. You will need to configure a line in the Exim file for each server you need to authenticate to. The man page for describes the format of the password file. Incoming authentication is done with a server authenticator. These are likely commented out in the default configuration. The man page for describes the passwd file. You should consider enabling TLS on the submission port (587) for users to send messages. The following macros at the star of the file should enable incoming authentication.