A much faster way to do if x is an integer is . A good name for the function might also be 'array_permutator'. 

If a question of this sort pops up in a job interview, it may be a trick question, and you might actually be expected to demonstrate that you are conscious about not re-inventing the wheel. A big part of the value of .Net is that it is a very rich environment which provides programmers with lots of things already built-in and ready to use, (not to mention tested, debugged, and known to work problem-free,) so an essential skill for a .Net programmer is to know what is already there so that they do not waste time re-implementing it and debugging it. If you can rule out the scenario of the trick question, then here is what I'd say: 

From a personal standpoint, I think this method is fine. You might want to re-work it a little. I'd recommend creating an array with possible intersections, and looping through that array and checking user input against those. For example: 

First off, you have comments over many lines in your code. For example, comments like , or are completely useless. From looking at the code, it's clear as to what that line does. Comments like these should be removed. You shouldn't be too concerned about duplication in your code. The only major place where I see this is your HTML code, but, it's HTML, so that's kind of unavoidable. I like how you've done this without a framework of library like JQuery, and you still have pretty readable code. I would recommend using frameworks/libraries like JQuery, as they generally make life a whole lot easier. Finally, just for readablility, I'd recommend separating out the styles for each of your HTML classes/elements/ids. It's just makes things slightly easier to read. 

Looks fine to me. The only thing I have to notice is that should instead be . The reason for this is that if you were using bit #31 (the 32nd bit) then the expression would yield a negative number, so it would not pass the test for . 

You could, perhaps, derive RecursiveObject from FlatObject. In the degenerate case in which all objects belong to a single lineage (every object has one and only one child, except the last one) and you have lots of objects, then your recursive method will try to use an awful lot of stack space, possibly failing with a stack overflow exception. The way to correct this is by avoiding recursion and adding a stack data structure within your function, which then works in a loop. But of course you would not want to do that unless there is a very clear possibility of such a degenerate case ever occurring. 

Secondly, according to Python's official style guide, PEP8, your naming is incorrect. Variables and functions should be in , and classes should be in . If the variable is a constant, it should be in . Finally, why do you have as a subclass of ? Why can't be a top-level class? I see no reason it shouldn't be. 

Adding whitespace around operators generally increases the readability of your code, and if it voilates the 80 characters per line limit, you can always use the line break character, , to continue the line's contents on a separate line. 

Since I'm not a JS guru or anything, I'm going to give more of a style review, rather than a review of the code, but if there is anything I see, I'll try to point it out. 

My recommendation would be to first make one pass through your cells and populate a dictionary in which the key is the name and the value is the cell itself. Then make a single pass through the checkboxes, and for each checkbox use its name to lookup the cell in the dictionary and there you have it. 

The solutions proposed by Jeff and w0lf are very fine, but have you considered simply rearranging your code a little bit? Because even though the following does O(M*N), your question was about readability, not performance, and I think that people unfamiliar with linq will find this more graspable: 

Another solution would be to properly filter your input. It is easier, and it is also more dangerous, because it is easy to miss something. For the example at hand, you need to parse the user input into a number, and then convert that number back to string in order to append it to your SQL string, as follows: 

Documentation You're overusing documentation comments on code that doesn't need them to the point where it's becoming bad-looking fluff. For example, you have a lot of comments like this: 

This is obviously not quite complete, and it's very monolithic code, but any suggestions are welcome. 

tl;dr: If you are planning on adding more methods to each of these classes, then use them. If not, then don't. One of the first things you should check when deciding whether to use a class or not, is if the class has two or less methods, , and another function. Since your code doesn't like complete quite yet, I'm making the assumption that there will be more functions added to each of these classes. Now, I do have a few things about your code that I want to point out. Here's a list of small things you could improve. 

Fancy is not the word for it. This is insane. Ever heard of the KISS principle? Keep-it-simple-stupid. Unless of course you are intentionally looking for ways to make your code look obfuscated, and your executable file bloated. 

Make your method return an , not a , as the built-in binary search methods do. Make an additional overload that works with instead of . Make an additional overload that works with neither nor , but instead it assumes that implements . Keep the part, it is supposed to avoid arithmetic overflow if by any chance you are sorting an array with an incredibly large number of elements. (Not very important, but it demonstrates attention to detail.) Code the method as follows: ;-) 

For UTF-8 encoding, you can either use Python 3.x, which has built-in UTF-8 encoding, or you can put at the top of your script. I'm going to answer one thing on your "wishlist", the better progress bar. If you want a better progress bar, I'd do something like the below. 

But that's not all we can do, we can also remove the empty constructor, as it doesn't make much sense to have it. Our class then becomes this: 

Why is the variable in the method prefixed with two leading underscores? The variable is local to the function, so there's no need to make it "private". Finally, add some docstrings to describe your functions/classes. Docstrings are special comments that you use to describe your functions. An example docstring looks something like this: 

If you cannot modify , then write two helper methods, one for getting and one for setting the value of the day member of : Each method has a and modifies the appropriate member of . Good luck and have fun. 

Normally it would disgust me, but you appear to have a valid reason to use it, which stems from the pre-existing disgusting situation that you have to cope with these data objects that use ints. The only thing I would ask is, why can these data objects not use enums? What is it about their auto-generation that precludes enums from being used? I do not think that enums receive any special handling at the IL level, they are handled just like primitive types are.