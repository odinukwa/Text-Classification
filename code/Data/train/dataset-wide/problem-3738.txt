The simple fact is that most interviewers won't provide feedback. There are two major reasons, and the first is time. When I interview, for example, I usually end up looking at somewhere between ten and thirty resumes, and spending around six or eight hours minimum on direct interviewing - per position. What I don't have is any extra time in the day. So, spending half an hour or more writing up feedback for each unsuccessful candidate is hard to find time for, even if I want to. The second factor is that, while you want to improve, there are a whole bunch of folks out there who suck. Folks who respond to feedback with some variant of "** you, you *ing ***", or who use it to argue about how you unfairly missed their skills, or any number of other terrible ways to handle that feedback. That doesn't encourage people to respond - even to folks like you who really, genuinely do want to improve, and who will take it well. Actually, there is also a third possible cause: I often don't know about the hire/pass decision because I just file feedback in the system, and the decision is made by the hiring manager elsewhere. 

While not exactly wrong, I think accusing them of disrespect, etc. at this point will likely silence the behavior, but will also not help them understand why they need better names or how to come up with better names. If you take this path, you might find them just coming up with longer bad names and avoiding your steely gaze. 

Starting by assuming good faith, my gut tells me the interns did this because they really cannot see any problem with names like . I would bet a small sum of money that the sarcastic names do not come from a desire to be rebellious but from frustration that they don't know how to come up with a better name, only a longer name. And that kinda-sorta is what you told them, right? Short bad, long good. If you want these individuals to improve, you simply need to discuss, in the daily meeting, exactly why is a poor name and is a better name. If you have an example from your experience of poor name choice causing problems, that will help them. That "why" will allow them to choose good names from now on - whether those good names are long or short. Also let them know that it is OK to ask you or their peers for help or consult with them within reason, that this is not a test where everyone has to work alone, this is a collaboration. (I hope this is true!) Maybe that will allow them to ask questions and talk to each other, and resolve frustrations early, rather than wait for passive-aggressive stuff like this to show up in code review. Only if such behavior continues would I find it necessary to explain, yes this is not a real application, but this exercise and the style guidelines should be taken seriously for multiple reasons: 

Ask for an offer letter. Tell them politely that you were wondering if they had made a decision yet as to whether or not they were going to extend you an offer for a position. If they did not describe the position, as for the description of the position they offer to you. Even if they described this in the solicitation for the offer, ask for a clarification regarding the responsibilities, a list of direct reports (subordinates), and who would be your supervisor. Ask for the salary, compensation (bonuses), and full description of benefits (e.g. heathcare, vacation and PTO days, holidays, pension / 401k). If there was a signing bonus, make sure this is in writing in the offer letter. Ask for the number of vacation days you will have when you start. Ask for the expected start date or be prepared to supply a start date. Ask for a decision date: when do they need to know your decision. Consider their delivery of an employment contract / NDA / non-compete / request for drug test to be part of your decision process. Use that information to help you decide if you want to be their employee. Maybe their 'ask' is too onerous? If they balk, ask what they need from you in order for them to provide an offer letter. It is fair for them to ask for references, background check, and perhaps even a drug test before making an offer. It is also fair for you to push back and tell them that they can provide you an offer letter than is contingent upon you meeting the terms of employment (e.g. they can give you an offer that is only good if you sign within xx days, pass a background check, pass a drug screening, ...). I do not believe it is fair for a professional, salaried employee to be required to submit an employment contract to get an offer letter. You should not need to commit until they have completely described their offer to you. The only exceptions I can think of are related to the government, military, and classified work. 

I have similar experiences in my background. I was hired once to fill a skill gap. No one else in the company had a skill that they suddenly needed. I did my job well and after a few months conflict started. I was the only one who could work with certain components of the application. I became a bottleneck as work piled up that only I could do. One day I was sidelined as the company decided to replace everything I had produced with completely new code, done their way. My pride was hurt at the time, but in retrospect, it was the correct decision for the company. After a while longer there it was time for me to move on, and I did. If this sounds familiar, maybe it's time for you to move on. Maybe management will even re-assign you to something else if they continue to value your skills. Or if you can stomach it, maybe you can help re-write everything you've done in the corporate standard technology stack. If that's not possible, just leave. Either way, your code is probably on its way to the garbage can. That's probably the correct thing for them to do, if no one else understands it. And anyway it's the natural consequence of their choices. Make sure that in your next job, others in your team are applying basically the same skills as you, and especially that they have a code review process. When they ask you to change your code in certain ways, do it. Don't consider code delivered until it has passed code review and your peers will tell management (if asked), yes the code is good. Then there is no problem. It's perfectly OK to ask questions about stuff like this in a technical interview; I have done so many times. Hopefully this other developer who studied your code will give you a good reference. As a footnote, if you are at least partially responsible for your circumstances of working all alone, without buy-in from other team members, then you deserve at least some of the responsibility for the outcome too. (Did you push for using TypeScript / Node when others wanted to use something else? Did you use the newest, coolest library or technique even though something more basic would have done just fine? I've been guilty of this once or twice also.) If so, make sure to take a lesson from this outcome. But if not, take this experience to your next position with your head high. 

First rule of negotiating It is not a negotiation if you cannot walk away... it is complaining Decide for yourself. Are you: 

Desperate for a job - then take it and don't worry any more about it Feeling taken advantage of - then ask yourself is this really is the job for you. Perhaps you'll take it for a little while and move on. Frustrated and distrustful - be really careful working for people you don't respect. What other promise will they go back on? Confident and patient that you can get another job - politely say thanks but no thanks 

Cream rises to the top. Do the best work you can. When there is no work for your team, judge for yourself what would improve the product and get your team to work on making a demo of what might enhance the product. This could be: 

My read on this is that you were destined for this treatment from day one on the job. You said you were hired because you have skills no one else in the organization does (TypeScript, Node). And now that you have toiled to produce an elegant, expertly crafted, complex solution all alone, no one understands what you have done, and therefore you are seen as a liability by management. If all this is true, there is really no other way this could have turned out. In my view, the problem is structural, not personal, and therefore the blame lies in the situation and the process, not the person: 

Asking for more code is shady. But not, as you described, so shady as to justify walking away at this point. Since they are clearly interested to see what you can produce, perhaps it's time to seriously discuss hiring you so you can bring your considerable skills to bear on their projects.