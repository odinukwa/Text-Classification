There are already three arguments of the Long type, it may not clear to other developers which position is for which field (especially during those long nights...). If more inputs are required, it will make the constructor declaration longer. 

Now, the original approach described in the question works well and looks simple enough, but what if I went a little deeper with Java 8 features? Looks like a nice place to introduce ... 

Strip away any BOM from . If this is a MIME message, extract only the part and pass that recursively into this method again. Else just do a to get our desired array. 

This kind of code can be simplified as . Method names Your naming can be better refined to reflect what they are doing. For example, can be renamed as , following the standard prefix for methods returning a . can be renamed as . loop Your loop on can also be written as: 

You should be catching the stricter rather than the general , and use for the variable name (furthermore, sounds like the text-formatting-related exception class name). If you are on Java 8, then you can alternatively treat this as a mapping of to using the same method as the lambda implementation, e.g.: 

Formatting issue aside (that's a non-conventional way of alignment...?), since you have opted (pun unintended) to ask the user using a GUI dialog box, you should ideally present the answer back as a dialog box too. Otherwise, users may be hunting where the answers are. Oh, and about that usage... since you are using it, you should use a placeholder for your variable as well. 

The above block can be simplified as . Slightly nitpicking on this, but the variable name in doesn't quite roll off the tongue... perhaps you are looking for ? edit: For the following method which is implemented by this class: 

First thing first, it's , not . Second, here's one suggestion for . Assuming if you are strictly dealing with only 10-digit s, you can also consider using regular expressions to run pattern matching on the input: 

This takes care of closing your at the end, so you do not have do perform an explicit . First input I am not too sure why are you ensuring cannot be less than 2, since the problem statement only mentioned . I'll take that to mean an implicit assumption for non-negative values, so yeah even is possibly a valid input. There is also an easier way of getting your first input than performing your validation twice, and while you're at that you should consider putting it in a method: 

Style convention As you have used correctly in some places, Java's default convention is to use for method names, so having and is mildly jarring to look at. You also use a mixture of , and for variable names, and the default convention for non- variables is to use as well. Standardization is highly recommended here. Inheritance 

Have you actually tested the speed of this, using something like say jmh? I'll also be interested to know how this compares with something written and compiled with Nashorn (on Java 8)... 

Last I checked, a is a mythical animal species, not a specific race. It might be better to rename your , or simply remove this single-entry enumeration altogether. 

vs / was retrofitted to be part of the Java Collections framework, and if you do not need the synchronization feature, you should update to the class. In fact, you should opt for the interface, so that callers of these methods can eventually be refactored to pass in other implementations, like , and these two methods only know they are dealing with s. Indentation 

You should also think about edge cases, like how to reject (e.g. a new value like for ?). One nice thing about this approach is that it's quite easy to generate the lookup using the new stream-based processing: 

From an API perspective, you may want to consider if it's suitable to 'default' as for all the results of these operations. In other words, when the user is adding 2 meters to 2 meters, is the result better represented as 4 meters, or 4000 millimeters? How about adding 50 centimeters to 2 meters? Should it default to 2.5 meters, or 250 centimeters? What's nice about your code is that your classes are properly modeled as immutable ones - to nitpick, should be made too if you do not wish to extend it. Just remember that the comparison in must check for the same type as well, i.e. catch these as assertions instead of having the JVM throw a . 

Then, I need to validate the argument to the method, and this is where the improvement above can be applied: 

First, the slight benefit of doing a is that it does the error handling for you. Second, it removes the need for indices, which depending on the implementation, may be more optimal (see: ). The additional check on is to ensure that we do not compare with values. Here, they will simply be skipped, but you may want to consider a more stringent version that rejects the outright by throwing an at this point. Readability Whether one does a or is just down to one's interpretation (and thus readability). Since the task is to find the maximal element, I will tend to think in terms of 'great-ness', and thus prefer your version that uses the greater-than sign. Alternative (Java 8) As usual, if you happen to be on Java 8, stream-based processing saves the day with less verbosity: 

Create a of to the score (hint: an will be quite useful here). Find the largest score from the 's values. Loop through the again to put the required keys into a , and then the desired return object can be derived by using : 

Mutability After getting the missing numbers, Numeros has a new problem now: most of the original lists of numbers are gone! You should not be calling or on the incoming arguments, as that modifies their state (which can be really bad if the caller isn't expecting such a behavior), or throws a when immutable instances are passed in (which isn't bad, but you have to deal with exception handling now). Validation 

Implementing the wrapper class's will be quite similar, other than the slight difference that it should also return its own type: 

Magic numbers Without further context, and seem to be magic numbers here. You may want to consider putting them as fields so that they can be reused in an easier manner: 

Since Java 7, you should use on your instance for safe and efficient handling of the underlying I/O resource (i.e. ). Data structures As daunting as it may sound, this is actually an important concept to grasp for beginners. As pointed out by others, there is code duplication, and that is bad because As pointed out by others, there is code duplication, and that is bad because As pointed out by others, there is code duplication, and that is bad becuase As pointed out by others, there is code duplication, and that is bad because As pointed out by others, there is code duplication, and that is bad because I wonder if you realized the third because had a typo. Even though Java doesn't let you reference undeclared variable names by accident, typos such as using the wrong variable names (interchanging and perhaps?), numbers or operators may still allow the code to compile; that is when bugs sneak into your codebase and your 2:47 am coding nightmares. The point here is, instead of using upwards of 28 standalone variables (, and ) to represent each counter, you should be using an array for starters, and eventually progress to Collections or even a -based processing approach (which I'm simply offering as links here). For example, if you are only interested in counting for , spaces and symbols, you need an array with 28 elements: 

Don't expose state publicly too easily is a field, which is not recommended as you are freely allowing callers of a instance to also freely modify the elements within. Consider a getter that returns an unmodifiable of the state, it will be even better if itself is an immutable class. 

Java 8? If you happen to be on Java 8, then congratulations: the new classes ('Time APIs') are much better for chronological representations. You can then consider rewriting the same method as such: 

I think it'll be better if a processed array without the initial command-line arguments is passed in here. Anyways, assuming if you prefer to keep to the current approach, you can use the familiar stream processing for this too: 

is used often, consider putting that as a script variable, if it's not already present as an environment variable provided by your shell user profile? Let's assume , for the suggestions below. You are invoking three times, the problem being that new files created during each invocation will be missed by the subsequent one. This may be less of a problem between the first two, but will be for the second and third loops that are separated by a user prompt. The other question is ask is whether your renaming of files should be done as part of the copying (i.e. later) process, or do you always want to rename the files regardless of whether the copying is done. If it's the former, then you should only construct the new name within the final loop, for example: 

And then your does some checks here and there for the current value (see: ) in order to derive the correct conversion. Assuming your approach in is largely sound, what you should have implemented in each value is the method (without the first method parameter, naturally), so that they can tell the common method how to perform the character replacement when required. wrapper methods Your methods are just wrapper methods, which means you can do without them as well. If you're concerned with using as the class prefix everywhere, you can do a , replacing the asterisk with the three methods you need. Reinventing the wheel Come and think of it, Guava's would be an almost-identical fit for your usage if you'll rather not be reinventing-the-wheel. With a helpful dose of Apache common-lang's for the "Title Case" formatting, you should then be good to go... edit: Lambdas Your code effectively needs to handle two scenarios: 

These will modify the backing list inside your method argument, which is most likely an undesirable outcome. Fixing them is just a matter of wrapping it in a new object (using Java 7's diamond operator): 

Shortening the process Alternatively, you can consider to expressively write (pun unintended) a line of output, the only thing to be aware of is that you will need to turn your single into an , e.g. using . Putting it altogether: 

The check before calling the method is redundant, as a will contain unique elements. Also, since Java 7, you can rely on generic type inference for object creation, i.e. a instead of a . 

This reduces the reliance on temporary variables, and uses the ternary operator at the end for the statement. 

is used here to make the generation slightly more expressive. The method body is now more compact, and hopefully more readable as a result: 

The sample implementation shown below for does not perform any validation. Actually, as a result of the operation in the previous step, it will be quite tricky to make sure that \$1 \le m \le n \le 1000000000\$, so I'll leave this as an exercise to the reader... (hint: map each input as a to facilitate the validation first). Collect all results into a for further usage 

There's just one simple but effective suggestion here, method references. You can specify one method reference for your key and one for the value. If you do not mind introducing a new method for that returns the verification strategy (following your somewhat unconventional-for-Java coding style): 

For your implementation, since is not implemented yet, you may want to throw as that is the recommended usage. For your test class, is to add to the end of the queue and is to remove from the front. That is why queues are known as a first-in-first-out data structure. This is probably just semantics, but you should try swapping the operations around and see if there's any unintentional bugs. More info from Wikipedia. 

@RoToRa has some good points. Creating so many s while recursing is really an overkill, and assuming even if the algorithm works (albeit inefficiently), I will be more inclined to use representing the direction instead of s. Also, the logic needs more clarification in the example below... if I'm heading/headed(?) north of my starting point, then I'll head in the opposite direction but with my direction "North" still...? 

Unless I am reading incorrectly, you should not require any of the methods for the three types as they are already... sorted. 

You have a 'guard clause' around your logging lines to prevent unnecessary concatenation, but for consistency I'll suggest that you use braces for the statement too: 

Where applicable, it's recommended to specify the explicitly, instead of relying on the default. One difference with this approach is that newlines aren't normalized to like what you have done here. If this is crucial for your usage, then a slight refactoring can be: 

You can think of it that the calculation logic is not baked into the payment calculator, and that the logic can be maintained separately. For example, a more complex implementation might be retrieving prices from a database, and the calculator does not need to deal with any database connections know-how. 

Also, technically speaking, this is not a simple numbers-to-english translation, but an English representation of monetary values. You can alternatively call your class as . 

Since the smallest unit you have to deal with is pounds, you may want to consider representing prices as already so that you do not need this oddly-named method to 'transform' the price into a usable key. Alternatively, if you have to start handling pences, consider working in that base, such that this method returns you the value in pence, e.g. 27550 to represent £275.50. vs for Customer ID You can use for the customer ID, and let auto-boxing do its work when you want to use it as a key in your . Unboxing potentially values into an is bad, but boxing from an is generally OK. Comments You have very verbose comments in your , and I think your solution might have been a bit better if you actually incorporate some of those changes. :) On a related note: 

One disclaimer to add first: I know variable name is not ideal, the only reason why I am using a single character here is to make the code formatting look slightly better in my IDE code formatting settings. Feel free to comment on everything else. 

You don't need the temporary variable. However, similar to the previous point, you may consider having a temporary variable to store the results of doing the . Do you really want to throw an for existing data? How about simply returning the unmodified? 

The poor use of is nothing better than just saying , and I will then prefer the easier-to-read form. I think the three-element array is unnecessary too, it will be more straightforward to just use them as, e.g. , , . Is really just seven spaces? Why not call it as then to standardize the names? I will go with something like , and though, or even create a simple to represent them. Since you are already referring to as , perhaps you can refer to as . Finally, yeah, you should avoid using and stick with here to reduce the amount of unnecessary casting.