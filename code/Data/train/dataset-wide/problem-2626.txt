I'm not a fan of intermediate variables that have a short declaration and are only used once. I'd change 

Furthermore, not entirely sure if it's limited to Web Api or Web Api 2 but I prefer to explicitly define the action's attributes: . Likewise Web Api 2 provides very handy (and very, very configurable) attributes. 

You're again linking the presentation with the codebehind logic! Either use the presentation string from the resourcebundle or, better yet, use the enum that corresponds with . This does require you to change something because right now you're passing a to instead of your . 

It has no instance fields so you might as well make it a static class with static members. That way you don't have to create a new object every time you want to format an exception string. 

As I noted in the comments above: indenting. Braces are written on newlines (but not indented themselves) so an statement looks like this: 

Your contains an argument . This doesn't tell me what it means, so I would suggest using a named argument. 

Naming conventions! Look through the list here but keep in mind that private non-static, non-const fields are also accepted to be . 

The benefit of this is that it will only call the database once (network latency is one of your demons) with the downside being that it retrieves more items than you're interested in. 

Granted, this will duplicate some fields across types but it is a fairly flexible way of allowing you to define exactly what you want returned for each request. In this scenario the type is what you use in the backend and are responses for the specific situation they're responding to. Personally I like this because it allows me to easily define what should be returned when but on the other hand it does introduce quite a bit of duplication. If you feel really compelled though you could look into generating types based off annotations but that might be going down overengineeringlane perhaps. 2. Select fields based on request I see three options here: 2.1. Either you pass in a list of strings in the request which indicate which fields you are interested in and then you build a JSON response that only contains those fields. 2.2. You define a few configurations beforehand and allow the user to pick either of those which will return a response based on this configuration. This can be done with hardcoded types or through some sort of lookup service which uses reflection like your example in the question. 2.3. You don't pass in any query since it isn't really needed anyway if you're adhering to REST principles: if you want the overview of books you should query and when you want a specific book's information you query . This will already tell you what kind of information you should return. 3. Work with pagination This is also a common approach: simply return x-amount of objects and indicate in the response what "page" you're on. When you allow your API endpoint to take in this page as a parameter, you can gradually return data which solves your underlying problem: too many objects for one response. Do note that you should define some sort of order somewhere. Either the user does this or you have a default ordering, there's a lot you can customize here. A sample implementation could look like this: 

Your intuition was correct, you're not doing asynchronicity the right way. Take a look at this bit of code: 

Each request starts with the same baseurl; factor this out to a private field and use that private field in every method. This will give you an easier screening of what the exact API path being used is. 

Notice how I also added so "Y" is also accounted for, and used to make the code more descriptive. It's ongoing This is a very minor remark so feel free to ignore the advice it if you think it isn't important. Your loop does this: 

Conclusion It looks better already in terms of decoupling presentation from logic but you're still causing redundancies: should never be a separate collection. Instead you should bind your listbox that displays the titles to your 's property. That way you only have a single collection to deal with. 

You can now happily change the display of your itemslist and easily add more menus. If a new page has to be added you can create a new enum value, initialize it to point to the correct displaytext and add it to each page that should have it. 

Use instead of to exit a loop. It leaves room to add more instructions beyond the loop without having to change the implementation. It's also a more natural way to break out of a loop. 

Iterator If you want your class to be able to be used in a loop, you could implement . Generics Your datastructure is not generic so you're losing out on a lot of possibilities. Kaput Your code isn't working as it is. I'm not entirely sure why (it's 3:30 AM so I'm not going to debug it deeply anymore) but I followed a hunch and this small example demonstrates it: 

Turn it into a parameter with default value 3. That way you can always decide later that the user can change this without much trouble. 

I don't know why this is being done so this would be a good place to put a comment detailing why this is done. Usually an undercore is used to indicate that the variable will not be used. Since you do use it, use something more descriptive like annd . 

Unless I'm mistaking, you don't actually need it as an interface. Note that I also removed the explicit type parameter since that should be inferred from the argument passed to it. 

I personally prefer over because it is sexier but I understand if not everyone has seen the light yet. However, do keep the consistency and either stick to or but not a combination of both. 

As you noticed: it's hard to force comments when the code is written well. Once you get rid of magic values, create descriptive names for both variables and methods and make sure each method does one thing you have basically reached a so-called self-documenting code. And that's good: this is the kind of code you want to reach. However, teachers are teachers and they won't always recognize your awesomeness. Luckily for you there are two main categories of commenting. Many new programmers comment the what: "what does the code do?". These are very uninteresting comments, an example could be this: 

You don't have a parameterless constructor which forces each queue to be instantiated with 2 elements. This isn't userfriendly since I might very wel want to construct it first and then add 5 bazillion elements to it. Your code already allows it though: technically can never be as it is, yet you check for it. You can add a constructor without a problem. 

I would consider making this a generic and do the conversion inside that method while throwing a for types that you don't want to support. The above idiom smells too much like Java and we're better than that. Notice also the typo . 

Ideally this should be returned in two different methods, if possible. This follows the Single Responsibility Principle. 

There is little reason to do this. If you include the stacktrace in your logs you already know where the problem exists; the only thing you'd miss is the input which you might know from different channels (and often isn't necessary to figure out the problem). Noting that your example returns which is probably not what you intended, I should say that the change I would make is to use instead of which will instead return the default value - for a reference type. You can then work with a simple check to see whether or not a record was returned instead of having to start using try-catches. Yes, you could do all this to provide specific error messages. Personally I am not a fan of it and I prefer to derive this from the code itself (through for example the before-mentioned check).