I need to lock on my AesManaged instance to call CreateDecryptor() however the CreateDecryptor() method is not thread safe and this function could be called by multiple threads. Is this the correct way to create a disposable object while needing to use a lock on the parent creating the object? 

With the suggestions from svick and some other tweaks I made while waiting for an answer here is the final version 

I think the is not needed but the person who wrote this originally claims he was getting intermittent errors during run-time when in production environments when it was not marked unsafe. Was he right about needing or did he have a problem elsewhere that was just fixed at the same time that made it look like fixed the issue? 

Testing Now I need to test this. First we load a single key:value pair, where the key is a hashable structure. I chose a tuple with 3 integers: 

Update 1 Above: Runtime test without power-functions including Janne Karila suggestion to break down the power function to x * x * x 

Update2 Above: Runtime test without powerfunctions and with Justin Peels recommendation to use return list(a.values()) 

Next we can test our bulk-load method: together with the "many keys - shared value" which is focal in your problem: 

This also works as our assertion in the last line doesn't complain: The value of d[1]...d[3] are the same: The text string I add two more tests, which should look very familiar to you, though with minor exceptions: 

@Heslacher's and @Sleiman Jneidi's answers are really good. Just in case you want to have a list implementation, you can compose List inside your custom-defined Stack ADT. This way, only stack methods will be exposed outside, excluding that of List's. 

Code Explanation: First, use a two-dimensional array. Each row holds details about the question, answer, and choices. The number of rows is equal to the number of questions. Dedicate column 0 for question, column 1 for answer, and columns 2 - 5 for choices. A sample array content is shown below: 

As an alternative of manually going through the loop to construct the comma-separated contents of the List, you can take advantage of the List's method alongside with method of 

I am writing a new web service that will be performing a lot of large data load operations. To do so I am moving the data to a temporary table then merging the data in to the live data via a stored procedure. That part I have down and working and am very confident in. What I am doing now is trying to optimize the loading code to help take the load off of the IIS server that will be performing these operations. Here is what I am currently doing synchronously and works fine. 

The part I am not sure of my self about is that section. I thought it would be good to start opening the connection and creating the temporary table while I populate the bulk copy column mappings, and I have used async/await many times before but this is the first time I have used in conjunction with the async/await syntax. Did I do it correctly, or should that be ? I still do not exactly understand when I should be using . EDIT: Ok, is not listed so I could not use it even if I wanted to, but if anyone wants to include a explanation in their answer of when I should I would appreciate it. (P.S. Do not worry about SQL injection from the strings being passed in are hard-coded resource strings with no user input.) 

Second, breakdown your main process into sub-processes. For each sub-process, handle them independently. In case that there are required fixes to be done in your code, you only modify the sub-process(es) responsible for them. Sub-processes: 

In line with @M. Mimpen's answer, get all methods of object and store them in , where the key refers to the key from your parameter . An alternative to this, is putting an entry to Map every time an entry is added to your (the one you pass to the method). 

Initialize items (questions, answers, and choices). For each item a. print question and display its choices b. ask user's answer c. Check user's answer. While it is incorrect, go back to . 

This is a simple repeatable question regarding the usage of Python3's comprehensions: Could the Python3 syntax be used in another way to speed up the process, further so the gap between Python3 and numpy would be reduced? (see chart below). The results & code: 

So far so good. A slightly annoying thing is that we can't really read what is in the database even though we can get things in and delete them. This calls for the SELECT STATEMENT - or python's method. But(!) we need to be careful, as our database stores data internally as a s that are accessible from keys. So we need to unpack them onto something useful. As I like working with lists, I have chosen to provide lists, unless its a single value, whereby I only return the value itself: 

For instance, in row 0, the question is "1. Which country currently emits the most greenhouse gases?"; the answer is "B"; and the choices are "A. United States", etc. Since you have fix index dedicated to hold a particular value (column 0 is always question), it is a good practice to declare it as a constant inorder to make your code more readable and reliable (less error in encoding). 

SPEED - your code is faster because it does not have overhead processing on concatenating objects. In Java, String is immutable. In effect, everytime a concatenation is performed, a new object is created. EXTENSIBILITY - your code is less extensible. I agree with @awashburn's answer. Your code is less flexible to cater to changing requirements. MAINTAINABILITY - your code is more maintainable. You can trace the outputs directly because in every condition, you statically specified the target output. RELIABILITY - your code is less reliable. Outputs are made up by combining words like Fizz, Buzz, etc. They are prone to typographical errors (human tendency). REUSABILITY - both codes end up to be less reusable. The method should accept input and return output. Also, should not be placed inside it.