I find that I naturally tend toward structuring my unit tests like this when I write them first using TDD. I imagine BDD would have the same effect. This results in tests that apply to the class as a whole rather than picking apart each method. 

* Coincidentally, $5 is the maximum amount of money you should spend trying to optimize this code. ;) 

The major problem here is using imprecise floating point values. Not only does it slow the entire process (minor quibble), but it will produce incorrect results once the values pass the integral cutoff of the field width. If you truly want to allow calculations approaching infinity (or what? 24 bits?) you need to switch to which can model "exact" integers of any size. 

RECURSIVE SOLUTION: NOTE: it assumes that the input is already sorted. You could sort this at every call of the function, but this seems like unnecessary overhead. 

In python, the first thing you need to do with a recursive function, is to figure out a base case. Here, we want to keep going until we have k number of primes (or until k = 0), so that is our base case. Then we test to see if is prime or not. If it is, we add it to our growing list of my_primes. Then, we go to the next value to test (), we can reduce k by one (since we just added a new prime) and we continue to grow our list of my_primes by calling the modified: . Finally, if it happens that is not prime, we don't want to add anything to and all we want to do is test the next value of . This is what the last return statement does. It will only get this far if we still want more primes (i.e. k is not 0) or i wasn't prime. Why do I think this is more readable? The main thing is that I think it is good practice to separate out your logic. does one thing and one thing only, and it does the very thing it says it does - it tests a value. Similarly does exactly what it says it does too, it returns the first k primes. The really nice thing, is that this all boils down to one simple test: 

Move the validity check into the constructors so you don't have to check everywhere you want to create one. 

PHP provides quite a few handy array-manipulation functions. This is a case for which passes each value to a callback and assigns it to the same key in a new array. 

Without seeing how the numbers and styles are used, I may have gotten the above wrong. What exactly does hold? What is in each ? 

One quick improvement to your solution would be to use instead of the chain. The only real problem I see beyond the complexity and non-obviousness of the algorithm is that it can end up doing a lot of unnecessary swaps--often in-place. While could be written to avoid them, you still pay the cost of the function call. Another solution is to do it in two passes: first pull all Rs to the left and then all Ws to the right. While it takes twice as long, it's still equivalent to O(n). 

the rest just sets up the boundaries (i.e. the kth limit). So once you have seen a bit of recursion, you intuitively zoom in on the important lines and sort of 'ignore' the rest :) As a side note, there is a slight gotcha with using recursion in Python: Python has a recursion limit of 1,000 calls. So if you need to recurse on large numbers it will often fail. I love recursion, it is quite an elegant way to do things. But it might also be just as easy to do the function as an iterative function, or using a generator. 

The class currently waits for a second and then takes the order and makes the food available immediately. Instead, it should take the order, then wait, and finally make the food available. If you were to create a queue for the use of the chef while cooking, you could use a priority queue (orders the elements in the queue) and have different types of food take different lengths of time to prepare. The chef would then have multiple things cooking at once and deliver each after its own cook time has expired. With the above in place you could really kick this into high gear by creating multiple waiters and chefs and add a separate thread that randomly creates clients that place random orders. 

as you say, it does look like this code is doing exactly what you want. But it also looks like you are repeating yourself in a couple of places. If it was me, I would prefer to loop through the file only once and check for both and at the same time, and then only print out if the sample text is there: 

Now, I know you didn't want any "fancy-pants" coding, but this is actually really really similar to your iterative approach, just using recursion. If we look at each bit we have the following: : this tests whether the value is prime or not. Just like in your code, it takes the modulo of against all of the primes up to the square root of . This isn't too tricky :) The function gathers all of these tests and returns a boolean (True or False). If all of the test (from 2 up to sqrt(x)) are False (i.e., every single test confirms ti is prime) then it returns this finding, and we know x is prime. : ok, this is recursive, but it isn't too tricky. It takes 3 parameters: 

As Kinjal suggests, logging the error is a good alternative when failure is recoverable. However, I would throw a custom exception (or use ) and let the caller decide to log and continue or terminate. I really don't like returning success codes when I can avoid it because it muddies the code with checks. Finally, instead of setting a certificate or leaving the field blank consider modeling a certificate checking strategy. This would require a simple one-method interface with two implementations: and . Again this improves testability by providing a seam for mocking, separating concerns, etc. It also removes the need for checks and allows for more strategies and certificate types. 

Other than the few things pointed out above, it might be 'cleaner' to use a helper function to test primality. For example: 

There is more than likely a more elegant way to implement this using list comprehension. But conceptually, does this work for your needs? 

EDIT Added loadData(); slight tweak to return a dictionary of dictionaries, instead of a list of dictionaries: 

It seems that you are looping through the entire job data set 3 times (once each for salaries, descriptions and titles). You will be able to speed this up three-fold, if you extract all the info in one pass: 

Encapsulate Separate and encapsulate some of the logic into custom classes rather than passing around collections directly. Doing so improves testability and reusability. One prime example is the character frequency map which could easily be reused in many other programs. Here's a simple implementation that provides only what's necessary for this program, but it could certainly benefit from methods such as , , etc. I also haven't bothered wrapping the exposed map/set in unmodifiable collections which would be advisable (though see below for another option). 

Because the intervals are already sorted by start time, you can begin the inner loop at and simplify the test and drop the call to :