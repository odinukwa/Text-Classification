It is much more readable. Ditto for . Also why are you waiting till the API call is complete to throw exception in case there are more than two users? Just stop the whole thing when usersString has more than 2 user Ids when the class is created. And instead of this 

What's wrong? Where? If you catch an exception then you at least add the stacktrace to the printed messages. How? Google search. About catching only I say only catch what needs to be caught. If you are catching exceptions then if you can add some thing in the catch block to recover. If not possible then at least log a error message which does not require you to manually check what went wrong. Now what else can be done better? You can use Java's generics to make your Stack reusable. You should have created a class and then a which used the generic stack class to do its stuff. In your example the thing that you are calling is actually the as per the logic and the class that you have named is a stack. The main class should have just given the string and gotten the result out. 

Option Explicit I cannot stress the importance of this being at the top of ALL of your code modules. What does is it causes a compile-time error when a variable is undeclared. This prevents run-time errors when you try to use variables that aren't set properly, and it will save you countless hours of debugging time. Go To Tools > Options Editor > Require Variable Declaration. You'll thank yourself later. Variable Naming Not to be a jerk here, but your variable names are horrible and difficult to understand. You have rng, rng2, rg, q, s, r, cell and the worst part is that you don't need all of them. I declared four variables total (and one of those you didnt even have a variable for, but you did need). Here's a tip, make sure your variables make sense. You should be able to look at them and have a pretty good idea of what they do. is easy to understand: it is the range we are searching in. is just as easy to understand: it is the cell we are currently searching in. Finally, , you guessed it, is the cell we found using our criteria. It is pretty much bulletproof when you start to code like this (actually, not really. You'll learn that bulletproof coding takes a lot more work than a handful of good variables.) and it makes your code easy to maintain. Additionally, there is no need to declare two variables if you need one. In other words, if is used only for the first loop, and never needed after that, I dont have to make a for the second loop. I can just use . General Names Just as Variables need good names, so do subroutines. It is all too easy to take the that the recorder gives us, and to leave it this way. When you have larger projects, and become undistinguishable, and god forbid you have a and as well. Name everything. That's pretty much my mantra. From Worksheets to Tables, and PivotTables, and Workbooks, to code modules, subs, functions, etc., give it a proper name. The sooner you get in the habit, the more time you'll save. Implicit Object References You'll likely hear this one a lot, so it is important to learn. Whenever you are working on an object, you must consider the scope of that object. While looks fine to the untrained eye, anyone worth their salt in the VBA community will point out that it is a unqualified Range reference. Even worse, is if we have and one step further is this nasty bit: 

Note that I used triple quotes to wrap around the stings to be printed. Read PEP 8 for why so be sure to read it. Any text editor with syntax highlighting would offset in reading due to strings being wraped around. Hope this was helpful. 

I am going on with refactoring my code base while migrating from Python 2 to Python 3. I am using generators to make reusable components this time as I am more comfortable with them this time then last time. But there are times when I am stuck at their use. Like below example. These two are essentially same with one infinitely generating and other with a limit. Is there a way to make these as one function? Normally an extra optional parameter as limit will do the trick but with generators I am not sure how to use them. Is there some way to do that? 

If I interpret this bit correctly, you're just testing whether there is a second dimension within the array, and if there is, you're looping through the array as a 2d array. Otherwise, you're looping through as a one-dimensional array. Wouldnt it be nice if we could explicitly say that in VBA? 

This allows me to convert a range to an array, and then use those values more efficiently. Variants do have their place when used properly, but they shouldn't be used out of laziness. For example, in your code, (which should be ) and (which should be ) are used as numerics (and as such, should be Longs) but are declared as Variants. I assume, it is because they are then implicitly (without explicit direction) converted to strings, but even this doesn't justify the use of variants. You could do something like: 

I would say you should definitely make a library. After that I'll go and indent this code properly. I couldn't understand where the function started and where it ended in the first go. If you want readability that is a something that you must seriously consider. All of your functions need proper indentation but for the function it is a must. There is a lot of redundancy in your function. 

You should just keep something that actually matters. Simple assignments? Let groovy do that for you. And rather than this 

By consistent style I meant something like this. If you use braces when a statement like , etc. contains single statement then use braces for , etc. containing single statements everywhere. 

This declares a myRange (which the reader expects to be a Range) and converts the range to an array. This in itself is confusing, but, even worse, I can still do : 

Finally, making these few small changes has a huge impact on the readability/maintainability of the code. Here is the finished product (identical in function): 

Note the subtle elegance of the code. I didn't notice the effect this has when I first started writing classes in this way, until I had about 10 different classes and I had the RD explorer open. From top down: 

I have started learning Clojure so please share whether there is some easier way to read lines or anything else that can be improved. 

You should read Python tutorials on exceptions specifically this section. In this the part about use of is relevant here. Combining that with list comprehensions this 

Similarly move and inside . Remember encapsulation. Ball's location remains inside Ball. You have this in the method of 

I wrote the below function for doing a variation of bisection search that I came up with. This can be useful when the higher bound is not known. It assumes that as number increases the result of the condition is also increasing. For example - find the largest classroom size where the probability of two students sharing the same birthday is less than 0.99. If I have a function that finds the probability of two students sharing the same birthday based on number of classrooms then I can pass that function and perform a bisection search over an infinite range to find the highest number. 

This is easily handled with a simple function that checks for a potential error instead of triggering an error. Code first, and then an explanation: 

I highly suggest learning Type conversion functions as well. In Closing There is much more to learn beyond what I have highlighted, so don't get discouraged when, at the end of making these improvements, you still have more to learn. The key is to improve with a purpose. I strongly suggest learning about 'Clean Code'. I left notes within your code as well to help you along. The most important part is that you hold yourself accountable for improvement. I can honestly say that my code from three months ago is bad, and my code from six months ago is repulsive. If you can look back and not see the flaws within your code, you arent pushing yourself enough to improve. Best of luck! 

Firstly there are 2 classes so don't show them as a single code when showing your code. Place a heading with the class name then your code then second class name then your second class's code. That makes it easier to copy paste it into Eclipse when seeing the code. Why have you named the parameters as and and still using the keyword? Why are you making the variable names different in the first place? It just adds confusion. Name them as and and then use the keyword. Period. You are throwing a when is and the message is . That will become confusing... Also you don't need to throw that explicitly. The assignment to will throw the exception and give you a proper stacktrace already without any extra code. The loop can be made a loop very easily and will limit the scope and extra variable ( in this case). Note that you are doing in both as well as . That shows you didn't take the time to look at your own code. You passed to the function and forgot that it is a variable also. If you have any intention of not changing it then make it explicit and declare the parameter as in the method's signature. Also If I am correct then you have used only to make it one less than the so that your algorithm works. That means your function will break the moment you decide the startRange to be anything other than 1. Also using such magic numbers and such variable names as x is a bad idea. Really bad idea. Take some time to refactor the code yourself. It pays if your code is easy to understand by other programmers. Your code can be changed to this and I think now it is much easier to understand the flow of execution of the current program. 

First, it loads in all the data from a (excel Table) into an array. That's the easy part. Once we have the data, we need to know the indices of the headers. This makes manipulating the data much easier. It also allows you to move columns around all you want without breaking the code (just ensure the names are still there). Using a custom we can store all of the data in a defined structure. A is similar to a in other languages. In essence, it is a variable that has properties, but that isnt an object. Thus, it cannot be 'ed up. Loop through all of the rows, and create new records for cells with multiple addresses. Since the cannot be 'ed, it will retain old values. This means we dont need to re-create the entire for each new row. We just need to change the new values, then add it to the collection. Once the collection is loaded with records, we can translate them into a new array that is appropriately sized. No need to add/remove rows. It is just the right size at creation. The method will take an array and a worksheet and it will clear the cells on that worksheet, put the array onto the worksheet, and then turn that output into a table. Point it where you want the output to go, and it will do the rest. 

I am ignoring the implementation details like it should be . Similarly the second term is with summation running from 3 to n with step of 2. Third term is `6(n - 2). I'll leave calculating the second term to you. Simply adding these 3 terms gives you an program. 

You are opening the file(never closing it) and then using a loop. Try using the statement and list comprehension to open, close and get your list. This goes for both and . and are declared before the loop starts so you can declare and . For the reason see the part "Avoiding the dots..." in Python performance Tips. You can try to use instead of if you are on Python 2. Using generators might be better instead of creating the whole list. You'll have to time this. This isn't much but might be helpful.