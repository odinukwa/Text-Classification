Yes, the original code is awful. It is 200 lines of spaghetti code; I have no idea what it does, it is impossible to reuse and extremely difficult to test, debug, or change. 

Filtering I'm not a fan of the function. I don't know why w3schools recommends using it, but it's the wrong approach to XSS (you should encode when echoing, not when retrieving user input), and it messes with your data ( becomes without any need for it; maybe you want to have , for example because you want to send an email to , not to , etc.). Email Validation Email validation is difficult. that being said, yours doesn't work as intended. For example, it sais is valid. This is because it only checks if any part of the email address match the pattern, which does. Structure Your code is quite nested, which makes it hard to read. For example, if I want to know what happens if is not set, I need to scroll down quite a bit. It turns out that nothing happens in that case. You can rewrite your code like this to avoid this issue: 

Extra: using as a counter For extra efficiency and sheer stupidity, we can use (which pushes the length of the stack) as a counter to save on stack manipulation. Granted, this would run into memory problems for large numbers and is terrible for readability, but I'm sure that's the least of our worries if we're factorising in ><>! 

aren't particularly useful to someone who doesn't know what is ("Why would a piece of code be a number?"), and is probably still not useful to someone who does know what is. Something like 

Error Handling Currently, you don't really have any error handling (that you have posted). It seems that incorrect user credentials would result in the same page for the user as an incorrectly written query, or problems with the database. I would either check the return values of , etc, or manage this with exceptions, so that you at least have the option to report to the user if it's their problem, or a server problem. Security Your system seems secure. You use prepared statements (and you use them correctly), and you hash your passwords using bcrypt, which is also recommended. There also do not seem to be any logical errors with your login process or your session management. It's generally recommended to regenerate the session id when session data changes (such as on logins), although that's not as important as it used to be (as is false by default). Still, regenerating session ids is good practice to limit the dangers of session fixation and session highjacking. 

First off, I'd like to say that you're asking two questions which are at odds with each other. Having readable ><> code usually requires a decent amount of whitespace, but minimising the number of ticks requires reducing the amount of whitespace and a bit of golfing. I'll assume that you're primarily aiming for the latter, while keeping the code as readable as possible under this constraint. General comments Less than A minor one about your explanation - is , so by having at the top of the stack you're checking whether , not . If it were the latter, your code would fail for numbers like ! (no factorial) Floats Just a note of warning: both the online interpreter and the official Python interpreter use floats for division, so this program would most likely fail for large numbers. Unfortunately, I don't know of any good way to perform integer division as efficiently. Wrapping and reading direction Wrapping the last line doesn't affect efficiency, so it's more readable to have the follow the . Also, if we wanted to save every tick, we could have this part on the second-last line instead: 

If performance is an issue, then yes, use StringBuilder (see here). Another advantage of this approach is, that you are separating the collection of the data from the printing of the data. It would be easy to change the print command with for example a command to print to file later on. Because you are using recursion, you would need to pass it as a parameter: 

There really isn't much that you can do wrong here. You correctly tell the browser to delete the cookie, and there isn't more that you can do. But if this is all your logout code, you are vulnerable to CSRF logout. It is debatable if this is a security issue; some argue that it is not, as cookies may be forcefully deleted by overflowing the cookie jar, but that's really a browser issue that may or may not exist on the client side, so to be on the save side, you should add CSRF protection. As a matter of best practice, you should also always die after a header redirect, as a client doesn't have to follow the redirect and code afterwards will be executed. This doesn't seem to be an issue now, but it may be in the future. Other than that, your code is fine, but I would remove all your comments, they are just repeating what the code already says. If you want structured and named code blocks, just add functions. 

Outputting characters This only concerns your testing code, but outputting single characters should be done with quotes for readability, i.e. rather than to output a comma. Would-be readability comments In terms of general ><> readability, I wouldn't call this particularly readable, but under the constraint of efficiency it's pretty good. However, if the goal were strictly readability, here are a few comments: 

to save a tick. Division by 2 loop It's a bit more logical to separate the initial zero check from the rest of the first line, which divides out factors of 2. This is also a bit more efficient, since we save on the jump. 

create-Method Parameters Here, you could also do the same as in the constructor. But I don't think that this is really necessary. You don't need two places to set these values, so I would remove them from (at a maximum I would add getters and setters for them, so a user could construct a object and then change one of the values later on). I would assign the value of $name directly at the start of the method to $url, and then only use $url from there on. Or get rid of the $url property and use $name throughout. create-Method I would move the function on its own line outside the function, as they do different things. Right now, you allow the url to be empty. Is that something that should be allowed? If not, return a default value at the end in case is empty. Encoding For me, your approach does not work. for example becomes . If I use instead of your / line, I at least get . I'm not sure why this is, and I tried searching for a better solution, but couldn't find any. I don't want your solution to get lost, and since you cannot edit your original code, here is the code that works: 

Note that I've also flipped the for readability since it fits going left-to-right. Print if not 1 Speaking of , this reads as "halt immediately if the number is 1, else print the number then halt". This could be more clearly expressed as 

to "print the number if it's not 1, then halt". Alternatively, you can use as an idiom for "if not equals", and do 

Error messages should probably go to STDERR, rather than being printed to STDOUT. Doing so lets you filter error messages from actual output, which is useful for debugging and logging. Documentation and variable naming Comments like 

Comments You have some comments which don't tell the reader anything they didn't already know: , , . You can assume that the reader will be at least somewhat familiar with the language itself. What you should comment on is why you do things, and if it is unclear, what. Misc 

At least for now, I did not look at improving performance or at the general approach, but at some more basic things I think would improve the readability of the code. vs Constructor It seems to me that takes the role of a constructor here. In that case, I would just make it a constructor instead of making it a method. Sure, this would result in the creation of a new object, but it would result in cleaner code (the would always be a valid object). Naming First of all, in Java CamelCase is used instead of underscores. It's always good to follow the conventions of a language, so for example should be . Variables should always have expressive names, but this is especially important at class level. Your names wouldn't tell me the difference between and for example. is also not a very expressive name (I cannot think of a name that's a lot better, but even or would be better. For consistency, should then be changed to the same name). could be , , and could be . should probably be and also should get a more expressive name (something like ). access modifiers Your fields should be . Your should probably be as well. The method is private, and not called from within the class. But it is the main parse method. This seems wrong, I would make it public. Unused Fields Defining fields and then not using them is not good practice. You should remove , , , , , , and . I see that you do use these fields in a different context, but not in your parsing code. So I would create a new class for them instead of tagging them onto this one. You should also remove and change 

is a lot less ambiguous. While we're on this topic, a lot of variable names used here are quite generic. One-off names like are fine, but and aren't particularly clear about what they refer to. Instead of , how about , or, since this is OEIS-related, ? The method is also not well documented, even though you give a good description of how it works at the top of the post. Consider putting your explanation, or something similar, in as a docstring. General readability This 

is doing far too much at once, such that it's hard to tell where to start reading from. Break it up into pieces - if you have a step converting non-digit runs to spaces, put it on its own line, rather than chaining everything together. Extraneous semicolon