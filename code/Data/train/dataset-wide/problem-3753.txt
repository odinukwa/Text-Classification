I'm apparently missing the issue. They are asking for volunteers. Simply don't volunteer if you don't want to. Why are you assuming that any negative consequences will occur if you don't volunteer? Do people already gripe about others who may not volunteer? If it was required then let management own up to it and have them schedule weekends. That is the most "fair" way to do it. It is not your job to be "fair" when you don't even know what "fair" is in this scenario. Your volunteering may be depriving someone else of money that they would really like to be earning but are also trying to be "fair" in letting others earn that extra money instead. 

Have you looked at yourself and how you've possibly created the situation? There are many ways to disagree and coming out and saying "I disagree" tends to put someone immediately on the defensive. Not the attitude you want the other person to have when you are proposing an opposing alternative. Certainly not the attitude you want from a person with authority over you. I had some clashes in my early career and eventually learned a simple technique. It takes practice and will not become a habit for years but I can't remember the last time I've had to blatantly say "I disagree" to someone with regards to a work issue. I simply ask leading question(s) that will let that person come to the conclusion all on their own that their opinion is "not optimal". If you lead good enough they'll come up with your idea all on their own. It means you have to know your stuff and you need to understand the "whys" of your trade. But that's the best part, because if you just disagree because in your opinion your way is better but nothing to back it up then your way isn't the better opinion. Yours is just a different opinion. 

Are you sure you are "leading" the team and not micro-managing the team? There's a subtle difference that makes a WORLD of difference. Micro-managers are often EXTREMELY successful being in charge of relatively small projects. First off, they tend to be really ambitious and driven. Second, they can do it because it's small enough for them to grasp most aspects of the project which allows them ensure things are done exactly how they think it should be done. The downside of micro-managers is that people hate working for them. Team morale suffers, innovation is stifled and people become afraid to take initiative to do what needs to be done and the team becomes complacent. The only people that don't get away from working for micro-managers are the passive ones who have little initiative and prefer to only do what they are told. IOW, not the highly desirable and innovative people. Everyone else does whatever it takes to get away from the ruling king/queen. In other words, your situation might have nothing to do with a positive attitude or positive thinking, but instead it has everything to do with people feeling like they are not able to be all they can be and this lowers their morale. Management picks up on the low morale and thinks it is because of "lack of compliments" when it is really lack of freedom that is lowering morale. Face it, compliments don't go very far for most software people. Bringing their ideas to life is what makes them most satisfied with their job. Bringing someone else's ideas to life is just work, nothing more. The big reason that micro-managers "stall" on the career path is because progression means leading bigger projects with more people. At some point the micro-manager can't even begin to grasp it all and the micro-manager style turns into a complete and utter failure on these types of projects. If management isn't afraid to give you small projects but very reluctant to give you bigger ones which would obviously lead to better management positions then I would really look into this being a case of micro-manager issues and not positive thinking. Getting people to want to follow your vision is being a leader, getting people to do what they are told simply because they were told is not being a leader in the slightest. 

Have a look at sites like $URL$ There are a lot of resources out there aimed at making it fun to learn to code. Try to find one close to the skills you're using at work and build it from there. Once you've built up some confidence with a technology, come up with a little side product for you to work on at home. Don't choose anything too ambitious, and then use Stack Overflow for specific questions and issues with your project. You'll start to feel more confident in tackling the programming books too after a while. On the other hand, if you try the above and are still feeling like you don't enjoy it, there is nothing wrong with a move to testing. It's a very valid career path, not too badly paid and you are likely to still have chances to dabble in coding if you feel like it. 

You need to remember what the drawings are for. Yes, a picture can be worth a thousand words, but it can also add nothing. A Venn diagram may communicate something, though not much added value, yet there is no added value at all in drawing a picture of a python after saying you can code. If anything it's confusing. 

I feel your pain, but just to offer an alternative point of view, I have had many situations when people have emailed me asking for me to perform a task like that and it's incredibly frustrating when they email again 20 minutes later with "please do it, it's delaying us". As a developer, I like to come to the end of a section of code before checking my emails or acting upon them and I'm also in meetings relatively often so emailing me and expecting me to jump on it within 15 minutes is pretty irritating. Now on to my answer. I would suggest having a schedule with them where they do whatever is required of them every day at a specific time. Would that work for you? You can get a fresh build of the code daily and they can schedule it in so that it is not an irritant for them either. Can any of the tasks be automated (by them or you)? 

You and the company have to decide if this is a "serious" issue or not. If it isn't then the best you can do is ask and hope your developers show you some respect on this issue. I suppose you can downgrade their performance reviews for being repeat violators. That should convert a few of the non-conformists once they realize you are serious in your request and will follow through with consequences for not adhering. If you believe this is a serious issue then you should treat it as such. Many companies consider this a security risk and treat it that way. In that regard, people whose terminals are discovered unlocked receive a "security violation" write-up. In companies which require "clearances", a few of these and your clearance will be revoked. Those type of companies are required to self-report, so it really isn't an option to not report the violation. This revoking of clearance usually would go hand in hand with being laid off because without the clearance there's not a lot of use for the person. If that sounds too extreme for your situation then simply disconnecting the person's computer from the network because of their blatant disregard for security and the vulnerability they create for network users would also go a long way in changing behavior. One last thing, I have to laugh at how many of these posts recommend to do something to the "offender's" computer or impersonate that user. Most Security Policies strictly forbid doing any of these types of things and those acts are actually worse offenses than leaving the screen unlocked. So rather than have one relatively minor security violation, let's step it up and commit some far more serious security violations. What a great idea. 

Owning shares in your company has nothing to do with increasing your career possibilities unless you own enough shares where it matters from a company ownership perspective. The main reason companies offer employee stock purchase plans is to protect both the company and the employees from being accused of insider trading and all the legal hassles and costs that will go along with that. Suppose I'm just a lowly engineer at my company (too true) and I'm working on a product that 'if successful' is expected to triple the company's income. Since I'm working on the product and if I know the product is exceeding expectations during development and being the analytical person that I am; I would certainly realize that tripling a company's income is going to result in a huge boost in the company stock price. Thus, the smart move would be to start buying up my company's stock. Oops, there's a major problem. I know material information that the public doesn't know that will potentially affect the stock price. Thus, it would be illegal for me to trade in my company's stock as this is a clear case of insider trading. Employee stock ownership plans are the compromise for this dilemma. These plans purchase the company stock at periodic intervals (usually each paycheck). Thus, the trades are not considered as being executed because of insider knowledge but simply part of an investment plan. Even if this is a one-shot and not periodic opportunity then there are still rules that must be followed by the plan to ensure "insiders" don't get an unfair advantage. Plans like these are what allows employees who believe the company is going to be successful in the future to buy ownership into that success without fear of insider trading issues. To directly respond to the post, assuming this is something new, the main reason your company sent a letter to everyone giving the opportunity to buy shares in the company is because there's probably several people who actually do want to buy shares in the company but are concerned about insider trading issues. It has nothing to do with seeing who is loyal to the company and who isn't. 

If this is happening to you often (and it sounds like this isn't a one-off) the best thing for you to do is to create your own plan to track your progress through it. If your plan says that X feature should be complete by week 1 and you're approaching the end of week 1, you know you have to get a move on. That should keep you making expected progress throughout rather than the nasty surprise near the end when you realise it's only half done. 

When I wanted to do some research, I was able to get a pass to access the local university's libraries for 6 months. Had to go through quite a few checks but it only cost me about £25. This is in the UK though, not sure if it is similar near you but it may be worth a try. 

I think you're looking at this the wrong way. Your first programming job should be the one where you learn the most. You want to use it to absorb all the knowledge of your colleagues and become a decent programmer in your own right. As long as you're making enough to live off without getting into debt, try not to think too much about the salary, think about everything else you can gain from the job. Later jobs will pay you more for this knowledge. In short, move on when you're not learning very much any more. 

The reason your CV isn't giving people the impression you're doing great in your current job is that you don't tell them that! Your list of duties is very terse and tells me nothing about what you have achieved. In fact the word "Duties" implies that you were just doing your job, nothing to see here. Make it "Achievements" or something like that instead. Instead of things like "Configure MySQL database for the SIP infrastructure.", you need to focus on great projects you've done and why you were so effective, what was the end result? Here's a line from the graduate role in my CV: 

Your CV should make people think "wow, he's good" not just "yeah, he's a developer". You come across as an enthusisastic person in your question so inject some of that into your CV. 

Do you have a Captel Captioned Telephone? They work pretty well. I wouldn't doubt if there are other brands with similar functionality. While making accomodations for hearing impairment shouldn't be an obstacle to most employers, it might give pause to some people to initiate the process if they have to accomodate someone they've never met when they have 50 other people just as capable instead. Besides, it would also come across as more impressive if you've demonstrated you've done everything you can do to alleviate any issues your hearing might cause (such as using a CapTel phone) before asking others to accomodate you. Might even give you a leg up. 

The most obvious answer is that you shouldn't have created "bad" software to begin with. I've run into more than my fair share of that and it is far more frustrating to your customers than to you as the customer tends to not have a clue what is going on "under the hood" and they have no ability to figure it out since they don't have the source code. Just keep that in mind when getting annoyed with your customer. But now that you are "stuck" with each other, your best bet is to find a way so the customer can easily submit problem reports. Calling on the phone is in nobody's best interest unless you can actually help them in real-time. Which is probably doubtful. Frequently, just having the ability to submit a problem report quells the user's frustration. Then it is just a matter of responding within reasonable time frames. e.g. We plan on fixing this by xyz date. We aren't going to fix this. Did you try abc? yadda...yadda... The other thing you can do is make sure you have decent documentation. I am currently working with a company that only reports error codes. Their documents have a large number of error codes listed. Guess what....none of the error codes I run into seem to ever be listed in that documentation. Also, 95% of the error codes in the documentation don't tell you why you might be getting a particular error code. So my only option is to call or email. I usually email first, if they don't get back to me soon then I'll call. Being a pain in the .... customer frequently is the only way to get any action to take place. Another option is to setup a training session or multiple sessions. This can go a long way in changing the mindset of your customer to start thinking like you want them to think instead of their previous products' way of thinking. Face to face training would be preferable. It seems that once people have actually met each other in real-life they tend to be nicer to each other.