I worked with a guy once who refused (categorically) to upgrade to any browser past IE 6, and he held to that policy through hell, high water, and tears, until our own website would no longer even work on the browser installed on our internal desktops. He had the exact same view about everything else on the network that he didn't put there himself, and was just a complete misery to work with. As an admin, your job should be to help the users do their job, and to try and help out those few who have some technical competence when it's not going to be too much trouble. This is not to say that you should let every schmuck come in and plug in whatever the hell they want, and it's not to say that you should compromise your security in the name of user convenience, but your job is not to keep your network wholly pristine, it is to make it as useful as possible, and useful means getting a little dirty. 

The current wisdom is that IPSec is better, but no (known) full exploits exist for PPTP, so it's still commonly used. IPSec is certainly newer, and has more optional extras, and (IMHO) broader support. Lot of people criticize that PPTP sends some unencrypted control packets, but, again, this hasn't resulted in a big exploit, it just makes people think that there MUST be one in there somewhere. I think a lot of it is just residual sour grapes because PPTP was a Microsoft initiative, and patent encumbered (they recently allowed open implementations, so this isn't as much of a concern.) 

Yea, you need mod_python. Or you can enable cgi support by putting in a directive in your httpd.conf...You'll need to put a cgi shebang on the first line of your script as well (i.e. ). 

You can configure logrotate to rotate a file via copy-truncate, which preserves the original file and doesn't require you to re-create the log file. The syntax is: 

It's damned if you do, damned if you don't. Frankly, if there was no money spent by management on a backup solution, then it's their fault. On the other hand, the admin should have been active in trying to work out a stopgap solution, rather than just sitting on his ass waiting for something to break (I don't think any sort of external drive solution is acceptable. You're never going to get a decent backup with that.) You can't just say, "Well I don't have what I want, so I'm not responsible" but you can say, "I've repeatedly tried to get you to do something and you've given me nothing and this is not my problem." I was actually in a situation once--I wasn't even an ADMIN at this job--where I was working on a database, and made a backup before I changed it (which is s.o.p), and I (as I usually do, whenever I can) saved it to my own local machine. Two days later they lost the raid array, and ooops, turned out there was no backup solution. They'd been backing up the database to the raid array. So I come in late on this, and I say, "Oh, I backed it up myself day before yesterday." You know what the outcome was? I was censured for my bad backup solution. For a machine that I was in no way responsible for. And it wasn't because the backup I had was too old, it's because I'd only backed up the database I was working on, not every database. So the problem is this: if you do a mickey mouse solution, if you do anything, and it's not quite good enough, you're going to get just as much hell as if you do nothing at all. If backups are your responsibilty, explicitly, and there is no budget, you should try to cobble something together, but you better make damn sure it works, and you need to raise hell about it. Repeatedly. At every opportunity. If it's not your responsibility, point out that there exists a problem, and absolutely, categorically, refuse to take responsibility for an unfunded mandate when they try to assign it to you. No one makes disaster recovery a priority until there is a disaster, and then they scapegoat everyone to try and make up for their own shortsightedness. 

Well, there isn't any way to make the command line you've got go any quicker. That command will load the jvm, run the code, then unload everything. That's just what it does. I'd probably try to set up a SOAP service or something. Or you could have the java app bind a socket, and connect with php that way. How much control do you have over the java program? Are you stuck with it as-is? 

Looks like a permission error to me, which would explain why it's throwing the same error regardless of whether the share exists: it's never getting past authentication. Is your machine on the domain? 

Original (circa 2011) ebury was pretty lame...You could clear it by doing: yum update sshd. Pretty trivial. If you trust your repo's (and rpm), you can do rpm -vVa and it'll show you every installed rpm where the md5 doesn't match the one stored on the server. Problem is that the attacker can be assumed to have acquired root level access, and that means you could be screwed past the ability to diagnose it from the local machine. If you can't run a file integrity scanner off an unaffected machine, then you're never going to be sure unless you rebuild from scratch. 

Try adding above the PerlSwitches directive...Should force it to allocate a new interpreter pool. Link to mod_perl PerlOptions directive 

Try tracert. Or "traceroute" for non-windows users. It will tell you every server the ping has to pass through to get to your destination. A count of the number of hops is a good metric for how much latency you're going to have, and it will also tell you how much latency is being added by specific hops. 

If you are allowing uploads into a directory wherein files can be executed, you're asking for trouble. 666 would be far more appropriate. Root doesn't need to be executing things in an upload directory. No one needs to be executing anything in that directory. For my money, I'd do 262. You literally cannot have too much security on a directory that contains user uploaded files. 

Can they work with a service like dyndns.org? Not a static IP, but a url that points back to your current ip address. That's a common trick for beating the dynamic ip. Other than that, you're out of luck. I don't think LexisNexis has much experience dealing with people who can afford their service, but not a static IP. 

Aptitude is just a front end for APT. You can install both APT and Aptitude on your Fedora machine. Apt can be installed through Yum (yum install apt), and Aptitude can be installed via apt-get. Edit: Direct Link to Aptitude 

Well first off, JDBC and ODBC are not compatible. JDBC was Java's answer to ODBC, and they fill the same niche, but you can't connect to an ODBC data source using JDBC and vice versa. Now there IS a jdbc-odbc bridge in Java, but that is a compatibility hack, not a native connector (The translation will go JDBC->ODBC->(Target Database) rather than JDBC->(Target Database)) ODBC is simply a standardized interface to access data from different databases. You install the ODBC to (whatever database) driver on your machine, then create an ODBC datasource, and then you can connect to that datasource via odbc rather than having to configure a native driver for the original database. Or if the database is ODBC capable, you can connect to it directly by importing the driver. The benefit is that you can write all your code to be odbc compatible and it'll work with only small modifications regardless of what the real database type is. The negative is a performance hit, and occasional weird behaviour as odbc fails to translate some database specific action in exactly the right way. Support varies. If you're using ODBC to connect to some legacy database, you may have a lot of work to do, but if you're using it to connect to an access database, then it'll work flawlessly. The process that happens on connection is relatively simple. You send your "standardized" query, the JDBC or ODBC driver translates it into the native framework you're trying to access, and then submits the query. If the database returns anything, the process is reversed. If you're having problems, I'd check the driver you're using. If you import a bad driver with java, nothing is going to work right. The first thing you need to do is log the error. If you're using an ODBC datasource, you can just turn logging on in the properties (look to the driver documentation to find out the correct settings; they vary). If you're using JDBC, you're probably going to have to catch and log the SQLException's yourself.