Firstly, I'd question the assumption that the MS stack is a dead end. I'm not sure where you are, but a quick look on Seek has 385 c# jobs in Melbourne, 125 Ruby jobs and 467 Java jobs. Unscientifically, it seems that the Ruby/Python/PHP jobs pay less than C#/Java jobs. I've worked in both camps, my current MS job pays 25% more than my previous Python job. Future-proofing your career is an issue for most people. IMHO, your greatest risk could be that being stuck in a small company may not expose you to all the new technologies and future companies will demand. I have seen jobs demanding both WPF and MVC, even though few companies invest in both desktop and web technologies. Most jobs will expect you to have experience with the latest technologies, not just MS-MVC but the right version of MVC. If your goal is to transition to a specific technology, you need to choose that technology (not Microsoft is not enough) and see if you can find a company that has both MS stack and whatever your chosen stack is. Consulting firms spring to mind. If your goal is to future-proof your career, you need to ensure you have the skills being sought in the market. This may mean sticking in the MS market. Alternatively, you can take matters into your own hands and work on a private project. You can choose the stack to use and build the product you want, how you want it. In my experience, this is a lot of work when you have a full-time job and a family. Any way, you need to have a pretty good idea where you want to go. 

When I was involved in hiring for permanent staff, you would be classified as a job hopper and not even get an interview. It tends to take months to get a person up-to-speed, this is a waste if the person is just going to leave. When looking for contractors, I'd assess you as someone who couldn't get renewed and you wouldn't get an interview. To me, a contract renewal is a vote of confidence from your employer. In short, I think it's a bad look but others may not care. 

There is no point in getting well paid if you're going to be stressed out and unhappy. This is a large part of your waking hours that you'll be spending there. 

Most employers in my experience don't want to try people in roles where this no evidence that you'll be ale to do the role. The trick is to add skills and experience to you current job by doing more than is asked and helping others who are doing the things you want to try. This will give you at least business knowledge of those other roles that you can try an leverage when asking for new assignments/tasks and jobs. 

Give them some financial stake in the outcome. I say financial as this is developing country and financial incentives are likely to be very welcome. The simplest way I feel would be to simply give people bonuses where proactive actions benefits the company. This balances chicken/egg of not paying more till you get results and not getting results until you pay more. Commit the company to paying non regular bonuses. Of course this system can be gamed like any other - so you have to manage it. 

Money. You need to supply him with appropriate costing as to why his methodology is going to cost more than yours. Why is it going to takes months to do infrastructure work? What bottom line benefit is there for him to do this work. I'm talking about cold hard numbers. Why are modern practises better? Why should he care? Where is benefit to his customers and ultimately his bottom line. You say he's lost track of practises, well he's likely gained a lot of knowledge on how to make a successful business in spite of those practises. As an engineering team it's your responsibility to provide him with the data so that he can make his decisions. If his practises are going to hurt his business then that's what he needs to hear. At the end of the day, if his metrics are features that the customers can see then you have a problem whereby doing non customer demonstrable work will seem to him to be non focused on his core goals. You have talk to him in his language and that language is numbers. It's all well and good assuming that modern practises will help, but without the data to back it up you're likely to be in a situation where he won't see you as valuable member of staff. edit: I see from your question that he is asking for lots of daily updates, daily demonstrable items, etc. To me this is very much what you'd find in a modern scrum like methodology. In fact I'd go so far as to say perhaps you are misjudging him and his approach. perhaps you should adopt this approach as way for both sides of the battle to move closer to their goals cooperatively. 

In the US at least, it isn't safe to assume who should or shouldn't know about your particular compensation situation. It is very situational, but I would recommend avoiding asking about compensation unless either asked or offered a position. It's very common that the people you're interviewing with will not be your direct supervisor, and while it's great to be in a culture where 'take home pay' is something your equals are comfortable discussing with you, those are discussions best had 'off site' over a beer with people you are on very good working terms with. On the other hand, it's perfectly acceptable to communicate your salary expectations to the right people (something the recruiter should absolutely be able to assist you with). At a minimum, the recruiter should be able to tell you whether or not your salary expectations are within the range of the company they're recruiting for. If they can't, that's probably a red flag right there, but you should be able to ask the recruiter to communicate your salary expectations to the hiring manager to ensure you're not wasting your time or the company's time. If they aren't willing to discuss this or 'confirm' that your expectations are reasonable, then they shouldn't be surprised when you flat out reject your offer for being to low. 

If this person is behaving in the manner you're describing, then this is in fact a problem that needs to be dealt with by management. It is however key that you, as a non-manager, approach this strictly from the angle of an impediment to you doing your job. Do not go to management with any statements about 'James' putting job security interests ahead of the company's interests. Instead, the place to start is by talking to whatever 'project manager' is in charge of the project you're working on. Tell them you're blocked on because you don't have the information you need. Ask if there's a knowledge base on this system. Make sure they're aware that you don't have the information you need, but don't try to blame 'James' as the cause. It's very likely that they'll tell you at some point to 'try reaching out to James, he works on that system'. At that point, you'll continue to reach out him as you've been doing, but you'll CC this manager on all of your requests of help from James. For a lot of people, just having that CC on the email will suddenly change both the turnaround time and the tune of their correspondences with you. But if it doesn't, just keep making sure the manager has visibility into what's going on. If your project does daily standups, your standup report should include something along the lines of "I am still having trouble finding the information I need on . I couldn't find anything in the knowledge base. I have tried reaching out to and James. I am still waiting on a followup.". If not, try to make frequent status reports to the manager saying "I am not able to get these questions answered. It takes a long turnaround time when I have to bug the developers frequently. I think a knowledge base for this system would be very valuable. Any suggestions?". Try to always make sure you're not coming off as 'blaming James'. Eventually, if 'James' is indeed the problem, it will be obvious to them, and they will take the actions necessary. Or, if management fails to act after extended visibility to this issue, perhaps 'James' is just a symptom of a much deeper management problem, and this company may not be the right environment for you. 

Try and get a paper trail with the request. Determine if you think doing it is likely to be either illegal or not. If illegal you should immediately get legal advice. This may prove in valuable in the future. Make a decision as whether you're doing it or not and for what reasons. Face the consequences of doing it or not. 

The point was that I would be lonely during work, but I'd mitigate it by interacting with people every day. These days I use IM and make sure I have non work & work related conversations with colleagues too. An important thing to remember is that you are working, so you need to focus. If you're clever you can use the isolation to help you focus on the work better. This means that you may be more effective but at the same time you have to watch for mental fatigue and a good way to combat is to follow the steps above. These days are lots of things that are accessible via the internet such as meetup.com where you can get together with people for professional or non professional networking. One person I met like this a fellow programmer who lived locally and we used to code review for each other. 

Do you have the capacity to do it without impacting your work? If not it needs to be pushed to someone who can help manage that aspect too (PM, managers etc). If you do have the capacity I'd simply ask your colleague about her work load and let her know that you can have some capacity to help out if she needs any help small or large. The point is that, lots of times we are afraid to ask for help as it feels demeaning to ourselves. The best thing to do is the let them know you are there to help and rather than doing the work for her you're probably in a good place to help her prioritise her load so that she may be able to delegate tasks to you. As long as she doesn't feel threatened by you helping her (as opposed to to you stepping in and taking her work) then I think it's likely that you can build up to letting her know the areas where you are strong and could help her ask for help in the future too. 

Voice your concerns about the performance. If the performance could get worse as their dataset increases, ensure they know that. If they're going to expand to more offices and have a higher latency/slower pipe between them an the assets, make sure they know that. Document all of the obvious performance fixes. When they find out you were right, you'll probably be the first person they come to in order to fix it. Don't sell them more than they need At the end of the day, they're a business. Turning on some reasonable optimizations is probably going to cost a high double digit number of hours, and that's a sizable chunk of money to fix something that in all likelihood doesn't really impact their business right now. Once the program has been out there for a while, and has been proven to meet the functional requirements reliably and solve the business need, they might be more willing to start investing in making it faster. When there's no bugs with it, and the biggest complaint from the users is that "it's slow", and the managers are sick of hearing that, you should have a pretty easy time making it faster. 

Ideally, knowing the answer to the problem shouldn't be an issue. Use the fact that you know the answer as a compass to help you walk though a possible 'solution', but don't simply blurt out '42' as the answer without showing your work. Really break down the problem solving process into basic steps, and work towards the solution you already know exists. If you don't understand the steps that were taken to arrive at the solution that you've already seen, then you really haven't already seen a solution...You've seen a hypothesized solution, and that hypothesis must be confirmed. Often times, reinforcing something you already know by laying out how you learned it is just as difficult/insightful as solving a problem you haven't seen, so that should be no trouble. If you do understand how the solution was reached, try to walk through the problem in an 'explain-it-like-I'm-5' manner, making your entire thought process obvious. To help communicate this point a little better, let's assume we're talking about a programming domain. Lets take a really really basic programming example. You may be asked to write a program that takes in a string and reverses it without using the 'pre-existing' / facilities. Maybe you've seen approaches with the string as an array of characters, and looping from the last index back to zero. You know that this is where you want to end up. But instead of just writing that down and saying 'look how smart I am, I already know this', humor them and work through the problem. Setup a test harness or a REPL and start writing test cases. First write tests for the trivial cases, like and . Then test and implement cases where you have two character strings like . Then test and implement cases where you have there character strings like . Show them where the pattern emerges, and derive a universal solution from that pattern. Explain your reasoning each step of the way, which should be easy to do, because you already know exactly where you are going. This need not be exclusive to programming either. The main idea here is to reflect on the solution you're already aware of, and work towards it in small steps, each time making sure it's very clear why you're making those steps. Even if you admit to the interviewer afterwards that you've already seen a similar problem before, they will likely be impressed with any sort of 'methodical' approach that explains the reasoning 'like I'm 5'. 

Have routine for starting work - something like always starting at some defined time. I used to walk to the local shop and buy a newspaper. I made sure that I went out at lunchtimes and breaks and talked to people in the neighbourhood. I occasionally made a point of visiting local pubs/restaurants at the time other businesses kicked out so that I would meet people working locally. This sort of simulated "grabbing a few after work with the colleagues". 

Not that I'm saying you should either or . Rather I'm saying you need to define these things and put them into the equation. Finally, and this is very important. 

If you can't get anything in writing (including proper emails). then you need to immediately move to step two and seek legal advice, even if it's just to determine if the work is likely to land you with negative consequences. 

Number number numbers + analysis + numbers! What I'm basically saying is that you need to present a business case to whoever makes the decision as why you need one. The easiest case is usually to determine how much more your work costs the company using the existing hardware and how much they'd save if you got different hardware. The costs are not just financial (though they will come down to this at the end), they could be things like impact to other people in terms of delays in getting things to them. Log each time something has gone wrong or taken too long. Did you have to log a support call. How much time did you waste? Did you have to get help from others. Every 12 x 5 minutes adds up to a wasted person hour. Every 5 of these adds up to a wasted day. I've done this for clients where server performance was inadequate, and for where I've need better hardware for specific tasks. Also it's not jsut about asking for "a new computer" - it's about telling them exactly what computer they need to get for you and why it benefits them to do it.