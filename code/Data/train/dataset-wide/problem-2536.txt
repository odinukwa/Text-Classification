This function takes the encrypted string and breaks it into parts of 6 (Because every encrypted character is equal to 6 characters) and reverses all of the randomizations that I did during encryption to return the string: 

So you can pass any array as the first parameter that you want randomized, then the 2nd parameter determines how the data is returned, then the 3rd parameter tells the function how many times to shuffle the array. I've written this because I think it will be useful for people on StackOverflow, I see a lot of questions trying to figure out how to get a random value from an array. The parameter tells the function to either only return a single array element if false, or return the whole array (with keys in-tact) if true. As you can see in my code, I have to check for the 2nd parameter twice to do actions before and after the actual array shuffle. I wanted to see if anyone had any advice or knows of any ways I can improve my code. I've been posting a lot of my code here lately, and I really enjoy how much I'm able to learn from answers. Thanks in advance! 

I've written a simple helper function for my helper class that allows me to check if a substring is in a string. With my function, you can supply either a single needle to check for, or an array of needles to check for. There is also a parameter that allows you to select if you want to check word boundries or not, and a parameter to allow you to choose if the search should be case sensitive or not. 

Ever since LINQ came out I've been talking about how the syntax is really awful. It looks friendly at first but it completely hides what is really going on which is really useful to understand. Here is the much shorter way of writing it with the extension methods off of IQueryable along with a few other adjustements. 

This is honestly pretty good. I usually use to set the paths and configurations on require (it's going to grow a lot as you add things like shims, urlArgs, etc). You will also probably want to reuse it in several places. See my blog article on how I recommend doing this. The general idea is that you don't use to bootstrap things, you instead have a request for the configuration file and another to actually bootstrap the specific page of your application. Next, I'll ask why bother injecting and manually into ? Injecting dependencies is what RequireJs already does. app.js 

I absolutely agree with @Schism that more context is needed for a really good review but I made a few other observations inline. One that also jumps out at me is this whole relationship between and how you're selecting by name. Without more context I can't say for sure, but it seems like maybe you can have with the name being the key and that would make everything much simpler. You do need to think if sounds need to get disposed of or what happens if you invoke a method for something without a name, or if there's two things with the same name. Also, as always, I'm going to go ahead and say the prodigious use of here is probably entirely unnecessary and you can just use a factory method instead of a constructor. Also, it's 2015, can't we just start using es6 already? 

I know what you are thinking, it's never a good idea to roll your own encryption functions, but I'm doing this for fun and self-learning. I created a function that allows you to send a string as a parameter and it will return an encrypted version of the string. Here is my encryption function: 

My question(s): What shortcomings will I have with these functions? Another question I have is; how can these functions be improved? 

The flat array you want to group (array) The key you want to group by (string/int) Option to preserve the group key in the output of each sub array (Boolean) Option to preserve sub arrays. If only 1 key exists in each sub array, the function will store just the single value for each row instead of an array (Boolean) 

I've written a function that allows you to pass an array of values, which is then shuffled and returned based on a parameter . This is the code: 

The first parameter is the array itself, the second parameter is the key that you want to group by, and the 3rd (optional) parameter is a boolean that tells the function if you want to preserve the group key in the sub arrays. Examples Let's use this dataset for examples: 

This will encrypt the string, whereas every character will become 6 characters. The 1st 2 of each character are keys that are required to decrypt the letter, and the 4th character is the actual character being encrypted except masked by a random digit (Basically the letter is converted to its ASCII number and a random number between 0-9 is added/subtracted from the letter). The 1st key (labeled prefix) lets the decrypt function know if the random number needs to be added or subtracted, the random number is passed as the 2nd character in the encryption, and characters 3, 5 and 6 are random noise characters. Note: The prefix is generated depending on the ASCII number of the character that is being encrypted. If this ASCII number is below 44, the random number is always added to the character being encrypted, else it is always subtracted. The prefix itself is a character in a certain range, if the ASCII number is below 44, a random character between ASCII and is generated, any of these characters tell the decrypt function to subtract the random number from the encrypted character, else ASCII between and will always add the number. For example, the string "Never roll your own encryption functions." may encrypt to: 

So given this is a blanket rule across all the functions i.e. you could introduce a common validator function you could share across all your functions e.g. 

I'm pretty sure Mongo has native Promise support, that in conjunction with / would really tidy this up 

I was actually ignorant to the fact your code actually works which means it can be done in one pass :) here's a slightly neater / more concise version of what you already have: 

you'd need to call it in every function, however, this would give you the same effect of what you already have in one line as opposed to X lines based on the number of parameters you have. If your using Babel, something to look at would be perhaps moving it to a decorator so it's completely outside the scope of your logic e.g. 

Personally, I would have the call return a rather than a callback and make use of / (presuming the version of Node you are using Node 6+) e.g. 

Think your worrying yourself about small details here, any advantages of one over the other would be minor at best. I think out of all 3, the last solution would be my preferred one. It's clean from a code separation POV and does exactly what it says on the tin, also easier to change behaviour without affecting the other should that ever need to happen. FWIW for performance reasons it's recommended you bind UI event handlers in the constructor e.g. 

Given is set at the server then, unless your server is compromised, you can ignore the 1%. Relying on server-side user data is the correct approach - never trust the client.