Edit I just ran another test on a sample table of 400,000 rows and the code above completed in under 7 seconds 

Sometimes you can, if the database engine offers such a mechanism. For example Pervasive PSQL is the descendant of the venerable Btrieve database. It allows you to use the "MicroKernel Database Engine" (MKDE) to make "Btrieve calls", or the "SQL Relational Database Engine" (SRDE) to execute SQL queries against the same body of data. 

Note that the query uses syntax, which is generally preferred over the older method of putting the join conditions in the clause. 

Unfortunately, no. The basic Find (Ctrl+F) and Replace (Ctrl+H) functions in the Access UI search the resultset of the form row-by-row. For an ODBC linked table (any ODBC linked table, not just PostgreSQL) once Access has gone past the end of the rows that it pre-fetched when it displayed the form it retrieves one row at a time until it finds a match or reaches the end. (Find and Replace is often considerably faster for Access linked tables - as opposed to ODBC linked tables - because the Access Database Engine works directly with the database file, retrieving 4KB pages of data at a time. If consecutive rows happen to be on the same page, or if the 4KB page for a given row has recently been cached, then Access can "get" that row without another round-trip to the database file.) However, there is one workaround that may be helpful: If a Filter has been applied to a Form or Datasheet view then Find and Replace operations are restricted to the filtered rows. Access can take advantage of indexes and (at least some) server-side processing when applying a Filter to a form bound to an ODBC linked table, so you might be able to get the job done faster by Filtering the records first (even a non-sargable filter such as ), and then performing the Find and Replace on the filtered set. 

Here's a list of supported platforms: $URL$ The MySQL yum repo is detailed here: $URL$ - That has binaries for MySQL 5.5, 5.6 and 5.7. 

This is a bug, fixed in the July 2014 CPU - See Oracle Support document . Easily reproduced with the following: 

Databases do not return rows in a given order unless you supply an clause in your query, thus making the "order" meaningless. The order of a query is undefined. Apologies for the simple answer! 

Obviously you'll need to add your own database and listener names & change the path to your . You can reload the listener config with: 

To change the behaviour, download the source for the mysql CLI and modify the handler to behave as you see fit, then recompile & install. 

.. it's already configured to only listen on . If there are lines with other IP addresses before the , it means that it's listening on those interfaces. To change MySQL to only listen on , edit your configuration file (usually ), add the following: 

The data you require is exposed by the view . You can narrow down the statement you're looking for by filtering on the column. Documentation link. If you have a diagnostics pack license, you can use the view - it keeps snapshots of SQL statements that may have aged out of . 

The most straightforward way to have Access VBA interact with a web service would be to use a object like this: 

Your query is missing If you are just getting started with SQL then you might consider building simple queries like this in the Access query designer and then switch to SQL view to see what the query designer has generated. In your case we have 

An "After Insert" data macro can certainly modify records in other tables. You can use the LookupRecord, EditRecord, and CreateRecord Data Blocks as required. However, a data macro cannot run a VBA script. Your actions are limited to those available in the data macro environment itself. 

The only method that didn't fail outright was to pull the tables from MySQL into a Microsoft Access .mdb file (!) via MySQL ODBC, then import that into SQL Server. However, even that was an incomplete solution because the transfer from MySQL to Access omitted all of the primary keys, indexes, and AUTO_INCREMENT attributes. Still, it did transfer the tables and data, which was my main objective. I just had to write some T-SQL to re-create the indexes and whatnot. Since you don't need to transfer any data you might want to consider just hacking the mysqldump SQL code (good old Find & Replace...) to the point where SQL Server will execute it. 

... orders the data by customer (OM01U1.OM01015) and last maintenance date (EC01_LASMTCDAT) and assigns a number (r) to each last maintenance date by customer, starting with 1. Using an outer query, we then pick just the r=1 rows to get the data you need. Note: Completely untested as I don't have your data. 

It's not actually possible to specify a different tablespace when importing using the oracle utility. However, as a workaround, you can pre-create the tables by doing a import into the tablespace, then for each table to move them to the new tablespace, then do the import again with the parameter to ignore the table creation errors and import all of the data. If the data was exported using Data Pump (), (as an aside, everyone should be using this these days, rather than the old legacy / utilities) you can easily import into another tablespace using the parameter. eg: 

If you don't need to run your database in archivelog mode (ie: you don't need to be able to do any disaster recovery & don't care if your data goes AWOL), you can turn archivelog mode off (as SYSDBA, database in MOUNT mode): 

... will change the password for a given username, whilst suppressing the inputted password. I don't know of a way to do it for a given variable. 

If you want to insert Unicode text in your statement you need to supply a Unicode string of the form , as in 

Finally, even though you will be working with SQL Server 2005 I highly recommend that you get a copy of SQL Server 2008 (or 2012) Express for learning, mainly because of the IDE enhancements in SQL Server Management Studio (namely, auto-completion and interactive debugging). Just be aware of any newer (2008+) features you may encounter and don't rely on them for your production code. (Or, use them as bullet points for your pitch to upgrade from SQL Server 2005....) 

I recently had to do essentially the same thing, except that I wanted to migrate MySQL tables and data to SQL Server. I tried: 

The "Back Up Database" and "Save Database As" options do the same thing. The only real difference is that "Back Up Database" will provide a default file name like 

As you learn more about SQL Server you will discover (to your delight) a number of things you can do in SQL Server at the database level that you previously had to do in Access at the application level. Some examples include: Triggers: Procedures defined at the table-level to make stuff automatically happen whenever there is an INSERT/UPDATE/DELETE on the table. Stored Procedures: Somewhat similar to Access macros and those little VBA procedures (s) you built in Access to do "useful stuff", except that in SQL Server they are part of the database itself. So, you can write a Stored Procedure (SP) once and use it (almost) anywhere, even across applications that share the same database. Functions: These are somewhat analogous to the little VBA s you wrote in Access to incorporate into queries, except that SQL Server Functions, like SPs, are more tightly bound to the database. Also SQL Server Functions can be Scalar-valued (return a single scalar value) or Table-valued (return a rowset). Fun SQL tricks: There are lots of SQL features available in SQL Server that are not supported in Access (Jet/ACE) SQL. "Common Table Expressions" (CTEs) and " and " are the ones that gave me "'aha' moments" as I was getting started. I could go on, but these are the things I remember discovering early on that got me "thinking in SQL Server". Don't get me wrong, I still think Access is an excellent tool when used appropriately, and should be given serious consideration as a way to 

The documentation is very thorough in this regard. You need to follow the pre-install instructions for your platform. Create an oracle user, dba and oinstall group, change OS params etc. All of the instructions for Solaris SPARC are here. 

It's essentially because you've created a multitenant capable database, and are trying to create a user in the root. Read up on multitenant - documentation link. 

The default database character set/collation values are used for a table if the relevant clauses are not specified at table creation time. 

You're not supplying a correct connection string. If you're using ezconnect, you need to pass the connection string in the format: The expdp command-line should be: 

There are a couple of ways of starting a trace in another session. You can either use a login trigger that sets tracing in the session when it first logs on: 

There is no reason why Oracle would perform badly on Ubuntu (though Oracles OEL kernel has some Oracle-specific optimisations), it's all about enterprise support. Certification is an expensive and time-consuming task, as is training support workers in each flavour of Linux - that's why the RDBMS is only officially supported on a select number of releases. 

They're control file backups. The reason for the file size discrepencies is due to the fact that they're for different databases. Order the list by filename and it'll be more obvious. Just for your information, the first number after the prefix is the (database ID). 

Yes. The Access Database Engine is designed to work with "real" Windows file sharing and Samba – or at least some versions of Samba – apparently do not implement all of the low-level features of the SMB protocol that are needed for the Access Database Engine to work reliably. (ref: Corrupt Microsoft Access MDB Causes - Samba) 

Instead of trying to insert directly into the table you could insert your data into a temporary table ... 

Performing those subqueries repeatedly for each distinct ID value is what's killing you. I ran a test of your method on a sample table of 10,000 rows and it took ~2.5 minutes to execute on my notebook. By comparison, the following code consistently returned the same results in less than 0.5 seconds: 

As you have discovered, the column type in Access does not support fractional seconds. If you need to preserve the precision (and not round to the nearest second) then you'll need to import the time values as and then populate another column with the times converted to tenths-of-milliseconds (which I have abbreviated to "tms"): After the initial import of the times as you will have something like this 

If the web service returns a relatively short and straightforward response then you could just parse it yourself. 

HSQLDB stores text data as Unicode. You can verify that by opening the file for the database and looking at the data. For example, for a table with a row containing "Montréal" the file contains 

SQL Fiddle 2 things: 1) gets converted to on insert. That's an Oracle thing. 2) is trying to do , which isn't defined, and will return nothing because doesn't like the equality operator. You have to use or . I'll add that the datatype behaves differently because it is padded. 

You must add the foreign key constraints after the tables have been created, using: There is no other way. Note that, due to your table design, you may have to create the constraints with the clause. This forces Oracle to defer constraint checking until time & may be necessary if you cannot use an statement and need to insert dependant rows into the two tables with separate statements. 

The data dictionary view will give you the date that the Linked Server entry was modified/created ( column), but not who created it. 

You can do this with a normal view, as long as the users involved haven't already got access to the base table. EG: 

The simple answer is.... To enforce an in ANY resultset, not just your specific case, you have to use an clause. The Oracle documentation spells it out clearly: 

Lock them both ( and ). You shouldn't need to use them day-to-day, nothing will break. On a day to day basis you should be using named user accounts that have or . Tom Kyte recommends doing it, so you can always blame him if something does go wrong :-)