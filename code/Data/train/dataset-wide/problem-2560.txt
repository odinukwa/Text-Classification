I currently try to learn some Haskell to improve my overall programming skills. To practice, I implement the C course exercises that I very familiar with. One is this: 

We have a set of time slices, in the order of 50. Throughout this question I will use 6. We group these slices into blocks, in this example the block size is 2. Then we want to iterate through all source slice and sink slice combination and call functions of the following types: 

If you want to try it out for yourself, clone this repository. The working implementation uses Tensroflow so Tensorflow is required to get it running. Simply run to train a model for 1 epoch. Do note that I'm not trying to improve the accuracy for this question. I'm just trying to know if there's something I can do to improve my code. 

I haven't implemented the testing and predicting codes yet. For now, what I'm trying to refactor is the training part and the initialization of the network. As you can see, I used Tensorflow since that's the library I like using. CV2ImagePreprocessor 

We go through the blocks, and within each block combination, we take all slice combinations. The block combination with switched sink and source blocks is to be done right after because we can re-use a bit of data with that as well. For the functions of type , we want to iterate from slices to blocks, like this: 

On this side, I am quite happy. I can just iterate through the slices with the given block or interlace scheme. On the other hand, I have 298 lines of code which does this: 

These are the tasks I think that are performed in all Machine Learning problems. The reason for using a as the initialization parameter and as parameters is that the parameters (e.g. number of layers for the network, learning rate, etc.) Machine Learning problems use differ from each other. Some require paremeters for the use of momentum and whatnot. Some don't. My reason for this design is flexibility such that people can switch from one implementation of this interface to another any time. ImagePreprocessor Interface 

The outer loop does not use range-based- because we want to parallelize that part with OpenMP and that needs to see the range explicitly. With this, we can just change the value of the in the constructor and get a different iteration pattern. Also it allows me to iterate other the slice combinations in the current block combination . The output would be the following for our example: 

The data that we work with has the property that we can re-use intermediate results as long as we have the same source and sink block. Therefore this scheme wastes opportunities to re-use data. We cannot fit all the data into the RAM, so we want to iterate through this more intelligently. This is the iteration scheme that we want: 

I think you're going overboard with this. Moreover, you have duplicate code right there. Here's how I think it should be done: Main 

The dataset I am working with here is the IAM Offline Handwriting Dataset. I used sklearn to split the dataset. Here's the script I have for training a model. 

Since the tasks involves the use of images, I also created an interface that will read and preprocess the images. DatasetPreparator Interface 

Compared to the slice-to-slice variant, we are only taking every second (every block size in general) element from the iteration. In the current state of the code, this is done with a lot of nested loops and a lot of repeated index calculations. Despite being repetition of code and mixing of different tasks in the same function, it is also inflexible. We want to support a second scheme, the interlace one: 

This change would require rewriting the index fiddling with other index fiddling. Instead, I want the client code to be really simple, even if that gives me headaches in other parts of the code. There are two factions in the notations, one will call this scheme “block 3” because it has three blocks, other call it “block 2” because the block size is two. That is represented in the code by having it parameterized by and in various parts. This is what I want the client code to look like: 

@mheinzerling is probably going to mention everything already there is about your code lol. So I'll just point out one thing in your code they probably haven't discussed. I discourage the use of comments to explain the what your method is doing or the variables you use. You have already have expressed the intents of some of your methods through their names. Adding a comment to explain said intent is redundant. If you're going to use comments, they should explain the why's and not the what's of your code. I'm not sure on what's the best practice in using JavaDoc comments, but I think we're better off without them. Express yourself in code! 

The code must be C++11 and compatible with GCC and the Intel C++ Compiler. Do you have suggestions to achieve the same results but with less dense code? 

Since there are so many lines and I have a bunch of helper functions, I wonder whether there is some better way‽ 

The following is my attempt in Haskell. I made comments which probably state the obvious for Haskell experts but it should make my reasoning clear. 

Each player enters their names. The names can't be blank nor the same with each other. A coin is tossed to determine the turn order. The turn player decides the amount of damage (M) he wants to deal against the other player. The chance of dealing damage is calculated by (100 - M). 

I finished the Snakes and Ladders kata in the Agile Katas and I would like to know if there's a way to improve my code (specifically the part where the turn order is determined). Game