However, even then, it's not the correct property of a binary search tree. Have a look at the following tree: 

No. Or rather: it would be slightly cleaner, but also needs to work on the reversed list. This is more obvious if we don't use a position-independent predicate: 

Other than that, there are some instances where you use where they're not necessary, e.g. . takes a as second argument, so while the type signature is not wrong, it's superfluous. 

Further remarks Your code could get a lot more readable if you used more whitespace. Also, for difficult functions, you really want to add comments and/or documentation. 

This keeps the repetition in our code a little bit down. An intermediate representation But we can do better if we introduce additional functions and types: 

I would get rid of the if-else statement in operator() of Rule, and replace it with a stored functor, or move the from operator() of Rule into StartsWith and make all of your checkers have the same signature. Suppose we go with moving into StartsWith. Then stores a , which you produce once at construction (possibly through a big if-else block, but you only run that block once). Then operator() on just calls that check on the input parameter. If I was to go further, I'd work on rule-factories. A rule-factory is a function that takes a MyVariant and produces a . Then register a rule factory for each enum entry. And now your class itself goes away -- a is just any that takes a and returns true or false. The end syntax looks like: 

By the way, those additional and parameters? They already show a flaw with your algorithm. But more on that later. Instead, let us focus on some things to be wary of. Know what variable length arrays are 

No, sorry. You're heading in the right direction, but makes your algorithm \$\mathcal O(n^2)\$, and if it wasn't for , appending to the would also lead to \$\mathcal O(n^2)\$ due to . Or taking the all the time. Well, basically any function that you use in each iteration that needs to (possibly) traverse the complete list makes your function non-efficient. But let us start at the top. I suggest you to put your documentation before the type signature. That way, the type and the names are still close, which makes your function easier to understand if height is limited: 

implements and should be used with a statement, which would probably eliminate most of that ugly code in and and . I hope that also implements , and if so it too should be used in combination with a statement. But I doubt there's any real point to that class (I cannot access that code since pastebin is blocked where I am now), other than providing ill-advised wrappers around certain methods. 

Not going to review all that, just going to focus on one aspect: your table structure. Edit: ugh, now I read your comment (which was posted while I was doing this review) and most of my review is irrelevant. Still, my point remains: this is really bad database design. 

Why as second argument and not as first? Because you usually have a function that is a polynom . That way you can easily give a name to and then only use , and so on: 

By the way, that ? That's something you could definitely add to your class for your own convenience: 

The difference in step 3 is huge. For any number \$p\$, there are at most \$\lfloor \frac{n}{p} \rfloor\$ multiples in the range \$[1,n]\$. How many aren't? Well, \$n - \lfloor \frac{n}{p} \rfloor\$. And since \$p > 2\$, we will always check too many elements. Now, let's change your sieve so that it actually implements the first algorithm: 

By the way, if a variable should never change its value, declare it . Also, try to initialize your variables, with a value, whenever possible: 

I would add rvalue reference support with moving of temporaries. seems to be too low precidence to be practical - you end up having to everything (as demonstrated above). % at least binds tightly. I do like . Better than my . Forwarding from the operator to the function lets you forget the function behind the operator entirely: -- very Haskell. N ary infix operators that defer application of allow to run as efficiently as possible. But doing that cleanly might be hard. Not sure what is intended to do above. For an interesting test case, implement (where that lambda is a placeholder for a functor) Block some copy and move ctors to prevent persistance, and friend the approriate operators. As noted, I allowed arbitrary binary operators (chosen when you ) to bracket the named operator: the precidence of the resulting named operator exactly matches the bracketing operators. So has precidence of and has precidence of . Of the 3 first use cases (lin alg, container append, then) for two of them the named operators where variants of existing operators, and matching their precidence seemed useful. 

I get the logic and how you're mimicking the logic of , but isn't it a bit much to return a and the ? Wouldn't it be easier to simply return a and test if you get a or an actual value? 

Quite frankly, this still doesn't satisfy me. It feels inelegant. But at least it is much more readable that the original, because you don't need to parse 20+ lines to discover that two separate processes are happening inside that . BTW if was a HashSet, you wouldn't even need to do ; 

Note that these are some ideas I quickly whipped up now, so don't just blindly copy-paste them. They need to be considered because right now there's too much repetition. Ideally I'd like to stick with s, but perhaps there's more "profit" to be had by having one method that contains the concatenation logic, combined with a class with some useful s. The most important message is: move away from magic strings, especially if they're used repeatedly. 

but the as you can see, this gets rid of lots of brevity. On the other hand, this continues to be data-driven: having uniform code behavior, controlled by data, is often a boon to debugging. You can validate data easier than you can validate code! Less effort was put into optimizing the C++03 version than the C++11 version, but the hit may be minimal. 

now, the above doesn't have diagnostics in it. But I hope you get the idea -- don't use a class when a function will do. I might make a a pair of tests and error message s even, with the error message optional. This would give you diagnostics as well. Or the return value could be a pair of , where a true bool means "passed with a possible warning", and false means "failed with a descriptive error". But you might not want to go this far. :) ... If you lack C++11, this is a patch on the above: