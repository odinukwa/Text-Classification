This separation between components and logic is good. I would suggest separating them even more by moving the and functions to separate file, which you can then test completely independently from the component. The component rendering test however is dependent on the logic. That's not good: 

According to the single responsibility principle: no. The App component defines the routing. It feels awkward that it also handles login logic. It seems to be doing too many different things. While the Login component seems perfectly suitable for handling everything login-related. 

Presentation matters. It really does. If you would apply for a newspaper reporter position, would you submit an essay where paragraphs would start without indentation and sentences would end without full stop? Any fool can write a program that a machine can understand. A greater challenge is writing code that other people can easily understand. You need to learn how to properly format your code. Google "JavaScript style guide" and follow whichever you like - doesn't really matter, as long as you format your code consistently. Code structure One of the benefits of a framework like React is that it allows you to split you code up into multiple simpler components which you can then compose into other components that perform more complex tasks. Your code does not take advantage of that. Instead it has been written as a single large App component. The same applies for functions. Instead of large function like you should strive to break your logic down to smaller functions. Giving these functions good names, will also allow you to make your code more self-documenting without needing to write a comment. 

This is just wrong. The result of this function is not a calculated position. The result of this function is either 0 or -1, with a side effect of storing the input character in the board. Also, returning 0 on success is backwards. You should be returning 0 on failure, non-zero on success. I notice here that you have abandoned and in favor of . I still think a typedef is a better idea. Your computations are strange. You are trying to map to a row/column position, but your is going to be in the range (1..3). But you are subtracting 1 from when you index the . Wouldn't it be easier to just compute in the range (0..2) directly? You don't range-check the variable. The names and are not helpful. Once again, I'm left reading the code to understand what's happening. Why not use names like , , or and , , or for the two pieces of data? 

1. Comments Your comments aren't very good. But conveniently, your code is structured so as to make this critique easy: 

There's two things going on in there. The first, is called a slicing expression. It creates a "sub-list" of the list, with just the values in question. The second is the use of the built-in. Switching Faster Your second operation just changes values: 

This indicates a subclass. Instead of a constructor for , you should have constructors for and and and whatever other classes there are. Your class can provide the list of common methods and instance data, as well as a factory method that takes a class name, switches on it and returns the appropriately typed new object: 

Both controllers instantiate a Session object. (Confusingly inside Payment Controller two Session objects are created, I suspect that the creation of the second one is not actually needed.) Seeing within controller code I'm thinking that it starts a new session, but really it's just using the current session. The controller needs session to do its work. If a class or function needs something, it should ask for it. Best way to ask for something is through a parameter. Similarly the controllers create PDOConnection objects. Is it really the job of a controller to set up database connection? Could the connection instead be provided for the controllers. Services What is a service? Saying that something is a service, doesn't really tell us much about what it does. Like the name CartItemService only tells us that it does something with CartItems. We could have equally well have called it CartItemHelper or CartItemUtil. Its real responsibility is storing CartItems to database. So why not instead call it CartItemStorage. 

But taking the wild cards into account complicates the whole thing considerably. Now it really becomes a question of combinatorics. A brute-force approach would be to try using the wildcards in each of the empty positions. This can be optimized of course, but I suggest you turn to StackOverflow with this question - some math-minded people might be able to provide you with a better algorithm over there. 

There's no reason to have a void return just before the closing curly brace of a function. (Except to use as a statement for a , which isn't needed.) 

How to approach this in a game? Well, you have some of it already. The and are fine. I would say that the top few items (resort, mountain, starting point) are a series of text prompts. What you really have is a graph. When the player starts, it is at a central node on the graph. This is the "big decision" that will decide the rest of the decisions: "What resort do you want to visit?" From there, you can change resorts (which is slow and time consuming and expensive, but might be necessary for game play, or might be a "level up" feature- you can only change resorts as you get better). Or you can head for different starting points by taking different ski lifts. Or you could head for a different mountain by taking a van over, then a ski lift. Etc. Finally, you get to a starting point, pick from a small set of runs. You reach a point at the end if your run, pick from a different small set of runs, reach a different point at the end of that run, etc. Eventually, you reach an ending point - the bottom of the hill. You can call it a day, or go back up for more runs! I would reverse this for climbing. There are some places to start, maybe some "trails" that take you to the bottoms of a few routes. When you climb up, you reach a point that you can change routes. Then eventually you reach the top, or some other ending point, etc. Update: So you have a climber traversing this graph of starting/middle/ending points by various routes. So the nodes (points) have various weighted edges (weights = difficulty, cost, etc.) and they all have names. Your climber will need some kind of "current node" or "current location" indicator. Your graph of routes should have a common "node" class, with various "routes" connecting the nodes. 

This code is bothering us with the minutiae of how user data is stored within the session. These details shouldn't be our concern while deciding what to display on Payments page. All we really want to ask is: 

Indentation and formatting First and foremost, this code is not properly indented. If a candidate presents me with an unindented or sloppily indented piece of code, I wouldn't hire him, no matter how good his code otherwise. 

You'd still be defining the inside another component, but most of the code would live outside. Additionally... 

If you're planning to place a ton of these characters on a page, you might be better of using event delegation, instead of binding the event handlers on each and every element - see the jQuery.on() function reference. 

Your sorting of cards to buckets takes a lot of code, which is because the names of your buckets don't match with the names of cards. The cards have just numeric values (10, 11), while buckets are named with words (ten_bucket, j_bucket). I would represent the cards as such: 

Most importantly, try to care about your code. If you put your code out for others to see (by posting it here), try to first make it as good as you possibly can. Remove dead code. Fix the problems that you know about. Post a complete example, not half-finished one. Structure it so that it's as easy to read and understand as possible. Run it through JSHint and fix all the warnings, so you that people will not need to point out the mistakes that a stupid machine could have told you about. 

Your x/y loop can be replaced using The function will do most of the heavy lifting for you in terms of neighbor counting &c 

And since you are then immediately checking them for obstacles, why not make that a different iterator: 

The name does make it obvious what order you're using. And it also explains that you're writing a generator - which is putting implementation details in the public interface. Don't do that. You could go with , but even better would be to make your class iterable using the standard Python approach. See this SO answer for an example of how. You were off to a good start ... 

Imports First, let me suggest you look at the PEP 8 style guide. I don't follow all of the suggestions myself, but some of them make good sense, including the suggestions on the arrangement and ordering of imports: 

Bug: If, during the "pick a sigil" part of the game setup, player 1 simply presses , the game will play empty-string vs. "X". It looks bad. Your code has several problems. Let's start with the most basic: 

At the end of the file, there is a comment #endif // !defined(AFX_ROOM_H__7C105847_EA72_4F3E_8758_2D94DD05D583__INCLUDED_) I suspect that the was once a that worked. I changed it in my version. Next, the author(s) fell victim to one of the classic blunders! The most famous is "Never get involved in a land war in Asia." But only slightly less well known is this: "Never go in against a Sicilian when death is on the line!" And finally, we have the C++ coder's mantra: 

Use smaller functions You say this code lives inside a function. But for some reason you don't give us the whole function, instead you're describing in text what the parameters and return value are. Is it because your actual function contains lots of code unrelated to your question? Even when that's not the case, this function is way too large. You should break it up to smaller functions. 

The main complexity of this function arises from using a plain for-in loop to loop over object keys - this adds two extra indentation levels instead of just one level if one were to use a higher-level looping construct. So I would use some library function or create something like: 

Or alternatively, drop callbacks altogether and use refs to extract user/pass values when the Login button is clicked. 

On surface it's a well laid out code with bunch of helpful comments and good method names. However, looking deeper the data model of this game looks rather odd. Instead of storing the game state in a simple 2D array as such: 

Usually the first approach is better and requires no extra tooling. If you decide to go the mocking route, my personal choice is the rewire library, of which there exist various versions for various environments (e.g. for Babel). Regarding specific tests Avoid temporary variables when you can write the values inline. Instead of: 

You're trying to get cute, and use a ternary expression instead of an statement. You need to study the relationship between statements and expressions in C, and learn about assignment expressions. You want to fix this either by saying this: 

Since we got rid of the explicit check at the top, let's convert the to an and handle upper-case only: 

Above, the marks the end of positional parameters - meaning there are none. Every parameter after the is required to be named. So you call this like: 

(but see below about that thing!) Direction Direction is another enum that doesn't quite do what you need. Currently, you write code like this (code modified for size): 

Why does one have a space after it, while the next one does not? Anyway, dropping those spaces doesn't make your code "look cool." Neither does setting your terminal to black with a green foreground, or whatever. It makes your code look crowded, and hard to read, and did I mention that I could be watching the weather forecast in Mexico? Maxima! Minima! Noche! There are hundreds of "coding style" guidelines on the interwebs. Your class might have one. Your school might have one. If not, google for one. Pick the first one you find, and follow it - it doesn't matter how stupid it is, it's bound to be better than your existing code because it will be consistent. Even consistent + stupid is better than random. If you're lucky, your text editor might even have a code-beautifier. If not, look for one. Try "code beautifier" or "indent" for keywords. Stop Repeating Yourself I'm a little surprised to have to write this, but you've got essentially the same code appearing over and over and over again in your if statements: 

Another step to simplify code is to filter out the invalid numbers before doing any calculations on them. helps us here: 

Well... now that you've learned how to use loops, why don't you just throw it all away and try to write it from scratch. Often it's easier to rewrite the entire thing instead of trying to improve the existing code. Don't be afraid to delete the code. You've learned a lot by writing it for the first time, it will not go to waste - you'll be smarter now, and it'll be much easier to write it the second time. You can back up the original code, so you can always safely return to it when your rewrite fails for some reason. There's nothing to loose. 

The main problems with the code resides in tight coupling between UI logic and business logic. For example the function: 

Also note the naming: the original name seems to be talking about some coordinates, which doesn't sound correct to me. By separating the two, it should be also easier to improve function so that it would not return duplicates, without having to modify anything inside . Additionally: 

Regarding a plan to implement them recursively, I would suggest you instead look into implementing an algorithm like merge sort or quick sort, which are recursive in nature. 

Follow the You ain't gonna need it principle: Don't add methods/properties to a class just-in-case. Have a clear purpose and clear plan how you'd expect your class to be used. Unless you're really sure, it's better to leave it out. Less is more. Design first for your own specific use case. Leave out everything you don't actually need. Then try to use it in another project - see if it works as is, or do you need to improve it somehow. Only after having found it useful in several places of your own, consider sharing it with a wider audience.