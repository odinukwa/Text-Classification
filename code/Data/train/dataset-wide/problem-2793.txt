FWIW, your function has a bug. If you change the input string to , you will notice the problem. The reason for the bug it that the null character is neither a digit nor an alphabetical character. Here's an updated version of the function that fixes the bug. 

With this approach, doesn't need to have any knowledge of as a class. If there is a possibility of conflicting global names, you can put in a unique GameManager.h 

This is one way of reading the contents of the file once and using the contents in the loop. Function to read the contents 

In addition to the excellent suggestions by @Jamal... Physical Layout of class The section of a class should appear first, followed by the section, and section should appear last. The reason for that is that to the users of the class, the section of a class is its most visible interface, the section is the next visible interface, and the section is the least visible interface. 

An interview question I got - Given int , find the smallest number of square numbers that fit inside . Example: 

The idea is to search the array from left to right, looking for rises in elevation. When we find one, we backtrack looking for how high up we can fill the valley, and then redo the backtrack, this time actually filling it (this prevents "double filling" in future elevation rises). The worst case arises when we get a large elevation on element 1 and elements 2 through are rising from 1 to the value of element 1. IE . In this case we do the maximum number of backtracks. If I have my math right, our time complexity would be $$n + \sum_{i=0}^{n} {i}\ = n+\frac{1}{2}n(n+1) \implies O(n^2)$$ So quadratic time obviously a red flag, but I'm not sure I can avoid it since I'm dealing with 2D arrays. Other than that, the big ugly part is the variable in . The point of it is to check that the left edge we end the loop on is properly checked. The last notable issue is that much of this code would be very risky if run on its own because the assumption is that all inputs are valid. This was due to time constraints though, so I don't consider it an issue. 

Considering that you had 15 minutes to implement the class, I think you did pretty good. I have the following suggestions in addition to those offered by the other answer. Store both the value and the minimum value in 

unnatural. I would expect to act like a pointer to since it's the value returned from a function named using an object of type . It would be more natural if: 

PS I am not suggesting as a function name. It just illustrates the concept. Avoid multiple statements in one line The line 

If you have to modify every time a new type of is introduced to your program, it violates the Open/Closed Principle and is a symptom of sub-optimal design. My suggestion will be to make -specific functions external functions and not member functions of . 

My Analysis: This was written with a time constraint, so it manages to keep simplicity without losing too much efficiency. The is unnecessary - I could have done the parsing on the fly, but it would have been more complicated. Similarly, I could have created a better implementation of , perhaps using a tree of character nodes to minimize search time. However, it would be really great if I could significantly reduce the usage of altogether since its adding a to my time complexity, but I cant think of anyway. I also could have used a more efficient data structure for the . I think a parallel array would have worked just as well and used significantly less memory (though still technically ?). And finally, a lot of my code runs under the assumption that all input is perfectly valid - something Im willing to accept given time constraints and the nature of the problem. 

It's not clear to me what you are trying to do here. I think you should change the type of from type to and have just one line to increment its value. This is how I see the loop. 

Remove unused functions and member variables is not used at all. is not used. is not used. There is a function local variable of the same name in but the class member variable is not used at all. is not used. There is a function local variable of the same name in but the class member variable is not used at all. is not used. There is a function local variable of the same name in but the class member variable is not used at all. Replace hard coded numbers with suitably named constants You have: 

from does not create any compiler or linker errors. It's not clear what the purpose of creating is. Don't use ALL CAPS for functions You have 

I also had an alternative idea where instead of have a I would just have a . In this case when I found the cycle I would just go back to the start of the cycle and re-run it (but this time with a counter). This would trade speed for memory, but both would still technically be O(n). I ultimately decided against this because if you scale this up to arrays that are not of s, the solution I wrote would do better (since the extra memory is ints, where as the extra computations could be complex). 

I like this solution because it is very simple, however it does have one inefficiency. It finds the square root only to perform a squaring operation again. It would be nice if I could find the largest square number in squared form immediately, but I cant think of an efficient way to do this.