The only problem with the first few lines is the hard-coding of the csv file. Is there no way to get that into a command line argument, or configuration setting? 

doesn't need to be initialized, since you into it. exists only to hold the result of your function for one line. Eliminate it, and rewrite . can be eliminated if you move your victory-check functions under a single function. The label is just a while loop. Change your code to make it easier to read. 

There are a few things you don't say that might be important. First, is it a requirement that the inputs be lists? Or coincidence? Must the return value be the same list, or must it be a different list? Is the function permitted or expected to modify the input list? Is it prohibited from doing so? I'd suggest you reset your expected inputs to be Iterables, rather than lists. It's more general. Similarly, let's assume that your function behaves much like and returns a totally different list, without modifying either of the inputs. You spend some time and effort to filter the non-sorted values away from the sorted values. You don't specify how large you expect either of the two inputs to be, but if they are very large this might be inefficient. I suggest you create a sort key that is a tuple, and use that to sort the non-sorted values to one end of the result: 

So, I honestly don't see the need to use a constructor and then having to call the function, it seems very illogical to me. Another thing that was not apparent to me, was that you are in need of jQuery, it is not mentioned anywhere explicitly, but you seem to refer to the inside the code. If I am not mistaking, jQuery prefers an IIFE to set up their plugin system. It has the advantage that you can explicitly require jquery to be available, and it would be apparent through any use of your plugin itself, looking a bit like this: 

I personally prefer something like a generic class that allows me the re-usability of a single data structure for handling responses that might fail. The class would look something similar like: 

Above, the marks the end of positional parameters - meaning there are none. Every parameter after the is required to be named. So you call this like: 

So you're inside , passing a function as a command to a button. But inside the function, you have to look up a global variable to figure out the value of ? Try passing a bound method, or using a closure, for this kind of thing. 

Your code as it stands now will open and read file every time you process a line from . This is way more work than you need to do. I suggest you create a dictionary mapping ids to replacement values. You can then read all the lines from table2 one time, and populate the dictionary: 

The TextBox1 in Processing.aspx is where the progress update goes. Now let me just point out the dirty trick and the part I don't like right now. In Processing.aspx, there is a meta tag to refresh the page once per second. How it works (summary): When the process starts, a Session variable called ["Running"] is set to true. When the process ends, Session["Running"] is set to false. And since Processing.aspx refreshes once per second, what happens is it saves the current contents of TextBox1.Text to another Session variable called ["TextBoxContent"]. And then the Page_Load method for Processing.aspx fills the TextBox back up with the previous content, and adds a period. So the output will begin simply looking like "Process Starting", but after 10 seconds it will look like "Process Starting.........." (one period per second). How it works (details): The process begins in DatabaseChecker.aspx's Execute button: 

While we're on the subject, I notice that your web requests are going to a site called audioscrobbler. I'll suggest that if they don't provide an API module in Python, you should go ahead and write one that fits your needs: 

First, get rid of the double-spacing. I don't know if that's an artifact of posting on this site, or if you really coded it that way, but fix it! 

Also, be aware that the inner loop here is basically the library function, if you have a simple list of what matches . (That is, it would probably work for ASCII/LATIN1, but might not work for full Unicode.) So if you have a simple encoding on your DB, consider testing both this version (with ) and a version that uses to see which one is faster. 

This you could extract to an own function if you like (I don't think I would need it when I check if I know understood your code correctly at the end of the response) 

Here you really have to be consistent with your choice. There is no reason why a statement brings benefit to your code, as you are iterating arrays and not an object. It makes the code less readable if such unexpected twists are added. Subtopic variable scoping The use of the keyword in JavaScript and it's scope has been confusing since the dawn of JavaScript. It is important to know that in JavaScript, defined variables are not block scoped, but they are function scoped variables, as this small snippet demonstrates 

I suggest that you adopt the convention of using capitalized names for classes: and instead of and . You don't have a class, but you need one. This is because chess pieces have their location relative to a board, and the pieces are going to move relative to a board. It is legitimate to validate a move by checking the maximum and minimum values for a position: but who decides if those values are okay? The board does! Your and should be combined into the class in or . You are trying to use algebraic notation, which is fine until someone creates a 100x100 board. I suggest that you assume that the position information you are given can be decoded into integer-like objects that are comparable and support add and subtract of small integers. Let the object handle the decoding. Let the object define and values for both dimensions. You can write a class that acts like an integer and stringifies to a letter when you need to. Or you can write a method that handles conversion of a (rank, file) pair to algebraic form. You haven't tagged this as Python 2 or Python 3. Both editions support enumerations, so I'll suggest that you either (a) define your colors using , or (b) don't define your colors at all, and simply treat them as opaque types. Unfortunately, some pieces need to know direction of move, which is usually color dependent, so ... Let's look at a revised method: 

Now this is something I've looked into, and while I have a "working" solution, I don't like it. Background: Through our intranet website, we want to run a process that copies a file from another machine, unzips it, and then analyzes the content. As the file is large, this takes some time (usually around 5-6 minutes). Rather than have the user just hit a Button and pray that they get a success message in 5-6 minutes, we want to show the progress via updates to a TextBox. What I've learned so far: This isn't as simple as putting everything into an UpdatePanel and updating it at various steps in the process. Seems like it would be, but it's not. I looked into threading as well, but I couldn't get it working. That is to say, I got the process to run on a separate thread, but while it was running, the interface wouldn't update. It would queue up everything, and then display it all at once, once the process finished. As I'm still relatively new, the possibility that I was just doing something wrong is high. What I have (which works, I guess...): Two .aspx pages, DatabaseChecker.aspx and Processing.aspx DatabaseChecker.aspx: 

Of course, a little searching will yield hundreds of and the like for python. Update Also, I think what you are doing is looking for "layers" or "levels" at which the given has all its neighbors empty. If so, consider recoding your check to use . The neighbors are going to be constant - it's the same neighbors at each level. So make a similar candidates array for each neighbor, and treat it like a set: "this is the set of levels where neighbor (ij) is zero". Then, compute the intersection of that set with the set (which is just the set of levels where is zero). This is basically a large : cell is zero AND neighbor(ij) is zero AND ... You can execute numpy operations instead of looping in python.