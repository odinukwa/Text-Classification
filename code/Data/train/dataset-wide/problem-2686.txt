has inheritance By default, has inheritance. Therefore, you don't need to manually specify it every time. You can write shorter (and so more readable) code: 

and added a function or or something like that to . That allows you to add new means of earning experience points without having to change the class (rewards from quests for example). It makes it easier to add new elements to the game without having to modify those which already exist. Add it makes the name more consistent. 

Unfortunately, you are unlikely to find a better sort than the linear insertion sort when it comes to sorting small data sets. The only sorting algorithms that might be faster are sorting algorithms specialized for a given size of input: for example, optimized sorting networks can be really fast if you need to sort a small amount of integers, but are generally slower than the insertion sort if not implemented properly or if used with other types. The following image is a graph that shows the performance of different kinds of sorting algorithms to sort small fixed-size integer arrays (the time in ms corresponds to the time needed to sort one million arrays of a given size). Distributions had a random pattern: 

Moreover, adding such a construction function is consistent with the standard library. After all, was added to C++14 for consistency. Miscellaneous tidbits There are more things that could be improved, but they are more subtle and less interesting: 

You are passing around many integers that represent sizes, positions and rectangles. Honestly, you could group these parameters into small utility classes. That would improve your functions signatures: 

I would either pick the first or the second, but not the third. That said, you could also provide another overload that takes two iterators instead of a range. It would make the function more powerful since it would allow it to filter parts of collections instead of full collections only: 

The first rule of matrix classes in C++ is that you don't write them by yourself; there are already dozens around, often highly optimized with [smart] expression templates and other cryptic stuff: Boost.uBLAS, Eigen, Blaze, Gmm++, Armadillo, Blitz++, etc... That said, I would lie to you if I told you that I never tried to reimplement my own matrix class. I think that I tried to create one at leat two or three times :) 

That said, I don't really like the case of the name . If you want your naming to be consistent, you should change it to . And the same applies to . 

That was it for the standard library usage. Now let's go for another round of comments about other parts of the code: 

That said, the standard library algorithms also tend to return the first iterator of the output range, so the declaration would become: 

Note that I removed the types and : they weren't used and they prevent users from using an for since only cares about hasing and equality; it does not care about ordering relations. Also, from a user perspective, I think that functions taking a should rather take a instead (as redefined in "Subtypes correctness"): they probably want to use "values of the graph", not "instance of the key type of the hidden underlying map". That would make more sense. Exception safety Your method in does not seem to provide a strong exception guarantee. It may insert one of the edges and not then throw without removing the edge. You should rewrite your code to have the commit-or-rollback guarantee: 

Make it fully iterator-based By using the functions in , you can make your algorithm have a more "iterator-oriented" feel. I almost converted it to work with bidirectional iterators (with the additional cost than is \$O(n)\$ instead of \$O(1)\$ for bidirectional iterators) but stopped myself since I would have to alter a bit the logic of your algorithm and comparing the original and the new versions would have been trickier. Let's say that the final steps are left as an exercise to the reader :p 

As you can see, yet another copy of the incremented variable is made and is called. Therefore, you may want to use instead of in a generic context. Miscellaneous tidbits 

Working on paths is safer than working on strings since you don't have to handle the separators at all, nor do you have to struggle with drives on Windows. They are added when needed. Moreover, if you need a string to deal with legacy file-handling functions, you can still call on your path to get a nice string representation. Use the statement When doing file IO, you should use the statement. That way, you will have a nice identation to represent when a file is opened and when is closed. Moreover, you won't have to close it by hand, it will automatically be done at the end of the indented block: 

Now, add a couple of methods to to make a downcast when needed. Since you know the derived type at compile time thanks to the template parameter , you can make a safe downcast with a : 

None of the other answers mentioned that there is actually a problem when the value passed to the sieve is a prime number. For example, returns a vector containing . This is due to the vector being too short by one element: it considers the elements between \$ 0 \$ and \$ n-1 \$ while it should consider the elements between \$ 0 \$ and \$ n \$. It should have been declared as: 

Actually, it should even work with any type for which the operations , and have the desired semantics. Catch errors arising from command-line arguments that cannot be parsed as s That one is easy if you look at the documentation of : it says that throws an exception if the string does not represent an integer and an exception if the string to parse represents an integer too big for the type to hold. Knowing that, you can set up a simple / to handle the errors: 

Like the other suggestions in my answer, it should algorithmically be faster, but compilers are smart and reduced algorithms complexity do not always yield faster code in real world. 

There are too many things in your function. It shouldn't handle the expression parsing, but delegate this task to another function. Also, if you are using , you don't need to at the end of : the compiler will have your program automagically return 0 when it reaches the end of the function. 

Also, I have a remark about your spacing: it is too inconsistent. For example you sometimes put spaces after a comma, sometimes not; other times you put some when opening a brace but don't put any when clising it, etc... Your code would definitely be more pleasant to read if its style was more consistent. 

Yet another set of small remarks to add to what @Snowbody already mentioned. I didn't see anything that seemed to be C++11-related in your code so I will explicitly mention whenever my remarks include C++11 elements: 

That way, you have some of the benefits of polymorphism without having to pay the cost of runtime polymorphism which I feel you won't need for such a class. That's a little bit tricky to understand and use at first, but it has clear benefits. 

The fact that leaves behind a to a possibly destroyed entity bothers me (right now, moving your entity does not "destroy" it, but you might add destructible components later). In my opinion, should not take its argument by pointer but by reference: 

Agreed, it looks a bit messy with the big type, but you could probably create a type alias to get rid of the syntactic mess. Even if you dont typedef the whole thing, I guess that exposing the type of could be an interesting idea. Alterntively, there is even better than IIFE: in your can, you can use initializer lists to achieve what you're trying to do: 

From a design point of view, when the standard library algorithms have to return a range of values, they don't return a container but take an additional iterator (e.g. ). Therefore, you function declaration should be along these lines: 

As you can see, you algorithm is a bit better than Timsortfor its worst case (random data) and beats every other algorithm for the very specific "ascending sawtooth" pattern, which corresponds to a succession of ascending data (more or less in our case). However, it slower than almost any other sorting algorithm whenever the data isn't mostly sorted in ascending order and it really doesn't like descending patterns. 

I have problems getting around the way C++ works with locales and UTF-8. This algorithm is intended to take a string (well, a range of characters with a standard string interface) and returning a copy of it with all the characters converted to uppercase according to a given locale. If no locale (ctype facet) is given, the last used locale is used. Is there anyway to improve this code (taking vs ) for examples so that it would be the most useful? 

If you killed all the monsters, you can't be dead, so I added a little to make it clear. Also, I would change the name of to something akin to since gives the feeling that we are playing the whole battle. 

There are many pros and some cons. You can look at the page I linked above for the details. Basically, the syntax is considered more compliated, but it gets typedefs and namespaces right since it does rely on the C++ type system and not on strings processing anymore. Moreover, the functions passed as slots don't even have to be slots anymmore; you can even pass lambdas as slots. Use Since you are using C++11, you should use instead of and to represent null pointers. It has the advantage of be being easy to search and to chose the pointer overload when a function is overloaded for integers and pointers: