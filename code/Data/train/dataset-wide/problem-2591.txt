That would be a neat solution, where you have a bunch of rules that you know apply to the messages of a particular type, and that you can then just apply whichever ones are appropriate. That would be the most efficient at use-time too. How would you implement that? Using some pre-processing, of course, and a new class. This preprocessing is key, and the features you should look for here are: 

This also changes the logic slightly because empty lines will return empty-string, instead of null. Additionally, your code will match from whereas my code will consider the leading space to be a separator (and not part of the first word), and will match the empty string from In other words, I disagree with some of the handling you have with edge cases. I would handle the edge cases in a different way in the stream too: 

Random Even though the class is thread-safe, it is not a great idea to use them in a multi-threaded context. As your class is an enum, it is likely that at some point it may be used in a threaded context (if it is not already). You should consider changing your code: 

First up, let's both simplify your low level class, and correct the Generics at the same time. Stack The issues with the generics are "obvious" by the numerous times you cast values that should be generically correct anyway. You also have overly complicated logic in your push method: 

Sometimes the terminal test is done to create a conditional recursive call. Other times, the terminal test is done as a 'gating' step in the method. In your code, you use the gating method. This is a good choice, but it should be more obvious. In part, it's hidden by the complicated condition with the String conversions and 1-liner return. In order to accommodate odd situations with massive negative values, I would consider the terminal condition: 

Now you have hard-coded Quotes, and you can add and change them at will, and the array changes along with them. How do you use this? Well, your main method becomes really simple then: 

If you want to get a real interface-based system going, where the implementation is opaque outside the package, then there are a few things you should do to bring the interface out of the struct. First up, your struct should not be exposed, drop the capitalization... to . This will immediately make your method fail because you can't really export the type outside the package now, but that's OK, because you should not be exporting the struct, you should export the interface. This makes the signature of become: 

You do have a problem in your code that you have the 'magic-number' 7 embedded in your code. I have copied/pasted your code, and I have left the magic values in the method. Compare that with the other methods, and see how it can be done... I have also split your main method in to different methods, so the logic is more discrete. When you put it all together with a recursive method that 'handles' the out-of-bounds cases, it all looks pretty simple: 

Your assertion that this is a replacement for BigDecimal, is.... ambitious. You are limited to about 18 significant figures, and your code will throw odd exceptions for values that exceed that will throw a NumberFormatException, as far as I can tell. Additionally, your class is not immutable, which is slightly concerning, since by convention, Java classes are immutable. You override the method, but do not override the method, which means you cannot safely use this value in a HashSet, HashMap, or many other constructs. The method is duplicated as both a public static method, as well as an instance method. There should be only one (the instance method, I presume), or the other should not be public. The method looks broken: 

It is apparent that you have put some thought in to this implementation, and apart from the not-synchronized isEmpty() method, it all looks functional. I have some minor nit-picks though, and please bear in mind that these are just my opinion... I prefer to have the notifyAll method to be the last thing in a synchronized block, where possible... You have: 

That essentially does the same task as yours, but uses an array instead of a Map, and it thus removes all the autoboxing and other overhead. The drawback here is that it always uses the worst-case \$O(n)\$ space (even though that is likely significantly less than the average case for the in terms of absolute space. Each entry in the is about 96 bytes or more, whereas the array above is simply 4 bytes per entry. This got me thinking, and i realized we can do the whole thing in \$O(n)\$ time, and \$O(1)\$ space if you can reuse the space that's given as input. If you store the count as a negative value, then you can put that in to the input array, and not allocate any other space: 

I believe a simple split on newline and a hard-coded parse would be better than the regex solution.... especially if you can trust your input data will be valid. In essence, the grouping and iterative looping in the regex is probably the slow part. Of course, the for each loop is also very slow.... and probably is something you added afterwards? If it is in your actual code, that's almost certainly the problem. Let me explain the hard-parse with a code example: 

There is no need to continue to walk the entire tree and find every cycle after yu have found one already! The second item is more minor, and just something I would 'try'.... Instead of using the edge management, and tate on the nodes, I would consider using an IdentityHashMap to track what has been seen or not. Treat it like a 'stack' using and like push and pop. That way yon can do something like: 

In general, recursion is a complicated technique. It is often hard to understand the state of the system at any point in time because you have to add a dimension to your thinking. I consider it to be bad practice to have a recursive process where the recursion is unnecessarily split across multiple methods. In your case, you have a 2-method split in your recursion. 

This way you can reduce the number of values in the set as you get close to the end. Taking on most of the advice from janos, and applying the above, I would get something like: 

Additionally, this is the only loop in your method. All the other code are simple array and pointer manipulations. This method can only be slow because of three reasons: 

General Your code style here is good, the variable names are nice and descriptive, and the algorithm you implement is easy to identify and follow. This is good-looking code. There are a few of nit-picks: 

Obviously, to benchmark this process I had to take some liberties, and the code is not a great solution to the original problem, but, as for the most efficient way to calculate palindromes from a Scanner, it is clearly to keep the valeus as Strings, and to do char-based comparisons..... 

Note that I put a check in there for an empty List A. This allows it to work on unevenly sized lists, including an empty list A. By thinking about the problem a little differently you can: 

and a factory that manages these Textures. I would make this a generic class that can be customized for Texture, or Audio data, etc.: 

Elegant and efficient are different things. instances are not thread safe. It is common in my code to have a few utility classes, and one method I often have on the utility class is: 

scan the members in one set is \$O(n)\$ (where is the size of the first set) with that member, scan the other set is \$O(n)\$ (where is the size of the secomd set) remove the member if it matches which is \$O(n)\$ (because it is an ArrayList, and removing a member means shifting all members after the removed item by one). 

Now you have a class that represents a dice, and you can roll that dice, and you now have a main method that looks like: 

Personally I am not too concerned about the string-concatenation you use for computing the value when recursing, but there may be a better way with using a pre-computed array, with tracking indices. I would consider the array/index solution a "phase 2" thing if performance is an actual, proven problem. So, having said the above, it's best to explain it with code... I would do two significantly different things... I would set up a lookup table of string-based "digit" keys, and the corresponding character value. I would then loop through that table in the recursive function to determine the matches.... Setting up the table is relatively complicated, but it's a 1-time thing consisting of 2 correlated string arrays: 

Using String concatenation in a tight loop is a poor choice when it comes to performance. This statement has to go. the variable names in your loop are almost meaningless. You are using a String as if it is a Stack (adding a value to the String in the loop). Since most combinations are not going to add to the target it seems like a lot of String manipulation to get there. the recursive method should not be public. Java classes should be named with a capital letter, i.e. it should be . 

Now, there's a single HashSet (which under the covers is a HashMap), and it contains all substrings. Searching for those substrings is a case of computing the hashCode of the search value, and it will find the value "fast"... 

I would probably take that inner stream and make a real out of it. I would also make the printing a separate function ... it should not be part of the parsing/decoding. Conclusion I put together a working example program here: $URL$ Note that the version of the code I was happiest with separated out the various functions, and converted the to a . Note that the map also has the "Space" value in it. Additionally, the reading of the file, and converting to is expected to be outside the function (in the main method) which cannot be done in . Here's the code in full: 

There is no requirement to report the characters in any particular order. As a result, there's some tricks we can do to improve the performance. Other tricks to use are: 

Your code is more complicated than it needs to be, but it gets the job done. The awkward part of your code is the use of the various index values , , and . Really, you don't need them at all. If you rename things a bit, and use "enhanced-for" loops, it becomes: 

I think, even though this is a special case, that this is the most important reason: when running your Java program through a debugger like the one built in to Eclipse. When you are stepping through your program the debugger will use the method to show you the state of all your variables. This is where, in many cases, you will value the toString() more than anything else. when developing or debugging a program it is often convenient for you to add 'println' statements, and they can be things like: System.out.println("Processing customer " + customer);`