I've got to made a function which returns the checksum of an given integer. Source code of my implementation so far: 

The purpose is to attach a tooltip-element to arbitrary HTML-elements. The tooltip appears when the user hovers an element. Follows the mouse-pointer while moving over the element. 

I had a college semester and an internship in a firm doing Java but I'm not a real Java programmer. So I don't know the idioms and patterns of the language. Therefore my question: What improvements should I made? Especially: I catch the most exceptions within the class itself instead of passing it upwards towards the calling method. Is my exception-handling done in a correct way? Is it good practice to catch exceptions as early as possible? Any comments, hints and recommendations appreciated. 

On my work I've got to maintain an Excel-sheet. Documenting the incident-tickets I've dealt with. For to be able to distinguish between single days easily I mark every second day with a light cyan-background. So the sheet gets a Zebra-stripe look. Because I've got to do this every second day (by marking the concerning row-range with the mouse) I've made myself a VBA procedure. It is started from the Excel-GUI. An input box appears in which I enter the start- and the end-row. Separated by a colon. The VBA then marks the range between start inclusive and end inclusive. Moreover it adds a bottom-border to the last row. Here the VBA-code: 

Good Haskell style also involves using higher-level functions whenever other considerations don't require otherwise (e.g., performance, comprehensibility). Here's my version of , note that it looks much more like your version from before the edits. 

On this line I would change to . That's the only value will ever be, so it's better to be explicit than to be clever. You have far too many comments that have little to no value. For instance, you can assume that unless you're writing an "Intro to Haskell" book your readers will know what pattern guards are and so you don't need to explain what they are or why you used them. And finally in my version below I've cleaned up the alignment with liberal use of whitespace. This is mostly an aesthetic effect but I find beautiful code easier to read than otherwise, and this is not an uncommon style in Haskell code. 

One question is what goes in for the where we used to call ? Well, ! One more complex issue of style is the usage of in . Top-level s are better represented as guards in Haskell, it's easier to extend guards and their usage is more idiomatic. 

Hyperlink to my GitHub-Repository. What would you have done different and why? Looking forward to reading for comments and answers. 

I had to do this exercise for a further education in which I'm currently enrolled in: Write a Java class "Air Plane". Object-property names and types are given and compulsory. Write the according constructor and getter-, setter-method. Check within the constructor the given values for being valid. Moreover are the following methods to implement: 

It's from a Java-course I'm enrolled into. The classes "Instructor" and "Book" are already provided. You got to write the different constructors of "Instructor" as well as the methods "getMostRecentBookTitle" and overloaded "updateBook". Here's are the final classes expanded with my additional code: 

I have to implement a double linked list as an exercise for a further education. There are three interfaces which have to be implemented: IValueElement 

This week I've had an idea for an Ajax loader animation: An air bubble ascending in a glass tube. Something like shown here: $URL$ I've used CSS-keyframes and -filters for to implement my idea. Finally I made a little demo for simulating the loading of data via Ajax-request. Compiled and minified code as an Live-Demo: 

(I would also replace in 200_success's answer with because that is maybe the greatest programming pun I have ever realized.) 

Or if I was feeling particularly flashy, I'd write this, and then spend 30 minutes arguing myself out of it for being hopelessly overwrought. 

Now the third bullet on my list should really be broken in two, one bullet point for the predicate, and another for searching the sequence with it. But that's alright of course, our personal design documents don't have to be perfect from the get-go to be useful. The predicate is of course the value, expressed as a function. 

You shouldn't have to set to mode at the start of . will work correctly by default. isn't properly tail-recursive, the recursive call to is followed by that action. In this example it won't make much of a difference, but in a real program where you can expect a large amount of data this would end up blowing up the stack. Here's the version I ended up producing taking all of the above into account. Read closely and try to make note of all the differences between both versions! 

On my work I maintain an Excel-sheet which contains information about the incident-tickets I've processed. I've enhanced the sheet with some VBA-code which I use the following way: In the beginning of the work shift I start a new section by entering the current date into the first column. The date has the format 'dd.mm.yyyy'. I've defined a key-combination via the Excel-GUI which invokes the VBA-subprocedure. Means: Pressing the key-combination shows the count of incidents, finished on the current day, via a message-box. Here's a screenshot how the Excel-sheet looks: 

That's surely not great programming. But I use it already for a few months and it works for me. But how could it be improved so that it becomes more general? So that it could be given to colleagues which use Excel-sheets. This sheets are similar to mine but not exactly the same. Everyone has made his/her own. Any other comments, hints and tipps concerning coding style, structure, error handling etc. appreciated too. 

Next, we know that the cycles begin with a monsoon and thereafter proceed regularly indefinitely into the future. 

200_success's answer is spot on, but we can more closely cleave to the problem specification by making it explicit that you're determining maxima-ness by inspecting triples. 

All top-level definitions should be annotated with a type signature in Haskell. There are myriad reasons for always doing this, including acting as documentation, providing necessary information to the compiler on occasions, serving as a check against your own understanding of what your function is doing, &c. 

Just the Answer This version relies on , which ties up all of the other concepts we used and provides various handy functions to leverage their combined power. This version is as terse as it's gonna get. 

Now all that's left to do is create a . We could accumulate values on our own, but really that's what is for. 

Notice that we're building functions that can be easily composed to produce the functionality our final program requires. Going from an arbitrary string to just one containing valid letters all in lower case is easy, . Going by the original statement of functionality, we next need to determine a letter's position in the alphabet so that we can then keep a tally of letter frequencies. In writing a functional version though we can be smarter. Instead of picking a letter and then finding the correct tally to increase, we rearrange the order of operations. First we group letters and then we count the number of elements in each group to produce a tally. Perusing the documentation for we'll pull out and . will rearrange our list of , then will organize them into lists by equality. The last step is to run length encode the groups to produce a tally for each letter. 

I have written this function for creating complete HTML-elements including arbitrary attributes and inner HTML. I want to keep and reuse it. Therefore I have tried to document the usage well. I would be interested in hints concerning: 

The idea is to improve the usage of larger formulars. Done by adding a little animation to the input-elments. When one of the textboxes is clicked or focussed via tab appears a colored border. Signalling the user which exact box has become active. 

Two general things: Avoid variable-names which consist of just one character. What I mean is: Even something like 'telValue' is better then 'd'. Still not pretty but at least one get an idea what is meant. You should care about name conflicts. It would do no harm to attach the functions on to a global object. Or to use a Immediately Invoked Function Expression. Examples here: $URL$ Concerning the redundancy issue: You could data-attributes and class-names. Then using iteration-functions in JavaScript. Example what I mean here: 

The above version is contrived to (hopefully) show just what went where without piling on too many changes at once. This version introduces , which creates an infinite list out of a finite one by repeatedly appending the list to itself (in effect). We restrict the range of our indices to because we know they're completely predictable and periodic after that range. To take it a step further we can directly pattern match on the value of in our tuple. This usually is non-obvious to beginners and so is worth showing on its own. 

I'd probably take this one step further though to handle not having any constraints (in which case you don't want to show up, presumably) and write one more helper function. 

The last thing I would do would be to factor out the result message code from , it's a little repetitive having there three times, and you can conceive of various scenarios like making this two player where you'd want to be able to easily swap around result message generators. 

Is everything done in a good way and manner? Where could my implementation been improved? Any ideas how to solve point 8? There I get finally stucked. Looking forward to read your comments and answers. 

Is everything done in a good way? Or has the code flaws which should be improved? Okay. My ASCII-art skills have to be improved. I admit ... But seriously and important: Is my implementation of the MVC-pattern correct? An according answer would help me to feel more confident about the topic MVC. But other hints and recommendations are also welcomed. :) 

It seem to work alright. But frankly: With all the parameter-checking and taking different possibilities into account it has become a lot of code. If someone knows a possibility to write it more elegant then I would appreciate his or her answer. Any other hints welcomed too. Should mention: I can't use ES 6-syntax because we got only Internet Explorer 11 here and there won't be change in any nearer future. 

Now more general advice, you should include a type signature for all of your top-level definitions. This is important for a few reasons. One, it acts as a check on your understanding of what your functions are doing, the compiler will complain if your signature doesn't match what your function really does. Two, it serves as a surprisingly powerful form of documentation for readers of your code. And three, it can help the compiler infer more of the types you use within functions without needing annotations. As an example of that last point, look at how you had to annotate the line with . If you had given the compiler enough information to go on elsewhere in your program, it would have been able to deduce that on its own. Here's how. 

We fold over the finite timeline from the left, applying each growth function to the accumulator (starting with the height of the tree at year 0). 

I would be very interested in hints and tipps concerning the animation-design and the Sass-code. Because I'm a beginner there. Nevertheless: Any other feedback welcomed too. ;) 

I've made this function for to get a deep copy (recursive copy) of objects. => Sub-objects aren't references to the sub-objects of the original object. Instead they are objects on their own. Here's my code ... Attention: Most of it are test data and an additional test-function. 

Task description: A set of product-thumbnails is shown. The user can filter the shown products by vendor(s). Done by clicking one or multiple buttons. I used jQuery together with the Isotope-plugin: $URL$ First I had the idea of using iteration for assembling the filter-criterium string: 

The code has passed the automated tests. But I would appreciate some real feedback. What do you think about my string-processing and the way I've done the type conversion? What would you have done different and why? All comments, hints and answers appreciated.