I would recommend instead, to create the 2d array of colors in that first double , then, loop over that and set the pixels. If possible, instead just create a max resolution version of your image, and rely on the 's ability to scale the image for you. 

Note: This will work with your specific case... don't do this if you have with set values that contain gaps between values. 

I've written a small library of objects for parsing of Valve Map Files (VMF). These files are always generated and exported from either the Hammer World Editor, or a Source engine built in map making program like the PTI in Portal 2. So I can trust them to always look roughly like the following, except of course that these are just bits of what is usually a much more massive file. in.vmf 

Edit: It is important to note: that depending on the datatype making a private set does not stop the object from being modified. You could still be pointing to the same object as before, but some malicious code could have changed properties of that code. In this case, you could have the get a cloned version of a privately backed object. 

you aren't actually using the program arguments, so there isn't any reason to include them in your main signature. 

If you were certain that all your empty strings were actually null instead of empty strings you could have just used the null-coalescing operator , which returns the first side of the argument which proves to not be null while moving from left to right. In this case, your code would have looked like this. Note: To make a string null use 

You didn't include a on your condition, this isn't wrong, I just want to point out that some people like to see it for consistency's sake. 

Be careful when debugging your code, and remember (depending on your db setup) if you pause the debug in your code while the connection is open, you wont be able to use the database. Also if you have any plans to do mulithreading with this you'll want to use locks. 

In adition to everything else being said, I would like to point out that your tabbing is done incorrectly, and would look much sexier like this 

I really like your use of a with , that is one of my favorite things to do in C# for some reason. Your methods that look like this 

For future reference, instead of making the class you could take advantage of the class. Not to say that you shouldn't have made this class, but can generally replace these simple data structure like classes. 

In your specific example you will use getters and setters simply when something is public instead of private. You can however have private properties with getters and setters. Getter and Setters are methods which are used in the setting and getting of data. They are very useful when you need to do some calculation when getting or setting data. Example: getting calculation 

I like my variables to only be in the scope they are needed. For your case this would be guess not being in the loop. 

I see that at the bottom of your code you are checking to see if all the values in Numbers are 0, and then printing a message, and returning. Why? You did this earlier, and had an early return, so if that was the case the code should never have made it here. 

Edit: To expand upon the OPs full code being posted. My original answer is still valid you would write it like this: 

Now your CardNo cannot be changed outside the scope of this class. This should be done any time you don't want something to be changed from an outside source. This doesn't work well with objects, because.. while the reference cannot be changed, the object its self can be, so you'll have to be careful there. 

I noticed you used in your program. While I will say that I am guilty of using this all the time, you should actually use . The reason is because of in-consistency of newline/carriage returning in different programs. always uses the proper line ending. 

If you don't want/need someone using your class, than encapsulate it. However I feel that you will at some point want to be able to re-use this excel reader, in which case I would move these methods into a Static . And your first class I would just make a method in your original program. 

EDIT: Changed to add additional alternative that does not include i in the fail-success of the parse logic. 

Also note that I removed you setting , because you were not using that since your were returning right away. 

This lack of spacing is in other parts of the code, but I'm not going to point out everywhere. Aesthetically this block of code could be re-factored a few different ways. 

Next we can simplify some of your code with , which you should use any time you want to repeatedly do something to a list. Below, using , I query the list of numbers and I ask if all of them equal 0. 

You can do this same thing for your class, that is.. making these functions instead of methods on a class. You don't have to, but again, you aren't taking much advantage of the OO, so there is need for you to make it OO. 

Your math was wrong, but don't worry it was a simple fix. And I have provided an easier way to do it on top of that. The key to this review is that we're going to take advantage of the .Net libraries, which you should remember can practically do anything you want them to. That is IF you know how to use them. in C#.Net 

Using Linq: I created a list of all the possible values that you considered valid, then calling the Extension method on our string array, would by default return just the first item in our array. By passing in a lambda expression I override that behavior to return the first value which matches my condition, which is 

I would suggest not blanket catching all . Catch exceptions you know are going to be thrown explicitly, you should also take preventative measures to make sure exceptions are not thrown. Also instead of completely closing down the application when this calculation fails, perhaps just show an error message on screen and continue. 

Naming convention: All of your method level variables should start with a lowercase letter, be , ie. vs 

I've ran my code on talentbuddy, and I think their back-end is broken, because it says my test case fails from missing data (far down the line), and when I run the test on my machine with the same inputs it prints out the right amount and correct data, in 30-80 Milliseconds. SO IT WORKS. I am looking for a general review of my code and practices. Keep in mind that efficiency is key here. I've added useful comments to document the flow of the program (even though they make it look ugly) 

I know you said you liked using delegates, and you wanted to see what you could do with them. But I think its good to recognize when you don't need to make your own. Here is a simpler refactored version of your code. It does not use your delegate. Also, technically what you were doing before was recursion still. 

Now the only customer that the public gets to toy with is a customer they can modify, but it wont affect the customer you have though. 

You should give the user a way to close the program. While this isn't incredibly necessary for simple learning programs, it is a good habit to get into. You should avoid throwing exceptions, they break up your program's flow. Certainly use them where necessary, but this is not one of those places. Exceptions should be used in situations when your function doesn't have the ability to handle a situation/error. In the following snippet, I've declared the DateTime object, and a Boolean which will tell us if the string entered by the user was able to be parsed. Notice how I am calling the TryParse Method. The TryParse method takes in a string, and an . This is important, the out keyword is a bit more advanced than you have come accross. It is a keyword which implements functionality programmers were used to in C using pointers. Suffice to say that this function will set whatever object you pass in, to be the parsed value. 

As soon as I see a I get nostalgia, and know that you haven't taken a step back from this program and considered a world without (java). There is always a way to avoid using a , and this is a rather simple one with multiple alternatives which don't kill your program flow. I think the best one for your situation though is to only increment up when the is successful. 

A loop would logically serve you better here. Aditionally, because you didn't give response a default value, who knows what garbage is in it, maybe it actually is . 

I like to say instead of , it just makes it more clear to me what is going on. Your code would look more like this. 

serves no purpose, if your number is indeed lessthan or equal -.2 then it will also hit the next check if it is lessthan or equal to 0. 

Structure Instead of making a final class, like you have there, make it a class responsible for loading one image, then maintain a dictionary of all the resources you've loaded, this way your game will be much more scalable, and values wont be hardcoded. You could even have a class called to directly point to some of these commonly needed images, who's names wont change. You would still load the images with ImageProvder, but would simply maintain a direct pointer to your desired images. 

Information You can do constructor chaining in C#. However what you are doing here does not require such techniques. Here in your case you have 3 constructors taking all different types of data, and mostly doing separate things. You will be best off grouping repeated code into a method and calling that method from each constructor that needs it. However, for future reference if you do want to do real constructor chaining, you can do it as such... 

The most inefficient thing about your code though, and the reason it is taking so long to process is most likely your quadruple nested 

Other than that... this code seems pretty solid, except for the crazy lack of immediate readability :D and like mentioned in the comments the fact that you are using delegates at all here. 

In your original program, you had some inconsistencies with your usage of brackets, and there were places where you could have condensed your if-statements into single statements. I'm more interested in seeing you learn the power of LinQ. First two lines are spent creating a dictionary exactly the same as you were before, except using LinQ to do so. First step is taking the list of letters you have () and grouping them by their value . This returns a collection of objects. On this collection, we then call . For the key I specify, that I want the grouped value which is simply the letter its self. For the value, we want how many times that letter was in the original string, which is just the count of that letter in the grouping . Keep in mind in both of these selectors, that the value is the object. After that I run through the , and check to make sure that every key that is in the first dictionary, is also in the second dictionary. When I confirm that, I ensure that their values (counts) are the same. If at some point, this is not true, I simply at that moment. After all that, we know the first string is at-least contained in the second one, but we don't know if the second string perhaps has additional other characters. If we just returned true right now, it is possible that would return true. So all we have to do, is make sure that they key count is the same, that way we know there are no more other letters, and we know we've already verified that the counts of the ones that do exist in the first string are valid, so just a key count comparison is all we need. 

Note: I used < Numbers.Length, this way if you ever increase the size of the array, you can support more numbers without having to re-write this part. 

Example: MVVM OnProperty Changed, notifies the UI when something in the backend has changed and updates accordingly 

At this point I am recognizing that we are iterating through a list, and conditionally doing one thing. This appears to be the perfect candidate for using some linq. using Where and some lambda we can make this statement to return an which only contains Types we need to add. 

Now if this was a time where names was an existing list we only needed to append to we could use but because this list was created here for this purpose (I think). we can just ToList() our results and save them as the list. At this point you could have a few different variables, or you could make your code look awesome and confusing and one-line it all. because I see now that typelist is only being referenced once. (Btw it should probably named typeList, with a capital L, but we're getting rid of it anyway). So in the very end you can have this beautiful chunk of code. Note: I am also going to use instead of just checking if it is null. 

If you want to actually run this program, here is the very simple code that it takes to load up a vmf and write it back. Main 

As for catching all exceptions, if you coded your program right, you shouldn't be getting ANY exceptions, not even out of bounds ones, you should design your logic to never check indices that are out of bounds. 

I've implemented a simple linked list in C# using generic for values. I did not inherit from any of .Net's fun and helpful classes like , or :D. This is just after an hours worth of work. I've tested everything and I believe it all works well enough, but before I go on to add more methods, or make the actual data-structure more complex I'm looking for some feedback on what I have. Critiques on everything are welcome, perhaps there is some glaring issue that I have not addressed. As far as my nodes having a previous and next value, that is because I did intend to have quicker searching iterating backwards through, and some other stuff that is not yet implemented. While right now do use both properties of the node, I know I could avoid it. But I have kept it in and use it because I do plan to implement more stuff later. This is supposed to emulate the List class. I've called mine Jist to not confuse anyone. I also have considered taking away the constructor, because all the properties are public anyway, but I've decided against that, because I don't want any accidentally values... while values are fine, I don't want any in there by accident. 

Instead of using and comparing the returned value to something, simply use the method on string objects. 

Now that we can see this code clearly, we can realize what it is actually doing. yields a Boolean value which is then passed to the special , which then asks if the Boolean passed in was true, if so.. then return true, else false (oversimplification of what is happening on the low level, but you get the gist) is a Boolean, so instead of using that in an if... just return the Boolean you got from using that operator.