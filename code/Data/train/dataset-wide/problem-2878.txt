You should consider representing the board as a class instead of an array. This will allow you to make it more stateful, and extract board-specific logic into the class itself. You can also take your method and make it a little more robust / non-repetitive. Start by defining three helper-methods, , and . What do we return? Simply return an array on each. 

A new tab will open with a lot of fun stuff, order everything by 'Object Type' and find . Double click your line. 

I see you've included braces everywhere, which is very good. The only recommendation I would make here (which removes arrow-code in Visual Studio) is to omit braces around directives that are directly proceeded by other directives. 

You want type-safety at compile time, against something that's inherently unsafe, so we have to cheat quite a bit to make that happen. We're also going to use some Reflection - doing so means we can eliminate the , and replace a lot of this class with a couple quick calls. 

You search twice, guaranteed. You use to check if it exists. You wrap a significant amount of work in a / block, that doesn't need to be. You treat really weirdly. 

This could literally save tens of milliseconds per pattern, which means in your case it could save a lot of time. You should then create a local string for , to save more time and keep things readable, as well as some other miscellaneous tweaks. In the end you end up with: 

Which on first glance shouldn't work. It wasn't until I remembered that is a reference type that I realized why it works. I have no idea if there's anything that can be done about it, but it confused me heavily for a moment. Perhaps instead of using just call instead. 

Overall this is quite good, the logic is sound and I don't see any obvious errors that would make it painful to maintain. Hopefully this advice is helpful for this project and future projects as well. 

Both should have the same effect on the cases you provided. However, if, for whatever reason, one of the cases ends up as , then the second method will only make it . Choose that method with great caution. As the OP pointed out in an edit that should have been a comment, this code can all be done as LINQ: 

First: you only really need for the "game winner" message, which should be extracted to a different location. In fact, you're method only ever returns two variants on the string: 

Simply subtract and add together. Then we solve all the problems (mostly). :) We can still run into a problem of int overflow if the range is large enough, and the values are in the right order. Without using a type it's difficult to solve that if we don't first order the array. (Which increases runtime obviously.) 

In , you don't need to be . You're not reassigning it, but are instead calling methods on it, of which does not affect. The same thing applies to in . This doesn't need to be , because you're not directly assigning to the array, but are assigning to elements in the array. 

I would consider using a single as the main key for your session, and instead of storing all of your directly in the session, store them in a SQL (et. al.) table. A nice by-product of this is that it's very difficult for people to change session data. (Hijacking, on the other hand, is a different story.) 

Boom. We don't need the in each (or ) block. We just need one at the end. But there's a better way to write this (with C#6.0, that is): 

Unchecked There's no need for the context in . Bitwise operators never cause overflow, and as such has no effect on them. The context only affects certain arithmetic operators. $URL$ $URL$ $URL$ Constants (Debatable) Constants () are typically all uppercase with words separated by underscores. This is a best-practices rule more than anything. Note: as stated in the comments, this goes against the general naming conventions: 

So that's easy. As you can see, I can still use , I just can't use . Then, I wrote instead of the method: 

Both the extensions and that enum declaration are in the same file, which means that the extension method is easily available. Lastly, I have some tests (I know I need a lot more): 

(Use the Australian English culture, if you can't find it there use Great Britain English culture, if you can't find it there use the United States English culture.) Though, using the neutral () as the second in line may very well solve that problem with most strings, but it's still a possibility that this chain could be used and is now broken. Of course, it's not consistent because of your member there. 

That looks better. Next, I really don't like your formatting, but that's because it hides bigger problems. 

This makes the code a bit more readable, and now if you modify where the location is (say you add 3px buffer) you don't have to modify both lines. Personally, I would add a method to the class, and call it instead of putting this logic into the form class. Lastly, you really need to clean up the indentation/whitespace, in Visual Studio CTRL + K then CTRL + D will automatically clean a lot of it up for you. 

Boy is that a mess. You use a loop (not F# idiomatic), filter in the loop and return either or , then use a on a to filter only the values and return the actual value. You use a , which is a synonym for (which is the preferred method), and the worst part is you use it on a list that could have already been filtered. 

Next you can pull a lot of that work outside the block, and throw a better error. I would, at the very least, change it so that the error message reads "Could not migrate Student ID" et. al. Then, at the end of that block (after ), if you really want, you could add another , or just since they're the same type and such. After we adjust this section, we should extract a method for it.