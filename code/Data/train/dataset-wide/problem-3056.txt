But the above are merely minor flaws. That they're omni-present is however a warning sign (as well as the obviously copy-pasted parts), and I'm afraid that I don't see any value in this code. I fear you're relying on very outdated documentation; instead look into ORMs like Entity Framework and how those are used. 

In addition to Heslacher's advice, I'd also suggest you to move most of the logic to a separate class, e.g. , and call that one from the . Yes, the current program is small, and even smaller when you apply Heslacher's advice, but IMO you should get in the habit of keeping the of your 's as small as possible, and more importantly have dedicated classes that handle your logic. Note that currently the data in etc. is fairly limited, but what if there are dozens of different message parts in the future? Consider moving those arrays to a separate class, and perhaps even to a config file. 

What if the grid changes and the userName isn't the third column? What if the images are moved from to another location? And then there's this: 

Instead of copy-pasting them, move them to a separate method and call that. The same is true for this: 

I note that you keep the Excel file open and then parse one or more text files. Have you tried closing and opening the Excel file for each text file you parse? Also, have you considered other ways to open and edit Excel files besides Microsoft.Office.Interop, like OpenXml? 

Why do you need to specify the whole namespace in ? And why is your variable named -- why not just name it ? is a bad method name, since it lacks a verb or verb phrase. Parameters should be camelcase: . 

I don't think is descriptive enough. Sure, that method does parse the response, but more importantly it returns a list of contacts. 

Comments shouldn't tell me what is happening, but why. and don't tell me anything useful. Meanwhile tells me that isn't perhaps the best way to check if you need to do an insert or an update. 

You're mixing UI and back-end code. There is no reason for the code to be in ; it should be in a class of its own, expose a method that receives the values of and as a parameter, and report back the elapsed time. 

Where did I go wrong? Is there a more elegant way to bind the radio buttons in the View to the code in the AdminController? 

That way is less error prone: what if you accidentally switch and when calling the method? (Though that could be prevented by using named arguments, of course.) Your constructor would become: 

is a seriously bad idea. It doesn't even do what it says, and what it does can be done far simpler with a -- not that this would be a good idea either. 

You can now call that method in each instead of copy-pasting the same code over and over again and only changing a small part. 

is nearly 100 lines long and does far too much. Split it up into smaller specialized methods, e.g. a method to construct the file name, etc. 

isn't a good name either, especially not when you return a -- a request should result in only one response, I'd hope. Isn't this a anyway? 

is a horrible name. A property should never start with "GlobalVariables". Later on there's a , so now I'm wondering if is a typo. Even if that's the case, having a class called to pass data around indicates a bad design, and its properties don't seem to follow the capitalization guidelines: should be PascalCase. Also, shouldn't be called "List", even if it is a . Just call it . 

Microsoft's standard is that properties are PascalCase. "People" is plural, and therefor a bad name for a class IMHO. Someone isn't a "people", he's a person. is a bad name for a class. It should be anyway since it is a compound word and the first letter of each subsequent concatenated word needs to be capitalized. 

Your method names do not follow capitalization standards, they should be PascalCase. However, what's worse is that their names do not correspond to that they do: 

This reeks of magic strings. I would be tempted to make this a class of its own, which then can be converted to a , and things like would be constants in that class, perhaps. At least I'd move the whole logic to its own class, have it parse the response and return a . Actually, that goes for most of the code. I'd move some code from at least to separate methods, certainly the lines where you create a new cookie. The whole method is rather hard to figure out, for instance I didn't quite understand why you assigned to multiple times until I noticed happens between those two assignments. I'd much prefer it if the logic in that method was distributed over several shorter method, so the logic becomes clearer, e.g. do a download, parse the response/create the NameValueCollection, do an upload, create the cookie, do a download, get the contact details. 

(You might even want to add even more checks, or perhaps remove some.) They can then be rewritten like this: 

Why isn't this one single method on that takes the value of as a parameter? I'm also not fond of returning a , I'd expect it to be more like . 

Why do you do if the next step is ? Instead don't bother with the initialization and just assign it directly: 

Is this really actual, working code? Also, you're not showing us ; I wouldn't be surprised if it doesn't need to be an "overloaded function with 6 type overloads". I also would expect a method called "Create" to return something, but that's open for debate. You could look into System.Convert and use that to convert the object to a value, but again: this depends on . I'd advise you to submit a new question and include those methods, and provide us with more background. 

I would strongly advise you use something like NDesk.Options when you need to deal with so many parameters in a console application. 

Splitting up the logic will result in smaller methods and much easier to maintain code. Right now you have three methods over 150 lines of code and so much happens in those three methods it is hard to keep an overview. 

My main problem with this code is that it feels "rambling". Things happen in the right order, but it's all mangled. For instance: 

Comments like are superfluous. Your code should tell me what it does, comments are used to tell me why it was implemented like this (if necessary). 

I would move the logic to , to avoid repeating the same thing with only a parameter change as you're doing here: 

"Backend" is a compound word and thus the correct capitalization should be "BackEnd". However, that would still be a fairly meaningless name for a class, even for a namespace. 

That is far clearer code that doesn't require someone to figure out which parameter of the constructor corresponds to which property. I also wouldn't use an for , I'd go for or even or . 

But I fear your refactoring might need to widen its scope, because even if you apply this you still have an ugly or . 

This might seem like overkill, but it really benefits yourself if you apply similar coding standards to small projects as you'd do on larger ones. Because such small projects might grow, and then it's nice if you don't need to rewrite a lot just to introduce some small additional functionality. 

This seems odd: To me it would make more sense for the user to have a field, and for to simply be a which returns . I'm confused by all of , to be honest: this method updates two properties of its parameter and then calls which doesn't look like it updates a , but instead adds a new one. Why are and s? Their names suggest they should be s, but then you use them in a calculation... This whole method throws up all kinds of warning signs to me and I can't shake the feeling you have some fundamental flaws in the design of your solution.