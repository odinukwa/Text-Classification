Also, I'll point out the bug in the code you have in your "equivalent Javascript code" link - it has in the at the bottom instead of (which is correct). You probably guessed that since your code here has that fixed. doesn't filter the elements from the array, does. 

OK, we have the s, now we have to deal with the sieving. If you look at your code and think about it in terms of transforming one array to another, you realize you either change an element to 0 if it was unlucky and its index was in the , or don't change anything if the index wasn't there. Look how it translates to code: 

And we need to prepare these new values for the next "iteration" - and return them. You can see that instead of deciding whether to finish or loop again right after changing the , we delegate that to the beginning of the callback. If we had it here instead of at the beginning, we'd do unnecessary (and potentially harmful) changes to the numbers array, because we can't stop the reduce from getting through all the steps. That's a minor disadvantage of this approach - we do some unnecessary work. But we can limit it to just finding out if we actually need to do something or can just return immediately. 

An example implementing all above. A row is a stored as a byte, with 4 bits used to fill reserved seats. There are early exits if the solution is known (ie no reserved seats, reserved seats greater than min needed to have one family seat free, and exit if no family seats remaining. Also skips reservations if the row has no family seats remaining. Update added comments. 

But the repetition of annoyed me Access properties via getters and setters If you need to change the properties it is better to use getters and setters, though only as example, you can include some vetting on the setters 

And submitting to keetCode it got a lower score than using a loop, being only ahead of 73% of submissions ??? Then I tried 

Next portion of the code is reached only if we still have work to do (we didn't get to the inside the ). It's outdented, but maybe that's hard to see with my comments between the lines. Now, look at your line. What you really want is , because you use it in the next line (). So we'll use map. It should be pretty straightforward: 

That's the end of our callback function. Now remember, the function works with , but so far we have only the . Let's fix that: 

And now for the functional ways. (Disclaimer: I don't think my functional rewrite of your code is any prettier - but it's more functional. Maybe someone can make it look more elegant?) I'm no expert on functional programming, but from what I've learned, you generally try to use things like map, reduce, filter. 

The merge function Inside the while loop of the merge function you are doing too much. Each 2 values that need to be compared have the overhead of two if statements. They are true only when the loop is ready to exit. The loop should only deal with the comparison of two values and after the loop you can clean up by adding the remaining array content to the result. Improving the merge Remove the unneeded if statements and put them after the loop. 

Side step merge. I you inspect the running of the code and the array sizes that merges you will notice that 50% of the merges are of two arrays each of length 1. In effect you are using the complicated merge function to sort two numbers. You can side step the merge function for array sizes 1 with the following The recursive modification 

As you can see, equals , at least at the first go. What we'll change will be the loops. Instead of thinking in terms of , we'll think more like - transforming the arrays with our , , functions or their CoffeeScript counterparts. Now, we have to define the transforming function for the , because we want to do something like . You see, with a little bit of imagination you had in your code. Now we'll do exactly that - our function for the will get a step at every call, just like your loop did. So that's that. Next problem we have is rewriting the "global" changes you make inside the loop. So we need to do something about the and lines. We'll make the changes propagate through the result values. But how can we make two things propagate through one value? We'll use an array. Remember, is an array and is a number. Essentially we'll insert the at the beginning (or the end, wouldn't matter) of the array and at each call of our reduce callback extract it from there - and of course, after the reduce finishes. 

Use rather than to set just pain text. ES6 offers many features that you could have used to simplify the code. One of which is getters and setters. In the rewrite below I have used setters to change the score, check the answer, and start the countdowns There where many places you could have used ternary expressions rather than if/else statements. 

You don't need to test a large set of values. You only need test the expression and that is so simple I would not consider it something to test apart from ensuring there are not typos. So just substitute so you can control what it returns then test min and close to 1 

Throwing errors is in my book an action of last resort, something done to continue execution. If I throw, I will catch. Or you can use throws to help debug code, but that should be removed on release. 

But we need to put in the 2! The point of doing it here and not in the callback is again that we can't stop reduce from stopping. If we inserted it in there, it would get inserted multiple times. 

Now, when I hear "functional paradigm," I hear "loopless way" and "immutability." Functional programming is about more things, of course. EDIT: oh man, I had in the code. Stupid mistake :) Fixed now. 

So that's the extraction part. Pretty trivial with CoffeeScript. Next part is little bit trickier. If you're familiar with recursion, you know the base case is usually written before the other parts of recursive function. We'll do something similar - check for your condition before we do anything else. If it's true, it will simply mean that we don't need to do any of that sieving mumbo jumbo, that we're done and just need to wait till we get through all the elements, because we can't stop the reduce function midway.