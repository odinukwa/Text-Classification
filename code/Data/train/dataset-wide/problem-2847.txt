Many beginners fail to do this. Also, you used snake_case, which is Python standard too. One thing I found slightly difficult to understand is this: 

Naming Yes, naming is hard. However, bad naming is going to make your code prone to bugs (what does stand for again?), hard to maintain, hard to read, and all sorts of other things. Style Poor indentation (which scope does this snippet have?): 

Most people probably know what is. Also, your comment above could become a documentation comment. A doc comment is used to supply information to IntelliSense tools and can also be exported to other files if needed. These comments look like: 

This isn't really an issue, but I would probably initialize first because you write the coordinates as {x, y}, so this keeps that order: 

Each of these three are obviously valid, but they also have their problems. Possibility 1: This, in my opinion, is the best option as it explicitly matches a color with a group. I have no experience with maps in C++, so I don't know how slow it is, but for this small of a data set, I do not think this will be an issue. Possibility 2: I do not recommend this option. It does not show any correlation between the two groups, and it will be easy to break by accidentally adding any updates to the wrong location. Possibility 3: This is also a valid option, but I would only use it if the color can be used independent of the group and you need to pair/convert them only in certain uses. Also, this code can be cleaned up a little: 

This still will not handle the user inputting a value. To do that, you could input a double and compare the (you would need to ) of the input to the input and determine whether the input is a valid value. 

Public properties are typically named with CamelCase. Particularly, you should keep a single convention: 

Methods This is a pretty straightforward program, but you should start separating unique components of your program and creating more methods. For example, you could create a method for input, a method for calculating the answer, and a method for output. Enums Another thing you should look into is using an to designate the selected operation. Using is clearer than , and there is a very limited set of data that allowed, which is demonstrated and enforced by the , which only accepts the allowed set, and is not enforced by an . Bug Your division operation has a bug: 

Edit: The above is for FireFox, I didn't see the Chrome only section; however, it displays correctly in both FF and Chrome, so you may want to consider using it. It also displays almost correctly in IE, but you should make the track as tall as you want the button to be in this case because the thumb is designed to be no taller than the bar. To get rid of the properties in Chrome, you should change the class to this: 

One comment I can make is that the first method is easily changed to support the multiplication of two separate values, while the second isn't: 

Because you usually use braces, I would guess those are from accepting R# suggestions. You can turn braces on in the settings by going to the Options and choosing Code Editing -> C# -> Formatting Style -> Braces Layout and changing the settings in the Force Braces group. 

Finally, since you are writing all the values into the log file, and are not removing any of them programmatically, I would probably not log to the screen. If you really want a notification, just set a Boolean value and write to the screen once after everything is done and logged. 

Other than the fact that it would be somewhat expensive to add or remove a set of users using these extensions, rather than getting one DB instance, updating it, and running once, is there anything I should be doing differently? 

It is never, ever a good idea to access or modify data in two threads at once. See the famous Producer/Consumer and Dining Philosophers problems as a partial example of this. You need to add proper access control so only a single thread accesses this at a given time; look up semaphores and mutexes, for example. 

Otherwise, I see nothing wrong with your code, you use reasonable variable names, you use braces around your s and loops, and you indent your code nicely. 

My latest inspection for Rubberduck determines whether a procedure should be a function by checking whether it has a single parameter (either explicit or implicit). The quick fix takes this procedure, changes it into a function, and updates all calls. This inspection starts deep down, involving the parser: 

First, you should have each function do one thing, and have it do what it says. In your function, you get info for the entire class, and you also print it out, which prevents you from just getting the info and doing what you want with it without printing data out. Given the name, this function should only be getting the class subject. Second, you have doing way to much. should only be used as the entry point to the program, and it should delegate the work to other functions. Third, this looks like a good place to bring C++'s OOP into play. Why don't you look into making a for the class' data, professor, students, etc.? You could also make a for the students and keep a list of all the students in the class. Finally, you still have the magic constant in your code: . That should be a named constant variable in your code. Additionally, your code will be easier to read if you use spaces around your operators. 

So, when I press my back button and call GoBack, it sets a flag (boolean value, really) that indicates that I am using a navigation button. Then, it adds the item at (the currently selected item, actually), to and removes the item at so we don't just go back to the page we are currently on. Next, if the current item's name starts with a space (which provides the indentation needed for submenus) and item's menu is not open, I run the block to open the menu: 

You can assign a value to directly through your setter, why are you bypassing the setter and modifying the backing field? This is another excellent place to use an auto-implemented property. 

In , you do the default initialization of the variables just before the default return. I find it is usually better to initialize these variables at the top of the method because many methods will have multiple early return conditions, as well as a default return value. Doing the default initialization at the beginning of the method prevents needing to do it in multiple places, and aids in consistency if the specific method does not have this problem. 

If you need to do something else on assignment, like refresh a UI, you can also do that from the setter. 

Thirteen, also credit to Jeroen Vannevel, you can use expression-bodied members when your methods are only one expression long: 

The newsletter suggested I try to answer this, so here is my attempt: This looks like a lot of repeated code here. I don't think this can be shortened really, but I would create a function to do the conversion in: 

I also have this version, which also runs in 0 milliseconds. In fact, running both methods in the same timer together results in 0 milliseconds: 

This is an analyzer and code fix for VSDiagnostics that detects when a doc comment on a method does not have all parameters listed. When the user tells it to provide the fix, it adds a line for all missing parameter nodes. Here is the analyzer: 

I created a board editor for my Checkers game. This allows the user to create any board position and copy the FEN string representing that board, which can then be used to create a game from that position: 

First, your indentation is a little crazy, which makes it very difficult to see which code is in which scope. Consider: 

In of my software engineering classes, I had to write a truth table calculator in the language of my choice. This is what I came up with, and I would like to know what I should do better next time: 

I didn't notice this, but @Mat's Mug is correct that you should never put anything in the namespace. Put your programs in your own namespaces and them as needed. This will also make it more obvious that you have to include your own files in the project rather than calling the .NET framework for this class. 

is bound to the selected item in my display ListBox with two-way binding, and the is bound to . Please note that this is the Windows Store subsection of WPF, so I cannot just use a TreeView - that is why my submenus are prefixed with spaces: 

What happens when or throws an error and the value isn't really disposed, but is still set to ? What should happen here? 

As an attempt to learn multithreading better, I wrote a program to crack the password of a ZIP file. It is sort of slow, processing a three-digit password of the 95 printable ASCII characters in about 1:45 minutes. This is my class that actually handles the cracking: 

You are missing a for your HTML. The doctype tells the browser which version of HTML to parse it as, and the latest doctype is , capitalization not required. 

This would not compile in many languages, and it also allows the method to have two return types - a and an . I would adjust this to use an statement and convert the number to a string: 

Both are s, and both have the same values. This tells me you should probably merge these into one enum. 

Just because you can declare multiple fields/variables with a single statement doesn't mean it is a good idea. In fact, it should never be used, in my non-so-humble opinion, unless the values are closely related, like the x and y coordinates of a chess piece on a board (and maybe not even then). I'm not sure if the port and the ID are closely related enough to be placed in the same declaration construct. 

In the block, I find with menu needs to be opened and assign the main menu item to , which selects the menu through the data binding, which calls the handler, which opens the menu: 

Is this a good way to implement this, or is there are different way? Is there a way I could call and override the equality operator used to check it? I already tried overriding the operator, and that did not work. I will have a second soon as I finish implementing my ViewModel, so I would like to know a generic solution, but if I have to write a second method to get the value from that collection, that is OK too.