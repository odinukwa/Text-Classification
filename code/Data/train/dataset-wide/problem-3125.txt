I don't see any advantage that this class provides over a simple . I expect a to be at least case-insensitive but this class' equality is exactly the same as if it was a string. I also don't understand why you change the hashcode of the string? You could just return the one that returns... but agian, this would be the same as an the one of an ordinary . Take a look a the because this is what you actually need... I guess. It would make sense. As far as a is concerned I also expect it to yield when comparing with . So you might want to the value. 

Next comes the . Upon creation it receives the and the automatic-properties form a factory. The method renders the and sends it to all listeners via the . 

Each processor is derived from the class that provides logging for unexpected errors and awaits the core method to return. 

They are not modifying anything yet. They just express that a requires a and returns a . Whether it's the same or a new object is up to the implementetion. If those methods are as well, then everything is fine. 

There is no factory method pattern. Factory method means that a class has a static method (or multiple) for creating an instance of itself usually having a private constructor to prevent creating it in a normal way: 

This way you'll be able to construct any combination of anything and I will be easy to add a new character or dungeon because you won't have to modify any of the existing classes but create a new one. Then you just register is somewhere and you're done. 

The last question about sequence generators Growing potatoes in delayed sequences was only about potatoes. I thougt why not make it work with apples and oranges too so I made it generic. 

I thought you forgot to use the in the first case but it produces a completely different error message. Create another method and name it accordignly like and the other one . 

It splits a string by (space, equal-sign, colon) into tokens (unless escaped) and removes quotes from quoted parts. 

No, this is not a hack. It's good SOLID design and that follows the OCP (Open Closed Principle) because you can add more strategies (open for extension) without modifying the class that uses them (closed for modification). 

The final extensions are implemented in this class that for each and type generates, compiles and caches an expression (with some help of other classes). 

Example In order to use it I just create a scheduler, specify what kind of timestamp it should generate and schedule some actions: 

It would be a good idea to extract the salary features from the string before you start processing them. You should put this in method (extension?) that specializes in this. 

I know I should review your code but I find there is no point in doing this. It is so complex for such a simple task that I won't do it as everything is simply wrong. There's no need for any loops or conversions to string. It's just a simple math. What does it mean? You already created a class so let's start from that and improve it by encapsulating the coordinates in a struct and let the rectangle calculate it's and and the . To tell whether to rectangles overlap you just need to calculate their bounding box and check whether it's smaller then the one when the rectangles are not overlapping. 

You can make your life much easier if you override a few operators like , , and so that you don't have to use everywhere. 

If performance wasn't an issue you could nicely solve it with LINQ and the new anonymous tupels in C# 7. The first extension would give you the items backwards: 

This might be slightly slower but the difference is merely noticable even with 100.000.000 iterations. If you have a three of this length/depth you'll run into StackOverflowException long before you notice how slow it is anyway. 

Now comes the tricky part. You need to add a new resource to the resource-dictionary. This is a that initially will sort the items by . 

When building longer strings with lot's of concatenations use specialized methods or objects. Concatenating strings with the operator is the slowest possible way to create a string. The is such an object. Highly optimized for string creation. 

You can reduce some repetition by calling one method with the other one and passing the as a paramter. 

If you add more properties then you need to update two data structures. It would be enough if you just created a like: 

I do not necessarily reflect this opinion. You use a lot of very short variable names for parameters that make your code difficult to understand. Remember that their names are picked by IntelliSense and shown to the user. If all he sees is or it isn't of much assistance. You also use the same names for different things and these are not consistent: 

I find you shouldn't allow nulls but if you do, then it's better to provide a default constructor (or in a case of a sctruct it already has one) then doing as everything was fine. This might not crash because of this but it might hide a bug that is hard to find because the user might have done something wrong where his bytes are null but actually shouldn't. He expects a new is created from his buffer but in reality it just did some weird initialization from an empty one. 

Now the new CSV will only have 5 column and you can easily add new ones if necessary. The class will hold just the basic properties... oh, wait, the class seem to be no longer necessary because if we refactor it the only property that is left is the property. 

You should definitely follow @Henrik Hansen's suggestion about separating your method into multiple APIs with one exception. The save method should just save the stream. There is no need for it return any streams. You should already know this stream from the method. 

I thnink you can speed the merge a little bit by using loops and starting the second one at of the first loop. This way you check only once because is the same an you already checked it so there is no need that you do it again plus the will skip . Compare these two loops. The first one works like in your solution: 

In situations like this with factory methods we usually use the name because suggests it's a builder but it isn't. 

As I said above. All three extensions are not really necessary and with direct LINQ you'd be better off. This means I'd rather do 

What do you think of this client? Is it intuitive and easy to use? Is it easy to extend? I deliberately did not any null-checks yet. 

now you need to derive the and classes from an that will provide both locations some general properties like or maybe coordinates etc. 

object vs strongly typed I have one more advice. Try to make everything strongly typed. This means try to get rid of anything of type . Currently the has this field/property . This being of type has huge implications on the rest of the code. You have to check the parameter types and counts everywhere. Here are a few examples: 

The class does not only replace the parameter name but it also can replace constants with its name, remove the closure and retrieve the field name and remove the expression that is created when checking a against . 

looks like it should belong to some repository selecting the data that also should be tested. If you don't select data like this then why are you doing it in the tests? If so then definitely it should be tested as a part of a repository or something. 

There seems to be no rocket science here but this might elusive. Can/should this scheduler by improved in any way? 

I suggest making the code more expressive by encapsulating the conditions as lambdas before the loop. You should avoid magic numbers and for the create constants or an enum. In the following example the stand for a block and for an attribute. 

Why is this field called previousTurns if it never grows? You never add any new elements to it. I looks more like last-turn. Each call to resets its content. The same applies to . Seeing this I doubt that the requirement of preventing same cities works. 

The decoder unshifts them and rebuilds the string (mainly for debugging purposes as I actually won't be doing this much). Additionaly if a letter exceeds the alphabet its case is fixed to upper-case. 

I'm not sure what your code exaclty does but try to define steps for the deployment and refactor them as let's say methods. If you then find that some of them perform similar things it might be good to put them into a new class. This way you will be able to better focus on a particular task rather then on everything at once. 

To keep the implementation short I chose to use mainly dynamic objects for the formatter. It has two methods: 

In this case you might as well be using just a list but there will never be more then one item in this collection because the method has an invalid name and should actually be called . It adds the target floor to the list and at the end removes it from the list so its is always . You are ordering a list that can only ever have at most one item. Your elevator does not support multiple button presses because as soon as you press the first one it moves to the target floor immediately not allowing to add more requests and start moving after a few seconds. It's not asynchronous so you could just use an instead of a list. 

Make the accept a . Throws suffix We usually use such suffixes only in tests. SendJob This method is unnecessary. All it does is split the parameters and catch the exception. You can as well add the logging to the method, change its signature and get rid of . Constants In C# we don't use prefixes for constants. We name them just like any other property with ``PascalCase`. try/catch 

Start by initializing this to an empty collection. You'll save a lot of null checks. Consider this old method: 

@variable This kind of naming can and should really be avoided. I'm sure you can come up with a better name then just a delegate which says pretty nothing about the method. 

(don't forget about the ) Nothing is static, nothing is global. It can work with defaults or with custom values. It's testable and easity to use (with default values). Here the simple DI works with generics and the full DI by passing it a custom connection. 

While the suggested approach with enumerating and checking all text-boxes works as an easy workaround, it's a horrible solution from the user point of view because he either gets noticed about some missing inputs when he hits submit or he will constantly be notified with annoying message-boxes when he leaves a text-box. He also won't know which field he left empty. The right thing to do is to use the event connected with the that will give instant hints about what's wrong. 

The next method is the . Internally it uses but tries to parse the input as as long as necessary. There's no need for an extra variable with C# 7. 

This naming convention however isn't so inventive anymore. You name the as but use instead of for a list of emails. Exactly the other way round. 

regions I'm not a fan of grouping methods or properties etc. with regions. Usually it's an indicator that the class is to big and needs to be devided into more specialized units with only a few methods where grouping them does not make sense any more. 

It should just return an that gives you a lot of freedom to deal with. You can count it, you can sum it, you can group it, you can do all kind of LINQ stuff with it if you want. Example: 

I like the idea of the class and I use similar solutions myself a lot (now improved) because they are often better then ordinary s: 

Depending on what you are going to do there is one more alternative so in case you would execute both queries anyway you could use : 

Regions are mostly a matter of taste. I don't like them because you have even more tiny to expand/collapse. I find if you start using regions then your class/method/loop etc is too big and you should start thinking about refactoring it. Some people use them for grouping similar methods or even fields/properties. I suggest using them sparingly and only if you have a really good reason (usually there isn't and you need a new class/file/namespace). (I wonder how many downvotes will this part cost me). 

Here's another small experiment with C# 7 where you could use anonymous tuples with only one method. But actually you could return a tuple in you current solution too. 

This is not a very flexible and up-to-date solution. You not only need to calcucalte the number of threads/parallel tasks manually but the number of cpus is hardcoded and cannot be easily used on other machines. One way to improve it would be to use the . But what you really need is the newer TPL. There is already a Partitioner Class for creating such chunks. If you wanted to calculate primes for the range 1-4000 you would write (the last one is exclusive, thus +1) 

I find you should stick to the same naming convention of the original . This means that you should have a and properties and not and respecitively. I then would implement these two in another class, e.g. : 

There have also been a few changes to the rendering engine that is now able to sanitize/escape/encode values. 

Why would you need two methods doing the same thing but under different names? The interesting thing about them is that if you override the and it calls the then you'll have an infinite loop and the will be thrown. 

The voxel could recieve a dynamic mesh via its constructor. Enums Both enums should be moved to their own files because they are public already. It would be fine to place them inside a class if they were private. Now if you wanted to use them somewhere else you need to write which is an unnecessary repetition. You could remove the voxel prefix but then another problem arises that you cannot have a property with the same name inside the voxel class. That's why I prefer to put them in separate files. 

Your example is so short that I don't know what else I could say. You are looking for a short solution, so here is one. 

You might ask why so complicated? Becasue we want to separate all concerns. You have a working oscillator, a generator and a renderer. If you now decide to extend it for numbers bigger then 9 you will only need to adjust the renderer so it renders numbers prefixed with a like . Testability Now each part can also be tested. Separately. You can write a better oscillator and test it or a renderer. 

This null check shouldn't be there. It means that the method can return a null. The .net's convention is that in such a case an empty collection should be returned. 

You have big lambda here with even more nested lambdas. Consider refactoring this into separate filter methods that you can test and maintain independantly. 

It would also be a good idea to add a message to saying something that the second action wasn't actually slower it it fails. Otherwise you'll just see a generic information. 

Use full names. If it's a connection string then name it especially if it's out of scope and one cannot easily determine what it is. 

The other exception is even worse because it does not only change the case like the first one but it uses an entirely different name! It should be and not . But as @Heslacher said, this shouldn't be even throwing any exceptions. 

So how does the work? I turned it into a hot observable with + . I want it to be ticking regardles if there is anyone listening. The new also can check how many jobs are already running and decline starting a new one. How did I fix the missing second issue? The is publishing timestamps the same way it did before but now it additionally checks if the difference between the last and the current timestamp is greater then . If it is, it publishes the missing second before publishing the current one. This is achieved by switching from to . Two intervals published virtually at the same moment don't really matter. More important is to guarantee that nothing is left out and that jobs at any second can be triggered. I think it's extremely unlikely that this would cause any issues ever.