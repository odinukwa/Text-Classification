There is a logic error here. Remember that the is evaluated at the end of the loop. So on first pass which means and are undefined. Change to This may not matter to your requirements since you use only with flattened arrays above, but it will return a false negative if you use it with arrays that contain non immutable members. Eg: 

Unless I'm missing something, your and can be used for other operations as well, because you don't actually check that the queries are or respectively. In fact you call when the consuming code calls or so why have all these functions? In and , you accept an argument () that you don't use. Why? 

Hint: If you find yourself doing something over and over and over, you probably need a loop. Since this is a login form and that you expect just 1 variable besides the password, don't have so many vars in your script: , , , , , , ... just use . If you really need to cycle through all possibilities build an array and loop until you find the one the user submitted: 

Likewise when you're saving data that you want cached, cache it after you've successfully saved to the DB. I've been using Memcache as my PHP cache driver with no problem, but Memcached may be even more feature rich. Because I have a class as I described above, it wouldn't be too hard to switch. The rest of my scripts don't care because they interact with my class, never directly with the cache driver. 

From what you posted, I cannot tell whether you're sanitizing the data before saving it to the database. Hopefully you're not just inserting strings you received from the client into your DB queries (this would expose you to SQL Injection attacks), but are instead using parameterized queries. How do you handle a query not returning any result? For instance when I look at , you call on your results without checking whether there is such a result. I'm not familiar with Laravel so maybe it handles this for you? Be sure to test how your script handles getting a non-existent resource. In your class, you create a new instance of every time a method is called. This is a waste because you will have a lot of parallel connections to your database that you never close and all those objects must be kept in memory. A better approach would be to instantiate a in the constructor of , assign it to a class variable, and use it for all DB queries. Then in the function of , disconnect from the DB. 

You're still vulnerable to SQL Injection. Take another look at . This function receives the parameter, sends its contents to the server which in turn puts it straight into an SQL query as the cat IDs: 

Remember that server code should never trust incoming data as safe, even if you wrote the front end (website) code. If I wanted to inject SQL into your queries, I would go on your website and watch what legitimate HTTP requests look like. Once I know the URL and parameters sent by your AJAX call, I would craft my custom request but replace the valid cat IDs with SQL. I don't even need to use your website to make these requests to your server so good website code does not protect you. Addendum One simple fix: in ; if your DB field holds integers, use: 

First and foremost, You now don't have to worry if it takes longer for the code to execute than the timer to fire, since you have control over whether or not the program has to read from the ADC. Secondly, your program can execute many things while the ADC performs a conversion (essentially we've made the ADC conversion a task which we launch and later ask for its result), this might remind you of asynchronous code. 

So to conclude, an interruption should always be as short as possible and only used to manage flags which alter the behaviour of your main code block. Hope this helped, comment any question that you might have with what I've explained. Note: The code only wants to give you an idea of how to manage interruption, so it may not be the one that fits your needs. 

The problem here is the lack of functions or subroutines to avoid repeating code, thus making the code less mantainable. There are here other issues which are also important, for example, multilanguage support, which I'll address in the following To carry out multilanguage, I would declare an n x m array to store the n strings in m languages. To provide an example of what I mean, to store the greeting message, an array like the following needs to be declared 

We are given two list on integer arrays, and the objective is to retrieve another list which contains the duplicates in both lists. The code developed is the following: 

I've made a Collatz Conjecture sequence calculator and I would like some feedback on what I can do better in regards to the code I've implemented, i.e. bad practices you see, improvements that can be made to make it faster, errors that might arise from this code that I am not managing, etc. 

The code works as intended but, as said, I would like feedback on what I can improve in this code. That explains why I post this question even though there exist duplicates of this one, I just want feedback on my code, that's all. Thanks in advance for your responses. 

To explain this array, the first dimension of the array declares the amount of messages stored, while the second dimension declares the amount of languages one can output the information. So, if we would like to print in any of the languages, the following line would just do that. 

I see a major flaw in this code right off the bat and that is your interruption management. In my opinion, you are not treating an interruption as such, you are treating the timer as a function instead of a source of interruption in the behaviour of your normal code so a question arises. 

The code works as intended what I am concerned about is optimization, how to improve this code in both, execution time and stability. What I am doing in this code is compare each element from one list with ALL of the elements of the other list (I see a problem here, but don't know how to approach it well, the foreach seems not to be the best option here). 

Why? The type is an - that means, it's capable of being automatically closed and deallocated. In the case of , IIRC there are unmanaged objects that need disposed, cleared and cleaned up before the connection is done. There are resources it uses that are not automatically freed. If you look at the API of , it has a method which indicates that it will disconnect from the database and free it's resources. This is important because if you forget the call, then your database connection will hang open. This has performance implications for your programme, database and network. So, we use construct for it which is a fancy way of writing: 

Once again, you fall into the trap of going from an OOP / procedural structure to a functional one. To program in a functional language you have to rewrite how you think. You can't think about objects and state, you have to think about 'what is the relation from a -> b?' F# is all about what input results in what output, we have to think that way. The first thing we need to do is indicate if we matched a file or not in : 

I get the distinct feeling that this should be a set of extension methods instead of a constructor or regular method. It has that about it. MSDN Reference of Extension Methods Also, you should use more proper naming conventions. ( instead of , etc.) And you don't need those blocks. Lastly, you seem to be missing the attribute. Take your initial code 

One of the first changes I would make is to change how the mutator on works. Assuming you already have an equality check for (and if you don't, I would make one) you can add the following to the beginning of the mutator on : 

Click the first line (assuming you have one) in the new portion of the window, then click 'Referenced Objects' at the bottom section of the window. It should show you a bunch of objects, find , and drill down into it. You should see several objects. Go ahead and hover each one, one will be your password. Of course, the object on the itself will also be a connection string and have your password in it. 

Do not that and are different classes between GitHub and Bitbucket. I'll not bother posting any models, as they don't do anything except contain attributes and properties which those attributes apply to. One of the things I thought about doing is making an class to handle all these event args. At the moment I have like 20+ files that all look like does. 

So we're immediately casting to to allow the type-system to make it's next move. Since doesn't implement we can't enumerate each item as an : we have to enumerate as an . Then we on the type: says "Is a type?" If it's a yes, then we return which is the node casted as , if not we return a . Of course this means on the client-side we would have to test for or , which we don't want to do. So we'll also build a which will cast to and remove the entires. A naive implementation could look as follows: