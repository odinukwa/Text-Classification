are you sure you want to ignore the exception completely by not even showing the ? How will you know what failed exactly? I don't think you should be catching and swallowing exceptions here. Let the caller handle this. 

The form seems to have everything you need to play the game. The other forms just extend it. I suggest renaming it to and move the logic of other levels to separate classes. I name it and I start with two methods: one that extends the form and an event handler for the card-click. By the way, your delegate does not follow the event handler convention although it tries to be one. 

It'll take care of validating the model and short-cutting the request if the model is invalid. As far as the status-code 500 is concerned you should handle this one with a middleware, for example I use this pattern where in development I use the exception page and in the production code I let the middleware handle the exceptions. There's no need to put a in every action. 

Yes, it does make sense because otherwise you have the same validation in several places. You could create a helper extension to validate the id so that you don't have to repeat yourself everywhere you need the validation. 

This doesn't seem right. Why would you make an internal status settable and the public one not? This looks like hacking something. 

I've never liked the style where some parameters are left in one line somehere far to the right and others are put in the new line far to the left... they should either all be on new lines or none of them. 

At the bottom of it is the main class which creates a new excption type at runtime. Such exception have the specified name, message and/or inner exception: 

Calling your methods simply isn't good because it doesn't tell the user anything about what it does. Virtually every method processes something so the current name is too general. Think for a while... what does it do? It compares properties of a color with some value so how about ? Ok, but where is the color part? It's not necessary because will make it an extension of the color so the usage will be clear when used in context. After applying these changes your method should look like this: 

if not then add a private setter and initialize it in the constructor. Be aware of the fact that the array is not immutable and can be manipulated elsewhere. 

To be able to apply various colors to the console I created a . It's really simple. It just takes an XML and renders it to the console with the colors specified. The element names are actually optional and can be any names. They are only required to parse the XML. What matters are the attribute and color names. I didn't know how to solve it with less effort without inventing a new markup. 

We usually don't do that because you are creating a new stack-trace here. To rethrow the exception should should just use the keyword, without the : 

Consider putting these into a single method? Your and methods seem to be extremely verbose... consider simplifying them further? For starters, you can already do a per 'line'. BTW, you also have one minor type: should be . HTMLParser.java Not sure why you have an block inside the method. Also, in : 

You don't really need both and methods, with the latter performing input validation. What you can consider is to take two integer inputs and pass them into a static factory method that will do the validation for you, and throwing an if necessary. 

Also, your bracing style is quite inconsistent... sometimes you use the Java convention, sometimes you don't, and sometimes you omit them completely. I will suggest sticking to the convention throughout to improve code readability. 

You need to do a lower-bound check here, namely since your is a based implementation, you need to make sure . Passing here will result in eventually. Length checks Deriving the length can probably be better expressed as: 

You should validate the input here, as the user can enter anything other than a number that can handle. For example, you should re-prompt the user if the input contains entirely of spaces, or if a negative number is entered. String concatenation 

Keeping this short because I think it's the most significant improvement... Since Java 1.5, the preferred way of doing multi-threading is to rely on an , which can be started via the many methods of . Instead of extending , your class can implement with a in place of your , which lets you return your results, if any. I realized I was 'tricked' into thinking your is returning something since your field is named . In any case, the will work with implementations too, so you should alternatively implement that interface instead of . should then be used in place of (manually) calling on each . 

For starters, getters and setters are often used to provide some kind of field validation, or to return read-only views on the underlying field. More importantly, you will totally lose the ability to make thread-safe immutable classes instances using this approach. Sure, if you realized all you are dealing with are nothing more than a skeleton of getters and setters, this proxy-based approach might seem plausible, but you will be trading flexibility for functionality... Code-wise, may I suggest that you flip the constructor-chaining of so that the one will the least arguments 'pass-through' to the next? 

Please be consistent. :) Java 8? If you happen to be on Java 8, some of your -loops can be simplified using the -based processing, or even to use the new method. For example, in : 

Not sure what's your aversion to using the way of doing the same task, but here's a suggested approach anyways for comparison (to your method): 

This on your uses the same current condition, and optionally returns the first element found. This wrapper-object can then be utilized to set the activity-related properties on a , provided you have a method there too that can perform the operation on an instance: 

& This is very confusing as the names do not implicate any relation. If the has a property then then foreign-key in the should be called . The would be much more natural then and self explaining: 

Functional To make it even cleaner I suggest encapsulating the in its own method so the final extension could be: 

If you really create a list and prepend more items to it right away in the next step then combinding the the constructor with the collection initializer is another option that might work for you: 

Because of this strange constraint this class shouldn't be named just . It looks more like a or . It needs a much stronger name. 

You could pass this factory to the main with dependency injection so that you can use it anytime to get a fresh dictionary for each level (if available). 

The class that contains the above methods is . I think it's not a good name. Even though they are extensions you should try to find a name that better describes the functionality the class contains. Here I find the name good because this class is a factory. It creates expressions. Consequently need its methods also new names like . implies you already have it somewhere and just retrieve it which is not the case here. 

There should be a helper variable for this. It's not clear what you are checking here especially that a is used. 

This method shouldn't be called Dispose because it doesn't dispose any resources - I suggest to call it ClearData 

You should not be calling it a dictionary because you changed the expected behaviour of the interface. The MSDN clearly states that the getter of the indexer should throw an exception if the key is not found. 

I need to create a tree from a flat collection. The order of elements is defined in a specification so it's rather impossible that it will ever change... but I want the whole algorithm to be configuratble and extendable aka universal... the SOLID virus ;-) so I did the following... 

I'm not saying that these variable names are perfect but without knowing your exact use case there's not much you can come up with based on only a few lines of code. But I think you know what I mean. I still find this nested s aren't pretty... but at least they are less misterious now. But this is how refactoring usually works. You change your code a find a new pattern that you can replace with an ever more efficient code. So the next step could be replacing the magic with a constant and use the null operator in conjuction with coalesce: 

and another helper that uses regex to find the numbers. This does not rely on the spaces between them. 

What do you think of this client? Is it intuitive and easy to use? Is it easy to extend? I deliberately did not any null-checks (yet). 

Another thing is the naming. Your properties are extremely inconsistent. Once you use PascalCase for such names as only to use camelCase for . Or you use PascalCase for private members () and camelCase for public ones () where the other way around wound be better (if you insist on using camelCase) although we actually start all method names with an uppercase letter. 

Iterating through an If what you really want is to put all the JSON objects into a map, rather than overwriting each of them with every iteration, there's a way to stream it: 

In my opinion, the benefits of the builder pattern is that it lets you specify any common parameters once to minimize code repetition (and therefore bugs), and enforces the requirements for creating the necessary instances consistently too. In the long run, it also lets you introduce new features or fix bugs all in one go. Furthermore, builder classes tend to adopt the 'fluent' programming approach by using more descriptive sounding method names and -ing itself, thereby allowing for daisy-chaining. An example usage will be: 

I hope this kind of illustrates that your /, and classes can have similar functionality with less boilerplate-like template code... The idea behind pre-computing the representation and hash code first is to avoid repeated computations, should the methods be called frequently. This works especially well for immutable classes like the class as shown. 

Code duplication From your self-identification, the non-duplicate parts of both classes largely center around the URLs that needs to be fetched. This means, if you have just one class: 

Using just one example, seems to be used a lot here. You should consider putting your magic numbers into an easily identifiable constant so that they can be reused in a consistent and readable manner. 

Instead of having to pass around a thread-safe to gather your non-pingable servers, you can call to get a , which you can then retrieve the results. First, I'll suggest having an implementation of : 

The 'main' command uses to split each line into 1 + * 2 columns ( used above). By using the combination of / conditions, we can specify different handling for the two 'files'. 

Other comments If you are on Java 7 and above, you should use on your instance for proper handling of its underlying I/O-based resource. A non-zero value for usually indicates 'abnormal termination'. Second, you should favor relying on a terminal condition of your to know when the game has ended: 

If you do turn this into a library in the future that can be used by other projects, you do not want to spring this surprise on them... If there are errors like this, should you simply re-throw the same error? 

Unit testing As mentioned in my comment, it will be better to turn your code into a series of unit tests to ensure your logic is working correctly. The example below uses TestNG and Hamcrest matchers, and is meant to be a simple showcase for how this can be done. You should consider a variety of tests (e.g. empty s, non-palindromic inputs) to also ensure it works for as many cases as possible. That is when you can consider some of the features of TestNG such as parameterized testing. 

At first, I was curious why the question was phrased as "not containing 1 or 4", the stream-based solution here seems to suggest why: 

Please on your instance, so that it can be safely closed when your program terminates. Consider putting the calculation logic into its own method, so that you can call it by passing it two arguments (start and end). In fact, this can also return a of prime numbers for the caller to handle the results (print it out on console, display on a GUI, save to a file, etc.), so that the logic and the input/output of your program are properly separated. Do prompt your user by printing out a descriptive line before the input, e.g.