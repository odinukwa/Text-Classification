I don't think it is a very important fact for them to know, so I wouldn't mention it. Either they already know that fact because they remember you as a potential recruit, either they don't and recalling them you applied several times may make them think they had reasons not to hire you before. Instead, use your knowledge of the company for a good, targetted cover letter. Insist on your motivation and explain why you applied several times before. 

I am currently leaving my job. I have a short period of notice and I've put my employer in a uncomfortable spot. When I did this, he quickly asked me if I had a reference for him. Refering someone for an interview, especially if it's a good fit, is something generally apreciated by employers and ease the tensions. It is possible your employer is so angry that he may react irrationally (you have to figure this out) but most likely he will end up respecting your decision and accept that you help him to find a replacement. 

As others answer provided, there is no such thing as being unprofessional for checking the documentation especially considering you are junior, especially considering programming is vast and there is always a detail you can forget and you have a mission for your code to be correct. There is however cases I would consider being documentation abuses. I have a collegue who is sometimes unable to come up with his own solution about a given problem. Therefore, he sometimes proceed on checking the web about how to solve his problem. Last time, for example, he checked how a web framework was architecturing validators and error counters because he had a seemingly similar feature to design. This is a case where what you are looking for is far too abstract for the Internet to help you. Worse, you could find solutions that seemingly fit, but in fact don't, because they are applied to a different use case. By trying to grab some premade code/architecture/pattern he would have more or less injected code in our base that may have worked, but would be hard to maintain because written by someone else for a different purpose. I don't look the documentation often because I write code that uses mostly core language features (no framework) and I am gifted with a reliable memory when it comes to code, but I do use the doc everytime I'm stuck on something trivial. However, if I'm stuck on something higher level, the good thing to do is to seek help from a more experienced collegue, you will get a much better answer. 

Same thing goes for more operational roles. You understimate the satisfaction you can get out of tech roles probably because you had bad experience with them, but they are full of interesting challenges. Now, that doesn't mean you should be a tech, it really depends of your own ability at it and what would be your ideal career plan. In my opinion, you should avoid dead ends, not because of the pay, but simply because it's better to have options to change your job if get bored (and this is very likely to happen IMHO) than seeking the perfect job right on start. 

I had the same issue when building my CV, and solved it using a "speciality" line. Typically, your job title would look like 

I'd say in case you are accepted, just respect legal period of notice and politely say goodbye to your old team. It's never easy to quit a job in this situation, but it's part of a company life to handle turnover. I was in the exact same situation few weeks ago : working in a small team, quitting, lots of planned work etc. but they found a promising replacement even though they had high expectations (finding quickly a cheap autonomous dev ready to work overtime). It's advisable to finish in good terms, by extending the notice period as much as your next employer would accept and/or suggesting a competent replacement if you know any, but thinking about yourself is higher priority. The company will recover. Good luck for the interview ! 

I would avoid to put "senior" in the title as this is covered by experience, and doesn't explain what is the profession of the candidate. 

There's a few things going wrong here that might be the cause of your problem. They're common problems, simple miscommunication between you and your audience. Presentation Content First of all, be conscious of what you're doing when presenting. You and your presentation are often the first real interaction between your product and your customers. Assume these people want to use your product and want to use it in the most convenient way possible. To that end, they'll be asking you questions with a specific kind of answer in mind. Also be aware of the fact that these people are not just there to waste time. These are your customers, not people with an hour to kill. If someone asks a question, that means there's a piece of information missing that's important to them. Sure, your definition of important and theirs might differ (see every version of "Can we change this colour") but they care. Questions and Answers And that brings us to the second point: People are terrible at asking questions. Usually, when someone asks you a question, they're only asking half of the question, the rest being implied by the context, what they have in mind as an answer and a whole load of other implicit things. Often, much of the implicit question is lost if there's a knowledge gap between the person asking the question and the speaker. When someone asks you about having to enter their data first, they're not asking you: "Do we have to enter our data into your application". They know this and you know this. What they might really be asking is: "How much time does it take to enter our data?" or "Can we import our existing data?" or "How much data-entry overhead should we be taking into account?" or "In what ways can we enter our data?" and a dozen more questions that aren't obvious to you. Which brings us to our third point: People are terrible at answering questions. Often when you answer a question, you don't quite answer the question but you answer the question that you think is being asked. Take the question above: "Do we have to enter our data into the system". You can answer this question a dozen different ways but if none of them answer the question that was being asked, all you've done is wasted time. Solutions So, solutions. First of all, be aware of your presentation's content. It can be helpful to either have a test audience, preferably someone with little to no knowledge of the subject. If that's not available, either a recording or just reading it over a few days after preparing it can help. This way you can get a better idea of exactly what is being presented. Your mind often fills in blanks based on your knowledge and it's important to know if there are any major ones in the system. This is the same reason you (should) do usability testing. If you've worked on something for weeks/months/years, you know how it works and why. Someone without that knowledge might not see it and ask questions that seem obvious. Also be aware of how different your priorities may be. You as a software engineer are going to care about different things than someone working in a lab or their IT director or their marketing guy or whoever. But since they're the customer, what they care about is important because you want to make that sale. And perhaps more importantly, their questions can point to features that you've missed. That guy asking about changing the text colour from green to blue might sound like he just likes to pick nits, but there's likely a good reason for it. (Maybe two of his co-workers have some form of colour-blindness) For the other two points, practice asking questions back. Sure, it's annoying if someone answers a question with a question but it's worse if someone doesn't answer a question you asked but instead talks about something unrelated. Try to give a brief answer to the question while at the same time angling for clarification. Also important here, since it sounds like you're pitching your product to people, is appearing interested in their concerns. Active listening is important here. Try to use their questions, or part of their questions in your answer but use your own words. That lets them know you are hearing their questions but rephrasing it might make them realise they weren't very clear in what they were asking. Q: "Do we have to enter our data into your application?" A: "Entering the data into our database works via a simple interface, almost like an excel spreadsheet. We can pre-populate some of the database for you, but to really get the most out of it, you'll have to use accurate data for your environment" Q: "Like an excel spreadsheet? Can we import our existing spreadsheet?" (There's the real question) etc... Long answer short: treat these observation with the seriousness they deserve because often the posed question isn't the real question but the real observation is important to you and them.