I found myself another way which is personal and comfortable (I don't recommend any company with customers to use this way in the form I'll describe below): SSH tunneling through port 80 to port 80 via Putty/OpenSSH, and use PMA securely and temporarily for 2 hours in a session (It is extremely unlikely that anyone could BFA PMA with a decent varied password in just 2 hours). Each time I want to use PMA I run this code: 

I would like to have your opinion on the entire code as I might lack some security there (maybe I must delete OpenSSH, do some other stuff). 

Please review the following Bash script that uses to establish a "lightweight" Ubuntu-Nginx server environment mainly aimed to run small WordPress sites (about 5 plugins, about 25 webpages, about 25 images) on a cloud hosting platform. The heredocument sets aliases for personal scripts I already have and might use me later on. 

The following code is aimed to establish a WSL based LAMP environment. This is instead XAMPP or WAMPP based LAMP environment which doesn't allow Bash. The script includes a cat heredocument called "AWSM" (Apache Webapp Substrate Maker) that is used to make an Apache conf file for the app, as well as a mySQL user and DB with the same name (you can then run it with your domain as an argument (for example, the domain of the actual site your run in WSL as a test version): 

Update I should clarify that I don't have XAMPP/WAMP or even individual Apache or PHP on Windows outside of WSL; I aim to have only 1 LAMP stack in my Windows, inside WSL. Besides having a fully functional WSL LAMP stack on Windows, the end state is to be able to access it from in any Windows browser so I could easily test the sites and access PHPmyadmin locally. Also, anyone is more than welcome to contribute directly in Github 

I run it this way , or with a Bash alias . Note: stands for document root, which is in my case and defined in . I'd like to know what you think of the code I've written (especially, do you see any way to shorten it)?. 

I've created the following Nix cron for daily and weekly scripts for a minimal Nginx server environment (as part of my larger script). The daily cronjob updates WordPress and brings back original permissions (that are changed by WordPress in its update). The weekly task clears accumilated WordPress cache, make local backups, and delete old backups. I wonder where this script could be shortened. 

Sort of like MultiDict from Paste, but that does not seem to have the same interface as ordinary dict. I wrote this: 

Purpose: write Java program that downloads a list of URLs specified on commandline in parallel (simultaneously), reporting download completion every second. My solution follows below, please point out areas for improvement / things you would redesign. 

uses (a that produces SQL concatenation operator ). It works in the sense of automatic PK creation in desired order and for querying by the attribute. However, the silly aspect is that obviously there's a single column filled with the same prefix over and over. The obvious problem here is that is a column for a single reason: so that I could use its method. I would like to change it in such way that the column is unnecessary (e.g. it could be SQL concatenation of a string and column). I do not know how to construct SQLAlchemy Core expression that would achieve this without using column method. 

Is there some type/class I missed that can be evaluated by Python as True/False that I missed here? Drawbacks? Better ways? 

Goal: create a new instance's keys in such way that keys in the specified order list appear first. If some keys in order list are not present in , ignore them. Additionally, reordering should be "stable", that is, if some keys were not specified in order list, they should keep their original order from the old . In other words: 

I have written class that adds ability to dot access config values like ExtendedConfigParser().section_name.option_name: 

Several tests I wrote for this function pass, but I'm not entirely happy with this solution, it's somewhat convoluted. Better solutions? Simplifications? 

Obviously I defined Speclist to differentiate it from regular list that someone may set as value. Problems? Any better way to do this? 

What I do not like about the code above is that I'm doing sort of manual attribute resolution in . Is there a better (cleaner, more general) solution? And also what will happen if a section name happens to be called like attribute? It would override it, correct? How can I avoid that? 

I needed smth that could send (scp/rsync) many files in parallel but that would not overload machine, firewalls on the way by starting e.g. 600 simultaneous uploads, so upload should be done in batches. Most of the utilities like are download managers and I needed something to send many files in parallel from a machine behind NAT to a machine on the internet (so no dl from internet possible). Pls keep in mind that it's the draft that I quote below, I do not need details on general good practices such as setting paths and counters using variables and not literal values. Any better approach? Problems? I've noticed that I have to between starting scp cmds in background or else target server refuses some connections.