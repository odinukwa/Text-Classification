I assure you this is by no means obvious to the interviewer. I have interviewed many many candidates, and a significant fraction of them show up with no interest whatsoever in the job. How, as the interviewer, am I to tell those candidates from the candidates like you, who are genuinely interested? Asking what you want to know is a highly effective technique. You imply that it is obvious that anyone who would both apply for a job and show up for an interview wants the job. This is simply false, so stop believing that. I've had people show up for interviews who were practicing interviewing. They won't take the position; they'll just waste your time. I've had people show up for interviews who were intending on obtaining the given position as stepping stone to a completely different position. Those people are far more dangerous; they will suck resources out of your organization for no benefit in return. People interview for positions they don't want because they want to keep their options open, or because they want to find out secret information about the team and are hoping the interviewer will let something slip, or whatever. There are lots of reasons to take an interview other than "I want the job", and one of my tasks as an interviewer is to figure out if the candidate first off actually wants the job. After I've determined that, knowing why they want the job, if they do, is a big part of knowing whether this person is a good fit for the organization and the position. 

If you work at Microsoft, you will be fired once this is discovered. If you work for a company which provides software to any government, or with any government contractor, your company could lose its contract now and be forever banned from further dealings with said customer. Easter eggs are undocumented features that have never been tested or analyzed to ensure that they are not security holes, and therefore are unacceptable risks to many customers. They are not funny. They are not cute. If you want to have a funny user interface element that gives credits to team members, write a web page. Don't put undocumented, untested, unverified features in user-accessible code. The customer will quite reasonably ask what other undocumented secret features that subvert their security measures that employees of your company have added to their software. 

Don't leave them hanging. If they can't survive without you then its the company's problem for not retaining you. If they can survive without you then do what you can to ensure their success. Make sure everything you worked on was well documented. Help them find a replacement for you. And so on. Moreover: if the head of engineering is on the critical path to success then you've done something wrong. The job of the head of engineering is to get the engineering team into a position where a temporary lack of leadership does not put achieving engineering goals at risk. They should be running like a well-oiled machine even if you were hit by a bus tomorrow. 

That's a nice thing to say. And obviously you have potential or you would not have been hired in the first place. But don't take false hope from it. 

From their point of view you showed up for an interview. That tells them that you are the kind of person who shows up for an interview. It says nothing about your motivations for doing so. 

In my example of my friend, they should have been reviewed on whether or not the user satisfaction needle moved. Management should be reviewed on whether or not that strategy led to the bottom line return on investment. 

Worker Y is the clear best choice; they will do just as good work for less money. Employers do not reason this way. Here's how employers actually reason: 

And if they ask you who your lawyer is, well, you already know the answer to that nosy personal question. 

Do you have something they want? Maybe what they want is you to not sue them, maybe what they want is for you to leave sooner, I don't know. You are of course free to make the attempt; you've got nothing to lose. But I would try to see things from their perspective. Find out what they want before you try to negotiate for what you want. 

First, find another job. Then send your manager an email that says "This is my written notice of resignation from Foo Corporation; my last day will be June 1st. Sincerely, teddy". Easy peasy. 

You should research what impact this will have on your ability to collect unemployment insurance. In some places, quitting means you are not eligible. Frankly, what I would be attempting to do were I in your uncomfortable situation, is researching how can I (1) leave soon, (2) not burn any bridges, and (3) be able to collect unemployment while looking for another job? If there's no way to do all that, then I would take the PIP and keep collecting a paycheque while you look for a new job. Best case, you survive the PIP before you find a new job. Worst case, you have an uncomfortable 60 days where you're being paid to document your firing. And again, I strongly encourage you to talk to a professional about your anxiety. It can make a huge difference. Best of luck on your next job; I hope it goes better. 

Step three: get better at both. Once you are past entry level, software engineering is about communication, not writing code. You will not rise in your profession until you are able to communicate clearly with everyone in the organization. Write more emails. Write more design documents. Write a blog. Answer questions on StackOverflow. Volunteer to give talks internally or to the public. There are lots of ways to practice communications. When I was a junior engineer at Microsoft I was given a joke award -- a singing fish -- for being the guy on the team who wrote the longest, most detailed, most technical and most complete responses to design and implementation questions. It was a cute joke and I took it in the humour that it was intended, but it was also quite serious. That silly achievement was no accident; I deliberately set out to be known in the company as the guy to go to when you had a technical question about JavaScript, and that got noticed. 

You're not their psychologist, and the only way to find out the answers to these questions is to engage deeply with them. Stop worrying about why these people think the way they do. 

Please answer completely honestly; it will save us all time and money and help ensure that you get a position that suits you. The best answer to that question I ever got was "I don't want the job; the team I want to work for isn't hiring, your team is, HR suggested that I interview with you". Ten points to Gryffindor for honesty, NO HIRE, and now I know who in HR to stop trusting to have my best interests at heart. It was a win for everyone: the candidate wasn't hired into a position they didn't want, I didn't have an unmotivated coworker, and HR found out that they had an ineffectual recruiter who wasted everyone's time. 

and hand it to your manager. Then you turn and walk out of the building. Alternative solution: do something that gets you fired. Ideally try to find something that gets you fired immediately but not arrested. Since you have been fired there's no need to resign, and no one is going to ask you where you're going next. Neither of these solutions are very professional. I'd go with not trying to avoid the question and simply refusing to answer it. 

You've said that this behaviour is distasteful, unprofessional, demeaning, objectifying. It is not improving business in any way and may be hurting it. And yet you keep on walking past it, so as to not raise a fuss. So far you've considered distasteful, unprofessional, demeaning and objectifying behavior acceptable. If you think that it's not acceptable, stop walking past it. Show moral courage; tell your colleague that you find his behavior distasteful, unprofessional, demeaning, objectifying and bad for business. If that fails to produce results, escalate. Any well-run HR department is in the business of keeping the company from being sued and getting bad press; it will not take much to escalate it. 

These sentences are contradictory. When you give a gift, it is no longer yours: it belongs to the recipient. Stop saying MY code. That's THEIR code now; you gave it away. If you give someone a car as a present, you don't get to then tell the recipient what colour they can paint YOUR car; it's THEIR car; you gave it to them. You apparently want to both give a thing away and retain ownership of it. Since those are contradictory, this seems like a recipe for causing yourself mental distress. If you don't like the resulting distress then stop doing things that cause that distress. Either give up ownership when you do work for free, or stop doing work for free, or provide a license agreement that the company can sign that spells out who owns this artifact and what the rules are for it. 

I would add to the other good answers here that as an interviewer, I am certainly bringing notes (and taking notes) because I am not an expert on the candidate. I understand that people get nervous and forget things in interviews and I am totally fine if a candidate brings (or takes) notes. The candidate is not an expert on the company they're interviewing at. I emphasize expertise there because something I will probe on in an interview is what level of expertise the candidate actually has, particularly if expertise in a particular subject is indicated on their resume. I expect people who claim to be experts in a subject to be able to talk about many aspects of that subject without recourse to looking things up. Don't claim to be an expert in, say, agile methodologies and then have to look up what a scrum master does. I have had candidates try to claim expertise and then fake it; the interview usually does not go smoothly for either of us. 

I can only assume that this is the first time this has happened to you. I know multiple people who are at the top of their careers to whom this has happened a dozen times in a year. This is perfectly normal. The job market is extremely competitive, and some industries have more qualified applicants than positions available by far. Yes, it is deeply frustrating. Get used to it, because it's going to happen to you a whole lot more times.