See no need to call new at all most of the time. The second problem is that you are using . This is C memory management. The blocks are not necessarily in the same areas as memory allocated by and thus not compatible to be deleted by either. Also they don't run the constructor and will not run the destructor. So a very bad idea. The third observation is that you are building a container (linked list). There is already a built-in linked list. 

Thus it is better to use the standard pattern were you do the read as part of the test. If you declare buffer here. Then you would not need to manually clear it here (or reset token). 

Assignment operator. The assignment operator is not 100% exception safe. You should not modify the current object while you have not yet finished making the copy. 

Remember always binds to the left, unless it is on the very left then it binds right. So the above two have the same meaning. Some people argue that they put the '*' next to the variable because there is the use case. 

I bet the SSL layer is already buffering this. There is no point in doing it twice. But its always worth reading the documentation to check. 

So chances of a 1 are: 1/6554 while chances of a 9 are 1/6553 To compensate for this you should reject values greater or equal than . 

Thye expose implementation details beyond the boundry of the class. Usually what happens is you use a bunch of getters to get info the do some opertion then use a setter to update the object with new state. This is the wrong way to think about it. You should make operation a member of the class and ask the objec to mutate its own state by calling opertion member method. Stop doing this: 

If you put it inside the class definition then it will be in the scope of all methods of that class. If fact I would go one step further and typedef the container type. 

Normally you use if you are killing the thread deep inside the code. If it is directly inside the callback function then you can just return NULL. Also you must guard against exceptions propagating out of the callback (if they escape the application will terminate (usally: Its actually undefined what happens but I have found it usally terminates the whole application (not just the thread))). 

An interesting choice (it can be done). But usually an array is reserved for implementing a heap (in terms of tree structures). This is because it is always balanced with no holes in the middle. A binary search tree does not necessarily need to be balanced (its preferable but not required) and may have gaps so an array does not lend itself well to representing the leaf nodes. 

You should isolate code that does the same thing in to its own function/method. Then use a decent function name so the code becomes self documenting. Sentinel When writting list it is sometimes useful to have a sentinel node. This is a special node in the list that does not carry any data. But it makes manipulating the list easy as you no longer need to worry about a value (or empty list). Thus the head no longer becomes a special case. Example: A sentinel list will always contain one item at the head (this head item contains no data). The rest of the API should be coded with the understanding of the sentinel value. So en empty list contains only the sentinel value. With this assumption we can simplify the code too: 

Personally I would use lex(flex) and yacc(bison) to do the same thing. Edit: After just doing it. I change my mind. If all I was doing was an expression parser I would write a recursive descent parser like "Jerry Coffin" did. But if there was any chance that it would grow beyond just a simple expression parser (like having variables and state or any more complex functionality like functions) then I would use this technique. Back to Description These tools are a pain to learn when you are starting but are so darn useful when parsing stuff that I think it is a definite advantage to learn. The first time will take you a while but once you get used to them they become really easy. I don't think its as fast as the hand written recursive descent parser. But it is so intuitive to read (if you have done CS at Uni) that the extra clarity makes up for a lot. This is all it takes: Lexer.l Note: The definition of a number is slightly more complex than it could be (ie I could simplify it). This is because I ripped it straight out of a C parser. The definition for numbers is slightly more complicated in C (as leading 0 indicates an octal number (though I have removed the octal part from this example)). But numbers support an optional leading '-' to indidicate negative numbers (though not as it stands a leading '+' (but that would not be hard to add)). It also supports number using the standard exponent format ie . 

Basically you are going to cause headaches for your self down the road because you have expose the implementation details of how the graphs stores its data. People now have to use this to write their functions. Lock down your member vaiables and provide access to the class via methods to add nodes and edges. Visitor Pattern You should also look up the visitor pattern. This allows people to write graph traversal algorithms without knowing details about the graph. Stop using 

also 0xFF is not the maximum value that an int can hold. You may want to look up a better value. Wht does SSL not have a constructor that takes the data value? 

You should also look up the requirements for containers: $URL$ You are missing a couple of type definitions. Like . Worth a read: I wrote a series on how to implement a vector: 

There are more than two types of platform. You should make sure these are covered. If the code does not fall into a particular type then you should generate an error: $URL$ 

Not this is bound the current scope this you can limit its affect to just a function. There is an easier way to write explode(): This example breaks the string into words using white space as the delimiter. If you want to use another delimiter that is relatively easy; just use a type that reads words by delimiter when using the operator>>. 

The only operation you can perform is to check if two have the same type or not. Thus this function should take a const reference to another object and you can return true/false if their types are same/different. Have no idea what this is supposed to do. More documentation needed. 

If you are keeping a reference to an object you should pass that object to the constructor as a reference: 

Here the external user is serializing the class. But has no idea what is inside the class. This makes this code impossibly brittle to change. It will almost certainly break over time. What you should do is ask the object to serialize itself to the stream. The object understands itself and its members. So it can optimally serialize itself to the stream. 

Major FAIL. Once you have handed a pointer to the constructor of a shared pointer you own that pointer. You must delete the pointer when this object is destroyed. Normally the destructor will do this. But if you fail inside the constructor then the destructor will not be called. 

OK. Lets assume they are for now. Then should be a private member. There should be no reason to call this from externally. 

DRY Code DRY: Don't repeat yourself. There is a huges section of code that is repeated in both access functions. This should be refactored into its own method. String Literals in C++1 Literal string in C++ have been improved. You don't need to escape all those characters in your input string. 

Sure you can use a switch that is totally fine. But you can practice using the command pattern in this situation. 

My main complaint is the use of the in such a low level interface. I think that is totally a waste of resources. Would be interested to know how this performs in comparison to you vector based version. I basically swapped the for a and built a chain. It makes the assumption that is at least the size of a pointer (but I am sure we can add a static assert to achieve this). 

Your code also assumes that meaning is terminated by '$\n'. I don't see the point in having a double set of character to terminate meaning. I would just make it '\n' terminated. The keyword is usless. Don't use it unless the language requires. You don't need it here so don't use it. 

Prefer "\n" over std::endl The only difference between the two is that also flushes the stream. The stream will flush itself automatically when it needs to and thus forcing a flush is only going to make it less efficient. Humans are notoriously bad at making this decision; the code is actually very good at. So let the code decide when to flush. Don't use pointers in C++ 

Sure. You implemented the basic factory pattern. But factories don't get useful to you start using . SO you can swap out out factory for another factory. Side Note: When presenting code it's easier to review of the header comes before the source. And best if the base class comes first. Prevents a lot of scrolling backwards and forwards. Virtual Functions 

The second thing to think about is returning by value. Usually when you have a container you return accesses to the element by reference. Thus allowing you to modify the value intuitively. This also makes writting simpler (then can be written in terms of . The third thing is that (without an expression is wrong). This is used to re-throw a currently propogating exception from within a . There is no here so this results in a call to 

The standard (Since C++11 (so 6 years now)) has supported 64 bit integer types directly in You can use: . Don't use macros where function can be used.