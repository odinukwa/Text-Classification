Avoid naked magic numbers Either add a comment to detail the screen escape sequences or use some constant 

As code is not changing the the contents of the string, use for potential compiler optimization and clarity to reviewers that code is in fact not changing the characters. 

Unclear why functions return type . The C standard uses as the Goldilocks type (not too narrow, not too wide) for array indexing and size. 

Expect more test cases that have incomplete and pair combinations, especially onces that begin or end the string. 

of a generic string is a problem should a appear in it - maybe due to code maintenance or changes. Consider 1 of the 2 alternates - which likely generate the same code on a good compiler. 

Recommend more validation of command line parameter: Too easy for to have a value like "-h" and then code proceeds with with the value of 0. 

With lots of code that does not modify the contents of elements pointed to, nice to use to show 1) what is not being modified and 2) insures code does in fact not modify. 

Fundamentally, code is relying on with a greater precision than . Better to code a solution without this reliance. Else how to code a version? only uses as a non- to do trimming. I'd expect code to cope with a string. The code modifications needed are small. Re-order for clarity by starting with space and sign handling. Suggested layout: 

No reason to use floating point math here. At a minimum, it creates a non-portability as the aspects of FP math have corner cases and precision issues that will fail . At worst, it invoke undefined behavior: may be UB if . (Code does use to handle that case, but it call be handled cleaner in other ways.) Rare, but potential inexact result from leads to off-by-one with . C does not specify that can represent every . Think of a 64-bit and 64-bit . Code like is a potential for conversion inaccuracies. 

and have an asymmetry that should be reconciled. does not indicate any thing special when the stack is full and a push is attempted. It silently does not do the push. Yet when an pop of an emty stack occurs, a is returned (versus a pointer to ) allowing the calling routine to take evasive action. A symmetric solution would both do something special - or not - on full/empty. A function to inspect the top of stack, without popping, could be added. This IMO would be useful. Additional routines to report current stack depth or stack space left are something to consider. Using is OK, especially if the fixed array size is known to always be less than . I favor for array indexing as it has better portability for large arrays. A way to deal with popping or inspecting an empty stack is, as part of , to pass an as the bottom-of-stack. This value does not actually ever get "popped off". The names of the functions are too generic ("initialize") and could well collide with other code. Suggest something like , and . The OO part of me wants to see a copy and destructor function too. The destructor could simple do 

Minor inefficiency. Test for digits first. A simple test for leading sign would do. Decimal point is locale-sensitive. 

Use rather than . Code is limited to files or less in size as code uses . Yet code mixes with with various calculations. This only makes a difference when 1) , and 2) the file is huge. Yet this is precisely the scenario to use an in-place sort: when the file is huge. 

I find confusing for the allocated memory as proportional to . Re-write code so the array's count is . I'd go for a that can affect the state of to put it into a error/start state. Example 

Of course this in not a true 2d array, just a 1d array indexed using . This is an OK approach. When able, I prefer an array of pointers to an array of s, as it is usually more flexible to the tasks I tackle. YMMV. 

Function interface of : Architecture considerations? (Like passing in instead of to allow a modulo range of vs. ) What are some portable improvements? Function implementation in : How sensible and understandable? Coding the conditional and macros I found a bit ugly and looking to improve. Was appending a to simple constants useful concerning MISRA? Style review OK, but of secondary concern. 

Under what (reasonable) circumstances could this not work? (Nothing to add) Under what (plausible) circumstances could this not work? (Nothing to add) 

Architecture is usually line buffered. So nothing is given to until the user hits Enter. OP code will give multiple error messages with input like "Hello 123". Better to separate user input from input validation. Read the line of user input with or some version of your own as does not some weaknesses. Then validate the input. 

Having seen many variants of , it is not a standard C function, and such functions, recommend units when coding physical quantities. 

Simplify coding, review and maintenance. Is a ? Why bother attempting to co-coordinate the type of member with the call which may be in another file? 

NAN As can take on a value of not-a-number. Code's use of and does not clearly push the is a proscribed manner. When NANs are involved, is not the opposite of . If code was amended to deal with a growing array during the first calls of , consider a to have the effect of shortening the queue and not saving the NAN. Naming The .c file (assume to match ) name, the type names and function names would be more uniform if they all began with the same prefix and case rather than , and . This is manifested in the minor code error in 

Error: Lost pointers. may reallocate and then that function never free the newly allocated memory. will then free the original value of causing a double-free. Likely code should be re-worked to pass the address of to . 

C2. Allocate to the size of the reference type. Less error prone. No need to code the matching type. 

To insure output is seen before read, flush the output buffer after writing to , especially if the last character is not a . 

Avoid a hacker exploit. What happens when ? Injecting a null character as part of is not easy, but doable. 

OTOH, I do like to qualify input right up front. Suggest a helper function to read an and check its range and handle various errors detections. Something like Read_float 

Recommend adding an enumerated value of to distinguish the initial state and explicitly initialize . 

Style: Suggest . Also since the input and output are , code could use constants. In general, unless floating point math is intensive or has larges array of data, recommend using as that is C's default FP type. 

Use an auto formatter. The extra space betrays manual formatting as it is inconsistent with the rest of code. Life is too short for manual formatting. 

Respect the presentation width. This should be easy to accommodate if code is auto formatted. Time spent manually formatting is inefficient. 

The set-up is more limiting than I would care for to use in general. The only parameter needed is the size of the object. For queues of fixed length, I'd uses a single allocation for all the queue elements and control members. 

Path validation should be done with a separate function than the above two, take a and return a simple result. Path validation cannot meet "Code must be platform independent" as the correctness of a path is very platform dependent. 

Thought for a likely next assignment: Consider how to make 60c change when the available coins are only 50c,20c,20c,20c using the below algortim. 

The magic number is unfounded. Just some value? It deserves a comment to explain its rational - even as terse as system requirement. No out-of-memory detection Code lacks OOM detection. Further, recommend to allocate to the sizeof the de-referenced pointer, rather than to the size of the type. Easier to code, review and maintain. 

Indicate failure. If does not have anything in the queue to copy to , there is no indication of that here. Perhaps return indicating success. Same for . For debugging, zero filling memory before I have found useful. Errant code tends to fail faster with a 0 pointer/data than with its original data still potentially intact. Faster failing code is easier to debug. YMMV. Opinion: Storing the queue size is of dubious value, unless of course that is the reason for the type - one with a quick report. Alternative, drop the field and calculate when needed. More often, I have found the need for sufficient than needing a quick and prefer to drop the ever present field. 

Bug: The end offset of a text file does not necessarily equate to the number of characters that will be read. 2 notable exceptions: CR/LF pairs are often changed to a single LF. Many text files, even "8-bit" ones, may begin with a Byte-order-Mark (BOM), which takes up space in a file, yet is not returned as part of a . So either read the file as a binary or check for file error instead and use 

Generality If this was not a function, but for general use, should returned a with all its fields in a consistent state. 

Arrays are best indexed with type rather than . Notice unnecessary mixed types in . Both should be . Avoid naked magic numbers. Why in ? Formatting: For review purposes, consider limiting to the width to the target display. 

Consider comparing the lengths of the 2 strings as code marches down them. No need to compute nor save the length of the strings. 

As for a review, remove the various uncommented code - it is a bit distracting. Simplification in as below or replace with . only looks relevant to commented out code. 

also suffers from severe loss of precession when is about . If OP is interested there are method to better calculate that too. It comes down to how quick you want to write/execute the code versus the need for correctness on edge conditions. Unclear format usage. About 45% of all numbers will print as with . Suggest a more meaningful format 

As the header files used , , and maybe others, should be in that header file. Usage of a header file should not oblige .c code to do the including for it. The .c file should your "linked_list.h" first to insure it does not require prior includes. 

, should be functions. No need for them outside this file. Minor: vs. . An index may lack sufficient range to index an array. Use as that is Goldilocks type neither to narrow nor wide a type to handle all array sizes - it is just right. As is some unsigned type, watch out for attempting to create negative values. I did not notice any issue for your code concerning that.