This is not exception safe. You need to use RAII to make sure you can never leak resources even in the presence of pointers. 

You will need C++17 to compile that is a C++17 feature I believe. Running here: $URL$ Note: This was fun. But if I catch you writing this in my code base I would fire you. :-) Stick to the slightly more verbose but readable version presented by @Quuxplusone 

Yo be honest there is so much manipulation of the object outside the context of the functions its hard to see if your invariants are maintained. So the code is really hard to read and even harder to verify if it is correct. SkipList Design I find it hard to follow your code so I can't really tell if you implemented a skip list. BUT this is not the structure I would expect from a skip list. 

So the rest is just some personal preferences. Nothing I could complain about in a code review. int rightMost_of_curElem(int A[], int curElem, int ind, int n) This returns the righmost element. Which means the user has basically has the index to beginning an end of a range. Most C/C++ like functions use a concept of beginning to one past the end. So I would have made this return the index of the first element that did not match (and re-named slightly). Slight improvement is that you pass the index of the current index which you already know equals the value. You should pass current index + 1 (avoids one compare). int remove_duplicates(int A[], int n) You hard code the number of elements to retain. In an interview (and in real life) I would have parametrized this. Using as a test seems a bit hard to read when testing one or two elements. I would just use the distance between and to find the number. I would have written like this: 

The trouble with templates is that they can potentially be instantiated in multiple compilation units. It is the job of the linker to remove reduce this number not the compiler. So not all linkers are that nice or compliant so you could still end up with multiple instantiations (thus giving you multiple instances not one). OK. Lets assume your compiler/linker are good and obey the standard. Shared libraries are beyond the scope of the C++ standard. So if you link together multiple shared libraries where all these references have been resolved your linker may not even notice that it is inheriting multiple instances from different libraries. 

Never do this in a header file you will pollute the global namespace (potentially without the user knowing) thus causing all sorts of side-affects). Even in source files you should probably not do it so that you don't pollute the global namespace for yourself. The reason it is called rather than is so that it would not be painful to prefix things with it. 

We don't want to add anything to the clause. Thus following the error message indicates we need to use aggregate functions (in the select probably). Try changing the select: 

The order of this list is not important. The order the members are initialized in is the order they are declared in below. The compiler should warn you that the two orders are not the same. The reason the compiler warns you is that on more complex classes this can be important (the order of member initialization) and this false impression you are giving the reader may confuse them. So always make the initialization list the same order as the order of declaration. Secondary note. As this compiles for you this means you are not treating errors as warnings. Go back to your compiler and turn UP the warning level as high as it will go. Then set the compiler to treat warnings as errors. Each warning is a logical error in your thinking. All new code should compile with zero warnings. Getters/Setters break encapsulation and expose the internal types of the class. They are generally considered a bad thing in C++. They are liked a lot in Java because a lot of tools use them. In C++ we prefer methods that modify the class, rather than get(), perform action, set() as this leaks the functionality of the class to external objects. In this case your is a simply property bag. The only class with accesses is the so just make the members public and allow the tree to efficiently manipulate them. 

The only reason to use is to disambiguate the use of shadowed variables. But shadowed variables is an error waiting to happen. So it is best to avoid shadowed variables entirely (even turn on your errors to make sure they don't happen) 

But I would always put the braces around sub statement groups. It becomes too easy for people to accidentally add more code to the without thinking about it and suddenly what you expect to be in the loop is not actually part of the loop. Also it keeps your style consistent if you always have the rather than only sometimes having them. Same comment about here. 

It may not be an issue. But it is worth mentioning. This will make more efficient as it deals with this situation (note you will need to understand placment new and manual destruction to cope with it). Another inefficiency is the copy of data from the old array to the new re-sized array: 

Breaks the Strong Exception gurantee As a side note: I would like to note that it does not reduce the size of the array. Which is definitely not what I expect. This is OK for your code because everything is . But as I pointed out earlier this is wrong. Most constructors should not be as a result this function also needs to work without the . The problem is that you are calling before you know that has succeeded. This means that if the reallocation fails your object is in an inconsistent state. 

Your encrypt and decrypt is very limiting. This means you need to load the whole of your input into memory before you can start any operations. It would be nicer to have a stream/iterator like interface that allowed you simply read the data as needed. 

Personally I would store the iterator (but that's just a small personal preference). Visitor Pattern You are recording visitation to the nodes in the nodes themselves. This is a simple solution but requires you to reset the whole graph before each traversal. PS you don't reset the visited attribute so you can only call once then it becomes invalid. There is a better technique called a visitor pattern. This basically delegates traversal of the graph to the nodes. But Uses the visitor object as a callback to do processing. Thus you can control order from within your code. Note: I would not think it as normal to describe a traversal as "Depth First" on cycle graphs. The graph may not be fully connected and there is no start point indicating a top. Visitor pattern: 

Thus the call th is going to start manipulating some undefined pointers. Fix by either explicitly initializing all members in the constructor or by chaining a constructor that will do it for you. Sinve your default constructor initializes the members correctly I will chain that. 

Also I prefer all sub statements to be wrapped in '{}'. This prevents problems with macros that are desguised as functions. An attempt 

NO. Absolutely do not use pointers like that. Prefer to use references. This way you don't need to check for . You also express your intent much more clearly so there is no confusion on the ownership of the pointer. 

So you only check this node and its children!!!!! If so this function seems to be named incorrectly. Searching a tree is normally recursive. The function should check the current node then RECUSIVELY check each child. 

Most definitely. I have implemented this before; probably using less than a quarter of the lines of code shown here. 

That's old school not seen that in a while. But its also not even needed. A stream object used in a boolean context (like returning a bool from a function) is converted to a boolean value (or pre C++11 a value that can be used in a boolean context). So easier to write: 

You are constructing a temporary object that is returned. Accessing beyond the end is an error you should treat it as such. Now you can treat this in several ways. The easiest way is to to throw an exception. This is the way I would recomend for you at the moment: 

IContainer In the class the member is public. Which leads to potential incorrect useage. Non private members is a code smell they should be hidden behind access methods (not get/set but more like chain()). Also it would be easier if you used smart pointers to make sure that everything is correctly cleaned up. Delegate The class has owned raw pointers and does not (google rule of three as it is more common but the rule of three was expanded to the rule of five with C++11). You can fix this be either implementing (or disabling) all the compiler generated methods. Or converting your owned raw pointers into smart pointers. My choice would be to convert them into smart pointers as correctly handing multiple RAW pointers with exceptions propagating is non trivial (a class with multiple owned RAW pointers is a Code smell even if you do implement the rule of five). The code ~Delegate() and Clear() is very similar (ie code duplication). You should refactor this to move common code to a single function. If the code changes you then only have a single location that will need fixing. In the method a lot of work is done that is usually associated with the constructor of the object. If you give IConnect an appropriate constructor this code becomes highly simplified and easier to follow. In the method 

You could use this will allow you to find the count in the most efficient way no matter what the type of the iterator. You only use Copy Semantics Your merge moves the objects between containers using copy semantics. 

Note: Most of what I said above also applies RingBuffer. I will not repeat myself. So this next section are only the other parts. No need to use macros 

I am assuming your manually implementing the IEEE754 representation. If that is the case I don't see any problems (as long as your way of transporting integers works and takes account of endianess). 

Note: A lot of common interfaces when you pass a NULL as the destination return how many characters it would have used in the buffer. This leads to a lot of C code that looks like this: 

Memory Leak Your code leaks. I see calls to but I see no smart pointers or calls to delete to reclaim the memory. You need a destructor on your linked list. 

Are you sure you want a ? The factory is not retaining ownership so there is no dual ownership. Personally I would return . The user of the code can then decide if they want to upgrade from to if that's what they require (as you can assign a to a . The reason I would use is that there is basically no overhead from while has a significant overhead because of the need to track internally. 

For some reason your destructor is in the middle. So you have some constructors on either side. Copy constructor: 

If you are going to replace them then you should be using smart pointers rather than a RAW pointer (if you want to do it manually then learn the rule of three) But I would go with smart pointers (but that is a second option to normal objects). If you must have pointer use smart pointers: 

My concern now is that you make multiple calls to get the actual distance. Every-time you do that then you incur the expense of the operation. I suppose it depends on the exact use case of your application which happens more often. But if this is for general code that could be used a lot in either capacity. I would add another two fields to indicate if it was dirty or not and cache the result so you don't have to recompute the actual value each time. But that has the side affect of adding a conditional branch into the get which can also be expensive when looking at micro optimizations.