In typical MVC, the model doesn't have to know about the controller: it's the other way around: the view and the controller know about the model. This allows you to test your model independently. 

Better CoffeeScript First of all, if you're going to use CoffeeScript, then use its full potential and do away with : 

Do you want to allow this? It's probably better to replase by . And the only use case of is covered by . 

This can be written as . A simple Levenshtein distance trick Instead of using absolute distances for the Levenshtein distance, you can define a ratio. That is, if string1 is within 30% of edit distance of string2, then it can considered egal. I've used this trick in the past and accuracy increased a bit. BumSkeeter-aware distance You're saying that the errors come from paste errors where a few chars are missing at the end. If this is the only possible error, then you don't need the full power of the Levenshtein Distance, and might want to use a distance which only counts the number of added characters, and use Levenshtein distance * 10 otherwise. Searching intelligently (This is the most important point.) The best way to get good results is to stop pairing two strings when the distance is short enough, but to always assign the best string. That is, you still do your outer loop , but for the second loop, store the score for every possibility, and assign only the best score. The time complexity is the same, it could possibly be a bit longer, but unless you have thousands or millions of items it's going to produce much better results. 

You can then compare this to the time it takes for your program to complete, and see where you're losing your time. Another option is to use microtime to benchmark the time you take to actually do computations, and the time to and . Optimization, what for? Since it's probably a one-off script, why do you want to make it fast? Once you have your ngrams, you can reuse them and forget about this script. Is there a good reason to improve this script? If the problem is more specific than "takes too long", than we can help: too much RAM? takes months? Specific strategies can help for specific problems. 

Yay! Only 3.2 seconds in . Removing another 80% But hashing is still not the most expensive part. It's now the computing of RandomData (0.5 + 0.2 seconds in base64 encoding, 0.4 seconds in urandom, and so on). @cHao is right, you only need to compute that RandomData once and find the count that provides the correct sha1 hash. Let's move it out of the while loop: 

I don't know if it is considered idiomatic PHP or not, but it seems more readable and less error-prone to me. PDO and exceptions already gave you a way to get rid of the first in , but it's not enough, you should also remove the second one. I assume it comes from the possible exceptions in and . The issue is that you're catching the exception but doing nothing with them. You should instead embrace exceptions. :) A good first step is the call. Since there's nothing you can do to handle them in the factory: you should instead let the application code decide what to do if something fails: for example, display a warning message to users and send an email to the administrator. 

You don't need all those here. In CSS, will select your subsections and will make explicit the relation between the big section and the subsections. This also frees your HTML from unnecessary clutter. 

Edit: about the new method, I'd say Graphics2D is a bit overkill (look at Konrad Rudolph's comment for another opinion). And you don't use the max parameter anymore. Does it stretch the image? The original method is better, but you should have a real : resizing the image twice is a hack. It would look like this: you just have to fill in the . 

Comment your code! You don't use , remove it. The second should be an . Use '0' instead of hardcoding 48. Convert into an int and use which is easier to read. 

Learn about PEP8, you should have two empty lines between imports and the rest of the code. More generally, you should give more structure to your code to make it more readable. Empty lines are one way to achieve that. For example, one empty line before each comment could be nice. 

Yep, you can't monkeypatch it (as said in answer to 1.), but that's not what you wanted to do, since you wanted to keep the original implementation too. And a decorator would not have improved things. Naming 

I'd like to focus on the function to make the work of codesparkle more manageable. :) Exceptions handling The first, high-level problem is the way you use try/catch blocks. Exceptions are not here to get into your way! They're great tools that let you write robust programs and focus on error conditions only where necessary. Writing "Problem opening file" and continuing execution as if nothing had happened is a really bad idea. The truth is that if you can't open that file then your program is useless. So you might as well show the error to your users and quit the program once they acknowledged it. I removed all try/catch blocks from the code since your function already says and because is not the place to handle exceptions. Declarations 

Design pattern? Thanks for your detailed question. Sorry, but what you're looking for is not a "design pattern". Look at this quote from Wikipedia (emphasis mine): 

(Personal state: I don't really like this pattern where you have braces in the first branch but not in the second.) 

Testing JavaScript code in jsFiddle to make sure it works is suicide. The difficult part about JavaScript is really cross-browser compatibility, which means you just can't just test in one browser to say it works. That being said, the name makes me think that you want to return true/false, which is not what you're doing. You should use DOM's , which already implements what you're trying to do. It's DOM 1, so it's safe to use and will work in any browser supporting JavaScript. By the way, why are you using this funky syntax to create your function? Is there a good reason not to use ? (You should accept seand's answer, though, I didn't know it wasn't supported until IE 8. You should also consider using something like jQuery which will help you avoid mistakes like that.) 

You're going through a lot of trouble to count the number of lines in the file. The first think a reader thinks when looking at this is "wtf?". This is where good comments can help: you could have written "Count the number of lines in f". But the better thing to do is to actually use a better container for . You could use a instead which allows you to append new elements without losing performance. This would allow you to change the real reading code: 

The code looks good (it's short, which is always a good thing). Make sure to follow PEP 8. A recent revision of PEP 8 allowed 99 characters lines to "improve readability", but your comment would still be easier to read on small screens (or on CodeReview!) if splitted. An issue I often deal with myself in statements is naming properly and when you really can't provide distinct names. I don't think is a good choice. I'd suggest , while renaming to or something similar. PEP 20 says "Explicit is better than implicit." very early. Your comments could be improved too: a common advice to beginners is to avoid stating what the line i (eg. ), but say what it means (eg. ). You're actually doing both: you just have to remove the useless part! 

It depends on a lot of factors, there's no universally "optimal" size. 512kB is probably good enough. If you want, you can always benchmark it for various buffer sizes: this will let you know what the best option is for your computer and OS. 

Design Dependency injection is very useful when you have multiple implementations of a given dependency. If you don't plan implementing another , then it's probably premature abstraction. I'll assume here that you have other implementations. Let me answer your questions: 

Disclaimer: I know some OCaml and a bit of Erlang, but never implemented an F# actor before. I also read the async paper you mentioned in the comments (apart from "Semantics" and "Implementation"). Style Indentation 

In a typical MVC app, the controller doesn't poll the view: it's the view that sends events. However, since it's only a command-line app for now, this makes sense. 

If you're worried about performance (you shouldn't, most XML parsers keep the whole tree in memory), you can always group the first and second function in a Iterator, which will decouple the reading/tokenizing from the validation logic, and you will still be doing stream-based parsing. This simply reduces memory usage, and can be a bit faster. Code 

At this point, even when quickly looking at occurrences of "chance" in the rest of code the code, I have no idea what are. This deserves a better comment. 

This comment is not terribly useful, we can notice by ourselves that the functions are private. However, I do agree that for a simple file like this this separates the different sections quite nicely. F# allows you to be concise in ways other languages don't: 

What are the advantages of having this in Zend_Registry? What would you loose when using a helper function? 

is a bad name: it should only be used for numerical loops, but they should be rare in Python. Also, Use a constant to make your class filtering clearer and shorter insteading of hardcoding the value, like or something. This is very brittle, too, because if someone at YouTube decides they need another class, your code will break. What you can do instead is choosing one class that you think is less likely to change. looks like it would be a good choice. But these things are very brittle anyway, so if you want to ensure this continue to work, you'll need to write tests to ensure that for this specific channel, you continue to get the things you expect. 

How do you know this is the shortest path? It feels a lot like depth first search, but I think you want to implement Dijkstra's algorithm instead to be able to notice shorter subpaths. 

The way Python represents dictionary is different from JSON. For example, JSON only allows for quoting, not . You can use to solve this problem. More obviously, if you were representing this data using JSON, your data would look like: 

Why do you want to get an ElementTree rather than an Element? I think it's a bad idea for two reasons: 

Come on, you don't need a function for those! Overall, don't be overwhelmed by my comments. The code is nice, but there a lots of little things to improve. :) 

First of all, it's a bit surprising that you roll your own . I would expect an normal array to be more efficient and natural, at least when starting. A good mindset when thinking about coupling between parts of your code is to think about the specific problem of testing your code for correctness. It's a very real problem than you can solve, while "having code that looks properly designed" is not useful in itself. The first thing is that you should not expose global variables to as it will make your code impossible to test: those variables will taint everything interesting in your code. The current code is still very much tied to the way the entity stores the engine, and the way your engine stores graphics. I've heard a lot of praise about the entity component model, but unfortunately I don't know how it's tested. A related issue to think about first is the way you model requirements between different parts of your code: take a look at the module pattern and consider using something like RequireJS to make dependency handling easier to manage. I guess there's no good way to separate the rendering part of the component from the graphics system, so it's OK to have coupling here, but avoid relying on knowing graphics/engine when you don't have to.