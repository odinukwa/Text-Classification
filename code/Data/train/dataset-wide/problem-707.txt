Tsunamis are no threat to floating islands, by the way: Tsunamis are waves with extremely long wavelengths. They only become dangerous when their wavelength is reduced by the low water depths near shores. As long as there is enough water beneath a floating island, it will just move a bit up and down when a tsunami passes underneath. 

There are a few traits like the colorblindness you mentioned that give you precisely that. However, if it is known whether the mother had the trait, the above is implied by: 

If you want to take down the power of a spaceship, your best bet is to destroy/disconnect the power source itself. 

Seemingly unrelated, but very related at the core: How do you spot oil slicks on the open ocean? Answer: You look at the waves! This is what happens when SAR imagery from planes or satellites is used to spot illegal oil dumps. The trick is, that the radar reflectivity of the sea surface depends on the presence of surface waves of a specific wavelength. And the oil slicks look dark in SAR images, because they dampen the short waves that are abundant everywhere else on the ocean. This works even with the thin contaminations that result from ships cleaning their tanks. So, if a thin film of oil can sufficiently dampen waves with a wavelength of several centimeters, it stands to reason that a thick floating island can easily dampen waves of many meters in length. Of course, the shore line of your floating island will go up and down with the waves, but if you go some hundred meters away from the shore, all but the largest waves should be entirely dampened out. The total dampening of a floating island should actually be more than the dampening of a rock island, because the floating island won't reflect the waves. It will actually absorb them and turn them into heat. 

Where you use water, there you get waste water. You need to supply fresh water up, and you need to get waste water down. The amount of both will be roughly the same. Now combine the two: Use a long rope, hang it over a pulley at the top of the building, and attach two large water containers to it, a blue one for fresh water, and a brown one for waste water. Use is as follows: 

You fill the blue tank at the bottom of the building with fresh water. You fill the brown tank at the top with waste water. Both tanks are almost perfectly balanced, a single man can now move a ton of waste water down while moving a ton of fresh water up. Empty the blue tank at the top into a fresh water basin. Empty the brown tank at the bottom into a sewer. Move the two tanks back into their starting position, rinse and repeat. 

If you want all planets to be on the same side of the sun, you must use hirarchical Lagrange Points: Once you place a planet in a Langrange point, two new Langrange Points appear, one between the two planets, and on the other side of the smaller planet. So, adding a third, smaller class of orbiting objects I'll call moons, you'd get a configuration like this: 

This is perfectly possible, and I guess it could be readily done with modern technology. For less technical settings, you just need to say that some plant happens to produce the poison, it's believable enough. So how does it work? Your poison needs to be a drug (let's call it P) that targets two different compounds in the human body (call them A and B). Think of a large molecule with two different functional groups, each of which are responsible for one of the two reactions. Such molecules should be quite easy to produce with modern methods. 

The two big planets orbit the sun in the same orbit, but on opposite sides (they are in each other's L3 point). The four smaller/lighter planets occupy the L1 and L2 points of the larger planets. Thus, all planets and the sun are in a single straight line like this: 

If you want the elvish swords to be really bad-ass weapons, you can say that their edges are encrusted with some magic crystal coating (= a diamond layer on top of the edge), which allows them to dent steel swords, turning point 1 above in favor for the elves. But I guess, that would overpower the elves. 

The greatest danger to your floating islands, however, is that they will drift between different climate zones. The ecosystem of the floating islands needs to be able to survive drastic climatic changes. They need to be able to strive with hot, wet, equatorial weather, as well as with dry sunny weather, or frosty conditions, changing on a timescale of years. How you adapt your flora and fauna to this, is up to you. I wouldn't think, its impossible to do, but it requires some thought to come up with a sketch of an ecosystem that can tolerate such drastic climate changes. Maybe some species will drastically change their appearance with the changing climate, while some others will become extinct outside of their home climate and only survive in the form of spores. This could lead to quite some interesting dynamics, imho. 

All these attacks are obviously destructive, and thus not revertible. So, be prepared to supply emergency power to the attacked ship after it has acknowledged defeat. Unless your attackers are not of the type that doesn't take prisoners, that is. But in that case, the attackers would much prefer some real fireworks anyway, I presume. 

There is one important point to realize: Fallout is distributed over ground surface, but diluted in ocean volume. That difference is huge. It means, that the same nuclear material that settles in a thin layer on the ground is spread across a few meters of depth at first, and will keep reducing in density as surface water gets mixed with water from deeper layers. Of course, depending on the intensity of the initial fallout, life in the upper layers of the ocean will be affected. Also, you will see significant impact around river mouths, as those rivers will wash the contamination from the ground to the sea over time. However, you have really good chances for a large amount of sea life to survive even when ground based life is completely eradicated. Another effect to consider is distribution of fallout: If the fallout is man-made, the vast majority of it will be emitted over ground. There are just no cities to bomb in the middle of the pacific. As such, the fallout will impact the open oceans much less than the costs around highly populated continents. 

The main problem of building spacecrafts is the tyranny of the rocket equation. This equation says that the amount of propellant that you need grows exponentially with the speed difference you are trying to achieve. Bummer is, you need to accelerate pretty hard to reach even the lowest orbits, you need to accelerate by no less than 27000 km/h. Fail to do so, and you fall back to earth. And, due to the rocket equation, you need insane amounts of fuel for this. Just to give you some numbers, here are some stats of the Soyuz rocket and space vessel: 

With this strategy, you won't have any direct deaths, "just" many indirect ones. The grade of devastation would be most visible in the cities (Which city? I only see a big pile of dust!). Farming will continue to work just fine for the most part, however, storage of grain and livestock production will experience problems due to crumbling silos and buildings. Infrastructure will come to a slow, grinding halt: 

I'd say, as long as you manage to keep the extra weight of the intermediate platforms down to, say, 1% of the weight of the cables, your design would definitely work. It would be significantly more costly than building a static tether, but it would definitely solve some of the headaches connected to riser design. 

But, this is happening today! You see, a lot of the current software development is in Java. Java code gets compiled to byte code, which runs on a virtual machine. Then, there is some kind of runtime, most likely written in C or C++, that simulates this virtual machine on the fly. This runtime runs as a process within a virtual execution environment (virtual address space, no access to any hardware except the CPU). This virtual execution environment is created by the OS kernel, which thinks it has full control over the hardware. Except that there are parts in the hardware itself (UEFI, System Management Mode, Intels Management Engine, AMDs whatever), that can control the kernel, possibly, the kernel is actually executing inside another virtual machine... (we are running in circles, aren't we?) You see, layers and layers of abstraction, and where is the actual hardware? Only preciously few people know. If you just ask the average programmer, they won't even have a clue how their processes manage to write some data to a file. They won't even know, how their request can actually leave the process's virtual execution environment. Even a C programming crack does not necessarily know this, as it's not even a part of the C language! Even people like the kernel hackers do not really see the hardware, they only see the abstractions built by the hardware. It's turtles all the way down... That said, it is not impossible to teach people the principles that are repeated over and over again to create this monstrous stack of abstractions. You see, there's not so much difference between a process executing a trap to call into the kernel, and the kernel performing a seeming hardware action that traps into its hyper-visor. It's pretty much the same mechanism repeated at different levels. It is also possible to teach students, how you can build a CPU from parts like registers and arithmetic units, and how these are built from individual gates, and how these are built from individual transistors. As such, it is still possible to know all the principles of the full stack. However, for the vast majority of programmers, knowing the full stack is not their concern. Programmers tend to work at a specific level, deepen their knowledge at that particular level, and thus act their role in the big play that's called the "division of labour"