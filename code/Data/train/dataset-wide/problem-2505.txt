Remove unneeded attributes You don't need to use the attribute. Marking individual methods with or one of the attributes is sufficient. Also, using when is present is redundant. Here's an excerpt from the refactored, and somewhat reformatted, tests: 

The main reason for this reordering of the parts is readability of the test names; I think it reads more naturally when in this order. Try comparing these two variations of naming the same test by reading their names out loud: 

Apart from what's already been said you should consider your test suite a bit more (I'm assuming you're using NUnit in pretty recent version). Apply DRY to the tests You have two more or less identical lines in all tests: 

I like to use something very similar to what is here referred to as Roy Osherove's test naming convention, the difference being the order of the parts: 

This avoids the higher coupling (inheritance) between the dictionary and its subclass, which is there only to help with initializing the dictionary. 

The above interface hides the details while allowing polymorphism; you could e.g. keep the "vtable" implementation (but hidden) and provide different init-functions. I really don't follow all that macro voodoo but having a mutable shared state - the "pointer to current class" - seems susceptible to race conditions. 

After getting the data from the toggled check box, I can't reach the layer in order to call the method that would filter it. How to hide/remove layer0 and layer1 (labels and check boxes) from the layers list? More generally, how to format this list? After selection and filtering, how to give different colors to each filtered polyline? 

Please, let me know if I can improve the question in any way. I thought about posting this on other StackExchange sites (SO, gis), but I decided to post it here because it involves a larger code review; I'll also appreciate if someone explains that I should do otherwise. 

This function is called when an event is fired up, which connection was defined on a callback function. How to reach the target layer from here is kind of obscure to me... Example If a user checks the box with the number , the result should look like this (taken from ArcGIS webmap viewer). 

Filter the layer Here is where one of the problems is located, the method fails with the message . I know that this is not supposed to work, here, is just a placeholder for whatever I've got to put there. 

I would actually recommend you to use the (Constructor) Builder pattern if you are only doing this for easier object initialization: 

I would actually avoid the attempt to mimic C++ syntax. It makes things more complex and exposes unnecessary details. For me it would be equally object-oriented with the following C interface: 

There nothing wrong with the code per se. I'd still prefer to have the error return statement inside the catch block to keep it close to where the condition is detected. I would also move the success return statement to the end of the method: 

Declare the calculator instance as a field in the fixture instead, and initialize in a method. There's also the duplication of . In this specific case I might go as far as to get rid of entirely: 

Start with writing unit and/or feature tests that capture the current behaviour. Then begin refactoring while making sure that the tests pass all the time. If you are not an experienced developer "refactoring" might be a bit vague; I'd then suggest to simply start with removing duplication in whatever form there is. Aleksi had a couple of examples of extracting methods. Start there. As you move stuff to methods you will soon see that there are different categories of methods that are used together. This is an indication that these should be moved to a separate classes to encapsulate that behaviour. Then read about the SOLID principles and continue from there. Practice, practice, practice and think about what you are doing at all times. Good luck! 

Check boxes These check boxes are built with all possible values, of a given attribute (), within one of the layers (MidScale/Water Mains - Block View -- it is the last one inside layer1), so they should filter that layer. Here is how those values are fetched. 

Background I am working on a WebGIS application using JavaScript and ArcGIS JS API. I am new with js, so please bear with me. While learning and developing with js, I am trying to follow some rules, such as Asynchronous Module Definition (which ArcGIS JS API encourages), Revealing Module Pattern, and the Standard Style. Certainly, I still fail at following them correctly. This code is built on top of this responsive template: github.com/Esri/bootstrap-map-js. Objective This app consumes some ArcGIS REST services (MapServer). Assume that I don't have any control over them (I have access to server, but that is another thing that I know nothing about). One of the functionalities is to filter a certain layer (Feature Layer with Polyline geometry), according to a selection that the user does using check boxes. When a check box is checked, only some parts of the layer should be visible. If multiple checks are done, the visible parts of the layer must have different colors. Code I set up an example of this application using one of the example ArcGIS services. It is available in this repo: $URL$ (sorry, I failed at making a jsfiddle out of it) Below I make a brief description of the relevant parts of the code (file app/js/map.js) Add the layer When the map is added, all layers on the service are automatically loaded and placed in a tree with checkboxes.