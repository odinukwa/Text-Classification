Overall, your code looks perfectly fine. A minor minor minor nitpick is that you're writing one space more than necessary here: 

My approach I wanted to make the game flexible and general. It should not be necessary to change much to create a "normal" Rock-Paper-Scissors implementation. It should also be possible to add elements such as Water balloon if you'd like. Technically, it should also be possible without too much effort to modify the elements at runtime (this is currently not supported in the below implementation, but there's not many changes needed to make it a reality). Players. All players have a score that gets increased when they win. A player should have a method to return which item the player chooses, this implementation can vary (a human can write input, an AI can return something random, some other AIs should perhaps always choose SPOCK...) Code Because I am lazy, I have put all the classes/interfaces in the same file. Of course, all of them could be placed in their own files as . The code is stand-alone, just copy it and paste it to your favorite IDE (Eclipse) and run it as a JUnit test case. 

Indeed the recommended approach for this (or at least what I would recommend) is to use callback interfaces. The most important aspect though is designing this interface. In this case you should be sure that you're passing everything you need. However, I think you can rename the method to or or similar. You might also consider returning a boolean to determine whether or not the dialog should really be closed (the input might need to be validated before it is accepted?) (there are ways to stop an AlertDialog from closing, you can find more information in earlier StackOverflow questions). 

Again pseudocode unless it happens to compile. Thought of one thing that might be a pretty big smell: What is up with the property initializers? When the data is read from attributes it feels like it should be readonly. If there is not a reason that they are mutable you should make the properties readonly and use constructor. 

returns an instance that only has one method The method returns the same instance but as that exposes the 

In my experience there is rarely a need for delayed invokes on the dispatcher, what problem are you solving? If you do something in a constructor that you want deferred until loaded there is already an overload for that: 

Putting the as single child of the grid is wasteful. Add to the grid. As a rule of thumb is almost never right. After writing WPF for a couple of years you will probably find yourself using ~95% of the time. Grid is a bit verbose but it is the panel you will not have to refactor away from. Also Grid makes reasoning about layout simpler. You can try this to bring down the verbosity a bit. You can add BindsTwoWayByDefault to EightPieceBoard.Selection but I don't mind being expliclit about it. The viewmodel should not know about the view: it makes testing harder and is smelly in general. Not a clean separation of responsibilites between view & viewmodel. 

Regarding Singleton Try to use the IoC-container for singletons. It makes it easier to test and makes references explicit. Avoid doing all over the place. Note that a class can still be implemented as a singleton but consumed via the container. 

Regarding Initialization Initialize methods is a pit of failure as it requires the caller to keep track of if it has been called or not. If possible you should always aim for that an instance is good to go after the constructor. If initialization is needed any way you can perhaps use this pattern: 

The String-contains approach is an easy approach to take on this issue, but it can also lead to false positives: 

You send the entire only so that you can use the method on it once to create the OutputStream. It is much better to give them the / directly. This is what is called Tell, Don't Ask! When possible, don't give your classes an object they can ask about something, give them what they need directly. 

It is better to declare your variables as , and instantiate with to allow other implementations of . Like this: 

Let's say that you would want to add a new difficulty to your game. Where would you change your code to do that? 

You might consider this as "outside the core part of the code" but it's really not. And it is a very important change to make, class-design wise and best-practices wise. You could then use a class where you could have methods (static or non-static, as you prefer), for (your current dictionary), , , etc... 

When I look at this method I wonder: Why do you need to throw an IOException to do some mathematics? The answer is that you read from input and print to output inside the method. I don't recommend that. Instead I recommend: 

final because the value does not change, and should not change. The field should be immutable to use generics properly. Otherwise you should get a compiler warning saying 

Side note: Your class seems to have an excessive amount of parameters to the constructor. This can be a code smell. Consider using setter methods instead, such as , , etc. or (advanced concept) use the Builder pattern. It is possible to do more abstraction as well, but I think this should be good enough for now. You should be able to reduce your code size and code duplication a lot by using the and methods. 

Why do you have a at the end? As soon as the script finishes, it will just exit. No need to have the there. 

Notice something? The use of jQuery just to retrieve the value of an . Just remove the jQuery from there! has the same effect at a WAY HIGHER speed, without ANY bloat. You have it right a few lines below, and I give you credit for that. 

These comments contain old code. Just remove them! They won't kill you. And that can go away as well, since it isn't useful to make the code work. It may be in debug. But wait! You have this line: 

First of all, the indentation is next to inexisting. The code is badly formatted. Are you scared of tabs? There's no excuse for a wall of unformatted SQL. There are online tools to fix it for you! 

Wow, some fine German Overengeneering going on there! You can pass it a string or an array of strings, and a 'screen', where the message will be added. 

As the title says, this batch script installs the XignCode Bypasser. Xigncode is a software bundled with games to analise running programs and prevent cheating. (Sometimes, it prevents the game to load at all on the newest Windows releases.) For this, a bypasser was created that disables this check, allowing players to run the game (if they couldn't), mod the game (One Click Tool, for example) and (if you want) cheat. Copying the files manually is a boring task that can lead to mistakes (copying from the wrong location, deleting the Bypasser by mistake, ....). For that, I've made the following batch script that does all the copying and extraction: 

I hope you can understand everything and hope it is clear enough for you. And hope it really helps you. 

By -ing your results, you won't consume any extra memory at all. There is a lot of magic going on behind the scenes. The point is: When you use yield, your method will be processed on an on-demand basis. It will return something, process that, return something more, process that, return something more, process that, and so on. I hope this will help you on your way to rewriting this method. 

Because a) There's no need to use for something that is already an int. b) is a constant (or as we call it in Java, ) with the value 13. Avoid using "magic numbers" in your code like that, instead refer to existing constants or create new constants when necessary. Secondly, I really doubt that the size of your screen will change while your object exists. Which means that this code need only to be run once and can therefore be placed in the constructor: 

So you create a and a and give them both the reference? Let's see how you use that in the classes then. 

You are making your dependent on your GUI here. This is generally a bad idea. I would instead pass the and to the as constructor arguments. GUI class 

O(n) as well. Best-case, worst-case, average-case, they are all O(n) here. You are always looping through the entire list once, no matter what. 

I've only come up with this horribly if-else nesting way of doing it. There's gotta be a better (more extensible and more clean) way but I can't come up with how... Here is the code, it is currently only containing two regular expressions to search for and it's getting nasty already: 

Efficiency I don't think that can be improved. You're only using two if-statements. This is as efficient as it can get, I believe. Cleaner Depends on if you consider the conditional operator clean or not. 

Starting a task and the immediately block () is a huge antipattern. All the downsides and no benefit, the calling thread is freezing your UI now. Also there is overhead in creating running a task so it will block even longer. By doing this you open up the door for deadlocks and race conditions, all kinds of pain. When you start a task prefer it is shorter and you can't forget to call Start(). Normally you don't want to start a task to block for IO. If you use a task you should do all the way. 

Ending here, really nice code, not much of a review. As with all things related to performance, profile first and profile after if you decide to optimize. 

Same as above, don't add the grid as single child to the outer grid. This can hurts performance and is noisy to read. Better with a grid than a stackpanel though :) 

As is a singleton it should be thread safe. ConcurrentDictionary is a nice fit for this. Using the code would look like this: 

I would probably not have this as an extension method as it doesn't mean any real reuse of code. For cancellation you can use this: 

LINQ does not add much imo, if the logic was more complicated the for loops are nicer to debug. One downside with LINQ for this is that it requires formatting to be readable. If you rename things the formatting needs to be maintained. With the foreach loops you get formatting for free. Edit: As per @RobH's suggestion: 

1) What overloads make sense and what are missing if any? 2) I'm really not sure about if adding composite formats like where is for the scalar value and is for the unit is a good idea. 3) Is nobreaking space the best choice?