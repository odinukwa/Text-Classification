Since you are doing the same operation over and over, you can put your strings in an array or list and use a mapping function. For example: 

I'm working on a dataset from a MOOC. I have a lot of python3 code snippets that I need to run and get the results from. To do this I've written a python script that loops over each snippet. For each snippet I: 

We now run over 1000 times faster, yay! Cleaning up the Code One of the reasons this question took so long to answer is that your original code is very hard to read. I'm going to keep your logic intact but clean it up some, just to make it look a little more rubyish. 

They are syntactically equivalent, so choose whichever you prefer, however the second one is more idiomatic than the first. As Paparazzi mentioned, you should use lower case for the first letter on your variable; in idiomatic C#, only classes, property names, names of structs, and enums should start with an upper case letter. Updated: added additional notes on what should be capitalized 

I think you can add functionality to to make the common ancestor search more ruby like. (I can add a search by value later, if you want.) I've added a parent member that is set automatically, and I've added and enumerators to enable easy traversal up or down the tree. Note: Thinking about it, the search function needs a little more work in case node 2 is higher in the tree than node 1, but I am out of time right now. Let me know what you think. Testing indicates that this is not an issue. 

If you wanted to look more ruby-ish, you could convert your switch statement into a hash and then / your input string. 

Update 1: Added second enumerator and search function, fixed a bug Update 2: Added lazy enumeration and profiled code against a tree with 10K nodes. Searching for nodes with values in the middle, the new lazy code runs about 2.5 times faster than the poster's original implementation. Also running rubocop, there are no Cyclomatic complexity warnings 

So now to the problem at hand. I think your data structure is indeed badly choosen. The first thing to note is what is important. 

Note that I have used the ordered versions of the set, as it allows for faster iteration and we get the ordered insertion for free in the set. Your function then becomes the constructor of the class 

Now you could optimize your set further, by checking for multiples etc. Use a std::array for your leafs, as its size is static. You could obviously also use a bitset. 

Do not use namespace::std; Google it or just drop it. Add all the necessary headers. You are missing string If you have to implement getter functions declare them const. 

You function read_line does not what it suggests. It reads a file line by line. So you should find an appropriate name. Your choice of uint_fast8_t/uint_fast16_t is interesting given that your example csv table hold some larger values. Have you measured the impact vs unsigned int or std::size_t. Be aware that modern cpu can read multiple elements at once so you choice might actually have negative impact. Every line you clear numbers and build it up again. It will be beneficial to just initialize it once via and then just overwrite the old value. That way you can omit the unnecessary Getline takes a third argument which is the delemiter. Also getline stops at newline and end of file so you dont need all that error checking Given that you now the number of entries per line you can simply loop and accumulate 

There was a similar question recently. The one main gist is that you should not add the random device as a member C++ Random Number Generation In the end you also do not really need it once you initialized your Engine. Consequently you should only put the engine in you class. 

So what you actually need to do is simply counting the occurrences of every letter without any sorting necessary. That is best served by a , where you insert the characters and increase their count. 

Theoretical Code Evaluation Let's do some math to see how many operations you are doing. I'm going to use as my variable for whatever value you assigned to You have a loop that for every multiple of , it does modulus tests. For , the correct answer is 2520, so we can calculate that you code did For the correct answer is 360360, which is also the same number of operations performed. This doesn't seem too bad. However you are also calling every iteration. If you look at the source code for this, it loops through every value in the hash. This means that in the first iteration, the hash has one value and this is one operation. In the second iteration hash has two values (requiring two operations) but now we've done a total of three operations between the first and second iteration. In the third iteration there are three operations which makes for a combined total of 6 operations. After the fourth iteration we've done a total of 10 operations. This is a series of the sum of natural numbers and the formula for it is: 

This line also removes the need of cleaning up your nils at the end Additional Thoughts While the logic is largely fine, stylistically your loops could be a little more idiomatic. Unless you are using older ruby, you should tend to prefer over . They do the same thing but .with_index is a little more functional (programming). Secondly, in general, try to chose better variable names than . You have comments describing what they are, but with better variable names, the code becomes self documenting. (I've used ix_row and ix_col, but that's my personal naming convention for indexes; feel free to change it, just make sure it's purpose is obvious.) Finally, you are overthinking your boundary checks as well. All you need to do is simply check the index. 

Create new StringIO objects Set and to my stringIO buffers Execute the code snippet in a object Join the thread Log the results in the stringIO buffers Restore stdout and stderr 

I left out parenthes as they would blow up the code. You could add them, although they are redundant. It is a matter of taste. This is the most straightforward attempt. Simply loop through all eight neighbors, test if the neighbors are within the field. If they are, count existing cells, but ignore the own position. There are some optimizations possible. Although it is hard to optimize a loop over max 8 elements. The most obvious improvement would be to eliminate the test for the boundaries. This can be done by increasing the board by one row and col at each side. You are not allowed to put anything there, but testing would be greatly simplified. So valid positions would be [1.. xLen-1] and [1...yLen-1]. The simplified code looks like this (notice the removed boundary checks) 

The same applies to any datatype which does not require result conversion e.g. to megabytes or date time formatting. 

Your naming of is not correct. The variable holds a list containing th number . So its name should be . The same applies to the list. Regarding the if-else construct: One clause is redundant (the second ) so you my either omit this or rewrite the conditions like this. 

There are two more lines which we could optimize: The 'if' conditions. Considering the fact that the board consists of '0' and '1', we could do the following 1. Add whatever we find in the cell (0 or 1) 2. Count the center cell but later substract whatever it contains. 

In my point of view, it cannot get simpler than that. However, if you ask for ease of understanding, I would not use this code as you have to explain the code (add the contents of the cell?) and the last line ('return'). Also, when changing the board layout (e.g. from 0/1 to 0,99 or true/false) the code will not work like that anymore. However, it is the most compact. Now, when it comes to performance improvement you might consider maintaining a second matrix, which actually contains the current count of neightbors for each cell. This matrix is updated whenever you set or reset a cell. Setting a cell involves adding 1 to all neighbors while resetting a cell involves substracting 1 from all neighbors. 

Use the available functionality and avoid redeclaring the same thing. For example is a bad design and not needed. You have a couple of functions that are not valid without each other 

With c++ you should stick to std::cin and std::cout instead of scanf and printf You do not have to set default values for variables you are reading anyway 

Then i would urge you to define more classes that hold your respective data and apply some methods. Currently you have one class snake that does everything. It might make sense to encapsulate rendering into its own subclass and the snake itself too the same goes for the arena. 

Now you can add a custom exception to tell your user what is wrong with the code and standardize your error warnings. This might obviously be an overkill, but i used it for a parser I wrote and naturally the number of different errors increases. 

Great that you renamed you function according to what it does. I would suggest, that you add a helper function that reads a single line. Creating small well encapsulated functions is key in writing maintainable code. Regarding you code there are some small nits: 

Whats the purpose of i? You loop does strange things, as it calls findGreatest twice, which is unnecessary. Instead just insert the new values into the vector in a sorted fashion: 

Depending on the C++ version you are using you want to consider using range based loops for C++11 and higher. Then a loop like this one: 

Regarding negative steps I would stop making my live hard and simply swap t_end and t_start. That way you can use the same code path for both cases without worrying about signs etc. If you is not a multiple of your you need to evaluate again with a smaller time step at the end of your computation. You are stuck with float or double for h. The steps are non integral so ... RK is a multistep methods, where you calculate the n-th step using the result of the n-1 th step. So it is not possible to parallelize the computation of a single step. What you can parallelize is the computation of the different ODEs. You need to really step back and consider whether your code is doing the right thing and then you should ask your self how long it took you to come to that conclusion. RK is a really simple method and your code makes it just so incredible complicated