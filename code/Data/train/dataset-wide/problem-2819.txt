Just for kicks, I implemented a jsFiddle to understand performance of (as in original post) compared to for loop I have suggested and was somewhat surprised to find the for loop to be on the order of 50% slower than reduce. When testing for larger arrays (100K items for example) performance became similar between the two solutions. Regardless, it is probably very much in the territory of micro-optimization to consider one approach vs. the other based on performance testing alone. I would still prefer the simpler for loop code from an code management standpoint unless I knew I was going to be running this code at very high frequency in my application. However if the majority of the surrounding application was using more of a functional programming style, I would be happy to use reduce as well. 

You may consider adding the ability to log out hash creation timings so as to allow you to more easily tune the work factor value to meet appropriate use case for your application (i.e. say you wanted the hashing process to take 1 second, you could tune the value to achieve that approximate completion time for you application and environment). This is another reason why you should probably store hash settings in config, to make it easier to tune the encryption for your application without having to actually change your code. 

I think some simple code clean-up would go a long way here. You have a number of nested conditionals that simply don't need to exist. For example: 

This may seem trivial, but this is more about getting the right mindset that code branches are to be designed away if possible, as the more code branches you have, the harder your code is to test and the more buggy your code is likely to be. 

It is unclear to me how you code differentiates a subscribe action from an unsubscribe action. It would seem like regardless of which button was pushed, a subscribe would attempt to be made. 

Consider enforcing file size upload limits through PHP INI settings either in server configuration (ideally), or at script runtime (if for some reason your limit needs to to change for a certain script). Ideally, you want to block a request with oversize payload as early as possible in the request handling process (this ideally to have it enforced at a web server level is ideal). 

Why is this hard-coded here? I would think this should, at a minimum, be a property on the class, if not derived from configuration. 

The code around query execution only considers happy path. What happens if insert fails? You do nothing to handle this. What happens with other rows that might have already been or will be inserted as you iterate in this loop? Does this booking need to happen transactionally (i.e. all inserts must succeed before committing change)? 

Your public methods really do nothing to validate that the arguments being passed are suitable to be working with. You should never get so far as to prepare a statement on the database (a relatively expensive operation) if you have not validated that you have reasonable values to work with. I would suggest you add guarding code at the first few lines in this methods to validate the input and fail with or similar before you get to executing method logic. Fail early and fail loudly. 

One of the biggest things you can do to clean up you code is to simply remove the unnecessary if-else blocks. In many cases you have a return inside the first conditional, which means there is no reason for an else block at all. For example, you code rewrite like this: 

I would consider taking this functionality and building a class (or function) around it (perhaps or similar). You could get this to something like: 

This would allow indexed - O(1) - lookup by country code. The class should probably be called or similar, and have method. A class named should probably be a red flag that you have really just built a function. If you want a class for this, make it a class and name it appropriately. This class is where you should hold any methods to validate a country code as representing a valid EU country. 

I like you use of . You might want to consider here instead. This might allow you to more easily decouple the validation configuration/definitions from the actual validation step. For example, if you add a new field down the line, you can just change validation config instead of adding a new line of code to check that new field. This would also allow you to potentially skip the steps where build an array of errors. Usage: 

If you are going to use doc blocks (a good thing) you should use them uniformly across your code, not just certain methods. 

Be careful about exiting the script after you have made your JSON output. There way your code is written now, you might introduce spurious output after the code is executed. A god example of this is on validation error condition. You should immediately the script after rendering the JSON. There is no reason to keep evaluating code after this point. That also totally eliminates the need for the entire block that takes place after it, simplifying the code. 

Not sure why you are using named function here. I would think typical Angular syntax (except for perhaps case where you are trying to define stateful filter), would look like this: 

Consider making this a class constant. I am guessing there is no reason that an inheriting class (assuming one model class be DB table), would ever need to change this value, thus consider making it immutable. 

I guess I am not really seeing what value this class adds above and beyond what and related classes give to you "out of the box". If you need a method or two to perhaps format a date in some specific way to be compatible with Amazon, then perhaps you could extend the base class with these methods. Even then, I still question the value of introducing a whole class to, in essence, do these sorts of trivial things: 

Why is there method on ? I would think any inheriting controller would be built with an explicit understanding of what model it interacts with. So rather than do things in inheriting class like: 

I would consider getting all nodes using (note wildcard usage). I would also consider simply cloning the object. That could simplify to this: 

You have no validation on your public method parameters at all, either via type hinting or checking the passed values themselves. An object of this class can easily be put into a bad state, something I think would be critical for something as important as the response sending mechanism. 

Also, if you consider making favorite into class as suggested, you can clean up your code like this: 

Generally speaking, I don't find the naming of the library and classes as "Controller" to be appropriate. In modern programming, "controller" has it's own specific meaning that is unrelated to what this library does. More specifically: - is way too generic to convey meaning for what this class does - read and write files. - Use of or as prepended identifier to your class names to tell whether they are designed to be used in static or concrete context seems superfluous. Shouldn't the exposed class API make this readily apparent? 

Also I question the JSON structure. are meaningless property names, giving you an unnecessary level of nesting, so if you have control over JSON generation, you might consider an array of object like: 

I would enforce uniqueness through unique indexes in the database table itself, not through making and evaluating a series of SELECT statements. This allow you to GREATLY simplify your UPSERT operation to a single query. That might look something like. 

Should your hash string validations around first byte and overall length live on method instead of ? I don't know why a potentially private method like should have validation within it. Perhaps these could even be encapsulated into their own private method. This would also remove the odd exception throwing/swallowing pattern mentioned before. So you could have something like this in the verification method: 

And perform some of the basics around building the request and response objects Imagine a template which looks like this: 

I worry about writing to as you could clobber any other classes that had been applied to a slide element. Since it seems like your code is really only worried about adding/removing , consider accessing on the element to add/remove this class only. 

With regards to using , I would get in the habit of always using this for animations, assuming that your are primary targeting modern borwser that support it. You can use or as fallback for those browsers that do not support it. This arcticle does a good job explaning high-level use of as well as give sample polyfill (fallback code) for borwsers that do not support it. 

I think this is a good case for refactoring the ajax call out into its own method. I have given some suggested changes in the code below. My comments are inside comments. 

Even for a case of using long sessions (or true browser-controlled session lengths as you are doing), you should regenerate session id at regular intervals to mitigate against session fixation/hijacking. This means you have to start managing a timestamp in the session data. There really is no way around this in PHP sessions. I know one of your stated goals was to not have to get into this, but there really is no alternative if you want your sessions to be secure. Please read the "Session ID Regeneration" section of the second link given above. There is a pertinent quote there: 

I think you need to consider either passing all needed dependencies (id's, voter, vote type, etc.) to the constructor, or you need to validate these values are set before performing database queries which rely on them. I do question why caller needs to provide an id for inserting a vote though - is this not autoincrement field in table? Without understanding how you are working with these objects in your application, it would be hard to determine which approach might be best. If you are treating these dependencies on the objects as immutable during the lifetime of the object, then passing dependencies to constructor probably makes the most sense. If the dependencies can change during lifetime of the object, then perhaps rather than a bunch of individual setters for these dependencies, you provide a single method to set the dependencies on the object where you can perform all validation necessary to make sure the object is set-up properly to work against the database. 

This line of code is way too long, making your code hard to read. When you find yourself passing this many parameters to a function,then you should probably be questioning if either the function is trying to do too much or whether those parameters might better be passed in a a different way. Here, for example, perhaps you could build and pass a object or similar that would store all the information needed to configure a user in the system. This would also allow you to make sure the dependency is set up properly before this function is ever called. Right now, you do nothing to validate that your are getting expected parameter types and value ranges before just going ahead and trying to work with the parameters. It would be better to validate you have have everything you need to create a user and returning an exception to the caller if the dependencies are not met. Since is an object, you should specify type hint for this parameter. 

You may also consider building this as a proper jQuery plug-in or class (though not shown in my example above). This would allow you to better encapsulate state of the slider functionality, such that state would not need to be held in main scope. This also potentially makes this simple functionality re-usable in the future - just pass in config for DOM selectors, class name(s) to apply (i.e. ), interval time, etc. I would rather see a usage pattern like: 

How is that handled with your routing mechanism? Oftentimes you may need to look at a combination of request method and URI (not just request method) to determine an appropriate controller and/or action on controller to call. This ties back to my suggestion on having a request object (which would store request method) that can be passed to a dedicated router class. That router should be able to inspect the combination of URI and request method to determine what controller should be invoked. Some routing strategies may have you just looking at first URI segment to route to a primary controller, which may then invoke subcontrollers to handle more complex routing/method requests, where some routing strategies may have router actually hold all controller/subcontroller mapping logic. Which approach to take may depend on how you want to use the framework and your personal preferences, but just keep in mind that you will inevitably encounter this kind of use case and likely need to build out more robust routing logic. 

Why do you need to have both and as parameter here if your DI framework has already injected a into for you? Do you now have two different objects in play in the controller? 

On PHP side: I would strongly consider using PHP's and related classes (in this case specifically, ) rather than the procedural functions. Over time I think you will find them much more powerful and flexible in usage. This also can help move you away from the concept of resetting your default system timezone, which I don't think you want to overwrite here, but rather use as fallback. There may be other parts of your code that do things like insert records into database datetime fields or something like that where you want to use a consistent system time, not the end users timezone. I don't think you have an appropriate use case for changing this setting (at least from the context shown). Let's show an example of how this might look using : 

As pointed out in other answers, your data validation is a little odd. Consider using something like PHP's filter_input_array() which can give you more robust functionality in validating and sanitizing your input. There are also a number of PHP libraries out there that do this exact thing. Consider using one. 

Then it would seem the ##.## number is behaving somewhat like a key to determine the parsing template. So shouldn't your "template" use these key for lookup like: 

You are making wide use of type-hinting, which is a good practice, but you perform no other validation for parameters passed to your public methods that are not able to be type hinted. 

For better depth of knowledge around securely handling sessions, I would recommend you read and understand the PHP sessions "basics" documentation at $URL$ In particular, I would point you to this section: 

Get in the habit of using parametrized prepared statements when querying the database in like you search by user id query. Right now, you are seemingly doing nothing to sanitize your parametric values for use in query. 

You should cache jQuery selectors that you are going to be using repeatedly, rather than repeatedly querying the DOM. 

You might consider exposing a function on your collection since you are providing functionality beyond basic iteration. This would allow you to do things like perhaps return new index value to caller on . 

Your public methods are very fragile, as you are not really validating the parameters that are passed (either through type-hinting or in-method validation). There are many cases where one can get to actually making the (relatively expensive) database call even when bad data is passed. Your code should fail early and fail loudly when dependencies or expectations around data types/values are not met. This again is part of the problem in working with wrappers. You now have to introduce validation logic in your public methods vs. just having all that logic for working with the database in one place. Take my code example above. Here you can clearly see that there is no way for a non-empty string to be used for the query, but when you introduce this extra layer of a wrapper, from the viewpoint of the wrapper, you don't know where all these methods will be called, so in order to not have a fragile class or method, you need to add validation. You have added complexity to your application without adding any value.