It seems to me you could greatly benefit from storing your dictionary reversed. That is, if you create, just once, an auxiliary dictionary as: 

Project Euler says I solved this one about seven years ago, but that code is nowhere to be found. It wasn't all that hard to figure it out again... It should be obvious that performing several million factorizations is going to be very slow. Very often in Project Euler the solutions have to do with reformulating the problem in a way that avoids the obvious, slow operation. In your case, since you have contiguous ranges of numbers, it is relatively easy to figure out how many of those are multiples of a certain number: 

Further optimizations would include allocating a single buffer of size at the top level function and pass it around to avoid repeated allocations, but that would probably take away from readability, so am skipping it here. 

Sure you could do that, though bear in mind that as of jQuery 3 "only is recommended" and will still work but is deprecated.2 

If you wanted to use Underscore.js, _.filter() and _.includes() could be used to filter out any object in without a value for the value property contained in . Expand the snippet below for a demonstration. 

In general, Javascript developers can subscribe to the readystatechange event as you have done, as well as use to subscribe to the DOMContentLoaded event: 

Functional approach to iterating over the headers In the snippet below, the headers are iterated over using . That way there is no need to index into the array of population headers. document.getElementsByClassName() returns a HTMLCollection interface (different than an array) so the spread syntax (i.e. ) is used to put the elements into an array. 

I can't claim to be familiar with Electron, but after looking at the documentation and an example on github, it appears that an electron convention is to use / 

If you don't like global variables (which you really shouldn't!), you can create a static variable by making it an attribute of the function: 

That was tricky... Actually, your blocks are pretty irrelevant, apart from getting the right slice of to do the with the corresponding , so I went the easy route of creating an array as follows: 

Notice the micro-optimization of using the second argument of , so that the string is only split at the first occurrence if there is more than one. 

Note that I'm keeping duplicate accounting on scheduled_nodes, both in and . This is to have the ordering of the FIFO queue and the fast membership check of a hash table. You could get rid of by checking against in , but you will again get quadratic performance, not a good thing. 

I am interviewing myself these days, and I think I am developing a good sense of what interviewers are after. Regarding your code, here are a few things I would have done differently: 

One approach to handle that would be to iterate over the elements using array.reduce() (so we can conditionally add values to the output array), counting the occurrences of each element, then in a second iteration, only return elements where there are 2 or less occurrences of that element. One main advantage here compared to the original is that there is not a nested iteration... the complexity is \$O(n)\$ instead of \$O(n^2)\$. See the example below. I wanted to compare with jsPerf but that appears to be down. I did find a similar system: measurethat.net - see the comparison here. 

Sets the inner HTML of the unordered list tag to a text string. That is technically unpermitted content for an unordered list. Perhaps a better solution would be to have a separate element for the error message. P.S. Here is the output from that AJAX call using that image of Tesla, so you could fake it now that the key is invalid: 

In Python that doesn't seem to pay off (performance wise) until is in the many hundreds, but I find lovely that, the way that code goes, is always exactly divisible by . Figuring out why is left as an exercise for the reader... 

If you are going to generate 10 times the amount of data needed, there's no need to keep it around. You can allocate the array you intend to return, and overwrite it several times. Similarly, you don't need to precompute and store all the error terms, but can generate them on the fly as you need them: 

It may be marginally faster than your code, but I think the most important improvement is in compactness and readability. 

Your code is very hard to follow. Your variable names tell very little about what they are supposed to be, and there are mysterious things, like why is a 2-tuple, when only the second value in it is used. The very long lines make it hard to follow as well. It is also not obvious to figure out which of the values in every item is the weight and which the value. So while I am not really sure of what that code is doing, you only need to keep the full 2D array in memory if you want to backtrack over it to find out which items you should take with you. If you are only interested in knowing how much value can fit in the knapsack, you only need to have two rows of the array in memory. And that can be implemented much, much more compactly than what you have come up with: 

Redundancy is eliminated. It is wise to adhere to the Don't Repeat Yourself (A.K.A. 'DRY') principle. Not only are the calls to redundant, they appear to be identical within the two files. If you really needed such functionality in multiple files, it might be good to abstract it into a function, perhaps in an included file, and call that function. That way modifications can be done in one place instead of every place the functionality is needed. While most user agents tend to have the browser name first and then the platform, if the platform happened to be at the start of the string - e.g. "" then would yield , which evaluates to . Note the warning on the PHP documentation for : 

jQuery - just for AJAX requests? It appears that the only jQuery functionality used is its AJAX wrapper (i.e. ). If that is all jQuery is used for, consider using a different technique like the fetch API (read this article for more info). 

This of course has \$O(n^2)\$ complexity, which is rarely a good thing. A much more efficient implementation running in \$O(n)\$ time would do something like: 

The key insight is that removes the least significant set bit from , so you want to return the value prior to the iteration that removes the last set bit and hence makes zero. There's not really much of a point in this type of bit twiddling in Python code, but if you ever have to rewrite this for a lower level language. e.g. C, then writing the whole algorithm in terms of such simple elementary expressions typically has a big impact on performance. 

Your logic seems solid, but there's a couple of things I would do differently. One obvious improvement is that you don't need to hold the full dynamic programming array in memory: it is enough to keep the previous row and the one you are working on. It also leads to a pretty neat handling of edge cases, as you'll see soon enough. I am also a little weary about the approach of your function: relying on a string representation just doesn't feel right. I also frown at your adding both the forward and the reverse paths to your banned set: the only reason you can use DP in the first place is because you can only move forward in both directions, so you might as well take advantage of that knowledge, and store only the direction you will eventually find. A possible implementation of all that could be: 

As you can see above, I switched the logic around so that the delay is added when has a value, and used that instead of , though if you wanted to set that property on the instance you could do that... Functional approach One could also use Array.forEach() instead of using the statement. While it could slow performance (due to an extra function call on each iteration), it could cut the first couple lines out (e.g. assigning ). 

And Matt's jsbin includes an ES2015 example, which should be fsmiloar to OOP users in other languages like C++, Java, PHP, etc. 

Validation For validation, filter_var() can be used for validating and sanitizing inputs- perhaps you already knew that. Repeated code For a block of logic like this: 

I know this isn't a large O.O. application but it would be advisable to separate the functionality that updates the DOM into a separate function - which would be in line with the Single Responsibility Principle. In order for that to work, the promises will need to be returned from the generator function and the recursive function. See the updated code below for an illustration of this. Updated code 

The first few are probably OK, but you really shouldn't be publishing solutions to Project Euler problems online: don't spoil the fun for others! This said, there are several things you could consider to improve your code. As you will find if you keep doing Project Euler problems, eventually efficiency becomes paramount. So to get the hang of it, you may want to try and write your program as if being asked for a much, much larger threshold. So some of the pointers I will give you would generally be disregarded as micro optimizations, and rightfully so, but that's the name of the game in Project Euler! Keeping the general structure of your program, here are a few pointers: 

As pointed out, top-down recursive approaches are almost never a good idea when it comes to Fibonacci numbers. Consider the alternative iterative approach: 

Or you could use the fact that string literals next to each other are automatically concatenated, in either of these two forms: 

Duplicate function Your code has two functions called . The first gets overwritten by the second, thus making it useless. Make sure your function names are unique. 

Output from keys Because of the changes above, the keys are the pairs so use list() and explode() to unpack the pairs. 

Bear in mind that IE and other browsers don't support the spread operator, so if you wanted a different syntax supported by those browsers, you could use apply 

You can start by making those in-line functions methods. For example, (the click handler) can be a method that accepts a click event argument: 

Caching DOM references I agree with kingdao's answer: DOM references should be cached, though they should be cached once per page load instead of each time the function runs. So in the example code, and should be declared outside the function, and inside the DOM-ready callback (i.e. ). Also, the names might be a little misleading. For example, the jQuery function (i.e. ) returns a jQuery object referencing DOM elements. Thus an appropriate name might be instead of (though you can use the if you want). Also, cache the currentYear elements in a constant too. 

This multiplies all of the "columns" first, then divides by each "column" to get the result of multiplying all but that column, which may be problematic depending on your data due to potential overflows or precision losses. And it breaks completely if there are any zeros in the input array. If you can get rid of the division (this is a typical interview question, by the way), then all of those problems dissappear. And you can do it with relative ease, by cleverly storing accumulated products from both ends of the array. then multiplying them together: 

To be honest, I was expecting it to be faster, but do notice also how the time scaling is roughly linear, as expected. 

So each of your recursive calls is creating a copy of half of the list before passing it down, which is not the best use of time. I think it is a much better approach to pass around the whole list, which simply passes a reference to it around, no copies involved, and a couple of indices marking the range you want to work on: