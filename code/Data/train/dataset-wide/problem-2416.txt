I think this snippet should give you the idea. General stuff You should run a linter (i.e. flake8 or so), that would give you tips to help you make your code more readable. Nitpicking example: comments should be placed on a separate line when they're long enough. Global variables are generally discouraged: you should redefine to take as a parameter instead. While we're at it, you could read the file only once before calling , and pass it the users array too ! There are lots of small improvements that will reduce your script's complexity. I probably haven't them all covered but I hope to get you started. Don't hesitate to ask for clarification, cheers ! 

Having factorized this is a good idea, but you lost something on the way: you don't pass any context to this method that could help understand where the error is (except the document, but that's too broad). -> Add context to your exceptions, you (or your future users and contributors) will thank yourself later for it ! Complexity Your code is sparsely commented and not really easy to understand, you could sprinkle some comments there and there. You could also split some of the more complex sections into smaller methods. 

Users list I think you should completely bypass the shell script and use Python instead. We're in luck, the second example in the csv module documentation is about parsing a file. So you could use something like: 

I definitely wouldn't say that's unreadable ! But there's some room for improvement, mostly style I think. Here's what I came up with, in no particular order: Leading underscores in names Leading underscores are supposed to be used to indicate that the object is "private", although that has no real meaning in Python: it's just a convention that says "beware if you use this, it might change its name or its implementation and is not part of the public API". -> You should remove them at least for method argument; they don't add any meaning here and that does not help readability. source Recursion with nonlocal variables In , you use variables from outside the function's scope for recursion purposes. I would advise against this, it's not very Pythonic, and it's generally better to avoid side effects that make the code harder to understand. -> Just pass them as arguments to the recursive calls. Class/instance attribute confusion In , you declare as a class attribute and manipulate it like an instance attribute in your methods. That can cause a lot of confusion especially with mutable objects as changes will be reflected upon all instances of the class. -> Declare instance attributes in . 

If you want to reduce the lines of code (with a slight negative impact to performance if this function gets called a lot), you could do this: 

Start from the end and work your way back, that way once you've found one palindrome you're done! You only have to check half of the digits for equality. We can shave off some time by avoiding / 

My PowerShell scripting skills are pretty poor, but I've managed to hobble together got this script: 

If you've setup a proper navigation property you could write your query a bit more cleanly, although I doubt this would run any faster, since this will still translate to an in SQL: 

The one thing that really stands out to me: you don't need to convert the boolean result of to a human-readable string, then test the string. Just test the result directly, then convert it to a human-readable string. 

You should probably get into the habit of using format strings rather than string concatenation. It's generally better practice. This next bit is more a matter of style, but if you don't need to keep as a state variable, I wouldn't keep it as a class member. You can define it as a variable within the method and pass it in to instead, like this: 

Any other exceptions it throws indicate a invalid parameter or bad program state. You probably don't want to just ignore these errors and move on as though nothing has happened. I recommend you just do this: 

1: Of course, in these examples, the values are still hard coded in one place, but precisely how you generate the list is unimportant. 

NOTE: as far as I can tell, there's nothing limiting (or ) to be the same in all grouped dramas; each drama could have a different . Here's an alternative that includes the teacher in the grouping: 

How can I clean up the process for formatting the arguments string? It seems pretty ugly at the moment, and if I have to add any more parameters, it's just going to get uglier. Is there an easy way to convert a list of parameters to a string that's suitable for invoking another function? Note: Simply passing in the parameters as a single string (e.g. ) doesn't really solve my issue, it just moves it back one step. I'd like to create the string within itself.