Seems like everyone takes the path of least resistance. Better to immediately satisfy my boss and suffer a poor review later, than to address what most people would see as unfair. One solution, is to just start writing better code and stop using your boss's uninformed time demands as an excuse. By definition, good code has to be shippable, but in your case it may be a little behind in schedule. That cannot be an excuse not to ship. Hopefully, as the code base improves, he will see the benefits. There is a risk of punishment if the project becomes too late. A second option, is someone needs to sit down and connect the boss's choices with the technical debt that the team is taking the blame for. He may not see this bigger picture, so you can either draw if for him or suffer the consequences. Find a specific instance where not doing it right the first time made a subsequent request take even longer. It's difficult to claim a bug was introduced because you didn't have time. More objectively you need to indicate that proper testing wasn't being done. There's no guarantee he will make any type of rational decision. If he has evidence the team is slacking off, that will get used against you. It may take the loss of a key member to get the point across. 

Make sure you get your work done. Early on in a job, you may not have a lot of deadlines, but things will pick up quick. Does this information eventually get shared with others? You could be wasting your time. Do the other people welcome you into the converesation or do they seem bothered and feel like you are intruding? 

We all need a kick in the pants and this is yours. Start making time. Get in shape. Eat better. Go for a walk. Take yoga. Do anything that will help you squeeze a few extra hours a week to learn new things. You will be able to pick up on new technologies quicker as you continue to improve your skills. You won't need as much time. If you still can't do it, that's another career choice question you may need to consider. Update: All of this is predicated on the OP needing to explain this in an interview. If someone wants to take time off, that's fine with me, but be prepared to suffer the consequences of finding another job. It may not be a problem. That's what risk vs reward decisions are all about. Personally, I've never felt the need to take this much time off and I have made major career changes. 

I wouldn't offer any specifics in an email. Without a face to face conversation, whatever you say could be taken negatively. I would email either Sr manager or preferably the HR department and suggest they conduct exit interviews. You have a lot of feedback to offer and they "should" want to know about it. You want to develop different kinds of software-it is what is-no hard feelings. Not sure how your boss's dishonesty affects the company, but there seems to be some things in place that prevented you from saying something while being employed. Maybe senior manager instructs him/her to lie? Regardless, emailing people you have no previous experience communicating with is very difficult. You don't want to be seen as being out to get your boss. 

Technical people get caught up in this type of thing all the time. Stop including details in your explanation. I know he asked what was wrong, but all he hears is "blah, blah, command, blah blah target, blah, blah error." You're either still working on it or it is completed. Doesn't matter why to him. Try to include some time frame when you think it is ready. Some people will ask, "What is the problem?" but don't get sucked into it thinking they want details. You're getting an error. That's it. Also, you could probably remove the detailed technical example from your question to get some practice. 

Based on what you've presented, there is no going back. Development will be done in the new environment. As a manager, you need to face reality. Regardless of what you think, "they" were more productive in the old environment. It's just a fact. Since there is no going back, you need to make sure they become proficient in the new environment. Have them work with others who seem to be excelling in Windows. Establish an acceptable level of performance and consequences for those who cannot meet them in a certain amount of time. Hopefully, they'll take you seriously and improve. What you're willing or can do if they don't is for you to determine as the manager. After all, that is your job. 

I've been asked in a couple of interviews what year I graduated from college. Of course, I think an offer should be made contingent on showing proof of degree with transcripts that will indicate graduation date. One of the jobs I landed, so it wasn't a big deal. That was several years ago. I didn't get the most recent one. Personally, it was a sign the person didn't know what they were doing and probably did me a favor. There were several indicators that I would not like the job. Is this a form of age discrimination I need to look out for in the future? EDIT: Just had another one like this. I usually list relavent experience going back ~12 yrs to keep the resume length shorter and was asked if this was my first job (refering to the oldest position listed). To top it off, the person refered to me as "... a young man like you." It was a phone interview. 

I think it is your responsibility, but you can allow your new manager to decide whether or not to consult the former manager. You may not be aware of the dynamic between them. A current boss who worries about the former manager interfering, may want to avoid this, so ask for a 1on1 meeting and suggest that you discussed this with the previous manager and now want to discuss it again. Be prepared for the new manager disagreeing with the previous advice. The key for you is to grow professionally, but you also need to make sure you're in synch with your new manager's expectations. If you don't want to change your current path, what are you going to do? You may want to wait and get to know the current manager so you know how to approach this. 

I think it is reasonable, but you may find the employer has reasons other than just the cost for 3 months benefits. Their insurance providers may have established these requirements. If they decline, ask for an increase in salary or some sort of signing bonus to cover your 3 months of expenses (COBRA?). Everything is negotiable, but it is not the best negotiation to ask for a significant increase than what is being offered without being able to justify it in return. In this case, they know they're competing against your current employer to get you to move to their company, so don't feel like you have to adhere to what the current market will bare. Everybody doesn't get the average salary. 

If this company considers this inappropriate, you probably don't want to work there. As programmers, we often compromise our standard of "good enough" by external constraints, so why impose this on yourself? To me, all programmers or any other professional who creates and fixes things for a living, should have a bit of an aversion to mistakes, but not to the extent you paralyze your productivity. 

Leading a team of collaborators has more similarities with managing a team of employees than differences. 

I have no idea why you would indicate a top end of 75 and someone would even consider mentioning 80 in any way, shape or form unless they're wiling to consider paying you more. Like all salary negotiations, you may be asked to justify your counter-offer. Is it possible the compensation lags in some other area or the workload and requirements are more than you were initially lead to believe? If this recruiter works for the hiring company, they need to learn how to keep their cards closer to their chest. A good head-hunter would be asking for 80K for you. 

Check and go with the company policy. Usually, companies want you to have a laptop so you can work/take care of company issues on non-company time. As a trade-off, they don't care if you use their stuff on your time for personal reasons. My company reimburses people for their personal cell phones because they may occasionally want to call employees on it during off hours. It's a compromise that is agreed upon by both parties. Be open, honest and upfront. 

If this is a 9-5 business, there may never be an advantage for the employer. After hours requests could be addressed: 

Other than this, you may want to get some writing examples or rely on the correspondence you get during the interview process: CV, cover letter, email. Personally, I think your approach is only a part of an over-all solution. Documentation becomes important when it is evaluated and relied upon. Someone should be doing a periodic review of the documents. The objective should be whether or not the documents were created but are they useful to anyone else. When I create instructions for a particular task, I observe someone reading and executing the instructions and ask that they sort of "think aloud" so I can tell if I've given enough information. I take notes if there are any hesitations or questions. Determine the purpose of the documentation and have an effective way to know if they've met that objective. Writing takes practice along with getting valuable feedback. When the consumers of the documents (or someone to simulate a future user), indicate which parts don't make sense, the writer soon learns how to communicate more effectively. It would be sad for you to hire someone who is very good at writing documentation but over time they discover that you neglect, fail to acknowledge and give them no credit doing it. Also, they need to know that you understand the time commitment and won't pressure them to complete other tasks with unrealistic time limits and then punish them for not writing adequate documentation. 

Know the criteria for getting a promotion - no one here can tell you what that is. Understand the current environment. If times are tough, many people may not be getting promotions, so make sure you can strongly back up your claim. You may want to wait for a better time. Keep track of the work you do especially the extra things. If rejected, ask how you can improve, how will this be measured and when can you be up for reevaluation. Be prepared to negotiate (sallary or other benefits) and decide what you're going to do if you get turned-down. How you handle this rejection could impact how the manager looks at you next time you ask for another promotion. 

If being interrupted was the main problem, you can schedule a time when the TL could meet with you and review all your questions at once. This may not be as efficient for you, but you just have to work through it. It could mean shuffling your work schedule. Startups take risks. They may have underestimated the amount of help needed or the availability of the TL to be available. There's a big difference between freeing a one hour block a day compared to being interrupted 12 times even if they're just for 5 minutes. Even if you're a senior developer, it's important to ask how the team works. Where and when do you ask questions? Have they cleared time for someone during an introductory phase of hiring? You can tell during the hiring process that they're over-whelmed and barely made time to do the interviews. 

You may be "just doing your job" but the way you do it is important. Don't take this for granted. Here are things you could mention: 

How you go about this should have been addressed by your supervisor since I doubt he/she wants to be involved in the planning of each task you're given. Estimate how long it will take you to complete in the context of your current work load. Submit this date to the requestor. You will either get a confirmation or another request for an earlier date (possibly with or without a reason.). You should have some sort of arrangement with your immeidate supervisor on how to prioritize your work. It may not be a formally documented process, but just what you've picked-up over the course of time. This can vary by who/what department made the request, the project, time of year, etc. You can only base this on the information you have and how you see it fits into this model. You may have to get permission from another requestor to back up their time estimate. Avoid giving the impression that you push everything back and get nothing done on time or to avoid certain types of tasks. 

What qualifies the people starting this venture? Previous experience, skills, etc. How do they know someone will buy their product? Have they done any testing or is this a feeling about their great idea? Not good enough. Has anyone in this company have any experience selling to this market? Fortune 500 companies don't buy 6-figure software packages off the internet after a 90-day trial period. Get a lawyer and get things in writing. If they object, something is wrong. 

Forget the idea that you're going to be able to make them stop calling you. I realize you feel at a disadvantage negotiating on the phone, so continue to do both. You don't have to make decisions on the phone. When you're given a new offer, you're always going to take time to think about it. You can ask for a follow-up email just to make sure you understand their offer. The final offer is going to be in writing and you will always get time to think about it and counter-offer. I don't think you've taken the right strategy to adamantly oppose giving an initial salary request. You can offer a minimum that could change based on the other benefits. There should be no concern that you can't always ask for more. The amount they may be willing to offer for a given position is not as broad as you think and will have a definite limit. If a company approached me, I may be more insistent they make an offer, but when you contact them, you're the one looking for a job. 

Work with the company management and determine how much over-time is too much. Track it and make sure your people do not burn-out. Adjust your planning. Your situation has proven you cannot predict the projects that need to be done at the beginning of a week, so stop thinking you will always have a full day to dedicate to them. Things happen and other projects with more priority seem to always occur. An alternate to #2 would be to plan the full week with the given projects (ABC), but make some notation/provision that this is predicated on no other projects with a higher priority being added. In other words, the plans to have ABC done by Friday get erased and replaced with doing XYZ and maybe A. 

Have him do nothing/code on his own, but not for production. Have him sit and watch you code (sort of like pair programming, but not really). Take the time to do a code review of your code, so he can learn more. Let him write code, but only put into production after you've reviewed it. Just let him write as much production code as possible and take your changes. Send him to a training class. 

If you don't feel slightly uncomfortable, you probably aren't asking for enough. That's not the case for everyone, but generally a good rule-of-thumb. Salespeople make more money because they ask for more. This could be due to being experienced with negotiating prices and fees on a more regular basis. You've made every effort to contact them. People get busy; it happens. Don't be surprised if they accept your request, but now you have to wait for another contract/agreement to be rewritten and another due date for you to sign. What you're doing is a good thing. Get use to it. 

In a perfect world, an employer shouldn't hold a grudge against an employee who only wants to better thenmselves. They should also recognize they are not in a position to offer the greatest job. Most don't think this way and will hold it against you so, don't expect their help. 

First, you have to decide how much of the know-it-all's expertise you need compared to everyone else's. Then you'll know how much risk you can take to push this person into some more socially acceptable behaviors. Privately let this person know there is a problem and without a willingness to make some changes, he's going to suffer some consequences. He is going to have limited involvement in projects, planning, decisions, etc. Don't expect the change to happen right away. Start with small steps. Suggest he start letting others answer first without providing any negative feedback (at least not right away.). Encourage listening for other ideas he agrees with. The rest of your team needs to learn to stand up for themselves if they want their ideas heard. They can't just hide behind the "know-it-all" as an excuse. The goal is to provide good solutions to problems. That's their job. In a team environment, you have to be willing to standup and defend your ideas if they don't match everyone else's. As the manager, you need to make sure that everyone understands that the best ideas aren't the ones shouted the loudest, but those kept in silence, have no chance at all of being heard.