You should also also have two blank lines between functions, not one. You should also read PEP8, Python's official style guide. 

I also decided that defining a base class with methods like the character would be useful if I ever need to create entity-like creatures/NPCs. 

Properly opening files The generally accepted method for opening files in Python is to use a contest manager, as seen below. If you use a context manager, the file is closed implicitly, and you can guarantee that the file is closed properly if the program unexpectedly exits: 

Properly opening files Just using , and assigning the return of it to a variable like this is not something you should get into the habit of doing: 

@janos already covered this a little bit, but if you want to use the built-in used in Processing.JS, I'd do something like this: 

To use this function, you supply a list of positions in the format . For example, in order to render the dots on the 6-dot side of a die, you'd do this: 

First off, I'd suggest that you read PEP8, Python's official style guide, on how to properly style your Python code. 

There's a lot of code here, (258 lines), so I'm not going to give a full review, but rather, a few suggestions on what you can improve in general. 

This eliminates the need to call , and improves code readability as well. In the future as well, if you ever plan to add more buildings, it'll be a pain to edit this script to include the new building names. Instead, you could declare a public variable which allows you to drag and drop the model prefabs instead: 

C++ does not have any type called . The size type should always be method is another violation of the complexity contract. Vector is supposed to be O(1). It should simply swap the pointers. That's far from what would do in C++03 (in C++11 it could do the right thing if you defined the move constructors, but you didn't). Furthermore should be overloaded for vector to call the method. Yes, you are allowed and sometimes required to overload functions/specialize classes in for types you define and this is one such case. You correctly use in , but you fail to do the same in . The special condition for in is superfluous. It is not allowed to pass non-deferrable iterator (end or invalid) to . Your returns useless element (but see 1. anyway). You return the value of the final pop_back, which returns the last element. If you deleted any other element than the last, it's not the one that was just deleted. Completely useless. You shouldn't be returning anything anyway. Const correctness failures. A method should only ever return pointers and references to . Standard collections have and and all methods that return iterators (, , etc.) have non-const overload returning and const overload returning . If you use plain pointers (which is legal, the iterator concept is designed so that pointers are iterators), you should define to (const applies to the part before it, so this is the correct syntax; even in C). and return dangling pointers (provided you fix the memory leak in destructor). Another instance of UndefinedBehaviourâ„¢. The returns a new instance. By value, which is inefficient, but legal. However the return value is temporary and it will only have to have / called on it and than it will be destroyed at the next semicolon. When you fix the memory leak and actually free the memory in destructor, the returned pointers will point to unallocated memory. and don't return valid iterators to invocant. The reverse iterators have to point to the container, not to a copy. Since you can't use plain pointers for reverse operators, it's rather a lot of work to define them. Boost has a generic implementation You are missing most of the required typedefs. There should be , , , , , , , , (should be ) and (should be ). And , which is next point. You should be using allocator instead of and . Allocator abstracts the memory allocation, wraps the funny placement new and explicit destructor call syntaxes and makes the allocation and construction separate actions as appropriate for likes of vector. The default allocator, uses global operators and for allocation, but users may want to provide special allocators. Also the allocator will properly throw as will and (except on non-conforming platforms like Microsoft Windows) if you use them directly, but when using , you have to check for NULL and throw on allocation failure yourself. 

Just let jQuery do it, that's what it's there for Now that I've scrolled down and see that you're using jQuery to make the request, I'm going to suggest that you ignore all my other advice and just let jQuery do all this for you. You can add a second parameter to the function which is an object of data that jQuery will turn into a query string for you: 

The benefit is that you don't have to wait for the DOM and you don;t have to loop each element and assign a whole bunch of event handlers.. Your current updated vanilla JS code is duplicating that event handler function in memory for each and every element you apply it to. That will eventually start to eat up memory. You should have been using instead of all along, but you can still do the same with vanilla JS.. Consider this re-write of your "DOMContentLoaded" function.. 

There is no built-in way to do threads in PHP but that doesn't mean they're not doable. Here's a class I use frequently to execute long running tasks after the server has responded to the request. Typical use looks like this: 

Ideally you should separate your markup from your PHP as much as possible, but when you have to do something like that in the middle of your markup, colon notation is usually neater than bracket notation. 

Edit... you're not closing your table row in the loop either. I'm not gonna bother updating the code snippet. 

Superglobals I cloned your repo and it looks like you've already taken my advice about passing in the superglobals instead of using them directly from your methods. Formatting I would have also commented on the formatting but you've also significantly improved that since posting the question. Cheers! Commenting The next good habit to get into is commenting, which s just as important as formatting and entirely lacking in this project. You should always put a short comment above every method explaining what it does, what parameters it takes and what it returns so you (and people maintaining the code in the future) don't have to read the code to figure out what it does. I see you're using NetBeans. I Like NB too. NB makes documenting your PHP and JS classes and functions very easy. I looked and I could not find any good documentation because I cannot remember what it's called, so I'll just explain the features as best I can. Auto-commenting Pro Tip Netbeans will actually do most of the work for you - place the cursor on the empty line just above the start of the function and type and hit the enter key. Netbeans will create the rest of the comment including the parameters and the return type (if there is one). This is what Netbeans generated for your loginAction method. 

I'd just add a newline to the end of the output string to not annoy the user when the program completes/fails, like this: 

Remove commented out lines of code. If you aren't using them, there's no need to have them. They should be removed. Finally, add some more comments to this. Specifically for functions, and above hard-to-read blocks of code. Your code will be much easier to read after this. 

First off, after doing a little reading, the style for ruby seems say that you should indent your code by two spaces, not four, like Python. Secondly the line can be shortened to this: . Rather than using a loop, and a variable, , as an iterator variable as shown in the below code: 

I know, that you know, that your code is messy, but I'm still going to give some tips on your coding style. Here are a few tips I have on what can be improved there. 

First off, without the background code for this, it's a little hard to understand what exactly this code is doing, but I'll try to give as good a review as possible. 

The reasoning being that someone reading your code will be able to understand it more clearly, and see what the value is being used for. The above loop would become this: 

I've also noticed that you've used string literals in some places for path strings, but in other places you just write a normal string with escaped backslashes, like you did here: 

And then just used everything that's already implemented on the class without needing to create methods. 

One of my current side projects includes a stack-based interpreter written in C for a programming language I'm designing, SSBL. Since the entire language is stack-based, I needed a way to create and store stacks. Currently there are three separate stack types: 

If all you need is to generate a simple list then there is no reason to use react. React has a lot of components that your code doesn't have, like interactive features, etc. If you take a few minutes to read about exactly what react is and does the answer to this question will be clear. 

Here's a function I wrote to include jQuery and stuff in userscripts, feel free to take it or parts of it. 

The second one does effectively the samething as the first one, but the first one needs to be inside of a or and the second one does not. For more info, see Difference between .on('click') vs .click(). 

When you create the methods inside the constructor then those methods are duplicated in memory for every object created. When you use the prototype those methods only need to be defined once. If you want to write code that feels like a class then use an actual class. (JS has those now). Aside from that, don't store you data in the function that creates the list. Pass the data into the constructor or create method. 

Validate your fields individually so you can provide the client side with better error messages (assuming this is an AJAX script)... 

Putting a function inside the jQuery function is shorthand for , they are the same thing. So, the answer is: yes, it will be more efficient. jQuery's method just waits for the DOM to be ready before firing the code inside but when it comes to setting event handlers, you actually don't have to wait for the DOM to be ready at all. jQuery allows you to attach your events to the object itself and when those events bubble up, jQuery will call them. So instead of using 

Plus all the problems already mentioned by chrisW are valid too and I am almost certain I still didn't find everything. 

, and should have return type The reason here is that most of the time the caller does not need the erased object and if you return it, the copy has to be made and it can be pretty expensive. Filling a vector (if done properly, see 3. below) amortizes to just 2 copies per inserted element, so vector is a good choice even for quite complex objects and you don't want useless extra copies. is pointless, since you are obliged to construct the objects anyway. in is violation of the complexity contract. is required amortized , which means the reallocation has to be in geometric sequence. Usual values are or , and minimal capacity of 16 or so. Just like the already mentioned by ChrisW, calling on array containing non-POD objects (and vector is for containing non-POD objects) is an UndefinedBehaviourâ„¢. The compiler may choose to do anything it pleases from simply crashing all the way over formatting your hard drive to making daemons fly out of your nose. And modern compilers can be real bitches when punishing UndefinedBehaviourâ„¢. Effect of some optimizations applied to incorrect code is next to impossible to understand. You have to copy the elements one by one with or a loop to properly invoke constructors and you have to call destructors afterwards. Assigning to unconstructed memory in and is also UndefinedBehaviourâ„¢. Non-POD object has to be constructed by constructor and destructed by destructor. Use the placement new: 

I think it's OK. You could try providing both const and non-const references version if you need non-const references for dependency injection. Boost.PP would help with the boilerplate. Amputated boost is usually selected parts imported using the tool that comes with Boost. Usually that's done simply to limit the size of the working directory. So it should be possible to import more of it, test that it works with all compilers you have to support and go with it.