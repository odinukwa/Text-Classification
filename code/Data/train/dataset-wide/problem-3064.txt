Acknowledging the state machine, look at the "want"/"want again" button. The text will always say "I want to do it again" after the done button has clicked. Essentially we can boil it down to this: 

I have a couple of issues with the main function. First, may work for windows but won't elsewhere. You should dump it. Second, Too many returns at the end. Third, The hardcoded input makes it kinda hard to test (and doesn't look good). Just read the first parameter from the command line or read in from standard in. Here is an easy way to do so: 

Finally, and this is more of a personal preference, but I find that code is easier to read and follow when reading functions and not event handlers. By that I mean this: instead of calling , why not move that code to a function and call ? Here is the final result: 

Brief aside: If this script is only to list the instances for you, you might find it useful to check out the and the tool: 

and, by taking a look at the delegate, you could transform it (but it becomes a little less readable/understandable) into something like: 

In addition to what has been said by the others, and noticing 3 distinct blocks of code in the original method, I'd suggest to split into distinct methods, and also use where possible (for readability's sake, being that it changes very little from the performance point of view, unless - of course - this method is called a lot of times). So, the original method becomes something like the following (this is not tested): 

Also, regarding the magnitude of the numbers, I'm assuming you're going to use s once you get the algorithm up-and-running, otherwise you won't be able to manage the range of numbers you indicated. 

The proposed solution does a Breadth-First Search in the State Space of the problem. The State Space is made of: the numbers evaluated up to that state, the sum of the used numbers, and the available numbers (the ones not yet used). The Breadth-First Search may not be immediatly visible because there's no tree to visit in a recursive fashion, but it's implemented via a . Let me know if anything is unclear. P.S.: The code is not working code. It just serves as a means to clarify the idea I had. 

Proper Indentation. You shouldn't need the comment. Just indent that entire block. needs a statement. You wrap your code in a function, which is good, but you need to call that function. The last line should be 

But having a list is just fine. Not knowing anything else about your requirements, I would leave it the way it is. The thing that really sticks out to me in your code is the use of a callback as a parameter in . Since this function is not asyncronous, I would ditch the callback and either log the error directly to the console or just throw the error and let it break the build. If you really want to provide a mechanism for reporting configuration errors to the user, then rename "callback" to something akin to "errorHandler". The use of the name "callback" usually signifies a function that will be executed once and only once, will be executed when the function has completed, and will not return a completed value but instead pass the value as an argument to the function. Also, I find it surprising that you do not log the time to the output of the file or console logger. Not a big deal of cource, it just stuck out. 

Avoid wrapping all the code of the method in a block. Here are some ways to deal with exceptions. Also, be consistent with spacing and indentation in order to improve readability. 

In addition to what's been already written, I'd say that it shouldn't be necessary to implement the method. That is a test method and it should be in a test module. Regarding the implementation, I'd make the following operations: 

We get the sets of 2 non-contiguous substrings. For each set of 2 strings do the following: 2.1. Get the last string. 2.2. Repeat operation in point 1. 2.3. Add the other strings in the original set to the calculated sets in 2.2. Repeat point 2 for the sets of 3 strings ( in general) until no more strings remain. 

I'd go with the built-in control. Here you can find the documentation and some examples. Also, I'd suggest to use the and for the other operations. Usually, if you have to manually insert some HTML code in the page some bug is pretty sure to show up. 

Variables and parameters should not be capitalized unless they represent a class. As such, the parameter in should be . 

Next, you can extract that click handler into it's own function, allowing the index to be passed in as a parameter. 

"want" / "did" "want again" / "did" (active) "want" (active) / "done" "want again" / "done" (active) "want again" (active) / "done again" "want again" / "done again" (active) 

Generally speaking, anonymous (unnamed) functions are completely acceptable within the land of Javascript. They are used frequently and without prejudice, so don't be afraid of them. That said, I'm not a fan of the second code sample. Without an understanding of the jQuery API, I don't really know what the two functions do to the hover call. Are both called, one after another? Perhaps something else happens? The name doesn't really give any clues here. I think a great option here would be to combine the two samples. Use the anonymous functions of the second with the explicit naming of the first. Furthermore, it should be noted that according to the docs, is shorthand for and , not and . I'll let you read over the docs and decide which of the two you decide to go with, but ultimately I recommend going with something like this: 

As usual, I'm open to any type of feedback, even though for now I'm concentrating more on functionality and readability rather than performance. Let me know if you have any questions. 

The end result - after applying the changes in the first solution and the changes for these 3 points - should be something like the following: 

There's one thing that is particularly disturbing me: the last block. That's an example of Busy waiting and that's something that should be avoided IMO. A possible solution to this problem could be to store the objects to a and once you have created all the threads you run a for each thread on such list. That being said, I'd suggest to take a look at PLINQ and TPL. One last thing: I'd remove the in the block also. I'd say that the instruction should be used only in a method. See here and here for ways to handle exception when working in an async way. 

The only part missing from that match is the end, the last . I would use another regex match to grab that portion: 

is always one less than size, so you don't need that variable. Just replace all instances with . Similarly, could be replaced with . 

Speaking of, is defined as , which only works for elements with an ID. A broader solution would be to set target using '$(this)': 

Honestly, your loop doesn't seem that complex. I would probably ignore this warning in your case, at least until it grew in complexity or the surrounding function grew in size. In any case, here are some things you could change: a. Add a variable to replace the five instances of . b. Off the top of my head, I'm pretty sure an EC2 instance is only going to have one "Name" tag. You can extract this loop into a separate function if you feel comfortable with this assumption. c. If your lint rules / personal style allows for multiple returns, you can reduce the depth by returning from the error. 

which behaves in the same way as the original method by using only the lazy evaluation feature of the and operator. Regarding the search problem related to the case of the strings I'd just apply a or to both strings. The end result should become the following: 

To answer your question In my experience, there's (almost) always a better way :) As a review to your code Everything looks good to me. The one thing I'd change is the following piece of code: 

This seems like a method suitable for the dynamic programming method. As 200_success said in his answer, the use of memoization can greatly improve performance. What I want to add to the answer are two ways to go with solving the problem. In-time processing This is the way suggested in 200_success' answer (if I understood it correctly). Let's go at it one step at a time. We have that \$G(0) = 0\$, \$G(1) = 1\$, and \$G(n) = [G(n-1) + G(n-2)]^2\$. By caching the result of \$G(n-2)\$ and \$G(n-1)\$ we can easily calculate \$G(n)\$, so, for \$n >= 2\$ we can use the following algorithm (in pseudo-code): 

Regular expressions are tough to read (human wise). As such, if you have a gnarly reg-ex in your code (), you should comment what it does. Furthermore, using regular expressions to check the total length of the string is inefficient and not necessary here, since you already have to check the length to report an accurate error message. As such, consider validating the username and password like this: 

If looks like you may have a bug with . If the form input is a checkbox and is unchecked it will return even if it passes the validator function. Since this will cause the function to fail, lets return as an invalid state. 

You are caching , but really, it's not complex enough to warrant caching. I did some quick and dirty testing and found that you save about 10ms per 1,000 executions. That is not worth anything here. So, to reduce code size and bug potential, I suggest removing all caching. 

Furthermore, It segfaults on me when I give it lines longer than 119 characters. (But this is probably system dependent).