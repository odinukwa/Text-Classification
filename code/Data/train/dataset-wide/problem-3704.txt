All of this stuff makes zero turnover self-defeating. It simply isn't sustainable to have a team getting paid the same amount year after year to solve the same problems. People get bored and quit, "age out" of entry level salary + CoL and quit, get married and quit, move to be closer to their families and quit, and just flat quit. In short, life happens. The U.S. Department of Labor considers a roughly 4-5% unemployment rate to be normal, most of that being rotating elements of the population which are part of the natural "churn" between jobs in the market. The actual turnover rate is typically higher, as the unemployment rate conceptually only includes people who want a job but don't have one at the time they're asked. People move from job to job relatively seamlessly all the time and so were never "unemployed", and those taking a sabbatical after leaving one job might say they don't want another in the meantime. Average turnover rates in the entire economy hover between 12 and 15% annually, so it's perfectly normal to have a long-term average of up to two in ten employees leaving a company each year. Typically, the less skilled the job is, the more it will churn; it's not unheard of for fast food joints and other service industry jobs to have 100% monthly turnover (doesn't necessarily mean there's no two of the same names on the payroll list, but in a shift with a dozen waitresses, if three of them quit you could spin through 4 applicants each to find suitable replacements). That kind of churn is rare and a huge red flag in the white-collar world, but it does happen from time to time, typically when there's a big middle management shakeup and loyalties get drawn in different directions. Usually, knowledge work turns over at about 5% annually, so it would still be normal to see a guy quit about every two years out of a team of a dozen. 

As I said it is most common thing to happen. But some of the employers won’t tell to the candidate upfront. Ofcourse No body likes to hear bad things about themselves. However the good thing here is he is straight away giving his feedback and assessment. Now you can have realistic picture of where you and your skills stand in the job market. You can use this feedback constructively. If you are interested in the job profile that is similar to your prospective employer you have to focus on improving your skills which are required for that job. Or you can focus on the other job profiles where your other skills are strong. 

I am working as a Dev team lead for a project. I am daily receiving so much information from various sources related to work, project etc.. from many channels like Emails, formal meetings , casual chat with people, some information from magazines, websites like stack exchange etc..My main challenge is filtering the useful information and keep only the useful information with me . Since I am not doing it very efficiently I have the below problems 

I am working for Indian Outsourcing Organization. I have joined Onsite team for new project 2 months back. Below are the some points that I See risk for team. (1) Manager doesn't listen much, doesn't lead much, doesn't consider team members opinions or concerns. Hence team doesn't get much visibility and clarity about project and situations in the project. (2) Very apprehensive about documentation any communication. All the communication and commitments occurs verbally and sometimes the communication is very indirect also. The result of which any risk happens in project we don't have any option to defend ourself. Finally team has to suffer consequences if any bad thing happens. (3) Since there is no proper guiding and leading, many times the actions, the decisions team member takes does not backed up by Organization policies and team members are at their own risk. At this situation how to handle this manager in order to avoid further risk to team and project? Updates based on Responses: The major problem here is manager is highly discouraging documenting those facts. I have tried to document many times. Firstly my boss doesn't replies to my emails in which I am asking for confirmations/clarifications. He just calls me or talk to me and gave verbal clarifications. One day I got too warning from my boss saying that, If you have any questions just ask me, or call me or don't write mails. 

Honestly, if whoever or whatever is sending the replies isn't bothering to take the time to actually read them and craft a meaningful response, I would decline and move on. How do you know this auto-reply HR isn't the kind of thing you'll have to deal with if/when you get hired? 

Does the recruiter somehow "own" this candidate? Is the candidate, or even the reference, the intellectual property of the recruiter? No. There is a decision to be made here. This person contacted you with a recommendation of a client. You specifically said "no recruiters", and they contacted you anyway. You have three choices: 

Code samples at an interview are a dangerous prospect because, as suslik said, you probably don't own the code. If you wrote it for an employer, regardless of how general-purpose that code is, it's your employer's IP, which you were paid your salary to produce for them. It also doesn't have to be yours. Numerous blogs, QA sites (like the SE family) and other sources for "t3h fr33 c0dez" abound. Coding languages, in general, have fewer ways to say what you need to say, and combined with "best practices" and refactoring assistants, two knowledgeable coders' implementations of a QuickSort algorithm could differ only cosmetically (and cosmetic changes are the easiest to make to somehting you sneak off the interwebz). In addition, I dunno about the rest of the development world, but code I write "on my own time" is typically not code I'd like to show off. That code is stuff I create for my own enjoyment, usually without a huge amount of attention paid to architecture or documentation, because it's code that's only "right" (not only correct but well-organized and well-formatted) to the extent I need it to be so. Lastly, hiring managers don't tend to be coders. They may have worked their way up through the dev team hierarchy, but their job now, as a manager, is to tell you what they want coded, and send you off to go do it. They're not really interested in your exact solution; their concerns are related to the finished product. Does it work? Does it look good (for client-facing apps)? Does it perform well? Those are things that are difficult for you to demonstrate you can do with a code sample. They're much easier to demonstrate with a beefy resume of your past work, plus references from those past jobs that tell your prospective employer how impressed they were with your work. As a result, I say don't bring code, unless it's your solutions to interview prep problems they give you. Instead, bring knowledge of the company, the industry they're in, the language/framework they're looking for (and others that may get the job done better), object-oriented design patterns and principles, data modeling, etc. Show them you know your stuff, and that you know their stuff, and you'll make yourself a hot commodity. 

The main problem here is commuting distance and you want to reduce commuting cost and time. The below are the suggestion which will help you (1) Check with your organisations Compensation and benefits policies for the following things 

1) Approach manager of A whom you report, and express your interest. Emphasize on how much you value the Company A, Specify what are the unique things that you like about company, and how can you contribute to Company A and how can you help Company A. 2) And also be honest with manager A and tell that you have applied positions with other Companies. You can say like "Even though I have applied positions at other Companies, I am keen to work for Company A. If I got offer from Company A, I prefer Company A over other Companies. 3) For Company B, You need not tell Proactively that the fact you are considering the offer from Company A. However if they ask You can reveal the fact that you are Considering offer from Company A. But you can assure that if you don't hear from Company A so and so date, and if you have the offer from B you can choose B. 

I believe below points helps you to deal with your situation The main objective of any organization is to complete the project with in budget, with in defined time line with define quality. But we are not in ideal world, so many times due to so many reasons the project progress may lag and still dead lines won’t move and extra funds doesn’t come. So the client management still has to achieve the same dead line. At such situation it is more common the project demands more hours and extra miles from the team. It is more common thing in IT world due to competition and dynamic nature. So Organizations expects flexibility and willingness to take extra mile when it is required. It is more common and reasonable expectation from management. Some Organization set this expectation and checks candidate comfortability at the time of Interview itself. But some don’t do that but still carries same expectations. Since you showed your willingness to learn new technology, the recruiter might have taken that as flexibility to wards working hours itself. So they might place into the project. Honestly speaking there are highs and lows in IT working hours. When project requires we need to stretch ourselves and work long hours. How long is purely depend on how much project lags and till project come on track. what I mean on track is project will safely delivered with in budget, with in time line and with accepted quality with out any additional hours from team. Some times at certain phases of the project you might end up with spending less than normal work hours. It is most common thing in IT field. In my experience I have seen most of the IT professionals used to it and take this as daily part of their life including myself. The main concern of the client in your case is not showing flexibility where as others might have shown. That is biggest concern. Even if I am in client situation i would also concern much about it. I believe you missed below points before negotiation - You should have checked and understand the project situation to assess whether you are in a position to negotiate or not. - You should have checked with your competitors and other of your team members how they are reacting with such demands. Now what? For this problem you can do 2 things. 1. Go to the recruiter and client talk once and accept their demand and continue with that job. 2. Move on and look for new job. But In a long term either you be prepared to work for long hours when situation arises or bring your disability at the time of interview itself. I believe carrying this disability potentially hurts your chances of getting offer. 

How you can improve the situation depends on your role in the team. Is this your team, as in you're a team lead or manager? Or are you "just" a team member who, in the eyes of those who didn't get selected, just got lucky? Are all of these people newly hired, or was the team formed by internal restructuring? Some of your coworkers may have a legitimate gripe based on seniority, if they've been at the company for 10 years and got passed over in favor of someone relatively wet behind the ears. If everyone was hired at roughly the same time, but someone might have more industry experience than someone who's going, they again might resent this opportunity being given to a relative newbie in the rat race. On the other hand, that may be exactly why these people were chosen for this "training"; they need it more. They're less knowledgeable, less well-connected to their peers, and so would get more than a free trip out of this opportunity. If you don't have disciplinary authority over your coworkers, then this isn't your problem and doesn't require your efforts to improve it. You owe your coworkers nothing but the effort towards the team and its goals for which you are compensated with your salary, and anything you try to give them as a consolation will either be viewed as woefully inadequate compared to a free trip out of the country, or it will enable them; they'll expect these "kickbacks" any time a benefit is given to you (even if it's more fairly distributed). You certainly won't repair any honest friendships (and any honest friendships would survive something like this anyway). If you have the authority to hire/fire, or at least issue directives that the team must follow, then this is your problem. You are being accused of favoritism (even if it wasn't your decision, as their "boss" you're the most visible proxy of the higher-ups who did), and even if any decision that could have been made would be no more or less fair than this one, the point remains that it's a benefit seen to be unevenly applied across the team. How you can correct this imbalance depends on your resources and those of your company. If you're in the U.S., it's baseball season; does your company have access to a box at the local field, to which you could give out some free tickets to a game? Is there a trade convention scheduled a little closer to home (or maybe further, like Vegas) in the near future that some of the members who missed out this time could attend? At the very least, maybe there's some "manager-approved time off" in order, for which you'd look the other way if it didn't make it into their pay period reporting. Now, I'm not advocating maliciously breaking any company rules, or acting in open defiance of any decision made by a higher-up, but if you have the responsibility for smoothing this over, then by the same token you generally have the authority to make the rules, at least as far as they apply to your team. 

Is my local area's job market sufficient such that there are multiple jobs at my desired level of "depth". Can I find another job in my chosen subfield easily? Or will it take a lot of work? Do I want to stay focussed on the same problem my whole career, getting a very deep understanding and learning multiple ways to solve that problem, or do I want to always be learning new, disparate things even if its only surface level? Where do I want to be in that spectrum? Do I want to command a higher salary, even if it means taking longer to find the job that best fits me? Or will I be ok on a smaller salary but more stability? 

My Advice? Take a hedging strategy. Treat your knowledge like an investment. Get some depth in a promising field, but don't lose focus on learning other, sometimes completely unrelated things. Invest 60% depth and 40% breadth or 40/60, not 100% one or the other. Technology is way too fast moving to put all your eggs in one basket. But its also stable enough that many problems do stay around and linger. You want to not get too comfortable in one cushy, well paying gig, only to have that problem become obsolete with nothing to fall back on. 

Well the correct answer is both! If you could be very broad and very deep, and know everything wouldn't you? Alas though, even geniuses have their limits. So we have to chose what skills we are going to grow vs those we're going to sacrifice. Generally it boils down to how much of a commodity you're going to be. With a lot of breadth, you will always be marketable with a large skillset. You have more opportunities. However, as your skills are mostly surface skills, you will be more commoditized. That is to say, with more supply, eventually the salaries drive lower as the odds increase there's someone who can write that iPhone app for $30/hour where you want to charge $32/hour. The extreme example of "breadth" is manual labor which everyone can do and is very heavily commoditized. With depth, the opportunities are scarcer. However, with deep knowledge you are competing in a smaller workforce. You'll likely be able to demand more $$ for your work as there are only a few people with those skills. You're not a commodity. The ultimate example of all-depth is someone with a PhD. You are so focused on a single problem that somebody may pay you through the nose to help solve that problem. You may, however, have problems finding the handful of people desperate to solve that subproblem. Depth can also be more brittle, the problem you're solving may pretty much be solved one day, making your job obsolete. You have to find what balance is most appropriate to you between "manual laborer" and "PhD student". Software Engineer is already some level of depth as obviously not everyone can do it. But do you want to be deeper than that? I'd take some things into account: 

I am working as a Senior Developer for US based Organization. In order to develop and deliver the project, we have to have discussions with many other departments and key persons and have healthy information flow on regular basis. We have a team member, Let us Say Bob, who solely and effectively co-ordnates all the parties and administrate this information flow among all parties. His job includes setting up meetings, book meeting rooms, taking notes in the meetings, publishing meeting notes, create followup to the meetings, send reports to management about the meetings what we have achieved in meetings etc… Recently he applied for 2 months long medical leave due to his health issues. My manager asked me to take those tasks temporarily for those 2 months and he is willing to reduce the other work load. But my problem is I don’t like that kind of work. I already expressed this concern with my manager. My manager said that, “ I understand your concern. When I look other team members you are the one who have the potential and necessary skills to coordinate and perfect replacement/backup for the job what Bob used to do. This coordination is very important for us to successful delivery of the product. Any issues this area would impact a lot in many areas. I can not rely on any one except you for this job at this situation. Can you help us on this?” By seeing the severity of the situation I have accepted to take up this assignment. But now the problem is how to handle this assignment. I have potential and necessary skills for this assignment. But I don’t like the kind of work that I have to do on this assignment. How can I subside negative feelings and will achieve maximum that I can on this assignment?