If you can't get buy-in for your definition of "done" then you may have to look at whether the organization is the right place for you, from a cultural perspective. Perhaps the only "done" the firm cares about is of the "observable functionality" variety, in which case your colleague is technically correct in calling his work done. Which isn't to say that I think it's okay for an organization to not make code quality a top priority. But the fact of the matter is many of them do not. In any case, if you approach it as an organizational/team issue, you remove any direct friction between yourself and your colleague. If the whole development team gets behind a consistent standard of "done" that includes the things you're most concerned about then your colleague has no reason to feel put upon or singled out by the requirements. Everyone is held to the same standards. 

Don't worry about whether or not they might have lied to you. What difference would it make either way? Just focus on making sure you get the compensation that you want/deserve. Say something along the lines of "I appreciate the generous salary offer, but as this is a startup I think my compensation should also include some equity, and that the total amount of equity allocated should account for the time I spent working at a salary that only covered my rent and food". If you really want to make a strong case, go on Glassdoor and find the typical market rate for your role. Calculate the amount of salary you've effectively sacrificed by working at the lower rate, and assert that your equity allocation should be worth at least that amount. Sounds like you've already decided what to do in this scenario. Though you could always try negotiating instead of just refusing their offer immediately. Make a counter-offer by saying something like "I'm sorry, but I need at least $x to cover my expenses. And since this is a startup and because $x is still significantly below the market rate for a software engineer I think I should also be allocated some equity in the company as well". Again you can help your case by doing some research to determine what the market rate for a software engineer actually is in your area. And note that '$x' should be what you need to cover your expenses plus whatever extra you need to live relatively comfortably. Yes, this is the outcome you should expect from a startup company. It's up to you if you want to accept or shop around for a better salary (with less equity, usually in the form of options) at an established company. And remember that your equity will likely be worthless from a cashflow perspective for years, as 1) you will probably be subject to a vesting schedule and 2) you'll also probably be restricted from actually trading/selling the equity in most cases. Give some thought to what you're after from a corporate-culture standpoint as well. At a startup you'll have more freedom, more responsibility, and more opportunities for fast advancement if you're good enough. You also run the (very real) risk of having your equity never be worth anything. With a more established company you'll have more stability, but are also much more likely to run into a rigid corporate culture that limits your responsibilities and the speed at which you can advance. 

Notably, the way that leave accrues is not something that can be varied. Possible Issues Based on the above, and assuming that you're not on an Enterprise Agreement, there are some possible issues: 

The purpose of a resume is to sell yourself as effectively as possible (I'm assuming that the purpose of this question is to determine what information you want to include on your resume). That means picking the best things that you can to highlight about yourself. And it can also mean excluding things of lesser stature, as a good resume is also concise (particularly if you're in the U.S.). As a general rule your resume should not exceed two pages in length. If your "real world" experience takes more than that, it's time to start pruning bits out. And if it doesn't even fill a single page, it's time to dig a bit further and see what else you can find to help make yourself stand out as a candidate. So when does experience start? It starts at the present date, and works backwards (for most people in most situations). And it keeps going backwards until you've got enough content to fill a professional-looking resume with your best and most relevant accomplishments. If you've got real-world experience, then great. If you need to pull in some college-related experience, that's also great so long as it's relevant to the position you're applying for and so long as it's presented in a way that effectively highlights your skills and expertise. Same goes for open-source projects that you may have worked on, or anything else that 1) is relevant to your desired position and 2) makes you look better than the next person. If your goal is to sell yourself as a prospective employee, "experience" starts wherever you need it to in order to accomplish that. Professional experience is generally better than college experience, and college experience is generally better than no experience at all. 

I'm trying to create a developer-centric compensation policy. Which is to say it focuses heavily upon transparency, flexibility, and fairness. Many aspects of it are influenced by the Stack Exchange policy, described here. However, I'm feeling a bit stumped about how to best include performance-based bonuses into the model. I feel this is essentially required since all developers in a given position will start out with the same base salary, and since I want 1) for there to be some incentive to encourage people to put in some extra effort, learn new skills, etc., and 2) for top-performing developers to be able to earn more than the bottom-performing developers when there's a clear and measurable difference between the two. So there are some pragmatic questions, like: 

Can I or will I mostly likely receive a raise? It depends. I'd say it's an unlikely prospect, however. At least in terms of receiving a raise for the 'extra' work that you're doing. Which as you said, your primary employer doesn't even seem to know or care about. The most likely outcome is that you will receive a comparable raise to everyone else. Can I decline to work [the second role] anymore? You can do that at any time, for any reason. That doesn't mean that it would be a wise move, however. And since your employer would be the one who refused you the raise in that case, it would be more appropriate to take it up with them rather than to create friction with the client (which your employer will not appreciate if/when they learn of it). Let them know that you feel that the extra role you've been filling warrants extra compensation, and that if they're not willing to provide it then you're not willing to fill two roles at the same time any longer, and that they should inform the client that the client can no longer utilize you in that capacity. Can I lose my job [for declining the second role]? Almost certainly yes, that's something that can happen. Generally speaking you can lose your job for virtually any reason. If there are any specific limitations on that, they'd be in 1) your contract with your employer and 2) your local employment laws. So those are worth checking. It sounds like you're in the U.S., however, so I'd be surprised if your employment was anything other than "at will". Do clients often give assignments outside of your contract? Most clients will try to get away with as much as they can. Extra assignments, scope creep, free maintenance and upgrades, you name it. It's up to the contract holder to decide how they want to handle those cases. Based on my understanding, however, your employer is the contract holder, rather than you yourself. So it's not clear if the client has gone outside of the scope of the contract they hold with your employer. And even if they have, it sounds like your employer has decided that they are okay with it.