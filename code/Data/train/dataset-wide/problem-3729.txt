I looked at your profile, it says "your code should be cleaner than yourself". Also from your comments that you "spent a lot of time explaining concepts", and "criticizing is part of my job as an engineer"... I'm thinking you are keen on giving advice and your advice is simply not appreciated by your team-mates. This may be due to what you are saying, or the way you are saying it, likely some of both. Writing productive and maintainable code won't cause you to be fired. You WILL be fired if you can't get along with the team. This is your problem, not (as you imagine it) your code is too good. Your code might be really good - but MUCH more likely this is a personality clash issue. My advice to you, is don't be the tail that tries to wag the dog. Keep your head down, stop telling people how to code, follow direction, work well with others, write maintainable code. And then you won't get fired. I also note with interest this telling comment from your manager: 

I'm in school right now, and in a couple of years, I'm going to look for work as a software/systems engineer. The thing is that right now, I'm 32 years old. With age being a potential issue, where is age less of an issue? What type of company/culture should be absolutely avoided? Any warning signs? Some backstory, if you have the time. (TL;DR, I'll be an "old" man in a new job, and it could suck.) I've got a couple more years to go before I graduate with a BS (Yes, I know degrees aren't everything, but I have none at all, except for an Arabic AA.) in CompSci, as well as several AASs (in Computer Programming, Web Development, and Comp Sci) and several certs (C++, Java, OracleSQL). Right now, I'm just not comfortable putting myself on the market because I don't feel yet I'm even an "average good" programmer, though I'm putting tremendous effort toward that. On the bright side, I didn't start out software/tech ignorant. I was in the Marines for 8 years, finishing the last three in Special Operations Intelligence (Signals), and did contracting for a year in a company that specialized in networking centric geolocation. Got laid off and went back to school. Then was hired as a contract worker for Google for over a year and a half. I've had plenty of computer science exposure and OJT in programming (also UAS systems, remote sensing, GIS, database design/implementation, and SDRs), but have only really dedicated myself academically to Computer Science/Software Engineering in the last year, after realizing this really is what makes me happy, and where I seem to have the most suitable talents. Thing is, I'm going to be a 34-35 year old entry level employee, working with 22-24 year olds starting fresh as well, but they are all shiny and new(and may actually have more experience in tech industry), which may make me look bad. People my age will have over 10 years experience and will not be my peers, likely having senior positions in company. I feel it could be a situation where it looks like I'm experienced because of my age, but when I behave like a new guy, which I will be, I'll be treated like an idiot, instead of a new guy. I've got a family to worry about, so this is really stressing me out. 

I've been working as a contractor in the US for few years. I can give you my perspective on things here, which may assist you, and in particular US readers who wonder about your question. Typically employers here are willing to pay about 30% more for contractors. The reason is that they win back vacations, benefits, unemployment insurance etc. and get added flexibility. So I have a simple rule of thumb that I use to figure the equivalent and translate from perm to contract. I will take my hourly rate as a contractor and multiply that by 1500 to get the equivalent rate I would charge annually as an employee. So for example if I was making $30ph contract I would be looking for a perm. salary of $45,000pa. Or if I want to make $80ph contract-equivalent, I would be looking for a perm. salary of $120,000pa. Then I'll try to quantify and add in anything that's a bit unusual about the job I'm considering, for example travel time, if its particularly close or far, or new skills I might acquire and what value they may bring. Also if I will have to spend time away from family, how much of a premium do I want for that. If I have to relocate, what's the cost of living difference, etc. 

Often times I find I'll be writing an email with a question or comment pulled from several online references (Rally user stories, Governance docs, sharepoint files). As such, while I will summarize these references, I also turn them into hyperlinks directly to the document referenced. Nine times out of then, I have it open anyway, so grabbing the URL isn't hard. From my perspective, I would appreciate the links for clarification, but I find almost no one else uses them. Is the inclusion of these links considered poor office etiquette for some reason? For an example of how I would typically do this link inlining... 

I would suggest leaving these off without further study. It's great that you got some hands-on time with Java, Python, Ruby, and Selenium, but if I were interviewing you and you said you gained valuable in-depth experience with all of these technologies in only a week (you mentioned you were fired from the last position after only a week), I'd be very VERY skeptical, to the point that it would almost hurt your chances. Honestly, I feel like you should leave the position off your resume, and only post it in your work history. If the interviewer asks about it say something like "I was let go due to XYZ, but XYZ has been fixed". Assuming XYZ is innocuous, something like say, lack of reliable transportation, then it shouldn't hurt you too much. It might help get more quality answers about how to approach the situation if you were to post why you were let go as well. 

Details Most of the time, I wouldn’t be nervous communicating this to management. Unfortunately a long line of piece-meal maintenance by people, some of whom had little development experience, who only “touched” the code long enough to add a patch here or there, then move on, has painted a picture to management over the years that the project is just one step away being production ready. That is woefully not the case. A short list of issues in the genius code I have come across in the ~1.5Gb code base are... 

TL;DR I inherited a project. Long story short, the code I am tasked to maintain is bad. So bad, in fact, the product is not only incomplete but non-functional and has been for years. How do I communicate to management, in a way that isn’t embarrassing to them, in a way that doesn’t make me look lazy or stupid, that a valuable product is in a dire state? 

While I try my best to make sure that anyone who I may be working with knows I will be out of office anytime I'm out for 8+ hours, I realize that that is a very easily forgotten fact. I've been toying around with the idea of setting my OoO message the day before I leave, to let people know that I will be gone tomorrow and possibly following days. This allows people to ask me any questions they have that may turn into blocking issues while I'm gone. On the other hand, I realize that people see the out of office message and may assume I'm out of office now, which sends the wrong message. So, my question really is, is it common to start the out of office auto-reply a few hours before I actually leave so that people can get any last minute questions in? 

Relax. Just let the distractions happen like water off a duck's back. Handle it professionally, just as you would handle interruptions on the job. Consider it part of the background noise unless someone is speaking, and then take that opportunity to pay attention and respond if you're spoken to, in a way that demonstrates your people skills vs. your technical skills. I.e. consider it an opportunity to show your warmth as well as your competence. 

Don't give up. Keep enjoying your hobby. Write code, build websites, API's, utilities, whatever drives your passion. Try to use common technologies in the process. Learn the common patterns. All the while have fun solving problems algorithmically and pick up a deeper understanding of fundamentally important languages like C/Java variants and SQL variants. Sooner or later, you'll be able to answer those whiteboard questions OR you'll be in a position where you'll have so much broad experience and enthusiasm it won't matter. 

This seems like something I would probably be informed of at my next eval, not a rather informal email from someone a couple levels of management above me (I'm thinking the subjects of the email were CC'd by mistake). Given the size of our company, formal changes in your position are always done with at least two members of management present. This wasn't CC'd to my direct lead (or Jim's, Joe's, or Bob's), so I'm hesitant to ask them about this, but I'm really not sure how to respond to this or if I should just ignore it until I'm told about it in a meeting. 

You have to remember, there are a lot of things actually going on when you are at your office chair (or your bed with a laptop). Here are a few common aggrevations from office life, some I didn't even think of until they were pointed out to me. Keyboard 

Clarification: this question vs technical debt This question has to do with me challenging long-standing beliefs about a product without committing career suicide. Rather than strictly be about dealing with technical debt, there is this: management suggests that perhaps the code is so complex that I can’t understand it, and posited the mistakes are by design; that the original developer is so meta, that what looks like mistakes are actually strokes of genius. Perhaps another reason this isn't quite about technical debt is that the difference between 'genius' code and technical debt is that management communicates that I'm not supposed to alter 'genius' code, and that 'genius' code isn't technical debt: it's the secret black magic. I wish management would think of it as technical debt. Instead they don't. Management isn't concerned with the time, cost, or money directly –– although that is some concern. 

So, I'm considering going out job hunting again, and I've read it's always good to have a portfolio of your work handy. Unfortunately, the results of my work are rather boring to most people (An JavaScript/html calendar similar to JQuery's day-picker, an active html analog clock, etc). Alternatively, I have side projects that are more interesting (an Arduino sketch for a player-guitar, an Arduino sketch for an led grid that simulates light patterns similar to what you'd find on the bottom of a pool under moving water), but less useful in the real world. I'm trying to not be too broad or make a question which only has subjective answers, but I'm also trying to understand what sort of code and projects a recruiter might be interested in. I feel like my utilitarian code is more useful in the real world, but my side projects show more of an aptitude and ability to problem solve. Which would a recruiter be more interested in? 

I should add that when I first started working on it, it didn't even compile. And when I got it to compile, it failed at runtime. It’s a nightmare. The problem is, the management has received assurance from whom they inherited it, and from previous “gung-ho” developers, that it “works,” so have invested significantly into it... And now the buck is passed to me. And they want it in production in about 2 months. When I suggest that previous developers may not have been entirely honest or understood the product entirely, management sends mixed signals about “just get it done,” and “why isn’t it done yet” ... and “we’re not really sure it ever worked” to “it was working when you received it,” and “we’ve never seen it work” to “it’s already in production.” [EDIT: pasted most of the next paragraph into the TL;DR section.] Management also suggested that perhaps it’s so complex that I can’t understand it, and posited the mistakes are by design; that the original developer is so meta, that what looks like mistakes are actually strokes of genius. Granted, I’m no genius, and maybe that is the case: to which I offer my previous observations about the very fundamental issues I found. Perhaps there’s politics at play above my level.