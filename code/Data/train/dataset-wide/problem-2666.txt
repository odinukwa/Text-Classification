creates an empty string, designated in the block. It is then a simple matter to consider each element of each term in the polynomial to build up the string. I'm not certain if I followed the formatting rules exactly, but if I did not, it should be easy to modify the code to conform. (Edited to fix boo-boos spotted by @200_success.) 

The important take-away here is that we only had to compare with to to determine if a better solution could be obtained by entering the market on day 1. As shown below, the same is true for entering the market on days 2 through 7. When we reach day 9, we have to do a little work. At this point we know that if we enter the market on day 0 or day 1, the best net gain is . Here are the calculations for each of the remaining days: Enter market on day 2 

We see that two of the are 's (), and one is the original number . The number of pairings is the lesser of the number of 's and the number of s. Here that is one. I will now go through the steps to determine the number of pairing in above for . To make it easier to follow, I will first sort (though the method neither requires to be sorted nor sorts it): 

This returns a hash that gives the ball (value) at each offset position (key) after all rearrangements have been made. Examples 

Here's how the answers posted to date compare in execution speed. [Edit: I updated the results to include another method. The methods 

Well, this is still not quite right. The calculation of is not correct, but it needs a fair bit of work to fix. I've therefore commented it out in . I also changed the name of the method because it's easily confused with the built-in methods for for strings and arrays. I'll leave it to you to fix the rest and of course others may offer additional suggestions. Alternative Solution Here is one way you could write the program more compactly. Code 

Here's a way that uses the method Array#sample and several class methods for reading and writing text files that are defined in the IO class. I have made the following assumptions: 

Note that does double-duty: it deletes the key-value pair from and returns to be added to . You can of course tack on to sort the array by date. I suspect this may be reasonably fast considering that only one hash is constructed and that is for the smaller of the two arrays. Let's see how this compares with the other methods that have been suggested. Test case 

The class methods Matrix::column_vector and Matrix::row_vector are used to convert to a column vector and to a row vector. Matrix#* is then used to compute the outer product, a matrix that contains the products of all pairs of elements from the two ranges. That matrix is then converted to an array, flattened and 'ed, to eliminate duplicates. Compared to approaches that do not use matrix methods, this one has some extra steps and greater memory requirements. However, the computation of the outer product, being implemented in C, should be relatively fast. Whether this method is faster than other methods is an empirical question. (Edit: the benchmark showed this method to be relatively slow.) #2 The second approach employs a bit of fine tuning to boost performance: 

The second is the easiest: we simply return . That applies to the last four examples. It the first case, if is: 

it would return . What is the rational for that? Moreover, the question asks for the last item in the list, not the last item in the last list of the list. I think the only reasonable interpretation would have return in @200_success's example. To do that, you can modify your code as I have done below. Code 

determines if player wins on the minor diagonal (top right to bottom left). I was unable to find a way to check the minor diagonal using class methods. 

My answer is concerned exclusively with the algorithm for computing the best solution. I attempted to find one that is both efficient and easy to follow. I am confident I have succeeded on the first score, but will leave it to the reader to judge how it fares against the second criterion. Code 

We now sort the keys. would raise the exception because cannot be compared with . We therefore need to define the "spaceship" method, that is to use. Since we want the key to be last, we do it this way: 

You asked for something simple. This most definitely satisfies that requirement, but it's not especially elegant. generates distinct strings of the sort you want. Since there is a 1-1 map between strings and integers between 0 and 2,704,000-1, it's obvious from the code that the strings are random and non-repeating. 

Again, this is pretty much self-documenting. Notice that I've written the argument as , rather than some variation of . That's because the method applies to natural numbers generally, even though we will only use it for triangle numbers. You could of course also write this as: 

Enter market on day 0 Suppose we entered the market at the beginning of the first day. Then what's the best day to cash out? Let's say day is the first day. We first compute: 

Suppose the arrays were large and you were looking for an efficient solution. Let and denote the two arrays, with being the smaller of the two. First, convert to a hash: 

This shows that when determining the largest palindrome for numbers up to , it was only necessary to consider pairs with values greater than . Hence, at most pairs were examined, which is of all pairs of numbers up to . For , two palindromes were found before the search terminated. In each of the other four examples, only one palindrome (i.e., the largest) was found before the search terminated. 

This is not a solution, but is what I believe are the shortest paths for numbers up to 30. Each row contains n, the smallest number of steps from 0 to n and the associated path. I thought it might be useful to post this, first to have it checked by readers, then to help others check their code. I coded this in Ruby, which is why I've not posted a solution. 

I've used Enumerable#each_with_object (v1.9+) twice, as it provides a convenient way to build an object such as an array or hash (which is returned). In the first case the object is an initially-empty array (with block variable ); in the second it is an initially-empty hash (with block variable ). I will use your data--with two changes--to explain what's going on here. I've added an empty directory and a file to the directory to . 

Now map each element of and append to the result the elements of that do not have matching dates among the elements of : 

See the doc for Enumerable#reduce (aka )1. When you are unsure what is happening with your (or someone else's) code, insert some statements. Here that might be as follows. 

Ball will change positions in until rearrangements have been performed, at which time it will be at offset , and will remain at that position (i.e., it will be at its final position). therefore satisfies the following identity: 

A word about the regex (which I've used to avoid the need to ). looks for a string that contains one or more characters other than . is called a positive lookahead. It is not part of the match (which is why it is sometimes referred to as having "zero width"), but it requires that the match be followed by , where signifies the end-of-line. This strips off from the beginning of . To make it easier to remove leading zeros on trailing numbers, I've not included at the end of each subdir. (It can be added at the end if desired.) Next we execute 

so that this code needn't be changed if you rename the class. (Note that is the same as .) However, you don't need a class method to create the instance. Instead, just write: 

Note that methods can be added to or deleted from the module (or renamed), with no need to alter any of the other code. A variant of this approach would be create a subclass of the main class for each of these custom checks, and then use the hook Class#inherited to build the array . 

Below I've suggested how pcc's code might be altered. The edit history of the question shows that pcc came up with virtually the same thing. In fact, before pcc's question was rolled back, I left a comment saying how I liked that factoring, in part because it was virtually the same as what I had come up with independently. (My comment has since vanished.) 

Rather than construct the polynomial string incorrectly, then fix it with regex's, it may be easier to contruct it directly. This is one way you could do that. 

However we already computed: where is (now) at offset . Since , we infer that is still the largest element in . Therefore, we know that: equals: 

I have drawn attention to the fact that the argument was not used in this block calculation by replacing that variable with an underscore (which is indeed a variable). Some Rubiests might write instead. The remaining calculations are similar. 

but that would be wasteful of CPU cycles. First observe that this array could be computed as follows: 

This module contains the validity checks that could not be done from the information in alone. The following is executed in the main class, when it is parsed: 

It makes sense that the number of factors should not depend on what the particular prime factors are, just how many there are and the number of times each occurs. (Note that if you don't care about displaying the prime factors, you could have --probably renamed--return only .) Suppose, for example: 

Algorithm You can increase the efficiency of the algorithm by making use of two facts (particularly the second one): 

The way I've displayed the error messages may not be what you want, but that would not be difficult to change. Note that, when a file name has an invalid format, I've listed all the reasons it is invalid. When matching a substring against a regex, notice that the length of the substring is checked by including start/end anchors and avoiding the use of , and . For validity checks that involve a list of possible values, I've made the list an array of the values from your hashes, as the keys did not appear to be used. If the keys are needed, those arrays could be replaced with hashes. A potential problem with this approach is that it's not very flexible. If, for example, a validity check were changed to involve something other than matching a list or a regex, it might be difficult to alter the code to accommodate it. I initially considered a different approach that offered greater flexibility. It retained the array of hashes, , possibly changed somewhat, but also had a module that looked something like this: