Code Legibility Many of the values and functions in your program have non-descriptive names. If you plan on only sharing this code with your colleagues who have familiarity with the domain, similar algorithms, and the mathematics behind it all then there may be no need to be descriptive. However, it is also easy to cite whatever source you got this from at the top of the code so that future users can have a frame of reference. 

As Illya has mentioned Regex alone cannot solve this problem. Instead, we must employ some type of stack-like data structure to give our program memory of past characters. The first three lines of the main function are just a cheap way to replace blockers with a single character. A better solution would be to tokenize so that this isn't necessary. 

When pattern matching and inspecting multiple values of a sequence type (, , , etc) you can reduce the length of your expression by using sequence patterns instead of explicitly breaking the sequence up with the operator. So instead of you can more concisely use . When you want to check for explicit values while pattern matching on an object you can use those values instead of replacing them with variables that are then checked with an statement. For example can be more concisely expressed as When using pattern matching on sequences (especially when the expression goes beyond the standard ) it can enhance legibility to use single letter variable names and comments instead of long variable names. I think that we would both agree that good code should describe itself through both value and function names. However, in this case there is no way of adding intuition with function names and so all of the description ended up in your value names. Like I said before, do what works for you. If legibility was our only metric then maybe pattern matching isn't the ideal way to implement your function. It could still be recursive, but instead of s you could use functions. Do whatever suits you the best but when possible I would recommend short variable names accompanied by comments over long variable names. 

That is, this solution produces the same output as yours does for the tests that I performed. The intuition: you are essentially building a grid-graph sans the middle-parts. So we iterate over the range of possible points, but only keep those which are on the exterior. 

Below are some of the changes I would make to your code. In my opinion one of the nice aspects of Scala is that it gives you all sorts of ways to reduce the amount of work your mind has to do in order to decipher code. As an example, one of the first things I did was declare a type that is equivalent to . I then just substitued where necessary and the code (to my mind) became more readable. The choice of was arbitrary on my part, you could if you wanted use instead. Along these lines I shortened all of you variable and value names. As the program is set up right now you don't need to pass in a array, but I left it in anyway. As you mentioned this is a homework assignment so I'll leave a bit of mystery as to why this is. And really you don't need the and the . Next note that is equivalent to . And finally (for now) checkout how I initialized and . If you still would like to use your function you should look into the method called . Cheers. 

Style Comments Methods which take functions as parameters ( and in this case) should be invoked using infix notation. That is, if there were a god of Idiomatic Scala Style he would prefer to Defined functions should use camel case, e.g. over . In general, and you will get a feel for this the more you use Scala, pattern matching is preferred over if-statements. You will notice that in your function I've swapped your if-else statement for a pattern match on the value . The last style tip I have for you is to break a chain of higher order functions over several lines. This last one can be fudged in some cases, but in general I find that it improves readability. Efficiency Comment The one change that I made in the name of efficiency was to change the container type of from to . The reason I made this change is that accessing an item in a takes linear time on the length of the list, whereas accessing an item in a is almost constant. And as you know, you are accessing elements of by index is in the last line of . 

You are putting way too much logic into your controller methods. Most of the logic should be placed in a service that should be injected into the controller. The logic in the controller methods really shouldn't do much more than grab a value from here, set a value there and maybe call a function on a service. The most extreme way of achieving this would be to make the entire controller a service, creating a new controller and see how much you need to move back from the service into the controller. In regards to the "how", you may want to take a look at Chris Fidao's talk about hexagonal-architecture, 

Answers to your questions 1. I find it hard to judge either "Sane" or "Decent". I think "Clean" is more important: single responsibility, clear separation of concerns, no side-effects, etc. Reading Clean Code by Robert C. Martin can be invaluable there. 2. If the set method actually set anything this would be less clean as it causes side-effects. Since it is really only another getter, there's no real problem. 3. Yes. This can become problematic. The best thing for it is simply to learn how to write unit tests (it honestly isn't all that difficult) and having tests with your code will teach you how to create code that is easy to test. 4. Yes, the array in setConfigData() is set again every time data is requested by . This is because it is being used from local scope and not from the class scope since it does not have a in front of the variable name. You don't need to make the array an object to resolve this, just load it from class scope using . 5. OK or not is mostly a point of view. Most folks will probably think it is fine. In my personal taste the conditions could be cleaner/less muddled. 6. Yes, MAJOR issues. Configuration should live outside of the class. It can be injected into an object at the point where it is being instantiated. You really don't want for me to edit the framework code when I want an application I build on top of it to alter its behaviour! 7. Personally I would not put all of that functionality into one method. I'd create separate methods for separate scenarios to keep the class signature (or interface) simple and easy to understand. In closing If you feel inclined to look at this from other angles, you should probably also take a look at other data structures that can/could be used for configuration other than an array. For instance, the ARC config component uses a tree structure. If any of my comments seem unclear or need more elaboration, don't hesitate to ask. I will update my answer as needed. Furthermore, as you stated that building a framework was mostly about the educational values, I think you will agree that something as essential as configuration has a lot of lessons in it. You seem to be learning them quite well. Keep it up! 

Things could be cleaned up even further by not initiating classes from the router but injecting them into the router from your delivery mechanism/root/index.php/etc. Further Suggestions You say you're not well versed in any framework but what you seem to be doing here is very similar to the way Silex works, which uses Pimple (which was mentioned in the comments to your question). The learning curve is quite flat so it could be worth the effort of seeing how Silex does things. If studying an entire framework takes too much of an effort I would strongly suggest you take a look at PHP-DI to observe the way a Dependency Injector should work. 

General impression You are not actually injecting any of the dependencies into , you are injecting a service provider that has to locate the dependencies. It may feel like dependency injection but it really isn't. What you are doing here is, basically, creating spaghetti code. Suggested improvements My question would be: What is the responsible for? Your UserProfile class depends on a View, ORM and FormBuilder class. It is in control of retrieving the user from the DB, outputting a header and outputting the user in the view body. The FormBuilder does not even seem to be used. There are several ways this could be cleaned up, for now I'll use "classic" MVC. Assuming (based on the function name) that this class is primarily a View, it should only need the user Data and your ViewCreator to function. Your router would call the Controller that would retrieve the Model and pass it on to your View. The suggestion below completely removes the service locator from the picture. Please note that the code is written for clarity in conveying the message, it is not meant to be 100% working or correct (especially the static call syntax in the controller).