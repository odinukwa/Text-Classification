The above method will do exactly what it was doing before: it will go through all of the files in and pass it into along with . What's different now? 

The user clicks the "play" button in the top right corner. A prompt pops up with a question title in the center of it. This question title is one of the HNQ titles listed on the side. The user then tries to guess which SE site this question is coming from by typing in its name. The user is told whether or not they were correct and they are asked if they want to play again. 

Once you change this, you'll notice that the things inside the object are indented two indents, so I recommend knocking off one indent. 

Notice how I used all capitals for the naming? Generally across other languages, all capital letters is used for constant values. 

The parts are unnecessary and just add noise to your code; JavaScript automatically checks to see if a conditional is , or that it is not a value. And undefined is a value. 

This will really simplify your code in a lot of places. For example, inthosereallylongifstatementswhereyouarecheckingwhichkeywaspressed, rather than going through each coordinate in the conditionals, you can simplify it with a loop: 

Look back at the past snippets if you have trouble filling in the s If you split more chunks of those new for-loops from your constructor into separate methods, your constructor will be reduced to a few, simple, readable lines. It might look something like this: 

Looking at the loop, it would be a lot more clean if, instead of using an statement, you used a switch statement. That would look like this: 

Instead of having a field called and a field called , I recommend just keeping but having it default to . This will tell you three things now: 

This should be up at the top of your class along with the other fields. Other than that, it is a little confusing why that is residing so far away from your other fields. 

No need to treat strings as some ternary value that is only going to be used in some sort of conditional statement. Here is a final note I have for you on this: When writing code like this that will be used by some other code, think about how that code is going to your code. If something's not quite right, then you need to re-design your code. 

In the loop, you are going through the directory and printing out a list of all the file in the directory so that the user can select the configuration file that they would like to work with. You are going to end up doing this every time you go through the loop. It would be a better idea to stick this right before the loop so you aren't re-scanning the directory for files each time. 

Min/max position locators in class This is essentially the same as the previous suggestion to use , but I'd still wrap it all up so the mainline code doesn't have to see how it's implemented. This way or that, it's significantly cleaner, with an appropriately-named . 

Shorter is good, but which reads nicer? Which is more communicative? With static imports, you're still left with: 

The function is very long. Functions should do one thing, do it completely, and do it well. Long functions are difficult to reason about. Move the subject and pupil data entry into separate functions to isolate the functionality, and streamline the mainline code. I'm assuming the presence of and methods, each containing the code currently in the mega-function. Naming conventions Minor, but you call an instance of the class , which is confusing at best, misleading at worst. Non-static-final variables should always begin with lowercase letters. Use typed collections should return a (or ). (Or at least a properly-typed array; nothing with s.) Reduce the amount of code in conditionals There's a lot of code in block that loops over the school's subjects, most of which is the block for when the subject is found. In order to understand what happens if the subject isn't found, I have to scroll down to the end of that block, make sure I'm reading the indentation correctly (assuming the indentation is correct), only to find there's nothing there. In cases like that, might as well do a negative test and , slightly "flattening" the loop's guts. (Code turned on its side is not a graph of how awesome it is ;) That said, this functionality is available in a method--looping in the mainline code isn't necessary. See next. Localize functionality Deciding if a school has a given subject should be moved into the class, for example: 

Essentially the same if needs to be in the collection. My quibble with having the method in the bounding box is that it makes getting the position a bit bulky; I'd actually prefer this: 

It's formatted to highlight the similarities between the two, another option is to use string interpolation again, but it seems redundant in this particular case. (Obviously the string creation would go into a method in some sort of support decorator etc.) All the above is untested, but probably close. 

For me, these things progress in stages. The first thing I noticed was that the logic of the two chunks was identical, just using different values. In my head: 

Don't put type into name ( etc.) Lose the Hungarian; appropriately-short methods remove its utility. Create an and method to get specific coordinates. Create and methods in a taking an . 

Hungarian Ew. A method that's a dozen lines long doesn't need differentiation between parameters and locals; it's obvious. At most I could see naming member variables, but even that... Meh. Interface naming A is just a . An implementation may deserve a special name, but it'd be a "special" in that it implements specific functionality likely worth naming. It's the same reason we don't name things anymore. The interface is the , implementations provide specificity and deserve naming. 

Note: I removed the last line because you weren't actually setting to anything. Now, you can just do this: 

You could even eliminate the variable, but that'd be a little much. From first glance, it looks like you've got some nice splitting up of modules here. 

Add some more comments to your code! I had to rubberduck this code a couple times before I understood what was happening and where. I think at least having a comment for what each variable was doing would help a lot. 

Simplify with regex After creating some sample chat messages and looking over them, this is the format that special beginning part of the chat message: 

Those 0's there don't harm the UI at all. Instead of having that huge conditional chain in your code, you should just use and print out all the time values you have. Going back to OOP, you could extract this into the 's method. 

Now that you have this new variable, you can just use that when running the rest of the code, rather than the specific or : 

This is better practice than using s as those do not specify a direct type for the value; the pre-processor simply substitutes that number as a string into your code and it is up to the compiler to determine a type. 

Right now, the property is empty. Before we populate it, we need to figure out, "What do we want to put here?" and "What does the template need?" Well, it's quite simple to find out what the template needs: the original HTML code was in an so the template is obviously going to need whatever was in the . After looking at your HTML again, it seems that the children of that element that was isolated above only use the from the . That being known, we can now change our directive to this: 

Again, like "tag", "fn" means nothing to the variable; I know that it is a function. The variable name does not have to tell me. You have two options here: 

Nice code! It was fun to review. Note that I do not know how this API you are using works, so I've made quite a few assumptions about it. Also, I've some assumptions about your knowledge of Java (despite your post) because you said you were familiar with other programming languages, so if you have any questions you can ask me in a comment. 

There isn't much (that I see) to say about this code; it is mostly straightforward and easy to understand. Therefore, my review will be fairly short. 

I'd fix this up by moving a line break after the first and then indenting the body of the loop. That would look like this: 

You have a lot of public fields. By that, I mean that you set a lot of properties of the class to public (you use the keyword to create them). It is better practice make as many properties as you can private. That means that you use the keyword when you create them, and that you just reference to them as their name without the keyword. 

Use capital letters for query keywords and consider english names next time - (foreigners' struggle aside) it's always awkward to read them mixed with english based syntax. 

Maybe it's a matter of preference, but IMO Exceptions shouldn't be used for validation errors (see:Don't Use Exceptions For Flow Control). First, it's not that exceptional and second, you should still handle user friendly response: re-display form with error messages (or error list only in case of ajax request). Insetad exception one-liner you should build (View)Model that gets messages from validator and (invalid) data. Other Exceptions (league/country/insert) are ok. They're thrown when user have done something illegal (bypassed GUI). On the other hand it doesn't deserve any specified message then (serve debugging purpose only). The thing that looks smelly is collaborating with league and country mappers. I wouldn't use them at all in this context. I would either handle it with db constraints (foreign keys) that would throw me db exception* or (if I wanted to decide details later) handle it within method. If you intend to use ORM there are propably some sophisticated methods for such constraints too, but can't tell for sure - got allergy to ORM. *) The downside of using key constraints only is relying on something that is hidden outside the sourcecode. Db schema might be messed up (during migration for example) and vulnerability might pass unnoticed. Unless you have full controll over your code it's better to make checks anyway (preferably using transactions). 

A row with column names is what using MYSQLI_ASSOC already returns - no need to use separate query for these names. Also note notation inside while loop - equivalent for array_push() function - adding new rows will result in 2D array you need. Try this: 

method review is imo complete (worth implementing @mjolka suggestion about using stack: open brace => add to stack|close brace => take from stack and compare match...). contains some redundant & duplicated code. If you have repeating operations performed in the tree of conditions that usually means that these conditions might be connected not by its structure but with logical operators. Lowercasing exception arguments shouldn't be neccessary. You won't pass exceptions arguments like you didn't know what it's for. These are predetermined. I'd rather check if is actually a string because it might be user supplied argument, but that's validator's job so after all it's good you didn't do that. My suggestion: 

but it's problematic with large result sets (like dumping entire table) and further processing it would require a loop anyway. 

Note how descriptive variable condition increases readability. Also got rid of a few variables - are still exceptions and are being processed and replaced instead stored separately (good place to use assign by reference). 

I'm blindfolded by spanish names a bit. I understood that you're trying to... set with newest and specified DATETIME of into if it's value is If I got it right, then this single query should work: