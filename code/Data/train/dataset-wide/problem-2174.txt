I am trying to connect to an AWS RDS instance from an AWS EC2 instance. I ssh into the AWS EC2 instance, and then issue the following command: 

I realize that granting root access from % is not a great idea, but at this point, I'm trying to figure out why I can't connect to the MySQL server, and when I solve that, I will restrict access. 

WHM/Cpanel seems to be creating mysql directories for each account in the directory /var/lib/mysql For one of these account, let's call it test, I have the following files (from a backup): 

Am I not supposed to see another line for root@% in addition to root@localhost? The real issue I'm having is that I can't connect to MySQL from outside of localhost (as in, I'm logged in using a terminal session), and if the MySQL server is not giving root universal access (root@%), then that would explain the problem. When I try to connect using PHP (from my local MAC), the following is the returned MySQLi object: 

I have a complicated situation where I would like to prevent inserts into a MySQL table, but keep it open for edits/updates to existing data. Can this be done? I've searched around here, but could not find a similar situation. 

I'm using poorly documented third-party software that does esoteric things with PostgreSQL 9.3. At some point during its setup, it attempts the following: 

Can I copy the PostgreSQL data directory on a macOS (10.12.3) machine to a Fedora (25) machine then expect PostgreSQL to work on the destination? I specifically want to avoid / because index creation would take forever on the (much slower) destination disk. PostgreSQL versions are identical on both (9.6.2). Both are 64 bit Intel machines. The macOS machine is running PostgreSQL from Homebrew. The Fedora machine is running PostgreSQL from the official repo Related question: is there somewhere in the official PostgreSQL docs that gives an answer? I searched a bit and couldn't find it. 

I'm running a PostgreSQL 9.4.x instance on Amazon RDS. I can successfully connect to that server using SSL using a command line similar to this one: 

As far as I can tell, on Amazon RDS you can't edit , so I can't put entries in there. This AWS blog post suggests how it could be done with MySQL, but I can't find links to similar information for PostgreSQL. My motivation is to prevent myself (or other users) from accidentally transmitting sensitive information unencrypted across the network. 

Vacation time that spans from December to January can't be counted in both years, only one. There's no way to know if they "used" time that was going to expire. So excluding it from my calculation will just leave them with a negative balance if they did. Getting the "base hours" an employee gets will require selecting a specific balance sheet item that they system added at the beginning of the year. The system automatically inserts 96 hours for each employee at the start of the year. 

In this scenario, my system would process, let's say 5000 emails at once, and increment the counter 5000 times. On the other hand, I could just use an internal counter ($i) and when the process is complete, just add $i to the usage counter. But what if there's an error during processing? I could lose my counter half way through. Another way I could think to do this would be to save batch operations, so when we process 5000 emails at once, we just record that: 

That way, when it comes time to process billing each month, we just and process that. We're going to be billing people based on this mythical usage tracking, so any advice from someone who's done it before would be appreciated. UPDATE: My project's been put on hold for a short bit, but I will definitely mark an answer when I start working on it again (this is a high priority, so it won't be long). 

How can I force clients to use SSL (to make eavesdropping harder)? The following should fail to connect: 

What permissions do I need to grant to allow this statement to work? Note #1: I tried granting all permissions on that table to no avail. from reports the following ( is my superuser's name): 

Suppose there is a PostgreSQL server running and it has SSL enabled. Using "standard" Linux and PostgreSQL tools, how can I examine its SSL certificate? I'm hoping for output similar to what you would get from running . And I'm hoping for a one- or two-liner command line answer so I don't have to resort to running a packet sniffer. I do not have access to the PostgreSQL server, so I cannot look at its configuration files directly. I do not have a superuser login, so I can't get the value of the setting and then on it. Using doesn't work because PostgreSQL doesn't seem to want to do the SSL handshake right away. From a quick look at the documentation, I could not find a command-line parameter that makes it show that information on startup. (Though it does show me certain cipher information.)