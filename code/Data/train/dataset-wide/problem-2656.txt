Depends on the context. If you are unsure about the name, just explain the function with a comment. Depends if you would ever need unfiltered output. In this case that looks pretty unlikely, so I would include the filtering. See above. 

IO: You use everywhere and (BTW, is much more convenient than a ). Even if you want to switch from console output to a simple Swing application with little more than a text area, you have to change everything. Same story if you want to provide a translation for your game. So follow the the Single Responsibility Principle: Your model classes like and should care about the state of the game and its transitions, and not about IO. Even if this is not a perfect separation, it's still better to send Strings to an class, and ask it for input, than doing everything locally. Then the class is in charge how to present the data. Later you might want to send just messages like or to IO, which gets the real output from a text file or so. Room: cascades are written better using . In your case an array with all strings would be even better, you need just to get the right one. 

You can over the directly, getting a . Or you can over and just get the . Either would be preferable to going over the just to get to the (and you don't check the return of ). I'd also change the name of your variable since the trailing implies that it's multiple dictionaries (FWIW, I'd probably go with just just so I didn't have to ever read a potentially offensive word over the phone; but that's just me!) 

Ok, now we have enough to get to refactoring the class. Currently, your class has too many responsibilities - it's showing the menu, tracking the current state, and adding/removing products. We're going to trim that down to just showing the menu and tracking the current state: 

That should clean up the code some. As I started typing that, I figured I'd check for edge cases too - since is filled with them (eg., it includes the negative sign in the length, returns if it overflows, etc.). You're handling the case, but a couple of edge-case values fail: 

Customer and Item classes Well, to start with, isn't used and I don't see how it could ever be. So that should just go away. Your naming style is off for C#; you should be using PascalCase instead of camelCase for public methods (eg., AddItem). and don't add much value; they're OK as-is, and are actually a reasonable encapsulation - but they're kind of overkill here. (as an aside, your class doesn't include , but I inferred it from your ). This comment could really be directed to the whole structure, actually - since you really just need a to solve the problem. Not to say the structure can't be useful, but I would consider it overkill unless there's some future plans being made here. Program class Your class sets a private member, but never uses it outside of ; it's odd to have a class instantiate itself like this. In this case, you can just use the as a local. will take an object and call on it for you; no reason to use the format overload. 

Of course this code will fail if the types are not the expected ones, but at least it will fail early, and it is already inherently "dangerous" code. On the other hand, it's reasonable to expect that Hibernate doesn't mess it up out of the blue, once the types are correct. Note that supports keys (although IMHO this design decision is questionable). 

I'm not sure this is faster, but it's worth a try. Concerning lower-case variable and method names I thought about things like . 

While everybody mentioned optimizing , nobody spotted the one glaring ineffiency: You can break the loop as soon as . Further you can skip the even divisors except 2: 

However, this is not the best way to generate a list of primes. Read the excellent paper $URL$ for details. [Edit] I forgot to mention $URL$ with many interesting techniques. 

Eliminating the while loop isn't that straight-forward, maybe someone else has an idea how to avoid that Iterator train-wreck. [Edit] I asked in another forum for a better solution for , and got this answer: 

I broke the class in several methods with clear, testable sub-tasks. Most notably things got cleaner and easier when I used the right data type, which is here Complex. Don't stick with the standard classes / primitives if they don't really fit. Of course if you want to reuse and extend , you should make it a top level class. 

This is basically a pipe and filter pattern - where you construct some number of filters into a chain and just pass the outputs to the next filter. If you control all instances, then the simple thing is to abstract out to an interface: 

Your unit tests for now only need to be concerned with the results of - which verifies the was constructed properly (an important bit to test, since it's weakly typed). You can dress it up with generics, extension methods, builder patterns, etc. - but that's the basic pattern. 

Ok - now we've got most of the pieces, we just need to put the actual program logic together. Let's move on to the method: 

Well, the calculator one at least could be simplified since you're always adding/subtracting the same: 

Ok - that pretty much gives us our product management functionality. Now, on to UI. You've got the right idea here - console input/output should be handled generically, so let's expand on that idea and write a few generic helper classes. A good way to think through this is figuring out what portions of what you need to do are specific to your app, and what is a generic concern. You should try to split those as much as possible. These won't have anything to do with , so they'll be reusable in a different console app. 

Note that unnecessary comparisions will be skipped in the cp methods. [Update] Apache Commons does something similar: $URL$ 

You tagged the question with "array", but I think this is the wrong data structure if you want speed: You need to cycle only over a and b, if you can find cÂ² quickly, and this is difficult with arrays, while s or s provide typically O(log n) access time. I used a here in order to being able to look up the squares quickly, but to recover the original values as well. Note that having the method is crucial for avoiding overhead and duplicates. 

Additional to sepp2k's excellent answer some math that could help you: If you have the prime factors of a number, you just take the exponents, increase every one by one and take the product. 

I'm not satisfied with my solution for , which uses explicit recursion. I'd like to have something like a fold, just not linear but with different "branches". 

So try to condense your logic as much as possible (as long as it stays readable). Learn about the laws of logic (e.g. de Morgan's rule). I think you could improve speed by collecting bigger chunks of output in a , instead of spitting out single chars one by one. Last but not least, follow good coding practices: 

In general, is this iteration pattern safe and sensible? is a drop-down, is validated and will always be filled. 

Is this an efficient way of solving this problem in terms of time? I'm currently iterating over the initial array twice. Is there an elegant ES6 way to do this in a single pass that I'm not seeing? I believe memory to be less of a concern (because I exactly double the amount of memory used while processing by generating two new arrays that together are the size of the original); am I correct? Are there any scalability pitfalls doing it this way? As usual, any other comments are welcome. 

I have implemented the following jQuery (fragment) to clone each 'timesheet row' along with the tags, which are not caught by : 

Background My team develops in a git monorepo. User stories are broken into very small discrete sub-tasks and merged directly into , rather than into a feature branch for the story. Topic branches Our topic branch names are all of the form . Those are pushed to origin and merged via a code-reviewed pull-request process. Release branches We also maintain long-lived release branches named used for hot-patching. Release branches are never re-merged to . The individual fixes, if relevant in the current release, are re-implemented in another branch or applied as a patch. There are few enough of them to manage manually. Work This works well for us, but it means we have hundreds of topic branches hanging around as developers often forget to delete them as they go. I wrote a simple bash script to 

Well, you can certainly make it easier to read by cleaning it up a little bit and getting rid of the extra () loop, and substituting a and for the inner () loop's concatenation: 

For file IO, the way you're currently doing it (saving after each add/remove) you could add it as part of : 

From there, any further optimizations would be heavily dependent on your data and would need some example data of the correct relative sizes to profile and test. 

Couple of quick comments, since you don't really specify what you were looking for. Seems like everything other than should be ; I probably wouldn't make them extension methods either. I think the whole thing would be better suited to a rather than 3 or 4 coupled methods. Your recursive is an odd implementation that I haven't seen before. It looks like it'd work OK, but doesn't seem standard. Your method seems broken; it never adds the ; I'd probably just replace that class with a or something since it doesn't seem to add much value but could be a breeding ground for bugs. No reason to on ; just return the generic . What happens if or is ? Looks like a , when I'd expect a list of all the added or deleted instead. 

I shot myself in the foot several times when I hard-coded file names etc. Now I put such "static" data usually in property files. That way it can be injected easily, too, e.g. using Guice. 

If and are so tightly coupled with the feasibleNeighbor-calculation, maybe you should have something like a class which is holding all of this stuff, and which you can ask for the next neighbor list? 

I see some problems with your code: It is not DRY, you calculate results that you never use, and you do "too much" in the -cases. Also, try to find expressive names for your variables (not based on the type, but on the function). I know you're just a beginner, but maybe this is a good opportunity to learn about lambdas. There is an interface for the kind of "operation" you need here, which is called . You can easily create instances by using lambdas, pass these instances around, and call them later. This split between creating some kind of operation, and actually using (or reusing) it is an incredible powerful tool. Have a look: 

If you don't use such tools, you clutter your code, and after some code changes you might even end up measuring something you didn't intend. Further it is much easier to change behavior afterwards (e.g. printing the timings immediately, or log the timings instead) if you have only one piece of code dedicated to that task. 

Once you have the of the integer portion, you can use the format specifier to get the correct number of decimals, which would clean up the string building part. 

Now that we can see that we're looping over all the rows for each , we can change to traversing once and pick up any along the way. This effectively flips the order of iteration (I'm assuming there's more rows than query strings). To get rid of the nested loops altogether, we'll switch to using to find any matches. We'll also drop the check on each iteration for a single call at the end. That should keep us from iterating multiple times. 

I'd advise that if you're looking for 100% compatibility with here, you'll probably want some extensive unit tests. Here's what I came up with that handles the edge-cases I threw at it, but I don't expect it's bullet proof either. Main changes are using the format specifier, and using to get the number of digits before the decimal place instead of . 

will exit at any key; you want to change your message or change that to to require an . AppCoordinator Your class is a major code smell; it's a (no offense) terrible name that really doesn't describe what it's doing, and is likely to become a "god object". I would rename that to or or something. Since this is your largest class, the meat of my comments are here: 

The verbose prompting at every stage is intentional as reassurance. Concerns Primarily, is this "safe", meaning: 

Have I used an appropriate method to list branches? Have I used an appropriate method for deleting branches? Have I accounted for all possible pathways that could result in destruction of a local branch? Have I adequately guarded against destruction of a local branch not merged into ? Should I verify that topic branches have been merged into origin's and not the local , in the event that a user mistakenly merges locally and loses their branch? 

I'm designing a small intranet-based time-tracking web app that accepts an unknown number of data "rows" which each consist of 7 form fields. Rows can by dynamically added by the browser. Can I do better? Given this (partial) example POST data: 

Problem I am sorting an array of objects. Each element may have a property called or it may be . When defined, it is a user-provided string (which is why I use ). If the is not available, that element's relative position in the final list is irrelevant save that all blank references must appear grouped together at the end. Implementation