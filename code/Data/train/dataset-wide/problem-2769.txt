The naming is pretty terrible. Snake_Case shouldn't be used in C#. If you can change all those to , it'd be great. Also, variable shouldn't be PascalCased, but camelCased. So . Lastly, try to use only when it's possible to guess the type used by reading the code. Right now it is impossible and it makes the code harder to read/review. Edit : I don't think this code even works. Is an or a ? Or maybe a ? Because you use it in the function, which takes an , but you also check for , which isn't a possible value for . What does that mean?? If you check , you can remove all the checks for that, it'll never happen. 

To make the example even clearer, I will show how the algorithm behaves to find an entrance (Don't forget that it only works on the bottom row of the array, which is assumed to contain some walls.): 

First, it's confusing. Maybe you forgot to write a condition, maybe a for? I don't know, and it's confusing me. Remove those brackets. 

In your prompted message, you always use and specify the line breaking character . Instead, you can use which sums up to : 

Is it better? That, I don't know, it's a matter of opinion in that case. PS: You might want to add attribute above your controller's actions. You don't want people to reach these actions with a , or , it'd be weird. Thanks to @Heslacher, there's a way you can cut on some duplicated code by delegating the creation of somewhere else. I would recommend creating a second constructor to this ViewModel that would look like this : 

As a part of my (future) MVVM framework, I need to be able to detect changes on an object. To do this, I used the , a C# object that implements Aspect Oriented Programming to "intercept" calls to an object's method. In my scenario, I'll use the proxy to intercept calls to a 's setter to launch an event, . 

That is pretty simple. It states "Anything that implements me should be able to create a problem using a configuration". That's exactly what we want. Always try to keep your interfaces as clear and concise as possible! (Your previous interface was fine, it's just a tip!) Next, what would an implementation look like? 

In my example, the entrance is found at . As it is a first iteration, the maze is expected to have only one entry, which is valid, which will be situated on the last row of the array. @DoubleDouble already pointed out a flaw of my algorithm in his answer. If the maze contained an even number of "columns", the entrance could be either the "left" or "right", it doesn't matter. To find the entrance to my maze, I wrote the function , in my class : 

my code and comments are self-explanatory enough that I don't need to explain my code. the expression generation is good the caching method that I use for the expression seems good. 

(This may not be the best implementation ever, but eh, it works!) Or you keep your well written recursive function! :p Because there's nothing to say about your code other that it's perfect in its purpose. Nitpicking : You might want to check that isn't a negative number! 

Going this way, the clients that uses your repository could create a query by themselves, which means you don't have to worry about the quadrillion possible queries (With ,,, etc..). The danger with this method, and with your current method, is that I, as a client of your repository, don't know if the query was executed or not. The interface, as the interface (since the first implements the second), defers the execution of the query. Meaning that each time I call a on my query, I return to the database to do the query again, which is super expensive. I don't know if that's clear, so here's an example that uses the method (Imagine I added the method to the interface): 

You could argue it's a useless change, but I think it's much clearer without the operator. Since your is casted to a , you should use instead of here : 

Now, I need to talk about the recursive call. Recursion is, in my opinion, a beautiful monster. It is a pain to read, to write but so awesome once you understand it. In your case, recursion seems a little over the top. Recursive calls aren't that great, seriously. You could make this a little easier to read (and write) by using a loop. 

I don't know what 's type is. And it is used alot. Also, I don't know if that method is yours or an external DLL, but that doesn't respect the naming conventions. It should be, I believe : , or a property . Unless for sure, this method call codes something. But it doesn't look that way. This : 

But, well... Maybe, just maybe, using this : would be good. It removes LoC, and well, considering it's on the same line you can't really introduce bugs. But that's just my thing, I dislike having brackets everywhere for returns. Finally, maybe it's just because I have very minimal knowledge of the winapi but this : 

What happens when is below zero? Did it completed or not? Either way, have an empty content for your is weird, you should remove it, since you do nothing in it. 

One of the problem, I think, is that you should check if both number are equals before doing anything else. Why bother doing arithmetic computing (in your ifs) for nothing? Also, you should have a method that solves your problem, and do the IO in the method, not all-in-one. But the main problem is that you repeat your conditions. Here is written twice : 

Which is much cleaner and it takes less space. Also, you have a public empty constructor, but you don't need to define it. Since you don't have any constructor overloads, you can ommit writing the default empty constructor, it will be there by... default! 

You should separate the method from the class, so that your class truly represents an elevator! You could have, let's say, a class, that'll call your class. Second, your methods and fields shouldn't be static. Usually, when your class has a state (such as the current floor), your object shouldn't be static. This way, you could have 2 (or more) instances, and they won't collide together. The elevator shouldn't start at a random floor, imagine a real elevator. At it's first use, there's a big possibility that it starts at the bottom floor (at least, I guess, I'm no elevator expert!). Let's start this elevator at floor 0 (the basement). So right now, I assume your elevator is used by only one person, because a real elevator might not come and get you if it isn't going in the direction you want to go. Your class name should be capitalized and your method named should be camelCased so : instead of instead of instead of Also, the Java convention specifies that your brackets should be "egyptian style". Which means : 

I'm writing these pieces of code to parse expressions in the context of a dice rolling application for DnD. It's pretty much my first try using and I'm not that good in . It is also the first time I write a syntax tree. It's been tested using the Jasmine framework. I'll split the question in two blocks : Parsing the expression into tokens a.k.a converting to ). This part of the code is fairly easy but I find there's lot of nesting for such a simple operation, is there maybe a way to take care of this problem using the map/reduce pattern? : 

In your class you expose a public field, which is a , you shouldn't do that. Instead you should expose a read-only property interface (Like or ) and initialize this property in your constructor. 

You don't need to check anything else, considering that wether you have , , or , the incremented value doesn't mather since there's only 3 numbers, all you need to check is that is smaller or equal to . Now, let's put this all togheter in a clean way : 

In your method, you use the numbers 4 and 13 in your loops, 8 in a . This is a common anti-pattern named the Magic Number. Reading this I (who knows nothing about BlackJack) cannot understand what your code does, why is it 13 and not 27? (It is understandable after reading the code that it is the faces and suits, but still!) You should put them in well named constants so that it is easier to debug/read for any programmers. Plus your method shouldn't do the job of getting the card value, leave that to the class (as I shown above!). In the method, you use a with an index, maybe it's just a matter of opinion but why not use a ?