In your function, there is no point in calling as the variable passed in from is already a capital letter. 

If there was some sort of error while making , the rest of your code isn't going to work. At this point, you just exit the function and return something like -1 to symoblize an error. 

Don't feel the need to answer all of these in an answer. Any other recommendations are also appreciated. 

To fix your code, let's start by taking one of the functions and working our way towards having non-repeating code. The function we will work from will be : 

Your current code already follows this structure. However, as show above, it doesn't quite do what it seems. 

See that? You have to write two entirely separate clauses just to handle ID's. That's pretty ugly. However, if you follow that advice of forcing the function to return an array no matter what, then you can remove this conditional all together and just keep the second clause, which handles arrays. 

The only local variable that is being created here is ; all those other variables are global. Experiment Run this in your console: 

See what is happening here? Using and setting different indexes in the folder array is just like using , , etc. Then, that small conditional you have at the end is just as easy to implement: 

This is a little nit-picky. In the signature of , since you aren't looking for any command like arguments, you should put in the arguments space. 

We'll be using this logic again later, so it'll be best to extract this into it's own function and have both your and functions take the single as a parameter. Then later, in your function, you can simply use the lookup table to find out which table to delete: 

Here's a list of everything you need to do to figure who won When I've made TTT programs in the past, I always thought that the best way to determine a winner was with a list/array of all the possible win conditions with a 0-based, linear board. Here's what I mean: 

Also, while I'm not that familiar with it, is it still good practice in FP when one of a method's inputs is the object itself? Either way, this could refactored to a separate function: 

Indentation You have none! Which, in my opinion, is better than having bad indentation. Luckily for you there is a handy-dandy tool that you probably already know about: JSFiddle. At the very top of the page is a button labeled "TidyUp". 

As codesparkle said in a lighter way, your indentation is pretty bad. Here is how your indentation should be: 

Look at both your appends: that are appending the exact same string. Therefore, we can just store this in a variable: 

The accumulator is a register that is used to hold a single value that is often the result of arithmetic. More simple instruction sets (such as this one) force any arithmetic to be done with one of the operands being the accumulator. See what the difference is? Your comments seemed to act as if there were no conditional whatsoever. More accurate comments would be: 

Then, you can simplify your code even further and do what you are doing in : calling the function again, but with the return of . Here is the whole function now: 

Notice that last line; it uses the new parameter to keep track of the value that it would normally be returning at this point. Now, instead of constantly building up on the stack, the will completely finish executing before the next function starts. This keeps the stack size constant. Now, to call this new function, you would write: 

After I did a little playing around in a LinkedIn page's source code and I found out that LinkedIn already uses jQuery: that means you don't need to worry about checking if jQuery exists in the page because the page already has it. Therefore, you can strip away all the jQuery injection nonsense, leaving your code looking like this; 

My guess on why this gets sluggish is because you have an infinite loop in that creates a new thread every loop. 

By not having the keyword, you are creating a global variable, which means that other variables will not be able to share the same name as that variable without affecting the original variable (which can prove troublesome with iteration variables like ) 

I don't believe that the call at the end of your code will actually run. This may not be necessary, as the socket may close automatically, but I would set up a signal handler to close the socket when someone tries to exit the program. You can use the library. I came up with something like this: 

Now, all the controller information would go in this function. It is just like a normal controller that you would write. Note: Although I am not 100% certain, you may need to add to the object that you are returning. This will allow the controller to access to the scope outside of the directive, rather than just in the directive. 

This method does just what your function is doing, only it allows for inputs such as , returning an array of all matches. This would probably be the best option, unless you wanted to try and implement it yourself (like above). 

Why? Well, since you created in that variable chain, it is created globally because there is no keyword assigned to it. 

To me, it would make more sense to use here because you are performing the same operation to each of the elements: 

In the "..." section, you would put something like a name field, a constructor, and a method for getting the name. 

This doesn't make a much of a difference, but it speeds up your code a little bit. Instead of storing the result of a calculation in , it would be faster to just pass the return value an arithmetic functions into the statement/function that you will it next in. For example, the end of the "1" (addition) section of the switch statement would look like this: 

I recommend creating a class for users so information is more easily stored. It doesn't have to be too complicated; just a simple storage of values: 

This improves the readability of your code by a lot, because it gets rid of all the strings floating around your conditional statements. 

The special cases are the first and last element: you've written two conditionals and are storing extra data just so you can handle these two separately from the rest. Rather than that, it would be a lot simpler and a lot cleaner in the loop if you instead modified the elements after the loop: 

Braces Always use them, even around single-line statements. They make your code more maintainable and less error-prone. 

This review was just mean to point out practices. I had trouble understanding the content of the code (a better documentation probably would've helped). 

Versatility Right now, this function will only copy elements to the space before all the elements in an array that would be returned from an array-inducing selector (such as ) if the second argument is a string. But what if I, the code using your library, has already gotten the elements with ? Now I can't use your function because it only accepts single elements in when it is not of type string. To make your code more versatile, you should expect that is an array if not a string, and then to loop through the array appending the element like you do in the part with the string, like this: 

Versatility Right now, your code only supports Fizz, Buzz, and Fizzbuzz. But what if you wanted to change things up a bit? Say you wanted to say "Fizz" every fourth number? To do this, you'd be adding quite a chunk of code. Although, there is an easier way to do this; use s. Say you created this : 

Too modern In the version of C described in K&R, there are no single line comments. Therefore, there is no need to worry about them in your code. Yes, your code is good to include these; there's nothing wrong with taking an extra step. However, since you are following an exercise, I thought I'd bring it up. 

In this method, you would use a for-loop and to create a bunch of button elements and append them to the body of the code. I'm not sure if this is the best choice, though, as it is generally discouraged to generate HTML from JavaScript. However, if you were to try this, it might look like this: 

I would recommend moving the JavaScript to an external file. It will aid maintainability in the future. 

No; you aren't subtracting 1st parameter from the 2nd and 3rd ones here. In reality, these two statements are the equivalent of 

Add some documentation to your functions. In your documentation, you should include things like what each parameter means (if there are any), what the return means (if there is any), and a short description of what the function does. I wrote this for your function: 

Now, your function can simply throw errors/exceptions (custom or not) and this will catch them and display them to the user however you like. 

First off, your documentation is incomplete in a few places. For example, in your function, you didn't fill in any of your documentation, except for the part. And, in your function, you only filled in , , and . Finally, also in , you called the parameter "rows" in the documentation and called it "cols" in the function signature. Choose one and stick with it. Documentation is a very important part of every function. 

untested right now, but should work; tell me if there are any issues. This will make so that if a client attempts to visit any path that is not already specified under , it will automatically go back to . Aside from that, you should specify a for your . To start, you can use (comes with the router): 

Hmm. An array that has variables that each are assigned a value. Hmm. Oh wait; that sounds like an object! Instead of reinventing the wheel and creating this array thing that's values are assigned to variables too, you should just create an object. Here is what that would look like: 

EthanBierlein already covered most of the big parts of your code. I just a few more small things to point out. 

Your variable names should describe what the variable is used for and/or what it means; this allows anyone reading your code (that includes you if you were to step away from the code for a while). Having short, one-letter names or cryptic acronyms does only hurts your code. I wanted to review more of your code, but I could not understand a thing because your variable names said nothing. 

Angular's directives allow for HTML to, like normal code comments should, explain why and not how. It is much easier to read HTML code that has a directive in it than it is to guess about the how the rendered HTML tags would look on the user's screen. When someone is just reading your HTML code, that doesn't matter. 

In fact, let's take this one step further: let's store all the buttons in an array. This is very easy to do with . This will return an array of all the elements that are of the specified tag: 

You could completely get rid of needing to set up an event if you move this script to the very bottom of the DOM body. I don't know how this affects performance, but I assume it would be slightly better now that it doesn't have to worry about an event. 

Only, rather than hard-coding the tags into the code, this is just using the tags from the object that we already created. Now, all that's left is to check the data property and set the new image. Here is what that looks like: 

While I agree with EthanBierlein's points about the vs , there is something that I believe he missed: you don't use nor do you use at all in your code. I did a little CTRL + Fing through your code and not a single or turned up. You can just get rid of these. 

You did a very nice job organizing your code. I especially like how you used operator overloading for collision detection! 

This may be a little confusing. Basically, what this is saying is that the directive is going to read the attribute by the name "profile", and pass it on as a "parameter" to the template under the name "profile". When using the directive, it would look like this: 

Here, you are looping through the "array" and printing out each character. However, you are over-complicating it; why not just print ? 

I'm not sure if this comment is entirely true. If not, it's not entirely clean. When I see that code, I don't think, 

There! Now, when calling this function, the code simply has to pass in the type of the fight and the enemy name. (I called it "type" because I figured it determined the strength). 

With this, your code will become much, much more easy to read. If you have trouble keeping track of indentation, get a text editor. Most text editors will automatically indent for you, making it so that you don't have to worry about it yourself. Here is one example for where your indentation could be fixed: 

Create an array of the names of classes that you might set the state to. Iterate through this array If the state string passed in via argument is equal to the string that we are currently on in the iteration, go to 5 Go to 2 Set to an instance of the class referenced by the string. 

This is kind of a dirty way to populate an object. It's just like creating a blank array only to populate it's indexes in the line after, like this: 

Game class First off, why is it a class? You are only using it once. It makes much more sense to just save the class's fields as normal variables. However, if you want to keep the object oriented flow, you can make this an object, and access it's fields as like: So instead of this: 

Now to check rows. Wait, no: columns. Wait - er, doesn't it really matter? You guessed it; your code is pretty wet. Just stick your and functions through a diff tool. Really, the only major difference is this line: 

Instead, you should create method for this component. All this method has to do is just return the initial state in object form. So, it'd look like this: 

Now that there is a conditional for in the new structure that I created, there is no need to have that conditional in the loop. 

This is highly debatable topic, but I have been taught by people that it is always better to use the pre-increment operator over the post-increment operator. By that I mean this: 

That way, every time you are checking if an number is odd, you don't have to write a comment about it. 

Joseph the Dreamer's answer pretty much covers everything. I just have a few things to say about React practices. 

Then, when called, will go through local storage, taking all of it's data and copying it into this object (you can call it something else). Now, instead of accessing localStorage when looking for and setting data, we can use : 

See how this works? The ternary is checking the same exact thing that the was doing, only this time it's only setting . Then, after the ternary, the style property is set.