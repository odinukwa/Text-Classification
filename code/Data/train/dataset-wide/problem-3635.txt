And sure enough if I look at the WMI namespace the Software Updates Patch Downloader is connecting to, it doesn't look quite right: 

My Mac clients RDC to a Windows 2008R2, each client has their own USB printer....each rep wants their own printer. For the love of $DIETY, do not allow this to happen on your watch. Here's why. In our environment we have between 350 and 400 workstations. We have about 220 devices that have printing functionality. About 90 of the these devices are tried and true business line HP LaserJets (recommended and supported to a degree by IT). The rest are a complete menagerie of different models, make and quality. A lot of these devices are COTS all-in-one "Costco-special" devices. A lot of of them are entry level SOHO printers and MFDs. A lot of them are a wide variety of copiers. Largely people have pretty much been able to get what they want. These devices (and this kind of setup - which it sounds like you're leaning toward) is incredibly resource consuming to manage. One just because of the sheer variety and two because locally attached COTS devices suck. For the amount of time (read as: money) staff has put in trying to cajoling these devices to work we could of easily replaced most of them with a more appropriate business line product. 

This should automatically append corp.mxxxxxxs.com to $HOST so you have a FQDN that correctly resolves. See the manpage for more details. 

I have a functioning DHCP/DNS (ISC Bind 9.6, DHCP 3.1.1) server running on Debian that I would like to add DynamicDNS functionality to. I have a pretty simple question: Does DynamicDNS require (or recommend) separate sub-domains? I have seen a few tutorials where the the clients that are acquiring their IP addresses and other networking information via DHCP are on a different sub-domain as the servers which are statically configured (both in terms of IP, and DNS). For example: All the clients are on ws.example.org and the servers on example.org. Right now all of our servers and clients are in the same domain (example.org) but spread across different zone files (because we have multiple subnets). The clients are configured with DHCP and the servers are configured statically. If I want to setup DynamicDNS for the clients should I use a separate sub-domain? What's the best practice here (and why or why not would it be a bad idea to do otherwise)? Thanks. 

If you have a managed switching infrastructure that supports netflow or sflow you could always monitor the traffic generated when you start your game to see if it within an acceptable range. Like Bill Nye says, "Try it!" (and then let us know what your results were). 

You can't really do this. Your card only has one MAC address but multiple IP interfaces. They will need to have their addresses statically assigned. When the DHCP server sends back the DHCPOFFER how does it get delivered to and not to ? sends out a DHCPDISCOVER or a DHCPREQUEST by broadcasting. The DHCP server responds with a DHCPOFFER to inform the client of its IP address. But how will the DHCPOFFER arrive if doesn't yet have an IP address? The DHCP server broadcasts back and relies on the link layer to correctly deliver the ethernet frame (with the other associated layers stacked on top of it) to the right MAC address. And now your device has an IP address. The problem for the DHCPOFFER is that from a Layer-2 perspective the two "devices" ( and ) are indistinguishable, and so (from a Layer-3 perspective) the DHCPOFFER is destined for 255.255.255.255 (because doesn't yet have an IP address). You can get around this by using VLANs. VLANs will allow you to take the same physical broadcast domain and treat it like multiple "virtual" broadcast domains (hence the name). 

This hunch was correct. I got a hold of my predecessor and apparently the first and unsuccessful attempt to migrate from SCCM 2007 to SCCM 2010 used the site code. How it managed to sit dormant in WMI all this time and why it got "activated" is a complete mystery to me. I very carefully re-read the solution in this TechNet post which advised deleting the old namespaces and decided to try that. I kind of hesitate to mark this as an answer even though it did resolve this issue, it indicates that I implicitly approve of it, especially since I couldn't get anyone "official" at Microsoft to confirm whether or not this was a safe approach or what the consequences were for doing this. That being said, make sure you have complete backups of your SCCM server or at least a much more intimate knowledge of WMI before proceeding. You could very easily break everything doing this, especially if like me, you're not familiar with WMI and how deeply SCCM leverages it. 

Since 1.9.11 Nginx supports dynamic modules and they have nginx-module-perl. To use nginx's official repository create file with following lines ( is codename for Ubuntu 15.10): 

must be outside of any block and it's global for all nginx config. We have to define named variables before using , because as soon as we use it, it will ruin all positional variables (, , ...) because of using regular expressions. So will not work, because - will be empty. 

Just turned on rewrite log and debug log and found out that your problem is in rewriting to . Unlike Apache, nginx takes it literally and rewrite request URI to string . Then it cannot find any block that matches this URI and uses it's magic that just happens to have all the server rules. So new URI goes through all the rewrite rules again. Here is the log: 

It's really basic and simple. Just add part to and nginx will replace s prefix with that path. You need to replace with , so do it: 

You didn't set root directory so nginx falls back to default one that is and it doesn't exists. Just add (or some other existing path) or, as zezollo suggested, create . 

In your case, you must place it beside block, because you custom config file is included right inside block in nginx.conf. 

So you wan't to don't cache by default and have some header to cache. You could do it with directive: 

Also, it's better to test redirects (especially permanent redirects) with console tools like or , because your browser is likely already cached redirect and will just use it without actual hit to the server (that's the main reason of permanent redirect). 

You are using in , but rewrites , so nginx doesn't rewrite request to and it is passed to your app as is. In general, you should always use trailing slash in directive that should match directory (unless you're absolutely sure, you don't need it). Also there is a shortcut for this common case to replace location prefix in nginx. Try this one: 

These locations are different. First one will match for example, that might be not what you expected. So I prefer to use locations with trailing slash. Also, note that: 

But my guess is, you need to move this into , this will make sure that php-file exsists before pass it to PHP-FPM for processing. All other files will be served by nginx with proper use of directive. 

You must define port in every entry in . If you don't nginx will set it to . So actually means . You could define several upstream blocks though: 

There is no way to use variables in matching. If you want it, you probably doing something wrong. In this case you could try nesting locations. 

First of all, remove Second, you had header and browsers remembered that for 2 years (as that commented out header says). Add it back with to remove the effect. If you can't do that (or want immediate effect) clear HSTS from your browser like this article says. 

Server1 has most specific match to the request: IP:port, while two others match only port. So nginx choose server1 for all requests that comes to this IP:port pair 

You express configured to serve path , but you requires . Either configure express to serve or make nginx to strip from proxied request. Latter is as simple as add trailing slashes to and . 

When you use without directives, nginx will use some default headers. Most times it's what you would want or, at least, harmless, but in your case you have to set them manually. When you write , nginx will set . If you need another header, you should set it explicitly. Most common is to use (or ). So this should work for you: 

I guess, you mean location as this is the “minimal” location. You could use “exact match” () modifier: 

Nginx's module (where variables and directive belongs) is quite non-intuitive and fragile. But, actually