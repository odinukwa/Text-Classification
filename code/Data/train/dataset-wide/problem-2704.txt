Yes. You can use a solution based on passing a std::shared_ptr or std::unique_ptr (unique_ptr should be prefered if you are passing ownership, like in your example). Second edit: Alternately, you could try implementing this: 

In this (simplistic) example, the two are functionally equivalent. In practice though, shares state between calls, even when you don't want it to (e.g. you may want to call this from multiple threads in the future, each with it's own ). Both are acceptable and correct C++ (YMMV), but the alternative leads to less (hidden) side effects, more testable code, more re-usable code and a better habbit to cultivate in written code. 

The second function should have similar changes. Final code for first function you wrote (with no dependence to unicode and all my suggested changes): 

It's a monolythic monster. It works, but if you have the time, you could benefit from re-writing it (using c++ alternatives). 

Otherwise you will have a class that (instead of reporting an error to client code) stops your application with assertion failed. Consider that, as it is right now, you will be unable to write a unit test for (such a unit test would not pass with a "failed allocations" message, but stop your unit testing suite execution). 

This will make your destructor trivial, and after this, your destructor should be removed (the code that is easiest to maintain is the one you don't have to write at all). 

Note: The algorithm is not equivalent to yours, but it's the interface/client code that looks interesting, not necessarily the implementation of the functions. 

... and defining your allocation list using std::forward_list; This way you will make your code smaller and more idiomatic, increase code reuse and use an already tested implementation of a list. 

For a professional cryptographer (which I am not), it would be very easy to crack, due to the following factors: 

I took the same way with my unit testing (for personal projects I develop at home) but for production code, this is a bad decision to make. I stated my unit testing lib roughly two years ago, and every two or three weeks, I keep adding features to it (and it is still not complete). Here are some things I would not do (and why): 

What you don't know looking at this code: should you delete after the ThreadPool completes running? Will delete the task itself? If it does, will point to deleted memory after finishes. If it doesn't, you will have to remember to check when runner has finished, and call delete explicitly, every single time you use the thread pool. You could implement the ThreadPool to all tasks after execution, but then, an enterprising programmer (maybe yourself) could write: 

is an implementation detail of the list. It makes no sense to define it outside the class. That means, the code should look like this: 

No. This is an implementation detail and you (probably) don't want to impose this decision on client code; That is, client code should be able to decide at any point if application needs a global, a temporary or multiple instances used for various situations. Other remarks: 

This is good enough to be used widely (IMHO), but it could use some small improvements :) : Since you are using it to measure execution time, I'm not sure you need to support both milliseconds and microseconds clocks (I would just remove the template arguments and work on microseconds). As it is, the class does too much (timing code, string manipulation and measuring arbitrary intervals). Consider how your client code would look using this public interface (this is a similar class I wrote a few months ago): 

Your constructor calls swap, which receives a reference (meaning you are actually creating a copy here). Either way, you don't need to write your own swap for this class. For this constructor, consider this implementation: 

This potentially causes your code to exhibit UB because leading underscore followed by capital letter is reserved for standard library impleemnters (I think). You also used the same coding convention for code and macros (please don't). The way you use macros ensures client code cannot avoid using them to write tests. If you redesign your API to not rely on macros, you can then add the macros later with minimal effort). This will make your code maintainable (it's easier to maintain C++ functions than macros) and will not impose macros on the client code. Some features you may wish to add (complementing the list provided by Loki): 

Now, generate reads like prose. You don't really care when you look at it that print_body is a template method (at least, you shouldn't). You can follow the steps of implementing just by one look at the code. Just think of as client code of your private APIs, and then the functions are APIs that need to "tell you what they do", in their names. Basically, I focus on what the function looks like in client code, instead of what kind of place it has in your class hierarchy (or most other technical/implementation details). Note: I didn't know what name to choose for the generate function (the "PrintReport" in your code) until I wrote an example of client code (and I thought "of course, you generate a report!" - it comes naturally off the tongue :) ). Maybe for you, "generate" will not sound natural at all. Edit (addressing question update): 

If you approach performance problems like this you will be unable to implement any effective optimizations. There are two ways to tackle optimizing code: 

After making head and tail private, you will need to add iteration and/or data retrieval API to your class. When designing a class, consider how you will look at it from the perspective of client code, not how it is implemented (i.e. you are implementing a "list of instances of T", not a "list of instances of Node"). That means you should not have a constructor receiving a Node*, but a constructor receiving a T instance. Your print and printBackwards functions should (probably) receive the output stream as a parameter (then, you can use the same code to print to a std::ostringstream, std::fstream, std::cout and so on). Your copy&swap implementation of assignment should be written like this: 

I assume you use this to stop, not to signal an error state. This may not look like a big thing, but a runtime_error (or specialization) should actually signal an error during the runtime of your applicaition). For example, the Visual Studio debugger can be set to break automatically when a runtime_error is thrown in the application. Using this implementation would screw up debugging without you meaning to. Consider either using a second condition variable (or similar) instead of throwing an exception, or adding docs to the source saying "Terminate is a runtime_error specialization because having no jobs to run is an error in this and this case". 

Don't do this. It greatly restricts what client code (whoever includes your class) can write, and the errors generated in client code are almost always obscure. You're better off repeating that in local scopes (if you must) or (better still) not using it (consider writing and similar, in the scopes you use the type, or simply declaring ). Edit: If never returns false, why does it return bool? Shouldn't it be ? Second Edit: Consder using an unsigned int for the number of threads (). Third edit ( Hi Loki :) ) Regarding ownership of the threads and object lifetime management (how to implement safely and indicate it in the public interface of the class). Consider this client code: