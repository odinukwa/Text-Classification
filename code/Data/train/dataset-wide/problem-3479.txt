Trying to find the offender by looking at the volume of traffic over time is likely to be too late. Remember that a user expect web responses in seconds. Limiting a user by analyzing the traffic flow is likely to be too apply the limit long after the browsing user has given up. There are some things you can do with iptables (see e.g. hashlimit) but your users will probably notice the slowdown anyway. If you want to make sure that everyone gets a share, you need to play with prioritizing traffic. See the tc command. For an easier time, I recommend tcng. No matter which method you use, you will need some criteria to differentiate "bad" traffic from "good" traffic (other than quantity). However, my experience is that well-behaved routers (be they linux boxen or enterprise-level routers) nearly always do a reasonable job of prioritizing traffic such that you don't get a total breakdown like OP describes. Before trying to do fancy stuff, I would try to see if there is some badly configured or designed hardware on the network. My presumption of guilt falls on ADSL routers, old Cisco PIX routers and cheap switches. 

Also, traditionally, most phone extensions are personal, but in a modern company, most incoming calls are actually to a company function. You should probably consider not having personal extensions at all, and simply have an extension per function that rings all phones in that department/function. 

EDIT: Even if you can't go to the site of the failing browsers, maybe there is remote desktop or remote assistance to help you? 

Distro is unlikely to make much difference in this regard. Generally speaking, 15 socket connections per second is peanuts on modern hardware. It is very likely that your code is going to be the problem, not the underlying OS. In particular, you may come to regret the overhead associated with SOAP calls. I have observed SOAP operations spending 80% or more of the CPU usage for XML-related overhead. Some development-related answers: 

It is the tradition of serverfault not to unduly question the preconditions, but I have to ask: is it not possible for you to either 1) mount the remote filesystem via SMB, or 2) use fuse/sshfs instead? (I assume here that the sending machine is a Linux box as you are using bash and ssh.) To actually answer your question, I think your problem is simple. Consider: 

Finally, ip6tables is your friend. The above config assumes that there is a IPv6 capable DNS server on :1::1. dnsmasq should do fine. Hope this will be enough information to get you googling on the right howtos. 

However, the mail RFC specifies that if there is no MX (first step comes up empty) it should go look for the IP address directly: 

Assuming /dev/sda2 is empty, you may want to move whatever data fills /dev/sda1 there, I suppose. The process goes something like this. Assuming it is /home filling /dev/sda1: 

iptables in combination with tc should be able to do this if OP is on Linux. Iptables has a module called connbytes that can match on the number of bytes that has passed the stream so far. Use this to "mark" packets in streams that have sent too many bytes. For example, you may have one rule that marks all packets in streams between 1 MByte and 10 MBytes with mark "1" and another one that marks all packets in streams longer than 10MBytes with mark "2". Then you set up traffic shaping classes for default (== below 1 Mbyte), for mark "1" and mark "2". The advantage of this solution is that you need not penalize users unless they collectively consume too much bandwidth. The disadvantage is that these are somewhat complex tools that take som reading to wrap your head around. iptables and tc is included in most distros. You may also want to look at tcng which makes it radically simpler to formulate tc rule sets. 

during the failing operation to see what libs it is looking for. I'm shooting from the hip, OP but having waited 15 minutes for an answer from someone who actually know what (s)he is talking about, this is better than nothing (I hope :). For future systems, I recommend the MySQL community builds for CentOS 5 boxen. Install server, client, shared and devel from the beginning, and you should be able to dodge this sort of issue. 

Thus, works fine and if I manually add a default route for IPv6 it works fine. The resulting router advertisement looks like this: 

to main.cf. If your server was listening to all interfaces, the /var/log/maillog (at least I think that's where the log is in CentOS) should probably be your next stop. See if there are any relevant lines in there that talks about the mail you expecetd to receive. It should look something like this: 

I now want to reuse these VMs but start them under kvm instead. It seems that virt-install would let me do this, using , but I don't see how I can instruct virt-install to attach the existing volume as boot/root file system. Is this possible? 

Your mysql server seems to have only something like 128MB pool. If the LAMP system makes use of a fair-sized database, this seems to be on the low side. That would generate a lot of I/O towards disks. Also, if there are CPU spikes on mysql, turn on slow-query logging for a bit and see what shows up. A new index or two might be in order. For a top replacement that can read most of the per-process conuters in a modern kernel, I recommend atop. Among other things, it can show disk access by process. Note that atop has a running daemon as part of its setup, so you may want to uninstall it after you are done. Be careful what CPU usage numbers you trust. They are generated using somewhat different methods. In my experience, to show overall CPU usage, vmstat gives the "best" (== closest to perceived load) numbers. There are apache processes doing serious work. Perhaps some PHP code optimization is in order? 

The script will now survive the shell termination. Note tho, that if the shell outputs text, it will retain the same tty, which may cause problems, depending on what happens to it after its owning shell terminates. 

My tradition is to set all zone serials to the timestamp at modification. Now that Puppet is my new religion, I want to set serial timestamps when building zone files from exported resources. A somewhat trivialized example may look like this: 

Are you sure there is no root account? Is there not a root row in /etc/passwd? I imagine passwd would complain if you try to set a password on a user that does not exist. I think there is a root user and you just set that user's password. You probably want to remove the password again using passwd -d. 

rpm files from RHEL6 use different magic number RHEL5 python2.4 does not recognize sha256 which is used to checksum downloads in CentOS 6 yum uses different database format in RHEL6 such that a chroot environment built by RHEL5 yum will not be comprehensible to yum from RHEL6 

This problem occurred after the machine rebooted for the first time after adding these rules, so presumably there is some difference between then and now. But what? Or is there some kernel bug that means these packets are dropped even tho the counter is incremented? The machine is a CentOS4 box, Linux 2.6.9-67.0.1.ELsmp. 

If I read you correctly, your root filesystem is listed as sdb1 in fstab, but in reality seems to be sda1? Your disks have probably swapped order at some point, or maybe there was a CD player during installation that you removed later? Anyway, root device is typically not read from fstab. It is configured in your bootloader: see the /boot/grub/menu.lst file. Here root device is typically given like this: "root (hd0,0)". Disk 0 is simply the "first" disk by some measure. When the kernel starts, it has to read the startup stuff from somewhere: that is the root filesystem. Under normal circumstances, that filesystem is "adopted" by the starting system, so it will not be confused by naming issues. 

I failed to find an answer to this problem and in the end accepted random the semi-random IP assignment that above config resulted in. 

You should see traffic from the client here. UPDATE: Similarly, traffic from the server should arrive on the client through its IPSec interface and can be inspected with tcpdump there. 

In the end, brute-forced a kernel image from Debian/unstable. Given a volume from AMI ebs/ubuntu-images-milestone/ubuntu-natty-11.04-beta2-i386-server-20110413.1 (ami-4c906c25) I had to do three things: 

User still retains a login that was created before the user was removed from a group giving privilege User is explicitly listed i /etc/sudoers 

If you have full access to the server box, the best thing you can do is to check that traffic from the client arrives from the correct interface. Something like: 

There is no network traffic against the NFS server when this occurs. I realize that it can be a bit difficult to know exactly what is wrong, but any suggestion is welcome. 

Since smtpd is chrooted, saslauthd_path is relative to /var/spool/postfix. I use bind mounting to get /var/run/saslauthd into private. 

At a guess, jfs is compiled as a module and is loaded in dom0 (for any of numerous reasons) but not domU. Perhaps manually insmod'ing jfs.ko in domU will resolve problem? 

Partial answer. First, know that Asterisk configuration is more like a programming language than, say, Apache configuration. There are numerous ways to create "nonsense" configurations. On the other hand, you can create very nifty services. There are three aspects to setting up an Asterisk installation: 

Not sure what you want to achieve exactly. The most trivial way to make sure that a specific box replies to a a certain DNS query with a certain IP is to edit the hosts file. If you want to see what sort of DNS queries your system makes, you can use wireshark or tcpdump. If you actually want to simulate DNS instability/delay/quirkiness, you need a trivial DNS server implementation, such as $URL$ For hosts file location, see $URL$ (!). EDIT: It seems like, for testing purposes you need only to trick the machine running your testing client(s) that your dev server is mywebsitedomain1.co.uk. Unless the testing clients runs its own dedicated DNS resolver (e.g. using libadns), editing the hosts files should be fine. Note the following example hack that I have in my /etc/hosts: