The clause is the last of your loop, and is the last instruction of that clause. You can remove : even without it, your function will still work and behave the same way as before. Zero-initialization Instead of using to zero-initialize your arrays, you can use the language zero-initialization for arrays whose bound is known at compile-time: 

Today, I tried to create a really simple container adapter. I did not provide all the STL-like functions, only the elementary ones as a proof of concept. I also trimmed the class from its copy constructor and all the unecessary things for this review actually. Here is the code: 

Overall, you should try to write Python code whose structures more or less reflects the structure of the HTML code you are writing. That will avoid tricky mistakes and tag mismatches. When I read your code as is, I have trouble knowing whether there are tags mismatches or not. 

It is not a good idea to name a variable . When I read , I was convinced that it was written . Try to avoid as much as possible variable names that can be read as numbers such as , , , , etc... 

While using in the return type of the functions, I find that it tends to make it unreadable. Therefore, you may probably want to move it to the template parameters list instead. Consider your code: 

Note that I also used list initialization for some of the in-class members initializers and for the constructor initialization list. List initialization can help to avoid some problems related to implicit narrowing conversions of values. 

This algorithm will the first half of an unsigned integer with the second half, then repeat the operation with the result... until there are only two bits left to , leading to a more efficient operation than a population count. This page even provides a more subtle implementation of the algorithm to "skip" the last iterations. I didn't really dig the proposed implementations with magic numbers since I want my code to still work with integers of any size. Getting rid of the temporaries The part of the Gray addition which is likely to be be the slowest is the body of the loop. To find a possible optimization, I decided to see wether I could get rid of and in it, which are copies of and required to compute the new value of . While it is easy to get rid of by simply replacing it by , getting rid of is harder because has already been updated meanwhile. Without any trickery, the following loop body is the best we can get: 

Unless I missed something, it appears that always returns . It is quite misleading. If there is no way for this function to ever return anything but , you could as well get rid of the return type. Also, I propose a different approach than Loki's one for the default constructors of : you can use in-class members initializers for the default values: 

Those simple functions from the header work with any category of iterator that is at least forward iterator. That also means that if one day works with forward iterators, then will also work with forward iterators out-of-the-box and allow to sort, for example, singly linked lists. Here is our new enhanced algorithm: 

This would allow you to simply many of your algorithms, using element-based loops instead of indices-based ones. For example, you could compute with the following one-liner (untested): 

You can avoid problems related to variadic macros and problems related to C-style variadic functions altogether by creating a function that takes an directly: 

Also, as mentioned in one of the comments, I can replace by a lambda. Taking by reference in the lambda capture also allows to drop and the corresponding . Here is the modified : 

You can use braces to return from your functions. That way, you won't have to repeat long and cumbersome types (DRY, as much as possible). For example, : 

The function I propose allows to find the minimum and maximum values of a collection and to check that it is sorted up to a certain element. Basically it is a combination of and in a single pass function, without any significant overhead compared to a call to . 

Hum, first of all, there are way too many comments. People simply won't read them, you should only keep the meaningful ones. For example, you could remove: 

All the other checks are not really useful. The first check to check whether the letter is in the alphabet is not really useful, because the letter cannot be in the word in the first place if it is not in the alphabet (unless you did something wrong, but if you did something wrong, it will be simpler to read a meaningful error message). 

You could make you code way cleaner by using some C++14 additions: the user-defined literals for . Thanks to them, you don't have to care anymore about the underlying type of your duration data, you only have to think about the usual time units: 

Generally speaking, the code is really well-written and looks as idiomatic as it could possibly be. That's probably why you didn't get any answer since you asked it. So... well, I will make a small and highly subjective review since I still can't see any obvious problem with your code: 

Genericity Your algorithm currently only works for and nothing else, which is a little bit sad: you could make it work for other sequence containers as well. You could improve this by making you algorithm take two pairs of iterators like the C++14 version of : 

Names The names you use are all but explicit. While is good as a loop iterator, and should have more explicit names. NOTE: Hadn't it been for the , I would have thought that your code was written in plain old C, and not in C++. Is it intentional? 

Since you have access to a C++11 compiler, you should use the standard type trait in the default version of your template instead of just writing . Also, it should be : 

C11 atomic library I you want to avoid the "legacy" functions, one solution would be to use the C11 atomic operations library. It is not widely supported yet. I know that GCC has been working on it, but I don't know if the 4.9 release already implements all the operations. Anyway, had you a compliant compiler, you could use standard atomic types and atomic operations. For example, here are your functions and rewritten with the C11 atomic module: 

You don't have to define your own function: it already exists in the module of the standard library. And actually, it works with any integer type. Therefore, you can rewrite as: 

You could also make it take an parameter so that the result can be stored anywhere. But then your function is no more than a thin wrapper around . That said, you would benefit from its full power. You could also replace by the simpler since you only ever add the elements at the end of the collection to be returned. 

I would have some other small remarks but I will keep them for myself since they would be considered a matter of style and you know what you're doing anyway :) 

Use strongly typed s For your function, the return type is at best misleading since the values only represent abstract concepts. You should drop the and replace it by a dedicated type , implemented as a strongly typed or : 

If you want to check whether a one character string is a letter, you better you the method from the class : 

While this algorithm is actually generally slower than the previous one because of branching, it permits to realize some interesting things: one of the branches always sets to and cannot be executed when . The other branch does not update which means that the loop can be uderstood as "do stuff while ", so we can rewrite the original second loop (not the new transformed second loop) as follows: 

You could also use curly braces, even for one-line statements. They always help to avoid errors, even though many think that they are useless for one line. Unfortunately, all I have in mind to simplify your task is some macro trickery to generate the code you need. While that may help, too much macro trickery often leads to code that can be too clever and hard to maintain; that is probably not a "reasonable" way to improve your code.