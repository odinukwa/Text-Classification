Well, "thread-safety" is a fairly vague term. Read/Write access to basic data types like for example is guaranteed to be atomic so in that sense access to is thread-safe. However your method is not thread-safe in the general sense as in that if two threads call it at the same time they could very well both be passing the guard check and both be performing the expensive operation. The call order would be: 

I would get rid of the static instance. It tends to encourage bad practices. It's easy enough to add later when there is a use case where it really can't be solved any other way but having it there just for convenience purposes is a bad idea. The cast here: 

Comments should mainly describe reasons for non-obvious decision. Most of your comments seem to just describe what the code below is doing which you can see by looking at the code. Example: 

You haven't shown the actual implementation but my suspicion is that should probably be renamed to - I assume the user will be able configure the port. I'm not sure what the point is to make the default constructor private in your case. You have declared a constructor which takes an int as parameter - this is enough to prevent the compiler from generating the default constructor in the first place so you can just leave it out (assuming your intention is to prevent a user of your class calling the default constructor). 

You should check if the references are equal first to save a whole lot of comparing when there is no need to. If both objects are your method will return false which is probably unexpected. You call several times on these objects - It should only be called once for each object and then stored in a local variable. There is a typo in - should be You call several times - again just call once per loop and store in a local variable. 

You should in general try to find better names for variables - and and are not very descriptive. You should check the return value of before writing the output. 

Adding additional braces and formatting makes it very explicit what the scope of each loop is and adding additional statements you're less likely to accidentally forget to add a brace. 

I'm no ruby guy but just from a general point of view I try to see data structures from an abstract interface point of view. And your interface looks like a fixed size FIFO queue. The fact that you implemented it as a ring buffer is just an implementation detail really. So I'd be inclined to rename it to , to and read to which seems more natural names for the operations as you have implemented them. 

Consider overloading , . You could probably also overload , , and . Although you might have to consider questions like: Is 359 degrees greater or smaller than 5 degrees? Override and is you overload (check Microsoft guidelines). Overloading and (, , , ) as well as and (, ) makes for nicer calculations. 

or if you want to be really paranoid (to protect against someone trying to cast the return value back to a in order to try adding elements): 

The name for the event is a bit non-descriptive. How about ? Standard naming convention in C# for public fields/properties/methods is (so the event should be ). 

There are several variables used in your method which are not declared in your method but look like they are local variables such as , , . If these are in fact class members then the two common C# conventions are to either access them with or to prefix the names with - this way it will be easy to see by the reader that these variables are in fact class members. This is especially important as your method is very long and introduces a fair amount of local variables. Increases readability significantly for someone unfamiliar with your code (or for yourself when you come back to this in 12 month time trying to fix some obscure bug). As mentioned the method is quite long and it's not easy to at least get a basic understanding of what all the different blocks do. I think it would help to possibly break out the different blocks into individual methods with descriptive names. Alternatively leave a descriptive comment before each block denoting what the next step is doing. There is some code duplication in this block: 

The slight downside to that is that a user cannot perform fast lookups anymore on it to get the value for a specific parameter. If you want to support that then you'd need to add a method to . 

This will not create a new list but just assign the reference to , so and now point to the same list. Did you actually meant to do ? 

Disclaimer: Above code might not be 100% correct but should get the idea across. It's been a long time since I worked with PHP. 

No, your function does not destroy the entire tree - it just frees the current node and you'll leak all other nodes. You will have to implement a recursive delete similar to all your other functions: 

I'd use rather than - somehow sounds more natural. You should make more use of rather defining a bunch of delegate types. For instance this: 

The biggest problem however is that will return a new object anyway - even if the pool is empty. This violates your requirement: 

A way to speed it up is to build a map from code to enum. You can do this once in a static contructor: 

Your naming smells like hungarian notation (like or ) - prefixing the variable with the type name has little benefits. Again in consistent naming of function parameters like should be . Use white spaces around operators (e.g. ) Use consistent bracing. Instead of using all those s for and etc. you should use the types from like , etc. which will make the code way more readable. can probably be made (only visible to local C file) which would probably make it easier for the compiler to inline it. There are a whole lot of local variables in which can be made : 

The problem with your approach is that it copies the existing content into a new list. Assuming you enqueue elements this would result in copy operations - which is (if you know your ole Gauss) or in other words . This is not very efficient. Getting immutable data structures right and efficient is not always a trivial task. The best advise I can give is to point you to Eric Lipperts blog who has written a whole series about immutable data structures - I found that an extremely interesting read (queues are discussed starting part 4). He uses C# (no surprise there) but I'm sure the ideas can be applied to Java just as well. 

Your methods take parameters but it seems like you only have really thought about positive numbers. This yields some inconsistencies. For example: 

A reasonably experienced developer can read this code and understand what it is doing in about 5sec. You have turned this four-liner into a mess of disjoint statements which take about 10 times longer to read through and understand what the code is doing. You also run into the same problem as you do with commenting every statement: You write the code twice. Once for the compiler to execute and once for the developer/log file to read/record. Admittedly with detailed logging you can run into similar issues. You also said you don't want tracing while in fact at least your example code boils down to exactly that. So using an AOP framework might be the better alternative in your case. 

I'd change the id checking code around a bit to avoid some redundant checks by first sanitizing the input: 

Apart from the things which already have been noted: You duplicate the interpolation loop in your body which violates DRY. The easy fix for that is to copy into . Also rather than assigning to which copies the vector you could use which swaps the contents of the two vectors in constant time. So your main body can be written as: