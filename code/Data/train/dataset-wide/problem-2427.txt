You are using many C constructs, while you are writing your program in C++. But even though most C code is valid in C++, there is often a simpler or better way to do it in C++. For example, you could replace your array of pointers, which you use for the board, with a of s. That way you don't need as much pointer arithmetic (which is error prone) and also you don't have to pass the array size every time you access the board. 

and having that class control the game. Right now you are basically treating your global namespace like a class, with global functions as classes, and as the constructor, that you call excplicitly. Functions/methods with leading and trailing double underscores should normally never be called explicitly. 

As others have already pointed out in the comments, in order to get help with the performance problem you need to add more information and code (e. g. the classes and ). However in my opinion there is still a lot you can improve in the already available code to make it worth a review. Please add more code to get further suggestions as performance improvements. 

For the exception condition, you can now use both in one condition. In your own answer, I think you might have a bug since when the first match is successful, the second one is not checked due to the else-if. (Edit: You commented that the regular expressions are mutually exclusive, so I changed the above to an . 

The account should not have the main method. Instead the main method should be in the main class of the banking software, and the account should be instantiated and used by it. 

Note that I inverted the logical expression, because I check for in bounds, not for out of bounds. Then you use it like this: 

In of the class you use string concatenation a lot, in loops, and the method is called multiple times in the main loop. This is very inefficient, because every time you concatenate strings, a new string object is created, and after some time the old one will be deleted. Better use a StringBuilder, for better performance and memory efficiency. 

The variable name "split_string" lies about its contents. It contains the , not a split string. Saving the result of in it should give you a hint. Don't iterate over the substrings with , if you don't use the index for anything than accessing the string. Instead do 

Coding in English as a non-native speaker, a translation error has found its way into your code: . The English word is . The risk of this happening can be reduced by reading all of the strings from a file, having one file for each language if you want to support multiple languages, and letting someone translate the file for you who does not need to be a programmer, because the "strings" are not part of the program anymore. 

As a rule of thumb, whenever you have at the end of the line, you indent everything that's following until the matching . That way, you also avoid things like closing braces on the same indentation level on consecutive lines, which can be confusing as well: 

lies about what it does. It suggests that it does almost the same as , just maybe on a different output than the command line. A better name might be . 

You are using and as parameter names. It is better to use speaking names that tell you what they are for or what they contain, e. g. , . In some cases and can be sufficient if the method name is explicit enough, like , but I wouldn't say this is the case with . Furthermore, you aren't even using the parameters in and . 

But remember that method names starting with underscores are used for private methods, and thus should not be called from outside of the class. Using a class enables you to add a single method to it that resets all cells and lines. 

Call the list or better or , because that is what you are saving in it. The name should not imply what the code will be doing with it later, e. g. returning it. 

In , and should better be and . The same in , however there they (as well as , and ) should be written in , because they are not constants there. 

Again, the comments are not needed, and instead impair readability. Instead of explaining with comments what the code does, improve the code to better explain itself. can be acceptable as a loop variable, but whenever possible, use a more explicit name, like in this case . Then you get this more expressive code: 

In your own answer you already suggested the use of , but I find the way you wrote the conditions quite hard to read. Instead I suggest to save the matches in different variables, rather than overwriting the same variable. 

The comments at the end of the lines do not tell you anything that is not already in the code, so you don't need them. Comments should usually tell you, why something is done, not what is done. What is done is already in the code. 

is another atypical naming scheme, and the functions should rather be called something like . The name you chose (aside from the capitalization) sounds more like a custom version of any print function, like for example printf. 

My version Following is my version of your bank account class, with the members removed that I think should not be part of the account class. Furthermore I added an interface with two implementations and . Both are immutable (meaning they cannot be changed, neither through direct access nor methods). Note that they are not implemented as what you would usually regard as transactions, but it should give a hint about in which direction the class could go. 

Instead of thinking about a bank account as just a balance and some operations on it, regard it as a list of deposits and withdrawals, from which you calculate your current balance. In a real bank account, you can look into the history of operations done, and even undo them in some cases. 

is actually what the function is for. So it is fine to put the code for rendering different parts ("objects") in different functions and call them here, but this code here actually belongs into . So I will next review the function with this code inserted at the start, replacing the parameters with the injected variables. Also adding some blanklines for better readability, replacing the variables names with the suggested ones from above, and fixing indendation and braces. Since and were meant as constants, I will replace their usage with the boolean literals and as they are expected by the reviewed version of , i. e. the value means it is locked. 

is a very bad name for a variable. Since this looks like a calculation of Euler distance, I assume that it is supposed to mean distance, so better call your variable or at least . You can write here to make it shorter. You might want to put the ouput code into a function (e. g. ), to separate logic from I/O. is hard to read, because of the formatting, and because it is a long formula with variable names, namespaces and method/function calls. Better put it in a function: