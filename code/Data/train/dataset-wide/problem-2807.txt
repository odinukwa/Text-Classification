One method of rewriting it could be checking and likewise for 2 before you enter the loop. You should also store outside the loop. 

One of the first changes I would make is to change how the mutator on works. Assuming you already have an equality check for (and if you don't, I would make one) you can add the following to the beginning of the mutator on : 

In a very specific application I have, I needed the ability to easily convert between different data sizes. I.e. when I give an input of 1,048,576KiB, I needed it to say 1GiB, etc. So, I built a for it. It's pretty robust, includes operations for subtraction, addition, multiplication and division, and , etc. I'd like to think it might be useful for others as well. First bit is the : 

I mentioned them above, but generally speaking you're trying to solve a problem that we have accepted as a non-issue. Worry about the features of the application, then about the security. Your job as a programmer is not to secure the information in RAM, but to secure it: 

One last point: You did not mention how you are using and . I'm assuming you used one of the following: 

The version is even faster than is the C-based I/O version in the case of using g++. Clang, in this case, bites. Or perhaps it's the standard C library. Here's the getline version: 

In fact, those four functions could be rolled up into one function that still satisfies the single responsibility guideline (note the name: the function does exactly what the name says, and nothing more), and it isn't all that large: 

Even in Java, the fizz-buzz problem should be very small (allowing a couple of violations of very standard coding practices): 

A key problem with a monolithic construction such as my is that it's hard to see what's going on without lots of commentary. A key problem with a slew of overly-short functions such as in your implementation is that it's hard to see how things fit together without lots of commentary. There's a happy medium where you can still understand individual chunks of code and where you can see how things fit together, and without needing an excessive amount of commentary. Some comments about my code: 

Once more, I come to you for assistance! I have written a significant bit of code that converts IP Addresses from strings to minimal byte-arrays. (So that you can store them in a binary format instead of as a wasteful string.) It currently works with IPv4 and IPv6 addresses, saving both to a 16-element byte-array. (The IPv4 addresses are padded with 0's at the beginning as per this RFC. It currently is only capable of converting an IPv4 or IPv6 address to a byte-array, though I am going to be adding the reverse conversion soon as well. I've omitted XML documentation from it to shorten it up to the relevant code, but you can view the code (as of this version) in it's entirety on GitHub. As usual I appreciate all comments on anything you see here. 

The unique advantage of this method is that it can take a as the delimiter, and will lazily evaluate it, without creating a weird method structure (like does). I haven't noticed any bugs with it, though I guess it's possible that there are some. I've used it in the production environment it's part of for a while with no issues. 

This is just wrong. The standard approach for determining whether some string occurs within another string is to loop over the substrings of that start with the first character in , returning true if the characters that follow are equal to the remaining characters in , in order. 

You did that here. What if is 0 or 1.75? You'll get a when your function performs in the case is 1.75, and maybe that's what you want. The function will return 0 in the case is zero. As others have noted, your function only works for . If you truly meant a base 2 function only, then you shouldn't promise that you can handle any base. An alternative to using log for this base 2 logarithm is to use the fact that python provides a function available on all platforms (even those that don't use IEEE floating point) that does exactly what you want: 

Now it's a simple matter of assembling the output. Once again, this is much easier than you made it out to be. Simply swap the values at the pivot and swap points, and then reverse the digits after the pivot point. Putting this all together yields 

First and foremost: while mutation may be generally frowned upon in F#, in some cases (like this one) it's acceptable to make a tradeoff of immutability vs. performance or maintainability. In this case, it serves both of those goals. Let's say you want to do this idiomatically, and you want to avoid directly mutating the array. It isn't that hard: 

It's probably better to use here. It can be a cheaper call (sometimes, not always) but conveys the same meaning. 

I've implemented my own version of the class in and obviously I want it reviewed. I've tried to make it thread-safe all around, but I'm sure I missed something. My main concern is obviously the thread-safety of it, but I also would like any other comments as well. The GitHub version as of this code is at: Control.ControlCollection. 

(Emphasis mine) This is all well-and-good in theory, but anyone (and I do mean anyone) can decompile your source and get that key. This is basically a glorified obfuscation system. A better alternative would be to use on the user's password to get your encryption key. This has several added benefits, most notably: Your key is no longer shared. I don't care what anyone says: sharing private keys in encryption is a horrible idea. The more people you share a key with, the less secure it becomes. If you establish a key based on the user's password, you have now created actual encryption. 

This does not do what you think it does. It creates a list of elements. If you're using C++11, they're all garbage because those elements are default-initialized. Fortunately, you'll never run across those garbage values. Your calls to allocate a new chunk of memory. You don't want to use a list. Use a vector. When I run your program on my computer, compiled with optimization level 3, I get timing results of 

While neither one of these is a very good integrator, the latter choice is far better than the first. You should try the two variations and see what happens. Once you see that the second choice is far better, you might want to learn about more advanced integration techniques. 

The above raises a exception if there is no such index. The easiest way to deal with that is to simply let that exception pass through up to the caller. Doing the same with your next chunk of code reveals another one-liner: 

Two of the key sins in software engineering are scope creep and gold plating. Scope creep is a sin committed by clients and managers. Gold plating is a sin committed by programmers. This is a perfect example of the latter. The requirements for fizz-buzz are very simple. There is nothing in those requirements regarding printing 25 values per line. An implementation of fizz-buzz that prints one value per line is just fine. While Java is well known for being a long-winded language, even in Java, an implementation of fizz-buzz that is 63 lines long (counting blank lines and comments) is far too long. As an interviewer, I would congratulate you on getting the answer right. However, in the post-interview meeting, I would most likely recommend that you not be hired.