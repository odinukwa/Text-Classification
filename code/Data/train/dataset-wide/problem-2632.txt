IIUC I should decouple UI logic from the model and controller in my project. I didn't succeed and had to resort to etc in my game logic: 

I wrote a small aggregator app that aggregates values from a json http post request and outputs the aggregated values. Now the aggregator function is somewhat large but the output appears correct. I start it with gunicorn: 

My allocation and deallocation functions look like the following but I didn't do it yet for a `struct only for arrays and matrices but I think that I can have an array of structs with one struct and use these functions for the struct. 

I have similar to the above in several classes, passing on an android activity and/or a textview into model and controller objects. Will this be a problem and is it possible to solve? 

I was given a program that generates XML, filters and sorts the elements. The program was rather terrible on purpose because it is an assignment. The original output looked like the following: 

I have written a "better" program that does the same(?) output in safe ways. You don't have to see the original code because it isn't mine. The following is my code to solve the assignment in a neat way. Figure.java 

It was somewhat more problematic to create the layout in XML compared to the small game engine and controls. Maybe we can rewrite the code more object-oriented because it is rather procedural at this time. The game is open for testing in an open alpha and the source is available at my github. Main activity 

I would further reduce the redundancy found in the strings by declaring them (as if a constant) and passing the variable to the JQuery function. 

Now when you need to make changes (e.g. adding another option to show when toggling traffic) you only need to make that change in one place. Try it out! 

It still needs some tweaks for your cogs, but I think this is a more adept to the capabilities of the Raphael framework. 

My final answer is at the bottom with a fiddle, but a little background first: I also think you should use toggle functions instead. It would reduce code repetition. Perhaps something like 

Kudos on tackling Raphael at an early stage of learning. It's quite advanced, but definitely fun. The first recommendation I will make is that you shouldn't repeatedly call "setInterval". It is a large waste of resources. Also, you are not creating multiple papers, you are overwriting the existing variable. Honestly, between that and the reuse of I'm somewhat confused this code is working for you at all... I certainly cant get it to run on fiddle. 

Ok, now that I have a firm grasp on what you're doing, I think I have what you're looking for. The below still applies in terms of optimizing what you posted, but I think what you want is more along the lines of the following: fiddle 

But the question that you asked actually has an answer specific to how JQuery parses the input string to determine selectors. To get the most out of a single call to the JQuery object you can put all of your selectors in a single comma delimited string (if you are performing the same action to all the given selectors). This has the added benefit of much less overhead than calling JQuery many times. i.e. 

and will encapsulate your into an . You could easily encounter a deadlock situation. You shouldn't block on async code normally. 

(Disclaimer: code uses C#7.0 out variables) Now your are secured against the exception. If you inspect the code for possible deadlock situations, you might observe that it is possible, that gets executed before . It is good to know, that the wait returns when all events are set and it does not matter, whether or not that happened before or after wait was called. Great, no deadlocks here! 

According to MSDN, all public and protected members of are thread-safe and may be used concurrently from multiple threads. However, concurrency only applies to the individual actions performed on the instance of the . The situation will not get messy, if a thread is performing a write operation and an another thread is performing a read operation at the same time. But, there is no protection within the class against the situation, when an information of the past is provided, that has since changed and because of that, an invalid operation is performed. I do not see the reason of calling , since an another thread could remove that particular element between the and the value accessor operations and will be thrown. 

You have just literally lost the async part of your method. By calling the property of your object, you will block your calling thread since it is going to wait for the async thread to return with the result of the operation. The property is just like the method. You should use instead of or , since: 

I have created a mini Android game. The aim is to catch aliens in space. You score points for each aliens, there is a pause function and you can change the level of difficulty and change spaceships. 

I wrote a build file for a mini Android game. I use this buildfile whereupon travis reports success. But I'm not always sure of what I'm doing. 

But how can I improve it? I would like to make it easier to test the thing (my next work should be to add multithreading to the malloc implementation). Should I use a testing framework instead? 

I have some code where the purpose is the decide if a char is between quotes in an expression. For example, has a between quotes. The function that I want to test is 

I needed quickly to represent a list in json format. I wrote the following front-end in jinja2 with google appengine. 

I try to learn assembly by writing small programs. This MIPS program is supposed to read an integer from the terminal and print it byte by byte in hexadecimal. I think it works but I didn't check everything. 

And the exception was a ConcurrentModificationException. So I rewrote it like this instead, then it doesn't crash, but is it correct? 

There are several unclean errors with wrong variable names because I copied the code from an example but the output is good: 

I read about lookups in lists and I think that is what I did. I would like to compare it to a skip list, a binary search or a B+ tree. 

I make a mini adventure game demo for Android where the player can move between places and NPC characters can enter and exit the places and perform random actions. The "dirty" code is the UI for Android while the game engine is very good and clean. I have this class which is quite unclean but it works and therefore I want a review. 

In terms of the module pattern as used in JavaScript- There are plenty of times that a getter is used to access a variable that is otherwise managed internally. This would mean that you would have no need for a setter; in fact a setter in that case would be a no-no. Using a getter for a concept that is not clearly defined within the calendarModule itself could be a little confusing to someone that needs to help you later, or modify your code. But I can't speak to whether it breaks the pattern. Have you considered using the revealing module pattern? I only ask because I think it would be less likely for you to question "am I doing it wrong" because the getter is itself a defined part of the module. I could be grossly misinterpreting that however, but it is how I have interpreted it and practiced it for some time. 

Next I would swap out the unreliable for a recursive . But that is not necessary for this experiment. I use plenty when whipping up little tests such as this, it's a bit easier to set up. Additionally, have you tried using a Raphael set to perform your animation with only one animate directive? It might speed it up a bit. UPDATE: Upon reconsideration, I realize why it would work. Even though you are overwriting the paper variable, the object has already been added to the DOM. This is not undone when the variable is modified/removed within JavaScript. Ether way, you would want to encapsulate all of your elements on one paper if they are related/displayed-near-each-other UPDATE: A further consideration. What I like to do is first create the Raphael objects so that I can access them by themselves 

The key to your solution could be the method. It is going to lock the for reading and return the element (if it exists). 

Pass by value C# works a bit differently as plain C when passing objects to a function. In C, object types are passed by value by default. That means, a shallow copy will be performed on your objects. If you pass a pointer or a reference, you will be able to access and edit the values of the original object. In C#, object types are also passed by value by default. However, if you pass a class as parameter, you will be able to edit values within that particular object (basically the same scenario, when you pass a pointer in C) since the object reference gets passed. If you want your object to be immutable, you will need to implement the ICloneable interface w/ constructor copying in order to clone it. GC In C, if you allocate a chunk of memory, no one will alert you later to delete it and you will leak memory. You will need to get rid of it at some point. However, C# has Garbage Collector at its disposal. I will not go into details, there are countless excellent articles about GC. Fundamentally, GC tracks the valid references of your objects and if there are not any left, GC will free the allocated memory space. But, there is no guarantee that eg. your local variables will be immediately freed after exiting the scope (in C, local variables will be freed upon exiting the scope). When GC comes across, it will delete the unused objects and until then they exist as nothing has ever happened. You can force GC to get rid of your object by calling the Dispose() method or using the using statement that destroys the object after exiting its scope. Your code