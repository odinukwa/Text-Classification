You've mixed two positions: project manager and product manager. As a developer with an MBA, you can still provide insight into how the product should be built. that is the role of a product manager. The project manager can handle who is doing what and when. This lessens your load. You don't have to communicate with others as much on the reporting of what is getting done, etc. Sit down with those in charge and make sure they have clarified the roles of each of you. You may find that the project manager wants your input since he is not as familiar with the application as you are. 

Unfortunately, many teachers do not take it this far. They should be checking code check ins, documentation, discussion participation (very easy if this is online), message board postings are very important. I think there should be a one-two week trial period, where if a team member doesn't pull his weight, he can be voted off the team and do the project on their own. Members don't take this lightly because they will all have to pick up the slack. For the benefit of your startup, make sure you learn from this process how important it is to decide what is expected of everyone, how you're going to assess their participation and what are the consequences when people don't comply or perform up to expectations. Relying on being the Three Musketeers and thinking everyone will give their dying devotion is not realistic and a big risk. 

Just ask. Don't give an ultimatum that if you don't see the code, you're going to walk out the door. There may be legitimate reasons they can't show it. If you feel this is a deal breaker, just decline the next interview. Although they weren't selling commercial software, I have seen code during an interview and I didn't even have to ask. They wanted to know if I understood it. Cleaning up code is always going to be part of the job. You may feel you hold very high standards for your current coding practices, but in a year or so, you may not be so pleased with it. Don't be so harsh. A picture may contain a thousand words, but it only shows one side of the story. Edit: I think a key here is are they going to put you into a position to write poor code. That could be the reason for a current code base that is low quality or it may be the previous programmers weren't as skilled. Cleanup isn't always fun, but it is tolerable if you know the company is going to put you into a position to successful and do quality work. 

It's fine for the SO CV, but the rest of the industry is way behind and will think negatively about it. Don't forget, it many jobs you go through a recruiter, HR, and possibly some other non-technical manager. You'll just confuse them. Focus your resume on the job requirements. For the areas where you have no expertise, you can show some related knowledge (e.g. I know this ORM but not that one.) along with your desire and ability to pick up on new things. You can always ask about an undesirable language during the interview process. What was the reason for using X? You never know, they may want to get rid of it, so they're open to something better. Wouldn't that be the job you want? 

It has nothing to do with blame. You're the only one who can help them. Suggest everything to the Seniors in charge and see how far they will let you go to solve this specific problem. EDIT: If this client is taking up a disproportionate amount of support time compared to other customers, Senior management needs these data. Regardless of their technical expertise, they're not going to want to throw more money at this client if they are not paying enough in return. If they have not technical, business or accounting skills, they're a lost cause. 

Whether he is right about this issuer or not, he doesn't get to insult you-period. If he can't provide suggestions without insults, he does not get to provide suggestions and professional opinions. The developer needs to understand what areas he has decision authority. I think it is great to make sure people understand your point, but you may not always have time for the 5th iteration of every debate. You have to triage everything you do and let others know you can't devote all your time to their issues. Under these constraints, know when you have enough information to base a decision and then make it. The developer needs to know that if he fails to do what he is told enough times, there are going to be negative consequences. Same with insults. 

Having an office makes face to face easier. I don't think it is a requirement. Offices are strategically placed to be near clients and talent pools for a reason. Workers can telecommute for the most part, so I don't think is should be an all or nothing proposition. I work from home, but prefer to be closer to the corporate office. That would be the best of both worlds. 

One draw-back to being an intern at a large company is you're not going to write one line of production code. A smaller company may let you get involved on a pilot project at least. You're there to prove you can learn how to program and get a real job. Doing a code test during an interview is important, but that depends on the type of test. If it's just pencil and paper with no discussion on how you code/think and why you did what you did, I think it is less relevant. Some may even just have you use a pseudo language. Anyone who is overly concerned with dotting the semicolons, would probably be better off not testing at all. Different projects have different demands on adding new people and some time it is important to just get a technician in a certain language/framework. If they want to convert interns into employees, they better be able to measure upside. 

You'll only have so much time, so that should drive how much detail you can go into. Usually when I start a new job, I keep a small database or spreadsheet that includes things like voice mail usage, file locations, external web site accounts, and anything else to help me remember things. Hopefully your current company will encourage you to do things like this to help with the transition instead of giving you a bunch of work to finish. Of course there will always be a few tasks. 

Unfortunately, anything can be held against you in the minds of others. The good news is many employers give out a bare amount of information about your previous employment in their company: dates, job titles/descriptions, and that's about it. If you use anyone at that company as a reference, just make sure they don't hold this against you. Always know what people are going to say about you before using them as a reference. Don't ask them to lie about your contract situation when asked. The key is this was a mutual agreement of both parties. 

Make sure you are doing what you can so this person is getting professional help. The therapist may have some recommendations on what you can do in this particular case to support this person. It may just take some a little patience to wait until this person can get the depression under control. 

First, I want to address all the negatives about counter-offers. I don't think people are accepting the way things are priced in the real world and it's probably why they're not in sales (And why sales people do a better job of getting higher salaries.). There are many forces at work that affect a salary and the main one is what someone is/was willing to accept. The open market is not the only driving factor. Some employees are worth more to a specific company. When a particular position is worth less to the company than what the market indicates, the company is in a bind and may have to get less talent or someone, for whatever reason, is willing to accept the lower offer. The reason your current employer didn't pay you more is they didn't offer and you didn't ask for more. That's really the bottom line. Over the course of time, people realize their talents are worth more, but usually not until they get a better offer. Example: If your work generates a million dollars in revenue, no company can afford to pay you that much, so how much do they have to pay you? Half? 90%? If they can get someone for 30% and not deal with the negative consequences that can come from too little salary (turn-over, lack of effort, unhappy employees, etc.), they'll do it until someone asks for more. What to do in your case. If you are considering taking the counter-offer, just tell the other company, my company made me a better offer. They can decide to make another offer or give some other reason why they think you're better off joining them without the increase salary. Don't even think that you're doing anything wrong. You didn't force your current employer into making a counter-offer. Your employer wanted to make a counter-offer, and when anyone tries to hire someone away from a current job, they better know that can happen. To think any less of someone who stood up for themselves by asking for more, are totally unprofessional, childish and need to understand the concept of "It's just business." When people don't demand what they're worth, they are not respected as much. If someone doesn't "like" you because you asked for more money, that's their problem. We work, we get paid. You make something, you try and sell it for what it is worth. Don't waste your time with people who don't want to pay you what you can get. 

You may be required to pick up the slack in his absence. This isn't just about the two of you against the company. No one wants to be a tattle-tale or burn bridges with a coworker, but it is a two-way street (enough of the cliches). Maybe after this conversation, you can decide how much you want to protect his privacy compared to protecting your situation. 

Based on what you're saying, you haven't been given a lot of feedback until being put on probation. That's a shame. Many places do not put the resources and practices in place to train and mentor new people. If someone really cared enough to help you succeed, they would have said something to you. 

Start by asking what you can do to make their job easier. Anyone can jump into an existing team/project and find faults. You never know; they may want the simplest things: new computers, a better bug tracking system, flex-time, access to training materials, better coffee, etc. You'll have more credibility when you make your suggestions and they'll be more receptive if you've removed some of their obstacles and providing an abstraction layer. Confidence isn't gained by asking people for their trust but by giving them yours. 

Offer to help one of your collegues. Workloads aren't always balanced exactly. You don't have to do this all the time and give someone an excuse not to do their fair share of the work. If you are new to the job, it's in your favor to take on more responsibility. 

Every industry, type of position, company and culture look at these kinds of things differently. You need to do some research on this company and get a better idea what they're like. If they think you're being to brash, do you really want to work for a company like that? It's possible you won't like working there. There are worse things that could happen: 

I think it's important for everybody to be upfront, honest and professional. Both sides in this case are at fault. However, you have the luxury to go back on your word and take the other offer with little if any punishment. The company could hire you for one day and then let you go (depends on where you live), but they would then have to pay part of your unemployment. You are at an advantage in most cases. You asked for more time to think about it, but you really wanted to entertain another offer. The company wanted to speed up the process by offering more money (why didn't they offer this sooner?) without telling you why they need to fill the spot so badly. Maybe they are use to candidates taking time to entertain other offers, so they try to prevent this. The reason for filling the position so quickly may have given you some incentive to take the job. It could be as harmless as a manager wanting to get a budget submited so he can hire someone to getting staff in place because they're going to get a huge injection of venture capital. Either way, you both started out playing a game of poker, so I don't see how one could consider the other as more or less dishonest. The sad thing is, you both may lose in the long run.