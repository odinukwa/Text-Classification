This is a rather old issue but it's starting to get more and more frequent. We are providing an application to external users trough Citrix XenApp 6.5. The users have a number of different version of the receiver but the problem is the same even with the latest one (4.9 at the time I write this, it wa confirmed at least as far back as 4.2). The users typically have a windows 10 system with multiple display. They attempt also have different zoom factor for each screen (display settings -> Scale and Layout). At connection, the application gets zoomed according to the display factor of the screen is initially starts on. This works fine until the user moves one of the application's windows (even partially) to the second screen. Then several things happen: 

Then check what port and IP IIS is listening on. if memory serves, you can see that by right-clicking on the default web site node in IIS manager and check the properties. 

The issue is that the SSL negotiation happens before the HTTP header is transmitted. This means that, at the time the server needs to pick a certificate and key pair for certifying its authority, the only information it has about what host the client is attempting to reach is the IP address. There is no viable solution around this problem for IIS 7. In IIS 8, you'll be able to use Server Name Indication (an extension to TLS) to work around it but even then it will only work with newest clients. ($URL$ 

Create a bash script, start it with "sleep 50s" and then call the program or command you wnat to run. 

Several ways: The easiest is simply to create a web site bound on port 80 containing only a default page with a meta refresh in the header: 

The simplest solution is to force your SMTP sender to use IPv4. Otherwise, you will need to add the IPv6 version of your MX to your SPF and make sure it has a valid PTR record. 

A customer of mine is experiencing a very strange problem: a scheduled task is running twice from time to time, with only a few seconds between execution. The task is scheduled using the windows scheduler. It's a very basic task that connects to a local service using TCP/IP, authenticate, gives it a command and disconnect. It is nearly instantaneous (the longest part actually is the SSL handshake). It triggers an issue in the server application which I will fix but my problem is that I simply cannot find any valid reason why the task is being run twice: nobody is ever connected interactively to that machine (it's an application server) and the server log shows that all these connections come from 127.0.0.1. Sending port and thread IDs both changes indicating in a very clear way that this is no some internal "ghosting" effect in the server application. Unfortunately, task history wasn't enabled on that server so I don't have a run trace on that front. I have enabled it and, should the problem occur again, I will check it. I've verified, however, that nobody was connected to the machine around the time to issue occurred. Can anyone explain this ? Thanks 

The problem can be solved by synchronizing the zoom factors of both screens but, of course, that is a major inconvenience when the user has several screens with very different DPIs (typically, a laptop or tablet with a QHD or UHD screen and a main display with a 1080p one). In such a situation, the user has more or less to stop using one of the screens. 

If you connection doesn't macth the "from" pattern of if it's explicitly excluded from that pattern, the connection will be denied. 

Open your PHP.ini and look for the "error_log" value. Make sure it points to a file where the IIS worker process can write. Also check the "error_reporting" value and make sure it includes "E_ALL". After that, open the file pointed at by the "error_log" value: it should contain more information about what broke. 

Get the memory dump or at least, the minidump. In your case, since the machine doesn't start, you can do it by mounting the system VHD from the host (it's usually located in the c:\windows\minidump or directly at the root of the C drive, but that can change) Save the dump on a machine that has the Windows Debugging Kit installed (see there). Run dumpchk.exe from the WDK with the parameter. That will tell you more precisely what happened and give you more indication about the probable cause of the bugcheck. 

(there are other functionalities, like compression or secure key negotiation, but you don't really care about these). The part that is going to cause you trouble is the second one: authentication. More specifically, the server side of the authentication (in other words, how does the client certify that he is talking to the "right" server). For this, SSL relies of two things: an X509 certificate and the DNS system. It does it through the following steps: 

At the command prompt, start the system configuration tool (sconfig) and check if you haven't switched the server to "core" mode. If so, you can re-enabled it. Alternatively, you can start powershell and run: 

What you're asking isn't very clear. If you mean "can I redirect the client from $URL$ to $URL$ using HTTP redirect or HTML redirect, then the answer is yes. The caveats, of course, is that the user will see your URL in their browser pretty much immediately when they go to the app web site, making it pretty pointless to have created the subdomain in the first place. But your issue is actually a failure to properly define your requirements. Either you didn't define the requirements for your product properly or your customer didn't produce the proper requirement for their project themselves. In both case, you're trying to fix this failure with band-aids and that will NOT result in anything satisfactory. The simplest way to salvage that situation is for your customer to deliver a server to your specifications and use a valid certificate. If they really cannot provide your with a sytem with Apache and PHP (either internally or by renting a vm), then they could explore the possibility of simply adding PHP to their IIS web site (it's trivially easy), get a proper certificate and install it themselves. Another possibility is for then to request a certificate for their sub-domain and for you to configure your server to serve it. Since they already have defined a sub-domain, all you need to do is add an IP address to your server, your customer to link that IP address to their sub-domain in their DNS and for you to configure Apache to serve it over SSL using the certificate for their sub-domain. 

(alternatively, you can just download and use AutoLogon) I'm sure you can see the potential issue here so I won't elaborate. Your second request is pretty easy to do with a batch. Here is a sample that uses blat: 

I have seen customers of mine trying to use similar method for backing up Windows systems and they usually failed (in one case, really badly) because of four issues: 

No, you can't disable Metro in 2012. MS has decided tghat this was the new UI and you have no choice about that. However, for your specific problem, it shouldn't be an issue: unless you've given your users more rights than they should have, they might see some admin tools but they won't be able to use them to affect anything but their own environment. For instance, unless you've disabled it by GPO, regular users can still see (and start) regedit but they will be unable to modify any of the keys in the HKLM hive and won't be able to see some of them at all. 

Is there any particular reason why your server has to answer to external queries at all ? Ideally, you would setup an external resolver for your public resolver (used to resolve all resources that must be accessed externally: MX, web server, etc), use the windows DNS server only for your internal network and block all incoming DNS queries at your perimeter. There is one thing, however, that you simply cannot prevent: as soon as you have a DNS server that answers to external queries, even if it's only for your own domain, it can be used in a DNS bounce attack. You can configure it to prevent DNS amplification but not to prevent simple bounces. It shouldn't be a big deal unless you're getting DDoS'ed yourself though. Edit: The typical way to setup dns in small(ish) structure is the following: 

Frankly, use the host file. The reason it exists is to fix problems like the one you describe and so there is no reason not to use it. Disabling IPv6 is unsupported and will break functionalities (although nothing critical). It is a far more disruptive change than touching the host file. 

First, try issuing a "truncate table log" command and check again. While you're at it, run "select * from sys.all_objects where type = 'U'" to make sure you really have a single table there. Finally, make sure your table has a primary key: tables without primary keys have the bad tendency to grow without limit even if you delete elements (they just mark on ones as deleted and add new ones at the end). 

Your firewall is most likely a transparent SMTP proxy for filtering spam and viruses. Add a PTR record for the firewall's external IP. While you're at it, make sure you're updating your SPF record (if any). 

Alternatively, you could also modify the source application so that it will write to both DBs at the same time (I used that solution in a similar case). Frankly, I can't see any (reasonable) solution that would be simpler than making sure that both DB are using the same version of SQL server. 

The simplest way to do this is not to specify any default gateway. When you do that, only the networks specified in the local routing table will be available. You should, however, consider using a proper firewall for this machine: not only is it simpler to configure, it's also much more resilient to problems. 

What FTP program are you using ? Some cheap ones can't handle files larger than 2/4 gigs without rolling over. Also, grab a simple CRC program and run it against your local archive and the remote one. use CRC32 since it's much faster than even MD5 and you're not interested in it's cryptographic properties anyway. 

Connection will most likely needs to restarted for the parameter to be applied, but the issue is solved (at least for this user). 

I think you need to have a better understanding of what SSL is for and how it works. SSL implements several security functions among which these are the ones that matter to you: 

So, yes, if you use IPv6 to deliver your mail to Google, you MUST have a PTR matching the sending's system IPv6 address. If you really can't create a PTR for your IPv6 address (which seems weird to me), the solution is to either disable IPv6 completely or to setup your main server to prefer IPv4 for outgoing connections. Don't forget to change the SPF record as well if you do that. 

(Same thing with the slot 0 which is the embedded controller) Any idea ? OS is Windows 2008 R2 (x64), the ACU CLI version is 8.50-60 

Internal network can only talk to each other and to the host. You can't connect such a vswitch to an Ethernet adapter. The correct option is to use an "external" vswitch type. 

You can get request timeout on intermediary node in a traceroute if these specific devies are setup not to answer to ICMP ECHO themselves. Furthermore, some firewall will only allow a limited number of ICMP ECHO requests per second on a particular path. In your case, I would get the full path from your remote office and compare them: it is possible that you have a split path issue and that your packets aren't going through the same route in one way and the other. This is usually due to incorrect router configuration but can also be due to a VPN configuration problem or even a multi-homed server with an incorrect netmask. 

This bubcheck code means that some critical thread or process has been terminated. Now, the way to deal with bluescreens (beside the usual "let's google the error code") is to: 

Without knowledge of what hardware and software you're using, it's difficult to give you more precise answer. 

I'm having a very annoying issue with an HP printer (CM2320): all of a sudden, any user who has that printer installed locally as default printer would crash any Windows 2003 terminal services or Citrix server (XenApp PS 4.5) as soon as he connect, causing the session to hang and other users to be unable to connect to the server. To restore functionality, an administrator has to connect to the server's console session and acknowledge the error message about spoolsv.exe having crashed with an AV. I tried downloading the latest drivers from HP (an adventure worthy of Lara Croft in itself) and install it on all servers but that didn't seem to have helped the situation: the spooler is still crashing. Anyone has a suggestion about what I could do about this ? 

It will run fine. I'm running a number of VMs (in VMWare), both with 32 and 64 bits versions of Windows and Delphi 7 is running just fine. 

This will tell your client that the server 130.255.190.71 is listening to you on port (4*256 + 128)=1152 So: - Try to get the raw message, including the answer from the server (the response to the PASV command) - Check your firewall rules again 

Your question is too broad, really. Explaining you all the details would be out of scope for this place (that's probably a few days worth of consultant work) so let me suggest to you a few steps that you should take first (since I had to answer the same question from several customers over the last 12 years, I'm starting to figure out what the pattern for getting these rights is): Get your requirements right I means, really, do that first. You state that you developed the application so you will need to go back to your developers and ask them to write the specifications. They should contains things like: 

First, the way to address a specific SQL server instance is: SERVERNAME\INSTANCENAME So, first step is to see if you can resolve SERVERNAME (use ping or change it for an IP address). The second step is to see if the specific instance exists. Typically, the first instance of MSSQL server is using the default instabnce name (. or MSSQLSERVER). If that's the case, you can omit the instance name in your connection string and keep the server name only. To check your instance name, open the service manager on the server and find the "SQL Server (xxx)" service. The "xxx" will be the instance name. Once you've done that and made sure you're using the correct SQL address, you should validate the connection. Check if both your machines are on the same subnet. If they aren't, make sure the firewall isn't set to only allow the local subnet to connect (typical in "home" network profile). Then, if both machines are on the same WIFI network, make sure your AP isn't setup for client insulation. If that's the case, you won't be able to communicate between two WIFI devices connected to the same AP. Finally, make sure you have a login that works. The simplest way to do that is to create an explicit login on the SQL server, give it all necessary rights on your database and server and test it locally by passing the credentials in the command string. If it works, try it from the remote machine 

the parameter will cause OpenSSL not to include any private key in the output and the parameter will ask it not to encrypt any private key. This is not going to result in a usable PKCS#12 file anyway. Try it with: 

You used the "NORECOVERY" flag which indicates to SQL server that you want to restore additional T-log backups. You should have used the "RECOVERY" flag instead (or nothing as this is the default). To recover, either recover the missing T-logs or, if you don't want to restore any more logs, issue the following statement: 

IIS doesn't do anything special when generating a self-signed certificate so you can use and tool for that. For instance, you can use Powershell. This one-liner will create a self-signed certificate for the DNS name valid for 5 years, with no password and place it into the local machine certificate store (it requires elevation).