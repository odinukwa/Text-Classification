This method does exactly the same as your original one, but indentation has been drastically reduced (which often helps readability) and some special-cases are dealt with first. 

You might want to "fail-fast" instead and throwing the exception at the top, but then you'd have to throw an or similar at the bottom. 

I think it is time to bring out the ! Enums in Java are pretty handy overall when there is a fixed number of possible values. In this case there is only four possible values, so an enum can be a good candidate for the job. 

I have to say that you seem to know your C# though, you're adhering to all the C# conventions I know of, except of course that your should be or . 

Because of your in , and that you're using an underlying , it would be good to initialize the list to a specific capacity: 

I am not completely aware of the best practices in JavaScript, but I would personally prefer one variable declaration per line, which would be: 

I like this method better because it reduces indentation, and handles the edge-cases first. The code to handle the edge-cases are normally much smaller than the part so by doing this you get a better overview of your method. Note however that this is primarily my opinion, but it is something I have seen often and something that has been said often in other reviews. 

I hope this method shows the problem in a better way, and when you understand this method, you can probably find even better ways (like Gareth already has, apparently) 

Threads Your application seem to be both using and . For Android, I'd recommend using s and/or s. That is, avoid using directly. This is just my opinion though. 

So, how to get rid of these static variables? It's quite easy actually: Tell, don't ask. You haven't given much code here so I'll have to try to explain how it generally works: In your json class (which I will call from now on since I don't know it's actual name), or whatever you have, instead of using , create an instance variable of the type. Then if you call/create your Foo class from your class, you tell the Foo object about it's . For example: 

Then you just check for instead of . However, it might be better to use the fact that throws a to do this. I think it might be best if you use the following approach, without using it as a method: 

I believe that all of your variable declarations above your constructor can be marked private, and I also believe that all them can be final: 

And then all you would need to do is to use (assuming is not subclassed, otherwise you could loop through the supertypes as well when adding to the list). 

I like the Javadoc, but it's totally overkill to specify the class name in the javadoc. The class name is already displayed in the javadoc functionality itself, you don't need to duplicate that when you write javadoc. 

OK, OK, I know it's an example, but still... you have a already with some additional strings, it would be preferred to use a string resource here as well. 

This means that the hashcode is not as effective as it can be. Effective Java, item 9 (which I believe applies to C# as well) recommends to multiply each part of the hashcode with a prime number, and add together, such as: 

Are you sure this is what you really want? I hope you know what you're doing here, so that you're aware of that. 

Another thought is that you can use a to describe what kind of it is, and the type can have a method. Then you could check As I only see a portion of your code and not the big picture, I can't really tell what would be best for you. 

As for your question about the , you are right that it is not a good idea to use that there. You can solve this by wrapping the exception in another. 

Some strings are actually included in Android by default, such as and , use them when possible. When you want the negative button to just close the dialog, you can actually pass as the . 

By using a "null object", simply would be enough. Your null object is an instance of a special class that just doesn't do anything in the method. 

In you have the name , and in / you have . Notice the capitalization difference? And what is that doing in that name at all? It seems like it is being used as a , so and would be better. Speaking of your and classes, I really think those two have way too much in common to be considered different classes. Make one class and instantiate two objects of it instead. 

General advice Prefer to declare variables by interfaces and not implementations. You don't need to specify that you use and return an , specifying is enough. So the first lines would be: 

I'd recommend using an outer table, and add an inner table to that. For the inner table you can then use to set padding and size. See the LibGDX Table documentation for an example of how to use percent values with . Btw, you can avoid the cast: 

Even though it is correct that constants are written in . One exception for this is loggers. If you write and stuff often, that will pick on your eyes after a while. I would recommend using the name (lowercase) instead. 

And then I can log, show an alert, or count the number of unique characters after calling the function. This is how it is properly done in programming. is more clear what the code is doing than simply Returning and breaking In your statement, you don't need both and . When calling , the method ends, so further statements will not be executed. Your breaks are dead code that will never be called. I would also in the default case as well, which lets be handled together with . 

The positions of the 1-9 numbers can be computed mathematically which makes it possible to create these buttons in a for-loop. I have not tested this calculation, but I believe it is correct: 

Don't create them in the first place. Really. Or at least remove them when you're done. See above. Or the code below.