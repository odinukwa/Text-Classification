Option Explicit I cannot stress the importance of this being at the top of ALL of your code modules. What does is it causes a compile-time error when a variable is undeclared. This prevents run-time errors when you try to use variables that aren't set properly, and it will save you countless hours of debugging time. Go To Tools > Options Editor > Require Variable Declaration. You'll thank yourself later. Variable Naming Not to be a jerk here, but your variable names are horrible and difficult to understand. You have rng, rng2, rg, q, s, r, cell and the worst part is that you don't need all of them. I declared four variables total (and one of those you didnt even have a variable for, but you did need). Here's a tip, make sure your variables make sense. You should be able to look at them and have a pretty good idea of what they do. is easy to understand: it is the range we are searching in. is just as easy to understand: it is the cell we are currently searching in. Finally, , you guessed it, is the cell we found using our criteria. It is pretty much bulletproof when you start to code like this (actually, not really. You'll learn that bulletproof coding takes a lot more work than a handful of good variables.) and it makes your code easy to maintain. Additionally, there is no need to declare two variables if you need one. In other words, if is used only for the first loop, and never needed after that, I dont have to make a for the second loop. I can just use . General Names Just as Variables need good names, so do subroutines. It is all too easy to take the that the recorder gives us, and to leave it this way. When you have larger projects, and become undistinguishable, and god forbid you have a and as well. Name everything. That's pretty much my mantra. From Worksheets to Tables, and PivotTables, and Workbooks, to code modules, subs, functions, etc., give it a proper name. The sooner you get in the habit, the more time you'll save. Implicit Object References You'll likely hear this one a lot, so it is important to learn. Whenever you are working on an object, you must consider the scope of that object. While looks fine to the untrained eye, anyone worth their salt in the VBA community will point out that it is a unqualified Range reference. Even worse, is if we have and one step further is this nasty bit: 

Proper Indentation. You shouldn't need the comment. Just indent that entire block. needs a statement. You wrap your code in a function, which is good, but you need to call that function. The last line should be 

You are caching , but really, it's not complex enough to warrant caching. I did some quick and dirty testing and found that you save about 10ms per 1,000 executions. That is not worth anything here. So, to reduce code size and bug potential, I suggest removing all caching. 

Speaking of, is defined as , which only works for elements with an ID. A broader solution would be to set target using '$(this)': 

First off, refers to the element you clicked on, so we can simplify your code a bit my replacing your second like so: 

Moving on to the "did"/"done"/"done again" button is a little trickier. "I already did it" will be visible so long as the want count is 0, and "Done it again!" will be visible after the want count is 2 or greater, but "Done it!" is more complex since it only shows up on one of the state machine paths (step 3/4). It turns out it is visible when the want count is 1 and we did not click the done button first and the done count is 0 or 1. This all leads to this block of code: 

Note the subtle elegance of the code. I didn't notice the effect this has when I first started writing classes in this way, until I had about 10 different classes and I had the RD explorer open. From top down: 

I didn't test the code on my end (I didnt want to bother creating a test table), but I imagine it should run in a matter of seconds. Note : Microsoft Scripting Runtime To use the code as is, you will need to add a reference to the Microsoft Scripting Runtime Library. There are plenty of resources for adding references, but ask if you get lost. RubberDuck. Use It. Love It. Prof-It I tend to be shameless about my plugs for Rubberduck, largely because the head of the tool, Mat's Mug, is unabashed in his attempts to convert everyone on SO to using RD. That said, it is an amazing tool, especially for beginners, and it would make most of the above comments stupidly easy to implement. Honestly, it would. Check it out here: $URL$ Wrapping Up Let me know how the code above works for you, and do your best to use it as an example for future projects. If you manage to implement even half of those suggestions you'll save yourself potentially months of costly learning experiences through failed projects. Best of luck! EDIT: Use this code instead to fix the error from above. The error is caused by adding a custom-type to a collection (I have never used Types outside of a class before so I didn't think of the error in advance). This approach is slightly more advanced, but it shouldnt be too complex. In a Class Module named 'Record' 

If we consider these two buttons a state machine, we see that there are six simple states (not including hover). 

Your logger configuration doesn't seem bad. It's a little verbose, but it is open to further extensions if those ever come along. I don't know your requirements, but if you're only ever going to have one file logger and optionally a console logger, you could change your list into an object like so: 

I have little experience with python, so I can't offer critique on the finer points of your code, just the big picture. That said, several things stick out to me. First, you have some large chunks which are duplicated two, three, or even four times (see lines 198-215). Scour through the code and extract these into their own functions. Second, several of your functions are massively too long: (161 lines), (97 lines), (228 lines). , once you get rid of the previously mentioned duplication, could easily be broken into two functions: the finding and the scoring. is too long simply because it contains all of the input handling. The section within the block starting at line 435 absolutely should be its own function, if not more since it clocks in at 144 lines. Finally, and this is more observation than critique, your classes do nothing but operate as organized data structures. This isn't necessarily a wrong approach, but it would look good if you were to refactor your code to be a bit more object oriented, especially since this is intended as a code sample. 

Know I know **exactly* what my code is doing, and I can debug it much faster if something breaks. Indentation This is a pet peeve of mine, and it is a pet peeve of the community as well. Always indent your code (properly) and never post code on SO that is not indented. We will be cursing your name as we indent it ourselves (or, even more frequently, we just refuse to help). A lack of indentation will make bad code even harder to read. Shameless Plug For Rubberduck Mat's Mug and his team have a tool called 'Rubberduck' that goes a long way towards enabling you to fix these problems. Everything from indentation, to variable naming and variable use, even to Function and Subroutine calls. I highly suggest checking it out: $URL$ . In Closing Whatever you do, don't simply copy and paste my code, throw it into your module, and just go on your merry way. I spent time on this to help you learn, and my hope is that six months from now you will be in my shoes. If you do decide to forego the learning opportunity here, you will miss out on all of the things VBA can really offer. Best of luck! 

Regular expressions are tough to read (human wise). As such, if you have a gnarly reg-ex in your code (), you should comment what it does. Furthermore, using regular expressions to check the total length of the string is inefficient and not necessary here, since you already have to check the length to report an accurate error message. As such, consider validating the username and password like this: 

is always one less than size, so you don't need that variable. Just replace all instances with . Similarly, could be replaced with . 

The path is one of these two options. In the first path, done is clicked first. In the other, want is clicked first. 

Acknowledging the state machine, look at the "want"/"want again" button. The text will always say "I want to do it again" after the done button has clicked. Essentially we can boil it down to this: 

Furthermore, It segfaults on me when I give it lines longer than 119 characters. (But this is probably system dependent). 

The Routine as a Tool Before I get into any of my suggestions below, I can't stress enough how important it is for someone to not use a 'tool' like this versus learning how to code efficiently. There are plenty of macro-recorders out there, and its nice to have something 'quick and dirty' when you're learning, or when you just dont have time to code it yourself. That said, I cant imagine a scenario in which using a tool like this is more beneficial to the user than learning the 'why' of what the code is using. That isnt to be harsh, or to say that this project is unusable. I am a huge proponent for writing code to learn how to code. In itself, this project has taught you about coding more than not writing it would have. Does that justify using this instead of continuing to develop as a programmer? Certainly not. In fact, I would give yourself, at most, three months before this project is dead. If, at the end of the next three months, you find this tool still useful then you are doing something wrong. Particularly, you are not yet using arrays for your loops, and as a result you are directly referencing the sheet. I can guarantee that, for larger loops, this is costing you time. For a bit of perspective, I can loop through 60k rows of data in a matter of seconds (if that). Try doing that with a range reference...well I would recommend not wasting your time. I can't stress enough: use this project as a learning tool, but not as a practical means of writing code well. Pet Peeves Most of the problems with your code are really stylistic choices, or decisions you've made that you just didnt have enough experience to know why they're bad decisions. Whenever I review code, I look for the things I used to do (and that were holding me back) but I just didnt know it yet. First: naming conventions. Spend some time learning them, and learning why they exist. 

Generally speaking, anonymous (unnamed) functions are completely acceptable within the land of Javascript. They are used frequently and without prejudice, so don't be afraid of them. That said, I'm not a fan of the second code sample. Without an understanding of the jQuery API, I don't really know what the two functions do to the hover call. Are both called, one after another? Perhaps something else happens? The name doesn't really give any clues here. I think a great option here would be to combine the two samples. Use the anonymous functions of the second with the explicit naming of the first. Furthermore, it should be noted that according to the docs, is shorthand for and , not and . I'll let you read over the docs and decide which of the two you decide to go with, but ultimately I recommend going with something like this: 

Variables and parameters should not be capitalized unless they represent a class. As such, the parameter in should be . 

Now you've really upset the worksheet. It has to update calculations, it has to resize stuff, fix formatting (if in a table), check number formatting, etc. It is a costly operation. If you're deleting a lot of rows...avoid it at all cost. Enter the world of arrays. Not only are they fast but they are easy. becomes . Once you load in the data to the array (Data) you can manipulate, access, delete the values all you want. The worksheet doesn't care. It doesnt see what is happening to the same data it was previously responsible for. Putting It Together I am not going to go through the code line by line, particularly because I already provided in-line comments to help make the code a bit easier to read. This will be a broad explanation of what the code does. 

Can you find the one difference I made between the first GetSpecString and the second? How long did it take you to find it? This was done to prove a point of course, but imagine if you, in all your wisdow, edited the first spec string, but forgot to make the same change to the second. Now you have two possible 'routes' your code can take, and it will take you forever to figure out why. Something like: