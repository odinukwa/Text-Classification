There are other small related issues. Docstrings Python has docstrings which are ways to document your functions. It isn't exactly clear what or do at the moment. You have a comment describing . Two things about this comment: 

My main concerns is that I have an "inefficient" (possibly incorrect?) formulation of the axioms. The code runs and compiles, but it feels like for instance, somehow, and could be somehow made into one axiom. Nevertheless, any advice is appreciated. (This is also on Github here in the file ) 

Is something you should probably do. You don't really need flags. You have a list of numbers (which btw, is a generalization of your problem statement, why?). Each one of these numbers represents a move you cannot play again. So in the recursive call: 

Plus, I can now call from one of my classes. (Although, on the other hand, I guess one could ask why I would ever need to use your function.) I wouldn't do more than though. In this case, it's 2 lines of code more for some re-use and re-enforcement of a good practice... Remember FizzBuzz is usually an interview question... A lot of abstraction is just not going to be needed. There aren't very many use cases for this problem. Javadocs You can document your code with Javadocs. The code you have right now doesn't utilize this, and it is pretty trivial to fix your existing comments to do this. Use braces This is the most important issue. This: 

If you have issues understanding what classes are please read the documentation. Function Structure The flow of your program is a bit weird. Your goes to which goes to , which then goes to the main function. I think having an is fine. The transition from to is fine as well. The issue I have is you call card game from . Your should determine if the bet is valid. Then if it is, let the function proceed into . Don't proceed from . Redundant string calls. and are unnecessary, just use the RHS. 

Small syntactical changes should at least be . Some would probably argue that you should spell out and entirely. I personally like small names, but regardless, the capital should not be there. You wrote this one time: 

The two sets you use , and . Maybe you should allow the user to supply such numbers? Allow one to change the sides of the dice. 

I wouldn't go as far to say that functional programming and Python don't mix, but you should really consider what you're going for while writing it whatever language you are writing in. I would not make your goal: 

Dispose all the things While you have a using statement for your connection object, there are a few other objects which implement you missed. Both the command and reader objects need using statements. Naming The method doesn't set anything. It would be more appropriate to call it , since you are retrieving information. Your variable names could use some work as well - they are somewhat inconsistent. Some have prefixes, while others do not. Some are camelCase, while others are PascalCase (the convention is camelCase). I left these changes as an exercise for the reader :) Use well-defined data objects I also noticed that returns a which contains various user detail properties. It would be better to create a data structure to hold this and return it instead: 

If you call the method, it returns all directories and files in one call. The upside is that it reduces the calls to the filesystem, which are generally going to be your bottleneck. The downside is that you get a base type back, so some type handling may be necessary. 

An alternative to @svick's answer is to use an extension method which only takes in two functions, and then chain them together, as follows: 

That consistently took around 21 seconds to populate the grid. To eliminate the possibility that the largest slowdown factor was loading from the file one line at a time, I produced a similar method which loads the entire file up front, then used a StringReader in place of the StreamReader inside the loop: 

Have you taken a look at the System.Data.SqlTypes namespace - particularly SqlDecimal? Building on some of the other answers, you can use and the operator as follows: 

It is then up to MainPresenter (or more appropriately, other classes MainPresenter uses) to figure out how to handle threading. MainForm itself never has to know or care that you are using separate threads. 

You could simply make GameState a Flags enum, which is merely a more compact version of the decision table palacsint proposed. 

all the things With the addition of the operator in C#6, I use it wherever possible when referencing the name of a member. In , this is useful for all your s: 

You may also note that I removed the explicit construction of a ThreadStart delegate. In many cases, you can pass a method group directly where delegates are called for. I find it a little cleaner to do so. 

(Given how your code looks and the fact you are talking about database searches, I will assume oDrc[y] is a DataRow object) If you are using .NET 4, you can use LINQ and : Using the following helper methods: 

I would say that it is pretty lucky that and have the same length. Give a length parameter. You don't need to convert to a list, and you don't need so many temporary variables. (I also prefer to since isn't a letter). Ultimately I came up with: 

There are certainly some good tests here. In a related question for Java, the answer by Phil Wright states: 

This could be vastly simplified using JSON and the Python library. tl;dr JSON is a convenient way of storing data (in file) that roughly resembles a Python dictionary. (There are also alternatives to JSON like XML, but I prefer JSON). You can also refactor using JSON. Place stats into a dictionary. I would put the player stats into a dictionary so you can make access stats like: 

Although you should comment your work, some of your comments seem unecessary. Let's look at some lines to see why: 

Prelude Firstly, you might want to ask on Math Stack Exchange if there is any analysis. This game looks a lot like Nim and a variant of the subtraction game (mentioned later in the article). The subtraction game in particular has a really nice and cheesy solution. The major difference is that you prevent taking any number away twice. On to the code! Default values When you start a game, the first player to go is, well, the first player. I don't think a user really wants to waste their time typing it. A similar argument goes for . You shouldn't really need to specify it. Hide it make the default value . so: 

This way we also don't need which you use only once, and is longer than . There may be some performance penalties, but it seems to run fairly well on the example you gave when I run it. 

At a quick glance, you do most (if not all of these tests). So in some sense the coverage is good. The amount of testing may be overkill. You have to realize you can't test every possible thing. With that in mind your tests should: 

Your naming of variables is hard to reason about. When I think about what your program is doing you, I come up with the following sequence of steps: 

I don't really believe you use to serve stuff faster. I believe is a better idea. (I don't like long names, maybe challenge yourself to a shorter name? Maybe ? Think about it.) (More) Comments Even then, isn't the most descriptive name, so you should include some comments as to what your code does. Don't over do it though. Remember saying something like: 

your class is not really a class It is not intended to be copied, compared, it does not communicate with other program parts. It even has a blocking loop. It is just a namespace like container. however modules do already fulfill the namespace. you could safely remove all and stuff and run the application like 

Note: whenever you have string literals used more than once define a variable and use that one in all tests and assignments. in case of a typo you are more likely to get an interpreter NameError while misspelled literals may cause really ugly bugs. so e. g. do 

BTW: your code may raise as well which goes through other than the While we have reduced complexity there still is this ugly in the inner function. I'd say we improve readability by avoiding the inner function and 

we notice a parameter which has two values. we could replace that with a boolean parameter and avoid checking strings and raising an exception 

Again - do not repeat yourself okay, let's go further down the road. we find two functions and where one is an obvious copy of the other. even prompts for a row . you shall not repeat yourself . While other cases of repeated code were cased by an initially bad choice regarding internal representation, this is a case without an excuse. as the functions are implemented one could safely call for getting a column and vice versa. So we delete without replacement. If we wan to prompt for "Row" or "Column" we make that a parameter. some smaller repeated code we continue into where we replaced the calls to 

When writing library classes you should follow the python guidelines to enable generic duck typed interfacing. have a look at the python datamodel and try to make e. g. the following tests work by implementing and . 

comments and docstrings in you use a parameter choice which is one-based. this is not common and not mentioned in the docstring. so while there is a 6 line docstring one of the most important facts for correct usage is not mentioned. While your parameters and return values are listed by name there is no hint about the correct type nor the value range. 

Proper error handling so now the big bug. if we cannot place the player in we switch user. if something is an error report it to the caller. that does not mean to print something to the screen but to return an error condition or raise an error. Output to console shall be done from main only. so we refactor to return success and remove the print