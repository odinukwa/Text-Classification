I checked another server recently upgraded to 2016 and the stored procedure had been updated successfully. Is there any reason why an in place upgrade would complete successfully but not update the system stored procedures? All databases are running in 2016 compatibility mode. Obviously I can update the stored procedure myself, but I am just wondering if any others have been missed? 

We've recently upgraded a server to SQL Server 2016 (Enterprise). But then the syspolicy_purge_history started failing on the 3rd step. I traced this back to msdb.dbo.syssubsystems which had an invalid agent_exe value for PowerShellStart. When I tried to update this using sp_verify_subsystems I found that the paths in this SP hadn't been updated as part of the 2016 upgrade to point to the 130 folder and were still point at the 120 folder. 2014 SP Version 

Having a main table and a child table in a Microsoft SQL Server database (2005+), I want to show the user a single table in a grid view which includes rows from the main table and rows from the child table, with the latter one being shown as additional columns. Please see the following example. Main table: 

I.e. I'm using Oracle's with a second argument, specifying the characters to trim from the left side of the string. Unfortunately, the T-SQL version of doesn't allow me to specify the characters to trim. Currently, I'm rather clueless how to migrate that . I'm even thinking about processing the results in my hosting C# application, after I read the . This looks rather inelegant to me. My question: Is there any meaningful way of getting an -like functionality for T-SQL to pass the characters to trim away? Edit 1: I need to replace , and from the beginning of the string. E.g.: 

If I query the table using SystemCreatedDt or SystemUpdatedDt in the WHERE clause I can't seem to get any partition elimination and the query plan shows a clustered index scan of all 1bn rows, even if I create a partition aligned index on SystemCreatedDt or SystemUpdatedDt. 

We have a SQL 2016 database that has a 1.9bn row table which has a varbinary(255) column which we use to store the HashBytes of an nvarchar(2000) field in the same table. We have a Non-Clustered index on the varbinary field and our index maintenance scripts perform a REORGANIZE on this every 2-3 days. But this takes 10+hours to complete. Any way to improve the speed of index maintenance for varbinary fields? 

ID 2 is currently set to the default but cycles after a max 5 files. This trace isn't the one filling up my hard drive. ID 1 path and trace file are the ones filling up. I've already turned off C2 auditing. What other troubleshooting can I do to see why the audittrace files are even being written to in the first place? EDIT: I've restarted the services. It would seem the correct solution would be to turn off this audit trace by using the sp_trace_setstatus 1,0 but when I run that command I get the error: 

This error was resolved by adding a second IP to the listener. The IP address for both subnets cannot be an IP address already in use, i.e. the IP address of one of the nodes. A DNS entry is also not needed since the Listener creates the DNS entry as part of the process. 

to query for a list of tables, I'm currently finding no way to retrieve a list of non-system tables only. I.e. the above query also lists me system tables like "sysdiagrams" or "dtproperties". So my question is: How to query a database for existance of any user tables? 

Just read about the release of SQL Server CE 4 and then searched all through their product website, I still cannot find a feature overview. Previous versions of SQL Server CE didn't support views, I was hoping that they removed the limitations. My question is: Is there a page which lists the features and limitations of SQL Server CE 4? (Edit: I found this feature comparison for 3.5, but not for 4.0) 

Struggling to tune this query and make use of the partitioning so I would be grateful of any help with index tuning a partitioned table. Edit 26/01/2017 Here is an anoymized plan for the query $URL$ To give some context to this Column1 = EventtId Column5 = EventCreatedDateTime Column18 = SystemCreatedDt Column20 = SystemUpdatedDt I had to use SSMS 2014 to create a plan that I could paste into pastetheplan. One bit of info missing from this for the index scan is Estimated Number of rows to be read which is 1,173,200,000. There is a suggested missing index for all 20 columns in the query, but that wouldn't give us any partition elimination I don't think. Edit 27/01/2017 DDL for Index 

The only server role it is a member of is PUBLIC. How can I find out what exactly is preventing me from revoking these permissions so I can drop the user? Thanks. 

We are currently testing a SQL Server 2012 AlwaysOn HA implementation where we have 2 out of the 3 nodes are synchronous. The third, asynchronous node, does not have a vote in the quorum. There is a scenario in which the first two nodes experience complete failure. When this happens, the third node is up and running but it has it's database in the AG marked as "Recovery Pending". How can I get this database out of this state and make it available? 

I have tried granting full control to the folder share to myself, the SQL Agent account, and the SQL Services account. Whether I run the package as myself or as a service account I receive the error messages. I'm not seeing any more details in the SQL Server error logs or the Windows Event logs. 

I.e. the child rows are transformed as additional columns. My question is: Is there a way to achieve this with standard SQL, i.e. without using the statement or some statements? (because I want to use the query against a VistaDB database, too). Update 1 Then number of detail keys is variable and not limited to 3 or to "X", "Y" and "Z" as names. 

Edit 2: I strongly hope this isn't an XY problem. Maybe rewriting my whole query would remove the need for altogether, although I would rather focus on porting it as 1:1 as possible and later question the usefulness of the . 

Running Microsoft SQL Server Profiler every now and then, it suggests me with a bunch of new indexes and statistics to create ("...97% estimated improvement..."). From my understanding every added index can make an SQL query faster but also an or query slower since the indexes have to be adjusted. What I wonder is, when do I have "too many" indexes/statistics? Maybe there is no clear answer on this but some rule-of-thumb. 

I need to remove records from this table that are older than 30 days. We only have 2 columns in this table. The first date after 'Printed_%' is what I will be using to determine if the record should be deleted. Notice some of the dates are in MM/DD/YYYY format while some appear in M/D/YYYY format in the string. How can extract the date so I can determine which rows are older than 30 days? 

Running the PowerShell script from this technet article is the easiest and most secure in my opinion. $URL$ 

This ended up being a Kerberos problem. We were able to identify through some of the security logs and some network monitoring, that the request was coming in as anonymous. Once we applied the relevant SPNs for MSSQLSVC for the account that was being used to kick off the process, it worked.