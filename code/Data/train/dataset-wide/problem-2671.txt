No, definitely not. XSS is a vulnerability that happens when printing something to the user, so that is when it should be defended against (in PHP eg by using ). Also, isn't really recommended for hashing anymore, you should use something like bcrypt. This also has the added advantage that you don't have to take care of salts, etc. The relevant function in PHP is . Structure globals are evil (not necessarily always, but definitely in this case). If you have to return more than one value return an array, do not set it as global. I personally would choose a more OOP oriented different approach of having a user object and setting the email there, and then returning true/false instead of an integer from (because either the login is successful or not, there are no other states). Misc 

No, but they should be clearer. Your way of placing one if into the other, and of checking the negative case first makes the code hard to read. If you turn the s around, your code would look like this: 

Loading Config Data You are loading all config entries into an array, but you are only using . It would be more efficient to only load what you actually need. XSS You are not sanitizing your data with , so anyone creating frontend titles, product titles, or product descriptions will be able to execute arbitrary Javascript on the clients machines, and can thus steal cookies, log passwords, deface the website, etc. 

If this code is representative of all your code, then yes, I would suggest a complete rewrite, using more modern concepts (OOP, MVC, template engine, some framework, etc). Until then, I would probably take the website offline, or at the very least add a web application firewall to the server. Security Your code is currently vulnerable to SQL injection, XSS, and CSRF. You need to look into prepared statements to be secure against SQL injection. Some frameworks also provide ORMs or query builders, which may make it easier for you to securely access your database. You then need to HTML encode user input when echoing it. Most templating engines also provide this functionality, and some encode per default (which I would recommend). Most frameworks also offer some mechanism to protect against CSRF. Structure Your code is too long and not well structured, as you don't have any functions. Because of this, it also contains quite a bit of duplication (eg the edit/add forms which are quite similar, duplicated select queries, etc). Most frameworks would make it easier to structure your code well, as they for example use MVC, or expect you to program things a certain way. Misc 

which cause many memory reallocations. Since during one game grid size is a constant number you can save it at the constructor, and then just create array for result and set its elements by index. 

Solution Methods should have PascalCased names as well so and have to be changed to and respectively. WithinSingleEditDistance You can simplify a bit your loop: 

method not only pauses a game but also resumes it. So either give another name to the method or split it to two ones like and . Also this code 

I don't understand how can be a subclass of . Authority is an attribute of user and not user itself. The same applies to . In my opinion it is bad to keep users related to specific group inside the group. You should take a look at databases developing where there is the first normal form according to which you need separate objects that will connect and . And I see you have the class for this â€“ . So proceed completely with it removing list of users from the . The previous point in fact is even more important since groups contains related users and users contain related groups... In my opinion it not just can be reorganized, it have to be. 

two times that can cause slowing down if some method in this chain is not lazy and executes heavy code even for . 

Every time you need to check if a value is presented in a dictionary and if yes then get it, you should use the method to avoid double search of the value by key. So instead of 

There are more additions, but they do not seem to affect the basic principle. This means that an attacker can gain at least some information about the password by looking at the encrypted password. An encrypted will statistically have a smaller value than an encrypted . You can see this easily by adjusting the range from which random numbers are selected. Using for example , encrypting will result in this: , , , etc. You can see that is smaller than , is smaller than , or is smaller than . Making the random range larger makes this problem less sever, but it still exists. for example can reach values which other characters can never reach. So whenever you see , you know for sure that it's a . When you see you can be pretty sure that it's an , and so on. This makes brute-force attempts significantly easier for an attacker. Additionally, the size of the password is easily calculated given the encrypted password. This should not happen. Also, note the documentation of : I haven't looked at the decryption code in-depth, so I'm not sure if there are more weaknesses, but there very well might be (I'm not yet 100% convinced that the original password is even needed for decryption). Code 

Is it correct that when is null, should not be set? Because if not, then you could just combine the two statements, either in my example, or in yours. 

Structure Currently, there is no reason to have or , they are just delegating to the public field. A user of your class may just as well use that, and may be confused about the difference. There is also no need for to be public, as there is no need to ever reopen the connection. If you think you do need a wrapper around mysqli, it should: 1) actually add new functionality or make the existing functionality considerably easier to use 2) be an extensive wrapper, so that there is no need to make public so that it can be accessed directly. Also, don't die in a class, it makes it difficult to (re-)use. What if you want to fall back on something else? Or show a proper error message? Throw an exception instead. Also, it would be a good idea to pass the credentials to the class, so it is more flexible (you may eg want to load them from a config file or at least a file only containing the credentials, so you can exclude them from versioning, etc). Style Your indentation is off, and you have quite a bit of unnecessary vertical whitespace. Variable names should all follow a common naming scheme, for example camelCase. I see no apparent reason why is all uppercase. Class names should start with an upper-case character. Comments Your comments just repeat what the code already told me ( closes, prepares, and so on). Comments like these will lead me to believe that all your comments will not be useful to me, which leads to me missing comments that actually are important. Result If you follow all my advise, your code may look like this: 

If you read about Random.Next on MSDN, you'll see that it returns value that is greater than or equal to minValue and less than maxValue which means you'll never get . 

How should I exit from your program? Alt+F4? You run endless loop without any but with multiple statements that return me to endless loop again. You shoud avoid since it makes hard to understand your program flow. 

Let's see example of how you can remove from the . First of all, view -model should implement interface which contains event: 

And that's all. You need to eliminate all the view related stuff from the view model in such way. It is how MVVM have to be implemented. 

It will simplify all your methods. Also if you will return instead of they can be even more simpler. For example, will be 

You've been already told in your previous post that you should use instead of . Although it is completely up to you using of is common practice. 

You have a lot of inner loops so I suggest to split your code into small methods decreasing nesting level of your code and increasing its readability. 

It's often better to use semantically named methods instead of mathematical expressions. For example, this code 

I recommend also to use different naming for private fields, for example, . It helps to easily distinguish fields from parameters and local variables. 

you don't need since the provides method which doesn't require additional memory allocation. I recommend to use for all variables where the type is obvious from the right part of expression. I hope you'll agree that