Great documentation, but what is this special case? You've gone to great lengths to explain what you decided and why, but never actually state under what conditions the constructor will throw an error. 

Overall, it looks good, but sometimes you have to ask yourself why you're testing something. What benefit does a test provide. You don't seem to really be testing your code, but the .Net framework itself. I don't see any benefit to having this test beyond making yourself feel good when it turns green. The only other thing I would mention that @Janos didn't already is that this method doesn't really do anything. 

Let me point out some things that I know can be improved so that other answers can focus on my problem. 

This would be perfectly fine if you distinguished the field by using the keyword or an underscore to make it look different from your methods. 

Take note that I added a single line comment before the closing "bracket". Why did I do that? Watch. 

I think it's okay to compare by rank, but in reality (and although it's against intuition), the game should be responsible for determining the relative values of the cards. In very few card games does the suit matter when comparing the value of two cards. Also consider that in some games an Ace is 1, in others, 11. Moving this responsibility elsewhere makes your cards much more reusable in other situations. 

I've recently taken an interest in analyzing commit history to find files with a lot of churn. The idea being that high churn files are likely targets for refactoring. Right now it's a simple console app that returns the number of times a given file was committed. (Renames are not currently followed. It's a known area for improvement.) The basic design is to have a visitor walk the commit graph and raise events for a listener to gather information about them. Currently there is a single listener that diffs each commit with its parents and caches those diffs. This should be flexible enough to create another one that, say, collects committer stats though. GitNStats v1.0.1 is on Github if you prefer to view it there. Visitor.cs 

I find it a little odd to initialize a bool to true, then set it to false if the code doesn't exit early. I would rewrite your method just a little bit. 

Don't one line things that shouldn't be one lined. Just because you can do something, doesn't mean that you should. Extract the duplicated query into a method of it's own that returns an Don't query the database twice for the same count, execute the query and store it in a variable. 

Extract that logic into a data layer. Minimally, extract a private method. Create an extension method for cloning the properties from one of your models to another. Stop this nonsense. 

The first one makes it much easier to adapt the external type to a slimmed down version. The second one removes this need entirely, but you lose the ability to use the template views that Visual Studio provides. Pick your poison I suppose. 

Co-dev Hat It works, so I don't really care how it's implemented. (At least until I actually have to make some kind of change to it. Gods help me that may I never have to truly understand your parser. Not because it's bad, but because I haven't spent any time learning it.) Reviewer Hat I would expect the s to be part of the . I understand why they're not. The grammar file you borrowed from another Open Source project didn't include comments. This is because that project was interested in executing VBA code. Therefore it, naturally, excluded them. Our project is different. We're interested in analyzing the code and this includes the comments. I feel like the technically right thing to do would be to modify the grammar file so that comments are parsed along with the rest of the language. At that point, implementing features based off of parsed comments becomes identical to implementing any other feature based off of parsed code. As it is, any features that need to know about both the code and the comments is likely to need special handling for each. That's double the work and double the chance to introduce a bug. Now, is that worth the effort? I don't know yet. I haven't tried to modify the grammar file to pick up comments yet. 

This should format just the lists within this particular list. The selector is read as . More information can be found in the manual. 

Every argument you send to comes from . I would add an overload to it's constructor so that you could simply pass in an . I think it greatly simplifies the code. 

This is an abuse of extension methods. is a class that you wrote. Extensions are for extending classes that we can't modify. There's no reason to write an extension method for a class that you have complete control over. should implement this directly. I'm going to risk some general hand waving here, but... In my mind, anything that's inheriting from or should be dead dumb simple. It should raise events and provide some properties that a separate class can set. Those properties are then wired into the actual UI for display. There's should be very little logic at this level of the application. That logic isn't easily testable when it's bound up in your UI. A more proper architecture would look something like this diagram. 

The view logic belongs in the view. Create a partial view that gets conditionally rendered. (Toggled on/off) 

You don't need to early bind to do this, but it certainly makes it easier to find the property. There are a few things I don't care for in the next snippet. 

So, this might not be quite in line with your 100% automation approach, but the best way to provide a shell script access to a git repository is to use ssh keys to allow access to your git repository. Of course, this means you either need to log on and set up that key and grant access it to Git (goodbye 100% automation) or securely copy a private key that already has access to the repository to your server. You'll probably want to keep that key someplace that requires a password to access it, so... chicken and the egg scenario. Unless your cloud provider gives you the ability to create a template that already has that key on it's file system when it's created. If you can do that, then you definitely want to go the ssh route. Your clone would look something like this. 

That's a lot to take in, so I'll stop for now. I really encourage you to come back with a follow up question after addressing these things. I didn't get to address your actual questions, but I feel it's important to address these issues first before tackling any performance related questions. Code review can (should?) be an iterative process. 

The next step would be to extract a method to eliminate all of the duplication. It should take in a parameter and perform your copy/insert. Basically anytime you hit Ctrl + C you should stop and write a method instead. 

But you missed something important. This won't render as code when you run it through Sandcastle or Doxygen. You have to wrap it in the element for it to render properly post processing. This is the proper way to create example documentation. 

But I can't find an instance where is being assigned to. As such, you can pass it too and eliminate an entire class of possible future bugs from the code. A lot of times, we can replace good comments with well named procedures. I think this is one of those cases. 

VBA does't have short circuiting logical operations, so no matter what the return value of is, executes every time as well. We can unroll the logic a bit to make it more efficient, but be sure to leave a comment explaining your actions to your future self. If you're anything like me, you'll instantly want to undo this optimization the next time you see it if there's nothing telling you not to. 

This guarantees the cashier only gets one strategy per sku and gives you the memory benefit of only needing different pricing strategies where the pricing strategy is actually different. 

The requirements have changed and now I need to exclude a list of s from this report, but only when they have a of . This is what I came up with, but I don't much like the duplicated select in the statement. Since the exclusion table resides on the local server, I have switched to an instead of a direct connection to the remote server. How can I improve this? 

I would recommend leaving a small comment alerting the unwary maintainer that it is a bitwise not a logical though. I don't imagine too many VBA Maintainers will understand this code at a glance. 

The Code The API wrapper library needs an API Key & Token to connect to Survey Monkey. In order to keep them out of the GitHub repo, I created some environment variables and a factory class that knows how to access them and return an instance of . ./SurveyMonkeyApiFactory.cs 

Single Responsibility and Lying Names The method does too much. It both gets input from the user and stores that information in an array (a potentially large one at that, but more on that later). Then it prints the array. You should have three separate methods here and should do one thing, sort an array. As it is, nothing actually gets sorted per se. You're just keeping the list sorted, which seems smart, but... Performance Think about what happens when I give the number 100. The number 1 gets placed into the 100th position of the array. To get it back out, we have to then iterate over 100 positions. If I give it 1000 instead, we now have to make 1000 iterations in order to find it. That's 10 times as many iterations. This method gets exponentially slower. It is no surprise that inputting 10^6 exceeds the time constraints; it takes 10^6 iterations to print the number, even if it's the only number in the array. This can be solved by implementing any number of well studied sorting algorithms. A quick google search should get you started. I recommend learning to bubble sort first, then move on to the more efficient algorithms. This assumes you're doing this for educational purposes. Otherwise, just use Ruby's built in Array#sort method. 

The base class shouldn't know about any child classes. As you have it, any time you create a new class that inherits from you would have to go back and modify BaseHelper (potentially breaking it and any classes that inherit from it.) I would definitely spend some time thinking about how you could make it so that BaseHelper is "closed" and "finished" code that you never have to think about again. It looks like you're trying to implement the Visitor pattern, so you might want to take a look at some examples. 

Everything starts fine with the loop and the statement, but then you add an extra level of indentation after inserting the row. The rest of that block is logically on the same level, so it should be at the same indentation level. Also take note that your loop incrememtation happens at the same indentation level as the and statements. It shouldn't. It should be one level deeper. The other thing to note about whitespace is the good use of vertical whitespace. It can make all the difference to readability. Use an extra line (one, never two) to differentiate between logically different things that occur sequentially at the same level of indentation. This is the code after making these readability changes. 

Essentially, when the mod of 2 equals zero, the code behaves exactly like yours does now, but when the mod of 2 equals one, the loop exits one iteration early, avoiding the that prompted you to hack in that white space. Also note that I changed 

I wouldn't go crazy, because the number of threads it will spin up is limited, but it seems reasonable to me to run each year in parallel. It's possible you'll see a good boost. 

I see that there are a few other people who have tackled Project Euler Problem #3. I hope you're not all sick of that question yet. I've not taken a look at those yet (purposely), but am about to now. I feel like I did a pretty good job on this one, but you tell me. How can I further improve this code? I'm particularly interested in how it could be made even faster, but it seems to already be a pretty quick implementation. My first version took over an hour, this one runs almost instantly. I'm also interested in how I could have used a instead of an array, if you feel that would have been a better data structure. 

This was by no means a thorough review. I didn't have a lot of time. Hopefully someone else comes by with a fine tooth comb. 

There's no point in catching an exception just to re throw it. This adds unnecessary overhead to the code. You might as well just remove the block. 

Which leads me to believe that there's no reason to derive a child class. Instead, change the name of to and make it . Do not derive from . Instead, just have a static class with a bunch of static methods that return s. This will remove the need to have any constructor at all. 

What happens if your OPs guys screw up and don't enter a manager for somebody? Or your code happens upon the owner, who obviously doesn't have a manager? What happens then? I'll tell you what happens, you're going to get a NullReferenceException right here. 

Returning a out from your view tightly couples your presenter to this particular view and architecture. All in all, not too bad, but leaking the details into your presenter is much worse. Returning a won't stop you from creating a WebForms web page that uses the same presenter, but leaking the into your presenter will. One of the big benefits of MVP (other than test-ability, which I'll get to) is the ability to use the same business logic on desktop & web. You can't do that because you've leaked details of your UI layer into the business logic. I don't have to time to figure out how exactly to encapsulate the tree view logic in your case, but it is a view concern and should stay in your view. The issue is typically fixed by using a of [your data model] in the view interface definition. Like I was saying before, one of the other benefits we get from MVP is test-ability or, at least, we should get those benefits, but you're not at the moment. This is because you're accessing UI elements directly () and writing to the file system directly from your presenter. I would take a bit of time to create a new class and interface for writing/reading from the file system. This would decouple you enough that you could write automated tests against your presenter. Bonus, it would let you swap out implementations so you could write to a database instead, if you choose to later. Which brings me back to 

This really needs to be replaced with a constant. A meaningful name will go a long way here. Consider using something like . Whatever you choose, do not use . It's tempting, but then you'd be encoding the value into the identifier. 

If is , then you'll get a when is called, so there's currently no possible way the second half of this statement will ever be called. I think you meant to do this. 

Another approach would be to make your program "learn" each time you use it. Instead of generating each combination of characters every time the program is run, cache the calculated strings to disk along with the data that allows you to start where you stopped. Then you can check your known list of possible passwords before generating more. Essentially, this is a dictionary attack too, but you're building the password dictionary incrementally each time you run your program. 

It's good that you defined variables for these, but if would probably be a good idea to leave a few comments explaining why you chose these initial values. It's also interesting to note that C#6 supports auto property initializers. If/when you move to it, you could greatly simplify the way you're defining your properties.