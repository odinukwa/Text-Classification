Today I was working on something that required quiet concentration. Some colleagues near me were chatting. I was building up to asking them to go somewhere else, when one of them must have picked up on my look, and they started whispering. (I hadn't meant such a pointed look, but hey!) Anyway - this was almost as distracting. I really wished they had taken their chit-chat to the nearby coffee/meeting room. 

Experience in automated testing is obviously your route to product development positions. I'd suggest looking for a position in an agile team where multi-disciplinary work is highly valued. (As distinct from agile teams where this is not so... ) Also - have a look at your resume, and consider re-writing it with an emphasis on your experience that is relevant for development work. At the top, you can put a summary paragraph that clearly states your intended career direction. 

Developers will usually recognise that any team needs someone to take care of the administrative tasks and management things. If you can become recognised as the team member who does that, you will have succeeded. To achieve this, what you need to do is: do the work. Make plans. Execute them. Make sure all the things that you are responsible for stay working. After a while, you will be appreciated. 

You say: "She'll then assign me an expected time". This is probably the most important thing to address. She's asked you for an estimate. You have been unable to give her one, so she has gone ahead and made a plan anyway. The point is that as the technical specialist, your estimate is probably the best one available. Has she just made up a number, or has she got a basis for the number she's chosen? It's probably reasonable for you to ask how she's arrived at it. You may need to use all the professional tact at your disposal, but running away from this won't help either. The distinction between an estimate and a plan is crucial. In refusing to give her an estimate, perhaps you have given away your opportunity to influence the plan. It might be possible to say: "I really don't know, but I understand we need to plan something." At least then you can discuss the plan. As it will be based on inadequate information, you'll want to plan to replan it. Often it can be really helpful if you can say when you think you'll know more. For example, "At the moment I don't have enough information. It's impossible to estimate it right now. In order to make progress, I'd suggest we start by planning 4 weeks for it, but I'll know much more by the end of the first week, so let's meet then to see whether that's anywhere near the mark. Is that going to work for you? Are there any other constraints I need to know about?" 

Most programmers are keen to write good code, and have ideas about what the best way is to do it. They don't always agree with each other on this. The goal should not be to get them to do it exactly as you say - apart from anything else, you can undoubtedly learn from your team too. Of course, you want to keep to good standards, and that includes having the team write code in a consistent way, rather than each doing their own thing. As you have mentioned, some practices are technically better than others, and you'll want to include the good ones in your guidelines. This can be achieved through various routes. I'd suggest the following: 

A job interview is a two-way meeting. The goal on both sides is to see whether there's a good fit. So it's perfectly OK to discuss something that they've mentioned in the job advertisement. Of course, you don't want to appear in a negative light, but imagine the possibility that you failed to address it and started to work for them. I'd suggest that you ask some behaviour-directed questions about this topic. "I've seen this aspect of the job mentioned in the advert: can you describe for me a situation where someone demonstrated their willingness to buy into the company, work hard and be committed? What's it like when you 'play hard'?" 

It depends on the terms of his employment. If his job description says he's expected to travel for work, then that's how it is. Some people deliberately choose jobs that don't require travel, and plan their lives around that. Often this involves sacrificing something else: money, more interesting assignments etc., but it's a choice you can make. If his terms of employment include having to travel for work, then his insisting on using a bicycle is probably unreasonable. If not, then he's doing you a favour by agreeing to travel at all. That said: these days, it's often good business to enhance your remote working facilities. Maybe this is just buying people a web cam and a microphone, or perhaps you need to do more, but if you can make that part of the work a bit smoother, he won't be the only one who benefits. 

Historically, this was common practice. In the decade or so of the Agile movement, we've seen improvements. The basis of current good practice is that a team should maintain a sustainable pace. Usually this means about 40 hours per week, and anything above that should be the exception rather than the rule. These days, any good employer will be aware of the research that backs this thinking, and will therefore know that they will not profit by it. There are plenty of examples of workplaces where this has been turned around (it's win-win), but I daren't suggest that this is likely to happen where you are. 

Of course they can't force you to sign such a thing. The whole point of an NDA is that you sign it in advance, before sensitive information is revealed to you. The only reason for it is to give them a means to inflict worse punishments for disclosure than the general law would allow for. If you had been an employee, you would have a legal duty to respect any confidential information given to you in the course of your employment. I'm not clear exactly how that works for an internship - it would probably depend on the agreement you had with them. In any case, legal duty or none, simple professionalism and honesty demands that you respect their confidences. This being the case, and as it sounds like you don't want to do it, my suggestion would be that you respond to their request in a letter as follows: 

Asking questions in the right way is a vital skill in many disciplines, including software development. If you've exhausted the readily accessible answers on the Internet and not found what you need, then asking on Stack Exchange is a perfectly good response. Make sure that you take the time to describe your problem well. Ensure all the relevant information is present, and that you summarise the approaches that you have already found to be unacceptable. Explain your thinking, and why you are leaning in a particular direction. Ask pertinent questions and engage with your (potential) answerers. In this way, you not only don't need to hide your questioning activities, but you can actively promote yourself. Show people the questions you asked, and how you worked with others to refine both the question and answers. This kind of effort can only bring you positive exposure.