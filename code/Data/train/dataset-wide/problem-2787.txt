Avoid magic numbers. If is supposed to represent a fixed radix point, you should document that by assigning it to a descriptive variable name. If you use a fixed-point decimal class, you could just refer to its radix point instead. 

contains some payload . We can read through . How do we write to ? Why return a copy of ? Since your class is an internal implementation detail that isn't used outside of your , consider making an aggregate. 

Be aware of what actually does. is the equivalent of writing . The writes out the stream. Luckily this has a very minimal impact on unbuffered streams like . When you work with file streams and other buffered type streams, excessive and unnecessary flushes can be detrimental. Avoid using . If you have to flush the stream, use explicitly. If you want to have a newline, explicitly print one out using . 

What is a ? My definition of a is different than your implementation of a . A tracks the amount of time that has elapsed while the stopwatch is in an active state. The basic functionality is broken down into the following parts: 

It works but it's still terrible. The callee has no idea an error occurred and the function returns a value that looks to be valid. A better solution is to use one of the many error handling techniques that already exist. The simplest is to throw an exception. 

On construction, s internals were initialized (data and error state). In your refactored code, you wanted to mimic a newly constructed object 

Applying this to a single pass approach, you will need to store the preceding element in a temporary. 

The call to may have an effect on stream efficiency. Rather than researching which streams behave poorly with flushing, explicitly state your intent in code that you want a new line. 

This can simply be written using and it does the work for you of returning a key-value pair. Putting it all together, you get 

Don't try to return both error codes and actual representable data through the same return variable. A library user may be using in their data set and a call to may result in some user-code believing some data was actually removed. Decide whether you want to inform the callee of success or failure and don't bother returning data from the list. If the callee really wants the data, they can copy it themselves before deleting. 

If is not found in , shouldn't you just return ? If you do remove the first occurrence, you could have up to 3 possible allocations here. Consider reserving a buffer first then copy the two substrings. 

Consider the callsite readability. Why should users of your library be concerned with the details of ? Wouldn't it be better to just pass the value directly to the function being mapped? 

Instead of using a built-in integer type, leverage the type system by using a fixed-point decimal class. 

Specify for immutable variables. self-documents that a variable should not change values in the current scope and any accidental modification to the value is detected at compile time rather than run time. Prefer enumerations to represent sets of related named constants. Avoid magic constants as they are difficult to understand and may be overlooked. Prefer symbolic constants to give values contextual meaning. 

Be aware of the pitfalls of . Despite the widespread support of , the compiler extension is non-standard (rejected by committee) and not guaranteed to have the same behavior across all supported compilers. The extension allows the compiler to figure out which files should and should not be read for compilation. This is a difficult task and can easily be defeated by symlinks/build systems. The guard idiom forces you to decide on an identifier that defines your intent the file you are working with. It does require a unique name and you do have to type it out twice across three lines, but you control what is included and not included. Until the Modules TS is standardized (soontm) or another approach becomes standardized, prefer the guard idiom. 

Keep your headers organized for readability and maintainability. Any source files you generate should be self-sufficient by including the headers of any symbol used. While some files will include others (e.g. including ), the behavior is not guaranteed. You are missing: 

While this is a small project and your includes are minimal, I would still recommend you order your includes. From John Lakos' "Large Scale C++ Software Design": 

So becomes , which is equivalent to (the null character). Since is not null-terminated, the null-character is a valid character to be contained within a . 

It is important to get the interface correct so users are not surprised. Conceptually, a stack is a container that operates on one end of a sequential collection. The two important operations are push (adds an element to the collection) and pop (removes an element from the collection). does not add elements to the collection in your implementation. Surprise! You shouldn't provide direct access to the full linked list as that is not the concern of Stack. Stack is only concerned about the last element. Strive for -correctness. Immutable types should be specified by (read-only). C++11 allows immutable literal types to be specified by instead. For methods that only inspect the internals of an object (immutable), specify . 

are not null-terminated strings like C-Strings. What you wrote still works because the standard allows it to work. From the C++14 standard (n4140 was the last publicly free draft before standardization) 

When working with templated types, be careful with assumptions. is not guaranteed to be default-constructible. When is a built-in type, what is the value stored by the member when is default-constructed? 

Declare variables as locally as possible. Variables can be initialized with proper meaningful values and properties (such as ). 

RAII containers are designed to call the destructor at the end of scope. In this use-case, that destruction call cascades down the list adding each call to the stack. If the list is deep enough, you will overflow the stack and the result is a segmentation fault. You'll need a destructor that iteratively destructs the list, which will also require that you satisfy the rule of five. 

If you refer to 's constructor documentation, you will notice neither nor the allocator accepting version are as either could throw. That violates the commitment you made in your function signature that was . You are constructing the container with default-inserted instances of . What happens if is not ? 

Use class hierarchies to represent concepts with inherent hierarchical structure. Inheritance is the process of inheriting properties of objects by one class with another. The properties of are not represented through . Never inherit when composition is sufficient. maintains a collection of . Don't use inheritance just to avoid locally defining variables. 

Try to keep your s ordered. Especially when you get into larger projects, it's easier for the maintainers of your code to binary/dictionary search through your list compare to linear searching. 

As Jerry Coffin mentioned, you are basically reinventing . I wasn't sure if I wanted to review this or flag it as broken code, but it technically compiles and it technically works for one conversion (perhaps a discussion for meta-cr). Test your code thoroughly. 

Class specific details like aliases should be kept in the class or wrapped in a namespace to prevent global namespace pollution. Why ? is typically reserved for shared-ownership resource management and that has a cost associated to it. They are twice the size of a raw pointer as the object stores both the raw pointer to the resource and a raw pointer to the reference count. Reference counting must also be atomic to handle multiple reader/writers, resulting in slower increments and decrements. If you want to use a smart pointer, C++ provides for exclusive-resource management and should typically be the default smart pointer unless you need . 

Is the natural ownership abstraction for your ? Every in your tree is owned by one other (or is the root), so is overkill compared to . If you want to reference your parent, there is nothing wrong with using raw pointers in non-ownership contexts. C++17 will provide the world's dumbest smart pointer if you really want to avoid raw pointers. 

When programming generically, prefer calling the non-member functions. Member and do not exist for all containers. However, the standard containers and c arrays are supported by non-member , , and the const/reverse variants. How does the specification work if can throw? It's not clear why you are applying a function to a result. Consider writing a wrapper () on a generic non-member to apply the result to a function. Using Expression SFINAE (ymmv on MSVC support), you can simply check if the expression is a well-formed expression. If the expression is ill-formed, the overloaded function is culled from the overload set. 

Prefer to acquire resources/responsibilities on initialization (see RAII) instead of lazy initialization. Constructors exist to define the class invariants, so use them to create fully initialized objects. If the file cannot be opened for whatever reason, you should notify the user that an error occurred. Validate your post-conditions. 

The naming doesn't feel right with this. Your structure is supposed to represent the count of a digit, but this structure is telling me it takes any and tells me . Just better naming helps (and bounds checking if you want to validation). Storing every digit requires knowing both the value and the count. Using sequential containers, we can disregard the value (represented as the container index/key) and simply have the container maintain the count. 

Do not use directives or declarations at the global scope of header files. Doing so pollutes the global namespace of anyone using that header which may lead to symbol collisions and ADL misbehavior. 

Keep functions short and simple. Each function should perform a single logical operation. Functions then become simpler to understand, test, and reuse. You find the remainders, format them to ASCII, unformat them back to the remainders (indices), then format them to your own custom format. Just save the intermediate remainders and map to your own values. 

In your implementation, you track the absolute time since the construction or . Your essentially acts as a when stopped, thus making your stopwatch non-resumable. Consider the following example: 

It depends. Some believe in programming-by-contract, which would require the user to ensure that the container is not empty on and