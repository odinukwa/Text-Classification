Here, I create the custom text for the inspection result and register a code fix. I'm not sure whether I should DI the parent here, or just call here. Opinions welcome. This is the quick fix: 

Comments should say why the code is the way it is, not a generic comment that doesn't tell us anything constructive. If there is an issue with the code being slow, document why it is slow, and maybe state why you haven't been able to fix it for future reference. Spacing 

I am satisfied with my VM, but here it is for completeness. If anything can be improved, please bring it to my attention. 

For reference, these are the test cases that must pass: Attributes with parameters (no results): and Attributes without parameters or parenthesis (no results): and Attributes without parameters and with parenthesis (results): and 

Your code seems perfectly fine the way it is, and I would say the only thing wrong with it is from the user's perspective. You have the Category menu overlapping the Title menu, which is not good; you should adjust your columns to prevent this. 

This looks pretty good to me. I am not that good at threads myself, so I won't comment on the thread safety, but these are a few things I noticed. This is fine as it is, but you might want to consider making this a ternary: 

You should keep each level at the same indentation so you can see at a glance what level has what scope. 

attempts to parse the value and place it in , and returns a boolean value indicating success of failure. While I am discussing this section, is not a very descriptive variable name. A better name would be , or something that tells what the variable is holding. Third, you don't need recursion and messy variable handling in the method. In fact, the entire program can be written in a simple loop in a single method: 

However, the above said, I would not recommend doing this because it has two purposes - to get the max value and the min value in the list. What I would recommend is to implement two methods - one to get the max value and one to get the min value: 

I don't like that output in . If you have to display that error somewhere, throw an exception and let the caller display the error, or a custom error, as they see fit. 

Finally, here are my unit tests for the view model, which have 100% coverage. Two of these tests test methods that make broad changes, so I use multiple s to ensure everything is working. Is this OK, or should I split these methods up and test only one output of these methods at a time, or do something else? 

Your code is a very neat as a general rule, but your style is a little off. C++ typically uses braces like this: 

If you have multiple designs for different types of media, such as phones, printers, and regular computers, you can set the tag like this: 

Beyond not having the basic framework for the HTML, you have one error according to the W3C validator: 

You are right that this roll is biased. Instead of using a fixed range and less-than for your rolls, you should just roll once and use specific ranges to choose which action is taken. Something like: 

Now, clicking this button calls the command in your VM. (If you have one additional piece of data to pass to the command, you can use the binding.) And displaying a value: 

I need to learn more about Entity Framework, so I created a database to store notes. The database definition is as follows: 

There is a bug in here in which the resolver is started before the parser finishes, causing messed up results. The parser must be finished before the resolver starts. This is accomplished by changing the following method: 

One potential fix for this is to make the setter private (), so only the class itself can modify it. This does not remove the bug-like behavior, although the setter probably should be private anyway. The other option is the remove the setter entirely and let the internal class directly modify the backing field. I would probably go this route. 

That huge / statement you have is terrible. First, you print out the values using the same print statement at the end of each if, just move that to the end: 

Now that is just plain messy. And it hides code on the screen; it took me a second to figure out what was going on here, and it will you too, when you come back to it next year. Write each statement on new lines like so: 

You can solve this problem in one of two ways - starting with , or changing your loop to use and intializing it to , like you currently do. This will have value be stored in the index of the array, so all values will be set to once all the numbers in the range of 1 - 99 have been entered. 

Additionally, I recommend putting braces around your statements. They won't prevent bugs, but they will help prevent bugs. 

If you do this, you may want to make your variables global so you don't have to pass them to the method - both methods will just be able to access them. However, as a general rule, try to keep the scope of variables as tight as possible. Also, instead of having different variables for the different tax values, you could create an array of tax brackets with all the values: 

First, use / blocks around parts that can throw exceptions. For example, what happens when an IOException is thrown by the file, perhaps because the data is corrupted and the file exists, but cannot be opened? Second, I don't know what constitutes failure, but an app-closing failure is failure in my book: 

I would use s here. TopinFrassi has already addressed the issue that this may be unnecessarily expensive. 

The Print command. This is a full replacement for the Project Explorer's Print command, down to not having any margins on the printed page. Should I extract the print logic, or is it OK the way I have it embedded like this? Does it make a difference that this is the only place RD ever prints?