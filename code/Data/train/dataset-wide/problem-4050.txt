I was thrilled when I was hired by this company at the beginning of the year, where I thought best practices and tools fitting my profile are the ones going to be used. To my surprise, I came to realize that there are many fallacies in this project, especially in the most basic aspects. I don't really like who I am working with nor what I am working with. It feels like everything is wrong in this project. I was a go getter at the beginning, so this costed me to be burdened, whereas the reluctant peers are happy and wait to be baby-spooned peacefully. My presence is critical, especially for the image with the client, but I am already gone, morally, but I need to be gone physically. I can't resign right now because I need to find another job, and I need not to be on client's site (abroad). Am I taking a big risk here if I attempt anything? 

Since day 1 in this company, I felt something was wrong. Maybe I am not the only one who felt this, since some manager spent a week only and left. Anyway, the problem I am facing is that I was assigned two tasks related to two technologies I don't have any idea about. Instead of hiring specially skilled people on this area, they chose to convert developers with technical potential to work on these. They didn't provide any training, and they prioritised a task (the easy one) over another of, and suddenly, without prior notice, they interrupted some meetings and rushed me to start producing in this technology I know nothing of. Naturally, I responded that I can't do much and it's going to be a total failure. they shouldn't throw responsibility on a subordinate in such a chaotic way. The escalation reached management, and all they did is to give me phone calls and tell me "talk to person 1, so that they talk to person 2, so that they talk to person 3, just try, just do whatever you can do ...". Since the beginning of this new job in this project, I kind of foresaw this outcome, but I didn't really have a choice, and I wasn't sure yet, so I dove in. All I can this of right now is that whether they secure the contract with the client or not, they will fire me, and that's how it felt. My gut tells me that it's too much for mismanagement - they can't fail that way unless it's on purpose. Am I wrong? 

I recently did a presentation myself; I presented to our sales team who has the same reputation as your co-workers. I found what worked for me was to lay out the presentation into 3 steps; a brief introduction, demonstration and then transition into questions. When giving an introduction people will naturally allow the speaker to have the floor, and by structuring that introduction in the right way you can manipulate the entire presentation - including the questions. The Introduction Keep the introduction short, short as possible. I used a slideshow and it only had 4 slides and 40 words. The slideshow shouldn't be the star, either; all the slideshow is meant to do is serve as a mental indicator that you aren't to be interrupted. Some points the introduction should follow; 

Don't write your absence on your resume, your resume is meant to highlight your assets; any absence is best left for an interview question. It would also kill your resume since the writing explanations will read on paper like excuses - you're handing them your positive traits, not a doctors note. DO put your past careers on your resume. As per explaining the absence during an interview, be frank and direct. State that you had issue X, be truthful about it, and let them know that the position you've applied for is something you're confident you can contribute to. 

Try to have less than 4 targets you want to 'hit' during the presentation, and if you must add shortcuts that let you skip anything in the middle. Really widdle it down to what's most important to show. This also cuts down the number of targets you need to clear before 'forcing' the presentation forward if people ask questions or want to go back. If people are slowing you down on target 2 and you have 8 more things to show you won't make it. But if you're on target 2 and you're already halfway through it becomes much more manageable. The Question Phase: At this point, let the demonstration step back and take a more natural tone. Re-visit the earliest part of the demonstration, and intentionally slow down and begin re-treading what you've just gone over but leave massive openings for questions. The goal now is to smoothly transition from "demonstration" to "live Q&A". If all goes well you've managed to fit an introduction and your main demonstration in under 7-8 minutes. Now you've probably wanted to go into waaay more detail on just about everything, and here's where the magic happens: People will have questions! BUT! NOT! ANNOYING! QUESTIONS! If you structured your points well, you'll find people are asking questions to all the points you wanted to hit anyway. This will both be interactive, and you'll have almost scripted your audience in advance. You'll also look incredibly well prepared as you're literally continuing your initial presentation, but in a responsive manner. Because you've covered the broad-brush stuff people won't ask nitpicky questions either; you'll find the questions people ask tend to be just one level of detail higher than what you've shown. If you go into super-detail people will ask super-detailed questions. If you keep it basic, people will ask the moderate questions in line with the points you wanted to hit. In the end if there's other things you wanted to hit that weren't asked, you can always drop any last-second pointers as the presentation wraps up, after the questions have died down. Personal Note: When I used this format I was working with a group known to interrupt and de-rail presentations. I also couldn't handle a huge number of questions because the product I was presenting (a website) was completely broken and unfinished. This is compounded by the fact that if they saw how horribly unfinished it was we risked them losing interest and not selling it. Imagine presenting an online shopping cart... But there was no cart, no product pages, and only one "working" category. That's where I was at. By keeping back most of the detail the staff wound up focusing on the points I wanted to cover, and I was shocked that nobody realised they had never actually seen any real content. In the end they were surprisingly glued to the presentation. 

I would say that without any proof, you are on pretty shaky ground and it would come down to his word versus yours and it's likely that the more senior employee would be believed either by the MD or your co-workers. Personally (and this is without experience of working for this type of firm/in the broker industry), if it is not noticeably affecting his ability to do his job, then it is of no business of anyones. Unless there are strict clauses in employment contracts about behaviour whilst on the company premises that he is contravening then he is not really doing anything wrong. I'm not sure what would be gained by mentioning this to your co-workers unless you already have an issue with the branch manager for some other reason. 

It's not as obvious as some people think so I'll add it here - magnets on the side of PCs/CPUs are a no-no. IT Support staff all have war stories surrounding this! 

Start a toilet cleaning rota that has to be signed off when done (similar to pub toilets with the piece of paper on the wall!) and make it part of people's objectives/bring it up in performance reviews if not done. It is the only way to foster any sort of collective responsibility for the state of the toilets as it is obvious everyone appears to think it is someone else problem Failing that, employer a cleaner and inform everyone that there will be no bonuses this year due to the cost of having to employ a cleaner to clean up after everyone! 

It is not your responsibility to tell your boss you are thinking of leaving/they need to hire another person. I'm assuming you have a notice period in your contract and if so, this is there for their benefit as much as yours. As you quite rightly say in your post, this could lead to an awkward relationship/atmosphere which is another reason to look after yourself first. Plus, what if you do broach the subject and then do not find another position for a while? The awkward atmosphere would have to be endured for far longer than you probably anticipated. Keep quiet. Let them do their job and look after yourself!! 

While counter-intuitive holding back information keeps it digestible, and when you do get questions later you'll find they'll closely follow the bullet points. Just because you put a bullet-point on a presentation saying you'll cover X doesn't mean it has to be scripted. This actually manipulates the questions into the presentation; if you know questions are coming - make it the questions you want. Then you'll be prepared and in control during the demonstration. The Demonstration People expect demonstrations to take longer, and whether you want them or not questions WILL eventually come: so what you want to do is cover the main points in the demonstration very quickly so by the time people begin butting in with their inquiries you've already hit the marks you've aimed for. Keep this step under 3 minutes, and treat it like the introduction. This isn't the time for detail yet. This is just showing your introduction again, but live. If you can, have the areas of your demonstration ready in advance. Don't explain, just show, and keep any description down to sound-bytes. If you can, write a 'micro-narrative' which people will mentally follow, such as the path a user might take though a system: "This is the online store, simple, clean. The shopping cart, and here's the checkout page." Don't rush this part though; even though you're moving quickly, you still need to keep it digestible. The main risk here is having someone in the room ask "can you go back?", which will kill all momentum and kick you into the main questions phase prematurely. If you have particularly impatient audience members who ask questions, take the question but try to use it as a lead-in for the next part of the demo. If I were showing a shopping cart and my next stop was the checkout here's how I'd manage the following; 

Personally, I would phone back and ask to speak to the person who interviewed you and make a casual "I just wanted to check that you had my email address correct" or perhaps "I've been having problems with emails not coming through and wanted to check I have not missed one from you" (less preferable) Make it not about chasing but just that you are confirming they have the correct information. If they have genuinely forgotten, it will hopefully prompt them to send the email through with the details. If there is another reason why the email has come through (as per your gut feeling), they will simply confirm the email address is correct. If you then do not receive anything, your gut was correct 

A lot of prospective employers now have a glance at a candidate's LinkedIn profile. I've written a couple of recommendations for ex-colleagues there in the hope that they will be seen by recruiting companies. It tends to hold more weight than the simple "number of connections" algorithm Most people put the link to their LinkedIn profile on their CV these days too (I do!) 

Yes, you definately should. Honesty is always the best policy. Plus, from the way you have described it, you are not re-applying for the same job you were rejected for previously. You were obviously not rejected as being unsuitable for the company as a whole (culture, approach etc) but for a fairly specific role based on a specific lack of experience) If anything, because THEY contacted you, I would mention it. It shows that you have been on thier radar before 

Personally, I do not think it is unethical at all. Certain types of employment (ie: sales) tend to have clauses written into employees contracts to protect them from actions people do when leaving (poaching customers and colleagues) so as @Vinothbabu mentioned, check that you have no similar items in your employment contract. At the end of the day, your co-worker is an adult and can make up their own mind. They can weigh up the pros and cons of joining your side venture for themselves, you are merely offering the opportunity. Also, this feeds in to a common thread that has started to appear in a few answers on this site recently - think long-term. What is of more benefit to you - developing this side venture or protecting your emplyment/reputation with your current employer? I appreciate it is not always a balck and white decision but you need to think what is best for you and your future. 

Lastly, and this one is personal: - Have you been to a doctor lately? If you have severe sleep issues despite a HEALTHY lifestyle, you may have an issue like low blood pressure or nutrient deficiencies. 

Maybe. It depends on who dropped the ball; if it was the recruiter, the government, or the employer. If it was the recruiter then demand compensation from them and depending on the laws of the area you may be able to seek legal compensation if they turn down your request. If it's the government there may be paperwork to fill out otherwise you're up the same avenue as with the recruiter, but historically speaking you'll be in for a harder time since governments tend to be very slow moving and might just say "we never guarantee a response time". You might spend more time than is worth fighting for compensation, and there's a chance you won't be. If it's the employer, that's up to your personal judgement whether you seek to demand compensation before starting. You can certainly politely request it, and a 'good' employer might give you a token holdover for the mix-up. But if you choose to press it you may risk damaging your relationship with them early - so it's a personal decision up to your discretion. 

There's a few things to keep in mind; But before I get to solutions, I'll point out that as long as your workplace is satisfied with your work and are paying you - you're doing well. Not everybody knows everything, and the fact is there are many self-taught programmers out there, many of whom have the opposite mindset (they "know it all" when they really know nothing). Also, the fact that you are at least vaguely aware of your skill-set is also good, because you know when you need to do research; as opposed to others who may force a suboptimal solution. What it will come down to is self-education, or off-hours classes. I'll skip night-classes and focus on free/cheap ways to get better. Books, books, books! Buy books! And read them. Re-read them. Look for books which talk about design patterns, as it's a big portion of what self-taught individuals lack. Also, most of classroom work is derived from books you can very easily locate and study. Documentation Read the raw documentation for the programming languages you are working with; also read any commentary supplied by others. Focus on syntax and language constructs first to ensure you have a rock-solid base, specific functions/libraries can come later. Work on Personal Projects Start working on personal projects with slightly more complicated requirements than you are able to do. Aggressively research when you hit walls. When you are finished a project, re-factor your code multiple times to find more efficient solutions. Look at / Contribute to Open-Source This is a biggie. Almost the biggie. Research open-source programs, and opinions on their codebases. When you find open-source projects which people routinely state have great and modern code-quality: download and examine what they did. Find solutions they used and compare them to similar solutions you've used. This was the single biggest factor in my own personal education. Note that not all open projects have good code, and popularity != quality; see what people say about the code. Not to insult Wordpress or Ogre, but those are good examples of popular projects with not-so-great code. I'll note that there's a saying: "If you're a developer in open-source and you don't have a job, it's because you don't want one"; and that's pointing out that a lot of very good developers not only get good because of open-source and it's constant feedback, but they get noticed because your work is public. Find Patterns in the Languages You Use Different languages take dramatically different approaches and have different limitations; when you read the documentation to languages, or the wikis, you'll find out they had very specific goals/ideas. When you understand 'what they were thinking' when they made the language, you can begin better predicting where your gaps in knowledge are. For example, "PHP" has a function for almost everything - so whenever you go to write a function, double-check to see if PHP has a similar function already. In a language like C or C++ you'll find it's library heavy, and want to steer your research towards that.