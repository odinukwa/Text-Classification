The is really nasty here ! One expect to only return a value but before it does some unexpected computation ! You should write it in the form of a simple getter. 

The method could event be marked so anyone reading this code knows that this method doesn't have a side-effect on an object attribute. 

I also voluntarily removed the log statement. I'm not sure it really add any value when only logging "Create File". Either add more information such as where the file was created, with which name, etc. or get rid of it. In the end you could use these methods like this: 

Using LocalDateTime Since Java 8, there's a new API to use when you are using dates. I refactored the code to use this new API instead of the old one. 

Extracting UI calls Finally the UI calls must stay in the UI-part, namely into the JavaFX controller. Typically it could looks like this (simplified): 

Why are and , if it's not assigned anywhere in code? It should not be. Only things that implies assignment is call to , which should not modify anything, because it's only writing. You have not included your code, but let's assume that it's not doing any assignments inside too. So we get rid of those s. Next thing in here: you're passing in an array of s and some , most likely an index. But everywhere in method (with exception to calls to ) you're using . So we can safely extract it into temporary variable. Let's call it , for the lack of best option. 

Another "safe" extraction is to put your into a (class-level) constant, which we will name , because as far as I can see, it is a floating-point comparison tolerance. 

All that's left is . Most of it happens only when . Let's invert that so we don't have to think what happens if both bests are 0 (because we simply return at that, don't leave us hanging!). 

is fine. The resulting string in is misleading. The is the amount of cans the vending machine currently holds and the is the number of coins that have been inserted. You should also directly return the string instead of creating an empty variable 

Class is open to modification should be closed for modification, this is the OCP principle. If it's not, its behaviour can be altered (by inheritance for example) and can lead to an unpredictable behaviour which make it rather difficult to test and maintain. How to achieve that ? Mark . Executor never shutdowned Once started, the executor can never get shutdown, which causes the task to be run indefinitly. How to achieve that ? Create a method: 

I also suggest that you declare of type instead of so that it becomes unambiguous for anyone reading that the synchronisation in is guaranteed. 

The requirement is fulfilled. However how it is implemented is a code smell now. It's a good practice to have only one main constructor doing the fields assignments, the other constructor just calling the main one with other arguments: 

With exception of that still need improvement, and where you can apply same process, it seems to me that we've done pretty good work here. But I must repeat: with exception of one operation (moving inside instance) all we've done here is a function-based refactoring. As it's already said here, we might be as well programming in C or JS. I would highly recommend you to rethink your approach into more object-oriented one. 

You do that for every run you got thru your label, but in fact it won't change: neither nor are changed elsewhere in this method. So we can safely move this operation above . Same goes for , , and . Then we convert your into common-knowledge . To do that we simply replace with , enclose all code below in loop, add in the end, and instead of every . Inside loop we have three s. If we look closely, we'll see that they are mutually exclusive. We will mark it explicitly, so we don't have to guess. If we follow this line of thought, we'll see that every time we don't hit inside our we can safely return from call. So let's invert those conditions too. What we've now come to? 

The hardcoded string for the path The fact that you directly depends on , making the method hard to test 

contains only notion of blocking until the value is not computed. How the value is computed is totally abstracted here. 

This kind of requirement is the kind of which clutters the code with at least one and is in general irrelevant. If you are okay to have a number in the filename (going from 1 to n), then why not having 0 ? After all, the requirement behind that is that no filename should be erased by another with the same name. So the real problem to resolve here is how to make sure this method won't create 2 files with the same name ? Since you stated 

There's still a bit of duplication between the but I think you get the idea. The goal is to avoid duplication in order to have tests that are easy to understand and maintain (clean tests are as important as clean production code). 

Now I'll do some strange thing: I'll extract your call to to variable. I do this only because it is the only thing that operates with and and I can not make any decision about it without seeing it first. So I'll just save entire call for later. 

In fact, it could be an one-liner if inlined all the variables, but I leave them as is for the sake of readability. Next thing: you should extract every case in your switch as a separate method. Look at it now: 

In fact, repeating pattern (for every type of call a method passing inside) clearly calls for some inheritance on side: you should have several different classes, subtyped after your , with method , which should have processing related to that type of output. Having that you would replace this whole switch with . But I won't do that now, and instead concentrate of contents of there methods (although they are already pretty small and readable, with exception of ). 

The requirement doesn't state what's the behaviour when there are no cans, so I assumed it is nothing. If you know what the requirement is in this case, I'll update my answer accordingly. Looking at your current method, I think the requirement is not reached. First you erase the old amount of tokens with then you refill the vending machine with 50 cans when it is empty, which looks really strange and induces an unexpected side-effect (see Principle of least astonishment for details). The requirement also states that you should be able to only retrieve one can at time (and not many). Here is how I would implement 

Final solution All these remarks put together, I came up with the following solution. Note that is an inner class because it doesn't have to be known in the outside world. 

Beyond the requirements The two setters are superfluous and can be removed. Also, Java class naming convention is CamelCase so you should rename to . Since your class is not meant to be inherited, you can mark it . Here is the full resulting class 

You obviously don't do enough encapsulation. I see at least three classes with no behaviour (, and ), your "main" class () contains only static method... it does not seem like good OOP for me (and when we are talking C# we should mostly talk OOP). Let's try to fix it, one thing at a time. 

And now, thanks to this, all our code operates on . So we can safely move it to instance method, because all this processing is coupled to single instance of . Let's call this method (of course, all the code inside it does not use , but uses implicit . Now, all that's left of yours is: 

This line is repeated three times (although I suppose that third one is a mistake), so we extract it into method, also giving it meaningful name (). We repeat same operation for remaining s. Let's look what's left of these: 

This is the kind of test I would write (I picked a convention for the names, you can choose another since it stays coherent). Given the previous refactors, the test implementations are more expressive now: 

TaxiMeterApp This class also doesn't need to depend on , the only useful information is the amount of the base charge. One now takes as a parameter since the distance is obviously not known when starting the taxi meter (the base charge is, however). I also removed the App from the class name because I think it has no value and only bring visual noise. 

Bill What does a need in order to compute a price ? A base charge and a distance. These two values must be provided in the bill constructor. The bill doesn't have to know about the . Then, the implementation becomes (note that I have made this class immutable):