I've made this animation using Sass and CSS-keyframes. I'm bit worried about my usage of position relative / absolute. Can one expect that it works in all browser reliable? Or to I have to expect things like a offsets? Moreover: Is there a way to improve it somehow? It doesn't run smoothly. Perhaps I've chosen the wrong tool with CSS-keyframes? Any hints and tipps to the points mentioned as well as everything else welcomed. 

Hyperlink to my GitHub-Repository. What would you have done different and why? Looking forward to reading for comments and answers. 

As far as I can say: It is doing alright. But I would like to know: Is there a better pattern for solving the task of getting a duplicate-free array? If someone knows a better solution then I would appreciate his/her answer. Moreover: - Is my documentation understandable and done in a good way? Or do I have to improve? - Is my parameter validation done correctly? Looking forward to read your answers. :) 

Using reduce() was what came to my mind for solving the task. And the code has become already quite tight. Nevertheless: Is there a better solution? 

I would say it works. At least essentially. Nevertheless: There might be flaws even bugs in my program. And I guess one could improve it a lot. So therefore: Any hints, comments and recommendation by more experienced Assembly programmer very much appreciated. 

Is everything done in a good way? Or has the code flaws which should be improved? Okay. My ASCII-art skills have to be improved. I admit ... But seriously and important: Is my implementation of the MVC-pattern correct? An according answer would help me to feel more confident about the topic MVC. But other hints and recommendations are also welcomed. :) 

It works fine. But I would like to know: What do you think? Could it be improved concerning stability and efficiency? What do think about asking the range from the user via input box? Could one accomplish the same task in an easier perhaps more robust way? General hints and comments concerning my coding welcomed too. 

Very rarely should you pass 3 arguments to a function. In your case we are talking about 9 parameters. I would not have anything against PHP throwing error in such cases. If you don't know when to use static functions, don't use them at all. Spelling 

In this example I'm using this curl wrapper. I have created separate class to take care of querying rest api as this logic should not be in controller. Names could use some more polishing but in my example I make camel case names and I stick with those. If you are more comfortable with snake case you should stick with it only, do not mix them up. I have tried to make this code readable. You don't have to see low level operations to know what happens in function. ex gives you pretty good idea what it returns and you don't even have to see how it does it. Configuration should not be mixed up with logic. Put it in configuration file and load it in when needed. It is very important to write unit tests to make sure it works as expected but I leave this to you. good thing that I have otherwise I would have to look at this piece of code and get distracted trying to figure what each of this relations stands for. Use comments only in those places in which you failed to clearly communicate with proper naming what your code does. You want to make writing code as enjoyable as possible and only clean code can be enjoyable to work with. I would put readability of code as high as its ability to perform given task. 

My attempt to make this code as clean as possible. Note that i have not changed almost any of the logic you provided. 

Any hints and tipps concerning possible improvements highly welcomed. Especially the design and usability. 

Looking forward to read your comments concerning the two questions. Any other hints I would appreciate too. 

Two general things: Avoid variable-names which consist of just one character. What I mean is: Even something like 'telValue' is better then 'd'. Still not pretty but at least one get an idea what is meant. You should care about name conflicts. It would do no harm to attach the functions on to a global object. Or to use a Immediately Invoked Function Expression. Examples here: $URL$ Concerning the redundancy issue: You could data-attributes and class-names. Then using iteration-functions in JavaScript. Example what I mean here: 

Task description: A set of product-thumbnails is shown. The user can filter the shown products by vendor(s). Done by clicking one or multiple buttons. I used jQuery together with the Isotope-plugin: $URL$ First I had the idea of using iteration for assembling the filter-criterium string: 

I've got to made a function which returns the checksum of an given integer. Source code of my implementation so far: 

It works quite fine. I used it to insert and query data into / from a playground-database I've made. Here's my test-class: 

On my work I've got to maintain an Excel-sheet. Documenting the incident-tickets I've dealt with. For to be able to distinguish between single days easily I mark every second day with a light cyan-background. So the sheet gets a Zebra-stripe look. Because I've got to do this every second day (by marking the concerning row-range with the mouse) I've made myself a VBA procedure. It is started from the Excel-GUI. An input box appears in which I enter the start- and the end-row. Separated by a colon. The VBA then marks the range between start inclusive and end inclusive. Moreover it adds a bottom-border to the last row. Here the VBA-code: