Have you actually talked to other people within the company about a different position? If so, then you may have already opened a can of worms. People talk. If there is nothing currently within your company and you are dissatisfied then it's time to find something outside. Tell your boss about it when you are quitting, not before. If there is something within your company, go talk to the new manager first to see if they would be okay with the shift. If that's good, then go talk to your boss about wanting to move over. Bear in mind that even speaking with the new manager is likely to cause them to speak to your boss when they see them in the hall. So be delicate, meaning don't leave the impression that you aren't currently happy. Instead pitch it as you'd like to get involved because "X" is interesting to you. Another potential option is to go to your boss first. Start off with something innocuous like "Hey, I heard the guys in dept X are starting to work on . That sounds like fun." and see where the conversation goes. You should be able to gauge if it's appropriate to go further with "I think that I'd like to work with them on it. Do you think that's possible?" At this point the boss will either say something along the lines of "I need you too much" or "I'm not sure, you should talk to the other manager." The first response means trouble; the second is a green light. Various managers take hearing that an employee, even a long term one, is unhappy in very different ways. Some might term you on the spot. Some might try to help. Some may try to offer you something so that you stay. Most will likely go into a "crisis" mode to figure out what to do when you are gone. You need to mitigate the impact as much as possible. The best way to do that is to NOT give them an indication that you are unhappy at all. 

The problem here is that I'm going to assume that you don't have much of a social relationship with that manager. In other words you two haven't gone out for beers or invited each other to your kids birthday parties. This means the manager really isn't going to feel like they need to go out on a limb and spill any of the real gossip. All of this to say: talking to management has a high degree of probability of being a complete waste of time. So, if you want to hear the real dirt, talk to people that have left. Ask them why they left. If you are on good standings with any of them then they'll let you know. If they don't know you then, well, you probably won't get much. 

As to your specific situation, all you can do is have a nice talk with your manager about the ludicrous nature of the policy while submitting your requests to the appropriate people and then do the best you can. Some people can work in such silly environments; others find that happiness lay elsewhere. 

There's a time for perfectionism and there's a time for doing what you're told. You have a boss, part of that person's responsibility is to direct you in your duties. One of the aspects of this is the schedule. You can certainly continue doing the responsible thing by bringing up things you believe need to addressed. Your boss will certainly continue to either use those suggestions or throw them out according to his/her interpretation of the needs of the business. However, if you want to have a productive relationship then you need to realize your position in the bigger picture. Do the best job you can with within the bounds that have been dictated. If this feels like a problem then you should work towards leveling up to be in the Boss position so you can impose your will upon your own minions. One thing to remember "iterate fast, iterate often" is a very common phrase in the development world. It recognizes that nothing will ever be perfect but if you can get it "good enough" then you just might have a winner. It also highlights that you may have the opportunity to come back and fix those other things that need to be done. Or, if not, then you probably didn't need to spend time on those things anyway. This is at the heart of Agile programming and a radical departure from other methodologies, such as Waterfall, which strove to architect the Perfect System(tm) and have been proven to be utter failures. The last thing I'll leave you with is "Perfection is in the eye of the beholder." What you consider to be a perfectly constructed class hierarchy another might consider to be an overwhelming morass of ineffectiveness. 

On your resume, put the title you were given at the company so that the HR drones won't pitch a fit when confirming your employment history. Use the appropriate space to describe exactly what your responsibilities where. Titles outside of the "C" ones are pretty much glossed over when a resume is being reviewed. The relevant information is the job you were performing - which is what the hiring managers actually care about. 

The first thing you need to do is discuss this with your boss. There are two potential goals for this meeting 

The BEST thing you can do in this situation is to hold weekly reviews with the intern to point out the areas that you are cleaning up. Make sure to include the reasons for the changes and do this in a positive manner. That way the intern learns from you (which is what they should be doing) and, hopefully, you end up with a productive coworker whose work quality is aligned with the teams expectations. 

You don't. As long as this is not impacting your ability to perform your job then it's simply not your place. 

There are two ways to go. Call the company's main line. Ask for their HR department. Ask them if they are hiring or if you can at least fill out an application. The second path is to call the company's main line and ask for their development or programming manager. Then ask that person if they might be interested in hiring you. Do a bit of research on each company so that you know what it is they do. You might only get a few minutes with the dev manager so focus on what value you can bring to them. 

If someone calling themselves a programmer asked me that question I'd like respond with something sarcastic as well. Simply because that information should be trivial for the person to locate themselves. If they can't then the answer is unlikely to be of any real value. Further, answering it would also give the very invalid impression that I am there to help them continue fooling management into thinking they now what they are doing. They should go hide until they learn how to wield their tools. This is on par with claiming to have gone through driving school then asking someone what a turn signal does. 

At one location I was responsible for a large amount of PII data. Development felt that they needed direct access to the web servers in order to debug issues that came up. However this meant that all of the developers also had access to this data and routinely attached their debuggers to the production servers... To fix this we established staging servers which were identical in hardware, software and patch levels to production. The DBA setup a few jobs which regularly moved data from production to staging while scrambling the PII data in such a way it was impossible to reconstruct the original data but maintained the associations necessary to debug problems. Networking was responsible for ensuring all hardware, patch and software levels were consistent between the environments...and I mean everything: routers, network cards, etc. We then completely cut off development from production. To get management buy in I only had to describe what those devs could potentially do with the data and the cost the company would bear if/when someone leaked it. Therefore it was in their long term best interest to ensure that only a couple of highly vetted people had full access. To get developer buy in, we made changes to our bug reporting/verifying procedures. When a bug report was escalated by support it would go to QA first. They would reproduce it on the Staging servers. Once it was reproducible then it was assigned to dev to fix. If they couldn't reproduce it in staging then QA would work with the production team to see if it was just a specific data issue. This did increase the amount of time between identifying a problem and fixing it; however it resulted in a far more robust and secure system while limiting the amount of developer time spent trying to figure out a problem. The devs grumbled at first but later agreed that it was better that they weren't spending all their time trying to figure out every little problem. This resulted in a decreased cost per problem (dev's are a LOT more expensive than QA people), which, again, was a good thing as far as management was concerned.