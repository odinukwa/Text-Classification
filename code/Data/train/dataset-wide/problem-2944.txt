Now this is where generics can come in. Imagine that your class would be like this: There's no need to initialize your and to null because they get that as default. 

We will call this matrix . This matrix is for a graph with the nodes a--e (your star systems). And the edges (paths) as follows: a->b, a->c, b->a, b->d, c->a, d->b, d->e, e->d. Now, let's say that we want to find the shortest path from a to e. We check row a and column e and we find that no, there is no direct path. To find the paths of length two, you can multiply the Matrix with itself. So, Paths * Paths results in: 

Empty list input If the input is an empty list, then the output will be a list containing one empty list. I think it would be more reasonable if the output itself was an empty list. This can be solved by only adding a list if the number of items added is more than zero. 

I really don't think you gain anything by making your own implementation of this method. Additionally, your 's method can be removed and the default implementation used instead without any change in behavior. Naming I find the method to be hard to understand by looking at the name alone. Of what? Of a seed, a predicate and a unary operator? How about something like ? Perfect for tests Although using to read the result and manually check it works perfectly fine in this case, real tests wouldn't hurt. 

Brainfuck doesn't have any guidelines (that I know of) about indentation, formatting and comments, so how you do those parts is entirely up to you. Personally, when writing Brainfuck, I find it extremely important to keep track of the values of the memory tape, which is why I prefer adding comments about what the values of the memory tape are. Then if you want to edit anything you can more easily change what you want to change by reading your comments about the values of the memory tape. Performance 

Edit: Adding a sample of code to show how to implement and on an existing class instead of using anonymous classes: 

That is, extract the input/output from that method. Separation of concerns! A method should only do "one thing". Also another note: Your current variables are named as constants, while being local variables. Only variables should be named . Other variables should be named . 

When reading your code, the Strategy Pattern alarm goes off in my head. Before that however, I have some other remarks. 

Avoid the use of fields such as the above. Using fields goes against object-oriented principles. fields will limit you to only having one instance of it and in the long run will limit your capabilities to write large flexible applications. Pass around the objects that your methods need, or use non-static fields, instead of having them lookup a field. 

IMO, whether or not it's a member of the Hand class does not affect coupling. HandView is an interface, it is already loosely coupled. This method however, in your interface, provides some coupling: 

However, although Java 8 is beautiful and nice, I'm not sure if I would recommend using the command pattern like this. I think the command pattern loses a bit of it's point by using method-references. 

But quite often even that is unnecessary, I would suggest you move all your helper functions to another class, maybe even called . That way your class would be tidier. 

What about actions that can target more than one card? What about actions that can target more than one card in multiple different "targetSets"? Consider for example the Magic: The Gathering card Glimpse the Sun God: 

However, if either or fails, you're screwed and won't be able to restore the list. Using is a bad idea IMO as that reads through to the object. So if you clear your list, your unmodifiableList will be empty. 

This will generate 4 * 1, 4 * 2 and 4 * 3, respectively. Adjusting the number of signs leave us with: 

@rolfl can't see a way to simplify it any further, and keeping it readable, but I believe that I can. What is important to note is that the variable will never be set to after having been set to . This means that we can rewrite it using boolean AND logic. 

As you can see, whenever a new minimum value has been found, it swaps the current index value with that new minimum value. At the third flip for example, the 2 is moved to the end of the array, even though it should (and will, eventually) end up at index 1. Therefore, pretty much all elements will sooner or later be at the last index, so they are moved back and forth quite a bit, hence I am calling it "ping-pong sort". Class Name 

You can accomplish this without your class and without the additional . You could in theory cache the total skill level value, as I have a feeling it isn't changed very often. 

I'm trying to grasp what you are trying to accomplish here. I just can't find a reason for why you are doing what you do. You are serializing title, message, positive button text and negative button text, ok, that I can understand. But serializing the listener, which really is logic? That's not an easy task. There is really nothing wrong with setting listeners directly to the instance. For the record, you don't have to call in your listener methods. In fact, with the way Android dialogs work, you can pass as the listener and it will by default simply close the dialog. Your class seems to be primarily a wrapper around which doesn't really feel necessary to me. Are you really sure that you need this class? 

So all you are doing additionally is to wrap it in another exception which is explained just slightly better. But personally, I think this message... 

This answer will look more at your coding style and the code itself, not so much on performance issues. 

I'm not quite sure why you left that variable name unfini I'd recommend naming it . Cutting the last two characters helps no one.