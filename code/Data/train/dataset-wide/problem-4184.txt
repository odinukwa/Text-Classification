As a fellow self-taught developer, whose degree is also in an unrelated field (undergrad: English, Hist, postgrad: masters of research in history). I can assure you that it's not as difficult as you think. If you're willing to demonstrate your abilities, and be able to show that you are aware of your own weaknesses as a self-taught developer. Showing an active interest in improving your theoretical knowledge and understanding, then you're on the right track. Enthusiasm goes a long way with certain companies, and their willingness to employ a self-taught developer can sometimes come down to company culture. The employer that I work for is committed to, among other things, the skills shortage in the UK. So employing someone in need of more formal training isn't really a big deal for them. The first hurdle to consider for any prospective job is usually an over the phone discussion about the job role, requirements etc. This is where you need to not only show your experience around your chosen speciality, but also that you have the right set of skills, namely: problem-solving, patience, ability to discuss without the use of Jargon, ability to discuss using the correct technical language, willingness to learn, self-reflective attitude. As for your resume (CV), just keep it to the point, discuss your technical abilities, list your GitHub, and add a section for some basic details regarding your projects where relevant for the employer. But it's unlikely they will actively look at your GitHub account, so make sure your resume highlights everything you want them to know, in as precise and concise a way as possible. These are the principles that I followed; I've been in the industry for a few years now so I can tell you first hand that you can make this work. You just have to be very willing to learn, know your own limitations and endeavour to overcome them. It's your ability to find the best solution to a problem that defines you as a developer. It's your work, rather than your methodology that will be used by management to rate you in the end. Finally, it's worth considering applying for 'graduate' level developer opportunities. Practical experience already puts you slightly further ahead than some of your counter-parts who have completed their comp-sci degrees. Demonstrating an ability to put your understanding and knowledge towards practical applications shows potential employers that you can work on tangible, real world products should the opportunity arise. EDIT The structure of my CV was as follows: 

This can definitely be a very difficult situation to be in, especially as someone who is perhaps at the beginning of their development career. However the good news is that there are a lot of developers who are just like you! When I first started at my last company I was the only developer, barely classed as a graduate as I was 'self-taught', two years later and I'm working at a level above almost all of my peers at a new company. In honesty, it's all thanks to the time I spent having to work it all out by myself to tight deadlines, with difficult technologies and awkward frameworks. The way that I tackled my own situation, was that I got stuck into answering and asking questions on stack overflow. I started doing challenge tasks in my free time to become more familiar with the frameworks I worked with. I even started putting more time into reflecting on the weaknesses i had with the theories behind certain elements of computer science as a whole. (Including: MVC, design patterns, multi-threading, concurrency, etc.) From what you've said your employer obviously doesn't want to spend more money than what they are currently paying you. It's understandable for companies to not commit to extra resources by getting more developers in than they think they need as they have their own financial priorities as a business. Unfortunately this can be quite a common occurrence in the industry. However you should also see this as a positive. You have the opportunity to set yourself against a challenge that not all developers get the chance to tackle. Spend your time learning all that you can about the frameworks and technology that your employer uses, consider the kind of standards you should be adhering to in your code. Start to push back respectfully on deadlines you know to be unrealistic or challenging. You should try your hardest to have an honest and open dialog with your superior to help you complete your work to the best of your ability as a solo developer. But the most important thing to remember is, don't let it stress you out you are obviously competent otherwise you wouldn't still be there. Take every task or problem one step at a time and figure it out as quickly and efficiently as you can. As you start to learn from google, stack overflow etc. You will find that you will get quicker at identifying issues and resolving them. You've been given a path with a steep learning curve, embrace it and become the best developer you can be! 

I think at this point you don't really have a lot to be concerned about. It's only been a day since recruiter 'B' said they would send an email. Recruiters in my experience can sometimes take a little longer to follow through on emails than you'd expect. Primarily because they likely deal with multiple candidates for multiple employers, so their workload can be quite large. If you haven't heard anything within about a week, then I would have cause for concern, and at this point you could safely contact someone regarding an update, something like: 

I believe it's important that you contact recruiter 'B' directly about this concern should it get to that point. I think it would be unprofessional to discuss this with the first recruiter. Keep it simple, 'B' said they would email, 'B' failed to email so in the first instance, prompt recruiter 'B'. 

Links to some sites that discuss the validity of Reddit as a powerful tool for marketing, business, and traffic flow etc. So You Want To “Market On Reddit” The Marketing Guide to Reddit The Power of Reddit for Business and Marketing 

There is absolutely no problem listing your humanities degree on your CV/Resume. I also have an humanities undergraduate degree, as well as a masters in historical research; yet my field of work is in software development. I personally choose to have my educational achievements prominently displayed on my CV. Consider it logically, even at the very least they show that you've been able to commit to a steady workload for a period of time and are capable of taking on the kind of pressures that you would expect from any kind of university degree. Almost every employer in the field of development that I've interviewed with has asked me about my degrees, and why my career path has been so different. I like to use this opportunity to show them that the underlying skill-sets in the field of humanities can be re-applied quite adequately to development. This allows me to discuss things like, time management, careful assessment of facts, understanding the importance of briefs etc. Obviously I have a robust history of practical development thanks to previous years within the industry. That said, I think you should not undervalue your own achievements even if they are not related to the fields you apply to. They form a part of who you are as an employable individual. They can help demonstrate various traits that may be an ideal fit for the company you seek to work for. 

If in the process of your day to day tasks you come to realise that it might be more efficient, or beneficial to be included in these meetings then it is obviously relevant to the work assigned to you by your superiors. There is no harm in pointing out the benefits of being in those meetings to your manager/supervisor, and it is absolutely within the purview of your job to ensure you are working as efficiently as possible. I don't think any manager/supervisor would have a problem with you suggesting or asking for something reasonable that will have a positive impact on the quality and or efficiency of your day to day work output. 

I had some experience of graphics design from back in my college days, so I made sure that the CV was nicely formatted and utilised minimal designs for maximum impact. I got 8 interview offers from that bad boy after a couple of days of it being submitted to a popular work search website. After that it's all down to you. Hope this helps somewhat. 

I think you're overthinking this entirely. Everyone has their own individual quirks when it comes to conversation and language. There's nothing to say that this isn't simply something that he does unconciously. If he ONLY did this to you, then it would merit some more thought, but from the sounds of it, it just seems as though that's how this individual is. If it comes down to the fact that you believe he is not listening to what you have to say, then perhaps end your phrases/sentences with a question, such as: 

I would recommend starting a short conversation with your manager/supervisor/CTO along the lines of: 

This person is also now in a more managerial role to you, I would suggest avoiding confrontation with anyone above you in terms of your companies leadership hierachy unless it is absolutely necessary. Otherwise you may just come accross as petty. 

Edit (Thanks to Martin in the comments below) † Article I referenced above can be found at this link. 

As a developer myself, I can tell you that there should be absolutely no downside to others knowing that you ask stackoverflow for help every now and then. Rationally speaking it is not always possible to either already know, or source the answer to your problem through google searches or researching in books etc. However, stackoverflow as a resource allows you to have access to thousands of able minded developers who are willing to help you with your problem, this should be seen as an invaluable resource. Any employer, or colleague that thinks less of you for using stackoverflow to ask programming questions, is quite honestly not with it. You should endeavour to find the best solution for your problem, in some situations that may require sourcing for the right answer. It's your ability to determine the best route to a solution that defines you as a developer. I recall there being an article that came out last year†, that interviewed several prominent and well-spoken developers from large companies such as Google, Apple and Microsoft. The article asked each developer what was the silliest thing that they still had to Google or lookup. The answers ranged from the format of switch statements to the amount of bits in a byte etc etc. The point is that it is impossible for a developer to know everything, being able to admit that and seek out the solution via whatever medium is best, is actually a valuable ability to have.