Good! If by "agile" you mean "Scrum" (why would you have hired a Scrum Master, otherwise...), then all is well. 

So you trust him to manage your work life, but not to talk to other companies? If he is so bad that you do not want to do that project because of his incompetence, why are you still in that company, in the first place? Your boss may have very good reasons to do it, which you may or may not be able to know about. 

Sometimes hard to avoid if there just are not enough closed spaces. Bring a big headset with noise cancellation... 

As this watch will not bring you any joy, ever, the answer seems clear to me: Let a day or two pass, then return the watch to your client. Make it a formal event that is abundantly past any negotiation. Put it into a nice big envelope with a formal letter along the lines of "Dear XXX, I have pondered long about this, and I can absolutely not take this present. I feel bad about accepting anything except the agreed payment. Please accept it back with my sincerest regards. I am looking forward to work for you again. Yours..." Be 100% sure to formulate your letter/card in a way that gives no approach for your client to renegotiate. I.e., do not mention anything about the price, about the style of the watch or whatever. Only write subjective ("I have ...", "I can not ..." etc.). Do not lie about anything (if your company has no policy about this, then do not say it is because of a policy). About the fake This is kind of a pandora's box. Who to tell, what to assume. Let's go through the scenarios: 

They do? Then make sure you list what you did as a freelancer, just as if it were a non-freelanced time. You still did many projects, you had clients, you used technology etc.; only because you freelanced does not invalidate that. You can also ask your freelance customers for a written feedback, occasionally, and include that when you apply. 

Again, unless you are going to put in a lot more hours per week to fulfill your new role (and you really should not have to - you will need to reduce your dev work appropriately) then I would not worry about that at all. 

You mentioned two very important aspects, and let me try to convince you that one of them has a future, while the other has not. 

"Responsibility" is a weird thing. There are some areas in life where responsibility is real - for example if you are driving a 40t vehicle through a crowded city, you better make sure your driving is responsible; or if you are getting children you definitely feel the weight. But as a team lead? Sure, in business speak people might call you "responsible for the team", but in my experience this kind of responsibility is very, very light-weight in a team as you describe it. The way you describe it, I find it highly unlikely that you will be fired or in any other way penalized if you fail at your new job; you will, worst case, be demoted back to senior developer, and the experiment will end. You can easily talk about this with your own manager beforehand and make it clear that you will stand up to the challenge if they allow you to grow into it and if they agree to give you a "probationary phase" of a few months, after which you meet again to formally decide if it has been a good idea. As a team-lead you will at first simply be the spokesperson for the team, i.e., the interface between the "inside" and "outside". This job is basically what your responsiblity will consist of. But you will hardly be carrying a life-or-death weight on your shoulder. You will need to have very good communication skills to be able to talk about the same set of facts with your managers and with your team members, in a way which appeases both of them, while likely not being able to influence either of them very well. This does not mean that you need to be good at lying or subterfuge, but that you have to understand what your uppers want and bring the important messages through to your team members (in a way they can understand and accept), and the other way around. All the rest - giving a direction for the team, onboarding new members and such, will come in baby steps and you can decide how to approach these things, i.e. if you want to become a despot or a "primus inter pares" boss. The latter looks like your style, and it is a perfectly fine way to lead a team; that is you do not enforce any technical rules, but you place responsibility for technical topics (i.e., the projects you all work on) on those persons that actually work on them, cleanly separating "team lead work" from "IT work". 

While it is true that this is a security issue (first of all, to give you the root password; second, to send it by mail, which is in itself not secure), there does not need to be an issue for you to solve with your boss. A diplomatic and yet ethical solution for unwanted passwords is: un-learn the password. This means deleting the mail you got, cleaning your mail system trashbox, not copying it into your personal password safe. If the password is easy to memorize, so that it is hard to erase from your brain, then make a point to never use it although you know it. The next, equally important, step is to let the sender now. This can be done in completely neutral, "egocentric" fashion: "I feel uncomfortable having that root password; I have deleted it and will not use it. I know whom to contact when I need access and will work on that machine together with them, if need be." If they are at all sensitive to security topics, they will get the point. If not, then it does not matter anyways. Do this communication in the same medium you got the password (just reply to the mail you got from them, obviously replacing the actuall password with "***") to get a paper trail, just in case. Putting blame on them or even taking it to your boss seems to be a sure-fire way to not having such a great social environment afterwards, and will likely do nothing at all to further the security of your place. There is a reason that larger companies have a separate entity (CISO or something like that) to handle these issues outside of the general managerial hierarchy. 

I assume you have no obvious choice, i.e. brute force, and since you do not wish to hurt them, you seem to not be the kind of person who likes to force others, anyway. In this case, and depending on your own character and the kind of rapport you had with her so far, I would suggest to talk with them in a considerably long one-on-one meeting, and tell her exactly what you told us. How you are aware that it is a demotion, that you wish to build a working relationship with her, and willing to continue to work with her as best as possible. Much of this advice is obviously something that you have to decide on for yourself, and will probably develop over the course of your talk. Give her time to spill the beans, let her talk as well. Listen, and try to understand what she feels or wants. Give her what you can give, and set borders where it is just not possible. The situation is weird not only for you, but also for her and her co-workers. Maybe ask her how she would feel about having a session together with her new team-mates, to talk openly about this. At least in my field (IT), demotions are very unusual, and when they happen, then usually because the person wants felt that they didn't want the additional responsibilities after all; involuntary demotions are more or less unheard of. 

It was a fun ride, and, in hindsight, very successful. The team is now well on its way to leave that era behind. But the approach was quite non-trivial as well. Maybe it gives you some ideas, and I daresay you will either need the wholehearted support of your Seniour dev, or remove him from that position (in whatever way open to you). Sit down, and have a long talk with him, if you're in any position to do so, the "where do we want to be in 5 years" type of talk... One note, which cannot be stressed enough: The existing system can be great (actually it probably was, to be able to survive so long), but there will be organizational problems surrounding the approach. There's a huge problem with documentation, general know-how distribution, truck factor, and having a very long learning phase for new colleagues. Plus, many, especially younger developers, have not much interest to invest a lot of learning into a very specific application context which will not help them at all with further projects. Reasons like this were (in my case) what lead to the described change, and speaking openly about them takes the personal sting out of the issue. Further reading: Per the comments, I seem not to be the one to have invented this process. :-) See the StranglerApplication pattern for some more thoughts on the subject. 

The reasoning is that with this approach you give him a little emotional support (I assume you are male, and the colleague is as well) and the hypothetical offer to talk about it in a not too emotional way (i.e., I would not come out with "I am sorry for your loss" because as you did not know them nor their parent, that would probably be a lie). As you state it, I assume that your colleague will not take you up on your implied offer; and if he does, it will be more likely than not a rather one-sided communication with him telling you whatever he needs to tell you, and you listening and acknowledging what he says. I would suggest not to give him advice about anything, or start chatting about any other deaths you happen to know about. 

The only way to gain credibility is to present them with a finished version 1 of your application, which shows precisely how it can help them, and shows a way into the future that goes strictly past what you can do with Wordpress. There is literally no other way, as nothing else counts. Ego has no place here (and after all, Steve seems to win in the "ego" department either way). You cannot gain credibility (or let's call it respect) by fighting against someone. He can always just point to his Wordpress GUI, and have something to present. There is no way to explain to non-technical folks why your solution (which, as far as they are concerned, does not even exist!) is better, and why Steve is atrocious. So, what to do Keep the excel solution running until Steve is finished with his job. Help transform the excel stuff into his Wordpress (maybe transforming it with some tools you program), etc. Be friendly and helpful (and I mean it - don't fake it or even plot behind is back). If it does not work out (because Wordpress is just not suited to whatever problem you are trying to solve), you continue with your original plan. If it does not work out due to persistent personal problems on your side, leave. If it works out => great! You have to embrace to work together with Steve, nothing else will make your stress go away. If you cannot do that, then leave the organization, this is nothing to work yourself up about. Enlarging your toolbox Quoted straigt from user @brett in the comments: Wordpress is hugely capable of handling a lot of tasks. Programming in Wordpress is a good and usefull skill. I recommend it. You can practically embed into wordpress whatever script you might have concocted as a standalone solution. Helping out with the transition from Excel to Wordpress would help one get more Wordpress skills. In my book this is another win, added to the first win of learning PHP, REST, APIs in this process. So while we are in the Workplace here and not on Stackoverflow, it still is worth pointing out that adding stuff to your toolbox is always good.