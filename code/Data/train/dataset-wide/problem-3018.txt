The formatting is all over the place, which is distracting and makes the code hard to read. The suffix in is unnecessary, as are the prefixes for and . It's not clear why should exist; this looks like work that should be done in a constructor. Neither of the imports and are used and should be removed. Having and take a node as a parameter leads to strange-looking code like . The biggest problem though is that successive calls to will return different values. 

In the last line, , will always be the empty string, which is probably not what you want, judging by the comment. One problem with big methods like this is that these sort of things are hard to spot. 

It looks good! Here are some issues I found. Readability I would recommend over for readability. Naming Greatest common divisor is a more standard term for greatest common denominator. MinValue should be , not . Immutability Since your data structure is immutable, this code 

There's a typo in the setter, it should be . As it stands, calling the setter will cause the program to crash. You can avoid typos like this by using auto-implemented properties, e.g. 

makes me wonder. Did you look for a faster way? Did you try other ways? Why is that comment there? If I wanted to be really picky, I would question you about the lack of access modifiers and a namespace. Why did you make these decisions? A bigger concern is a lack of methods. Use methods to decompose the problem into smaller problems, and reusable code. The only time you can dump everything in is in a programming contest. My biggest concern is that your solution is overly complex, using both a and a . This suggests a lack of familiarity with the standard libraries. So let's break this down, starting with . I would expect it to look like this. 

I may be able to provide more practical suggestions if you show more of your code, especially at the "top", part of the main program. 

I also created extra variables to hold options objects, to enhance readability, and I added comments to describe the intent and parameters of functions declared. Note that trainingDiary is now declared in the private scope as well. If you need to access it in the global scope, you will need to export it to the global object by assigning it to global this or window: 

You should think about the way you wish to handle the communication between modules. The latest trend is to abstract and decouple the communication using publish/subscribe pattern. You can find more details in The Scalable JavaScript Application Architecture presentation by Nicholas C. Zakas, and you may be interested in the open-source framework that I developed based on this approach, which I presented recently in Paris JavaScript user group. 

Stick to shared conventions for the naming of variables. Do not use all-uppercase for regular variables, only when you wish to indicate a constant value. Use a name specific to your appliation/website, organization or company instead of GLOBAL for the global variable referencing the root of your library, if any: it is no longer needed using Asynchronous Module Definition with requireJS. 

Edit: I updated the JavaScript modules in $URL$ to use scope(). You can see the result in the source of the page, and get an idea of the process by looking at the commit history on GitHub. As a JavaScript developer, I want to write modules in a format that is well supported today and that will still work in five years. I designed an open-source library to this end, scope or not, with two goals in mind. It should be: 

I realise someone passing in a UTC is unlikely, but it is something to keep in mind. One option is to consider using NodaTime, which fixes some of the issues with . 

However, you can generalise your data structures. I think the key insight is that you're not searching through an array, you're searching through a sequence. The interface then makes it easy to express the solution. 

Now, is getting a bit long. We could split out each check into a separate static method, for instance, 

Bug fix As I mentioned in the comments, should be . API The only time you return , is when you set to . I would suggest changing the function signature to 

doesn't seem to have a real purpose and can be removed. You might also want to use a or instead of a , as removing the first item of a list will require all following items to be moved, which is a slow operation. You could alternatively remove from the end of the list. Actually, you should be able to remove the explicit locking by using a or . 

is unused, which means it can either be removed, or there's a bug in the program. The first line in , , is superfluous and can be removed. The use of parameters can be avoided by just returning a value. Methods that can be marked should be marked . In , it is probably faster to iterate over nearest neighbours just one, like so: 

we arrive at "a matrix is feasible when there exists a feasible column, i.e. a column containing no significant zeros" (significant = q < 100). Finally, use to print s and for unused : 

Whether that's equivalent to the paper, I don't know. For sure it is easier to understand than the original version. 

As this algorithm is tail recursive lets tackle another problem: having recursion instead of loops often makes it easier to reason about a single step but more difficult to see whether one step is (partially) undoing effects of the previous one. Here, the remaining are ersed in every step. This is an O(n) operation (n = length of the list), doing this in every step means the overall complexity is O(n2). It seems the result could also be computed by 

which reads nicely as "there exists a tuple such that the second element equals zero". Then, using the fact that sorting lists does not change the elements, i.e. the outcome of , get rid of all sorting 

I'd consider the code there to be "correctly written" (I'm in no way linked to the code nor its authors.) If you want to rewrite your method to work directly with s I'd recommend using their full power: 

Yes, this is tail-recursive. Just annotate countWordsInFile with and the compiler will check that for you. Btw: why not name the method ? The Scanner is not limited to read from files. 

A concise and idiomatic (I think) implementation (which happens to be tail recursive) but without your optimisation would be: 

When you implement the API yourself, you may either create a building block on top of the scope bootstrap and other building blocks, or rewrite the function from scratch, replacing the bootstrap and all building blocks altogether. In a browser, you can load building blocks with script tags, then load your own modules: 

Use a dynamic module loader such as requireJS. You can use it to load modules dynamically using AJAX, and it features an optimization tool to combine your scripts into a single file to reduce the number of HTTP requests on production server. 

The function has different implementations with different behaviors: it may create a module in the global scope, in a private scope, synchronously or asynchronously after loading dependencies. When the function is synchronous, it returns the module just created, which allows to use as a direct replacement of the Immediately Invoked Function Expression pattern typically used to declare modules in JavaScript: 

The last two parameters and are optional. The name of a module is a string which identifies the module and allows to reference it in the list of needs of other modules: 

A separate function/library could be defined to declare dependencies, another for synchronous/asynchronous loading, and yet another to import and export symbols in a shared context. These separate functions may communicate and interact through a common event system (pub/sub). 

I am now considering ways to separate these concerns into several functions and even several independent libraries. For example, could be restricted to a single argument, to cover only the first concern: 

An observer is now able to process as soon as they are found (as opposed to wait for the completion of the computation yielding all results at once) and can unsubscribe anytime which in turn will cause a cancellation of the result computation. If some function still needs all at once there's always and friends. In addition, possible parallelization is now obvious (e.g. using Parallel.ForEach) but still not trivial (hinted at by the inclusion of TaskCreationOptions and TaskScheduler, sensible options for Parallel.ForEach not included). Also clients must then be prepared to consume 'out-of-order' search results. Potential further improvements: 

Personally I like leaving out the parameter (a.k.a. eta-conversion) to facilitate moving functions around (as we'll be doing shortly). This is a disputed topic, however. Similarly, can be rewritten: 

For splitting in linear time, there is a 'trick': moving two 'pointers' while keeping track of the visited elements (). The second pointer () always skips two elements while the first one () skips just one. The function needs to be called with , i.e. both pointers at the first element: 

On my machine, (10k) takes about the same time as (1M) (less than a second), whereas (100k) doesn't even terminate within a minute. Note that we can now also any list, not just s (due to the removed type annotations). If you want to pass an empty list in F# interactive, just use . I reversed the accumulator and 'real' parameters to make use of the concise ality. 

Without being able to actually test (I can only guess what , , and are), something along the following should produce your desired of dependencies: 

For each dependency in the array of needs, a property of the same name is set on the context object which is provided as argument to the function: 

To use the function, you can write your own or build it from building blocks available in the scope or not project. The building blocks are sorted in levels. The level 1 provides the bootstrap, it must be loaded first. One building block may be picked from each level. Building blocks from lower levels are expected to be loaded first, but they are all optional. Building blocks in higher levels use the function of the bootstrap to define a replacement function "scope", declared as a module. For example: 

Please review the usability of this API from the point of view of a developer who uses the API and from the point of view of a developer who implements the API. 

simple to declare JavaScript modules with dependencies simple to implement your own version of the library to customize its behavior 

Like the method in AMD API, which is very similar, the function mixes separate concerns in a single call : 

I checked the code with latest JSLint; it is a useful tool once you know what to expect from it, e.g. by reading "JavaScript: The Good Parts" from its author Douglas Crockford. It would definitely help you to spot the missing semicolons, which can cause unexpected issues when you minify your code. 

and last but not least, the i18n API part of the Scalable JavaScript Application framework, which I designed for Legal-Box :)