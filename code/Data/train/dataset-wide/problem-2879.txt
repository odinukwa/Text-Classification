When I want to check the validity of an attendance being entered into the system, I perform following action. AttendancePresenter Class 

The following query was used for the above purpose and I want to know whether this approach is acceptable or not, and also any feedback regarding the logic and its implementation. So could you review this code please? NOTE : The table has a field called to hold the month and year of salary (ex value. ) The table has fields called and to hold on and off of attendance. This field should be used when filtering data pertaining to a month. 

So it is indeed true that you only have to go up to the square root of . However, let's say we want to find out if 1 trillion is prime. We check , and is indeed a divisor. And then we check 3, and 4, and ... and we still check another million numbers. That is hugely inefficient. If you found a divisor, it's already not prime, so just stop: 

Well, yes. If they don't send you a message in 20 seconds, you're disconnecting them! Why? Simply removing that block is probably what you want. Separation of Concerns Your function both creates a server and handles the busy loop. You should split those into two functions: 

In a Win Form I'm doing initial validation in the Form. So before saving data, I want to validate whether all the required fields are filled (Text Boxes) by the user. There are about 18 such Text Boxes in the Form. Currently I'm doing it as follows. To make the code short only three fields are shown in the code. 

I'm new to MVP. In a presenter I have following code. Here what am I trying is to create a list of objects (in this case objects) and to show them on a in the . Every time an attendance is entered on the View, method on the presenter will be called to add the new attendance to the list. So to add a new Attendance model to the list I'm using a copy constructor in my Model. Now this code runs giving the desired output but I feel this could be further improved to get the best of MVP. 

I don't know what you would use for to be honest. But you don't need to loop. We just have a simple arithmetic sequence with a straightforward formula: $$\sum_{i=min}^{max} i = \frac{(max-min+1)(min+max)}2$$ We just need to pick out which one is larger: 

That is much shorter, and no longer repetitive. Declare Variables where you use them This is a very C-style list of variable declarations. Instead of putting them all up top, just define them inline. And prefer to : 

I'm working on a markdown-to-html parser for my C++ proposals. Example usage is turning markdown like this into an html page like this. The part that caused me the most frustration was having (a) tables that (b) themselves can internally use markdown. I ended up with a hacky solution that happens to work right now (basically, recursively re-invoking while doing my own HTML... "parsing"), but I'm very unsatisfied with it and would love to hear feedback on it. There's also other things I'm doing with that can certainly be improved upon. The code can be found here. is basically a copy of with some minor changes - I wanted an ordered list and the section number to be included in the name (which I couldn't do without... copying it all). 

I just want to know whether I've done transaction handling well. Also what about the other types of transactions available in .NET with regard to this code snippet? Also are there any redundant things in this code? 

NOTE: When populating since I need only two fields ( and ), The DataService returns a instead of the as the model has about 10 other fields as well. The will be used in subsequent tasks like Search, Insert, Update etc. Could you please review this code and provide your feedback? You may give your attention to the way that I've used properties to set and of the Combo. If there is anything which is not acceptable kindly let me know with an alternate solution. 

(Secondarily, I flipped the order of your arguments, provided better names for them, and am not limiting the value we're looking for to be a . Rather, anything that is equality-comparable to should suffice). The idea of using is that it, as a return type, already encompasses what you want in a single type - it tells you if there is or isn't a value (i.e. was found or not) and if there is a value, what it is (i.e. its rank). We however privately still need a value even in the case, hence the helper function. Altogether: 

Once we have those simple building blocks, putting them together to write breadth-first search is downright pleasant: 

Following code validates NIC number of a person (National Identity Card, no like SSN) Requirements are... 

Currently I'm using following method and its working. I just want to know that could this be make better or simplified? 

I'm using the following query for multiple transactions. This is the scenario. Generate Salary (this is not in the scope of the query) I have employee attendance in table. Then the salary is calculate from the attendance by using a stored procedure and resulting figures will be displayed in an interface allowing users to monitor / modify (entering allowances etc). THE QUERY 

First SalaryTrans table is updated. Then all matching records in CarriedForward table are deleted and new details are entered. I just want to know whether this approach is acceptable or there are better ways to write this. 

Just going to address the code, not the algorithm, as an optimal solution to this problem ends up being pretty boring but the brute force solution gives me something to talk about. C++ is not C You're using and . While those work, you should prefer to use and . 

There is no reason to do it. Furthermore, how would you handle multiple properties of the same type? In the interests of actually providing code critique, I want to address your (your has similar issues): 

Why? Do you need to have every line in memory? No. You're just trying to count the words. What if the file was 100TB worth of "all work and no play makes Jack a dull boy"? Poor Memory Use 

Length should be 10 digits or characters All should be digits except the last one Last one would be x or v in simple letters 

Appreciate if you could review this code and give your feedback. Specially what I want to know is about the exception thrown in presenter if the validation fails. Is it acceptable? Is this is a standard use of ? 

I have a and a in the and when the view is loaded, the should be populated. After that when a user selects particular item from the , its related should be displayed in the . The View doesn't know about DAL or Presenter and, it only has properties and events. VIEW 

Iterator comparison Your makes lots of intermediate objects. This is totally unnecessary. Rather than making a whole new pair of tuples for each element, just chop off the next index: 

One simple way to accomplish such type erasure is to have a type that you keep a pointer to, with a pure virtual function to call: 

Similarly, doesn't need to construct a whole new vector, just check the one you have against zero with : 

Reinventing the wheel When C++11 introducing support for threading, it introduced two concepts: a lockable object, and a lock. A lockable object meets, at the very least: 

There's actually no reason to bring this in, since you could already make an unqualified call to thanks to ADL. Also, you don't even need since would have done the same thing ( is a reference to const in all of your functions). Too much action This is really busy: