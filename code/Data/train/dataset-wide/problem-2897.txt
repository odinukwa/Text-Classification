If you can change to point to the end of the string by default, then you don't even need to deal with this statement! Making this block as small as the following: 

Wat. That's some evil math right there. It seems there's two choices. Here I have to say that I'm biased. My original own assignment only used N W E S neighbors. I was able to make the argument that if we ever needed diagonal movement, it would be a pain to add in a 2D array. It would be easy to add in a mesh network. So I opted for the mesh network. This is where you use experience to make a choice. Possibly even implement both in a proof of concept, and see the pros and cons, and pick the one you like. How do we simulate the timestep? Again, multiple options. 

Let's talk about this bit of code. First, I personally prefer 4 spaces of indentation, so I made it 4 spaces of indentation. You'll have to bear with it. (It's also a common standard, so you may have to bear with it in other places as well). I also indented the case, because it seems you forgot to indent those lines of code. 

I'd like to know if there's a better way to make enumerations or if there's an easier way to provide , and from the class. I'm also interested in general improvements. 

but it doesn't. The return statement means that there was no way for args of length 0 to go past that if statement anyway. You'd be better off making it more explicit: 

This for loop looks weird. It looks weird because it's a while loop where you've taken advantage of the ability to declare a variable. I think it'd be better as a while loop: 

Edge cases You don't handle negative integers very well. Specifically, the modulo operator, when performed on a negative integer with a positive divisor, may return a negative value. And when this negative value is something like, say, , then you get , which results in setting a high bit instead of the bits for 0-9. Duplication You currently have duplicated the code for and . By making use of smaller methods, you can get rid of the duplication: 

This can clean up the init code as you don't have to do and can instead just pass directly. Though having said all that you can just put the List of neighbours straight in the and not deal with having to look it up in . 

Euler project problems are best optimized using a different algorithm, the double for loop leads to O(n^2) while it can be much faster using a sieve method. I'll be keeping an array of all already found primes to test against. Besides that the inner loop should only run while (if there was a larger number that divides i then we would have found first) and put the sum part out of the inner loop: The if is true once in the inner loop at the final iteration, you can then move the code to the outer loop after the inner for. Using the array: 

Specific naming conventions are unimportant except that you are consistent in your project. Merge sort is one of those algorithms that are very elegant when recursive but can be better implemented if done iteratively. Here the primary niggle I have as a result of that is the allocations, you end up allocating at least extra memory (some of it freed before other allocations). Actually more because you don't reserve the space needed in the and ; If you merge from the ground up you can avoid this excessive reallocation: 

Besides that you store a date as a string in the database, let dates be a dates. In fact the function itself is not necessary with how the code is used. Make OOP? well you could create a querryable object that will return the aforementioned array and keeps the object handle private. 

You can gain some efficiency by wrapping the writer in a BufferedWriter. If you are using java 7 or better you should use try-with-resources to auto close the writer, otherwise you should use a try-finally: 

You return what is effectively an enum as a double. Why? create the enum and return that it's much clearer that way wat the return value means: If you still want a single point of return (for whatever reason) then you can use an if-else chain: 

That's the code without any comments. I'm going to try to optimize it, although you'll have to do your own performance testing. A couple things come to mind already: 

Oh dear. It seems I can create three threads before any threads have even started running. It is not required for the JVM to start running your thread when you create it. Thus, you can exceed your max threads here: 

Whoa whoa whoa! We are reading from the output file? Did you make a mistake? I dunno, but by simply removing some lines I've suddenly exposed what could be a flaw! Clarity You're making a lot of objects and doing things with them. Try putting some blank space in between. It groups statements together and makes the code more logical. 

You have multiple cases in your code where you have to "reset an audio element". This is done by calling and setting it's to 0. You should make a separate function for that: 

Your indentation is a bit off here, with the true case of the if being indented one extra level. The else case is missing its brackets, which is probably the cause of confusion. 

A minor bug: You get an for an empty list in . You don't have a comment stating you need to input a list containing at least something. Consider returning and adding a comment. 

There's a lot of negations in here, so maybe we can flip the variable's meaning and get clearer code? 

The entirety of this is duplicate code, however - you have an if-statement containing this, and a while-loop containing this. Extract to method : 

By doing so, it's easier to see what difference maps to what mod value. It looks like a complex for loop at the moment, but that's because of the handling for your console logging... if we could take that out, it would look like so: 

Your code could do with some formatting. As it stands, it sure is short, but we have minifiers for that sort of thing. I have to spend a lot of effort to read certain parts because it is filled with clever tricks. 

There is no real reason to build the DFA upfront (which can be exponentially larger than the NFA). Instead you can create its nodes dynamically during simulation. Though a pass to squash the epsilon transitions would help simulation speed. Your parsing method is a bit odd, you seem to go top down, first splitting the outer group into tokens and then creating the NFA out of that. I think it would be more intuitive to use a stack based approach like shunting yard. When you pop operator you pop 2 nodes from the value stack and combine them using the Thompson's Construction Algorithm based on the popped operator and push the resulting node back on the value stack. When you see a non-operator you insert a concat operator in front of it and process that first if it isn't the first char or after an opening parenthesis. 

You use lock locks in the get and release methods. This somewhat defeats the purpose of using the threadsafe pool. The getPoolSize doesn't need to wait on finishing the get or release as is thread-safe and the pool's size is fluid anyway when multiple threads are contesting over it. For shutdown you can use to clear the pool to another collection when shutting down: 

There are 2 functions that will help you with this class: java.util.Arrays.binarySearch and java.lang.System.arraycopy. The will search and copy the data much more effectively than what you are doing now: 

Some won't let you seek to the end (stdin and socket streams for example). You should check the return value of and fall back to the classic then , rinse and repeat method on error. A single is more efficient than the repeated ; so you can replace the while with: 

Instead of using a raw array to store the children you can instead use a . This will better optimize the allocations that you do. Using a map will also remove all the for loops for searching a key in a layer. 

For an array of 3 elements... means means . So you've got a problem; You'll eventually check . Your fix for this is , but I think you'll be better served by changing the for loop header to be (changing to ). And then adding a comment WHY it is 2. 

This line, , when do you think it's being executed? I dunno, let's apply OTBS (from the same wikipedia page)! 

Design Good designs feel natural. Let's see how natural your design feels. I have a . And I have a . And I may have a ... wait, I need to ask RemoteControl to connect to a device so it can send messages to the device? Why can't I just grab the remote control for the TV? There's two options that I'm aware of in real life: 

Additionally, checking if is empty is not needed. You're free to the list regardless of whether it has content or not. Other functions 

You need to get the Location from the Land, then you need to get the Orientation from the Land, and then you need to make the Land reposition a Unit... in order to move it. I don't have the source for Land or Orientation or Location but I assume the following: 

What's the doing here? Why does the Employee decide when the view is ready? Maybe I have a page consisting of a Project and the Employees that work on it. I'd have to make custom subviews. You're right in that the does not decide HOW it is shown, but it does decide WHAT is shown and WHEN it is shown. Which is not a desired property. That, or I'd have to alter Employee to add View logic to support multiple or partial employee views. Which is bad, because standards constantly change, and you don't want to alter all your model classes to be able to give a view that can be used for that standard (e.g. something that you can convert to JSON). Additionally, by limiting yourself to those constraints, you can no longer leverage certain libraries! It's fun and all to harp on the gigantic projects and code cruft that comes with using big libraries like Hibernate and Spring and such, but if you need to build a REST API and a phone app, being able to have libraries handle your object conversion to json and back (and in case of android, maybe even SHARE the model objects as a library!)... you can't do it in your setup! There are no getters, objects are immutable, libraries don't support this. is oddly specific class; it doesn't make any mention of Employee: