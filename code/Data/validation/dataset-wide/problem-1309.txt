Now, I would like to localize the enum, and so far my only solution has been to remove the description from the constructor, and check Locale and switch based on number of days: 

I created the enum like this, because I wanted to know the description, and (roughly) number of days: 

Then you can access it from your activity. What I would do is create the datasource in onCreate, open it in onResume, and close it in onPause. All of this explained in this great tutorial that I reference a lot. Keeping a single reference to the OpenHelper like this (it is known as a singleton) is helpful for preventing memory leaks. Something brief that I touched on in a blog post I wrote. EDIT Some more I might add is to create a contract class to keep track of your database schema, like this: 

That way you have string constants for names (which you already do though, great job on that) consolidated in one appropriate class (as I said earlier, leave the openhelper to updating/creating). You can still build your tables with it. Notice that I implemented BaseColumns which has an _ID string you can use as your primary key: 

For every list, Open or create Sequentially load each file in the folder into memory by creating a new instance of and calling 

I am implementing a multi-player game in C# and having seen all sorts of projects, from indie developers all the way to large studios struggle to patch networking into existing products in the past, have made the decision to get the networking aspect done first, and build the game on top of that. I've so far gotten to the stage where my server can accept clients asynchronously, but I have a strong feeling that I've implemented the threading very badly. I think it is possible that I am misunderstanding and/or misusing async/await and Tasks, but having read documentation and similar questions I think I will need practical experience to get my head wrapped around the correct usage of these. As a result, I am hoping that someone would be generous enough to look over my code and help push me onto the right track. I have excluded 'using' statements and the client code for the purposes of this question, however I can confirm the code does function correctly. I am not too concerned about issues such as naming, and the fact that I have a bit too much code logic in the Main function right now -- these will be modified and extracted to more appropriate locations respectively as the project progresses. I have denoted lines I am particularly concerned about with 

I have looked this over several times and have been working on it for quite a while, but cannot find any places where this is bottle necking in a way that I can fix. I am just hoping a second set of eyes to review this will see performance issues that I don't. 

The edits are merely suggestions, they may or may not be considered best practice but they are things I do to stay organized and have worked really well for me so far. EDIT 2 For displaying the information in the ListView, you can use a CursorAdapter. Here is a sample of what it could look like for you: 

I was hoping there would be a way to do this using a string-array in an XML file, but I can't seem to find anything like that. Is this okay practice? Is there a better way? 

If you are using a ContentProvider, you can easily load the CursorAdapter and watch for any changes to the Game URI and it will update automatically if you use a CursorLoader. Will edit again if that is an option, otherwise simply get a cursor of all of your Game values and call on the adapter: 

Another piece of python wisdom to consider is 'if you can do it with the standard library, do!' Field and record based storage is really easy to do with the csv module, which reads and writes comma-separated spreadsheet style files. A file formatted like this: 

Python has a neat built in called 'zip' which creates a pairwise list from multiple iterables. So you could do: 

By sticking the result into dict you don't have to override getattr yourself, which limits the intervention to a single place although it does deprive you of the option to do guard checks for bad values, etc. This example would except on name collisions and get you off the hook for manually redirecting double-dotted attribute queries. 

This would let you compose and reuse a collection of funcs into a DefaultFuncs and then reuse it -- default funcs is really just an elaborate Tuple tricked out so you can call into the functions from the owning NeuralNet instance All of these are functionally identical approaches (it sounds like you've already got the thing working and just want to clean it up). The main reasons for choosing among them amount to where you want to put the work #1 is good if the functions correlate and you want to easily tell when a given net instance is using a set; #2 is just syntax sugar on what you've already got; #3 is really just #2 except that you compose a function set as class (perhaps with error checking or more sophisticated reasoning) instead of a a dictionary 

One way you can improve this is by writing a data source class that does all your database access, instead of putting it inside the SQLiteOpenHelper. Leave that class to just creating and updating the database. Your data source could be like this: 

And, now that you have that, I personally like to build my content values inside the object itself so I know where to find it: 

I am writing a CAN bus logger application and need to format messages as quick as possible in order to prevent buffer overflows on our device. In some cases I am quick enough, but under heavy loads it is still pretty slow. I believe the bulk of the problem happens in my formatting block (I am using TPL to separate the tasks as much as possible). Here is my consumer block which takes a blocking collection, formats those messages, and passes them into a new blocking collection where they are later printed to a file: 

Then, assuming you've called , each time you call swapCursor on it you will see the updated games list. I hope this helps you. If you'd like to learn more about SQLite in Android without the UI aspects, I also have a four post blog segment that will give you pretty broad coverage. NOTE these posts are geared toward a ContentProvider, perhaps I will do another segment on data access without one, but I think you've got the required knowledge down for that.