Your extension check is pretty much useless, as I can still upload a variety of files with extensions that can gain me code execution, such as php4 or .htaccess. If possible, use a whitelist approach instead. But in your case, it doesn't really matter, as you are not using the extension anyways, the filename is just a random 5 character string without extension. You should also always use prepared statements. Yes, is currently controlled by you, but who knows, that may change in the future. Apart from this, I don't see any vulnerabilities in your script. My guess is that the vulnerability is somewhere else (seeing the logged request that you suspect would still be interesting). 

@HristoYank is correct, you shouldn't catch exceptions that you can't handle. What you are doing is basically just ignoring the error, which will make it difficult to trace bugs. If I call a method called , I will expect to get a number back. If the function can't return a number, I need to know that, so that I can react appropriately. Depending on the situation, I may want to use a default value, ask the user for new input, or abort with an appropriate error message. If the function just swallows the error and logs it somewhere, I will continue processing with invalid data ( in this case), which will result in all sorts of bugs down the line. As only a generic error message and no stracktrace is logged, debugging will also be rather difficult. Misc 

It still always returns false though (except if null is passed). Naming It is customary to use camelCase in Java, so for example should be . But it is not actually an id, so it should be , or just (we don't even know yet if it is a duplicate). 

Now it's very clear what happens when. Duplication and functions Following a redirect with is very good practice. You can make sure that you always do this, simplify the code, and make it easier to modify later by extracting that to it's own function (eg ). True or false Something is either true or false. There is no reason to do an else check on true if you already did one on false. Note though that some equals checks can be unexpected, so you should always use strong comparison () if you don't have a reason not to. 

I think you already have a great answer about the general approach you took. I'll focus on the readability of your code, as there are some very simple things that you can do to severely increase it. Paragraphs Currently, almost every line is on its own paragraph, resulting in way too much vertical whitespace. Your function for example is 82 lines. Just by using sensible paragraphs (eg no new line after or before ) you can get that down to about 50 lines. If Structure When writing an , it is generally a good idea to put the case that contains less lines first. It is really difficult to find the corresponding when you can't even fit both of them on the screen. Often it also makes sense to return in the else case, thus avoiding deep nesting. Comments Your comments shouldn't simply repeat what your code is already telling us. Comments like that do not add any information and distract from the actually relevant comments. Examples are , , etc. Exceptions There is no need to catch exceptions if you can't actually handle them. Just let them bubble up until you actually do know what to do. And if you do use PDO exceptions, you might as well also use exceptions for your own error messages. It is preferable to returning null and setting an error message (which the caller may or may not check). If you follow all that, your method would now look like this, which I think is a lot more readable: 

There are quite a lot of variables, which makes it hard to remember their order and their meaning. The variable names also do not make it obvious what they represent, so there really is no chance of a user using it correctly without reading all the code. You can try to help a user of your function with a PHPDoc style comment, but still, it will be hard to use. To try to fix this, you should at least split the function into multiple functions. There's really not enough similarity between eg and to put them both in the same function (this is why there are so many arguments, most of which would have to be set to null, because they are not needed for the desired query). But generally, a wrapper like yours is not really recommended. PDO already has a neat interface which people are used to. Your function doesn't make it a lot easier to use, and people would first need to learn it. It also only provides a very limited subset of the PDO functionality. What if I want to insert multiple things? The query will be prepared each time, which is bad for performance. What if I want to join something? Or only select the columns I need? If you still want a wrapper, you should look at the interface of existing code. A commonly used interface might look like this: . This is a lot easier to use than your code, because I don't have to remember the order of a bunch of arguments. An IDE will even auto-complete the function names. Security It is very unclear for a user which values can contain user input, and which cannot (these are actually most, eg , , , , etc), which will cause security issues later on. At the very least this should be well documented in PHPDoc comments. Personally, I would probably not write a function which can easily be vulnerable if "wrongly" used. To solve this, you could add mandatory whitelist parameters for those values that cannot be prepared (and get rid of , which is way too broad and basically cannot be used securely). global is often a code smell. It makes code harder to use, harder to test, etc. Just pass needed parameters as arguments. 

You could use magic getters and setters, but you probably shouldn't (see the top-rated answer in that question; additionally, with the primitive approach, you would make all your private fields accessible from the outside). You should also ask yourself if you even need setters. If the properties of the object never change after construction, you should make it immutable, as immutable objects are easier to handle (you know that they never change). 

Of course, this still doesn't add anything over the much simpler implementation of just returning directly, but it should show the advantages of lambdas in general. 

Structure: Fields , , and should not be fields. Fields are supposed to hold the state of an object across operations. But in your case, they are not actually used outside of the functions. And they shouldn't be either. The result of an addition has nothing to do with the result or input of a previous multiplication, so they should be variables of those functions. Instead of setting fields, your function should just return the numbers (and make it singular, which makes it easier to use and also to reuse). Structure: Functions Ideally, functions should do one thing. Your functions do quite a bit more: They calculate, but they also print, get input, and resume calculator operations. For such a small project it may not matter that much, but generally, such a structure severely impacts testabiliy and reusability. You should move and into the main function. This also removes some duplication and thus makes your code shorter. Then, your calculation functions should just return the result, which can then also be printed in the main function. Naming Objects are things, while functions are actions, and this should be reflected in their names. For example, instead of a functions called , you would call it , because it isn't a subtraction, but it subtracts something. Same with which may be or . is also a bit generic. Sure, the user picked something, but what did they pick? might be clearer. Misc 

Security The echo should be vulnerable to XSS via the file extension (but it's not exploitable - at least not easily; Still, I would HTML encode it when echoing). Otherwise it looks good to me. Regarding the various checks: 

It will save you running through the loop once, you can profile it to see if it is worth the loss in readability. Readability Code Structure I would probably pull out the case in front of the loop. Keeping it in the loop is confusing and seems unnecessary. Function calls do cause an overhead, but I would still consider extracting some of the code to separate functions (this would make profiling the code easier). Additional variables also cause a slight overhead, but some of your expressions are quite long and hard to grasp. You might consider adding intermediate variables with an expressive name saving a temporary state of the calculation. An alternative would be to use newlines to present the expressions in a better way. Variable Names I don't think that your variable names are very expressive. I'm not that deep into the topic, but I would guess that at least some of them can be improved upon. Also, just using case to differentiate names is quite confusing ( vs ). Comments I'm guessing that you have some kind of documentation to which your current comments refer. But without it, they are not that useful. It might be helpful to add this documentation (or a short excerpt) to the top. Style Please follow general style guidelines. 

Secure I haven't actually run the code, but from looking over it, it seems that you are open to SQL injections in multiple places: 

Single Responsibility definitely does way too much. The name already hints at this: Whenever you can't think of a fitting name, you are likely in violation of single responsibility. Your class: 

For debug purposes you could still add a method with returns a string of all array values. If you do it like this, not only is your class a lot easier to use (without having to read the documentation and/or knowing of the inner workings of the class), the class now actually is more than a wrapper for a method that could just as well be a static function. Misc 

As already noted in this answer, you should really use prepared statements. You should also not use simple sha1 hashing. Just because you added a parameter to sha1 does not mean that you are using bcrypt. The second argument of sha1 is regarding raw output, not regarding the hashing itself. I provided a link to the correct function in my last answer, it's here: password_hash. Apart from that: 

This is open to SQL injection for any additional values, either via , but also via . You have the same problems in other functions such as . 

It's not only cleaner regarding strucure, but it also avoids unnecessary overhead and exposing data you don't actually want to expose (eg the id, possibly). Of course if for some reason you do need the whole object, @Mike Brants solution using would be recommended (here you can also define what data you pass on, and using it wouldn't mean having to rewrite your entire application, as the view doesn't need to change). 

@mseancole answer covers quite a lot, but one security issue wasn't mentioned, so I'll mention it here: Your code is vulnerable to XSS, eg via 

You loose some flexibility (or you have to add quite a lot of methods to get the same flexibility), but your controller will be slimmer. If you can cover all needed use-cases with a couple of these methods, this might be the way to go. Option 2 The second possibility is to expose the database methods to the outside as you did with the method. You will have the same flexibility as before, but your code will be more readable. If you don't want to expose the actual methods of the database (which would be cleaner, as the controller shouldn't actually care about the way the database is accessed), you could also just add setters to it: 

Not really. Ideally, a class should be responsible for one thing. But your class does quite a lot. As its name suggest, it searches, but it also builds HTML, transforms error codes to error messages, and checks stock values. First of all, it would be a good idea to separate all code that builds HTML or other output in one place. This will make it a lot easier to modify it later on. Ideally, you would use a templating engine for this. The previous point should get rid of your method, which really doesn't belong in this class. But you should also move , , and somewhere else. might belong in a class, and and in some component that transfers labels to messages (having this all in one place makes adaptation easier). You also have quite a lot of fields in your search class, which are also rather confusing (having arrays of the different properties of items instead of an array of items). You could easily get rid of the fields by adding a class. You also don't really need . In general, you might want to look into MVC. You don't have to follow it 100%, but it's a good first approach. Style Your indentation is off, and your formatting is not consistent (spacing, vertical whitespace, etc), making your code unnecessarily hard to read. You can use any IDE to fix most formatting issues automatically. Naming Your variable names are generally quite good. One small thing: 

Comments There is such a thing as having too many comments. Most readers will read the first two or three, realize that they were not particularly useful to them, and skip the rest. You should not document how the language works (eg or ). Some of your comments also don't really add any information (eg or ). Generally, in-code comments should only explain why you do something, not what or how you do it. What you do should be expressed with good code, good function names, and possibly good PHPDoc function-level comments. For function-level comments I would choose some organized comment style like PHPDoc: 

The reason for this is that returns , and is true. You should pretty much never use . Always use for type-safe checks. 

There is a lot in this code that doesn't follow general conventions, and it honestly is quite hard to read. But if you follow some of the points below, I think it shouldn't be too hard to make it a lot better quickly. Formating Your formating makes your code quite hard to read. Especially your indentation and your use of spaces (or lack thereof). If you paste your code in any IDE, it will fix this for you (for example, in Netbeans just press ). It is also not common practice to declare multiple variables on one line. It makes it easy to overlook a variable. It also makes it easy (as in your case) to declare way too many variables (at the wrong level), because it doesn't look like that much. Naming Variable names should give a reader a good idea what a variable does. But I wouldn't know what the difference between and or , , , and is without looking deep into your code. Also, try to avoid short variable names, especially at a class level (, , , , , , , , , , and so on). But also for method parameters (, ) and inside methods (, , , ) expressive variable names can go a long way to make code readable. If it is a technical term, short(ish) variable names might be ok (as for example ), but I would add a comment, for people who are not that deep into the matter. The same goes for method names. and are not all that clear (at least to me). If they are technical terms, write a comment for the method. Also, it is customary to use camelCase in Java, not underscores ( -> ), and variables should start with a lowercase letter ( -> ). Fields You have way too many fields (class level variables) for such a small class. Try to make the scope of a variable as small as possible. For example, the Command fields are really only used in (as are a lot of other fields). , , , , , are further example of variables that should not be declared at a class level, but right where you need them. And loop variables should be declared inside the loop: , not at a class level. Overly long method is way too long, and thus makes it very hard to read. First of all, create new methods for each command (so you have an , an and action (although don't name them that, I am just unsure what is), and so on). Then, create new methods for taxable and non-taxable pgs. Also, try to separate the parsing of input and the outputing of data from the calculation. They are different things and should not happen in the same method. Magic Numbers Don't hardcode numbers, store them in a static final field. That way, you can give them a nice name, and you can reuse them (for example, appears more than once. But I wouldn't know if this is accidental, or if it the same meaning behind the ). Command I don't have the class, but right now, you are just creating instances of it to compare it to the input. Instead, I would store them somewhere (for example as static final fields in the class). Classes Your current class does everything. It builds the GUI, it performs the tax calculation, etc. Try to create more classes, each for its specific purpose.