I'm not suggesting to change to and to of course. The parameters should have descriptive names in the first place. You can consider and or similar. Possible Improvements Being consistent with code formatting is important. Consider using curly brackets, always: 

The following is the IL generated for There seems to be full optimization by inlining , and The CIL runtime stack works only with 4 byte or 8 byte integers, even the LDC_I4_S pushes a byte as a 4 byte integer to the stack, so, there is no performance gain in changing parameter types to smaller integers, byte or short A slight improvement (may be); These methods need not to be instance members and can be defined static. Changing them to static will remove 1 push instruction to the stack (argument 0, the instance to invoke the method on) at the caller site. That's all. 100 million iterations on my 2-cpu 8 core windows 7 HP machine executes in 17-18 ms, and 8-9 ms of it seems to be the iteration (empty loop) itself. 

Disclaimer : this is not quite an answer but more than a comment. You've written tests and I'd like to start by thanking your for this. This definitly makes reviewing easier. Good think to know if that you can make easily double the amount of test you have without thinking too much. Indeed, it seems like by inversing the parameters of your function, the return value should be the opposite value. You can write this : 

TL;DR : My comments won't improve the performances much. Also, I've never used Apps Script. This being said, here what I did : I decided to change details to make your code more concise (removing variables used only once for instance). 

Style You code is not properly indented which makes it quite hard to understand. Calling your function argument conveys pretty much as much information as calling it argument. I guess or would be more meaningful. It would probably make sense for to be a parameter of the function. Bug Calling your function with and gives as a result. Tests Before you try to fix anything, I suggest you write a test suite with your function being called with various inputs and the result you are expecting. This will make the developement of a new solution much easier. Algorithm Because your current solution is wrong, you'll need to think about a new algorithm. A simple, yet, efficient enough with small-ish inputs it to iterate over the weight and keep tracks of the various possible sums : With , you'd get something like : 

Reading through the code, I can say that it is well written, concurrent access in mind, and at the first sight, it can be said that it has no flaws. I especially liked these lines: 

Finally, the implementation, with all the naming convention violations and functional confusions fixed, might look like the following: 

You keep track of class instances and not bare integer values, You can re-use this class in other projects or forms (if designed & implemented correctly), You can extend this class to enrich it's functions etc.. (There are an infinite number of benefits) 

In that sense, the creatively defined method name and the parameter names and will not do. The General Naming Conventions states: 

And here are the results of the test, which shows the method is invoked a total of 5 times for all the 100 threads. The test created 100 threads which access the method randomly within 500 ms. There is another thread for removing the item from the cache in 100 ms continuously (This is because, the cache policy doesn't seem to effectively remove the item at the exact point of time of expiration). The method lasts for a random time between 0 and 500 ms With the following results, it can be seen that the method is invoked a total of 5 times (which is the number of the cache not containing a instance for the given credentials, first one because the cache is empty, and for 4 more times because it is removed from the cache) I can't help myself thinking why the of returns when the item is added to the cache. This would have been implemented differently (as returning the added instance as ConcurrentDictionary does) 

First of all, it's good that you try to implement something like a blog/forum on your own. It will teach you a lot of good/bad practices. In one comment you said, that you are trying to understand how these frameworks could be impemented, so it would be very good, if you take a look at them. Check out their APIs and see what they did. Im used to Symfony ($URL$ so my advice will mostly use their architecture as an example. However, be sure to remember that there are many ways to success and the things I describe are my current point of view. Your major problems (maybe not now, but in a few days/weeks/months) are the structure of your project, the structure of your source code and the mixing of php/html. 

The four if statements inside and seem to be the same, so you could move them to a seperate function. However, you currently have set to a fixed value and you don't change it. So as it is, the if statements are unnecessary. Some variable names are rather cryptic: , , etc. There are unused variables: e.g. The browser identification and the "calculation" of seem to be good candidates for a seperate function. 

Then, why restricting the second method parameter to ? Let's get that as an . This way, your method can also operate on or instances 

You should also check the items of the passed in collection for null references. If any of the items of the would be null, your code would fail with a null refererence exception at 

You can wrap your timers in ExecutionPlan class. Using a class for wrapping the timers have many benefits. 

EDIT 1: You also don't have to check and assign moannie if it is passed in as euro because it already has the value euro: 

The access is synchronized to the method. OK. For the threads that call at the same time passing the same instance, after the call to , is for only the first invoking thread. OK. All other threads get the existing instance after calling and is . OK is called on one of the first threads that call , most of the time the adding thread, but sometimes on another. OK After the call to , all requesting threads get the same instance out of one by one, as returned by . OK The first thread that gets the instance calls and succeeds. OK. After the instance is removed, other threads continue to get the old instance because they have the removed instance. OK 

You should compute successive powers by performing the multiplications as you do. If you do this, you do not need anymore : 

In for instance, we can see that a situation leads to a result being computed and returned without being store in the memoized list. Also, that case could be handled with less duplicated logic: 

General comment It is hard to know what your script is trying to do (it doesn't return anything, it doesn't print anything). A few comments and simple test cases are always welcome. Also, the way the code is presented does not make things easier to understand : awkward variable names, comments in weird places, unusual places for new lines, etc. I reckon you should have a look at PEP8. You'll find various tools to check your code and help your make it look better (, , , ). Anyway, let's get started. Date processing The way you handle date is wrong on many different levels : 

Style Python has a style guide called PEP 8. Among other things, it gives guidelines about indentation. The recommendation is 4 spaces. (I am not sure if the 8 space indent was intended or not in your question). Code re-organisation You could re-order your condition checks and use to save a level of indentation. You could define at the beginning of the loop so that you do not need to reset it at the end of the loop.