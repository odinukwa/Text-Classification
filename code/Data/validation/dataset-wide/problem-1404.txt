Could this be replaced by using frequencies? 4: Now it's starting to get hairy. I may make some mistakes here, because the code is not factored. 

Again, it's just an example. But the idea is that each function takes the data it needs and creates a new data structure that is the result of that calculation. I don't know if this is possible with this algorithm. But it could be. One hint I can give is that you know you are on the right track when your functions are returning "appropriate" data structures. That is, when the data is a mapping, you return a map. When it's a set, you return a set. Also, the functions don't take much more data than they need to calculate the answer. I suggest you take the iterative algorithm description and work backwards from the final output. Again, nice going. It was a pleasure to go through it. 

This definitely has too many levels of into/reduce. You could do a pattern. Do we need ? And why are we passing in a list when we only need the first? And it's often a good idea to put the driving sequence in the first or last position, so you can do threading. Let's try it this way: 

In CLS compliant version of the indexer you should check if argument is negative and cast it to without checked context: 

I make conclusion that is invalid. If you want to compare string on equality ignoring case you should use : 

It is completely wrong. You should expose a property which defines kind of day state and then react on changes of the state in view via binding and converter or triggers. So you need to read again about MVVM and take a look at examples of proper implementation of it. 

I agree with all things said by @TopinFrassi and want to add some additional notes. If you have the same code repeated multiple times extract it to a method. Define method like this 

should be rewritten with use of style. You can define either explicit style (with specified ) or implicit one (that will be applied automatically to all controls of the specified type): 

I recommend to swap naming convention: use underscore for private fields and remove them in constructor's parameters. It is common practice that allows you to easily distinguish local variables from fields. 

now, the above doesn't have diagnostics in it. But I hope you get the idea -- don't use a class when a function will do. I might make a a pair of tests and error message s even, with the error message optional. This would give you diagnostics as well. Or the return value could be a pair of , where a true bool means "passed with a possible warning", and false means "failed with a descriptive error". But you might not want to go this far. :) ... If you lack C++11, this is a patch on the above: 

but the as you can see, this gets rid of lots of brevity. On the other hand, this continues to be data-driven: having uniform code behavior, controlled by data, is often a boon to debugging. You can validate data easier than you can validate code! Less effort was put into optimizing the C++03 version than the C++11 version, but the hit may be minimal. 

I would add rvalue reference support with moving of temporaries. seems to be too low precidence to be practical - you end up having to everything (as demonstrated above). % at least binds tightly. I do like . Better than my . Forwarding from the operator to the function lets you forget the function behind the operator entirely: -- very Haskell. N ary infix operators that defer application of allow to run as efficiently as possible. But doing that cleanly might be hard. Not sure what is intended to do above. For an interesting test case, implement (where that lambda is a placeholder for a functor) Block some copy and move ctors to prevent persistance, and friend the approriate operators. As noted, I allowed arbitrary binary operators (chosen when you ) to bracket the named operator: the precidence of the resulting named operator exactly matches the bracketing operators. So has precidence of and has precidence of . Of the 3 first use cases (lin alg, container append, then) for two of them the named operators where variants of existing operators, and matching their precidence seemed useful. 

You are concerned about initialization of all characters in the method. I suggest to put all objects of the same type (bandit, knight, etc.) in arrays and then just iterate over them to do game logic: 

Are you sure you need such "big" types for indexers parameters as and ? I would work with and only since it is more than enough. 

Looking on this lines some people can say that omitting curly braces is very very very bad. Although I don't mind to place them for every I decided to go away from this "rule" some years ago. I totally understand what problems curly braces should prevent but I need to say that I never had any issues with s without them. So it is just a matter of taste. But you can use them and if you feel you are not experienced enough it probably will be better. 

I believe it is a bad idea to use default parameter value for private methods. Default argument is an easy way to forget about parameter and get incorrect behavior. But it is just my opinion, not the rule.