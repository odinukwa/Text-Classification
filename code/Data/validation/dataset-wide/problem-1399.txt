It seems fair to me... the random function returns "A floating-point, pseudo-random number"[1][1] so while the sequence could repeat, it might be very unlikely - refer to this SO answer for more of an explanation of that ... also read more about it in answers to this SO question: Will Math.random repeat? Feedback: 

Bear in mind that for functions passed as the listener argument to , the first argument after any arguments bound via Function.bind() will be the Event reference. 

logic in As I wrestled a bear once. mentioned, the first conditional can be reduced to simply or . The second conditional (i.e. ) is a little confusing. The comment is but the second part looks up a DOM element. If that DOM element exists should it really still add the image? Perhaps it should skip adding the image? Re-using variables can hurt readability. Perhaps instead of overwriting with the Image instance, use a new variable. And if the name is blank, then use short-circuiting OR to call . 

Another optimization In order to only go through the (last) foreach loop as few times as necessary, the following conditional could be added after pushing values into : 

with those styles in CSS (either an external CSS file or in a tag in the header) the class attributes can be minimized. Also, the text-align style can reduce the need for the tag (though if there are images or other nested tags, one might need to utilize ). Move click handler (on table cell) to JS I recommend using an Event delegate, like the one below. That way there is a separation of the click logic from the HTML (display layer). And one could use a library like jQuery, VueJS, Angular, etc. to handle many common tasks and browser differences. The code below listens for clicks on the DOM and checks if the target was the table cell with class name clickable (or a child node) utilizing classlist.contains(). 

Unreachable code in controller method In the controller method , it appears that there are two return statements, and those come before the line that would close the database connection (i.e. ) - thus that line is unreachable. To ensure that the connection is closed properly, one would have to store the return value in a variable and return it after closing the connection - something like the code below. Also, presuming the answer to the question in the previous section is that there isn't really a need to copy the array, just return an array in all cases, even if it is empty... warning- untested code: 

So that could be simplified to the following (also uses the numerical-index array syntax - see above): 

Notice that in order to look up the price for the associated select list, use the id attribute (e.g. ) to get the price value from . Rendering options Additionally, when rendering the HTML form with Wordpress, PHP's foreach and range() could be combined to generate the options, like in the example below: 

That way the display logic is separate from the business logic. As this wikibooks page alludes to, the HTML is separated from the PHP code so multiple people (e.g. graphics designer, developers, etc.) can manage the separate parts since they are de-coupled. 

Excess looping The loop within the is actually setting the text content of the cells twice as many times as necessary. Instead of doing the following: 

Perhaps it would never be the case that the Google Maps API would return a value with a leading zero (e.g. ), but if there was, then it wouldn't be interpreted as the octal value (I.e. Decimal number ). 

Should be superfluous, unless of course is defined within a function (e.g. an IIFE)... Functional approach You mentioned "trying to do the same in functional style" - perhaps you have already made changes like below but if not, it could really shorten things. For instance, the method could be shortened to below: 

There is already a reference to the data cell, so add the index parameter to the callback function and use that to reference with the modulo operator: 

Placeholder text I would use the attribute instead of the attribute of the text input, since it appears that text is really prompting the user... 

1 When the array has numeric indexes, then there is no need to setup the counter variable and increment it at the end of each loop: 

And that function could be pulled out of if is accepted as the first parameter, and then playerIndex can be sent on each iteration using Function.bind() - i.e. using a partially applied function. 

Over-complicated The addEvent function creates two functions (i.e. and ) which basically just call passing the event object to the callback. These steps are superfluous. It could simply add the event listener, passing to the parameter: 

Ben is correct- the code is mostly clear and easy to read, though there is some redundancy (e.g. , and even just has many occurences). I agree with Muhammad that Event delegation is a great way to simplify the logic. Another aspect to consider is that every time appears with a CSS selector (e.g. ) a DOM look-up is performed. This can be optimized by storing that DOM reference in a variable and then substituting that variable throughout the rest of the code. For more on this topic and other optimizations, see the section Cache DOM Lookups on this post. I know that post begins by bashing jQuery but if your goal is to use it then by all means keep it. However, you might consider alternatives - see youmightnotneedjquery.com. So you could define a constant: 

See this plunker for a demonstration. Update It has been mentioned that the fetch API has no support for aborting the request. If that is desired, there are other alternatives like Superagent (recommended by you might not need jQuery). See this updated plunker for an example of using superagent with its abort method in the componentWillUnmount method. 

Yes it doesn't hurt. Perhaps it would be beneficial to create a wrapper function to handle the boilerplate, like below. That way, the first three arguments (which appear to be the same throughout the code) to the call to don't have to be repeated every time. 

That means that there are 9 lookups on the Document Object Model (the DOM). Those can be take considerable time in the context of browser operations! A better approach would be store those elements in an array (well, actually it is a nodelist) as soon as the DOM is loaded: 

The names could be modified slightly so they aren't so close. As far as the finish() method goes, the three lines below that actually update data could be moved into a separate method, unless that feels too small. 

Feedback The code makes good use of the jQuery slide functions, as well as basic CSS class addition/removal. One could utilize event delegation to use a single event listener on a parent container element, along with .is() and tree traversal methods like .parent(). Tips to improve this Utilize .toggle() and .toggleClass(), along with dynamic function call using a variable (e.g. where is a variable containing the function to call) to condense the code. Also, as mentioned above, use event delegation to register a single click handler. Then check if the target is a child of various elements (e.g. with class indented, with class sub-expander, etc.), and handle actions accordingly. 

And if you really want to make it shorter, use short-circuiting logical operators (though some may argue it is less readable or isn't as verbose): 

The code already uses template literals. Most of the functions don't appear to currently have more than one parameter but if any did, there could be a place to use default parameters. Also, you could perhaps utilize destructuring assignment somewhere - maybe for the assignment of ? If you really wanted, you could perhaps utilize the class structure to move your code to being slightly more object-oriented, but be aware that it is "primarily syntactical sugar over JavaScript's existing prototype-based inheritance. The class syntax does not introduce a new object-oriented inheritance model to JavaScript."1. Other feedback switch statement 

That happens because matches multiple elements, including the header of the message dialog and the element that follows , and then updates all of those matching elements. jQuery DOM ready callback It is best to wrap the jQuery code in a function called when the DOM is ready. Traditionally that was done with but in the latest versions that is deprecated, in favor of the syntax. That way, all variables will have limited scope instead of being global variables (i.e. on ). jQuery references It is wise to store DOM look-ups (e.g. ) in a variable (or actually, a constant would be semantically better, though browser support can be an issue there...), since those can be expensive. So for example: 

I don't see any subsequent lines in that file that re-assign a value to that variable. So it could be changed to 

the method has a lot of duplicate code in the two blocks. The after the extra code to store the image could be removed. Then it can be simplified like below: 

If you really wanted to shorten the code for the promise callbacks, you could abstract those into methods. 

And that string could be generated using the mapping mentioned earlier. With a query like the one above, the chain of ... statements should be replaceable with and . Also, the could use the statements to specify custom values. Refer to this SO answer but instead of string literals use the expressions mentioned above in the conditional fields. 

A note about using parseInt() If you are going to use parseInt(), it is wise to specify the radix using the second parameter - unless you are using a unique number system like hexidecimal, octal, etc. then specify 10 for decimal numbers. 

It is bad practice1 (see also the section under heading Why CSS !important Should Be Used Carefully on this post for a more detailed explanation) so if possible, try to find a selector has higher specificity and remove the . Repeat styles There are a few selectors that have varying styles and some repition: 

Move table row generation code into function One can create a function to return the HTML for each table row and use functional programming techniques like array_map() to get an array of table rows and use implode() to join them together. Note also here we are using Heredoc syntax, as mdfst13 recommends, so double- and single-quotes can be used in-line without the need for escaping. And there may need to be some re-working to reference correctly - if you are working with a class definition, that could be moved to a instance/member variable and then have the function be a method in the class that can access that variable. 

janos♦ has a good points- the validator is a good idea. In addition to the error that there are table cells outside of a row, there are also warnings that the table rows don't all have the same number of cells : 

The general consensus is that the array lookup is faster. And typically it can require fewer lines of code. There is a quote somebody said (I can't remember who, so if you know who to give credit please let me know): "The easiest line to debug is the line you didn't write". 

See an updated fiddle here. Update I guess altering the class instead of the style still causes a reflow, but it should hopefully keep the display logic (i.e. CSS) out of the javascript... 

Refer to Example #1 on the PHP documentation for mysqli_query(), as well as the Dual interface quick start page for more information. Looking back at the functions like deprecated mysql_query() it appears that it used the "last link opened by mysql_connect()". If you really wanted to replicate that, you could define a wrapper function (potentially using call_user_func()): 

If nobody else is planning to work on this small amount of code with you, then using a plain JavaScript constant should be fine. Slight redundancy Gerrit0 is correct in the comment: "maybe using $scope.square in $scope.countGallon" The function can be updated to updated to utilize the function. The formula for the square footage likely won't change anytime soon, but if it did, then that could be updated in a single place instead of both places. This complies with the Don't Repeat Yourself principle. 

And does it need to return ? That would support chaining but your example code doesn't assign that return value to anything or have a subsequent call... Simplification This looks like a great application for an event delegate, unless there is some requirement I am missing about splitting out the functionality into those separate functions? See the example below, which adds the event handler to the root and then only calls the callback if the target of the event passes the filter. 

line endings after function definitions Methods are defined on like without a line ending. While line endings can be automatically inserted by the JS engine, it would be better to be consistent. And Such a function could also be expressed as an arrow function: Simplify one-line lambdas There is often little need to create a lamda/anonymous function just to call a function. For instance: 

Performance Comparison Compare the four approaches with this jsperf example. In Chrome, Firefox, and MS Edge it reports that the original code is the fastest.