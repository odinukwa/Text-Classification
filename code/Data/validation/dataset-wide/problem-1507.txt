This is the body of the function (which should, by the way, follow the correct naming conventions). This is called every 10 seconds. This address has to be found every 10 seconds. This address has to be connected to every 10 seconds. You can imagine that this must not be the most efficient thing, right? I'm not quite sure if this would work as I expect, but I think it would be more memory-efficient to create a single object and to open and send it every time rather than creating it. The object is an entire service for HTTP requests. Therefore, creating them and destroying them constantly might be inefficient when it comes to memory and transfer. 

Where you repeat the same exact method with different parameters on the same object AND the changing parameters only change by a single number, you can just concatenate that number to the end of the parameter name. In the case of the above code, that would be: This is shown below with a loop for the changing number: 

So, if the limit ends up being 10 in this case, you would have called 28 times. A way to speed this up would be to create an array and store all the s in it when you are first incrementing up to the limit. Then, when you are decrementing, simply reference the table for the value. This would reduce those 28 calls down to only 10. In your first loop: 

And, in fact, you don't even have to return . Since no where in your code are you chaining methods, there is no point. To sum that up, I re-wrote your class: 

Is not very flexible. What if you decide to add more suffixes? As you add more and more s, this construct just gets more and more ugly. I recommend creating an object where the values are the number to check the exponent against, and the keys are the suffixes to add. That would look like this: 

Iterate through entire list to find highest element Place that element and remove it from the list. Go to 1 until list is empty. 

Allocating and re-allocating memory is very inefficient. You should set one size of memory that will definitely fit the amount of memory needed. For example, you could just allocate, for each output string, the size of the input string. However, this eats up a lot of memory for big strings. You may have to come up with another algorithm for this. 

This is a bit of code I grabbed from the end of the switch statement. Note that the only time that this bit of code is going to be reached is if the user hit as their input. Therefore, you can do some simplifying here. Rather than exiting from the switch statement only to do another conditional on whether or not to break the loop, just return from the entire program as soon as it is discovered that the user entered 'd': 

You make 5 calls to the function when you could easily just put all the strings into one and split them up by newline in a single call: 

Every time this method is called, an object is created with a certain "shape" (certain properties, etc.) For that, we create a new class: 

Python's naming case is (makes sense, right?); you are writing your identifiers and functions is . For example, this: 

Having that extra variable is unnecessary. You can just use the variables you already have: and and the number . 

Better string copy You are over-complicating your string duplication. There is an easier way to do it using . First, simply copy the string: 

instead of In your subroutine, you move the value into two registers. A more efficient way to do that is to the register with itself, like so: 

These 4 functions "take in" two integers and give out another integer. For this, we could create a class that holds this logic: 

In the function of the function of the function , you have a parameter to catch the event that is fired when the function is fired. Although, you don't use that event variable any where in that function. 

Now, all you have to do when you add a new form element is create a new object and add it to the array. If you encounter any bugs with this code, notify me. 

You should add some checking at the very beginning of your function that somehow communicates to the code that is using this function that the array is too small for the function to work properly. Perhaps you could throw an exception. 

Now with that information be said, we can easily create a map/different of the different metric "types" and the number of basic units on one of this type. That would look like this: 

You are printing the same message in so I don't see why you are doing it again here. This method is for "heap-sorting" an array, not for sending output to the user. If possible, all input and output should be done inside . 

Instead of giving the messages single letter string names, I recommend creating an enumerated type that stores the types of messages. Here is what I came up with: 

I changed goodroll to use and , rather than "yes" and "no" because boolean comparisons are much, much faster than string comparisons. I moved the final statement out of the while loop so, in the case of an invalid move, the move won't be printed. I go rid of the part because, if the conditional before it was not , then would not have been set and will remain . 

This clearly illustrates each step of the game play, and doesn't have a repetitive line right after each one. In fact, you could simplify this even further. If you keep a list of lambdas that show/do each of the different game moves (, , etc.), then you easily loop through the list, calling each lambda. Here's what the list might look like: 

Your indentation is really off. That loop and everything inside of should be indented because it is inside a function. And, the case statements inside your should, too, be indented. 

Why are you trying to find the element again if you already have a variable stored with this element at the above of your code? It would be a lot more efficient to just use this variable, because 

While it is a great function to use, you are using in the wrong situations. For every time you use it, you are getting an array of elements with a class that you passed in to the function. Why not just use ? Sure, it takes a little bit longer to type but it's faster. This about it: the function has to read the argument passed in and, based on it's syntax ('.' for classes, '#' for ids, and a few more), scan the document in a way unique to each type of identification (id, class, etc). Wouldn't it be easier for the function to know that it was going to look for one class and for one class only? Semicolons They aren't entirely necessary, and the interpreter probably adds them in for you, but your code looks like JavaScript when you put them in (at least in my opinion). HTML indentation Your s are perfectly indented, but when you go down to your s, you start to try and clump them on to one line. Originally, when I was looking at the tag(s), I thought it was one really long tag. JavaScript indentation For the most part, it's really good. But there is one section that is bothering me: your section. I actually had to post this in to JSFiddle and click "Tidy up" to understand what was going on there. I believe the problem is the closing bracket of ; it is too far back, and it looks like it is closing . Built in output In the method of , it uses the function . Not everyone using this module may want an alert popping up on their screen; maybe they want it written to the DOM, or maybe they use custom pop-up boxes. (Excuse this section ("Built in output") if I misunderstood your function) Good things: 

You seem to be repeating this pattern of and then a lot. In jQuery, this is a method called that will add the class if it does not exist in the element, and will remove it if it does. To simplify your code and cut the method calls in half, you should set the styles of or to be the default styles of the buttons. Then, when you want to apply the other class, use . The applied class will override the default styles. This should speed up your code. 

Give me the object! (Not how to get it) Your function takes the of a DOM element that the function is expected to find on its own. However, this is not good practice. Instead, you should pass the DOM element itself. This could also speed up your code by a lot if used correctly. For more on why it's bad practice, think about it this way: if you need to do some specific checking on an element after you've found it before you are ready to give it to the function, how are you supposed to pass that prepared element to the function? Don't let the function worry about how to get what it needs; just give it what it needs.