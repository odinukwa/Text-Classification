It's similar to json but It shouldn't be json. It should be easy to read. I'm not going to parse it. 

so why not use regex for this and split on every occurance of . You then trim each word and filter the empty results out. Then you group each word igrnoring its case, sort the groups by count in a descending order and create strings. 

You shouldn't bind the implementation to any particular type in this case the . I think it would be better to drop this class and instead add a new property to the interface. You could check if the validation fails and is set to true then you stop processing other rules. If you want to get rid of the generic argument but at same time you want to keep it for other implementations then add another abstraction layer. Make the interface non-generic and add an that is derived from the non-generic interface: 

Assuming that the score is always a space and a number like is a very bad idea. Use regex instead. The class could look like this: 

It means that the user needs to know quite a lot about the internal implementation of each class/property to be able to use the builder properly. If he changes some property implementation then the build process might break somewhere at runtime which are the worst bugs to debug. I wouldn't use it for production code. 

I think in this case it's better to return an rather then an in order to prevent unintended multiple file reads. 

I need a but unfortunatelly the one that the .NET provides didn't have the functionality I was looking for (not working with linq and the LinkedListNode is sealed). I created a replacement that works similar but is linq-compatible. The main class is a that might be used on it's own but is better suited to be used by composition and should provide all the functionality of a chain: 

RestClient I currently test it with just two methods: GET & POST. Each of them accepts an uri-builder and its own . They are basically wrappers for the boilerplate request code. Before each request, first the default headers are set and then the each caller can further customize them. 

Usage Now we can easily combine both extensions to sort the array and print each step of the insertion sort: 

My is internally using a to calculate time intervals. Because of this hardcoded dependency I am not able to write good unit-tests for it. So I must be able to use my own timestamps that I can use for assertions. To do this I defined the interface that is a simplified version of the . Some of the properties I never use and my inteface does not provide them. 

Most properties have simple requirements so it should be possible to register their Dependency Property fields declaratively. I made a small experiment and it seems to work just fine. The first attempt supports and attributes. It looks a little bit like JavaScript ;-) 

Avoid prefixes for parameters. I already know that is a parameter. The prefix is redundant. It's better to prefix private fields with an underscore like to keep parameters clean and the assignment easier . 

This doesn't make a good class name. What if you add another property? You'd need to change its name again. I guess or something alike would be much better. 

If what you have posted is really only a part of something bigger then there is a much larger problem then this three nested loops and you should address this issue first. 

Let the list take care of adding, removing, inserting etc. and do the navigation with another specialized structure. 

I don't know whether it's a real dynamic programming or not because the definition is a little bit confusing but I'll try to review it anyway. First of all your problem can be solved with a single method like this one. It groups elements in ascending order and picks the longest sequence. It works with any that implements . 

You should create another method that parses/converts the into the property type and put the s there. 

The method is called rename but it doesn't rename anything. It changes other properties. This is confusing. You should call it or something like this. 

I wasn't happy with the above solution so I've refactored it a little bit to get this: The validation context had too many resposibilities so it has lost its method: 

You can then put the message there and just throw it without writing the message every time. You should avoid throwing the . 

I think instead of looping indefinitely over the queue you should only start it when the first popup is queued via the and loop only as long as there are any popups. After you've shown everything you should exit the loop and start agian when something arrives. 

Because I don't like writing the same useless exeption messages all the time ;-) I thought I create a better exception that would make this for me. This is what I came up with: 

Now you only need a task to process a collection of them. You can create it in many different ways so here is just one of them. I created an observable from an array of persons that I into a single observable that I want to watch. I'd like this to be processed either every ten items or every two seconds (there are also other options). Then each batch is processed with the loop. 

One of the APIs that makes it so useful is the method that is like a for but without copying anything. but 

But after being disposed it is not set to so using it agian after that would raise an object disposed exception. Or at least it should unless the session's doesn't really do anything useful so your code continues to work despite having been disposed. 

I needed to parse some command line switches from a string and I tried to do it the easy way so I just wrote this: 

So what should you do instead? I suggest implementing each file type that you need to de/serialize separately. This means that you should create such classes as: 

Why do you think so? Is creating the not excessive? You are instantiating it the same number of times. If helps you to save time by not writing the mapping your self then I'd say it's fine. Just remember that is a disposable type too, so you should add one more for it. 

The trick is to use a for tracking drawn numbers that has a lookup of and to stop drawing new numbers if all 75 numbers has already been drawn because calls to the method are expensive and the execution time unnecessarily increases. The 's method returns if a value could be added so we can use it with a loop until we find the next not yet drawn number. 

It would also be a good idea to remove these lines from the method as they are not related to saving and put them in the class as properties with a getter only: 

I need to complain about the missing but I guess you probably know that ;-) The names of the variables could also be a little bit clearer. Technically you don't need this : 

you can use what makes you code more readable, the type is clear so it's not necessary to repeat it twice: 

The provide more helper methods like the method that executes all computables and concatenates various dictionaries to build the final log from scopes and automatic-properties. 

I'm trying to fix another bottleneck identified with a profiler (dotTrace). This time it's a case insensitive hash-code. Currently I'm using the as a comparer for a dictionary and a custom implementaion of an . With 40 millions calls it costs me ~14 seconds. This is too much as there will be more calls in future. I'd like to replace it with an to improve the lookup time. The values I'm working with are in the format and between and . There will never be other codes. I've build a proof-of-concept for encoding and decoding these codes that works like that: I shift each char to the left by 8 bits from left to right: for example and . 

As to the code. I think it's well writen. There isn't actually much to correct if anything. Just a small adjustment: 

In my option they aren't but not because of the conditions but because of the suboptimal naming of the variables. I had to look twice at your code to understand what you are doing here as you usually use and to adress the nodes. Here however you are talking levels: 

I'm affraid I have to disappoint you because your code isn't resizing multiple photo files in parallel but rather resizing the same file into multiple sizes. It is doing or rather trying to do it in parallel but whether it's really faster then sequential processing I cannot tell. You have to fine it out by experimenting. It might be faster if the resizing process is taking considerably longer then reading it from the hdd or writing it back. I think a much better idea would be to put the loop inside the method and have only one of them. Maybe something like this (not tested): 

The real message should have a method like that you use to display the message and to hide it via the and . You should handle the in order to proceed to the next popup. It's just for demonstration purposes so I left the there. And here's one more example how to use the above service: 

I remove the and replaced it with the . It now maps dictionaries to tuples and takes care of the conversion of parsed data. 

Don't make the user think to much when specifying parameters if this can be avoided. Calculate the target length and let the user specify the length he needs. If the name should always have an even length then you could check if the given one is odd and if so then add 1. 

As the use case is very simple and I also don't need to parse any complex styles so are the extensions, just a simple regex with some string manipulation. I update the style by grouping by the and pick the last one if there are mutliple ones, if there is none yet, then a new style is added. If the value happens to be or then it's removed. 

Instead of doing this twice you should implement the interface on this object and use this instance as a key so that you only have a single . 

Well... there is no quality yet ;-) and actually you are going to gain some code if you want to improve it. I won't try to prove whether there are numbers that can break this fraction in any way but for the sake of the review let's assume the denominator can be zero. 

These lines are unnecessary because if there are not properties the resulting collection will be empty anwyway. 

The value should be first as the first value is always the default value if don't set any other. You could provide another field that you call and set it to any other field but by default is counter intuitive to me. Hero Your hero uses a backpack and a weapon-holder classes but instead using them and adding items there you perform the actions on the hero where you implement add-weapon or add-loot. Loot This base class should provide a protected constructor that requries you to specify a name. This way you won't forget it. The setter should be in this case private. If you make the property public you don't need the method which is redundant anyway. We have access modifiers so that we don't have to write such methods. (the same situation with weapon). Weapon You don't need a private default constructor that you don't use anyway. As soon as you define a custom one the default one is no longer automaitcally created. WeaponHolder/BackPack Instead of having a method there, your could implement the interface and return the values instead of revealing the internal list. In fact you actually need one of them and rename it to something like and make it generic. This could then hold either weapons or loot as they are nearly identical. You just create two different instances of it and Consummable/Item/Food Food is consumable so food should have the members that the consummable currently has. This class is redundant... but you don't use it anywhere :-| Names In C# we use PascalCase for all public members. 

This looks like you are working with a , aren't you? If the data comes from a database then you should group it on the server. 

This is not very pretty. The check-box should enable/disable the timer via its property and not prevent it from doint its job like that. 

Add an event to your new panel and raise it when it gets enlarged. You can then handle this event in the main form and set all other panels to 

I've applied the same pattern to the but as it already had a lambda for the incrementation I just changed the argument to :