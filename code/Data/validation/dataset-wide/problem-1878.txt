First - you were new, you should have been given carefully monitored and considered responsibility with clear deliverables until such time as you were no longer 'new'. Now if you were and you messed up, didn't do your due diligence, etc... that's a whole other situation but even with that until you had been proven there is little that you should have been able to do, as a fresh out of college graduate in your first job, to delay the project. If you were not given a ramp up into the job and into the responsibilities of the job that you needed then, if I were you, I'd be evaluating the company as a whole. It could be that this particular department(or even the whole company) isn't a great fit for you. Second - a Sr Developer who is not willing to own problems is terrifying to work for. Whenever you come into a position there are always politics in place. What were the politics in your particular group? Has your mentor mentored before? Does he like to dodge blame or finger point? Do they normally meet deliverables? That your manager is willing to discard the FNG in the interest of coddling a Sr Developer is not surprising, to be honest, but it is pretty crummy. It could be that this is a unhealthy environment where the Sr Developer can do no wrong, delays and problems will be shuttled to the FNG and no one is taking responsibility at a management level in which case you should run, not walk, and find a new job because it will only get worse. Finally - you should be able to talk to your manager and neither of them should be avoiding the problem. This is probably the most actionable part of this answer - go talk to your manager. Explain your perspective, without blaming the mentor, and explain that you've been feeling uncomfortable with the atmosphere in the team. Try to find out how you are being 'blamed' (not in those words of course) and then try top take care of anything actionable from that. 

This answer, as I review it, is a lot of "well it could be..." chat but I think that's still valuable. Namely to say and show that it's not necessarily that you did something wrong. Mentoring and onboarding new people into a team is hard. It's a bit like having a baby. Having a baby in a solid relationship is hard work but, ultimately, rewarding. Having a baby in a relationship with problems is a fast way to really showcase those problems and even damage the relationship. The same is true for bringing new people onto development teams. Development and deployment processes often grow up like mushrooms - in the dark and without coherent plans. A new person will often highlight any problems with that process because they are outside of the "It made sense at the time" nature of the development cycle. In short you should do a couple of things: 

What you can do will depend on the country in which this is happening. That being said, from an US perspective, this, as you are describing the issue right now, is workplace harassment. You need to go to HR immediately and state that you expect to find a way to settle this issue. If this continues or HR is not responsive to your request then you may want to get a lawyer involved to protect your rights. HR, despite what it sounds like, is there to minimize the companies' liabilities. Sometimes this aligns nicely with protecting your rights, sometimes it doesn't. Constant, unfounded accusations will potentially make people think "Where there's smoke there's fire!" and may cause you problems. Are you a member of a union? If yes get your union rep involved. Is your manager aware of the situation? If no, get them involved. If yes talk to them - they should go to bat for you! Your best solution to this issue is to be proactive and nip these complaints in the bud. 

Extrapolate this to a job. I've seen 'volunteers' and I've seen how their work is treated/valued after the fact. In some, rare, places their contributions are valued and, occasionally, they even move up into a paid position. But, typically, anything they've done is dismissed after the fact as done by someone who 'didn't know what they were doing'. And, let's be honest, you want to use this as a learning experience and you've not done it before - do you have the skills to make a product from scratch in this area? If the answer is yes then you have the skills to be paid for that. Finally, taking this job as 'unpaid', in the end, devalues this work for everyone in the field. If a company can get good enough, or at least profitable, work without paying anyone why would they pay a decent wage? 

To be honest this is the harder of the two issues. At this point it appears as though your 'mentor' is completely willing to throw you under the bus. This means coming to your mentor with questions, concerns, problems, or 'weaknesses' is just going to make the situation worse. To this end, if I were you, I would try to distance myself from the mentorship portion of this relationship. You've got a year of mentorship under your belt, it's not unreasonable to start moving away from that mentorship(in theory you should know a lot of what that mentor has to teach you) and, perhaps, start looking for another mentor. Second - you have a teammate whose is willing to throw you, the FNG, under a bus and a manager who is, for whatever reason, willing to believe that the FNG who was hired straight out of college and is clearly a Jr Developer is both powerful enough and legitimately given enough responsibility to single handedly delay a major project. This, again, breaks down into a couple of issues. 

Jimbo has an excellent answer but I think there are some things you can do beyond get better and learn. It's funny that you state that asking the SR dev questions is like 'walking into a Dragon's den'. Documentation is a beast. Software devs, perhaps especially crusty, grumpy, oldschool software devs, often have an extreme allergy to documentation. Often you'll hear the cry "Good code should be self documenting!" But, let's be honest here, if you want anyone else to develop or use your code then you have to have sensible, usable documentation. Let's also take a moment to point out that any CEO that says things like 'the senior has no time for us two coders' would be, given the rest of your description, a huge red flag for me. Reviewing those flags - the Sr dev has no time for his team, documentation is lacking or incorrect, onboarding was non existent, there's 3 devs all working on completely different projects using an inhouse, undocumented SDK... To be completely honest, if I were in your position I would be job hunting because this sounds like a place where whatever you 'learn' will be some proprietary, inhouse weirdness and that there's little to no chance for career advancement. That being said, you seem to want to climb mount everest with 2 feet of rope and a bunch of dead weight hanging off of you. So how can you do that? First thing's first. Documentation is poor to non existent. Pull Request accepted! Whenever you come across something that is undocumented, poorly documented or incorrectly documented - make your own documentation. Share it. It is possible to be an amazing developer and write acceptable documentation. One of the fastest ways to show what you have done, what you have accomplished and be seen as effective is to have documentation you can point to. You're figuring out this nonsense anyway, it takes the space of a few minutes to write down what you figured out. Next time you have that to refer to. Often documenting widgetA can lead to an understanding of how widgetB should/could work. In short documenting helps solidify your understanding of a specific object, gives you more general knowledge to the overall project and begins to put you out there as a domain knowledge expert(as your documentation proliferates and expands.) As an anecdote for this - my first IT support/weird dev job used a lot of in house tools and had some crazy workarounds and requirements due to the nature of the work. When I started, and throughout my time there, whenever I came across something new I wrote it down. I dumped these in a repo called 'Nahkki's Wiki'. I quit that job 7 years ago, I was back in town meeting with an old coworker who still works there and people who I have never met are still using and expanding 'Nahkki's Wiki'. Every time someone had a question, my name came up because I had documentation around it. A small, cynical part of me things that people trust things that are written down more than things spoken - which meant they listened more when I said "I have a doc for that!" as opposed to "This is why....". In my last Software dev position(in a research lab) and in my current software dev position I've done the same thing. And what do you know, I've been at my current position for 6 months and boom Nahkki is the subject matter expert in the silly, weird in house framework because she wrote all the docs... What I'm saying here is that writing the docs, though reviled by many people in our field, is a great way to gain knowledge, experience and visibility when you take the time to make it part of your workflow. Anyone can write code, trained monkeys can write code. Not anyone can make code that others can use and extend. Making that code requires appropriate documentation. Beyond writing the docs as you go(which I really can't emphasize enough) I would challenge your supervisor. If your supervisor says "The SR dev doesn't have time for you" then your response should be a respectful "when I have questions that are blockers how should I proceed?" I would recommend scheduling times to meet and ask questions. You and the other devs are using the same SDK - there should be a regular meeting where you talk about what you are doing now and what blockers you have run into. Never ask a question twice - ask it, understand the response and document it. You should phrase all of this as a blocker to productivity(because it is) and your supervisor should want to make this better. Frankly, if it were me, I'd be waltzing out of there as soon as possible. Sure you can learn a lot from a crummy situation, but you can learn all that and more from a good or even great situation. 

You are way over thinking this in a way but it could still be a deal breaker for you. Unlike many other fields at the moment, software development is an employee's field. What I mean by that is that there are more software dev jobs then there are qualified people to fill those jobs. Recently(ish) there was a big brouhaha about 1.7 million cloud-related jobs that went unfilled in 2012. This means that companies do things to separate themselves from competitors not just to customers(as companies in all fields must do) but also to prospective employees. This leads to things like 'ambassadors' of culture, providing breakfast tacos at all meetings, scotch lists on public websites, scooters for all employees, etc. These things are indicative of a companies culture and the types of people they have working for them. Most companies steer away from public discussions of alcohol being imbibed at the workplace, especially if they offer any sort of ongoing support or service. But not all. I know more than a few start-ups with a tap in the break room. Why could this still be a deal breaker? If a company presenting that they drink alcohol like that bother you(and there is no judgement if it does because it would kind of squick me out as well) then maybe the culture wouldn't be a good fit. A somewhat silly, forcefully casual scotch meeting menu probably shouldn't be enough to discourage you from applying and finding out more about the company. But it should be encouragement to spend some time really understanding the company's culture and whether or not it would be a good fit for you. 

If you are willing to do JOB_B for free why should the company pay you to do JOB_A? Typically once you 'volunteer' for a position then you should kiss the chances of getting a paid position(or even moving from volunteered to a paid position) goodbye. Since you're talking about profitability I'm making the assumption that this company is a for-profit corporation or company. In which case 'volunteer' work is inappropriate. There are a couple reasons for this... Have you ever hosted an event or done a give away for a free item/entry? There's a perception about free things, even free volunteer things. Let's take fixing a computer as an example. If you fix a computer for free often a couple of things will happen: 

You can ask for anything with the caveat that they company can decline your request and that it may even damage your relationship with that company. You're kind of dancing around saying this directly, but it sounds like what you really want is to be able to keep this company as a 'backup'. In other words if nothing more interesting or or profitable shows up then you would like to have this job. Unfortunately this isn't something companies like to hear. No one wants to be the backup plan. In much the same way you may want to use them as a backup plan, they want to use you as a sure thing. They want to sign you up as soon as possible both to fill any jobs they may have and also to snap you up before another company, potentially a competitor, does so. With that stated plain let's talk about what is realistic. I can't think of any job that's going to give a fresh college graduate a year to consider whether or not they want to accept a position. Consider it from their end. They have a position for you, they have a team who needs a new person. There is a world of difference between "we have hired a new person for your team but they start in June of next year" and "well we might have hired somebody but we won't know until June of next year". They seem similar, but you really don't want to work on the team that would do the latter. What is realistic? What are your best options? Ask what their hiring cycle is. Say something like "I'm actually not sure what my next step is out of university. I might be interested in graduate school(note, this is potentially a white lie, more on this in a moment). Do you have another hiring cycle in the spring that I could be involved with that would give me some time to consider my future?" Now two things here. Even if the answer is "Yes, we have a hiring cycle in the spring and we would love to talk to you again then", this does not mean you are guaranteed a job. This doesn't mean you'd be on the same team, this doesn't mean you'd be on the same product or technology and this certainly doesn't mean you'll for sure, 100% have a job at that point. If you go this route you will face additional competition, a lot of grads are looking in spring, and your internship experience may or may not be weighted as heavily. The second thing is that little white lie. Some folks are opposed to lies. To them I say "Huzzah." In my experience no one wants to hear they are the backup. Maybe you are considering further schooling. Maybe you're not. Maybe you'll take 10 minutes on a Saturday in December and go "hmm... Do I wanna go to grad school? Nah." But this is saving face for both you and the company. You're not burning bridges and they don't have to hear they were second choice. They know you will be shopping around, they know you'll be looking at other offers. It's just that neither of you will say that directly... You have other options of course. Ask to have a more reasonable time to consider(a month isn't unreasonable for most companies) or turn them down with your stated reasons above and see if they counter offer(I would be a bit surprised if they did). There is nothing wrong with wanting to see what else is out there. However, you're not going to be able to hold onto an offer as a backup. More importantly than 'is there better out there' are the answers to the questions: