And each square looks like a case. Each case contains a value, and a position determined by the row number and the column number of the case, so those 3 parameters will be our fields: 

Maarten Bodewes has said a lot, so instead, I'll focus on smaller pieces. The method uses a StringBuilder, which is great, but you're concatenating two strings inside the StringBuilder method, which ruins the point of using a StringBuilder: 

Besides minor improvements like consistent formatting and proper indentation I would like to target your random number generation: 

General observations "I find your lack of javadoc disturbing". Especially when writing code for others, your class should describe what it does. In detail. See it as a contract: Your javadoc describes what behaviour a caller can (and cannot) expect. Oracles document on javadoc has a lot more details on that. A library which handles URL -> JSON seamlessly The default implementation, see above ;-) 

Here is your code cleaned up for style as I've mentioned above. Also, look at some of the changes in vertical and horizontal whitespace: 

Edit: This is probably what I should have said at the outset to make things more clear: Since your interview question is concerned with performance: 

If you need your function to be non-destructive of the original matrix, at your function end, to undo this, you could loop on: 

To be honest: I fail to see how this class is particularly useful (at least yet). You can immediately create a from a , making your whole problematic method (as well as ) superfluous. So far your class is equivalent to: 

This may be enough for you now since you know that there is only one possible cause within your code. But think of someone else using your class or more complex scenarios, where it might be relevant to see from where your method was called: Your current logging output won't tell you anything about that. On the other hand 

If the statement (e.g. ) is wide, this burns a lot of horizontal space and the comment will probably exceed 80 columns. Consider such a comment to be the "topic sentence" of the paragraph. When it's a sidebar, it's effectively like putting the topic sentence at the end of the paragraph. Most style guides recommend keeping the width to 80 columns or less. I prefer ANSI comments (e.g. ) over K&R (e.g. ) as they're much easier and faster to edit. Try to avoid "if-else" ladders if possible. I replaced one of yours with a and the other, in the loop, using a I prefer to put the return type of a function on a separate line [in column 1] and so the function will appear in column 1 on the next line. This makes it easy to find them with a regex like which can make things easier when editing or analyzing source. Never put multiple statements on a single line. This is very hard to see visually when looking at a lot of code: 

to find the maximum value of a 2D array (which is the question), but instead, you're returning an object . I can understand where you got the class name idea -- locating a value -- however, it's counter-intuitive. Instead, a class name such as or would be a bit more descriptive due to the fact that the noun location has multiple meanings. I'll show you what I would do to answer the question (finds the largest value in a 2D array), and then, to help you learn, I'll give you some tips on the code you already wrote. As this question is extremely wide, I won't go as far as to explain everything, but I'll give you a few pointers. What I would do This isn't a really complex problem per se, so there's not a lot to explain. Since you want to know the coordinates of the maximum value (column and row), we still need to create a custom class. First, you must determine what the class represents. In this case, it represents an element in a multidimensional array, so like I said earlier, I'll just use something a little bit more intuitive like a . Why is a better name? If you visualize the 2D array, it looks like this: 

Here you would see that the exception was thrown in line 32 of the class within the method and that this method was called from line 25 in the method. That gives you already a first idea of what might have led to the exception. 

That being said, let me cover your specific questions and a few unspecific observations nonetheless, since you wanted all kinds of input. Variable names There is nothing wrong with your variable names IMHO. 

Edit: This was my original opening section, which has been getting dinged. I'm leaving it in, for reference, but after rereading it, although it might have been tightened a bit, it does talk about the performance issues Caveat: This isn't a critique of your code style [as Zeta has already done that], but rather an alternate algorithm that can be 20x faster. A single simple 2D matrix can be much faster than using the primitives. As you were doing a interview question, demonstrating proficiency might be paramount and this might be a moot point. But, when the performance difference is an order of magnitude faster, that may make the difference. I've had a few related interviews and speed sometimes matters more. Assessing such a tradeoff may, in fact, be part of the requested/desired solution. To eliminate boundary checks, I've created an oversize matrix that has a border of zeroes on all sides. The actual data matrix is inlaid from . This is a technique used in some video/image processing. By using pointers instead of index variables, this also eliminates a number of multiplies within the loop. 

Assumption that the JSON will come in via URL For a general purpose utility class that is almost certainly an erroneous assumption. You can either offer several entry methods, e.g. 

While not incorrect, that certainly looks a bit clumsy. Since you want four unique random numbers, a better choice would be to create a list of numbers from 0-9, shuffle it and then simply take the first four elements. And while you're at it, convert your four individual variables to to a single array of . This allows you to replace the above code with simply: 

I would put that in an interface named something like (unless you have another class related to cases, e.g. , but since you initially only had a class and a class, I assume there isn't any), which would look like this: 

If you want to read more about Javadoc, I suggest you read this article. The class should not have public fields, but private fields with public getters and setters instead. As for why, you can search online, but this is also a good explanation: Why do we need private variables? If you have any questions, feel free to ask. NOTE I used the name to highlight that the class name should clearly explain what it is. However, I wouldn't personally use that class name and instead, I would use because the keyword is reserved (switch case). 

(Refactor that into a separate method and you can re-use it for your balls generation as well.) When and are both arrays, the comparison could also be simplified to: 

Error handling Your code may fail to close in case of an exception, leading to a potential resource leak. To prevent this, either put in a block or - even better - use as seen above. Your code also throws a when is . You can add an explicit check or document that behaviour, but you should do one of them. Error handling (2): Logging When encountering an exception you usually want to log the stack trace as well to help with debugging. Your current logging will print something like that: