You're on the right track. You just need to catalog the files so that is aware of them. At a prompt: 

The value used in the DDL for the datatype (eg: tinyint(1)) is, as you suspected, the display width. However, it is optional and clients don't have to use it. The standard MySQL client doesn't use it, for example. 

I don't understand why the current answers haven't questioned the requirements fully, so I'll ask and leave it as an answer. What are the business reasons? What data do you need to encrypt and why? If you're looking for PCI compliance, I could write an essay. Questions about your requirement: 

Several ways. You can set the environment variable before running SQL*Plus (Assuming Unix), to allow use of an external text editor (, by way of example): 

You have a few options, some of which will make your database unsupportable by Oracle (if you care!) as you need to fiddle with SYS owned objects. The first option is to revoke select privs from everyone: 

There are two tables you can get this info from. and . The schema that these tables reside in depends on the APEX version. By way of example, my vanilla Oracle 11.2 install has them in the schema. To list: . 

You are receiving an Oracle ORA-03297 error because the HWM (High Water Mark) of a table is beyond the size you tried to shrink a datafile to. First try and "shrink space" for each affected table: 

... to specify the tables that you wish to replicate. Either wildcard the table_name (if possible) or use multiple lines. 

Option 2 - simply tell to ignore the error (). It looks like there are some errors, but they don't matter as the PK constraint and index was created when the intermediate table was created: 

You've got the distinction between users and groups mixed up. Putting the dba user in the oinstall group will not mean that the dba group will also have permission to write to /u01/app/oracle when the owning group is oinstall - this is because the dba user and the dba group are completely separate entities. The Oracle user should be in the oinstall and dba groups. There shouldn't be a dba user, only an Oracle user. 

The encryption process is atomic, and no data will be lost. The only way you'll lose the data is if you lose/destroy the wallet key, or drop the table/column yourself. 

I suspect you're missing the difference between and (otherwise known as CTAS). allows you to create a table from the resultset of a query. For example: 

This page explains how to deal with string lengths when Unicode characters are involved. is the function you need. 

... to the init.ora for your database instance & then restart the database. You may also be able to change this without restarting (as sysdba from sqlplus): 

is what you're looking for. Skips the first N rows, so in your case you just want to skip the first. 

Now, the best way of working out if a row has moved is to look at its . The for a given row is based on the location of the row in a datafile and block. Therefore, if the changes it means the row has moved! Documentation link. So, create a table to hold the rowids of the existing rows in the table, and insert them: 

The errors you're eluding to actually happen before the database, so auditing won't help. You'll need to enable listener logging/tracing to diagnose them. Add: 

I do wonder why on earth you'd want to automate this though. Seems like a very bizarre business case. 

Obviously, alter the numbers and path as needed. Adding a datafile impacts your backups. Take a full backup immediately after adding it - this is the only thing you really have to worry about. 4Gb is HUGE for a tablespace. I'd first investigate whether there are some large objects being stored in the tablespace that shouldn't be there ( is your friend). Also, note that you cannot remove a datafile once it has been added to the tablespace. 

Note that I have used as you specified that the token should be "numeric characters". The above is the same as using an column in MySQL. However, to accommodate for the fact that you only want to generate a token when the invoice_no , you need to use a trigger as follows: 

In your case, will still match and so will return the row etc etc. Change all of the above conditions to and you'll be OK. 

.. it means that it's listening on all interfaces. If something similar to the following line is returned, and no other lines: 

There's no fool-proof way, but here's a list of ideas for you: /etc/oratab: Little script to give you a list of SIDs in the : 

This should sort you out. Remember to login & out again once edited, or do a to source it. Also, make sure it's executable ( ). 

This is because the maximum possible stored value for the (32-bit signed integer) column is . MySQL is silently ignoring the fact that the value is larger than this & is "truncating" it down to . Multiple values truncated to are causing the unique constraint violation. If is supposed to be a phone number, I suggest changing the datatype to or similar. 

Restart the listener with followed by . Create the reference to the external library & create the function to interface between PL/SQL and the C prog: 

I'll start my answer with this: As a general rule: Never, ever, create objects as the user / (or any other "internal" Oracle user) unless directed to do so by Oracle support. A simple test case shows that there's a big difference, due to ownership. As : 

You could do this by splitting the table into two, putting the 10 columns that you report on (along with the primary key) in one table (and a separate tablespace) & the other 40 in another. You can then present a view that joins the two together as the primary table. This probably won't be doable without application changes though. To insert, use an query or an trigger on the first table plus an T on the second table. Whilst technically possible, I'd question whether this is needed. You'd be better off wide striping over all of the disks (ASM does SAME - use it if possible) to increase the number of spindles & IOPS available, rather than effectively putting some disks out of action because they hold data that isn't used for reporting. 

I imagine you've enabled suplemental logging for the table on all columns, instead of just the ones that you require to be tracked. eg: 

If your database has been running in mode and supplemental logging is enabled, you can historically mine the archive logs using Log Miner. There's a nice demo on this page. May I ask why you want the total number of operations? The numbers by themselves are meaningless. 

This is happening because the auto-complete isn't context aware & it's offering you a column name of as well as the table name you're expecting. 

Oracle collects SQL statistics for each SQL execution plan/sql_id (), rather than just for a specific . To verify that this is indeed the case, this query should return 0 rows: 

The first thing RMAN does it automatically perform an to switch logfiles so that the active log at the point the backup was started will be included. It doesn't do this in all backup situations, but this answers your question. 

So it seems that there is no way to hint to the RDBMS that the underlying data (after the inline view is created) is . This all seems a bit silly, given the /// statements all require matching datatypes! 

Not quite sure what you're doing wrong without seeing the full C you've written. Try and setup this simple case I've made for you, then add functionality bit by bit from there. 

This is a very good question. Assuming that you have a transactions table that stores each debit/credit, there is nothing wrong with your design. In fact, I have worked with prepaid telco systems that have worked in exactly this way. The main thing you need to do is ensure that you're doing a of the balance while you the debit/credit. This will guarantee the correct balance if something goes wrong (because the entire transaction will be rolled back). As others have pointed out, you'll need a snapshot of balances at specific periods of time to verify that all of the transactions in a given period sum with the period start/end balances correctly. Write a batch job that runs at midnight at the period end (month/week/day) to do this. 

The answer is simple, as long as you can guarantee that self-joining the merged table will not affect all queries that hit the table. Just merge the tables, then create a synonym for the old table names that points to the newly merged table. eg: 

Interestingly, only seems to suppress the output of the warnings to SQL Plus. A trace still shows the table being populated by Oracle: 

Quite simply: Null VaLue The function substitutes any NULLs in a given resultset column with the value given as the second parameter. 

Use an integer & store the prices as the lowest common unit. So, for dollars and cents you'd store it in cents. EG: $1.00 would be stored as 100. In my experience it's standard practice. 

Conclusion: There's something else happening. Note that the procedure above runs with , which is the default. 

This is explained in the documentation, here. See "B.2 Changes to the Optimal Flexible Architecture for Oracle Database". 

I've done it using a conversion into a Julian date, plus a hacky division, truncate, then multiply. Source data to show the upper window is correct, and different for each user: 

It's simple. MySQL has a single daemon that runs the database server. Within the server you can create any number of databases - these databases have no direct mapping to users. Oracle has a single database. When you create a user in an Oracle database, it also creates a Schema with the same name as the user that created it. This is equivalent to a database in MySQL. Having seen the edit to your question, you really need to forget about mysql while you learn Oracle. DDL and RDBMS concepts are completely different. Start with the Oracle Server Concepts guide (link). The Oracle documentation home is here: $URL$ To create a user, the syntax would be: 

You were nearly there... Just put a space between them (as that's how you want them to be formatted): 

Your database is unhappy. Login to your Linux box as the DB owner user (usually ), restart it & then do the following to recreate the broken data dictionary objects: 

There may also be tables in the tablespace that can be purged. The most likely culprit is usually old AWR snapshots. You can query the data dictionary view (, filter on ) to get a better idea of why the tablespace is growing. 

You don't need a . The listener will happily start without one, but will just start without supporting any services. will periodically register databases with the listener, but you can force registration manually. Move the file away: 

You can do this using a trigger. Note: This is HORRIBLE, but I can't think of another way of achieving this. Test tables: 

tnsnames.ora / listener.ora Another option is to look in each and analyse the and files to see which instances have been configured. Already Running Instances You've already covered this with your search. You can also use to see which instances the listener is currently servicing requests for. 

This is happening because an underscore in a hostname is not a valid character according to the RFC. 

There are other way more complicated ways of achieving similar results, but the answer would be significantly longer! 

A of 22 is just the largest number of bytes it can take to store the largest possible number (Oracle uses 2 digits per byte). A implies the maximum of 38. You can verify this with : 

But, that's not what I think you're asking. You want the next renewal date where the contact period hasn't yet been hit, which can be done as follows: 

Use a view that excludes the virtual columns to do the manipulation. I've just tested this & it works: 

Basically, there's a one-to-many relationship between and . You don't say what RDBMS you'd want to use, so the data types will need changing accordingly (bigger s/ columns etc will be needed for long articles/comments etc). Constraint DDL is also largely RDBMS-dependent, so you'll have to look the syntax up for yourself once you've made a decision. I can recommend Postgres. 

... the local time is 11:00:00, which is 16:00:00 UTC (11:00:00 + 5 hours, because it is 5 hours behind UTC). The two times and dates in your example are identical when converted to UTC - that is what the sentence in your question means. 

In short, no. You can however use the view to check which objects the views and functions depend on, then query to check the for each of these dependant objects - that should give you an indication of which objects have changed and caused the view to be invalid as a result. It's quite normal for objects to become invalid in development databases when columns are added to tables etc. 

Obviously you'd be better off putting the table in an appropriate schema and granting on a per-user basis. If you need help with another approach (session tracing), let me know. 

OCI (Oracle Call Interface) is not ODBC. ODBC drivers may use OCI, but not the other way round. I've never heard of Oracle charging for ODBC drivers/access. In fact, there's no mention of an ODBC component in the global price list (link here). I would clarify with your vendor - maybe they're trying to extract some cash out of you by supplying/supporting some kind of additional product, or maybe it's just a miscommunication. 

You can do this using an Oracle External Table. First, create a directory pointing at the directory holding the .csv file: 

Your question's not brilliantly clear, but if you want the 2nd, 3rd and 4th characters in the column , in the table , then use : 

Oracle inserts into when you compile an object that produces a compilation warning. I traced an object creation with () & without () warnings enabled to show this. With warnings set, we can see the following SQL in the trace file: 

Another thing to mention; You're going to be limited to the 4000 character limit, but will be OK unless you have tables with hundreds of columns. 

Oracle are obliged to fix security bugs and updates for MySQL 5.1 until the Premium support period has ended - remember that there are paying customers out there using the product in production. See page 13 of this document for support end dates by MySQL version. MySQL 5.5 is more than ready for production use & I'd recommend using that for any new projects going forward. 

I'd guess that you're not using SQL Plus to test & are testing in another tool (such as SQL Developer) and it's not set or you haven't configured the tool to correctly display the output from the RDBMS. Or, it could be the fact that is a typo :)