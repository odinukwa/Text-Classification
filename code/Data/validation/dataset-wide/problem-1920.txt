It's a bad idea, that's for sure. But how to handle it involves the above. In all likelihood, a strict reading of the contract bans such usage. However, some companies like to apply "common sense" to the application of contract language, so may actually permit certain banned usages so long as it doesn't impact anything. Don't do anything precipitous until after you've learned a few things. In this case, since you're new to the company you're not really in a position to understand how corporate culture modifies contract language application. Secondly, you don't know who allies are, so embrace that role and go to the manager of those systems (someone, er, like me). Declare ignorance of how things work (which is true), explain what you found, and ask how this works. You're seeking education, not tattling on a co-worker. At that point, you've done what you could. You've reported a questionable behavior, and probably now have a much better grasp for the edge-cases around your employment contract. If it turns out that such usage actually is banned, you'll have earned an ally in that manager. If it turns out that it's allowed, you'll likely get some of the background for this specific case, which will help your understanding of how the company works. 

I would say "Full Stack Web & App Developer" because just Full Stack + mobile would still read as just Web to me personally. App development tends to be called out separately. If I just saw "mobile", I'd think responsive websites etc. 

The reason your CV isn't giving people the impression you're doing great in your current job is that you don't tell them that! Your list of duties is very terse and tells me nothing about what you have achieved. In fact the word "Duties" implies that you were just doing your job, nothing to see here. Make it "Achievements" or something like that instead. Instead of things like "Configure MySQL database for the SIP infrastructure.", you need to focus on great projects you've done and why you were so effective, what was the end result? Here's a line from the graduate role in my CV: 

Have a look at sites like $URL$ There are a lot of resources out there aimed at making it fun to learn to code. Try to find one close to the skills you're using at work and build it from there. Once you've built up some confidence with a technology, come up with a little side product for you to work on at home. Don't choose anything too ambitious, and then use Stack Overflow for specific questions and issues with your project. You'll start to feel more confident in tackling the programming books too after a while. On the other hand, if you try the above and are still feeling like you don't enjoy it, there is nothing wrong with a move to testing. It's a very valid career path, not too badly paid and you are likely to still have chances to dabble in coding if you feel like it. 

You absolutely need to ask your company. We have no idea because we have not seen your company handbook, employee handbook, or your employment contract. Sidenote: The intent is pretty clear: you want other people besides your employer to notice you. Your employer probably will see through that and won't like you using your work for them to help you leverage an offer from someone else. Instead, proudly display your company's brand, show off the cool stuff the project can do, and show its impact on your vertical. This will be much more palatable to the company and the results will be two-fold: other companies will want you to come do that for them (this is the exposure you wanted) and your profile within your company will improve as well. This puts you in a position to be wanted by others and wanted by your own company. 

Do not say anything negative or overtly damaging. That kind of sensitive feedback should come directly from Joe's manager. You can get into a real murky area if you say things that damage his reputation and cause loss of job and he finds out. Don't rehash previous bad projects, failed deployments, or anything like that. One thing that I have found works is to say lukewarm things about the person that are mostly irrelevant to what the primary work they will be doing. What you don't say about a person in a referral is equally as impactful. If I was asked to give a reference for a dev who I thought had poor skills, I would say something along the lines of: 

As with any big life change, there is a threshold of benefit that needs to be gotten over before the pain of the change starts to look good. This is why people stay in a broken house instead of moving to a less broken one, why companies resist changing out major systems for more supportable ones, and why people stay in jobs they're unhappy with. In a perfectly mobile workforce, companies have all the incentive in the world to stay with market-rate raises. Only, there is no such thing as a perfectly mobile workforce. Vendor lock-in applies to paychecks as much as it does to supply contracts. This is how employers can 'get away' with not supplying market-rate raises. 

We started getting attrition when the 2008 recession and associated increase-freeze started being really felt. 

The HR department of the employer I spoke about above passed out a break-down of each employee's TCC. In my case, the bit that didn't show up in my pay-check came to +35% of my salary. When factoring that against the TCC of my market-rate peers I was actually pretty close to market-rate. Salary isn't everything. And then there are the other 'intangibles', which are very hard to quantify, but employers try (hard) to foster. These are value adds to the "benefits of working here" column that don't show up on the pay-check. Employers try to exploit this because most people are not solely in it for the money, and is why most job postings have "and we're a great place to work" somewhere in there. This is where ping-pong tables and beer in the fridge come from, but it is also how well the office works together. An office that works really well together is one that is retentive. Your hypothetical female programmer may have found herself a workplace free of the microaggressions that so plagued her previous workplaces (internships, OSS work, pickup work during college, etc), which means she'll happily take a 20% pay cut just so she doesn't have to put up with all of that crap. This is a good example of non-monetary compensation, If employees aren't asking for raises, or new-hires aren't regularly forcing the organization to up their rates of pay, pay can slip below market-rate due to simple inattention. That's a market force too, it's call inertia. 

Set the duck under or beside your monitor and either very quietly or silently talk out the issue. Having a loud conversation with a duck will be understood by some, but not by most. It is also distracting. The alternative is to use your colleagues more since your duck has one main flaw: it can't ask questions back or offer alternatives to your methods/thinking. Working on your interpersonal interactions with a colleagues, doing code reviews, seeing alternative methods and solutions to an issue, these will all be immensely helpful in your career. It will raise your profile among your peers and your management will most likely notice your increase in productivity as you pointed out. When it comes time to promote someone or pick someone to lead a high profile project, your colleagues and manager will be able to give you a good recommendation based on how well you work with others and how your work is above standard. Your duck, on the other hand, won't have much to offer at all. 

In short, no, you should not remove an account number or refuse pay. You must be doing something right, because if you were really doing a bad job, you would be fired. It is understandable to feel like you aren't doing any good work or you are burned out, but the ultimate decision on how you are performing comes down to the company. If you really need some form of validation, go ask your boss/colleagues/ceo of the startup for a quick status meeting and ask if your work lately is up to snuff and satisfying all requirements. If they say yes, then you should feel good. If you still feel bad, maybe that is indicative of something deeper and aligned with you not feeling challenged or engaged at work. 

When I wanted to do some research, I was able to get a pass to access the local university's libraries for 6 months. Had to go through quite a few checks but it only cost me about Â£25. This is in the UK though, not sure if it is similar near you but it may be worth a try. 

If this is happening to you often (and it sounds like this isn't a one-off) the best thing for you to do is to create your own plan to track your progress through it. If your plan says that X feature should be complete by week 1 and you're approaching the end of week 1, you know you have to get a move on. That should keep you making expected progress throughout rather than the nasty surprise near the end when you realise it's only half done. 

I think you're looking at this the wrong way. Your first programming job should be the one where you learn the most. You want to use it to absorb all the knowledge of your colleagues and become a decent programmer in your own right. As long as you're making enough to live off without getting into debt, try not to think too much about the salary, think about everything else you can gain from the job. Later jobs will pay you more for this knowledge. In short, move on when you're not learning very much any more. 

We can't know this and neither can you unless you ask them. Make sure you understand what the expectations are around after hours support, on-call rotations, emergency scenarios, etc. 

First question, you would keep your current position even though you don't like it and it is not in your field of interest just because they matched salary/pay? Next, if you decide this new opportunity is right for you, don't say anything until you formally accept and get your offer/particulars in writing with a start date. Then schedule a meeting with your advisor/boss/supervisor and say: 

I would recommend against it. Based on your post, it sounds like these associates are no longer at the company you are applying to. An HR person who is reviewing your cover letter may not even recognize the names or be able to find them in the current email directory. I would use the fact you are being referred as the cherry on top and instead focus on making the case of why you are a good fit through your actual skills, abilities, accomplishments, and job history. Those are the things that will ensure you are taken seriously during consideration for the role. Your application will already get a check in the box that indicates its a (internal?) referral. The referral can be used as a good talking point during the interview. "Joe, Mike, and Dave actually recommended I apply for this position. I have heard them mention several times how great the company is, how much fun everyone is, etc. etc".