If you will always be bringing eth1 up manually at some point after anything automatic has happened during boot or network restart, then you could set the method on teh device to manual 

Now, on his server in his or he needs to add an entry to service that domian, and allow your name servers to get domain transfers when he updates/sends notifications, replacing the addresses wtih the ip addresses of ns1.example.com and ns2.example.com 

You need to set up a mail server that is driven by db tables, or arrange to export your db tables in an appropriate format every so often. Lots of ways to do this, but the way I use and seems to be fairly common is a Postfix+Dovecot+Mysql solution. If you need/want a nice admin interface for it all, look at ISPConfig. Overkill - maybe - but it works well. If nothing else, the server setup pre-requisites will get you 3/4 of the way to a roll your own solution. 

Go to your Linode control panel, open the 'node in question, go to the "Remote Access" tab, and at the top next to the first part of the "Public IPs" area with the IP/gateway info where the "ssh root@your.ip" text is there is a link that says "Reverse DNS". Click that, change the value to match your , save it. Wait for up to 24 hours for the caches to clear and things to repropogate. Happy user of Linode since the days of 24mb/ram and 6gb or so of disk being $20 per month :) 

Apache by default uses a different host config file for the default ssl server. And I don't see any reference to SSL in the snippets of your config that you posted.... So.. it is probably falling back to whatever default host is defined and is pointing at the wrong DocumentRoot. Run -S to see what names/aliases, addresses, and ports are in play as it is currently running. It will also tell you what config file defines it and what line the definition starts on. 

Yes, a ssh tunnel will do this for you. Assume remote service is listening on and you want to be able to access it at your , and your username on the remote machine is and the remote machine's hostname is 

This should be moved to unix.se ... but to do this is fairly easy. I run my own DNS servers so I buy a domain, set its DNS servers to ns1.mydomain and ns2.mydomain, and run a few shell scripts on my primary and secondary servers to set up zone files, an apache vhost, and mail service. If you don't feel like duct taping your own solution together like I did, there are service management consoles that you can use that would do all of this, and allow creation of sub-management, etc for resellers and so on. If this is of interest to you, I'd recommend looking at ISPConfig - $URL$ 

a shows in that it is sleeping. No indicator of time that I can see - here's the output, note I had to start the curl, click to change focus, etc. so more than a few seconds into it 

You would need to edit the webserver config and specify the index document. Your attempt to modify that directive was correct, you just used the wrong syntax - %20 is the URL code for a space - so instead of it would be Or, if you are trying to get to it for testing purposes, then ought to get it (or it does on my local apache install) 

You need a local X server. For Linux and the BSDs, this is done. With Mac, you just need to install it. For Windows... there are free ones with limitations, commercial ones, and Free ones. I'd install if I had to use a Windows machine... Anyway, start your X server on your local machine, use X over ssh ( or ), and once at a prompt launch whatever app. Using will make launching a GUI over a SSH tunnel started by some other user much easier than but either can be done. Of course this also means that you'll need the GUI tools installed on the remote machine... Again a personal thing but I'd rather just do it all via command line... 

Remote machine is A Your cloud server is B Your desktop/laptop is C A initiates a SSH session w/ reverse tunnel to B. This opens a port on B's localhost, pointing back to port 22 on machine A. All traffic travels over this tunnel. Check the -R option to the ssh client. From C you ssh into B, then ssh to the port on the localhost that is the B end of the SSH tunnel that A initiated. 

What is more important than a FQDN is the server has a sense of self-identity and it can confirm it. So should have a simple hostname in there (I have multiple linode machines, so I use node1, node2, etc). That same name should have a pointer to 127.0.0.1 or 127.0.1.1 in You'll need a real DNS-level FQDN if you want to use DNS to access your box, get SSL certs, etc. Good thing is linode GIVES you a FQDN - in the form of liNN-NNN.members.linode.com where the Ns are numbers (and may be more of them). You can see it in your control panel under "remote access" or contact the support folk. If you start configuring services - mail, http/https, etc - then each service will have a config file (or files) and you can specify in that what hostname/FQDN to respond to. As long as DNS is pointing that hostname/FQDN to your IP, stuff will work. Depending on what you do with your machine - for example, if you set up a mail server it MIGHT pull your hostname, etc. in to create its own config on initial install. 

the option sets a umask for the internal-sftp program/subsystem and any files uploaded through it IF the user is a member of the group. Personally I also the users so that they can only access their directories - check the option as it applies to a directive in the file. 

User1 is the owning user, a group that User2 is a member of is the owning group, set permissions to 750 

You can do this on the webserver level using (name based) virtual hosts. Set DNS for both names to the same IP. Configure apache with 2 (name based) virtual hosts. domain1 has a document root of and contains some directories, including one named /download - so the file system path to that folder is Set up domain2 so that its document root is What domain1 sees as $URL$ domain2 will serve up at $URL$ Another lazy way is to use symbolic links, if you tell the webserver to follow them. You can also alias various directories, so if you install phpMyAdmin it can be available on $URL$ but the files all live in /usr/lib/phpMyAdmin and that directory is simply aliased in. 

Still applies. Have headers been sent, but waiting on data transmission to start? Waiting on headers? Half the data has been sent but there is a temporary transmission pause? Anyway, reports as "sleeping", didn't want to deal with writing more code and experimenting for the others. Perhaps some method of relating voluntary context switches to elapsed time would work? With , and a simple script - 

Works fine on my machine (Debian Jessie). I've had an issue with an older version of the client, on an older version of Debian, using Courier - the fullchain.pem certificate wasn't created automatically, I had to several certs together to generate it each time I updated. Output of your same sslclient command followed by output of from one working machine: 

Edit to include an example of a host definition wtih SSL directives pointing to a letsencrypt certificate with a redirect for the same site on http to bounce them to https - 

As said, you can use almost anything. Some choices make things harder down the road (like mail), so before you go installing all sorts of services and things that read the hostname and write it into the default config you want to set something sensible that tells you what machine you are on or what the purpose of the machine is. My personal practice is to use what VPS number it is (I have 3 or 4 going at any one time so vps01 or vps03) or if it is a VM in virtualbox on my own machine I'll use its purpose (dns-experiment or whatever). For mail servers (I use postfix+dovecot w/ mysql on Debian) I never use the host-name-part of the fqdn that will be used as the mailname (/etc/mailname and in postfix's myhostname in main.cf). And of course, don't forget to update /etc/hosts ! 

This says "connect as remoteuser to remotehost via ssh, and tunnel traffic from my port 4321 on localhost (no ip specified on local side) to port 2345 on whatever remotehost resolves as localhost (localhost is specified) " Another example, forwarding through to some website on port 80 - 

I'm assuming appropriate info in named.conf (or named.conf.local) that says you are a master server for your domain. Check the zone file with Assuming that all checks out as OK, check the serial numbers for each domain's zone file info. Now, what you use for a serial doesn't really matter - AS LONG AS it is numeric and always increments when you make changes/updates to the zone file. Looks like you are using a unix time stamp which works fine, I like YYYMMDDVV format where VV is 01 to 99 for the revision that day. Figure if I mess up 99 times in a day, it is time to quit... Serials are important because when your DNS server sends out notifies OR is queried by a slave server/secondary server for your domain, the serial is examined. If the value isn't larger than the serial that secondary server has cached, it won't update its store of data - it figures it hasn't changed since there isn't a new serial. 

A wrapper script in some language (I'd use php and run via cli since it would be a quick copy/paste from stuff I already have) that is executed, then deleted, or at least edited again to change all passwords to "changeme" or similar. 

By not having a valid shell, the system default umask isn't being applied/used. What you can do is put your users in a group, and force a few things via the file, including a umask - 

On the client you'll need enough OS to boot, load libraries, manage the local video/keyboard/mouse, and run a X server. On the remote headless box, do your regular install of whatever you want and configure the greeter on it (gdm, kdm, mdm, xdm are the typical choices, depending on desktop environment, etc) to allow querying via the XDMCP protocol. Once that is done, on your local client start the X server and tell it to query the greeter on the remote host. Apps run from remote host, user interaction takes place on local client. You could even run a full OS on your local machine, and when you need something from the remote you could use to nest a second X server inside your current one, query the remote host, and run the 2nd desktop as an application, much like VNC works.