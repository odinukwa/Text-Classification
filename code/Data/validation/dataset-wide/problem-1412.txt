In terms of the raw/basic functionality, what you have is fine. The transactional logic is good. Readability is the only concern I have, and would rewrite your code as (note, there are some spaces I added around some conditions): 

This code does not work, right? What you have is an infinite loop, because does not do what you think it does. There are a number of things wrong in here.... 

I have called it , and it takes an input String, and a number of times to iterate. It then loops the number of times, and computes the result, and prints the result. It then prints the new result. So, what about the method? Well, the trick is to count the sequences of digits, but also, the better trick is to start at the end and work backwards, because we can then use those values to build up the output String efficiently working forwards. 

Notice, that, in binary, all powers of 2 have exactly one 1 bit set? So, your function should be able to take advantage of that... how about: 

The basic premise of your sort is good. The code is neat, and, if you know the merge-sort, it is readable, and does the right sort of things at the right times. With just your code in front of me, I would say 'good job'. To make it better, I would recommend that: 

It breaks early if it finds a duplicate The inner loop only processes unique values, not all values. 

There are a few other small changes in there that can be done to improve readability.... Updated Updater. All told, I would take this code: 

Not being a PHP expert, but messing with bitwise operations a lot, I have some advice for you: First, the specification for your operations should be embedded with the code as a comment. Having to look up a specification that may or may not be the same as the one you used when programming it, is not useful... and changing between screens/pages to inspect the code vs. the specification is also not much fun. Something like: 

The method's function captures the of the request, but does not use it. If you are simply trying to force the close of the body at the function end (and not the beginning), you can replace: 

Yuck ... you should be able to handle an empty list more gracefully than that. Creating a special instance perhaps. Random Access I like that you differentiate between RandomAccess and other lists. This is a good thing. public indexProperty() By exposing this, and the indexElement, you are allowing people to completely mess up your data. They can change the indexProperty, and not the elementProperty, and now you have corruption. Co-Modification Your method is not reliable. A followed by a will result in a regular Iterator throwing a ConcurrentModificationException, but, your code does not. To implement fail-fast co-modification behaviour, you need access to internals of the List that are not public. next, current & previous This is a broken concept.... I don't like it. You have access to three methods that may, or may not, all return the same value.... a single-element list will have all three produce the same results. I would expect that you have to move the cursor before you can access the content. Additionally, there is no way to easily loop through this structure.... How would I visit each member exactly once? 

Your code is neat, and it is easy to follow the logic through. On the other hand, I am confused by two things. 

In addition, to separate out your printing of the state, I would create a bit of a string helper function... I'll explain it later, but show you here, now: 

Bottom line, is that, at low volumes your current solution is not going to make a difference, and that at high frequencies, your solution is only going to make things worse. One other thing to consider, and Android performance is not my strength, but on 'full' computers (I often work with systems with more than 128 cores in highly-threaded systems), the cost of having to bring the stack in to your system cache, and then replace it with the cache of your object is probably going to be more than just creating a new object would... Again, the more busy your system, the more this sort of issue 'hurts'. 

The above code still checks each letter, but only does it once. It is smart about the indices, so you only compare previous letters with the current, and it does half the comparisons. Also, by using a starting offset of 1, and a comparison on the loop, you never compare the character against itself. For smallish strings (less than 100 characters or so), this \$O(n^2)\$ algorithm, using no additional space (other than the variable), will be very fast still. 

There are more efficient ways to reverse the digits, but a string reverse is not completely horrible. I think your most immediate problem is probably the array. There is no need to have that at all. Remove it, and keep a simple and accumulate to it: 

In your case, you have three parameters, the , , and for the car. These things can't be changed after the Car is built. You want a Car that has , but not . The non-builder way to do this would be to have a single constructor that takes all the parameters: 

How about the performance, though? I pout the code through my MicroBench suite, using the following code (I had to use a different validation string for your code, I called that one ... ;-) : 

A few comments on this... What is a character? In your code, you are only counting non-spaces as characters. But, if the user enters that counts as 10 characters to me..... From my perspective, Characters can just be . Still your definition appears to be 'non-space characters'. Using that definition.... Now, about the regex. You describe 2 ways to count words, and one way to count non-space characters, and then, for some odd reason, you count newlines as well. So, if I were to suggest that the best way to do it was with just one big, and few small regex... ? The big regex is the most complicated to run because it needs to do more complicated matching on a larger value. By stripping the value sooner, you can make it faster. Note, you do not need the word boundary markers when dealing with either or . 

The reasons for making every class have a toString is because of the times you should use the toString() method.... and, as far as I am concerned, there are only three places in general programming where using toString() is legitimate (and two 'special' cases): 

General Your variable names are not helpful enough. I understand that is , but it is still too short. In general, I worry that you have too many different ways to access the core logic. Too many public methods. Further, some of your methods require a instance, but others are just public static methods. This inconsistency is confusing. On the other hand, the JavaDoc is neat and consistent. I like the detail you have (but I am a lots-of-detail-person, I know other people who will think you have overdone it). I can tell you have paid attention to paragraphs, and other formatting in the JavaDoc. Out of interest, when you have a in the JavaDoc, I suggest also adding an empty line to make it a paragraph in the code format too, and also have an empty line before the sections. For example, your JavaDoc: 

The way the above code works, is each time you have a value \$a\$ that is a factor of \$n\$, then there must be a value \$n / a\$ that is also an factor. Thus, for large values of \$n\$, like 1000000, you only need to iterate from 2 to 1000 (exclusive) to sum the factors. Now, because 1000000 is an exact square, the root is an actual integer too, and the last if-statement above adds in the value 1000 to the sum. In addition to the above, you can also rearrange the double-loops so that the inner loop is limited by the outer loop, and then add the pairs twice to the results. This changes the order of the results, but not the actual content.... Finally, your use of should be replaced with ...