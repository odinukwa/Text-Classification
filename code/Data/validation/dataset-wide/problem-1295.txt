What would happen if instead of 4 objects, you had 2000 objects? Do you see yourself typing ? No. Maybe you will find about the or function so you can do: 

is applied directly to rather than . The output is a matrix where each column is a -long sub-sequence of . takes advantage of R's recycling rules to compute, for each item in each sub-sequence, the signed distance to the corresponding element of . converts to absolute (unsigned) distances. summarizes each column into a single value: the total distance from for that sub-sequence. picks the minimum total distance across all candidates. 

I would only have put the input directory in its own variable so you have more direct access to it if you decide to change it later. Also, you could have chosen to and used within . 

returns a numeric so it needs to be passed through if you want to preserve an integer class for your index I used rather than the name of the function itself. This is preferred as it makes it easier to later rename your function: you will only have to change the function name in one place instead of three. Though this has no negative effect within the body of a function, I used the preferred bracing syntax where is put on the same line as the previous . Outside functions, especially when writing code at the terminal, this would otherwise throw an error. This is well explained in section 8.1.43 of the R inferno: $URL$ 

Moving on to the "did"/"done"/"done again" button is a little trickier. "I already did it" will be visible so long as the want count is 0, and "Done it again!" will be visible after the want count is 2 or greater, but "Done it!" is more complex since it only shows up on one of the state machine paths (step 3/4). It turns out it is visible when the want count is 1 and we did not click the done button first and the done count is 0 or 1. This all leads to this block of code: 

If we consider these two buttons a state machine, we see that there are six simple states (not including hover). 

Finally, you have several magic numbers. To make code maitenance easier, define variables for constants like colors, strings, and timeouts. 

Your logger configuration doesn't seem bad. It's a little verbose, but it is open to further extensions if those ever come along. I don't know your requirements, but if you're only ever going to have one file logger and optionally a console logger, you could change your list into an object like so: 

Even better, you don't even need to convert anything. You use raw_input(), which treats input as string. You can simply use input() instead to simply get a pair of numbers: 

And if you want to keep the class then isn't a great name either because you can apply different arguments to it. or would indicate performed functionality more clearly. 

You can move your code inside this main() function. It's not necessary but usually you'll have a much better performance, since Python handles better code placed inside functions that inside global space. 

game.py Oh my, that looks scary. I think it isn't really the best idea to keep a dictionary of all posible positions in order to check whether the next move is a winning one. You should rather check whether adding a new value caused to a line (row, column o diagonal) to consist of same character (or sum to -3 or 3 if you decide to represent -1 as X and 1 as Y). Try to adapt this algorithm to Python. For inspiration, here's one way to do it. Assuming you use Python list of lists instead of np.array, for row and column you don't need a loop, list comprehension is enough: 

Regardless, let's take a step back. The construction of the matrix is so simple once you have that you should just do the following all the way at the end: 

matches an input string to a pre-defined list. It allows for partial matches and handles the error in case it can't find a match. is like a smart for doing "the right thing" depending on the input. 

If you only want to work with the 3 closest stations, you can write a function that will only keep the three highest weights on each row and turn all other weights to zero: 

Notice how I improved your code regarding the use of , since you had not accounted for the possibility that your user does not have the package installed. If you want to make the package a requirement, then calling is prefered to , the blog here $URL$ offers a nice explanation. If you absolutely want your function to allow to pass "minutes", "days", etc. (though I would stay away from it), you can do: 

First off, refers to the element you clicked on, so we can simplify your code a bit my replacing your second like so: 

The path is one of these two options. In the first path, done is clicked first. In the other, want is clicked first. 

"want" / "did" "want again" / "did" (active) "want" (active) / "done" "want again" / "done" (active) "want again" (active) / "done again" "want again" / "done again" (active) 

Furthermore, It segfaults on me when I give it lines longer than 119 characters. (But this is probably system dependent). 

Variables and parameters should not be capitalized unless they represent a class. As such, the parameter in should be . 

Finally, and this is more of a personal preference, but I find that code is easier to read and follow when reading functions and not event handlers. By that I mean this: instead of calling , why not move that code to a function and call ? Here is the final result: 

5) is a questionable variable name, given it is also the name of a base function. 6) This is debatable: I would get rid of the condition since it won't hurt doing the swap even if . IMO, the simpler code is preferable to the marginal computation time gain. 7) A nit: know the difference between (numeric) and (integer). Here you are using when you mean to use , which causes unnecessary conversions from integer to numeric (though the operator brings you back to integers by doing the opposite conversion). 

some assumption checking with the use of variable names that are closer to the problem write-up (, , ) or more descriptive, e.g., the use of for finding if a number is divisible by or vectorization (notice how one of your loops is gone), which should make your code faster The use of instead of is more robust in the case when is zero. 

After you have these four list of three positions, you can translate '0' and 'X' to numbers and sum them: 

Also in line you have misleading variable names, since and aren't actually nodes, but their values. Was class a requirement? Because it isn't easy to use: 

This complicated logic inside should be rewritten using temporary variables. As flake8 reports, if there's more than 80 characters in a line, you need to rewrite it. 

These inherently long lines are especially bad. If you take a look at flask_restful.reqparse you'll discover is marked as obsolete and it will be removed in the future. I'd advise to use Cerberus library to authorize, coerce and parse passed JSON data. There's no reason to make global. You should probably move it to class, since it's the only one using it, and capitalize it, since it's mean to be used as contanst: 

Note that I was not able to test because of some issues I had with your data. So it may need some tweaks. 

A matrix for the values at the local stations, where one dimension corresponds to the stations, the other to the time: 

With thousands of files though, it makes more sense to process the files one by one and only keep the useful information before moving from one file to the next. It also makes sense to write a function to process each file. It could be: 

Disclaimer: I am not 100% confident that your nor my definitions of and are correct, given what you are trying to achieve. Try this for example: 

This way, each iteration will only have to search through $M = 2154$ rows instead of the 100k. But it is not fixing everything and I prefer rewriting your code with your more general goal in mind, where 

Once we have all of that, we can rip out the entirety of the click functions, replacing them a simple function (containing the previous code blocks). Since we are now concerned about clicking the done button first, a little code is needed to set that variable. One final note: the object was not needed, so I removed it and renamed the / variables. Working Fiddle: $URL$ 

It's not so horrible. You managed to cache your jQuery selectors, which is more than a lot of people can say. Good job there. 

Brief aside: If this script is only to list the instances for you, you might find it useful to check out the and the tool: 

To guard agains the previously mentioned bug, we need to check if not null. I'm including only the function. 

But having a list is just fine. Not knowing anything else about your requirements, I would leave it the way it is. The thing that really sticks out to me in your code is the use of a callback as a parameter in . Since this function is not asyncronous, I would ditch the callback and either log the error directly to the console or just throw the error and let it break the build. If you really want to provide a mechanism for reporting configuration errors to the user, then rename "callback" to something akin to "errorHandler". The use of the name "callback" usually signifies a function that will be executed once and only once, will be executed when the function has completed, and will not return a completed value but instead pass the value as an argument to the function. Also, I find it surprising that you do not log the time to the output of the file or console logger. Not a big deal of cource, it just stuck out. 

So this converts the lists into data.frames and rbinds everything together. You do not really need for that. You can first turn the lists into data.frames by doing . And you can do the binding using , so: 

Then, it is also a good idea to write a separate function for each of the fixes you have. It makes your code easier to test and reuse. Also, when using appropriate function names, it makes your code self-explanatory and can replace all the comments: 

Supposedly (from our comments), this would show that most of the computation time is spent creating the annotators. Since these are independent of the sole input of your function, you could save a lot of time by defining them outside your function and passing them as arguments: 

Apparently, already has a feature for padding data to a specific length, see for example $URL$ So you can do: