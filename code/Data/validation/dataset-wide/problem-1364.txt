I'm mostly with Heslacher's solution but in don't let to any of the collections to be null and i'm preparing to have null values in the collections. To spare some time i don't bother to create arrays from the input sources too. I also renamed the extensions method to EquivalentWith because SetEqual means a different thing. Tests I have used the provided unit test as base to write my ones so here are they: 

Helpful thing can be to create a static method to get all type, and another one to parse the type from a value. Whith these things a $participant->getRight() could return an instance of Mask so the switch can be removed. 

Question #1 No. You do not need to ref the connection object in your methods' parameters - think object oriented way not class oriented. Question #2 The only way is to make this as a non static class. Avoid always statics when the current problem contains some kind of state management like a MySQL connection. Question #3 No you don't but you should implement the IDisposable interface and apply the correct disposable pattern. 

Constructor injection Use constructor injection becouse this is the best way to write well readable and testable code. If you don't need a Doctrine instance in your class then don't use it. 

There is a shortcut you can take to find the missing number after you've found the duplicated number. You may have come across this fact before, where the sum of the numbers 1 to is . We can leverage this along with the duplicated number to find the missing number. If you add up every number in your list and subtract that from what the expected sum would be from 1 to , most of the terms will cancel, leaving you with . You can visualize that with an example: 

Here you throw a string. You can throw any value, but it's more helpful for debugging purposes if you throw an object. Just pass this string into the constructor to make your own error message. 

Maybe use some array methods like ? This will add up all the elements, starting with an initial sum of 0 (the second argument to ), then the sum is divided by the array's length to compute the mean. 

This will swap s when passed addresses to s, a.k.a. s. Now your function will swap the members in the s correctly. 

You initialize and , then you reinitialize in the outer for loop, then do nothing with in the inner one. You don't need to write an initialization step in the for loop if you don't want to. 

Now, I would like to localize the enum, and so far my only solution has been to remove the description from the constructor, and check Locale and switch based on number of days: 

I was hoping there would be a way to do this using a string-array in an XML file, but I can't seem to find anything like that. Is this okay practice? Is there a better way? 

And, now that you have that, I personally like to build my content values inside the object itself so I know where to find it: 

I created the enum like this, because I wanted to know the description, and (roughly) number of days: 

I have looked this over several times and have been working on it for quite a while, but cannot find any places where this is bottle necking in a way that I can fix. I am just hoping a second set of eyes to review this will see performance issues that I don't. 

If you are using a ContentProvider, you can easily load the CursorAdapter and watch for any changes to the Game URI and it will update automatically if you use a CursorLoader. Will edit again if that is an option, otherwise simply get a cursor of all of your Game values and call on the adapter: 

You pass an immediately invoked function expression (IIFE) to the push method, but this is totally unnecessary. You can execute the code above the push method and make things considerably more readable. Also, you redeclare the variable inside this IIFE and use it for something else, which is pretty confusing. It'd be better to use a different variable name. Time Complexity Your current algorithm is O(n2) because of the nested for loops. A more efficient algorithm would be to step through both arrays at the same time, adding the next smallest element to the merged array. This approach would be O(n), so an improvement! Changes Altogether, this is how I would restructure your existing code: 

In that example, is 7, the duplicated number is 1, and the missing number is 6. So you get the formula . We can solve for by adding to both sides, leaving us with ! Let's do that. First, you can calculate the expected sum from that formula, . In your loop searching for the duplicate, you will need to keep a running total (and don't break early). After you find the sum of your list and identify the duplicate number, you can calculate the missing number using the formula we talked about in the above example, . Also, you don't need to record the frequency as an integer, you can just keep a list of booleans for numbers already seen. I've also taken the liberty of cleaning up the indentation issues and renaming some of the variables for the purpose of readability. Here is the solution: 

The edits are merely suggestions, they may or may not be considered best practice but they are things I do to stay organized and have worked really well for me so far. EDIT 2 For displaying the information in the ListView, you can use a CursorAdapter. Here is a sample of what it could look like for you: 

I am writing a CAN bus logger application and need to format messages as quick as possible in order to prevent buffer overflows on our device. In some cases I am quick enough, but under heavy loads it is still pretty slow. I believe the bulk of the problem happens in my formatting block (I am using TPL to separate the tasks as much as possible). Here is my consumer block which takes a blocking collection, formats those messages, and passes them into a new blocking collection where they are later printed to a file: 

Then you can access it from your activity. What I would do is create the datasource in onCreate, open it in onResume, and close it in onPause. All of this explained in this great tutorial that I reference a lot. Keeping a single reference to the OpenHelper like this (it is known as a singleton) is helpful for preventing memory leaks. Something brief that I touched on in a blog post I wrote. EDIT Some more I might add is to create a contract class to keep track of your database schema, like this: 

These are already available in your scope, so you do not need to reassign them to a local variable with the same name. 

You might appreciate taking advantage of some ES6 features. You're using an object literal like a map, so why not use a real ? Speaking of ES6, since you're a beginner, you would benefit from taking the time to learn it now and save yourself the headache later. As others have noted, you can accomplish finding the mode in a single for loop. 

It's easy to see that there's a lot of code duplication going on here. What might not be easy to see is a nice way of condensing it. One way to start is to see the similarities and where the lines of code differ. It appears you want to perform an action on each of the four directly neighboring cells and something separate for the center cell. A nested for loop could help tremendously. The only thing to consider here is ignoring the diagonal neighbors. The other piece of duplication shows up where you do one set of actions when the argument is one value, and an almost identical set of actions when the argument is the other value. The only place the repeated lines of code differ is at a single hard-coded value. If you just set a variable to be the correct value for either case, you don't have to repeat yourself. Something you may have not considered is trying to index the array past the boundaries. You should avoid it so you don't encounter errors. Simply add a check for this before indexing the array. I've split this check into a separate function because the boolean expression is quite lengthy on its own, let alone compounded with other boolean expressions. Another tip is to handle all the cases. If you use a , use a at the end. If you have an , use an at the end. Even if you just want to ignore the case that didn't match the other cases you do handle, you can just write a comment, log a message, or even throw an error.