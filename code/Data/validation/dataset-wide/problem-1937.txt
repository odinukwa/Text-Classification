This sounds like a process problem and not just the typical behaviour of individual recruiters. The good ones never waste their time calling people with no interest. There are plenty out there who are. Call their office and ask for someone higher up than a recruiter (manager, owner, partner, etc.). They obviously have a problem of not updating their databases. There needs to be some mechanism in their operations to prevent calling people who are not interested to the point you have to take such drastic measures. It sounds like they do a terrible job at this if they make any effort at all. They're going to ask what recruiter called you; don't tell them. Here's another chance to point out the flaw in their systesm. Why can't they lookup who in their company called you? The goal isn't to punish the individual recruiters, but a company that has implemented poor policies and procedures. I hate it when customer service people don't have the necessary information to do their jobs correctly and not waste my time. 

This is what Technical Debt is all about. You need to make sure your leader understands it to the extent that it affects you, and assesses the risks accordingly. It's sad your team has coding standards and a review process, but it's nearly a waste of time since your boss doesn't follow them either. As a result, neither does John. Just let the leader know that if any of John's code has to be debugged or changed for new features, it is going to take much longer to correct. All code rots, but this is going to rot at a faster pace. If your boss wants this to be a "chance we'll have to take" then there's nothing you can do about it. Don't be surprised if you have to mention this again as the reason for the delay in a client's request. Your boss will probably want to ignore it and fight back. Then you'll be looking for a gracious way to say, "I told you so." 

When they hired you they probably checked some examples of your previous projects. You are not supposed to be an advocate of a few specific technologies. You are suppose to be an expert that can bring its own background to the table and contribute to the innovation of your companies projects. Tech-culture diversity is enriching. From this point of view do not argue in favor of a specific technique (let's say layout) just because its your familiar ground. You are in UX so you know the deal: "First know your User. And than Design for it." Use metrics, usability examples, compare with the competition, etc. You did not oversold yourself, you are just another point of view to the global expertise of your team. Sometimes your solution is best, other times it won't. Most of the times the solution is developed from all insights and reaches a "mature" state. My advice is: do not focus on your differences (you did not become a worst designer overnight, neither you were fooling yourself about your expertise), focus on the final objectives. You have a target user so design for it. 

Even though you have accepted a counter-offer from your current employer, you should think of it as a third option. Just tell the other company that during the acceptance process, you were offered a new opportunity which you weren't even looking for and have chosen to go in that direction. Certainly, they can understand someone wanting a better situation. Telling them you accepted a counter-offer from your current employer may make them think you used them just to get a raise or as a way to get them to counter-offer. 

In the context of an intern or someone at least at the beginning of their career, giving feedback really helps. They may need to consider a different profession or working a little harder at the one they're currently pursuing. I don't think you should explain every answer, especially once you discover they are over their head. One or two at the most. You should have discussed why this person thought they could do the job. If they knew they couldn't do it, but just decided to take a wild shot at getting the job, it's important they understand that they wasted your time. This is not a good career move at all. If they don't see how wrong they were, I wouldn't blame if you chose not to ever hire them for any job regardless of their qualifications. 

As you can probably guess putting A with B can lead to some very problematic situations. Ideally you would improve your team situation by also improving awareness and understanding towards different personalities. Exactly how deliberate is the strictness of the boss? And how deliberate is the tardiness of the employer? My recommendation, if possible, is for everyone to get together and have a sincere discussion about the subject. Outline guidelines based on pragmatic facts. Above all avoid confrontation. Some important points would be: 1) Can you remember a solution that actually avoids this issue? (perhaps doing the meeting just after lunch or any other time you know most, if not everyone, can go directly to the meeting room) 2) Is it a possibility to discuss team dynamics with your boss? Does it seem to you that he/she is a person open to it? (are there good and bad times to do it?) 

It is far fetched, since it deals directly with a very well know disorder (OCD in managing, which by no means I'm implying your boss has). But a measure of strictness and inflexibility can lead to an uncomfortable environment. An employee constantly dealing with negative feelings will, generally speaking, be less productive [1][2]. This, off course, lead us to question how reasonable it is to expect everyone to be at the same place, at exactly the same time. Well the same way you can have excessively detail oriented people, you also have the opposite: 

This is an attempt to answer the question by reverse engineering some of the tips and tricks to handle the day-long interview. Knowing how to perform well, gives some insight into what hiring companies are looking for and the reasons behind using these tips (See links below). Technical Skill Are Not Enough We've all heard the story about the person who was technically qualified, but just didn't fit in with the group. What better way then to have as many people as possible meet you for an extended period of time in different settings? Interrogation Techniques Different people are going to ask the same questions. They may compare notes to see if your answers are consistent. This can show you really know what you're talking about along with being well-prepared to give answers. It's like the cops that keep asking the suspect to tell their story over and over to catch you in a lie. "Wait, I thought you were the lead on that project?" Endurance - Put in a full day's work Get a good night's sleep because you're going to need it. Part of this is seeing if you're just faking it for an hour or two. Can you stay sharp? Will you get frustrated, bored and just give up? Is the team starting to get on your nerves? We'd like to know sooner rather than later. Mealtime There's usually a meal involved in the all day interview and is another stage for you to perform on to show you know how to act. If given the opportunity, are you going to pass-out from all the free drinks? Smearing food all over your face is probably going to be frowned upon. Don't let your guard down. Realize you're still interviewing. You're also interviewing them I know many feel like the all-day interview is a waste of their time, but you should want to meet as many people you're going to be working with as possible. Some of them may get on your nerves. Wouldn't it be nice to know your potential boss acts like a jerk to the waitstaff at the restaurant? The guy who chews with his mouth open will be in the cube right next to you and sounds even worse when he cracks that bag of chips open. Likability There are many factors on qualifying someone to hire, but the whole thing gets summed up into one thing, do they like you? Technical skills are a part of this, don't get me wrong. Everyone wants to work with qualified people, but all too often, that just gets you past the first one or two interviews. They don't want to know if you can code and eat at the same time - well not everyone. Links: