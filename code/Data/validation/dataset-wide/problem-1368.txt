Many of these constraints can be avoided or reduced if you store array data in a 2-dimensional structure. Each 'row' is a portion of the overall span. If each row has the same, fixed size, then the translation from the logical linear system, the matrix system, is: 

and as a consequence, "clients" can call the method and then potentially do other work while the state is changing, and get the possible error condition later... like: 

can be reduced to a single \$O(1)\$ operation using the math behind a Arithmetic Progression / sum-of-sequence This boils down to the fact that the sum of a sequence: $$ 1k + 2k + ... + (n-1)k + nk = \tfrac{n(1k + nk)}{2}. $$ The equation: $$ \tfrac{n(1k + nk)}{2} $$ can be rewritten as: $$ \tfrac{kn(1 + n)}{2} $$ Now, either \$n\$ or \$(1 + n)\$ is even, and any even number times any other even number, is even, so you can always safely halve it. Thus, the function can be reduced to: 

You can easily test your real application/system with a simple (non-web-based) test factory your code is in distinct chunks, application layer, and data layer, and you don't need to change the application unless there are functionality changes.... 

get a collection of all the actual values in the set. This requires a single scan of the entire input array. find the size of the left-most portion of the array that contains the entire set. find the size of the right-most portion that also contains the entire set. if the left and right spans do not overlap, then there is at least one solution. The actual number of solutions is the number of members between the left and right spans (plus 1). 

Though, having done all this, I am pretty sure there's a mathematical way to do the same process much faster still.... I'm just not sure what it is. 

Your stream is infinite, and will just keep going... even when the item is 1. So you have to use a side-effect mechanism with the hack of a 'anyMatch()' short-circuit terminal condition that you tack on at the end. You also use the Atomic Long as a crutch, to ignore the first value .... and, since it starts at 0, it will always be true. That atomic, is really hackish. The right solution for this problem using streams would be to create a stream that is a valid Collatz sequence.... Consider a function: 

you cannot start processing the first data until all the data is sorted, you have a latency problem. you cannot process data in parallel, you have a scalability problem. 

h.j.k already pointed out that the last boolean statement can often be implemented as a single , but even that is something that I feel is optional since the pattern of conditions is often more important to keep consistent, than the last condition being "small". Consistent conditions allow for easier maintenance of the code too (adding a condition is a simple add, not a modification of an existing short return). Putting these suggestions together I would happily "Pass" the following code in a review: 

To me, this means that, for this type of CPU-intensive work, the overhead of the streams is still significant. It is essentially 5 times faster than your code, and 3 times faster than the fastest Streams alternative. This problem is a tiny problem though... the computations are really small, and the method overhead of the streams will be the bulk of the runtime. I don't know where the performance/usability curve will cross from being 'wasteful' to 'useful', but, it is not useful for this problem. Also, because I am new to this, the standard Java is more readable ;-) The Framework I took the liberty of playing with your framework. This is what it looks like now in my environment: Problem.java 

sets to be the same as (because, for a 1-sized queue is a pointer to ). In the other you set to be null when there's nothing left, but this does not make a difference, really (other than Garbage Collection) because the function checks the empty queue using and not static inner class Your class does not have any need for a back-reference to the . It should be a static inner class . To do that, though, you need to make it generic too. Use a letter other than to represent the generic class... 

use instead of which creates an unnecessary String value. create the sb instance outside the loop, and reuse it, and inside the loop to clear it. 

That would be a method that prompts the user for a car type, and returns the user's selection. The code inside that is what you have written above. There are a few things you should consider though: 

Have multiple threads putting values, and taking values. Each value put on to the queue is unique (it is the ) The if all the values are removed from the queue, then added up, the sum should be predictable, and is a good test to ensure that every value added to the queue is also removed from it. Any error should be immediately obvious if the sum is wrong. Run the same test for multiple implementations of BlockingQueue, at multiple different combinations of Producers and Consumers. 

Since you are using a stored procedure, it is not much of a stretch to extend that to be a trigger. Triggers are the natural tool to use for this type of problem, and are designed to have two 'virtual' copies of the data, one copy is the value before the change, the other copy is the value after the change. In your case, you would have a trigger for insert (create), delete, and update. Read up on triggers here: DML Triggers and the syntax here: CREATE TRIGGER (Transact-SQL) In the trigger, you would scan the and virtual tables for the data that is changing, and use that to maintain the audit logs in your logging table. Note that thoese virtual tables contain only the data affected, so scanning them is fast. For more information on those tables, see The Inserted/Deleted table documentation Using the above mechanism, you can track the changes as they happen. Each instance will be relatively quick, though the work will happen inside the same transaction as the inserts to the main table. Using a stored procedure like you have, is a good first step, but you should transfer the relevant logic in to the trigger instead. 

The problem with your while loop is that you are using instead of .... you are assigning the values to the variable inside the loop, and it is successful, thus accepts all characters...... 

Now, this is an encapsulated object. To extend this object, so that interested parties can 'listen' for rotation events, you can have listeners registered with the class, with 'callbacks' that get fired when the rotation changes.... This is called the Observer Pattern. You should take a moment and read through all the common patterns, and you will discover a number of tools you can use for common problems. 

Using OPENQUERY automatically excludes any pretext of 'clean and straightforward'. They are incompatible. So, as soon as you use OPENQUERY you can assume that you have already got ugly code (with a fat ass). The trick is to use makeup - to cover up the blemishes. In this case, you can filter the records, but you need to be creative.... you have: 

In your code you have declared a variable which is a . This is an indication that you have a mismatch between the object and the implementation. The fact that you call it 'dice' implies you want something that is a Dice.... not a Random. A should be able to "encapsulate" itself. I would suggest a clean Java object oriented design would have a Dice class, something like: 

There are two parts to this problem as well. The first part is getting the user input, and the second is identifying and processing the sequences. I will assume that you can process the user input adequately, and put it in an array of integer . You use an which is not, in my opinion, a great container for doing arithmetic on... This problem can be solved by managing three variables, and keeping a and total. First you need to ensure you have at least 2 items in your values array, and, assuming you do, you initialize your three variables: 

Having a loop to check each version of the URL could become a problem if there end up being a lot of URL's. There many be a better way to do it using a hash, or some other means of persisting data, and retrieving the most recently used version. Still, even with your loop code, there's a way to do it in a simpler fashion, using a helper method to check for a duplicate URL is a start..... 

Update: additionally, your method should be so that no subclasses can change the behaviour of (same is true for ). If the method is not final, then a subclass could possibly override the method, and do it in a way which make the / mutable. Note, that the constructor for , in this instance, takes a value. This leads on to a suggestion that the immutable class should store a instead of a . The is immutable anyway, if final. 

There are multiple issues I can see with your implementation. Always validate All the methods require the calling of the as a separate operation. I would recommend adding the is_valid_triangle() as part of all the triangle-type checks (even the call). This will prevent the methods returning true for failing conditions... for example, the following are all nonsensical, but return true nonetheless: 

Your code is good. The CXF code has a bug, and is missing leading-zero values when the byte value is less than 16. Your code can be improved, though. It's doing a lot more work than it needs to do get the characters right. Converting the value to a "longer" string and then taking the substring is a long-winded way of getting the padding right. Consider a lookup-table for the task, and then use that as a mechanism for fast string building using a char array. I have had a lot of success with this method: 

So, this function will print the command, and then will run it, and exit the script if the command fails. Now, instead of structures like: 

Your implementation is not quite correct. It is subtle, but what you have is a type of bubble sort in that you do not insert the new value, rather you 'slide' the value in to place. An insertion sort can be thought of as a 'hole'. You shift all the 'bigger' values to the right by one space, and create a hole at the point where the value should be inserted. Then you insert the value in to the hole. There should not be a concept of a 'swap' in an insertion sort. You start at the first unsorted value, and then if the previous values are smaller, you move them up one, until you have the space at the right spot. Then you put the value there. The example code makes this 'obvious' (but not really), in that it always compares against and not . It also has only a single 'assignment' to the array for each time in the loop. Your swap routine does two assignments on each loop. So, No, your implementation of an insertion sort is not quite correct. It is a correct sort, but not a 'text-book' insertion sort since it slides, rather than inserts the value. 

This effectively copies the STDIN to a file, copies part to the file, and copies another part back. This can be replaced with: 

This is an interesting problem. I think your solution will be possible and much, much faster if you use memoization. This is the process where you remember your previous calculations and reuse them in your current calculations. So, for example, suppose you process your array row-by-row.... if your input 2D array is: 

The algorithm you use is OK, start at the end, and work backwards, add 'stubs' to a List, and combine them as needed as you come back up the stack. I don't like the sheer number of ArrayLists your create. Also, you are doing a lot of String concatenation. Your algorithm would be a lot better if you: 

Using a distinct set of badge names from the Badges table required multiple scans of the data. Processing that data with a set of in statements for each badge type was uglier than needed. The multiple stages of case statements to process the data was somewhat overly complicated. The ugly transform (again using case statements), to get the data from row-based to column based could be done better. 

This should help you to avoid walking up the stack of objects to find the relative position. See it working here: 

I forked your query here, and this is the SQL (I have tried to keep the capitalization and other style conventions consistent with your code): 

Line Trimming version I have written it again using a system that does the line sizing too. The following code is different. It accumulates partial lines and the outputs them when they are full. It also needs to print the control line first because that cannot be line-trimmed. 

With a little bit of math, you can significantly reduce the number of iterations by iterating to the square-root of the value: 

There is a very convenient way of handling files in python: the with statement. It handles closing automatically so you do not have to worry about it. It is very simple to use, look at the following example: 

That would be much easier to process. To do that, you will want to measure the actual times, not the responses... and you will pick up slow-to-respond servers too (perhaps a big garbage collection, over-congested network handler, or something). So, create a function that has a response, which should be an Object: 

In general, the code is well presented, easy to read, but, it is hard to spot the 'Horner's Scheme' in the code. When implementing a specific algorithm in code, it is useful to clearly comment where the elements of the algorithm are being used. In this case, the depth-first recursion is processing the most significant digits first, and as a result, it computes the high-order values in the Horner's scheme first. Making that value available to be added to the next value in the system. Note that this makes tail-recursion optimization impossible, but it does simplify the code. So, I had to look up how Horner's scheme would help your code, and I had to figure out how your code is helped by it. This is not work that should be hard. You should make that easy for the person reading the code. I would expect something like: