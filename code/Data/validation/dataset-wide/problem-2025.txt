This is my pan-cultural solution since I'm guessing this isn't happening in Chicago and I suspect there are some social dynamics that are different than what I'm used to: There is a problem to be solved. You believe it should be solved one way. Some other equal-ranking programmer believes it should be solved another way. Make a compelling argument for how you want it solved and let him make his argument. Let the other devs make the decision which approach is better since the two of you can't seem to actually compromise or agree on anything. If there's no boss, the team decides. That's not you against him. That's you or him convincing the team. But all the stuff about the way you handle things and the way he's an elitist snob... Maybe you're right, but who cares about that? Stay focused on the problem, not the guy with the dumb idea about how to solve it or not solve it. And make sure you put the mirror on yourself sometimes. It sounds like you're doing a lot of criticizing of equals but make no mention of how well you respond to it when it comes from other team members. Was it not worth mentioning? Do they not criticize ever? Or are you perfect? 

A very popular choice in Europe is the Europass, an initiative of the European Commission's Directorate-General for Education and Culture. Other than a standard CV, the Europass offers tools for: 

If your current status is "waiting for Joe to finish what he's working on", then Joe (and everyone else on the team) should know about it. It's your manager's / scrum master's responsibility to either help Joe finish a bit faster, or find you something else to do while you wait. That's what stand up meetings are all about, keeping the team informed of every member's current status. 

How do you avoid discussing anything non work related at work? The interest around politics may have peaked after the debate in the US, but in Greece politics (and more specifically the economy) is what everyone is interested in discussing for at least the past couple of years. You'd imagine that it would be far more difficult for us to avoid such discussions, but it really isn't. Just don't talk about politics yourself, and politely excuse yourself from the company when someone else starts the discussion. Coincidentally I've worked in two environments which can be considered polar opposites when it comes to discussing politics, one was a town hall (where politics were actually our work) and the other was the Army (where discussing politics is strictly forbidden). Couple of years after I left my position at the town hall, that involved regular meetings with elected officials, my co-workers there were surprised to find out that (at the time) I was a supporter of a minor opposition party. I had spend nearly seven years in an environment where politics were all there was to talk about without disclosing my own affiliations. I just never talked about it ;) Every workplace is different, but I don't think that in a typical workplace there's much room or time for non work related discussions. Certainly we all take a break once in a while, and we all might get caught in an uncomfortable discussion around the water cooler, but those discussions tend to be short (how long can your break really be?) and easy to evade. My standard excuse when things start getting uncomfortable, or I'm simply not interested in the discussion, is that... I have to get back to work. Simple, isn't it? 

But is your focus on Java, is my first question? There's a bajillion Java devs out there running around. Enough for people to believe they're going to find somebody in the piles of resumes on their desks that has Java experience going back to its origin and web experience back to its origin. And they will do silly things like cull resumes with single-property filtering schemes like StanfordOrStanfordEquivalent === true or "asked for a coffee when I offered one" But it sounds like you're getting past that and into the interviews you need to be in. Assuming you don't have a giant purple mohawk (That would actually be bonus points in my book), or you're not wearing a silly hat with a propeller on it (major bonus points) and maybe it's not overemphasis on getting those Java $s, it sounds like you're face-planting on something at the interviews so I'll ask the following: edit: good point. I'll number these. 

First of all, how likely is it that your efforts will lead to solving the problem. If the organization is: 

I strongly dislike receiving emails from colleagues that aren't strictly about our work, however interesting or useful they might be, and I would go absolutely mental if someone interrupted me by sending me a link via IM. That might just be me, but the lack of response from your colleagues probably means that they aren't exactly enthused about it as well. On several teams I've worked with I was (sometimes officially, others unofficially) the researcher of the team, and part of my responsibilities was to dig up anything new and cool we could use in our codebase. From my experience, what works best is a casual, in company blog. Every time you find something you'd like to share with the rest of the team, write a somewhat comprehensive article about it, don't just post a list of links without context. It doesn't have to explain the concepts / practices / technologies / tools in depth, but its essential that you point out clearly how whatever you are talking about applies to what you or your team works on at the moment. You could start with the rewrite, write a series of small and casual but comprehensive articles on what new things you introduced to the codebase, what decisions you made and why, discuss challenging issues you faced and how you overcame them. Show real examples from your codebase, point to actual tickets in your issue tracker. In short: context. At the end of the day your colleagues may still ignore you. But this time it won't be because you're spamming them, and you'll have excellent documentation of your thought process and progress of your skills. 

Best Case Scenario: They hired you to replace these guys but forgot to tell everyone. Worst Case Scenario: Nobody at this company communicates well and they hired you by accident. Assuming the worst in this case, and doing your damnedest to make sure it's a happy accident for them strikes me as the best way to go since it works for both scenarios and it sounds like you really wanted this job. In any job, the best thing you can do when nobody's steering the boat is to take the wheel and communicate to relevant parties that you're finding stuff to do yourself (and what that stuff is of course) until somebody says otherwise, IMO. If I were you, I'd learn the crap out of what these outsourced guys are doing to see why somebody who doesn't communicate well might want them replaced (it might be more than a cost issue). That way you'd be on that ball before it gets to you. 

Additional, following comments: Well, two things. One, it wasn't really clear from your question that you're mostly getting stopped at the resume at first which is an odd detail to miss. You might be having trouble on the communication front on the what-the-other-party-needs-to-know front, which isn't uncommon at all among tech folks including myself occasionally. The other thing that strikes me in your replies is that you don't seem to have any opinion on what you're great at or natural inclination to be working with a given technology suite at this time. Don't get me wrong, I think it's great for people to branch out and build expertise in multiple fields. I also think there are plenty of generalists out there who enjoy it all, but Java, PHP, and JS are like three different planets. Most of the guys in JS chat would rather get root canals than get stuck writing Java for a week and I don't doubt there's a lot of mutual sentiment from the other direction. I wonder if maybe you've got an answer for every question but maybe that some of those answers might be a touch dusty owing to being spread a bit thin or not having the kind of interest in at least one of them that would have you geeking out a bit on the latest developments in your free time. But I'm really just speculating with what I've got and mean no offense. I could easily be wrong on both counts. Another possibility to consider is that you're picking bad targets. Are you just going for larger household-name companies. Sometimes it's hard to get to somebody in those scenarios that actually knows enough to properly evaluate you before finding some silly reason to slam the gate shut. I would try thinking about the kinds of places you apply and ask yourself if maybe you should try new environments where you're not as likely to get overlooked over trivial details you don't control. And what's really motivating you ultimately in terms of interesting work and leadership roles? If it's strictly more practical concerns, rather than the sorts of "technology/leading people in technology is dreamy" stuff they'd love to hear everybody gush about whether they feel the same way themselves, it may be a little more obvious than you realize. On the honesty thing, it can only be bad if you don't realize you're giving the wrong answers with confidence. Check your answers when you get home from those interviews. Make sure it's more recent stuff you're checking against. 

I'm guessing that's part of a casual conversation. Well, it's summertime, and a security audit is a long and painful process, so I completely understand where your colleague is coming from. That said, it's a necessary process, and probably an urgent one, since you've already identified some issues, and the developer did everything but outright admit that there are further issues. If you doing your job creates friction between the two of you, well, then it's probably time for management to intervene. However, I strongly believe that a team fails as a team, and really don't appreciate the blame game. Before you do anything you really need to be absolutely certain that you aren't overreacting over something that was more of a casual and possibly humorous comment than an actual request for you to postpone / dismiss the security tests. 

A few of my colleagues have a tendency of sending a variety of off topic emails, ranging from the usual "funny" stuff to serious, but still not work related stuff. I really don't like that, my inbox is extremely busy as it is, other than the usual work related emails I get a ton of automated emails, from our PM software, our build & deploy services and a couple other bots. On top of that, I'm working remotely, and email is my main method of communication with the company. I could be deleting all the crap as they come, but that's not really a solution if they just keep coming. A messy inbox leads to messy search results, every time I don't delete a "funny" email, it just pops up in a search result six months later. Email search being as inefficient as it is, this becomes very tiresome after a while. How can I, once and for all, put an end to the madness? Most of my colleagues are IT professionals, I feel that they should be very accustomed to email culture, and I really don't understand why any of them would feel the need to share the latest cute kitty picture they fished out of Reddit with the whole IT department, or why they don't just send it to my personal email. Working remotely also means that I'm at a disadvantage when it comes to one on one discussions. Small clarification: "co-worker" includes management, up to the top of the hierarchy. Not the main culprits, but it's not unreasonable to think that they enable the behaviour by setting a bad example (once in a while). 

I prefer the uncomplicated version. Get offers from other companies that you'd be happy working for. See if your current company is willing to compete with those offers. That takes the personal/value judgment factor right out of it and makes everything strictly business and you have a plan B if they don't want to pay more. 

Okay, first of all, how much the stated "years of experience" matters is largely about market. One of the more amusing things about being a client side web developer for instance is seeing ads requesting more years experience in a given technology than said technology has actually existed. Naturally, they tend to bend on years of experience since it culls 100% of their resumes. As somebody else wisely pointed out, you're screwed on HR automation software. When people specifically spell out requirements like this AND want you to rewrite a resume using a series of forms on their site, don't bother. In fact, I stopped touching these period, regardless of how well I matched the criteria because I've never, not once, received interest from wasting time on one of those and I realized the time was better spent hunting down more leads failing attempts at actually contacting somebody about the position directly. Another instance where it's going to matter a lot more is when you have a lot of competition. Take Java devs. Lots of jobs, but also lots and lots of Java devs. That makes phase 1 of the hirer's search the grand culling of resumes, usually based on some arbitrary stat like years of experience just to trim the piles to something manageable. In cases like these you might indeed be a 2-year guy who deserves to rub elbows with five year devs, but you're likely SOL barring opportunities where you actually know people doing the hiring and they have a rough idea of your skill. So yes, in this case, the best thing you can do is make contacts within your local developer community to head off phase 1 at the pass. Another thing to consider is your general local community culture in regards to jr. level employment in general. I realized I was going to have to one day leave my hometown where I grew up in upstate NY when, while searching for a summer job, I saw the ad: "Asphalt (pavement?) rakers wanted - five years minimum experience" Now, I must confess that I do not know precisely what the craft of asphalt and/or pavement (long enough ago that I can't remember which it was) raking entails but I'm highly dubious on the matter of it taking 5 full-time years of raking anything that isn't subatomic to get the gist of it. Solution: Examine the sorts of ads you see for similar positions in other parts of the country and be prepared to GTFO. And the one general thing that can't hurt regardless of industry is to do some relevant, useful open source work and make it available. If that's not possible, blog about your craft. Do whatever you can to establish some street cred that helps you make the argument that you are better than your average 2-your dev in your industry. But again, context is everything. If it's all closed proprietary tech, you have a ton of competition and you're unlikely to gain a following talking/debating about the right/wrong ways to do things, you may just have to settle for paying your dues. Or choose to pursue a skill-transferable technology where these obstacles are easier to overcome or nonexistent. Edit - I didn't really address this aspect of your question: "Are skills directly proportional to years of experience?" Some things are about raw talent and problem solving ability. Others are simply about having encountered the same problem enough times to know the exact right thing to do that most other people in your shoes with similar levels of experience would do. It's subtle, but yes, experience can/does matter in a lot of cases. Calling yourself mid rather than Jr. level at 2 years doesn't strike me as particularly cocky, however, and raw talent/problem-solving ability can definitely be a gap closer depending on what responsibilities need to be met.