You check whether the index of the tab equals the position. If this is the case, use the selected icon, otherwise use the unselected one: 

First of all, cramming that all into a single method is not a good idea. Refactor the different actions into other methods (ideally with basically the same signature) and use a over the action: 

Regarding the method: you could at least eliminate the repeated call to s.length() for every loop operation: 

The User class Quite straightforward. However, the use of try-with-resources blocks is inconsistent. For some objects try-with-resources is used, for others the "old" construct using external null init and a finally block. Also note, that you can create multiple closable resources in a single try clause, e.g. 

You failed to solve the "try to do this in one pass" part, as you iterate through the list once to find the total size and a second time to find the nth element from the start. The algorithmic idea is, to use two pointers into the list: 

First look, I'd change the if-chain in getNeighborNodes by defining directions, their offsets, and taking the same actions in a loop for all directions. Along the lines of: 

Basically, the only difference is, that one time you use the controller for something and the other time you don't. Not knowing what the controller does with the connection data makes it a bit difficult, but if it is equivalent to call controller.getConnectionData(connectionData); at the end of the process, I'd refactor like this: 

Additionally, I'd try to get rid of this mega-switch statement. Ideas depend a bit on your concrete data types, but I could imagine to create an enum with constants for your comparisons, which can generically operate on comparable types or the like. Then you could use reflection / bean introspection to read the requested value and compare generically. Something like: 

Alas, what you would like to do is not possible. You could indeed play around with interceptors in a CDI container or with an AOP framework, and basically change the exception type at runtime. BUT there's one thing you will never get rid of: the static excption typing in the method declaration. Thus, even if you have 

You mix business logic with UI code. Normally, you'd go for separation of concerns and move the conversion functions into a separate class which is used by the UI, but does not belong to the UI. Running a separate thread: how long does the conversion take? 1 ms? 2? I really doubt that the overhead of thread-creation is necessary here. (Though it may indeed serve as an excercise!) Binary to ascii validation: if the amount of bits does not match, you overwrite the user input? Thus, if I, the user, make a little mistake, type 319 bits instead of 320, you actually force me to start over? /me pissed user :-) 

Harness the full power: Why stop at a single arg constructor and use a switch over the strings? Simply add a second arg, and set a final String for the name along with the number: 

Then, the actual call of the logic is simple and clean, no matter whether you use a loop or a stream: 

The question for a "better" solution is bound to be quite opinion-based. As far as the actual code goes, I think you are quite close to the optimum. As for readability... well, Roland already shared his initial thoughts and I totally agree. This is bound to be a nightmare for the poor maintenance programmer. Thus: a suggestion which is nothing new, but just a little rearangement: 

I don't like the idea of modeling a common set of properties (or as you say "... for just about every API call..." probably a mostly common set of properties) as a superclass. IMO inheritance should be used to capture common business aspects, not common technical aspects. Or in other words, this feels somewhat like identifying a set of real world objects which have a lock, and then creating a HavingLock superclass with subclasses House, Car, Desk, ... - this simply does not sound right. Then, the CommonRequestCommand has the ring of something that is a pure data holder. It has a set of parameters and maybe even a specific execution logic that is tied to the service you call. Tying this this to the lookup logic in your own application will make this a hard-to-test mess. Thus, I agree that an immutable class will probably be the best, and furthermore recommend that you make that immutable class just a field in your commands. For the mutablility, you can always create a copy. All in all: 

AFAIR, styles are "heavy cost" objects in the workbook. Thus, create each XSSFCellStyle only once and reuse the XSSFCellStyle object for the same color. 

First of all, nullbyte is exactly right about the use of a StringBuilder: using for Strings roughly equals under the hood and thus is a quite expensive operation. Then, your method to check whether a given charcter exists in the string after a given index is which again creates a superfluos string object via the substring-call. Instead, simply use to find the next index of ch after the given starting index (returns -1 for "not found"). Additionally, you might consider nullbyte's suggestion to hold the seen-or-not-seen status in a set, which also was my first intuition when reading the exercise. (Right now, you have runtime complexity of O(n^2) which you could reduce to O(n)). You only have to somehow come up with a method to revisit the first character, maybe by not using a set but by usign a map from character to number of occurrences or something like that. Naming: why ? This is not decoded in any way, this is just lowercase word. I can live with (or probably better encoded), but decodedString does not look right and does not give the reader any clue about the variable's contents. 

The compiler will still require you to handle in the method call, as it cannot know that you will replace that exception at runtime. The only way I see to change this is: do not use checked exceptions at all. Do the local catch-and-rewap dance in all places where some library insists on checked exceptions, and only handle runtime exceptions in your code. Then you have all liberty you need. The pros-and-cons of replacing all checked with runtime exceptions are definitely beyond the scope of this question. Let's just say: it is a controverse subject... 

mdfst13 already gave some useful comments regarding the message digest, so I'd like to add something regarding : When you copy from a file path to a stream, there's no need to write this manually anymore. to the rescue: 

You could replace your instance-check with a configuration map, which holds the class as the key and a consumer as the values. Some improvised code to illustrate the principle: 

The first variant is what your code aims to do. Perform what is possible, and detail the result. I consider this the second-best solution for the following reasons: 

This is all just a question of knowing your data structures. You already represent the input as a (which is good), now the next step is simply to represent the match pattern as a too, an then use the equals function of lists. Naturally, you will have to iterate over the list to create 2-element sublists to check the equality. Thus, setting up the combinations (may be done differently, the important thing is the structure as List: 

Version 1: Basically OK, but the copying of elements to another list is unnecessary. Have a look at on how to create lists from a given index range. Additionally, you should change the return statement to so that the recursion does not take place if result is already false. (Look up short-circuiting in logical statements.) Version 2: NO. It is much better not to copy the elements and use indexes into the unmodified structure, but here you recurse for every element in the list, i.e. the recursion depth equals the list size. This is a total no-go, as it will definitely blow your stack if we are talking about serious data sizes. Nevertheless, explore the option of using indexes (maybe a start-index AND an end-index) into the given structure some more and combine it to a divide and conquer-approach as in your first solution. Happy coding! 

Disclaimer: this has not been typed in an IDE or compiled, but just done on the fly, thus it might include bugs. But the concept should be clear. 

Due to the comments below, I feel compelled to break my personal rule of not just posting code. Thus, here's a working (not thorougly tested) approach which uses the idea presented above. I hope that makes it clearer. (Note: succ == successor, that is the naming I learned at scool a long time ago...) 

This basically boils down to a grouping problem: you have an input list and want to group it by date, which yields a per-date list of a given length (1 to number of departments). Then, these list's contents get added to a collector list chosen by the list's size, i.e. add all contents of list with size 1 to collector 1, add all contents of lists with size 2 to collector 2, and so on. Using the stream API, you already have the grouping, the rest is a little footwork: 

Process.waitFor will terminate the current thread until the process is terminated. Thus, at the place where you commented it out, it does not make any sense at all. You might consider putting a p.waitFor() after the loop, as to continue with your program only when the process has terminated. Apart from that, sorry to say so, your code is a mess. You use a very outdated method to start the process, you do not read stderr (which may lead to blocking conditions on stdout), code format is all over the place, p is declared outside the try block without any reason, exception handling is not present. To at least cover the basic necessities of reading both stdin and stderr, you should go for process builder and redirect stderr to stdout: 

Instead of shuffling the byte array around all the time, I'd rather create an additional Frame constructor, which operates on the byte array, performs the deserialization and sets all internal variables to the values from that byte array. Then, you'd just parse the answer into an object and use the object for all later references: 

The most important problem I have with your code is, that it totally fails to achieve the goal you set yourself. This is not dynamic at all. Basically, you take the "normal" method body and put it into a lambda, but this lambda now is a complex function, which contains all of the business logic. Dynamically, you'd need a collection (probably list for being ordered) of lambdas, which each check a single input value and return an appropriate string representation (i.e. "fizz" or "buzz" or "whatever" or the empty string) and a method to apply this complete list on a single input, accumulate the results and perform the final check whether to output that string or the integer itself. Thus, start out with something like: 

You can use the new utilities in the comparator class. Unfortunately you'll have to help the compiler a bit with the generic type induction. Assuming, that the value class is "Whatever", this can be done like this: 

It is somewhat unfortunate for streaming when you base your program flow on exceptions. If you want to attempt the delivery deletion and branch on success-or-not, it would be much better to encapsulate this in a function, which returns a success indicator, e.g.: 

Volatile won't do anything here, as this basically only affects the reference to the map, not the contents of the map. As for ConcurrentHashMap (as opposed to explicit synchronizing I suppose): this depends. If you want to make absolutely sure that no digest is ever computed twice, stick to your approach. If you just want general concurrency, but can accept that eventually in race-conditions, digest is called twice for the same input (sidenote: I suppose digest is deterministic, so that two calls with the same input yield the same result), you may simply repace the map with a ConcurrentHashMap and the whole method with: 

Real skill means knowing your libraries. Instead of 20 lines of handcrafted code, I'd rather go for: 

Edit 2 (to long for a comment): Disclaimer: this is from experience (> 20 yrs) and not from some ready-to-link standard text. Probably you will find something supporting these claims, probably you'll also find something saying exactly the opposite. Basically, you have to strategies on how you can cope with multi-action requests (like you have here). If requested actions "A" and "B": 

If you are in for raw performance, try to avoid repeating potentially cost-intensive operations. In this case, you split the lines twice with the same parameter, which repeatedly applies a regular expression under the hood. Instead of 

Both loops use exactly the same principle, just in an opposite direction. You might consider generalizing this by declaring the startingBracketType, the oppositeBracketType and the offset in variables, and modify the loop accordingly: 

OK, the data-structure looks a little wierd here, because your list consists of map-entries, but this was the main work. If you print this result, you already get (format added manually): 

Some thoughts about your enum: First of all, your general approach is good. The very idea of putting the relation between days and the needed data into the enum is exactly what I'd do, too. But, alas, there are some not-so-good points: Enums should be immutable: You have a setDayNumber method in your enum (even public!), which could be used to mess up the whole structure of the enum. Instead, initialize the field in the constructor and make it final: 

(or even better: make file a java.nio.files.Path in the first place) The same goes for the buffered writer and Files.newBufferedWriter() 

I think the mapper looks ok, but in the cost centers management method, you violate encapsulation by directly manipulating the travel's cost centers list. I'd rather leave the list management to the travel class: 

Fetch the concrete enum constant via lookup by name, extract the value from the object via reflection, and create the comparison value by some form of String-to-whatever conversion. Then, simply apply the test.