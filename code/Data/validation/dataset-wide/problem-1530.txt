These are pretty high performance because they operate at a lower level. Ideally you'd want to ditch the and go direct with a for best performance, but gives direct access to the underlying socket. 

I assume that is a user model, so why is it named ? As somebody said it looks like this class has some design issues, but since you didn't post it I really can't comment more than that on it. Near the top, you set a variable: 

As it stands there is unfortunately a lot of code-smell in here, first lets take a look at your inheritance: 

Which handles (in a very basic way) the plural and non-plural cases for the method name being passed in, so you could pass in raw user input and it would check for both. 

Which is a little confusing. Why is the (user ID) called in the session object? Is this really a "user id" or is it a "session id"? A little while later you execute an SQL statement: 

This is an interesting approach but I would prefer to do this via attributes, for example lets take the following sample class: 

is meant to be used when the class spans multiple files, not when the class is to be extended. If you want to use there is no need to mark the class as unless it really does exist in multiple files (a bad design for the most part anyway, with few good uses). If you want to force the class to be inherited, use instead of . You can remove the default constructor (and the warning suppression) by using default values: 

Or if you need special string validators, etc. You can do this without breaking your existing code, invalidating testing, and without introducing a new source of bugs in working code. Additionally, unit testing is a lot cleaner since you can test individual cases against specific attributes. 

Additionally the constructor can call the method as well. So now instead of the original way, you can consolidate code: 

Your model should not know anything about how it gets created, that is what a repository is for. What if at some point in the future you changed from a database to a REST API? Now all of your models are invalid. If you use a repository, you could just add a new repository for the new API and the models are none-the-wiser. So your model should just be this (notice I changed the name of the class, you should use descriptive names): 

Which allows you to easily add cases. You would also need to check that the desired name exists in the dictionary before trying to call it, but you should be able to get the idea here. The advantage here over reflection is that you do not have to do introspection to figure out if the method exists and is significantly faster than reflection. It also handles the issue of case (as in upper/lower case) a lot better. With reflection, and and may all be different methods (at least in C# if you want to be non-CLS compliant). You could do reflection if you wanted to, and here is the code that you would need to do it: 

I don't have a lot of experience with JavaScript, so I'll write a pseudo-code algorithm for you that would be a little more efficient. 

Now all we need is the validation logic. I think it is acceptable to make an extension method for this: 

The is effectively the same as , it is a little easier on the eyes without having to mentally parse generics. The last comment is about your repo method. It could be shortened up a little bit: 

This class should be marked since there is no reason that anybody would ever want to create a object. You should also not rely on your implementors to use variables. should return the area, not set the field. The other problem with the base class is the use of two different methods. Computing the area of a circle doesn't make sense to have a and overload, but you are dictating that your classes have that. You should reduce your interface to the lowest common denominator. Let the implementation's worry about what kind of area to compute, just dictate that it has an property. That would turn your class into something like this: 

The first checks and throws an exception, which leaves the method. The second check is completely unnecessary. 

Now you can guarantee that when the counter is incremented, the count that you get is the actual value of the counter. Calling at some point in the future will return some value that may have been modified multiple times between calls. 

As an added bonus, this works with any type that supports . See for more information. The only thing I don't like about this approach is that it uses a / to determine if the conversion is possible or not. This is very performant when the types are convertible but does suffer a performance penalty for the exception when the type is not convertible. 

Additionally, doesn't really need to be a property at all, so just make it a private field. Consistent Documentation You documented the method, but nothing else that is public. You should be "all-in" with documentation on methods, and make it descriptive (don't just re-word the method name). If the method has side-effects, mention them in the section. Consistent Method Parameter Names You got the names in as but you have the names in as . According to the .NET Naming Guidelines you should be using for method/property names and for method parameters. Code Use I don't see any reason why you would want to create a new and not run , so why not make that into the constructor? 

Which, for some reason, instead of using the existing it gets it from the session again. I would expect that you would want: 

Again, the code explains itself, get the line from the file reader, store it in the variable, and push it into the vector. I find that comments should only explain complicated processes or other non-apparent issues. Don't document the lines by writing out what they do in comments. Really, other than documentation above each method (which should conform to some formal spec like Xmldoc), you should avoid comments inside the code as much as possible. Here is a good article from VisualStudio Magazine about why comments are bad. Here is another article from SE member Jeff Atwood.