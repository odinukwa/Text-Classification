In a 2-dimensional array grid, each value grid[i][j] represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings). Height 0 is considered to be a building as well. In the end, the "skyline" when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the skyline of the original grid. A city's skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See the following example. What is the maximum total sum that the height of the buildings can be increased? 

I have the following questions regarding my approach: 1) How can I further improve my approach? 2) Is there a better way to solve this question? 3) Are there any grave code violations that I have committed? 4) Can space and time complexity be further improved? Reference 

Is this better than the loop: I don't personally think so. My advice: stick to your loop or revise your data structures to better support this approach. 

Or going back to principles: separation of concerns: load the window, return the controller is enough for a single method. Init data seems not to belong in there. 

... if you need to pass a local tmp-map, this will be more BiConsumer-ish in your case, but the idea should be clear. 

You currently couple your SocketHolder class with the environment it exists in, as you have the comparable interface implemented in SocketHolder which in turn uses . I don't think that this is a good idea, as this dependency seems unnecessary and makes isolated testing difficult. (Or in other words: bad gut-feeling ;-)) Suggestion: as you set up your priority queue in a specific environment, and at that place it is probably OK to know the environment. So, use the constructor for priority queue where you pass a Comparator explicitly, and write a comparator which basically does the same as the compareTo-method you have in your SocketHolder right now. 

I have the following questions with regards to the above code: 1) Is there a better way to attempt this question? 2) Is my solution satisfying all the test cases and why is it failing if any? 3) How can i further improve the algorithm, time or space wise? 4) Have I made any gross violations to the Java Coding conventions? Reference 

Constraints: [time limit] 5000ms [input] array.integer arr 1 ≤ arr.length ≤ 100 [input] integer k 1 ≤ k ≤ 20 [output] array.integer My approach improved : 

Time complexity: O(n^2) Space complexity: O(n) Time complexity: O(n) Space complexity: O(n) I have the following questions regarding the above code snippets: 1) How can I improve the time and space complexity of my code? 2) Is there a better way(lesser lines of code, better data structures) that can be used to improve the code? 3) Is there any better approach to solve this question? Reference 

I don't provide , and their friends in this question since their implementation is trivial and mimicks this of . Are there functions lacking in the interface or things to be improved in the implementation? Also, do you have any idea of a more suitable name for such an iterator adaptor? 

The ellipsis is a GCC extension to the C programming language known as Case Ranges. Using it hinders portability since not all compilers support it (as for most of the extensions). If you want to get rid of it, you should use the function proposed by Jerry Coffin: 

and structures I would go even further than @glampert and create and structures as well as a one. Experience has shown that this kind of small classes are extremely useful and can be used at many places in a GUI library (for example, getting the coodinates of the mouse can return a , computing the centre of a rectangle too, etc...). Moreover, once you have and classes, you can overload some of their operators to implement expressive and unambiguous operations such as multiplication by an integer. In the long run, you will see that it is easier to reason with these objects, and you can even return them from functions while you can't return and if they're not in a structure. Back to the Here is a concrete example of what your class does but should be actually performed by a class instead: 

Award Budget Cuts The awards committee of your alma mater (i.e. your college/university) asked for your assistance with a budget allocation problem they’re facing. Originally, the committee planned to give N research grants this year. However, due to spending cutbacks, the budget was reduced to newBudget dollars and now they need to reallocate the grants. The committee made a decision that they’d like to impact as few grant recipients as possible by applying a maximum cap on all grants. Every grant initially planned to be higher than cap will now be exactly cap dollars. Grants less or equal to cap, obviously, won’t be impacted. Given an array grantsArray of the original grants and the reduced budget newBudget, write a function findGrantsCap that finds in the most efficient manner a cap such that the least number of recipients is impacted and that the new budget constraint is met (i.e. sum of the N reallocated grants equals to newBudget). Example: 

Regardless of the java version you use, the business logic, which decides whether the object should be added and in which way, is placed in a non-OO programming paradigm. Instead of walking through other objects private parts, just add an appropriate method in the object itself and call that method: 

... which is exactly what you need from a data perspective. Using a further iteration over this map which uses the time as a key and the old map's entries as values to format the respective output should be quite trivial. BTW: to keep the order of the days, you should use a LinkedHashMap instead of a HashMap. 

Definitely the second. It shows that you have got at least a general grip on datastructures (knowing the complexity of HashSet operations) and know a bit about the standard library. Regarding the fist one: this even uses a loop instead of - I'd immediatly show you to the door for that, if I were the interviewer... Second is definitely better, but not impressive eiher. Try getting a grip on the stream API and play around with - my own try-that-for-comparison-solution was 2 lines using this... You shouldn't. From my opinion, it is OK to explain in addition that there might be a possible solution using binary search over the stones string, which completes in \$O(n\times log(n))\$, but I would not to see an even longer solution for micro-optimizing a simple problem which takes milliseconds to execute. Simplicity, readability and clarity are the key attributes. 

The algorithms in the standard library which care about order usually have an additional overload that takes a comparison function to replace . It can be useful to compare instances of types that do not have an overloaded or to compare things differently (for example, passing an instance of to will sort a collection in reverse order). Transforming your algorithm to take such a comparison function is more or less trivial: 

Return the iterator, not the offset Searching algorithms in the standard library tend to return the iterator where the value was found - if it was found -, and the iterator otherwise. Once again, you can implement that with only a few changes: 

By the way, I would expect functions named and to return columns and rows, not their size; you way want to change their names. You could also implement so that it is also available at compile time: 

Next step is: does the game really have to know who is a Player, and who is an NPC? You modeled both classes as being derieved from the common class Being, so maybe it should be possible to match any being vs any other? Without looking through the code en detail, you should strive for: 

is all you need. There are quite a few more problems in your code (especially the mixup of static and instance variables), but alas my time is limited right now. 

Your queue does not have any overflow protection. As queues tend to be used in multi-threaded environments with different producer and consumer threads, you'll have an immediate overflow when the consumer stalls for a while. In fact, this will simply throw an ArrayIndexOutOfBoundsException right now, so you'll have a program crash (which is somewhat OK.) If you expand this by creating a ring-buffer on a fixed array, you'll overwrite unread data without even noticing it and find yourself in the hell of untracable program behaviour. Thus: add bounds checks. 

It is a base class that uses static polymorphism. Here is an example of a user-defined derived class: 

Order of the headers You often want to add/remove headers from your code and/or check whether some header is already included. It's really easier to check whether a header has already been included or not if you keep your directives in alphabetical ordering: 

Note that I used forward iterators since the operations you use do not require anything more specialized to work. You will have to make some compromises like using to check whether the sizes are the same, which eventually means that the size comparison will only be \$O(n)\$ for random-access iterators. In a future C++ world with concepts and a standardized , you could have a signature like this: