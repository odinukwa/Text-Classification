The code looks good, very readable, written in a functional style. My only recommendation (beside the comment in the other response) is to separate the concerns i.e. implement the character type counting functionality in a class distinct from UI. At a minimum this should make writing unit tests easier. 

I am taking a very broad stab at this, answering your questions along the way but with additional comments on the code in general. 

Answer to the second question, Since you know the specific there isn't a need to use an array list. In practice however for small values less than there is no great drawback or performance penalty for using an , there is tho greater memory usage. 

I would separated logic for Celsius and Fahrenheit into separate classes. Here is a code to demonstrate the general approach: 

UPDATE is abstraction of real-world temperature. Your conversion method is specific to your application's data format ('C' and 'F' strings in user profile). Taking SRP principle into account, it is better to extract this conversion logic from class. You can do this with module, something like this: 

Class initializer should accept parameters and make sure your class instance is in the consistent state ( in your case). You can write your class initializer this way: 

When I read this spec code, I see that result should match , but from the spec name I see, that we test for invalid answers. Your specs code should be easy readable and I recommend to name constants correctly: 

The for comprehension, takes each element of list1 and an element of list2 and yields a tuple only if the serial values match. 

This code generally is more complicated than it needs to be, when you are aware of the tree arity, the array is your tree representation, there is no needs to create the conceptual equivalent of how trees are represented on paper in code. This code also has the following errors, using the example in the main function you have written The array representation 

This is an incorrect use of NPE, consider using IllegalArgumentException. Given that you have included this in your code, did you consider the case where items is a null array? Answer to question 1, There is no need to use a list, is perfectly fine. 

Regarding property - you can accept it in the initializer or you can accept it in conversion methods (, ). 

Looks like increment and decrement for are atomic operations, but are not atomic - possible race condition, for example: 

Or even accepted in the method because is a parameter for the round of the game, not for the whole game and leave initializer empty for now. When you will start doing BDD, you will likely star making design decisions like this. With this refactoring your tests will be a little bit cleaner, something like this: 

UPDATE after fix I ran benchmarks after your fix and here are the results (I ran it several times and did not encountered a deadlock error): 

That is the constructor implementation from the JDK source and it is initialized with an array of size 10. Brooks in his book says , and it has long been the refuge of code that has been written without good understanding, in this case, I would definitely use an array, premature optimization claims or otherwise. I did like that you made sure that TreeNode was static which is a common error that even experienced java programmers make. On the 3'rd question, using an array will cause a runtime exception () if one were to write code that attempts to insert more child nodes than the branching factor. However, to answer your question, you can develop confidence that your private function behaves correctly with regards to branching factor. The way to develop this confidence is via writing some unit tests. 

Do not put functions in header files. Headers are the public interface to your module, so they should contain the declarations of the public functions and (possible) variables. The C source file is the private part of the module that actually contains the implementation. So, 

These should be in the function that draws the circle, as they're part of the logic of drawing, not the circle as an object. 

Also, I'd separate the functions of creating a node, and inserting a node at a given point, since there might well be cases where you just want to move a given node from one list to another, and doing a malloc/free pair at that point is a waste. What if the list is empty The funny thing is, that having a pointer that is when the list is empty, seems natural, but it requires always checking if the list is empty. You can see this in that the insertion functions specifically test for , and you have to assign to in the main program after calling them. It also makes adding in the middle a bit difficult, since if the list is empty, you'd need to change the pointer (to point to the newly added item), but if it isn't empty, you don't want to touch at all, for efficiency's sake. A bit of a conundrum, I'd say. One solution would be to make a separate structure for the list in general, which would contain a pointer to the first item, and possibly some metadata about the list. (e.g. it could cache the list size if that is often needed, and a pointer to the last item to make it faster to add at the end.) That has the downside that all additions would require handing out a pointer to the main structure, and the node being operated on. Having no actual nodes would still be a special case, too. Another way is to just demand that the list never be empty(!). This is easiest to do by having a node that contains some invalid value (a sentinel node), something that is skipped by all functions actually handling the data. Sounds like a bit of a waste, though it's just a trivial version of a separate main structure, with the advantage that this time all the structs and pointers would be the same type. (Or rather, build the list functions such that they don't handle empty lists. The application program could of course have a pointer to a list node, that happens to be .) 

by the code. You went from a correct literal representation on the tree in array form to an incorrect conceptual representation in code. You can correctly handle this with a tree node. The remainder of the comments make the assumption that a representation is desired over an representation of the tree, as both your questions and my comments are not necessarily valid for an representation. A second error in your code is the case where you do not handle array representation where root has children, did you consider error handling code for this scenario. A third error is in the case of zero length array, since you have taken the care to address invalid values for , do you not want to handle 0 length arrays, which are valid trees with root. 

I am not an expert in multithreading, but I reviewed the code and here are my thoughts: The following code leads to deadlock: 

Your specs are small and independent and if one spec will fail, it is enough to read this spec's code to understand how to reproduce problem. Specs are fine. But I would removed duplication in the last 4 specs, I think it won't hurt specs readability: 

Note: MRI benchmarks frequently fail with error (or hang in jruby). Sidenote: I think it would be a good idead to put this project into github repo so other people can participate with pull requests/bug reports. I would participated :) 

I think it is too early to do performance tuning of the implementation, but here are results of the benchmark for machine: 

Straightforward, though a bit repetitive. From a UI point it might be useful to just show all (both) conversion results for the given input value, so the user. i.e. if the user gives Celsius, give them both Fahrenheit and Kelvin. 

Make a function to initialize the struct, esp. as you have fields that are initialized to as uninteresting a value as zero. 

I might rename this variable. The code just skipped eight days, it might end up on an , or something like that? (Might want to comment that its eight because there must be a weekend within those six days. This is still pretty clear, but it will get less straightforward if you ever allow for variable skips.)