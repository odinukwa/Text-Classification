Now, to use the function implementation, user packages can simply, without change, be recompiled using the Go tool chain. The primary control structure is nested loops: 

For a program to be correct, maintainable, and reasonably efficient it must be readable. This is not readable: 

The first step for the code review is to conduct a risk assessment by spending a few minutes glancing through the main.go, portping.go, and portping_test.go files. Now we know what the risks are and where to start focusing our attention. The code is undocumented: See Godoc: documenting Go code and GoDoc. Let's look at your Ping function. 

There is often nothing wrong when an environment variable is empty. Instead of ing, return a named . For example, 

Your source code is undocumented. See Godoc: documenting Go code. By design, Go has a short, readable specification: The Go Programming Language Specification. As you write code, read useful parts of it in detail, for exanple, (to make precise allocations), (which may require multiple reallocations), (which has minimal bounds checking and may do block copies), and Index Expressions (which often require a bounds check), and so on. Browse the Go standard library for useful packages. For example, the package provides testing and benchmark facilities. Read and apply the Go Code Review Comments. Your algorithm takes an array element view of the problem. Consider other algorihms. For example, a repeating, alternating pattern of input and reverse input. 

NOTE: There is a bug in the Slice Tricks that you linked to. It will be corrected soon. Until then use the link in my answer. 

Is the program correct? Not if the input is imperfect. For example, switch the script start and end tags, 

Third, read your code. And, fourth, run your code. Find and fix several bugs (others have identified some of them). Since is a misnomer, rename it to . Rewrite the command description: 

Your Ping function signature is . That won't work in all cases, including some of the examples in the net.Dial documentation, for example, host "google.com" and port "http". You write . The net.Dial documentation states that the function JoinHostPort manipulates addresses in this form. No employer wants employees who write idiosyncratic, unreadable, and unmaintainable code. If the dialed connection can't be made net.Dial waits, and waits, and waits forever. When we read through the net package documentation we noticed that there is a DialTimeout function. Let's use that. 

Since it uses the net.Dial function, we glance through the net package documentation to get an idea of what the package does. We carefully read the documentation for net.Dial and related types and functions. We can also look at the net.Dial source code and tests. 

It doesn't compile: missing return at end of function. Using build tags to distinguish between 32- and 64-bit s is unnecessary and too complicated. Use local constants, for example, 

A zero value map () or an empty map returns the minimum value. Return the zero value int (). For example, 

It's the Go programming language: The Go Programming Language Specification. Using a misnomer like Golang is like spelling and typographical errors in a resume, it's an immediate red flag. Your packages are undocumented. See Godoc: documenting Go code and GoDoc. 

You've already received two answers which reviewed your code for efficiency and style. You may also want to consider how Go experts write idiomatic, efficient code. Read the code for the Go standard library packages (Packages - The Go Programming Language) written by Rob (a Go language author) and Russ (the principal author of the Go gc compiler and tool chain) for examples. Here's an example of Go code for a basic selection sort algorithm (benchmarked as peterSO): 

You confess that your libraries are idiosyncratic, which means that they and the code that uses them will be of little use to others. : You write 

If you put blank lines between each sentence you can't see very much on a single screen. It's essential that code be readable. Think of blank lines as more like paragraph separators. The algorithm is implemented using recursion. Any recursive algorithm can be written as an iterative algorithm. Go doesn't have tail recursion. Limit the use of recursion to the few cases where recursion is much easier to understand than iteration. Here's an idiomatic Go GCD function. It's simple, direct, and fast. 

I see negative value in your idosyncratic Go standard library function wrappers. Similarly the , , , , and packages seem idiosyncratic. 

That's an excellent idea. I usually try to come up with three different ways to do things, although I often settle for two. I use code reviews to ask other people for ideas. Here's one other way. It's a little different and much more efficient than your way. It uses the Go standard library and code review conventions, and Go's test and benchmark facilities. : 

You should try to make your function more efficient. Don't restart at the beginning, don't make unnecessary string and other allocations, don't copy unnecessarily, and so on. Benchmark critical functions and methods. : 

I read your code, the code you imported from , and the code from rolfl's answer. I see problems. Let's start with something simple, the calculation of the greatest common divisor or factor. You embedded this code in a slab of code. It should be a function. For example, 

With goroutines, an unrecovered crashes the program for all (100,000 or more) users. Program for Google scale robustness and concurrency. Return errors; don't . See Don't Panic And so forth. Here's a simple, more readable, and robust example, and a pattern that can be used elsewhere. 

It's very inefficient. For well over two thousand years we have known of a much better way to do this. Rolfl used a much better algorithm. 

Note: Your code is not useful. Rational numbers are available in the Go standard library. For example, 

The delta from fr00z for rolfl, icza, and peterSO is -48.14%, -77.38%, and -87.89% respectively. The delta to peterSO from rolfl and icza is -76.64% and -46.45% respectively. Comments should conform to godoc documentation tool standards: Godoc: documenting Go code. Provide explanatory comments that clarify, not duplicate, code. The Go language provides facilities to hide package, function, and method implementation details from package users. For users, the sort order is not type nor type ; it's type . If we want to change the implementation, we can simply redefine the type and the implementation. For example, go from a boolean implementation, 

An obvious indication of problems is the difficulty in testing. Your program only handles one input value. Rolfl hardcoded a single fixed value: . For a problem like this, which is driven by user input, the Go main function should be an input loop. For example, 

If you are expecting two fields (2) will return the first field in index and any remainder in index . (3) will return the first field in index , the second field in index and any remainder in index . Having a remainder may or may not be valid. Playground: $URL$