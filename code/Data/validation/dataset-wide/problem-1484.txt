Here is what I came up. It is header only library now. I believe is much more clear like this. myhash.h 

Why you pass by reference? size_t is as big as the pointer, but there will be additional hidden dereference that will slow down the execution. keep the const, remove 

constructor class member "initializers" I may be using incorrect term, but constructor better be like this: 

I agree with Loki, but hare are some more things: Destructor I do not see the destructor. What happen when you destroy / the class? Answer is huge memory leak. You definitely need to have to release the memory and prevent memory leak. If I read the code correctly you need following or something very similar to: 

Even better if you do it as , but I can understand that you probably want to avoid it. Use instead of raw pointer. If you use , then you do not need to have destructor. I think this is some example where you learning how to work with memory management, but you need at least to explore the possibility. If you are using , code will not slow down, also will not use additional RAM compared normal (raw) pointer you have now. 

ASP.NET and code-behind One of the main advantages of ASP.NET is the code-behind model. This ensures that the logic and the markup are separated in different files. The markup's goal is to display data, not to determine whether controls should be visible or not. So, your code is in violation with that principle. 

Following way of working won't really shorten your code as it is not eally possible. But, by splitting validation and executing code if the input is valid, it makes your code more readable: 

In the point Type constraint a bit further you'll see why. Scoping variables: You should define variables as close to their usage as possible. In your case you can instantiate the class inside the statement since you don't need it outside the statement. Example: 

and can even be shortened to simply this, because you're simply returning a boolean corresponding to the value: 

Disposing of the form: Since an instance of is disposable, I suggest using the using statement. No need to check whether or not it can be disposed or not, at the end of the statement it's automatically disposed: 

Also move this into the .h file. It is so short. destructor Your destructor is empty - remove it completely. default constructor in ListNode default constructor in ListNode is empty. You can not remove it, because you have one more constructor. However if you have C++11, you can do: 

Is this conversion or just check if class is Integer / Number? Naming is unfortunate. Change it it or change return type to . What is ? If it is a pointer, change it to or if you are using to . Number.cpp way too big, skipping for the moment. Fraction.h once again this will not be compilled, because you are using unknown . must initialize the and . I suggest following: 

Once again I decided to beat system function. This time I decided to use a template and to "precompile" all cases from 0 to 31 bytes. Result is 400% improvement - from about 1:15 min to 0:25 min. Finally I had rewritten with naive looking for statement and I noticed that the compiler can optimize it as well. However I did not tested with random data, so I am not sure what role the cache line and branch predictor plays in the tests. Here is the code: 

Edit: Since you're not doing anything between the two if statements you can place the condition of the second statement inside the first one with an operator: 

See how the other names make more sense? Try to avoid verbs as a classname. Methods can and most likely will be or contain verbs, but not classnames. Also, leaving the query out of the class leaves you the option to use the same code for other queries. Note that this is no perfect code, I was only suggesting what might be changed. Hope this helps! :) Edit: You call the function selectData() and pass the query-string as a parameter. This changes nothing, it gives the same result as your code. Only in my case you can pass other queries to the function whereas your function is limited to the embedded query. Now for the result. This has also to do with the decoupling of your connection-class and what will be shown to the user. I showed u the usage of the class, the code below is how you can process the result. Create a function (but not in the connection class!) that returns the result in a table: 

However I would use this instead, even I do not use any arguments. This is because argv[0] is always set. 

Naming things Why you have all caps function name? Why you have variable with capital letter in ? At first I thought it is template parameter i miss. Use auto more often: 

Please note, many people (me excluded) will not like in the middle of . Anyway if you do it this way, readability will be much better than with . 

Do you really need to check ? My experience is you can use directly. If there is a session created, statement will do no harm. I believe you need to initialize , but only if is not set already. Something like: 

Make for list elements. Currently the list is using . If you decide to use or , you need to change it in 100 places in the code. Make some or (C++11) so you to be able to change the type from one place. It could be inside the class: