Well, that's simple enough... how is it done? Given a list of paragraph sets, finding the paragraph which is a superset, is easy: 

OK, so we have a Server that is well isolated from the client code it runs. The client handler The client code is handled by a ClientManager class. What happens in there.... this is a copy/paste of the relevant code: 

Note, in the above, that , , etc. all are actual wires. It would also be idiomatic to resort to having everything in pointer-space, and use the keyword.... returns a pointer to the value. The result would be: 

Just a thought, probably neither more efficient, nor more readable for a non-familiar person, but you do see code like that, and it's helpful to know your alternatives. 

That replaces all something-stars-something patterns with nothing. Note, this pattern will have the following results: 

You should never have an await and a signal in the same locked block of code. It means you are doing something wrong. you should not be calling , but just plain . There is no need to wake up every waiting thread when only one of them will be able to acquire the lock. The whole point of the fair lock system is that it will signal the fair one first. Once that fair one has awoken, it gets the semaphore. If you wake them all, then only one thread gets the semaphore, and they all re-lock and re-await, and the 'fairness' order may change. should not be called . The whole point of conditions is that you can name them something that documents what they do. Consider the name , then your code reads like: 

but, that code will not compile because you need to return an int value after handling the exception. You know that there will never be an exit from the onException, because it shuts down. The compiler does not know that, so the compiler makes the wrong assessment of the exit path of the method. I recommend you change the signature of the onException class, to have a return type of . With that, you can have: 

Then, if you have two hands, and they select a random 'hand' from the three options Rock, Scissors, Paper.... then, you can find the first index of the first hand's value in the size-4 array above.... then if the next value is the opponent's hand, you win. If it is the same as your hand, it's a draw. Otherwise it's a loss. 

Performance Your concepts of 'large' and 'very large', are unconventional. I would consider 'large' to be in the > 100MiB ballpark, and very large to be > 4GiB (more than 32-bit size). This has impacted the features you consider to be performance-enhancing. All file-systems I know of use at least a 512-byte extent, with the extends merged in to at least 4KiB blocks. If you are buffering data, I would recommend at least a 4KiB buffer. I have done similar things in the past, and I now typically use a 1MiB buffer to get queued reads happening. I would thus have a buffer like: 

Note how using the function extraction makes the code simpler? Now, how to get the input in to that function? That would be simple: 

You are already disposing the connection inside the try block (as part of the ) so it is all moot. The SQLConnection .... how is it created??? You have it magically appearing in the preamble.... need ... more ... information. Why do you have commented-out old code inside the block. If you are not using the variable any more (since it moved to the outer using block), then kill it, don't comment out the line. Without knowing more about what the stored procedure does, it is hard to determine whether there are any other problems, but, your code could simply look like (although as the program exits the using block the SQLConnection will be disposed. This is an asymmetrical situation... the connection was open when the block started, and we are not returning it open): 

General This question still does not have a clear definition, despite the assurances at the top. For example should the following return true: 

Key debouncing Interrupt handling OS event notification OS Thread scheduling Clock granularity TextBox listener notification 

In addition to h.j.k.'s comments.... There is a common trick you can play when dealing with data that is referenced back to a sequential number, like months. If you create an array of Month names, and an array of days in each month, like: 

If we add a third input member, we can have the same 4 combinations above, but then we can also have it with the third member. There is a pattern here, each time we add a member, we double the number of combinations. Now, in computer science, it happens that there is a very convenient system we can use to help with this... it's called an 'integer'. Consider an input dataset with 3 members.... Now, consider a 3-bit integer. Let's count with a 3-bit integer: 

I use a dedicated object to lock on to. This prevents someone from using my instance as a lock for their synchronization needs, and breaking my class. E.g., with your code, if someone did: 

Adding a second answer here because this answer is directly targetting your actual question: "How to make the palindrome program more efficient". ince the fastest answer I tested has not been mentioned yet in this review, I figure it is worth outlining here... Personally I feel that the int approach to dealing with it is more intuitive, but I set out to prove this, and I was suprised, so, here is my test program.... First, it generates a million integer values stored as Strings in a char[] array. It then repeatedly 'scans' those values and checks each value to see whether it is a palindrome. In the spirit of the initial program, the test here is really whether converting the value to an int and then doing numberical manipulation is better than keeping the value as a String, and doing String comparisons..... I chose two different mechanisms for String compares.... Bottom line is that keeping the values as Strings is about 50% faster... huh. Half the time. The most efficient method is: 

Objects Java is, by definition, an Object-oriented language... but, that does not mean every program needs to follow those rules. This is an example program where there are no new objects that are relevant, and as a result, there's no real need to go beyond just procedural routines. You have , and , and those are objects enough. Consequently, you can do everything as static methods/functions, and no need to create anything using . Functions Good code practices recommend a number of aspects to functions that would help here. First up, functions should do one thing, and do that one thing well. By making functions simple, it makes it easier to reuse them, and combine them. Consider a simple function that gets the initial letter of any String: 

Note that the 6-char password generated 2GB of data in 10 seconds, or 200MB/second. You will be limited by your storage system probably, not the CPU. 

Note that with problems like this, you can always prove that there is a small value that is dependent on the smaller coins only. For example, in your case, with the coins , you can get the following combinations: 

There are a bunch of things which you should consider revising, including the basic concept itself. Here your concept is to read each line from the URL, count it, and throw it away. Your code does nothing with the data? What's the point? Regardless, even if the sole purpose of the code is to count a URL's lines, the code should be revised to take advantage of Java Best practices. First up, it's a cheap shot to treat the constructor the way you do. Yes, it throws a , and yes, that is a subclass of an , but they really should not be lumped together. Your method is listed as throwing an anyway, so why handle the exception inside the method and throw nothing? The calling code will need to handle the anyway. Just throw the exception and be done.... but also throw the . Next try-with-resources is your friend. Resources treated that way will not need the block at all. Finally, Java 8 does have some fantastic InputStream-to-Stream methods, use them. Specifically, the method: Your code could be something like: 

I don't like this question of yours. To me it looks like a step backwards compared to your other recent questions. Edit: About Locking Consider some user of your class, they want a stack that is thread safe.... and they need to coordinate between some threads. They need a convenient object to synchronize on. STACK is there... so they use it. Note, I would never normally write code like the following.... but, the following code will never finish... Even though, at face value, it looks fine? You understand now? 

Welcome to the hell of comments, and personal taste. There are multiple answers to your core question that may be right: 

That converts the int val to a char, and it's done. You are already assuming US_ASCII so there is no loss in here. 

That pattern will find in the line, and remember whatever the is, in group 1. You can now convert each line in to a matcher, and filter those lines which match, and recall the database. Additionally, the Streaming API is able to terminate when the first match is found. The code would all look like: 

The above code is also typically done with a "defer", but because your code does nothing else after that point, the defer would be useless, but I would still consider writing the full function as: 

as you don't need to explicitly supply the default values. General Your code is neat, your variable names are not bad, and the use of generics is good. As a learning exercise you should spend some time seeing if you can make it implement interface (it's not easy - fair warning) because that will teach you a bit about what the actual Java Collections API offers. 

Note that the results from the above code may, or may not include the terminating period. If the match is in the last sentence of a text, and that text ends with a period, then the period may be returned as part of the result. If there is a match in the middle of the text, then the period will not be included. 

Three parts to this answer: General Review, Generics, Mutable General Style Java 'style guides' all agree that in Java, the opening brace should be at the end of the line declaring a code block. So, for example, this code: 

In 1801, a guy called Carl Friedrich Gauss studied problems where the number line wrapped around, called Modular Arithmetic. In his studies, he proved that: $$ (a \times b)\ \%\ n = [(a)\ \%\ n \times (b)\ \%\ n]\ \%\ n $$ Also, 1000000007 is a prime number which means that there are other benefits... And, it is also just less than half of . Finally, two int values, no matter how large, when multiplied, will never be larger than Putting this all together, you can rewrite your code without the math, something like: 

I believe you have missed a critical requirement, that you need to keep the array sorted. Your solution does not. The negative values in the input start sorted, but as you square them, they reverse. You then correct it with a bubble-sort. There is a way to do it while keeping all the data sorted at all times. It is not an \$O(n)\$ operation. The algorithm to use would be to square all values on the right-side of the array that are larger than the abs-value of the left-most value. Once you find a value that's smaller, you know the left-most value squared needs to be inserted at that point. Shift all values left, insert the square, and move on. Your code is very C-like, and a C-like implementation would be: