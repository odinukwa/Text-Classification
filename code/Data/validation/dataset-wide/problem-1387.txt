What it's doing Basically, this is just going through all the numbers up to the square root of , and seeing if they divide evenly. They divide evenly if . If anything divides evenly, then the number is not prime and the function should return . However, there is no anywhere in the program, and it actually relies on undefined behavior. Try going through it yourself with equal to 9. The loop will go until , and then it will terminate because of the statement. After that, the function doesn't know what to return since there isn't any statement outside of the loop. On my computer it defaults to , but if you compile with you'll get this: 

Instead of using , just cast the square root to an , i.e: The should be outside of the for loop You might also want to add something to catch weird input, such as -> . If you have this you can also eliminate the first part of 

Everything looks right from this, so we can call it a day. Note that if generating a list of primes like this is what this function is used for, you should consider using a sieve instead. 

This can be rectified by replacing the statement with , and putting a on the outside of the loop. It should be at the end because at that point the function has gone through all the possible factors and found none that divide evenly. Improvements 

Also, you don't really need to check for , what's the worst that can happen, you'll add an empty range to your list? That's usually not important, and your code has less , which is good. I'm no pro with Automapper, but I don't think it's a good practice to map lists, maybe you should define your map per object () but maybe there's a performance gain I'm not aware of. 

Since your cache will be used application-wide, I think it should be thread-safe because otherwise the state of your cache might change halfway through an operation. To do this, add the keyword to your method signature. (I've never done thread-safety in java, only c#, so I might be a little off on the best practices about that in java.) Also, the method named might add an object into the cache, but it is impossible to know this without first checking the source code. I don't think a single method to do and is a good idea. Why not split in 2 different methods? This cache implementation is not generic. Imagine I want to use your cache in my application, I wouldn't be able to do it since my classes wouldn't be part of your ,,. Throwing isn't a good idea. You might want to create a custom exception like . 

is never going to be larger than due to the constraints in the loop, so should also be of type . (Or should be of type ) The two statements at the beginning of the loop that check if is or are going to be the same every time, but are evaluated at the beginning of every loop for no good reason. Put them before the loop. The middle statement of the loop, and the at the end, are doing the same job, which is limiting the amount of times the loop repeats. Replace with and get rid of the at the end. I don't know what function you're using, but I'm guessing it's from . That function takes a , so either use a square root function that takes an or replace with . Mathematically, it's pretty much the same thing (though we can get rid of the unnecessary ), but we avoid using that function incorrectly. This loop will check every number up to the square root, but if has any even primes then it is a multiple of two. You check early on if is even, and then only check odd numbers in the loop. That will cut out half of the iterations with one quick statement in the beginning. 

If the range at the end is just to demonstrate that your function works then that's fine. But if you specifically need the primes over an interval, try implementing a sieve instead. 

Note that I changed the return value from to , if you don't plan to add/remove values from your list, you should return , if you plan to do it, return . You shouldn't return a because it is an implementation detail and that the isn't made to be extensible. 

But wait, there's more! At the moment, we have constant values that define our code rules. 16 characters, groups of 4 and a "-" separator. These values could (should?) be parameters to an object! So let's introduce the class, with a static method, . 

The problem you have at the moment is that you mix pulling the data and the rest of your code (that we don't see because you didn't include it). Extract this code in a method : 

There's one thing that annoys me about your class and it's the order of the code. You should follow this order: 

Notice that isn't the best variable name you can use. Perhaps would be better. Or something like this. Also, you use in your main loop, but I assume that it's the person's work that takes 300 milliseconds (damn those persons are fast!). So maybe the sleep should be in the method. Using is unorthodox and is usually not recommended, but for your example I get why you're using it! :) I noticed you were using . That's bad. I mean, you used it in a "good" scenario, as you want to modify an by reference, but you don't need to do this and you shouldn't include everywhere just for the kick of it. You already have access to and , so why pass them as parameter?