I ran into a similar requirement when trying to figure out how to leverage Active Directory for BlogEngine.NET. After spending some time researching I was able to use Active Directory user accounts with the Basic Authentication .NET Membership framework. This worked on my domain member web server but could easily work for non-domain member servers assuming you add the username and password to the configuration section of the web.config. From my blog post about how to configure: Add an entry into the section pointing to your domain controller. 

You could use Windows 2008 Server and the built-in Secure Socket Tunneling Protocol? You could use the built-in Windows Vista/7 networking client and the configuration is very simple. 

How about Secure Socket Tunneling Protocol on Windows 2008 Server? Works like champ and is easy to configure... Works with the built-in Networking client in Microsoft Windows... 

Exporting a certificate's public and private key is built into Windows, as long as you imported the certificate with the "Allow Export" flag set... In case you have a certificate that doesn't allow you to export the private key you can use a third party tool to extract the private key... iSEC Partners wrote a tool called Jailbreak that allows you to export "locked" certificates... I wrote up a review of it on my blog... 

What version of IIS? For IIS 7 you can use AppCmd.exe. For IIS 6 you will likely have to use WMI/VBScript as I believe the configuration is stored in the IIS Metabase. Please update your post with what version of IIS you are working with. 

There shouldn't be a problem mixing the wildcard and specific certificates. Not sure why you would need to do this as the wildcard certificate should be able to handle all domain.com requests. You should also be able to bind the same wildcard certificate to multiple websites, meaning you don't need a unique certificate for each website. 

The title of the question leads me to believe you are trying to take a certificate's private/public key from IIS and use it on a Tomcat Web Server. If this is the case then you will need to first export the certificate (both private and public keys) into a .PFX file, convert the .PFX file into a .PEM file, and then copy the .PEM file into the correct location for Tomcat to use... 

I'm using RARLABS RAR.exe to archive/backup my server data. I am familiar with using RAR for creating an archive and adding files from a folder, but what about streaming data directly into an archive? For example, when backing up my MySQL databases I use the mysqldump command that includes a pipe command into a text file. It would be nice to skip the file step and go directly into an archive file using something like the following syntax: 

Don't forget about your network interface needs. You might want to have at least two interfaces (our four for load balance/redundancy) so that you can have the Host communicating through a different interface than the VM's. You could also consider dedicated interfaces for certain VM's to avoid network bottlenecks for things like SQL and Exchange... 

Have you configured the VMWare to not push the host time to your VM's? The default behavior of Virtual Services is to have the VM's get their time/date from the VM Host... Here is an article I found using a search that talks about enabling/disabling time sync with the host... 

I have been using EveryDNS.NET for several years with positive results. While a free service they do accept donations to help keep everything running along. 

This might be possible if you configure the IIS 6 server as a proxy server. Managed Fusion has a URL Rewriter that can do transparent proxy that should be able to have the IIS server pull all requests from your LAMP server. In the discussion forum of the URL Rewriter project is an article that talks about doing something similar to your request; this article is about Apache on a localhost but shouldn't be much different for a remote Apache Server). EDIT: Keep in mind that using IIS as a proxy to a LAMP (or any other server) is incredibly wastful... You should work with the ISA Admins to redirect the web publishing to the actual target server. 

Being in a similar situation, I created a free account at editdns.net and configured a secondary zone for my domain. Once the zone transfers were working I updated my domain registrar's name servers to point to the EditDNS.NET name servers (free01.editdns.net and free02.editdns.net) instead of my DNS servers. Once I was sure the domain was resolving correctly from editdns.net I had the ISP switch over my IP addresses. Next I updated all of my DNS server records with new addresses. Finally I reconfigure the editdns secondary zone to pull from my new dns server IP addresse. Now I could have switched my domain registrar name servers back to my DNS servers but I figured it was nice having editdns.net name servers handling the dns lookup requests. So I left my domain registrar name servers pointing to the editdns.net name servers and I keep them updated through secondary zone transfers from my dns servers. If done correctly there would be minimal impact to the internet world... 

You will notice that I did not configure a username and password for connecting into Active Directory. That's because I am running BlogEngine on a domain member server and the IIS services are running under an application pool using Network Services account. If you must use explicit credentials then you can add connectionUsername and connectionPassword to the MyADMembershipProvider entry with the appropriate information. 

Notice the first part of the LDAP:// syntax specifies the name of the domain controller (server.domain.com). You have a couple of options here. You can specify the Fully Qualified Domain Name as shown in the example; you can specify the relativeDistinguishedNamek (ex. server); you can specify the IP Address of the domain controller (ex. 192.168.1.10); or for more redundancy you can specify just the domain name (ex. domain.com). Make your section look like the following: 

Why would I want to use RAR instead of GZIP? Well one thing GZIP doesn't have is the ability to automatically include a date stamp on the file name. So with this info here is an example of how I will be backing up the MySQL database information: 

Microsoft used to say that Domains were a security boundary but now they agree that the forest is really the security boundary. Having multiple domains is mainly used now for isolating traffic to specific regions (ex. East vs West, or Northamerica vs. Europe). That being said, in many cases the choice to use multiple domains ends up being the wrong choice since it introduces the additional cost of servers and management. OU's can be configured with delegation to isolate management and security tasks sufficient to meet almost any inter-forest security requirements. My recommendation is that unless you have a siginificant network connectivitity difference between two separate locations stay with a single domain. UPDATE: I also forgot to mention that Windows 2008 allows for OU level Password policies, making one of the primary reasons used for separate domains obsolete. 

Double check your web browser isn't configured to use a proxy server... Worst case you could run WireShark on the web server and see if the web requests are actually making it to the web server on that port (8081)... Also, run the command line tool "netstat -na" and see if there is an entry for the 8081 binding. Something like: 

Are you running a high-end video adapter on your Hyper-V server? There is an issue with this configuration and a recommendation to use the basic svga drivers on Hyper-V servers. Understanding High-End Video Performance Issues with Hyper-V A possible option to solving your RDP problem is to add the Terminal Services Gateway to your Hyper-V server and then you can connect to your VM's through your Hyper-V Server. I wrote up an article that outlines this feature in Windows 2008 Server and use it every day to get to my VM's on my lab server. Once you have TSG enabled you can extend it by adding RRAS with SSTP to add the option of a VPN connection into your home network, all over your Hyper-V server.