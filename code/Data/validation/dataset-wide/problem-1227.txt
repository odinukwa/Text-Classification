Question #1 No. You do not need to ref the connection object in your methods' parameters - think object oriented way not class oriented. Question #2 The only way is to make this as a non static class. Avoid always statics when the current problem contains some kind of state management like a MySQL connection. Question #3 No you don't but you should implement the IDisposable interface and apply the correct disposable pattern. 

Refactoring to class With object oriented view we can build a class to solve this problem what kind of problems we have to deal with: 

You can found a lot information about what is dependency injection and with the example above you can use any existing DI framework (or create your own) you only have to do is create an adapter (Adapter pattern) which is implementing the IDependencyResolver interface and working whith the current DI framework implementation. 

Multiple problems Why is static? Why is the database hardcoded in the class? Echo or return? Neither Exit? Direct $_SESSION write (super global) HTTP stuff in an Auth class? Why is static? You are using stuffs in static where you should not have. Handling database through a static proxy? Untestable, unreadable and what happens if some forget initialize it? Same thing applies to your class which is handling the authentacation. Why is it static? If you wan't to access it whereever you want then create a static facade class and keep the main logic in a separated non-static class. Why is the database hardcoded in the class? What happens if you don't want to use anymore a standard SQL database to store your users? You will rewrite the whole class to achive that? If you create a new class as i described above leave out this hardcoding use constructor injection instead: 

You're a blind adventurer (bad luck eh). To go through the maze that'll lead you to freedom, you must first find the maze's wall, then follow this wall to find the maze's entry. Then, to get an idea about the size of the maze, you want to see how large is the said entry, so you walk until you touch another wall, which is the other border of the entrance. Still following? If not, here's a that'll show my example : 

In , do you have multiple keys or a single one? Because this : is confusing! is an . According to the naming guideline, your enum should be pluralized if it's a enum. I don't know if that's your case, but if so the property name should be , otherwise the should be . And shouldn't you check for ? Mat, I remember writing this comment everytime I review your code. We should have a chat :p In , the cyclomatic complexity must be pretty high. Because there's the in there, I can't really propose a refactor. Plus, well maybe you won't be able to refactor since it seems there's a specific order in the execution of your code. But maybe there are methods you could extract! In , members should be on top, and I think members should be separated from the others, but I'm not sure. I know we should use brackets all the time : 

var_dump($zones); HTML After viewing the results you can create your own view to display the date without having queries and other not view related stuff between your HTML stuff. (I'm sure that i have made some typos in the code but it should work after some fix.) 

This is from my library it's similar to the other solutions but it's using a little hack: the array_key_exists() is a slow function so i execute first an isset() 'function' and if it's says "yes, it exists" then i don't have to execute the array_key_exists() function. The reason why isset() is not enough is the isset() will return FALSE if the key exists but the value is NULL. 

ordering the available routes: by the static parts (fix parameters not pattern elements ({})) and by the constraints (in a route i can set up constraint like the id onyle can be in the range of 0-5) [static length descending, constraints' numbers descending] iterating through the ordered rules collection and trying to find out which one will be the first mach by using regular expression (the Route contains it's pattern translated into regular expression), if a match found i try to fill the pattern with data; if everything is in place i've founded otherwise continuing the search. 

I think it's a dangerous path to try and "thin" everything. At some point, some of your classes will hold more code than others. You want your controllers to be as thin as possible and that's good. That's why you have services, view models, etc. But building these things belong in the controller sometimes. 

String interpolation, it's called. Looks kinda cool eh? You shouldn't return a . Ever. Unless you're in a private method, which isn't your case here. is an implementation detail. You want to return if you want the client to be able to add/remove from your list. Otherwise return to offer a view of your result that cannot be modified. 

Lacks comments, or explanations, or refactoring, I don't know. I don't understand what is this piece of code supposed to achieve. I suppose I would understand with an example, but in my opinion this is just a flag that this should be explained better (either with code or comments). Finally, that means . Are you doing this just to avoid writing ? If so, you shouldn't. That's pointless. is a cool tool but you shouldn't force it. It's just really weird in this case. Apart from these little details, I think your implementation is quite solid! 

This is a cleaner version of your code with less query (the first was unneccesary) and inside the loop you are making a lot of small query which can be really bad but first you have to modify your code to not work directly with the context in you page code but through an interface (first iterate through the rows and get all data then pass them to the worker (which can work with the context) and return the result & update the UI). 

If this query performance slow then check the indexing on your server (EXPLAIN). The important thing is that with SQL server we have to work with small number of huge result sets instead of a lot of small subqueries. 

You can derive from the model class without any problem your attributes will get applied in you view model also (not every but for exmple the validation attributes will). I also recmommend to have copy constructors becouse they can help you a lot. Beside this my opinion is that no need to worry about display/display format attributes in you model classes it doesn't feel an incorrect way and it helps to keep things clear if you have a lot of derived classes. 

isn't a good variable name. would be better, or well.. something like that! Why is and defined outside your method's scope? They're useless there. I don't think keeping variable at the root of the script is a good practice. Why don't you wrap it inside a call? The only comment in your code seems useless. You do not use anywhere in your code. Also, when you have the choice, your conditions should be positive. It's just a little easier to read. I don't see the use of returning in a case like that. It means nothing. Finally, I think that it'd be better to pass the parameter to the function. By the way, should be renamed . This is what the final code would look like : 

I think all the comments should be removed. The point of a comment is to explain why you wrote this code, not what the code does. If anyone reads the code, they will be able to understand what it does without reading the comments. When you write comments, always ask yourself : "Will this comment help me understand why I wrote this code 5 years ago?" (Or.. 2 weeks if you have a bad memory like mine), if you can't answer, you probably don't need comments! The formatting looks perfect in my opinion. 

Constructor injection Use constructor injection becouse this is the best way to write well readable and testable code. If you don't need a Doctrine instance in your class then don't use it. 

This will result in one SQL query if the backend is an SQL database and will not recieve entites which are unnecessary (i think the Last() would download all entities). 

No this is an ugly way to do it. extract() (PHP4 stuff in 2012/2013?) The problem with exract() is that it's creating variables ionto the global hyperspace (oh God, why) where can exist (in localy also!) any other variable and can have name collisions and can overwrite the old values. Beside this you are losing the control over your code and it will be hard to maintain (debug, fix also) and to extend. load_view() Not always returns a value: in PHP this is okay but in general programming it's a bad habit. I do one thing in a case and in another one i do a complete different stuff in same function? And why am i in a function? How about a non-static class method where i know everything in my small environment? Here is a small example of an idea: View class 

Now, there's still a problem. Since your list doesn't check for unique elements, your "randomness" is flawed. If I add the character 100 times in 110 elements, there are much more chances for me to get an then something else. But that's up to you and this issue wasn't addressed in your original code since your class isn't , this isn't really a concern. It is fixed in the set since sets contain unique element. We couldn't do the same thing with since the sets do not have no mean to get an element at an index, which is needed for you. Methods should have names that are verbs, not names. So should be . Overall, you'll gain performance using these data structures over . The rest looks pretty good overall. You might want to give a little more empty lines in your code since multiple lines stuck together are hard to read. Also, don't forget to check your entry parameters for in your public methods. Each time a is thrown because of a missed check, Santa removes a gift from your presents list. :p 

The router is responsible to pick the correct one from the collection can be done different ways but here is my solution: 

This is a really simple approach but it can be used to signal what happaned in the authentication process. Exit? What is the reason of the exists of an exit statement in a business layer class? Why is stopped the whole request process if the passwords not match? What happens if you want to test the password equality check method? If they are not equal the test stops? Direct $_SESSION write (super global) Of course writing into the $_SESSION array is not bad you can have your own session data handler in the background so everything can be done this way. But again: what happens if you want to test the functionality of writing a session data in your Auth class? You will test the session data saver also (your own or the one built into PHP)? I would wrap it into a class and pass an argument to the Auth class as i described above the IUserStore solution. HTTP stuff in an Auth class? Why is a header() call in your Auth class? Is it really neccessary or the redirection can be done depending on the result of the authentication process in your controller if you are following an MVC approach?