It's been a while since I've done Javascript, but I think that you want something that looks like this: 

Elsewhere you use snake_case names. If you did that here, you'd have . I'm assuming that you removed the read email address for privacy reasons. 

When commenting, try to say why you are doing things rather than what you are doing. E.g. . This seems odd though. You pass in an . Why not make a list of integer arrays then? If that makes something not work, comment on it so that you don't regress it later. 

This seems overly complicated. Under what circumstance does the value at a particular offset outside the array matter? 

This is also unnecessary. The function will return naturally at the end. You only need to use if you want to leave early. 

I prefer two column indent for HTML. Unlike code, you can't say that the indent is too much and abstract part of the markup to a function. 

You can put that code at the beginning of the function. You should also consider what should happen if and are called in the wrong order. I don't see how your code would even notice. Perhaps open tags and elements should share the same stack rather than having two different stacks. Rather than storing them as strings, you could store them as objects of classes which extend the same class. That way you could know what is supposed to come next. What would happen if were called twice in a row? Consider adding logic to auto-close the element only if one is open rather than every time is called. It should also check if it is currently in a context where a string can exist. Check if an element tag is open before adding an attribute to it. 

Your query looks weird to me. You're doing string operations () on a field. This probably means that you are skipping the index and almost certainly that you aren't using the index to limit the possible rows. A more common form would be 

This only checks against when you would be increasing the . When the is , we set to equal (which will be one greater than the index of the last element) and increment count. Your original version had a bug where it incremented the count first, which actually sets the offset just beyond the end of the array. Doing things this way gets rid of the and reduces repeated code. We do the same thing for either case. We just have to prime the if it wasn't explicitly passed. Note that this also requires a helper function: 

It seems like you should be able to do a bit better here. There's a lot of list creation and copying, which seems unnecessary. 

The class is reasonably safe, although I am more accustomed to seeing the user ID saved than the user name. There could be issues elsewhere. For example, is the cookie info only passed via HTTPS? How secure is the session? 

This is cheating a bit. Because is an , we know that its will return the values in insertion order. So we know that all remaining elements of will be larger than . 

I personally prefer something like a generic class that allows me the re-usability of a single data structure for handling responses that might fail. The class would look something similar like: 

If you have the possibility to use it, you could try the async / await pattern. It is however only part of the standard since ecmascript 2017. The pattern allows you to wait for promise before continuing the execution path. This means you could rewrite your current code in the following syntax 

Personally, I think the flag is not the best idea, or at least not, in the scenario you have added it, as it looks like a global variable. The scenario you have set up now, poses a few problems as you present it, nl: 

I am really unsure why you have a access modifier for the method. I don't see any reason from the code why you would need it, and I think it should be at most , but preferably . For the and members, I don't see why they should be members, and why you should be able to assign a value from outside your class. I think the should be private fields inside your class, cause nobody except the current would care if they are loaded or not (and if they would, even then, I wouldn't allow it to be set from the outside) To the outside, I would tend to give out only , and keep the implementation of it hidden from the users. WPF will detected the interface, and will update on any changes (as long as you don't reassign) I am also unsure if the of the TreeItemViewModel supports updates to the UI, if it does, it seems a part of the is not yet implemented for it. 

This is really one of the best examples that should be refactored to a method, and that could even be split into several methods. You have to ask yourself, what is variable, and what is fixed in my piece of code. Well, if you look at it closely, both parts of the condition seem to check if a keyword exist in a certain array, and in case it does, it will take the found element of the array, and split the words, and then it will check if these words are specific words, and if they are inside another array already, if not they will be added. As a side note, this part of the code I have the most questions about, simply because I didn't actually step through the program yet, and I cannot seem to match the code with your specifications, yet, so I won't change the functionality here, I will just show how it could be extracted to one or more functions Lets take a single statement to begin with, like this one: 

I guess if you just want to validate, you could write something like the following, though i'm not sure if that really answers your question. 

I think one of the most common errors in today times, is for example handling potential errors, as you try to do here: 

Again, your comment tells me something I already know. This block is confusingly indented. It's hard to tell what goes with what. Your doesn't guarantee that it won't crash on the . The expects to be an array, but you don't check for that. If is any other kind of non-empty variable (quite possible since it is never initialized in this block), it will pass the but can still blow up the . The can handle an empty array, but it will blow up on an unset variable or a non-array. Why bother with ? would seem sufficient. If there is something especially current about it, why not say instead? It can be hard to find styles if they can appear in both code and CSS. For that reason, I would tend to put the in a CSS class somewhere. It's also wrong to name CSS classes things like , , or . The HTML should tell you what it is, not how it should look. So the class should be something like . 

You don't need to pass and into your functions. You are passing everything by value, so you might as well declare them inside the functions. The versions outside the functions are never used. If you use Caridorc's method, you could just 

This also saves a lot of calls to to convert a single character into a number. You can make it slightly faster by changing to 

The first thing that you can do will reduce the code written but slightly increase the number of images that you hide. Before the switch, hide all the images, like so: 

I'd call this a . Also, as a general rule, I prefer to only name collections in the plural. This is a scalar, so I would try to name it in the singular. I wouldn't use a comment here, as this isn't where it's used. 

This will work, but it mostly seems a waste of stack space. It's probably better to put the whole thing in a loop instead. 

My only other thought was also mentioned in the comments: make sure that there is an index on . It does not have to be a PRIMARY key nor even a unique index. Any index will do. Without an index, it has to generate the query results in memory, sort them, and then send them to you. With the index, it can just read this query directly from the index in sorted order. 

On my computer, the iterative version runs in about ten microseconds. The recursive version is a few microseconds slower. 

You should avoid commented code in production. By the time that you are ready to send out for code review, you should have cleaned these things out of the code. 

Last time, was an . Why is this given the same name? What does it mean? The name would make more sense here. 

The paradigm that I've seen is to put the class loading in a separate file that is required based on the page. Also note that it doesn't seem like you'd need every class on every page. Shipping leaps out at me as a class that is likely to be used on only some pages. Also Login (except the single question -- is the user logged in, which might live better in User). I'm more accustomed to seeing the class files loaded right before they are used. In particular, the Database class is often loaded right before the first connection is made. See WordPress for an example in the require_wp_db() function. Incidentally, this is an example of a question that might be better off on Stack Overflow. You aren't really asking us to review your code. It's more of a PHP question.