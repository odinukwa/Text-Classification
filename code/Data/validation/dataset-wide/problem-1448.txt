Well. Actually it's much slower to approach this problem in this way. Instead you could simply generate the palindromes, from max 999999 down to 100001 and the largest you find, will be the sought number. that would look something inline with: 

Your labels variables does not contain anything, you can not chain very much in python. It's a design choice from the developers. So the variable of the labels is unnecessary. This: 

is also unnecessary because, None is always return from a python function that does not return anything. 

If you put a statement like this as is in a function, you are repeating your self. In the same sense that 

In the problem you've provided each induvidual pairs order does not seem to matter, so load them as such. If you do that, you don't have to sort the in the calculation function. If you don't, you'll resort them later. Again and again. Them more samples you use, there more time is spent doing this. Times: 

Encapsulation: You are not working with kwargs and args, so don't name them as such, in the same sense that you should not name your variable i, it is very confusing. You are dealing with three different args and kwargs, namely the job, the executing process and the classes, and args and kwargs in the class, should belong to the class if needed or not. 

You can provide a class that moves by inputting numbers, and a class that moves by calling (or whatever). is a terrible name. Nobody expects the Spanish Inquisition. Also, nobody expects a to take a parameter. Make that a or or something. Every move is followed by a check to see if the board is in a terminal state. You might want to make your move function a boolean, or define an exception, so that you can merge those two operations together. Your function spends time calling . If you change your implementation, you can probably let the garbage collector handle that for you. I don't think does what you think it does. If I understand your class, you can get what you want just by shallow copying the list. You set parent in but you don't append to ? 

So if the user has a bad criterion, you return a warning, not the player stats. Meaning the web fetch was wasted traffic! It would be better to use an method, or use a lazy load test, to defer fetching the data until such time that you know you are going to use it. Return a consistent value When I call the return value might be a triple. Or it might be a 1-tuple containing a list. Wait, what? You need to rethink this approach. If I am not allowed to look up a players stats when that player has violated whatever criteria, then there needs to be a consistent return value. Don't make me compute to determine what you returned from your interface! Either raise an exception (exceptions are cheap in Python, remember) or return a (error, result) tuple always, or something. Make it consistent and easy! 

Architecture One thing that jumps forward is that you're going straight from the UI to your datasource. In a three-layer design (UI, Model, Persistence) or MVC (Model, View, Controller) there is always a layer between the UI and your datasource. A samplesetup would be this: 

Avoid try-catch in a unit test -- that means you're doing it the other way around. Using you've got most of it covered already though I could see why you also want to compare whether the code has changed. 

I'm not feeling comfortable with this name for a public member since it's not of the form -- might be more appropriate. 

Always use braces so I can distinguish easily between what should be inside that if statement. Right now I can't tell for sure if that is intended or if it is a logical error. It will also prevent you from introducing errors when you add an expression to your body without thinking about the braces. If anything, it's also a matter of staying consistent. Main I prefer to put my method in a separate class so I always have instant knowledge of where my application starts without having to dig into my separate classes. It's also more comfortable to work with when you have to setup certain things like the "Look and Feel" or logging. 

Now what I would do if this was for someone new to programming is relay on something else then abstraction of the init and abstract in something like biology: 

To me it seems like the repetitiveness in your code is the worst problem, you should not repeat yourself and you never have to repeat yourself, and if you are repenting yourself, you are doing it wrong. You could do something in line with this: 

What would be the coolest solution? It would be to have a class inherent ThreadPoolExecutor and override the specific part of the class that executes the the threads inherent to ThreadPoolExecutor whit what you want to do. 

Python provides an argument here: . or is mainly used in if statements but could also be used in line: 

Instead of choosing a random chore, you could just shuffle them all beforehand, that way the randomness task is done. 

You'll have to multiply each of the factors returned with the factors of two that the original number contained. But you remove the need to check even numbers, ending up with only the faster of the two ways your code can go. 

The manager might be unnecessary, you are only ever transferring one value. What you are looking for might be a Queue. 

Notice the use of . This indicates that there might be multiple entries that satisfy your query criterium since that is how your for-loop will be interpreted. If you instead want to distinguish between multiple-but-one and one-and-one-only, consider using . This same approach goes for . In retrospect I'm not so sure if I prefer this over a loop but at least you know about the option. 

For such a small sentence, I would allow inlining that multiplication. The meaning is still conveyed clearly. 

As far as I can tell you only show the dialog once (to get the location) and afterwards you only use the filename. I would keep a local field pointed to the filename and create the dialog inside instead. That way you can also easily check for instead of doing . 

I see this pattern from time to time but I don't like it: or . That's what overloads and perhaps named arguments are for: all you care about is the part, everything else is just one specific way of retrieving the data but does not have to actually be a separate method rather than an overload. I would change it to and call it like this (and considering your variables are aptly named it can stay like this): . If for some reason you don't like this, you can always do but that doesn't add anything so use it when the variable actually isn't clear (like ). 

And a similar statement elsewhere in the function. I would suggest writing a helper function that does this work for you. Something like this: 

You're trying to get cute, and use a ternary expression instead of an statement. You need to study the relationship between statements and expressions in C, and learn about assignment expressions. You want to fix this either by saying this: 

The code you have posted is straightforward and basic. Because of this, I'm going to assume you are not super-experienced with Python. I'll make some direct suggestions to go from your current code to a faster version of your code, but I don't expect you'll be able to make the time limit with this structure. See @vnp's answer for how to do that. You wrote: 

Bug: If, during the "pick a sigil" part of the game setup, player 1 simply presses , the game will play empty-string vs. "X". It looks bad. Your code has several problems. Let's start with the most basic: 

It seems to me that filtering the list should be first, since that will shorten anything that comes later. You do a lot of code that appears to re-compute values that you should already have. For example, the constraints lists, the candidate records (dictionaries), the predicate lists computed into . Is there no way to store these into your DiGraph or someplace else cache-like, so that you don't recompute them? 

Given this setup, does it make sense to do the call? If throws the exception, the call will never be evaluated. 

You see how ugly this is. Use the generic so you can have strongly typed comparisons which don't require casts. MSDN 

I am not great with datetime styling but I am 105% sure you are reinventing the wheel. Take a look here (standard options) and here (custom options) for all the different ways you can create your own date and time representation. 

I will never look at another test to see how one test works because that would essentially force me to read and understand every preceding test. I don't like when you're not actually doing something that can't be done in the constructor. You're forcing your fields to be for no reason: just put the initialization in your constructor and remove the modifiers. is the enemy of unit tests. Your tests and don't contains any asserts. This is not a test! Tests verify an outcome. At the same time you should also restrict the variables to their least accessible scope. I see a field and which are only used in a a few tests -- make them local variables instead. The less I have to look away from the test, the better. On the topic of naming: I'd change to (you're talking about multiple tests after all). Furthermore: fields are , not . Lastly: stick to one English, preferably English! This counts for both messages and variable/class names. For an introduction to unit testing, take a look at my blog. I expect there to be a followup on that introductory post somewhere in the next 6 months. 

Dict and sets has there differences, one being that membership testing is faster with sets, they also consume less memory, which will be important for the efficiency of your program. So a pythonic way of defining "english" would be something inline with: 

Instead of working with the objects in people_data i suggest you work with data structures. It becomes easier to manipulate that way. The data you care about can be represented with: 

I'll go for the styling of your code. Firstly, python uses docstrings. There are one line docstrings and multiple lines docstring. 

Since I misunderstood the question. I offer up a second take. I have not convinced myself that log10 will increase the efficacy of the script but I use it anyway to show the concept of using math instead of len on strings. 

Whenever you are dealing with user input which needs have to follow certain rules, it will always makes sense to separate it from other parts of the code like putting it in a function. So by my interpretation of your code in which I started with your code, with out being as nice as you are, would be this. 

I ended up with this, and I don't claim that it is any better then yours. But I'll show it anyway for completeness. 

I don't believe a Semaphore is needed in the first place. Remove it, register an event handler and continue your "act" and "assert" phase inside it. Something like this: 

This will also have the side-effect of making sure you don't accidentally type and since everything is stored in one place. Spacing Keep your spacing consistent! In a short timespan I see these three lines: 

If you push these two changes through to the several places they manifest, you'll find that your code has shrunk a lot and is a lot more readable. 

Why are you using to get the value and then placing a useless call to to discard of the value? That's not how a stream is intended to be used: simply call from the start then. 

You're returning a in the statement of your . I would use an exception (like ) to clearly signify that exceptional (and incorrect) input has occurred. 

Duplication Your statements are very similar to eachother; similar to the point that I'm pretty sure you copy-pasted most of it. This is a sign that you need to factor it out to a method. An example could be this: 

since you should just overwrite that variable with . Ultimately, your code would look something like this: