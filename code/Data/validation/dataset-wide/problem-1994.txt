A $15/hour employee costs more than $15/hour, depending on your tax jurisdiction, benefits, etc. It's also irrelevant. The question is what the market will bear. You are a known quantity that produces a known, quality result. That's valuable. And if you're willing to walk away, there's no downside in asking for too much. 

Do regular code reviews with the entire team, either daily or weekly, depending on what's right for your group. Correct any code it before it merges to the main (master?) branch of your repo. It's likely you're just having issues with a dev who can't do the work to spec without plummeting in productivity. Code reviews will help change that, and force all code through a filter that correct errors. 

Unless you're making substantially more than your colleagues AND your company is in financial trouble, this isn't about your paycheck at all. It's a communication problem. Ask him bluntly what the real problem is. If he balks, point out that you haven't been paid on time in months. "Are there financial problems? Are you unhappy with my work? I'm getting the feeling you're basically asking me to leave." Fix the communication problem with blunt but professional talk. Don't act defensive or even cast the shadow of defensiveness--but put the issue of your work on the table so he understands that he's sending this message. If there is a financial problem, get information and weigh your options. By the time payroll is impacted, things are bad. Is there a significant, positive financial event in the immediate future? If not, get your resume out TODAY. If he's just being a manipulative jerk, get your resume together and expect to have him steal your last paycheck. Time your exit accordingly. 

Firstly, do not address this with your tutor directly. If you can feel how much the weight of losing an internship, you can imagine the weight of losing a full time job in your chosen career. Secondly, you have an opportunity to approach someone else you'd like to work with, particularly if it is a colleague of your current tutor. Be careful--you do not want to jump ship early. You will appear opportunistic and disloyal. But you can and should establish a relationship so there's an obvious place for you to go. When a firing is taking place, the fate of an intern is not given much thought. Use that to your advantage by approaching someone you have established a relationship with once the new hits, and simply handing this solution over to management. Handing someone a form to sign is far better than handing them a problem to solve. Failing that, don't fall by the wayside. Your only job once the news hits is to find a new tutor. Unless someone is looking for something particular, any other tasks you've been working on can wait. 

Code reviews are magical places where junior developers can introduce new techniques and best practices into production, without ruffling feathers. The focus is on the code, not the person. Don't condescend, over-instruct, or generalize beyond the current example. Simply state that for this particular case, there is a useful pattern you've had success with. Be specific about a single issue that can arise for each change. "If we change this to that, it will leak memory. If we change this to that, it will fail gracefully for poor inputs, such as this, which has occurred before." In contentious situations like this, you "rotate the code"--everyone reviews the code, but the person to your left in the meeting makes the changes (or next tallest, or next birthday, etc.). Everyone benefits, and no one loses face at the time--although people who require the most changes become obvious over time. 

You don't sound upset that a co-worker snubbed you, you sound upset that a friend snubbed you. It sounds like there is a crossing of the line between co-worker and friend, and this will be far more complicated if work-related issues arise. IMHO, it can be fine to be friends with co-workers, although that obviously depends on the situation, and the burden is on the friendship to address business separately, not the other way around. This is a friendship issue, not a work one. You should work hard to keep it that way. 

The small talk is revealing that your team is eager to speak about some of these issues. Embrace it, it's a great thing--harness that energy. If you're not using agile development already, you can start an informal process. Early every morning, ask everyone to state what they did yesterday, where they got stuck (if at all), and what they intend on doing today. Call everyone in turn, and bring the conversation patiently back to the person you've given the floor. It is part of the normal stand up meeting in the agile to enforce that 

The explanation won't matter if you can't get to the interview. Staying for another half a year isn't going to change your statistics all that much. Is it possible to leave off the one month job? This may be the rare case where a minor gap looks better than another job. You can explain the gap during an interview with the absolute truth if anyone asks, but at least you make the interview. Another approach is to use a skills-based resume rather than a chronological one. This would emphasize experience over employers. It's important to note that the average millennial in tech switches jobs about every 2.5 years. It's not like it used to be. 

Step one, relax. ;-). For future reference, here's a good method: "I'm available Monday through Wednesday before noon. How is 10am on Monday?" The does a bit of work: It's flexible. It establishes your preference. It doesn't just kick the ball back to them for a decision. It is definitive without being pushy. It allows a "yes" answer. You probably have more detailed availability, but this is a balance of simple, decisive and flexible. For now, the ball is in their court. Let them make the next move. 

Establish office hours If you're frequently being tapped for information and it's disrupting your workflow, establish time when you are available to answer non-emergency questions. Advertise this as a service--people will get your full attention, a little extra time, a complete answer, and a commitment to follow-up if necessary. Are you doing anything different? No. You'll spend less time because you won't suffer the context switch, and you're already going to give people answers and follow-up if you don't know. You do accomplish three things--you can plan for the disruption, you look cooperative and proactive, and you let people know when you can be interrupted. Most times you'll be working just like normal anyway. If you can plan for your least productive time of day, that's helpful. If you plan it for half an hour before lunch or the typical end of the day, people will have their own motivation to be quick.