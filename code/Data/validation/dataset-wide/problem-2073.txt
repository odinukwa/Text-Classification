Can the company afford to take this long-term approach? Getting rid of technical debt is great, but not if it means bankruptcy. Everyone wants quality code. You have to make sure there is someone who is going to pay for it. The other developers have given their input. Now it is time for someone to make a decision. If the group has the authority, take a vote. These decisions should have been made before a new hire was put on a project by himself. If he falls behind, the other developers will have to pick up the slack. 

Something isn't adding up. You say they make mistakes, are slow, and recognize you as a senior and ask for help, so how could they not interpret this as needing to learn to get better? I guess if you say it explicitly, they may get offended, but it's obvious they're not as good as you. Your question seems to speculate on their responses without any of their perspectives. It's like you have no working relationship with "your junior" developers. They need to be a part of the solution. It's inefficient for all of them to come to you individually with problems that stem from the same skill deficit. Ask them what you can do to show everyone how to do this. Maybe you need to set aside a training session or generate some documentation/training materials. They can't keep calling themselves senior but not actually do anything that indicates they really are. It's not about having a false-sense of superiority that makes one a senior. You have to be able to get things done at a high level and less time. If you find they're not willing to take responsibility for their own growth and use your time as a resource wisely, there's not much you can do about it. Management would need to step in and provide the proper motivation or find the right people. 

Not trying to make this personal, so when I say "you" I'm referring to our hypothetical CEO. I don't see why there isn't a 3rd choice and do nothing. You get to voice your opinion publicly and so do your employees. Who died and left you king? You think you can just say anything regardless of who you offend and your employees just have to take it? Now I don't think your hypothetical situation is realistic. 

I think to be more objective about your situation, you first need to differentiate your basing it on who you are and what you know. Getting over your personal perceptions of who you are and whether or not you deserve to make more money can be easier said than done for most people. You may need to look into getting professional help. Personally, I've never had that problem to the degree you're experiencing. If it prevents you from taking better paying jobs, get some help. Addressing your feelings like you're not technically qualified may be accurate. If you push yourself hard enough in your career, you will face obstacles that you don't know if you can over-come. I try to look at my prior experiences with new things and have discovered that I've been able to figure them out, so why not the next challenge? I learned one programming language, why can't I learn another? There are experiences I've had that are a benefit to my current and future employers. The world is not fair. You will not always be around people who make decisions are the same ones who can accurately assess your talents, so you may find times when you're underpaid. Things tend to balance themselves out. 

Most people take jobs and within certain teams are doing so based on what is best for them and will take the opportunity to go for something better. There's nothing about your situation that indicates anything different, but if you persuaded, or encouraged the other people to join this team under false pretenses, like you knew you weren't going to stick it out because of not getting the promotion you expected, you would have to deal with the moral dilemma and the consequences of lying to and abandoning the team. There may not be any negative. How would we know? If there is a chance of any of your current team members being promoted over you, there could be some regrets. 

Remove what is no longer needed. Organize the information as much as you can. Document what you've left behind, why, where and how it can be used. 

If someone is hiring and they place a lot of value on your code portfolio, they will spend more time reviewing it and less time on the tasks others rely on (e.g. trivia questions, what-if scenarios, code tests, etc.). Also, they're more likely to know what they're looking for and where to find it. If I want a backend developer, I'll probably never open your css files. For those that don't rely on your code samples as much, you can provide a little direction in your cover letter and help them focus on the code that pertains to this position. You will have several interviews. The first-level HR interview, will never look at your code and all you can do is hope they pass the link along in a usable format and not scan it or print it out before sending it to the development team. If they talk about wanting to view your code sample, suggest sending an email with with links to parts you think are relevant. Your ability to do this demonstrates your understanding of your code base and how it is structured. I have more confidence that the candidate actually wrote this code when they can discuss, make suggestions and guide me through their code. It also shows an appreciation for not wasting other people's time. You either know how to code or you don't, so let's get to it. 

They're not good at interviewing. There will be very little chit-chat or words of encouragement. If you feel uncomfortable, quickly tell yourself that you're doing fine. You'll get no indication of how well they think you're doing. They'll ask questions and hopefully write down your answers to possibly score later. Their idea of what things are important will vary. You may feel like you're playing Programmer Trivia. You're not going to get to write code over the phone. Ask if there will be another interview where you get to write code. If not, ask why not just to spread the word that programmers programming during an interview really makes a lot of sense when you think about it. Make sure you ask questions about the way things are done. Do programmers have any say in projects, tools, estimates, hiring, etc. 

Sit with them as they use the IDE or other tools of the job and give them something to do at a computer. It's not just purely can they get the code right, but: 1. do they know their way around? 2. diplay basic keyboarding skills 3. can they tell you why they do what they do? 4. coding style - at least have one 5. Do they ask necessary questions? 6. Look at some existing code: ask if they can tell you the good, the bad and the ugly (At least find out if they've seen the movie.). I've heard all the arguements about being nervous and making minor mistakes, but any question you can ask sitting at a table, you can ask at the keyboard. If it's more of a conceptual question, go to the white board. Why is this a last resort or never considered at all? 

I'm not seeing the negative consequences of giving more notice. If you're able to give more notice, does that mean you don't have another job right away? You can give the agreed upon notice and see if they want to negotiate the extended period. Maybe you're burned-out and look forward to some more time off. If you have fulfilled your contract up to this point, it would be a shame to burn the bridge right at the very end. Let them make the first move and let them know you're willing to consider other options. Don't be too sure to feel you're not replaceable. Someone over there may have a kid fresh out of college that they think would be perfect for your job. 

I've done this with 3 out of my last 4 jobs. I was stressed-out during the process, but I look back on it and laugh (time can heal wounds). Each time I was really the only employee working from home, so I was never sure. In my case, I told my manager(s) I was moving and suggested working remotely. You should try and create a trial-period. Most things in life and work are about risk. Ask if you can do it for one to two weeks as a trial period while living in Phoenix. You want to make sure your boss and coworkers are capable of handling things as you suggest. Also, take special care of clients during this period. Meet with your boss to review, make adjustments along with a transition plan to moving permanently if you feel you're ready. Hopefully, there is enough of a reason to off-set any setbacks by having you work remotely with having to replace you. Just let your boss know it's more about your personal life and how you're willing to make the adjustments necessary to still be effective at your job. That's all anyone can ask. Beware with some companies, having employees in other states can present tax and possibly insurance concerns. Good luck. 

Identifying Talent - did you find and select these people? This is important if you will be involved in hiring decisions. Negotiating Fees - Similar but not exactly like a salary because of other benefits involved. Evaluating Work - Were you able to monitor these collaborators and make sure they contributed? How did you handle those that did not? You'll need to do this as you manage a team. Distributing Work - With collaborators they tend to specialize, so it may be clear who does what, but there may be overlap that you've had to contend with. It can be more difficult to manage this type of team since you have to coordinate when one part is finished and another person needs to start their part. 

They say recognizing you have a problem is the first step in solving it, so start solving the problems. Be diligent about addressing each issue. Over document this part of the project. Start doing some research and if there is anything you slightly suspect you do not understand, ask for help. This shows you care enough to ask for help. You never know, allowing someone to teach something to you will help them fully understand how it works. Next time you have a new project (especially in an area you're not familiar with), arrange for some intermediate review of your design/code instead of waiting to show it to everyone in some big meeting. Others will ask you to do the same for them if they're smart. If someone would have prompted you with just one problem, it may have lead you do discovering many of the others yourself. 

I think you are right in wanting to stay in your area of expertise. There will be times when there is some overlap like in this case. You can still make sure your concerns from the technical side are still addressed. Although you may not make the final decision, it is important that you still identify and emphasis if necessary, the risks the PM is taking by accepting or ignoring certain trade-offs. In this case, you can have these features, but there is a risk of making future changes more difficult, they'll take longer, and could have more bugs. In the end, you're making suggestions and the PM is making decisions. Hopefully, your level of responsibility is proportionate to your level of authority. 

Do you really want to get into a position where you "feel" you can do this and just think that it is easier to get forgiveness than permission? You should be upfront about it, but like other aspects of the interview process, you should wait until later. This is part of the salary and other benefits negotiation. Some employers may bring this stuff up earlier and some will wait until they are closer to or making an offer. A salary adjustment could be offered during a trial period. Focus on your prior experience with this practice and how you were able to make it work. There are millions of people working remotely from part to full-time. As long as the company has the technology in place, you and the team should work around it.