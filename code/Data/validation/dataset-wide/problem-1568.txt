LISTEN_FLAG Try to name your variables so that they describe the class/object the are in. In this case it would be more appropriate to call it . 

I guess you already know that having three almost identical forms isn't very good. In case there is a bug somewhere, you need to fix it three times. Let me try to show you how you could implement it with only one form. Keep in mind that I couldn't actually test it and I wrote it in notepad. It might have some bugs or might not (or rather certainly isn't) be complete or even compile but it should give you a rough idea how to start. 

Fluent API extensions Several extensions provide the necessary framework for building concrete requests and calling actions. The first extension creates an IResourceContext for a specific resource - it stores all the necessary data to chain the second and final extension for executing the http-methods. 

The most important thing is to always put everything in a dedicated classes. First you need to get the currency rates from the url so the will do this job: 

You didn't add the performance tag so I assumed enumerating the children collection wont't noticable. Should you work with a database and have many thousands items then creating categories an groupping the results by various ages might have a better performance. For a few hundred items it doesn't matter and premature optimization should be avoided. 

This is a very inconvenient way of adding new items to your dictionary because you are accessing it twice for each new item. With you can do the same with only one access to it. This means that if you could retrieve the value then you already have and it's ready to use, there's no need to use the indexer anymore. If however it's not there, then you just add it. 

Why can I set an id but cannot read it? If I'm setting it for the current then it should rather be a property although I doubt an id should be settable at all. If this is however for something else then the method name does not clearly communicate this. 

You can improve the by reusing the argument so that you have only a single instance of the helper. The helper maintains a that stores senders that are currently handled. This will allow you to use the return value of the method which is if the already has been added an thus acts like your variable. Finally you the from the set as if you were setting to . 

Don't abbreviate the names like . Use full names and preferably meaninigful ones like or . doesn't say anything about what the binding source holds. 

you shouldn't use abbreviations like or general names like . Call it and . In fact this could be even an and be an extension. A general convention is to call it or in this case . 

Let's make it more generic and declarative with attributes. This should upgrade your current solution. 

The inlining is driven by the . It stops at each element with the attribute and checks if there are classes prefixed with (it's my custom prefix that stands for mail). It then looks for a style in the parsed file. Its name is always . When found, it sets the attribute and removes the one. 

you don't need so many assignments. It's fine to do the ordering first and then call only once at the end and assign the result to also only once: 

You are not helping yourself with this message. Each time any of these occurs you'll need to check both cases instead of only one. 

where for each point the is executed however its signature isn't easy to understand and actually needs commenting. You can avoid this by creating a custom delegate: 

I'm experimenting with an alternative abstraction layer for logging that is build on top of the Reactive Extensions. This allows me to easily add features I need to my layer and map logs to any other logger I want (not shown). Filtering and buffering etc is also very easy because Rx already implements all that. 

Whether you use or reflection internally to access those properties is another question. If you however can change one of those external dlls then an abstraction would be the obvious way to solve this: 

If you don't want to use a generic message like This field must not be empty. then you can use the property to specify the key for the string: 

I needed a custom for the three main color formats: decimal (127,127,127), hex (#12AABB) and name (Red) so I've implemented each format in a separate classes that are derived from a base type . It provides some common logic. I did my best do make it bullet-proof and as clean as possible but maybe there is still something to improve? It uses quite a few ReSharper attributes to make handling easier. Implementation Three color parsers as one snippet: 

Explicit types vs var You mix explit types and . You use them interchangeably. This makes your code look very unprovessional and messy. Pick one and stick to it. (I suggest picking ). 

I think even the simplest solutions can and should be made modular and SOLID. Let's try to refactor your game to give you an idea how to begin... We start with a city. A city can have different squares where a square is just a simple character/symbol. 

and a property for each value. Hard words by this is insane. Why don't you use the dictionary throughout the application? The code would be a fraction of its current size. Imagine adding the one item to the . You need to adjust virtually every part of your code. Consider using a dictionary for the construcotor too and if you need different configurations with different default values then a should help you predefine them and maintain in only one place. Example: 

HashSet Instead of having a list with predefined lengths, you can calculate them based on the max length and save them in a for faster lookup which is O(1) in comparison to the list where it's O(n). LINQ To determine whether a word is a pyramid you can use LINQ where you first group each letter and sort it in the ascending order. Then you check if the count is increasing by one: 

Another thing I'd change is the variable. If you made it a , you wouldn't need the for or you could just use a and remove the two s. 

Create a few general-purpose methods first. They'll take care of reading the input. The main method is the . It'll keep trying to read until the input is not null or empty. 

Some custom object would use it like this (my real linked-object has a few more additional properties then this simple example): 

Seeing this, I need to say stop! This is an indicator that the should be abstract and the method should be abstract too and overriden by the derived class to implement its own calculation. Alternatively you could pass the calc function to the constructor as a delegate if you know there won't by any other differences. Or implement them in an and pass this as a service via DI. As you see, there are multiple solutions. I prefer abstract class if there are more differences and a service if just a few small like this one. But hey, nothing stops you to do both if necessary. If you don't want to do it (yet) (it'll probably bite you later when you have even more differences between the two) then you should at least make it private and use only this one: 

Example The usage did not change much because most of the changes were internal ones but for the sake of completnes here's the new use case: 

Such a template contains only a message that is rendered from custom properties (if any) and the name of the exception is derived form the template's name. 

I one of my tools I use the user can define grouping for a . The criteria are known only at run-time. To achieve this I use a with a custom dictionary comparer that the extension cosumes so that I can aggregate the groups. This works pretty well but I was wondering if there is still room for improvement. The number and names of columns can change. There is nothing known about the until a JSON configuration is loaded. This is an example of such a configuration from one of my unit tests. 

The method of the does not need to repeat the implementation of its strongly typed counterpart. You could use the new operator and redirect it like this: 

Let's talk about it later when you have that many tables but for now in order to avoid a file with thousands of lines (which is highly unlikely) you should already start with different repositories. Now you have only the which is not that bad by itself but it can be better. In your case it should be a . So now you have one for people. When you add more tables later I'm pretty sure you can come up with another repository for them. It doesn't have to always be one repo for a table. You have have repositories that are all about people and work internally with mutliple person-related tables. Then there might be repositories that work with other data like files etc. Just don't put all your code in a single file. Group the talbles together by what makes more sense. 

The idea of scope is supported by class. I admit it is partialy based on the ASP.NET Core implementation for but under the hood it's quite different. My sope is a dictionary and it can provide default properties like the one. 

It might also be a good idea to move the code from the constructor into a new method like or so you can extend the dictionary later if necessary. Usually those dictionaries can learn new words. 

To get the you need to explicitly and deliberately cast it to and see and know that you are converting and may loose precision. Getting the via silently removes the fractional part. 

If you do this you should rename the method to or return a new list that contains objects with new values without modifying the input. 

The second responsibility is the object counting the events and checking if the threshold is exceeded. I call it and implemented it this way: 

Where the is now also abstracted by an interface and can be faked for testing or exachnged for another navigator later: 

Search algorithms I see that your search algorithms share one method: . If you don't want to repeat it in each algorithm you can as well create an abstract class that already implements it and derive the search algorithms from it: 

Since is a you should use . You might be sure now that it is either null or a valid string but this is a dangerous assumption. 

Partial classes are a great way for organizing code and I find there should be more of them. In fact each interface should be implemented by its own partial class to avoid using so many s. 

Initializing the class already with an updated-value is somehow counterintuitive to me. Why would I want to do that? I thought it should track changes and not be created in a changed state already. 

I'm writing a parser and I need to iterate through text vertically (down to bottom) and horizontally (left to right). This alone would be easy but some text parts need to be rescanned by another parser and for this I need to reiterate over random lines or a text range. I wrote two enumerators. One for enumerating all lines or only some of them: 

You know you should separate it so do it. You know you'll need the names later so use meainingful names for everything. 

You use linq's , why not the extension? The loop is huge and the printing along the way makes it hard to maintain and to read. We turn it into an extension that returns each partial result and of course we remove the printing. There is another thing I don't like about the original solution. Most of the time it's not such a good idea to modify the original array. So I make a copy of it and sort the copy. The loop can be turned into a loop that already supports an index which is easier to handle then with a . We start looping at the element backwards. The final result is: 

I don't agree with the other answer becasue those exceptions are not better then the original one as they also do not inform me about the valid range for any of the parameters. For example this message is unnecessary stairs and / or stride are out of range. as I already know that from the . What I don't know and actually want to know is what is the valid value? This means you should not use a single validation method for all parameters but check each one separately and throw an exception with a helpful message. In case of the it should be: 

The first step is to register all components in the container. In this case you can use tuples to define your interfaces, their implementations and base-addresses. Then you loop over this list and register each component. At the bottom I also register one of the users that depends on the . 

This is not how it should be done in WPF especially that you are not validating the text but just changing it upper case - you validate only the numeric input. The right way would be to use the Binding Validation This method would allow you to write specialized validators without s or es. 

I'm not sure whether it's really necessary to use a dictionary for the regexes. In most cases the static is sufficient and it already does the caching thing: 

The updated now enqueues tasks sending emails on that queue so that the service can handle them later and also handles its own exceptions. 

As long as you don't face noticable performance issues I would chose whatever method seems to be better for you. The XPath works so you may stick to it. I would however build the path in a more generic way by specifying an array of attribute names first: 

I do this because I assumed a longer string is better then a short one so I add 1 to odd lengths but this is actually not necessary as C# will round the number to the next lower when dividing. This means that as far as division is concerned. If you're ok with shorter strings then you don't need the line with 

With such a lengthy parameter list you can use their names and write them in separate lines to improve readability. 

You should separate this loop from the other one. This means instead of getting all files and deleting reports and then skipping those file names in the second loop, you first delete the reports and then process the remaining files. This can be done by specifying a search pattern for the method 

This returns the first interface that I use to chain other extensions to finally get to the operator I want to test: 

I use NLog everywhere and I really don't like writing the inserts everytime. You need to write the same variable three times: two for the insert and one for the parameter for example: 

I've been working on a REST-client. The client itself provides only very basic and generic functionality. Everything else is done with extensions. Its raw usage does not need to be convenient but extendable. It should allow to modify all important parameters for each request (like request headers) and protect others (like http method type). Convenience comes through extensions. 

Here I find the too general. It looks like it should be called e.g. . Alternative? ;-) You could use regex to clean-up the string.