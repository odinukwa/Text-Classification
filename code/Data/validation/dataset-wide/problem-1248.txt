you can improve the time management by adding a millisecond counter and testing against that. This allows other things to run/animate as well while the sprite is waiting on the next frame. is usually a very bad idea for timing when doing interactive programs or when multiple things are being delayed. 

This immediately tells the programmer that both bodies must be players. The later ones less so, You can invert the condition and put the markForDestroy call in the then clause. 

In you don't need to check the depth as will return if the stack is empty. The repeated allocations and frees kind of rub me the wrong way. Instead you can add a member and allocate from that: 

Instead of starting a new thread you can instead create a executor which will take and reuse threads as needed. you can create a executor usign one of the ' static factories. This code relies on responding correctly to a thread interruption. Which you didn't include so I can't judge it. (A lot of IO functions don't respond to it by default). The catch-all when waiting on the result is not a great thing. You should instead catch only the specific exceptions you can get and only declare those you throw. 

I would supply all the variables that you have hard coded into the method i.e. localPath, filename, ftp server, networkcredentials. Otherwise how can you re-use this method for other operations? I would probably avoid making the method static unless there was good reason to. In your finally clause you don't check if responseStream or writeStream are null? What if they never got created before an exception was thrown? I personally think unless there is a very valid reason you should always do something in an exception catch block, whether it be logging somewhere, re-throwing the exception or anything. Otherwise the calling method will have no idea that something went wrong. What is _result? I don't see it being set and I don't see it being declared anywhere? If Length is a constant, make it a constant. i.e. const int Length = 2048. I might also consider implementing some sort of call back method so you can provide status updates on the progress on the download. Just a suggestion, not sure how you would implement it exactly. 

I guess my main reasoning is that makes it clear what we are retrieving where as leaves it open to thought between and . Neat idea thought. Be interested to see what others think. 

This alone means it's O(n). Because stack has internally an array to hold all its elements that needs to grow as it holds more elements. Each reference to an element also takes up space. 

I would also store the value directly. This requires to be a reference type but that's already the case. You do need to pass which state is the final state. It is very likely that the tape would need to grow. If the tape can't grow then you technically don't have a turing machine. Also it may be handy to be able to initialize the state of the tape before starting. 

However you look up every werknemer a lot based on the ID. You should use a instead which includes methods to check if a key is already used and a way to get the object back with the key: 

Your implementation requires Automatic Reference counting. If you have disabled it (for whatever reason) then you leak the ; you should release the things you allocate and don't return. That is add before the return. 

With a bit of knowledge of modular math then you can know that for numbers > 0 except when dividable by then it is . This simplifies the algorithm a bit. 

Could you make the the account status and even account types an enumeration? I tend to try and err on the use of enumerations over string literals. I believe the latest version of Linq to SQL supports this? Why do you need to expose the repository on your IBankAccount interface. Why would the interface even care about a repository? I think this is better being supplied to any concrete classes via it's constructor? It would also make unit testing easier I would think. I personally wouldn't pass in the whole BankAccount object into the factory method. It only needs the account type so I would pass in that. Probably I would look at using a switch or if else in that factory method as well and throwing an exception if you can't create it (depends on your requirements of this method). 

or if you wanted to make it explict that the ProductViewModel always needs parameters then create the constructor to take the IFooRepositoriesContext: 

I don't see anything that stands out in this. It's fairly small and quite compact. The only thing I might suggest is changing the public fields to properties. 

The first thing that I thought about was how could we get rid of the duplication in the PropertyGetter class public methods. So I first went about creating a common method to do just this 

Insertion sort on short arrays is much faster than quick sort, we can use this to make the last recursion steps quicker. The second optimization option is pivot selection. Your first element is the pivot is very slow against already sorted arrays. Something like getting the middle element would then be better. 

Node can be a private nested class of RBTree. There is no need to access the nodes of the tree and allow the user of the code to invalidate the RB invariants. Color can be just a boolean with true being RED and false being BLACK. If you delete a node then you also delete all its children. 

The fastest way is to give each thread its own RNG seeded (and sometimes reseeded) by a master RNG in a thread-safe manner. 

Capturing groups can be handled my marking some states as starting or ending captures. During simulation you then have a list per NFA state of captured substring indices that you propagate along. If the current DFA state contains S1 with a capture with an outgoing connection with to S2 and it sees an then the new state of the DFA will contain S2 with those same captures. If 2 paths with captures lead to the same NFA state then you discard one of them based on a priority rule that is filled in based on the greedyness of the operator that led to the merge. 

As I think George Howarth was suggesting in his answer you can reduce nesting and avoid the Arrow code effect by returning early from the method. This helps with code flow as well as readability. As already mentioned if you can remove constant literals from your code that is good. One way to do this is to move these to private static or const variables or even supply them to the method. 

Recently I had the need to make some ajax calls within a MVC 3.0 with Razor and jQuery application. After a bit of trial and error and refactoring it was discovered that a number of different needs were required. These included: 

Alternative - XmlSerializer One alternative I have used in the past to parse Xml into objects is the .NET XmlSerializer. In your case you might do something like: 

Honestly if a colleague said that to me then I would immediately say. Great thanks. What do you think I could move out and why. It's great to offer feedback but generic feedback like that for me was never useful and I personally always prefer specific help to follow. Looking at that code it doesn't look like you any logic there to play with, so unless he is meaning the Model -> ViewModel mapping then yes, you could move that to a Mapping layer but I don't consider that a necessity. If you were considering that the code would probably benefit from using a tool such as AutoMapper to achieve this. Using AutoMapper The trick here is you define your mapping rules in the AutoMapper configuration so they can be reused whenever you need to map X -> Y. 

As for synchronizing if you only needed the consumers to run once you could have used a but that cannot be reset. So you'll have to use a . With a cyclic barrier you can make the producer the Runnable that gets invoked when the last thread calls its . Then you can be sure all but one consumer threads are waiting for the producer code to finish. 

As a more general suggestion there is a better method than reading the entire file doing some processing and then writing the output. Instead you can read only as far as you need to process a part of the data and then write the result out again. Whether you can depends on what you are actually doing with the data. This is only possible if you have a 1-pass transform. 

This will loop over the data at most O(log n) times and puts the elements in heap order. However for pulling out the data there is no way to only look at the affected elements in O(log n) time. Which means that you can't sort a linked list with heapsort and still be in O(n log n) time complexity. Instead to sort a linked list in O(n log n) time you would use merge sort. This requires that you are able to be able to split the list up into separate linked lists in that you can merge. std::list has this functionality with it's member function. (It also has a member function that will do that built-in) 

Yes, I believe so if you want to write a bit of javascript. You would need to create a hidden field and on every select list change event set the value of that field. Something like 

Yes, that is how I would typically do it. As an alternative concept which I also like to consider at times is using to convert a list to an array. It would go something like: 

I guess if I was doing TDD I would have created the view model and stubbed the MySpecialService first and created perhaps a test like 

I've read alot about returning null is not the best practice in the world, but like anything I think it will depend on it's usage and how often it might be called. So, in your case this might be ok. However, I'd just like to chuck out another way of doing things using the Null Object pattern. Using this you would not return null at all but rather return a Null/invalid object. Your calling code dependant on it's usage will be checking an instance type and so you might not need to even worry about whether it's null and potentially remove all those checks. 

I always try and keep my variable naming in convention, in both the format of the variable i.e. camelCase, underscore or no, as well as the ordering of the naming. I noticed you have both AttackSkillData and SkillAttackType. IMO it would be better to pick a consistent naming and either run with ( , ) or (, ). Even though you are not using OOP you can still minimize the two switches into just one but refactoring it out into a method.