Your looks to me like an Abstract Class. Doesn't Java have formal support for these? You may or may not get brownie points for making this an Abstract Class. --typo. Your IDE is clearly helping you here, but if you are using this for portfolio code, why make mistakes you don't need to make? Your method is getting information it doesn't need. Your Entity is the only one where you've fully fleshed out and used this method, and all you need there is the input, not the full . If you need the full GameContainer, why not store it, rather than pushing it in every loop? I think at some level you realize how bad this is, since you're completely ignoring the method on . Yes, I know you built this off Slick2D's example code, but if Slick2D jumped off a cliff, would you? Having on Entity violates Single Responsibility Principle IMO. This Class reads more to me like a Value Object than a View Object, so it should not be performing View type activities. Again, you've followed less than stellar example code. Instead, just have your Main Class do something like , or you could even have an Class that can take an entity and draw it. Either of these solutions handily eliminates the unneccessary dependency both on and that horrible static throughout the Entity inheritance chain. In , sometimes you refer internally to the private storage variables, and sometimes you call the "getters." Why? If you can't come up with a more descriptive JavaDoc comment for Player than what you used, you're probably better off leaving it off. We all know what Classes are for. I'd go with a constructor argument for the image name, rather than a static constant in your Entity SubClasses. What if you want a Player that's a submarine? Consider this idea for the other values you're coming up with "out of thin air" in the constructor. As I said, I see your more as a VO, so shouldn't be responsible for creating its own bullets. What if you wanted to have more than one , with a global Object Pool of that recycles when they are taken off screen? I think you need to think a bit more about who should be responsible for what, where the Bullets are concerned. You have a mish-mash where some of it is handled by the Player and some of it is handled by the Main game, yet none of it goes through the "official" channel Entity should use for updating itself, . Since your Main Class already concerns itself with looping through the Bullets, I'd probably relegate Player to simply storing the list of Bullets, and allow Main or some new Class to handle that. --all that commented out code implies you're not a confident user of version control. Either fix it or take it out. All those try/catch statements. Is there something specific that you expect could cause an error here? If so, test for that and fix it if possible (for example, null values). 

Keep in mind, these are the type of suggestions I would offer to a very experienced developer, if I thought he/she was open to hearing it. I suspect that for most jobs, especially entry-level jobs, these points would be completely irrelevant. Note that if you take my suggestions that would have you deviating from the Slick2D example code, you might wind up shooting yourself in the foot with developers who feel it's better to stick to established norms for a variety of reasons, some of them good. I think your code shows solid competence, and I wouldn't hesitate to hire you if all the other parts of the interview and hiring process lined up. Good luck! 

Other aspect is the harcoded number of possible graphs. Are they so different that they must be defined one by one? Do they share common functionality? 

What happens if your dice changes into a larger polyhedral one? Your ifs statements will not handle the value at all. So, a reasonable version is to use something like 5) Encapsulate your damage simulation in a class Since main is much slimmer now, we expect that everything is handled by a special designed class: // created new class to separate things 

4) Defensive set If by any chance, the select for year returns more that one year, set statement will fail. You might consider assigning with and/or using , just to be sure it does not fail (however, it may return an incorrect value). 

Besides the naming that should more C# friendly (PascalCase), the application should have a clear separation between data models and view models. Data models are usually generated automatically in database first scenarios or POCOs classes defined by the programmer (code-first approach) and should be separated from view models or data returned by the service layer which usually consists in aggregated information. Ok, for your particular case, data model is : 

Generally, it is easier to think your program logic top-down than bottom up (doing little things and merging usually requires more skill): 

in $configFile = !isset($configFile) ? $defaultConfigFilePath : $configFile; Hopefully, they will introduce a coalesce operator soon to simply write: 

Other repositories can be added here and, if DI is used you should never instantiate this class yourself, so that all constructor parameters are injected. So, your flow should be like this: 

However, logic for the dates is unclear for me, even after reading operator precedence (AND takes precedence over OR and BETWEEN). It is strongly recommended to use parenthesis when using multiple operators with close precedence. 6) Set based logic WHILE and other looping constructs are intruders in T-SQL language. They will usually behave (much) poorer than set based approaches. So, your WHILE can be converted into something this: 

2) Variable declaration closer to usage C++ allows you to declare your variables anywhere before they are actually used and it is a good idea to be as close as possible. The first part of your program may look like this: 

and call this function by providing / to your parameter. Also, functional scalability might be an issue: what if you have to handle 11 eleven floors in the future? (0 -> 10). You will be forced make several changes to handle a simple request like this. In order to accommodate larger values, I would dynamically define your array and not base my condition on char (which allows only one character). Something like this (not tested): 

Part of my job is to maintain an old application written in Silverlight talking to a WCF service which in turn fetch/persist data into a SQL Server database and in a BI cube. Most of the security is specified at database level using database roles, users are authenticated using Windows Authentication (integrated security) and no user can access table data directly, only through stored procedures. For persistence user defined table types are used (as input parameters of procedures). As most of the code performs data table construction and reads data quite messy, I thought of developing a small framework to work more object oriented. In order to standardize how data is fetched and persisted, I have created some helper classes and attributes. The vast majority of fetched or persisted data does not go beyond hundreds of rows, so performance is almost never an issue. Also, data can be fetched from both SQL Server and Analysis Server (via ADOMD.NET) Ok, enough talk. Let's see the code: 1) Base class for all data contracts used to fetch data and sent to the WCF client