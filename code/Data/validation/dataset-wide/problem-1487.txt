The algorithm seems to be fine and all members have nice and clear names so the code documents itself pretty well. However as a whole I don't like implementation. I find that the parser is a little bit messy and chaotic. I especially don't like these two fields that are modified all over the place by various methods and make the parser thread-unsafe. 

I think it's very strange that the is only 99% immutable. The shouldn't have a setter and you could initialize it like the other properties inside the construtor. 

Here's a small example. You create an error-provider by dropping it to the form/user-control from the toolbox. 

The class has now descendants. One for each of the two possible outcomes. I created an interface for it but I'm not sure whether I actually need it. It got however a parameter that I need later to be able to chain the new extensions. 

And this is just for a single . If you now have a dozen of APIs there will be hundereds of lines of code that are completely unnecessary because ASP.NET can already handle most of it when used properly. 

I would also prefer if the method returned the loaded session too so I can immediately use it without switching to the property: 

We actually don't use the anymore. The same thing can be done much easier with the newer Task Parallel Library (TPL). 

In order to create a string from a you can write an extension that does exactly that. If you can use C# 6 then you can also use the new string interpolation. 

I think it should be a class rather then a struct. What happens to the buffers when you pass an via a parameter? Are they copied too? I think this kills the whole fast-string idea. 

It's better not to use this keyword. It doesn't really help the readability and you're not using it consistently anyway. 

As all operators are binary and return either or we can pass the acutal assert as an to check the condition and generate the message only in one place: 

I often need a simple exception with a meaningful name and some helpful message which usually just look like this one: 

This interface is named but it contains a method. There is nothing about any conditions. The name would be much better I think. 

You do not need three methods for sorting because the only difference between them is the property that you use for sorting. You might as well have only one method that takes a as a key selector and use it with and : 

and let the view render a dynamic list of links and format the Url properly for display. The code-behind should not do it. With this simplification the query becomes 

All methods are extensions that you can easily test and finally compose to get the max value. Here they are (without prime cache). You can parse the data easily with split by 

I have still another version of my validation extensions. I've reworked it and added some new features. It doesn't relay on expression trees any more but as a compensation the same extensions can be used for unit testing. 

Materialize for easier debugging when calling resources As far as your code is concerned you call a web-service there 

This should be splitted into smaller pieces to improve its testability however I wouldn't go with a full currency class/interfaces for this yet because I think it's not necessasry. Instead I would try to make it more LINQ friendly thus I'm going to suggest an extension that I call , just like the but this one is for decimals. 

This property (the other two similar as well) are very fragile. Everytime you use the setter you add new values to the ComboBoxes. I guess you want to call before adding new items. 

Selecting problems With all those improvements you can now modify also the event handler to do this: 

There are multiple overloads that let you specify a lot of options with the TaskContinuationOptions enumeration. 

In this cas however it is a little bit easier to do the same with linq: Parse the xml first (which is btw invalid in your example - some elements are not closed): 

Be consistent. Either use everywhere or nowhere. You also don't always need the entire namespace. Add a to other usings to avoid lengthy lines. 

These two tests are virtually the only useful tests you have so far where you validate that the actually works and retrieves processes. What you could additionaly do is to check whether the or something common is on the list. Now I'll ask why are you trying to abstract it? I'll answer it for you: because you want to be able to exchange this service in order to return a fake process list for another modules that uses it. This means that all you need is an interface like you already have it (I ignore the fact that the name isn't a good one would be enough): 

I would rename this field to soemthing like . As I first time saw it I thought it's a test code. Reserve the test for tests or really rare cases when there is no better word. 

Inner classes are bad anyway. They should be usually avoid but a nested builder accessing private members is an exception. If it doesn't then it shouldn't be nested. Your builder shouldn't actaully be nested. It should be outside the class and be called . It wouldn't change anything how it works. 

Briefly you need to (ok, you should) put the download logic into a new class that could have a method. It needs to be marked with and return a to be awaitable. But you need a result so you can use it with a generic parameter . (Sidenote: remember to dispose the ). For the new download to work you need to use the awaitable upload API. If you want to be able to report progress or just be notified when a task is finished you can use the interface as one of the parameters. You call it inside the method to report its progress. Here just an arbitrary task-id. 

I find this helper extension is not necessary at all. Having immutable types with multiple properties (>3) makes it quickly ugly to use because of the huge constructor. Up to three properties it can be quickly initialized with new values anyway. Where seems to be ok to be immutable because it looks like it was correctly addressing the primitive-obsession; above that limit I'd think twice before making a type immutable to not find oneself trapped in the immutable-obsession. As far as your implementation is concerned I don't really like it: 

It takes 0.040sec to enumerate a directory with 10.600 files and 1.400 folders yealding 417 results with the above ignore list on my notebook's SSD. 

Introducing this property makes working with the just more confusing. It gives the user a direct access to the underlaying data. This undermines the entire purpose of encapsulating and hiding the date-of-birth as a pure . 

SqlServer reflection To get the information about the log tables I use a couple of helper methods and classes that support the database reflection via the method. I then translate the resulting DataTables into custom classes that I can easier use inside the template. The main two are: 

There are only a bunch of properties. I think you can update them all every time. You don't need to track changes or send notifications by name for all properties because 

There's no need for exeptions. (I'm ignoring the fact that it won't be null anyway looking at the implementation). 

Oh, and there is one more thing. will blow if you try to convert to that exceedes the . It'll also hide the fact that you can loose precision when converting incompatibile types. Consider this: 

In order to make the exception creation really simple, I use a few helper extensions for tuples that I use to specify some or all of the three parameters: 

Computable properties are based on the interface with a single method that requries the current log. 

I find that positive ones are easier to understand so I suggest trying to flip them where possible and use early returns that would also contribute to less nesting. 

I can imagine that such a service would have this API. You don't return but nothing if it worked and throw an exception if it didn't. If you don't throw exceptions then the user cannot know what went wrong if a service wasn't able to send a notification. 

I find this is not how the id increment should be implemented. should not be the next index but the last one. What if you decide to add a property like ? You'd have to calculate it first with - ugly. Instead use the prefix like and start with that is usually considered as na invalid index in many APIs. Then the property could just be . 

I solved this problem by creating a new type that I call . It has two properties. always returns the original value and gets serialized. returns the updated value and can be used at runtime. has no public setters. You use to actually override it and under the hood it sets the new to . 

A factory is for creating new objects which I cannot find in your code. You just return a property of the object you pass to the method. The naming is also incorrect. It should be called just without the for the interface. 

but I find the first version better with the actual type. This way you won't make any mistakes and the values will magically convert to the requried type. You could also add one more operator to Radian and Degree to convert them to the other type and use in your formulas as exactly those types instead of just double. As you have two more cases for you'll need a few more operators to covert these ones too. 

You cannot use a dictionary but you can use the and then search for the closest key. The values of the group will be the items with same values. 

I used hard-coded types but you of course will have a loop there to add the items. You probably noticed that I have some kind of a there. Yes, I created this to implement the natural-sort logic. This is no longer based on names and strings but on the . 

There is one more issue that you should address. The method modifies the parameter by altering the . 

In the world of and s you can assume that virtually everything's disposable so you should also try to dispose everything you're working with. One of such examples would be the that you use in the and you don't dispose. You're also not consistent with the statement. Once you use it and the other time not like here: 

Each diamond line has specific properties. Those are encapsulated by the . Our renderer will know what to do with it. 

I have a collection of full type names where I need to reduce common namespaces. For this purpose I wrote two extensions. The first one explodes each namespace into pieces and the second one removes the first name for as long as all first names are equal thus reducing each namespace. 

Lastly the method need to be aware of the property so it needs small changes too. This means it needs to look only for properties decorated with it and then get the value from it. 

If you define contants then you should decorate them either with the keyword or the one. By doing so you clearly inform that this value naver changes and you also cannot overwrite it by accident. Overall your code isn't bad. I find you use very good and meaningful names, early returns, not too much nesting. Just a few more helper variables like @Maxim suggested and it's fine. 

Example This is one of the methods that already uses the new . It's from my and it searches for an embedded resource in an assembly. 

As far as the test is concerned it's really hard to follow it. You should split it into multiple tests that possibly verify only a single case. This means you could have such test as: