I think the naming for event handlers is more common, so should probably be or something. Either way, you should choose single naming notation and stick to it. 

1) You should use for classes and methods, see capitalisation conventions. 2) You can use auto-properties, if you do not need any additional logic in setter or getter. 3) You should probably use singular tense for . 4) Integer fields are equal to 0 by default, you do not have to set them in constructor explicitly. If you take all this into consideration, your class should look like: 

Given that the logic is exactly the same (i did not do a line by line comparision), one of the possible solutions whould be: 

So in which order should I call those to get things running? Should I call and then ? Should I await ? You should expose a single method, say, , so I can call it to connect to the server and be done with it. Straightforward and simple. Everyting else should be an implementation detail. If reads a single message, then you should change it's signature to . 

I don't think there is a method which allows you to fill a 2d array. But it is easy enough to write a generic extension method, which will do just that. You have basically implemented it, all that is left is to move to separate static class and make it generic. 

You can no longer return from since return value now is strongly typed. You can not set other types of metadata, such as . Not exactly a limitation, but I feel like current API adds a lot of boiler-plate code, which is a common problem with builder pattern. I think I would rather write 

So, basically the problem is that you are most likely lack both knowledge and experience needed to implement logging in a way, which would work correctly in every possible scenario. Same goes for me, for example. That is why I use logging frameworks, which were written by experts and were tested by other developers. You certainly can implement your own logging if you wish to do so. The only thing I can guarantee though, is that you will fail multiple times, before you will get it right. It will be good learning experience, but it will also take time, which you might not have. 

I don't immediately see any efficiency issues with your code. It's simple and concise. But I do notice that you don't follow all the best practices for plugin authoring described here: $URL$ I guess you'll do something else than alerting ten times in production? ;) 

If you do this, you'll probably see some pattern emerge. I can already see two classes, or rather instances of a- instead of one. Maybe something like Strategy? 

Or better yet, build the initial list based upon content in a dictionary. That way you don't run the risk of having typos in the switch or the initial setup: 

I've done something like this a few times (a lot even), but most times it was a complete waste of time. You will probably not earn the time you save by not doing WebForms markup, even if it's terribly boring. If you have like 100-200 entity types to display in similar lists, it might be a useful path, but if it's 10 - go with good old aspx/ascx markup. If you don't need a lot of business rules and/or scalability in some form, go for markup only with SqlDataSource and WYSIWYG listviews. If you need a fancy UI, go with Telerik. Given you actually have multiple customers with different list needs for the same entities in the same product, this might be "the only" way, though. With regards to your code, it seems slim and clean enough. But beware when going further with this - you might get a lot of conflicting requirements. As you say, it's a good thing to separate responsibilities, so keep doing that if you really want to make something "re-usable". (It won't be, but still..) 

Instead of wrapping the proxy creation in a concrete service proxy implementation, I'd write a concrete service factory instead which in turn uses the ChannelFactory. The service factory class could also use an interface for creation, so you can have multiple concrete factories. $URL$ That way your code can continue to depend on the interface only, and you can change the way the proxy is created without writing concrete proxies. You could also have a "local service factory" which doesn't go over the wire. Usage would be something like this instead: 

This allows you to do all sorts of neat stuff later on. For example, to calculate total resistances of a player, you can call for every equipped item and sum the result. 

I suggest you convert your image to separate buffer and then use in-between lock/unlock to block-copy the pixel data. 2) The way you use statement looks fishy. What exactly are you locking and why? If events come on different threads and you can't handle them fast enough, then you have to come up with a throttling mechanism, that would drop some of the camera frames. Otherwise events will just keep piling up on this in no particular order and eat up your CPU (which is what you observe). 3) Depending on what else is going on in your app, call can be pretty expensive performance-wise. on the other hand is much cheaper, but you will have to be really careful with your buffers, so that background threads do not overwrite the buffer, that is currently being rendered on UI thread. 

I don't think you are going to need a special for any of those options, simple (or any other panel), should work just fine. But it is hard to tell for sure since your code is rather hypothetical-ish. I do not know the actual use case or an actual problem you are trying to solve (if any). 

Yes, you should omit and . Those only take space and do not provide any additional information. In C# you can't put anything but inside statement. The only time you might need to write is if . 

It would be nice to also have a method that would call internally. It will make probably the most common use case more accessible. 

Yes, you are correct, in some cases can leak memory too! Usually it does not happen, because most implementations of either utilize (which uses weak references) or do not care about state and therefore use empty event, which does not hold any references at all. But if you implement as strong event, will cause memory leak. In your case the simplest solution would probably be to additionally when control is unloaded, and to when it is loaded. Alternatively, you can use weak events pattern as Zache suggested. 

This might be off topic, but if you use switch statements for more complex functionality, you should read this before going further. $URL$ 

You should use as predicates on your interface and have the implement that interface. By only using , you won't get translation to L2E etc, but will have to enumerate the entire DB table before you can evaluate the . The interface can be mocked, hence unit-tested without a physical db and also used with other ORMs. It's generally prefered to keep and the in a separate implementation. You can pass the to the repository constructor, which can access an internal property on the UOW exposing the . By doing that you can share the same between repositories, and batch updates to several entity roots of different type. You also keep fewer open connections, which are the most expensive resource you have when it comes to DBs. Not to forget they can share transactions. :) Hence you should not dispose the DbContext in the Repository, the Repository really doesn't need to be disposable at all. But the UnitOfWork / DbContext must be disposed by something. Also, ditch the predicate to . Since you return an , and use an for the predicate, you can keep building the Queryable after the call. For instance . It will still be translated to "select [fields] from [table] where [predicate] order by [orderprop]" when enumerated. Otherwise it looks good. Here's a couple of good examples: $URL$ $URL$ $URL$ And here's how I do it: Model / Common / Business assembly No references but BCL and other possible models (interfaces/dtos) 

Of course you can expand on that by employing the template pattern for the extra parameter settings. I would also look into extracting the parameters to a "parameter object" instead of several parameters. 

All good answers. I'd like to add my two cents to @deepee1's answer. If you keep the FoodItem class he provides (with a constructor), you can create a list of food items and then create everything else with completely DRY code. You can even easily move the definitions out of the code. Not to mention creating n different UI's with the same "logic". Here's what I'd do: (Forgive any mistakes, long time since WinForms :) ) 

P.S. There is also quite a lot of s in your code. Selector is a string, attribute is a string, style is a string, etc. Indeed all of them are technically strings but they all have different domain meaning. Maybe you should consider adding more classes to your domain model to represent those entities. You will gain the safety of strong types, but you will have to write more boilerplate code. So there is a trade off. 

I'm not a fan of having property on my views. One of the advantages of MVVM is that it allows you to have your view and viewmodel loosely coupled. By declaring a strongly typed property on view you lose this advantage. I mean can't you just store the viewmodel reference as a field in your presenter? 

Also, what instantly raises red flags is the sheer amount of various tions, tions of tions, dictionaries of tions, etc. gathered in one place. I mean come on 

Only your viewmodel should implement . That's kind of the whole point of mvvm. Normally, your viewmodel properties wrap your model properties. Also, it is your model, that should contain all the business logic. Viewmodel should know nothing about or any other details of implementation. Viewmodel should only manage interactions with UI. Being said, you should have something like: 

is not the best name, as it does not really tell me anything about what this class does. If it were called, say, - that would give me an idea. method looks out of place. I think it should either be a method, that returns , or it should be non-static void method, that modifies property. I think the first option is better. is not the best name either. What are we chekcing, exactly? Use variable name to tell us that. You might want to implement . And you have to make sure, that , , and return the same result for any two given objects. At the moment they don't, and that's a huge problem and a source of future bugs. You will also have to implement method properly. It should return the same value for equal objects, implementation won't do.. I think you should make your class immutable if its possible. Is there any reason, why method has to be public? 

I wouldn't presume the metadata information gathered from reflection as mentioned by w0lf will be handled completely if you reference the Model property directly from the lambdas. 

Overriding the property in modifies the behavior of . Which means you've broken the OCP. Besides, what do you expect to be if you have just set it to 10.0? (Does it even compile when you only override get?) What you could do is employ the template method pattern: 

You could possibly swap with . If you can, you should generally try to avoid too many subqueries. At least attempt to indent them properly. You could also benefit from having a look at common table expressions. These can help you group up the subqueries in predefined results for your query. Makes it a lot easier to read. $URL$ 

This makes closed for modification (cannot change price / individual price), but open for extension (can add to price). (Naming and structure in my example could probably be improved, but it serves the purpose) The behavior is still possible to modify, though, so an even better solution would be to have some collection or set of rules you can add to, so you don't accidentaly override without calling . 

Entity Framework implementation assembly References Model and the Entity Framework / System.Data.Entity assemblies 

I'd use enums. My suggestion presumes you are able to refactor your existing code a bit. If your control can be modified to keep the position value in one property of the following enum type, this will work. 

Not entirely sure I got your schema right, but something like this should be possible. (omitted a bit of ordering, and I assume you only have one current year) 

More on extensions methods here: $URL$ Inheritance Put these methods in a base class and have the behavior that differs in inherited classes. [edit]Updated to show how the base class can be generic[/edit] 

You aren't renaming it either, you're naming the parameter for the anonymous function the lambda expression represents. But if you don't like the lambda syntax, there's also overloads taking the property name as a string.