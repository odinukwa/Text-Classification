I work as a developer in a small to mid size company in North America. I happen to work directly under the owner of the company with my small team so we have the most visibility in the company in terms of tasks and workload. Recently we (the developers) have had an issue where because we do not have detailed requirements, we are prone to make mistakes. For clarity, the "requirements" are typically a single line item in a document written as a technical requirement. Good examples of this are similar to "Port all bug fixes from previous version to new version", "Create a feature that does something", "Add new table for this". The issue, is that due to the lack of requirements we tend to make mistakes. We will be told to finish a change in a specific area, but not realize an entirely different section of code requires changes because of an unknown business rule. Or we will be asked to implement a feature, but not realize the implications across the application in other areas. Our boss has decided that writing detailed requirements is similar to spoon feeding an infant, and as such does not do it. The only solutions I see are not great: 

but this might not be clear for your boss, and this confusion might lead him to think you're just trying to impose you ideas on him. Last, don't be bothered by it. Nobody can be fired or reprimanded for just doing his job. 

You don't really have any choice other than being professional and reporting any mistake you find in your review. Angering your superior might be "bad" for your career, but signing an incorrect document would be an even bigger mistake, because you would accept to share the blame (and probably be the ultimate target, as superiors often tend to offload faults down the command line). Given that you WILL fight with him over reviews from time to time, there are a few things you can do to improve the situation: First of all, always remark in the positive, and try to shed a good light on his work. He will be less inclined to fight if you downplay his mistakes to "minor issues not worth fighting for". Second, always provide complete information and documentation supporting your findings. You state that 

I have seen a lot of two-sided opinions for sticking through it and getting the experience, as well as starting to look for a new job. I think that looking for a new job is the only viable option for you. Being a software developer with similar experiences (small start-ups, alpha-type leader, team-leads leaving shortly after I start) I know that although it is great for a resume and quick experience - your overall well-being is going to slowly go down. It is a lot of stress to take up a lead role in a product, especially when people around you are getting fired so often. Not to mention - if you are disinterested in the product there is not much point in working on it. Again - speaking from experience working on such projects is monotonous and makes you less passionate about programming. Do yourself a favor - start looking for a new job around your experience level. You will grow at a more sustainable pace and enjoy your work significantly more. 

How can I either manage a situation like this, or find a way to get better requirements in place to prevent this in the future? 

Is there something that the business could do to have less bugs? Maybe cleaning up technical debt? Maybe recruiting specific people to test software? Maybe less tight deadlines? If you would like any of those things to happen in your organisation you could bring it up when the person asks you to produce fewer bugs. 

Get a 1-on-1 discussion with the manager and ask him directly. Are there personal issues? Should you change the kind of suggestions that you give? 

Having common sense means that you don't try to guess what the manager wants you to do but you think about the problem you are facing yourself. Having to micromanage you by telling you exactly what you have to to do takes energy for the manager. Simply delegating the task in trusting you to figure out what's reasonable to do takes less time and energy for the manager. 

It depends on why you are contacting the person. Let's say you contact me, because I wrote some open source code and published it on github. You have some feature request. If you address me with I would find that strange and give your email less attention than if you would address me with my first name or don't start with any greeting. Most emails that start with "Dear Sir or Madam," that I get from people I don't know are spam. It's different if you contact someone in his role as employee of a company. In that case you can be more formal. 

Chances are the recruiter just copy-pasted a list of skills someone else gave her. The important thing is to know what are the requirements for the job you're gonna interview for, and brush up on the core concepts. That list only tells you one thing: they're asking for a web developer that is probably going to write both server-side and client-side code, and this should be your main focus of study. They also seem to care about clean code, so try to at least be familiar with SOLID principles and designing a modular system. Don't try to focus too much on the single points of the list and you will be ok. 

In addition to contacting the OSHA, I'd also start looking for a new job, just to keep multiple doors open. Equipment breaking and not being replaced might mean multiple things (no money to replace it, bad management, ...) and an investigation from OSHA could put your company out of business. You want to be ready to jump ship if the one you're currently in sinks, and I'd suggest you to start looking asap, since you said it won't be easy to find another one. 

Why doesn't the firm want you to publish the problem? If you publish it, it's likely that other people they give the same assignment will find the post when they use Google. That means the question becomes worthless as a good interview question for them. That means publically posting on Code Review StackExchange might hurt the company. However if you haven't sign a NDA then I wouldn't see a problem if you privately ask people you trust for feedback on the code. That's unlikely to hurt the company. 

Try to understand what your boss wants. They probably want to project a professional image. She probably also doesn't want to spend her time with thinking about a different uniform for yourself. Do they want an employee that looks discomfortable in the uniform he's wearing? Probably not. The boss has an interest that you project a good image. This means that you do best to try to find a look that works. Talk with coworkers about what they would consider to be good. Then make your case that it's also in the interest of the company that you wear that uniform. 

This is fairly common if you have an overworked manager. The main way to proceed is finding other sources of work. Are there things the office needs and nobody already implemented? (automated build process, ticket tracking...) Check from you colleagues if they need something software related, or if they feel your products need something implemented. You can develop those features in a side branch* and merge them to the main product branch if they get approved. You obviously should still send emails and reports to your manager, to keep him informed of what you're doing and if the things you're doing are fine. If you still feel you have too few things to do, you could resort to online courses to learn new technologies or strenghten your skills on libraries and frameworks you're using. A good developer never stops learning. 

I'm not going to focus on the personal and interpersonal aspect of the question, as they're covered well enough in other answers. I instead want to focus on the technical aspect. Testing You said you're writing unit tests. Do you try to have full test coverage? Do you write integration and end-to-end tests? Don't forget that a good testing suite has all three aspects of testing, and having everything tested will make you feel more secure. Dropping testing in favor of delivering more is a temptation anyone has, sooner or later, and it's far too easy if you're left by yourself and don't have testing standards. Force yourself to test, and never consider it a waste of time. Code metrics Try using a code metrics tool (giving you a specific tool is impossibile since you don't specify the language you're using), and conform to industry standards when it comes to writing function names, variable names, etc. (nobody wants to see hungarian notation in their java code). Obviously, you should first of all keep your code style coherent with the one used at your company. Try to read the other devs' code and learn how they write. Deployment system and Bug Tracking Since you are just 5 developers inside a bigger company, you probably also lack deploy and bug tracking tools. Trying to at least standardize (if not completely automate) the way you deploy the product will reduce the risk you give someone an outdated file or library, and having a formal bug tracking system will help people tell you if your product has issues or bugs. Having everything automatically checked and tracked will surely improve your confidence, and will help you deliver a great (or at least good enough) product.