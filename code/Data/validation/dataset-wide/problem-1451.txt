Cool. Read the words directly You are walking through a line character by character. That is error-prone at best, hard to follow at worst. But there's already support for this in C++. Use a . You could have just done: 

C++, not C First things first, I note that is a free function. But that's not how we would do something like this in C++. We would prefer to have a type in which we'd write: 

When we put the grid as a copyable object, we get the very nice property that we can now return s from functions (since you cannot return a raw array for a function). That makes it so that we can just write this step: 

There really isn't much to say here. This looks really good. Typos You have a couple typos in your code on your equality operators. You're comparing against instead of . Not restrictive enough We have this constructor: 

Advance both arrays as you go and alter the size. It makes the whole function flow much more naturally. Really different orders? I don't understand the requirement that both (a) the elements can be in arbitrary order and (b) you can't sort or use another data structure and (c) recursively. Because not modifying the input seems a pretty important convention, and it's quite difficult to not modify the input while also doing both (a) and (b), recursively (iteratively, much easier). 

Types and Variables and Functions, oh my! Let's start with this. There's a lot of choices you made in your solution that makes it difficult to code and more difficult to read. Your grid representation is: 

We successfully divided into three chunks, but we're actually missing elements! 4, 9, and 14 will not appear in any of the three chunks. The correct division would be . 

should definitely never exist in code. Why? Absolutely not. No no no. No. No no. 2D Arrays in C++ This line: 

You'll have to add on . It'll be easy. Lastly, . We're not modifying this (or at least we wouldn't be if was correct), so the function should be . The variable is named - so presumably you meant to use and not . The argument should be taken by const reference. And we have the same antipattern about returning true or false. The whole thing can be reduced to: 

both for the better name (see below), and that generally avoiding macros is a good thing. Naming Characters are NOT at a premium. Your code will not run slower if you spend the time to write out variables names in a way that readers will understand. For instance, I have no idea what your and and mean in your function - where hashtable search is actually a really straightforward algorithm. You want to provide names that are meaningful. That any other programmer can come to your code later and understand what is going on. Or even, that you coming back 6 months later can understand. Spacing There's a lot of different conventions for spacing and brace placement in C++. But this one is not good: 

Avoid single-letter variables What is ? What is ? Move the into the branch We have two cases per item: either we can fit the whole item and have room to spare, or we can't. If we can't, then we break. So that can become: 

This is quite poor. You're polluting the world with these names. Macros fundamentally do not play well with others. There's also no indication that these are closely related. Strongly prefer an enumeration: 

As the name suggests, is not move constructible. Your metafunction says it is. Also, is move constructible but your metafunction says no. The correct implementation would be to simply use the standard type trait . Secondly, the alias there is questionable. Typically, we'd use aliases to avoid having to write the cruft. You're not doing that, and the resulting call isn't that much more concise. Compare: 

The code itself isn't particularly useful. You can print the primes up to , but what if I wanted to sum all the primes up to ? In this model, you'd have to add a member function to and again to . That doesn't make for a very reusable system. So let's go for something reusable, and in C++11 to boot. Checking primality isn't a particularly good name for a metafunction that determines if something is prime or not. Furthermore it doesn't even have to be a metafunction, it can be a function: 

Move iterators Dereference likely returns a - so you probably want to wrap the iterators in first. That will actually let you move-from the iterator, instead of looking like you're moving from and actually copying from. advance is excessive You can just write: 

This can be shortened further with the standard library. Python gives us which defines all of these functions: 

Dictionary comprehension For the case - makes sense. But in the callable case, not really. You're creating a new dictionary and then re-modifying it. Better to just create the correct dictionary up front: 

is a [correctly] private class to . All the rotation functions are super important to the internal handling of the class, but should absolutely not be visible to the user! You're basically letting me rotate your tree as I see fit. That breaks encapsulation. You want to reduce your interface down to just: 

What is our total width? If is odd, the max width is . If lines is even, we stop one less. So let's save that off: 

Naming doesn't just start doing something. It does everything - which is pretty unintuitive to say the least. Random choice This: 

This is less than ideal - we're constructing the sieve then just reconstructing it anyway. Just do it with the right values outright: 

And typically, comparators return . Yours return . I see what you're getting at, but that means I can't use as a comparator - which may be surprising to many users. Add iterators You need iterators. I'd recommend adding overloads for and that take a comparator index. So something like; 

Readability First things first. Formatting. Indent after each brace, consistently. It is more or less impossible to read your code. Secondly, variable naming. (el) is a terrible name for a variable, since it looks exactly like a (one), so much so that I just flipped them and you probably didn't notice. Not to mention that one of your Ls is really width. So you should name them and . Rectangle Rather than having , which is not a meaningful name, instead require your to be constructed directly with the values: 

Note that taking an argument as an array is the same as taking an argument as a pointer - prefer the pointer. Base case The base case isn't size 1 - the base case is size zero. This is much more natural, since there isn't anything particularly special about 1 vs 2 but there is with 0 vs 1: 

This can even be abridged further by taking advantage of the constructor that produces a string consisting of a single repeating character: 

You have some generic runtime error? Don't simply log an error and , that is very much non-idiomatic. The C++ standard library comes with a bunch of different exception types. If you want to add your own, that's fine, just inherit from or or whatever is appropriate, but when the occasion calls for an exception, it! One other thing worth pointing out. In , you perform two different checks. One against and one against . The latter is a good check, but the former is unnecessary. If is larger than , it's an invalid operation, full stop, and will always be at least as large as length. The code you want is: 

Notice that it's every 3rd Fibonacci number. What can we do with that? That's still a Fibonacci-like sequence. Except instead of an = an-1 + an-2, we have an = 4an-1 + an-2: 

When you need a comment to describe what your variable name names, that's a good indicator that you should just change your variable name. Once you do that, that doc string becomes pointless: 

Note the improved naming of the member variables and the class. Adding to the type name is unnecessary and redundant. This constructor will additionally solve your other problem: accidentally misusing by accessing its member functions before you set any of the values (uninitialized s have indeterminate value). This way, you're guaranteeing that and are set. Usage here would be like: 

Why Code Generation? This is my main question. Why? What advantage does code generation give you over just writing the class templates in C++ directly? I actually don't think it gives you any - you just end up with this added layer of complexity for where the code comes from. Furthermore, the generated code isn't particularly easy to follow. We have , , , and . But where those differ is a static constant that is separately defined. That works functionally, but is confusing. Consider an example from : 

Why do you both need to specify the number of dimensions and the dimensions? You have to assert that the two line up, so why not just imply the #? 

Also isn't a particularly good name - it doesn't really resemble the function. I don't know what a better one would be though: Callable If you're going to allow passing an arbitrary function, then I think you may as well pass the full value instead of just the length. If the caller wants the length, the caller can use at that end. This'll enhance all the things you can do. Also, in Python, : it's easier to ask for forgiveness than permission. Just try to use the callable as a callable and catch the :