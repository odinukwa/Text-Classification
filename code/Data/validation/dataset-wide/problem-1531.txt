I should preface with the fact that I don't know python. It's likely that I've made a very clear error in my following edit. Generally though, I prefer your second function to your first. If python allows, I would break it up a bit for readability. Why do I like it? It doesn't need the keyword and it's less nested. 

PS. I wrote this script in haste to accomplish a task. I can understand if you wouldn't consider this script distribution worthy. EDIT: So I arrived at work today to find my script at some point exceeded 536MB of memory and quit on fatal error. I had already increased my ini file's parameter from 128MB to 512MB. This doesn't necessarily reflect an issue with the script itself. I just wanted to share my frustration with the task. 

Inside of a folder named I have 138 text files (totaling 349MB) full of email addresses. I have no idea (yet) how many addresses there are. They are separated from one another by line breaks. I created the following script to read all of these files into an array, dismiss the duplicates, then sort alphabetically and save in groups of 10K per csv file. It works correctly, but it has also been running for over 8 hours (dual core i3 w/ 4 gigabizzles of ram, sata 7200 hdd) which seems excessive to me. also tells me that my program's CPU usage is 100% and it's been like that the whole while it's been running. Give my script a looksie and advise me on where I've gone so terribly wrong. 

The general theme I'm going with in this example class is that on construction, html is stored in a variable via output buffer and then returned by a public method. When evaluating this code, consider that the html will not be static. Page title, description, keywords and the such will be subbed out with dynamic property references. My overall question is: In object oriented programming, ideally where should the output be stored? PHP's class, however useful, doesn't really answer this question for me. Also in this instance, is there any best practice trade-off between using an output buffer and heredoc syntax? Thanks in advance for your guidance! 

The code below is good. I only changed the comments a bit to make them a bit clearer and more concise. However, one glaring issue is that it seems you have your setters and getters mixed up. Note the and functions you have in your class. Usually, setter and getter functions do exactly that: they set a value and get a value. What you seem to be doing is using the set* functions to get the value returned by another function. This is +wrong+. 

Basically, we're doing the check inline, as well as concatenating the php extension after check. Though this relies on the file not existing - you can replace with any other name. Additionally, we're not echoing on fail - rather we simply inform the user that the requested page does not exist. 

The only real optimization I see if taking advantage of Pythons english comprehension to unify the return statement: So, would read: 

I would suggest using the system provided function over the custom memoization technique, so your code would look like 

Use PDO, not mysql_* as they are deprecated and dangerous. Break up your code into functions, this makes it easier to call and test. Throw and catch exceptions. You can omit the ending ?> 

Any ideas on how to improve this to improve performance or reduce calls? Any review, refactoring or just general thoughts would be highly appreciated. What did I do wrong? What would you change? Thanks all! EDIT: adding rudimentary html snipped this acts on 

Why not go with a template like Twig or Blade which would make the syntax a lot cleaner, while retaining most of all the controls. Also, remember that the view is for showing data, try to maintain as much logic OUT of the view as possible. Here's an untested version of your code with Blade: 

Again however, if some class extends it, they won't be able to access the var. Also, stay away from static. 

For someone who is just picking up the language, I'd say you're off to a great start. Don't be afraid to abstract the different pieces of your program logic to many separate files and including them only when needed - It will make future revisions much less of a headache. When you are dealing with large blocks of output data like in your switch statement, PHP's output buffer can be your greatest friend. Your program also presents a great opportunity for you to get acquainted with the extension - its relative purpose is structured output. Referencing what @php-coder suggested, once you get comfortable working with a database, you can start abstracting your application into purpose-driven layers - The Model-View-Controller design pattern is a pretty common method among popular PHP frameworks. PHP 5.3 and its common extensions host roughly 1,300 built-in functions - Have fun with it; it's a great language! +1 for your first review. Edit: How to style your code is normally a matter of personal preference and readability, but if you are looking for some general guidance, take a look at the Zend Framework Coding Style Guidelines. It's mostly just a reference for ZF extension authors, but it's none the less helpful for general interests. 

I've been rolling around several ideas or approaches in my head, and none seem any more useful or "right" than another. I'm sure this is extremely objective but I'm looking for a close-to-definitive answer on the object oriented approach to large block string storage and output in PHP. Given the following example, how could I change my approach in a way that might cause Zeev Suraski to pat me on the back and say Mazel Tov (beside using HTML5)? 

Generally speaking, I like your code. I think it's well planned with few inefficiencies. I'm also impressed by your use of PHP's class. When creating XML via PHP, I usually opt for loops and output buffering. I've been aware of this object class, but your example is the first I've ever seen it put to use. +1 for showing me something new! :D 

Just remember that when it comes to data, in 90% of situations it's best to let the database interweave the data for you than blocking CPU at the application level. PS: After you post a reply/update, I'll modify my code and answer accordingly. 

This function makes use of array_walk_recursive() to push into a placeholder array whatever value is pointed to by whichever key matches our needle key. Proof code: 

If you are creating a database wrapper, why not make a lib out of the wrapper and stick it into a directory that other modules/classes can import? So, your class would be in a directory structure like this: 

To expand a bit, we are renaming the function and variables in order to align with PEP8 naming conventions. Here's the code: 

That way, we end up with 2 function calls to and 2 new variables (which are cheaper than a function call), but is still not as performant as your original one liner. 

Not quite a lot that can be done performance-wise...you have a lot of data to pour over ( and with the new data . You could possibly think of moving over to a faster database (Redis? Cassandra?). Anyways, I made a few minor changes to your code - added empty() checks rather than empty string checks, shortened a few if statements, etc. 

Rather than tie yourself to only one type (string), you could use the package as well as interfaces to make it somewhat type indifferent. The following is my reworking of your code: 

Notice that your original answer does not catch nor raise an error when encountering a string val. I've reworked your code to this: 

I seem to get the feeling you are either not comfortable using maps as others have suggested here...so why not throw in a switch instead? 

After that, I changed how you output the block of text from a bunch of print statements, to 1 multiline print statement: