And use a loop to populate the loop instead of the loop. The checks for the condition at the end, so the first print doesn't requires an input. 

Using the array has a massive advantage here for the output statement. Since the corresponds to the planet's position in the array, you can simply call the appropriate planet's method as . Following two lines will suffice the purpose of the previous . 

You can also use the array to populate the menu itself using loop. This is especially helpful if you have a large number of planets/items in the array. 

The rest is just a search function to find the based on the and . I recommend creating a name class with and attributes and use a to search for the meaning. The class can be as simple as 

I am pretty sure you don't need to move cursor, if you call instead of . You are using both floats and doubles in your calculations. You should probably use one or the other. is unnecessary. I think it would make more sense for to take actual points as input instead of "delta"-s. Meaning you should move: 

which also looks fine and is a bit easier to read if you ask me. 3) Alternatively you can go further with gotos and use them as full-fledged state machine. It will allow you to easily remove common sections such as 

I suggest you convert your image to separate buffer and then use in-between lock/unlock to block-copy the pixel data. 2) The way you use statement looks fishy. What exactly are you locking and why? If events come on different threads and you can't handle them fast enough, then you have to come up with a throttling mechanism, that would drop some of the camera frames. Otherwise events will just keep piling up on this in no particular order and eat up your CPU (which is what you observe). 3) Depending on what else is going on in your app, call can be pretty expensive performance-wise. on the other hand is much cheaper, but you will have to be really careful with your buffers, so that background threads do not overwrite the buffer, that is currently being rendered on UI thread. 

It's a 4-line solution by just using available resources in . You can further improve the implementation by introducing an for values between 1 and 7 and so on. To improve the readability you can rephrase the main conversion as 

There are many different design-oriented ways to produce a good solution, as demonstrated in the other answers. So I'd like to suggest something different. One should make use of framework classes whenever possible. It avoids potential bugs, reduces the lines of code and standardizes the code. There is an in the called . It has an ordered list of the days of the week. All you need to do is parse the as a as detailed below 

I feel like implementing support for both and is going to be really tiresome. Not to mention, that implementation is going to have two methods: and . Which one should I call? Really confusing. If you already know for sure, that you are going to need a command which takes a parameter, you should probably go for weak-typed API instead of generics: 

Overall, i think unless you are doing it for studying purposes, you should just grab an existing DI library, as you've metioned yourself :) 

interface does not make much sense. It contains presentation logic ( and ). It calculates and checks the result of some operation ( and ), so that's business logic. It also "gets" some value from some string, so I guess it does some sort of conversion? No way to tell just by looking at method name. It also has a , which might or might not do the same thing as . If it does the same thing, then why is it there? If it doesn't, then what is the difference? Again, no way to tell. This interface is extremely confusing and violates SRP severely. 

The class would store Earth's G in a constant, because it does not change in any planet's calculation. The constructor should require the planet's own G value and it's name (for the Print statements, discussed further below). You can also add a method to calculate the resultant weight based on a given value, to follow along with the Object Oriented approach. 

The time complexity of searching a value from a is close to O(1) while a typical looping mechanism is O(n). The speed becomes times slower as the size of the collection increases. You also have a lot of duplicate code in the two statements. To resolve that I'd recommend extracting out the logic outside and calling a common function with a single loop. Something like 

The obvious advantage (which might as well be a disadvatage, depending on context) is that this way you will always have a single instace of , and once it is reloaded - every model will use new instance (given they access it via property). Also is a bad name for an interface. Interface name should not be a verb. It should either name a property of an object (e.g. ), or name object itself (e.g. ). 

Since this question looks like it was based on one of my old answers, I feel obliged to share my opinion on some of your concerns. :) 

I would start from the declaration of . You are an from it but no other class will handle it. You should put your inside a and handle the exception properly. I would also recommend reading everything from the files at once and use that of data in your code logic. A locks the file until it's finished with it. Furthermore, you don't have to call just for the sake printing a new line. Use the escape sequence for doing the same 

Now if you'll be very strict and won't accept the use of a array. You can replace it by extracting the first and second values using function on the first two