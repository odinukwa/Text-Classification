The steps 0 and 1.5 are missing. They handle the current value and the range of valid values. Coming up with them will be the crucial part. By the way, you usually don't use in a binary tree. But that depends on your use-case. Also, you have memory leaks. For small examples, there is no harm not using : 

You forgot to check the result of your recursing calls. Your steps are fine, if you meant the following in step 7 

Which makes this a lot easier, because we're now reducing the information instead of gaining additional: 

It is even shorter. It is easier to read than the point-free version, too. No . But if we want to preserve whitespace, it is still not optimal. Since we're handling a single character in either way, let us just keep spaces and handle all other characters: 

First of all, it's great that you've used type signatures for all your functions. Also, all used functionality is hidden away in helpers, which is also a plus. 

GHC will usually infer the type correctly, but it's better to add type annotations to all top-level bindings. Now to your remarks: 

Add type signatures to top-level functions You should always add a type signature to top-level functions: 

Any identifier with two underscores is reserved for the implementation. Using such an identifier yields undefined behaviour. Change your include guard. Something along is perfectly fine. 

Note that this will add the empty list at the end if our partition works for all elements, e.g. . But that's easy to get rid of. All at once: 

But again, that's personal preference. If you want to upload your package at some point you should add some documentation and use some other module names, but I don't think you're going to publish it on Hackage. The only other improvement I can think of is optimization, which needs a modified AST, and testing, which needs a non- variant. 

After all, there are (usually) no stack traces, and it's really nice to know where things went wrong. Note that you should add this behaviour in a documentation, since the type doesn't really tell what would happen on an empty list. Since is also an instance of , any fixed number could be feasible. Alternatively use as return type or as input. Use the tools you have at hand is from . Also, is an instance of , which means you can replace 

We'll have a look at your code from the top to the bottom. The proper indentation makes that easy. Magic numbers and defines First of all, it's great that you've used instead of magic numbers, e.g. 

It would get rather tedious to do that in your current program. We would need , you get the pattern. So instead, we should try to handle all the items the same way in a single block of code, if possible. Which brings us to the next topic. Reuse information At the begin of your program, you have . However, you don't use that information to your advantage when you ask the customer whether they want to buy a bagel: 

It's a fine way to implement the dynamic approach, but it shouldn't be available to the user by default. Therefore, let's "hide" it: 

But that begs the question: do we actually need ? For a programming challenge, it's enough to calculate the sum in , while you're calculating the numbers iteratively. If you're looking for performance, that would be the fastest variant (that doesn't use the closed form). 

That's not very user friendly. More on that in the next section. The ugly While I don't concur with @Gurkenglas that recursion is too powerful for brains, there are some weird things going on with : 

The names (destination) and (source) and their order stem from standard library functions like . is an unsigned integer type, and large enough to index an array that spans your whole memory. We're allowed to define in the loop, therefore our variable doesn't live any longer than necessary. But you already did that for , so I guess you knew that :) 

Therefore, a is enough to store the location of the queens. The y-position is the index of your vector. 

Nothing else in your code changes. Closures and readability Apart from better names ( instead of , or instead of ) that's all we can do with this algorithm. We could transform it into a closure: 

The function didn't really get shorter, but it's now easier to reason about its behaviour. Now it's time to talk about . You had about a screen page to think about it, which isn't really much time, sorry. But what's the current problem? Why is it a bad idea to use it in ? Because you have to traverse the whole list for every insertion. This would change your current from \$\mathcal O(n)\$ to \$\mathcal O(n^2)\$. So how could you fix this? It's somewhat easy: You have to remember not only the first, but also the last element of the list. A . Note that this will make all functions that remove elements more awkward. Your current implementation works, but if you want to have an \$\mathcal O(1)\$ , you really need another pointer in your . Further remarks Your implementation is fine, but it is. Hm. Not very helpful. You can only insert things into your list, and you can check whether something is in there (and remove it). The following functions would at least help to access some elements: 

And that's all we can improve in terms of terseness at that point without changing your code fundamentally. The main difference between the Python and the Haskell implementation is the mutation of the original and the early exit from the function. I would recommend to check the "B" case earlier by the way: 

This is a handful, but it works exactly as your previous variant. Encapsulate functionality in functions Now, my main critique point is that you don't provide a single function for your cipher. It's hard to test your functionality at the moment, so we better add one and some documentation: 

Note that your code called twice. Your is fine, apart from the fact that most C/C++ programmer use and instead of . But that's personal preference. What's not fine is the overhead. You should merge both and into a single function: 

And now back to As I said, it's completely fine, however the additional type signature isn't necessary, as the compiler can infer 's type in that context. We end up with: 

has two small problems. First, (see above) is linear (\$\mathcal O(n)\$), whereas is constant (\$\mathcal O(1)\$). If possible, we should prefer the second variant. And is also linear (see above). But if we fix we don't need anymore: 

I will come to the yet unknown functions in a second. What did we gain so far? Well, is going to be a valid answer when we try to inspect it, and we can pattern match on it. Even better, the compiler can tell us that we forgot a pattern if we decide to add or something similar later. Splitting hairs and concerns Now to the functions. They are pretty much the same as yours, with a small twist: 

The recursive definition of Fibonacci is an elegant one, but in practice it's something you would never want to use. Let's say you want to get . How often does get called? 

While it's possible to use instead of the pattern matching, matching makes the base case more visible. Also, this is a perfect spot to use instead of . 

Now the user doesn't know that there is any kind of node. After all, your public interface of never exposed those nodes in the first way. Your constructor is fine: 

Since returns only non-empty lists, we can safely apply . Remarks on style I strongly suggest you to move large lambdas into their own bindings. That made the first variant of more readable and is the usual style, for example in GHC's code. Also, if you use both the results of and use , or—if you use positive numbers only or don't want the specific behaviour behind —. Don't be afraid to give something in your code a name. That makes it easier to grasp and to change later. Also, you might notice that a function is reusable. And, by the way, primes are a "hard" topic, as in: it's not easy to get proper bounds of the numbers you have to check, since you would need to know whether is already a prime, or whether is a prime, or and so on. Exercises 

Note that I've moved the parse of the single node coordinates after the initial approach. Concerning your additional questions: yes, exceptions provide a way to control your flow, but so would error return codes, e.g. 

Note that I changed 's type, since we also changed 's type. In case you're not familiar with : in this context you can think of as 

Instead, stderr should get used. The Rust Book contains a section for error handling in its example I/O project which you can use for inspiration. But if you never intend to distribute your reddit/redis updater, feel free to use or . Other than that, the turbofish syntax at isn't necessary, since its inferred by the return type. Also, you can traverse instead of since you don't want to use the afterwards, you just have to save the beforehand. However, you probably want to use in if you want to reuse the connection. Also, you usually want to some of the standard traits, for example . Again, that depends on whether you will use your structs in another context, but if you ever publish your package it's very recommended to derive all possible standard traits (, , , , , and maybe in your case). 

If you don't want to re-use or , I'd go with and your third approach. Congratulations on your first approach, by the way. I've seen raw-pointer usage going wrong too many times, and it's refreshing to see some clever use there. Well done. But that's more or less the way you would do it in C (sans template and , of course). But you will probably admit that working with pointers at that point is somewhat a headache. Both and (as pointers) can be expressed as and for two suitable and , like you did in your second approach. Either way, unless you really need to use raw pointers use either smart pointers (e.g. ) or (better) full containers like .