We've been using a linked server to an access database for close to a year now with little issue. Now when I run a select query against the linked server the query sits there and never finishes. Killing the session results in the familiar transaction sitting in Rollback/Killed status until the service is restarted. 

I'm creating a script to automaticly copy from multiple access databases into sql server databases. My script currently creates a new sql database and creates all of the tables. It then trys to insert the data from an access database (using linked servers) table into the newly created sql database table. The problem is not all of the databases have all of the tables. In these cases it is ok for the sql server table to remain empty. However, the insert throws an error because the table does not exist in the linked server. Is there any way to tell sql server to ignore the table not found error so that it will continue on to the next insert statment? 

Our database Server is being hosted by another company. They provide a file level backup that occurs once per day. They also allow for Log Shipping. My company is taking advantage of their Logshipping option as a major part of their backup and recovery solution. I would like to have a better backup system that would allow us to restore data up to the point in time of failure. Typicly this would be full backkup model for the database and backups of the transaction logs as well as the full and incrimentals. However, the vendor has told me that providing us with transaction log backups would cause issues with the Log Shipping. Is there a backup strategy that will allow me to restore to the point of failure and also use logshipping? 

when I run the procedure to do the restore. Here is the procedure code. Can anyone spot what my error is? 

SQL SERVER 2008 R2 When attempting to connect to the default instance of sqlserver on our local server from SSMS on my desktop I'm receiving the following error. 

So it turns out that the get-help invoke-sqlcmd -example shows the array variable as using 'dbname="MyDatabase"' as the syntax. However this gives the error above but if you swap the quote positions such that the variable uses "dbname='MyDatabase'" then the script works. 

We are migrating our SSRS reports server database from SQL SERVER 2008 R2 to SQL SERVER 2014 and as I understand it this means all SSRS reports will receive a new id. Hence any SSIS packages that reference a report would break. Is there a way to identify all SSIS packages that make reference to SSRS reports? 

In this case you dont need to update the records for people who havent returned a car. You only update the record to contain the date when they have returned the car. 

There were also several queries with a status of running but none of these had been running for a significant amount of time. SQL Server threw no alerts during the time frame and nothing looked out of the ordinary in the logs. There were also no alerts for Blocking processes at this time. Finally the decision was made to fail over the SQL Server cluster. This cleared up the issue. I've exhausted the places I can think of to look to come up with an explanation for the outage. Has anyone experienced similar behavior? Is there something I should be checking that I haven't mentioned? 

Access returns an error looking for the parameter a.opromisedshipdate. Any idea how I can achieve this filter? In the real world query I'm doing this to provide aggregated order information (the inline view) next to non aggregated order information but I need the aggregated information to only go up to the date that is a part of the current order. Thanks in advance. 

We have a SQL job that runs each night to perform a data extract and import function. The job performs against a snapshot and copies from several tables in a serial loop. Today the job reported the following error: 

I've verified that the server is set for remote connections inside the instance - properties - connections. I've verified that TCP\IP and Named Pipes are enabled under Configuration Manager - sql server network configuration - protocols for MSSQLSERVER I've verified that the browser service is running and that the sql server service is running. I've verified that the 1433 port is opened in the windows firewall. 

This did not occur near the time of the Snap recreation job. Several of the table data extracts (that point at the same snap) prior to this one worked fine. And the job appeared to recover for the next table data extract. I'd like to find out what caused this job to fail. Any help on places to look would be helpful as it doesn't appear that there is any reason for the snapshot to have been offline. 

Natural join "automatically" joins on equality of common columns, but you should only write that if that's what you want based on table meanings and your desied result. There's no "automatically" knowing how two tables "should" be joined or in any other way any table "should" appear in a query. We do not need to know constraints to query. Their presence just means the inputs may be limited and, consequently, the output may be too. You could define some kind of join_on_fk_to_pk operator that "automatically" joins per declared constraints; but if you want the meaning of the query to stay the same if only constraints change but not table meanings then you'd have to change that query to not use the new declared constaints. Just giving the query you want using join & conditions already leaves the meaning the same despite any constraint changes. What constraints hold (including PKs, FKs, UNIQUE & CHECK) don't affect what tables mean. Of course, if the table meanings change then the contraints might change. But if the constraints change it doesn't mean that queries should change. One does not need to know constraints to query. Knowing about constraints means we can use further expressions that without the constraint holding wouldn't return the same answer. Eg expecting via UNIQUE that a table has one row, so we can use it as a scalar. These queries can break if the constraint was assumed but not declared. But declaring a constraint that the query didn't assume cannot break it. Is there any rule of thumb to construct SQL query from a human-readable description? 

That asks for tuples P where there is an offer S1 where [P's sid is S1's sid and for all Items S1's iid is that item's iid]. I hope you can see that this involves a single iid being the same as all the ones in Item, not what you want. Your answer 1 

Relational calculus is a notation for expressing relation values in terms of given named relations and sometimes constants. So is relational algebra. A constraint is an expression making a statement about one or more relation values. But such a statement is not relation-valued, so you can't express it in relation-valued notation alone. (So you need to ask what exactly is wanted.) You have to have operators returning equality of relations, or whether a relation is empty, etc. (Either of those two is sufficient.) 

A FD is a MVD "in disguise". If an FD holds then a certain MVD also holds. With MVDs 1 is a special case of multi(ple). This can be seen from the rules of inference for MVDs at the definition link: RA → B implies A ↠ B. Hint: t1 & t2 can be t3 & t4. Hint: In the example there are only two tuples, so t1 & t2 must be those, and you know the MVD so you know A & B, and there are only two tuples, so if t3 & t4 exist they must be those. So fill in the equations and see whether given those two tuples (t1 & t2) there are also two tuples with the properties needed (t3 & t4). 

If there are no offers and some stores then every store offers every item. But since there are no offers, it's false that . No Ps make that true. So this is {}. So this is not the answer. (Your answer 1 may be modified from a textbook answer expressed by Codd's original relational division operator. But so dividing Offers by Items doesn't actually return tuples s where . It returns rows where . So the answer is not expressed by Offers/Items.) (Indeed 2 has an extra ∃ compared to your natural language description and my answer, but it's the outer ∃. So your solution 1 is in that way reminiscent of the correct answer.) 

You must decide exactly what these mean and what situations can arise. Together those determines the constraints (PKs, FKs etc). You must give the meanings to users. In the case of payments, purchases, orders, prices etc finalized transactions are usually recorded with the data from that time, even if a customer ceases to be a customer or prices changed. Does this matter to you? Is there is a FK ? I gave Payment a meaning that would lead to that FK. The integrity problem is that your design allows Enrollment and Payment to disagree about EnrollID and StudentID even when the DBMS is enforcing the constraints. That can never arise, and the database would describe an impossible situation, so it's an error, but the DBMS doesn't know that, so it can't reject it. That problem is gone with FK . Then the DBMS catches those errors. But then of you update one of those tables then you have to update the other. That is called an update anomaly. (This one doesn't lead to errors when you have the 2-column FK; it's just inconvenient.) You can see that the table meanings are simpler when you just have