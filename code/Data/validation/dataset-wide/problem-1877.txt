If you bring up anything first you always retain a better footing or even an upper hand. When the other party brings it up, there is often a lingering sense, whether only perceived or real, as if the issue were being introduced with, "you don't seem to place much importance or awareness on the following, but I'd like to talk about ...". 

Your friend should be flexible about what he regards as a "team". A software developer working in a team does not necessarily mean being part of a group working on the same technical thing. The team is also your fellow software developers who work on different components, but report to the same manager. They are the people whom you can ask to review a piece of code. Furthermore, your team are the people who support the customers in relation to parts of the software you're responsible for. Product managers who guide the direction of the product and the scope of the milestones are part of your team. Software testers who look for ways to break what you've written are your team. People looking after builds, bug trackers and version control, and their integration and automations, are your team. If your friend thinks about "team" more broadly, he will probably realize that he's worked with and relied upon teams all along. 

It's a bad idea because you cannot represent the organization's business interests properly in your role as boss, with respect to that person. You are likely to favor that person regardless of their performance in their job. Since you run this small company, this might not be a problem. Your company, your rules, right? But suppose you ran a very large company. Would you want your lower level managers supervising people who are their significant others? Or nephews, nieces, cousins, ...? There is a word for this: nepotism. 

As an interviewee, you're not in the position to dictate about how you should be questioned. So the best you can do is, if you don't know the detailed technical answer they are looking for, is "I do not know; I do not have that API function memorized". That's it! It's not the end of the world. No sniveling, no pouting, just a calm, "I don't know". So you cannot answer. Who cares? They are going to ask the same questions of other candidates being interviewed. If someone has all that stuff memorized, then by golly, that is the person they are looking for. More power to him or her! Maybe they are looking for someone who has recent, in-depth experience with very specific API's and can just spew out the code like it's in the cuff of his or her sleeve. In other words, a quintessential Java monkey. On the other hand, if they find that none of the candidates has even 10% of it memorized, then they will just have to deal with the aftermath of their inane knowledge sampling method which hasn't yielded any useful data. This is their problem, not yours. If you complain during the interview, then you're seen as a complainer, regardless of the validity of the complaints. This is true even if they actually listen to the content of the complaint and change their interviewing method. It will benefit the next interviewee, not you. And that is unlikely, because chances are that whoever is doing the interviewing firmly believes in doing it that way. In other words, "thank you for your valuable opinion about our interview process. Next!" 

It means that someone wrote an ad using words they don't understand and didn't check with a dictionary. "Flexible ethics" is not a good thing. What this phrase suggests is the practice of adjusting your moral reasoning in every situation such that you rationalize doing what is convenient rather than what is right, and look the other way in regard to others doing the same thing. Even if the intended meaning is to refer to work ethic, a "flexible work ethic" simply denotes slacking off whenever you feel like it. For example, work hard when the weather is bad, and use a sick day when the sun is shining to enjoy a day off. "Work hours" are not "work ethic". Doing the same work from 9 to 5, versus from 10 to 6, does not constitute a difference in work ethic. 

One useful piece of information would be: who gets paid first if it all folds? Say that at shutdown time, the operation has a million dollars' worth of assets. However, when the claims by various parties are added up, they exceed a million (of course). So this means, not everyone can get all the money they are asking for. Which parties do get their money? Do the remaining employees get full severance, or are various creditors paid off, leaving nothing for the workers? When a leader promises that a plan is in the works that will be finalized and then revealed, there should be a date attached with that. E.g. "I will meet with the investors and creditors on Thursday morning, and if the plan is accepted, I will present in the afternoon." If there is no concrete date, you have estimate one for yourself: if the plan does not emerge by that date, then exercise your "Plan B". 

People who won't be contacting you in writing, or not right away, don't need to know the spelling of your name now. Stick with having a solid, clear pronunciation that people can memorize and repeat. The solution to the ritual problem of spelling out names is the business card. Make a batch of those and hand them out to people who are likely to need to know how your name is written. You can have contact cards even if you're not self-employed. Another solution is to wear a name tag, even though you aren't a conference or trade show. If some new people are coming into your organization, it could be helpful. 

The proper solution for this is a bug tracking database, where the analysts can not only report bugs, but also submit their ideas as feature requests (instead of wasting time discussing it with you). There could be some diamonds among the coal pieces there. If someone comes up with a very good idea or two, you can incorporate it as a feature in the next milestone. [T]heir suggestions are often not implementable in software because of other software requirements which the analysts are not familiar with. The analysts are not actually telling you what kind of code to write? Lead them to describe the solutions in terms of use cases. Things that look unimplementable in the short term as a bugfix can be doable with the proper planning and investment of resources. It's difficult in software to get ideas, so you should pick as many brains as possible. 

The client hasn't said anything about the delay, quite possibly because the application is very good (if we take your word for it), the fixed price was a good deal, and the over-time was free. If you're nervous about this (or anything else), a good strategy is for you to be the person to bring it up first. 

"Results-oriented" is simply a long-standing corporate buzzword. It doesn't mean much. Of course, almost anything in any job has the goal of obtaining a result. Being result-oriented simply means keeping that in mind, so that you switch strategies if your current efforts don't show signs of producing a result, instead of expecting that you're doing a good job simply by generating effort. But there is hardly a job where effort can compensate for a poor track record of producing results. 

You didn't give Bob any personal guarantee; only that you have information suggesting that his name might not be on the layoff list. Bob should have caught on that you're making it clear that the information was second hand, and that it was not current. You didn't see the list, but were told by Jackie and Sue that Bob is not on it; and even if that was accurate, the list was likely revised between Thursday night and layoff day. You're not the one who put Bob on the layoff list; you were just as surprised. As for you, you have to be more careful in the future about how you relay information. If it is second-hand and several days old, don't tell people that they should relax because they have nothing to worry about. Of course they still have something to worry about: namely that the info is second-hand and outdated! Better yet, next time you go drinking with people, whatever was said at the bar stays at the bar. Layoff plans are confidential, don't you think? 

Some people will find humor in this, but others may just see it as dumb. There isn't much useful information content in "I like C++" or "I dislike Javascript". You probably don't like everything about C++, and don't dislike every aspect of Javascript. Your likes and dislikes require proper justification, and that belongs in an opinion paper or blog. There is no space in a resume to do your likes and dislikes the proper justice, so that they are portrayed as well-considered opinions rather than prejudice. 

And how do you know the information was false? It may have been true at the time Sue relayed it. Perhaps as of that Thursday night, Bob really wasn't on the list. You also cannot blame Sue if you wheedled the information out of her on Bob's behalf. It's a good idea to apologize to Bob anyway, but he also owes you an apology for turning on you. "How could you do this to me?" Do what? You're not the one who fired him, but he made it out to be that way. Look at it this way; Bob enjoyed one worry-free evening because he jumped to a conclusion. If you hadn't told him anything, he would have spent that day worrying, and the next day, he would have been canned all the same. As time passes, Bob will hopefully realize his mistakes: having put trust into hearsay, and turning on the messenger unjustly in an emotional moment. 

Really, no paper trail? So if you get paid cash in the country where you live, it is not taxable income? If you remitted tax, then you have a paper trail from that. If you were required to pay tax on this, but didn't, then maybe don't mention it in interviews. The tax-free income you enjoyed can be regarded as an offset against the interview woes you're having. 

A good approach here is to avoid accusing the boss of doing something wrong, even though you feel that that is the source of your frustration. Rather that "you're making me produce too many revisions", I would frame this from the perspective that you're in fact producing too many revisions and would like to reduce that. "I feel I'm being inefficient. Is there a way I could proceed faster to the final revision? Can I somehow acquire some your design perspective so that I can converge on the result with fewer iterations for you to review and evaluate?" Another angle also: "Is it all normal or expected that I'm requiring so many revisions to get right, or is there something I should improve in my approach which would enable me to work faster?" 

Since you rotate the task of kitchen cleaning among everyone (right?) then at some point, every one of those people who leave cups on the tables and in the sink has been an appointed cleaner. One problem is that the appointed cleaners have an incomplete, lenient task description. They should take care of everything, including all the dirty kitchenware. Not only wiping surfaces and un-loading the dishwasher, but cleaning the sink, and wiping the floor. When everyone has had a chance to deal with the collection of cups from all over the kitchen, perhaps the lesson will stick. "When I was on clean-up duty, I remember that I hated it when I had to collect cups all over the place and stack them into the dishwasher. I know, maybe I should just put my empty cup into the dishwasher now. If everyone has the same idea, we will have an easier time on clean-up duty." Here is another idea. Simply do away with office-supplied kitchenware. Everyone should bring their own. (Though everyone is free to use the dishwasher, make it clear that people are not to "borrow" other people's clean wares out of the washer.) Furthermore, a rule is imposed that all dirty kitchenware left in the kitchen is removed and impounded. A small fee can be collected for releasing each confiscated item from the impound lot (a locked cabinet), and this goes straight into the pockets of whoever is on cleaning duty. Items not claimed for a week are thrown away. The problem will then take care of itself. The worst thing that will happen is that people keep dirty dishes at their desk. Then they still have to clean them before use, or else use dirty dishes. The confiscation could be extended to desks: dirty dishes left anywhere, not only in the kitchen, are impounded.