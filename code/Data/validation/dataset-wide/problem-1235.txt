Your test allowed a player to skip a turn by playing on a square he already had. It doesn’t matter which player is moving; only unoccupied squares are available. So I broke the test out into another function so as not to clutter the code. It’s readable with the name , without worrying too much about how it actually makes that determination, right? Your loop is structured awkwardly. Use a post test loop: 

The reason the first student is not appearing in the file is because you got confused over what you were doing with the variable. Within the function, it looks well (though strange): 

Your input argument will be able to take of any character type, but only using the default . You might do that on purpose, if Traits are never used other than the defaults? A will take a , , or C-style lexical string. 

put that in a separate (readable) function. It will also make it easy to change the implementation of the GCD algorithm itself without messing with the rest of the program! 

Your and functions don’t check for zero length. You have a function, so the user could delete all of them! Speaking of , you seem to duplicate the code first. Just use ! 

Very interesting that you allow salesman to be initialized with a segment of a larger vector. Is that a use case you anticipate (e.g. a huge list divided up among several salesmen)? It’s enlightened but only part way to what we expect: it is limited to segments of another vector, and can’t take begin/end iterators to locations in general (anything that can be iterated). Also, you should be using the . Here is the simple/direct way to take that information in the constructor. 

and you are protected against memory leaks when the Link constructor (and its payload’s constructor contained within) throws, and for any exceptions that occur up to when you discharge responsibility for keeping it. 

What does this do, compared with not mentioning it at all? I notice you add an empty default constructor to all your classes. Look up “the rule of five”. In the case of , you can remove the other constructor and then aggregate initialization takes hold, which is the same thing you wanted. Getting rid of it means I don’t have to wonder why you are passing by const ref instead of value. And you have a stray . 

There are a lot of these. Notice how the thing you peek always matches the parameter to the return value? What is the even doing? You need a function that returns the peeked word. In fact, all of this reads one char, switches on it, then peeks on the rest of the word. Why does it need to do it in two parts like that? You are just classifying the “word” a PUNCTUATOR. Make a list (static array, as discussed with keywords) and treat it in the same way. Just as there are keywords spelled with letters, these are a list of legal words spelled with non-letter/non-digit characters. The trick is you have to take the longest sequence that is a valid token. But use a table, not dozens of duplicated snippets of code. 

OK, I copied your source and ran it myself. First of all, did you notice that there is something seriously wrong?! 

Don’t use the weird . Using a vector of bytes will be faster, and using a bitset will give you the compactness if that was your intent. Writing is silly. Use uniform initialization: 

Instead of writing a loop, use the constructor form to create a vector of the desired length; all elements will be initialized to zero automatically. 

Use the algorithm instead. (Note that the supplied collections like are even more efficient, and copy-construct the elements that exist rather than default construct and then assign.) 

pointers I supposed the use of shared pointers was the possibility of sharing tree representation across instances, "persistence", and transactions. I’ve just watched some presentations on persistent data structures (and on Google’s trie, for that matter) so that was in my mind. I agree with Frank about pointers. When calling code that operates on an object, it doesn’t care how the object is owned, so making it take an argument of type shared_ptr means it can’t take objects owned by unique_ptr, or that are direct members of larger structures, or on the stack, etc. So these arguments are passed as a reference. In the Standard Guidelines, pointers are always non-owning. You mark them with owner<> to indicate otherwise. I agree that the root does not need to be dynamically allocated. But you need to avoid having an ugly special case for the first node. 

First, put this inline in the class definition. Second, use modern syntax: uniform initialization. More advanced: The strings are “sink” values, so the most efficient thing is to pass them by value and then move into place. So, you get: 

Don’t make that a member. You will have a general purpose way for code using this list to go through it, right? A display function should be a stand-alone function that calls the public API. 

and have the same parameter issue. The functions are identical except for one data item!! Don’t Do That! Factor out the thing that changed and make it a parameter. Since “player 1” and “player 2” are not very descriptive anyway, I’ll use the X and O for the prompt, too. 

You should make sure all the housekeeping members are provided, as the class you put this in will only get (x) if all its members and bases do (x). You forgot some. So did Martin in his answer. See §15 for the authoritative list. This has been taught as “The Rule of Five” but that neglects that any defined destructor will also kill auto-generation of move functions, so it should really be the Rule of Six. Or for movie fans, Rule of 5.1 perhaps? 

Hmm, so it wasn’t any harder after all; just replace the +1 with the proper length of the separator. That’s a good sign that the algorithm was structured well to match the way iterators and the standard algorithms work. 

How do you use this? Normally a takes a predicate but you have it labeled , and the first parameter is unnamed. I think it would be clearer to call it (If I understand what it does) and name the searched-for rectangle to be clear that’s what it is for. 

Piece of cake, though you have to replicate the small case clause by hand. Now, what about reading? You’ll notice that the classes reflect my earlier comments in that the deserialization is done by the constructor. It can be implemented in the same manner as the visitor. 

You don’t need to qualify your own names when you are in that namespace. Or is that intentional to guard against ADL? I never see that technique used. 

The ability to display the contents should not be a member — that can be written using the public API of being able to ask its size and each item contained. Don’t bloat your interfaces with stuff that’s not essential to the encapsulation and abstraction.