I left out parenthes as they would blow up the code. You could add them, although they are redundant. It is a matter of taste. This is the most straightforward attempt. Simply loop through all eight neighbors, test if the neighbors are within the field. If they are, count existing cells, but ignore the own position. There are some optimizations possible. Although it is hard to optimize a loop over max 8 elements. The most obvious improvement would be to eliminate the test for the boundaries. This can be done by increasing the board by one row and col at each side. You are not allowed to put anything there, but testing would be greatly simplified. So valid positions would be [1.. xLen-1] and [1...yLen-1]. The simplified code looks like this (notice the removed boundary checks) 

The same applies to any datatype which does not require result conversion e.g. to megabytes or date time formatting. 

I'm working on a text based rpg game and a couple of commands make use of a target and container pattern. So I wrote this function to split the string up on a given word and put it back together. I'm not sure how efficient it will be in the real world, but I think that it can be improved. An example of such input and output would be: 

Maybe use a generic function to set the css on change if you don't have anything other than colors. It also helps with dry. 

Things you could improve You could return a code to the operating system to indicate that the files do not match, this would make it more useful, as you could add it to a shell script workflow. See the snippet below. 

It should be noted that the default application for open svg files should be set to a browser of some sort. 

Usually the first approach is better and requires no extra tooling. If you decide to go the mocking route, my personal choice is the rewire library, of which there exist various versions for various environments (e.g. for Babel). Regarding specific tests Avoid temporary variables when you can write the values inline. Instead of: 

Business logic or not I guess the general dichotomy is View logic v/s Business logic. So, to decide whether something is part of your application business logic, try to imagine your app having a completely different UI, like a command-line UI. Would the logic still need to part of your application with this new UI? If yes, then it's likely your business logic. Email validation and checking if user is logged in, seem to me as part of business logic. Controllers The role of a Controller is the most vague one in MVC world. That's why there exist several Model-View-* patterns: Model-View-Presenter, Model-View-ViewModel, Model-View-Adapter. To answer your question: 

This class does all the job and returns a default value in case the property is unknown (whether that is a bad design or wanted can be changed later). Now, in order to return a string property, simply call 

Your naming of is not correct. The variable holds a list containing th number . So its name should be . The same applies to the list. Regarding the if-else construct: One clause is redundant (the second ) so you my either omit this or rewrite the conditions like this. 

There are two more lines which we could optimize: The 'if' conditions. Considering the fact that the board consists of '0' and '1', we could do the following 1. Add whatever we find in the cell (0 or 1) 2. Count the center cell but later substract whatever it contains. 

You'd still be defining the inside another component, but most of the code would live outside. Additionally... 

On surface it's a well laid out code with bunch of helpful comments and good method names. However, looking deeper the data model of this game looks rather odd. Instead of storing the game state in a simple 2D array as such: 

Text is widely considered a much better protocol format. If you decide to go binary, you better have reasons for doing so: 

Regarding a plan to implement them recursively, I would suggest you instead look into implementing an algorithm like merge sort or quick sort, which are recursive in nature. 

Indentation and formatting First and foremost, this code is not properly indented. If a candidate presents me with an unindented or sloppily indented piece of code, I wouldn't hire him, no matter how good his code otherwise. 

I am writing a search indexer for a site I built. It counts the number of times a word is used in a given story allowing one use of the word per chapter. I have also attempt to weight words in the titles and the descriptions more heavily by including them in every chapter that is indexed. I would like to know if I am handling transactions properly for this, and preventing dead-locks while the update is performed on the database. I would also like to know if I can clarify the sql statements any or if there is a better way of concatenating the columns. 

The following makefile builds my classwork for my various college classes and builds pdfs to hold the notes I took during class. I would like feedback on my directory structure and any optimizations that can be thought of to help improve it. I've been using and updating it for the past 18 months. I know that I should probably document it a bit better The directory structure of the classes is as follows 

There are more cells on the board than cells that are set or reset at each round, hence the above loops are not called for each cell on the board but only for the few that are modified. I am quite sure this is a great performance improvement. 

In my point of view, it cannot get simpler than that. However, if you ask for ease of understanding, I would not use this code as you have to explain the code (add the contents of the cell?) and the last line ('return'). Also, when changing the board layout (e.g. from 0/1 to 0,99 or true/false) the code will not work like that anymore. However, it is the most compact. Now, when it comes to performance improvement you might consider maintaining a second matrix, which actually contains the current count of neightbors for each cell. This matrix is updated whenever you set or reset a cell. Setting a cell involves adding 1 to all neighbors while resetting a cell involves substracting 1 from all neighbors.