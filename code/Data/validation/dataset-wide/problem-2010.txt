Just two additional tips that haven't been covered: 1) If your help desk uses a numbered ticketing system, insist that they re-open the former ticket each time (same ticket number). Many internal and most external teams derive compensation based on how long tickets are opened. Padding a handful of quick email resets drives the bonus up; a month-long ticket for any reason can drive the bonus to $0. You'll get attention. 2) Your account can be become locked because somebody is attempting to log in as you and failing. This can happen when they make the mistake the first time, save it in their browser autocomplete, and then allow it to fail every time they start. This is particularly common when a separate failed-password screen is loaded, allowing the browser to use a different autocomplete on the retry. The Help Desk will know that the account is locked, and switching your handle--as ridiculous as that is--solves the problem. 

If your question is about the format and not the content, the appropriate tool for this is a wiki. It's a better flow than a repo, because it's easy to access and always show the most recent by default. There are many free services, and pay-for-privacy options out there. It's also really easy to host your own with any number of open source tools. I have worked in organizations that effectively use wikis for this type of thing. If you're developing code, redmine integrates one with some M/R functionality. 

If the job requires frequent interactions with this person, the interview is uncovering a major obstacle. I would admit that I'm having trouble / can't understand the person because of the accent, and suggest that things are done in writing or through another person acting as a mouthpiece. Always say things like this with a smile and genuinely appreciate the absurdity of the situation. You can try to parrot back, but if this is completely broken down, it's not impolite to suggest the interview end. It's not likely that you'll rise to the top of the candidate list in either case. 

Show off your skills If you don't have something great in your portfolio or in github, show off some skills you think might be relevant for the job. Make sure a technical person reviewing the code sees that you have all the elements--organized code, solid algorithm, coding conventions, best practices--everything should look professional. If you do that, it doesn't need to be ground-breaking or complex. It will show that you know what you're talking about, and that you'd fit into the company as a solid contributor. 

There is a generic answer. Software is changing rapidly, and if you plan on having a career 5 to 10 years from now your best bet is to get somewhere where you can touch new tools and new development processes. If your company is allowing you to do that, it's fine to stay there. But if you're continuing to babysit code that is older, then you will have less marketable skills when eventually something disrupts their niche and you need to move on. Your intuitions are likely correct, and it's time to go now. 

Only one thing is clear--they are keeping their options open. You should too. Keep interviewing and get excited about other opportunities. If this one loops back, you can decide when the offer comes through. You have no offer, no terms, nothing to bank on. If you try to push forward you will lose leverage in salary negotiation and gain nothing in moving them faster. Would you like the job for 20% less than market value? The fact that you're available right away probably doesn't concern them. They're taking a few more weeks to interview, what's wrong with 2 more for notice? 

Most start-ups call this person a CTO, particularly if they're advising the Board. Some will work without a CTO, in which case they are a Vice-President of Engineering and/or Technical Leader. Most candidates prefer CTO, followed by VP. The title will drive the candidates you see. Python developer will get far less ambitious people than CTO. The start-up CTO title would map into a large company based on span of control. Let's say the startup is purchased by a large company. If the person is the only developer or one of a few, they'll be a developer or lead developer. If the person oversees a few departments of developers, they'll be something like a director. 

The standard is to check that they have a DUNS number. It includes all companies in the US and EU, and is used by the United Nations and US federal government. DUNS ensures that the business exists, and for a fee you can get a credit rating that includes active lawsuits in the US against the company--which would show if a vendor has filed suit for non-payment. There are still many ways for a company to be a scam, but the credit report typically goes down quickly if the company isn't paying bills. The Better Business Bureau does not necessarily list all businesses. 

There are a few avenues open, if you can demonstrate useful, practical skills in an area. You can contribute substantially to a popular open source project. For instance, Google's Tensorflow is a high-visibility project in machine learning. You will meet experts and be valued on the merits of your work. You can create and market your own open source project. For instance, if you generate something useful in the Tensorflow ecosystem, you'll get noticed as more people adopt the parent tool. Network, network, network by going to trade shows and having meaningful conversations about the technology with people in the field. Meetups are useful for finding both the right people and the right companies. Investigate start-ups in the area. Startups usually need someone who can cover multiple bases, where your multiple skill sets will be an advantage. From any of these vantage points you can grow your portfolio of work in the area you want to transition toward, while applying the skills from your current position.