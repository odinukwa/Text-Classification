Put this in your back pocket and bring it up during your review. Asking for money immediately after a single successful project is a bit premature. Continue showing them that you are a go-getter and your review should be great. edit due to comments In the comments below you indicated that you aren't interested in a raise AND that your company doesn't do formal reviews. The best way to proceed is to simply schedule a meeting with your manager. In the meeting let them know that you want more responsibility and a bump in your position. Basically - just ask for it. 

In each of these scenarios the only one you should be concerned about is if the boss actually knows some good programmers who believe your work is garbage. If that's the case then your best bet is to try and get a meeting with them to go over your decisions while listening carefully to what they have to say. To be fair, the fact you don't want someone else to see it makes me believe you have something to hide. Perhaps you know your work isn't really that great and are afraid of what someone else might think about it. If this is the case then being able to discuss it with a third party would be a very good thing for you. So, I'd suggest you talk to your manager and ask if they could do the code review on site, with you. That way you can both learn from their experience as well as explain the decisions you've made. Every great programmer I know actually wants people to look over their work. Why? Because coding is hard and even highly experienced people can make basic mistakes. Whether that's in the code itself or even in the overall architecture. We know that if it's caught early enough then the pain for fixing it is minimized. We also know that no one is perfect and we can all learn from each other. 

There absolutely is a hierarchy in IT. The progression that I've seen in most places is - from bottom to top: Tech Support I - Usually filled with people that have the least amount of computer knowledge. They can cover the basics of "is it plugged in?", read from a script, reset passwords and record trouble tickets in a support system. Tech Support II (or above) - General troubleshooters. Can usually determine that the latest video driver you installed is the reason why the computer no longer boots. Often involved in cleaning malware / viruses from systems and generally just dealing with computer health issues. QA - Likely a similar level of knowledge of a TS I. Good at breaking things and recording exactly what they did. Natural progression for the less technically inclined who still likes working in IT. Business Analyst - May or may not have any in depth tech knowledge. Great communication skills. Usually comes from other areas of the company due to domain knowledge. Project Manager - Similar to a BA in that they might have zero clue on how to operate anything beyond MS Project. Strong organization skills required. A few organizations conflate this position with Programming Manager or even Lead Programmer. However they are not the same thing. That said, corp politics is often a determining factor in where this person sits. Sometimes Development, QA and BA's report to them. Sometimes they are just there to make sure meetings go well and everyone knows what to do in more of a non-managerial role. At this point we have two major branches Operations and Development. Some organizations place a higher priority on one branch over the other but it varies. Operations: Dedicated Server Managers - Not a real title, more of a classification. Sharepoint admins, Exchange/Email admins, Web server admins, etc fall into this. They usually have strong skills in a very particular technology. Usually seen only in the larger organizations. Way Back When these were the lower paid people that just watched the green screens to make sure nightly batch jobs worked. Due to specialization and the plethora of complicated off the shelf products they've evolved into respectable careers. Network Administrators - Slightly higher rating than a Dedicated Server Manager (DSM) simply because they are the work horses for keeping a company's network going while also performing the same roles as a DSM in medium to smaller organizations. They might even be utilized for TS II. The next step for a network admin is CTO / IT director. Development: Jr Programmers - Usually fresh out of college although there are other entry points. May end up causing as many problems as they help solve, but they exist because you have to "start somewhere" on this path. Sr. Programmer / Lead Developer - Things become a bit murky here. Some places have enough Sr's that only one is the actual Lead. Lead is a step towards being a Programming Manager, or may even be the Programming Manager. Sometimes it's only a differentiation due to pay scale. Either way, these people ought to know exactly what they are doing with code. In environments without BA's they are often the ones who speak with the end users. Programming Manager - Usually coordinates programmers, BA's and QA to produce a finished product. Sometimes BA/QA people report to them, sometimes not. Company politics plays a big part in their job - both in getting this position as well as the level of control they have. Next step is CTO / IT director. IT Director / CTO / CIO - The face of IT outside of the department. Really it's just all their fault, but at least they are paid well for taking the fall. I left out a few roles such as Network Security. These are just higher specializations in the above. That said, pay scale is often (not always) along the above lines. The above list is an attempt to rank the jobs the OP mentioned in terms of money, power and prestige within an organization from lowest to highest. Positions in IT are NOT roughly equivalent; not by a long shot. Rather that "prestige" is based on the level of difficulty in filling the positions which is roughly equivalent to the level of technical knowledge required. For example, even though a basic support person is usually required for any size business there are far more people "qualified" to handle that role than you'll ever find who can be a solid network admin. Because of that, saying you are in Tech Support doesn't bring along the same level of "prestige". Now, if you look at @blankip's answer, you'll see that "Support" can be broken down and specialized much further. If a business's "product" is in providing "support" services then their job titles are going to be quite a bit different than what I've listed. 

You can always say no to any request a company makes. However background checks are typically one of those hire/no hire items where simply declining it means automatic removal from consideration. 

An exit interview is NOT the place to air the reasons of your dissatisfaction. If have been a "good" employee, then any problems/issues you had should have been brought up to the relevant people prior to seeking employment elsewhere. If they were unable or unwilling to change them then your exit at this point should not be a surprise. In other words, if you were communicating properly then there should be nothing left other than to hand over any keys or other materials that belong to the company which are still in your possession and to pick up your final check (depending on local laws). 

I wouldn't even try to approach a boss and tell them their son is doing nothing. Rather, I see two potential options. The first is figuring out how to motivate this person. Sounds like he really doesn't have an interest in the tasks that have been assigned. Go to lunch with him and find out what it is he wants to be doing. There are several potential options from: he really is just this lazy on up to he doesn't like putting together pie charts but really wants to do bar graphs.. who knows. Maybe he just doesn't feel comfortable around the rest of the team. Lunch helps. Point is that you need to stop isolating him and start bringing him into the team in with some activity that they want to do. The second potential option is to just pretend he's not part of the team at all. In other words, let them spend all day reading the news or playing games while the rest of you do the job at hand. Basically consider him as not bringing any more to the company than the potted plant in the corner does. At some point he'll either be happy to be ignored OR he'll start making a fuss about not being included. Ideally it would be the latter at which point you would have an opportunity to try again. Honestly, I'd only take the second approach if the first one doesn't work out. Regardless, going to tell daddy that his little boy is a waste of space is not going to earn you any type of endearment. Also, I agree with Wesley - the boss is likely fully and completely aware of what it is his son is (or is not) doing. As a father of several children I can tell you that I know exactly how each of my kids are motivated, when they are slacking off and what level of involvement they have with whatever task it is they are working on. Quite frankly one of them isn't fit for any job beyond professional game player; but fortunately there is still time so we're working on that. ;) Point is there might be other considerations that you are just not aware of. Presumably there is a Mrs. Boss who might very well have some type of input here ... Heck, maybe the boss is hoping your team's work ethic will rub off on him. (see option 1). 

First off, A PhD in software engineering is of questionable value over a masters; and a masters is only sometimes more valuable than a bachelors when looking at small/medium sized companies. Those companies place a much higher value on provable, relevant and recent coding and problem solving ability - which you apparently don't have. If you were wanting to be a University Professor or even a researcher in a large company then things might be different. Honestly I wouldn't be surprised if you have to explain your reasoning for continuing to stay in college beyond your bachelors much less taking yet one more year off. If I interviewed a candidate with a recent PhD I'd probably be thinking that they weren't good enough to get a university job... That said, you can absolutely tell a potential employer that you took a year off to explore the world. Which, although it's a fun thing pretty much everyone would wish they had done, it's irrelevant to the job your looking to perform and we like to keep interviews on target. Future employers are naturally going to ask what you did in your chosen profession during that time. I'd highly recommend you start some type of project that you work on a few hours each week while sightseeing. 

Go talk to your boss about this. Let him know that you'd like to sit in on the meetings so that you can get a clearer picture of what to do. Tell him that you feel like you would be more effective if you could be in on the discussions that impact your work. You might have to have a few discussions like this with him until he gets it. If it continues and you report status on ABC and he says I wanted you to work on XYZ, then politely state that you weren't informed of that and wait for his response. Just stay calm and polite. If he values you then he'll change. 

Client visits in which you aren't given an exact meeting time and agenda are not the time to "take full advantage of their presence to understand them as customers of our software product". These are generally meet and greet. They simply want to put a name/voice to a face, shake a few hands and ask, in general, how things are going. In short they are just looking around your company to get a "good feeling". Often the only real meeting they'll have is with management while simply walking through the office. As the junior person, your job is to look nice, appear interested in whatever they have to say, smile a lot and be quiet unless you are asked a direct question. In other words: be seen and not heard. The managers/CEO are going to drive the conversations. That said, take this opportunity to discuss with your manager exactly what it is they expect out of you. They will likely tell you to just be ready, which basically means follow their lead and don't interrupt. 

There is a huge difference between someone that focuses solely on flaws and someone who provides positive reinforcement along with constructive criticism. If the majority of what comes out of your mouth is "this is wrong because of XYZ" then you're likely doing it wrong. However, if reviewing a bit of code or a process design and you see something that looks good, then point it out. Provide positive feedback about what you see as "right". That makes people feel good and they'll want to do more of it. At the same time you don't have to be constantly blowing sunshine up their tail pipe. If it's "wrong" - which, as you know, "wrong" is a very fluid thing in this industry - then point it out. Just don't let that be the single type of feedback your team gets. The main thing here is to provide sufficient detail so that the team knows why it's wrong. Most people want to do good. They want to be accepted by their boss and feel like they know what's expected of them. If you provide good direction and positive feedback when they are doing good then they'll want to keep going. If you only condemn the bad stuff then they will eventually become disinterested and either leave on their own or have to be forced out. On the flipside, constantly putting on an "Everything is Awesome!" face is just as unhelpful... unless it really is Awesome, at which point you should ask for a huge raise. 

Background checks don't deliver a "pass" or "fail" report, which is why you can't find information as far as what is "passing". It's just a list of what the company performing the search found. Each company has their own standards as far as what they deem acceptable or not. For example, one traffic ticket could disqualify someone from being hired as a delivery driver, whereas in most jobs they wouldn't even think twice about it. That said, I've seen IT departments that have no problems with convictions like that while at others it would be cause for immediate dismissal. I've even seen some where it was "understood" that as long as it stays at home then nobody cares... right up until there was a problem employee which the results from a "random" drug screen was the easiest way to fire them. I'd suggest you keep looking. If this company doesn't care then they won't bring it up. If they do, then you are unlikely to hear from them again. 

I see a couple problems. The first is that it sounds like the "tasks" you have are too large. Break them down into smaller chunks - preferably ones that should be completed in a single day. Next, don't ask them to track their time spent on tasks. You do that if the tasks are broken down by daily expectations this should be easy for you to do and the progress should be reported at a daily stand up meeting. For the most part I do agree with Amy and HLGEM about the employees self reporting this; however we need to get to that point first. The main thing I'm after here is that if the team can't properly estimate tasks that last longer than a day then we need to train them. Best way to get there is to have them estimate small tasks. One side benefit is having people be excited about showing progress. Another is that if you have people who repeatedly can't complete easy tasks in a single day then you know who to replace. BTW, "creative" doesn't mean "when they get around to it" Once you have them being able to complete small tasks quickly, then start moving it up to multi-day tasks. At this point they should be able to provide much better estimates that you can hold them to. There's more but I think that's where you need to start. 

In your particular case I'd make sure I didn't give the implementation plan and design away for free. The requestor should provide a list of requirements that are good enough for you to give a non-binding ball park figure. The next step would be for you to have the client pay you a certain amount to spend time building the analysis, implementation plan and initial design. From that you give them the price for completion. At which point it's up to them to continue with you or to find someone else to implement your design. When I was doing contract programming there were many times where I did the initial engagement while a different company performed the actual implementation. Sometimes this was even understood before the initial engagement even started. If you come to terms that this will sometimes happen and properly plan for it then you'll be happier.