Please use understandable naming. When I saw used in , I had to go back to find what it was really doing. Give it a name that specifies that it is the graphics side of the program right in the name. The same applies to various other names in the program. 

I recently wrote a code fix to handle many of the C# and VB.NET compiler diagnostics that was merged into Roslyn. Because it handles both, I implemented it as an abstract class with only the sections that are specific to the different languages in the language-specific implementations to eliminate code duplication. If you are interested, you can find my full test suites here: C# and VB.NET. The abstract class controls most of the implementation. Before you tell me to use for my code action implementation, Roslyn has an internal diagnostic telling me not to use that. 

Here, I get the doc comment, its summary block, and the param lists. Then, I build the full parameter list, build a list of nodes, and replace the old doc comment with the new one. When I build the list of nodes, instead of checking which items are separated with a newline, etc, I just remove all XmlTextSyntax nodes that only contain whitespace (which contain the beginning and the newlines), and insert my own between each item. I also leave the beginning node to prevent messing with the whitespace before the doc comment. All other items, except the current param nodes, go into the list. The param nodes are all entered together from the list to keep the items in the same order as they are in the method. If the last item is not an XmlTextSyntax node that ends with a newline token, I add a newline to prevent the beginning of the parameter definition from being added to the doc comment. This seems awful long and complex compared to some Roslyn code fixes, and I am wondering if I am missing an easier way to do this. Example change (full test suite can be found here): 

I have more menus to account for, but I haven't implemented going back to them yet as I do not have them fully implemented. What is really going on here is I need to programmatically select a menu to open it so I can select a menu item within it. If I do not open the menu, will not have , so the app will crash. This is CurrentItem: 

Use instead. This is actually break the program flow as if there was a breakpoint there to catch your attention directly. 

This single snippet of code has many things that can be improved in both readability, performance, and maintainability. First, use braces around your single-statement blocks. This will make it much easier for you to maintain later, and will ensure bugs are not introduced when more statements are added. Second, you are overcomplicating things with that loop. First, you loop way more than necessary: 

If you are not sure about any of the other code is called, and how it interacts with this, please feel free to ask for it or an explanation of what it does. This works because each index of the collection of search values in corresponds to the index of the matching in . My keys are all stored in a .resw (resources) file for ease of adding multiple languages. I have a feeling this isn't good, although it is simple enough to maintain, so please tell me everything wrong with it. 

Your HTML seems to be correct, except you do not have a doctype in there, which goes at the top of the document: Doctype for HTML5: 

After a somewhat lengthily discussion in the chat room, I have set up an IoC container with Unity to store my settings in. This is my static IoC class: 

But, is a magic number in there, and magic numbers are never good. Why don't you create a value to store the number that you are checking the passed values against? 

Your CSS isn't too bad, but there are three problems according to the CSS validator at W3C. First of all, it complains about your because you are not allowed to use negative padding values. From my tests, it appears you could remove this line without affecting anything, or you could change the value to to shift the text up by 10 pixels. Second and third, you reference the color twice in your code as . You did your colors correctly in all other places, so this must just be a slip. 

A while ago, I was working on a chess project with a couple other people. In the end, I wrote all but a couple of the lines of code, including these: 

First, your HTML passes the W3C validator with no errors. This will help all browsers render it the same, and make it easier to maintain. However, because you are using HTML5, you should use the element instead of a : 

Anything catch your eye there? Lots and lots of copy/pasted code. Most of that can be moved to before or after the switch: 

A third problem is you should use a common font that is installed on most machines, unless you are going to include the font in your webpage. I know that my Windows machine does not have installed, and I don't think my parents' MacBook has it either; also, you should specify a few different fonts just in case one is not installed so it doesn't just use the default - you can also specify a font family to default to, such as . 

Also, I'd make that (and most of your other s) a guard clause and remove the extra level of indentation: 

For your test method--use a unit testing framework and actually write a unit test. You basically have a test here that you have to explicitly call and examine the debug output (this test only works in debug mode!) to see if it passes. A unit test framework can be found by the Test Explorer in VS or R#'s equivalent, run by the framework, and gives a clear indication, along with potential error messages, of whether it passes. 

If implements , then it will automatically be registered as both and . You shouldn't need to register types with parameters explicitly; AutoFac will look at the parameters and inject them automatically. Actually, you really shouldn't be registering types explicitly; I don't know the exact syntax, but you can register a whole assembly at once. Finally, if you really do need a different container here, then what you do is inject an instance into your class and do something like: 

I iterate over the letters in , checking if they are in the alphabet, and add them to the string. Then, I iterate over the alphabet and check whether each character is in the . This can be simplified even further if you are not interested in printing the letters that are in the phrase. I would recommend cutting it down even further to this: 

First, you print the "Welcome to PyCALC" message each time it loops - this should be a one time message displayed when it first is called. Second, with the exception of the assignment to , you have this section in each of the calculations: 

I have a Back function, and it is growing. I also think this is terrible, but I don't seem to get how it can be improved: 

ExtensionMethods.fs This is really the public API of my library. I designed the methods like this so they could be called as in both C# and F#. 

To help ensure your site displays well across browsers, you should validate your HTML at the W3C validator. It is actually very good, but there are two problems. and are invalid - you should remove the attribute. You can validate your CSS at a W3C validator too. Other than the unknown vender extensions, it appears to be valid. Your JavaScript looks neat and clean for the most part, but your have irregular indentation in a few places: 

That constructor looks kind of messy. What I would do here is create a field and assign it in the constructor: 

You cannot do though, because it doesn't know how much space to give for when it is assigned. Naming: What does mean? From the context, it is clear it means , but why not name it to clearly specify what it is timing. Typically you use PascalCase for public field/property names, and camelCase for private field/property and variable names: 

There is similar code for each setting, but this is a good representation of it. It doesn't feel right to use an to represent my theme; should this be an ? Please tell me all the problems now so I don't have to refactor again later.