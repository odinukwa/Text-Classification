This also belongs to setting up the table. The annoying part (pet peeve of mine) is that it's not sure if any of this code, aside from the argument validation, needs to be executed in this order. Does it matter in what order the buttons are given their functionality? Does it matter if you first declare the table to not be editable, and then set up the columns and the selection mode? That's more a criticism of GUI code than it is a criticism of your code. More relevant; because there is no strict order, it's hard to find stuff. If you relocate the code to separate functions, you'll find the table code in the table setup function, rather than "about halfway down ". I'd want to see an initialize function which does nothing more than argument validation, and . 

One question remains. Those 8 rules, where do they go? This one I don't have good argumentation for. It just goes in the same location as the cell iteration. It fits easiest there. And since Ocean already knows the Cells... I fit it in Ocean. Ocean gains a method "simulateTimestep", and the result is that the content of all the Cells change. I said before that you need 2 grids to make a timestep work. Yet I only have one. What happened? It turns out that the reason why you need two grids is because if the values change, you might get incorrect results. And you'll see that I do have two sets of values; one as the currently active grid, and one as the set of values I got back from iterating the cells during a timestep. With all that said about your design, let's take a look at your code. 

Step 2 - identify sections of duplicate code and generalize them. In your case, this is the and at the end of each case. 

Library Usage No, not books. Java has gone through quite some versions, and certain common problems have been solved for you already. Specifically, I'd like to point you to and it's subclasses. Take a look at a , and . Right now, you have to do these weird things with copying arrays. You don't wanna bother with that, do you? With a , you can have an ever expanding array without having to copy things around (Java will do that for you, internally). You just have to call to add things to a . 

I suggest you pick one of these three. Right now, there's no way to see the if/elseif chain as connected, which makes the function hard to understand. Moving on... 

Your approach is mostly correct, but it seems to be too specifically written to solve the problem as stated. For instance, you're making the assumption that any line that doesn't start with a plus or a minus is a line containing student names. One example case: what if a student gets no pluses or minuses? This wouldn't occur in the case as stated, but you usually don't get this "it's already handled" and it just helps to program in such a way that input which slightly deviates from normal can still be dealt with gracefully. You're also making the assumption that when you're counting pluses and minuses, everything that is not a plus is a minus. This works, for now. But if changes in the scoring mechanism are requested, you might want to go with a more flexible approach - one which separates the I/O and the counting, for instance. 

Performance-tuning your code is likely to be hard without semantics surrounding your code and timing information. See if there's ways to profile which functions take longest... on a more granular level than just this function. 

This check, for instance, wouldn't need the comparison with 0 if you used . In the comments I already said something about overflow. Now, you can indeed say "that's such a big amount of elements, people are not going to surpass this" and not build it in. That's okay. Be sure to add it in as a comment in the header though, because you don't want to accidentally find out that this is a problem. 

This is premature optimization! You are worried about ONE new instance of ?! ONE? Have you profiled your code? Do you know that constantly creating a new object is expensive in this case? If it does, you could improve this comment by stating how much the difference exactly is. 

I feel this is the major flaw in your algorithm. You'd be better off with a linked list - no copying needed to expand the list. Also, why are you manually copying from the string array when there is to do just this for you? (Granted, I wouldn't use it in an interview either, but that's because the interviews I envision don't give me access to the internet or documentation, and getting the parameters for right is tricky.) The working of your StringBuilder is correct, though it doesn't offer much in terms of utility. It's not null safe, it's not thread-safe, and it doesn't offer any functionality besides appending Strings. There are no constructors that start with a string or capacity, and add returns void, so you can't chain method calls. I expect a StringBuilder like this to end up in a utilities package so it is not a major concern, but your instance variables are package-scoped. So other code can violate your internals. There's also a lack of an API; something which is much needed in utility classes because they're far more likely to be reused. 

Or ? ? again? Is that the same or a different one? What does the boolean I get back mean? Local variable declarations too: 

That saves you an extra idle thread. You can only use this in example code like yours though, as real tasks will probably be better off with having a division between "worker threads" and "manager threads". On that note, maybe you should use a thread pool of sorts - get the overhead of creating threads down. 

How would you go about solving these issues? Personally, I take a whiteboard and start by drawing the domain model classes. These are things that are mentioned in a problem statements. You have the disadvantage of a biased problem statement. Here's the bias: 

There's probably a greater optimization to be made on a algorithmic level, but this at least fixes one issue. 

This way, you keep all the specifics out of your main functions. Maybe the names aren't even right, and it's more like 

It'll be your task to implement the ones I haven't shown yet. You'll also have to move some of the variables so they're class members, not just declared in a function (hint: and are two of these, I don't know if there are more). Given the name of the functions, it should be easy to guess what they do. shuffles the cards. tests if two cards are a match. And so on... 

and don't tell me anything about what it's for. In the lower half you also use a variable which... also doesn't explain anything. Even although you have split up your code to be relatively small, it's still complicated due to the short variable names. If you were to spend a small amount of time on giving them names to the length of one or two words (like , that one tells me it's a node that is above the child node, but not the parent), the quality would be greatly improved. 

Whenever you add nodes to your queue, you start at the head and iterate over the nodes to get to the end! That means, if we traverse a tree of 15 items (4 layers all filled), you.. 

It only made sense after looking at the diagram. Still, you're doing a calculation twice... why not do it like this? 

show duplication. Back to the key press listener however, this could be part of the table setup method. 

JavaDoc Class documentation should tell you what it is. Function documentation should tell you what it does. Variable documentation should tell you what it means. And any in-code comments should tell you why it does. These statements generally hold true. You seem to follow these statements, ... mostly. Be careful of comments like this: 

Part 3: The part where you take all the objects you've made, and use to get a list of ids, so you can call with the right values. ... Try using a . Part 4: The part where you take all the objects you've made, and use the retrieved database objects to clone and set the objects into the s. It's up to you to do the actual cutting and pasting. Ask for a follow up review with a new question once you're done, maybe then we can take a look at writing some "parser class" that handles all the crap for you. Result: 

if the vectorY is greater than 0... I guess that means if you're moving ... down... then... if the bottom tile is solid or if either the bottom left tile is solid and the ... x something? or the bottom right tile is solid and x something but different... It's way too confusing! I can understand it, obviously, as I recognize the pattern (and you've given me an image for explanation). However, if I were to explain this code to someone else, I'd mentally recheck the code before continuing my explanation. I'd even manage to get it wrong at least once during my explanation ("and this checks for the upward movement, ... er, I mean the downward movement"). So, how can we fix that? Let's use English! 

This is missing braces which you should add because they are a sanity check - missing braces means unfinished thoughts means unfinished logic - at least for me, and I freak out whenever the braces are missing. 

Yeah, that'd work. Now we got rid of . I didn't touch your comments. Chances are they don't make sense anymore. I'll be honest, I don't understand the algorithm, and I didn't test this code. All I did was analyse the code statically and rearrange statements. Maybe if you analyse the code you can come up with a more understandable description of the algorithm? 

Make it so that the id gives direct access. This could be done with hash functions or arrays or... look up data structures with \$O(1)\$ access. Make it so that the search space is smaller. For instance, instead of linking nodes together by ID, nest nodes via providing a attribute containing more nodes. Then you only have to search in a sublist, meaning that you'd be searching in lists anywhere from 1 to 20% of your main list. Given the way access iterations scale, 5*20 is only 1050 iterations, compared to the 5050 we had earlier. 

Personally, I prefer to keep functions with the same name together. This makes it easier to look them up. So in this case, I'd swap with . 

The rest of all the declarations should be moved to be after this check. I'd even be inclined to make the last check, this part 

As you can see, this shortens the code. It even provides nice and methods instead of making you iterate through the keys and then having to find the corresponding value. 

I think this line sums up your code pretty well. You have a strange and different way of programming. Where I'd write , You'd involve some utils class of some sort. It's not wrong, it's just different. And there's plenty more of those. Things like putting variables at the bottom of a class, rather than at the top. Or making asserts. Or putting everything into one file because that's easier to work with. Or having some tool that generates various functions at compile time based on annotations... It's not my kind of style, and I'm not used to it. I read the code in great detail, the only thing I have actual complaints on is how you handled the main class. and aren't the strongest variable names, and certainly not for code at the highest level of your program. 

I would suggest a more sophisticated way of doing client-side validation. This all depends on what your design is (if the customer wants it this way, then that's it), but personally, I'd prefer it if you check the field after I've edited it, and if it is not correct, that you change the styling on the field, maybe set an error label. Right now you're throwing alert dialogs around which disrupt flow. By making the validation reactive like that, the user has instant feedback, rather than "do -> submit -> error -> repeat" which is a cycle that causes frustrations. Imagine you had a separate check for a single digit, or a check to see if there'a capital in the password, and a check that you're using at least 1 special symbol... the user would trigger these warnings one at a time; they'd end up with about 5 errors (1 for the length, 1 for digit, 1 for capital, 1 for special characters, and then 1 for the repeat password because they forgot). Looking at the code, it seems mostly fine for your purposes; the only thing I'd do is move to a separate constant . 

I think if you gave them a better name like , it would improve readability. Your test code seems to be on emergency rationing for variable name characters. 

Your code looks good. I've visited this question multiple times and I couldn't find anything. Design-wise there might be improvements, but the implementation looks very good. The only thing I found was this. 

, well, length is 2, x is 0. So that's true. and are set to 0, because that's the spot you're putting the item in. Then we call putL, which ALWAYS returns true. So even if the item doesn't fit, you can always put it in. Taking a closer look at your previous questions, I think you should go back to the code you had in the first question you asked, and make sure that sticking a 3x1x1 stick in a 2x2x2 cube gives you "false". 

The whole tick tock mechanism is not needed for your main loop. You've set up this elaborate contraption (it took me a while to understand) which measures how long your last "frame" took. Then, when deciding on how long you'll need to wait to get to the next frame, you retrieve that time, and subtract that from the current time plus how long you want to wait. All this is a very elaborate mechanism for this: 

That way, it reads like "if index is between 0 and vector->nrOfElements". I would even rename to , but that's another matter of opinion. 

Your algorithm is selection sort. Selection sort has a time complexity of \$O(n^2)\$. For sorting algorithms, that's pretty slow. Consider looking up a sorting algorithm such as quicksort, which, whilst it does have a worst case performance of \$O(n^2)\$, on average, it tends to take \$O(n log n)\$. Or, as suggested in the comments, make use of the built-in libraries. Use . Use of library code, especially when part of the language that you're programming in, can save significantly on the work you need to do.