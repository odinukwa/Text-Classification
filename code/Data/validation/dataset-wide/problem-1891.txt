Your coworker did get the work done. They shouldn't have forgotten to do it to begin with, but it sounds like once it was brought to their attention they dealt with it quickly and effectively (i.e. the very next day). Your perception is that wasn't fast enough, but as their coworker and not their manager it's not really your call to make. You may not know what they've worked out with their actual manager about the issue or more generally about working extra hours or their work-life balance. In any case, the coworker's handling of the situation seems to be in line with the organization's culture/expectations. If it really irks you, then start by advocating for a more formal culture. Barring that, you're not their manager and senior or not you don't really get to have a direct say in terms of where, when, or how they do their work. Those aren't things you can control in this situation. What you can control is how you perceive and react to things your coworker does. In that light I'd recommend looking at this as a "no harm, no foul" kind of situation. I know you feel that a day of QA time was lost, but is that really the case? Was the QA team just sitting there idle, waiting for your coworker to wrap up their forgotten tasks at 10:00 pm (or whenever)? Would they really have started testing right that moment, and tested through the night? Was there nothing else they could test in the meantime? My general experience is that there's little practical difference between completing a task late at night and completing it during business hours the next day, apart from the cost to the employee's well-being. So my suggestion would be to take this as an opportunity to improve your working processes to make it harder for people to just plain forget what things they're supposed to do, and leave it at that. 

All employees were required to complete a self-assessment where they rated their skill levels and accomplishments and so on. Managers reviewed employee self-assessments, and added their own feedback, notes, and review items. Rewards were issued to employees with positive assessments, typically in the form of bonuses. Employees could also nominate other employees for rewards at any time (you have to be able to justify the nomination, of course), and each quarter selected nominees (personally I suspect that every nominated employee would be "selected") would be honored with additional accolades and rewards (typically a plaque and an amazon gift card for $100 or so). 

That rationale is absurd. If they give you 10 days to cover both vacation and sick leave, then their reasoning implies that they either expect you to never get sick or to not take vacations, because that's essentially the only way to stay within such a paltry limit. 

Based on your question, it sounds like you're clearly in scenario #1. So walking off might not be the best idea. But if you've got an offer from another company and they want you to start immediately, you could always just bring the subject up with your boss and say "I've got an offer which requests my immediate availability, and we both know that I'm not really doing much around here; can I please end my notice period early?". Probably they'll go along with it (most employers know better than to try to keep someone who really doesn't want to be there). 

That is a problem. So why not document the changes somewhere centralized and easily accessible? Does your company run a wiki (or if not, then why not?)? That's where your requirements documentation should live, and any discussions that happen in relation to the requirements should be attached there. The requirements themselves should be updated in the main document as changes are agreed upon, and each change should be scoped as it is applied to the main requirements document. Your wiki will maintain a log of all changes as they are made, making it easy to view how the requirements have evolved over time. And it can also be configured to notify all members of the development team whenever a change is made, ensuring that everyone is kept informed of changes as they are made. If your company is not running a wiki, then your immediate task is: Convince your manager(s) that they really, really need to be running a wiki or some comparable solution. 

Why were there such large discrepancies in the salaries that employees were drawing for performing similar roles? Why did management consider it necessary to declare salary details confidential in the first place, and is the company even in a locale where salary details can be declared confidential in a legally enforceable way? Why did management consider it wise or appropriate to immediately terminate the person who leaked the spreadsheet? 

Generally speaking, I also give far more weight to a candidate's resume than I do their cover letter. What I'm looking for is a set of specific abilities and skills, and my goal is to identify as many people who probably have those skills as possible. If I throw out good candidates for spurious reasons such as grammar and phrasing, then I'm really just working against myself. The same applies if I advance an unqualified candidate simply because they wrote a good cover letter or picked a fancy-looking template for their resume. So my advice is to focus on the things that are directly relevant to the position the person has applied for, and ignore everything else. The rest can be sorted out further along in the interview process. You don't want to discard good candidates for bad reasons. 

That's roughly along the lines of what I'd do anyways. The benefit of breaking things up into categories is that it demonstrates that you understand a particular technology and its use, and that you didn't just google for a list of technical terms to include on your resume. You'd be surprised how many people do that. 

Almost definitely you should try to keep them separate. Unless you never post anything on your personal social-network accounts that you wouldn't want your professional contacts to see. For most people that is not the case. In fact there have been a number of high-profile stories about people being fired after a professional contact discovered "inappropriate" content on their personal social-network account. You don't want to be that guy. And conversely, content that would be appropriate for your professional contacts might be boring as hell to your personal friends. You don't want to be that guy who bores his friends by posting his work stuff on his personal social networks, either. I'd suggest that there is a natural solution to this problem. Social networks targeted to professionals exist. Use one (like linkedin) for all of your professional contacts. Use another (like facebook) for all of your personal contacts. Note that some crossover may exist, and of course you should be particularly careful about letting a professional contact cross over into your personal social network. Make sure you know and trust the person and that you have a good relationship with them first. There's less risk with respect to letting personal contacts cross over into your professional network. 

Generally if you want the sort of perks that are commonplace in the tech world, you'll have to work at a tech company. Things like salary and health benefits can always be negotiated. As can telecommuting. You may want to talk with your manager to see what can be worked out with respect to these items. The issues that you've raised with respect to staff retention, reduced productivity, and poor morale are all valid. Reiterate them to management, and see if anything can be done. But some perks that you see at the larger tech companies, like a free catered lunch, would be impractical to implement on an ad-hoc basis (how would the company explain that it is providing free lunch to IT workers, while leaving everyone else to fend for themselves?). The bottom line, however, is that if you really want all the perks that someone working at a tech company would normally get, you need to go and find a job at a tech company. There's no obligation for any company to provide specific or better perks for tech workers, and administrative/operational issues generally make it impractical for a company to provide noticeably better benefits for one class of employees while leaving everyone else in the cold. 

...aren't what you'd generally hear from a programmer/web developer. Programming (and web development, at the level you are working, is programming) is at least 90% problem-solving. If you can't increase your skills in that area, you'll find it extremely difficult to succeed at any sort of programming/web development role. So what can you do about the current situation? I think there are two basic options: 

Protect yourself. It's about the only thing you can do given that it sounds like you're in a climate where you are presumed guilty until proven innocent. Either that or resign and find a different job. Assuming you don't want to go for the latter option, then you should protect yourself by keeping your interactions with the third-party company on a written (i.e. email) basis as much as possible. Then you will always have an indisputable record of what was said, when, and in what context. Since it's probably not possible for you to avoid phone conversations with the third-party company altogether, you should also take measures to record your calls with them, or to at least make them believe that your calls with them are being recorded. If you start each phone conversation with "we have recently implemented a policy requiring all phone calls to be monitored and recorded for quality-assurance purposes, is this okay with you?", then that should solve the problem of them deliberately fabricating charges. It will not, however, protect you if their idea of "swearing" is different from your idea of swearing, or if they're too stupid to understand that having a recorded phone conversation removes their ability to lie about things, or if they're too smart to believe that the call is actually being recorded. So the best way to protect yourself would be to actually record the phone conversations, if you can. Depending upon where you are located, this may not be legal. In virtually all jurisdictions you are on solid legal grounds if you notify the person you're talking to that the call will/may be recorded. In most countries (notable exceptions are Finland, Germany, India and Turkey) and most U.S. states even surreptitiously recording your conversation without the other person's knowledge is legal. Some U.S. states do, however, treat any sort of surreptitious recording as a civil and even criminal offense. So definitely make sure you know which laws apply in your specific circumstance. If in doubt consult a lawyer with experience in your local laws. 

At worst, they'll just ignore your inquiry. And at best, you'll get sufficient details to conclusively determine if the posting was put up by your current company or not, so that you can proceed accordingly. 

As far as your resume goes, a 1 month stint at a company isn't the best looking thing. I'd suggest just leaving it off your resume entirely if that's what it comes to. It's better to just leave a 1 month gap (particularly if you start looking for a new job immediately, since then you can simply say you've been trying to find the right role for that entire span of time) and then explain it if asked. If your current job doesn't work out, you may want to seriously consider a different career path. In which case your 1 month stint as a web developer wouldn't be relevant to your resume anyways. 

Start running daily standup meetings with your team. Hold these relatively early (say, 9:30 am if people usually show up around 9:00), and keep them quick and on topic. Each team member gets to say 1) what they worked on/accomplished during the previous day, 2) what they will be working on today, and 3) if there are any blockers preventing them from accomplishing their tasks. This should not take more than 10-15 minutes each day, and running these meetings will let you see that progress is lagging before an entire week has elapsed. And they will give you more visibility into exactly why progress is lagging. Have all stakeholders/"pigs" attend all business/requirement-related meetings. It's not sufficient appropriate to only bring the team-leader; he's not the only one with a vested interest in the project. And not just for the issues that you've highlighted, but because the more developers you bring to these discussions the more likely you are to 1) get accurate estimates on the scope of each requirement, and to 2) catch any issues or gotchas in the requirements before they become serious problems. You also, of course, solve the problem of the team lead not passing on the requirements to the team. 

It's hard to comment on the motives of the hiring company without having more context, but if you are in the tech industry then there is currently far more demand for qualified software engineers/architects/programmers than there is supply. So that could have something to do with it. A lot of tech companies have to basically just take what they can get. The rest seems like it comes down to you deciding which point is most important to you: 

While the concern for others is noble, it's also fairly misplaced (and at least a little condescending, too). If the candidate is someone you'd be able to work with, the fair assumption (to both the candidate and your co-workers) is that he's someone everyone else can work with too. Barring some explicit request to the contrary, you shouldn't assume that your co-workers are less able to cope than you are, or that some aspect of their past irrevocably defines them as fragile, permanently damaged entities that are helpless without your protection. At a minimum they should be allowed their agency, and the opportunity to decide for themselves whether or not they think they can work with this candidate. Maybe invite him back to meet with the team (if he hasn't already...and consider extending this opportunity to all prospective hires, in the future), and then see if any of their impressions match your own. Fix the Interview Process (if needed) None of which is to say I condone disrespect towards women. I absolutely do not. However the level of toxicity being attributed to this candidate (based upon a singular experience, very much outside of the professional sphere) requires something deep-rooted and pervasive. It requires the candidate to have no concept of how to interact with women respectfully both inside or outside of the workplace. That's something that your general interview process should be able to catch without exceptional treatment of this one candidate or covert inside information from one of his past flings. Because if it doesn't then how can you say that the alternative candidates you might prefer don't hold exactly the same views about women in private? You can't. If your interview process doesn't currently evaluate this aspect (i.e. respect for a gender-diverse workforce) of "culture-fit", it should. And feel free to start with this candidate, but don't stop there. 

Software requirements are never finalized. If the requirements have changed then you really need to update your "finalized" requirements document to reflect the changes. Otherwise you run into exactly the issues you are describing. If you find it too disruptive to work off of a "living" requirements document (which it certainly can be), you can take a snapshot of the requirements (or some subset of requirements) and call that your Minimum Viable Product. Then your MVP requirements can stay fixed, and that's what you build your initial release towards. Any changes to the requirements are recorded against the main document (or within the product backlog, if you are using agile/Scrum), and you deal with them after completing your MVP implementation.