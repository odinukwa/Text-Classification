You do not have the authority to book a technician before that. You can simply say "I can't book anyone before X date." That is true, because it is not your decision, as you found out when you tried to do it. The details of the meaning are possibly different from what the hearer assumes, but you are not deliberately deceiving them, just telling them what is in your power to do. If they press you, as that person did, you can say "it is not in my power to make a booking any earlier than that". If they want a supervisor, give them a supervisor. 

Clarification: this question vs technical debt This question has to do with me challenging long-standing beliefs about a product without committing career suicide. Rather than strictly be about dealing with technical debt, there is this: management suggests that perhaps the code is so complex that I can’t understand it, and posited the mistakes are by design; that the original developer is so meta, that what looks like mistakes are actually strokes of genius. Perhaps another reason this isn't quite about technical debt is that the difference between 'genius' code and technical debt is that management communicates that I'm not supposed to alter 'genius' code, and that 'genius' code isn't technical debt: it's the secret black magic. I wish management would think of it as technical debt. Instead they don't. Management isn't concerned with the time, cost, or money directly –– although that is some concern. 

I work for a company with roughly a thousand clients that has been in business for about 20 years. We have, in a sense, the exact same problem as you. You have the opportunity to fix it now and fix it correctly, and I strongly implore you to take that opportunity now. What you need is a separate third level domain. Leave Steve's wordpress site on www.helpvets.com , and get DNS set up so that admin.helpvets.com directs to your completely different site. In fact, it's best if admin.helpvets.com is not even hosted at the same location, because that will help in figuring out root cause when one or the other is unreachable. I would advise you to (benevolently) get control of the DNS setup, if possible, so that you can keep people like Steve from mistakenly taking you offline in a misguided effort to "consolidate" or something. Your site is the centralized spreadsheet replacement. Steve's site is "the website". You will be so happy when Steve borks something up in wordpress and your site still runs. So happy. So very happy. Note that Steve will get all the credit for the awesome online presence and many people will not even be aware of what you are doing. You should be ready for that, is all I'm saying. Good thing all your stuff was in version control when Steve deleted it, by the way. Oh, only the code was, and none of the supporting stuff was? Hmmm, bet you don't make that mistake again. :) You are learning great lessons very early in your career. You will have this kind of thing repeated at every real job, and what you learn here will be applicable over and over again in many different situations. Strong separation of concerns is a godsend to any organization and you're getting a chance to get that principle in for these vets on the ground floor. No power struggle necessary--you're simply dividing up responsibilities, you do what you know, and Steve does what Steve knows, conflict gone. (Until the next conflict comes up :) ). Good luck! 

TL;DR I inherited a project. Long story short, the code I am tasked to maintain is bad. So bad, in fact, the product is not only incomplete but non-functional and has been for years. How do I communicate to management, in a way that isn’t embarrassing to them, in a way that doesn’t make me look lazy or stupid, that a valuable product is in a dire state? 

I'm in school right now, and in a couple of years, I'm going to look for work as a software/systems engineer. The thing is that right now, I'm 32 years old. With age being a potential issue, where is age less of an issue? What type of company/culture should be absolutely avoided? Any warning signs? Some backstory, if you have the time. (TL;DR, I'll be an "old" man in a new job, and it could suck.) I've got a couple more years to go before I graduate with a BS (Yes, I know degrees aren't everything, but I have none at all, except for an Arabic AA.) in CompSci, as well as several AASs (in Computer Programming, Web Development, and Comp Sci) and several certs (C++, Java, OracleSQL). Right now, I'm just not comfortable putting myself on the market because I don't feel yet I'm even an "average good" programmer, though I'm putting tremendous effort toward that. On the bright side, I didn't start out software/tech ignorant. I was in the Marines for 8 years, finishing the last three in Special Operations Intelligence (Signals), and did contracting for a year in a company that specialized in networking centric geolocation. Got laid off and went back to school. Then was hired as a contract worker for Google for over a year and a half. I've had plenty of computer science exposure and OJT in programming (also UAS systems, remote sensing, GIS, database design/implementation, and SDRs), but have only really dedicated myself academically to Computer Science/Software Engineering in the last year, after realizing this really is what makes me happy, and where I seem to have the most suitable talents. Thing is, I'm going to be a 34-35 year old entry level employee, working with 22-24 year olds starting fresh as well, but they are all shiny and new(and may actually have more experience in tech industry), which may make me look bad. People my age will have over 10 years experience and will not be my peers, likely having senior positions in company. I feel it could be a situation where it looks like I'm experienced because of my age, but when I behave like a new guy, which I will be, I'll be treated like an idiot, instead of a new guy. I've got a family to worry about, so this is really stressing me out. 

One thing to keep in mind, that I haven't seen mentioned, is that the company may well be completely happy to interview that person even if they know the person doesn't think they have any interest in the position. An interview is a chance to sell the interviewee the position. So, if they liked the resume enough to want to talk to the interviewee, they might be totally fine with the "ostensibly uninterested" person coming in, because they want a chance to change that person's mind. They also "get their name out there"--in the sense that, having gone through the interview process, if the company made a good impression (which is the company's responsibility, of course), then there is one more person in the industry that knows this would be an interesting company to work for. So, all of the interviewee's friends in the industry are now potential contacts for that company, from one interview. It's very hard to say that it's a waste of time, even if you don't have any intention of leaving. You might change your mind; you might unexpectedly lose the job you are happy with in another month; you might have a friend who would be very interested once they know what you know having interviewed. While I think your ethical question is valid as phrased (to distill it a bit: "if you're completely wasting their time, on a false pretense, to benefit yourself, is that unethical?"), I don't think that the premise that this is a waste of time for the company is necessarily a valid one. 

Details Most of the time, I wouldn’t be nervous communicating this to management. Unfortunately a long line of piece-meal maintenance by people, some of whom had little development experience, who only “touched” the code long enough to add a patch here or there, then move on, has painted a picture to management over the years that the project is just one step away being production ready. That is woefully not the case. A short list of issues in the genius code I have come across in the ~1.5Gb code base are... 

The above answers (I think it's safe to assume that they will all stay above this one) cover the OP's ethical question. I'm going to answer a slightly different question, which is this: suppose you succumbed to curiosity and looked at the file--what is the ethical thing to do now? Consider: 

While I agree with other answers that this sounds suspicious on the manager's part, it seems that when you say "he basically forbade me to write emails to him and other colleagues" that those "other colleagues" are people above your boss in the chain of command ("which had relevance for both that manager and his manager, who I also CC'ed"). If so, your boss is correct, those emails are escalations. If you email someone's boss, you're escalating the issue. He is correctly recognizing that you have taken an issue to his superiors, which is one very solid definition of escalation. LangeHaare's answer addresses a path forward for you to take once you recognize that one thing your boss is saying is correct--you have been escalating issues. Also, as a basic rule of thumb, any time you go over your manager's head, expect either you or your manager to be fired (as explained by Matthew Grivich). It doesn't always go that way, but I would generally consider that to be the most likely outcome in a US business. 

I should add that when I first started working on it, it didn't even compile. And when I got it to compile, it failed at runtime. It’s a nightmare. The problem is, the management has received assurance from whom they inherited it, and from previous “gung-ho” developers, that it “works,” so have invested significantly into it... And now the buck is passed to me. And they want it in production in about 2 months. When I suggest that previous developers may not have been entirely honest or understood the product entirely, management sends mixed signals about “just get it done,” and “why isn’t it done yet” ... and “we’re not really sure it ever worked” to “it was working when you received it,” and “we’ve never seen it work” to “it’s already in production.” [EDIT: pasted most of the next paragraph into the TL;DR section.] Management also suggested that perhaps it’s so complex that I can’t understand it, and posited the mistakes are by design; that the original developer is so meta, that what looks like mistakes are actually strokes of genius. Granted, I’m no genius, and maybe that is the case: to which I offer my previous observations about the very fundamental issues I found. Perhaps there’s politics at play above my level. 

The only thing left that you can do is to mitigate the damage caused by your breach of trust. In my opinion, the best way to do that is to ensure that no other entity in the universe is affected by that knowledge. Don't use that information to make any decisions. Don't use it to change your opinion of the person whose trust you breached. Don't tell the person you have that information. Don't tell your closest confidant/spouse/lawyer that information. In short, act as if you never knew it. When the information comes back to mind, remind yourself that you only know it as a result of a breach of trust and that you are ethically required to act as if you do not know it. This is hard, but you made the mistake, you should accept the consequences.