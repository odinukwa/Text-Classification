This is something for management to handle. You say he doesn't like being micromanaged. Tough, he has made micromanagement necessary. Your manager should expect daily commits from him and should code review then to see if he is making progress. If someone lies about meeting a deadline and never brings up that they are not making progress, then they cannot be trusted until they show by their actions that they are doing well. We had to do this with someone who was working remotely (as well as revoking the right to work remotely) and as soon as this person knew how closely she was being watched, she straightened up and did her job and we were able to ease off after a couple of weeks. As a peer, you can do nothing about this except discuss the lack of progress with the manager and help him or her devise a game plan. Most likely this person will be fired from what you describe. Be prepared to pick up his part of the work. You can suggest that he be assigned to less critical tasks, you can suggest that he be given a deadline a couple of days before the real one so that someone can pick up the work if he fails again. You can plan to be done early knowing you will have to pick up his part of the work. But only management can take effective action when a person is under-performing. 

Bad plan. Spending the time learning the skills in more depth is great but you will still be rated lower tha people who are using them in their jobs every day. So you gain virtually nothing by doing this. Further, many people who try this find out that they end up frittering their time away and don't actually spend concentrated time on the skills. You talk about the long hours you currently work and how that makes it difficult for you to learn new skills. Now here is something you can do something about. First take a minimum of a one week vacation and do not do anything technology realted. You sound (And probably are) exhausted and need to recharge. When you come back, scale back your hours to no more than 40 a week. Now you do have the time and the energy to learn, you are still employed and thus will be more attractive to hire than if you were unemployed. 

All technical people should be ready to participate fully in requirements definition. When no technical people are consulted you get requirements that are too vague to be useful in developing code or requirements to do something specific when it won't solve the actual problem they have or all sorts of other things. What you bring to the table is twofold, your knowledge of how programming in general works, what is and isn't feasible from a purely technical standpoint and your knowledge of how the current system the project is being integrated into works or your knowledge of the system that is being replaced. Both are invaluable in determining requirements. You can keep them from going down a wrong path. But there are other reasons to be there and to participate as well. IF you have ever played the childhood game of telephone, you know that the message deteriorates the more people it passes through. By being in on the meeting, you know what was actually said and how others in the room interpreted it. This keeps you from getting a poorly passed on message. You also start to see the business reasons why things are being asked for and start to develop an understanding of the business domain and can start to think of how you can solve the actual problems they have rather than what they said in the formal requirement. If things are unclear to you, then you can get the information from the source not passed through 12 people when you ask a question later while you try to implement. This helps prevent deterioration of the information so that Client A wants problem B solved but by the time the message gets to you it has morphed into problem ZQ. This greatly increases your chances of building what they need instead of what was told to you after passing through many people. If you are developer, you should be fighting to be included in these meetings. Any place where devs are excluded is doing it wrong and will have many more bugs than they need to have You don't want to waste time solving the wrong problem. Next you have a chance at this stage to influence the direction of the project which is also invaluable. Ask any very experienced dev how often they have been forced to build something stupid because no one could clearly communicate with the ultimate users. You can stop account managers and BAs and other people from promising what can't be delivered in the timeframe. It is often too late to protest the schedule after it has been agreed on in a meeting like this. You can point out all the things they haven't thought of that this will involve so they understand why the timeline doesn't work. I have seen a group of people think that a change must be simple because how hard can it be to add a button to a form. It never occurs to these people that the button won't do anything unless someone defines what it will do and then builds the underlying structure and code to make that thing happen. Having devs in a requirements meeting to explain how difficult some task might be can often prevent you having to work the next 12 weekends in row and 14 hours days for weeks on end to meet a deadline designed around the idea that this was something easy to do. You also get to ask questions abut the less common paths through the software. For instance, they say they want to institute an approval process and then define how that works. I have never seen a group of non-programmers define what to do in that process if the approval is turned down, yet most competent devs will need to know that has to be defined because every dev knows that when you have an IF branch, you should be handling more than one case. From a career perspective it is important for you to actively particulate as well. The people in these meetings are often the people who have input into raises and promotions and bonuses. You want them to have a good impression of your professionalism and your technical ability based on the things you bring up. Remember most of these people will never see a line of code and they are part of the process that allocated limited budgets for pay and bonuses. The only thing they will know about you is what they learned in these meetings and any emails you send and anything they hear about you. If they only thing they heard was you built the part of the project where there was a bug they found painful (but you saw as minor because it took minutes to fix) then they will think you are incompetent if they have no other way to judge. They have no basis for determining how good a dev you are except these meetings and any issue that gets escalated. Don't make the escalations be the only thing they know about you. 

Why on earth would you find a letter asking for referrals to be rude? That is how the better recruiters get candidates. You are free to ignore. But you seem to want to know what is in it for you? Well taking the long view, if I recommend someone for a job I am not qualified for and he gets the job, then he owes me a favor. He also might be inclined to hire me because he knows my work just as I knew his, so it may be a way to get entry into an organization. Further the recruiter knows you helped him. They will consider you a person they want to work with and where is the downside to that for you? People who work with other people's needs and cooperate tend to get more cooperation in the long run. People who want to be given something up front before they will make any effort no matter how minor (usually when I recommend someone to a recruiter, it takes me less than five mintues, maybe ten if I don't have their contact information handy.) come across as arrogant and greedy and hard to work with. Is that really the impression you want people, especially those who have say in what potential future opportunities come your way, to have of you? Asking for a referral bonus from a recruiter would be rude and inappropriate. It would pretty much guarantee he won't want to work with you in the future or use the person you recommended. That is a lose-lose situation, through greed you lose a possibly value future contact, your recommendee loses out on a job he might be interested in and nobody wins. And really how much work did you do? You wrote an email with a name and contact information. Asking for compensation for that just looks petty. 

What your boss is saying is that he is getting complaints about you being unproductive. This is a serious problem for you as a professional. This is not about just one time being away from your desk for 35 minutes, this is about others having noticed a pattern of behavior. Your team feels that they are doing the work you should be doing. You have been labelled a slacker in the minds of your coworkers, your boss and your boss's boss. You need to seriously attend to this or you will be fired. First, you need to detail what you have actually accomplished in the last few weeks and then take that to your boss in person and discuss his concerns about your performance. If you can do an analysis of what you have accomplished in comparison to other people at your same level (assuming it comes out in your favor), then that is a powerful tool to fight this. You said in a comment, you have difficulty remembering all the points you want to make in a face-to-face discussion. Well, write a list and take it with you. You need to ask your boss for the specific actions you need to take. And then you need to take those actions whether you agree with them or not. But just talking to the boss and eventually responding to the email (detail not only the explanation requested but any changes to your behavior you intend to take) after consulting the boss is not enough in this case because multiple people have complained about your behavior. You need to be seen amending your behavior. Stop using your phone at work or at least reduce it by 60-80%. Don't leave your desk as often. Make sure to check in more code than anyone else and take on the more complex, difficult to solve issues. It doesn't seem fair, but once you have a rep as a slacker, the only way to get past it is to conspicuously not be a slacker and be a top performer instead. 

There are alot of disadvantages to staying when they make a counter-offer. First whatever problem(s) that led you to be willing to look for a new job (and it is almost never just money) will still be there. Next, since you will have received a large pay increase, then you can expect that you will not be receiving another pay increase for quite some time. This includes cost of living increases. Some companies only make a counteroffer to keep the person until they can find a replacement, so accepting can be risky. You have another job right now, you might not in two months when they downsize your job away from you. You have the potential to anger a possible employer by retracting the offer. This might make it harder for you to move on later depending on your local job market. What advantage so you have to staying? It is not more moeney because you have said that the other offer was higher. It is not professional growth because that appears to be better at the new company. So really the only advantage you have is that you stay with something familiar. Is that really what you want? Do you really want to stay somewhere where they clearly could have been paying you market value all long and they didn't choose to? 

I would list the education dates for the Masters and then put Projected graduation date of Dec 2017 (or whatever it is). That way it is clear you are almost through the masters and that you would likely get at least partial credit for experience for being part way through the Masters especially since you are starting your last semester.