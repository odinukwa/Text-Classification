Here I would establish something that I call context state. Your functions and daemon run in a certain context that is established. 

a) There is one conceptional behavior I personally don't like: The code will leave a partially written file behind in case of an error, instead of removing it. b) 

This is a mixture of storing the value and storing the operation. When you need to print a value, you look up the range and print the value. As you see, we need less than 64 bytes for this simple example to store the information how the 7.4 GB data is compromised of, yet we can print the value for each and every array position. Even if we have reduced the data, we still need to optimize the remaining data. We can't just dump it into a linked list - as stated, we can end up with Q+1 entries (200001), we can't afford to search the entries with an effort of O(n), let alone (r-l) * O(n). But if we put the data into a binary search tree, we can find the correct array entry in 18 steps within the 200000 entries. This costs us some more memory, not only due to the overhead, but as we need the array index as key, we can't group all identical values together, just as long as they are one range. So the example above will need 4 nodes in the binary search tree, to separate the value 0 twice. So, when you combine these two approaches, you should be able to get a decent memory and processor time consumption. 

In fact that SelectedChanged, I would recommend moving that to your model too, the logic i mean. Your ViewModel Should, if possible handle your navigation not the view. As for your notification changes Have a look at fody weavers. When doing a WPF ui personally I prefer the cleanliness of adding a single 

If you had that in your constructor you could perform all the quest handling without any implementation detail knowledge, allowing you to (amongst other things) test the handler without relying on a database. 

Then in your Complete function you could throw an exception if is false. You would then have access to your composite different parameters in your complete method while keeping your abstraction, albeit with the caveat that your initialization is now a two stage process, that requires an initialization call; *ps, no I do not propose that to be an actual argument name! 

and with all that in place you should be able to throw a number of custom exceptions and wrap the whole thing in one catch block that will log the associated message and return the associated enum. 

cuts 48 characters to 38 and keeps the intent clear. It also follows the consistent intention of the user of this code of asking a question about the article, in this case is the current user. but why stop there? why not make a DSL and eval and compile and evaluate your own custom language: 

If you I am using a class selector, such as then the selector engine has to do a little more than it needs to. In this example, the selector engine has to walk the entire DOM to match the correct elements. We can improve this a couple of ways: 

4 - User compiled queries where possible. If you know you might be performing a query multiple times, there is little sense in having the query provider generate the sql each time, you might as well take advantage of the type: 

Regardless of how you do it, at some point in the execution of a method like that, there will be a enumeration. What you can do, is make the method more terse by using a LINQ method: 

For actual method improvements, you should consider argument validation. What happens if value is ? Your current code will return in a . Behaviourly would it be correct to throw an in this case? Or is the possible value an automatic resultant value of false? You should also consider how your are comparing strings? Should you provide an overload that allows the caller to pass in an appropriate object? Or perhaps specify the ? 

These are small performance improvements, you'll appreciate them more if you are doing a lot of DOM manipulation and lookup. More simplistic applications won't have such an apparent performance improvement. 

I am going to re-use an old answer. While the context is slightly different, it is basically the same question. UnitTesting with Mocking and Dependency Injection using Ninject 

or a weighted Modifier, which is just a modifier with an Int value, now you can sort based on that value and apply the modifiers in order based on their weight value. still agnostic from the Attribute. or whatever.... and conditionally apply these modifiers. The possibilities are endless, 

Normally I'd give more detailed advice and break things down but there is a lot wrong there. Too much to tackle in a simple review. There seems to be a lack of understanding of the finer points of program design and architecture. That's fine though. We all have to learn things for the first time at least once! I would recommend picking up something like: Head First Design Patterns. It will explain ways of making code reusable and how to design around a problem. 

Personally I am less inclined towards this, more overhead in terms of building a fluent interface for your equation aggregation and a bit harder for newer people to grasp using but then again it reads better than any other solution at first glance regardless of ability. So if you were to package this as a modifier API for yourself it might be the way to go (but for api additions I tend to follow the rule of 3 uses so may be premature to do so); but as a problem solve for a particular project I would choose the more straightforward above method.