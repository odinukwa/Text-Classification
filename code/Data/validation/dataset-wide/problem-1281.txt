then you can monitor just a single channel, and can also correlate any results to a name in a better way, and also correlate an error better too. Concurrency The use of the channel is OK for concurrency, but for a job like this I would instead defer to having a more discrete mechanism. Have a channel that you push domain names on to from the CSV parser, and then have X number of concurrent go-routines reading from that. Closing the channel indicates no-more-data to process. Use wait-groups to monitor completion.... 

Note how your initial array already contains the "next" password when initialized. Then, you can convert that to a string, and then increment the array to be ready for the next call. But, I want to sugges tthat you are doing it all horribly wrong... ;-) What you should be doing is using a simple long value to store your next value, and then using integer division and modulo to work your base-62 system. Additionally, your variable names are quite horrible.... but that's OK, we wil lget rid of them all except the worst.... 

Use the slower Random to seed your class, then let your class run with the rest. Note, there is no real way to use the time systems in a computer to get random values... it's just not infused with enough entropy to be random, or predictability to be reliable. 

Note that you get a lot of duplication of values because you allow overlapping points. This appears to be a requirement of yours. Still, for example, by design, you will get 24 identical results each with the segments: If you want to reduce the results to unique solutions only, then it is a relatively trivial adjustment to the way the array is managed.... (relatively). So, with all those caveats, here is some working code: 

Function names in go should not have any underscores in them, and should be (for exported functions) or for internal functions. This is true for variable names as well. The underscore or has a special meaning in Go, and should be avoided in names. That declaration should be: 

Some simple things first - there's no need to repeat the generic type of variables on the right-hand-side of a new assignment. Java 7 introduced the "diamond operator" and the generic type is inferred. So, lines like: 

Notice how I put the loop conditions in to the for-loop, which makes your out-of-loop variable now in-scope for the loop. Also, I renamed it to to conform to common practice in go. Then, I use the simple swap mechanism in go to reverse the slice. Code Style You have a number of convention-breaking habits in your code. For example, the following: 

Enums should have singlular names. should be just . This would eliminate problems like which returns just one thing despite the return value. Your class is not safe. It is public, and has a public method which returns a 'live' list. If I were a mean player, I would do: 

Following on from Simon's answer (which I believe will be more than great for 99.99% of users)..... ... actually, I have looked though the code, and I don't understand enough of it to make sense of the right answer: 

So, in summary, use the common libraries where you can. A smarter GCF function makes that part simpler, and all the cobversions to/from Float, etc. were making it hard to read. See this all up in the Playground 

Firstly, is the use of a cursor an overkill here? Probably. If your database transaction log is small, though, it may be better to break your updates in to batches that fit. A single large update may fail, and roll back, if there's not enough space to log it as a single operation. Your cursor breaks it doen to a sinlge record each time, and there's plenty of space for that, though. Ask your DBA, or just try it... if you are uncertain. Is there a simpler way to do what I'm doing in SQL? SQL is a set-based language. If you have a set-based way of thinking about it, then my suggestions are 'simpler'. Certainly, it is more concise. Could the script go terribly wrong? Yes.... it could. Take a backup first, and verify everything! I have limited SQL experience, how does it look? Any standards that I'm not following? Your conventions, for what you are doing, are reasonably good. There's very little in the way of 'standards' for SQL style... consistency is the key factor to look for. 

That is now some logic which I think would work well. Making it a method Putting that logic in a generic method would "simply" mean: 

getHeaderValue() Why is this a static? It should be an instance method, and there should be no need for the List input. 

Your performance problem here is related to a number of things, but the most significant is the algorithm you use. Consider the following math: 

counts the number of chars until it finds the null terminator. This is an inefficient way of doing it, 1 byte at a time. A much more efficient way to do it is to work on word-sized memory chunks - 32-bits and 64-bits on respective platforms. If you do a fold of the 8-bit bytes using bitwise operators on the value, you can identify whether there is a null byte in fewer CPU operations than by processing each byte individually. If this sounds complicated, well, it sort of is, but, on the other hand, it is already done for you: 

Apart from that, really, everything looks sane, and far better than a typical perl hack. I am impressed. About perl using all your memory... are you sure? perl may just be struggling to allocate more than it is allowed. Do you have a ulimit condition that is constraining memory allocation? Are there problems with heavily fragmented memory? (You're not running 32-bit, are you... just checking?) As it happens, for a task like this, you may find that everything is better with a language other than perl. Not to dismiss perl as incapable, but with the XPath expressions and other items your code looks surprisingly complicated. 2.5gig files are way beyond the normal I would consider for perl performance. 

Using a dictionary As an update, I have considered a second soltuion, that should significantly reduce the amount of iteration in the inner loops, at the expense of lookups in a dictionary. The dictionary maps the sum-of-factors to the values that have that sum. For example, the sum of factors for 6 and 25 are both 6. (sum of factors of 6 are , and for 25 it is ). The mapping looks like: