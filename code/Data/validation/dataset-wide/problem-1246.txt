Most of what happens in should not be happening there, it should be happening in a separate layer. I'd suggest you look into multi-tier architecture and split up your code into at least three tiers: 

While there's definitely a lack of concrete numbers, the simple fact that you loop through several collections and do for each element is undoubtedly a major performance issue. You should do a single query and store the results in a , and then while looping fetch the necessary data from the dictionary (using ). If you'd started a SQL Server Profiler session you would have no doubt seen hundreds of queries; replacing those with a single one would already alleviate much of your server load. 

Also, does need to be called ? Can't it just be called ? I would also recommend to remove the setters from the properties in . That way you'd end up with something like this: 

But quite frankly, I'd avoid the endless separating into a which then calls an which uses a ... To me this creates more problems than it solves. Instead keep it simple: 

The should be inverted to avoid 30 lines of indentation. Why not do and immediately afterwards? Also, is a fairly meaningless name. 

But at least the average programmer can look at that code and understand what it does. When he uses your wrapper, he doesn't gain anything IMHO. All you've done is add a layer which more or less obfuscates what is happening. I would sincerely recommend you to throw away this code and go with established solutions like NHibernate or Entity Framework. If a developer checked in this code at a place I was working and I had to review it, I'd tell him/her exactly that. 

Your flow is very hard to follow and seems needlessly complicated. I'd for instance leave and to the very end instead of splitting them up. Make your flow easier to follow: 

Strings like and and get used multiple times, so they too should be s, and of course then moved to that static class mentioned earlier. 

Yet before they can be used it is perfectly possible the method will exit due to . Keep such definitions closer to where these variables are actually used. 

Your code is full of . This means there's a strong coupling between your "UI" (a console) and your actual code. Instead consider using a logging system like Serilog to handle all that. 

I don't think you need either to be stated explicitly, since the previous code will always return a value (or throw an exception). 

You assign , a name that conveys absolutely nothing, only to use that to execute . Why not do that in one line? 

I don't think is valid code unless you've got an extension method somewhere, it should be . Again multiple lines can be reduced significantly: 

Not that I'm too happy with this. Naming is still bad, and I'd prefer to move the various parts into their own methods, so it is clearer what happens. 

Perhaps it's a copy-paste error, but please reduce the blank lines in your code. Simply removing most of them reduces this example with one third. 

Just looking at those first lines is worrisome. The method is incorrectly named (method names must be PascalCase), contains an unusual abbreviation (what is "Emp"?), and is not telling me much: . I'm willing to bet this method does a whole lot more than merely copying the data, considering it is close to 500 lines. Equally bad are the parameter names: shouldn't contain an abbreviation of what its type is (a ). And and contain underscores which goes against the naming conventions; parameter names should be camelCase. You pass a connectionstring as the final parameter -- at least I assume that's what is. Except next there's this code: 

I'm bothered by . Are you certain you don't want to know that something went wrong, and what exactly went wrong? 

Also: wouldn't it make sense to replace the with a ? That is: assuming the parameter isn't always unique. I wonder about the wisdom of storing 70k records in a session variable, wouldn't it make more sense to look at improving the performance of -- e.g. via a cache,... -- and simply storing the result of in the session if you expect repeated calls for the same ? 

There are some odd naming conventions in your code, like the prefixes and . Don't do that, it makes code so much harder to read. Also avoid needless abbreviations like . Don't prefix form fields with their types, e.g. or . 

Is your class actually called ? Can't say I like that name, especially the "Object" at the end. Ditto for the property by the way: avoid suffixing a name with its type. Ditto . isn't a good method name. doesn't feel right either since the "by region" implies there's a parameter, and there isn't. Perhaps something like ? isn't really the best name either. Perhaps ? I don't even think it should be part of the query, since you could simply count the items in your various groups you're not using it anyway. 

Your method is called but it does far more than that, doesn't it? It interacts with the UI, it logs urls that were downloaded, it even retries the download attempt. There's a lot here that looks like functionality that should be handled differently; it almost looks like you've stumbled upon mimicking a queue or a background worker. 

I need to return a "human readable" description based on a minimum and a maximum value. Note that the minimum is included in the condition, but the maximum is excluded -- so for instance if the parameters are 6 and 9, the valid values are 6, 7 and 8, but not 9. The maximum value is also nullable. I started out with nested statements, but I quickly abandoned them because they were unreadable and would be hard to maintain. Instead I kept the original , but moved each nested switch to its own method. Note that the code currently supports only a handful of cases, but these are the ones currently needed. Though it is possible others will need to be added in the future and thus I'd like to have something that would be easy to maintain. The code as featured below doesn't feel "mature" to me, but I don't see another solution right now. Perhaps the Strategy Pattern could be a solution, but it feels a bit overkill for this purpose. 

Move code to methods. By the time you hit you're nearly ten levels deep. Not only are you losing valuable screen estate, it also doesn't help the clarity of your code. You could also use to reduce indentation: 

Each of your contains basically the same code. Don't copy-paste, instead create a method that contains this code and accepts the button as a parameter, and call that. 

Why do you have the class? Why not make life much simpler for yourself by making a , and having classes like implement ? You can then query your assembly file for classes where is implemented; that way you don't even need to fill "by hand": 

Why is a method when it behaves like a property? I suspect this is because you've got 150+ lines of code in the class, when in fact plenty of it should be in a dedicated class. 

How often do you call this method? Because as one comment suggested, you might be better off loading all models in a dictionary in one go instead of making hundreds of db calls. 

There's no need for fairly meaningless variable names like , , , ,... And is equally bad, since it doesn't tell me what it contains. is... unexpected. or is usually used. 

Is there a reason you're doing this in an "outdated" technology like WinForms when WPF etc. exists? There is a strong link between data and UI in this method, which is a frequent issue with WinForms; if this was WPF you could implement MVVM to separate those concerns. 

I wouldn't go the route, simply because you need to handle the "what if I'm at the start/end" problem. Instead, simply collect the "URL_translated" key-value pairs into an and then apply . If you're working in .NET Core, Microsoft does all the lifting for you. Here's how they do it. 

is a compound word, so it should be . Actually, scrap that, it should be because you should avoid using the name of the type in the name of the property or field. 

Already it's a lot clearer. However, you need to comment this: because I cannot figure out easily what this logic is supposed to do. Properly naming and would help, I guess. Or even better: move it to a properly named method of its own. 

Besides the two answers already given, I'd also suggest the following. Rename to . Same for . But most importantly, I'd rethink your entire . I suspect there are several errors -- ? ? -- but more importantly I cannot figure out the logic and I suspect you're missing plenty of cases. Try to document the behavior you expect to see, and implement that as simple as possible. Your method has four parameters, which IMHO is starting to become unwieldy. Can't you pass a class like this? 

Adding "New" to a method name -- as in -- is just bad, unless this is a temporary measure and you need to check whether your new method does the same as your old one. Why not call this one ? 

You seem to have copy-pasted three lines which are almost identical for both cases, except for one parameter. If you're doing that, you should extract those lines into a method, or if you feel that's overkill you should simplify your code: 

The whole block where you do the request and get the response should move to a separate method. The whole of should be re-thought and the method renamed, since it's doing a lot of different things, certainly more than just "loading a URL". 

I'd change that method name too, but I'm low on inspiration now. I also don't get why you'd treat each case slightly different (i.e. checking if parsing to int doesn't throw an error, checking if the string is null or empty,...): why not treat each parameter the same? 

In addition to @user1118321's review, I would also suggest to rethink your conditions. You seem to tend to do "negative" checks, you're even combining two in this case: . I'd much rather have this logic: . To me this second version is easier to understand: if the is null or its is null or empty, then execute this simple bit of code that doesn't need the , otherwise execute this more complicated bit of code that requires the . This is IMHO even more important when using ternary operators. Parsing requires me to think a lot more than if you'd written . 

The logic is simple: since the shift is always the same amount of days, I calculate it once (using the earliest available date) and then apply that offset on each day. You could perhaps even avoid using and . 

To end on a positive note: I'm happy to see that the in is very limited and that you made a separate class to hold all of the logic. 

A method that's nearly 500 lines? Which does I don't know how many different database actions? Which has at least a dozen nested s? And that's just what I gather from a first glance. You'll definitely need to refactor this into much smaller methods, each of which does one thing. Structure your code. 

A lot of your code seems to involve copying the contents of one object to another. Perhaps using something like AutoMapper could make this easier for you? 

This wasn't tested, this was written in Notepad++. Look at it as an example of reusing code. (Also, what kind of front-end is this code for? ASP.NET WebForms? Isn't there a better way to bind a grid to data instead of looping through something?) 

This is waaay too many arguments: . Instead, have publicly available properties so your code becomes much clearer: 

I'm not a big fan of some of your names. For instance: doesn't really convey what it is. (Also please be consistent: in one place you name this .) 

The logic in that second block makes even less sense to me and seems to me to be in the wrong place. Again the code can be reduced significantly: 

Wouldn't it be much simpler to simply have the base URL as a value in a .config file? Especially considering what's happening in . 

Method names should tell you what they do; yet sounds like a boolean and calls the other methods which execute your logic. This is bad design. 

Comments should say why something was implemented that way. doesn't tell me anything I can't see with my own eyes. 

(Note that is a bad name, it should be a more meaningful name.) You then populate that class like this: 

You should move a lot of code from to one or more separate classes. Code like this just isn't right when you're in the class already: 

has ten parameters, ditto . That's waaaay too many. Once you go beyond four or so, you need to consider creating a specific class where each of those parameters is a property. That way you only need to pass this class, and adding/removing parameters is much easier. Also, you don't risk to mix up parameters of the same type e.g. and , or , , and . 

If one of them changes, you now have to change its name in two places, which is a recipe for disaster. Also note that contains a typo, it should be .) 

What is ? To me this doesn't look like something that should be in your WebForms code behind, but you haven't provided us with enough information. 

's is also an odd bird. and basically rely on magic numbers and conventions, a recipe for future failure. You continue this pattern when you do and : instead of meaningless numbers, use the column names. Why not use instead of ? Beware of variable names like or , instead use proper nouns in full. and are incomprehensible to me. You're also inconsistent: vs . There's no need to define , just do it all in one go: