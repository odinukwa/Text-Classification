I don't know enough about android but in Swing, for example, a combo box took, in it's constructor an 

In general, any math on doubles is slower than on integers. In addition, you have repeated downcasting from double to int which also incurs a hit. You know your decimal value is up to 10 digits -- just a smidge too many digits to guarantee you can move the decimal and represent it as an int, but you can represent it as a long which is just as good because java and modern hardware architectures are 64 bits. So, any math on them will be really fast. Why not convert the decimal to a long 

The idea is to decompose it, apply the filtering and then reconstruct it. part of the problem is this code mixes development paradigms: it uses and and 

And literally the only thing you need to do is implement business specific event code. The caveat here is that, by default, spring is going to produce a data format called - if you have a requirement to certain output formats you can create and register a and register it for and remove the one defined for 

Shorten the code Create a type of factory method for these "fixtures". This may not be appropriate for your case but with no other context that is what I would do 

PS. I wrote this script in haste to accomplish a task. I can understand if you wouldn't consider this script distribution worthy. EDIT: So I arrived at work today to find my script at some point exceeded 536MB of memory and quit on fatal error. I had already increased my ini file's parameter from 128MB to 512MB. This doesn't necessarily reflect an issue with the script itself. I just wanted to share my frustration with the task. 

For someone who is just picking up the language, I'd say you're off to a great start. Don't be afraid to abstract the different pieces of your program logic to many separate files and including them only when needed - It will make future revisions much less of a headache. When you are dealing with large blocks of output data like in your switch statement, PHP's output buffer can be your greatest friend. Your program also presents a great opportunity for you to get acquainted with the extension - its relative purpose is structured output. Referencing what @php-coder suggested, once you get comfortable working with a database, you can start abstracting your application into purpose-driven layers - The Model-View-Controller design pattern is a pretty common method among popular PHP frameworks. PHP 5.3 and its common extensions host roughly 1,300 built-in functions - Have fun with it; it's a great language! +1 for your first review. Edit: How to style your code is normally a matter of personal preference and readability, but if you are looking for some general guidance, take a look at the Zend Framework Coding Style Guidelines. It's mostly just a reference for ZF extension authors, but it's none the less helpful for general interests. 

And now, a line is gone and your code flows naturally and doesn't abruptly exit the function. Finally, this thing where you put your 

It's a lot to explain here, but in a nutshell, I would simplify all of this using spring-data-rest and do the following 

You don't need to explicitly call or any such non-sense. When it exists the event handler function(s) it will save for you You would stay the same but your would become a spring CrudRespository - the implementation is trivial. You can actually look here for an example. With this, you can: 

Get rid of the REST/persistence/dao layers you have Refactor your services to use the Spring Data events So you're would become an handler for the looking like this: 

IO is always infinite (or should assumed to be so) and thus is natural for this case. The default node libraries for streams are really unimaginative on this. I was just asking around on JS chat yesterday about something like this. 

by shifting the digits left, performing your digit selection and bucket sorting, then outputting them back in decimal form? Like, take your random set and first convert all of them. I would expect better overall execution time. 

Here is how I would simply this: First, I would create a reduced method for getting "body" in fixture as such: 

Here I want to lock when populating a particular cache object, without blocking other calls to the same method requesting s for other s. I realise the will be thread safe, but if two or more concurrent calls come in it seems like it would be better if only one of them populates the cache and locks the others out while this is done. 

Entering the email or username should display the same message to the website user regardless of whether the user exists or not. This would stop an attacker from enumerating usernames (i.e. finding whether a particular username or email address is registered on your system). In the email itself include either the details of a password reset link or an account not found message as appropriate for that username/email - this way only the email address owner can see whether they have an account on your system. The password reset link should be include a time limited reset token that will allow the user to change their password to one of their choosing and it should not then email this out anywhere. Make sure the token is securely generated and does not use a predictable sequence (i.e. a cryptographically secure sequence and not one generated using a ). 

I should preface with the fact that I don't know python. It's likely that I've made a very clear error in my following edit. Generally though, I prefer your second function to your first. If python allows, I would break it up a bit for readability. Why do I like it? It doesn't need the keyword and it's less nested. 

I'm just waiting for this answer to get flagged as not being helpful. Serves me right for putting my two cents in when I don't even know the language. ;) 

Inside of a folder named I have 138 text files (totaling 349MB) full of email addresses. I have no idea (yet) how many addresses there are. They are separated from one another by line breaks. I created the following script to read all of these files into an array, dismiss the duplicates, then sort alphabetically and save in groups of 10K per csv file. It works correctly, but it has also been running for over 8 hours (dual core i3 w/ 4 gigabizzles of ram, sata 7200 hdd) which seems excessive to me. also tells me that my program's CPU usage is 100% and it's been like that the whole while it's been running. Give my script a looksie and advise me on where I've gone so terribly wrong. 

I would also suggest that you might be able to make use of Java 8 streams to improve your performance on large numbers. 

People generally took this to mean a String[] as that is what they saw in the dropdown. But ask yourself: Why Object[] then? Assume we transpos your case to Swing for a moment. You could pass in your Object[] into the constructor and override the toString() in your enums to display something useful as that is what would show up. Then when the selection is made you receive the callback telling you what it was (as an Object). But you know it's your enum. So, you downcast it and blindly call the 'attempt' method on it. If you have something similar in your arsenal, consider it. What you have here, actually, is an example of the Command Pattern 

Is way better! Think about it: In the previous case, you 'return' and terminate the function. But, in this condition you have no idea if the job was done or not and if not, why not. This is pre-condition checking and an ideal case for it 

Craziness? You only need to do this if you want to assure yourself (or the compiler) that it won't be reassigned. This is hyper defensive and, in 15 years of writing code I have never found it to be a necessity. Frankly, 'final' in this case is repetitive and distracting. Unless you have a need for it (which, from this code, you don't) then ditch it. this: 

I've been rolling around several ideas or approaches in my head, and none seem any more useful or "right" than another. I'm sure this is extremely objective but I'm looking for a close-to-definitive answer on the object oriented approach to large block string storage and output in PHP. Given the following example, how could I change my approach in a way that might cause Zeev Suraski to pat me on the back and say Mazel Tov (beside using HTML5)? 

The general theme I'm going with in this example class is that on construction, html is stored in a variable via output buffer and then returned by a public method. When evaluating this code, consider that the html will not be static. Page title, description, keywords and the such will be subbed out with dynamic property references. My overall question is: In object oriented programming, ideally where should the output be stored? PHP's class, however useful, doesn't really answer this question for me. Also in this instance, is there any best practice trade-off between using an output buffer and heredoc syntax? Thanks in advance for your guidance! 

Generally speaking, I like your code. I think it's well planned with few inefficiencies. I'm also impressed by your use of PHP's class. When creating XML via PHP, I usually opt for loops and output buffering. I've been aware of this object class, but your example is the first I've ever seen it put to use. +1 for showing me something new! :D 

Assume is a CPU/IO intensive process and takes a short while to complete. Does this seem like a reasonable way to achieve this? I'm surprised that does not provide any support for this as default - or have I overlooked something? 

It doesn't appear to be vulnerable to Path Traversal as you appear to be creating your own variable to store the file rather than directly using the filename from an untrusted source (i.e. the POST request). Path Traversal usually happens if the user can manipulate a parameter to get to a file they normally can't access. e.g. if your normal URL is , the user might be able to change the URL to in order to read a file in the directory above. However, I would check your code for XSS and SQL Injection as it appears to be vulnerable. For example, the output of in your code should be JS escaped, otherwise it could be possible for an attacker to insert JavaScript into your page by uploading with a spoofed filename containing tags. Your query should also use rather than manually building the query with string concatenation. This will stop an attacker changing the query in any way by again using a spoofed filename to break out of the SQL statement.