one simple rule to follow is: Do not nest selectors more than three levels deep! Otherwise you will have to much specificity and your rules will be too much coupled with the DOM. Plus no reusability having such a long class names. I would't be bothered to type for example: You want a simple life for you and your fellow colleagues you are going to use your components. Try to use small reusable classes to apply effects and have a simple convention for names. 

Note how the code speaks of its self and it doesn't have to exaggerate. Every name has a meaning with the right intent. A makes matchers and an returns a boolean by accepting a query and checking if its matches the query. Inside the we simply chain over the query and validate that either every query parameter matches the object or in case of a mismatch we return false and that's it. My point is that you should always have a birds eye view of your code and try to think of ways to make your work easier to handle. Search for alternatives and don't fall into the rabbit hole of applying things that they don't fit accurately. There is always a simpler method to do your job. Good luck with your FP endeavors. 

I've reviewed your code and i can comment on some things: I have a similar personal site and I can tell you there is not many things you can really cut in order to make the code more tidy without resorting to frameworks. Inevitably as this is a static website you will have duplication especially if you want to have those auto-prefixes. Colors I would like to criticize the use of colors in your website. In my opinion they look dated. Try to use a lighter blue color in the background or use a flat color scheme from adobe kuler. Links I cannot see any of your links because they have similar color with the background. If you plan ton becoming a great web designer you will have to pay attention to those things as they stand out. Buttons and Animations Don't use those 3d buttons they look horrible. Make them flat or at least with a smooth gradient and shadow and please disable the animations! Fonts Change the font to something more popular from Google fonts and not convert something from Font Squirrel. Also make them slightly bigger in size. Background Add section on the top of the site with a background image of something that you like similar with example some medium blog articles. Make sure its of good resolution and quality. If you can make it static when you scroll even better. Overall Overall I'm sure with a lot of work and passion you will become one great designer. You just have to keep strong attention to detail and make your own statement by showcasing your portfolio. Good luck! 

This looks too esoteric and I had to search for the documentation for both and and after that I had to run your code to the browser with breakpoints to understand the internals etc. At some point I stopped because I thought it took me enough time already and its not worth it. Its clearly too complicated to read and to understand, not only now but also in 2 years time when you revisit your code and think what exactly did you meant to do. My point is that in the current state is un-maintainable. Anyway here is my take on this: 

I have reviewed your code and I can make the following remarks: FP concepts I understand that you want to solve the issue of matching objects to queries. If you pass an object and a query you should be able to check if the query satisfies all parts or no. However to be honest with you you try too much in the wrong direction. All that , , etc are very interesting and useful but in the average programmer they don't really mean anything for the problem you are trying to tackle. For example I was able to rewrite the code using lodash chain in 5 minutes and with better readability. I will post my code at the end but before that I'll comment a few things: : Why the name matcher? What does it matches? An object, an array? I think its too generic and confusing. And why does it accepts 2 parameters? Ideally it should accept only one at the time.It should have been like and now you would have more flexibility with naming. 

I am especially interested in whether the code is pythonic and how it could be improved. E.g. the use of regexes to parse the instructions feels kinda hacky. 

Includes I figured your has some includes for , , and stuff. While you might find that helpful to only have one header , it's rather bad practice. A header should only include the stuff it really needs, no more. Otherwise you might create false dependencies. E.g. your is the only one that uses , which it only gets through including that doesn't need it. So if you change the includes in you might break . Also every header should have include guards, to prevent double inclusion. Avoid using Don't use to print the end of a line to your stream. It flushes the stream unnecessarily and makes your output slower. Simply use . For more information see here. Don't use Your header has a somewhere. Don't use that, you are poluting the global namespace with a lot of simple and common names. It's also less readable that way. The name is the namespace is so short on purpose, so that's it not a hassle to write. Again, for more info on that matter read here. Don't use magic numbers You are using hard coded numbers in your code for specific checks (required age for reproduction and max population). While it's easy to see what they are used for it gets harder to change them later on, the more your program grows. Use named variables for them, so it's easier to understand and you can see where they are actually used. Don't repeat yourself Whenever you write the same code twice, you should ask yourself, how you can prevent that in the first place. There are multiple instance where you create random numbers in some interval or check whether an event happened with a certain chance. Make those two things functions that can be reused and more easily read. And while you're at it, replace the random number generator with a better one(you can watch this to see why is considered very bad)). You could write a small namespace for such utility functions, e.g.: 

Note that I already change the container type to . Otherwise the random access through would not work and you'd have to use again (or save the iterators instead of indices). 

The use of the range-based-for is great, but you should use a reference there, since you only need to read one value of it. Otherwise each female would be copied as the variable . Furthermore you are creating a new object and copy that into your list. You should use the method in this case, which will directly create the object in the list: 

Use when it's appropriate. E.g. in simply write No need to write something the compiler knows anyway. This way you can also change the container type without changing this part of the code. Unecessary copies In the following code, you're creating and copying too many objects: 

Another thins is your constructors for . They do exactly the same thing, expect for the initialization of . If you want to change it you always have to do it twice. You could simply redirect the calls as in: 

It's easier to write and read. The same applies for creating a random number in some interval. And while you're at it, you can also exchange the random number generator for a better one. Simplifications Your method is rather strange. If you later decide to start your population with 100 bunnies instead of 5, you would require a lot more variables to fill your list. To initialize your list with a number a default created values, simply write . This will fill the list with bunnies, which should be some variable in your class. In your method you should use a range-based-for loop instead of your loop. That will make getting the iterator beforehand obsolete: