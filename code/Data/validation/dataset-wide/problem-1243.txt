Well code look good, any changes will be just a over thinking. one thing I want to make here is to specify variable for that calculation.this will make a bit readable ( not a very big point though) 

Well I have changed your code a bit to make it cleaner.It is recommended to have a uniform interface for methods, so now you have two methods in FamilyExpense class is addExpense and another is getExpense rather explicitly calling each method. I am not sure why you have used getFamilyId and setFamilyId. 

2) Always dispose the connection In above code your opening connection and closing it, but this can lead into connection leak in case of errors. Please wrap your code into using statement or try clause like this 

You have multiple options a. Use an event Aggregator where publish the message from the viewmodel and subscribe from view. see prism documentation for event aggregators:here is sample code 

I used nsubstitute and fluent assertion instead of Rhino mocks , It will make your test code more readable here is an example. 

Indentation in Ruby is two spaces, not four. You have that correct in your specs, but not in the application code. Also, you create here a pair of methods, which you never use anywhere, and , which you overwrite further down, anyway. Either get rid of this line, or (preferred!) actually make use of those methods. 

This should probably be called instead. [Note: I realize, this is prescribed by the spec. IMO, the spec should be changed.] 

You should never compare the class of an object like this. Ideally, you should use runtime ad-hoc polymorphism. If that isn't possible, at least use , , or . 

There is nothing in the spec about passing es to find. In fact, you named your parameter clearly indicating that you expect it to be a . Then why even bother checking for es? 

This is not actually an answer to your question, but since you mentioned that you come from C# to Ruby, I just wanted to point out that the idiomatic Ruby solution that @sepp2k presented is pretty much indentical to what an idiomatic C# solution would have looked like: 

Bind method should be used only when if your element is not loaded into DOM on pageload. So you could attach events to it using bind after wards. also if your using jquery >= 1.7 use 'On' method to achive it. but as per your js fiddle you don't need it at all. second you could declare a variable to store the jquery object of follow. Make sure about the variable scope though. 

by using this you have only a reference of interface will be there in viewmodel . but not the whole view itself 

okay first of all, you need to use buffered stream to read data from the file, there is no need to write data once in file as it might hung altogether. so I would suggest that read the file line by line , parse it and then write to file. 

Server is a part of Message so server initialization is part of message itself. so updated solution: 

I would write an extension method to do parsing of input string. so it should not be inside your query method. I have declared a class named SearchCriteria to encapsulate all data member you want t o query. 

The is superfluous here, the return value of a method is the value of the last expression which is evaluated inside the method body. 

Personally, I can't really warm up to either version. I guess that to me, reversing a sequence is so obviously a fold, that anything which doesn't implement it as a fold looks just plain weird. I would have expected to see something much more like this: 

There are two different camps when it comes to block styles: one camp says to use / for one-liners and / for multiple lines. The other camp says to use / for "functional" blocks and / for side-effecting blocks. Regardless of which camp you follow: your block has three lines and side-effects, so it should use the keyword form. 

There should be a space on both sides of the sign. This applies to operators in general. [Note: there are some style guides that advocate not using spaces around the sign for optional parameters with default arguments, but a) this is not universally accepted and b) not the case here anyway.] 

once this is done you can further refactor your if else clause in a strategy pattern , so you will need a factory which will return class will handle the Archive rule or mirror rule inside a different class and your FileActionService will contain only processing logic 

Please separate out your code into at least two classes 1) Fetching data class 2) UI binding stuff class 4)inline SQL vs Stored Procedure Stored Procedure is good as your code lies at one place in db but creating Stored Procedure for one line of SQL is not a good idea. If your logic is going to be complex and big ,Use a Stored procedure other wise inline sql. PS: I have created a gist named SQLHelper class for you to abstract out the sql connection and command things, $URL$ 

b. create an interface named as IView and implement it in your view , pass the instance of IView to data context of the view 

so basically it is your choice : with optional params you cannot enforce user to input the value, so user can leave giving any input and complier will not complain. 

It might not be immediately obvious that those two examples are the same, but they mostly are. The main difference is that .NET's libraries are much weaker than Ruby's, so we had to implement some stuff manually that was provided for us by the Ruby libraries. You would use both versions pretty much the same way: 

In fact, the C# version I presented here is slightly more powerful, since it allows the client to choose the termination condition more freely. For example, what if I don't want the multiples of 7 below 50, but rather the first 50 multiples? Easy: 

This is such a perfect match for the Replace Conditional with Polymorphism Refactoring that it even looks as if it was specifically designed to demonstrate the Replace Conditional with Polymorphism Refactoring. I mean, the field it is basing its behavior on is even called ! 

The other answers are already very good, but I want to point out one stylistic detail the other answers missed: should be called , there should be no bang in the method name. The bang is used to point out the more surprising one of a pair of methods, i.e. when you have both and , then is the more surprising one. However, you only have one method, so it shouldn't have a bang. Bang methods always come in pairs! 

You can minimize you code taking out the filtering out side of loop. Avoid catching exception inside a loop if it needed ,(it seems like it cannot be avoided here) No need to invoke datarow extension method to get value , you can get it directly. Naming of variable is really bad. 

you dont need this whole code in this way , rather create a logger class and put this whole line of code there. Pass only dynamic parameter. Once you are able to cleanup , pattern can be applied easily 

so it all depends upon your use case.In this case table will always have columns so passing a array of column will make sense. 

This is overall comments on above code 1) Encapsulate what is repeating In your method you are opening sql connection, adding parameter and executing it one by one. Rather doing this please extract out it into one method. 

Introduce a DAL helper layer which will be responsible of opening and closing connection and executing commands. There are lots of DAL helper layer is available Write an extension method to get values from the data reader. Here is one dummy code 

You could save yourself some hassle here by using something else than to delimit the string. This pattern, where you initialize an accumulator to an "empty" value and then iterate over a collection while appending to the accumulator at every iteration, is called a Catamorphism, , or . In Ruby, it is known as . However, in this case, it can also be done even simpler, with a . 

I.e. implemented as a left fold. After all, reversing any sequence (not just strings) is really just the same as 

This should be called . is the standard name for a method that converts an object into a textual representation. It is used automatically by methods such as or . [Note: I realize, this is prescribed by the spec. IMO, the spec should be changed.] 

Here you check whether the key includes the search string. However, from the documentation in the spec, it appears that the search string should be a prefix of the key. Unfortunately, there is actually no test in the spec to test for that distinction.