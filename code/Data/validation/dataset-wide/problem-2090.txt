Speaking as an experienced UK-based C++ developer who's been a hiring manager in the last year: The best way to demonstrate readiness to learn to a potential employer is to have some experience on your CV which shows that you have done well in an unfamiliar environment in the past. Telling people doesn't cut the mustard, for the reasons given by Telastyn. C++ is not an easy language to learn. It's simply far too big. It's in some senses the superset of C and a Java-like language, but it additionally has a lot of things that aren't in either, such as operator overloading and compile time template programming. It's only getting bigger with C++11 and C++14. There is a heartening consequence of this, however. For a start, your university is not particularly special in not teaching C++. Many UK universities are on the Java plan because it's much easier to teach the basics in Java, and easier for lecturers - who are often not very strong programmers - to understand the submissions to the coursework. I would expect this to likely hold true outside the UK as well. This means that as someone exiting university it is worth applying to graduate level C++ jobs with a background of Java and assembly. These jobs may not get any applicants with actual C++ experience. I wouldn't necessarily recommend trying that for your second job, but software graduates benefit from low expectations. You'll also find many companies that claim to work in C++ are using a small subset that is mainly C. This is particularly true with embedded systems development. If you do decide to try to gain some skills before entering the market, since you are in robotics and have some Java, I would recommend you start by learning C and pick up C++ as you go. Finally, graduate schemes are certainly not the only way to enter a software career, but many smaller companies don't employ graduates because they are perceived to initially be as much trouble to train as they're worth. You can counter this perception personally to some degree by reading up on modern development practices, but it won't help if a company doesn't even advertise a graduate job. Good luck. 

This may vary from location to location. I am in software development in the UK. As an experienced software developer, I would estimate perhaps around 5% or less of the contacts I receive for recruitment purposes are from in-house recruitment teams. The vast majority of jobs in this field are recruited for by external recruiters, and most of the companies that do have in-house recruitment teams are large companies. The balance will be a little different earlier in your career and in-house recruitment teams may make up a slightly larger proportion for you, but external recruiters contacting you is entirely normal. In the UK, contract software development roles often tend to be reserved for people with a substantial technical background. Training people to know enough about the existing development to be useful takes time, and having also to train people to understand the basic technology stack doesn't make a lot of sense unless they're permanent staff. I would be surprised if many of your contacts come from "agencies" rather than recruiters, and I would be surprised if most of the roles on offer were not explicitly permanent roles (though many may have probation periods). Training graduates to be developers is initially a cost to a company, and the companies which do train graduates are generally keen to keep them to the point that they start to be valuable. 

If you bring up the fact that you have interviewed elsewhere, you may potentially seriously undermine your employer's trust in your commitment to the company in the longer term. You could strongly insist you are being paid less than the market rate for your abilities, to the point that your employer suspects that you may have interviewed elsewhere. This is more likely to be successful, but it could still potentially land you in an awkward situation. Consider also that from the company's point of view the question is not how much you're worth on the market, but how much value you represent to them, and what proportion of that they get to keep. Even if the company agreed with your assessment of your market rate they might still feel unable to offer you that salary. Any negotiation for a higher salary comes with a risk attached. You have to decide for yourself how much risk you're willing to take. 

They do not believe that you fit the needs of the position they advertised. However, they still wish to speak to you. It seems probable that they see another possible opening where you could be of use to them, and wish to sound out your capability and availability. This is therefore likely to be an exploratory meeting rather than another interview. The key thing you need to do in this meeting is listen. They're currently entertaining the possibility that you're a good fit for some role you know nothing about. Until you know what the role is and whether you're interested in it, you have little useful to tell them. It would also be advisable not to be too hasty to respond while in the meeting. You may feel differently about what they tell you after an hour or two of thought than you do in the heat of the moment. Instead, listen patiently and be courteous. 

To address your specific situation: new graduates in software engineering typically experience a rapid increase in market value. In my area, I'd estimate it at about 40-50% in the first 2 or 3 years, with growth decelerating thereafter. However, the local starting graduate salaries have probably decreased with respect to inflation over the last 15 years. While your area may be different in some respects, you can see that it is not necessarily the case that in a few years a new graduate will be hired at the same rate as you're on - graduate salaries may be rising more slowly than inflation. One thing which is practically guaranteed though is that anyone who has equivalent experience to yourself will be hired in at a higher salary - unless your company is only hiring people considered unhirable elsewhere. If you want to be paid market value, it's likely you'll eventually have to go on the market. That doesn't necessarily mean you're wasting your time where you are, as early in your career it's far more important to gain marketable skills than to get a slightly higher salary, but it does mean you shouldn't be making any assumptions about staying there in the long term. 

Knowledge work is not like an assembly line. The difference in productivity between the best and worst workers can be multiple orders of magnitude - worse, there are things the best workers can do that the worst ones would not be able to replicate given almost unlimited time. Given this basis, your diagnosis that you don't want to damage your star performer's ego seems sensible; apart from anything else, the most productive can change jobs without much effort on their part. Even if your star's being a big arrogant baby, their moving on will likely hurt you more than them. However, I'm a little concerned by the manifestation of their intolerance: design and estimation. It is not obvious that they are being unreasonable if they take a strong stance on either. Assuming we're discussing an engineering discipline rather than an aesthetic one, design is a process full of costly pitfalls for the novice and often it will fall to the more experienced to point these out. Whether the engineer is a star or not, though, they should be forced to make their case as to why a design is good or bad through argument and not just through asserting their authority. This gives the other team members a chance to learn. Estimation is altogether thornier. I suspect if your star performer thought the scope was smaller than other team members did there wouldn't even be a discussion about it, and their word would be believed. Estimation is hard, and made harder by the omnipresent desire to report good news to those above you. I suggest you quietly track the different estimates against the eventual outcome; that way, if your star is further out than anyone else, you can reason with them on that basis next time. If they are genuinely better at estimation, that's worth knowing too. It is hard to say what the key problem is without more detail. Your star performer may be underperforming and defensive. They may be right but tactless. You may be dealing with other team members who fancy themselves as far more competent than they are and feel slighted on personal grounds. A careful investigation into what they have to say for themselves is called for, and if some of the fault is theirs, make sure they know you value them even as you ask them to ease up on other team members.