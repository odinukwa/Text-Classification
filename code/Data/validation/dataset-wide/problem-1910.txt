I ask the recruiter very early in the process what the pay range is. If it isn't at least close to what I want then I tell them where they need to be before I would even consider talking further. If they aren't willing to tell me, I decline to interview. 

You could offer to help your friend for a glass of water if that's all you wanted. Assuming US laws here - You aren't an employee of the friend so minimum wage laws don't apply. The business relationship is essentially a contractual one and anything of value can be offered for consideration in order for the contract to be . For example $1.00 or even an offer to trade an old t-shirt for services. Now, if the value you receive is greater than $600 then you need to report it on your taxes and you're friend may have to issue a 1099. But that's something you need to discuss with a tax advisor. 

Although this is passive aggressive behavior on her part, I would suggest that in the future when you need access to another department head's staff you go directly through that department head. There exists some reason why these divisions exist within your agency and as she is the one ultimately responsible for their output you shouldn't be in direct communication with them. 

I think you should discuss this with your manager to find out what they expect of your involvement in the interview. Our answers are just going to be guesses at their intent. You mentioned that 3 other people will be conducting the interview as well. To be frank, your involvement sounds like a complete waste of everyone's time. If this is a small company (less than 10 people) and you will likely work with this person on a daily basis then I could see having you involved to make sure there isn't a personality conflict. At which point you should stick to general office questions and stay away from anything in the field. Someone suggested that you ask the candidate to explain something about their technical background to you. This only has value if the position requires a technical person to explain those things to non-technical people. If it doesn't then does it matter if they can explain it or not? At the end of the day I stick to "go / no go" questions in interviews. In other words, the only questions I ask are those whose answers will directly lead to a job offer or a polite "thank you for coming in." Having someone sit on the interview who can't solicit that information isn't helpful. 

There is quite a bit wrong here. First, you intruded into their conversation. Second you proceeded to, without direct knowledge or involvement in their specific problem, claim to know the only solution. Third you came off as someone I wouldn't want to even talk to. I'd brush you off as well. A better approach: "Sorry, I couldn't help but overhearing your problem. I've faced that before, could I help?" And then let them decide if they want to hear your possible solution. There might be more to this story you aren't aware of, which leads to the next thing: never ever assume you know more about a problem and it's solution than the person who is actively working it. That is condescending, rude and quite often wrong. 

If your company actually notices status switches like that, then it would raise a flag. I wouldn't change the status on linked in (recruiters don't seem to care one way or the other). Instead, just start your job search normally. When you land the new job, switch the status and keep your resume open on the job sites. That way if you decide to jump again there is no change to notice. 

Note that all of the above possibilities completely bypasses whether you actually will be at the company in 12 months or not. I certainly understand the company's position here. I have seen several instances where employees were provided advanced training that increased their market value and they left shortly thereafter. Although it is in the company's interest to keep their employees up to date, if employees have a history of leaving shortly thereafter then the company is not getting the benefit and therefore has no real reason to provide it. 

There is simply no reliable way to find this out unless you know someone that already works there AND have a similar perspective on what "too high" means. 

Let's say someone who reports to me said the software wouldn't compile. After investigating I find that they aren't using the right tools so I tell them to fix the machine to bring it into compliance. If that person then came back to me and insisted that the program should compile using the wrong tool set then we'd have a "nice" talk about how programmers, of all people, should understand how to follow directions. If it happened a third time I'd fire them. I'd highly suggest that before you raise this issue again you fix your computer. Then educate yourself as to why they have targeted this specific compiler/configuration. There are quite a few reasons to use one compiler over another - before you understand why the others have been excluded there is zero reason to insist that they be used. I will happily listen to someone tell me I'm wrong. However, what I won't abide is someone claiming something is wrong before they have bothered to spend time understanding the problem or the reasons for the choices that have already been made. 

Startups are crazy. I know, I've worked for several and currently have my own. These are not places where the "normal rules" apply. Meaning, if Sally takes a week off then likely anything Sally was working on won't be picked up by someone else - there is no "fat" here, everyone is required. Point is that if there is a looming deadline and a member of the team takes a holiday, then this can have very real consequences for everyone else. That vacation notice given three months ago probably seemed so far off that the owner didn't give it a second thought. But now it's here and causing a problem. Startups are crazy. One day everything looks peachy, then just one day later everything is burning. I've seen this type of roller coaster ride happen several times in a single day. This makes for a very stressful environment that not very many people can handle. Startups are crazy. Let me rephrase that: you have to be crazy to start a business. It's hard, really really hard. On the one hand the founder(s) have a vision, on the other reality intrudes. This "reality" is that startups often have to deal with tremendous scope creep just to sign a deal. At some point you'll have enough real paying clients to be able to "just say no" to that newly demanded feature. It doesn't sound like this particular business is there yet. Half of our primary product was built for these reasons and many other companies have completely changed direction based on what they could actually sell. Startups are crazy. There are times where the bank account approaches (or worse, passes) $0. When this happens the founders have to make a conscious decision to either give up or push through. Whatever happens the founder(s) #1 job is to ensure that everyone is paid. I've been there. I've put my own salary on hold for months just to ensure that my people are paid. I've laid off good strong employees because I knew I could pay them now but in 30 days the likelihood of having enough cash was really low. I've begged clients to pay invoices a month or two early and I've borrowed money from family just to make payroll. It would be trivial to say this is the founders problem. However it's actually everyone's. The entire staff has to want to see this succeed. Which means showing up to work and doing everything you can to make it happen... including changing plans. Startups are crazy. Because of the emotional joy ride they can be both incredibly fulfilling and the absolute worst experience of your life. Even at the same time; and few people are willing to subject themselves to this. I like to call those people "sane", but as a founder I'm probably not qualified to judge. 

Any competent programmer is already a solid problem solver and a fast learner. It's the standard minimum requirement for entry into the field. So that's not exactly something to try and use to overcome lack of experience in a particular language. Looking at Java and PHP, about the only thing those share is some syntax. How you go about solving problems in each language is very different - and you are only going to know that with experience. I've seen numerous developers try and cross the language barrier. In every case the first thing they do is try to make the new language work like the old one. This is a mistake and causes problems for them, and the team, until about 6 months into it when they do one of two things: Either they quit and go back to what they know while saying how horrible language X is or they finally give in and learn how the language is supposed to work. To be honest, not very many people end up making the switch long term unless they are forced to due to market influence. The ones that do make the switch usually spend long hours on their own time learning. So, when I'm interviewing a dev and they tell me they don't know the language but they are a "fast learner" I stop listening. I don't want to spend 6 months to a year trying to retrain them to a talent level that I can readily find today. I'd say that if you want to switch languages then you should start learning the new one now. On your own time. Pick a smaller project you've worked on and rebuild it in PHP. Every so often ask a PHP dev to code review it. Take it all the way through deployment. Then, and only then, put out your resume. 

Take a deep breath before reading any of their emails or answering the phone. There is absolutely nothing to be gained by getting into an arguing match. Log everything. Every request, every call, every email and every system action. When they call asking why things don't work the way they want, politely bring up the requirement from a few months prior demanding it work the way it does. Then politely ask them how they really want it to work. If they waffle more than 2 times on a particular item, start increasing the cost for the change. I had one client change their mind on a particular feature every three months. Every time they made the request, I brought up that they had changed it before. Finally I started escalating the cost of the change and it reached a point that their upper management stepped in, they made one last decision and those requests stopped. If some data goes missing and they are raging about it, give them a screen shot of the log showing who did it and when. This is at the heart of logging all system actions. If you can't tell them who, when and what then your application will always be at fault. Make damn sure that your application works. Test it every way you can and fix it quickly. Know how it can fail and make sure that's documented. The app should also be pretty verbal with the user about exactly what isn't working right; and must have a rock solid logging system. Not being able to transfer data across the network should be an easy one to identify the root cause. If you can't, then as a 3rd party who was never seen your app, my first thought is that you are doing it wrong. Schedule regular calls with them. In our case, if we haven't heard from a client in 30 days then the account rep calls them. We have a pretty good feel for which clients need more communication and which need less. Ones like this need more. You might even need to be weekly until they start feeling comfortable. 

Only if you are desperate. The key here is to force the issue early on. You bring it up before walking in the door for the interview. For example, you submit an application, they call you to schedule an interview, before setting the time you ask what the pay range is. If they don't answer, don't waste your time. If they say something nebulous like "market rate" - ask them what that means to them. If the range is roughly what you want, even if they are 10% lower, then go interview. They'll ask what you want at that time, tell them. Salary negotiation really isn't hard. The key is just to know what it is you want before you even submit an application. Everything that follows is just theater. 

I am always amazed that in this day and age someone out there still thinks using a SSN as an ID for anything is a good idea. A little light reading: US government report on why you shouldn't do this: $URL$ Another list of reasons why you shouldn't do this: $URL$ Depending on where you live, using SSN's for time clock entry might be illegal. You could certainly read the above links and have a nice conversation with management letting them know that they are possibly violating federal and state laws by doing this. You might also let them know that continued use of SSNs in this way might be opening themselves up to lawsuits... However taking this tact is difficult as you want to appear to be on their side, and not as someone who is about to get litigious with them. When a company starts going down the wrong path sometimes those who point that out aren't treated very well. Regardless, you might consider consulting an attorney just to make sure of where you stand and you need to continue letting them know what's wrong here.