These 2 functions in are breaking the point of using your class. Once the objects have been set there is no need for the to know whether those players are computer or human players. In fact, shouldn't even know that there's such a thing as a computer (or human) player. Your class is missing a virtual destructor. A virtual destructor is needed for inheritance where you are storing the objects by a pointer to the base class. 

This clearly defines what values and options can affect the result, and you can keep all the variables and calculations needed for doing one simulation local to this function. I would consider breaking this function down further, but just pulling out this one function will make things a lot neater and clearer. Other things in the code that aren't so serious and reflect my personal style preferences: 

The number of combinations of size from a set of size can be computed with in R, and if you have multiple values you can just pass in a vector for . Therefore your code can be simplified to: 

In addition to being a lot less code, this will result in sensible speedups for larger datasets. For instance, consider the performance with 10 million elements and 10 classes: 

As you can see, is returning row numbers instead of row names; this yields an identical reordered data frame: 

These sorts of operations are tough to vectorize because you need to compare every element to all later elements. If the counting operation is a performance bottleneck in your code, then one possibility would be to implement it in C++ using the Rcpp package: 

It seems that you are looping through seeds to find the one that causes a randomized procedure's output to match the output from a previous run. If you had set the random seed immediately before running the randomized procedure and have simply forgotten the seed you used, then this in theory would work; all you need to do is loop through the billion or so possible input seeds until one matches. There's no real way to speed up the process (beyond parallelizing, which would be easy because the problem is embarrassingly parallel). is just a wrapper on a loop, so that would not speed up the process. Unfortunately, more likely than not you did not set the random seed immediately before running the code. Therefore you would really need to test all the internal states of the pseudorandom number generator (PRNG) that you used to find the one that matches the results. Unfortunately there are intractably many internal states; for instance, the most popular implementation of the Mersenne Twister, which you are likely using, has a period of 2^19937 - 1, meaning it has at least that many possible internal states. Clearly it's impractical to test this many states, so it's probably hopeless to try to match an exact PRNG state if you hadn't set the seed immediately prior to running your randomized procedure. 

C-style is a bad habit to get into. The C++ library might look intimidating but is actually easy to use in practice. 

For a safer design, I don't think the should be allowed to modify the board. Instead I'd have this be: 

Getters and setters are normally a bad idea - might as well just make the variables public in that case. Other than , I don't believe the getters and setters are even used; just get rid of them. A player can't change their game piece in the middle of the game, so I would replace with passing it in with the constructor. 

can then actually validate the move and make it on the Board. This keeps the "game logic" in the class. Finally, to your question about implementing a proper AI ... I'd strongly suggest starting with a simpler game than Connect-4 like Tic-Tac-Toe. If you persist, a starting point would be a minimax search. 

The following code fixes these two issues by combining the data for all fips codes in a single call to rbind and by using a vectorized rolling mean function from the RcppRoll package. I did a few other cleanup tasks: passing the data to the function to make it more flexible and using instead of with . 

I think the task you are attempting to accomplish (obtain indices to reorder a data frame by several factors, one after another) is already handled well by the built-in function. Let's consider your sample data: 

It seems that your function takes as input a data variable name and rolling mean length and outputs information about the rolling mean with the indicated length, computed for each fips value separately. I see two key issues with the code as currently written: 

The Rcpp package takes some time to compile the function, so this option is probably only helpful if you are operating on very large vectors or if you are repeating the operation many times. 

While the function ReadGrid would be simple enough, the new IsPatternInGrid function would still be quite complex and could possibly also benefit from factoring out some its code into yet another function. Other things that I changed in the block of code above aren't as important for readability but are common for coding standards: 

For readability I'd suggest breaking the algorithm up into a number of functions. Any time you find you need to write "heading" comments, it suggests that the code under that heading could go into a separate function. Breaking the code up into functions like this makes the code easier to reason about and, in my experience, easier to test and debug. Your main() could look like this: 

This code would greatly benefit from being split into functions, the most important one for your logic being a function to run a single instance of the simulation. 

We see a speedup approaching 100x for this test data. You could also update your function to take a vector of lengths in a pretty straightforward way using sapply: 

You are summing from j=1 through j=i by looping through the values individually and adding them up. In R you can get significant speedups by using the vectorized function: 

Additionally, this part of the code hard-codes the choice of delta=60/61, which may make it harder to see what the code is doing or update to another delta value. It would be best to pass to the function and then use instead of in this expression. Here is the updated function: 

Another advantage is that the built-in function is more efficient than your implementation. Let's see on a resampled version of your dataset with 1 million rows: 

In two places you are growing objects element by element. Please see Circle 2 of The R Inferno for why this is an inefficient way to grow objects. A vectorized rolling mean function should be much more efficient than one you code on your own with a loop in R. 

One final thing: the github version has replaced all the includes with a - that's a bad use of Visual C++ pre-compiled headers. Since pre-compiled headers are non-standard, I'd recommend just not using them, but if you have to, the pre-compiled header should be duplicating your (common) includes, not replacing them. 

Your objects are being stored in raw pointers and are not being deleted. It's not a problem here because your application ends when they should be deleted, but in general will lead to memory leaks. Consider using instead as it will automatically manage the object's lifetime. You have a lot of input functions which all do approximately the same thing - prompt for a Yes/No answer. These can all be factored out into a single function (takes in the text prompt as a parameter). Your function is sharing the load of running the game with the class. I think you could benefit from a clearer separation of concerns by introducing a new class, , which includes GameLogic, Board, Players, etc. All user input would be done by the class - would be concerned with the "game logic" only, no user interface stuff. (In general we want as few classes interacting with the user as possible; helps with testing and reusability.) I suggest ordering your class sections , then , then . The interface (public) is the most used section; the private section is like the class's dirty laundry and you want to hide it away at the bottom of the class declaration.