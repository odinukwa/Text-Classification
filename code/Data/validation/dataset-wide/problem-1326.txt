If you want to put the whitespace trimming in the callback and as you don't need to escape , you could even use 

According your comment you don't want to use a template engine, but are actually creating a new one. At some point you will need loops or ifs and it starts becoming ugly. PHP is already a template engine. Actually it was designed for exactly this purpose. There is a braceless/echoless syntax for all control structures. Your template/view: 

I think now it is time to extract the content of the loop to a method. Add some tests and check if we can simplify the s. At least I would inline the variables. They no longer add any information. Let me try an other approach here. Instead of building the string character by character, let me take a blank string of the correct length () and only fill some places with the character: 

First of all, I'm no python guy and I always favor readability over one-liners. If this happens regularly I would implement a get method which will return the default value not only for missing keys, but also for empty (or what ever required) values. In addition to that you maybe should have a look at the method that is generating your dictionary. Maybe you can just unify the message parameter at the place you store it and so you don't have to take care of this later? 

Let's start with 3. I think the most important improvement would be a separation of the program logic from the layout stuff. This will also support you in creating unit tests. (In addition to that, the separate class is working fine for me.) I added some comments to minor changes in the code. Main.java 

Do get this into an abstract method in your model class you have to extract every information related to your concrete class into abstracts methods. Just as a draft: 

Since Java 7 you can omit the second and use the diamond operator Simplification could be written as: 

The big advantage is that you can put a configuration file in your project and define the log level of every logger independently. 

It was not easy, but the first step for improving your code is to split the layout from the logic: layout.php 

First read palascint item 4. If you want to continue using the enum, you should consider to restructure it in the following way. Beside the fact that it is easier to read, is is also easier and less error prone to add new enum values. Furthermore you could easily add an icon, an abbreviation or any other field for your platform. 

I have to scroll to read it all, so without looking at the code: Yes, split it. And now with looking at the code: I would try to extract the content of your for loop and give the method a nice name. Afterward you can check how to split this method. Maybe you want to have a look at one-thing-extract-till-you-drop (also check the comments) 

Although you used a class, this is not really object orientated. Actually I'm missing a class. Your rules are applied by comparing strings right now, which is error prone and really ugly if you need to refactor it. Extending your code with new rules also requires changing the itself. 

All the other guys are in general right, so I will skip this part. If you just want to reduce code duplication and as a side effect increase testability and readability please have a look at the following code. I guess there is no doubt, that you would benefit from an object containing the , and as they somehow belong together. 

You could initialize with and with , this would make the inner obsolete. You could also use this for your output condition and get rid of the completely. Without knowing the complete assignment, it's hard to optimize your code in any direction. If you don't want to use your library and do it in 'plain' Java have a look at . 

Maybe you should just stay with . According to the link above it seems to be faster, but at least it is easier to read. 

Translating this to exception is up to the reader :) Actually I even would prefer to give the code to my template and let it handle the localization: 

For further optimization it is import to know how similar the code in the two remaining branches is? You could also extract the condition in an variable and give them a name: i.e. rowTypeX and rowTypeY. Maybe the result is more intuitive if you move the handling of the row types in a method each: 

As mentioned by the other reviewers, and I can only stress this point: comments are not used to explain what you are doing but why. Variables/Method Variables starts lower case in java. In java it is not that common to define/initialize variables at the beginning of the method. Just do it when you need them. (e.g ) Naming a method and return is confusing. Just call it Generics 

"Uniqueness" should not be your goal (except you copied it completely from somebody else ;) ) In general you should aim for removing stuff and still let it work as expected and not adding unnecessary stuff. Do you have test, that is something you should add always? Some hints: 

If your float is already a String then you definitely should go with . Creating a real intermediate float only add inaccuracy. 

First of all I would split the class in 2 or 3 classes , and . The setter error could easily become Exceptions, which you could collect in you Registration class. At the end you will have a smaller User object you can attach to the session. Please also check $URL$ for some hint regarding session validation. 

According your questions you have really big plans. You want to write a template engine, a logging framework, an ORM and I guess somewhere in between your real application. Trust me when I tell you, you will fail. (I and most likely everybody else here tried it already :) ). For all your components there are mature frameworks out there. Find the one you like!! 

There is nothing wrong with having the loggers everywhere. If you clutter all your classes with some kind of event notification it would look worst :) But, Logger should not be called with a static method. You can create a pool of Loggers and your call will look like: 

Please add the following method do your code and print the runtime of every section of your code. As indicated by my comment I guess the foreach->simplexml_load_file("...") might take a while. 

After you have all your tests (I have just created some for 0-4) you can try to extract some methods with duplicate code. 

First of all: Use a StringBuilder instead of System.out.println so you can easily compare the result of your method with an expected output. Your test could look like: (I renamed you method to draw and moved the size to the instance.) 

My first impression: too verbose. Usually I'm the one that get complains for too long method/variable names, because I really like this style, but I would try to omit some letters here, e.g. 

Running a SQL statement in a loop is in general a bad idea. Depending on your you might send a lot of not needed requests. In relation to MECUs hint you could use something like: 

If you have the feeling your classes are too big, you are usually right. Of course there are always different approaches how you could split classes and your idea seems to be reasonable. So you will have some plain Value Objects (the User), some UserRepository class for getting/updating the data in the database and some kind of UserAccessCheck/PermissionManager/... class for checking the actual user rights. In case you store your permission also in the database, you can of course extract a PermissionRepository to collect all the SQL statements in one location and don't mix your level of abstractions. To sum this up, the decision is up to you. A class with 4 properties, some Getters and 4 can...()-methods might be suitable in one scenario and splitting it up into 5 classes might be suitable in an other scenario. In general "good" (tm) developer tend to make there code more general/abstract than necessary and wasting there time or there clients money in premature optimization. "Bad" (tm) developer will never feel the need to split a class. Find the right way in between.