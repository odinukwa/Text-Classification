Plus you can use safe_substitute to allow more error-tolerant display so you don't bork your server. 

You're doing three things here: splitting up the listing into sentences, parsing the listing, and recording the results. You can clean this up by separating these out into separate functions functions or classes. This keeps the code less nested and easier to follow. To keep things simpler I'm using regexes for the room names as well as for the dimensions. This will actually be a bit slower - "in" is really fast - but it is more flexible (for example, if you have to support plural endings or something else besides string lookups). I'm compiling the regexes using re.compile to make them faster and re.I to make them case-insenstive. Lastly, I'm returning the results as a list-of-dictionaries, where each dictionary includes the room, dimensions and the sentence from which they came. This lets you keep the printout display separate from the parsing. In practice I would probably use instead of a dictionary but I didn't want to get too far off topic 

before the string is converted to a float (this will also filter out negative numbers for free as written) In terms of style and construction, the conditions for the mileage and consumption are the same: positive numbers > 0. The only differences are the prompts and error messages. So it makes sense to write one function and pass the prompts in to it twice: 

The first version will be faster but you're storing redundant copies of the indices, which might matter for big data sets Usage: 

From a style perspective I like the first option; if you're treating this as a property its clear what you intend For implementation, I'd try a class level default with an instance override to provide the right words to allow for specialization or extension (for other languages than English, say, or use at Oberlin College). Whatever your gender politics this implementation is extensible to new cases and one offs. 

This part is essentially calculating the opposite of the number in the register. Why not use the instruction? It's well suited for the task. It gives smaller code and doesn't clobber the and registers. Also note that the ldxsetup1 label isn't really needed in this program. It's noise. 

There's little point in first moving the contents of the variable d to a register and then doing a subtraction between registers when there's a possibility to subtract the variable directly from the accumulator writing . 

Everywhere a division was needed I chose to replace the usual instruction by an instruction. This can only work if neither dividend nor divider exceed 255. It proved to be a winning move as it: 

Each time you clear a register (any general purpose register!), you can do this more efficiently by ing the register with itself. 

Prior to the multiplication it is not necessary to zero the register. It's the division that needs this. This way you'll shave off some bytes. 

The 3rd instruction here tells me that the value 1 that you moved into the register isn't all that important after the addition, so why not just increment the currentx variable? 

A small error here. On exit with Ignore the register will hold an uppercase J. My main concern here is why you want both the register and the ZeroFlag express essentially the same thing? If you would stick to only return result in the ZeroFlag then you could save extra bytes and at the same time get rid of the , , and registers being modified which is a good thing. 

Looking at the code I've just written above, I don't think there's anything ugly about it. It's the cleanest way to do it, and overtime it'll prove that it is self-explanatory. 

I would avoid inlining the actual constants in the list comprehension tool - that's bad for readability if it's not sitting on the outermost outline level. On the philosophical level, I'm ambivalent. I hate all the quotes etc too, but this only works for strings, so it's not a general purpose idiom. You could extend it with exec or eval to get non-string values, but that's a whole big can o' worms :) 

which will except if dist is not a number; most python coders just try/catch around it. Without try's you'd have to provide a way of checking for floats that doesn't require a try/catch; maybe it's the point of the assignment? Apart from input validation, it's just doing a division otherwise. To get a float from a string without a try, you could do: 

This makes sure the code only fires when the file is executed as a script, not when it's is imported as a module. 

By sticking the result into dict you don't have to override getattr yourself, which limits the intervention to a single place although it does deprive you of the option to do guard checks for bad values, etc. This example would except on name collisions and get you off the hook for manually redirecting double-dotted attribute queries. 

DictReader is especially nice since it automatically parses the first line as the headers and returns a dictionary so you don't need to create a custom class to organize your data (as an aside: you could also do this using the sqllite module, which would let you read and write the entire database directly and query it with SQL. I'm not going to go into that since SQL is it's own thing - but for bigger applications it would be the right thing to research). Writing out the data is the inverse of the above: 

Now all we need to do is multiply them with each other! Method naming Your names are very verbose, which is a good thing, but ruby idiom frowns upon prefixes. Also, prefer using verbs already in the language () over those which are not in the language () So now the code will look like: 

You are interested in how to use classes properly, so let's talk about it. Design your classes Why did you choose to split the functionality as you did? Does you have any stand alone value? Does it have any re-use value? In ruby it is very easy to arbitrarily break functionality into different classes, because you can call methods and members which are not there, and only in runtime they are checked. This does not mean you should arbitrarily break functionality into different classes - quite the opposite! It is the developers responsibility to design his classes well. How should you design this? What are the actors in this exercise? 

Naming conventions from time to time your code conventions slip - , , etc. if you write in java, adhere to its conventions - , , etc. When static methods scream 'refactor me!' - in your class you have many static classes. Even the name of the class hints ti the fact that it is not very object-oriented... When you look at all the methods in this class, you may note that all of them have one parameter in common, and they keep moving it around among themselves - . This suggests that it may be a good idea to refactor all of them into the class... Don't override member names - you use and to both the private members and their method getters. Better naming for the methods would be and - TL;DR - you might want to break this method to smaller ones. 

The instruction below a is totally useless. The CPU will never reach it. Now it just consumes a byte and is testament of (lack of) skills. 

This procedure is the natural continuation of the Example 4 that I wrote for How buffered input works, a Stack Overflow Q/A. Features include: 

Do observe that I wrote 13,10 and not 10,13. On the DOS platform convention dictates the use of CRLF=13,10. This might not seem too important to you but recently I came across a question on Stack Overflow where someone suffered a malfunctioning emulator precisely because of this! 

Your comments certainly explain well enough the purpose of the code, albeit this one (; Preserve ESI) is a bit superfluous. What would greatly enhance the readability is you writing tail-comments in stead of whole-line-comments 

As said before, clear registers using . Furthermore you can compare memory with an immediate directly, no need to do it through using a register. Had you written the (short) 16-bit version above the (long) 32-bit version, the conditional jump could reach the 32-bit version easily. 

In this simple program it is what I would do. If the polling section were much longer I would keep what you wrote. 

Bit 5 lives in the register. Testing to see if it is on or off can be shortened by not using the double opcode instruction . Best choice here is the Modr/m byte less instruction . 

Here's a clear opportunity to optimize the code. Instead of conditionally jumping to done you can use the opposite conditional jump and fall through. This saves an instruction: 

With the instruction you're avoiding to have to write the much longer . Very understandable but the 1 byte would still be shorter. There's also some danger lurking in this code snippet. Who is to say that Intel/AMD in future iterations of the processor will not be returning non-zero values in EAX[8,31] ? Already today some leaf numbers aren't used.