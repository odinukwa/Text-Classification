Variable Naming Also hindering readability is your choice to use an alllower variable naming convention. is much more readable than , all the more so vs. . You also tend to use lazy shortcuts like , , , , etc. which might seem meaningful to you, but to an outside reader the names might be less helpful. Something must be missing... 

Someone reading your code might not understand how it works, since it missed the point where you change the value. More seriously - if you decide to remove the printing, you might forget that it changes something, and simply comment it out or delete it. 

It seems that you fill only when the program starts, and never again, which means that each time you run you read the same (stale) data. When you you call , and when you you also call . You never use though... In your main loop you , between iterations, which means you sleep 60,000 seconds - about 17 hours. This means you will miss some of the check points you intended to run. Generally speaking, maybe running this indefinitely for a couple of check points a day is not recommended, and better way would be to use jobs to run at 0100 and at 2300. Encapsulation - you seem to have a lot of instance members in your code, some of which need to be maintained manually (like ), some maintenance is neglected (like ), and some are forgotten (like , which is never used). To prevent this, you need to think which members are actually part of your state, and which are not. If there is no good reason to keep them - don't: 

Naming You should give variable names which convey information about their purpose and usage. and are borderline, if they are part of the domain's nomenclature, but and can definitely be improved. Proper usage of So, you've decided to use to optimize string concatenations. That's good, but then you use to concatenate strings before you append them to your ! method returns exactly so you can avoid this: 

I believe the easiest way to avoid duplication each time you read from the database is to create a which receives a as a parameter, and does the heavy lifting: 

Also, some of the properties which don't change (like processor architecture), you might want to cache your answers: 

not at the start of the next (my preference as well), other styles are also used (some more widely than others): 

code smell In Elixir and are seldom used, and are even considered a code smell - if you can solve the problem using pattern matching - it is considered more idiomatic. Consider - the following is more idiomatic in Elixir than using : 

First, note that this is all untested, but the ideas should hold up. I tried to abstract a lot of the logic by distilling the object creation to a dictionary containing the data, but it turned into a bit of a mess. To start with, consider the following structure for your object data: 

I echo both of the previous reviewer's sentiments, but I'd also like to add that regex is overkill for the parsing here - will work just fine. Implementing this and some of the other suggestions might produce code like: 

To address the recursion depth error, you could either change , or you could rewrite your initial solution to use as an argument to avoid the global variable. 

Decrement The next challenge is to find the digit to decrement. This turns out to be simple: decrement the first non-zero number on the right... 

Here's a version without , I'm not super happy about either. Neither version seems particularly elegant. 

We can't increment the because we can't decrement any of the 's. We can't increment the right-most 's because then decrementing the would lead to a number less than the original. Thus, we have to increment the first . We would reach the same conclusion if we considered the number instead. From this, we learn that trailing 's should be ignored. 

This allows for a arbitrary number of objects to be created. However, this runs into some problems when we want to use the context manager since it is not natural to have an arbitrary number of required contexts. This can be achieved using a recursive function. Here, we will supply a sequence of callables that are to be opened with the statement, and a callback function and arguments to be executed once all of the contexts are opened. 

Sort But wait, this decrement function suggests that we turn into and turn into . This clearly isn't correct. While the outputs are larger than the original and the digits sum to the correct value, they are not the respective minimal solutions. However, if we sort all of the digits after the incremented digit in ascending order, the minimal solution is achieved. 

With this approach, the same result is achieved, but with much less code. Combining this all into a single function yields: 

With this one change, you've gotten rid of half of your code and now can work with five-grams, six-grams, and so on. Making some small other changes, many of which are noted above, cleans up the code pretty well. 

Since will always be by the virtue of the list not being empty (as previously checked). This second line is equivalent to 

This does not seem to be the intention of the code. Assuming you want to check all lines in either and you may want to use the following code: 

This doesn't look very efficient - you allocate all this memory up front, and I couldn't really see where you are using it... Your is also not very defensive - you don't close your stream in case of an exception (you should use block to make sure of that), and you never validate that is valid, so there is a decent chance that your code will not run as expected. Idioms You should use the idioms relevant for the language you use, for example - instead of Another example - don't wrap with simply use 

Indentation Java's indentation convention is 4 spaces, and not 2 as in your code. You may choose the align signs between grouped lines, but if you do - be consistent - in your assignment block there are 3 different indentations... Variables, constants and literals Variables, which are dynamic and may change as the method progresses, should be named in camelCase, and should be declared as close to their use as possible (no need to declare them at the beginning of the method). Constants, which do not change when the code is run, should be declared as constants outside the method, and be named in ALL_CAPS. Personally I think that you should consider dropping the constants altogether, and use literals, since they are less ambiguous then using constants in this case: 

Although @CarySwoveland gave a very extensive answer, with quite a few good tips, I agree with @WChargin's remark on the code not being very readable, as it is riddled with s,s,s and s, which make it not very readable. Also using the more obscure is a nice trick, but, using will give the same result, and look more familiar to more ruby developers. The pattern: 

You should also consider extracting some of the hard computational lines to helper methods, and name them so that the reader will better understand your code: 

Read with batches Looping over is very memory greedy (it reads everything to memory before starting to process it). You will be far better off using batches: 

Some notes about the code This is, of course a very elaborate design for a very simple assignment, and it is not optimal ( assumes that all you need is and , which might not be true to a lot of other shapes, and hold very little merit on its own - but I wanted to show some inheritance). Note though that each method does only what it is supposed to do: just creates a shape - it does not prompt the user, and it does not print anything; only draws the relevant shape, etc. This makes the code more readable and maintainable. Note also, that the class I don't want anyone to instantiate, I wrote as a rather than a . A cannot be instantiated, but can be or in other classes. Also, its class methods (the ones starting with ) can be called like class methods in classes, so it is an easy way to create singleton methods. 

Now you don't have to register each effect in your dictionary after the function declaration and this should clean things up a little. Additionally, if you import this object, you can add functions anywhere, easily see what effects are registered, and you can add logic to the class itself if you want more complex behavior (i.e. address the case where an invalid string is entered). 

I think having one in your definition of sublist is perfectly appropriate, but the use of isn't appropriate because you are going to need a list anyway. You aren't using it wrong, there are just better solutions. Also, as noted in the other answer, you can avoid repeated slicing by creating a copy of the list on the first run of the function through an optional default argument (see in the code below). Finally, summing three lists in your return statement is probably less than optimal. With unpacking in Python 3, you can turn this into a single comprehension which should be better in terms of intermediate object creation. 

Here, the "inc" and "dec" operations were abstracted into a dictionary of . This is slightly more complicated than it needs to be (one could simply invert in the "dec" case and add the result to the register), but allows for other operations to be easily added. The end usage would look like: 

Iterating backwards was smart, but, yes, there is a much simpler way to do this using a list comprehension â€“ this is how one typically filters a list in Python. 

This contains the name of each object, any keyword arguments that are necessary, and any attributes that also need to be created (as objects themselves). These can be created from this structure using the following functions: 

Per Graipher's answer, I extended the chance of victory to accept an arbitrary number of regions and number of wins required. 

Sure, you could remove the global variable by moving the memoization to a decorator and adding a base case scenario to the function. 

In addition to the recommendations suggested by @Austin, you could inherit from to create an object to register and recall your functions. For example: 

Note that this creates a new list object rather than altering the original word list in place. Your current code isn't terribly inefficient â€“ it iterates over the list twice rather than once, but both are asymptotically linear. If you were to keep that structure, there are a number of small things that could be done to make the code more Pythonic. Compare the following loops to your own code: 

Finally, we want to create a decorator which will do the following things: (a) create all of the objects, (b) generate and enter the required contexts, and (c) execute the supplied function.