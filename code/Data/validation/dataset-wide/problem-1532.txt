Onto fixing the ! So, instead of a long statement, I'd use an object, which lets you specify key and value pairs, which really cleans the process up, because you don't have to iterate over all the options before finding the one you need. Here's what I came up with: 

In fact, in this instance, is redundant in itself. Using a neat function called , you can join an array together, without needing to iterate over its elements explicitly. 

Security: You SHOULD not be saving the password to a session variable, there are ways to break into sessions, and therefore, is an insecure way to save them longer than needed; use to remove them after processing. 

Instead of testing the value of the HTML element, pass the season number in as a variable, and then you can use some of that simplifcation magic we used before: 

You could consider replacing the style loop with a style loop. If not, you can also declare in the loop like: . 

and are passed in as parameters into your three parent functions of , and , yet they're never actually used. Remove unnecessary parameters. 

Your code could use more explaining as to what everything does, whether line-by-line explanation or per function. The comma thing and whitespace is probably the thing I can see the most that could be improved. Other than that, your code looks really nice and tidy, good work! 

What is at the first index of ? Why do you need to return it? Try to make your code intentions a little more clear. 

and not necessarily that it's wrong, but there's a lot of empty whitespace lines that make your program look a lot beefier than it should. 

You have an extraneous whitespace after the keys in your objects. In your object, you have a weird indentation style, I would recommend not indenting it that much, or just not all > //////////////////////////////////////////////////// Not only is that ugly as hell, it's fundamentally pointless. If you're declaring config items or whatever, do it in another file, or built inline into the page. In , you define a variable, only to return it immediately after. Just return it directly. 

Imports should not be on one line, as per PEP8 Your code doesn't meet the "too many characters on one line" rule of PEP8, however, you should avoid having stuff like this on one line: 

By incrementing or (as I suggest you call it) before you perform the change on or (as I suggest you call it), you can remove the magic number \$2\$ and make it a good ole \$1\$. 

Instead of using : use a After you decide who to attack, and then attack them, the game is over! Even if you miss or only do 1 damage! Set a variable to keep the game going. A few indirect things: 

Usually the obfuscation is simple duplication and rearranging, which my script catches, however there are a few edge cases that are missed, which I'm working on catching. However, my solution feels like it could be simplified. The logic follows this order: 

Then, add to check that your string is a valid object property, in which case that it isn't, you can throw an error. 

First, your indentation is half-indentation. It should be four spaces instead of two. Try putting your code into JSFiddle's TidyUp function to see how to better format. 

Your structure: You have a bunch of loose functions that aren't linked to one another in any other way than the fact that they call each other. Use a structure, or a chain, that way you can avoid passing parameters around: Taking those changes into consideration would give you something like this: 

and then have a structure where you add an empty data attribute () and a filled data attribute (, which is filled with the src). Once you click on the image, it opens up a popup and lets you edit and save, or edit and cancel a bunch of filters. This has issues running on the local machines are that cross-origin domains don't work, however, this is intended for use on a live environment. 

Placing the tag in the header is not a necessity of HTML, in fact, I often put my s at the bottom of my tag. 

I would think that a major time complexity comes from the usage of Regex which involves 'steps' in the processing of the expression, meaning the complex the statement, the more steps it can take. Instead of using a Regex for when is false, a normal can be done. And instead of using a Regex for the global checks, I would suggest using a polyfill like the following: 

: you don't need this field. It's only used in one function, and it could be passed in as a parameter at best. 

This question is not simply preference, the second method is better than the first for the following reasons: In the first, you initialise a function and it returns an array: So, alongside the string to test against in the memory, you now have those three things in the memory. Whereas, in the second example, you don't return an array, and the string is only used as a parameter, by doing this you now can only have two things in the memory. Therefore, the second code block is better than the first. Also, in the spirit of Code Review, you can further improve the second code block, by not actually assigning , or using a . 

(I'm not personally familiar with , so I can't give too much of a review on your usage of the function.) 

jQuery: Every function you use can be easily replaced with a vanilla equivalent. The performance benefits of using jQuery are far outweighed by the strain on resources caused by loading it. 

You should question what it is you're trying to do. You shouldn't be coding to the "cleverest" way, because when you come back to try to maintain it in two weeks, or in production code for others, it's gonna be really hard to maintain. You don't want a call from the new guy two weeks after you're finished while you're sipping mojitos in Barbados. Try debugging Regex over the phone. Not fun. Anyway, you probably should avoid using regexes for everything (they're all throughout your code), they overcomplicate your code, and make it really really hard to read. 

Note that I used the usernames as keys, which makes lookup much easier. Also note that you could add the field to match the usage of function. 

Game Structure: While your game seems to flow somewhat well, question -> answer, play again, Your, or perhaps, the usage of s is kind of annoying. I always found s like forcefully delivering a message, you want to be delivering it peacefully and in a nice dialog, thus, I would suggest creating a dialog box, or using a dialog plugin. Additionally this will allow you to deliver the content better and add an end game button for when you want to end the game mid-game. Beyond that, I would consider implementing a score check, and from that a check to make sure you don't ask the same question twice in the game. 

Convert these to actual variable (with relevant names) so that maintainers know what each of these actually do. 

Language: You offer different languages, but support no way to change them: A button in the header would be excellent. 

If you want this to only print one answer instead of a possible maximum of six, you can just uncomment out the inside the statement. 

The following two block are nearly identical, consider moving them into a format/structure that reduces the repetition: 

sounds a little bulky and over-the-top. is a better name for it, and you could consider removing , but, consider the effect that would have on MSE. 

UserScript headers If you're hosting this script on GitHub or somewhere public, you can include and headers so Tamper/Greasemonkey will automatically update your userscript when you push out a new version. 

Additionally, instead of using consider building each line of the game to the or to a HTML element. Something like: 

I don't particularly have an issue with your HTML, however your JavaScript could be improved. Currently, you have a lot of duplicate logic. You should move it to a function that each case can call. Like the following: 

Don't omit the brackets around your statements, funky things can happen later on if you mess those up. It's best to get in the habit of wrapping everything carefully. 

Which, while redundant, it readably shows that cases have been considered and their result determined. 

As there's not all that much code here to review, I've reviewed some style points: You have some strange use of whitespace throughout your code: 

You probably knew this already, but omitting a direct comparison in an statement tests the boolean; so, the following is redundant: 

Returning as a result seems a little forced. If you had something along the lines of , and then, you can keep the default value of as a space (), and make it optional, in case you want something different. 

Additionally, you should move the opening message to a constant, that way, when/if you want to change/improve it, you can do it much more easily. 

: is a bit weird and can cause issues as it iterates over prototypes as well. Considering you're testing that the properties are array items anyway, you can just use instead. 

In addition to the other excellent answers on this post, there's a good point you're missing: You're not actually hashing, you're encoding. The idea of a hash is that you cannot retrieve it, simply re-hash a new data input and compare the two. In addition: Your encoding is literally the periodic table of elements. I bet it would take a genius, chemistry doctorate, chemistry major, high school student to figure that out! I don't know how you value the IQ or knowledge of a common internet thief, but you're doing it wrong. If I'm a thief, and I put the password into the system as a test, and I get as a result, I'm sure as hell going to make the connection. And then it's just a matter of matching one for one and your encryption is as good as gone. For future reference though, the brackets totally give it away for thieves, however without them, it may be a little safer. Like the answers say above, you shouldn't be writing your own encryption or hashing algorithm. But there's no harm in learning, as long it never reaches production code. This is the way I've done hashing before in non-production projects: Sign up: 

Then, you could just let the input be either, in case the user has a preference, or a need for custom rules. 

Imagine you're a contractor coming in to improve this plugin and you accidentally remove the after 's assignment. All of a sudden you've got a bunch of troublesome globals. Sticking to adding the keyword on every line is a practise best kept early. 

XPath and I nearly forgot entirely about XPath, thanks for bringing back the nightmares. In all seriousness though, CSS selectors have been a core feature of JavaScript for a very long time. You should use them instead. Instead of your eight parameter , you can just pass through a simple CSS selector ()