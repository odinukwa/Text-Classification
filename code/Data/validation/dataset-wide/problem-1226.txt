I cannot get the current access modifier for s and s because the type containing the access modifier is a child of this type. This is the code fix: 

I set up the concept of an to make it easy to perform multiple discrete responses when something happens. Here they are, in sequence of being performed: The GameCreated actions (actually used in the , but since I'm getting the rest of them reviewed anyway...): 

You say you are closing the form, but you are really just hiding it and clearing the data. Types that implement have a method. 

I have minimal experience doing this, so I don't have a fix, but you can test everything for yourself at the W3C HTML validator. 

OOP In a comment you state "I add a default costructor only to get and set ." This is not how instances of classes in OOP work. If, and only if, these methods should have exactly the same result when called from any instance (or even a non-instance) of a class, then you can make them static. This way, you will not need an instance of the class to work with these. However, you need a chat connection to send messages, so I don't think this will work. OOP does not usually work like that. In OOP, you create instances of classes that have nothing to do with each other. For example, if you have a class, you can't just call without an instance--you can't make a non-existent dog bark. First, you create an instance, then you make the instance bark. 

Given the nature of the game, the odds of this happening are extremely low, but your algorithm does not seem to weight the squares to follow this pattern. Finally, once the board gets filled when playing with the keyboard, nothing happens. When you ask for a hint, it returns "undefined". Perhaps you should implement win/loss situations to cover this scenario. 

I converted a C# analyzer for removing empty argument lists from attributes to be a C# and VB.NET analyzer: 

You are defining whether a build is a "debug" or "release" based on whether the code is optimized. That has nothing to do with Visual Studio's definition (and therefore the standard definition) of what a "debug" or "release" build is. That and the output paths are the only changes I can think of off-hand between the default "debug" and "release" candidates. However, you could define a "debug" build as one compiled against C# 7.2 and a "release" build as one compiled against C# 6 and leave optimization on or off in both for whatever reason. I wouldn't use the terminology "debug" vs. "release" here; I'd just check whether debug symbols were enabled when I determined whether to kick off the debugger. If you change what I suggest above, I'd recommend renaming to just and assigning it whether the code is optimized or not. I can compile as None, Full, Pdb-Only, Portable, or Embedded with JIT-optimization enabled anyway. 

First, you are usually good about naming your variables, but you still have a few single-letter variables in here, , , and , to name a few. These should be more descriptive of what they are. Second, your code would be a bit more readable if you put spaces around your operators, like . JSLint says you should do this too. Third, I think your algorithm can be improved. The very highest number that can be created is 2^18, which can only happen when you have 2^17 in one of the corner squares, and 2^16, 2^15, and 2^14 along one of the edges. Then, you need to 2^13 above 2^14, 2^12 next to 2^13, and so on: 

Finally, it is not good practice to always include because sometimes names inside namespaces overlap, which causes compiler errors or undefined behavior; instead, you should specifically specify which namespace you are using by placing in front of the name. 

Additionally, when I test whether the config saves, I only run the method, I am actually testing whether the save config updates the view model properties, rather than testing that the config passed in actually gets updated. This is the correct version (including the as suggested): 

Second, it doesn't like the absolute location of the image. What you should do is use relative links, like this: Third, all images need to have an attribute. This is some plain text that screen readers use to help people with seeing disabilities, and search engines use to find images: 

Ten, you can use and in loops. will exit the loop, while will evaluate the condition and start at the beginning of the loop. Using these statements can help you remove some of your flags. For example, instead of using to exit the loop when the condition is re-evaluated as the last statement in a successful loop, you can use . 

So, you have a dictionary where the key is already included in the ID if the value? Why not make that a plain ? If the keys are guaranteed to not be duplicates anyway, you could set up a for simplicity. However, looking beyond that, it appears we have to keep a set of s for each student, and you are doing that by keeping two lists. I would combine these into one list with a class with an , , and a of s. Then, you can keep a list of students and their scores all together. This, however, has the trouble of allowing duplicate s, so perhaps a is the best option here, even if the is in both the key and value. 

The reason there are style guidelines is because it allows you to skim your code and find what exactly happens at each point without reading it character by character and line by line. If, for example, I had never worked on this, but had to fix a bug on a certain special case involving one of the dimensions, I would have to read the code carefully to figure out where variables are declared and used. By the time I was done, I'd know the process, but I'd be so involved in the process, I would have a hard time seeing the algorithm. If, on the other hand, you followed more standard guidelines, I'd be able to skim it and figure out the general algorithm and then look through the process to see where it deviated from the algorithm. I'd also be able to easily skip over sections of the process that were functioning correctly based on the expectations of the algorithm. This could speed up a bug fix from taking 5 hours to 5 minutes. 

You don't always have your braces have the same style, and sometimes you don't use braces at all. You should always use braces, even if there is only one statement in the block, and you should always use the same style. Also, it is common to put spaces around operators to improve readability: instead of .