Before critiquing your code, I'd like to compliment you. In general I found your code readable and appreciated that you've broken things into short functions, and your variables were well-named. Do you really need ? Unless you have a compelling reason to use , you should probably stick to . will be better for data locality, and offers random-access iterators. That means that your can be made to erase items without needing to traverse any of the data structure. I would expect switching away from to improve performance. Don't use In a few places you use dynamic allocation with and return a pointer to an object. This creates a burden on the programmer to make sure is called appropriately, and is not exception safe. Prefer instead to return by value. The object copies can be elided by the compiler. Don't use arrays C-style arrays generally aren't the best data structure for, well, anything. They don't know their own size, and decay to pointers when used as function arguments. At the very least, use instead. correctness Declare variables wherever you can. This lets the compiler guarantee that variables that aren't supposed to change, can't change. Less moving parts makes your code easier to reason about. Too much This may be open to some debate, but I think you use too much. Sometimes you initialize a container like this: 

in cases like this, or where I'm initializing primitive types. Although and are identical, I find the second to be easier to read. No need to wonder about what the inferred type is. That said, keep using in cases where the types are tedious (like iterators), and pair it with for even more fun! Edward's example has changed my mind. Your use of is fine. 

Below is included some example code to demonstrate the usage of . I'm less interested in feedback on the example code, but it is of course still welcome. main.cpp 

This consumes more memory than a hand-rolled loop because needs to be filled with values. If memory is constrained, the calls to and can be replaced with a hand-written loop. 

Magic numbers I don't know what is supposed to represent, and neither will anyone else who doesn't intimately understand the algorithm. It would be better to assign it to a named constant. Something like 

Correctness Fix build errors My compiler indicates that your statement is missing before Additionally, you can replace the typedef with a statement, which is more modern: 

Using functionality already present in OpenCV is not only clearer and shorter (by a factor of 3), but also allows the code to be more flexible. You will notice: 

It seems useful to have a generic function to calculate the mean of all elements in a container, so I wrote one. By default it calculates the arithmetic mean, but should be able to accommodate other means (like geometric) if passed the appropriate functors. Assumptions: 

Squash the bug! I don't know the cause, but your program appears to loop forever when I give your algorithm the sequence: 1,8,4,6,5,2,0,3. This is almost certainly not desired behavior. Code Simplicity Return the new pivot You can avoid taking the pivot by reference by changing to return the pivot value. The new function signature would be: 

instead of using and , which I find more difficult to understand. portability Your functor assumes that will call it in order starting with and ending at . This is not the case: does not guarantee a particular iteration order. Since C++ doesn't allow you to zip ranges easily, the best portable equivalent I can come up with is this: 

In addition to Nobody's excellent answer, there are some other improvements which can be made. Header organization Order your headers alphabetically -- it becomes easier to remove duplicate includes, and is just more organized. -correctness Mark variables and function parameters which are only read as . This guarantees they can't be accidentally modified, and makes your code easier to reason about. Additionally, you do not provide overloads for your and functions, which you should do. Currently it is impossible to use these methods on a object or reference. Iterator typedefs It looks like you want to treat as a container type. In that case, you should add iterator typedefs like those found in standard-library containers, since some algorithms may depend on their existence. For example, 

This is the most succinct version I can think of. If you want to make more guarantees on the result and increase efficiency, you could move the call inside an block and return a sentinel value (like in Nobody's answer) otherwise. Writing the function this way and returning a allows the loop over the bit index to be greatly simplified: 

Naming uses Hungarian notation. Please don't do this. Instead, try to come up with a more descriptive name, or just leave off the prefix. 

Short variable names like , , and aren't very descriptive, and make it hard for others to understand the code. Try to pick more descriptive names. Make sure you don't include unnecessary logic. For example, your check will always be , since you only insert tuples, and is a float. It can be removed, saving you a line of code and a level of indentation. 

This clutters the code. It should be obvious what each block is doing. If it isn't obvious, you probably have too many nested blocks. Which means... Create a method for the inner loop Your inner loop over the vector can be succinctly extracted to a function of its own. Creating a function allows you to give a descriptive name to what you're doing, and limit the scope of variables. It also makes the outer loop easier to read and understand. I have rewritten the inner loop into its own function that makes use of standard algorithms. It is slightly less efficient than your original method, but improves immutability, readability, and simplicity of the outer loop. 

Code Style Whitespace and Braces Be consistent in your usage of whitespace and braces. and statments should have a space between the keyword, parentheses, and opening brace (if using K&R style braces). Also, don't omit braces in an , then include them in the . For example: 

Algorithm Now that your function has been simplified a bit, it is easier to see that you have written a naive pattern match, which has complexity \$\mathcal{O}(mn)\$, where m is your pattern length, and n is the string length. You can improve upon this by implementing one of the well-known pattern-matching algorithms, like Boyer-Moore or Knuth-Morris-Pratt. I leave this as an exercise to you, both because it would make this answer too long, and it would be a good candidate for another question on Code Review. 

You could change the to a and increment and in the increment statement, but I find this more readable. Writing it this way also makes it explicit that there is a loop over each of your string arguments, which makes analyzing complexity much easier. But wait! All that iterator comparison is complicated. Wouldn't it be nice if there was another way? Turns out, there is , which is essentially what the inner loop does. Then the loop can be simplified: 

End-brace comments are unnecessary In general, you don't need to add a comment at the end of a block indicating what just ended, like this: 

Graipher's answer covers many good points (which I won't repeat), but you can also simplify the file parsing by using the module provided by the Python standard library: 

Use when you can Both and do not change during the function evaluation. They can be declared as to allow the compiler to perform checks that they are never accidentally modified. Additionally, you can reduce the scope of by declaring it inside each of the loops. Then it too can be made : 

This is my first attempt at writing custom iterators, so I am interested in feedback on correctness and general points to improve. It seems like my use of is suspect, but I don't know if I can avoid it. Here are the class definitions: RowRange.hpp 

And then simply at the end of the function. But then this function signature looks familiar: Use the standard library, Luke! There already exists a function in the standard library. You can replace your entire function with it, and simplify : 

Public exposure of You expose the member of the struct. This exposes an implementation detail unnecessarily. You should make private, and probably change to a class. 

organization It is a good idea to keep your standard library directives sorted alphabetically. This makes it easy to spot duplicates, or to add new dependencies in the right position. is for constants C++11 introduces , which you should use to declare a true constant: 

Output arguments You currently use a pointer for your output argument. While this is a matter of preference, I found it confusing considering the other pointer argument indicates an array. I would use a reference for instead of a pointer. -correctness and immutability In a pointer-math-heavy function like this, it is especially important to document which values can and cannot be changed within the function body. Use to specify that a value is not mutable. This allows the compiler to do more error-checking, and makes the code easier to reason about. Most of your function parameters aren't modified inside the function, so they can be marked . Note especially , which has two modifiers, indicating its value cannot be changed, nor can the data it points to. Also, is only mutated when it is clamped to zero. You can rewrite this using (from the header) to put the initialization on one line, and then make it as well. Note that using requires be a signed type, otherwise there will be overflow errors. An improved beginning of your function would look like this: 

The use of in the lambda is a C++14 feature, you will have to write out the correct type if you can only use C++11. Also, using fixes the loop-forever bug on my "bad" input, but still doesn't quite give correct results. Minor Issues Unused comparator accepts a comparator function argument, but the comparator is never used inside the body of the function. Restrict Iterator types Currently you rely on convention that your iterator types are bidirectional. You could produce nicer error messages by using , possibly like this: 

Coding Style Limit variable scope It is best to limit the scope of your variables to the smallest scope possible. You aren't writing C89, so you don't need to declare variables at the top of the function. Naming Be sure to give descriptive names to variables and function parameters. is not descriptive. Also, it's good to denote separation between words in names. is hard to read. You should pick either or for variable names and be consistent. Use where you can If a variable is not supposed to be modified, it should be marked . The compiler can then verify that the variable is never changed. Both and should be marked . Algorithm Inspired by Schism's linear-time solution, there are several opportunities to replace hand-written loops with standard algorithms. These make the code easier to read and reason about. My implementation follows: 

Uses the operator, which bidirectional iterators do not support. Calling your sort on a will fail to compile. You can make your code compliant with bidirectional iterators by changing the above line to: 

I have written an adapter class that allows iteration over the rows of a object from OpenCV. For those interested, here is the Mat documentation, but the salient points are as follows: 

Code Style Whitespace Put spaces around your assignments and comparisons: is harder to read than . Also, be consistent. Sometimes you do this already, but most of the time you do not. Braces You have nested loops, but only the inner loop has braces. Both loops should have braces surrounding the body for consistency. Precondition Checking Although it is good that you leave comments indicating the data types you expect from and , it is better to verify this in code. Adding assertions about these conditions makes it easier to debug if a wrong parameter is passed: 

Simplify, Simplify Your inner loop has almost exactly the same bounds as the outer loop. This can be simplified to a single loop over and each: 

Reduce Variable Scope and are both declared outside their respective statement, but are not referenced outside of it. Declaring them inside the statement limits their scope to within the loop, reducing opportunities for them to be misused. You can also use for type deduction, saving you the necessity of typing long iterator type names. Reduce Nesting Your code contains many nested and statements. This can make the code hard to read. If you have an statement wrapping the entire loop body, you can reduce the level of nesting by inverting the condition and breaking early: