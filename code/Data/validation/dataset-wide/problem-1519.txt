This looks too esoteric and I had to search for the documentation for both and and after that I had to run your code to the browser with breakpoints to understand the internals etc. At some point I stopped because I thought it took me enough time already and its not worth it. Its clearly too complicated to read and to understand, not only now but also in 2 years time when you revisit your code and think what exactly did you meant to do. My point is that in the current state is un-maintainable. Anyway here is my take on this: 

I would just factor out the flash error into a constant. Also, I believe the trailing period in your regex should be escaped, as you don't want to match any character. 

I moved the test into its own method to separate the logic. This still shows a Rubocop error of which you could fix by moving the nested iteration into its own method, but that struck me as more confusing than helpful. Note that creating the method allows us to use both and to break out of the loop at different levels. Also note the use of a guard clause. 

What happens if on player1's go, they win? The game should be over, but player2 still gets to try and make a futile move. 

It is never necessary to have a condition with == True or == False. This is another good place for any and all to appear 

To resolve this, use the standard practice of trying something, and asking for forgiveness later. I would suggest either an iterable you build up. Still this seems like a case of reinventing the wheel, it is unfortunate python doesn't have it built in to the itertools library. It does define grouper in the docs of itertools, which is kinda what you want, except it pads a fill value to the end of the iterable. 

Finally, you should consider whether you want to be when no conditions match, and you might consider explicitly adding an to make that decision obvious. 

[Rewritten] You want to avoid inject, as is O(n) and clearer. Monkey patching array makes the code clearer and is idiomatic Ruby. Methods that return a boolean should end in . Method names should be snake_case. Here you go: 

There's nothing magic about Rubocop, but it does encourage you think about what makes readable (as opposed to just correct) code. In this case, I think it is clearer to make the conditions explicit in the rating method as you've done rather than break them up into separate methods to pass Rubocop. Specifically, I would suggest this: 

I've reviewed your code and i can comment on some things: I have a similar personal site and I can tell you there is not many things you can really cut in order to make the code more tidy without resorting to frameworks. Inevitably as this is a static website you will have duplication especially if you want to have those auto-prefixes. Colors I would like to criticize the use of colors in your website. In my opinion they look dated. Try to use a lighter blue color in the background or use a flat color scheme from adobe kuler. Links I cannot see any of your links because they have similar color with the background. If you plan ton becoming a great web designer you will have to pay attention to those things as they stand out. Buttons and Animations Don't use those 3d buttons they look horrible. Make them flat or at least with a smooth gradient and shadow and please disable the animations! Fonts Change the font to something more popular from Google fonts and not convert something from Font Squirrel. Also make them slightly bigger in size. Background Add section on the top of the site with a background image of something that you like similar with example some medium blog articles. Make sure its of good resolution and quality. If you can make it static when you scroll even better. Overall Overall I'm sure with a lot of work and passion you will become one great designer. You just have to keep strong attention to detail and make your own statement by showcasing your portfolio. Good luck! 

In addition since self.pieces are never changed from instance to instance, you can move them out of the init 

I have written code to implement the nearest neighbour algorithm to produce a solution for the TSP problem On my machine, the code takes roughly 10 seconds. Since this is so short, a lot of the profilers I have tried don't get a chance to record it properly. How do I profile this code effectively? When I define the distance matrix and the size globally, the code takes around 6 seconds, what could cause this difference? The Code: 

You can also consider using generators which are slightly more slower that the iterating method but have less memory requirements. Here is an example: 

I've reviewed your code and I can make the following remarks: While I like the BEM methodology, its not a panacea especially following it to the letter. You must seek simplicity to your code even if that means not following some rules but compiling an pragmatic view of your problem. In that case you should not add classes if you do not have use cases or rules to apply. Your HTML can be simplified to: 

In Ruby, it is almost never necessary to set a temporary variable to empty and iterate over an object, given the power of methods like map, reduce, find, all?, etc. I don't see the need to use since it doesn't change whether index will be present or not. It's unclear why you're checking for nil on the first sheet_activities (since you can't guarantee what will be first without sorting), but if you just want to return false when sheet_activities are nil, the above will already do so. Also note that Rubocop likes single quotes when you're not interpolating. 

Note how the code speaks of its self and it doesn't have to exaggerate. Every name has a meaning with the right intent. A makes matchers and an returns a boolean by accepting a query and checking if its matches the query. Inside the we simply chain over the query and validate that either every query parameter matches the object or in case of a mismatch we return false and that's it. My point is that you should always have a birds eye view of your code and try to think of ways to make your work easier to handle. Search for alternatives and don't fall into the rabbit hole of applying things that they don't fit accurately. There is always a simpler method to do your job. Good luck with your FP endeavors. 

Presumably, from the many links you have many pages in the site, changing the header and footer on each page, every time there is a small change gets tedious, and a waste of time. A server side script like PHP would be able to fix this problem, or if you really want, you could encode the headers and footers in javascript and have to wade through that code for ever small change. I think doing it server side would be much smarter in the long run, and you can then learn how to make other features like a login, or a contact us page that sends emails 

one simple rule to follow is: Do not nest selectors more than three levels deep! Otherwise you will have to much specificity and your rules will be too much coupled with the DOM. Plus no reusability having such a long class names. I would't be bothered to type for example: You want a simple life for you and your fellow colleagues you are going to use your components. Try to use small reusable classes to apply effects and have a simple convention for names.