I’ve seen it stated in conference presentations that should generally replace uses of . Even if you can’t do that because the initializer isn't , note that you no longer have to put the definitions into a CPP file separate from the class definition. Is there a reason why and are not inlined in the class definition? 

In general, make these instead of . (T/43) index iterator If you have to create an iterator, start by using Boost.Iterator library. Either or will fix you up nicely. Not only do you not have to write all the details of what makes an iterator, but it will certainly be right, saving a very picky review against the std iterator requirements. This will save you a lot of code! 

Now how do you write ? You can include a virtual function in the class hierarchy that does this. This is a classic approach, but it has the drawback that the has to inherit from an interface class and all the individual functions have to be virtual. 

Don’t write an empty destructor. Leave it off completely, or use to emphasize that it exists. You’ve made your class to not be trivally destructable because of this, which means the compiler can’t do certain optimizations (that's an over simplification). 

Yes. Your return type will be the base class, not the class the user was actually incrementing. That is, the requirements specify e.g. that have a return type of . Given some specific then will give a compiler error. Your base class needs to use the CRTP to make those reusable functions. 

Don’t use naked (and ). Make your vector of instead. The srand48 is not a standard function. And the old C rand/srand are infamous for poor quality random numbers. See the header file. Why does one location use (funny way to write , a ) and the other use as an ? You don’t need to put at the top of the class; that is assumed. Does modify the object? You did not make it . Also, use the keyword in the derived version! That is very important in real code for maintainability as well as error checking. 

The style in C++ is to put the or with the type, not the identifier. This is called out specifically near the beginning of Stroustrup’s first book, and is an intentional difference from C style. And, don’t define more than one symbol at a time. But really, as noted above, it should be 

Note that I made a normal-named function and then defined to call it. That will be much better for people who read your code later, since carries certain expectations. 

Normally I would do this with a formatting library rather than individual calls and literals concatenated together. Right out of the box (I normally use a wrapper around Boost.Format, and am looking into a new "modern" performant library): 

You are making this a member, and operating on a parameter of the same type? That is weird and useless. Instead of writing 

I think this line is left over from an earlier edit. You are using a non-member variable of the same name in the CPP file instead. It is neither given any value nor defined anywhere. 

Don’t use “out” parameters to return information. If returning , the NRVO will be just as efficient (if not more) than what you wrote. 

You are still using a raw pointer and naked , noted in your previous review. Writing to access your instance data is not normal. Just refer to , not . Notwithstanding that, the loop 

Have you studied parsing? LR(k), Chomsky Normal Form, pumping lemmings, … any of that sound familiar? Lexing only, not parsing — OK, so you just want to classify tokens. BTW, have you looked at Boost.Spirit.lex? That would make quick work of it, if you just wanted a lexer. If you are doing this as an experience in itself, carry on! 

To make an iterator, use Boost.Iterator either adaptor or facade probably) and it will be easy with minimal code, rather than broken and incomplete. 

The algorithm will stop with the iterator pointing at the found character, or at . Either way is good for us! No special testing needed. Note that ranges are delimited as half-open: including the begin, excluding the end. That is, an end iterator points one past the last char to keep. That means everything works naturally without any adjustments or fiddling: 

Don’t write a member for this! Make a non-member that uses the general-use public abilities of the list to be traversed. 

The canonocal way to write operator+ is to call . You shouldn't need to make it a since the values need to be accessible by public means (otherwise what good is the vector to anyone)? And again, use , rather than writing loops. 

and then processing just runs whatever is in that function object. There are variations on what gets passed to the lambda when it is run vs. what is captured. But in general, a to the object of interest can be captured and the lambda is completely self contained, not needing any support from the class itself. I hope that makes sense to you and gives you some ideas. In one project, I replaced such command structs with a single template. The point there, IIRC, was to run the code on the proper thread. So, the lambda was the code you really wanted to do, queued it to the thread handling that object, using the same queue that was used for the polymorphic command objects before. Before, the class needed a function for the real thing to do, and a second function to respond to the matching command object, and the command object, and code to pack up params into it. Now, it just needs the function for the real thing to do. 

For a program that simply prints the output to a file, opening and closing for each part doesn’t make sense. Just open it and use it. But this is useful for something like a log file where you have occasional output. Now here’s the problem: In you have 

Can we count on the compiler to elide the prvalue and construct the declared variable in-place without any copying? If so, you can effectively write named constructors. 

If you used a like I suggested above, you would not need to write a destructor at all! (And, it would not automatically generate a bad copy constructor!) 

In real life, I use Boost’s , located in the string algos library. Not in general that you should be familiar with and with a number of Boost libraries as ever-present common code. 

You should expose that as a usable counting iterator. So, your array-zipper uses your counting iterator, rather than in internal component. 

And I ran it with critical test cases that check the edges to make sure the chart is being used as intended: 57 is a D- but 56 is an F. (Note that I added an A+ which is 100 or better). 

Note that your input function still doesn’t verify that a valid number was entered. Type 22 for example and it will trash the stack — very bad! Make getting a legal input from 0 to 8 a separate function that is concerned only with that, and doesn’t return until it gets a good value.