As an aside, I would like to suggest some micro-optimizations that I use as a matter habit... When you are writing loops, always cache the by setting it to a variable in the first expression. This will ensure that you aren't calling on every iteration. 

I'm not sure if "more beautiful" means you want a one-liner, but here are two more concise ways to perform the task: *note, this doesn't validate the as being one of the element values -- if this is a necessary component of your project, then please clarify in your question. Code: (Demo) 

You are storing a multi-dimensional volume of data in a collection of 20 one-dimensional arrays. While this approach may be successful, it will not enjoy the ease and simplicity of data access and iteration like a multi-dimensional array would. In the great majority of situations, using variable variables is evidence of poor programming design (there may be fringe cases where it is acceptable, but unless you can provide a compelling reason, avoid using variable variables). Pure arithmetic and the function will succinctly generate bucket keys for you. Then you can preserve the zipcodes as keys for deeper indexed arrays holding the individual/exploded . I've eliminated any single-use variables as a matter of best practice and slightly altered some of the variable names in an attempt to improve comprehension. If you need & (bucket keys as zero-padded strings), can be used during declarations -- but I doubt this is an issue based on your provided working code. Code: (Demo) 

If you don't trust the user to provide clean, single-spaced substrings in , then replace your & portion with: 

How about removing the dictionary preparation each time at a cost of increasing your dictionary width? You could have an alphabetized column (the rows aren't alphabetized -- each letter of each word is sorted alphabetically) and a column: 

Assuming your input array is pre-grouped and pre-sorted as your posted code represents, then you can use a single loop with some conditionals like this: Code: (Demo) 

Normally I take the time to study Mike Brant's answers (because they are so frequently educational to me), but this time it was tldr;. If this was my project, I'd specifically/exclusively target the "long" strings with regex to reduce overall handling in the task. My pattern uses to target only 40 or more non-white-space characters as your method does. If you wish to be more specific about valid characters (perhaps exclude punctuation), you might use a character class or negated character class, but I can't make a call on that give your posted information. Yes, regex is notoriously less efficient than simple string functions, but the substring targeting advantage in using it in this case may likely tip the scale. Code: (Demo) 

To conclude, your coding structure seems suitably segmented/clean. It only requires the logical tunes ups that I mentioned before my snippet. 

As an extension of deceze's excellent critique, I would like to advise that you validate the password with just one call rather than five function calls including three separate calls. The cost to this may mean reduced code comprehension depending on your understanding of regex, but it will yield more concise code and perform more efficiently. 

Now, I don't know what kind of validation you are running on the ahead of time, so I'm using a couple of sensible precautions. If your validation makes one or both of these functions redundant, just remove them. 

Just an extra note about your posted code block: You didn't need to compare using because there are no US zipcodes that end in ; so would have sufficed. 

Regarding a lookup array and writing a custom function, I don't think these design options will improve code maintainability. Though it may save a few lines of code by separating the declarations from the conditional structures, navigating and updating your code will be more tedious and possibly error-prone. Using the switch cases will simplify debugging, updating, and will be much more comprehensible to future developers that lay eyes on your work. 

If you copy the above into www.phptester.net it will render the html so you can see what is happening. Now an itemized list of suggestions: 

Since I assume you are not in control of the javascript code blocks being inserted in your code, you'd better play it safe and just use dots instead of negated capture classes like . The reason is: Google may write a "less than" comparison between and and the match will fail. As a side note, when your pattern includes a symbol that is also what your pattern uses as a delimiter, then you can avoid the need to escape your in-pattern by changing the delimiters to a valid delimiting symbol that does not occur in your pattern, like . Your regex demo link uses sample input that has two occurrences of . Only one of them is trailed by . If you want to match both occurrences, use this: Pattern Demo 

You are calling up to [number of matches]+1 times. This should only be done once -- take the call outside the loop. In fact, I'd say just apply the normally. Not set the new sorted array to a variable. (I'll show what I mean when I post my suggested code.) 

It seems you wish to batch the posted messages together into threads. In other words, create a "parent - children" relationship. This can be achieved simply by using one loop to generate the new data structure and one smaller loop (I use ) to display the text. Code: (Demo) 

Leveraging something like this technique: Custom REGEXP Function to be used in a SQLITE SELECT Statement with this intended usage: This, of course, is just a theoretical suggestion -- I haven't tried to do anything like this before. And definitely remember to sanitize and escape the to be offered to the query for security reasons. Mostly I am suggesting that you sacrifice memory for speed. Only the should be modified with character sorting and strtolower actions. These processes are expected to be "already done" on words prior to being stored in the dictionary. Here is another post of mine with the same basic logic: How to best compare these two strings for values even though they are in random order? 

*note, the flag that trails both patterns declares that dots should also match newline characters. My non- pattern will successfully match both occurrences in 561 steps. My pattern more than triples the step count at 1979 steps, but will be more reliable/accurate if Google shakes things up as I mentioned. Ext3h's pattern is also very fast at 572 steps and suitably matches only, but if it ever lets you down, you will know it can only be because Google added a in just the right wrong place. My assumption is that if you are going to bother to remove one googletagmanager script block, you probably want to remove all of them -- in which case, you'll want to use my first pattern for both accuracy and speed. 

To relax the valid characters range, you might like to alter the character class just before to use or specifically declare additional valid characters with . 

For my own confidence, I wanted to have a way to confirm the existence/absense of whitespace and control characters in the string before and after the method. I found a very helpful function in the top comment at the php manual's ord() page. Here is a PHP demo that iterates the string and identifies each and every character to prove effectiveness. Here are a few relevant regex links that I visited during my research: $URL$ $URL$ $URL$ On the matter of ReDoS and Catastrophic Backtracking, the threat is minimal (if not non-existent) because of my use of character classes and the structure of my alternatives. In case you haven't already visited it, here is a good page to read if you want to investigate further. Finally, I humbly ask that if anyone has a string that breaks my method, please provide it to me so that I can update my answer. And if any of my assertions are incorrect, please correct me. 

These changes not only shorten your code block, they improve readability with curly brackets and tabbing, and improve efficiency by reducing the number of loops. 

It trims all leading and trailing whitespace and control characters from the input string. It reduces two or more newline characters (which may have leading, in-between, trailing whitespace or control characters) to . It trims all leading and trailing horizontal whitespace or control characters from all single newline characters. It converts 1 or more consecutive horizontal whitespace or control characters to (a single space). This, during my development, required me to use the technique to disqualify newline characters becausse wasn't doing what I expected. I have read on SO and elsewhere that there can be some quirky/untrustworthy behaviors when dealing with and while processing certain characters on certain systems -- but I do not possess the necessary wisdom to explain this. 

I can appreciate wanting to avoid regex because you need to write readable / maintainable code. Unfortunately, there is unavoidable complexity in your task -- regex or otherwise. That said, a regex function like (or possibly ) is perfectly suited for your use case for several reasons: 

The following workaround will wrap your keys and values with double quotes. Such hacks will always be vulnerable to edge cases. To avoid sprinting down a rabbit hole of possibilities (I can think of a few cases off the top of my head -- 1. keys/values already containing quotes 2. declared empty/null keys ...there will be more), I'll just provide a solution for your sample input. For now, I'm using to ensure that the space before is not included. There are several ways to do this action, but I would need to have intimate knowledge of your project data to develop the expression that I feel is "best / most robust". If you discover any fringe cases that break this simple regex pattern, please update your question and I can create a patch. Code: (Demo) 

Finally, I recommend simply changing your second statement to so that the second statement is ignored when the first is true. This method will be fast, clean, and instantly comprehensible. 

When the result of pre-incrementing and post-incrementing is the same, I use pre-incrementing as the default because I read that it is ever-so-slightly faster. 

Your method custom sorts the array while maintaining all associative relationships. To demonstrate with some data: 

I may have flaws in my suggested code (because I didn't test it), but it seems to me that you could afford to implement the DRY principle. Writing a loop, to generate an array of items, then writing another loop to traverse the array of items just doesn't make sense to me -- just perform all necessary processes in the first loop (no temporary arrays). I recommend curly brackets for your conditionals and loops; not because they are essential, but because they improve readability for most people (never assume that you are the only person to see your code). Untested Suggested Code: 

The same logic is applied to the sequences that start from the upper-right corner. To crystallize... a 3x3 grid will have a total of 2 diagonal sequences, all other grids will have a total of 8 diagonal sequences. The diagonal sequences obey a simple pattern, so you will have no trouble in generating the correct for your function. My tinkerings: I experimented a little with what I understood of your concepts and tried to employ array functions rather than for loops (though they are sometimes slower, I think they are better descriptors of action). It is not a very tidy snippet (consider it a "napkin" draft), I didn't bother refining it because I am not 100% sure of your usage nor what is the best way to display the result. 

So I've toiled away at this for a while and although I am feeling a little out of my depth I'll submit my approach which employs what I do understand about preg_replace and regex. 

If I spent some more time refining, I could probably write my function more eloquently, but for the purposes of this question it is sufficient to reveal (to me at least) some of the fringe cases. I found in my development and testing that it was important to test against: 

Once the pattern extracts the desired set of words, the handling is quite simple. Code: (Demo with a battery of $needles) 

Upon reading your posted solution, it seems you want to have the flexibility to modify the number of leading and trailing words around the needle. This ramps up pattern complexity, but I think I managed to pull it off. Code: (Demo) 

I guess I should also point out that your function makes a few assumptions about the data being passed to it. There are a few ways to elicit Notices/Warnings from this function by passing an uncooperative array of data or grouping value. This may be a "tinfoil hat" observation for the scope of your question, but I thought I'd acknowledge it. Generally, it looks likes a good cover-all function for the many StackOverflow questions that seek what this function can provide. p.s. In a previous comment that I have since deleted, I suggested replacing with another function. This was before I fully understood what this function was doing. I toyed with an approach that used , but there was no advantage. is sure to be the most efficient way to modify the subarray (when necessary). 

When you want to loop through all elements in an array, you can use to avoid counting the array size as well as declaring and incrementing a "counter". 

Using your lowercase, alphabetized , when you want to find "whole" matches, you merely search the column with the operator. 

PHP Demo I've prepared a regex pattern comparison to display the efficiency gains (in terms of steps). Note, I had to slightly modify your pattern and my recommended pattern to prevent unintended newline matching within the negated character classes. I have used the same 8 test strings as in my php demo. My pattern: 83 steps Demo OP's pattern: 145 steps Demo 

Effectively, I've changed the pattern to "pile up" the "non-ellipsis" words into a single capture group. Beyond that, the method remains mostly unchanged. *note in this second, more dynamic method, you may need to replace white-space characters that were not replaced by my gluing action (the piled up substrings). 

Using a switch block is an advantageous design because you are evaluating just once. I think the only aspect of your code worth refining is the repeated parts. It just isn't as D.R.Y. (Don't Repeat Yourself) as it could be. I recommend pulling all of those portions out of the switch block and running a single after the switch block to handle all disqualified cases. Notice that you will need to slightly tweak the expressions to maintain accuracy. Something like this: 

Xiaoy312's suggestion is one of the common methods used to generate comma-separated placeholder strings. It generates an array containing valued elements, then joins them into a string using commas as glue. Another common method is: 

This regex-based approach enjoys replacement limiting and only uses one set of short echo tags. However as a general rule (of mine anyhow), regex functions should only be used when other functions fail to offer a reasonably succinct equivalent. For this reason, I see no justification to use versus to achieve the same resultant array. 

Selecting the "best" method in this case is likely going to come down to personal preference. If you wish to use a condition-less one-liner, then insertusernamehere's offering is brief/elegant. However, it is not instantly comprehensible for the next developer. 

You can avoid repeating whole blocks of code by isolating the dynamic components of your function and assign them to an array. Then as you wish to modify the fields/columns to be checked, you merely need to update the array and not the functional/checking parts. 

Regex Demo Link This will reconstruct the full name strings with optional suffixes including , , and Roman numerals from 1 to 13 (that should be sufficient). Pattern Breakdown: 

On huge arrays, statistics have shown out performs but that would certainly be less beautiful and if you were dealing with big array I'm sure you would have mentioned that. 

PHP already has a native function for this task. traverses your "leaf nodes" for you in one step: Code: (Demo) 

Alternatively, if you are seeking pattern accuracy with fewest function calls here is something new to consider: Code #2: (Demo) 

Assuming your actual project arrays will be a relatively small size (like your posted input arrays), there is going to be an unnoticeable margin of speed between the many ways that this can be done. Here is a method that doesn't use a loop or . The else portion of my function could have been condensed into a one-liner, but I've declared to make it easier to read. Code: (Demo) 

p.s. I don't like to bounce in and out of php tags ( and ) over and over because I think it looks messy. Since my snippet spends the majority of its time using php, I just stay in it. 

I didn't test my code (and I have no prior experience with ) but this is theoretically what I had in mind to return the "guts" of the table from the function: 

I personally find switch statements to be too clunky/verbose with the ing. While it is nice that it only evaluates once, that is of very little benefit in your tiny use case. 

First, I'll offer three more methods that will provide the same/desired output, then explain some pros/cons: Input: 

All that said, Félix's recommendation about checking for keys is advisable to avoid receiving a Notice about trying to access an element by a non-existent key. I am certainly not against modifying variables by reference, but some developers discourage it. If you are handling small arrays, then your posted method that iterates the entire array will not cause any noticeable impact on performance. If you are handling a much larger array, and cannot sort the data more eloquently during an earlier process in your code, then you may or may not receive improved performance (I didn't do any benchmarking) with this: