Because you can correctly estimate the effects of this decision? 1997 an employee decided to write an open-source network sniffer, because he wanted something better than tcpview. Do you think he wasted company-resources, when he created the predecessor of Wireshark? The fact is that this framework will be under control of the company and developed in a direction that is useful for the company, while this is not true for any other framework out there. You have stated the facts - that it takes time and money to use the framework. You have made sure that he knows this. That's as far as your responsibility goes and any step further is a bad decision. 

If I would be on the receiving HR side, I would wonder why you would carbon copy your old boss the application, if he is not going to be your new boss. I would likely view this as an attempt to receive an unfair advantage over other candidates - and there is no guarantee that your new boss likes your old boss. If you CC: the email and it gets forwarded, the new boss will see the CC:, too. If you send it to HR and BCC: your old boss and your mail to your old boss gets forwarded, too, for one reason or the other, it shows that you deliberately tried to hide the fact that you informed your old boss. This might be viewed even more negatively. So to sum it up: Neither CC: nor BCC: provides any benefit over forwarding. The best option which grants all benefits without any disadvantages is to first send the application only to HR. Then forward it your old boss to 'just let him know that you applied'. This way your actions cannot appear in a negative light. 

The important part is the "required to carry out the terms of this Agreement". What does this mean? Example: You create a product. The company files a patent for your work. Your contract then terminates. The company can't get the patent without your support, if you don't provide further patent details. But getting the patent was point of the employment agreement. So you are required to review the patent documentation and to make the oath required, as the product was created during your employment and the patenting process was part of your job, the task just got delayed. Is such a clause common practice? No, most people will likely not have this in their contract. The clause is only required if there is a fair chance you create something during your employment, but the company can't reap the benefits immediately due to external constraints, f.e. the time it takes for a patent to become a patent. You should check if this is the case for your kind of employment. 

Part of the ISO 9000 / 9001 quality management is the evaluation of contractors. This comes down to keeping reliable contractors and replacing unreliable ones. This also means to take the results of those evaluation serious when choosing one for the next project. Just always picking the cheapest one is not the desired strategy. Yes, this actually does take time and effort at the end of each project. A contract will not turn a dishonest partner into a honest one, no matter what terms you write in there. 

You are not asking for an increase. During the interviews, you have realized that the job requirements and expectations from the company are higher than you first estimated, and that, although you are convinced that you will have no problem to satisfy these, your first mentioned salary expectation is slightly off and that a proper compensation would be around $XX,000 + X. 

If you want to stay employed, a good tactic is usually to make your superiors happy. They told you they are not happy and that they would be more happy if you stepped down. If there is any way you should spin the story, than in the way that you have (also) realized that it is better for the company that you step down. It is also a good idea to start the performance review by stating this first. Your superior will be in a stressful situation, too, and eliminating the stress will make him feel good about you. Also, the performance review might be about the termination of your contract, too, so it would be bad to wait till it was spoken out, because usually then there is no way to remedy the situation. There does not seem any advantage for you from combining the topic of stepping down with your employment future. 

In any situation where you have to make a decision, but can't estimate the probability of a certain result, it is helpful to create a matrix. You write down the actions you can do (tell the truth, not tell the truth) as row, then what you don't control as column and in the fields the consequences and benefits. Then you pick the row that looks the best, which means choosing the best looking interval of results and accepting it as fate / good / bad luck that any of them can come true. If you do this with your problem (tell the truth, not tell the truth, they find out, they don't find out, ...), you will see that there is one row with guaranteed success - you don't tell the truth and they don't find out. The worst consequence of this row in all columns is that you don't get the job. This worst consequence is also the worst consequence of the other row, telling the truth. So by not telling the truth, you can have a guaranteed success without increasing the impact of the worst consequence at all. From a purely logical point of view, not telling the truth is the only way to guarantee the job. The possibility to not get the job or lose the job in the future is part of the interval anyway, no matter what you do. This approach does not take morals into account. If you feel bad about questionable actions, it is usually best to honor your own morals and accept the consequences. 

Why would you want to say that you are employed when you are not? People who have shown that they can successfully run a business or work as freelancer are usually more valued than peons, who are viewed to only be able to follow orders. One reasonable reason to give up self-employment is the time and effort to keep up with the legal and administrative overhead of self-employment, when all you want to do is tech stuff. 

I have no specific knowledge about Australian discrimination laws, but I don't think they work the way you want. At best, you could refuse to clean bathrooms at all due to the fact that male waiters don't have to do this. But there is no way to just exclude male bathrooms from your work. 

As far as I see the situation, there are two distinct issues. a) Tasks not being finished in time, because the person is actually not available. b) Result passing formal verification (result does what specification says), but failing the validation (result does not meet expectation of the requester) For a), you could talk with your superior about the task handling during absence. Not specifically related to this incident, but overall. You can bring up the issue that tasks are assigned to persons who are not available and use that incident as neutral example. There needs to be a process to handle this situation. For b), the solution is more complex. Results not satisfying the expectations is one of the common problems all the time. Whole development methods were invented just to reduce the effects of this problem. A specification should also contain a use-case. If you understand the intent of a change, it's much easier to validate that your change meets the intention of the change, not just follows a technical specification. So you could propose that a change request always also includes a use-case and is denied otherwise. Again, you can use the incident as example, when you talk to your superior, but the incident or one of the persons is not the problem and should not be portrayed that way. 

That's right. Nobody cares about deadlines, when they are artificial. A time frame is also not the right tool to increase productivity. How to stop people from not working, when they should? Tell them. They get paid for working. Working 14 years on Duke Nukem might basically be worth an award, too, but most startups can't afford that. If you have a milestone and a list of tasks up, you can flat out tell them the truth that when milestone 1 is not met, the company has no more money and basically no chance to get more money, because there is nothing to show investors, which means termination of most contracts. Of course, this approach needs to be coordinated with and approved by your boss. But it is the best way to teach what it means when people don't work - that it's not about you being a party pooper, but that people will lose their job in the end. 

This is company knowledge. If nobody else sees a problem and asks for your input, you have to shut up. If they ask you about the problem, you are not allowed to tell that your old company has a working solution, you are allowed to tell them that you have the skill to come up with a solution. If you created the solution using answers from Stack Overflow and your skill, you can still use that knowledge to create the great solution. If the solution required specific research and therefore knowledge that only the other company and the participants of the research have, then you need to find another solution. 

♫ Let it go! Let it go! ♫ Seriously, you can't train experience. And you can't and shouldn't push people to do stuff they don't like - they will do it, but will suck at it. It takes passion to be great. Even an architecture is not cast in stone, it's just painful to change. If he is brilliant, he will learn fast, but real understanding doesn't hit you until your first architecture lets you end up in a dead end situation in 2-3 years. 

The problem of your friend is not the bully. The problem of your friend are the supervisors. I would wait till Monday and complain about my direct supervisor that he seems to be unable to create a stable peaceful working environment which the latest incident merely proves. Putting the focus on the bully will not solve the problem. Put the focus on your direct supervisor and his duty as supervisor and man to protect you. 

I hate to say it but it is his company. Your emotional attachment is remarkable, but does not change this. The owner of a car is the owner of the car even if he has no driving license and you have become a full-time chauffeur. As the one controlling the car you might feel that you are doing the major and most important work, but this is a fairly comfortable position to argue from if you sit in a car that you didn't have to pay for. Your claim that he "only does marketing and fundraising" indicates that you might have no idea how difficult it is to get money for a mere promise of it being a good investment. People with great technical skills are a dime a dozen. 

Beginner Knows what it is and can write a HTML document that is displayed by a browser. Intermediate Knows about W3C conformance and validation. Knows most HTML tags. Is not confused when two browsers display the same page differently. Knows about character encoding. Expert Knows about common browser quirks and their solutions. Knows to properly differentiate HTML 4 and HTML 5. Knows how to avoid deprecated or disadvantageous HTML tags. Knows about relevant meta-tags besides "charset". Can optimize HTML for accessibility. 

Well, if you do get a (paid) day off after shipment, I don't see a problem. As you mentioned in the comment, you can compensate by leaving early, too. So you are not really working for free, you are merely shifting the hours to different calendar times. 

Let me add a different viewpoint: Imagine the auditor asks you a question about your workplace, where you know that the honest answer would have negative consequences for the audit - maybe not a total failure, but an earlier re-audit. Would you want to be put in a situation where you have to make an ethical decision about the value of honesty? 

If they hire people by mail and phone and you didn't have to hand in a formal application, then this should be okay. The deal is done, you are one of them now and people use post-its there likely, too. 

The question is not quite clear whether you are looking for a polite way to tell your co-workers and superiors what you told us or whether you are looking for a more technical solution. It's very unlikely that nobody knows that a team of 5 was reduced to 1 and nobody blamed you for being late, so I think there is no reason for the social approach yet. And as you say it's an internal project, it's likely support and sales isn't going to kill you if your estimations are not that good. How to deal with the situation: Divide and Conquer. First group all bugs into two or three chunks: Those likely within the code you are familiar with, those in code you are not familiar with and maybe those, where you don't see any chance of being able to fix the bug within a decent time. Then group the bugs by how easy they are to reproduce. Is the bug reproducible without problems? Is it a bug that occurs once every three weeks? Then estimate the required time per group per bug. For example, an easily reproducible bug in your own code should be fixed in a day and if you have 30 of these, you can estimate it will take 30 days. Maybe one bug takes three days for a bigger rewrite, but on other days you can fix two bugs per day. It will even out. Finally sort the list by bug priority. Send your project manager and the testers the list, telling them that this is your roadmap and that the "can't do" bugs won't be fixed, unless specifically requested by the project manager. Then start working on the bugs, keep track how much time you actually need per group, update your estimations and the roadmap once per month and you should be good to go. Anyone with real objections will let you know. 

The answer to your question is either part of your contract or part of a law and if it is neither, then this is an answer, too, because it means "anything goes", which usually means the company will pick what is best for them. It's safe to assume the worst. In order to find out if it's part of your contract, you need to read the contract. In order to find out if it's part of a law, you need to ask a lawyer specialized in employment rights. All other options will include a level of uncertainty. 

Yes, the technique is called "keeping the minutes". You write down the results of a formal or informal meeting and then send a copy to the participants, so they can comment or update it. If there is a change, you again write it down with the consequences. The purpose of the protocol is not to blame people, but to make decisions and consequences visible and recoverable. So, the first protocol can state: "Decision manager A: We paint the wall blue." The second protocol can state: "The decision to paint the wall blue was changed by manager A to painting the wall red. The expected additional costs of 20 hours repainting the blue wall are accepted." It is also not really your concern why manager A wants to have the wall red now, instead of blue. A manager who changes his/her opinion all the time and causes damage is a problem of his/her superior, not your problem. 

The guaranteed minimum standard for a worker in every country in the European Union (not Europe! Do not mix this up!) is: 

Well, I would behave the same way. Your expectations are your problem. Did you ask me how long it takes and did you actually give me enough information to make a reasonable guess? And was my estimation unreasonable? For example, when I say a task takes 1.5 months, someone will say:"That's too long! Look at the calendar! You need to finish this faster!" Then I say:"Okay, well, I think I can do each object in 1.5 days, 1 day coding and 1/2 a day testing. How does this sound?" "That's perfect." "Great. Well, according to the specification I have to code 22 objects." "Ohhh..." Your real problem is that you don't know if he actually under-performs. There are people who can't be bothered to write a single comment and there are people who actually write and maintain documentation for their code. There are people who don't mind to check something into the repository that breaks the build for 30 developers and there are people who review their code before checking it in to even eliminate unnecessary whitespace changes, as they only want to commit what is absolutely necessary. There are people who test their implementation before testers get their hands on it and there are people who are satisfied when the implementation doesn't obviously break and for everything else, well, there are testers. No idea who the under-performer in these scenarios is but just being a different kind of developer can easily double the theoretically required time for finishing a task.