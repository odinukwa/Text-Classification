My one comment is add a comment on exactly what it is doing. Even after studying I am not 100% sure what it does (I would need some unit tests to feel I understood it). What I think you are trying to achieve: 

Even after removing all the chaff the above line is still unreadable. Split it up into multiple statements and use temporaries. This way you can comment on what is happening. Its not as if a single line is more efficient. The compiler is going to remove any unused temporaries. 

If we look at the GetLock. I would not passes pointers as parameters. This means people can accidentally pass a and thus cause your code to break. Always pass by reference if you have to have parameter there. 

When the object goes out of scope the destructor is called. This will close the file which will flush the content of the buffers first. 

Iterator does not seem to support which is a requirement of the iterator concept. Personally I don't like the leading '_' you put on your private members. If this is short hand to indicate they are private it just means you are not using descriptive enough names to describe your methods. The whole point in writing complex code is that the functions should be self descriptive. 

Where each call to getaline() means the result of the last call is leaked. Your line doe not contain a new line. So when you print it, it may be a good idea to add the new line back 

To go along with forwardign you probably want two versions of on that takes values by reference/value one that takes r-value references: 

Technically this is creating a temporary object then calling the copy constructor of to copy the temporary object then destroying the temporary object. Fortunately most compilers will spot this and optimize out the copy and destruction and just create your object. But this is simpler to declare as: 

Create should just be a constructor. Sure you can have a function. But to use this it should be a method otherwise you need a member to call it. 

You seem to be making all your objects publicly accessible. This does not help encapsulation. You should make all your data members private by default. Then provide methods (which are verbs) that act on the object. 

In the main loop you add overwriten the current values with just the IP address I would not consider this good practice (though it works here because of the simplicity of the program). And since your next step is to convert the array into a hash why not do so directly in the loop. 

You can use global read only variables to define constants but that's the only good use of a global. You should wrap your variables inside one ore more classes so you can control access to them. An array of 1 character strings!! 

What are you returning me here? What is the interface to the object I am getting back. Is it an iterator a reference to the object inside the container. Its not obvious to me what the behavior of the return value should be. 

That's it. Complexity now O(n). Range You don't address the problem with range. Thee Fibonacci sequence generates numbers that exceed 64 bits in less than 100 iterations. You don't address this in your code. Now if we look at the problem statement we modulus everything by . So we only need the part of number below and thus overflow does not matter. Now you are thinking I am saying it is a problem but then I say its not a problem. What gives. The problem is that this is not expressed in the code. Somebody reading the code at a later time is going to say this is wrong because you overflow the integers. What you need to to do is explain what you are doing in the code so that a reader knows that overflow is not an issue. 

Thanks. But I can read the code. I don't need a comment to tell me that. Too many comments is a real problem. Because the code can become out of sync with the comments then what does the maintainer do? Does he believe the comments and fix the code to make them align with the comments. What happens if the code was changed because there was a subtle bug? Reserve comments to describe what you are trying to achieve. NOT how you are achieving it (the code is a description of how). The comments should by WHY (and potentially the goal). Why is this in the middle of the loop? 

We have the abstract concept of iterator to allow users to search or move through containers. Don't provide them with implementation details in the public interface as this locks you to using the implementation forever. 

Either use something from the standard library or create your own class. But your business logic and your resource management code should be completely separate. See: Separation of Concerns. Also doing it this way is not exception safe (which would matter a lot more in a larger program). Encapsulation is your friend. I would put the BF interpreter into its own class. Then it is much easier to think about (you can put initialization in one place (constructor)). Destructor can hold the tidy up etc. 

First: Crappy indentation makes it hard to read. Your algorithm seems unnecessarily complicated. Why not work out how many items you want to serialize and just serialize those items. 

When using integer it makes absolutely no difference. But when you are using user defined types (like iterators) it can. The default implementation of an iterator the prefix increment is more efficient than the postfix version. Also you want to write your code so that it is type agnostic. If during maintenance you decide to change a type you should not also have to run through the code making sure that you are doing things the most efficient way (that should be automatic; just change the type). As a result it is preferable to train yourself to always use the prefix increment (make it a habit). That way you will always be using the most efficient version of increment no matter what the type and situation. Default Constructing V You fixed the bug in you access operator . But you have done so in a way that means your type must be default constructable. 

They are used to set up the connection. But are not used after that point. So not really much point in keeping them as members. Initializer List 

Prefer to use pre-increment. It makes very littel difference in this context (so I am not bashing you for this exact usage). But it does make a tiny difference and if used in the wrong place can cause a difference. So since the pre-increment achieves the same result and is optimal prefer to use this one as in the long run it will pay off. 

To use this you need to know to get that you need to extract (or get) state from the enemy. Which exposes your code to being abused. Better to pass a reference to the enemy and let you and the enemy talk directly. 

This is OK but unusual: . I would normally expect . That is a most complicated expression you are trying to evaluate in one line. 

Is the object allocated dynamically? Is your function taking ownership and will release the object when it is finished. Is your object going to take shared ownership of the object (if so when does it release its claim on ownership) how do I know its safe to delete this resource if you are keeping a copy? Look up Smart pointers and ownership symantics. 

Major problem: You are breaking the rule of three(five). Your class contains a RAW pointer. This means you need to override Copy Constructor/Assignment operator/Destructor. You missed the assignment operator. 

Comments on code Header file inclusion. Go from most specific to most general. This helps you avoid situations where you include header files in one header files that hide the fact that you missed the inclusion in another header file. 

But do you really care if you count all the characters. I would not (unless there are some serious space constraints). You can just count all the characters. When you print them out you just print the ones you want. 

I'll review more later but a basic comment first. Rather than write just the class I would also write the class that internally has a . 

It is really vulnerable to breakage when your code is modified later (say this part of the code is tucked into a function called and d is passed as a parameter). Personally I would define this as a vector and use the size method. 

I would encapsulate them in a Tournament manager class. The tournament takes two combatents as parameters in the constructor (passed by reference). Then You have one method called commense() the others are private (and you don't need to pass the anything around (as they are members of the Tournament). 

There is no year 0 in the Gregorian calender. It goes from -1 (or 1 BC) to 1 (or 1 AD). Also I would not go back that far. Limit your application to years above 1900. Before that it gets very complicated and actually depends on what country you are in. Or (assuming this is just a school project) you can make the assumption we used the Gregorian all the way back to pre-history. Remove Repeated code. Replaece repeated code with a function call. 

No reason to be able to get the unit!. You need it because of the way you implemented check_type(). But you are leaking your abstraction here. Prefer to change check_type(). The other reason to leak this is for streaming purposes, but a better solution would be to implement a print method. OK. Self modification. 

Either you have some other requirement that is not ASCII (very possible), you want 'a'/'A' to map to some non zero number or you have a bug. But it is hard to tell with the way you have written your code as the literal values 93 and 61 have no real meaning. 

Design You can make the list easier to write if you use a object (look it up). There are plenty of examples here in code review. Code Review This works fine as long as your data type is simple (like int) 

Also if they are already defined is it OK to continue? Do you think everybody has the same definition as you. If either of these is already defined I would error out rather than continue. 

Absolute fail. The indention suggests that we return when (diff > 0) but the code is not going to do that, as only the first statement after the belongs to the if block. Always prefer to use statement blocks after control structures. Even if they are one liners (some people still use multi-line macro's that will break your code if you don't place it in '{' '}' 

It makes it hard to understand what you are doing when you subtract integer literals from character codes. I would normally expect some form of value that conveys some meaning. For example lets assume ASCII (You probably want your keyboard thing but I don't know the appropriate macro). 

The you must be using a pre C++11 compiler or a compiler that has a bug (or the bug in your code I pointed to above is causing you problems). 

This is not the elapsed time. The tv_usec loops every second so you need to this to tv_sec to get the actual time value. 

Thread start-up and avoiding busy loops In your thread phase you basically have a busy wait. if is false then the loop repeats very quickly without releasing the processor for other threads. I bet this shoots your CPU utilization to 100% very quickly if you do anything before calling on the . There are two solutions to this 

Sure. Always good to have a print function. But rather than fix it with pass the stream as a parameter. The default can always be 

This pragma is basically useless as it is non portable. Use the appropriate include guards unless you want to be locked into your current compiler only. Not sure why you need to make isVisitied a member. 

Const Correctness If a method is retrieving data but not altering the object. Then you should mark the function is . Thus if you pass the object as a const object you can still call methods that are marked const. 

I don't like having to create a seprately and then pass that manually to the logger. I would wrap this up a bit: class Logger; 

Note. When they return -1 (error) the actual error is in the variable and not all errors are unrecoverable (see [EINTR]). How I would use write 

Double initialization of your array. First time with constructor. Second time with assignment operator. Its fine for POD classes but anything that manages its own memory this is excessively expensive. This looks like it will fail. 

Design Usually thread pools are created with a fixed number of threads. Jobs are added to a queue. When a thread becomes available it pulls a job from the queue or waits on a condition variable until a job is available. I dislike the design of adding threads. As this could spawn lots of threads when there is a sudden high workload that are never released. Threads are expensive resources to create. Also creating many threads does not mean more parallelism (it just means more swapping). A machine usually has an upper bound of available parallelism allocating more threads than this is usually counter productive). 

But we don't want to copy all the memebers. We want to move them. And there is an algorithm for that: 

Also one per line. So I can quickly see then. Note these are context aware commands and apply to the closest inclosing scope. Which is desirable (ie you don't need to do it for the whole file). This does not help in a move: 

The current version leaks memory and is not exception safe. Look up the copy and swap idiom. That will solve our problems. Push is not exception safe 

Complexity The main issue with your application is the calculation of the "Fibonacci" number. Here you are looping over the range . Each time you are calling it recalculates the Fib values from scratch. 

Another thing pointed out in the comments is that all these jobs set to . This seems like a waste as this will be done by each thread (ie times). An alternative is to set to in one job and then add jobs that did nothing. This would have worked just as well and not have been wasteful in attaining the lock for each thread. Initially this may seem true but this argument means you are thinking serially about the code. Once the job is picked up by a thread it may be unscheduled at the hardware/OS level and a bunch of other threads are then executed (so potentially all the do nothing jobs may finish executing before the job to set to even starts executing (even if it is pulled from the job queue first). So because we can not guarantee that any particular job will finish before any other job. They must all set finished to true (or be forced to wait at some barrier). You are accessing mutable state without locking it: 

With this code your most significant bit is at location 0. This gives you no room to expand the number. Put the least significant bit at 0 and the more significant bits at higher locations. This will make it easier to do the standard maths operations in the long run. This looks like a switch: 

If there is a possibility of NULL then yes, otherwise return a reference. Here you are adding a child: 

Try not to declare multiple variables on a single line (Every coding standard I have seen will hit you on this). There are also some corner cases with pointers that are not so obvious thus best to just avoid them. 

Not sure I have seen this functionality in a list before. It seems to allow you to move the head around inside the list. 

Hide your implementation details by using local typedefs. Also it is more traditional to just call the method to get a const iterator rather than etc. 

Really. Please name them. How are you measuring that? Not convinced that it is actually significantly faster because of all the extra comparisons you are doing. But for certain types of trees it could be faster as you don't need to maintain a stack object. What you are doing is trading space for time (a common optimization). You are adding a parent pointer into each node to help you do the traversal more quickly. The other two techniques require you to build and maintain a stack (the state of the search (one explicitly and one implicitly in the call stack)) while the walk the edge has the information you need built into the graph.