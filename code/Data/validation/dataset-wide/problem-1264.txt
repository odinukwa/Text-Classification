You could use tuples to pair your flags with an . Throw those into a and then perform a and then a on that . Here is how that would look: 

I added four new containers to the class (, , , ) to avoid recomputing them with each call to . now generates a single for each check instead of a of them. This is done with the method which returns if all values in the container are when evaluated by being . Lastly, the expression in can be replaced with a comparison operator. 

From the POV of operations performed they're unequivalent. is defined from the result of a pattern match that discards the tail of the list. as you know is the result of the invocation of the method. (I suppose it could be the case that the compiler is smart enough to translate a pattern match on a list that only takes the head of the list into an invocation of the head method, but lets just ignore that for now :^) And a final example: 

If we can remove your calls to we should see a nice reduction in the run time of your loops. But, why can we remove this you ask? Consider: 

The above loop occurs as the inner-most loop of both loops and . With each iteration you check that isn't equivalent to 7 other possible key values. 6 of these key values occur in the data you've presented and the 7th () doesn't. It should be more efficient to replace: 

In Scala the pattern is an expression, which means we can use it to return a value (similar to Java's or C++'s ternary operator). You don't have to change much in order to take advantage of this: 

I haven't tested it, but option one or two (or some slight variation of them) will mirror the functionality you have in your code while also being easier to write and read. 

Code Below is another interpretation of how you might write your code. I've separated all your original parts into a set of case classes and one trait. For example, is now called and it extends the trait. I imagine you were aware of it, but was essentially a Caesar cipher. Likewise, all the logic you had embedded in the rest of your program, particularly how you were dealing with the the string and the function resulted in something close to a Vigenere cipher. In order to align the with the input text I choose to utilize a method on the list class, , which works as follows: 

Here , , , and are assigned the expected character values and is a list consisting of the characters through . If I've misunderstood what your asking for please let me know and I'll update this accordingly. 

It seems to me that your general approach is solid. One small change I noticed you could make would be to move the declarations outside of the functions and . The reason for doing this is that it is expensive to compile the with every call to these functions. By moving them out we only construct them once. This is supported by the Scala Regex documentation which can be read here. 

My current assumption is that the string returned by is going to look something like If this is the case then you can try the following function: 

When calculating the length of an iterator we can do so without creating a list and then immediately throwing it away. So where you do 

For Euler problem number 17 there is no reason to utilize . At a high level using implies that there are missing values in the domain/codomain of your function. To put it another way, as long as we can trust that will produce an ordered sequence of integers from to we can drop the use of and just focus on the logic of the problem. It is rare as a programmer that we get such an explicit definition of what our program input will be, so we may as well take advantage when we can :) The advantage in this case is being able to not use and thus allowing our code to be much more concise. Below I've coded up a solution to 17. I partially obfuscated the code in case you (or whomever might be reading this) didn't want a direct answer to the question. I can give proper variable and function names if you'd like me to. 

There are at least two ways you can increase the efficiency of your calculation of . So right now you are doing: 

Solution Explanation So first off we drop everything to lowercase and then filter each of the string based on whether it is alphanumeric or a space. We've kept the spaces so that in the next line we may the into an of sub-strings which we then filter based on your length requirement. In the final line we utilize two more collection methods and . If was equal to then would return . then performs the final transformation to get your desired output. 

You can apply to most containers to test if every element in the container satisfies some property. will only evaluate if is true. This type of evaluation is known as short-circuit evaluation. So basically we can use this property to perform the same behavior as the statement in the original code. Notice also that I've used pattern matching to get rid of the . 

Below are some changes I would make to your code. Starting off with I moved euclidean distance inside of this function to reduce function call overhead. Also it was unnecessary to cast and to . The other major change is that I created a function () to load your files into a coordinate vector. Instead of repeating a block of code twice, just make a function out of it. Edit: As another has mentioned it is best to replicate the pattern. The benefit being that you can either execute the entire script or through the use of modules call your functions separately. Hope this helps. 

Also, we can import to get a potential speedup over your lambda function. Here is an example of how works (see docs for more examples): 

Lists vs. Arrays The Scala version of your code ran surprisingly slower because you used a . In Scala you can think of a as a traditional linked-list. s don't provide random access to their contents. That is, accessing an object at index n requires O(n) time. This really slowed down your code because you index into in both your inner and outer for-loop. To fix this problem you can simply use a different data structure like an . 

NAMES Whoops, one more thing. I think I would also rename your class from to or something similar and rename the method from to . That is: 

One of the main changes you'll probably want to make is to change and from functions to values. As your code is right now, every time you use it is having to recompute your top code block. The same goes for . At first glance I don't see a reasonable way to eliminate the conditional statements that you step though to calculate . Because of that, there isn't a great way to utilize pattern matching. So IMO you may as well take advantage of the fact that conditional statements are expressions in Scala. Another small tweak I made in calculating was to change to . Its not so hard to count out ten zeros, but if you needed a larger amount of them you now know about this other method. I added class fields for the other subsections of a typical phone number, e.g. and . Finally I utilized string interpolation for your method as to my mind it makes the expression easier to mentally parse.