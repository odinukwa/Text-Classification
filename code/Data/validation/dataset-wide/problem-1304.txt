Your will get called O(n log n) times. This makes it worth taking a closer look at for optimization. One thing you can do is avoid repeated calls to and and instead preallocate the tmp buffer in the root function call and pass it around or use to allocate the buffer on the stack. 

Don't make member fields const. This creates issues when you go and copy an object. Just drop the const on the fields and instead pass const ref around if something needs a view. You make a very strict statement about indentation (spaces only and 4 at a time) and whitespace. Instead you can follow python's scheme: if new line is longer then prefix must be exactly equal to the previous line's indentation (push current to stack). If shorter then look backwards in the indentation stack until you find a match and pop until that point. Number of indentation tokens is equal to the size of the stack. You don't have any way to express escaped characters in your string literals. Is would also consider adding offsets in the line for each token. Having error into down to the proper token is much easier for the user than only the line. especially when they go for obtuse one-liners. 

The first thing I see is concatenating a string in a loop. This will create a new string every loop. You don't want that. Instead use a StringBuilder: 

for a non-random access iterator this is an operation that is linear with regards to so it's slow for std::list as well. Heapify can be adust to not need to an arbitrary amount by going over the list multiple times: 

Looking at the use case (calling it for every index in an array) it would pay to SIMD the function if your cpu supports double precision vector math (modern cpus almost certainly do). This will mean using intrinsics for the math which will be less clear code but will probably be faster. 

You let the user pass in a but you don't use it. you might as well remove it and declare it as a local variable. 

Comments on every line is just noise, those who can't figure out what each simple line of code does shouldn't be reading it. Instead you can just comment the big blocks: fill array, indexed set and indexed get. In there is no need to set to . As you won't be accessing except to set it again. That for can also be replaced with a memmove (it's a memcpy that allows overlapped copies). assumes the pointers were allocated with malloc and the heap of the and the program are the same. This may not always be the case. 

If you want to return the string then resize it explicitly instead of relying in the implicit construction in the return: 

However as is your implementation isn't thread safe. If the timer is about to trigger then action could still be running. Instead you will want to use a ReaderWriterLock, take a read lock when doing and a write lock when actually loading and unloading. 

naming in solution 2 is rather bad your swap doesn't actually swap but also assigns i to the empty spot first. You should make this explicit: 

PIXI will then batch all those lines into a single buffer and draw it using a single draw Elements command. 

If you provide a destructor you should handle copying and assigning. In other words follow the Rule of 3 (or 5 if you care about move semantics). You can also disallow them but then there should be move constructor and assignment. Otherwise you will get in trouble with double freeing when calling a function . 

Or you can use a second slower timer that doesn't get reset and just runs every so often to purge the list anyway regardless of how long actions have been waiting and how many may still follow. 

First thing, memory leak if you delete ; use a to hold the . Same for the ; use a . There is no need for the contains functions of to take a root for it's first parameter instead use . The vector could be sorted by the letter to allow you to do a binary search for per child, or you can use the char value as index and pre-size the vector to 256 for a lookup per child. 

When implementing the standard collection classes take a look at java.util.AbstractSequentialList. It implements everything based on the and methods. You only need to override the others when you can implement them much more efficiently than what can be done using those two. 

If evaluates to true you never do anything; so hoist it out of the if statements and do an early return: 

This will still create a lot of new partially solved boards but if you add a to then you can reuse the original board and only need to clone it when returning it in the singleton: . 

and so on however given that this is just a POD you can make the fields public and not bother with the accessor methods 

The management of the is not tied to the lifetime of the queue. The buffer is passed in as a char* buffer but the size along with it is in number of Ts it can hold. This can be confusing. Either pass in a T* directly with the number of Ts it can hold or pass the length of the buffer in bytes and then divide with sizeof(T) in the constructor; 

First thing you can do is more descriptive variable names. I know naming things is hard but please don't go so cryptic. Second putting your in "INITIAL VELOCITY LOOP" in a struct will be much clearer and allows you to put the "TARGET VELOCITY LOOP" in a separate function that only returns that struct (without needing to remember the order of the return values). 

Creating new threads each time you need to query is expensive instead create a . You can get one from the static factory methods in Executors. This allows something like: 

You use unsigned as your data storage you should instead use bool, is specialized to use a bit vector for more efficient storage. Initialization of the field can happen in just 2 calls: 

Besides that all your algorithms use the standard comparator. you should let the user supply a comparator (a mapping function for ) for types that don't have a default . 

is a helper function to create the nth power of 10. The big if-else can also be simplified and generalized a bit: 

This saves the normalization of the bisector. The rotation matrix can be constructed from a non-unit quaternion without first normalizing it. You do have to provide your own function to do so because the Qt algorithm assumes a unit quaternion: 

After some research I found that it's slightly more efficient to get the half quaternion directly from the double quaternion: 

First you pass the vector back by pointer which is not recommended, instead just pass it back by value and the compiler will optimize it to a move. Similarly no need to use pointers in tuples to return the data from creation. Also A* and dijkstra are very similar in fact dijkstra is A* where the heuristic function is always 0. So most of the code could be reused. 

Having a print method interacting with the console is not a good idea. What if you want to show the contents in a gui instead? Instead add iterators to be able to inspect what is on the stack without having to capture the output that generates. 

The final while loops can be replaced by either leaving the rest of i2 in place or copying the rest of i1 to the end of the array. A further improvement would be to use moves instead of copies. 

and ... Manual use of new and delete very often leads to leaks. In this case you have a destructor but not any other of the rule of 5 requirements so every List and Node will get double deleted once the queue has been copied once. If instead if you had and hold their values by value there wouldn't be any leak possibility and you could remove the destructor. You can do that because the values of and have referential consistency (the locations remain fixed once they are in the map regardless of what happens to the map). You aren't very consistent with , if you ever update priority of an element you don't update it. Every has 2 copies being stored. once in the node and once as value in the one should be a pointer to the other. Using a unordered_map with T as key requires that it has a sane std::hash and operator==. It's primary purpose seems to be to avoid duplicates in the queue, however it's not uncommon to need duplicate entries in the queue so its purpose is questionable. should take the element by and add should it into the call. you can also reuse the relink function in there: 

This is a bad habit and not one you really want to develop. It leads to various naming conflicts that can be a pain to deal with. Typing every so often isn't that big of a pain. 

This causes you to need to repeat a full scan for every time you need to advance i. This can easily cause the time complexity to rise to O(n^3) for a reverse sorted list. You should have. 

Friend classes are only needed when the other party needs access to internals that it cannot get otherwise. Making Rectangle a of is not needed because has getters for its fields and access use any private data from . 

The temporary buffer is repeatedly allocated and freed. Instead you can preallocate a buffer and pass it through as parameter. Then during the merge you copy the values with push_back, instead you can move from the selected iterator: 

It's not recommended to inherit from Thread. Instead implement Runnable and pass it to a new Thread which you store in a member and provide accesses for what you need. This also lets you pass a for some customization options for the threads used. 

given that you duplicate nearly the whole call you can extract it into a function and add a parameter where it differs:: 

This will give the place of the highest significant digit (1 to 9 results in 1, 10 to 99 results in 2, 100 to 999 results in 3, etc...) 

The only feature you use from is its cancel ability, so you can just declare it as a . Then you can keep the class as a static inner class of . Conversely you can declare as a and also keep as a static inner class. 

Instead of magical macro define a set of generic functions for managing the pool and define the macros to pass the sizeof (as needed) to those functions. In fact you store the sizeof of the type which is all you really need. 

Catch it in controller and make it show a as appropriate. MathOperationList can be a . You can get all operations by getting the array. In there is a regex pattern you split with. It's more efficient to store a static Pattern and reuse that as needed: 

You can put the there instead of the . Speaking of conversion to String; is a much cleaner way of converting a number to a string. Your shuffle isn't a true shuffle, instead use . 

First spacing; a blank line between each line of code is distracting. second each if introduces a new nesting level instead invert the conditino and use early returns: 

first issue: you hardcode as the number of bits per unit: portability says it should be which may be something else on some architectures second issue: both members of int80 are signed, only should be while can be unsigned if you can guarantee that offset is between 0 and 80 then you don't need to test for 0, and just document that exceeding the bounds is undefined behavior 

You force the user code to pass in a vector as the raw data. This is not always how data is read in. Provide an overload that takes in a begin and end pair of char* iterators and forward the vector overload to that. is faster than scanning for a null byte. So consider changing the format to use a prefix length instead of the null terminator. If the format is fixed then you will want to add the values of the enums explicitly. That way they don't depend on the declaration order and it's clear that that the values are chosen for a reason. Exceptions are frankly fine, one thing I see is that you only throw an exception where more data can create a correct parse (either directly or by adding a null terminator). So you can add the remaining unparsed tokens to the last DATA token. That way you can partially parse the data and resume parsing when more data comes in.