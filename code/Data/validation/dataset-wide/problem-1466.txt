In those boilerplate functions, I don't know what "tdx" means. I guess it's linked to the file specification you use. Those functions are the main problem I have with your code. You mixed the module with the class. Those four methods are methods of the module, not the class! I think you should: 

You could also do this check using AJAX, which would save an extra roundtrip. Of course, leave it in there too: your web site should also work when users don't have JavaScript enabled for whatever reason. 

Did you consider making this a REST API? Read more about The Good, the Bad, and the Ugly of REST APIs and REST APIs must be hypertext-driven from the creator of REST (this is one is a bit special, no need to follow it). Aslo try explaning how your API is better. Perhaps that's obvious, but it would still be good to explain it a few points for someone just stopping by and wondering if he should use it or not. Anyway, here are my observations. Feel free to discard them whenever you don't agree. I'd be glad to discuss in the comments: 

If you only expect one result, the is not necessary. Also, be wary in general not to mix SQL and HTML: different parts of your application should be responsible for querying the database and printing the output. However, for such a small script, it's OK. 

The threshold activation function is not very good, consider using at least a sigmoid or a ReLU (very easy to implement, works very well in practice). But it will only matter when you will start thinking about backpropagation. 

Be careful about indentation and follow PEP8 closely (eg. using a PEP 8 checker). Here you need a space after the , it makes the whole code easier to read and allows everyone to focus on the important matters. 

This should work, and there's no reason to change if you validated that it does work with tests. However it would be more Pythonic to actually try saving (without ), then catching the resulting django.db.IntegrityError exception. See EAFP to understand why this is more Pythonic. The happy path will be faster too since you only need to call the database once. 

This is interesting. You could think of it as the canonical data structure that you want to pass around, using a standard name, instead of sending specifically and . 

Feel free to organize the different models into different files if your current file is going to continue growing. Add a docstring to the module (your existing docstrings in classes and methods are great). Get more confident and keep up the good job! ^_^ 

You don't need to return the new as it is passed by reference. Now that your function is a one-liner, you might as well use the one-liner directly. Multi-valued attributes Note that the above code doesn't work! is a multi-valued attribute in HTML4 and HTML5, so at least BeautifulSoup 4 returns a list instead of a string. The correct code becomes: 

Can I ask why you're trying to do this? If this is homework or a way to "practice Java/Object-Oriented programming", please say so. If it's a real question, the best way to represent XPath input is actually a string. XPath is way more complicated than what you've (XPath 2.0 even more so), and you would need a lot of more work to model this properly. If it's a subset of XPAth, then what subset? Edit: A few examples. 

You can use directly the instead of this combination of rand and count, but this comment on the documentation says that it is not too random, so you can keep your code like this. More generally, always try to make use of the standard library in PHP which offers a number of useful functions. 

Note that Tkinter is not considered a very nice Python library anymore, but I don't know what is the recommended one nowadays. Please rewrite your code considering what I have said already, and maybe resubmit the result on Code Review when it's done. 

Typo! To avoid this, you should use a variable: or and . Any typo will then be catched by Python when running the program. The uppercase is just a convention to say it's a constant. Unfortunately Python enums will only be usable in Python 3.4 which is will only be available in three weeks. And Python 3 is incompatible with Python 2, so it may not be practical to switch. Exceptions 

It's OK to use , reimplementing it yourself won't save time, especially since the Python version is possibly faster if it's written in C. It's possible to be more concise and clearer though: . You should use a list of list to represent a matrix, not a list of dictionaries. As points out, is enough to populate . However if you're not familiar with list comprehensions and map, it's OK to use normal loops. Python doesn't really have constants, but a convention is to do and then use everywher, denoting that it is a constant ("verti" is not a good name, by the way, "vertical" is better. Use code completion.) is bad practice, you need to catch specific exceptions ( in this case). And you need to understand why those errors are thrown! This could be a bug in your code. 

Why don't you read the index from $URL$ and use that to decide which files you want to download? Also, try to give multiple files (eg. 20) to each call: this will enable curl to reuse the same connection for those files. Please also note that Matlab is not the right tool for this job. For example, this would be easier in Python which has many libraries to perform HTTP requests. 

Make sure to use : your code will be more easily ported to another platform and you won't have to use those nasty double slashes. Lastly, you seem to be confused about exceptions, so let me explain a little bit. How exceptions work Think of try/except as another way to express your error-handling logic. It is generally more useful when the error is considered as "exceptional" and won't happen often. In Python we prefer to go a bit further than that: it's often easier to ask for forgiveness than permission (EAFP). So, to answer your question: no, that's not how exceptions work. 

More generally, make sure you comment the intent of the code since readers of your code might see the code but not the example files. 

? What does this mean? Also, this shows that you're completely mixing your interface with the crawling. It's fine here, but for a larger program you would want to separate concerns: first retrieve the data structure, and then show it to your user. A number of design patterns exist for this, one example being MVC in web applications. Using a better GUI framework (other than tkinter) would probably make this easier, but I don't know any good GUI framework in Python (maybe some exist though). 

Your issue is probably not a commonly occurring one. More specifically, it probably hasn't occurred enough for someone to notice an useful pattern. I did have this issue once(!) at school, and the solution we opted for back then was way more complicated than what you have right now. (For example, we implemented flocking behavior in this Python code). It's still possible that you'll use some design patterns in the solution. One can argue that a "rule-based system" is a design pattern. Rule-based systems are certainly used extensively in many fields with the same semantics. It also allows you to decouple the different rules since they are in their own class. In a sense, you used a design pattern here. Also note that design patterns don't aim for code conciseness. For example, the Composite pattern involves using a lot of new classes. It does make the code better when properly used, though. Trying to get below 150 lines would probably involve using less classes, and would make your code harder to extend. Code comments 

Style The first thing to do is to follow PEP 8: it's a style guide that says how you should indent your code, name your variables, and so on. For example, prefer to . Files Opening files in Python should be done using the idiom: your file is then guaranteed to be close correctly. now becomes: 

You're doing a copy in most of those snippets: if it was possible to do without a copy, it could be faster. Libraries such as Boost often offer two version a specific function: one which copies and another one which modifies in place. is enough, you don't need : 

I'm not sure about the exact complexity, but it is certainly huge! One-letter edits are fine to spell check one word given a large dictionary, but does not work if you only have a few words and the edit distance can be arbitrarily large. To look for close words in the dictionary, you should use the Levenshtein distance, as mentioned by ratchet freak. (Implementing the Levenshtein distance is a good idea.) 

Think what you want about the clarity of , but those two functions complicate the code (I need to lookup what they do), while and are standard and more likely to be known by other developers. 

Using enumerate() was also an option which avoids you to maintain state in the variable and instead use . There are also smarter options like using futures in threads to ensure you're not operating on more than two repositories at once, say. 

It's up to you to see if you find it more easy to read. I'm afraid I can't help much with the way you use verlet integration. Last comment: Try to avoid passing the key events around too much, or try to be more 'semantic', eg. send to instead of . 

the expected and actual values, which lets you easily find out if it's the call with 1, 2, 2 or 0, 1, 2 that failed; the test name (doesn't seem to help much here, but would help if you called your helper function from multiple tests.) 

What I would do is having a processing thread and an uploading thread: you could the first one, but not the other one.