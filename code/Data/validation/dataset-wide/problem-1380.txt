No. That is very bad JavaScript practice. The better way to do it would be to write it like a normal for loop: 

You should use this same principle here for your function so you aren't being so repetitive there either. 

This line is getting the data attribute of the element ("data-xl", "data-s" ...) and setting it to . The reason why is set in the conditional is so that the method does not have to be called again if the conditional passes and the new attribute is being set. 

Your constructor for is really long and confusing. Even though you have to do all this GUI creation, you can still group things together to make things more readable. Also, you should be able to split some things up as different methods that are called by this constructor. 

with the number . Well, the filter is not null so that is false, and the filter is always going to say no to any input, so that is also false. This conditional does not, and we loop again to the last element: . now holds because of: 

This function has it's own scope, so you don't need to worry about other functions using the variables and and messing up your code. These should be renamed to and respectively. 

In the beginning of your code where you delcare your and functions, I recommend that you put the parameter names along with their type. If your code were to be longer, it would make quickly glancing at your code easier as the code already shows at the top which argument means what in a function call. 

There is no point in calling the method because all the words in your dictionary are already lower-case. 

Unnecessary instruction This MIGHT work; I didn't have the time to test it out Instructions like , , and don't have to be used after a instruction; they can also be used after arithmetic is performed. Instead of doing: 

This code will be much faster now because rather than constantly accessing local storage, you can access this local object instead. Of course, this data will not be stored when the browser closes, so another method is needed to save this data back to local storage. You can call this : 

While ing to the console is a good idea, this doesn't give other code using this library a lot of control over errors; how is other code supposed to know when something went wrong? I recommend throwing (custom?) errors along with logging a message to the console so, along with the person using the library being able to see and debug the error, their code will also be able to see and interact with the error. In case you aren't familiar with Java, you can create a custom error just like you can create any other class. Here is an example using your code: 

Store high score Along with that above tip, what you could also try doing is storing the high score data. You don't need some file format. In fact, you could handle your own special type. Here could be an example high score save/data file: 

Instead of hard-coding the array as the array that your function is checking, write over with this as a new method. Then, you can refer to the array to check as . Here is roughly what I mean: 

Stateless Functional Components None of your components hold a state. Therefore, it is better practice to write them in the form of a stateless functional component: 

All s have a both a and a , so you do you check of it's existence? This seems unnecessary and you should just remove them from this chunk (and the next one). 

vs You should probably use the event instead of the event as with the latter event, if the user accidentally holds down the key, then multiple events will be registered in quick succession; the event will only be fired once (when the user lets go of the key). 

An entirely new idea for your system: since this is just an image slideshow, just create an object that holds an image url and a capt 

In your function, instead of doing a conditional, returning if is passes and if it does not, just return the conditional that you are checking. Here is what I mean: 

To change octaves, you use 'z' to go up one octave and 'x' to down one octave. The code virtual_piano.asm 

For a problem like this, I would try to find a way to use loops to make it easier to add and remove things from your form. Right now, if you want to add something, you have to go through and edit almost every part of your code. I find that the easiest way to get these things into loops would be to create objects for each form element: 

You do something like this a lot in your code. In JavaScript, is a false-y value. This means that it can be treated as though it were just . That repeated expression can simply become: 

You don't have any input validation. What if I enter a number like ? You're program is probably going to throw an error. You should do some checking on the input received to make sure that the numbers are in the bounds of your board. 

Note: I could not find a PowerPC assembler any where on the internet so my recommendations from here on may be slightly flawed in some places. These lines can be simplified: 

Set to 0 Increment to a limit, calculating each increment. Decrement back down to zero, calculating twice for each decrement (except for the first). 

These are the only two lines that are different among these two methods. Everything else is exactly the same. You should refactor this into one method that takes a parameter that tells if the cards are the first cards or not. Then, your new method would look like this: 

I'm a little confused by this question. Right now in your code, when you recieve a connection, you do handle the recieving and the sending in a separate thread. This is fine, and is a good idea. After you close a connection, there is no connection to slow down. And yes; this is fine. Since your server isn't going to do anything more after it has sent it's response, then there is no point in keeping the connection. It'll just bog your server down in the long-run. 

I can not go into the way you tried to solve the problem because I am having trouble understanding your code. I believe this is just on me, but I think that having more documentation would help anyway. 

Note: and are bad variable names. I used these because I was unsure of their original use in the code. You should think of better ones. Great, we have a dictionary, but that still doesn't help us not have to repeat code. That means it's time to create more parameters! This parameter will be one of the keys of the dictionary so the function knows which random number to grab. 

Your function would return to these if these were passed in in this order. A simple fix to this would be to reset to every time a character is encountered that is not the right one. 

Your game does not handle ties. It will just asking for a place to go (or randomly generating a place to go in the case of the computer's turn) and the program will never exit. You should add a function that checks for a tie. 

Typically a single indentation is either 1 tab or 4 spaces. I use 1 tab. For example, let's take this snippet from your code: 

Sure. Considering you know that you are going to be sending in a large amount of s, then why not let take an array? 

I would choose neither of those options. Depending on how many elements you need to insert into that , you could end up with a big chunk of code that is just a group of calls. I recommend creating two arrays: one of the s, and one of the s. Then, all you have to do is create a loop that inserts all the values into the map. Here is what I came up with: 

This is a very disputable topic, but I believe that it is best to use the pre-increment operator over the post-increment operator. So, this 

There's a bump in your indentation You are being inconsistent with your indentation. In some places, you are indenting two spaces. In others, four. I recommend that you stick with one (I like four). Defining the undefined 

The above regex should only pass for either y, n, Y, or N. Also, it may be better to compile the regex in the main method itself. Then, in your code, instead of having the loop, you can simply write: 

You wrote something like a few more times. Yes. If JavaScript is not enabled, the photos will not show, as with the rest of your JavaScript. This is why you should use a in your HTML. 

Unnecessary branching In your subroutine, you branch over to the subroutine. Since the subroutine is right beneath the subroutine, you do not need a branch there since execution will just "fall through" to the subroutine. Labels I'm not sure how this works in ARM, but you seem to be using only global labels in your program, when there should be some local labels. Local labels exist inside global labels, and they act kind of like a subroutine for a subroutine. A change I might make is make the label a local label. For more information on local labels, see here For information on the syntax of a local label, see here Disclaimer: I am not too familiar with ARM assembly, although I am familiar in other assemblies; some things I tell you might not work 

UTF Right now, your compression algorithm won't do so well when it comes to UTF files. Since some UTF characters actually exceed 1 byte, this algorithm would probably end up not compressing anything at all. Now, this may be out of the scope of your problem, but it would be a nice addition. If you look at the UTF-8 wiki page, you can see that it is somewhat possible to detect if a character is UTF, judging by the binary digits at the beginning of the digit. This, of course, would raise complications as UTF-8 characters are variable length and you would have to determine the length in bytes of the character by the first binary digits. To ease things up, you could have the user specify whether or not the file is UTF encoded (or, you might be able to find out by reading the file). 

Instead of creating an enum for the difficulty factors like I recommended, you could just set the values , , and to the difficulty factors. 

You can remove the comment on the second call as the comment is identical to the call right above it. 

This may just be me, but when you add a new to the array, and then you , wouldn't you be retrieving the that you just put in? If so, don't add the to the array until you are done calling all those functions on it. Then, you can add it to the array. 

This is a little nit-picky, but since you aren't taking any command line arguments, I recommend that you put in the arguments section. 

Typically, the will come on the same line as the close of the preceding statement. You wrote it the correct way in so I don't know why you changed it. 

This assumes that can access , too, which it now should be able to so you don't have to get the element over and over again (which is inefficient). With these changes, your code is much more efficient now. With the addition of this look-up table and the new use of the function, your code now runs in \$O(1)\$ time (I think). 

Note: I passed a as a second parameter to because this limits how many times the string will be split up. By passing a , this limits to the string only being split a single time, which might speed up performance. Note two: since is looking for a regexular expression and is a valid token, I inserted an escape character. 

where, for each inner array, you put the three board array-indexes needed to complete a win. For example, if your board array is 0-based, the first win combination would be - the top row. Then, you could easily iterate over this array and check each combination all in a single loop. Sorry if this isn't clear; you can ask for clarification in a comment, and/or check some of my other tic tac toe answers for more detail. 

In my opinion, it doesn't make sense why a user would start with points other than 0 in a quiz game. But, if that ends up making sense to you later, you should at least make that parameter optional: 

There are still some problems with this directive. The biggest one? Scope. Right now, there would be some major problems if you were to try and use this directive because, since there are going to be multiple elements with this directive, there would be repeats and what-not in the directives' content because they are all using the same scope. To fix this, we can add a property to the object that our directive is returning. This property allows the directive to define attributes that it will read and then pass on to it's template in it's own scope. This makes sure there is no overlap and repeat when using multiple elements with this directive. Adding the property would look like this: 

All that's left to do with this controller is to move some of the information from your original controller into this controller. For example, you might want to move and In order to properly deem what should and shouldn't be moved, remember this: a controller/directive should only accomplish one task. If you need to accomplish another task, you need another controller/directive. 

Consider using an object to store all the information you need for each size, such as the size itself and the attribute that will hold the new image. Here is what I came up with: 

Another solution you could have is to first split up the string into words, then reverse them, and then stick them all into a blank. Here is a little bit more into that option: 

Action class If you aren't familiar with Redux/Flux, that's okay. If you are, then your creation of these objects that define types of hits and runs look an awful lot like actions in Redux. That being said, you could simplify the creation of these objects with a class (example):