When looping over a 2-dimensional array, it is good to use and for the loop variables, instead of and , because they are more intuitive coordinates. 

Coding style Every language has its conventions, which enable programmers to understand each other's code more easily. Usually the conventions include naming schemes for variables, classes, methods etc. and formatting rules. These are independent from the architecture, and also from the syntax. Names or formats that are allowed by the language might not be "allowed" by the convention. 

I already added the link to a good implementation of the hash code method above, so I won't go into detail about the algorithm. But what you are doing in the above two lines before the addition is just calculating what could simply be a constant. The compiler will probably even precompute the part. Multiplying the hash code with a prime number (like 23 or 31) should happen before every addition of another value. 

The task: sort the characters in a string, as provided by the ICU . This is because I want to be able to find anagrams using the suggestion from "Programming Pearls", which is, find "signatures" for each word in the dictionary, then sort according to these. It is enough if it works for the European languages and scripts. The input file is for example the word list found in . For now, I just read from standard input, print them to standard output, sort the characters in the word, and print the sorted word: 

This copies from up to at most, and stops if the delimiter is encountered. It returns a pointer to the first character in the input range that was not copied. It can be used like this to copy all input to output: 

Write Less Code The main problem I see with this solution is that you're writing so much more code than you need to to accomplish the task at hand. 

That'll also future proof anything else you add into these loops. What if you added logging? You'd have to go back and add braces then anyway. It's a good habit to get into. Always braces. 

(Secondarily, I flipped the order of your arguments, provided better names for them, and am not limiting the value we're looking for to be a . Rather, anything that is equality-comparable to should suffice). The idea of using is that it, as a return type, already encompasses what you want in a single type - it tells you if there is or isn't a value (i.e. was found or not) and if there is a value, what it is (i.e. its rank). We however privately still need a value even in the case, hence the helper function. Altogether: 

The third argument of could of course be a unary predicate, then instead of it would say . More important questions: 

First off, I do realize that I have not put any effort at that moment to ensure data integrity (apart from the obvious and ). There are a few foreign keys lurking in there: for example, the column in both and is the same that is the primary key of the table. Another issue is that the column, in every table it is used, is a unique identifier consistent across all tables. The data, as I have it, contains no further information about "patients", so I have not felt the need to make it a unique column in a table of its own. After some trial and error, and much unsuccessful mucking around with the different s, I eventually got to the schema above, and the following "style" of querying it: 

Naming, naming, naming Real estate has location, programming has naming. Can you, going back to this code in a few months (or even days), tell me what these arguments mean? 

ADL This can be improved. First - you're requiring a member function, it'd be better to make that more of a customization point. Second - you're putting all the operators in global scope when it'd be better to hide them. Both issues can be solved with some ADL. The advantage of making an operator a non-member friend declared inline is that it can only be found when comparing precisely what you want. The downside to what you're doing right now is the following compiles: 

I split the and out separately, those are the two ends and are always going to be the edge cases. You can see that and , so those almost give us the two multiples we need. We just need to add one to the latter: 

I feel most uncomfortable about , where is the current string length. I need the extra space to terminate the sorted string, but must I check that ? Other suggestions and comments are of course most welcome. 

Is this a valid approach? Is there a point at which I will hit a wall, concerning the length of the queries (endless s) or performance-wise? How about this way of doing everything: I did not really see this used much the tutorials I did (in a hurry). What are the drawbacks of doing it like that? Is it wiser to figure out how works? Or ? Or something else I am totally unaware of? 

This is a part of a project I am working on. I need advice and criticism regarding the data base design and general approach to querying the data. I am not at all experienced with relational data bases (as you should notice), and even though I have tried to invest some time in reading up I am currently forced to just move along as fast as possible. Currently using SQLite3, and most probably sticking with it. The data base schema goes along the lines of: 

Allocation The thing that jumps out at me most is the need for memory allocation to create a or . That's a performance hit, which is why and what will eventually be don't do it this way. It additionally makes the usage of the class a bit awkward. What I want to do: 

We could do a little bit better. It depends on what ends up looking like, but what if we had like 100 0s and then 500 1s. Do we really need to compare each one individually? No, we don't. We can binary search the next element. 

This is wrong for several reasons: (1) you don't need the initial (2) The ending is meaningless (3) is the wrong construct (4) you reference at the end of the loop when you really want . Prefer the following: 

The problem I was trying to solve sounded pretty basic, but turned out to be a bit hairy. I need to select some lines of arbitrary length from an input stream (file or standard input) and print them to output. In other words, a function that just echos the line would do the job. The input stream is encoded in UTF-8. For reasons that I don't quite understand, the normal mangles the stream, so I couldn't use: 

I did solve it using ; however, this function writes to a buffer, and I need to tell it how big the buffer is. To make it deal with lines of arbitrary length, I need to read to a buffer in a loop, checking whether is set (when the end of the line wasn't reached). Then, the easier solution was to use iterators on the input and the output stream, like this: 

That's a lot of code for a simple operation. What are you doing here? You're counting the incidence of . But there's an app for that: : 

Typically we'd say , but in this case, we have a clearly established termination condition: our max limit. So let's use it: 

The one-liners are easier to understand than the loops. Use enumerations in a switch. Where you have: 

Pairing with is an important rule. Another one is the . Every time you write a destructor, you have to write the copy/move constructors/assignment operators. You failed to write those, so instead you are using the ones provided by the compiler, which just do shallow copy: 

Now we're safer and our is copyable! We will take advantage of this fact. Also, you rely on a lot of global variables: