I'm going to second guess a bunch of decisions that you made. I don't know that you made them all incorrectly, but I think that alternatives deserve consideration. 

Having a numeric component can help with translation. For example, if you have both fields meaning entries in an HTML form and fields meaning land under cultivation on a farm, then you don't want them to have the same translation key. That said, people often want the translation keys to give some hint as to what the text might be, so they mix the numeric ID with a string, e.g. . You probably want to separate your main code from the translations. Also, you probably want to separate your English and Spanish translations from each other. The reason is that you don't want to have to change the file with the English translations or the code because there is a problem with the Spanish translation. This also allows you to use separate encodings for each translation. And of course, separate files scales well. I'd be wary of trying to use generic English messages to cover multiple situations. For example, there may be a language that uses different words to describe a form entry that can hold a string like a name versus a number. It's often better to be as specific as possible in your message so as to save yourself the trouble of refactoring when a new language causes translation problems. Repeating yourself makes for bad coding practice, but it may be good for translating. Be especially leery of embedding translated strings in other translated strings. It's very easy to get into situations where (for example) two strings use different articles or verbs. An English example would be "I am", "you are", or "she is". "I is" or "you am" would sound ridiculous but is the kind of thing that string embedding gets you. Also be careful of concatenating strings. The translated version may put the words in a different order. For example, Spanish often puts the adjective after the noun. 

Everything looks good. That said, wasn't supported in Internet Explorer until version 9. If you need that support, the Mozilla Developer Network has a handy function you can include in your code to provide support for those browsers: 

The only part missing from that match is the end, the last . I would use another regex match to grab that portion: 

Proper Indentation. You shouldn't need the comment. Just indent that entire block. needs a statement. You wrap your code in a function, which is good, but you need to call that function. The last line should be 

First off, refers to the element you clicked on, so we can simplify your code a bit my replacing your second like so: 

I have a couple of issues with the main function. First, may work for windows but won't elsewhere. You should dump it. Second, Too many returns at the end. Third, The hardcoded input makes it kinda hard to test (and doesn't look good). Just read the first parameter from the command line or read in from standard in. Here is an easy way to do so: 

If you just want to get rid of the second call, you can save the value in a variable. If it exists, do the assignment. If not, don't. In PHP, if you don't need to do string interpolation (variables embedded in strings), you can just use single quotes. This is slightly faster and can help avoid bugs where you accidentally interpret something as a variable that was meant to be a literal . Note: there may be better overall solutions, but with so little context, it is hard to see them. For example, you don't say how you get this URL. Or what you're going to do with it. There might be better changes in one of those places. 

which says what it is doing explicitly rather than relying on a side effect. Also, I put it all the way around, as you want to force it to be a 32 bit integer all the time, not just when the value is not the default. 

Finally, you have several magic numbers. To make code maitenance easier, define variables for constants like colors, strings, and timeouts. 

Generally speaking, anonymous (unnamed) functions are completely acceptable within the land of Javascript. They are used frequently and without prejudice, so don't be afraid of them. That said, I'm not a fan of the second code sample. Without an understanding of the jQuery API, I don't really know what the two functions do to the hover call. Are both called, one after another? Perhaps something else happens? The name doesn't really give any clues here. I think a great option here would be to combine the two samples. Use the anonymous functions of the second with the explicit naming of the first. Furthermore, it should be noted that according to the docs, is shorthand for and , not and . I'll let you read over the docs and decide which of the two you decide to go with, but ultimately I recommend going with something like this: 

I also added a line break at the end. Functionally this won't matter, but it makes the HTML easier to read. The whole thing: 

It's probably in the code somewhere, but I don't feel like tracking it down now. A comment of why we are comparing to would be helpful. 

While putting the explicit there won't hurt anything, it's not necessary. You can just let the block end and it will fall out naturally. You only need the explicit when the following code should not run under that case. You're out of cases here, so it's not needed. 

Note that gets around this by demanding that the comparison functions return zero for equality and positive or negative values for inequalities. 

That always returns a dummy reference. Of course, if you do that, you may block some assignments that you would want to allow. Perhaps there is some way to return a special that will trigger the proper behavior on assignment or update. 

You are caching , but really, it's not complex enough to warrant caching. I did some quick and dirty testing and found that you save about 10ms per 1,000 executions. That is not worth anything here. So, to reduce code size and bug potential, I suggest removing all caching. 

But having a list is just fine. Not knowing anything else about your requirements, I would leave it the way it is. The thing that really sticks out to me in your code is the use of a callback as a parameter in . Since this function is not asyncronous, I would ditch the callback and either log the error directly to the console or just throw the error and let it break the build. If you really want to provide a mechanism for reporting configuration errors to the user, then rename "callback" to something akin to "errorHandler". The use of the name "callback" usually signifies a function that will be executed once and only once, will be executed when the function has completed, and will not return a completed value but instead pass the value as an argument to the function. Also, I find it surprising that you do not log the time to the output of the file or console logger. Not a big deal of cource, it just stuck out. 

These errors are confusing to me. The limit is the same as the current bid, so I should ... Increase the bid? Decrease the limit? What? As a user, I'd appreciate some direction. The name has lost me. I have to go back to find out what set . Even something like would be easier to remember. Everywhere else, you process down to simple data structure (an associative array). Why do differently? You could easily do 

There are bugs in your implementation. For the 3x3 case, try 1, 0, 2, 4, 3 and then call . Your program will return "X" as the winner because X has 1, 2, 3. It doesn't realize that 3 is a different row from 1 and 2. Checking with an invalid move makes the variable incorrect. Your check is incorrect, as you never check 0 (the first square in the diagonal) but do check 12 (outside the board). Note that I find this name confusing, as your is the one that runs from the top left to the bottom right. I would describe the other diagonal as the antidiagonal. 

If we consider these two buttons a state machine, we see that there are six simple states (not including hover). 

is always one less than size, so you don't need that variable. Just replace all instances with . Similarly, could be replaced with . 

If looks like you may have a bug with . If the form input is a checkbox and is unchecked it will return even if it passes the validator function. Since this will cause the function to fail, lets return as an invalid state. 

Regular expressions are tough to read (human wise). As such, if you have a gnarly reg-ex in your code (), you should comment what it does. Furthermore, using regular expressions to check the total length of the string is inefficient and not necessary here, since you already have to check the length to report an accurate error message. As such, consider validating the username and password like this: