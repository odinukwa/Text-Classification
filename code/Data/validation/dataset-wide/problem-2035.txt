The first two items are probably irrelevant, as from a certain perspective what the policy actually changes is the accounting of leave days, but not any of the underlying mechanics of how the leave system operates. What matters is that full-time employees accrue 20 days of annual leave and 10 days of sick leave for each year of employment. If this is treated as having 30 days of "general" leave that employees accrue each year, it seems like that would be fine (in my opinion, at least), so long as nobody is kept from accessing their full leave entitlements. And the fourth item actually benefits employees, so shouldn't be an issue as long as there are funds there to cover the increased amount of entitlements being paid out. If anything, it can be a point of differentiation to make the company more appealing to prospective hires (if you don't get sick often, you get more general leave days to use for your holidays). So the third item is the only real sticking point. And there's not enough information provided in the question to know if there's an issue or not. Is the policy proposing that employees will accrue 30 "general" leave days each year? If so, nothing to worry about. Or does it propose an accrual of 20, basically replacing 10 annual leave days with sick days? That would be an underpayment of entitlements, which won't fly. Employees would likely complain, and if the policy wasn't promptly changed might take the matter to the Fair Work Ombudsman. 

What sort of collaborative tools are being used in your workplace? If a wiki is available, then one possibility is to take advantage of that. You could, for example, document the problem you are trying to solve and the solution(s) you are thinking about on a wiki page, and then invite others to review, comment, and discuss. More broadly, if the problem is that you feel generally uncomfortable about directly consulting with others then that's an interpersonal skills issue that you need to try to work on as an individual. That doesn't mean you need to jump right in and start calling everyone in to meetings and presentations about what you've been doing and why. But it probably wouldn't hurt to take inventory of the collaborative tools that your company makes available to you (I'm assuming they must be using at least some) and try to find some unobtrusive way to incorporate those into your normal workflow a bit more. As noted above, this can be something as simple as documenting your work in some publicly accessible place, like on an internal wiki. Once you start making your thought process more accessible to others you'll probably find that collaboration/consultation will follow as a natural consequence. 

It seems clear that your team needs a better development methodology. However, micromanagement is unlikely to get you the results you want. Smart people (which developers generally are) hate being micromanaged and are liable to fight you every step of the way. I'd suggest borrowing a page (or two) from Scrum/agile development practices. In particular, there are at least a couple of things that seem like they would help in your situation: 

How can fitness be evaluated without having your developers look at the product/component you intend to reuse and the context you're trying to use it in, and making a determination about if, how, and at what cost the product/component can be made to fit the new requirements? Even if the decision is to reuse the existing product/component, the very first step along that path is to evaluate the actual cost and feasibility of the approach. So you either involve your developers in that process up front by making them part of the decision-making process. Or you involve them in effectively the same way immediately thereafter. In either case the outcome is the same. Unless your decision-making process is such that you're going to ignore your developers if/when they say the product/feature can't be reused in the desired way. But that would be a bad decision. 

This is the worst one. It's not just untrue (as above, if you've got decent developers then they're entirely capable of providing valid criticisms and valuable insight), but whomever threw that into the "cons" pile clearly has an arrogant and condescending perspective themselves. There's zero correlation between "amount of responsibility" and "ability to contribute to the decision-making process". Enough said. We can also work through the examples you've provided, and see which approach might work better: 

Being out of your depth is one of the best ways to learn new things quickly. If you have specific technical issues that you're stuck on, I'd suggest asking some questions on stackoverflow. And perhaps the term was just used inaccurately, but typically responsive web design is primarily a CSS-driven affair. Are you sure you really need to do any of that PHP hacking? More generally though, I think you need to evaluate whether or not you are on the right career path. Specifically, these comments: 

So what you need is your degree, not a passing mark in every single course that you registered for. Your employer (like most employers) only really cares that you possess (or receive) the degree you advertised. It's extremely unlikely that they're interested in your specific marks in each course that you took. At most, they might care about your GPA (and generally that would only be during the screening/interview/pre-hire phase). Moreover, I don't see how your employer would find out that you've failed the course, unless you volunteer the info. Your school won't hand them an academic transcript, and I doubt they'd ask you for one (I've personally never been asked for one). Your degree proves that you graduated, and that's likely all they care about. I'd suggest not bringing the matter up at all, unless the offer you received is specifically contingent upon you passing all of your current courses (which it doesn't sound like it was). There should be no problem with the failed course unless you manufacture one by trying too hard to be preemptive. Most of the time 'wait and see' works better than panicking. 

First things first; deliberately doing less work is unprofessional and not a way to solve the problem. As a programmer myself, I understand that deep and sustained focus is a necessary part of programming effectively, and that for many developers music is how they attain that focus. If you had said that without the music you're less productive because you can no longer focus as well and/or are constantly distracted by things going on in the background, then fair enough. But intentionally doing less work will not help your case, and is not an effective way of protesting your employer's directive (if you really want to protest the directive, playing your music over the computer's speakers would be a more meaningful way to do so; if/when your manager complains you can use that to segue into your discussion about the inappropriate nature of your punishment, the importance of music to your productivity, and so on).   That said, your punishment seems both inappropriate and invalid. A firm warning/talking-to would have made more sense, and management really has no grounds for telling programmers that they can/cannot use headphones at a reasonable volume (unless they can demonstrate a causative relationship between headphone usage and reduced developer productivity). Remember that you're not there to take arbitrary orders from management that have nothing to do with your actual role (and depending upon your location, various laws may prohibit such frivolous directives from carrying any weight). Nor are you there to be treated as a child who loses privileges for being naughty. You are there as an employee to fulfill a specific role and to follow directives that are valid and relevant to that role. I think you already understand this, which is why the thing about the headphones irks you so severely.   So then what should actually be done? I think first you have to consider why your boss acted as she did. I see two general possibilities: