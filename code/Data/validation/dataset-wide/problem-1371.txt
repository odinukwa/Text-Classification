You can also see that throws an , to make the (non-)usage more apparent. Last but not least, I'm not sure how much do you intend/expect to do here, but you can also look into using to handle the array resizing. 

Create VisualProcessStepConnection instances between the current step and its next steps In your current code, you are iterating through the next steps of the current and then constructing a new object for each of them. To simplify the creation of the object, you can either give it a constructor that takes in two instances, or use a method to do so. The suggestion below combines both approaches: 

Method name I agree with you, does sound a bit odd for lists of non-numbers... perhaps or are arguably better names? Lambdas 'Single-shot' lambda definitions does not require the use of : 

Instead, it will be more beneficial to give a more descriptive message. Borrowing your original code... 

What that means is to ensure all matches the (lambda) . Input validation Your input validation can probably be better done as a method: 

The idea here is that when you need to reset your min/max values, you can just reset your counters to and proceed, instead of having to iterate again. If you do not mind extra ternary operators, you can sort of combine both branches per min/max too: 

It's largely fine by me. :) Just one glaring point: your implementation would not return the first line, as will not return . 

Constants in test class While it's generally a good idea to create constants to aid reusability, I think it's a bit overdone in your unit test class. Do you really need to tell you that's a price of ? Handling double values for maps' keys 

... or overloaded output building methods Alternatively, you can use overloaded methods that take in a specific implementation (one of the rare cases where you'll actually want the method parameter to use the implementation), and a helper method to do the appropriate casting. It's all about managing the resolution outside of the stream-based processing. :) 

First things first, there is room for improvement for code formatting - there's too many empty lines, if-statements without curly braces (unless this is mandated by force in your context, but absence of braces is fertile ground for bugs...) and unnecessary comments at the end of your main if-statement. The problem with the last is what happens when conditions change in the future but the comments are not? That will surely cause confusion. This is what I'm talking about: 

You may want to re-visit the meaning of the return type from your and methods in . Using the method for example, what happens when the data store already contain the incoming object ? Do you still want the method to return , i.e. is already present, or return , because strictly speaking the operation isn't successful as is not modified at all? In your current implementation, you can consult the Javadoc for : 

Java 8 Going further, we can just rely on streams (not collections) and (technically not a 'variant', whatever that means) to get the same output: 

In 2017, is pretty much a relic class and you are highly encouraged to switch over to or , as you already did elsewhere. 

is used here just so that can be used as a special placeholder to effectively ignore further computations when a is encountered without a matching . It doesn't look as streamlined as I hoped it would be though, and I think for most intent and purposes the non-stream-based way works and reads just a little better. 

Some of your statements have enclosing but some do not, please standardize and use them throughout. :) 

edit: I just realized there is no type declaration for ... does that mean it is actually a class variable? If so, I will suggest scoping it down to within the method (or within the block, even), as I don't think there is a need for each object to be referenced outside of the method it is created. edit #2: Looking at these two lines: 

is our starting point, and I've chosen to specially handle the case where a array might be by skipping over it. To combine two pipelines together, is used as a method reference as the final step. Requires two steps, but each step is arguably simpler to digest, and overall performance is much faster too: 

Handling exceptions throws a when there is a parsing error, you may want to consider catching that and then just output the validation status as . Field names 

Going on a limb here, but do you want to consider using a wrapper class to encapsulate the fact that you have three similar generated classes, and provide a common way of accessing/modifying them? This assumes: 

Background (these are the bits technically not for review, but feel free to point out any minor points) An class can be identified by a name and at least one alias: 

edit Pre-calculating/setting what are invariant results first can lead to better performance, since you avoid repetition. What I'm suggesting is: 

Based on the name, I will prefer validation to be done within . Oh, and it should have getter methods that your implementations can use, and I'm guessing that's already the case as the fields are private. On a related note, how else will be used by , besides the method? 

Instead of having as a method, or even class, variable, you should scope it appropriately to eliminate any possible mis-references. Also, you can consider adding a more expressive method that returns the object itself, so that you do not have to perform that 'manually' here: 

Instead of looping one more time through your array, consider expanding the iterations on your first loop and then exiting from there once you reach the desired result: 

If you still prefer to stick to a safe default such as , replace with , and then you can drop the condition. A quick test: 

Now, I must say this is totally untested as I don't have Lombok... maybe the method reference way of declaration might not work. 

Calling mutable operations such as and may throw if the underlying does not return a mutable implementation. As such, in these scenarios, you should be creating your own given the resulting elements, and then do the necessary removal/addition calls on the new instance. and usage Interestingly, it looks like and themselves aren't used in the processing, after kind of using them as 'keys' for grouping. The nested s looks too peculiar, which brings us to the next point... Grouping your objects 

You do realize that this will turn text like "ART!" into just "A!" right? Tokenizing first should remedy this issue. On a related note, Apache Incubator Storm's tutorials usually use tweets as an example to demonstrate the Big Data approach. I'm not suggesting that you need such a set-up in your context, but perhaps you can give those a quick read-through to pick up some tips. 

Java 8 Java 8's stream-based processing can simplify some of your implementation in . For brevity, here's two suggestions to get you started, and they will also let you refactor some of the existing methods to use largely the same code by passing different method arguments. 

Think of as the entry point to your Java class, so handling user inputs is usually done within this method and not in the constructor. This encourages you to either use your class as an "utility class" or a "model class". The former usually implies the class will have a private constructor and some methods to only perform the conversion you require, while the latter usually implies that it will have some internal fields to be set upon its construction, for example. The current approach you have is creating an instance of your class to handle inputs and also do the formatting, which is not recommended. In either ways, it will also cut down on the code duplication you experienced in the first point, since you no longer need a method. 

Your and declarations are missing type arguments. Assuming if you're developing on Java 7 then all you're missing is just the diamond operator, e.g. . 

Connection pooling For safe and efficient handling of JDBC connections, you should be closing them every time you are done with it, but it'll also be better if you let a connection pooling manager do it for you (they generally cache open connections for reusing and will close them when desired). I did a quick search online and HikariCP ranks high up on the search results, for example. Tying database schema design in code 

Quick explanation on getting the word count: Convert the from into a by calling . Then, we can use the method to get the count. 

Specify some test input. Process the input to some output to be recorded. Assert that the recorded output matches an expected result. 

It's also recommended to use on your instance for safe and efficient handling of the underlying I/O resource. 

Putting it altogether, #1 After you have extracted out the derivation logic into small methods on your model classes, you should have something similar to the following: 

This approach is totally fine. :) Just a pointer for : you should return the results immediately, instead of a single at the end. The benefits of this are more compact code and short-circuiting of the logic. 

Define a 'duration description' (DD) as a start time, an optional separator, and an end time. The separator is required when both times are present. Construct a DD for the AM session. If there are DDs for both AM and PM sessions, insert the newline. Construct a DD for the PM session. Concatenate the DDs for both sessions with the optional newline in between. 

You can use better method names instead of ... Pojo is well-understood but still quite an informal term, and you'll probably attract equal comments whether to keep it all caps or not - it's an acronym afterall. The Spring framework calls their helper classes RowMappers with a method, so maybe you want to follow something like that. $URL$ You can inline your conditional checks in the statements as such: 

As mentioned in my comment, you have the use of here, so I'll suggest implementing that for your such that you can leverage on the standard JDK feature set (showing only the over-ridden method below). 

I'll suggest switching the first two parameters for , which I think can improve its readability in this way: 

Sure, readability is sacrificed, but hey, just one statement! By taking advantage of and its return type, I can optionally store the output of the current iteration's breakdown (when the quotient is not zero), and determine what should be the next value to recuse with (the original , or the modulus). edit I suppose I can improve the readability somewhat by this... 

Everything is a Welcome to Java and object-oriented programming! You are doing something really strange in Java in your method (which really should be called or ): 

Here, we update our map by and compare against / sequentially. The use of and is slightly better too, as they ensure the results are immutable. 

Consolidate final Usually, if (pun unintended) there is a final statement with a statement, followed by a final , one can easily consolidate that as one statement using the ternary operator. In your case, this results in: 

Since you are already using a healthy dose of Java 8 features, there's the newer method that (arguably) makes these declarations more readable, e.g. 

Interfaces over implementations and type inference As illustrated above, can be declared as a instead of , and at least you are not making the same mistake in the method return type declaration. Also, since Java 7, you can rely on type inference to eliminate mentioning the generic type a second time, by using the 'diamond operator' . Java 8 stream-based processing Since you are on Java 8, you can look towards its stream-based processing capabilities as the appropriate way of solving your problem. It's relatively simple to adapt your solution to reduce an integer stream to a , or more specifically to create a out of your solution: 

Note that is also used here, as it will likely offer better performance over the /-based implementation. Auto-boxing There are a few places where the use of the wrapper class can simply be done with the primitive equivalent. Again, some form of consistency here will be preferred, partly to aid in readability, and partly also to eliminate any possible chances of when you (accidentally?) create instances of . Better modeling class...? Given the various places where you are accessing the array elements, I wonder if using better modeling classes may be of some help here to improve the readability and to standardize the usage of the array elements. For example (reducing empty lines here solely to make it fit into the box without the scrollbars): 

This creates a new stream where each element is read from the , i.e. , i.e. the user input. This is accessed via a method reference. On each line, split by a character 

To sidestep that and the trailing , you can use a , or if you're on Java 8, assuming you have converted your results array into values. Java 8 and random value generation Generating a stream of random integers in Java 8 is decidedly easy: 

Same goes for the , extract it to a field perhaps? Input sanitization? You are currently constructing your s directly by appending . I'm not sure how dweet handles weird keys/data, but you should consider doing some kind of sanity check here. Handling for one or multiple keys/values I will prefer to convert the arguments to the method as a so that I can pass it to the other method. This ensures your URI encoding is handled correctly - as you can see currently you aren't handling that for . Also, I might be missing something here, but why do you need to after pushing data to the web service? Don't swallow does not appear to handle thrown s in any meaningful way. Should it log to some console output? Fail fast? Wrap the and throw it to the caller? I'm also not to keen on calling your instance , because sounds... strange. Why not just call it ? And I think you'll need to it when you're done with it. Define variables/parameters with interfaces, not implementations Just one more thing, it's better to declare (>= Java 7 syntax), since your code should not need to be aware of the actual implementation of . Same goes for . 

If you re-word your question, all you are supposed to find is if a collection of numbers, where each value is in the interval , run from to . If this collection of numbers do not contain duplicates, you just need to make sure that a representation of this collection has a of . A more efficient way is to declare a , iterate through your collection of numbers by setting the appropriate to , and finally checking that the result of calling returns . 

Validation and unit testing Thought it might still be helpful to point this out, even though you're hand-waving it away. :) 

Will provide a fuller review if I can later, but anyways here are some quick starters... See major edit for point 3. 

Besides the fact that you are using braces inconsistently, this method can be entirely replaced by : 

Just like your original code, we strip out whitespaces, then transform a 'minus negative' operation into an addition, and finally replace only the signs that do not follow other mathematical operators: , and . These are the only cases when we need to treat it as a subtraction rather than to signify a negative value. More can be added here to support and/or . However, this change does introduce a slight quirk, which changes expressions starting with a negative integer to . To mitigate that, we can do a simple short-circuiting in : 

You will need a method for each oh your message class that performs the conversion, and the method to get the desired non- value, if applicable. Each getter method, e.g. as shown, is relatively trivial to implement. In your case, since you are only dealing with three different classes (which is already a lot), you can also consider a simpler -ladder instead of streaming through the values. A slight benefit of the wrapper class is that it lets you perform additional conversions too, for example to an object: 

While it's nice to provide a more concrete error message ("duplicate student ID or Student Name"), you are effectively hard-coding the message based on the schema design here, which may become outdated if you were to change schema. You may want to consider retrieving the exact error message from the thrown here. 

Enum names and comparison and should be renamed as and respectively, as Java types are usually not in CAPS. Also, when you want to compare equality of an , you shouldn't have to compare on its , but rather on the value itself: 

using a that uses as a method reference for the first comparison, the end time if two s have the same start time. Loop through the sorted and compare using , which is easier to read and understand. 

For starters, I can make the method handle negative values properly as well (more on this in a bit): 

The logic for / can also probably be put into a method as well, since the only variable is the number of sequential non-zero counts. 

Woah, hold your horses! You should be using enums here, instead of plain values. Plain values for this scenario are ripe for abuse when you accidentally against instead of , and you can say goodbye to an hour of additional sleep at 3 am while debugging furiously.