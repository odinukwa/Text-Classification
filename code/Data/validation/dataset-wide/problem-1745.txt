Printers and desktop items are set by the USER policy, not by the MACHINE policy. So make sure that your policies are set to apply to the appropriate scope and have the appropriate permissions. If you have a policy that is set to be processed by machines, but it only change user-specific items, it the policy will apply, but no changes will result. 

I don't know if this will be entirely helpful but here is good list of ADFS resources - $URL$ In many cases, organizations are using ADFS because they have a requirement to authenticate to cloud services using an "on-prem" domain controller (or a DC entirely under their control). Azure AD can handle all cloud related authentication and sync with local DCs, but Azure AD would be using the cloud-based directory and on-prem authentications would happen with your DCs. You can run DCs and ADFS servers on Azure VMs and treat those DCs as being located in a different "site" (under AD Sites & Services) to manage replication much like you would do with multiple business locations. This post is dated, but might be a good start for migration ideas - $URL$ If you are using ADFS to meet a B2B need - that is currently in preview for Azure - $URL$ 

One alternative would be to use Software Restriction Policies (Computer Configuration -> Windows Settings -> Security Settings) rather than the "Do Not Run Specified Windows Applications" user policy. This will also give you more flexibility around how you select the application to be blocked. Keep in mind that any blacklisting approach can be worked around. If you want to ensure that the restriction can't be bypassed, you'll need to use Software Restriction Policies in whitelist mode, i.e., specify those applications that are allowed to run rather than those that are not. 

The simplest solution is probably to use a UDP broadcast. That way, Windows will have to put the data on the wire, since it has no way of knowing that there are no other nodes on the network. I'm not absolutely certain that Windows won't drop the incoming broadcast packets but it seems unlikely. You might conceivably see two copies of each packet (one sent directly and one sent over the wire) but that seems unlikely too. 

If you are using Windows Firewall, check that the Remote Desktop Licensing Server exceptions are enabled on the license server. If you are using a third-party firewall, or if there is an external firewall between the Remote Desktop server and the licensing server, make sure all the relevant ports are opened. See this forum thread, and also Which ports are used by a RDS 2012 deployment? on Technet. In my case, however, the problem was with the Local Security Policy on the license server, specifically the "Access this computer from the network" option under User Rights Assignment. Although it does not appear to be documented, the Active Directory computer objects representing the Remote Desktop servers must be granted this right, either explicitly or indirectly. (The default setting includes Everyone, which is sufficient to allow Remote Desktop licensing to work.) Once this access right was granted, the next Remote Desktop logon caused the missing X509 Certificate registry entries to be created, and event ID 1130 stopped appearing. You should also check the "Deny access to this computer from the network" setting, which takes precedence, and any other configuration changes you might have made to the licensing server which could affect the Remote Desktop server's ability to establish an IPC logon. The security event log on the licensing server may be useful in determining whether the IPC logon is successful or not. 

It appears you can use Azure Express Route without a VPN, but your access would be limited to the using the public peering routes, not the private peering - $URL$ You can't initiate access from Azure to your on-prem via public peering - only the other way around, which I don't think meets your needs. 

As of March 2016, the ability to protect ARM VMs with Azure Backup is now in public preview. You can find more information at $URL$ 

Your spns need to be added the service accounts, not the local administrator. ADSIEdit can be really helpful in figuring out where they go. 

As I understand your question, it seems you are asking how to set your static DNS in the IP settings for your domain controllers. In that case, the DNS for any server that is (or will become) a domain controller should be set to contact an existing domain controller for DNS. If there is already one in the domain, they should ultimately point to each other. If there is only one in a new child domain, it should point to a DC in the parent domain and also to itself. 

You can also try resizing the CPU in the portal, which will likely bounce the machine to a new host. That could also resolve your issue. 

This error occurs when the user has existing permissions on the Active Directory OU that the Group Policy Management Console (GPMC) doesn't know how to deal with. It should be noted that group policy delegations are really just permissions on the OU, the GPMC just provides a simplified interface to make the necessary permissions changes easier. You can use Active Directory Users and Computers to check the permissions on the OU. You will need to enable "Advanced Features" from the View menu in order to see the Security tab for an OU object, and you will need to choose "Advanced" to see the detailed permissions list. In my case, the group in question had been explicitly granted "Read" access to the OU, which must have been added by mistake at some point since it is redundant. In the linked question on the Microsoft Forums, the user was attempting to change delegation for the Domain Admins group which by default has Full Control on all OUs. In my case, since the existing Read permission didn't need to be there, I removed it using Active Directory Users and Computers. I was then able to use the GPMC to add the delegation I wanted. The user in the linked Microsoft Forums question could have removed the Full Control permission for Domain Admins the same way, which would have also removed the group policy delegation as a side-effect. (Whether this is a sensible change is another matter!) In other cases, if the extra permissions cannot be removed, you can grant the necessary delegation directly in Active Directory Users and Computers rather than via the Group Policy Management Console. If you want to grant the "Link GPOs" delegation then the necessary access permissions are "Read gPLink", "Write gPLink", "Read gPOptions", and "Write gPOptions". Once the change is made, refreshing the view in the Group Policy Management Console should show the newly created delegation. 

You might want to look at the features of MS Intune. It does a lot of what you seek, particularly with the remote device management, VPN access and security. If you sync on-prem AD with Azure AD, it will help with the credential management too. 

You have the right idea with your diagram. DCs should point to other DCs for DNS, ideally in the same site (if you have multiple sites). Your workstations should then be pointing to a DC in their site for DNS resolution. You will see slow logons as a symptom of DNS issues. Just about every problem with AD tends to be DNS related, at least in my experience... it's always the first place to check! 

You can now active domain services directly for IaaS VMs using the Azure Active Directory Domain Services (currently in preview). This can potentially replace the need to deploy full ADDS VMs in your Azure virtual network. $URL$ 

You might want to take a look at Azure File storage, which will allow other Azure servers to access files via SMB, without needing a server to host the share - $URL$ 

I have used Azure-to-Azure site recovery, which is currently unsupported, in test and lab scenarios. It's totally doable, but you would be assuming some risk with the unsupported aspect of it. As of now, you can't "fall back" to the original region, it only replicates in the one direction. 

Symptoms: The first time anyone logs into the Remote Desktop server after a reboot, TerminalServices-RemoteConnectionManager event ID 1130 is generated in the system log: 

Note: the problem has been resolved, the admin of the parent domain managed to remove the DC object. I gather he used ADSIEdit. I'm working with an AD forest (in an isolated test environment, luckily, so failing all else we can blow everything away) and accidentally tried to create a subdomain using a cloned machine as the new domain controller. Naturally enough, this didn't work. But the new subdomain got created, even though AD was not successfully installed on the putative DC, and now I can't get rid of it. I started with this article. That didn't work because there was still metadata for the DC for the orphaned domain. So I found this. Unfortunately this doesn't work either. I opened AD Site and Services, opened the site in question, opened the Servers container, selected the DC in question, right-clicked on NTDS Settings and selected Delete. Clicked through "Are you sure", selected "This Domain Controller is permanently offline ...", confirmed that I wanted to do this even though the DC isn't in the domain I'm connected to, and confirmed that I wanted to do this even though this was the last DC in the domain. Then it said "Windows cannot delete object LDAP://... because: A referral was returned from the server." Anyone seen this before? Any ideas? 

With the classic portal, only co-admins can access a subscription. The Azure Resource Manager features of the new portal, you'll be able to more finely control the access within a subscription. The official documentation is here - $URL$ 

All 5 FSMO roles need to be migrated to your new DCs, including the Schema Master, however you only need to move each role once. 

Have you changed the DNS for the Azure network to use your first DC as DNS, instead of Azure DNS (default). The 2nd DC wouldn't be able to find the first DC without that being listed in the settings for the Azure network. 

Just because you are logged into the Windows 2008 machine, it doesn't mean that the focus of your ADUC tool is that server. You can be logged into one DC physically, but be connect to the directory located on another. Make sure to confirm which DC you are connected to before attempting the change. 

For a VM using Standard storage for the OS drive (C) you only pay for what you use. It's thin provisioned at 128 GB, but if you only use 10GB, then you only pay for 10GB. For Premium Storage, you pay for the full amount you reserve. You can create a VM with a standard OS drive and then connect premium storage for your data, if the VM support premium storage. 

Another possibility would be to temporarily disable Enhanced Security Configuration. (NB: Oracle have accepted a bug report, JDK-8140197.) 

We have a number of Dell PowerEdge servers, ninth generation and later. According to Using the LAN and Serial Interfaces in Ninth-Generation Dell PowerEdge Servers: 

As documented in Description of the Windows Update Standalone Installer in Windows, is designed for installing updates in the form of files. It cannot install updates that are in files. To install an update in a CAB file, use instead, e.g.,: 

The command allows you to specify options which will be passed to the service's function. I don't know offhand if any of the existing "run an application as a service" solutions will pass these arguments to the application, but it shouldn't be too hard to implement. Make sure you validate the folder name carefully. You don't want someone being able to reset permissions on , for example. 

I suggest you look into the Sysinternals tools (now part of Microsoft) in particular AccessChk and AccessEnum. I haven't used them myself, but they sound appropriate to your needs. 

Based on recent experimentation (with Server 2012, but I suspect earlier versions are similar) on non-domain, statically configured networks the NLA service uses the link-layer (MAC) address of the default gateway to identify the network. The details are unclear, though I suppose they could be worked out with a network analyzer. If the configured default gateway does not respond, NLA does not recognize the network, so it's definitely doing some sort of query. (That is, you can't just put in a dummy gateway address, or even a dummy gateway address plus static arp entry; the gateway MAC address associated with a particular network must actually respond in order for NLA to decide that the adapter is connected to that network.) See also my blog entry on a way of fooling Windows 2012 into assigning an adapter to a unique network. If the adapter is assigned an address by DHCP, the logic might be different. I haven't looked into that yet. The logic on a domain network is documented as per the existing answers. 

Fingerprints (and other biometrics) on Windows are designed to replace the PIN on the machine and are keyed to the machine's TPM individually. The point is that if your fingerprint is stolen, it could not be used to access resources using a different machine. There might be some third party tools that would allow you to do what you want, but that's not by design with Windows/Active Directory. 

If you download the file, it just contains some text and dates related to diagnostics updates. I can't find any documentation specifically about what reads or writes to that file and seems to be updated on the fly. It seems totally safe to delete when you are getting rid of VHDs. I delete them myself. 

If you are looking to run multiple websites using Azure, it's not necessary to use IaaS. You can run up to 10 web roles for free - $URL$ 

The ability to protect ARM VMs with Azure Backup is now in public preview, you can find more information at $URL$ 

Under the configuration settings for the AD domain, you need to make sure that it's configured to allow devices to be joined. There is more information here - $URL$ 

You are correct, in order to use Azure AD you must become a "tenant" within the system. So a tenant is basically just securing a .onmicrosoft.com sub-domain. At that point you would have one account registered in your Azure AD. From there, you can activate Office365, Intune or any of the Azure services.