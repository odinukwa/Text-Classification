Not really, the code is still a little wet. Could use a little more DRY. It seems like code that is very similar to this is repeated a lot, but with slightly different parameterization. 

This one is a little subjective. For an algorithm like this, it makes sense to only write pure functions as that can make debugging easier. Your code is readable and clear, if a little contrived, but I wouldn't worry too much about this. JavaScript is sort of a weird language to ask this about since most functions won't follow this rule especially when you do DOM manipulation and frontend JavaScript. 

Try to pick a more description variable name. Also, you shouldn't store large constants like this in your program. What you can do is store them in a text file and read them in from the program. 

To invoke these methods, I would then have to export the models to the external calling file, which seemed like bad practice to me because I would then be exposing unnecessary internal parts of the module. My reasoning for designing the module the way I did was so that I could abstract away the complexity and only expose necessary methods. Is this good practice or am I approaching this paradigm completely wrong? This code works and accomplishes what I want it to do, so it falls under working code as per the site guidelines. If I invoke the exported functions in a one-off script however, the function will execute and then the script will hang because was never called. As far as I can tell from the mongoose tutorials, database code is supposed to be wrapped within a call, though I am not entirely sure how that works since the code that I have above works fine for database access and update. Should I wrap the functionality here with , and if so, what is best practice for doing so, or should I wrap the calls with in the external file invoking these methods? Is there a better way to do the bulk insert in the function? 

as implemented above is computationally expensive. Depending on your use case, you may want to consider using regex. Don't pad your question with lorem ipsum lol. 

Concatenating the address and postcode seems arbitrary to me, if you did the refactoring as mentioned above, you could shorten it to: 

Comments about the code are appreciated and welcome, but I have a few specific questions about best practices with regards to using Mongoose. 

Avoid using . Try to have your program exit normally. You can just set a condition in your loop. Comments should not state the obvious. Use comments to document things like complex algorithms. 

Anything involving styles should probably be in an external CSS stylesheet. You can paste your HTML into the question and make a runnable snippet so that we can try out your application. 

Welcome to Python, and welcome to Code Review! Here are some basic tips to help you along. 0.5. EDIT: I think you also have an unused import. is not needed. 

If you want, you can always refactor functions like so that you type less. Something that I see a lot of people do is: 

You could probably put that in a helper function somewhere. Have you considered using an XML parser to tokenize this? Or using the native JS DOM to store your generated HTML? 

Consider using a style guideline like PEP8. This is more of a general suggestion and will make your future code much more readable and maintainable. Consider defining all your constants at the top of the file. This makes them easier to find. In other languages, you cannot use a variable before you define it, so this is a good habit to get used to as well. Python is a self-documenting language. Generally, in Python and other languages, comments should not be used to state the obvious. Use comments to explain algorithms or non-trivial aspects of the code. 

LOL. Technically not infinity, your program would theoretically end if I played until the heat death of the universe. It seems like you're using it for a infinite loop. Why don't you use a loop instead? An infinite loop looks like this: 

Generally speaking, anonymous (unnamed) functions are completely acceptable within the land of Javascript. They are used frequently and without prejudice, so don't be afraid of them. That said, I'm not a fan of the second code sample. Without an understanding of the jQuery API, I don't really know what the two functions do to the hover call. Are both called, one after another? Perhaps something else happens? The name doesn't really give any clues here. I think a great option here would be to combine the two samples. Use the anonymous functions of the second with the explicit naming of the first. Furthermore, it should be noted that according to the docs, is shorthand for and , not and . I'll let you read over the docs and decide which of the two you decide to go with, but ultimately I recommend going with something like this: 

"want" / "did" "want again" / "did" (active) "want" (active) / "done" "want again" / "done" (active) "want again" (active) / "done again" "want again" / "done again" (active) 

If we consider these two buttons a state machine, we see that there are six simple states (not including hover). 

Furthermore, It segfaults on me when I give it lines longer than 119 characters. (But this is probably system dependent). 

To guard agains the previously mentioned bug, we need to check if not null. I'm including only the function. 

I have little experience with python, so I can't offer critique on the finer points of your code, just the big picture. That said, several things stick out to me. First, you have some large chunks which are duplicated two, three, or even four times (see lines 198-215). Scour through the code and extract these into their own functions. Second, several of your functions are massively too long: (161 lines), (97 lines), (228 lines). , once you get rid of the previously mentioned duplication, could easily be broken into two functions: the finding and the scoring. is too long simply because it contains all of the input handling. The section within the block starting at line 435 absolutely should be its own function, if not more since it clocks in at 144 lines. Finally, and this is more observation than critique, your classes do nothing but operate as organized data structures. This isn't necessarily a wrong approach, but it would look good if you were to refactor your code to be a bit more object oriented, especially since this is intended as a code sample. 

You are caching , but really, it's not complex enough to warrant caching. I did some quick and dirty testing and found that you save about 10ms per 1,000 executions. That is not worth anything here. So, to reduce code size and bug potential, I suggest removing all caching. 

Proper Indentation. You shouldn't need the comment. Just indent that entire block. needs a statement. You wrap your code in a function, which is good, but you need to call that function. The last line should be 

Finally, you have several magic numbers. To make code maitenance easier, define variables for constants like colors, strings, and timeouts. 

is always one less than size, so you don't need that variable. Just replace all instances with . Similarly, could be replaced with . 

But having a list is just fine. Not knowing anything else about your requirements, I would leave it the way it is. The thing that really sticks out to me in your code is the use of a callback as a parameter in . Since this function is not asyncronous, I would ditch the callback and either log the error directly to the console or just throw the error and let it break the build. If you really want to provide a mechanism for reporting configuration errors to the user, then rename "callback" to something akin to "errorHandler". The use of the name "callback" usually signifies a function that will be executed once and only once, will be executed when the function has completed, and will not return a completed value but instead pass the value as an argument to the function. Also, I find it surprising that you do not log the time to the output of the file or console logger. Not a big deal of cource, it just stuck out.