Quite simply, is there a way to adjust the default value of the FailPackageOnFailure task property to True instead of the regular default (of False) for new Control Flow Tasks? Here's an image of what I'm talking about: 

In case this helps anyone else, an alternative approach to the using double single-quotes to represent a single single-quote in a string is . That sentence is hard to follow, so as an example: can be represented using this approach as 

This may work for you, but by no means do I consider it elegant (or even good for that matter). First, configure the server to log all successful and failed logins. 

There are a number of ways around having to do this after every failover, but the way I prefer in this scenario is to backup a SMK from the current primary node in your Availability Group (AG), and restore that to all other Instances in said AG so your SMKs match throughout. Once this is done, you may need to run the above statement against each db that's not sitting in a read-only state on any Secondary Replicas so that any encrypted data will be readable after any future listener failover events. The whole point of having an AG is the ability to perform a quick and transparent failover, so a shared SMK shouldn't be considered a risk in my opinion. This article goes over this and walks you through things in much more detail, but take some time to set this up so you can take full advantage of Availability Groups. 

This is a shot in the dark, but since I've seen a number of scenarios where this has fixed odd errors in SSMS 2016, close SSMS, clear out all temporary files using the Disk Cleanup utility (cleanmgr.exe), start up SSMS, and then try this operation again. Worst case you're no better off than you are now, but you've got a little more free disk space. 

Yes, 64KB is still the current recommendation as it has to do with partition alignment. To quote Jimmy May from the the SQL CAT team: 

I fully expect down-votes on this, but deprecated doesn't mean discontinued. When a feature is deprecated it generally means that said feature won't be expanded and will likely be removed in a future release. According to MS documentation RMO doesn't show up under features that were discontinued in either SQL 2014 or SQL 2016, but again I wouldn't count on it being available going forward. The point here is if you've already got something that works using RMO with SQL 2012, see if it works in 2014 and continue using it. No point to reinvent the wheel if you don't have to. Who knows, in 5-years-time you may no longer use this application, this back-end, or even this approach. It's also entirely possible that RMO could turn into something similar to the sysindexes view that was deprecated way back in SQL 2005 but is still in SQL 2017 by the looks of it. In terms of an official "supported" approach, Merge Replication, as stated by Bartosz X in the comments is your best bet, based on what it sounds like you want to accomplish. Some additional searching on DBA.SE or Google should get you going. 

Here I have highlighted three problems which can occur, how can we enforce integrity here. PS Is there a name for what I have described? I assume in maths there are some terms for this, I did some research around ordinal numbers but it doesn't fit exactly into this. Describing this as just a set wouldn't allow for the issues I raised to be assumed problematic. Thanks 

I managed to find a workaround for this but I am not very happy about it. I installed my previuos setup which was EasyPHP and copied my old MySQL *data* dir into the EasyPHP *MySQL* data directory. This time around the database was able to read the .ibd / .frm files correctly.(even though these files did not change at all) I then used phpMyAdmin to export the database(this time around all tables/data was stored in the sql file) I then disabled EasyPHP enviroment and started up my new enviroment and used phpMyAdmin->import with the new sql file which loaded the data correctly. Overall I think its pretty poor that MySQL cant simply output some type of notice stating that the .ini enviroment variables are not set corresponding to the .ibd / .frm files rather than just output incorrect information and leave the user in the dark with all sorts of angles to think about. After googling around it seems many people seem to believe that their data is corrupt when that's really not the case. 

I seem to have came to a problem which I am having trouble solving, possibly because I have misunderstood intersections properly(or perhaps I shouldn't even use intersections for the goal). If we have a year table and use its primary key id in our intersection table to link to one actors primary key id, How can we populate the actors_nickname table before hand using one primary key id (to group together the rows)? which we then use after to populate the intersection table? year 

In other words, car or serial can only be inserted once for any one pid. Thanks PS, Sorry if my explanation isnt so clear, I will have to re illustrate, possibly by finding a better example too. 

We have a table which has a column defined for set(to group rows) and a column defined for hierarchy(order position), how do we enforce hierarchy ordering position integrity within each set? An example of what I mean. 

Inside the import file each CREATE TABLE statement is suffixed by IF NOT EXISTS, so why is this being reported as an error? I have tried to take out the table reported from the sql file, but then the next table just throws up the error, and the next etc until we have a sql import with no tables left. I am using Windows XP with MySQL 5.5.37-win32, these versions could be different from the versions used when creating the backup, would this matter? Thanks in advance. Edit : Added SQL code. This is just a sample, the code is created by phpMyAdmin's export function