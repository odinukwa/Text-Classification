Preferably though, the method shouldn't return anything that can be modified. I wish I could create it as an instead, however, that would not work with your method. As I do not know how you intend to filter, I chose to keep the . The filter also doesn't seem to filter, but rather seems to remove items from that list, so without knowing how you are using it, I chose to stick with . 

In the , this counter will be decreased, and if it reaches 0, it will fire the eventual real callback 

A similar system can be created like this (note, this is not with loading scripts, but just setting timeouts, however the principle is pretty much the same, also note that the order of loads is not necessarily the same as I typed them, it's important to node that keys on an object don't have a guaranteed specified sequence. 

Why do I bring this up, well, some argue that one should only see 1 var statement per function inside javascript, which will contain all the variables that will be used through the function itself. For your code, it also makes some sense, as you define several times, nl here: 

The reason for this reduction is because of the following (I am assuming that your values inside the array are the once that should be outputted) 

I hope it still brings you something (yes, I know, I posted 1 year after the original question or something), however, I felt it was a good practice for me as well 

Explanation of rewrite The biggest change would be here, that the function gets wrapped, and called from , which you would then use inside your code If you look at it, it works slightly different, nl: 

Another approach for this would be to not catch any errors at all on the backend, let it fail, and let it return the full failed response. Asp.net has ExceptionFilters that can handle potential errors a lot better than how you have handled them here. Related to this, the code on the JavaScript side seems to completely ignore potential errors, there is no check if your text contains the message, so how is a user going to know that it failed (true it could be missing from the review). Your JavaScript also has some interesting code, nl: 

You also define some variables only inside the for loops and although in most languages that would be fine, in JavaScript 5 they don't belong inside the for loops. ES6 really made huge improvements by adding the block scoped keywords and , so if you would have the chance to use them now, I would really suggest you do so. So as a rule of thumb, keep all definitions on the top of your function, or where you define the first variable. Extract similar code to functions Code duplication is one of the most annoying things in a code base that you could have. Even if you know your code perfectly, still changes to certain parts of your algorithm could be forgotten if you copied the code to other parts. One piece of code that could definitely be extracted into a function, would be this beautiful block of duplication 

Ofcourse, as Vogel612 metnioned in the comments, this is not the most optimized way. I just presented it as a way that it contains less code, and that it is separated in single utility functions. The code from coderodde is ofcourse lots better. Instead of deleting my answer, I will simply add 1 more version how you could do it by using ES6 and classes 

According to your specification, a keyword is defined by a name + a number. It can ofcourse be that eg: would be followed by a number, if that would be the case, I think you could add a comment to the array why these appear to be different as specified. Variable naming I think, in general your code is quite confusing to read. You seem to be using rather unusual names for your variables, some examples: 

more about plugin creation for jQuery can be learned here Currently, I believe your method takes a bit to much control, and as a user of the slider function, I cannot really do a lot. I can only start the slider, I do not have any actions available to me where I could stop the slider (eg: ) or decide how fast it should slide, and though you offer the it is completely unused at the moment. There is also no way to interact with the slider from a different place in your code, to for example show a specific slide on the click of a button. So I think your plugin is to much in control. 

Commenting your source code The variable naming make your code hard to read, one constantly have to jump back an think, what was that variable used for again. I hope you are still active here, and that when you re-read this code, you also feel like, wow, I should have used way more comments. Of course you should not comment every line, but at some point you could give a reason why you first want to know what is largest array, before your real code begins. I sometimes explain above a for loop in a one-liner what my code should do and if I have exceptions where I ignore certain values, I like to mention it if it isn't clear from the code, but then from an observer perspective. Some observations Finding the longest array element in your array could be handled lots easier. I rather have the feeling that either you wanted to test playing around with the or 

You have an array called keywords, which you seem to use, however, it doesn't match the current given specification, nl: 

True, the code is longer, however, it's commented, there is a clear definition of what the function will do, and what the user of the function can expect. Splitting up single parts of your code into there own functions is a good way of structuring your code, and promote re-usability. Now, another instant observation I might have is your interesting mix of different for statements. Especially seen that they are so close together, I really wonder if there was a reason for you to mix it up, or again, you felt like experimenting different forms of iterating an array 

If my above reasoning is true, you shouldn't really care that it is a specific word, and only the is the one that could be found. If you however only want to filter out those specific 4 keywords, well, you could either make sure your array only contains those 4, or you could check if is one of the four you are checking before checking if it's part of any of the sub arrays Observations on the code from an observer view I cannot really say why you need 4 for loops to iterate the array, and even if I could, I don't know why you wish to start from the largest subArray. This would definitely need some commenting from your part. The loops are a real killer for performance, I don't know how many arrays in array your code will have in the production environment, but I can see this become problematic with larger arrays-in-array. The code, as mentioned before, is very hard to read, and it seems to contain much experimental code, from reading it, I am even unsure if it does what you specified. For example, from your spec, I wouldn't expect to be in the output, as it occurs in all subarrays Your code can definitely be refactored into several smaller functions, and with appropriate changes, it is also possible to reduce the nr of loops it uses. If you would have future requirement changes that adds keywords, you could get unexpected results with keywords like or . I feel like the checks you are making to ensure it's a keyword are insufficient. Even more interestingly is that you never seem to check if your keyword is actually followed by a number as you specified. I am not a huge fan of regexes, but this seems to be a very good place for you to use them ;) After re-reading your specification, I think it should simply say that it should return all keywords that don't occur in all other arrays. Suggested rewrite In the end the rewrite took a bit longer, cause I was still fighting with the specifications, nl the first one :) However, here is a rewrite which tries to offer some explanation. I moved the variable definitions to the bottom of the script, as you can clearly see the code at the beginning then. I also added comments to the code, however not as excessively as I could 

Suggested rewrite ES6 If your code base is not to large, or if you are willing to put the time in for refactoring, I would suggest you wrap fetch with your own function, like in the following code sample. You know that will return a , so create your own version of , which you could then export if necessary, and redirect your files that point to the functionality to your own implementation. 

Another important node is that this code will wait for each to complete. However, it will not block any of your code. Hence, you will see in the console before any other message. 

I personally feel this is appropriately flexible for any response I would like to use, and I can add a resource key for translatable messages in the message string. If the request fails, it's easy enough to construct my response with as a value parameter. An advantage of using this setup would be that you can use the in the following way: 

This would now be an abstract class (ie: a class that cannot be instantiated), from which the method has to be implemented still. Also note, that this change means that all methods now changed from modifier to the modifier In the implementing classes you can then implement something like: 

It returns it's own promise, and uses the . In case the result is returned (or another error is thrown), the is called and the promise gets handled by either resolve or reject. In case the interval occurs, the promise gets rejected, and the is also called. Note that if you run the test (at least the es6 one), you can see the time it took before the timeout occured, and it will not run longer. Neither does the then method of the fetch still execute. It is true however that your httprequest will still be open, but I don't think that should be such a huge problem, as it will not interact with your own code anymore. It is still important though to handle the catch of the fetch and pipe it through, so that the interval gets cleared, but that you also get notified of the other errors that might have occured during the request. 

You are right that you have code duplication where no duplication should be. As far as I can see from the code you have posted, nothing really changes if you would write a class that would handle it as a , since all the properties you are referring to are available on the (except for , however this could be retrieved through an extra method implementing it) So you could write your class more like