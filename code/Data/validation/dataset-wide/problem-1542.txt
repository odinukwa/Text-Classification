I wouldn't go that far. I think that the code generally looks fine. Style The indentation and spacing is generally fine, but sometimes it is inconsistent (2 vs 4 spaces, spaces around ). validate I would validate right in the constructor instead of in a public method, because someone might forget to call the method, and then you end up with an invalid object. And as has side-effects (it doesn't just check the string, it actually changes it), I would add a JavaDoc comment. removeSameWord Is this method really needed? Your database schema should be able to use a unique constraint to not allow duplicate rows. Or, since you are using , you should also be able to just remove it completely, since merge updates existing entries. Naming 

Unnecessary Operations in Loop You also have some operations which you perform quite a lot of times, for example . You could extract that to directly inside the x loop as well. Unnecessary Function calls Function calls aren't free, so in performance critical code it might be a good idea to avoid calling the same function a bunch of times. You could for example try to save the result of in a local variable. Data Structure Transformations You perform a lot of transformations from one data structure to another. For example, is a linked list, which you then transform to an array, which is then transformed to a float buffer. Try to reduce the amount of different data structures you use. Misc 

For a first project, your code is pretty good. The structure and formatting are fine, and your code is generally quite readable. You also didn't make any really bad beginners mistakes like having SQL injection vulnerabilities, etc. 

Your constructor also defined etc without using it. If you want to stay with your approach, the assignments should look like this: Input Checking Right now, you just accept anything the user passes. For example: 

Your Code If you have so many checks, it would be better to sort them in some way. For example, first all the ifs, then the ifs, then the ifs: 

Then just hash the supplied password with the salt from the db, and compare the result to the password from the db. It might look something like this: 

Variable Names There is no good reason to abbreviate variable and method names, but it does make your code a lot harder to read. 

is a placeholder for any string (you would use for numbers), and it will be replaced by the rest of the arguments for . The advantage is that you do not have PHP variables/function calls inside your HTML/SQL/etc. join You can read about join here and a bit more in-depth here. Your query should look something like this: 

Security Use prepared statements. Classes are reusable, so even if the id is not user provided right now, this may very well change in the future, making your code vulnerable to SQL injection. Naming is rather vague. What details? Additionally, usually signals that the method returns X, which isn't the case here. Your comment is a bit better, something like might work. I would prefer something like , , or more explicit . General Structur should be private, right? As for the general structure, it's fine. I would probably separate the object from the code retrieving it from the database like this (pseudo code): 

The improvement to your previous question is that you are now successfully encapsulating mysqli, instead of exposing part of it by returning mysqli related objects. I still stand by my previous answer though: Your function still doesn't make it easier to write queries, and it abstracts away essential functionalities of mysqli (ie prepared statements). With your function, your code looks like this (I cleaned it up a bit): 

I put the in there for strict checking (), just in case someone adds a to the whitelist. Alternatively, you can just hardcode it: 

Naming Many of your variables and function names could be more concrete. For example or , , , , , , or are very vague. 

Initially, the code is a bit more complex, but it's more reusable and adding new items is easier, if that's something you expect in the future. If you know that the only difference in the keys is always going to be in the first two keys, you could also handle that as a special case, remove it from the array, and use for the rest. 

Without the validation for directory traversal, this is basically just a renaming of , etc to . I'm not sure it's worth it. You do save the file exists and is file checks, but you have to check the return of the include call anyways. It does however give you one central place where all includes take place, so if you do want to do additional stuff when including (like checking for directory traversal or normalizing paths for different OSes), it wouldn't be bad to have code like this. 

Still, even for a single page, using global is not a good idea. In combination with your deeply nested code, it makes it very hard to see what is actually going on. And that has a direct impact on security. Just seeing looks nice. It's using prepared statements and everything. But what is really? It's this: 

I would prefer to not use a static variable for this, which you could easily achieve by passing the animation object to the panel: 

I wouldn't worry about that. The definition of MVC has changed over the years, and the approach(es) that are generally taken in web applications are quite different from the original approach. All major frameworks that I am familiar with sometimes have a controller decide what view to show (the add/edit cases are classic examples). Router Your index file is your router, but it is very primitive. Specifically, you will have trouble changing how your URLs look, and you have no input validation. Right now, a user can create arbitrary objects (whose constructor accepts an array), and then call arbitrary methods on it (without arguments though). While difficult to exploit, this is certainly a security concern. For an idea of how a more rounded router might work, see here (I'm linking to my own question because I could easily find it; the code is certainly not ideal, but it shows the basic idea; you want to have a central point where you define what route matches which controller methods, and you want to only allow those to be called; you even get primitive input validation (eg string or integer) of arguments for free). Controller I would pass the arguments to the method, not the constructor. Currently, you are working on a magic array where you have no idea what it may contain. This makes it very difficult to properly operate on it. Debugging, validating the data, documenting the code, and reading the code all get more difficult than necessary. So it might be: 

toString I would expect the method to print the current state of the object (the current value of the address chunks). But yours seems to always print static data (the methods name). 

As soon as you print double digits, your pyramid doesn't look quite right anymore. This will only get worse with three digits, etc. But if this wasn't a concern in the question, then your implementation looks fine. Naming @Heslacher already mentioned , but all your other variable names are also not expressive: , , , , . You should avoid using one-letter variables except in a very limited number of situations ( and for loops in case there is no better name, and for coordinates). Better names would be: 

Security You should use prepared statements when putting variable content into an SQL query, and you should encode special characters when echoing variable content. It' hard to say if this is actually exploitable at the moment, but I could imagine various possible attacks, eg for SQL injection (a simple attack; depending on the allowed characters when registering, this might be a bit more complicated): a user registering under the name (assuming that the admin is named , this would not be a duplicate name, and it would result in this user gaining admin privileges). For XSS (this is a little far-fetched, but still): create user called , then - if there is no CSRF protection on the login - log the victim in as that user and make them visit that page. Misc 

If you want to add error handling, each approach would have additional ifs. So you can see that you are not actually making it any easier to write code, but you are changing the well known mysqli API to your custom function, and you are making it impossible to write secure code, as prepared statements cannot be used with your function. So instead of your approach, you need to use prepared statements. If you still want to wrap mysqli, try to do it in a way that actually makes writing queries easier. Note though that the mysqli API is already pretty good, so it will not be that easy to improve upon it. Misc 

Additionally, an attacker may be able to read from and write to any file in your system, depending on the database permissions. The proper defense against this is not escaping, but using prepared statements. Comments Your comments are largely unnecessary or could be unnecessary with better code structure. Something like or is not needed, as the code is self-descriptive. Something like or should be in its own function, eg or . This would also get rid of the duplication you have (the select queries). Misc 

I would also rather use a loop for the menu than using your recursive approach. Single Responsibility Functions as well as classes should only have one responsibility. You only have one class, so it obviously does everything. Your function for example handles the game loop, gets and checks user input, applies the input, updates the game, and prints. Don't Repeat yourself You have the functionality of counting how often a character appears in a string twice. Just extract it to a method. OOP Java is an object oriented language, so try to make use of this. Using is always a sign of bad design. There are situations where it does make sense, but every time you use it, you should think about it. Try to create more classes. It's better to create too many than too few. At least I would expect a board class, a class handling the word management (reading and writing to a file, etc), a class handling user input, a class handling output, a game class, and maybe even a word class. Type of You don't care how often the guessed character is in the word, only if it was in it at least once. So I would make this a boolean. Variable Names 

If you don't have a very good reason to use goto, just don't use it. It generally leads to bad code. What you have is basically this: 

You'll notice that this doesn't actually work! The reason for this is that strings as well as true evaluate to true with weak comparison. So instead, I'll need . And I will need to remember to use strict comparison each time, as I will otherwise have a - possibly quite serious - bug in my code. The main problem is that you are sending error messages via the same mean as your return value, which just complicates things. There are three different solutions that come to mind: 

This could be further simplified, and the other queries could be added as well, but honestly, I'm not quite sure if it wouldn't be easier to change your database schema. I'm not quite sure how it currently works though. Misc 

Naming Variable names should help a reader understand your code. They should be as expressive as possible. 

I would pass the object to the class in the constructor instead of using . It looks cleaner, and it would make writing unit tests a lot easier as well (you could pass a connection to a test database without changing the code or mock the PDO class). It also has the neat side-effect that you are able to define the type and thus enable auto complete. Misc 

Input validation Don't let the user input invalid values. If your canvas starts at 1, 0 and below should be invalid. And Bucket fill should notify the user in case they fill directly on a line (or outside the canvas). Also check if too many or too few arguments were supplied. Other than that, I second what Schism and jsanc623 said. 

I generally like your code. It's very clean, and easily readable, so just a couple of small points: Security 

Method If you have a validator, I would expect a method to check if it is valid. If you add an method, you would get rid of the check, which isn't a good idea. It exposes how the validator works internally, and relies on this never changing. Type Why is your error message a String? You are creating a new and calling every time an error is appended. Just make a or and call when the error message is retrieved (which should be done via a getter, not direct access). Naming : What this actually does is Spacing I know it's knit-picking, but please follow the general conventions regarding spacing. Before and after , , and should be a space. General Idea I'm not too sure what this is good for (maybe I'm missing something?). It doesn't seem like the class can be reused for any other data. The three fields and their types are hardcoded, as is the validation mechanism (no empty string and no null allowed). Couldn't all your code be replaced with something like this: