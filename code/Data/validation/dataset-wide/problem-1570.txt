EDIT You ask why ? It is a 'co-incidence' --- (NOTE: A really, really mysterious one, needs more investigation): 

Of course, this is all reinventing the wheel.... There's a really cool bitwise implementaton using fancy masks and shifts, that can do it really fast. It's already implemented in: See Source code (HD is Hacker's Delight book): 

Note how much more logical that main method is. Digits In this case, because you have to transform from different digits following each other on the line, and because each digit spans different lines, I would probably create a "Digit" class which has a method "getRow(x)" where the rows are from top-to-bottom..... For example, the Digit will output lines like: 

Multiline text processing takes some getting used to. First up, if you are going to do multiline processing, then you should read all the data in to a String, and forget about Scanners, etc. 1-line-at-a-time processing is convenient for many reasons, but mostly to reduce the amount of data in memory at any one time. Consider the following: 

The first run, of 10000 values, took 24ms. After a warmup, it took 9.5ms... and as part of the increasing data sizes, it took 9.5ms again. Using arraycopy, it becomes: 

initialize the starting capacity of the StringBuilder to match your expectations of what size it will need to be. In this case, you know the GUUID's are 36 characters long, with a comma, makes it 37. You should initialize that StringBuilder to . Similarly, if you have an approximate size of the average length for the other Stringbuilder, then double-it, and use it as the initial capacity constructor. If the loop happens (very) often, you can get a very slight performance improvement by doing the following (removing the if condition from inside the loop): 

Conclusion Between these three (.5) suggestions (board initialization (and dimension magic number), Random, and Buddies) you should be able to reduce your code size massively. 

First thing you should do is only write the file out once, not 20,000 times ;-) Move the to be outside the loop..... Additionally, there may be some improvement by reversing the loop: 

Overall I feel the concept is unnecessary in a disciplined environment, but I agree that asserting a different protocol for applications may be useful. Note that there are a couple of drawbacks to your approach: 

This code is right on the tipping-point between abstracting the values to a loop, and manually unwinding the loop. To show what I mean, this is a different way of writing the function: 

I believe the only decent solution would be to do something like guarantee sequential processing until the data leaves the phase, and then add a map phase at that point which numbers the that exits at that point. 

While this method for pre-validating the graph may, in the long run, consume (slightly) more time than a single global graph-validation, it will allow a number of other processes to make better choices and assumptions. Being able to guarantee an acyclic graph at all times is very beneficial. 

The above creates successively smaller string values, and compares the difference in length to compute the result.... Sometimes Plan C is the better option. With the help of Konijn we/I have put together this jsfiddle which shows it in operation. 

The code you have is nicely formatted, and well documented, etc. ... but, as a singleton, it has a number of problems.... The two most glaring are: 

limited stack depth (someone gives you a 1MB palindrome String to check!) iteration is simpler and faster less stack management and garbage. 

the rules are sorted at pre-process time. some rules are in multiple sets of operations. instances are compiled just once, not at use-time. 

Note that all the methods are now static (there's no need for any instance data). The Coord class is static, and the row/col fields are final. I have put this all in to Ideone, and you can see the results there 

As for your code, I understand why you have variables with names like and , because those are the variable names used in the problem. Those variable names do not conform to standard Java naming conventions though. They should be meaningful names, and start with a lower-case letter, like , and . the fact that my code below still uses is not an indication that it is OK .... Do what I say, not what I do... 

If there is an error in there, you log the error, and then immediately will panic when the next line runs: because buffer will be . Hmmm... I looked at the code, and no, the panic won't happen in the next line, but in the following one when the image is manipulated: code. Now, the consistency is also a problem. You declare the return value to be called in the function declaration: If you use a named return value, then don't have return values in the return statement. Also, no need to have a return as the last statement in the block. Logging some errors to the console, and not others, is also inconsistent. StdErr Use the standard log functions to set the output destination of log messages $URL$ and then don't use the option in each call. 

What if you are using a small mobile device to access things? What if the clutter simply overwhelms the rest of it, and the point of your program is lost. That is what has happened here 

I timed this method against yours for a few sizes of data here in ideone: $URL$ Note the timing results: 

You claim that your "code is a generic approach at providing code that can be trivially multithreaded to run these calculations on a ". I see a number of problems with this statement.... most obviously, you are not using generics at all, even when they are needed, as is a generic class, and has compile warnings when the generic type is omitted. The second issue is your claim that it is "trivially multithreaded". That is an oversimplification. Your code allows the filter to be run in the background, but the filter is still single-threaded. Using the as a barrier for the background thread is convenient for a one-shot implementation, but your model for running the code, by creating a 1-time use instance, and getting the results asynchronously, is limiting. It should also instead use the native Java paradigm of a instead of a custom "API". In other words, your class should instead have the following sort of API: 

About Comments in general OK, comments are supposed to make plain what the code does not tell us already. Let me say that again. 

Your code only works for small values of N. The algorighm is effective, but unfortunately your overflows are real. Factorial numbers get very big, very fast... I think it is around 12! that you run out of space in a 32-bit integer, and about 20! that your run out of space in a 64-bit long. You need to convert your logic to use BigInteger instead of Long for it to work at all. 

Input Parsing. You declare a to process your input, but then you don't use it very effectively. Your code: 

then use the and methods.... You should, if you can, make the whole class final as well, to prevent people from making sub-classes of your queue. Then, in your methods, synchronize on the queue: 

I was brewing an answer to this question at the same time as the others, and it overlaps a lot with Syborg's .... but, it is different enough to present it. The reasons why this is an improvement over your code is that it has just the one variable. Additionally, it has tight loops without conditionals. Even though there is an outer loop, in many instances (long strings of words with few spaces, or words with many huge gaps), the tight loops will make the code highly optimizable. So, here's how I would code it (note that Java is my strongest language, so I normally get help with C....). 

How do you use an array of char as a stack? Well, you add the chars from the input string to an array, and as you do that, you increment the index in the array, so you are 'pushing' to the end, and then you can pop from the end to get the reverse mechanism. Now, a quick way to create and push the chars from the input, to a stack, is: 

At worst case, now, the only risk is that the mail fails to send. That should be logged in a reliable way that allows you to (manually?) identify, resolve, and resend the mails. Note that a failed mail will fail whether you mark the Campaign complete or not, and repeatedly resending the mail will not make it suddenly work. There is no reason to save the campaign after the mail-send. 

The above constructor calls the second one with a null value. Boolean expressions are boolean. If statements test a boolean condition. Why do both? 

Hmm.. I was expecting this to correct the errors in the 'randomness' too, but, now I see the problem there.... you are using , and not . Float has relatively low accuracy. If I change this line here: 

But, your indentation seems to die inside that loop. Makes it hard to read. Also, you should have a mechanism for the stript to take the argument from the commandline, and only prompt for input if there was no commandline argument... 

Conclusion Putting all the above together, I came up with a main method that inputs the solution constraints and handles a non-solution too: 

you cannot use it as a Key in a because, if the value changes, it will break the internal hashing in the map. similarly, you cannot store these rationals in a . If you sort your data, the order will change if you change a Rational's value. The instances are not thread safe. serializing the instances is a problem. 

Now, you can call that method with either the or the top nodes... but, that method really belongs on the stack itself, not outside the stack. Move it to the stack, and it becomes: 

Regardless of which system you use, you should choose the one you understand best. As for the example code you posted, I think the nit-pick I have is that you do two scans through the input. One to count the sections, and the other to parse them. The second small nitpick is the use of the variable which is initialized to -1. Really, the variable is the 'start-of-word' variable, and the first character is . So, initialize to 0, and then when you do the substring you can just use plain and not . Then, you set y to being the start of the next word, which is . This is a small criticisim though. There are two larger issues I have with your code.... Firstly, it took me a while to figure out that without the at the end of the is a critical component to your loops.... without it you miss the last value. This is a problem because such an important thing is likely to be missed. I think the algorithms above are better for the reason that there is no need for this 'hack'. But, even if you need this hack, you are not documenting it well enough. It should rather be done like: 

Self Review python code_with_bad_style.py You should consider using some docstrings. Docstrings are multiline comments that explain what a function does, they are of great help for the reader. They look like the following: 

Your code looks fairly effective, but it could be a bunch more efficient if you rearrange the code a bit, do some pre-processing, and reduce your run-time checks. Let's go through that in order.... I recommend a 'set up' stage to your code. Consider an ideal situation at runtime, the code would look something like: 

The above solution can be extended easily (in ways the AtomicMarkedReference cannot), for example, creating a Condition on the Lock would allow you to have a blocking get(), and other neat tricks. 

In other words, the values have to appear next to each other in the data.... ... this was not explicit in the question. Later comments indicate that the sequence can 'skip' values. The rules for 'skipping' appear to be that you can skip any value that is smaller than the first value in the sequence. The above example, if you include skipping has two additional solutions: 

Note that the first generic is a self-referential one, and has the pattern . This is how self referencing generics are done. The most important part about this declaration, is that it declares ourselves! Now, with that declaration, we can reuse the generic token in other parts of the declaration. For example, here: 

Note how the IOException is still thrown out the main method, but also note that I am using the try-with-resource options for a try-block to ensure the files/streams are closed. The above code does not strip any line-terminators, and writes the output with the same termination as the input. 

My Review: When writing programs they should be able to take command-line arguments specifying the input files(s) to process. Your program hard-codes the name to require . Many of your functions immediately split the lines and process them. Since this work is repeated many times, you should probably split the lines once, and then, instead of passing in the raw code, pass in the lines instead. Additionally, for UNIX-like conventions, you should process STDIN if no file is given on the commandline. On the other hand, it worked well for me when I figured that out. 

and then don't reference and in the constructor at all. Node Your node class has an instance-pointing variable that you never use. Your node class is a nested class to LinkedList. Because it is not static, the Node class has a pointer to the instance of LikedList that created the node. The Node class can then reference the variables inside the LinkedList instance that created the Node. You never use this feature, so you have 'baggage' on all your Node instances that is just deadweight. You should declare your Node as a static class, and make it Generically typed. Do not use T as the generic type though because that may lead people to think that the T is the same type as the outer LinkedList... when they are in fact not the same: 

then the numbers will wrap neatly. Now, if you take that example, and extend it to start at a certain day of the week, you can do: 

Fast comes at a price.... code complexity and perhaps readability. Assuming that your code produces the right results now.... and it is a big assumption because: 

You can actually do something similar (though more complicated) for the initial two conditions as well.... ( and ) but for just those two cases, it may be simpler to leave as-is. 

With a slight shift in the way you think of your search method, instead of updating the number of paths, you should instead think 'how many paths from here?' Also, lets fix the static variable issues too (we will need two methods for this):