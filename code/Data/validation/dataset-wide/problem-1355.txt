There is a more general way to do it, but it involves a dynamic query..... which is messy, and may not be better than what you have. Any time you involve a pivot, you are going in to the 'ugly' territory. First though, some other comments: 

print statements in a loop line-by-line parsing of input mid-list removals of values () not enough functions 

The use of the Tags field on the Post is a poor choice for the query. It relies on a table scan, which is slow, because it has to check each question. Note, you can use the and characters to identify tag start and end values in the Tags column, but, as I say, don't use that column. Instead, you should do a join with the and tables. Using a CTE to simplify that query makes sense. I really dislike the all-caps style of SQL, but realize that there is no standard. If you can change standards, please use lower-case for keywords... it makes the column and table names much easier to see (and those are the important parts). Still, you get +1 for being consistent in your capitalization. Consistency is really important, and you nailed it. Note that the table has no deleted posts, none. There's no need to check the at all. So, joining Tags to PostTags gets you minecraft-tagged posts. Joining that to Posts gets you the ones you can test scores and closures on. Here are unclosed, low-scoring, minecraft-related posts....: 

There can be a lot of permutations, and the numbers get large fast. The actual formula is a factorial, as in \$n!\$ where \$n\$ is the number of values in the set. If there is one member, there is only one permutation. If there are two, then there are two permutations. Now, the way to visualize it, is that, we know there are two ways to arrange two members.... with three members, we start building permutations... take the first member from the set, and there are 2 ways to arrange the remaining 2 members. Then take the second member from the set, and there are two ways to arrange the remaining 2. Finally, take the last member from the set, and there are two ways to arrange the remaining 2. In other words, there are \$3 \times 2\$ permutations. If we reduce the logic down to just one member in the set, then the actual sequence is \$3 \times 2 \times 1\$. Then, if we add a fourth member, it becomes \$4 \times 3 \times 2 \times 1\$ Factorial numbers get large, fast. So, the following factorials are 'realistic' (for an arbitrary definition of realistic): 

Should return true if the tree is balanced, but, it takes a node in, computes the height of the left and right sides, and compares the differences. This method is broken.... Just because the height of each side of the tree (left, and right) are similar, does not mean that each side is also balanced. Consider a tree like: 

I believe you are missing a relatively obvious, although somewhat memory-inefficient .... Consider this: 

Update: About the as a global... is a slice, not an array. As a slice, it consists of a lenght, capacity, and a pointer to an array. Let's assume each of those are 8 bytes, so that's 24 bytes of data that a slice represents. It is not a problem to copy that data as a parameter in to the method. Read up about slices here: effective go Eseentially your performance concerns, or memory concerns, are not an issue when copying the slice, because you are not actually copying the array, just a pointer to the array. 

You could do that if you converted to be an enum (which I recommend you do). Note that I have changed the Error to an Exception too (with a decent message). I would be really tempted to suggest a Java8 function though, instead. Something where you have a constructor for the Operator.... If Operator was an enum, and took a , then it could be simple... 

The concept you have going is 'OK' (cumbersome, but for a beginner it's OK). There are two bugs, and one recommendation that will help a lot. First the recommendation.... Change to be a boolean value like: Then, your code becomes: 

Now, set a break-point in (I use eclipse) your IDE, and then run it, and you will see that hexAddr contains a char[] array for the entire line, and it has an offset of 3 and a count of 7. Because of the way that String substring and other constructs work, they can consume huge amounts of memory for short strings... (in theory that memory is shared with other strings though). As a consequence, you are essentially storing the entire file in memory!!!! At a minimum, you should change your code to: 

The solution to this problem is easy, once you know the trick. The trick, is to calculate the sum of all values then do add/subtract until they match... This is very different to what you have done, so it does not really make sense to review your algorithm, and then say 'you did it wrong'. What I will do, is say your code is neat enough, and the logic you have done is visible enough, to make the algorithm clear. Even though it is not the best algorithm, you have implemented it well. The problems with your algorithm are that you are doing the following: 

There's the potential for integer overflow when calculating the mid point. This is a 'famous' bug. Your code should be done as: 

With the above file, I would calculate it manually.... (also using the documentation here: $URL$ ) I have taken the liberty of programming it myself.... since the recommendation is sucha deviation from your solution, it makes sense: 

Loop 1 is at index 0. When we apply as the source index to our relocation function, the result is the value 0. It is a single-item loop. Loop 2 is at index 1. Look at the index 1 sequence: 

Right, that shows some familiarity with Java 8, some language structures, code discipline, and so on. What about the actual sort algorithm? 

See it for yourself Note the multiple temp tables, and the variables for the pivot, and the query. Ugly, but it may give you some ideas. 

The efficiency of this check must surely be suffering because of the final check.... create a String for each four-some, and compare it against a reference String. In general this will be slow, but, in particular, there can only be 9 reference strings, so why do you have to calculate it each time? An array with these 9 values would be simple to create, and then you can just say: