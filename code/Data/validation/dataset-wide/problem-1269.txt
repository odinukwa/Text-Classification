Please read up on the capitalization conventions: methods -- for instance -- should be PascalCase. But this method name also exposes how deeply your application logic is tied to your UI, and that's a bad thing. If you had used WPF, you could have implemented MVVM but this kind of separation is much harder to do in WF. 

Start from there, and create small methods. Also find out which part is slow. Right now it could be anywhere, and since we don't know how much data this code is dealing with. You might even need to rethink the whole SQL Server part if the slowness is caused by the need to keep everything in one transaction. But first split up your code into smaller chunks and determine which part is causing the slowness. 

Why do you use ) when you don't do anything with ? Why not use ? Oh wait, I see, you've called your collection -- a bad name, since this doesn't tell me it is a collection of lines. 

I took a little time and wrote the following code to produce enigma encryption. I don't normally write code in C so I would like to get feedback on the way it has been structured and any issues a more experienced C programmer might spot in the way I used structs, command line parsing, and the indexing around the strings to replicate the turning of rotors. I did not create a separate header file since the code is so short I thought it would be best to just have a single file. 

Turn off screen updating in excel. Set the calculation mode to manual if you have other formulas and you are changing range values. If possible load all the data into an array and only write it to the sheet once. 

In looking at your code, it seems well written and solves the problem in a straight forward manner. The one thing I would do is to remove the else after your argument check and remove a level of indent. That just helps to keep things flat... Flat is better than nested. Now onto optimization and potentially making it more complex than it needs to be in order to make it faster. In these problems it seems like a reasonable thing to do even though....Simple is better than complex. Here are a couple things I looked at as potential issues: 

is a bad name, is even worse. I have no idea what this represents. I also have to object to , especially when . 

Note that local variables should be camelCase: decimal Value = numericUpDownFull.Value; string Label = Value.ToString("C"); Moreover, "Value" is not good enough a name, ditto "Label". I don't see any need for "Label" anyway, since it is only used once: . 

EDIT: To provide some guidance, here's an example of how I handled a similar problem. I had to call a stored proc in an Oracle DB, which required a number of parameters. So I created this class: 

What if the order changes? Also, this makes it hard to figure out which parameter is connected to which field. 

This is still a fairly short program with limited functionality, but you could already consider moving both the logic and the logic each in a method of their own, perhaps even to a class of their own. Keep your lean and clean, use it to stitch together the various independent parts. Ditto for the output part: move that to a method of its own, and provide parameters with all the necessary data. 

I can't really comment on the performance since I found it difficult to read, especially the spaces around the operators throughout the code. As you mention though, I would focus first on cleanup and applying PEP 8. There are many issues with spacing around operations, spacing between/after definitions, line length, etc. That would help with the readability. The other part that seems difficult is the "main" logic near the bottom. It is good convention to place that in a "main" function and then use the "if main" at the bottom. So you would have somethning like this: 

Unfortunately I was not able to get the code to run and produce any results even though I adjusted it to load the data file. It just returned an empty dict. Rather than try to figure out why, I took a look at the things I would change based on reading through the code and just made those changes, it seems to work after I did that, not really sure what the cause was but I did do the testing on Windows which may have had something to do with it. Here are the things I focused on: 

Four capital letters in a row -- as in "SQLPlus" -- goes against Microsoft's coding guidelines. It is expressed at length in the old version: 

Shouldn't that be ? The rest of the exception message is also wrong of course: . A similar error appears just above it: . It looks like you copy-pasted the earlier checks for and and didn't change everything that was necessary. 

Quite frankly, this still doesn't satisfy me. It feels inelegant. But at least it is much more readable that the original, because you don't need to parse 20+ lines to discover that two separate processes are happening inside that . BTW if was a HashSet, you wouldn't even need to do ; 

I would even consider using the correct types for () and (), though that seems to be a bit OTT for your purpose. 

I have had significant speedups when doing those from inside Excel using VBA and outside over COM using python. Here are a few snippets on how it is done, I used the Excel VBA syntax although you would want to adjust them for your code. 

For speed comparison, I did an example sheet with ~ 16000 rows, I read two cells, added them together and wrote them into another... it took about 4 seconds (Excel VBA). When I convert using the mentioned array method it completed in far less than a second... To show it using com, here is an example using python, the set each 'cell' method takes about 27 seconds on my machine, the set a 'range' method takes about 5.3 seconds, ignoring the 5 second wait so you can see the sheet, the 'range' method is many times faster: 

If you want to keep it a method, you'll need to change its name since a method name should contain a verb. More worrying to me is that you repeatedly call this, so it is repeatedly calculated, but this is pointless since won't ever change. Right now if is 10, gets called over thirty times! If you don't need to expose this it could simply be a private field which you set in the constructor . Even if you need to expose it, I'd still advice you to set a private field in the constructor and have a -only property to expose it. 

First of all, there's the inconsistent behavior: in one case the is either or it's an empty string, whereas in tow other cases it's a name plus a relevant suffix, e.g. or . Equally inconsistent is how you fill : this can contain or an empty string. That's not an expected behavior. Also, it's bad enough that a bool has to be converted to a string, so why not use the available tools, i.e. change this line to ? 

When sorting by multiple keys, I need the second key to alternate between standard and reverse sorting. This is to minimize the change in the second key. For example, if I have a list of dictionaries, I want the first sort (group key) to be sorted and then the second sort (sort key) to alternate. This should produce a sort like this: 

As was already mentioned, I also am not crazy about -1 return, I would rather see it raise the exception rather than an odd exception later about integer subscript so I removed the try/except negative 1 return. Here is the code I came up with after applying the changes mentioned above: 

That limits the change in the field called "sort" as it alternates each time as the "group" changes. I have looked around and did not see a standard way to accomplish this without rolling my own. I think the code is fairly straight forward but curious if I might be missing something or an easier/faster way. Any comments would be appreciated. 

I don't think is a good class name, for one it is a plural. It can also be simplified by using Auto-Implemented Properties, e.g. 

What's the point of ? As it stands now it is a barely-there wrapper around with a built-in connection string(!) and some odd behavior when you call . You claim this works, are you sure -- because why wouldn't throw an exception if there isn't an open connection? 

But MSSQL isn't one acronym, it actually consists of two: MS and SQL. And there's a word missing: Server. So it should be MsSqlServer instead of MSSQL. Also, I don't know of any rule that explains why MSSQL should be converted to mssql when camelCased. 

Much of your message is also repeated in the various parts. Each of your contains ", you have a", each of your contains a ".". Those should be moved to the line that generates the message, perhaps something like this: 

When doing the , you are calculating the power of each digit many times. If this was a much more expensive calculation then only calculating 1 time is even more important. In this problem there is a conversion from int->str->int. If you can breakdown the digits without converting them it saves some time. It seems like a good thing to know how to do just in case your ever trying a different language where skipping those transitions may be even faster. 

The other part is a little trickier but in my experience is extremely fast when doing it inside Excel. Perhaps this concept could be applied to your code. 

The second part is a little trickier, what it does is uses math.log10 which gives a count of the digits, then it does a mod 10 to get the right most digit, looks up that power to add to the total and then finally does integer division to divide by 10 effectively moving the decimal place 1 position to the left (dropping the right most digit we just dealt with). This is probably a little different between Python 2/3 due to changes in int/float division. It is basically doing what you are using to do but without converting to string and adding the power of 5 dict lookup as it goes along: