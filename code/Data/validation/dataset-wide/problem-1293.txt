If there were any errors from the code in the , enter the respective . Once the is finished, set the new attempt amount Go back up the to the loop and try again. 

If for some reason something started to hang up, maybe your browser or your client's connection to the server, a thread will stall, and it will cause other threads to stack up because one is created every 5 seconds. It would be safer to move this line to the end of your function: 

should have scope identifiers. Judging by your use for these properties, I'd say you should give a modifier, and the rest modifiers. 

This line is moving a pointer to a memory location into . However, this subroutine is supposed to add numbers together. If it was meant to add numbers together and then put the result in memory, then why isn't it doing that at the end of the subroutine? In my opinion, you should move the first line out of the subroutine and to the first line after the subroutine call (and before ). That way, the subroutine is doing it's job of adding two numbers together, and the routine is doing it's job of getting two numbers added together, and then putting that sum in memroy 

Can be simplified if you store the buttons in an an array, and then loop through the array as you add them to . This looks just like the code I wrote in the last recommendation: 

Notice how there is no at the end of the conditional? JavaScript already checks to see if the conditional reduces to automatically. Now we have to find a way to set the other two values in the object to in a DRY way. I think it would be best to create a function that takes in one argument that is the name of the property that should not be set to false, and then the function sets the other properties to false That would look like this: 

First off, you need to do some error catching with the socket functions. All of them can possibly fail, it's better to be safe and do some error catching. Here is what I mean: 

This field would most likely be set to the right level in the constructor of this player object. Now, your code is faster because you don't have to keep calling that method. Also, it looks much cleaner in the form of a loop. 

Documentation syntax For each subroutine in the code, I created a short documentation following this syntax: 

With this design, nothing is leaking out into outer scopes and you can keep all the logic and state together. 

This is not an appropriate name, nor is this variable used anywhere. Looks like you meant to delete this. While on the subject of deleting unused parts, you should go through and delete all of your commented out s and excess/unnecessary blank lines. 

Catch a more specific exception. Looking at the documentation for , the exception that would be raised for how you are opening up the would be an . 

Next, we want to restrict this directive to elements-only. This means that this directive can only be an element: it's not supposed to be an attribute nor is it supposed to be a class. This step is relatively simple: 

You have a lot of code here, and you are repeating yourself in a lot of places just like you did in the example above. I recommend you take this idea that I showed you above and apply it to rest of your code. 

In Java (and most every other language that I know), it is bad practice/a bad idea to reseed the random number generator every single time you go to use it. That is what you are doing here: 

Element Sibling Insertion ID's versus classes/names/tags In the earlier part of my answer, I stated a big problem with your function returning different typed values. The problem is evident in this function: 

If you are going to use a coordinate system for your board, then I recommend that you prompt the user for both the numbers at once, perhaps delimited by a comma. An example of user input would be: 

Why did you all of a sudden change the pattern? In my opinion, you should be using the pattern that you used in option because it is clean and spread out, rather than jammed into one line. 

This may not be more efficient than juvian's answer, but I think it's a lot cleaner to use ; it's usage, as the name suggests, it to filter elements out of an array, which is exactly what you are trying to do. 

You should split up your code more. In specific, I recommend creating a method for running/playing the game. And my main reason for this is unit testing. Right now, your code is automatically going to read from via a . This does not make your code very testable. How can you write automated tests if you have to type in all the input yourself? If you do split the code for running the game into a separate method, make sure to have this method take in, via parameter, a stream/scanner. Tests will pass in streams with preset strings and, when a user is going to actually play your game, a stream reading from will be passed in. Note that, if you do this, the method may/will also need a parameter specifying the output stream so that the tests can read the output. 

Variable names @dec already touched on this a little bit. Variable names are meant to describe what that variable is to be used for. Letter variables(such as a, b, and c) don't really describe anything. Also, (dec mentioned this too) don't use take a variable name, drop a letter, and create another variable with that new name - it makes your code confusing as the purpose of the variable is un-clear. For loop I notice how, in your 's for loop, you kind of split it up. You had the variable being declared, defined, conditionally checked, and incremented all in the signature of your for loop. But then you declared a variable outside of the loop, and incremented it in the body of the loop. Why don't you just put in the signature along with ? This: 

Your client JavaScript indentation is very, very messed up. I can hardly understand what's going on. Some lines are missing an indentation, and some have an extra indentation, or even an extra space (which is extra very messed up, because you are leaving the alignment of a tab/indentation). Everything inside the very first function should be indented one tab. Everything inside the 's second parameter should be indented another tab. Everything inside 's first parameter should be indented another tab. Here is your tab code cleaned up: 

This string comparison isn't very efficient. By the looks of it, you are trying to use this property as a flag. Instead, you should use an actual flag: set a boolean data attribute on the box to tell you in the future what state the element is in. 

Now, I would go through how to fix these individually, but looking at how you are using these variables, there is no need. Again, each of these variables all contains the same exact image. And, the only time you are using these variables is to print the image out. Here is an example of one place: 

Normally, itself can be slow. However, this jQuery function is even slower because, not only does it have to traverse the DOM in search for a single element, but it also has to wrap it sugar another object for access to more methods/properties. It'd be better to reduce your calls to this function. Instead, store the return from a single call in a variable and use that: 

Everything inside your should have a single indent, then everything inside this class's methods should have another indent. I do not think that it is very next to remove the indentation from the code inside the class, because it makes it less clear what code belongs to what. 

Your class really isn't/shouldn't be a class. All it is doing is returning a value; why isn't it just a normal function? 

Why do you need 8 different variables holding the same image to do this? Why can you not just use a single variable? You are wasting so much space and time to store these and the way you are using them is super overkill. All you really need is love one: 

The same recommendation I wrote about the other pictures applies to the ones at the end of this file. 

Power (look-up) Table! Looking over your algorithm, I see that you are using a lot. While this is a nice method and it is helpful, it can be very inefficient (especially if used too many times). Focusing only on , your algorithm does this: 

When you are using string formatting to put the number into the image name string, you should be using or because those are for signed decimal (base 10) integers; is used for strings, which is not. 

See how your big was reduced to this? I figured that, since return the button that was clicked, you could just access the button's properties from that. Then, I saw that and had special cases so I created specific cases for them. I also made one more improvement: rather than storing 

Reading the docs, it says that the method accepts an index. This index comes from the second parameter of which you are currently not using. That means all you need to do is start keeping track of the indexes. In order to keep track of the indexes, class names, and CSS rules, simply create a look up table and use a counter for the indexes: