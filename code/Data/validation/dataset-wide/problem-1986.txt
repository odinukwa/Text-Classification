Apologize. Give a new estimate. Meet that estimate. Do not explain the failure, but emphasize that the software will meet whatever quality and performance standards he needs--in other words, re-emphasize the sales pitch that initially sold him on your team. Earlier is better. 

When you write your own home-spun code, you are recreating a lot of the functionality in these frameworks. It may be more efficient for you than learning the framework, but it is rarely more efficient for larger groups. Your code will be harder to maintain and harder to change. Many corner-cases covered by the framework will produce bugs when your code is used in the wild. I'm not a big fan of any of the MVC frameworks myself, and I've moved to a focus around particular tools (ReactJS for instance), but the argument is largely the same. If you are using HTML/CSS/JS/jQuery and PHP/MySQL for a greenfield project in 2016, you are far behind the times for a good reason, and as good as you may be with these tools, you have much, much more work to do. Look forward to endless cycles tweaking your code for every device out there, look forward to endless hours wrestling with your PHP security issues, look forward to maintenance headaches on every database schema change and look forward to headaches when you need to use websockets at scale. Then, look forward to re-building an iOS app and then re-building an Android app, mostly from scratch. People have been here before. They have made better tools. When you consider scaling, security, maintenance/total cost of development, cross-platform compatibility, mobile apps, extensibility, code re-use, bringing new developers on board, automated testing and future proofing. You're weighing all this against a snapshot in time of your personal skills. I'd take where you are now as a starting point, and learn why these new technologies are important, and what they are offering you. 

An interview is a two-way street. Simply put, he failed. I'd move on. Do you have any reason to believe his opinions will change once you're hired? Or that they're limited to this one tool? It also sounds like he is only marginally competent at diagnosing problems. Everyone working on projects has to have a good way of dealing with failures--not every project is a success. Successful places learn--correctly--from their mistakes. This increases the odds of success next time. Blaming the wrong tool? Doesn't sound like that will help. 

I don't think there's an issue with appropriateness, but there may be an issue with relevance. If you're managing a remote team, it's obviously relevant. If you're managing people face-to-face, the only opinion on this that will matter is that of the interviewer. The skills in managing remote and local teams overlap, but aren't identical. Given a choice between online and offline conflict resolution, I imagine most people would pick offline if the job is face-to-face. If you do go with the online example, I'd be prepared to give an offline example as well. 

Vacations are no longer black holes. Email your boss out of respect first, indicating that you will notify HR but such and such a time if you don't hear back, with a note understanding that it's only because he's on vacation and may not be available. Then notify everyone with a cc: in a email to HR. Your company will have specific notification policies, but almost certainly have slipped into a gray zone given this 3 month hiatus. A respectful notification to your boss will keep that personal bridge, and notifying HR will satisfy the company's expectations. 

Your client will be the most important person to impress. Their words back home matter--and their dollars matter even more. Genuinely care that you are doing the right thing for them, especially if it's in a way that is profitable for your company. That contact person needs to sing your praises. Do the big job, the one that matters most on their side. Once you get in and they're comfortable with your work, ask them what keeps them awake at night. Address that. That's the problem they think is both critical and hard. Make sure the work is solid. Don't do what they ask, do what the ask and what they need. Make sure the work is visible. Every job has touch points to the rest of the organization, if you look hard enough. Make sure you know the people ultimately impacted by the work, and what they want from their perspective. Don't assume your client has. Lunches are great for this. 

I think you're feeling guilty for no reason. Most professionals are expected to keep pace with many areas in their field, even those outside their immediate work. Developers should be aware of trends and improvements in software design--very much has changed in the last 3 years. The fact that your company may be steering in this direction means someone there has been sold on the idea that things can be done better. You can contribute to that discussion, and the person who is advocating the new stack will be glad to hear it. What could be better? You have a developer in house already who is familiar. It doesn't mean you'll be transferred to work on it, but certainly someone may want your perspective. 

Take your car to a professional mechanic, don't mention it to your co-worker, and never hire a co-worker again. Eat the cost for a lesson you won't soon forget. It's not wise to do business with co-workers, relatives and friends precisely because things can go wrong. If you had hired a professional, you'd have no problem addressing these concerns. 

What you're actually proposing is founding a start-up. You can announce it as such on LinkedIn and call yourself "Founder/CEO". What you want to do is quickly test an idea, and see what you can learn from it. Your learning is then a list of technical skills. Then you look like an entrepreneur, not a slacker. Leaving your job for personal growth is why people go back to college. That's an explained gap. A unexplained gap in your resume will appear as involuntary, which is not good. This all said, given you're not progressing now, I question whether this time will be productive. You'll need discipline that seems to be lacking over the last 750 weeknights and 150 weekends. Have you considered a coding academy? Scheduling time as if this project were your job? Getting some traction before quitting? 

You're being set up for failure. It's not intentional, it's a by-product of poor project management and a lack of accountability. It's surprisingly common. Be vocal and visible. It is your responsibility for making sure that the project manager / lead understands what you need, and that you don't have it. When someone tells you they should be ready "maybe next week", email that to your manager and the project lead, cc'ing the person who made the comment. Don't be passive-aggressive, just state facts: "I just spoke with Bob. He expects to have the xxx I need to get started on yyy next week." It's okay to state your realistic timelines. No one can expect you to finish two weeks worth of work in an hour. One week's worth in 4.9 days? Certainly. If you're slipping into an unrealistic timeline, let it be known immediately. "I expect to have yyy completed 2 weeks after receiving xxx". People do expect you to know your timelines and report them accurately. Get started with incomplete information. Is there really nothing you can do? Many projects change and require iterations where the data is updated. Are there spreadsheet formulas or programs or anything you can do with materials you fake just to get something accomplished? Something that will save you time once the real materials come in? Make yourself useful. Can you help in another way? On another project? Organizing something? Make sure your supervisor knows what you're doing and why. You're not running the company yet. Someone is responsible for ensuring that you're contributing to the progress of the company--probably the person who justified your salary by claiming there was too much work to do. Ask your supervisor what needs to be done given the absence of information. If you get the blow-off answer of "we're looking into it", just put that in email. Seeing things in writing often helps people to feel accountable for what they're saying. You'll get a better answer.