Generally, in WPF, widths and heights are not explicitly stated. You should try to use relative and automatic dimensions where possible (which often requires choosing the correct container). For instance, you could use relative sizing for your grid columns: 

What we are looking for is the least common multiple of all natural numbers in the interval , so we'll need a method to generate them (closed means including both bounds and the numbers between): 

And ta-da, you've got your input, parsed as the desired type. But as you also noted in the second half of your question, it's dangerous to assume that the input will always be valid. There's a universal version of your insist-on-valid-input function too. However, you should avoid using exceptions for normal control flow. Use the methods instead. First, define the following delegate that matches the method defined in all the primitive types: 

We simply ask the game for the current player and prompt them to make their move. Note the high level of these method calls... there's not much of an implementation visible here, just a high level view of how the program flows. We'll keep asking for a move until the user enters a valid one: 

If you're into LINQ, consider this alternative function. It's more concise, but it sacrifices some readability - I think the above is the better solution. 

Notice that you don't need to hang on to an array or list of numbers; you can track the statistics as you add numbers. Please also note that all this code knows nothing about validation or input/output: all it cares about is tracking statistics. Next, we'll need a collaborator that validates our input. Because I'm assuming your validation requirements are likely to change, it makes sense to define an interface ( means there can be validators for any type of data, such as strings, integers or floating-point numbers): 

You could encapsulate the conditions in a class. Note that the fields are of type to avoid overflow when calculating whether triangle inequality is violated. 

After quite a bit of refactoring, we arrive at the below solution. If anything needs to be clarified, go ahead and ask. Refactored example All methods could have been made static, however I suspect you will change the base class - to which VariableDeclarationParser has no dependency at the moment - to a more useful one that provides a method that can be overridden. 

Almost all of your comments can be made obsolete by choosing proper names and generally making the code as expressive as possible. IMHO, we should avoid comments that tell us what a particular statement does, rather we should use them only to clarify why we have made an unusal decision. Or, to put it like Uncle Bob, I view every comment I write as a failure to express myself in code. So I deleted most of your comments from the refactored version below because the names now stand for themselves, without the need for further clarification. Dangerous and unusual things 

Stating Your Requirements It's important to have a clear defintion of what you want to achieve before you start writing code, even though there are many different ways of achieving that, for instance by practicing Test-Driven Development or writing a formal specification. The important part is that without a clear definition, you can't validate whether you're done. In your case, the question contains a description that is completely different than the code and quite unclear. The above is vital even if you're only writing the code as an exercise for personal use or learning. Testing and Edge Cases In the following code: 

Use list comprehensions and generator expressions to your advantage Use the function with a generator expresssion to verify that all answers are in the specified range 

Conclusion Without a clear explanation of what you are trying to accomplish, how the input data looks and how you define a paragraph, it's impossible to show you a better way of solving the problem. 

All in all, I don't consider this exercise to be effective in showing if someone is a good programmer or not. The object-orientation is contrived; a static utility class would be a lot more suitable for task. Who wants to instantiate a new object for every download, especially when none of the features of object-orientation (inheritance, polymorphism, ...) are used beneficially? 

Why are you storing and seperately to begin with? Instead of storing using four properties, use only two, storing both Date and TimeOfDay inside them: 

For an arbitrary number of least common multiples, we simply aggregate them using LINQ and package the logic in an extension method: 

A note on Performance If you have a small number of relatively short files, your current approach should work. However, it's suboptimal for larger amounts of data as you need to execute your program once for each file, always keeping the entire file in memory. However, you should not change to a more complicated approach unless you experience serious performance issues. In that case, you should explore (which will only read a few lines into memory at once) and (which allows you to process several files at once (you'd have to use temporary files to store the results). 

I made it iterable so I don't have to constantly write things like . Here's the itself – please feel free to point out any or all issues you can spot. I started taking a look at Python two weeks ago, so I'd also appreciate your comments on how Pythonic (or not) this is, as well as any potential issues of performance. 

Others have written in detail how you can improve your exception handling, which is really important, but your core logic can be reduced to the following: 

A move is allowed if the game is running and the cell we are trying to put an X or O in is empty. You can only make a move if the game is still running. If we don't have a winner after making the move, the next player's turn starts: 

svick's observations are spot on, however I suggest you go a bit further in your refactoring. Suggested Refactorings Naming 

Theoretical Background The fundamental problem Programmers like to think of themselves as smart. We tend to solve a problem, marvel at our cleverness, and leave a mess behind without even realizing it. It's only when we revisit our code later (often in the process of trying to add a feature or fix a bug), we realize that reading and understanding code is a lot harder than writing it. There's often too much information to comfortably wrap our heads around. We then write comments (in your case, almost a comment per line) to help make sense of the whole thing, but in doing so, we add even more information, and this time there isn't even a guarantee for reliability or truthfullness: comments go off faster than milk left out of the fridge at 40°C, rendering the "information" they contain obsolete. Even worse, comments are often redundant. It's as if we are writing everything twice! A good programmer is a lazy programmer in that she never repeats herself. (Comments do have their place, for instance in the documentation of public APIs and explaining particularly weird decisions we made.) The solution In order to cope with complexity, we need to split it up and simplify it as far as possible. In other words: Divide and conquer. If our classes are small, we can easily spot the responsibilities. If our methods are small, we can easily discern the flow of control. If our lines are short, we can make sense of the statements they contain. Conciseness isn't the only thing that matters. It's even more important to choose proper names. Without proper names, we are constantly decoding and reconstructing the information that should be apparent from reading the code alone. 

In order to find a more elegant solution, we first need to identify the problems; only then can we solve them: 

And that's it! This is all that goes in the class. (I called it because that's my personal convention, but is okay too). What happened to the rest of the code? In , we're really only interested in the rough flow of logic and handling the input, so the other responsibilities have been delegated to . One of the problems with your original code is that it only has two classes: and . But those are too many responsibilities bundled into one. Tracking game state 

As svick suggested, use LINQ to SQL. The entity classes and stored procedures (, ) can be generated automatically in the ORM designer. Here is how your code could look like using LINQ to SQL (adjustments may be required): 

That way, you don't seperately have to set all the labels to and all the buttons to , just remove all occurences of the following two attributes: 

Code structure Readability, maintainability, reusability: you should strive to achieve these three goals in your code (apart from correctness, of course, which goes above all else). One problem with your code is that everything happens directly inside . You should delegate the bulk of your work into helper methods: 

The implementation calculates the correct result (232792560) in less than ten milliseconds. In less than half a second, you can find out the answer for an input of ; The solution is over eight thousand digits long and therefore somewhat outside the scope of this answer. 

Your code works, but its quality leaves some room for improvement. It should be simplified by refactoring. Here are some suggestions: Naming Even if it is only an exercise, utmost care should be applied when choosing names to make sure they are descriptive and clear, but also to comply with coding conventions: 

Probably irrelevant side note: If you were using Java 7, and EntityManager implemented or one of its various subinterfaces (such as ), your code could be even cleaner using the new try-with-resources statement: 

If performance means anything to you, use , as Guvante suggested (don't forget to add to your project references and using directives). As an added bonus, can handle both negative divisors and arbitrarily large divisors (tested it with a 128 bit long divisor, worked fine). There are a few other improvements to be made to your code. You needn't define a char array for the alphabet, better just use a string constant - you can still access the characters by index. Also, avoid converting to from reversing and going back again. Instead, let the parameter be of type from the beginning and then, if needed, reverse it using (it actually mutates the array, so you don't need to assign a new one). Putting it all together: Usage 

Following my suggestions, you could arrive the below solution. Note that the semantics are insignificantly different (the match is performed regardless of the validity of the domain), but readability and simplicity is substantially better. 

The simplest way I found to find if any of the values is as long as is a binary search, which only works when lengths are sorted. You could use a loop just as well. In game, we sometimes have to check if a cell is empty, so we check if it's on the board and, if it is, whether it is also blank: 

The criticism is justified in the sense that your constructor shouldn't do any complex work (such as file downloading) at all. So just set the two fields and be done. The file download should be explicitly started after creation of an instance. The try-catch at the end of your constructor does hide as . Avoid ever throwing if it isn't right at the start of your method, or you will confuse your callers. Remove all this as you shouldn't be doing the download in the constructor anyway. You are right: is not an adequate return type for . In this situation it would have been important to demand an explanation as to what kind of return is expected! However: if you change the method to return , you also need to change the name as is no longer an accurate verb. I'd simply go with . This may be a bit subjective, but I wouldn't specify Exceptions in the clause unless they are checked exceptions and therefore have to be included. So I'd leave out the . The criticism was presumably referring to the unclosed output stream: 

As an interesting exercise in Python 3.3, I implemented a Trie (also known as a Prefix Tree). Example usages Create from list of key-value-tuples 

Usage is never printed Your program is supposed to print the usage instructions if the wrong number of parameters ist supplied. Check what happens if you run it without any parameters: 

Criticism Concept An important idea in software development is that code should be reusable. Your code seems like a specific application of a general idea that applies not only to throwing the dice but just as well to tossing a coin or drawing a card (and gathering statistics). So you should consider designing your code in a way that allows it to work for all these (and other) scenarios. That is to say, the number of elements in the input sequence (currently 6) and the element names themselves (currently ) should be configurable by the caller of the code. Separation of concerns I'll keep this part short since Alexandre has already elaborated on it. Just remember a few key points: 

Performance The difference is huge (running without the debugger, compiled in release configuration, timed with a ; ). With eleven characters of input running one million times, is 7.5 times faster: 

I hope you find this review useful. I've tried to clearly mark the parts that are purely based on my opinion. Having spent a couple of hours on this, I'd appreciate some feedback in the form of votes and comments. And sorry for not linking to the more advanced concepts I touched upon: you may need to Google a lot of things. I'll try to come back and put in some links some time. 

I can't comment on how secure your code is, however there are a couple of other problems that I would like to point out. Clutter Your using directives can be cut down to: 

A lot of effort went into transforming your original code into this readable and expressive form. But where, you ask, has all the code gone? Let's go step by step. Because I have split everything into separate methods that each do one thing only, I've promoted the local variables to fields. There's your familiar Scanner, plus a reference to so I can use the short form and drop the (I find it more convenient, but go with what you feel most comfortable with). The methods that are called from all look pretty much how you expected them: 

vulnerable to SQL injection you need to take care of messy details, such as concatenating a query string you aren't calling on the (should be in a using statement) the using statement will close the connection for you, no need for the call everything is much longer and more complicated than it needs to be 

Scroll back up and look at our while loop in . So now it's clear: the game is only running if there isn't a winner yet and the board is not yet full. Otherwise, it's ended. 

I actually find the if-else very readable, so I resisted the urge to incorporate Jeff's concise answer. In my opinion, the more elaborate version is clearer about what it does. I renamed all your controls to follow the naming convention (because should be reserved for type names, etc). 

Extract your redundant generator expression to a function so it only occurs once. To preserve flexibility, introduce as an optional parameter This makes the comment redundant because is a self-documenting name (you could call it if you want to be more explicit), so you can remove that Rephrase your docstring to make it more readable: normalize and with a slash don't make sense together PEP 8 suggests not to align variable assignments, so does Clean Code by Robert C. Martin. However, it's more important to be consistent within your project. 

And to print the board to the console, is overridden (so will print the game board in its current state): 

If you're looking for something a bit more radical in nature, why not let handle several sequences at once? (Note that unfortunately, you cannot combine default parameters with sequence-unpacking in Python 2.7, which has been fixed in Python 3.) 

This will de-clutter your file and allow you to re-use the styles in other windows. Collapse empty tags (use the self-closing syntax): 

Input Processing This will properly validate the input, and I made it a bit more readable by extracting a method for getting the next integer. I have to admit I'm not a big fan of but it was the simplest and most readable thing I could come up with. Note that each method has its own, clearly defined task: the method is all about validating the correct bounds (and doesn't know anything about your ) while the method is all about retrieving the next integer from . 

Your code tells us otherwise. You are not removing the lines from PYGR to MCG; your code removes the word PYGR and every character that follows up to one character before . I assume that is not quite what you were trying to achieve? If you update your question to explain if you are trying to remove everything between (excluding) and , including one of them or including both of them, I'll gladly adapt my answer. For now, I will assume the latter. Edit: All right, in accordance with your comment I have changed my answer to replace all text from (inclusive) to (exclusive). Reviewing your code Readability