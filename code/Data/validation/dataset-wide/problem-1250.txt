the next two lines have been moved to the top of the Class - it's often good practice to have your variables at the top of the definition so they are easier to find. Also, this is the bit that uses Regex as mentioned above in the imports at the top of the code. This line removes everything that is not a space or an alphabetic character. For example, if your sentence is "The cat is big, fat and hairy", if you try searching for "big", using your original code, you won't get a result because the word stored in would be "big," not "big" 

See my explanation above about converting strings to lower case earlier on In the statement you now only have the one instead of two statements. This will again, in larger programs improve performance. In this code it's simpler just to keep adding the variable. The method could be confusre with an array or some other collection, so it is better to use .There is no need in this case to have the extra check with regard to the adding of commas, Just trim off the last comma after the loop has completed. 

This function only needs the one line as only a local variable and you don't really need it in this case as you can directly return the results of the function. Also, this is the point where the string can safely be converted to lower case. Rather than have the program doing several conversions in the search loop, it is only done once here. 

The type is now modelled as a tuple. I would recommend a case class for it. That allows you have the code in search be more readable. 

For the line and the line are connected. will throw an exception if it is not guarded by . This is a simple example. In more complex cases the maintainer of your code might move some pieces around accidentally breaking the code. If we apply that to splitting the documents into the two datastructures it would look like this: 

It's clear that you took some time to polish your code, good job on that. I like how used method names like , the allow for very readable code. My suggestions (note that none of the code was tested or compiled): It's 'weird' to combine a class and a . A case class gives you a few things for free: 

I recommend the same structure for classes: public (and most important) members at the top. Then (in usage order) the other members. This is ofcourse personal preference. In some cases it's not needed to specify a type. For public facing members it's good practice to write down the full type. For private (and function local) members it's not needed and might actually introduce noise that harms readability. I noticed you are using and a lot. I try to not use them as they require the reader to backtrack to find the type of the tuple that contains them. There are a few techniques you can use to avoid their usage. 

In this situation however, the sub doesn't change any variables/objects outside of itself, so it is fine to leave it as it is. 

Rather than use a loop and still use a variable as an index, just just a loop and use it's index. So here there is no definition of `intIndex1 until the loop here. 

There are a few things I would change. Some are performance related(though in your case they wont make any real difference, its good practice though) and others simply reduce the amount of code. Another change should make your code less likely to not find words. OK Here it is. 

Check if both of your text boxes have text in. If they don't then there is no need to execute the rest of the code, hence the use of . 

This line enforces proper programming practices in the case of type conversions and sever other things. 

The message box in you original version of the code showed an incorrect message. Earlier on in the new code, the search textbox has already been checked to make sure that it wasn't empty, so the Message should simply be that no results have been found. Telling the user that the box is empty would confuse them. 

This line enforces declaration of type rather than having the compiler infer them from other code. You'll get less problems in future programs if you always have this off. 

The class contains quite a lot of public members that are not really suited for public use. It's a good practice to mark methods as private that are only for internal use. This has (at least) two upsides: 

To me it's unclear why the method contains the code it does. It seems the code could also be in the class. Or, the other way around, the code for analysis could be in the factory (or another class). I would not use mutable structures to split the document space and documents containing a word, this is more sensitive to programming mistakes. On top of that it disconnects two pieces of code that are connected, forcing our brains to do more work. A simplified example using option: 

It seems there is a clear relation between a and a , it seems reasonable to expect a factory method. 

In a sense it's strange that a contains a document title. If you look at the method you see it's actually used in a (somewhat) arbitrary way. From the outside it's unclear which document title is returned. Another indication is that the document title seems not to be used in the indexer, it uses the given document title. You might want to consider some members to be lazy. You are now doing work on construction while it might be much later that a value is actually used. Note that this depends on the usecase. 

Prefixing with an underscore is generally a developer convention in Python indicating that the method is private. Given the context of your function, I don't think you intend for your code to be a module whose functions are imported and used elsewhere. Having the underscore prefix seems unnecessary to me. Too much abstraction? 

To invoke these methods, I would then have to export the models to the external calling file, which seemed like bad practice to me because I would then be exposing unnecessary internal parts of the module. My reasoning for designing the module the way I did was so that I could abstract away the complexity and only expose necessary methods. Is this good practice or am I approaching this paradigm completely wrong? This code works and accomplishes what I want it to do, so it falls under working code as per the site guidelines. If I invoke the exported functions in a one-off script however, the function will execute and then the script will hang because was never called. As far as I can tell from the mongoose tutorials, database code is supposed to be wrapped within a call, though I am not entirely sure how that works since the code that I have above works fine for database access and update. Should I wrap the functionality here with , and if so, what is best practice for doing so, or should I wrap the calls with in the external file invoking these methods? Is there a better way to do the bulk insert in the function? 

I would also change to a normal class without title and a lazy field. About the and the , they seem to be the very related. It seems you can construct an instance from an , this would make the an ideal candidate for the factory of . Such a factory is commonly at the companion object. Note that I would personally introduce a case class for document. 

With a case class you say: this class is defined by it's values. With a Traversable you say: this class is defined by it's contents. To me that is a bit confusing, is it about the parameters passed in, or about the contents? 

A few general notes I recommend you to reverse the general order of your code. Most important (or less detailed stuff) at the top. It's easier for readers to zoom in and see the important (public facing) bits. So if you have a program in a single file, put the App on top. Within the app, put the stuff that actually does something at the top of the file. I now have to scroll down and skip a lot of noise before I get to the actual stuff that is being done. 

The method has a comment, requiring the user to do something before it can be used. Most programmers will not read a lot of documentation (apart from Ikea manuals) before using a library. In this case it might be best to help users of the method with an explicit type. 

Again, pick a more useful variable name. You want to be able to come back to this in 5 years and still understand what is going on. Don't repeat yourself. 

It seems like is checking to make sure only one field is non-zero. Here's a quick one-liner replacement. Put the statements outside this function. 

The following is a snippet from a script I have that fetches a list of objects representing requests to a server and graphs them using C3.js. I've only included the relevant code that parses the list of request objects for relevant data. 

Anything involving styles should probably be in an external CSS stylesheet. You can paste your HTML into the question and make a runnable snippet so that we can try out your application. 

welcome to Code Review and the Python language. You're off to a good start. Here are some tips to help you on your way. 

Avoid using . Try to have your program exit normally. You can just set a condition in your loop. Comments should not state the obvious. Use comments to document things like complex algorithms. 

Generally, this is a bad idea and goes against the principle of DRY. An alternative is using a Python dictionary/list to store the hangman states. For example: 

Note that for the implementation of the implementation of (without title) makes things a bit tricky. For that reason I would add a relation in the document space, either with a or a pair. This would result in to be a map . As a result it would remove the call in which could then be renamed to allowing you to remove the comment. The two most common errors by Scala developers are the usage of on options and on futures. The only place these methods are allowed to be used is in test code. If have (to date) not found a valid usecase for either one in production code. There is a small problem in your method: is an integer and thus could result in . In the (and to some extend in the ) you have mixed statements in your code. As a separation of concerns those should be moved out of the code performing the operations. The functional programming paradigm is really strict in this sense and some of their patterns can help you to do that. The book Functional programming in Scala contains a section about this exact problem. Note that I would personally keep the statements in the app constructor and only remove the ones from the document loader (which I would place in a different class). As with all things, always search for a balance between effort and 'ideal world perfection'.