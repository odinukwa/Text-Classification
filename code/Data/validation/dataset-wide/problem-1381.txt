One can consolidate the DOM-ready callbacks (I.e. ) into one, instead of one for each UI initialization call. 

Like ced mentioned, adding a class attribute to the inputs to target could simplify the logic. Then the logic to check if the name of the input is in the array could be replaced by a simple call to . 

Yes, overwrites the previous value each time so after the loop (i.e. the call to ), will contain the value of the last element with class name quant. 

Apparently the elements in your list don't have a unique , but the array index can be used, using the alternate syntax: 

MVC and the variable Considering MVC design patterns, it feels like the view.js file is a controller specifically for the view - A.K.A. a ViewController. Have you worked with any frameworks besides jQuery like Angular, Vue, etc.? I don't see any tags with those framework names in your SO profile so I am guessing not. It seems like the data returned from the XHR might be best stored on the model object. It could store the data locally, store it after successful XHR load and have a function to get that data: 

Initial Thoughts Initially I was thinking of suggesting a view class that could hold the states and weekdays in instance variables, then have methods to get the header for each state and then display the cells for each weekday, but that seems like a lot of extra overhead just to display a table, and wouldn't provide the desired separation of business logic and display templates. Simple improvements As GrumpyCrouton mention in the SO answer, PHP Short echo tags could be used to shorten the inline echo statements (i.e. to ). could be eliminated by using the associative array syntax of 

When would ever evaluate to a -y value? In the code above, is passed, so that seems unlikely. It might be simpler to use a loop. Typically DOM traversing code I have seen would assign the child argument to a temporary variable (e.g. ) and assign the parent node to that variable until the target node is found or the root is reached. 

However I would recommend moving that outside the function because it is looking up that DOM reference every time the function is called. If you still wanted to limit the scope to within a function then you could wrap all of that code in an IIFE, or create a function to get that DOM reference- which internally would look up the element the first time and store it for subsequent calls. For more tips on JS that interacts with the DOM, check out this article. Event Delegate Also, I would recommend using event delegation (I know that article is 6 years old at the time of typing but still relevant). Your post didnâ€™t mention how many checkboxes exist on the page or if they can be added or removed but that can be optimal for memory management. 

Then, (Back in the Javascript change callback) in order to calculate the total price, iterate over the select lists and look for a selected option under each select list. The code below uses Array.reduce() to get the sum of the prices by iterating over the select lists. It also uses the spread syntax (i.e. ) to get an array from the jQuery collection. 

I know the others have already answered the question about techniques for "an easy / faster / tidier way to do it". I would recommend (like in Toto's answer but with if you know for a fact that only one type of space will be used - otherwise use . One aspect of the code I noticed was the manual incrementing of a counter: 

@Roland Illig has a good point: the field names can be put into an array. Perhaps it would be best to use one array for the labels of the fields and then use that array to generate the field names. 

Because there isn't much need in passing the event object in the jQuery wrapper just to get the innerHTML of the target (and as mentioned above, the value doesn't appear to get re-assigned so can be used). For more context, refer to the article below. I know it comes off in the beginning as tough on jQuery but it has some useful information. Stop writing Slow Javascript. PHP Unused variable: It appears that variable is unused. Was that used for debugging, or checking the value of ? Mapping built-in functions The static anonymous that call built-in functions (e.g. , , ) could just be replaced by the name of the function in a string literal. 

Feedback The code does cache DOM references (which I know we have mentioned in your other posts) using . All lines appear to have a semi-colon to end the line, except the one where text content is updated (i.e. ). While it isn't required to have one, it would be wise to be consistent, for the sake of anybody who reads your code/might need to alter it. Suggestions Using instead of If you are going to use , which not then use for the mutable strings instead of ? Setting values Instead of making four click handlers, you could just use the last one to set the values, since the DOM elements are all still present despite not being visible. That way, those variables can have the scope be limited to a single function, and then can be used there: 

Then that value will be available for injection in the controller (this example uses the implicit format: 

Though isn't (currently) supported by any version of IE, so one could either add a polyfill or just modify the original date picker configuration slightly: 

Other suggestion I would advise you to use an event delegate - instead of adding a click handler to each square, add a single click handler for the board and check the target of the event. This can simplify the event registration on elements greatly. 

Image.prototype.createImage() After adding the image to the DOM, this function calls and then . Because of that, it is basically superfluous to add the image to the DOM and then reload the page. That function could basically be reduced to the following, utilizing the function to add the images. 

And the check for the first row (i.e. ) could be eliminated using the :not pseudo-class along with :first-child: 

Then when creating an item, use for the value. Conditional Rendering The error message can be conditionally rendered using (or , depending on how the DOM should be laid out in various cases). Read more about conditional rendering here. That way there is no need to lookup the DOM element and set the style to , , etc. Method context In the method the variable is used, but realize that the method is called in the context of so can be used instead (of ). Computed properties Use computed properties to control values that depend on other values. For example, the button text can be added to a computed property. Remove from and then add a computed property: computed: { button: function() { return { text: this.seen ? 'Hide' : 'Show' }; } } That way the logic for the text property can be removed from the method . Then that method call could be replaced by an inline expression, or else a checkbox could be used with the attribute bound to . 

Then just call that function when necessary. For the case when calling in setTimeout(), use Function.bind() to make a partially-applied function, passing as the thisArg argument, and then as the first argument. 

Though some question whether libraries like lodash and underscore are really needed anymore. For a discussion on that, check out this article. 

So while it may not be any shorter, there is no need to use the operation. I tried using Array.reduce() but wasn't able to find a way to have a one-line arrow function that both assigned values to the accumulator object and returned the accumulator object. instead of I know it has already been mentioned that can be used instead of for some values that don't change (e.g. , , etc.). There are also some block-scoped variables declared using that can be declared using since they are never re-assigned: and . Updated code