With this you can see exactly what is getting passed to your , and you can use this to wrap other components too. 

I agree with what Dan Bovey says, and I would go one step further to make it more explicit and make take a render prop: 

Stop using like that Using in your loops introduces another variable you don't need, and actually makes things slightly less correct. Don't use for prop The prop should be a unique key to identify that element. The most unique things we have about each of these checkboxes is the name that goes with them. If we rearranged this list, we would want the same names to stay checked, not the same indexes in the list. Don't use as an At least not directly. You want your ids to be unique on the page, and using the ids , , , etc. seems like not a good way to be unique. It would be better to use something like so we get , , etc. It also used to be the case that ids needed to start with a letter and not a number, but I believe this is no longer the case. You don't need an extra layer in your state It just adds needless comlexity. Just put the checkbox values right in your state, and only move them when you need to do more complex things with your state. 

As Paul Martel did, I've separated the string representation of the board from the printing. Note that is simply , so replicating suffices. The use of here is because of using rather than . 

Unfortunately, this is a distinct disimprovement. Using raises an exception when it can't parse the user input, which makes it needlessly awkward to use. Rather than messing with catching exceptions, we'll whip up a replacement using the function, which returns a list of possible parses, and use to indicate success vs. failure. 

The module is imported qualified to avoid name clashes with various list functions. I've also renamed to to be more explicit about what it represents. 

Converting the game state functions to use . They're much simpler this way, and some functions I've eliminated entirely. 

The function gives zero-based indexing into a list, so we adjust to account for heap numbers starting from 1. It takes an argument, as noted above. Using --or any sort of indexing into a list--continues to be less than ideal, and a sign that some other data structure should be used. I'll be correcting the spelling of "prompt" as I go, incidentally. Now, we could try the following to tidy up : 

Switching to the current names for these modules. The non-hierarchical names exist only for compatibility. 

I've left the algorithm unchanged for now. It could be improved, as Paul Martel shows, but using lists for this purpose at all is really not ideal. I'll return to this point later. 

Heck, it's so small that I would probably even put it inline, but different people might disagree on that. Revised Version Here's what my revised version of the code would look like: 

Don't modify your state directly In general, it's considered bad practice to directly modify your state object. According to the react docs: 

Ok, I had quite a few thoughts on this. State Your state seems more complex than it needs to be, and some of it is hiding outside of the variable. I think all you really need to keep track of are: - What order the images are in - Which images are currently selected - Which images have been guessed correctly I don't really understand what is, how it's different from , or why it's an instance variable. Extract stuff I think you have too much stuff crammed into one component. I think you need to extract pieces of logic that can be self contained. Prime example: Why is declared inside ? This is creating a new function every time is mounted. I think should at least be outside of this component, and really should be in a some sort of file. Card component I would also extract out a Card component that renders a card. It should know: - What image to display - Whether or not it's selected - Whether or not it's been guessed correctly This way you can keep your MemoryGame component about managing the state of the game while the Card component focuses on presentation. Other Thoughts 

You'll probably reinvent large sections of the standard library at various points while learning Haskell. Figuring out that you've done so is half the fun. 

There's really no reason to use except for number-crunching with small integers. Not that it's likely to matter here, but getting in the habit of using by default means you don't have to worry about bugs due to, say, a counter in a long-running program exceeding the maximum size of . Mystery bugs that only occur on large data sets or after running for a long time are not fun to track down. The only problem is that some standard functions take only arguments for no good reason, rather than any integral type. This is a misfeature of the standard libraries and not one you should emulate. 

A slightly different way of writing the same list comprehension Paul Martel used. Many Haskell programmers prefer using map, filter, &c. directly; doing so, it would look like this instead: 

There's no reason for to take an , so I've removed the superfluous and binding steps. This also allows using guards for the check, removing the conditional expression. 

It's more typical to have begin a new line, in order to clearly distinguish a clause from a multi-line expression. Using tends to be tidier than repeated , and again improving a name--for an arbitrary predicate makes sense, but here we have a specific predicate, and should indicate such.