This is of course fairly advanced coding but it is possible and probably only about 10 lines of code. Like I said you can look at Automapper for some of this functionality out of the box (though I don't know how well it would do with windows/web forms). I will say that what you're looking for is similar to the functionality provided by the MVVM pattern so if you're doing windows forms you can look at Truss. If you're doing web forms...well I wouldn't do web forms, this functionality is already in ASP MVC and silverlight which are both like a million times easier to work with but I remember there being some buzz about the ASP MVP project that would help with those issues. 

** The above code is untested but it should be enough to get you on the right track ** Feel free to ask questions in the comments area 

Finally, you might want to check if returns null and maybe log a warning then as that function returning null would cause a cache miss every time. Now to answer your specific questions. 

we notice a parameter which has two values. we could replace that with a boolean parameter and avoid checking strings and raising an exception 

Before adapting we have a look at the names which are not reflecting reality. the loop shall be because it is a single row. likewise should be as there are several data/spacing/separation parts in there. That said we change to (still not perfect) 

comments and docstrings in you use a parameter choice which is one-based. this is not common and not mentioned in the docstring. so while there is a 6 line docstring one of the most important facts for correct usage is not mentioned. While your parameters and return values are listed by name there is no hint about the correct type nor the value range. 

Note that we also encapsulated all GPIO stuff in this function. there is no neet to initialize GPIOs before outputting. Main guard In python modules may be run directly or they may be imported by some other module e. g. a unit test. So there is a pattern to avoid hassle on import 

Finally, a couple notes on your specific files - you probably want to name those top-level functions even when returning immediately env.js 

In short. No. The mapping between object properties and fields on the form has to be somewhere. What you could do though is to set it up by convention. So if the field on the form had the same name as the corresponding property on the object you could use reflection (or a tool like Automapper) to do that shifting. In pseudo code (because I don't have a set up .Net environment in front of me right now) it would be something like: 

In other words, this methodology is good for idempotent, non-mandatory tasks such as "clean up the temp directory" or "remove any unused profile images from the file system" 

Don't use ids at all. (You almost never should be using them. Ids get to be really problematic once you have composite views and/or multiple people on a project) Place a few appropriate classes in your html. And use the jquery composite and relative references to do it all at once. 

again we do not want to collect all palindromes but only the biggest one. we can abort safely when we cannot get a bigger product than the current maximum one. 

while the big clauses were identical from the start the smaller cases did differ only because of the bad data representation. Avoid error prone repetition of constants now let's have a closer look at . there is one diagonal checked twice, we delete that one. the cause for this error is editing by copy paste and altering values. with a little python list slicing and comprehension we can make this code shorter and thus less error prone 

if you assume a very long magazine and a short ransom message you could go for an early break by counting the ransom first, then do a down count with magazine words. magazine could be a generator in that case reading from an arbitrary large file. 

In your case the testing of the second variable is quite cheap, it is a division only. however there are many cases where testing in a closed form is not possible (modulo operations, ...) or expensive (sqrt, ...). Then you have to try all combinations. But again you can do this more effective by avoiding to test previously known impossible combinations. you fill the sum completely with one type of elements (X) and depending on whether it is to big or not you continue by removing an X or adding a Y. 

As mentioned in the comments the question that you are asking is actually off topic as you have not implemented it yet and there are many solutions (you could for example do everything as percentage or vh/vw units rather than pixels). What you're asking for is a concept known as responsive design. I will however review the code that you have. First problem I see 

Ever since LINQ came out I've been talking about how the syntax is really awful. It looks friendly at first but it completely hides what is really going on which is really useful to understand. Here is the much shorter way of writing it with the extension methods off of IQueryable along with a few other adjustements. 

In prepping to teach a workshop on recursion I wrote this code that uses a maze-building algorithm. In doing so I found it really natural to use generators a lot. I feel pretty happy with how the code turned out but its also pretty unusual and I wonder what yall think of it. This is meant to run on latest chrome (partial es2015 support, no destructing assignment, no modules yet) 

Note: whenever you have string literals used more than once define a variable and use that one in all tests and assignments. in case of a typo you are more likely to get an interpreter NameError while misspelled literals may cause really ugly bugs. so e. g. do 

BTW: your code may raise as well which goes through other than the While we have reduced complexity there still is this ugly in the inner function. I'd say we improve readability by avoiding the inner function and 

I did some other minor changes: - i like to name functions after what they return so the usage reads like a natural language sentence. in python2 you should use instead of if you do not need a real list but just an iterator. what you could do also: make the magic numbers and constants and/or pass them as parameters. if it is about the number of digits you could define them as and pass digits as single parameter. 

saving some lines without any negative implications. Do not repeat yourself This is one of the most important rules to consider. In 

Yes this doesn't do all the type checks that you do above but why do you need them? Now let me be clear It is possible to expose an XSS vulnerability for your users here Specifically if you allow users to enter values which are posted back, persisted on the server, downloaded by other users, and then used with this function on their computers. Suppose you are doing binding to objects which users can customize. These can be arbitrarily nested so you use this pattern. You also have summary screens in which users can view other users' customizations. All an attacker has to do is create a property named and it will be eval'ed and run on the machines of other users of the system. That's the danger. If you're aware of it and make sure that condition never happens, feel free to use the with-eval. 

Usually I see tuples in js implemented with arrays though of course an object - while annoying to write would be just as valid: . So for this sort of use-case (creation and light usage of a bunch of temporary objects) I'm curious if there's a significant performance difference so I set up this jsperf. Object tuple test: 

you have two code blocks differing by just one value. all the other parts are required(!) to be identical. this is asking for a function definition (I'm not sure if you already learned that). We do something like (still not perfect) 

Your loop has a potential complexity of R * M (R number of words in ransom, M number of words in magazine). Additionally you use in the inner loop which which does linear search in magazine. The solution is to count occurences of words in both, magazine and ransom. this is done in a single sweep and of linear complexity R + M (dict get/set is average linear). the moste dense and readable solution is 

here we do not only replace longer strings by characters but also join this characters to a string. this string allows better logging. For we get . Wouldn't it be nice to have where the blanks represent the pause between letters? this would make the output loop better as it would not do an additional pause at the end. So somewhere in the code we should do , either just before outputting or in encoding. your choice. for debugging I'd prefer to have it in encoding.