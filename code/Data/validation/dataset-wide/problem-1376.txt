Concatenating the address and postcode seems arbitrary to me, if you did the refactoring as mentioned above, you could shorten it to: 

Prefixing with an underscore is generally a developer convention in Python indicating that the method is private. Given the context of your function, I don't think you intend for your code to be a module whose functions are imported and used elsewhere. Having the underscore prefix seems unnecessary to me. Too much abstraction? 

This one is a little subjective. For an algorithm like this, it makes sense to only write pure functions as that can make debugging easier. Your code is readable and clear, if a little contrived, but I wouldn't worry too much about this. JavaScript is sort of a weird language to ask this about since most functions won't follow this rule especially when you do DOM manipulation and frontend JavaScript. 

but I think this is needlessly complicated because adding a new field doesn't break what users of the method expect. If you had several predefined kinds of searches, like and in some imaginary clothing app, then it would make sense to have a interface and have each kind of be responsible for generating a query. tl;dr the open-closed principle is really vague and trying to guess in advance which points of your program will vary is one of the hard things in software. what you should really be wary of is the possibility of making breaking changes to , which isn't the case here. 

For a small game like this, your implementation of is okay since you don't expect to have lag spikes. has no guarantee for its timing and it's behavior can vary from browser to browser. You should use to do this instead. Additionally, it is a bad idea to have your physics engine tied to your FPS/tickrate and it can cause unexpected behavior with more complex games. You can get around that by calculating the delta time between each update and using that to do your physics calculations. 

and I am guaranteed that the objects are already sorted chronologically by . I'm sure that this code can be vastly improved. 

Problem Given a square matrix of size , calculate the absolute difference between the sums of its diagonals. Input Format The first line contains a single integer, . The next lines denote the matrix's rows, with each line containing space-separated integers describing the columns. Output Format Print the absolute difference between the two sums of the matrix's diagonals as a single integer. Sample Input 

The point of open / closed is that if you expect something to change, you should define an interface around it. In your case you could have be an interface with an method and just do 

If you want, you can always refactor functions like so that you type less. Something that I see a lot of people do is: 

You may want to take a look at ES6 classes. This is entirely up to you, but some developers will do to cut down on the verbosity of the code. This allows you to type less and increase readability. Use of ES6 template literals and arrow functions may help shorten some of your code and increase readability. Instead of this: 

Comments about the code are appreciated and welcome, but I have a few specific questions about best practices with regards to using Mongoose. 

It says that a boolean function of one boolean is valid if and only if and are both valid. Of course, the validity of boolean is just that boolean. So in this case, can be thought of as being a bit simpler: 

to check if the proposition is logically valid (true for all possible inputs) to check if the proposition is false for all possible inputs. to check if two propositions of the same number of arguments have an identical truth value given the same inputs. 

Alright, so is valid if and only if it evaluates to for both arguments! That's what we want. Now for : 

LOL. Technically not infinity, your program would theoretically end if I played until the heat death of the universe. It seems like you're using it for a infinite loop. Why don't you use a loop instead? An infinite loop looks like this: 

One important thing here is that you should put the game logic inside an guard. This prevents the logic inside from being exposed globally. This method of organization is just one way to do it. Of course, there are other ways to organize your game that make sense, but in general you should group together similar things and prevent circular dependencies. Avoid accessing member variables directly. 

In general it's not that useful to separate the and abstractions. If you want a list just pass around the first node of the list. It makes many algorithms much simpler to read and write. I'd start with 

You don't need to track the end of the list. You can just check that you've reached it if an element's next is . doesn't do anything. Every time you use it you set instantly after, so should be a parameter. Setting to isn't that useful because if you don't change it you can simply check and get the same thing, while using less memory. Try 

Consider using a style guideline like PEP8. This is more of a general suggestion and will make your future code much more readable and maintainable. Consider defining all your constants at the top of the file. This makes them easier to find. In other languages, you cannot use a variable before you define it, so this is a good habit to get used to as well. Python is a self-documenting language. Generally, in Python and other languages, comments should not be used to state the obvious. Use comments to explain algorithms or non-trivial aspects of the code. 

What we're doing here is creating a new typeclass called Prop. We need the syntax because we need to define the behaviour of an instance of the class. If we don't introduce a symbol for it, then how will the compiler know what we're talking about the in the typeclass definition? For example, the line says that for every instance of typeclass , there must be a method called which maps to a boolean value. Likewise, there must be a similar method for . Now the line may cause some confusion because appears twice. It's important to understand that , being an instance of a typeclass, is a type. There are no "objects" as in object-oriented languages. Remember: is a type which satisfies the typeclass contract given by . The Java equivalent would be a class implementing an interface . What we're saying here is that for type which implements/is a part of this typeclass , there is a method called of comparing them. And its type is meaning that it takes in two expressions of type and returns a boolean indicating whether or not they're equivalent. 

Task Write a program that, given the amount to make change for and a list of coins prints out how many different ways you can make change from the coins to STDOUT. My approach The number to make change for is . Take one coin and sum the number of ways to make with the other coins. Add the number of ways to make with the other coins, etc, for all where is the number of coins used. Do that recursively. Memoize it so it's effectively dynamic programming. Code