[This just includes motion stuff, I'd expect door, lights, air locks, life support etc to all be simply plugged into some power supply and left to run, turned on and off light light switches.] We need to be able to control these and make calculations about how to move the ship. So we need to know a few things: 

Note: I haven't included communication with other humans in my answer, I'm assuming the ship being at the Oort cloud cannot communicate with other ships. Context It's possible for the human brain to solve these problems quite easily, as can be seen by playing Kerbal Space Program and the Apollo moon landing was achieved with roughly the computation power of a calculator. Scanning The question is, what does the computer need to know. Assuming it has a radar that can output 3D vectors of solid objects you then to store these vectors. You need to decide some resolution and range for the radar. The distance to the moon is 384,000km so we'll make sure the range is big enough to encompass that, let's say 400,000km. (I'm making the assumption here that you don't want your radar to be able to track as far as the Oort cloud, you just want to be able to process reactions to collisions.) We'll want to be able to pick up fairly small objects on this radar and avoid them so we can split that into units, being practical the 67P/Churyumovâ€“Gerasimenko comet we just landed on is about 4km accross, so we'll want to pick up on that. That means at maximum that we have 100,000^3 units of scanning data to store. Assuming the positions are measured as integers that's 1.2x10^16 bits of data, or 1.5x10^15 bytes (That's 1500 Terrabytes!) if the entire field of view is covered in matter. The ship is probably not going to be surrounded by objects so we can give it some kind of buffer and say that it can store maybe 100 points, which is of course a lot less, about 150 bytes. Which is really easy to handle. Control That's just for the scanning data. My calculator can only store about 70 numbers which means it probably can't do what you want. Lets assume a minimal computer with 1Kb of RAM which is 1024 bytes. That's a bit more than we need so it leaves us with a healthy 874 bytes to play with. What do we need to do with this? Here you need to consider the structure of the ship. I'm going to go with the simplest possible configuration (based on Kerbal Space Program missions): 

Bad idea. Among all close combat weapons, swords require the most agility. Despite videogames conditioning us that swords require strength and bows require agility, actually it's reversed. Despite movies and videogames showing us fighters who hack at each other sloooowly and with full swings just as if they were chopping wood with an axe, swords were never used for chopping. They were used either for thrusting or cutting, both requiring great wrist agility. See it for yourself in this video. Think about how you could perform those quick motions with a sword rigidly fixed to your arm, without your hands. Against armor, you would be in even deeper trouble. Using sword against armor is possible, but it requires special tactics which would be impossible without being flexible with your hands. Even just basic stabbing would be inefficient, you would not be able to pull your sword back far enough, so an opponent stepping in close would make you completely defenseless. Besides these disadvantages, medieval warriors needed to be proficient in many types of weapons, as all weapon types have advantages and disadvantages. Swords, maces, pikes; open field, ambush, siege or indoors, countering infantry or cavalry, different situations require different weapons and tactics. 

All of this can achieved with very little memory. Processor I don't know a lot about processors, but these calculations use very small volumes of data. My calculator lags when I press the button and we don't want that, so something in the range of 100+Mhz would probably be okay. Answer This all assumes that the calculations are this simple, I've literally stripped the system to its bare minimum. You could say that a few Mb of RAM would be enough for a simple purpose computer and a processor that runs at about 1Ghz. This would not be fast by our current day standards as my phone has 1Gb of RAM and 2.4Ghz clock rate for its processor. Adding more processing would allow for better gravitational calculations and collision prediction. 

Cultural inertia, historical background, and the willingness of the biggest superpowers to maintain the status quo. There are several real world countries, which, although not "third greatest superpowers", have significantly more political influence than what their size would indicate. Exaggerating them a little, they could be good templates for such a superpower. 

A good argument (or piece of shameless propaganda) might be that due to our normal metabolism our bodies now are not made up by the same atoms as a few years ago. In a few years almost all of our atoms are replaced. So, this teleportation device does exactly the same, just faster. (whether the two can be accurately compared is not relevant, the point is that it can be used to convince a lot of people, especially people who already want to believe it is not a problem) A good argument against such a teleporter would be what happens if your destruction is delayed and the copy is already built. Who is the original? Who has the right to live and who must be destroyed? This question has to be answered plausibly, this means it's not enough to say that your machine takes care this never happens, it must not be possible to happen due to how the science behind it works. 

These need to be pretty damn precise so lets make them big numbers and say that we need 160 bytes for these! So we're left with 714 bytes to play with. Now we need to do some maths. Assuming the ship knows its own mass it probably only needs to do $F = ma$ and $F = G({m_1 m_2}/{r^2})$ a lot to avoid an object. It might also want to then store a few values about its positions after a move its going to make, validate whether or not that leads to crashing into another different object and try again. So we can add another 100 position values or 150 bytes bring us to, 564 bytes left. These remaining 500ish bytes of RAM must simply contain some basic logic about the process I described above. 

There is a real world example which might be even more fitting than Chinese (Pinyin vs. Hanzi where native speakers usually know both): The Hungarian runic alphabet. It is completely different from the Latin alphabet, is written right-to-left, and is not completely mapped to the Latin alphabet (it's more compact, many symbols require 2 or 3 characters in the Latin form of the written language). It fell out of use around the 10th century, but was still used in remote locations until around the 15-16th century. This means that there was half a millenium where parts of the population spoke the same language but used a different script. Most native speakers today cannot read it at all, but there are enthusiasts who learn it, and there are still works of literature published using the runic alphabet. In contrast with other runic scripts, whose languages are dead, the Hungarian runic alphabet can still be used perfectly with the contemporary Hungarian language and grammar. Also, the the Hungarian Scout movement teaches this script, so many boy/girl scouts are fluent in it, although the general population isn't. 

Look ahead some amount and predict a crash Try a move and see where it takes the ship If that's no good try another maybe in the other direction Try and correct movement towards some target vector if the ship has a destination 

These examples are fairly extreme and probably wouldn't be frequent in the universe but I'm interested in the physics of nanobot consumption. Say a particular species of nanobot is developed. How would it 'consume' objects and what would it do with the matter after if consumed it? I'm interested specifically in the functionality of the nanobot and any side affects that functionality might have. An example of a silly non-realistic answer might be: It uses a little pacman mouth to devour atoms.... 

As a soldier, would you want a gun which, if it jams, you have to take it to the single most experienced master craftsman in the country to repair it at great expense and lot of time investment, or one which you could service yourself in the field and could replace any part of it from any other similar gun you salvaged? As a commander, would you hire one guy with a musket which can shoot 7 times without reloading, if for the same price you could hire 1000 mercenaries equipped with single-shot muskets? Conclusion: Repeating firearms in the real world appeared centuries before they became practical and commonplace, so if you want a special adventurer to have a unique one, you could give him something like a Kalthoff-style wheellock repeater with questionable reliability soon after gunpowder is invented in your setting. Its usefulness would be very limited, as you could not have them in sufficient numbers to affect battles (otherwise you would already have been through an industrial revolution), and alone in an ambush a number of double barreled pistols would be much more useful. 

I love developing complex languages for stories and worlds, I'm not much of a language expert though and on top of this I struggle to store all the necessary information to help me work with the language. It's difficult to find words that you've previously defined or to create language structure without a good organisation system. Does anyone know of any tools that can be used to aid with recording your own language? Is it as simple as a good spreadsheet or are there more suitable methods? 

The Humble Hamster (Without genetic engineering) Seriously, how fun would it be to have lots of little hamsters rolling around the generation ship in space age hamster balls? This would be even more awesome in a 0g environment! They could have specially designed 0g hamster balls and tunnel mazes to play in. They're small and don't require a lot of food, the food they do require is easy to produce. They don't produce a lot of waste and they're great fun for kids. Only issue is that you might lose them (hamsters are great at escaping) and you will need a significant population to keep them going as they only live for a few years. But I think the super fun benefits out-weight the problems. 

The tactics, competence of leadership and the training and experience of the troops can often be more important than the equipment type alone. To illustrate it, I present an extreme real historical example of a tercio being defeated by a frontal assault of light cavalry. (the tercio was the successor of the pike square, equipped with musketeers to give it ranged capability, and it was the most successful formation of the battlefields until muskets became advanced enough in the 18th century to make pikes obsolete) A tercio would normally be easily capable of defeating a heavy cavalry assault even when being outnumbered by them. How could it then be defeated by an assault of light cavalry, where the cavalry had numbers approximately four times smaller than them? Here is what happened: In 1631 in the Principality of Transylvania, Apafi was elected Prince, but the previous Prince, KemÃ©ny, didn't acknowledge the results, which led to a brief civil war. Apafi, heavily outnumbered, barricaded himself in a city, and KemÃ©ny proceeded to besiege him. Before the siege could have been started, an army composed of light cavalry came out of the city (why Apafi's infantry didn't participate, is an interesting story in itself, but would be off topic here). The besiegers didn't take them seriously ("what could such a small band of light cavalry do against proper tercio infantry?"), and thought they were only out for harassing them, a tactic not uncommon for light cavalry. They expected they will exchange some fire with each other from afar and then retreat (the whole thing being done only to slow down the perparation of the siege), as was common for that troop type, so they sent their musketeers forward. The light cavalry started to get closer. The musketeers fired from afar, obviously causing next to no damage, expecting the light cavalry to be skirmishers and doing the same. However, this is when the light cavalry rushed them without firing a single shot. Surprised, and not having enough time to reload, the musketeers ran back, and got intermingled with their own pikemen when the horsemen crashed into them. The pikemen couldn't hold the line due to the swarm of their own musketeers fleeing through their ranks, and they broke. Thus, most of the army started routing, and in such a case, troops standing in the back don't see what's happening in the front, don't see that they alone would be enough to win the battle, they only see their own comrades panicking, throwing away their weapons and fleeing, so they join the rout instead of staying there. KemÃ©ny's heavy cavalry was nearby and tried to intervene, but couldn't reach the position, having to plow through their own fleeing infantry. Some of them got stuck in them, others trampled down their own infantry, and that situation was no longer salvageable, the army routed from a force less then one fourth its size. This example was meant to illustrate, that there are situations, where even an army which would otherwise be "invincible" against its opponent, can lose due to incompetent leadership, a surprise attack, or just a combination of good timing and good luck from their opponent's perspective.