Your class name is yet your methods contain this acronym in all-uppercase: . The naming conventions say: "Do capitalize only the first character of acronyms with three or more characters, except the first word of a camel-cased identifier." 

Everything inside should be moved to a separate method; matter of fact make that everything inside . Also, don't you know about ? 

You have a spelling error: . However, what's worse is that you repeatedly use this string instead of setting it as a and using that. Same for other strings. 

I also feel is too generic a name, since it is only used here: . Why not call it ? I don't think should be part of your clause, IMHO this is input validation that should happen before you compile the clause. 

Considering that all these methods return a "distance" and that all of them take the same parameters, I'd suggest a base class , which is then implemented by a etc. 

This is example code -- I don't know neo4j, so I don't know if this is possible. Also: is that ... really necessary? It certainly looks dangerous: an exception is thrown and it is just ignored and an empty list is return. 

There is no point in keeping your connections alive as long as you do. Typically db connections should be kept as short as possible. 

Consider not tying your feedback code logic to the Console. Instead implement something like NLog to handle all your logging; this still allows you to output to the console. Using is a really hacky solution. 

There is no need for such abbreviations. Properly name your variables, and you don't need such comments. Moreover, proper names would make your code easier to follow. Sure, and aren't that hard to remember, but ? Or even worse, ? 

But if I were you I'd rethink this entire logic. A is ugly and unwieldy; IMHO the nested dictionary should be a custom class. I also feel this code is odd and possible buggy: data is retrieved for an yet this parameter is completely absent in . The that is passed is assumed to be present as a key in , same for the . 

If there's an exception, your Main doesn't clean up the or the . Quite frankly, your is a mess anyway: each of those "tests" should be a method on its own at the very least. But then these tests aren't realistic anyway; they only show how ill-advised your wrapper is. For instance: you're not properly maintaining your connections, which is a huge issue. Nothing this code does improves on code like the one in this example: 

There are more issues with your code, but I'd advice you to apply these recommendations and any others you might receive, and post the result as a new question. 

Why are you getting the stored password from the user name and then comparing that to the password the user entered in code that is in your UI? This kind of check should be happening in a back-end and return a boolean. Moreover, this kind of check is just mindbogglingly bad: you're storing an unencrypted password, one that is an int? That's wrong on so many levels... 

Why parse the input to an (also: again you're putting a lot of trust in your user) and then cast it to a ? 

I'm worried by the fact that this is created in a . At the very least I'd move that to a separate method, but quite frankly it looks like your UI and business logic is mixed together, which is another bad idea. 

I would also rethink names like "0to3" and "total_daysclose" if possible: these naming styles are inconsistent and IMHO bad; I'd much prefer "ZeroToThree" and "TotalDaysClose". "Gtrthan7" is even worse, since it contains an abbreviation and I really can't see any reason why. Note that I would also move column names to constants, perhaps even move those to a static class, e.g. 

But more importantly: all of your code is solving a problem that has already been solved by ORMs like NHibernate or Entity Framework. You have written a 60 line class that can do one single thing: update the field in the table . My advice: throw all of this away, implement a decent ORM and focus on the actual business logic. 

seems to take a dozen(!) or so parameters. Instead, pass a single class where each of these is a property; that way it is easier to read and there's less chance of making an error. Also, considering that much of these parameters are part of , why not simply pass that class instead of copying over its values? 

Those first two lines are completely superfluous; moreover if you need to get a value from a and aren't sure the key is present, you need to use . 

Your code also seems to be broken: in the last excerpt you have and there is no . Moreover, since the prefix indicates a field there should be no need for the . 

You have an called : that's wrong, only interfaces can use the prefix. Instead I'd expect this class to have in its name at the start or the end (whatever is your preference). 

You have three calls to . If those execute a db call each time, that's a bad thing. But it actually points to a deeper issue. May I introduce you to Enumerable.GroupBy: 

Each of these should be their own method, and thus the body of this controller should be its own class, split into multiple methods. Look for instance at MediatR to "un-bloat" your controllers. 

Twice you do , and as it turns out, twice you then do . That's a waste of effort, which to me suggest you should rethink the logic in . All of those are pretty ugly and are repeated, so they should be moved to a method. I'd advice to convert to an intermediate format first, before creating . 

is an incomprehensible variable name, especially considering that it isn't a single item but apparently a list of items. Why do you even create it? Why don't you simply use ? 

As I read it, it seems like you loop through all elements of a to check if each element of that list is present in the list, and if it isn't (but why would that even be possible?) you add it to the list. 

I've never worked with ASP.NET MVC, so I don't know whether this is the usual way of doing things, but passing a model and then setting properties to give feedback -- e.g. -- looks really odd to me. Especially since this class doesn't have anything to do with the UI; which means you're mixing up tiers. 

First of all: how can be null or empty, considering you assign "1" as its value on the previous lines if the value of isn't "1"? Secondly: is some kind of boolean? And also: why are both and used in the rest of the code? See, that's what bad naming does: I cannot figure out what and are supposed to be, even within context. 

I realize naming is often hard, but please avoid the temptation to name things "temp", e.g. . Also, why is the method named when I assume it only downloads a single video? And why would return a tuple? Is this the same tuple it receives as a parameter? (Note that I did not look at your full code at the link you provided.) 

WRT your question, I don't see how you can parallelize it without running the risk of duplicate entries. I do wonder whether it wouldn't be easier (and increase performance) to maintain a instead of doing each time. Key of that dictionary is the , value is the . So you'd end up with something like this: 

Why use when it would be far clearer to create a custom class? The next person to look at this code will first need to figure out what the and the represent, whereas if this had been a custom class they'd know the first was the URL and the second... well, I don't know what, but you get my drift. 

To be honest, I am not sure this solution is 100% correct. You would need to test this yourself: take the same dataset and apply both your code and this code and see if the results match for the various scenarios. And even if they do, don't just copy-paste what I wrote: try to follow what changes I made and why I did so. Compare for instance the last two code blocks: look at , and notice how in the earlier version nothing happens to it that cannot be scrapped. - We take the of , - we then add to the existing , - and then we remove the duplicate entries when we assign back to . But all of that already happened in the first line: 

There are other naming issues besides the ones Heslacher mentions in his review. For instance: the return value of is stored in a variable named -- shouldn't that be ? Or if you want to re-use this variable to store the return value of , why not name it ? 

You have a constructor with nine parameters, all of them nullable. That's just asking for problems. Perhaps named arguments could be a solution, but in the context of your code I don't even see the point. Why not keep it simple, and do this: 

I'd certainly try to reduce the indentations, not in the least because in the case of it involves a 30-line block, and the is just a single line. Also: if you're going to fail, do it fast. But there are other issues to consider. 

Why is there a method in your back-end code? Separate your UI from your logic. The contents of that method are also up for debate: showing the stack trace? 

Isn't it possible to keep this logic, as well as the ... in the and have the various checks return an or a that you then can use, so you'd end up with something like this: 

and contains four lines which are almost identical, except for the message. Instead of copy-pasting you should have moved them to a method: 

Each of these classes is small and easily maintainable. That's what you should strive for: make it easy for the next person to look at your code to figure out what happens where. Having an class where you to the retrieval from SharePoint and return a which gets converted to s in the code-behind of a UI class is a maintenance nightmare. 

Your naming could be improved. The "MC" in makes sense in context, but why not write "MarkovChain" in full? and aren't clear to me, but I don't know the convention. 

But I'm more worried by the logic of the code: process the three types of data separately into s, and then combine them at the end. I'm not familiar with the code of the page you're parsing, but I'd be surprised if each of the three elements you need isn't contained in one block (a for instance, or a ). Then you could focus on extracting the relevant data for one entry from said block, thus ensuring it does belong together. Because right now you have no clue why you'd get "The three arrays do not have the same length." and you would need to investigate which of the entries on the page doesn't follow the expected format. Whereas if you know that the culprit is one particular block, you wouldn't waste time on finding the source of your problem: you could immediately focus on the problematic block. You wouldn't even need to change that much: identify the tag that "defines" such a block and then use HtmlElement.GetElementsByTagName to retrieve its parts instead of HtmlDocument.GetElementsByTagName. Store the resulting data in a custom class: 

In the end there's not much code to review, and perhaps you should consider posting the whole class. 

Considering the repeated use of the pattern, I wonder: why not use a , fill that with all of the necessary values, and at the end use to combine them all? Something like this: 

I'm assuming and are custom classes? Or are they supposed to be generic type parameters -- because if they are, the naming rule expects them to start with . 

What I am unhappy with As you can guess, my main issue is with : the parameter is actually never filled in and its value is actually in a querystring parameter called . Of course, when you first enter the page there is no value and thus a default one is assigned (that way you don't end up with a blank page): 

is used twice, so perhaps it would be beneficial to store its results. Same for , and in that case it is even more important considering it is used inside a loop. 

is a warning sign to me that your design is probably flawed, and when I look at the context -- a list of questions and a separate list of answers -- I fear that your code has far worse issues than the reason for this question. 

I'm only thirty lines into your code, and already this review is starting to get long. Next I see another badly named variable (), and another one (). I notice strings like which are repeatedly used, so they should be . There's a block of code that starts with , yet at the top you've already made sure that can only be "1". I see the same similar lines repeated over and over again, which suggests they should be written as a single method with a couple of appropriate parameters: 

: Does a belong in the BLL? Why isn't that a instead, and why aren't you calling it (especially since it is an and not a )? 

You've got some odd patterns in your code: first you define a , which you then don't use until much later, only to use the method once, and then you assign this list to a property of . For instance, the first five lines of your method can be reduced to two easily: 

It's not even ten lines long and yet trying to figure out what it is supposed to do is way too hard. Plus you're concatenating strings, which is almost always a bad idea if you're not using a . Or, in this case, . 

is a method and thus should be in PascalCase. Same for . : Microsoft's rule is to use Pascal case or camel case for acronyms more than two characters long, and to avoid abbreviations in identifiers or parameter names (if you must use abbreviations, use camel case for abbreviations that consist of more than two characters). Is a global field in this class? If so, why do you pass it to ; can't that method not simply use the global field? , , : TextBox is a compound word and the first letter of each subsequent concatenated word needs to be capitalized. 

The stack trace should tell you where the exception happened, but you throw it away to create a far simpler error message. 

The main problem I see is that you haven't separated your concerns. Read up on n-tier architecture and realize that you shouldn't tie your UI to your other logic. Consider this approach: 

etc doesn't mean anything. IMHO this should be a with a meaningful as the key. That way you can simply loop through the 's values and use its attrribute to generate the output. 

Comments should inform about the why, not the what. If you need a comment to explain what a certain field is, you've not named it properly: 

At least this time you're logging the exception (unlike above), but again you're returning an empty list. So unless someone checks the error log, no one is any the wiser that an exception has occurred. 

That very long and very repetitive / if can probably be replaced by something much shorter. Here's something I used recently which you should be able to convert to something that's applicable in your case: 

I don't know what a is, but since it seems to be a single item, I don't feel is a good name for it. I'm also not sure why you'd need to add the namespace to the class explicitly: . That's usually a red flag for me.