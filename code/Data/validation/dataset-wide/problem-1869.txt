Since he said "if you don't hear back let me know", you probably don't need to let him know. But if you stop by at the planned time to say "thanks, I did get a second interview, I appreciate your help" I'm sure he won't think that's a waste of his time. And it never hurts to ask for a little advice when you're talking to him. If he's willing to change someone's mind for them about second interviews, I'm sure he's willing to tell you how to do well at the company. 

Bring a notebook. If you have a good idea of questions you may be asked, jot down numbers or dates in the book so you can refer to it when you are asked. On a blank page of your book, write down everything that is asked to anyone else. When you are asked, answer if you can. If you don't know, say "I don't know". Consider adding "I can find out and get back to you." That is not always the right thing to do. Sometimes the right thing is to add "But I believe Steve does, isn't that right Steve?" or "We won't be able to work that out until we hear from the vendor, which is supposed to be next Wednesday" or "at this point it's all waiting for the final legislation and there's no schedule on that at all." Sometimes the question isn't super relevant, nobody needs the answer, they were just asking, so stop at "I don't know." Also, be careful that in answering the question, you are not accidentally making a promise, especially one you're not authorized to make. This is especially true when dealing with a client. "Can we have those three reports in this deploy?" "Will there be an extra charge for the new formats?" "How long until more developers are assigned to this work?" Here, whether you know or not, you don't say "I don't know" you say "that's not my decision." Yes, a steady stream of "you'll have to ask my boss" may not feel like great customer service, but if the answers aren't yours to give, don't answer. These "questions" are actually decisions in disguise, and if the client springs them on you it's usually to get free stuff from the junior who doesn't know any better. Be careful. "That's [manager]'s decision. Do you want me to pass the request along?" generally works for these. If you agree to look into something, make a clear note in your book (not mixed up with other unrelated notes) including the question, who wants to know, and perhaps some urgency level. When the questioning moves on to someone else, scribble down what you were asked and what you said. (I had a guy who used to forget what he said last week about how close he was to done and ask "what did I say last time?" -- not a good answer.) You can tidy these notes up later but capture "reports 90% done, still need prices, next week ui polishing" so that in the next meeting, you recall what they already know. Blindly offering to find out no matter what you are asked can be as bad an answer as making something up. Listen closely to the question and react accordingly. After the meeting, review quickly what you were asked and whether you feel not knowing was a problem or not. Sometimes it is not possible to know, and it's not your fault or your problem that you don't know. Other times, it's clear you were unprepared. So take 15 minutes to think about how to be sure you will not be unprepared next time. 

As time goes by, you may need to ask less questions because you may realize that your boss wants you to figure out how to do these things. Or you may ask less questions because your boss realizes that it's important to give you more detailed instructions. But in the short term, the only fix for incomplete requirements is to ask short, crisp questions (not "I don't understand, can you give me more details" or "I need more requirements than that") until you have the requirements you need. 

Since your prof has said more than once "I hope you understand" it would be nice if you provide that reassurance: 

There are two approaches you can take here. First option: don't book that trip home just yet. Go through the interview process. If and when you get to the "and when could you start?" part of the interview, be honest. Tell them you would like a two month trip because you know you won't be able to go very often once you start working full time, but that it's not booked yet and you are open to a conversation about it. Work with them to pick a good start date that you'll both be happy with. Maybe arrange some time off without pay in the first year. Second option: you have to go home then - for a family event, or you've already booked the tickets. As before, go through the interview process. If they ask "when can you start?" you tell them. (Back in my day, starting Labour Day was perfectly normal.) If they don't like it, they can take that into account in their decision process and you might risk the job, but so be it, this trip is important to you. If they don't ask, don't bring the subject up. If you get an offer with a start date you can't meet, write back and say you'll be out of the country until whenever and would be happy to start on [specific date.] They might, but probably won't, rescind the offer. Thing is, new hires straight out of university are rarely so critical to the operations of the company that they can't function if they have to wait a few months for you. But bringing it up before they know you might give them an easy excuse to remove you from consideration. So decide for yourself how movable the trip is, and wait as long as you can to tell them about it. 

Somebody in the company does indeed need to know if you are authorized to work in the country, and if there are any conditions or expiry dates on that authorization. That is not the same as the manager needing to know that, and very definitely not the same as needing to know the exact visa. That said, the manager may be one of these people who starts conversations halfway through. Say for example they want to send you to a conference or meeting or training out of the country; they may need to know if you have a multiple entry visa. Or they may be making a plan and want to know if you'll still be authorized to work here for another 2 years. So the best response to a flat-out question that you think os overly nosy or prying isn't "you're not allowed to ask me that, it's personal!" it's "why do you ask?" You may hear "my cousin in country X wants to come and work here and I figure she should get the same kind of visa as you" or "I want to send you to a conference" or "I was wondering if it's time-limited and if so how long it lasts" or the like. If, after hearing the reason, you don't want to discuss it, you can easily say something like "sorry, but I consider the details of my status personal. You know I'm authorized to work here and that's all I am confortable discussing." But hear the reason first -- it may not be as nosy as it feels. 

I would want to get rid of the first employee and keep the second, wouldn't you? If you only point out faults, with no suggestions for improvement other than "do something about that", and you use a nasty tone while you do, I will start to weigh your positive contributions to see if I want to keep you. If you make positive helpful suggestions for specific things you can do (or, in a pinch, someone else, perhaps in the form of "can I teach X how to Y so that the C tasks can get automated next week when X will have less to do?") then I will be glad to have you. Just because ideas are innovative doesn't mean they need to be shared. If the sharer genuinely believes the boss is wrong and ill-informed, the conversation is unlikely to go well no matter where the truth lies. (I've had people make "innovative" suggestions that were completely ignorant of the reality we operated it, almost like saying that a trip to the sun will be safer if we go at night.) Offending your boss is never a good plan. Now, it's possible that this developer was making amazingly great suggestions in just the right way, but they might lead to something good for the company but bad for the manager, such as needing a smaller team. Some petty-minded managers might get rid of someone for that. If that's the case, over time the company will suffer. Upper management will get rid of the "local optimum" manager to hire someone with a bigger-picture view. But this takes time. The negatives you point out will accumulate over years, not weeks or months. It's not a standard behavior but it does happen temporarily in some places. 

If you know which if the two is causing the majority of the interruptions in your office, what your manager needs to do will become clear. You can see how lecturing someone on "trying things yourself" will not help at all for the second kind of situation, for example. One interesting approach would be to ask your manager just for a single day to agree that all interruptions go through the manager. Joe doesn't know the password to the new account Steve set up yesterday? Don't go to Steve and ask, go to the manager and ask. Of course that means Joe and the manager will go to Steve together and ask, but that is the point of the exercise. Steve doesn't know how to do something and believes that Kathy does? Don't go and ask Kathy how to do it, go to the manager and confess to not knowing how. The manager may give the task to Kathy, or schedule a time for Kathy to teach Steve, or find Steve some non-Kathy resource, or direct Steve to find a non-Kathy resource. At the end of the day the "it's quicker to interrupt you" folks may be broken of the habit. (They may not: I had someone who said this very sentence out loud to coworkers and would not stop doing it, until that became incompatible with working for me.) Your manager may detect a pattern and be able to help prevent future interruptions. Or your manager may take all this communicating into account when planning workloads. Lots to be learned. 

One of the services I offer is to mentor teams and developers to make them better. I end up working on the boss to get company wide subscriptions to these services on just about every engagement. Note: I do so not to increase my own royalties (most of my mentoring clients don't watch my courses; they have me for that - they watch other people's courses) but because I genuinely think it's a way to profoundly improve developers, and that's what they're paying me to do. I get a Yes from the boss in three ways: 

You will probably get an angry belittling answer like "yes, try reading the ticket once in a while!" or "you could try writing the code right the first time" but just hang in there with it. What you're trying to get to is "how can we help all of this feel less out of control for you?" So that includes getting trust among the team, and good communication and visibility among the team. So you hang in there and say things like 

I believe this applies to you too. You are not producing enough something for your manager's wants. That might be working code, but it might not. It might be agreement and support in meetings. IT might be working code for the teams he "likes" at the expense of those he doesn't. It might be quick deliveries without things he considers unnecessary. You can probably find out, but not while you're angry that you're being asked to work a full day. So, step 1, spend the full 8 hours at your desk as requested. Step 2, listen to your manager when you are given direction. Don't override what you're hearing with what you think would be the right thing to do. Do as you are asked. (Step 2.5, if you hate this, start looking for another job in parallel with these steps.) Step 3, when you get a chance, don't make a big deal of it, ask your manager how you could improve. Say things like "I want to do well here, I think I need some direction." Listen carefully to what you are told. Even if you think whatever your manager says is a terrible way to run a company (it may well be), it is the way this company, or at least this part of it, is being run. To the extent that you can, follow the directions you are given. Again, if you hate that, see step 2.5. Eventually you will either find another job or find out how to do well at this one and enjoy it. Work actively towards both goals and see which happens first. If nothing else you will have learned a lot about questions to ask in your next job interview to make sure you don't end up in a similar team next time.