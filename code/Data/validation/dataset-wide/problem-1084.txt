Before any updates are executed on , a copy of the row is created in , then is updated with the current date. Therefore ing the two tables together & grouping by creates a timeline of changes, when ordered by . I wish to create a report detailing the differences between rows, ordered by , grouped by , in the following format: 

Selecting from this data dictionary view will list all of the tables owned by the currently logged in user. All of the objects you own can either be viewed in their object-specific view, or queried in the view: 

If you want to create a user that can admin any of the pluggable databases, prefix the username with . For example: 

This is happening because the division by zero error is being raised before the procedure is even executed - It's happening when the arguments are actually passed in to the procedure. You can verify this with a small proc that doesn't do anything: 

You can't restrict by IP address. All you can really do is create a new user and only grant them on that one table. 

The table_privileges view is only preserved for compatibility with ancient versions of Oracle. You should instead be using the user_tab_privs view, all_tab_privs view, or dba_tab_privs view (documentation links for each when you click). 

The latest draft SQL standard that I could find on the internet (dated 21/12/2011) has the following available for use in a query expression: 

You can do this with a function that runs in the security context of its owner. Function that refreshes the view (create it with the user that owns the MV/table): 

Since you're familiar with SQL Server/Sybase, I'll explain the difference between them & Oracle as far as databases and users are concerned. 

... seen them all in production. One of the products I'm currently working with has half of the tables named , and the other half named "normally" - They've obviously got developers that are working to different standards. Another one of their bad habits is prefixing column names that are foreign keys with , followed by the table name, then the column name, giving such awful column names as . That naming convention is just a logical extension of the whole mantra, and you can see just how ridiculous it gets! I nearly forgot about the other database that makes me cry on a daily basis. Datatypes prefixing column names... , because the name really needed the prefix?` 

Before those two steps, you may also need to do a in so that it "knows" that the deleted archivelogs have been removed (depends on how they were removed). 

The trigger you have written will try and insert a second row, and is causing the triggers view of the table to mutate (as it will end up in an infinite loop, essentially). You actually only need a trigger that sets : 

So in this case, the is the number of physical reads (in bytes) since the instance was started, and is the number of physical reads (in bytes) since the previous snapshot (). 

This is happening because your default database block size is set to something other than 32k, and as a result there's no 32k cache buffers available. To fix this, add: 

Just use conditional statements per column for each number range. The total can be summed by just using , assuming all of the data in the table is within one of the ranges - if not, just restrict it as with the others. 

It's actually surprisingly easy using , as 1-7 will be 1, 8-14 will be 2, 15-21 will be 3, 22-28 will be 4 and 29-31 will be 5. Doesn't matter what the name of the day is, that will always hold true. 

You can set it to a non-zero value that is equal to or less than , so if you need to allocate more memory, just up and . eg: 

If your local machine is not configured to use ezconnect, you need to specify the TNS name for the database, like so: 

The parameters are all prefixed according to which part of the system they affect. = filesystem, = networking etc. This sets the system wide maximum number of shared memory segments. At a high level, a share memory segment is a "piece" of memory that multiple processes can all attatch to at the same time. You can view all current shared memory segments on a Linux box using the command . configures semaphores. A semaphore is best described as: 

You can see which character sets are being used by a particular database by querying the data dictionary view. Your export would have been done from a database with the parameter set to , and the parameter set to . The difference between multi-byte and single-byte character sets is explained in the name. Single-byte characters are stored in a single byte, i.e. 8 bits. Multi-byte characters are stored in one or more (multiple) bytes. As far as importing multi-byte into single-byte (and vice versa) is concerned, it really depends on the character encodings and whether or not the source character actually exists in the target character set. By way of example, a Japanese multi-byte character is not going to exist in the character set, and you'd end up with a database full of signs. I strongly suggest you read the Oracle Globalization Support Guide, as this goes into the topic of internationalisation in great detail. 

MySQL will have silently done some mathematics with and got its knickers in a twist. It does warn you though: 

You are encountering these problems because you are running a 32-bit version of Oracle XE on 64-bit Windows. This is not a supported configuration, and is known to have many documented problems. Due to there not being a 64-bit version of XE, you can instead install the Standard Edition (free for development) from here. If you're also using APEX, you can get it here. 

First, I'll cover the SQL row-limiting side of things. In Oracle 11.2.x and lower, you have to use and a subquery, as it doesn't support the or clauses: 

The plain answer is that not all RDBMSes support all of the various ANSI standards. Oracle just happens to not support this particular part of it. Oracle does however support . By the way, an example of is terribad - You can break older versions of Oracle by doing an into . 

When you execute PL/SQL in a package/procedure/trigger, Oracle disables roles (this is not the case for anonymous blocks). As a result, you have to grant permissions directly, rather than through roles. Jonathan Lewis explains this well here, plus it's covered in the documentation here. Invoker/definers rights are documented here. 

Unfortunately the maximum length a or string can be in Oracle is 4000 bytes. The only option available to you if characterset conversion pushes you over this limit is to convert the columns to use the datatype, but we warned - s are difficult to deal with and can present challenges. 

The part specifies the base of the hierarchy (which is probably the start of a journey, in this case). 

This link explains how semaphores are used & what the 4 different values actually set. sets the maximum number of files that can be open systemwide at any given point in time. Once the limit has been reached, trying to open another file will fail. is (simplified for the sake of this answer) the maximum number of concurrent file read/write operations that can be in progress at any point in time. is the IP port range used for outgoing connections. So when a process opens a connection to the outside world, it'll use a port between 9000 and 65500. This explains what ports are. The following are networking parameters, and basically control how much network data can be in flight at any point in time. is the default OS receive buffer size for all types of connections. is the maximum OS receive buffer size for all types of connections. is the default OS send buffer size for all types of connections. is the maximum OS send buffer size for all types of connections. 

I'm not aware of a tool that just checks config for validity, but there was a thread on the pgsql-hackers mailing list here that discussed a proposal for a validator. 

Use a trigger. Here's some code you can use as a base. If you also need to handle UPDATEs, only a small change is required. 

You have to drop and recreate. If you look at the documentation here, you can see that only modification of the storage clauses are allowed. 

The reason for the truncation is quite simple. Some characters (accented ones, for example) in the WE8ISO8859P1 character set are stored as a single byte, but in AL32UTF8 they end up being stored as multiple bytes. As a result of conversion, a 4000 character string may end up actually requiring more than 4000 bytes. By way of example, this query shows you that the Euro symbol (0x80 in WE8ISO8859P1) becomes 2 bytes in AL32UTF8: 

Oh, and also the affect the situation - I missed them because the question was formatted like someone had been sick on the screen. 

The answer is very simple. The prefix in executes the following text as a command in the local shell. In your case it's executing the Unix command locally. Query to check the name of the machine you're connected to. There are ways to execute local Unix commands via the database, but it's seen as a huge security hole, so I won't document them here. ssh (assuming Unix) into the database host instead. 

A tinyint(1) can hold numbers in the range -128 to 127, due to the datatype being 8 bits (1 byte) - obviously an unsigned tinyint can hold values 0-255. It will silently truncate out of range values: 

Oracle 11g doesn't support the clause, though the impending 12c release is rumored to support it. Anyway, you can do this using an analytic windowing function: 

Oracle exposes its data dictionary through views. You can use these views to query the information you need. The main views that you'll need to use are: 

There is no simple way to achieve this. You can either do it by tracing the session or by using a login trigger. Here's an example of how to do it using a DB login trigger. Logging table: 

, along with , , etc is a (Data definition Language) statement. is not allowed in PL/SQL blocks. Your script is a PL/SQL block (it has and , along with variable declarations). The way to work around it is to use : 

You can also do this using , but I find the above way to look cleaner. Example SQL Fiddle for you to mess around with. 

This is a resource issue. The DB server cannot satisfy your queries due to the client host being configured incorrectly as-per the pre-requisites for an Oracle database client installation. Ask your system administrators to verify that they have set the required number of open files, semaphores, shmax etc etc. Link to the Oracle documentation - I assume Linux, but Solaris docs are a link away from that. 

Flashback Database Flashback Database relies on flashback logs (stored in the flash recovery area) to restore a database to a particular point in time. The time taken to restore a database using Flashback Database would therefore be dependent on the amount of flashback log created between the restoration period and the current point in time. See this link for more information & limitations. I'll add that it's lots quicker than a point-in-time restore using RMAN (I imagine that's what you were eluding to when you asked the question in the first place), but there is also the extra overhead in writing flashback logs that needs taking into account. 

I'd use instead, with a job for each refresh. It's then easier to manage, and view previous executions. 

Also, in Oracle, the owner of a schema (hence the schema name) is the user name. Obviously, grants can be given to other users to perform DML/DDL on other schemas, but you still have to login with a user with sufficient rights. (Proxy logins exist, as does , but both are beyond the scope of this answer). 

If you required a differing number of players per game, then I would have designed it differently - with your requirements there is no need to add an extra table & increase the query complexity. Also note that I have made the . Using a as the PK is generally not a good idea - what would happen if two games were created simultaneously? You'll also probably want to add foreign keys to/from and . 

Just plug the window size into where the two "7" values currently are. SQL Fiddle here - new fiddle with slightly altered data so you can see that the windows are different for each . 

would be the listener name for the above entry. If you need to add databases to the listener, add an entry to the , as follows: