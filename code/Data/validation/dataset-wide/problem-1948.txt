So, again "your" approach is all detail. Within that approach, really in general that letter seems fine and good. However do bear in mind the totally different approach, the "break the news first" approach. You could possibly argue that in today's typically antelope company, unicorn company, whatever-the-heck-buzzword fast paced tech team world, the latter approach is more how you'd do it. And one more thing: consider a third approach. The fait accompli. (Or even better, the faits accomplis.) Also known as the "by the way..." approach to breaking major news. Essentially, on the end of an email on another topic (ideally to BOTH the GM and the other boss you mentioned), type ... "and by the way guys, from September 15 I'm thinking of living temporarily in Prague of all places for some months. (There's that new blah blah institute there.) To discuss? Also that new EC2 is acting up, I'll get rid of it." You know? After all, you're (it seems?) a remote worker: companies get huge benefits from remote workers, and one of the few benefits the remote workers get is that you can live flexibly. I've tried to outline your three possible approaches 

For free and instantly, one can find a priceless list thanks to SO ....... $URL$ If you totally absorb merely the top four, you will be so far ahead of the game you won't know yourself. 

Regarding the airfare: just say nothing about it at all. All large businesses can easily chop and change travel arrangements; forget it and don't mention it. It's a drop in the bucket compared to overall recruiting costs. 

Almost every programmer starts hobby programming at around 9, 10, 11, 12 or 13 years. I'd say 90% of programmers. Every single person who has ever worked for me, for example, fits this. It's not even worth mentioning - it's like saying someone who is now a doctor or nurse "really cared about people even when they were kids!" or that a working musician "started playing instruments at 10" (what musician didn't?) It's something that "goes without saying" for programmers. You might mention in passing on your cv "Like every other keen programmer, I started at age 9!". But so what? It's universal. When they ask how long you've been programming, they mean professionally. This is completely unsurprising. (Note for example that "how long have you been building bridges" means "since after graduating" - if you kind of included your years in bridge-building-college, in that calculation, .. it's sort of weird. it's just self-evident that when you ask that question, you mean how long have you been doing it professionally.) Also one point (not trying to be mean...perhaps today you're a hot-shot low-level assembler programmer), you mention your programming as a kid, was, "myspace layouts". You should be aware that if down the bar you ask very keen, basically very successful, "hot-shot" programmers who are now adults, what sort of programming they did as a 10 year old (bearing in mind again that basically everyone who programs starts when they are nine to fourteen), the answer is often something astounding like "I wrote a natural language compiler" or "actually, I invented the Scrabble algorithm back in the 80s as a teenager", or at the very least "I was a seasoned expert in driver code by 14" or "oh, by the time I was 15 I already contributed X Y Z to these well-known open source programs.." .. something like that. Unfortunately that is the state of play with mentioning "I started at 10" on your cv. Regarding the weird (should be a totally separate question?) issue about a security clearance job ... all you can do is tell them the truth, and such jobs always have a facility for you being able to have a piece of paper, or the like, that shows you really did "something" in a field, even though you can't tell about it. It's not complicated - show them pay slips, for example. If they profoundly don't believe you, and it matters, phone the previous secret employer and seek advice, perhaps. 

Ask for more. Every time in your life you're buying a house: you offer X. The reply must be that the violently reject it as being too low. Think about it: If not, you have offered too much. Every time in your life you're selling your services: you ask X. The reply must be that the violently reject it as being too much. Think about it: If not, your price was too low. 

You'll be obligated to give a certain amount of notice (say, one week). You should no more give them more notice, than, they would randomly give you more money in your paycheck one week. 

One thing, if you DO want to stay there and ask for more money. You have asked "who to speak to" (manager, HR, whatever). The answer is easy - everyone. Couldn't be easier. Go straight in tomorrow and immediately go to your Manager, colleagues, HR, senior management - whoever you pass first walking in... 

It's commonplace in software that you get "young people"; there's not a lot you can do about this. It's common that you have a 20 yr old more expert in a certain niche than a 50 yr old; it's common that in a team you have a 20 yr old who (in short) makes more $ than the 50 yr old. For that matter in any of the everyday well-known cases of super-successful startups, you get teen owners hiring 50 yr old executives. There's just not much can be done about this; you might as well say "I'm a famous basketball player, it's awkward that some of the young guys make more than some of the old guys." Really all you can do is use social skills to be polite. Don't jar people the wrong way. It's well worth not getting a "big head". When you start meeting software hotshots (i.e., guys much younger than you who drive Ferraris, have already started a hugely successful business, or invented and programmed the latest robot arm, idiotic app store megahit thumbcandy, or the like) ... how will you feel? You'll just get on with it. 

It is inconceivable the company would mention any company financial details, any reasons whatsoever, or anything else - you'd just get a totally bland legalistic statement. If OP decides not to go with New Company, OP sends an email 

Always choose salary. Your future is - your salary. Your skills will only be developed by - more and more challenging jobs, which are indeed the jobs with higher salaries. In 15 years your programming career will be over, you'll be too old. (With luck you'll then be able to move to more technical-high-level and/or management roles.) You'll need to look back and ensure you chose the most skills-growing jobs (which are those with the higher salary at every step), and that in 2040 you have a high income (which is only possible if you extremely aggressively increase your income every year, every month, with no gaps, and no letup). 

it's that simple. Don't mention any whys or wherefores. Note that when they need to cancel one of your shifts, the only email you get is "Your shift is cancelled." Same for you to them. To repeat, mention nothing - absolutely nothing. Just state that you are cancelling some shifts. 

Get another job. Software years are dog years, three years is a long time. Generally the only way to advance (on all fronts - technically, money, position) is to move around between companies. It is true that there's a handful of organizations that you can stick with and move around in: however even in those case, you know the saying "it's the best place for your first and third job" - you know? Importantly too, note that starting at a new place is the only way to get away from that "I'm the young guy here" thing. After you change jobs a couple times, my guess is you won't even remember the issues you raise in this post. Do actually deliberately seek "management" oriented roles. Note that I only mean as a temporary measure. No programmer wants to mess about with gant charts and stuff. But think of it like ... having to do a humanities course in college :) I will hugely improve your career path. Stop working. Don't forget as Mr. Kiyosaki points out, "JOB" stands for "Just Over Breakeven". As a rule you'll never achieve anything in a job other than paying off a mortgage and paying for the kid's orthodontics. While you're young and can live on breadcrumbs, quit working for people and try your hand at your own product. 

I guess all you can really do is seek opinions on this one. From your many (interesting and thoughtful) questions on the matter I can tell it is an important issue. Inasmuch as you are essentially canvassing other's opinions on the matter, here's purely one man's opinion... 

You'd be leaving them in the lurch. It's extremely commonplace that programmers (much like authors and screenwriters) very often feel that "time is all over me" feeling. It is very much part of the life and you have to deal. 

When you do in fact "interrupt someone to express that you need a talk with them". You must to do that politely, but, you also have to do that decisively, "quickly", causing as little interruption as possible to the person. 

A fascinating realization is that .. Strangely enough: programming is exactly like being a musician. Weird - but true. Imagine you needed to hire a guitarist. So, you're making a music track (perhaps for a TV commercial or movie). You already have drummers, string section, etc, but you need a rock guitarist. Imagine a candidate said this: 

This will never, ever happen. Be aware that they are about to lose their livelihood because of you (!) Enjoy the job/contract in question (for as long as it lasts, or you want to). You will never "affect change". 

It's obvious that those in the video/film industries of course include all work they have done, on their showreels. If you are unfamiliar with this you can instantly: 

Note ...... the "trick"" in that language is you don't mention anything about yourself or indeed the issue of back talk. Immediately go to language about the technical complaints. If you feel "socially awkward" confronting Complainer based on what Complainer said - unfortunately you have to just "get over it". It's a case of "What would Steve Jobs do?" (Or insert Richard Branson - whoever you think of as a prime mover.) It's inconceivable Jobs, Branson etc would dither around wasting company time on this. 

You're assuming that you can talk to them there-and-then. So, you're hanging around waiting until you can talk, expecting that you can talk "right then". This is wrong; you shouldn't do this. 

Then, take the tack that it's simply too much workload for one manager so a solution needs to be found. Call a meeting and lead with ideas like .. 

Note - say those words either to your manager, or, the colleagues. "You're not at high school", as they say. It's a place of work, the sole purpose of the company and the employees, is to decisively make money. Speak up clearly. 

I have never, ever, ever, ever, ever, ever, ever, - etc - seen a software division or entity with a process1 As my first computer science professor mentioned, "If architects and builders were like software engineers, civilization would collapse by Tuesday." Note! Your comments mark you as a beginner! I've just read on the rest of your post, and indeed just as you say "The more senior devs I have talked to out of the work place laugh like crazy..." So, nothing more to say here; you've "discovered software"! Enjoy. Don't again repeat this idea ("I've noticed we have no process or documentation! I can fix it!") to management, or anyone! ... rather, be specific. Think it through tomorrow. On Monday, tell someone: 

Firstly before anything else, you should go see a therapist. (A psychiatrist, therapist, psychologist, software-therapy (like sports therapy) specialist - whatever is relevant in your region.) As Old Padawan astutely mentions above, your behavior indicates that you need a therapist - it's great and you should go today. You will be amazed at the specific, actual, techniques of today. It's not like "in the old days" or in a movie where you talk to some idiot about dreams, etc. Almost certainly, your company will happily pay. 

Note - when you leave (assuming you don't get the Tough Project, which is possible), be super polite. Here's some great language: "Boss, you've been awesome. I can tell there's nothing for me to do here - the company was too kind in offering an internship. I've stumbled on to a great open source project that will really stretch me and fits in to the next 10 weeks. Thanks again, it's been fantastic, I'll clear out my pencil from the desk." 

Regarding your current "2%" company, leave today. Three years is probably too long to stay in the one place. You could have had two new contracts or jobs (each one with MUCH more money than the last). You're close to staying there so long that, when you eventually leave, unfortunately the next companies will know that you are "soft on money". They will offer you 5% etc. increases to come work for them. You could stay where you are while you find a new job, but I'd encourage you to just leave - be aggressive. The next company will like your positive, confident, aggressive attitude, and you'll do well. Enjoy! 

"How can I best prepare for the meeting..." Write down a list of specific facts: things that have happened. With dates. In the meeting, enumerate the list. Say and do nothing else. 

I dunno. So often it amounts to nothing. It's pretty much like getting a lottery ticket you know? Of course if it works out you're a hero and you can finally buy that Porsche some years from now. Fantastic. But you really have to worry about the now. 

I honestly assumed you were being funny when I first read that! OK, so now you have completely, totally, utterly learned that you were wrong to think that, and it's not how the world works. I've thought a lot about the best advice to offer here. I believe it is this: You have learned that two weeks is an incredibly long time. Every single person reading this, will be dead in 5000 weeks. You can not waste two weeks of life like this. After two hours you should have acted, and urgently. You must act (now, i.e. after reading this). Walk over to the manager and say "Thanks boss, you're awesome. I finished all the odds and ends. Can you give me a really difficult programming task and I will get right on it, and give you blood sweat and tears on it - let's go! What's the toughest most annoying thing you need done, I'll do it." If you don't get anything (and that's their prerogative - it's a free world, nobody is owed anything), leave. You can achieve an incredible amount in 10 weeks; an instant obvious suggest build an open source widget that will give you excellent publicity the remaining 1248 weeks of your career. (Your career in this lifetime will be 1250 weeks at best; you've very unfortunately wasted two, or had two wasted for you. But you've learned a super-valuable lesson: never waste two weeks. Stick to the "two hour" rule. If anything is proving to be a time waste after two hours, walk.)