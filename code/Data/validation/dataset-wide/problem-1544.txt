Aside: Semicolons are typically not necessary after braces. You're using a code block for a for loop, not a function expression. Naming 

Finally, we can determine the range of primes we want. To do this, perform a binary search on to find the lower and upper bound. Then, select a random element from the list. You may wish to save this list of primes, so that it only need be computed once. In particular, observe that the sieve of Eratosthenes can be "paused" and "resumed" in computation, so that the results of previous computations may be used in future computation. I leave this as an exercise to the reader. 

I was writing an answer but @jsanc623 beat me to the punch with the , so I'll just add the missing bit. Your solution won't work if your file is served from e.g. . Instead of doing it this way, you can find the current filename more reliably like so: 

A better way of checking visibility would be to use the function in conjunction with the selector. Here's my revision. I took the liberty of renaming the parameters. I also used the common practice of naming jQuery variables using Hungarian notation. 

Here's an example that takes advantage of the built-in functions, and intelligently merges in conflicts. (ideone) 

Alternatively, leave the first line as , and change the last line to use . (This coerces the array into a slice.) 

You have a bit of code duplication that could and should be removed to avoid mistakes. FASM supports macros that you can use to remove duplicated parts. One can define a macro: 

Buffered input I don't know why you chose buffered input as your method of entering the hint, but in case of this command the data has a specific format. 

A bit of explanation. This macro will do all the work that is required to check if a specific flag is set (specified as operand op1) and if so print the message specified by operand op2. We need to specify also our label as local so that there is no label duplication when macro is placed in code multiple times. We also keep the flags to be restored after printing. Having this we can simplify the code a bit to basically this: 

Without the actual model and some numbers (how long does it take to execute/ how much 'space' it takes?) might be hard to optimize, but what I can tell is that you call quite a lot in such short method. When you do call it you basically iterate over a source (is it DB source? in memory source? other?) and grab it to the memory of your process. Try reducing the number of calls - it will improve your performance. Take a look at this fragment: 

You could also add a new line to those strings so that, they are a bit separated from each other when printing like this: 

If you are careful about it, instead of creating a new PDO instance on every invocation of your script, you can use a persistent connection. Make sure you resolve all transactions through a or . To make your connection persistent, just include in your options array when constructing your PDO object. 

doesn't make much sense to me. For non-negative numbers, this is equivalent to , so you can just use that instead. For negative numbers, this will always return , although it seems like this would be an illegal argument to your function. @mleyfman provided a great solution. In practice, the code provided achieves something called clamping, where you restrict a value to a specified range. You can roll your own function like so: 

I agree with @ckuhn203 in that the first looks cleaner. I'm not too familiar with C# and its style, but in C I would definitely prefer using a loop: 

I'm sorry this is so short, but I only have time to give it a quick once-over right now. The first thing I noticed was the flickering of the cycling icon as I scroll through the bottom. Compared to the rest of the application, which looks great, this was awful. This is happening because you are assigning the to the on , which doesn't make much sense. If you move this initialisation to a handler instead, the flicker will be gone: 

Right now, you have two separate AJAX calls: one to determine if a day has bookings, and one to determine whether a specific time slot can be booked. I would suggest one of two things: 

The actual string starts on index 2 and before that you have max string length, and bytes read. Also there's no at the end. You have to put it there. 

Using those instead of bare -ing will make your code more readable. Having those it's clear what you try to do with this code High-level functions 

and similarly in the second place. Also some checks for input length might be good to do. You should also comment more your code. I strongly believe the code should be self documented but not on such low level as asm :) So comment more. GIST 

is defined twice. First as a string ( and the second time as a label. I would rename the first one to and use it in 

which is just . So let's call it like that and make sure a requirement that when calling it we have dx 

You have a bit of code duplication that could be extracted and consolidated. But first with some error fixes (at least the code did not compile on my TASM). Compilation issues 

What we do here is just divide the number in by 10 and print the values stored in (result - only if >0) and the - reminder. Printing the hints On fourth attempt you are putting the character to be printed in . It should be in . You don't also have to use different registers so just: 

Try to match the country code. If none matches, falls back to default. Lookup the appropriate RegExp for that country code and attempt a match. If the match succeeds, attempt to verify the number with the appropriate function. 

Finally, your implementation of is linear when it could be constant. Observe that performing a union operation (on two disjoint sets) will decrease the number of disjoint sets by exactly one. Then, you could add a member (say, ) initialised to that you decrement in your function. 

Personally I don't think having one extra line per early return is much clutter. It doesn't seem like it'd take long to understand either. That said, if you really wanted to, you could reduce it to one line. You'll still have to assign a variable though. 

Hint: The problem statement asks you to remove friends from the end of the list as necessary. Think carefully about this. 

I'll dissect your JS from top to bottom. But first, the overarching stuff: you tagged this question with OOP, but it's not taking advantage of OOP. It would be very natural to have and classes that you could build upon instead of having some giant object. 

This started out as a comment since I'm only going to discuss , but it grew a bit big, so here we go. First of all, I strongly recommend @nukeforum's suggestion that you use the function. Also, as has been mentioned aplenty already, should return a bool: 

Other things that might be good to fix You have the same loop for scanning the characters. Why not enclose it as another proc and just use in those two places? You can make assumption that for example will point to the buffer that has to be filled. Also in this scanning you could handle for example backspace character and delete the characters. 

You are calling on a source basically retrieving the whole collection with all the properties and only later you are taking just the two fields. If you want to reduce time and space - try taking only what's needed from the underlying source, but also it greatly depends on the typo of source you are using underneath. Consider dropping the LINQ at all. LINQ is great and compact but it has it's 'dark side' in term of hidden allocations. Also think abount some old-hasioned ways like 'paging'? For the dropdown that might not be the best way - but maybe it is. If for most cases only the top 20 repair issues are accessed then here's your optimization - and for few cases user would need to load more items to the list - that might be ok. 

as in the will be the number of characters not the ascii representation of that number. If we could restrict ourselves to maximum 9 characters that would be easy. Just add 48(dec) to the and you get the value. Since your secret is limited to 21 characters we could go with a simple method for printing.