The constructor seems to call methods that go beyond a normal initialization. The constructor calls virtual methods. This might not work as you expect it: Virtual member call in a constructor 

If you made the of type then you woundn't need the cast... but the already has a constructor that accepts a collection... but it uses the extension. This is a vicious circle. You should move the loop into the constructor or use the or even better use the constructor to initilize it from the . The should not depend on the extension. The extension should depend on the . 

If both answers are yes then you should use curly braces. Doesn't this look cleaner? You see right away that there is an and what it does. 

Performance & Components It's been claimed (by many sources) that this solution would waist resources by doing unnecessary comparisons or struct allocations but... the biggest waist of resources is of course LINQ and its state machine. Tunring all three methods into ones that return a makes them nearly equal. The difference between the original solution and mine averages merely to ~30ms for 10.000.000 calls. It's been also claimed (by many sources) that for an algorithm of this complexity (or simplicity) it wouldn't be necessary to use other .net components like the ... and it turnes out that original solution does not work for a grid of size 3x3 and a coordinate anywhere outside the bounds. It returns always three points whereas none should be returned. The lesson is the same as always: 

I call them hash-codes because I'm going to use them as such but at the same time they are a numeric representation of the string-code and they also need to remain sortable (they are use in a ). 

It would be a lot less surprising if the class implemented the interface... it's also strange that you named the method but the argument is . 

I like lambdas very much but putting this much code into a constructor seem like way too much. In all four cases you should encpasulate them in separate funcitons/classes and pass them to the constructor like a strategy pattern. This would make the logic easier to test (I guess) without having to be a part of an . You already pass the to the constructor so there's no need for closures here. The could take one more parameter to work with later. 

Ok, we can move in each direction now. Notice that I've change the properties of the point to make it easier to understand: 

This line in the method could use in place of the empty array. I also don't like the huge lambda here . It would make more sense to make it a testable helper method in another class than immediately saving and hiding the result in a dictionary. 

the index should never be less then zero. If it is, then there is an error. Its an enum and the property isn't nullable so I think the protection isn't necessary. After getting ther order from the dictionary you should be able to immediately call this 

Example-2 (real) I use it to access of s in my cron-expression parser. They initialize values valid for a specific field: 

but I would like to see something that is working. I'd like to see that you can write code that compiles and does something useful and that you know basic stuff. So exactly what you did here. 

You could probably parallelize it with but the code isn't complete so I cannot make any other suggestions as I don't know how the works and what it is. 

this way you wouldn't have to copy/paste the repeated logic. And if it doesn't have a link or an URL then it's easier to add an to check it then duplicating the code. 

The hardcoded connection string name should be a parameter. You can have default constructor using a default connection string name but it's always a good idea to have another constructor that lets you use another value. 

Logging The user of the downloader should not need to call the log methods. Logging should be invisible and ideally you should use dependency injection to pass the logger to the downloader. Currently it's not only tightly coupled to the console but also to the file system and even hardcoded file names. This is all bad for testing. 

You are calculating this for way too many objects and faces. Consider this algorithm (I'm not sure if it will work because I don't know how Revit stores objects but it might give you an idea). 

With this new type we encapsulate the view-logic. It is now responsible for creating a string for the and additionaly it'll store the type of the problem. No more strings. 

You should know that the class also has issues but I currently haven't any ideas how to improve it... in fact I didn't really tried hard enough ;-) 

This isn't really helpful as there is no information about what went wrong. Use at least the or for logging purposes . 

I have a few tools that run automatically. In those tools I usually run two to six jobs that run asynchronically. Sometimes when there is more data then expected or to prevent them from running indefinitely in case of a bug I cancel them. The following example demonstrates my pattern with 90% accuracy. This is, the only parts that are left out is the actual business logic, IoC and the names of the processors are generic. Everthing else is pretty much the same. I was wondering how good or bad this pattern is? It's been working fine for many days but maybe there is something that I missed and will give me headaches someday? 

This will pass the property name to the method that now can search for the setting. You can easily cache it if you like. 

Setting culture Another case for encapsulation are the four lines where you set the culture. Just write a new method and put two of them there: 

You might consider making the properties of the virtual and override them in a new derived type like . This way you could still use the same old type as before but with additional abilities. 

Consider using a parameter rahter then using closures. That makes the usage even clearer. If you define it as 

Unfortunately there is no interface that defines the operators but you could define your own data type and with a litte over-engineering you get his: Base class for the argument: 

Everything seems to be either an or have the suffix . Calling everything in an OO language is like you ware calling every-thing a thing. No one would understand you. 

By declaratively specifying the labels and with a little bit of reflection you can reduce the method to: 

You know that this might blow? If the list is empty then the cannot be read. You need either C# 6 for this or one more line of code. 

This question can be answered only by you. You need to know how often it's called and whether it might become a potential bottleneck. But I'm pretty sure you won't see it in any benchmarks. There are parts in your code that are with certainty much slower. The best way to tell whether your code needs optimization and where, is to use a profiler. 

If you decorate the second parameter with keyword then you can just type the values without an array (if you need to): 

I'm not sure about the callbacks but you are using the destructor/finalizer in a way that might cause problems. 

We can of course try to optimize it but this would be only an ugly workaround trying to minimize the flaws of the current design. There are more questions then answers: 

There are three more extensions: one that I use to declarations, one shortcut for regex and a that I use as an inverse of to use positive conditions if I want to exclude some cases. 

You have probably noticed the combo-box has this event handler that in code-behind is implemented like this to get the currently select , then the switch is used to change the sorting by first clearing the current settings and adding a new one that changes the property of the object that is used for sorting. In this example I only used the and the . Now each time you change the selection WPF will update the and if you add or delete an item it will use the current setting to re-order it. 

You can make the usage of the a little bit nicer and get rid of the try/catch block with two disposable helpers: 

There is one thing I don't like about the ... it's a god-class doing everything which means it's doing too much. I suggest refactoring the code so that the receives a or some kind of a . Then put everything sudoku-board releated into a class that expects from you the size of the board etc. Additionally I'd implemeted a that can check whether a game can be won. I think it would also be a good idea to create another class that can only generate boards. Put it all together and you have nice modular sudoku game where you can test each unit separately and validate its functionality. 

On top of all other answers... Your current code can be made even simpler. There is no need for the parameter. Just try to parse it as int and if this doesn't work assume it's a string. After all you need only one validation method which is that you can use for both numbers and strings. 

Here you don't need to repeat the property names. C# can create them implicitly if their names can/should be the same. This means you can just write: 

This really needs a better name. It's netiher an index nor a . I suggest something like as this looks like one. 

I don't think that implementing the interface by the is necessary. Clearing all collections isn't of much use. If you abandon them, the garbage collector will eventually find them. You dispose resources. Clearing collections is just additional work that might hurt performance. 

Error codes are an ancient era. Each of these values should be a separate exception that is easier to catch and analyze and setup and log then enum values. 

Too many Repetitions You use the key a lot. What if you decide to rename it sometime? You'll need to search everywhere for this string. It'd be better if you encapsulated it or used a constant. I prefer extensions so it might look like this where you try to get the cookie and if it is not null then you get the value. 

I cannot look at it. You treat a XML like it was a normal text file. This is insane. You should parse it with the , find all the and elements with LINQ or XPath and then check the value if it matches the pattern and if necessary call and resave the file. 

This does not only gets an object but it also create a new one, a default one so the method name should be . If you can use C# 7 you can simplify it as: 

no one else does ;-) Ternary operators are very usefull but you really exaggerated. In a production code I would never accept it. You should break it to smaller pieces. 

Less nesting is usually better so if there is no getter or it's an indexer you can return right away. 

This means that if you wanted to get the default value for you could use to generate this code for you: . And it goes like that: 

ASP.NET should take care of it not you. Your job is to just give it some data that should be turned into a response. It is not the right place to decide about the format of the response or even serializing it by yourself. 

In order to reduce nesting you should use early returns. This means that you should negate the first condition: 

I'm not sure what you mean by is this needed? The strategy pattern or the nested builder? They have both they purposes. You used the strategy pattern correctly but the nested builder doesn't have to be nested. As I've already said in my previous answer, it only makes sense to nest it when you want to access private fields of the constructed objects becasue it's the only way to do this. 

and a base class that is a default implemenation for it. There is also a delegate that I use for invoking user code. 

Then I guess you shouldn't have gone with the Strategy Pattern but with inheritance. This would allow you to define types with different names and craete them from different names too. (I wouldn't in this case). 

Actually not. They are not the responsibilities of this class. Validation is injected and provided via a service so it's fine. I would worry more about its design. The constructor requries two parameters but their corresponding properties are not so you could just use them. More appropriate would to use fields or make the properties only and private. 

This doesn't look right. Does an empty file name really makes sense? I think you should prevent it from being null-or-empty or add another constructor that doesn't require it and the one that does, should not allow a null. 

I simplified the class by removing the internal and the dependency on the . It doesn't know anything about it anymore. The cancellation works with a local . 

Yes, I think it is a bad design and implementing a repository the way you did it is the right approach. 

You should try to encapsulate this logic otherwise if you need to change anything later you'll need to think to do it twice. 

The other two tests make sure that serialization does what it is supposed to. So the first test verifies that is not called because the type of the value alread is the same as one of the types that the target supports. 

I wonder why did you write this method? You can replace it with that, strangely enough, you already use in another place and even the exact same overload: 

There are also a few other supporting classes and extensions that I didn't include in order to not make it a wall-of-code (let me know if I should have). 

This might look like an overkill now but you'll be glad having this in few weeks. You never want to maintain comments. It's easier to maintain the code. If you format it properly then it's pretty easy to read. This means that in a case like this with lenghty code I'd rather use full-property syntax, add a few line-breaks and indents and here it is. Doesn't it look much better? It documents itself, leave it as it is. Work with formatting now. 

You should also be more specific when naming your methods. means you sort descriptions and not something else by description which is what you are actually doing. 

I used the as a parameter for the method but if you really need it to be the that it's a minor adjustment. 

Some of the values contain spaces so to make the csv file more robust and easier to read you should quote them or just everything. I also noticed that your csv does not contain the header row. Is there a reason for that? I suggest using a more generic approach with some more linq that will first extract header names and then the values. Everything is joined together with the extension that uses a initialized with the header and then appends each line to it. 

Sometimes when I write objects for holding data (not real DTOs, no serialization involved) I also create an interface for it. The class that implements it can also perform some null checks. I don't always like to use the because you need to remember to call it. Such implementations may look like this: 

I think this needs to be separated into multiple modules and functions. If you do this, you can even docode messages encoded in various ways starting at any corner or (counter)clockwise. This can be achieved by mixing functional and oo-programming. 

Rename it and mark it propertly with . Let its return value be . In place of the you can use the shortcut : 

This time I'd like you to review my unit-test helpers for binary operators. I wrote them because I'm often to lazy to test these operators because writing those tests is so boring. My little helpers are based on the and are built as extensions for . They start with a class that introduces the extension. 

Using delegate injection is sometimes useful and I do it myself occasionally but in your example it doesn't make any sense. You already have a class that provides string manipulation functions (or at least it looks like it could) and all you need is to add an interface to it but instead you pick just one method. It would be fine if those method were extensions but here it's an instance method that actually could be static because it does not require any state.