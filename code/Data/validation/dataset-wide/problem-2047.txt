Programming is normally considered a M&P (Managerial And Professional ) so the best fit is Management Professional. Skilled as some one else suggested is totally wrong skilled is for blue collar trades like blacksmithing , carpentry and plumbers. M&P is a HR term that encompasses all professional grades even if they don't have any direct reports. 

I would decline saying that unfortunately you had a previously arranged social engagement. I avoided going to a FTSE 100 employers Christmas do by doing this and also "forgetting" to register in time 

You need to talk to a lawyer or some one who understands TUPE, this can get very technical. If your bonus was contractual you should still have it - was this not covered during the consolation process. 

So let me get this right you have a disagreement with your employer or with software patents in general and you seem to want to find way of damaging you employer by invalidating a patent? Its up to the patent examiner to do this this prior art may or may not invalidate the patent its nit your job to decide this. You do have a duty to your employer to be a good “servant” what you suggesting is very dubious and is in my opinion unethical – note I am a Union activist in the largest European union that represents scientific and technical staff I do not take the employers side lightly in this. 

For a DB Final Salary Pension you can estimate out what its worth by working out how many qualifying years you have in the scheme and at what rate you accrue (30th 40th or 60th are common) your salary and inflation. Obviously you have to take an average RPI. You can then compare this value to a DC scheme by working out how much you would have to invest to get the same income assuming the same rpi. 

What privacy is violated by using CCTV to check when they entered and exited the building the build or are at their desk or not? Employers do have a right to check up on hours worked and in some country’s not logging OT hours correctly can get the employer fined. What code of conduct for CCTV are you referring to? And its not like you have been asked to look at the content of their email account which would be a privacy violation. You seem concerned about your relationship with other employees is there a culture of falsifying time sheets at your company – what I might term “Spanish” practices. Just get all HR requests in writing and make sure you conform this with your boss. 

You don't really have any choice other than being professional and reporting any mistake you find in your review. Angering your superior might be "bad" for your career, but signing an incorrect document would be an even bigger mistake, because you would accept to share the blame (and probably be the ultimate target, as superiors often tend to offload faults down the command line). Given that you WILL fight with him over reviews from time to time, there are a few things you can do to improve the situation: First of all, always remark in the positive, and try to shed a good light on his work. He will be less inclined to fight if you downplay his mistakes to "minor issues not worth fighting for". Second, always provide complete information and documentation supporting your findings. You state that 

I'm not going to focus on the personal and interpersonal aspect of the question, as they're covered well enough in other answers. I instead want to focus on the technical aspect. Testing You said you're writing unit tests. Do you try to have full test coverage? Do you write integration and end-to-end tests? Don't forget that a good testing suite has all three aspects of testing, and having everything tested will make you feel more secure. Dropping testing in favor of delivering more is a temptation anyone has, sooner or later, and it's far too easy if you're left by yourself and don't have testing standards. Force yourself to test, and never consider it a waste of time. Code metrics Try using a code metrics tool (giving you a specific tool is impossibile since you don't specify the language you're using), and conform to industry standards when it comes to writing function names, variable names, etc. (nobody wants to see hungarian notation in their java code). Obviously, you should first of all keep your code style coherent with the one used at your company. Try to read the other devs' code and learn how they write. Deployment system and Bug Tracking Since you are just 5 developers inside a bigger company, you probably also lack deploy and bug tracking tools. Trying to at least standardize (if not completely automate) the way you deploy the product will reduce the risk you give someone an outdated file or library, and having a formal bug tracking system will help people tell you if your product has issues or bugs. Having everything automatically checked and tracked will surely improve your confidence, and will help you deliver a great (or at least good enough) product. 

If the actual job responsibilities and the skill sets required are in line with what you want then really what org it falls under is of only minor importance really. With that in mind when you forget about the fact that it is in the QA department would you be interested in doing what the job actually entails? If so then it might be worth reconsidering your position. 

Essentially your first step has to be putting together a business case for why the team is needed and how the benefits having such a team would bring outweigh the costs to the business in doing so. Some useful questions to ask yourself when doing this: 

If the requests aren't truly urgent (of the "right this minute or it's going to block business critical operations" variety) then a good tactic is to allocate a section of the day (say an hour or so) for dealing with them and batch them up as it were. Communicate in advance to the people you support that because of the nature of your shutdown-related tasks that you are setting aside 4-5pm for dealing with support requests and that any requests you receive will be dealt with then. At first you may need to gently remind people each time they make a request until it sinks in. Obviously if there is a genuine emergency issue that comes in you'll just have to deal with that but there's no real getting away from that. If you suspect people are trying to abuse the notion of "emergency" requests with false urgency or the volume of requests exceed the time you can allocate to the support function then you will need to escalate to your manager. Not in a "users are being really annoying and bombarding me with support requests" way but rather in a "the support workload is too high and it's impacting upon my ability to complete the shutdown work, what would you like me to prioritize?" way. 

3 months is unusual (and IMO excessive) for a Junior-Mid level developer role. Generally I only see ones that long for very senior or critical dev roles or more often management. So yes it's pretty unreasonable, as is the asymmetry of it. Unfortunately such periods, even asymmetrical ones aren't illegal and ultimately you agreed to the conditions when you signed the contract. About all you can do is ask for them to be flexible and see if there is a compromise which you've already tried and they refused. 

In addition to contacting the OSHA, I'd also start looking for a new job, just to keep multiple doors open. Equipment breaking and not being replaced might mean multiple things (no money to replace it, bad management, ...) and an investigation from OSHA could put your company out of business. You want to be ready to jump ship if the one you're currently in sinks, and I'd suggest you to start looking asap, since you said it won't be easy to find another one. 

but this might not be clear for your boss, and this confusion might lead him to think you're just trying to impose you ideas on him. Last, don't be bothered by it. Nobody can be fired or reprimanded for just doing his job. 

This is fairly common if you have an overworked manager. The main way to proceed is finding other sources of work. Are there things the office needs and nobody already implemented? (automated build process, ticket tracking...) Check from you colleagues if they need something software related, or if they feel your products need something implemented. You can develop those features in a side branch* and merge them to the main product branch if they get approved. You obviously should still send emails and reports to your manager, to keep him informed of what you're doing and if the things you're doing are fine. If you still feel you have too few things to do, you could resort to online courses to learn new technologies or strenghten your skills on libraries and frameworks you're using. A good developer never stops learning. 

Chances are the recruiter just copy-pasted a list of skills someone else gave her. The important thing is to know what are the requirements for the job you're gonna interview for, and brush up on the core concepts. That list only tells you one thing: they're asking for a web developer that is probably going to write both server-side and client-side code, and this should be your main focus of study. They also seem to care about clean code, so try to at least be familiar with SOLID principles and designing a modular system. Don't try to focus too much on the single points of the list and you will be ok. 

Your resume is a formal document, just the fact of trying to use humor in it will be seen as unprofessional by some. You don't know who will see your resume, and you'd better try to avoid being rejected immediately for such a small addition. If your resume is "terrible" as you wrote in a comment, humor is not the way you should solve the problem. Be sure to keep your resume short and focused on yourself and your work experience. You can find a lot of tips on writing a successful resume on many sites. Last of all, it's normal not to receive a reply if they're not interested in your position, and that's why you should be applying to a lot of places at once, expecially if you're in an oversaturated job market or if you have no previous experience.