This is an incorrect use of NPE, consider using IllegalArgumentException. Given that you have included this in your code, did you consider the case where items is a null array? Answer to question 1, There is no need to use a list, is perfectly fine. 

This code generally is more complicated than it needs to be, when you are aware of the tree arity, the array is your tree representation, there is no needs to create the conceptual equivalent of how trees are represented on paper in code. This code also has the following errors, using the example in the main function you have written The array representation 

This is a simple implementation of a generic binary tree that holds elements of type T. I was wondering if there was something that could be done better (especially in the EnumerateNodes methods). 

Comments I don't really see the point in on top of your methods. You can just type which automatically propose a neat documentation, per example, in the MatrixCreate function : 

Note : I am using OCaml 4.02, but I could upgrade it to 4.03, especially for the Array.map2 methods. 

I am running a simple OCaml program which opens a CSV file with a pseudo dict-reader and hashes "key" + "value" (where key and values are strings). Then some counts are evaluated on the hashes (but it is not really relevant for what follows). After a quick look at the default OCaml profiler (), I noticed that my program was mostly spending time in hashing elements (I don't know what does though). 

Let me start with few common observations. It's better to generate a complete DOM element before you attach it to DOM tree (add to page) if you can, because it tends to be faster. For example setting its text after can trigger another reflow. Do it often enough and it start to matter. Not every change is expensive (e.g. setting ID before or later doesn't matter much), but I think it also reads better (step 1.: build node, step 2: attach it). If you are building a more complex HTML (DOM subtree), it's also better to create a document fragment, add nodes to it and then add that fragment to page to avoid costly reflows. It's good practice to declare all your variables at the top of function. They will exist from that point onward even if you declare them at the very bottom. Not doing this opens you to subtle errors. Not every variable has to have its own var statement infront. E.g. it's OK to do var a = 5, b = 3 to declare a and b; So on to concrete examples: 

In order to have a "unified" (I realize how ambitious this actually is) syntax when working on dataframes, I wrote the following functions that is a general purpose dataframe set of tools in R. 

I don't really like the methods which forces the user to call it every time before calling . Besides, the algorithm is very basic... Are there libraries doing this already ? Is there another algorithm, simple to implement (performance is not really an issue, this was working with roughly 1000000 elements) My tests are really poor as well, are there better guidelines to write them ? 

The for comprehension, takes each element of list1 and an element of list2 and yields a tuple only if the serial values match. 

Answer to the second question, Since you know the specific there isn't a need to use an array list. In practice however for small values less than there is no great drawback or performance penalty for using an , there is tho greater memory usage. 

The code looks good, very readable, written in a functional style. My only recommendation (beside the comment in the other response) is to separate the concerns i.e. implement the character type counting functionality in a class distinct from UI. At a minimum this should make writing unit tests easier. 

Another option would be to have a or value in your class. Multiple accesses inside the same loop Here you have to access every time in the second loop. This harms performance and makes this second loop unclear. 

I wrote a simple online logistic regression, calibrated using gradient descent to compare the speed of an OCaml implementation vs the same Python script, executed with Pypy. It turned out that the OCaml implementation was slightly faster than the one run with Pypy (by about 10%). Now I would like to optimize my code even further. The assumption about the data is that the values of each rows are sparse (can be considered as factors), they are encoded as integers (collisions are allowed) and stored in a large array. maths.ml 

Personally I'd pick first version when dealing with elements that have fixed attribute values, since it's most obvious and second when attribute values are variables. Learn more. Instead of for() loop over array, you can use 

Correct me if I'm wrong, but you are trying to set number to 1 higher than highest, right? If yes, than that's an awfully expensive way to do this. You could improve this in two ways. Either you store current maximum or since new span with highest number is always added to the end of a list, just pick that one ("span:last") and read what maximum currently is. You don't use aa_stub.data.flag anywhere. Btw, I'm not fond of dropped colons at the end of lines and closing } at same depth as end of block, but that's a personal choice. Anyway, that's a quick overlook of your code. I hope it helped. 

Hardcoded values They are usually a bad idea (what happens if, per example, you use this value somewhere else, and decide to change it someday?): 

I want to plot (on the complex plane, with ) the power series whose general term is the number of partitions of an integer. The more points I want (and the larger the degree is), the longer the plot takes. I first wrote a naive version, added memoization of the sequence, changed the naive evaluation of the polynomial with the Horner algorithm. All these modifications led to speed ups, and I want to know if there are more optimizations I could do.