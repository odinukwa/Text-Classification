assumes that macOS and iOS are the only available platforms. But MetalKit is available on at least one more platform (tvOS), and new platforms may be defined in the future. Even it you only intend to use this class on iOS and macOS, better check explicitly for this platforms 

is not needed, the compiler can infer the type automatically from the expression on the right-hand side: 

Which leads us to the class: The push and pop methods are a bit too complicated. The reason is that you use a single node with for an empty stack, a single node with for a stack with a single element, and then a linked list of nodes for two or more elements. It becomes much simpler if you use a linked list with one node for each element in each case, and points to the front node, or is for an empty stack. Then you don't need an method because the optional property 

Using a for the element storage and a computed property still makes sense for encapsulation. Now behaves like a proper value type: 

This is perhaps not faster than your version, but definitely better to read and therefore better to maintain. You can also replace the recursive function by an iterative version 

is a operation. In contrast to other languages where a "character" is a fixed-size object (and accessing the n'th character of a string a operation), a Swift represents a "Unicode grapheme cluster" which consists of one or more Unicode scalar values, see e.g. Strings in Swift 2 in the Swift blog. That makes 

If you have to toggle the case of arbitrary letters (from any language) then the string methods must be used, as there is no simple "arithmetic operation" which does this transformation. 

If you don't pass the type in the unpack function then the compiler has to infer it from the context and either of these would work: 

does not assign the number to but the closest number which is representable in the IEEE 754 format for double precision floating point numbers, which happens to be 

My suggestion is to separate these concerns. This rules out #2 and #3 and leaves us with your #1 approach, the extension method on . Another disadvantage of the is that it uses an internal type, so that might break in a future version of Swift. The method from the Swift standard library already provides a method for the first task: 

Instead of handling all the different cases (am, pm, special rules for midnight and noon) you can use a date formatter which does all these things for you: 

as in your second version of is the correct solution because calls the block with a pointer to contiguous storage. 

Now the error handling. Yes, throwing an error is a good and Swifty way to report a failure to the caller. (An alternative is to return an optional value which is in the error case, but that does not allow to provide additional error information.) The creation of the error message however should be done in the error class, by adopting the protocol: 

But the method requires that the given predicate is a "strict weak ordering over the elements", in particular that 

This and other PEP8 coding style violations (most of them related to spacing and too long comment lines) can be detected by checking your code at PEP8 online. Unnecessary comments There are some comments which add no information to the code and can safely be removed, such as 

which returns only "Red" without this fix. Apart from that, your code looks correct, but there are some possible improvements. 

and I prefer to . But you don't need the variable at all, as this condition can be put directly into the expression. So now we have 

Two problems in your code You check if the replacement string contains at least one allowed character, so that pasting "1A" into the text field would be accepted. Instead you should check if the string contains no invalid character: 

Note another advantage of the separate function: You can "early-return", and that makes the "state variable" from your code obsolete. If the program is run with a large number of test cases, then a further improvement would be to pre-compute all prime numbers in the given range, for example with the Sieve of Eratosthenes. 

Your functions adds only a single digit to a "large integer" (represented as an ) array. It is more effective to add two "large integers" in a single loop: 

There are various ways to make this faster. For example the observation that with each divisor \$ i \$ of a number \$ n \$, \$ n/i \$ is another divisor (see for example Find all divisors of a natural number). That allows to reduce the number of loop iterations to the square-root of the given number, and could look like this: 

is a GCC extension which is also understood by the Clang compiler, so you can use it in your Xcode projects. The advantage is that it causes a compiler error if the condition is not satisfied, instead of failing later at runtime. 

Update: As @hashemi correctly said, the point would also be reached if the function is called with an empty array. Actually that would also happen if the function is called with a non-empty array but the sum of the given weights is zero. These situations could be considered as a programming error on the caller's side and can be checked with a . @hashemi also suggested to use instead of as data type for the weights. This is more natural because the weights must not be negative (and unexpected results would happen for negative input). Then the function looks like this: 

(I prefer a comparison over an optional binding to the unused variable in this situation.) Note that this makes the initial check for a non-empty string obsolete. In order to prevent two decimal separators (such as "1.2.3"), you check if both the existing string and the replacement string contain a period. But this prevents the replacement of – for example – "1.2" by "3.4" with copy/paste. To handle that correctly, you have to build the new string and check that: 

and for the range I measured 0.7 seconds. So this might be sufficiently fast to pass the challenge. For even better performance, use sieving methods like the (segmented) sieve of Eratosthenes (see for example $URL$ 

The solution is to embed the call to into a Core Animation transaction so that the frame and mask changes are synchronized with the view layer's animation, see for example 

The inner loop is traversed in decreasing order, so that updating the boolean array does not influence the computation for the current . 

The winning combinations are not dependent on the particular instance of a board, it is more logical to define them as a class variable: 

this allows better error checking than . (When you create the action in interface builder, there is an option for that.) Using all the above stuff, the method becomes 

A small performance improvement is possible in the function, by using multiplications only instead of exponentiation (which is Horner's method): 

The overall structure can be improved. Why is the first input line read at the top of the program, and the remaining lines at the bottom? I would do the complete input parsing in the "main" part of the program, which would then look like this: 

Now only one call is needed to write 8 kB data, instead of 4096 calls. On my MacBook this increased the speed to about 2 GB/s, that is a factor of more than 40. This can possibly be further improved by choosing a larger buffer. With a byte array larger that the stream buffer size, does not buffer anymore and writes the data to stdout immediately. Therefore the "lower-level" unbuffered would be sufficient: 

Your code assumes that the host byte order is little-endian, which is the case for all current OS X and iOS platforms. On the other hand, Swift is open source now and people already start to port it to different platforms. I have no idea if Swift will be ported to a big-endian platform at some time. I would at least make that assumption explicit by defining 

For even better performance, the "brute-force" approach must be replaced by a more sophisticated algorithm. For these kinds of problems, the On-Line Encyclopedia of Integer Sequences® can be a valuable resource. If you enter the first rare numbers 0, 1, 2, 4, 5, 8, 9, 10, 16, 17, 18, 20 into the search field then you'll find A003714 Fibbinary numbers, where a different definition in terms of the Fibonacci numbers is given. There is only a difference by one in the index: Your code computes 

because it is assigned only in the method. If you open the database in the method (making it a throwing initializer): 

because that is automatically synthesized in Swift 4.1. A future version of Swift will also synthesize the automatically, this is currently discussed at 

First note that your is computed property, not a stored property. It is computed using the and methods. Extensions cannot add stored properties to a type. Your current implementation crashes if the connection state is retrieved without having been set before: 

Update: The Swift language changes constantly. For the convenience of future readers, here is an update to Swift 4 of the above code: 

is compute twice, and might be a more effective way to concatenate the array elements. More important, it does not work: For \$ n = 130 \$, the factorizations \$ 2 \cdot 65 \$ and \$ 5 \cdot 26 \$ are both mapped to the same hash key "265", so that the output of your program is 

which returns the left or right bound, depending on wether the other interval lies on the left or on the right. If your ranges just represent intervals and do not refer to indices of sequences, then (and the existing method) might be an alternative. 

If performance is the first priority then you should work on the UTF-16 view of the string, because that is what stores internally. (However, that is an implementation detail and might change in the future.) 

The complete code then looks like this (where I have renamed some variables, this might be a matter of personal taste): 

with your code, this takes approximately 5 seconds on my MacBook. It can be improved slightly by filtering the list only once in each step and not twice: 

All your logging function take a as the first argument, with a default value of the current date. Unless there is a special reason why a caller should pass a custom date, you can remove that argument and compute the date inside the logging function: 

Example 2: Your table view has 2 sections, so must be or , every other value would be a programming error. Again, fail early instead of hiding the problem: 

The animation runs with approx 60 frames per second both on an 1.2 GHz MacBook and on an iPhone 6s. To give you a rough impression of what it looks like, I took a screen recording with QuickTime Player and converted it to an animated GIF with ffmpeg and gifsicle: 

More sophisticated bit counting methods can be found at $URL$ they can be more effective for large numbers. In , the check for is not necessary, because is the empty range in that case: 

The week does not start with a Monday in all regions (e.g. in the U.S., Sunday is the first day of the week). Therefore, instead of , you should use the method to determine the first day of the week (and compute the last day of the week from this value). 

There is one more thing ... This can still be improved by using the mathematical structure of the problem. All primes > 2 are odd, so the sum of two consecutive beads must be odd, i.e. the sum of an even and an odd bead. The bead #1 is fixed at the first position, therefore all beads at odd positions must be odd, and the beads at even positions must be even. Or, putting it another way, a bead at position must only be swapped with beads at position . And that is now almost trivial to implement: Just replace the for-loop in by: 

A faster algorithm In order to determine if \$ n \$ is a practical number, you test all numbers \$ 1 \le i \le n \$ if they are a sum of distinct divisors of \$ n \$, and for each \$ i \$ that is done by building all possible sums of divisors, until \$ i \$ is found. It is more efficient to work the other way around. From the list of divisors of \$ n \$, build a list of all sums of distinct divisors. This can be done iteratively: Starting with \$ 0 \$, the first, second, ... divisor is added to the numbers obtained previously. Then check if all numbers from \$ 1 ... n-1 \$ are in that list. The following implementation uses a boolean array to mark all numbers which are confirmed as sums of divisors. In addition, it uses that powers of two are always practical numbers (using the method from Determining if an integer is a power of 2).