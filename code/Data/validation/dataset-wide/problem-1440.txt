That can also be used for , speaking of recursion isn't the best way to describe looping until you find something instead prefer an explicit loop: 

We can try to optimize the subtraction by looking at the result table and finding a bit level hack that gives us the right result after which a modified bitcount will produce the result. The table when viewed for each bit pair is: 

There's a minor race when the queue has just been emptied and the flag hasn't been reset yet. If a thread then adds an update it will not post the runnable to the EDT for running and the current invocation will just reset the flag and return. This can be fixed by checking the queue again after resetting the flag. 

For a stopping condition you can use a simple counter because you know that you only need passes over the file to sort it. 

A destructor to CSList with at least an assert that is empty. should probably disallow copying and moving. But should definatley have a copy constructor and assignment operator (plus the move variants) to follow the rule of 3 (5) or disallow them which is saner because it is hard to ensure thread safety when copying/moving. 

depends on value being the same as the value at instead you can use the above. should throw a better exception than either returning -1 or throwing NullPointerException if the heap is empty (from being emptied or never being filled). 

or simply preallocate result with SysAllocStringLen(&result, qstring.length()); and translate into that 

In you don't actually use the first parameter . Instead you default to always. The field is a path and everywhere you use it (except in one of the calls where it doesn't have any effect) you use it as such; so you may as well store it as a and make it clear. This lets you avoid the vs and use the constructor that always works: 

To position your buttons you can look at GridBagLayout. It will manage the position and size of your buttons and text field for you. There are other layout managers but this one matches your needs the closest. 

Though just the state is a bit limited. Most real-life applications need additional state that isn't expressed as a single int. That means adding more input into the transition function that reads and manipulates a struct. 

As an aesthetic point you can be a bit more frugal with the whitespace. Too much whitespace spreads out the relevant details too much which can make it harder to read. 

An executor service will be able to do a with a timeout and return a set of futures holding all the values or return when the timeout expires. This means that your should take a set of keys and build all the tasks from those at once and then submit the tasks as a batch: 

The keyword will do nothing. Current day compilers are smart enough to find a good register allocation themselves without you running in its way. Why ? you initialize the values through anyway so no need for the zero initialization, will work fine. Speaking of you need to free what you allocate otherwise you'll get a memory leak. You should only need to allocate a single extra array for the merge. When the amount left to sort is small () you can switch over to another sort that is more efficient for small numbers like insertion sort. Finally brace position on your else is a bit odd: 

Check if your compiler has an annotation that lets you signal that the pointers will not alias (overlap). This will allow the compiler to unroll and interleave iterations of the loops that touch multiple pointers. As a clarity change I would make a results struct: 

I return 1 here to signal to the OS that the program didn't finish successfully and a script using it can then react to it. 

on a linked list is slow. Prefer instead. However queue has a method for taking out of the queue and returning a special value if it was empty: 

For a state machine I expect the "event" to be independent of the current state (coming from an input). This means I would expect the transition function to take an parameter. I don't like the use of globals. Instead put all the mutable state in function scope. This means that the new state should be returned from the transition function. The signature then becomes: and the transition function then uses a switch to decide which state is the next one. then becomes: 

It's simpler to just return the result immediately then need another method. Also the caller is probably going to need them as File objects eventually so lets just return them as those. Then there are 2 options, just return a List and use addAll each recursion step: 

And check with That leads me to the list itself; if you only check whether a values is contained within the list then you should consider changing the list to a HashSet. 

You don't need to build the object in one go instead create what all cases need and then optionally add: 

This will mostly save you from copying the entire file into memory before processing but instead processes the emails one at a time as they come in. 

Your isn't thread-safe. 2 rapid clicks can result in 2 AIThreads starting to run and wrecking all kinds of havok. Instead only check and change on the event thread. I also suggest you change into a and do the processing in its which returns the best move and then passing the the result back in the method. 

converting to string just to get the length won't work if there is a decimal or it's large enough that the string conversion uses scientific notation. 

This creates an associative array so if you give it a key value then you can get out the associated value. in your case that is done like: 

When growing the array you , and . Instead realloc and memset the appended data to 0 for the pool or initialize for the indices. 

However because you don't use any other feature of the AtomicReference other than get and set, you don't need at all (or if you do it should be final); just is enough: 

This immediately say "this function returns a empty string or a string with a space depending on this condition". 

in the constructor it's better to allocate an empty array to avoid an unexpected null pointer. In you should just at least initialize to 0 before the loop. You have no other way to add a element to the heap. This would be something like this: 

You indentation is not consistent, I'll presume that is a paste error. If not then please fix that, it's much easier to see where functions begin and end when the signature and closing brace stand out. If you inherit from a QObject like QThread you should add the Q_OBJECT macro as the first thing in the definition this will provide access to the signal-slots mechanism os Qt. However don't inherit from QThread. You don't need to. Instead you create a QObject subclass with some slots to receive the results and use to so actual processing. If the bulk of the wait time is actual waiting on communication then use the async capabilities of QTcpSocket. 

\$i, j, k\$ all have to be distinct because the characters they refer to must be different so you can save a few test and iterations there. 

Your task will swallow any exception that may be thrown, the only further effect is that result will be set to a response. Instead don't catch only the in your Task and only catch the after to set the result to failed in case of another error. 

Then you can pass an instance of that filled with the field specific comparers to the method of . The doesn't need to hold the string value of the field to compare but instead a Comparer (or a mapping function). Ortherwise you can build a and then you can get the comparer directly from the map. 

It's O(1) no loops or recursion that I can see. You shouldn't have to keep 2 stacks though. You can instead a second field in the Node. It should be null except for when it contains the minimum of all subsequent elements (or it would be the top if the min stack). 

Where has time complexity of \$O(\sqrt n)\$. But because passed in is the square of the total complexity is \$O(m^2)\$ Instead given a \$i\$ you can construct a \$k\$ such that \$(i+1)(k+1)\$ is a perfect square. First you factor \$i+1\$ into prime powers. Then you take all odd prime powers and multiply them together. For example for \$60 = 2^2 * 3^1 * 5^1\$ you multiply 3 and 5 to get 15 as the start value of k and \$15*60 = 900 = 30^2\$. That is the start value of \$k+1\$ and you multiply it with squares until you go past the end of the string: 

the is not thread safe but you use the global from each thread without synchronization. Instead declare an initialize it in to give each thread its own RNG. Same with surround each copy to and from it with a mutex guard like you do when printing out. The following for loop doesn't quite do what you think it does. 

You should separate out the different handlers, make one for the number buttons, one for the operators, one for the equals and one for the clear. That way you don't need to test which button is pressed as much because you know the code wouldn't be executed otherwise. Also I suggest storing the first and second number as separate numbers instead of collecting the entire string and then parsing it. 

Make the order of the fwrite parameters consistent first the sizeof and then the number of elements: 

This is basically the same as just calling (or call) In other words you aren't quite there yet with making this properly asynchronous. It does let you set a timeout on the get simply by adding the timeout parameters: 

Every call of mergeBack will end up allocating 2 new buffers. You can avoid that by preallocating the secondary buffer and flip flopping between them but that is tricky to do in the recursive version. Which is why I prefer the iterative version that goes bottom up. 

However just finding how many whitespaces are at the end of a string is easy enough to allow for a utility method of the form. 

I suggest using a specialized priority queue of some kind to store the pending events rather than a ordered linked list. There are several options but most have worst case a insertion and popMin. One of the things you will want is a time until next event query. This allows you to put it in a sleep() to save power (if you are willing to be less accurate). 

Note the comp helper function. I added that so you can easily make it use a custom passed in during construction. This can be easily expanded to also keep a list of nodes to update should you want to insert/delete a value: 

You can loop and count the characters until isn't or the remaining length is equal to the desired length and then take the to return 

This is something that you should run a benchmark on to see whether the branch is worth avoiding the 3 multiplications. It is very likely that the branch will not be worth it due to how branch prediction works. But that depends on what data you will be feeding into it and in how tight of a loop you call it. 

There is not need to go to streams at all for a piece of functionality already implemented in the member function of . 

That merge would be clearer as a , while bot arrays have elements to be merged in. And you can do 2 s for the remainder afterwards. 

Your is not thread-safe, meaning that different threads tying to push data into it will step on each others' toes and corrupt the tree. doesn't actually do anything if the thread doesn't check itself if it has been interrupted periodically: 

There is one big issue: if you keep getting requests then it is possible to starve the executor. You can fix that by either testing the size of the list and if it becomes too large then don't reset the timer, 

This ensures that the writer is closed should an exception occur. Second appending Strings for output is not the most performant thing that should be done instead pass each string separately: 

When doing emulation you should disconnect from the real world and only provide a abstract view to a world. In other words don't use a real time clock instead simulate the timer by linking it to the emulated clockspeed. For example if you pick 8 MHz you would have 133 333 instructions executed per decrement of each timer. This will allow you to pause and fast forward when debugging programs. 

min and max should be const and return a const reference (allowing users to change the key like that would invalidate the structure of the tree). 

should have a in the second parameter. This primarily prevents windows from replacing any byte with which would corrupt the file. 

The delay can for example be added to the animation struct so animations can have different timings. A special value of 0 can mean not animated. 

I would add the (currently global) VM state as a parameter to the function. This will make reentrant and allows multiple VMs working in parallel. I would prefer a switch for dispatch, it reads cleaner, and there is less chance of the jump table being messed up because you miscounted. Just a stack with only a view to the top 2 elements and 3 registers is very likely not enough. It's not Turing complete in its current form. You cannot sort an array with it for example. Add bounds checks for storing and loading the registers. Add bounds checks for stack over/undeflow as well. For a VM to be useful it needs to interact with the outside world, that means opcodes for input and output from peripherals/game engine. Stack implementation is fine (except for the bounds check) though using union to bitcast between types is Undefined Behavior in C++. You will need to use a memcpy to do the bitcast: 

You can stop the inner loop when the action is canceled by checking inside the while in and returning null. You don't clean up the buffered reader after you are done reading from it. There is no need to let the Stringbuilder out of doInBackground() (and doing so invites bad access, declare it in doInBackground(). You can initialize the with an initial capacity equal to the length of the file to minimize reallocations. 

you don't need the memset in the for of you just need to add a to the end when max depth has been reached: 

The condition variable will automatically release the lock passed in while it's waiting. This means that you don't need a second mutex: 

doing is very odd to see and very much prone to mistakes in writing or reading. It's better to use negation in the condition: 

In other words you can just use the angle to select the offsets you need to check and then check the board based on the offsets. 

If you still want the looped version you can do a variation; instead of using another variable to hold the result and retrying until smaller than 10 just do this: