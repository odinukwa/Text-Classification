Given a binary tree, return the next right node. This question is attributed to GeeksForGeeks. For example, consider the following Binary Tree. Output for 2 is 6, output for 4 is 5. Output for 10, 6 and 5 is NULL. 

The stock span problem is a financial problem where we have a series of n daily price quotes for a stock and we need to calculate span of stock’s price for all n days. The span Si of the stock’s price on a given day i is defined as the maximum number of consecutive days just before the given day, for which the price of the stock on the current day is less than or equal to its price on the given day. For example, if an array of 7 days prices is given as {100, 80, 60, 70, 60, 75, 85}, then the span values for corresponding 7 days are {1, 1, 1, 2, 1, 4, 6} Looking for code review, optimization, and best practices. 

This program connects all nodes of the binary tree at the same level. A node of a tree contains a left, right and a sibling pointer which would connect it to the next node at the same level. This connection is from left to to right. Example: consider a binary tree with parent as node A and left and right child as node B and C. then this program joins B.sibling to C. If the immediate sibling is null, then it is skipped. More details if needed can be found here. I'm looking for code review, best practices, optimizations etc. 

Check if all leaves are at same level. This question is attributed to geek for geeks. Looking for code-review, optimization and best practices. 

Design a Data Structure SpecialStack that supports all the stack operations like push(), pop(), isEmpty(), isFull() and an additional operation getMin() which should return minimum element from the SpecialStack. All these operations of SpecialStack must be O(1). To implement SpecialStack, you should only use standard Stack data structure and no other data structure like arrays, list, .. etc. Looking for code review, optimizations, best practices. 

Given a postfix expression, construct an expression tree. Looking code code review, optimizations and best practices. 

On the DateOfOperation class The DateOfOperation exists only to match the rule : Wrap all primitives and Strings which, in an Calisthenic objects context, means that we have to wrap primitives (even if Date is a class definition... same for List, String etc...) This way, I m completely hiding my Date (at a Java sens) creation inside of the DateOfOperation constructor. The problem here is that I can't mock my Date, and my expectation in unit test can't be true... What I m looking for I m looking for some explanations, or code modifications that could be applied in a calisthenic objects context, that would help me correcting the previous problems, or understanding the limit of that kind of stuff. 

I m working on calisthenics objects and I'm actually having some troubles while trying to follow the calisthenic objects rules. In fact, I m stuck with the one telling that we have to wrap all the primitives inside of objects. Context I'm having a Euro object that looks like : 

On the Account class When working on the Account class, I was facing some problems while recording transaction. In fact, I wanted to test the deposit function and I had no way to mock the DateOfOperation (not injected, but created from a hidden way). From a technical point of view, this method is private, and its creating a new DateOfOperation to create a new Operation. But the fact of creating this date internally seems to break some SOLID principles. From a business point of view, I don't want people to provide me some DateOfOperation as argument, because they could have modified that date while passing it as argument. And my operation could now be false. So, I don't know how to test this result, and I m lost between the two possibility : matching absolutely SOLID, or accepting that I'm completely hiding the date creation of the operation. One step further to blow my mind, Uncle Bob, in Clean Code proposes to have the fewest parameters possible while creating methods. If we have too much parameters, we should split it in multiple classes / functions (I think I m in this case) 

Context I m studying clean code and I m actually working on the banker account Kata. Taken from Sandro Mancuo's github account, here's the job I have to do : 

As mentioned in the comments the question that you are asking is actually off topic as you have not implemented it yet and there are many solutions (you could for example do everything as percentage or vh/vw units rather than pixels). What you're asking for is a concept known as responsive design. I will however review the code that you have. First problem I see 

One comment on the code: you will find your constructors easier to maintain if you use constructor chaining protected BaseCache() : this(Guid.NewGuid() ) { } Now my possibly ignorant comments on other things. 

** The above code is untested but it should be enough to get you on the right track ** Feel free to ask questions in the comments area 

As for similar methods, as you start to understand the above format you can start to understand lambdas and expressions, you don't have to understand them very deeply, but you can learn that they are simply another syntax for creating certain types of objects. Therefore you could refactor to this (using a refactoring plugin like CodeRush/Refactor Pro or Resharper will help immensely): 

That both makes it clear from within what module you're in, the fact that you expect it to be used with , and will generate nicer stacktraces. I'll also point out that - it's a matter of style but you're on CR so I consider it solicited - hardly ever is code made more bugproof or more legible by using constructor functions. reader.js could just as easily be the following and not depend on someone remembering to use and always bind functions. 

You can get really far cleaning this up by just creating some private functions and bumping them to the bottom of the file so that they can be hoisted 

This is of course fairly advanced coding but it is possible and probably only about 10 lines of code. Like I said you can look at Automapper for some of this functionality out of the box (though I don't know how well it would do with windows/web forms). I will say that what you're looking for is similar to the functionality provided by the MVVM pattern so if you're doing windows forms you can look at Truss. If you're doing web forms...well I wouldn't do web forms, this functionality is already in ASP MVC and silverlight which are both like a million times easier to work with but I remember there being some buzz about the ASP MVP project that would help with those issues.