If you wanted to take it further, you could create a small function to do the character-checking called or something similar that would return if it found a dash or space, and otherwise. Then for your checks, instead of checking for both the dash and space, you could just do something like which would make for slightly longer code but might make it easier for someone new to follow what's going on. You could even have that function return the value itself, so you could call and would either be assigned the wrapped string (if a dash or space was found) or the original string (). That would allow you to combine your two separate statements into one -- . 

The code looks pretty good. Here are a few suggestions: You reference quite a few times. Why not assign it a shorter variable name at the top of your JavaScript file, like you did with and ? You could group your code into sections, to make it easier to find things. For example, have a variable-declaring section, then a functions section, then the code execution section. The sections can be differentiated with comment lines, like: 

Your code looks good, and very clean. Best practices are usually subjective; there's no absolute best way to clone and insert an element. That being said, I would make two suggestions: 1. Be consistent with your HTML Your div doesn't have quotes around its ID, whereas your div does. I'd recommend always surrounding IDs in quotes as a standard practice. 2. Swap the and order This suggestion is purely subjective, but semantically, I think it makes more sense to add the cloned element to the DOM first, then change its display property, rather than change its display property first (which won't have any affect yet anyway) and then add it to the DOM. Again, that's just my opinion. Other notes If you're interested in adding autofocus to your elements (so that as a new element is added, it automatically gets focus) you could do that fairly easily by inserting this line just before you close your function: 

Any way you format this, it's ugly. Break these large or even just hard to read boolean expressions down to much more managable and readable expressions like this: (naming might be wrong but you get the point) 

Basic Improvements In addition to Sir Python's answer, I've listed some general improvements that could be applied to your code. They're more geared towards design but you may find them helpful, specifically in the case if you were to ever have to come back and change something in it (say 6 months from now?). 

I'm going to assume that you already know about HashSet and ISet in the following review and are just missing the reinventing-the-wheel tag. ICollection You've got Add, Remove, Clear, Count, and Contains. If you add a and to your implementation then you can implement ICollection. Why Dictionary? Perhaps you'd be better suited with a implementation? Correct me if I'm wrong but it doesn't appear you're actually using the boolean value of the dictionary, so you'd be better suited with a . Generics You could create a generic implementation fairly easily. And if you wanted to still allow your existing functionality then you'd use . Set Operations Perhaps consider having your operator functions return the new set from their actions? For example, 

Constructor Adding the ability to give or of items in a constructor could be really helpful, especially if you have your set operations return new sets as suggested above. 

Background/Intro: I've been using (and refining) this setup for all of my MVC applications I've been doing at work and now that I think I've worked out all the kinks I see in the 'architecture' I was wondering if there was anything anyone else saw that could be improved. I have a few concerns but I'm generally open to any/all suggestions. Concerns 

Even this has a potential downside I guess in the fact that you have to have a bit of knowledge as to how to build up the service in order for the GetViewModel to work, so I'm not completely sold on that idea. Although this really just moves the logic of the building from the controller to another class I think it better allows for re-useability of the ViewModel while also providing a DRY approach to doing the actual building. Just a couple of different thoughts for you to mull over. 

As well as some standard indenting, a quick thought could be reversing the item being compared and using some temporary variables for readability. EDIT: Ok, so svick pointed out that the original code was fundamentally flawed. So how about creating an extension method on to do the Contains for us. Something like: 

I don't see any reason for these pieces of code to be async. They aren't doing long running tasks and aren't even hitting the db (unless Add doesn't something we don't know about of course like saves as well which is a different point of review right there). 

Doing this each view requirement would be a case of incorporating the partials in as required. Pitfalls on view model composition and partials: On problem with this approach I had was that when using these viewModels within the views the resultant elements created meant that the bindings did not come back on posts. What was happening was that I would render a partial as such 

I personally like to return early and avoid nesting if I can as I feel it helps readability. For example. 

Then a wrapper class that would be responsible for creating the connection or managinging it's existence. That method for example might look like: 

Sometimes it seems unnecessary when you're doing OOP in a scenario in which you could easily do it all in one function but it helps significantly when debugging, reading, or maintaining (or in this case when other's are reviewing your code :D). 

Naming. Names should do more than be a unique identifier, they should tell you the purpose of the function/variable. 

Other Actions The only other thing I see is that the following code is repeated in many of your actions. 

CreateResponse Function You could create a private function for creating a response since it seems to be a pretty common and uniform action in your code. Something like this perhaps, 

Ternary Operator The operator could become very helpful to you as it allows you to inline an if-statement. Microsoft Documentation. For example, 

Always use brackets. Even if the statement afterward is a one-liner just use them, it'll prevent a rookie mistake in the future. Secondly, if you insist on not using brackets, be consistent. You have an if-statement with brackets and the else-statement doesn't. Curley bracket placement. The standard for C# is placing brackets on their own line. You have spots where you do this, but you also have spots where you place the opening curley bracket on the same line as the if-statement. 

ISerialRVD - Defines a function for serializing into a (default model binding used for deserialization). 

Most of these suggestions are style-based, but I think they can be helpful to you either way. Code Consistency Your if-statements have a mix of inconsistencies. 

One Problem Your for-loop wants to use the variable later in the call. That call specifically wants the whole model, so if it's possible why not just have store the whole model? As it stands its purpose is to store data, so have is store all the data it could need then that should reduce the amount of code directly inside your for-loop. I hope you find these suggestions helpful. 

In general method names recommended as Pascal Case so should ideally be named I might consider trying to make the class a bit more configurable so that it could be extended in more ways without being modified. For example if you wanted to send a text email, or you wanted to send an email using a different server. 

Yes, I believe so if you want to write a bit of javascript. You would need to create a hidden field and on every select list change event set the value of that field. Something like 

Threadsafety. I don't think (?) this code is threadsafe. You could call LogMessage at the same time as PrintLog is being called causing contention in the logData list. You might want to take a look at thread safe lists if available. 

Alternatively you could get rid of the multiple private fields and just use a dictionary to maintain your skill data sets. Hence a refactored solution using that method might be. 

I think in this case I would simply make a private method to capture the duplicated code. I probably wouldn't mind about the extra call to the SaveChanges() as it's only one line and removes any need for further complexity on the code. 

I've never seen method on so I'm assuming this is your own class? If that were the case would it not be best to have IDataContext abstract the Connection details away and return an IConnection contract. 

Then create an implementation of errorHandler that wraps a StringBuffer (if you wish or whatever i.e. FileWriter, DbWriter etc) 

Using existing MVC helper methods When creating links in the view I always like to use the built in MVC helper methods such as or . This means that if the site is installed in a sub directory the correct link will be created automatically for you. i.e. . If you currently deployed the solution you have your links would break with a 404 Not found. 

This is my 1st F# program so I'm open to any and all criticism on my syntax and the way I approached the problem. Challenge Project Euler 16: Power Digit Sum 2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of the number 2^1000? 

Modularity I'm seeing one major problem with your code. It's not very readable. Sure you can add comments in there and read those, but that just adds to the clutter. I think that your code's clutter and low readability is causing your grief (and those trying to review it). For instance, it might seem a bit easier to incorporate SirPython's answer into your code if it were a bit more modular. Each section below is a step-by-step attempt to show how you could approach this problem in a more modular-ready fashion. It may not be a perfect or exact solution for you, but my goal is to help you break your code into more fine-grain reusable pieces. Wrapper Functions Sometimes these can seem pointless but I find them quite helpful for scripts/plugins whose code base is trending toward clutter. 

The name tells me absolutely nothing about why it is taking an object and what it is doing. Yes, it tells me it is doing something with time, but what? Try narrowing your names to something more specific (Yes, this can be very difficult at times, but 2+ weeks from now if you look at this code again it will be worth it). A suitable replacement for might be perhaps? I don't claim to be the best at naming; the point is to describe your functions/variables as best as possible. If you're using generic names and the code isn't generic, you should look for a better name. 

I don't see anything that stands out in this. It's fairly small and quite compact. The only thing I might suggest is changing the public fields to properties. 

Have you considered using log4net? If not I would recommend this as a simple and well tested logging framework: Other considerations to the implementation might include: 

If you wanted to add properties for each individual day to make it easier to access say for example Monday then you could easily do this such as. 

I would supply all the variables that you have hard coded into the method i.e. localPath, filename, ftp server, networkcredentials. Otherwise how can you re-use this method for other operations? I would probably avoid making the method static unless there was good reason to. In your finally clause you don't check if responseStream or writeStream are null? What if they never got created before an exception was thrown? I personally think unless there is a very valid reason you should always do something in an exception catch block, whether it be logging somewhere, re-throwing the exception or anything. Otherwise the calling method will have no idea that something went wrong. What is _result? I don't see it being set and I don't see it being declared anywhere? If Length is a constant, make it a constant. i.e. const int Length = 2048. I might also consider implementing some sort of call back method so you can provide status updates on the progress on the download. Just a suggestion, not sure how you would implement it exactly. 

I'm not sure of the purpose of the () method. If we are reading the file when we first access the singleton instance why do we need this method at all to be public? could we not ensure it exists in our constructor? When using the singleton pattern I always like refer to Jon Skeet's article on it.