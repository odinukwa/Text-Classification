It looks pretty good to me. I can see that a lot of research has gone into this. There are a few things I would fix though. 

@Filipe hit the main point I wanted to cover. But there are some minor improvements that can be made. 

So recently I made a large project of mine open source: Khronos. I will be dissecting parts of it so that I can have it reviewed more easily here and so that the project as a whole will be improved. The first part I want to have reviewed is the CMake file involved with kicking off the building process of the project. Please feel free to tear it apart. CMakeLists.txt: 

You can combine the attribute with either the or attribute, as in this implementation of the postfix increment operator () for instances: 

I've recently wanted to make a "Loading..." display in C where the dots print one at a time in order and then reset: 

Looks pretty clean for the most part! Here's the source of the actual GNU implementation used on most systems for comparison (if you already haven't taken a look at it). Just a few notes: 

Recursion here is slowing you down. Using Kadane's algorithm, we can make the time complexity linear, or O(n) . 

You don't have any statement, yet you declare that you are returning an . Let's return at the end of our program to indicate success. 

I've just started a new class learning Java, and since it's been a long time since I've programmed in it I thought I'd put up my first project to get back in the swing of things. Here is my first assignment: 

This is the current Makefile that I use with my C projects. Here is what I would like to be reviewed: 

Now the Playground environment doesn't complain at me for using my much-loved common operator. I'll leave it up to you to implement the rest of them (since they aren't too hard to implement ). 

I thought the function would be optimal for this, and I believe it makes my application pretty robust and fast. On my Mac (ommiting 196 lines of filename output each): 

For a basic sentiment analysis this is fine, but do note that it does have it's flaws. If you're looking to improve the accuracy of your algorithm, I'd recommend reading this research paper, which achieves a classification accuracy of 90% (higher than any other published results). Code: 

I'm currently using the Advent of Code programming challenges as an opportunity to learn some python. The following code is my solution for the Day 8 challenge, where the task is to write a programm that reads a set of instructions which are then performed on registers. Registers start with a value of 0. Each instruction may increase or decrease the value of a register. The programm should return the maximum value in any register at the end of execution as well as the maximum that any register had during the whole process. An instructions looks as follows: . Where is a name of a register, is either to increase the value of a register, or to decrease its value. is a comparison operator. The instruction should only be executed if the condition is true, e.g. will increase the value of the register by 10 if the current value for register is less than 0. I read the input from a file called . An example input can be found here. The expected output for this input would be . 

Game Currently your game is just a bunch of methods. It should be a class that keepts track of its population itself, not by passing a list of bunnies. Now I can easily "cheat" the game, by manipulation the bunny list from outside. By keeping track of its own population you could also do things like running multiple games simultaniously, e.g. to compare experiments based on different starting conditions. This would eliminate the static variables in your bunny class. Seperation of concerns You should seperate your logic from your output. E.g the shouldn't do any output. It's the games task to do that. Update: Use as a default Currently you are using as your container for bunnies. While that sounds reasonable, in C++ you should stick to unless you have a very good reason not to. Especially since you are randomly selecting bunnies from you list to manipulate them, a is far better than a , since that can be done immediately, while for a list you have to loop all the way to that element. Bug As mentioned in the comments, the method doesn't do what you want. Through the method you are creating a copy of your initial bunnies that a normal. You then only iterate and manipulate this copies list of bunnies, not the original. So your vampire bunnies are not successfull at all. So instead of returning a list of normal bunnies, return the indices of the normal bunnies. And then randomly select ab index out of that list and change that bunny: 

I kinda thought that my implementation of the data type might be a bit dumb, hence the title. Feel free to rip the code apart! 

The code initializes all of the structures, but and will equal -1, which is why will fail sometimes. 

Algorithm: There are a few fallacies that you assume in your approach. Nothing wrong, but things that could be improved: 

Noisy, linear-ish data is fitted to both linear and polynomial functions. Although the polynomial function is a perfect fit, the linear version generalizes the data better. I don't know Lua very well, but by looking at your code I don't see any attempts to reduce over-fitting. A common approach to this is by implementing regularization. Since it's too hard of a topic to cover in-depth here, I'll leave you to understand it if you would like. It is quite simple to use once its concepts are understood, you can see from this Torch implementation here. Another way to reduce over-fitting is by introducing dropout. At each training stage, individual nodes are "dropped out" of the net so that a reduced network is left. Only the reduced network is trained on the data in that stage. The removed nodes are then reinserted into the network with their original weights. The nodes become somewhat more insensitive to the weights of the other nodes, and they learn how to decide more on their own. Dropout also significantly improves the speed of training while improving performance (important for deep learning)! 

For this next assignment, my job was to create a GUI with a button that changes text and color when clicked, and a slider that updates a label (with a ) based on its value. Right now it looks like this: 

To streamline the setup, I created this Python script (despite me not knowing Python very well). It uses the standard Python library, and I would like to keep it that way. setup.py: 

This is the file for Khronos, a personal project of mine. This is basically where the whole program is setup, run and then quit. I'll post the short summery of what this file does from the : 

There is some trick to get each row corresponding to that maximum value based on the parameter, but after investigating this for a few hours I still haven't figured it out and have given up. You could try using to get these rows instead, using to make sure we are grabbing the right values. 

It's easier to write and read. The same applies for creating a random number in some interval. And while you're at it, you can also exchange the random number generator for a better one. Simplifications Your method is rather strange. If you later decide to start your population with 100 bunnies instead of 5, you would require a lot more variables to fill your list. To initialize your list with a number a default created values, simply write . This will fill the list with bunnies, which should be some variable in your class. In your method you should use a range-based-for loop instead of your loop. That will make getting the iterator beforehand obsolete: 

The same goes for your checking for random events. Make that a function that can take a probability and returns or : 

Note that I already change the container type to . Otherwise the random access through would not work and you'd have to use again (or save the iterators instead of indices). 

Includes I figured your has some includes for , , and stuff. While you might find that helpful to only have one header , it's rather bad practice. A header should only include the stuff it really needs, no more. Otherwise you might create false dependencies. E.g. your is the only one that uses , which it only gets through including that doesn't need it. So if you change the includes in you might break . Also every header should have include guards, to prevent double inclusion. Avoid using Don't use to print the end of a line to your stream. It flushes the stream unnecessarily and makes your output slower. Simply use . For more information see here. Don't use Your header has a somewhere. Don't use that, you are poluting the global namespace with a lot of simple and common names. It's also less readable that way. The name is the namespace is so short on purpose, so that's it not a hassle to write. Again, for more info on that matter read here. Don't use magic numbers You are using hard coded numbers in your code for specific checks (required age for reproduction and max population). While it's easy to see what they are used for it gets harder to change them later on, the more your program grows. Use named variables for them, so it's easier to understand and you can see where they are actually used. Don't repeat yourself Whenever you write the same code twice, you should ask yourself, how you can prevent that in the first place. There are multiple instance where you create random numbers in some interval or check whether an event happened with a certain chance. Make those two things functions that can be reused and more easily read. And while you're at it, replace the random number generator with a better one(you can watch this to see why is considered very bad)). You could write a small namespace for such utility functions, e.g.: 

Reusability - is this Makefile easy to use for multiple separate projects with minimal modification? Organization - is this Makefile organized in a logical and readable way? Dynamics - are there Make features (or compiler options/warnings) that I am not taking advantage of that could make my Makefile more powerful? Miscellaneous - what other things could I improve? 

Algorithm Let's redo our processing a bit, shall we? Let's read the file line by line, parse the necessary data, and then process that data for optimal speed. You should only need two loops in this code, one to parse input and one to output data. 

Here is my code implementing the above. Basic testing has been performed and it seems to work as intended: 

Test run: As you can see, the accuracy is somewhat low. The runtime speeds are faster than the original Python program in the post above, but I feel could still be improved upon. 

Now is the only value I used from this output, so you could ignore the other returns by putting in their place. Second, let's split out data up based on these groups. We can use the function to accomplish this nicely. If we pass in the function handle to it, it'll even find the max within these groups. 

I am usually in support of using whitespace in programming. However, in this case I think you have a lot of superfluous whitespace in your program. Especially in between braces. 

Just looking over the two functions, I would probably say the first function is a better practice. It's shorter (meaning it's more maintainable), it uses fewer variables (which can cause less confusion), and does the same thing as the second function. Overall the advantage is that the first function is just shorter. In terms of speed/efficiency (if I had to guess), it looks like the first function would also be a bit faster as well (though not by very much at all). To know for sure which one is faster, test the function calls with OpenCV's methods and . gives you the number of clock cycles after a certain event, e.g., after machine is switched on. 

This question was tagged connect-four, hence my shape parameters. Those could easily be changed to the variables input by the user (which you should handle in a separate function). Note that this will perform slower than the other presented solutions for smaller values. The speed improvement kicks in with larger sizes.