An idea not yet mentioned is to reject the backscatter. All of it that I've seen comes through open mail relays, and there are two blackhole lists which you may find useful for reducing the amount of backscatter you receive. 

The same error seems to have happened with the line beginning with . Once you fix this, you should get your server back up and running. 

It's also possible your workstation doesn't have any locales installed at all, which is usually how systems end up using the default "C" locale. Consult your operating system distribution's documentation to learn how to install locales. 

For you don't need to do anything. For KVM provides a paravirtualized random number generator to its (Linux) guests. This allows guests to use the host's entropy pool. To use it, make sure that HW_RANDOM_VIRTIO is set in your guest kernel configuration. 

You sent email from an address which contains a subdomain of your domain. Your domain has an SPF record, but the subdomain does not. Thus Google makes a "best guess" that your domain's SPF record should be used. This violates the specification, under which your subdomain would not be considered to have an SPF record, but it usually reflects what senders (whose mail systems are misconfigured) intended. 

You have two options for getting a newer version of gcc than the one shipped with RHEL 6, your current Linux distribution. 

Most likely that socket doesn't actually exist. This is probably a simple typo. By default the socket is located at on a Fedora box. So, in your file you should have: 

is not the name of the process listening on port 9001. It's the name of the IANA-registered service for that port number. 

This happens when OpenVPN is configured to tell the client to automatically route all traffic through the VPN. You will need to disable this. Look for a option in your OpenVPN server configuration and remove it. For instance it might look like one of the following: 

You forgot to declare within your block. You only have it repeated in some blocks. This is one of the most common nginx misconfigurations. Move them out to the block. 

You have an invalid repository named which is preventing yum from working. Disable or remove the repository (most likely from directory) and then try again. 

"Client denied by server configuration" means that the request was blocked by a Require directive (or in older versions of Apache, the Allow/Deny directives), by a rewrite rule, or by some other Apache module. In particular it means the request was never passed on to an external handler, so the exploit could not have a chance to run. The client was just immediately served a 403 Forbidden error. 

This configuration change requires a restart. Unfortunately, there are no Group Policy objects that I'm aware of to make this change, which is a serious oversight on Microsoft's part. 

You have nginx listening on port 81. But you have Apache actually answering requests on port 80. That's where you need to look for the problem, since all of your incoming requests come in on port 80. 

If you need it, or other system packages depend on it, then do this instead: rebuild it for i386. This is pretty trivial if you still have the source RPM generated when you backported. 

Note that in this stanza you need to use the link-local address of the border router. And of course your devices must be Bluetooth 4.1 (or higher). 4.0 devices will not work. 

Looks like you're running it every minute of the fourth hour of the day. So 60 copies of wget are getting fired up. 

Yes, the variable is and that's what you will want to add to . This will cause GET and HEAD requests to be cached separately. 

Your PHP session files must be readable by PHP/the web server, not necessarily by all users (this is a security risk). To fix this issue, check what user your PHP (or apache with mod_php) is running as, and set the file ownership to that user for all of the session files (and the directory containing them, usually /var/lib/php/session or something similar). 

If the Dell RAID controller doesn't see your degraded RAID 1 array when you reinsert the good disk, you can just import it from the RAID BIOS. 

You don't need to switch back to a Generation 1 virtual machine. You can use a Generation 2 virtual machine, so long as you disable Secure Boot. To quote from Microsoft: 

Locking memory into RAM prevents the kernel from swapping it out. This isn't often done, but for certain performance-critical stuff it is quite useful. Databases are one of those things that can make good use of this. Setting this value to 40000 makes no sense. Even if you could do it, it would cripple the database and probably cause it to crash. MySQL locks memory when large page support is enabled and the documentation states that memlock must be unlimited ( in your systemd unit). 

Note well that this requires the be installed and running in the VM. Depending on the distribution and installation choices, this may or may not be the case. The is also extensible; you can add scripts to it to support specific software. For instance, it includes a sample script to put MySQL in a consistent state. 

As you can see, I am using , so the actual banned IP addresses are not listed here. Instead, I find them with : 

When you have SELinux enabled, the web server (and processes that run within it, such as mod_wsgi, and on EL 7, on similar server processes even run separately from the web server) are not allowed to make outgoing network connections, unless you explicitly allow them to do so, e.g. using an SELinux boolean. To resolve the problem, set the boolean to allow network connections to a database: 

Those scripts you have been trying to use are obsolete and shouldn't be used on a modern system with systemd. Try a script like this instead: 

This is not generally done by pinging or ARP trickery. It's done by paperwork. Every request for IPv4 address assignments requires detailed justification, showing that existing addresses are fully utilized and that (in the case of ARIN) the new assignment will be 80% utilized within 30 days. See the ARIN Number Resource Policy Manual for complete details. RIPE and APNIC have similar policies. The justification typically consists of a report stating what all of the existing IP addresses are currently used for, and how (and if applicable, for whom) the new IP addresses will be used. The rules have been significantly tightened up in the last couple of years, now that IPv4 /8 blocks are exhausted. On the other hand, you can give out IPv6 like free candy, and you should do so. Give everyone enough IPv6 subnets to last them for decades, and strongly encourage them to use their IPv6 allocations. 

Also note that MySQL keeps its own internal time zone tables, separate from the system timezone database. To update MySQL's internal time zone tables, run the script which came with MySQL. 

What's worse, is it looks like someone has used RFC 1918 addresses on the public Internet in this path. Among other things, this causes Path MTU discovery to break, which means many TCP connections will also break. To quote from one source, Cisco's IP Addressing Best Practices (PDF): 

The use of in specifies that the URL must match exactly, with nothing else preceding or following it. 

By default, the list of keys that a user can use to log in to any particular node is stored in on the node being logged into. The private key that the user uses to make connections is stored in the node which originates the connection. If you want to prevent a user logging in using a particular key, you can simply remove it from their file. But be aware that the user can always put it back themselves, if they can log in to that node or otherwise access that file. You can also change the path to the authorized keys file by setting in to a file which the user cannot access. But keep in mind that this will apply to all users. As for determining how a user authenticated, that information is in your log file . For example: 

That looks like...a bug. In fact, it is a bug. The ZFS userland is updated, but the kernel modules aren't being updated by DKMS. This assertion is caused by the version mismatch. You can work around it by a process given in a comment to the bug, by removing the old kernel modules and then reinstalling everything. 

Don't use the system ruby for your own programs. Its purpose is to serve system applications which were written in Ruby, and it is only supported by Red Hat for those applications. Instead, use a Ruby version manager such as rvm or rbenv, with which you can run a current Ruby version and any gems you may need for your own programs. If you need vendor support, you can also use a Ruby version from Red Hat Software Collections. 

This is just local mail, probably from one of your running services or cron jobs. It's addressed to root, but the mail server can't figure out that it's intended to be local mail, because the hostname can't be resolved to an address. To fix this, rename the host to a hostname which resolves to the server's IP address, or add the IP address and hostname to . 

After changing these and saving the settings, physically power off the computer and power it back on. 

If all else fails, you can inspect the yumdb manually. It's located in and contains detailed information on every installed package. You'll be particularly interested in . For example, for the package: 

To run a Tor hidden service using Apache which is not accessible from the public network, be sure that Apache is configured to listen only on the local interface (e.g. 127.0.0.1). Some things you may need to change in your configuration files are: 

The CentOS Wiki has a lengthy explanation of how to set up a local mirror. In short, you start with a copy of the DVD and then fill in the gaps using rsync against another mirror. 

If you want your names to show up with mixed-case, preserving whatever you put in the zone file, you will need to use a different nameserver, such as BIND. It is, after all, the Berkeley Internet Name Daemon... While it may be possible to hack the NSD source code to make it preserve case, you should be wary of doing this, as it may not be possible to predict what bugs or unintended consequences such a change might introduce, and your nameserver is one of the last places you want mysterious bugs showing up. 

The haproxy package has been removed from EPEL because it is now included with RHEL 6.4 (and will be in derivative distributions after they build 6.4). 

Simply having a copy of the file on a server would not be sufficient to compromise you. It would have to actually be executed, e.g. by someone loading it up in a browser. If you did that, though, then you are almost certainly compromised, and should proceed from there.