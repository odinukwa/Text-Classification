It is much more Pythonic to define your functions outside the user flow and put the user flow inside of a function. The flow should look like this: 

If you don't know how deep the object is nested, then recursion is a pretty solid way to go. If you want to try a more hackish solution, you could also use and regex to extract the date fields from deeply nested objects (not suggested). Please provide more examples of valid objects to sort though, your code seems like it would break on certain instances. 

If you have control over the format of the object you're filtering and sorting, then you should definitely consider reformatting it into something more palatable. Using to sort objects seems funky. You can do something like this: 

Some developers will do so that getting an element by ID requires less typing. This is completely up to you. Comments should explain things that are not immediately obvious from the code. 

What if the user enters a non-numeric coefficient? Or what if the user enters 0? This is also applicable if the user tries to divide by zero in the function. Consider following a style guide like PEP8 to make your code more readable and consistent. 

If this is for something like unit testing, you should use a unit test library to like Mocha or Qunit to validate the behavior of the function. What data types are you dealing with? Are you only concerned with numbers? Do you want strict type checking and/or null checking? 

Refactor the method to check if is in . Put APPS_MAP outside the functions so it can be accessed as a global variable. 

This allows you to keep all the world related logic in one file. You would then create a separate Python file that takes this and runs the game. 

As an additional comment on your variable names, long and descriptive variable names are good, but you should strike a balance. Variable names that are too long or convey unneeded information can and should be shortened. For example, shortening to , since one can infer that your functions are supposed to operate on algorithm elements. Why not regex? 

While we're addressing this function, lets discuss code convention. You're using lower snake case, and your naming conventions are consistent, which is good (I suggest taking a look at the PEP8 style guide for a concrete set of rules around Pythonic code). However, some variable names are a bit too long. Descriptive variable names are good, but providing redundant information is not. 

What happens if a player doesn't remove a card that was in their set of player cards, and then enters an answer that's not or ? Your function has a handler for that, but doesn't prompt the user again for input. Suggestion: 

This is much more concise and conveys the same amount of information. Underscore prefixed function names. 

You can use the truthiness of instead of to check if an object is an array, which yields the following code: 

Why don't you just write a helper method for generating this? You have already, just modify it slightly to look something like this: 

This allows you to keep all your item related declarations together. Also, inherits from , but it has the same constructor and fields, which makes it seem redundant. You don't seem to be doing any typechecks with it, so you can just instantiate keys with the class. (Consider naming the classes and , because each class represents a single instance of that object). You can then just check if the item name matches the room's required key name. 

For a small code project like this, it's not that big of a problem, but in the future consider defining accessors and mutators like to prevent accidental modification. 

You get the point. You should refactor further to make the code easier to maintain and develop. Now on the other hand, if you're looking to use every JavaScript hack in the book to golf your code, you could use instead of . For characters, you could use the following to generate your date range: 

This class reads a log file stored on my server, parses it, and returns it. It also caches the data so that subsequent calls to get the analytics data will not have to read from the file. The analytics files will be relatively small, so memory usage is not a concern. The callback passed to is expected to accept an error as its first parameter and data as its second parameter. Suggestions on improvements and cleanups are welcome. Link to file on GitHub 

Your function should be dedicated to its functionality. Have all the printing done externally. You don't need as a parameter. Have your function return or . It's much more useful and reusable that way. Having it return also allows you to exit the function early if you know the arrays are not equal. For example: 

Looks like no one has yet read through this code yet, so I guess I'll give it a try. Here are my initial observations, as well as some general suggestions: 

I have the following code in a file called which will handle all the database operations for my small application. For some background, this application fetches stock data from an API and stores it in a local database so that future requests can pull the data from the database instead of making a network request (basically a rudimentary cache). 

Also, why the need to do ? If you know all your arguments will be numbers, this is unnecessary. If you don't know the data type of your arguments, you should probably enforce that they are numbers using . 

If you're only concerned with validating arrays of numbers and you know the bounds of the input, you can easily rewrite your function like so: 

You can use this in all sorts of ways depending on how you want to refactor your functions. , , and the other like functions are just aliases. Why not just name the functions that in the first place? Use an guard for your code and wrap your main code in a method (just convention, not really necessary and varies since you're not importing these modules anywhere else). 

Making a board class would be advisable and would help you refactor some common functionality. You could implement bound checking methods in there. 

This would handle 3 digit date codes, but you could probably come up with one that fits your situation, and it would be trivial to handle letter + number codes. Using regex would make your logic a lot more readable and self-documenting. Your comments are good, but it is still very difficult to follow along. 

If you're nitpicky about the , technically doesn't exist since all JavaScript numbers are floats. Use instead. See this SO post about rounding to 2 decimal places. Using it is completely up to you, there's nothing wrong with the way you're doing it. (This suggestion is slower, but looks cool I guess) 

Consider following a style guide like PEP8. It will make your naming conventions much more consistent as well. Most developers will name classes with upper camel case, variables with lower snake case, and class methods with lower snake case. Let's talk organization and architecture. Your OOP doesn't look too bad, but here's what I would suggest: 

Make sure you thoroughly document this in your code though, because this sacrifices readability for brevity. 

Other than that, the code is mostly understandable and readable. It is a bit monolithic however, which I suspect is why no one has reviewed it. 1200~ lines of code is a bit of a daunting task to read through. I suggest you break it up into submodules. Put all your utility/formatting functions in a file, and put all the typesetting functions in another. That's one way to go about doing it. Happy coding! 

You're off to a good start. Keep reading and learning. :) Here are some nits and improvements for you: 

For readability and clarity, put each of your classes in a separate file and import them from a runner script or game script. Why the need to do this? 

You used a regex to split the string, why not use one for removing the parentheses and spaces? You can use a regex similar to this to accomplish the same task as the code block above: 

You're correct. You definitely don't need that many times. You can set it to false in the before your conditional checks because it is only set to true if the item matches your criteria. You can use regex to do most of your matching. It would cut down on a lot of logic. For example: 

Very common in JavaScript. You should explore node.js if you're interested in learning more. Nit: . Aside from being a completely uninformative and useless variable name, this declaration isn't needed. You can rewrite the statement as: 

Overall, the code looks clean and readable, so here are some basics nits and tips for the code snippet in your question.