Currently you have only reset the value of the current object. If you have a bunch of shared pointers sharing then all of these others still have the same pointer and you will have a potential for a leak as the order of destruction will now determine if the object is actually deleted. Self Promo: Articles I wrote on the object: 

You should probably derive from std::runtime_error. It takes a string in the constructor as the message and stored it for use with what() in a way that is safe even in low memory situations: Your exception class is then simplified too: 

Not sure if that is unique enough. I can easily imagine somebody else using the same header guard. I would add the namespace to your header guard. I use as a prefix to all my guards and the namespace (because I own the domain thorsanvil.com). 

I don't think so. You compare type should be relatively light weight (in fact I doubt there are many use cases where the care object has any members). 

If this code is working. Then DON'T do any major refactoring without unit tests. You can add your standard modernizations that are easy to show work: Use Copy and Swap Idiom on the assignment operator: 

Graph Interface The only thing I don't like (and its not a major issue) is that the method does not really seem to belong to a graph. 

Design Well your code seems to do a lot more than your initial design. So first of I would simplify all the code to do what the design is not do everything that you can imagine that the system needs to do in the future. Keep it simple. Code Review. Stop using pointers. You should practically never use a pointer in C++ code (unless you are doing something low level). You are working at a high level so there should be no need to do the low level stuff. Rather than arrays of characters refer to use . Arrays can overflow and you need to plant specific code to make sure that does not happen. The on the other hand will dynamically grow to be the correct size so you don't need to think about checking the size. Also an array converts into a pointer way to easily and looses all concept of size which makes it hard to check the size of the array. Comments on specific things. Don't use or other macros. 

Your implementation has a couple of issues: Again that check for self assignment that basically never happens (but you have to make work for that billion to one off chance). 

If your library is standards compliant I would not worry about (just like I would not worry about pow()). 

I suppose this does that. But a lot of code assumes that of means that it contains a pointer to a pair. You may want to have another state ie (or -1) that indicates nothing is stored in the object. Personally I would simplify the above: 

Once you start writing to a stream the locale can not be changed (at least not consistently or in a guaranteed manor). But you get around that problem by using an alternative stream object and re-using the stream buffer. Thus allowing you to use a specific locale (good choice with "C"). But See note below. Small problem. The stream pushes the locale through to the stream buffer. So you have changed the state of the stream buffer which is not restored. Normally I would say do: 

But if all you are doing is using the parameters to call another function then just leave them in the array and pass that to the function you are calling: 

Moving the list. You have the move constructor. But I am not convinced it is correct. But you also missed the move assignment operator. 

Why not just a ? Even better why have search at all. Have a free list. Drop the head item from the free list and return it. When returning a value add it back to the head of the free list. NOTE: I am not talking about an explicit list structure here. You can have an array of objects. And an array of index values. Then the array of free items is contains the next element in the list. 

The code is automatically declared as inline inside the class. The keyword has no real meaning in terms of the compiler in-lining your code. Humans are useless at understanding when in-lining should (should not be done). So let the machine work it out. Rather than just being able to dump to stdard out. You may want to pramertize that with any stream. Also provide a standard that calls it. 

Use modern C++ Its 2016. C++11 has been out for 5 years. C++14 has been out for two years. Both have and the associated parallel libraries. 

Follow up on previous review: Sign an EC2/S3 URL I have fixed the previous comments. I have also added the code needed to sign HTTP header fields as part of the request. 

Hate the use of assert. It means that production code runs and behaves differently from test code. In my opinion code should behave the same way no matter what (otherwise things become hard to diagnose when things go wrong). 

Always check error codes. All the following return an error code. You should validate these functions worked by checking this error code. 

This is because I don't want my object to behave like a stream and a stream buffer to people who use it. That could be confusing. So hide the buffer properties from external users (by using private). They can always get a reference to the buffer using the method . pragma once and include guards There is no point in using both: 

Putting it all in one function does not reduce readability. But the huge template type names do bother me slightly. Template names are usually short (because they are not real type). 

Well actually what you have written will compile: Unfortunately it does not do what you expect. Here you have object slicing. The Base part of the object you created is sliced out and copied into d. What you need is a pointer (or a reference). It looks like you are used to languages like Java. Where all objects are dynamically allocated. C++ has a much superior mechanism that allows us to accurately control the lifetime of the object. The disadvantage is that it adds complexity to the language. What is called a pointer in C/C++ (to distinguish it from C++ references) would in most other languages be called a reference. C++ has both local objects (automatic storage duration object) and dynamically allocated objects (dynamic storage duration objects) thus we need a convention that allows access to both types of object, hence we use to refer to objects that are dynamically allocated (to distinguish them from local objects). BUT it is unusual to use pointers directly in C++ (unless you are implementing some real low level stuff). Most of the time when you dynamically allocate objects you will use a smart pointer that defines the lifespan of the object (much like other languages with garbage collection (but better)). would be the equivalent of in Java.