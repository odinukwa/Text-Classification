This way you can also use a general method like before and use the tag to call the method. Like this: 

Naming: A name like is bad practice. Give meaningful names to parameters/variables. Change it for example to . Although the class is , the method probably expects a "print-job", making a meaningful name. Writing output: Try to apply separation of concerns. In this case this means that you shouldn't write output to a screen in a method that merely returns a boolean. You could refactor it like this: 

In the point Type constraint a bit further you'll see why. Scoping variables: You should define variables as close to their usage as possible. In your case you can instantiate the class inside the statement since you don't need it outside the statement. Example: 

Is there a reason why they are in separate methods? The only overlapping part is that in two conditions can be the same as (1 and 3). If this is a mistake, you can place all the code in one method, if the checks are correct and you want to keep both methods, also fine. I'll base my answer on the correctness of your code and keep two methods. 

Naming conventions: Please read the Capitalization Conventions by Microsoft. Class names will Always be capitalized, same goes for method names. 

Yet, I don't see a property in your class, it's called there. That on the side, it means you perform a foreach loop on the of either TCP or RTU. You can extract that logic in a separate method and call it. Here's the extracted method: 

Another way of using a method is making it return a to see if the parsing succeeded and using the parameter. This results in following method and usage: 

The compiler will generate a backing-field and this will result in the code you had, but this is cleaner to develop. if/else vs. switch: When you're in a situation where there are a lot of if/else statements, you should consider using a swicth statement. The code in your method would look like this: 

I don't see you using the variable inside your loop? If it's just for counting you could perhaps rewrite the loop to: 

Naming: Like the previous answer stated, your classnames are far from following conventions. The should be and not . Also a name like is definitly not meaningful, not for you, not for others who read your code. Try names like , or , and so on. Tip: Names of Classes, Structs, and Interfaces Braces: Microsoft doesn't have any conventions on the formatting of your braces. This means you can chose between following: 

Checking for changes is just a matter of comparing with . Note: this will be preferable to a collections object if you are transmitting your data between a client and a server, since the bitmask will be stored as a single int or long. 

If you are going to run into a number of optional values, another alternative is to extract the logic into a separate method. In this case, an extension method may be easiest to work with: 

Disclosure: I do an increasing amount of functional work lately, so I tend to use more than others might. Feel free to put back some of the explicit type names if you feel uncomfortable leaving them as . 

The tells the interpolated string to output braces rather than attempt to perform a replacement, so it keeps the format placeholders intact, so that's no worry for the entire string being interpolated. 

It should be pretty clear that is going to be much larger than 16 bytes. One of the reasons this is a concern is that structs are stored on the stack. The default .NET thread stack size is 1MB, so in an extreme case, a struct which is too large could get you a StackOverflowException without any recursion required. 

Since you're using nUnit, you could actually break them out into separate tests by utilizing the TestCase attribute more effectively: 

However, neither are particularly large differences. We can refactor further if we extract the following method: 

(It was thrown together quick just for quick turn-around sake.) I then provided 3 ways of loading. One loads the data much like you did above: 

Pay Calculation The calculation step is now a simple matter of enumerating your providers and calling : 

One thing I noticed at a glance is that the main window code-behind is doing a lot of work that isn't really UI-focused. For example, the code to handle loading plugins from external DLLs is not something I would expect a Window subclass to do. I would highly recommend restructuring the application to utilize pattern that helps you to break things up into more single-purpose classes. A good example of a pattern that I use often is Model-View-Presenter, or MVP. A more common pattern in WPF projects is Model-View-ViewModel, or MVVM. The separation of view logic from business logic makes the application more modular, allowing you to swap out components more easily. For example, if you decide later that a different UI technology (e.g., HTML/Javascript Metro) is more to your liking, you just need to swap out the view. 

Adding more test cases is just a matter of adding elements with new data and re-building/re-running. The How-To MSDN page can be found here, and some examples of DataSource configuration strings can be found here. Just to give you a taste of this in other frameworks: NUnit TestCase 

More reading on Object and Collection Initializers. Get SharePoint list: Don't blindly use , it depends on the number of lists you have in your environment what call you should use. Using , SharePoint will look for all lists in the current web-object and fetch all metadata from them. Then it compares the name you provided and return the correct list. And will make a call to the DB for each list for which info is needed. If you have a lot of lists (thousands), use the second method, otherwise the first will normally score better. Also, this depends on the performance of your hardware. But in general, I tend to avoid the indexer (using the second method or even ). The foreach loop: You have this piece of code: 

There is no easy or short way to achieve this as for each side/direction, the side values are not consistent in the same order (Not sure if I'm making myself clear.. :D). The only possible solution I seem to find is following: Create a method to initialise the dictionary. It takes two parameters: and 

This is wrong, the setter should be used to set the value of a instance, certainly not to save a value in the object. Also since this has all to do with and not with the , maybe this belongs in the class. 

I only don't understand why you set the properties through the constructor and then don't validate them. Your code now only enforces that all properties will be set, although unvalidated. Also, if you want the properties to be set through the constructor only, make the private. Example: 

keyword: Although others might not prefer to, use instead of declaring your variables explicitly. Let the compiler do this for you and your code will look cleaner. Naming conventions: Local variables and fields in methods and classes use . So, in button1_Click, will become and so on. Naming of controls: What does or mean? Right, nothing! Change the name to what the control represents. For example this would become and for the button . Parsing: If I type text in the textbox (non-numeric input), your code will throw a with following message: 

Avoiding double code Both variations of the method have almost the exact same logic in them. A better practice would be to extract the common logic in a separate method and call that method from the variations. This way you avoid a lot of work when expanding it or making changes to the implementation. Here's how you can do it: 

This makes that you have to check for different situations and so your if-statement cannot really be shortened to one statement. What you also can do is loop over the fields and do a count of the empty fields and validate this: 

If you want them to retain the same organizational hierarchy they started with, you can do something similar to the following: 

Actually, most of the leg work is done for us in the framework. Enum.GetValues returns the list sorted ascending already, via the underlying implementation of Type.GetEnumData. With that in mind, you can use LINQ for the rest, retrieving all but the last value: 

Given how they were used, I made the (perhaps incorrect) assumption that your ValidationTypes and ValidationFields types are enums. If this is incorrect, feel free to substitute the _.ToString values back in. The validation method could go as follows: 

The benefit is that if you ever rename text, your refactor tools will update the second example, while commonly, they will miss the string in the first example. by default As a general rule, I seal classes unless it has been specifically designed for extension. I could go into explanations why, but smarter people than I already have. Final code: 

Honestly, it looks like you want to use a domain object to model your providers and perform the pay calculations. Rather than using a bunch of text fields and drop-down controls, you can then data bind your domain object to a . Domain Object You want an object which has properties for all your display values. Since data binding is involved, you need to ensure the object implements the interface, like so: 

There's a happy coincidence that you wanted to return DateTime.MinValue when there is no nth weekday, which happens to be the default for DateTime. 

If your main goal is to verify the document structure, you may try using an XSD. Once you have a schema doc defined, you can use some LINQ to XML extensions to perform the validation and get the error messages (if any) that result. Additionally, you can use XSD to define default values for missing elements/attributes. Once you do that, the code can be simplified: 

If you are always using the default port, you can omit the assignment. According to the WinSCP API Doc, leaving the port to the default of 0 will cause it to use the protocol default (22 for SFTP). Keep in mind that always is not always always :) Session Creation 

and an appropriate suffix so the overall query is valid SQL, it would return all users. Other injected strings could do worse like modify/drop tables. Instead, you want to use a parameterized query by replacing your format specifier with an @-prefixed variable. Then, you can add parameters to the collection: 

You would then use the UI designer to bind your Address text box with _bound.Address. Note1: ellipses are only there as filler for other code *Note2: the example is a quick-and-dirty winforms example for simplicity, but the concept works equally well for web projects*