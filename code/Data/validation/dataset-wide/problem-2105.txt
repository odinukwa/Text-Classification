Try as much as possible to act as an enabler for your team to produce high quality code. They will appreciate the respect this entails 

You say that you have "done all without complaining", but perhaps you should be giving some sort of feedback. It doesn't have to be a "complaint", but it's reasonable to discuss your assignments and progress with your manager. Perhaps they have a plan, which includes having you learn to do simple tasks. "Trivial" is perhaps not the best word to choose, because even simple tasks need to be done well, and can be important. Your role as an intern is not just to accept everything unquestioningly. It's fair for you to ask for a clear road map of what progress you will be expected to make in the coming period, and how your current work contributes to this. It's not just about the technical tasks. While you are an intern, it's very important that you make a start on developing the interpersonal skills that will make you successful in the workplace. So take some time to plan how you will present your questions to your manager. Think about what you want to achieve, what you think is reasonable to ask for, and how you will put this across in a way that shows that you are thinking and acting as a professional. Usually, being willing to take some initiative in your own development will be seen as a positive thing. Just make sure that's what you're doing. 

When this happens, you should advise him that he cannot play on his phone while you are pairing. Maybe he thinks that pair programming means "one person works, the other takes a break". To somebody who hasn't worked in software development before, he may share this misconception. Explain to him that he is supposed to pay attention even when he is not driving, and that he needs to be listening to you as part of his job. You need to outright ask him if he has been using the resources you gave him. It sounds like you believe this hire isn't working out, and if he doesn't change he may be let go rather than "not promoted". Have a 1:1 with him and lay out all his performance issues. Be clear in your criticisms and offer ways that he can improve his performance. Be careful when you give him this feedback to give him good feedback as well. When I give feedback, I try to avoid using the word "but". This word is almost always followed by a criticism and likewise negates the affirmation precedes it. Replace the word "but" with "and" -- I affirms that you are being sincere regarding the criticism and the affirmation. Consider this example: 

I suspect that you have been walking on eggshells and have not been clear enough when discussing his performance. Perhaps this is because you were already acquainted with him and you don't want to hurt his feels. Maybe you don't want to give him negative feedback and so you subtly try and encourage him. It doesn't seem like this is working very well for you or for him. 

"Nominated for a promotion" isn't worth the breath it takes to say it. Ok - sure - it's a nice thing to be told, but if you're taking a hard-headed look at your business relationship with your employer it means almost nothing. Even more seriously "resistance from HR given some circumstances we can't control" translates directly to "I want to appear nice, and have you stay even though you should be promoted, so I'll blame some mysterious thing over at HR". Take the interview - give it your best. You're not wasting their time, you are giving them the opportunity to recruit you. You haven't decided yet whether to stay or go. You never know, once you look more closely, the other job might be more attractive than getting the promotion would be. 

Put it to your team that some coding standards are needed. You can probably find some guidelines online to use as a starting point. Ask your team to give feedback on this, and allow them to add practices that they know to be good from their own experience. Set up a meeting to go through your draft guidelines and finalise it. There will certainly be some things that are controversial, and you'll need to allow sufficient discussion, but then close down on a decision. Even if a decision goes against something that one of the devs holds dear, they'll have the consolation that they were consulted and that a rational discussion took place. Get the team to do code reviews. Ideally this is not a hierarchical thing, but one team member helping the other to stick to the standards, and maybe making suggestions for design improvements. You can also consider pair programming, but many teams do fine without it. 

About the resources: If he says he hasn't used the resources you provided, ask him why. Did he not think he needed them? Did he think they were too hard or too easy? If he says he has used the resources you provided, ask him why it isn't showing in his work. Has he not put forth enough time to benefit from them? Has he been using them for topics other than the ones related to his job? Let's pretend he is a Jr Java developer and your company's flagship product is an enterprise ERP. Has he been spending him time learning another language using those resources? Does he see this job as a stepping stone necessary for him to get experience and work in some other industry? Talk to him about his career goals. Tell him about how he can reach those goals inside your organization. Ask him how he feels about the work he's doing. Does he think it's not challenging enough? Does he have real expectations about what "being a software engineer" is all about? Does he think he is going to come in as a Jr dev and spend most of his time implementing new features as opposed to fixing small bugs and receiving honest feedback on the quality of his work/code? Friends and business should be separate Friends should be friends, but inside of a professional working environment you must always act in the company's best interest -- even if this strains friendships. 

This way you are "not pointing a finger" at him, but you are explicitly calling out that he is the owner of this piece of code and hence responsible for it. Calling out is important because not everyone (especially the higher management) will open any codebase links to see whose commit it was. A bit harsh, but he deserves it. 

Some people have a tendency to aggressively put the blame on others in order to divert attention from themselves. Since you are also relatively new, it must have been very convenient for him to do what he did. Here's my advice. Write a mail, describe what the issue was, how you reached the root cause, what was the eventual fix for it and how it can be prevented in the future. Include all the stakeholders in this mail. At the end of this mail, write something on these lines, 

I am a computer science undergraduate with no formal work experience. But currently I am working for two startups which are currently in their initial phases. I am a stakeholder in both and working as full stack developer. I dont have any contracts or commitments with any. Actually they are both not-so-technical startups, so I just want to give them a working mobile app and backend and get on with my life. Amazon is visiting my campus tomorrow and I would like to work with them as an intern. Will listing these startups be harmful in my application to Amazon or any other company? Actually I have worked quite a lot for both on apache cordova and don't really have anything else to write on my resume. Any suggestions? Thanks. Update: I eventually put it on my resume and got into Amazon. :) 

It may be that he really doesn't have the cash to pay you what he owes, and would have a hard time raising it. If this is true, you could perhaps come to a deal about an alternative form of recompense. For example, if he is genuine, and acknowledges the debt, one way out of the problem would be to offer you shares in the company instead. Of course, any entrepreneur will see the equity in their company as the way they are building up their future, and therefore valuable, and on the other hand, the shares might well be worthless - that's a judgement you'd have to make. Mostly, my point is that there are other ways than cash to settle a debt. If he isn't willing to at least consider alternatives, then it really brings the friendship into doubt. If you're genuinely looking for a solution that works for both of you, he must do the same, or he is not your friend. 

The amount of effort it takes to transform a room to a fairy princess place, or whatever, is a way of showing how much affection and respect there is for the colleague that is on the receiving end of this. People are saying: "We value your companionship as a colleague enough to waste our own resources, and some company resources, to do something special for you." When this happens, enjoy the moment, and look forward to the occasion when your colleagues play an elaborate prank on you - on the first of April, or any other day.