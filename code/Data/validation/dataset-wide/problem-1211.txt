Do not perform useless operations In , you parse a file to get a value that will be overriden by environment variables. Maybe it'd be easier to perform the environ check first and parse the file only if nothing was found. I'd write somethiing like: 

Because Paddle and Ball have a lot in common, I think it would make sense if they were to inherit from a common class (PhysicalObject for instance) with size, position, velocity, color, etc... can be written . You could try to handle collision in a slightly more generic way by creating 4 walls inheriting from PhysicalObject around the area and then handle the collisions between 2 PhysicalObject. Also, it would be nice to have some fancy behavior like the speed of the paddle having an impact on the speed of the ball when they interact. 

and you don't need to close the file manually. Using the guard It is usually a good habit to put your code behind a guard to have your code running only if we run your script and not if we import it (because one wants to re-use a function for instance). No need for as strings are iterables too As pointed out in codesparkle's comment, you don't need to build a . Once this is done, you code looks like : 

Improvements could be rewritten more concisely : . Also, you could use to retrievement elements in a "safe" way. Thus, the code becomes : 

Then you can actually be smarter by considering how many times you'll enter the loop. This can be decided with a simple division: 

Many other things can be improved but the main thing would be to split your code into smaller parts. 

In particular, the and functions should have an explicit at the end (even though it should be even better to use ). Docstrings Docstrings are string literals used at the beginning of functions/classes/modules to give some explanation to anyone reading your code. They are also handled in a special way to be accessible via the member of the function/class/module. You can see it as special form of documentation found only at the beginning of definitions and that is easy to access (which is not the case for ) for instance with . Also, there are conventions for Python docstrings described in PEP 257. As far as I can tell, it is not followed as strongly by the community as PEP 8 can be but it is still a reference worth reading. Here again, you'll find tools to help you such as (formerly known as ). (Also, for more comprehensive documentation, you may want to go further than bland text and use the reStructuredText markup. PEP 287 give more details about this but it is not something I am familiar with). In your case, writing docstring could help you by forcing you to find how to describe your functions, their inputs, they return valuem etc. Improving (and ) with previous comments and more From the function: 

Note: using instead of fixes an issue found with tests mentionned above. Simplify In Python, you usually don't need to get elements from an object by index. What you want is usually to iterate over the different elements. I highly recommand reading/watching Ned Batchelder talk called "Loop Like A Native". In your case, you could write something like: 

Using the right data type (again with actual solution) As said before, the fact that is a bit puzzling as you are accessing it using and getting item at the given index. A list is probably the right thing to use here. Also, this is not really pythonic nor efficient. I'd recommand reading/watching Ned Batchelder's presentation : "Loop Like A Native". In your case, instead of getting the element at in , it may be easier to provide it directly to the constructor. Doing the same thing also in , you can then simply look over the list. Then, if you do need the index, you can use . All this requires many changes everywhere but once done, you can get rid of the variable. Remaining code looks like : 

Not sure if that it would make things more pythonic but here are 2 comments to make things less awkward. You might want to rename your variable name in for something like . It might make sense to use an additional variable to make things slighly clearer in your calculations: 

My first advice is stop writing classes if you don't need to : your class has only two methods an and a proper method. This could probably be written as a simple function : 

thus making your code twice as short (or three times if you take this chance to remove the empty lines in between). I am not sure the different rotors deserve their own subclasses. They will just be different instances from a same class. Also, I am not sure there is a concept of rotor size in the classic Enigma machine, just a set of rotors of identical sizes than can be put in various positions. You set the rotors using a lot of boiler-plate code to associate characters to indices (via an array). You could just as easily use a string : 

Also, using this technique, you'd detect easily unused variable like . Rewriting angles computations In : 

just solves this problem. By the way, there is 1 way to flight a 0 stair case step. Tests It is a good habit to add tests for your code. I won't dive into testing framework and everything but just adding : 

The function probably deserves some additional explanation (especially because the name says while the code says ). Maybe a link to some reference would be enough. 

Keep it simple : if you were trying to count vowels manually in a very very long string, here's what you would do (or at least what you should do) : go through the string one character at a time, if it is a vowel, increment a corresponding counter (one counter per vowel). On the other hand, here's what you wouldn't do : use regexps to remove unwanted characters, then go through the remaining characters to count then go through it again to count , etc. What I am trying to say here is that first you only need to go through the string once, secondly regex is a powerful tool but the overhead in performance and readibility make it a bad option for your use case. 

It looks good to me. You could break from the inner loop even if x*y == max to avoid 1) an additional useless iteration 2) checking if it is a palindrome. Also it would remove some code testing the value of the product. I think you could change the limits of the inner loop to consider only y smaller or equal to x. If you do so, you can break out of the outer loop if x*x < max. Edit : Some more details. My second optimisation tips is not a really a good tip, it's not a bad tip neither. Here is the function before and after taking my second comment into action. Also, some more basic code has been added for benchmarking purposes. 

Simplify dict comprehension You could call before the loop. You can use the syntax in your comprehension in order not to call . At this stage, you have: 

Warning for other reviewers : input and input are different depending on the version of Python you are using. This is about Python 3. 

You naming convention is a bit weird. My assumption is that stands for "float latitude". Because it is quite easy to know the type of a variable, there's no need for having the prefix. You don't need to cast to in . You don't need the temporary variable in especially as it makes the mathematical formula harder to read. Your method seems to be doing two things : returning a value and updating a member. It would be clearer to have a (const) method returning a value and another method using it to set a member. 

Your code appears to be faster but also goes much deeper in the function calls. If you exceed the system limits, you could update . However, it could be a good idea to try to fix your code. You could write a solution that doesn't perform any recursive calls: instead of trying to solve your problems by solving smaller and smaller problems and saving the solution as you go, you could simply update all the problems from the smallest to the biggest you need. For instance, you could write: 

Let's go for a step-by-step cleanup. 1) Get rid of repetition by using a variable to store your html code common to the different branches. 2) Remove useless levels of indentation to make things easier to follow. The inside of the loop is now : 

A builtin called does exactly what your are doing in your function. Final code Many things can still be improved but here is my current version of the code: 

and shouldn't be considered as primes. Again, fixing this is simple : initialising as being in the basic function and setting in the optimised function. Improving the code for the optimised version In , you can factorise code by writing : 

Now, you could go crazier and use the fact that all your regexps look the same to define a function to build them. You'd get something like: 

Iterating over 2 arrays at once Once again, you'll find more about this in the talk mentioned above but there is a better way to iterate over 2 arrays at once : you could use . the Python way Once again, instead of keeping track of the number of equal pairs, you could use the builtin. 

Then in , you can get rid of by using a simple which makes things more explicit. Then, you can actually factorise out the common code at the end of the 2 branches and get the more simple: 

Back to where we came from Now that I understand better the point of your code, we can try to clean up the function. The filtering can actually be moved out of the function. 

Refactoring is best done one code at least slightly understood. This is not the case here so I may have introduced new issues. Because I had no idea what I was doing, I just applied some usual recipes (assuming the objects you are using are well behaved): Avoid the unnecessary You have statements all over the place which serve no purpose whatsoever. Most of the parenthesis you've used are useless. You are retrieving the different parameters in many different places. It could be a good idea to retrieve them once and for all at the beginning. This is particularly useful because you are using strings are keys and I don't want to bother about having to check the string used as I am reading or writing the code. Do not repeat yourself If you look at your code, it is quite obvious that there are many similarities all over the place. The best way to get rid of it is to write your code in such a way that it is easy to detect it : see what is similar and see what changes. In your case, that means taking into account the comments above but also reformating your code so that statements are on a single line (this is not a good thing to do usually but it helps the eye to detect similarities ; also long lines might be the sign there is something to improve). When you've seen that only a few detail are changed from one call to another, you can try to change your code so that everything goes in the same logic with a different pre-processing and/or post-processing. This technique is really useful in code like yours where you have many nested : the number of blocks grows as 2^number_of_levels but you may reduce this to a single block with only number_of_levels preprocessing logics. Also, reordering the order in which conditions are checked sometimes makes things more concise. In your case, I think your code can be rewritten : 

Split your code into re-usable functions I just realised that vnp comment explains this already. nothing to add here. A few tiny code comments You don't need to use in your case. Also, you don't need a in your decode function : an would do the trick here. 

Class attribute Having defined at class level does not add anything except confusion. Counter I think that this: 

Now, even though it doesn't really matter here, it can be a good idea to iterate over your containers by using (const) references to avoid copies. Also, I am not quite convinced by the variable name. I'd find better than , better than and better than . 

The same idea can be reapplied in different places at different levels. Then, the whole functions becomes : 

At the moment, your code is simple enough so that it's quite easy to understand what it does and to be convinced quite easily that is does correctly. One of the main principle of programming is Keep it simple. Adding special cases will give you more code to maintain and potentially introduce bugs. This is probably not something you want. If you want to be sure that your function returns the same thing as , you might want to use this in your unit test (you were about to add unit tests, weren't you?) If your reasoning to add special cases was performances, I guess you shouldn't be too worried about that as it corresponds to a situation which would have been super fast anyway. 

Disclaimer for the snipper above: I may have misread your original code so this might be wrong. User input At the moment, there are a few issues with the way you deal with user input. 

I can see in your code artifacts of old versions of your code : and are not used at all. Also you don't need to define before the loop. is nice keyword, available in most programming languages. However, from my experience, you don't need it that often. In your case, you might as will just write : 

Style Python has a style guide called PEP8 which is definitly worth a read. A few things can be improved : 

Re-think your logic (bis) On the code above, the last 2 checks are a bit redundant : if we don't go into the block then we must have and ``lastindexval <= indexofitem` must be true. After cleaning this, the code looks like : 

Close your file You a file but never close it. You should but it's quite normal to forget it. A nice solution not to forget it is to use the statement. 

16 and 15 are pretty artificial values, you should aim for a better code quality rather than a higher/smaller metric in particular. Let's see what can be improved... 

You don't need a class You class has 2 (real) methods, one of which is init. This is the typical useless class Jack Diederich describes in his excellent talk "Stop writing classes". This could simply be a function. Then your code would look like : 

Your code looks nice, is nicely formatted (10/10 according to , nothing wrong according to , etc), is properly documented, properly tested. I'd like to start by congratulating you for this. I still have a few things to say. 

Then, one can see that you are using recursion to emulate loops. It is not quite a good idea in Python because recursion is not that optimised (for various reasons) so you should stick to loops if it doesn't make things more complicated. In your case, it doesn't at all : you can remove calls to from your function which becomes : 

Re-edit : I've tested my code with the following inputs and all functions are returning the same values... but not in the same time. 

instead of iterating from to and then consider only values i such that , you could just iterate from to . Just use . 

Less verbose computing functions All the small functions have a similar logic: keep trying to apply an operator to 2 values if they are not None. Because of how things are implemented, it is easy to get wrong (you can copy-paste someting and update the check or not the operations). It is also tedious to add a conversion because of the amount of boilerplate. This can be written in a more concise way with a minimal amount of magic. With: 

Code organisation You've tried to split your logic into smallish functions which is a good idea but you could go further. You should try to write a function that handles the input/output part and a function which takes a well defined input (with the most relevant data types as an argument) and computes whatever needs to be computed before returning it (such a function should not do any input parsing or print anything except for debug purposes). In you case, the most logical input such a function would take is the queue. The corresponding data type would be a of and the return type would be an integer (or None). If you do so, you have smaller independant logical parts which are easier to understand, to maintain and to tests. Among other things, you can write unit tests based on the examples provided to ensure the computation works well. In you case, moving the different pieces of logic around, you get something like: