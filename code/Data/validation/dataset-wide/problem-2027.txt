Review your work from your previous supervisor's and possibly user's perspectives. You may be a little hard on yourself concerning the "perfectionist" claim. Having high standards is a good thing. It only becomes a problem if it prevents you from getting projects done one time and to the client's satisfaction. If this is a problem, your demanding that the other programmers commit the same mistakes is going to compound the problem. When you are the manager, try to establish standards for practices and procedures. Consider dividing this up, so different team members can have a voice in this processs. If everyone agrees on the level of test coverage, code review or documentation, it's up to you to hold them to their own levels. You'd be surprise that some of them may come up with something more stringent than you would. As the team leader, you're also going to have to represent your team to the other management. Of course you'll still have to continue coding, but make sure you take the time and put in the effort to support your team from the outside. They may request different hours because of the nature of their work. Can you make sure everyone knows your team is not slacking off? Will you have the same level of "perfectionism" when your team wants you to ask for faster workstations, extra testing servers or the support department thinks you whould write all the training documents? Focus on getting things done on time, budget and user satisfaction and everyone will be happier. Your standards should contribute to this and not prevent it. 

I think you're going to have to apply through normal channels. I doubt HR will be comfortable telling you not to apply. There's probably something about it a lawyer told them leaves them exposed for a lawsuit. Although the job may be similar, it could be in different departments, divisions, or just different enough that HR isn't able to compare and contrast them. There could also, be a change in managers, so you can't be sure the same people are interviewing again. If you get any contact from HR, you may want to be upfront about your previous interview. Many websitws where you apply for jobs ask if you've ever applied before. It shouldn't be a problem unless they just don't think you qualify. It's your time. 

I think it's important to observe the company culture. This is not as easy as it sounds and may take longer than you think. Different groups may have different rules or behaviors are different when the "boss" is in the office. Things to lookout for: 

You need to find better way to communicate different types of development requests. Simple logic could be addressed in a short emailed paragraph, but design and layout requests need diagrams. If time is an issue, you could setup a Skype meeting and use some type of drawing app to make sure you understand what the client wants. Of course this can be handled by sending files back and forth, but that is not as efficient. Also, you need to arrange some sort of minimum billing for ad hoc change requests. There is no such thing as a 20 minute change. Reviewing the request, making changes, testing, putting into source control, documentation, approval and billing will take much more time. I'd suggest a 2 hr minimum. Anything that can be done in less time is not important. 

The problem with a start up using a personality test is you don't really know what you're looking for in these applicants. There is no history of what types have performed well at your company and those that haven't. You could have current people take the assessment and look for similar profiles, but this can make it difficult to help you balance your team/fill in the gaps. What do you do if your current people "think" they are similar, but the test shows that you're not? What profiles do you pick then. If you want, you can search online and find out what are more valid tests or select the most common. You may find cost is an issue, so balance that factor. Selecting the test may not be your most difficult part, but interpreting and applying the results will be. I believe Google discovered that the best indicator for job applicant selection was certain managers were just better at picking "winners" than others. All the tests, college experience, aptitude, etc. weren't as good. If you're looking for something definitive, I feel you're going to be disappointed. Just like the fairy-tale, you may have to kiss a few frogs before you find the prince. 

You company "prides itself on treating employees well" but how do you verify that statement? Do employees think this is a false pride? You have a "tight-knit group" and it appears people are leaving on good terms and at least one person took a promotion. Make a formal announcement that someone is leaving and include the reason if the employee agrees. Maybe people want to write their own good-bye letter to the team. I've been at companies that throw a going-away party. If what you say is true, you don't have a problem. Although the team may get along, your company may need to do a better job letting everyone know they are financially solid and what the future plans are. If people even think they're looking for a buy-out and the company isn't open about it (These things get tricky and often negotiations are required to be held private.), there's not much you can do about it. Some employees like working for a company that is taking a risk and others don't. The key is the confidence level of what they know. 

You are going to have a hard time explaining this when you go to look for another job. Hiding an employment gap is not easy. Just about everyone will want an explanation. Here are the problems and why you need to work through them: 

The company may want to attract the widest range of candidates as possible. Of course they'll get under-qualified people apply for a: Senior-Level with 10+ years experience paying highly competitive salary, but it will weed-out others as well. I think there are a few factors at play. 

It's a lot easier when people admit there is a problem. You can prompt this with some general questions about the length of a project or complexity of a certain implementation. Once someone recognizes there is a problem, you need to see if they feel there could be a solution. The more they are convinced nothing is going to work, the tougher it's going to be to get them to buy into any solution. Hopefully you can convince them to try something new with something more than a "what have we got to lose?" defense. Finally, you can get to potential solutions to identified problems, but you may be better off listening to other suggestions first. They may come up with something close to what you have and then you can offer some specifics, potential pit-falls, etc. The less you know about people the harder it is to go about this. You could be suggesting things that have been tried or some people strongly oppose them. When you're new, it is important to listen more. What problems do people identify? What are things they never talk about? You may want to pick some individuals and talk to them one-on-one first. The person who keeps saying, "I just do what I'm told." won't fight for change. If you can get people to admit there is a problem, you can make suggestions. Don't expect them to adopt your strategies right away. You may have to make several suggestions over and over before anyone will want to make a change, so don't give up. Just because they don't listen to you the first time, don't go around thinking they never listen to me. It takes work. You're probably not good at sales and marketing, so don't expect to be good at this right away. 

The HR person is just making a very broad assumption that a young person can't work in an older team. This person probably doesn't really understand how the development teams works anyway, so I wouldn't put a lot into it. They hired you for a reason. As an older developer I realize I approach many things differently than younger ones, but I don't think that is a bad thing. You're going to make suggestions that won't be accepted, how are you going to handle it? Can you defend without getting defensive and emotional? If the decision is made and it is not in your favor are you going to argue forever? At some point will you realize you're not in charge and have to work with the decisions of others? We all have to at some point unless you work alone and build software for yourself. Be a team player. You're new, so step back and soak up some knowledge about how things work. Ask questions without being accusing. Suggesting they rewrite a million lines of COBOL code in the latest javascript framework, isn't going to make you look like a rockstar. Getting things done in the context of your team will-eventually. 

Focus in a cover letter on the experience with a domain specific language and the recent learning of C++. It would help to have a project and display the code online. Indicate this was a decision to make a career change and not a desperate attempt to find employment because you can't find a job in your current field. There are too many programming applicants that aren't qualified and choose to do it just for the money. Leave out other experiences that are not related other than, a job history for the last 8-10 years. 20+ years of experience that isn't relevant is a distraction and just says you're old and couldn't keep your last job. Just have a college degree is enough for many jobs, so I don't think a lack of CS degree is a deal breaker in today's programming world. Make sure this person has solid references who are willing to go out of their way to either send an email or make a phone call to a prospective job. 

It's good to have a foundation in business, accounting, management, etc, but take every opportunty you can get to learn from the people in your company. There is a whole list of things you can do: 

You sound as if you're a good enough programmer to be able to adapt to many situations. Look at how others code and act accordingly. On occasion, ask if you can try different ways and make sure it is not too far beyond what everyone else can comprehend. I normally wouldn't give this advice, but this problem seems to follow you wherever you go, so stop fighting it until you can find a job where this isn't a problem. You may consider getting involved in a project where there are a small number of other developers that you could help bring along so it doesn't look like it's just you who programs so "abnormally." It's a shame others don't value your work or want to learn from it if that's the case. Stop beating your head against the wall. Who knows, some project/task will come up where you're the only hope of making it work. No one will care about how complicated your code is in the long run if you just make it work when no one else can. 

They say, "When in Rome, do as the Romans do." Based on your observations, loud objections seem to be the norm with this group. I doubt they will change much. However, here is what I suggest: