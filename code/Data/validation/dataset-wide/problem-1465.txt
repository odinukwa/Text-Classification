This is very confusing. While I'm sure each of the letters have relevance to what the variables contain, you're effectively trading like 7 letters for readability: 

this is confusing to read and would be better explained through a simple temporary variable. Spacing You should be using spacing between binary operators, like here: 

Using a : At the moment, you have a bunch of random, relational functions that pass input around, parameters etc. Use a instead, this allows you to: 

Overriding : You override in the following code block: You should apply the same as before and name it or something (because is already existent) 

You said it, your documentation is a little over the top, consider only saying/including what's necessary and trim the fat a little, so to speak. Pavlo's review covered the major things, so I'll review a few minor things. 

Your code is really nice, and your use of generated property keys is really good. There's a few things you can improve upon: 

This works because you only a single value from the array, but if you were to more, you would need to use that statement! 

When adding equals to a more than / less than check, it adds or removes one from the amount you have to check, which is why you have on the end. You can change this to the following instead: 

Your code has a call in the loop, I would remove this from production code on your website. It's test-code at best. 

for magic numbers (unexplained numbers meaning unexplained things), it's best to declare as a , but your version of JavaScript may not support this, so you can also use . 

I would consider taking a look at Caman.JS, a image manipulation library with similar features to the one you've made. 

You shouldn't have individual functions for each role, and a user probably shouldn't be assigned more than one role. Especially seeing as you can't be all three 

This is not how you print large blocks. Separate your strings with line separators like . Keep the text as a large multi-line string block, and print that out instead. It will take less maintenance and less calls. 

For readability I would recommend create a instead of working with . Typos are sometimes difficult to track. 

Consider using an field instead of . You are using a lot of hashing, which causes overhead on a String. 

All that is left to is checking if all bits in the mask are set to true by the current player. This is very easy using the bitwise -operator. Example: 

In this case you just want your input to be an integer (or a long). So using the regex is one idea. But you should also consider malicious users. What if you try 

First of all, I support @EBrown about whitespace and braces. Some other ideas depending on what you are doing: 

Depends on what you want. Typically programming challenges are not validated on clean code. But on correctness and efficiency. 

Don't do a lot of work in the constructor This is a bad programming practice in general. Because just creating instances can already take a lot of time. I would prefer an method instead. Or put the work you are doing in the constructor, in the method. Which can call a or something. Prune entire BFS iterations If you hold a maximum radius for each node while visiting. You can determine at start that a certain node will not decrease the radius. When it is already visited with a higher or equal radius. 

So we only need to work with the first 9 bits of an integer: To check if winning we can use the following masks: 

You are looping over all intervals. This means you have to check all intervals with each other. Hence complexity: This is a well known problem, you could find a lot of reading about this online if you want. 

You are having a lot of duplicate code, parsing numbers. Check out the class which has these methods builtin. $URL$ Remark: When efficiency is important, may be a lot slower than . In this case I still recommend putting the one time effort of creating your own custom read methods. 

=> All bits in mask are set to true REMARK: Instead of looping, you could hardcode all row and column masks. Which are still only 8 masks. If you understand this, you should also be able to understand how to 

: Like I said above, I would place limitations on the variable that means it cannot be decremented, only incremented. Otherwise a simple interval hack is possible. 

I'm a bit confused by that, grammatically. is a more complex function (in my mind, at least) than , but it has no documentation. 

That is, simply an improvement of what you have: IT IS JUST AS SAFE AS YOUR IMPLEMENTATION, WHICH IS: not very. 

If you're writing the structure on string formatting, then I'd suggest considering JSON as a better alternative. It's a better alternative than reinventing-the-wheel, because, its support is inbuilt into many languages, including PHP with the and functions. 

I can't really comment on your structure in Razor, as I am unfamiliar with that framework, however, your replacing structure could be improved. By using a function, alongside a dictionary, you can simplify this greatly. 

You should define what means in relation to access as a constant or in an enum for clarity, so people can understand what each type of access means. 

: Using the way you did is literally pointless. I don't know whether you're a Python dev and that feels familiar, but that's wrong. 

Also, you should seperate the new-line characters into new strings and just concatenate them in. This makes for much clearer readability: 

Of course, you'll need to play around with the sizes of the grid to match what you want. However you'll find that this method is much faster. 

In both and the executions are very similar, so, you could consider combining them, and splitting the possible pathways at 

SQL is not intended to be used like that. You don't need to create pseudo tables to select from to store your data. You can use a base table, and then specify certain fields calling other tables from that. 

File system: Instead of using files for each listing, and seperating each file by line, consider using JSON instead (with a single file). By using JSON, you can easily serialise the data into dictionaries which can be easily accessed: A theoretical JSON structure for you may look like: 

: Your usage of the variable is a little bit inconsistent: Some places you use it, and some places you don't.