So the kwargs does not seem to allow you to set a new . Hence it seems that the only way to set a new is to remove and recreate the attribute. From this case, it seems hard to further simplify your code. 

I think that a recursion is quite elegant here (to know about the performance, you would need to do some benchmarks). Regarding your code, I would suggest some minor changes to make it more readable: 

For the timeout detection, you could simplify your logic, by making use of the . Thanks to this, your timers are not needed anymore. Your monitor would then look like this: 

Instead of an for , you could use a with and instead of and . You could then return this waitgroup, for the caller to do (but then you won't be able to know how many urls are currently in the work). 

Performance If you need to make your code faster, you will need to identify the bottlenecks. For this, I recommend you to profile your code : $URL$ 

We actually just moved the issue : we now need to know when to close the ! The make sense here (a local variable is all that we need): 

A first step could be to add docstrings to your methods: it helps your readers understand the goal of your methods and it help yourself know what those methods should and should not do. Then you should check the user input: I suppose, that the variable is a string. You should enforce it and raise a when it is not the case (for example a list of strings should not be accepted). I would rename the method to , to show that it computes a hash between 0 and 255. You currently store the actual values either directly or in a list. I think you should stick to one data structure: a list, or even better a set (it has and method just as you need). You could also use the same conventions as the set for your public method naming: , (and I would suggest instead of ). You could also implement some of the python magic methods like and 

Edit statement "extraction" (to fulfill @Mat's Mug's comment) In the original code, the only way to get to the is when is 0 and the is empty. 

This branch can simply be replaced with a condition at the very beginning to check if and immediately return if it is the case. 

But joining paths like this is not very pythonic (and might cause problems on windows). Instead, is what you are looking for. About the arguments You can take inspiration of the os.path.join even further and change the order of your arguments (and completely remove the branching): 

The method could also be faster if it didn't use . For instance, it could use the last 7 bits (from 0 to 127) of (or multiply the probability by 10 and use the last 10 bits - from 0 to 1023). But there is probably a bigger optimization regarding the generation + insertion in the database. Currently the data is generated and inserted into the database sequentially. You could do it concurrently with a channel and two goroutines: 

As Pimgd stated, all your request are synchronous (and wait that the previous one terminates before executing further). To make the calls asynchronous I see two possibilities: 

This code code should work (I can't test it), but the way the "address" is managed could be more elegant (for example to manage in case of multiple listeners). Here is a proposition, where each listener is in charge of forwarding the frames to a particular address, via a given connection. The main loop is in charge of maintaining a slice of all those listeners and forward every frame to all of them (without blocking). With this code, we see clearly, that only 2 connections are used (monitor and session), which might not be the best idea (I don't know how they behave when concurrent goroutines write data at the same time). To fix this, you should simply adapt the main loop. 

I find your variable naming quite good (but it took me time to really understand the goal or your code). Code simplification I consider that should only contain the results of the user (or better: its assessments): 

Why don't you want to leak outside? I find it quite explicit. It seems that you are wrapping your errors with some context: there is a very nice package for this: $URL$ Using it, your code would look like this: 

go-torch beein able to generate a FlameGraph ($URL$ Here is a video introducing profiling in go: $URL$ 

In your main, you "iterate over generators to create values for each key". You could actually create a "base" generator for this! It would be an array generator (10 elements, 0 nullPercentage) of objects (being the objects that you generate). Using @ferada's answer leads also to much less code (I also renamed to ). It uses embedding (one could further optimize, by using the as base - instead of ). There was a typo on the function : it should be and not (because returns between 0 and 99 included). Here is what I come up with: 

Readability Instead of , I would recommend you to use a context.WithTimeout (here is a nice video introduction: $URL$ Multicore You currently have one loop trying to find the best scores, without any goroutines (which is one of the main features of go)! If you have a CPU with multiple cores, you may benefit from multiple workers: 

I didn't find much to say about your coding style. Maybe is not a perfect name: would be easier to read in my opinion (putting the at the end is more consistent with you other variable names) 

As a further refinement, you could change the computation functions to be just and add helper functions to call them and fill the expected channel: 

As is, the (my) code is really hard to test (needs actual registry modifications or env variable edition). To ease the testing, one could change some functions: 

If you have a multicore processor, this should improve the overall performance: instead of having 4.5s + 12.5s, it should be much closer to 12.5s (with some overhead for the first run and the synchronization) 

As Austin Hastings mentioned, all can be cast to . What I would recommend you is to create a method on this type to check if the value is valid. You may adapt the behavior of not to panic (return nil / return a pointer and boolean / return a pointer and an error...) 

No, because the code you are talking about is not concurrent (the statement will run only one of the two loop). 

A minor refactoring might be to put the statement out of the loop. It makes a real uses of the and remove an indentation block. 

I would recommend Don't repeat yourself As you can see, the two branches of your are very similar. Instead you could do a 

vnp and Peter Taylors suggestions are very good. One could go a step further and make nice methods on the type: , and for instance: 

Since you know in advance, you can hard-code it's square root. You can then perform a binary search between 1 and this pre-computed maximum. It will remove the questionable "exponential search". You will then also achieve a \$\mathcal{O}(\log \sqrt{Long.MAX\_VALUE})\$ complexity, which is actually \$\mathcal{O}(1)\$ as observed by @Simon Forsberg. This means that the execution duration can be bounded by a constant time (this does not necessary means that this algorithm is the fastest). 

When you parse the URL, you just take the . If it is a relative link (or a ), you won't be able to parse it further. I might need to use the function (beware of names collision with your type) 

And if you want to go further in python, instead of returning a list you can make an generator (which returns an iterator). The following should work fine for python 3: 

can be implemented with a dict of list: is just a refactorization (move the ... code into it) has already been studied by @Quill. 

Here are some suggestions to improve the fluidity of your app: Use instead of positioning According to this blog post: $URL$ translate is much more efficient regarding the CPU usage Use $URL$ This function allows you to do the computation only if required (see this SO answer on how to combine it with : $URL$ 

Looking at your , I have the feeling that you are doing only integration tests (from the request to the database). You should split you tests to the individual layers (the current one if for routing: it could use a mocked DB). With this approach, the could be deleted (do only the setup that is necessary for each test). 

Miscellaneous Instead of printing each time, you could append to a You have good variable names, except for . Maybe is more appropriate? (or ). Simplifying conditions You could start your at 2 and your at 1.0, to get rid of the condition inside your loop (if is 1.0, then the loop will simply not be executed at all). 

Use docstrings And then you might think that the way to call it is not trivial and want to document it: let's use a docstring ! 

Your would then consist of creating the different channels and launching those functions as goroutines (except for ). With this approach, you will need a fixed amount of goroutines (instead of starting a new one for each frame: , which might qualify as "I shot myself in the foot"). Statistics Regarding the statistics, if see multiple possibilities: 

Using the interface, you could make a function embedded in the struct to compute a default delay instead of hard-coded . For instance: 

Said the other way around, we do not return while is positive or the has some elements. We just write this sentence into the following code: 

What kind of extension ? Using iterators to get the samples For your input functions, you could use a generator instead: 

To really understand the blog post, I recommend looking at its example project ($URL$ - see also branch). Ben Johnsons posted another post detailing its steps: $URL$ Regarding the organization of your code, it would be like this: 

(maybe could generate some tuples with the and , or even ) Usage You can then do a . If you have a list of data, you can then do . Plotting For plotting a limited amount of points, you may use itertools.islice 

is the same as first handle specific cases and the the general case: this way augmented indentation concerns only the specific cases you can iterate over an empty (or even nil) slice use unpacking I don't think that initializing the slice capacity brings much 

Events Instead of adding 3 (permanent) , you could just keep the first one: and when this is triggered, add the 2 other events and on the document (it will also enalbe the user to move quickly) The event should then simply remove the 2 event listeners (you will need to keep a trace of the ). You can then get rid off the variable. The could be moved inside the constructor. moveCursor In the method instead of moving only if the new position is completely in the area, you could separately check the X and Y coordinates (It will then be easier to move near the edges). Naming I don't find the name to be very expressive... maybe is a better name? 

Using the tips of the justforfunc #16 video, you could make your tests using a table ( = testing table) and then iterate on it ( = test case). Your test could then look like this: 

A buffered channel is just a way to allow goroutines to be more independent when they are producing/consuming a channel. 

Instead of creating you final slice during the loop, you could do two loops: one for creating the and another to turn it into a slice: 

Is it expected, that even if some batches were sent in the meantime, a new batch will be send at 5 seconds? Shouldn't the timer be reset, when a batch is sent? Anyway, I would recommend you to put this in a struct, for instance like this: 

But as-is, the never finish, because the input channel is never closed. So we need to modify the computation functions to close the channel after the for loop.