This allows removing some of those empty constructor overrides. See this in the demonstration snippet below: 

since that value is ultimately used to determine the maximum index used to get a character out of the string. Use or Bearing in mind that you might likely need to alter the length of the column, instead of generating your own random string, you could consider using MySQL's or function. That might eliminate the need to repeat the loop of calling and running a query just to see if the return value isn't used by any records. One other approach to a really short URL would be to just have an auto-increment integer field starting at 1... up until there are 9,999 records, the id would have 1-4 digits... Unspecified parameter doesn't appear to be passed by the one place that the function is called. Unless you plan to utilize that, the default value could be made a constant: 

vs event listener For a small page like this, it is fine to assign a function to . However if there is a need to have multiple functions executed when the page is loaded, then use (similar to the event callbacks registered for the change events on the inputs). Also, the DOMContentLoaded event might be more appropriate than load. 

It must be asked whether the type of needs to be an integer. If any falsely value will suffice, then could be simplified to , otherwise, use strict equality: Beyond that, the only idea I have possibly removing the closure by some technique like currying or just defining a function... or if ES-2015 is an option, simplify it into an arrow function. Update In response to your answer, I shall reveal another option I considered, which some argue might be less readable, but yes, like you typed: “if we are going to one-line it, let's one-line it!”: 

P.S. I feel like this technique could very easily apply to your subsequent post for the 2nd part of this..., but perhaps for the sake of varying ideas, I shall refrain from mentioning this in that post... 

Yes. However, as Michał mentioned, you might want to disable the form - perhaps disabling both would be a good idea. 

Notice that Function.bind() is used to pass the context into the callback handler, removing the need to assign . Or instead of using , could be used with the spread operator: 

Feedback I like how the DOM elements are stored in constants at the beginning of the code. It seems that a lot of the feedback from previous answers has been incorporated, except a few things like resetting the game without using , and other es-6 features like classes. The CSS styles look succinct and appear to be sufficient. Suggestions/Comments 

Use instead of This likely wouldn't be an issue in a small application but in case there was other code (potentially multiple functions) that needed to be executed when the page is loaded, it might be simpler just to use instead of 

(or it could be a constant defined on a class if such a relevant class exists). Then the code block in the can be simplified using array_search() to see if a corresponding index is returned. If not (i.e. it returned ) then use 5 as the fallback value. 

Const and let instead of var Unless browser support is an issue, use const and let instead of var, to limit the scopes of variables and ensure that values that shouldn't get re-assigned are consistent.x 

This is basically a summary of points #1 and #2 above. Perhaps a better implementation would move the code to call the AJAX request (i.e. to '/Cart/AddTocart') with the id and quantity of the row that changed, then call to update the total. Something like the code below. Another suggestion is to update the request sent to the server to send the entire list of items with the respective quantities. That way, if a quantity is decreased or cleared, the cart can be accurately updated. It all depends on the back-end API - i.e. if it has endpoints to add/remove/update items with quantities, etc. I also changed the input type of the quantity inputs to "Number" - that way only numbers can be entered, and many browsers will add up/down controls to the side of the input for the user to click on. 

Actually, in the example code it appears that is called on , not each link. Variable Names Some of the names are a bit misleading. For example is used to check the class name of elements. Therefore a better name might be , , etc. Similarly, isn't very descriptive. Feedback Traversing DOM Let's look at the function: 

Cache DOM lookups When iterating over the elements with class name mySlide in the loop, there is a look-up for the dots container (i.e. ). Bearing in mind that the example only contains four slide elements, that could lead to excess DOM queries. It is good to store references like that and then utilize the reference: 

See updated plunker here. 1 Note - not supported by IE 8 or earlier - read more about using attachEvent in that case here 

Because the value is one less than the length of the string. If I was working with that code, I would ask you to rename it to something more appropriate, like: 

If there were more cases in the switch statement, then it might make sense to have that but because there are really only two cases, one could argue that it should be simplified to a simple statement: 

If you wanted to avoid the possible undefined variable you could check to make sure evaluates to true. Second Update Perhaps this is too meta but it isn't obvious to me why this post deserves a downvote. While I understand that there is supposed to be some level of anonymity on these sites, I would really appreciate feedback on what reason(s) exist that caused this to get a downvote and what could be changed to reverse that action. Help not only yourself and me get our points back but also our community by improving this content! 

dcorking has good points in his/her answer - especially about the redundant code (i.e. point #3). Below is my suggestion to improve the code, in addition to his/her advice. Cache DOM Lookups Like I mentioned in this other answer to one of your recent questions, it would be wise to store the DOM element references in variables when the DOM is ready, then use those whenever using the DOM elements instead of querying the DOM each time. While this code is quite small and only looks up DOM elements by ID 7 times, it is a good practice to get in the habit of - especially for working on pages where many DOM references will be needed by the Javascript code. For example, the code could be updated like below: 

It looks like the code makes good use of basic VueJS concepts and practices- using computed properties, binding values, conditional display with , etc. I also like the application of arrow functions, promise handling, etc. I see there is a key attribute bound to the list items (i.e. ). Correct me if I am wrong but that doesn't appear to be an attribute of . What is that used for? Edit: Oh yes, thanks for reminding me about the key attribute for list editing Then in the method, there are two callbacks. Is there a reason not to move the three lines in the second callback into the first? 

Feedback The code looks pretty good, and thus I only found a few things that I could change (listed below). I like how the bootstrap class can be applied once to affect all sub-elements. Suggestions CSS Move the in-line styles to the stylesheet to reduce redundancy - e.g. the number inputs have a specific width, which can be put into a CSS rule-set, like this example: 

The biggest change would be removing the keyword , and adding an arrow (i.e. ) between the (empty) list of arguments and the function block (since there are multiple statements). Then because an arrow function "does not have its own "1, now refers to the enclosing scope, so change to (in the first callback function, and then in the second event callback function). 

I don't think giving it a name would be useful, though if you wanted to expose the methods, then perhaps the revealing module pattern would be good to follow for that. 

And that close function could accept an optional callback function (for functions like )- if that is a function, it can be called: 

After thinking about this a little more, I feel like one could utilize Object.entries() with a recrusive assignment function and more es-6 features like Array Destructuring to avoid the operation: 

For #1, we can access the property. For #2, we can create an array - e.g. and if the attribute is in that array: 

See it demonstrated in the snippet below. As was mentioned in comments, there was no sample input supplied so I devised a sample. 

What I often do is create a static method in a Database class (or a helper function if it doesn't make sense to put it with the controller) to get an instance of a connection when needed. This is known as the Singleton Pattern. Consider the case where there is a Database wrapper class - e.g. your class: 

Empty case? The following block appears to have no expression when the condition is true. Is that left over from debugging? I see another block a few lines later with the opposite condition... 

Squaring numbers Initially I considered suggesting the use of for the squaring of numbers but that might be considered using a library. I then found the exponentiation operator (i.e. ). Bearing in mind that it isn't supported in IE, MS Edge, or Chrome/FF prior to versions 52, it can greatly simplify the squaring of numbers. Edit: Zeta pointed out that the exponentiation operation might not be optimized. A better approach would be to store the value of calculating the sum of the numbers in the range (calling the function once) and then squaring that resulting value. limit number For consistency, I would declare a constant for the limit - e.g. and use that when calling and . Sample The example below takes the good advice of Igor and renames some variables like , ,, etc. Also, note that it only calls (and the subsequent sum reduction) once. 

There appear to be no value attributes set on any elements. Binding the method to the event handler The method is called from an arrow function in the onChange event handler attribute: