Your friend is suggesting you have a class that does the common work, and then subclasses to handle specialized work. This is really core OOP. For example, your base class (say, ) might have an method like this: 

Classes are usually named using PascalCase (you have lowercase). Also, convention is to use the word "Activity" when extending an Activity, so your class should probably be . The prefix is generally reserved for setter methods - methods that update a variable value and often do some pre- or post-processing work around that update. I would probably call something like or . You could break into multiple smaller methods. You probably don't want that whole method body in the block - figure out what's going to potentially and move the rest out. This is a bit of a nitpick and isn't critical for a fairly small function like this, but it's a good habit to get into. is a bad variable name - it's not clear what kind of object is being referenced. Your code might be a little easier to read with less nesting. I'd probably move the functionality in the to its own method, and call that method in the . Why is the variable and not a member variable? It's OK to do this, but there doesn't seem to be clear reason - you're using member variables elsewhere. Again, not a critical issue, but Android convention is to prefix variables with , so would become . Why is public? Always be as restrictive as possible. will default to so you don't need to set it. If an error is thrown, do you really want to print the stack trace? This might be fine if that's what you want, but I suspect that's either the IDE's decision or the result of a copy/paste... What error might be thrown here? What could be a possible source? What do you really want to do if that happens? If you're not using any methods, you don't need to cast it - returns a , which has a method, so the cast doesn't do anything. 

First I wanted to solve this using recursion. But I reached the stack size pretty quickly. Therefore I opted for generators. But I'm not satisfied with my solution especially because of the generator: 

I wanted to practice functional programming (fp) without using any library but using vanilla JS only. So I took a problem from Advent of Code: $URL$ 

Is there a way to write with less parameters and still be consistent with fp? Any other improvement suggestions are welcomed as well! 

I wanted to practice functional programming (fp) without using any library but using vanilla JS only. So I took a problem from Advent of Code (the 2nd part of Day 2): $URL$ I'm doing the 2nd part of Day 2. You can only access the 2nd part once you solved the 1st part. To access the 2nd part type in this number or check out the solution here: Advent of Code Day 2 (1) in Functional programming (FP) 

Then when you create the subclass, you'd set somehow (either directly through a setter, or with Intent arguments, or most likely have that class be and define in the subclass). Then in each subclass, you'd call , as well as any other specific functionality, in the subclass's definition of . That's just an example, and could be handled differently. Generally speaking, if you see the same block of code in multiple places, you could probably optimize that away. Single Responsibility Principle is not relevant in any way here. Basic inheritance ($URL$ and DRY ($URL$ are much more appropriate to what you're describing. 

Instead of sending a new network request every 2 seconds, I'd send it 2 seconds after the last one was complete. Put a method in to initiate a new request in 2000ms. You also don't need to run your time like that - has methods like and that'll handle that for you. I'd probably use a networking library like Volley or OkHttp instead of doing it manually, but honestly what you have is probably fine (although you should probably do more to anticipate and handle failure) 

I wanted to practice functional programming (fp) without using any library but using vanilla JS only. So I took a problem from Project Euler: 

I wanted to practice functional programming (FP) without using any library but using vanilla JS only. So I took a problem from Advent of Code (the 2nd part of Day 6). You can only access the 2nd part if you type in the solution for the 1st part: or look at my solution for part 1. 

Running this code with in normal mode will create a . I had to "cheat" by running this code in : (node 6 supports Tail Cail Optimization (TCO) when the flag is turned on). I also tried to cache the but this didn't help either. I got the feeling that big size Input is the limit for FP. 

As you can see, it is not consistent with the idea of FP. First I wanted to write it using recursion but I hit the stack limit. Therefore I used generators (and loops). That was the only solution I could come up with that resembles FP. Any suggestions how to write in FP without any additional FP-Library (i.e. in pure JS only) is much appreciated. 

Your variable names could be more clear. is a poor choice, for example. is probably not a great name for a method either - maybe ? You have inconsistent code style. Some one-line blocks are in curlies while others are not. Why ? It's fine if you want to use wherever possible, but that doesn't appear to be the case with the rest of the code, and there's no explicit reason for it be , so what is the strategy here? I'd save the you pass to as an instance member instead of creating a new one each time. Why do you use an explicit in , but nowhere else? I'd choose one or the other. If you've got those tests to ensure everything is happening on the main thread, then why ? Wouldn't to the same thing? 

There's really not a lot going on in what you've posted, so there's not much to pick apart. Really the only functional change I'd mention is that there's a class available that you can use that provides play, pause, and seek functionality (including a standard UI that Android users are familiar with) that you might want to check out. That said, it's 100% find to use your own UI if that's a design decision and not just the result of being unaware. Also, you don't update the play/pause UI the first time the `MediaPlayer is started. Other than that, it's mostly code style and convention issues that I see. 

I wanted to practice functional programming (FP) without using any library but using vanilla JS only. So I took a problem from Advent of Code. $URL$ 

Is there a better way to write it in FP with pure JavaScript, i.e. no additional FP library? Any improvement suggestions are welcomed. 

Is there a better way to write it in FP with pure JavaScript, i.e. no additional FP library? Any improvement suggestions are welcomed. 

I got 2 while loops that are nearly identical. Is there a way to refactor them? I tried to refactor them into one function. But that function takes and returns 4 parameters: 

I'm doing the 2nd part of Day 5. You can only access the 2nd part once you solved the 1st part. To access the 2nd part type in this number or check out the solution here: Advent of Code 2017 Day 5 (part 1) in Functional Programming (FP) First my procedural solution: 

Is there a better way to write it in FP with pure JavaScript, i.e. no additional FP library? I have problem with the lookuptable . Everytime I "add" a new element to the scoreboard, I had to pass the new scoreboard along. There is probably no other way around this in FP since FP functions have to be self-contained, i.e. every new value that needs to be calculated have to passed along. But I still wonder whether there is a nice FP solution to that. Any other improvement suggestions are welcomed. 

Layouts. Your biggest savings (in terms of line count) is going to be had by inflating XML layouts. By hardcoding dimensions in Java, all your sizes are going to un-scaled (so you're saying margin 30px somewhere - that's going to look wildly different on different screens). If you use XML layouts (per #1), the system will scale those values for you (assuming you use ). There are also ways to convert (e.g., ). Modularize. The upload and file creation logic, for example, would probably be better off in other classes with an entry point in your (e.g, ) Nest less. That for example might be more readable as a member, or at least pipe its functionality through smaller, more modular methods (instead of writing all the business in the overriden method of the anonymous instance, write a logical method on the (or a support class/instance) for that does the work, and the pipes to that method). Inconsistent variable conventions. Sometimes you prefix with , sometimes you don't - pick one or the other, but don't mix. Also variables like and are obvious candidates for replacement. 

Is there a better way to write it in FP with pure JavaScript, i.e. no additional FP library? Any improvement suggestions are welcomed. 

The FP solution is longer and slower. I couldn't solve it without recursion. After a while you hit the stack size. Thanks to Thanks to @Blindman67 he suggested a workaround with . Do you know an FP approach that is faster and shorter than the procedural one? 

I wanted to practice functional programming (fp) without using any library but using vanilla JS only. So I took the 4th problem from project euler: 

I wanted to practice functional programming (fp) without using any library but using vanilla JS only. So I took a problem from Advent of Code (the 2nd part of Day 3): $URL$ I'm doing the 2nd part of Day 3. You can only access the 2nd part once you solved the 1st part. To access the 2nd part type in this number or check out the solution here: Advent of Code 2017 Day 3 (part 1) in Functional Programming (FP) 

Your variable convention is inscrutable. Why is private? Why are the next three package-private? Why does look like a constant but is neither static nor final? Why are some member level and the rest static level? Variables names like , , are not clear and should be reconsidered. Your static variables are A) created whenever the class is first referenced, and B) may outlive the Activity. I don't see any reason in the existing code for these to be static. You should probably coordinate your thread with your activity lifecycle. For example, check if the Activity is still running in your download while loop, and exit out if not. In your , see if you still have a UI to modify. You might want to cancel the during or . Your code style is inconsistent. The whitespace convention changes throughout and is hard to follow. You have some single-line blocks without braces, and some with braces. You have some blocks with a brace on each line and some with 2 braces and a statement on one line. You don't test for null in when examining the String returned from - it's very likely that http connection could fail (server down, interrupted connection, etc), and you'll end up throwing an NPE if that happens, rather than managing it. is probably better as is not clear. I also don't see it referenced anywhere. Add javadocs.