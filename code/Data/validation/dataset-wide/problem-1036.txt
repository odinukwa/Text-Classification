While it is immediate to discover tha is a candidate key since it determines all the other attributes, you can see that this is true also for and by calculating the closure of those attributes: 

The indexes on Warehouse will be on the primary and foreign keys, and on (idCustomer, warehouseLevel). where the warehouseLevel could be a string like 1, 1.2, 2.1.3, etc. With a scheme like this you could find easily: 1) all the warehouses of a customer, 2) the parent warehouse of a certain warehouse, 3) all the child warehouses of a certain warehouse, 4) all the descendent warehouses of a certain warehouse (with a recursive query). Moreover, if you have the need of finding also all the warehouses of a certain degree of a customer, you should add to Warehouse an attribute degree, integer, with an index on (idCustomer, degree). 

There are three keys, , and , and the relation is in BCNF. However, if each person can have more than one phone, than the situation is completely different. You have this set of functional dependencies: 

A reasonable solution is the second one, that is to remove the MakeId FK from Vehicles, for two reasons: 

First of all, note that the original relation is already in Third Normal Form, since each attribute is prime (each attribute is a key, actually), so that the definition of 3NF is respected. Then, note that the algorithm is incomplete. The steps are: 

The usual notation is to write separately the grouping attributes from the aggregation functions, writing the attributes on the left of the γ symbol and the aggregation functions on the right, so your query should be something like this: employeeId, date γ MAX(salePrice)→ largetSale(Sales) This means: 

Both are in BCNF and the final decomposition is constituted by R1, R3, R4. Finally, it is worth to note that the following dependencies: 

If you give the command while there are concurrent insertions, this could be possible, unless you set an high . After the command has been issued, every new insertion will provide the correct default value. If null values remain in the column after the initial , you can simply change them with an update, e.g. 

Note that there are no other candidate keys since , and appear only on the right side of functional dependencies, so that they cannot “contribute” to any key. appears both on a left part and on a right part of functional dependencies, but it is determined by , and , and does not determine any of these attributes, so it cannot be part of a key. Finally, you cannot remove any attribute from , and without losing the key property. 

A possibility is to split the folder table in two, treating the root folders as they were special case of folders (inheritance): 

this is because we decompose in two relations, and . The second relation is still not in BCNF, since in E → C the attribute E is not a superkey. So we can apply again this method to decompose R2 in: 

To find if the functional dependency AB→G is implied by F you should find the closure of the attributes AB under F, i.e. AB+. These are the steps: 

R1 is not in BCNF, since the key is , so for instance the dependency violates the normal form. Applying the algorithm, R1 is decomposed in: 

and in fact is a key for the relation. Then, supposing that there are no null values, if you want be unique, there exist another dependency: 

No other set of attributes is a candidate key, since the only other attribute on the left side is , but is determined by , so it can be eliminated from that dependency. Actually a canonical cover of the original set of dependencies is: 

so the relation respects this definition, since each attribute appear in a key. While the definition of Third Normal Form is (same source as above): 

which is more efficient than solution B, and more simple to program than solution C. Note that this solution is normalized, so that you do not have any redundancy, neither you have insertion/deletion anomalies. Addition For a relation to be formally in Boyce Codd Normal Form (which is stricter than the Third Normal Form), for each dependency the determinant must be a (super)key. But first note that the normalization theory usually do not treat null values. See for instance the book of Elmasri, Navathe, “Fundamental of Database Systems". 6th Edition, 2010: 

Assuming that each month is universally identified by number (1 is January, 2 is February, etc.), it is useless to have a table that store the first twelve numbers, so you could have a single table, with the following attributes: 

The trick to solve this exercise it to repeat as much as possible the elements of the table. Since is the key, you cannot repeat , but you can, for instance, repeat two times and and three times . Here is a very simple and short example (note that the functional dependencies are respected): 

The third step remove relations that are contained in another: in this case the relation R4 is contained inside R2, so R4 is removed. The last step checks if any relation contains one of the keys of the original relation, and if this is not true add a new relation with one of the keys: since the original relation has (only) the key (date, emp_no), and the relation R1 contains it, no new relation must be added. So the 3NF is the following: 

Join Dependencies can be considered a generalization of Multivalued Dependencies, following the fact that a Multivalued Dependency X →→ Y in a relation R can be seen as another way of writing a binary Join Dependency ⨝[XY, X(U − Y)], where U is the set of all the attributes of the relation R. For instance, in a relation describing employees together with their salary history as well as other attributes , we can say that there is a MultivaluedDependency or, equivalenty that there is a Join Dependency (note that this makes clear that in R holds also the “dual” Multivalued Dependency ). You are asking which relations there are between Functional Dependencies and Join Dependencies. The question is reasonable, since there is a relation between Functional Dependencies and Multivalued Dependencies. In Chapter 8 of Abiteboul, S. “Foundations of Databases.” Reading, Mass: Addison-Wesley, 1995. you can find an answer which is also proved: 

When we decompose for BCNF, we should be prepared to lose some dependency (and, for this reason, in practice the 3NF is used). The analysis algorithm of BCNF requires an exponential task to be performed, since at each step one should check if a decomposed relation is still not in BCNF, and to know this one should know the projection of the dependencies over it (or at least its cover). 

Has every functional dependency a left hand side which is a superkey? If this is not true, are the attributes on the right hand side prime attributes? (i.e. belonging to any key?). 

In your question you ask about the “best performance”, but with respect to what kind of queries? It is not clear which is the typical query, or the typical queries, so my answer will be generic. I think that in this case the best schema is the following: 

part, since it does not change the result of the query, but only slows down its execution. Another possibility is to rewrite the query by using a join instead of a IN: 

(a part from minor variations on the notation used, like “:” instead of “.”). The idea is that you obtain the result of the query (a well formed formula of a first order logic), by finding the elements of the relations that, substituted to the free variables of the formula, make the formula true. In this case, we have two variables, and , that range on and respectively, a condition that must be true (), and from every pair of tuples of the relations that satisfy this condition, you add to the resulting set a tuple formed by the of and the of (in other words you perform a simple join). Note that the structure of the expression can be easily mapped to the SQL query (and actually this language is the origin of the SQL language, together with other additions). This can be a suggestion on how to write other queries similar to this one. 

The tool mentioned does not require trasforming your attributes into single letter identifier, you can use your identifiers (you just need to remove the ‘_’ character) like , , etc. (and it transforms them automatically to uppercase). Those kind of tools requires that you give a single relation, containing all the attributes, like R(traincode, name, int, journeyid, price) and then all the functional dependencies holding among them, like for instance , etc. Nobody but you can give those functional dependencies, since they describe the semantics of your data. So you need to understand what a functional dependency is, and describe those holding among the attributes of your problem. Finally, this kind of systems will give you a decomposition of the single relation in several, normalized, relations. 

In your case I think you could consider the use of a Bit String Type data type. For instance, something like: 

The information about the Maker of a certain Model is already contained in the Model record, so storing it inside Vehicle is redundant. Having both attributes in Vehicle is prone to errors, since one could have inconsistent information inside a Vehicle. 

First, you assumption about the 3NF is correct. Then, in the analysis algorithm to find the BNCF, when you start to remove a dependency X → Y since it violates the BCNF, you should put in the first relation not only , but , while in the second relation you should have . So, in the first step, the two resulting relations are: 

If your attribute is unique, you can leave it in your original table even in case it can have null values. In fact the PostgreSQL manual says: 

See for instance: Fundamentals of database systems, by R. Elmasri, S. Navathe, Addison Wesley, ISBN: 978-0-13-608620-8, Chapter 11, Object and Object Relational Databases.