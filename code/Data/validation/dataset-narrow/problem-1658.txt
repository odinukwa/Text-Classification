Unlike many Atmel chips (used in Arduinos) the Pi has no accessible internal flash memory. You will need to store configuration data on the SD card. 

The Pi is capable of doing what you want. $URL$ shows signals on GPIOs 2 through 26 being captured/displayed. The only thing to be careful about is the minimum pulse width. By default my pigpio library samples at 5 µs so it would be best to ensure edges are at least say 10 µs. However you could boost the sampling rate to 2 µs so ensuring that 5 µs edges will be detected. There are two C examples of simple (multiple GPIO) frequency counters at $URL$ 

You can use a cron job. Cron is used when you want to schedule jobs to run at specific times, e.g. every hour, every Sunday at 3 a.m. It stores the details in a table for each user called a crontab which is read during boot. One of the "times" you can specify is at a reboot. To list your crontab use the command 

The above is three distinct bus transactions. As well as the overhead of three separate transactions you need to take into account how the I2C device defines its protocol. Depending on the device those two examples might have the same or different results. There is no one rule, you have to check each device datasheet. 

spi-bcm2853 replaces spi-bcm2708. All I can think of is you have gone from a very old to a recent kernel where device tree is mandated. Add the line to and reboot. 

The current Rapsberry Pi Linux driver does not use DMA. The SPI peripheral has input and output FIFOS. The bytes to be transferred are written to the output FIFO and a transfer is triggered. BCM2835 ARM Peripherals page 148. You don't really have any visibility of when each byte is transferred, certainly you won't be able to synchronise the writing of gpios against individual bytes. To do that you will have to bit bang SPI. I include the source code my pigpio library uses to write to the main SPI peripheral. It's more complicated than the official driver as it also includes support for 3-wire operation. 

The Pi3 uses I2C bus 0 for internal purposes. Setting the ID_SD and ID_SC GPIO as I2C will confuse I2C bus 0. 

If you are powering the Pi via the microUSB socket the maximum current you can get into the Pi will be 2 amps (2 amp polyfuse). So you could draw perhaps 1 amp from the expansion header 5V and ground pins. Will your Pi power supply be powerful enough and will 5V and 1 amp be enough for your speakers? There is one way to find out. 

I don't remember where the location of the PWM and PCM clocks is documented. The peripherals document does give the locations of GPCLK0/1/2. All the clocks are accessed from the clock peripheral. The normally used ones are at these offsets from the base register (0x20101000). 

As said V to Pi 5V, G to a Pi ground. A0 will be an analogue voltage output. The Pi has no analogue inputs so you'll need to buy an ADC to make use of the raw reading. I'm guessing that DO will be low until a pre-set pollution threshold has been exceeded. It will then switch high. You'd set the threshold with the POT on the unit. You'd need to connect that line to the Pi via a voltage divider (pair of resistors) to cut the voltage level from 5 to a Pi safe 3.3V. 

Open the file /sys/class/thermal/thermal_zone0/temp. Read the single line as an integer. Close the file. Divide the read value by 1000 to get degrees centigrade. E.g. a read value of 37932 is 37.932 degrees centigrade. 

The simplest way without modules would be using a self contained driver chip like the L293 or L293D from Texas Instruments. $URL$ The L293 will need additional back EMF protection in the way of fly-back diodes which are included in the L293D. As long as your motors are suitable (say 5-30V, 500mA each) then you don't need any other components. Each chip will drive two motors independently forward or reverse and you can use PWM to control the speed. The Pi can provide suitable PWM without additional components. As to how, there must be hundreds of L293/L293D based tutorials on the www. 

This question if really off-topic as it is nothing specific to the Raspberry Pi. Put a while forever loop after the call to register_callbacks. The loop needs to do nothing more than time.sleep(1). At the moment the program terminates after the register_callbacks call. 

Assuming this is a Windows 10 IoT application. At the moment it does not seem possible to use some gpios as gpios with Windows 10 IoT. For instance I2C gpios (gpios 2 and 3) and the main SPI gpios (gpios 7, 8, 9, 10, and 11) may only be used for I2C and SPI respectively. I have not seen any official announcement, perhaps raise a question on $URL$ 

You can use software timed PWM on all accessible GPIO. That will have some jitter but may be good enough for your usage. You can also use hardware timed PWM on all accessible GPIO. Have a look at (my) pigpio, or servoblaster, or the RPIO.GPIO module (not RPi.GPIO which is software timed PWM only). 

You need an ADC to use the module to its full potential. All the digital output provides is a high or low signal. The signal will be high if the gas concentration is higher than that selected by the on-board pot position, low otherwise. I.e. you use the pot to set a gas concentration threshold for the digital output line to go high. 

You will have to edit the source to remove the line and then rebuild. The line is in the file source/c_pwm/pwm.c in the source directory. Remove line 458 of pwm.c 

One MMU maps ARM virtual addresses (used by Linux userland and the kernel) into ARM physical addresses. The other MMU maps ARM physical addresses into bus addresses (to access the peripherals such as the gpio, DMA, SPI, UARTs etc. etc.). I doubt that either MMU adds any latency. $URL$ 

As far as I am aware my pigpio library is the only gpiozero back-end to have a proper debounce implementation. pigpio provides a glitch filter which ignores any level transitions shorter than a specified number of microseconds. E.g. from Python set_glitch_filter(). 

This question comes up regularly. The answer is no. You can't use the screen and Windows 7/8/10 will not run on the Pi. There is something called Windows IoT which will run on the Pi3 (and possibly on the Pi2, I don't remember), but that is not Windows as you mean. 

It is inadvisable to use software timed PWM to drive servos. The pulse width determines the desired position of the servo. With software PWM the pulse width is erratic so the servo is continually trying to adjust its position. This results in heat and the servo quickly wearing out. Use hardware timed pulses using one of the following methods. 

You do not need to use sudo for programs started in /etc/rc.local, they are run as root. I suggest you redirect stdout to a file, e.g. 

EDITED TO ADD This raspberry Pi forum post gives an indication of the performance you may get with C rather than Python. It also gives the code I used. It's static which is the real killer. The software has to process and discard all the false edges while waiting for a real message. With Python this might take 50%+ of CPU, with the C implementation it seemed to take 10%. 

Please be aware that telnet is not considered to be secure. You need to run a telnet server on the Raspberry Pi. The following command will install and run a telnet server. 

pulses are sent at 50Hz. The length of each pulse in microseconds (generally in the range 1000-2000) determine the servo horns target angle. pulses are sent at 50Hz. The length of each pulse in microseconds (generally in the range 1000-2000) determine the servo horns rotational speed. 

The UART sends the bits you specify. Generally a UART doesn't have provision to mangle the bits for testing purposes. I.e. if they are set to send 8-bit even parity they will transmit the 8 bits in the passed byte and set the appropriate parity bit. If you want to test error handling at the remote end you will have to bit bang the protocol. 

Using the apt-get tool ensures that all the needed dependency packages will also be installed. Example 

will install the standard Python I2C/SMBus library (Python 2 and 3). To check to see if a package is avaialble in the repositories try search-term where you need to try likely search terms. 

The Pi itself will be safe up to just less than 6V. I would not approach that limit too closely. Mine are often powered from circa 5.8V. You would have to check any attached persipherals, e.g. USB, HDMI screen, on a case by case basis. As you say USB devices expect 4.75V to 5.25V. My USB wireless dongles work fine. I'd be shocked if problems arose from a 5.3V supply. 

Presumably you have different fonts loaded on your Debian and Raspbian machines. Try the fc-list command on your Debian and Raspbian machines and check for differences. See $URL$ 

A Raspberry Pi is probably the wrong tool for this job. Even when powered down the Raspberry Pi will be drawing roughly 100 mA from the 5V supply. Your batteries won't last long. So your first problem would be disconnecting the power from the Pi and starting it up at scheduled intervals. This may be tricky to do while at the same time ensuring the SD card does not corrupt. It may be simpler to find an Arduino based solution. 

What an odd board. I'd have just gone for a MCP3204 and stuck it in a breadboard - but I'm strictly a hobbyist. I'd set the DIP switches for a PIC so 1 on, 4 on, 6 on, others off. That will connect MISO to P4, MOSI to P5, and SCLK to P3. So the Pi connections to make would be 

The obvious way is to use the Pi's Ethernet port and network them with a switch or router. Using the GPIO will be far more complicated and much slower. This question has nothing to do with the Pi in the way you have asked. It is a general network question. 

You really shouldn't be controlling servos with software timed pulses. However that is not the problem with the code. Have a look through $URL$ I think the problem is the stop/start of PWM which is not needed and eventually crashes the module. 

I don't know what is wrong with your set-up but I can confirm that it can work. I've just tried between a Pi and a Pro Mini. 

I'm not sure that you need a level converter. As long as the Arduino does not have pull-up resistors to 5V on the I2C lines it should be safe. The Pi has hard-wired 1k8 pull-up resistors to 3V3 on GPIOs 2 and 3. If you do want to use other GPIOs you will have to bit bang the I2C protocol. There are probably dozens of solutions for the Raspberry Pi. My pigpio library has bit bang methods for C and Python. 

No. As far as I am aware RPi.GPIO only supports modes INPUT and OUTPUT. Modes ALT0, ALT1, ALT2, ALT3, ALT4, and ALT5 are not supported. 

On recent Pis (those with the 40 pin expansion header and the compute module) GPIO 12/13/18/19 may be used to provide hardware PWM signals. The PWM clock source does not need to be the 19.2MHz crystal, pigpio uses the 500MHz PLLD. For a simple command line method of setting a hardware PWM frequency see $URL$ 

2091663152 represented in hexadecimal is 7C AC 3F 30. If those bytes are shown in decimal they are 124 172 63 48. It is too much of a coincidence to believe those happen by chance to be the first four numbers in sector 0. I guess they are the UID as Michael suggested. So read the first four numbers from sector 0, call them n1, n2, n3, n4. The UID is then (n4<<24 | n3<<16 | n2<<8 | n1). 

Water meter pulse outputs are typically open drain. This means they are pulled to ground to signal a pulse and float high to an external voltage. As a quick check change the following two lines. 

The code looks fine. The only other thing to go wrong is connecting the LED the wrong way around. Could you confirm that the LED cathode (normally shorter lead and flat spot) is connected to ground. $URL$ 

Note that the green activity LED probably will not act as you expect. The system will still be updating its value. 

BogoMips is not a measure of relative speed between processors. Google. Ignore BogoMips. The Pi2 is likely to be 4-6 times as fast as the early model Pis. If it's not fast enough you'll have to overclock, but it is not as over-clockable as the early model Pis. 

To eliminate 1 all you need to do is use the command from the command line after saving the file (to ensure it is written to the SD card) and cat the file. 

The link gives no indication of the pins actively used by the HAT. You will need to contact the vendor or otherwise find out if it uses one or more of the SPI peripherals. In practice I think it unlikely to use SPI so you should be okay. Even if it uses both SPI you could bit bang SPI on the spare GPIO. Your biggest problem may be find a way to physically connect your ADC to the pins you need (given the HAT may not expose them). This link (provided by @steve-robillard) shows that you will be fine. You can use the main SPI device and plug into the female headers on the HAT. 

I'm assuming you mean GPIO 2 and 3 (pins 3 and 5). They will be ordinary GPIO unless you set them as the I2C bus. So as long as you don't have an I2C entry in you need do nothing. 

Don't expect much from this answer, you are veering into a more esoteric region of pigpio. I suggest you look through the wave examples at pigpio examples. In particular Wave PWM 2 may be helpful. I think you can probably achieve what you want but it will need some experimentation on your part. If you haven't got a 'scope also consider slowing the waveforms down and checking the logic with piscope. 

Remove the line from /boot/config.txt. That switches device tree off. The SPI devices should then be available in and a SPI module should be visible in . 

&& is logical and in C etc. Python uses and. There is no point in changing the LED level twice before the while loop. The while loop will not see those transitions. You can read the level of a GPIO set as an output. I added a time.sleep(0.1) in the while loop so other programs get a chance to run. 

It depends upon the type of motor you have. You can't control a DC motor (what we generally think of as a motor) from the Pi without additional hardware. Neither can you control a stepper motor without additional hardware. However your motor may be a servo motor as they are quite often used in RC models. A servo motor you can control from the Pi without additional hardware. 

and assign a different value for each type of message you wish to send. The header () and trailer () bytes will let you re-sync if the Arduino and Pi get out of sync. The may be used to ensure message integrity. The will let you send messages of varying length. 

Are these jpegs? Quite often the date/time (nearest second) is encoded as part of the jpeg header. Right click on an image and check its detailed properties. Alternatively for jpegs download the jhead package to view and manipulate jpeg headers. sudo apt-get install jhead 

I have just hooked up a couple of the radios to an original Pi B and a Pi 3. The units are connected via the main SPI CE0 and CE is connected to GPIO4. The following code works. 

The datasheet for the device you are addressing will indicate if a particular SMBus command has any meaning for that device. Some do, some don't. The following information will be transmitted on the I2C bus for an SMBus write word data command. 

Q1. The Pi B has a 1.1 amp microUSB polyfuse. The Pi B+ and Pi2 have 2.2 amp microUSB polyfuse. Q2. You can Google as well as me. You could always use several in parallel if you can't find a suitable single unit. 

If the package is available in Raspbian you should use that repository in preference to the pip repository. If you must use pip then use the pip3 command to install for Python 3. 

I'm not quite sure what you expect. I'm not familiar with the A+. Which gpios are you actually using? Is that photo a mirror image? Gpios 0-8 have internal pull-ups to 3V3 of approximately 50k enabled at boot. The other gpios on the expansion header have internal pull-downs to ground of approximately 50k enabled at boot. See $URL$ page 102. Pins 3 and 5 have hard-wired 1k8 pull-ups to 3V3. Anything under 1V at an input gpio may be seen as low (0). Anything over 2V at an input gpio may be seen as high (1). See $URL$