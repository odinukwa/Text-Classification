Maybe it is the dress thing, but I can make out the four solid colored wires; orange, green, blue and brown. As you work with cables from different manufacturers, you will find that not all things are the same. Some will have colors that look a bit more "faded" or even somewhat "translucent." From there, you need to identify the white/color wires. While most manufacturers do indeed "stripe" the wire in some way, it is not at all uncommon for them to use just a white wire and it is identified by the solid colored wire to which it is twisted. In this particular case, it appeaers there is a white/orange mark as well, so I would presume the the other white wires also have markings. However, the marks could have significant spacing, so you would probably want to strip back more of the outer jacket to expose more of the internal wires. As to whether this is fading or something else, but significant fading typically doesn't occur unless exposed to sunlight, chemicals or some other factor. It is more likely this is just how it was manufactured, but no one could answer that without knowing the manufacturer, product number and possibly manufacturer date or lot number. 

Yes, I believe they both do; although I have never used that particular Cisco product, that is a relatively basic feature for this level of device. Note: the Cisco RV325 is End of Sale as I type this. You should instead be looking at the RV345 which is the replacement for the RV325. 

First, you would want an access point that meets or exceeds the capabilities of your client device. By this, I mean that if your clients are 802.11n 2x2 capable devices, then you want at least an 802.11n 2x2 AP. 802.11ac will give you some advantages even with all 802.11n clients and more spatial streams never hurts as the extra streams are in other ways utilized. Second, you would want an access point where you would have configuration options to disable/enable multicast-to-unicast conversion, select specific supported/required data rates for the ESS, and preferrably to be able to configure the DTIM and beacon intervals. 

Likely both devices have that IP address (first two reasons above) which will cause problems. How to deal with it depends on the situation. Easiest is if the DHCP service was restarted and both devices learned the IP from DHCP. This will either resolve itself given time, or you can force the desktop to request an IP address (disconnect and reconnect it to the network or use a method present in the OS such as "ipconfig /renew" from the Windows command prompt). If the desktop is configured with a static IP address, you would need to determine if it should be configured statically or not. If yes, then the IP address should be removed from the DHCP pool of addresses so the DHCP server does not assign it to another device. If no, then the desktop should be configured to use DHCP to learn it's IP address. Finally, if you have an old ARP entry, either wait a couple minutes (most dynamic ARP entries have fairly short aging periods) or a static ARP entry would need to be removed. 

To fully understand why duplex mismatches occur, you need to understand how the technology evolved. Originally, all Ethernet was half-duplex. When full-duplex entered the picture, someone wisely decided that devices (especially half-duplex and full-duplex devices) should be able to agree between themselves on how they would communicate and auto-negotiation entered as well. However, none of those older half-duplex devices were designed to auto-negotiate, so when the standard was written, it is to be assumed by the auto-negotiating device that if the other side did not participate in negotiation, it was to run in half-duplex mode because the device on the other side must be capable of only half-duplex. As others have pointed out, auto-negotiation didn't always work well early on, so many devices were configured with static speed and duplex settings (often 100/full), and when a negotiating device is connected to such a device, a duplex mismatch occurs. As to the problem, a duplex mismatch can be much worse than running in half-duplex mode. This is because one side (full-duplex) thinks it can transmit at any time even if it is current receiving. The half-duplex side will see this as a collision and back off, while the full-duplex side will keep transmitting. If the full-duplex side tends to transmit a lot of data, this can "starve" the half-duplex side as it is waiting for the medium to clear before transmitting, causing frames to be queued and eventually dropped. All in all, a bad situation to be in and one you should fix. When it comes to detecting mismatches, you can look for errors. On the full-duplex side, you will generally see many runts and often CRC errors (vendors may use different terms at times). On the half-duplex side, you will often see collisions and buffer failures. Any decent management system should be able to provide you a list of interfaces that are generating a higher than expected number of errors. 

Use a quality mechanical splice solution maintaining the characteristics of the cable as much as possible (i.e. don't untwist or remove more jacket than needed). This may include the splice box you found or may simply be the use of IDC splice connectors (although these are more of a voice solution). Run a 20-30' cable to the break. Terminate one side to a surface mount jack and the other to a male end. This still increases the terminations by two but will eliminate the coupler. 

There may be other options, but these are the ones I would expect a good chance of seeing from a switch in a business environment. 

Remember that your ARP table and your MAC address table (CAM) are two separate tables that are not tied together in any sense (at least on any platform I recall). The ARP table does not have any awareness of the port state, so removing a device from the network does not remove it from the ARP table. As far as the MAC address table, when a port on the local switch goes down, it will flush the MAC address entries for that port. However, upstream switches will not have this awareness and will continue to have this entry in their MAC address tables until it ages out. So, to answer your specific questions: 

I didn't want to answer until I validated my thoughts with a RF expert I know. While what you describe is possible based on the physics, you are most likely going to face issues in the real world application of such a repeater. You are going to lose a fair amount of signal, probably in the 2-6dB range (or worse with low quality components). Further, there is nothing to filter out any other interference or RF signal with something like this, so you will also be repeating that as well. This will potentially introduce additional interference into Building A and impact the wireless experience there. Depending on the actual environment, the higher gain omni may help ("flatter" coverage may avoid some interference above/below) or hurt (repeat more interference on the same plane with the antenna). Another issue you may face is that depending on the components themselves, some amount of the signal may get "reflected" back out toward the original source. Any directional filter you used to prevent this would also prevent bidirectional communication. Without testing, I think the real problem may be that you will find this works better in one direction than the other. Ultimately, if you want to go down this road, you should test heavily to make sure this works as intended. However, as wireless environments are always in flux, I wouldn't depend on this link too heavily. I didn't even touch on some other problems this may introduce, such as the hidden node problem. 

Whether Cisco, HP or another provider, with any form of link aggregation, multiple physical ports are treated as a single logical port, after all that is the whole point of link aggregation. Just be careful of terminology used by OSes such as bonding or teaming since they may or may not be doing link aggregation depending on the configuration. As to running STP, as Ricky and Olipro have said, by all means you should run it. Which flavor depends on your need, however generally keep to a "standards" based protocol. With only two switches (and probably not that many VLANs), I would think you would be fine with RST. On any larger networks, I would recommend MST, but that may be a bit of overkill in this situation and without understanding it properly you may end up creating problems. While you may not be concerned about more than the two switches, who knows what the future will hold. Also, it helps prevent a number of problems that can be created by users. For instance, I have run across several instances where users on a network bring in their own dumb switch to connect additional devices in their office/cubicle and decide that if one connection to the wall is good, then two must be better. 

Wireless Control System (WCS) had it's functionality extended to start managing switches as well and became Network Control System (NCS). The community tended to like this solution better then Ciscoworks/LMS, and so Cisco rolled it all into the one package and this is now Cisco Prime Infrastructure. There is no longer a WCS product and there will not be anytime in the near future. Since you have ruled out the Cisco provided product, you have a couple of options. Find a non-Cisco solution that will work with Cisco controllers. I have heard of several organizations that have used Aruba's Airwave product with their Cisco controllers, but I can't speak personally to what features/capabilities you may be lacking if you use it. The second option is that you can "roll your own" solution. Most of the Cisco controller features can be managed via SNMP. You can create your own management system based off of scripts/code that uses SNMP and SSH/telnet to both configure and pull information from the controllers you manage. 

If they are designed correctly according to commonly accepted architectural design principles, even if the SDN protocol uses multiple links it will maintain the invariants for the Data Link layer. To do otherwise risks breaking upper layer protocols that expect those characteristecs in their own design and operation. 

We can see based on the counters that it is the echo-reply from the neighbor router that is being blocked when coming into the interface. This is what we should expect using this ACL inbound. Note that the permit statement now also has matches. These are the routing updates and other traffic from the neighboring router, but note above that the outbound ACL didn't get any permit matches even the local router is also participating in routing. Observant readers may point out that my ACL doesn't match Ron's. It is actually based on the original question posted by the OP. But let's run a test similar to Ron's to rule that out as well. I also went ahead and explicitly allowed my second IP just to have the match counter if it applied. 

Of not including L2 headers? Absolutely. You would have to specify a specific adapter to get a specific answer, but I doubt you could even write drivers that would work with most 802.3 or 802.11 adapters that did not include the L2 headers. My guess is that most adapters would reject/drop the frame as malformed either before sending or upon receiving it. Of sending just an 802.3 or 802.11 frame that doesn't include IP or TCP/UDP headers? No. This happens all the time as part of normal network operations and has for decades (at least for 802.3; 802.11 hasn't been around as long but at least a decade). 

Neither of the routers you are referencing will ever be able to run at line rate. While the 2621XM is a better "class" of device, it is much older, so the performance is actually similar. While dated, this document contains details for both routers you mention. The "overrun" and "ignored" errors in your interface output indicate you are trying to pass more data through the device than it can handle. 

For this, there are many specific reasons, but they can be summed up as segregation/isolation for security and/or performance reasons. A few examples: