This is just an extension to @palacsint's answer. You shouldn't pass strings to , it uses , which is inefficient and insecure. You should pass a function. Problem is, in the loop changes, so you'll have to use a closure. Don't do this: 

For my application, I was using , when I noticed it was returning the wrong value. I was using multidimensional arrays, therefore I needed a method. I Googled around and found a few, but they all only took 2 parameters. The official can take an infinite number of params. I wanted mine to, so I wrote my own function. 

So, what do you think of my function queue? Any improvements, or anything I'm doing wrong? P.S. I was also trying to make this small, any suggestions on making it smaller? 

I was wondering what you thought of my attempt. It seems to work ok for my application, and in the few tests I tried with it. DEMO: $URL$ 

is the "Date" header, is the data length (4 bytes) and the 4 following bytes represent the date (timestamp). I have code to read those 4 bytes and return it to me as a : 

Like I said, this code works, but I just feel there's a better way to do this than to convert the bytearray into a string and then parse that string back as a base-16 int. 

I don't actually know much about how base32 (or base64) works, but I noticed that there was no official base32 implementation in PHP, so I figured I'd make one. I Googled around a bit to figure out how it works, and found this page. Using the examples at the bottom, I hacked up this base32 class. GitHub project: $URL$ 

However, it's not clear that you need to be creating the in the first place. You can just use Linq to generate your from scratch: 

If you've setup a proper navigation property you could write your query a bit more cleanly, although I doubt this would run any faster, since this will still translate to an in SQL: 

This is exactly how I would write it if I had to use C# (with the exception of the in-line if / else), but after I wrote it F#, it seems clumsy and a little messy. I suspect there is a much more elegant, idiomatic way of writing this in F#. Perhaps using a match expression? 

Which might save you a little bit of time, if you're dealing with millions of elements, or calling this function millions of times. But for brevity, I'd recommend this: 

You can use or to exclude the empty string in the results. If you write your own function using 's, like this: 

Any other exceptions it throws indicate a invalid parameter or bad program state. You probably don't want to just ignore these errors and move on as though nothing has happened. I recommend you just do this: 

My PowerShell scripting skills are pretty poor, but I've managed to hobble together got this script: 

The one thing that really stands out to me: you don't need to convert the boolean result of to a human-readable string, then test the string. Just test the result directly, then convert it to a human-readable string. 

Well there's not much code to review here, but for what's here, I'd say it looks okay. I would only make one suggestion. If all you're going to do in your controller action is return single string wrapped up in a JSON object, why not dispose of the JSON and just return the HTML as content? Ajax call: 

In the loop, you are going through the directory and printing out a list of all the file in the directory so that the user can select the configuration file that they would like to work with. You are going to end up doing this every time you go through the loop. It would be a better idea to stick this right before the loop so you aren't re-scanning the directory for files each time. 

This single method does exactly what those other two methods did, except for two small sections that can be "turned on or off" with a simple argument. Now, your code would look like this for placing first cards: 

Set to 0 Increment to a limit, calculating each increment. Decrement back down to zero, calculating twice for each decrement (except for the first). 

Whoa. You are creating an entire new property here based on input a caller gave you. Then, you are setting this to a uniformly designed object every time. 

This is a little nit-picky, but since you aren't taking any command line arguments, I recommend that you put in the arguments section. 

Why do you need 8 different variables holding the same image to do this? Why can you not just use a single variable? You are wasting so much space and time to store these and the way you are using them is super overkill. All you really need is love one: 

The only local variable that is being created here is ; all those other variables are global. Experiment Run this in your console: 

The first line in the conditional would stop any other thread from running because they are all sharing a single variable. Now, all you need to do to apply this to your code would be to treat in the example as your function, create the debounce variable, and then encase the function code in the statement. Then, after adding the lines for setting and un-setting the debounce, you should be good to go. 

For fun, I made a function queue in JavaScript. I named it tinyq. You can add functions to it, and each function is passed the next function in the queue. You can also pass parameters to the functions, and they can return values. 

I am working on a program to decode MMS PDU files. They are binary files and I am reading them byte by byte and decoding each header value as I come to it. One header value is the Date, and it's represented as follows (in hex): 

That is, I am converting every byte to a string (like ), joining them together, removing the , then reading that string as a base 16 value. This works, but it seems a little too convoluted. I then realized that I could replace the / with , so now my code is: 

I thought of a neat solution to this. Not sure how efficient it is, but I thought it was neat. If you look at your result array, you'll see results from "0000" to "2222". These are the numbers from 0 to 80. In base 3! So, using that, I whipped up a function to create all numbers in that range as an array. 

This code works, I've tested it using this page, and it gives the same result, but I don't think this is the best way of doing base32. Is there a better way to do base32 that's maybe more efficient than what I have? 

Apparently is a and is an . In order to parse this as a date, I need to convert it to an int. These bytes represent the timestamp (or ). I have code to convert this byte array into an int, but there has got be a better way to do it than the way I came up with. 

and can become one function where the specific piece is provided through a parameter. It might be cleaner to create a players object with fields X and O. I dunno; it might seem a bit cleaner. If you don't absolutely need to be the empty square placeholder, you can simplify your function to just return 

Give me the object! (Not how to get it) Your function takes the of a DOM element that the function is expected to find on its own. However, this is not good practice. Instead, you should pass the DOM element itself. This could also speed up your code by a lot if used correctly. For more on why it's bad practice, think about it this way: if you need to do some specific checking on an element after you've found it before you are ready to give it to the function, how are you supposed to pass that prepared element to the function? Don't let the function worry about how to get what it needs; just give it what it needs. 

You are sort-of reinventing the wheel here, and I don't think that that is your intent. already has a function . However, this function only grabs tokens one at a time, so you'd have to take these steps: 

The only downside is the fact that this enum now takes up more space - if that bothers you. Combining lines This isn't entirely necessary either, but it takes away a line from your funtion. This: 

Remain constant throughout the code, and even some other classes need them (, for example). I recommend moving these to their own enum. That way, the values stay constant and other classes can access them. This is what the enum would look like: 

If you want to reduce the lines of code (with a slight negative impact to performance if this function gets called a lot), you could do this: 

I need to get the nested type name of without the namespace, i.e. in a generic method. Unfortunately, will just return and will give me the namespace as well. Right now I'm using this: 

For something this simple, I think using the is fine, however, if you need to use the list of acceptable integers more generally or avoid hard-coding the set in a single expression1, you can use something like this: 

It's actually a bit faster, since sorting the inner list takes longer than just getting the minimum value. 

How can I clean up the process for formatting the arguments string? It seems pretty ugly at the moment, and if I have to add any more parameters, it's just going to get uglier. Is there an easy way to convert a list of parameters to a string that's suitable for invoking another function? Note: Simply passing in the parameters as a single string (e.g. ) doesn't really solve my issue, it just moves it back one step. I'd like to create the string within itself. 

You can also use a binary search (since this data is sorted) to speed up the search. My PHP is a bit rusty, so some one else might be able to improve this further, but I think it would look like this: 

I'd recommend against using 'catch-all' blocks unless absolutely necessary. always throws a by design (like it or not), unless you pass in the for the second parameter. 

NOTE: as far as I can tell, there's nothing limiting (or ) to be the same in all grouped dramas; each drama could have a different . Here's an alternative that includes the teacher in the grouping: 

Another simplification you can make is removing the second part of the remaining conditional (the part after the ). If there is no text, it's going to be anyway. Now your function looks like this: 

The last method is certainly the easiest to implement. If you do choose one of the two former methods though, make sure that when you stick them in the array I mentioned above ( or ) you order them based on the property you decided. 

Which looks almost exactly like your function, except for the . If you have the function , you might as well use it when you need it: 

In your function, instead of doing a conditional, returning if is passes and if it does not, just return the conditional that you are checking. Here is what I mean: 

The method is looking for a string parameter (but, of course, can take a number parameter). Therefore, you are just fine leaving out the 

This makes no actual indication to the JavaScript environment that there was any error; it only notifies the user. However, you want to have this function throw errors so you can more easily debug and unit test it. However, you can just have it start throwing exceptions; there's nothing to catch them. So, instead, you'll have to have some other JavaScript code call this function when the event is fired. Here's what that'd look like: 

It might be better/faster if you instead check to see if the message actually has the badge text before you try to replace it. But, that's up to you. 

This may just be me, but I find that it is extremely difficult to review poorly indented code (maybe that is why it has taken a while for you get any review). I recommend that you fix the indentation and then re-post here as a follow up question so you get better reviews. I will look at your code again and edit my answer to see if I can make anything of it.