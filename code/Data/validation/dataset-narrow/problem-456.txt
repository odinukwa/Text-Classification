In your case, there is not much to be changed except for the function names which do not follow the naming convention. For instance, should be named . Also, another (recent) part of PEP 8 is not followed by your code: 

Then in , you can get rid of by using a simple which makes things more explicit. Then, you can actually factorise out the common code at the end of the 2 branches and get the more simple: 

In for instance, we can see that a situation leads to a result being computed and returned without being store in the memoized list. Also, that case could be handled with less duplicated logic: 

and for that reason is probably not required (it doesn't seem to be used anyway). No time to go further at the moment. I might edit my answer later on. 

(I just realised that I forgot to extract stuff from but you get the spirit.) Avoid useless string manipulation You have a dictionnary where values are strings and these strings are later one used to retrieve the relevant function. It may be easier to just map keys to functions. You simply get : 

Your is a structure containing a value and its coordinates in an array of s. This reminds me of one of the examples in the "Stop Writing Classes " presentation and I have the feeling that we don't really need it. I have no time to go on right now. I'll try to edit my answers and provide a working piece of code. In the meantime, as you have solved the Project Euler already, I suggest you have a look at the solutions posted on the boards. They are a great way to learn about algorithms, math and programming style as well. 

You do not need global variable to propagate the list of servers up/down : a list populated in the main and fed to should do the trick. 

Because of points above, this is easy to change because we have references to BeautifulSoup in a single place. 

Disclaimer : this is not a proper code review. A different algorithm There is a O(n) in time and O(1) in space algorithm (and one can easily see that a smaller complexity cannot be achieved). You just need to XOR all elements so that the one in pairs cancel each other and you are left with the lonely integer. 

Don't use global variable It make things hard to understand and to maintain. In your case, the simple way to do this is to feed your function the parameters it needs. 

Now, the main issue in your code is that we are performing complicated (dirty?) string logic and checking many times if some letter is in a list. The real solution is to count letters in both string. Each letter will count for n points where n is the minimum between the number of times it appears in string 1 and the number of times it appears in string 2. Using , you can write this : from collections import Counter 

Now, in , if you want to handle any number of candidates, just use . It will use a list instead of a tuple but it doesn't make any difference to you because of the way you use it afterwards. You function now becomes : 

Style The loop definitly looks like a loop to me. Clearer function Your function does not many things. It would be simpler if it was to simply return a value and this value was used afterward to fill arrays. If we are doing so, we could take this chance to make clear what it returns : it could return whether is prime or not. By renaming it , things would be more straightforward. Also, if you do so, you realise that you can start your loop from 2 if you want to get the same output as you had before. Here is the corresponding code : 

This also removes the need for an argument to know whether this is the required input is asked for the first time or not. 

I'll let you play with this because there is quite a lot to say : Documentation Your code needs some king of comments/docstring so that one can understand what it is all about. Focusing on smaller pieces of code As I have no idea what the big pictures is, I'll give you some tips on smaller parts of the code that can easily be improved : You can rewrite : 

Once comments have been taken into account (except for the comments because I can't be bothered), the code looks like : 

Starting from taking into account janos' really interesting comments about flow control and style, you have : 

but I am not quite sure to understand why your remove newline characters only to put them back afterwards. 2) the way you populate is quite weird too as you keep replacing the value in such a way that at the end, you only have the latest line. Assuming this is wrong and that I understand what you want to do, list comprehension can help you once again : 

I had troubles testing your code on your example because an empty string was messing with the conversion to int. I took the liberty to had a simple in the loop to deal with this but you can probably find other solutions depending on the input files you want to accept. 

Actually, as mentionned by Maarten Fabr√©, this does not handle 0s perfectly. The code below is updated to handle it better. The last case is trickier. We can try to use recursion to solve smaller versions of the problem. I didn't manage to make this work properly... 

Useless argument 0 as a first argument of is useless. For loop and enumerate You should try to use iterations over iterable instead of using indices as much as possible. For instance, 

Keeping things simple If you just want to write prime number on the standard output, you don't really need a temporary container for the numbers. Naming things 

Yet another way to get the best results Another approach could be to start from the same element than previously and to try to reduce it. At each iteration you keep elements that are still valid: 

Your , on top on having a pretty bad name does not always return something. It probably be a good idea to add a at the end to make it better but if you are to write this : 

Actually, going further, one can easily spot that this loop is nothing but a loop in disguise. What you want is just to go from to . The pythonic way to write this is : 

When the number of cases gets huge indeed, it might be worth performing some preprocessing to ensure queries can be performed more efficiently. We can easily write a procedure to prepare our datasets in such a way that we can apply the trick described above directly. This leads to much better performances indeed : 

It looks a bit like half a solution but it is not so bad... Another more interesting way to handle this could be to take a more object-oriented approach and define classes (or a single class) to represent the multiple entities you work with and method to use them. For instance, a straightforward solution could be to use the values you keep forwarding from one function to another () as members of your class. Data type At the moment, cards are represented with a list containing a value and a suit. Even though this is technically correct, I'd rather use a tuple for this. I highly suggest reading Ned Batchelder's article about lists and tuples. Loop like a native In Python, you usually don't need to get elements from an object by index. What you want is usually to iterate over the different elements. I highly recommand reading/watching Ned Batchelder talk called "Loop Like A Native". (At this stage, I can confess that from my point of view, any article from Ned Batchelder, about Python or not, is worth reading, more than once). In your case, the functions becomes: 

You could just consider only without bothering about . Partitions would be counted twice but you can always divide the result at the end. Once you start this, you realise that all the logic about removing duplicates can be removed (all generation combinations are unique): you do not need sets and you do not need frozensets: 

I'd suggest having a look at Why Your Python Runs Slow. Part 1: Data Structures as it seems to apply to your code. 

Final point : I had trouble understanding your list slicing stuff but as I was messing a bit with it, I obtained a result different from yours ('rate' appears in the final result so it might actually be a good thing) : 

Implicit return in and other improvements In the function, you either return or an implicit None when the end of the function is reached. When your functions does return a value in at least one place, it is much clearer to add an explicit . However, it'd probably make more sense to return in that case. Trying to add documentation for that function, you would have seen the issue. Then your function looks like: 

I hope you will find it more pleasing and that my comments will help you. Also, despite the big number of comments, your initial code was pretty good. Disclaimer : I have done everything only based on your example (which was enough to spot mistakes as I was writing them). I might have missed a few things or done a few things wrong so I have tried to detail the different steps as much as possible just in case. Edit I just thought that you could change to make it values instead of returning a list... 

You don't need to store in your class as you don't reuse it afterward. Also, the member is not required neither. 

(I couldn't be bothered updated the comments.) Finding a bug Before changing anything, I wanted to write a few tests to be sure I am aware if I break something : 

The fact that you are trying to handle 2 scenarios with the same function makes things quite complicated. Indeed, the same functions ends up doing many things : generating (or not) random strings, repeating (or not) cycles, calculating temporary maximums, etc. Also, the fact that you use global methods makes the whole things pretty hard to understand. Easy part Let's start with the part which is both easy to explain and easy to implement : the case when we are given an . We just have :