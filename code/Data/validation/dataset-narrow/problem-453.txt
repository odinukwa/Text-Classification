I recommend you choose the first version because that way you don't have to call a method every time. 

Single Responsibility Principle Again, in your function, you aren't following the single responsibility principle. Near the beginning, you are populating a and a . These two operations should be extracted into separate functions to increase managing ability. 

I'm not sure if this comment is entirely true. If not, it's not entirely clean. When I see that code, I don't think, 

Since the only purpose of that function is to use it in , you can just use an anonymous function in place of . Here is what I mean: 

Theoretically, yes. Should you? Probably not. This technically prevents a 404 page from happening (I think); if a client visits a non-existent page, they are simply re-routed to an existent one as if that's where they wanted to go all along. Now, this isn't very good practice; you want to tell the client that that page does not exist by sending them the 404 page. I'm not quite sure how to do this, but if you look around in the docs a little bit, you might find something. 

Inside the body of a function passed to , you are accessing a parameter passed in to the function called . However, every time you are accessing it, you are accessing the 0th index of the property of this parameter. Why don't you just store that in a variable? It would make your code a lot cleaner in a lot of places, and it increases readability because it doesn't make someone wonder why you are specifically accessing this value each time you want to use it. Create a variable set to this value: 

Then, when called, will go through local storage, taking all of it's data and copying it into this object (you can call it something else). Now, instead of accessing localStorage when looking for and setting data, we can use : 

Don't speak of one I know it is against what the problem expects, but an improvement in your compression algorithm would be to not print any number if there is only one occurrence of the letter. This way, it would impossible to encounter that first bug mentioned in ChrisWue's answer. And, in files that don't have that many consecutive letters, they will have less added bytes from the compression. However, as noted in two comments, if the digits are numbers, you can run into some issues. However, after reading the next section, you can see that, if you have consecutive numbers, they will be ASCII numbers, where the values accompanying the characters will not be ASCII. 

In case in the future you make some mail parser, don't make it too complicated by storing the mail separated by strings ("Sender", "Subject", "Context"); store it in an object. Depending on what the user wrote, those strings can make messages really confusing. Why not store mail in an object? Here is what I came up with: 

You should add some support for when a number is too big. Perhaps you could throw an exception that the number is out of bounds that your function will work in. 

You could completely get rid of needing to set up an event if you move this script to the very bottom of the DOM body. I don't know how this affects performance, but I assume it would be slightly better now that it doesn't have to worry about an event. 

Scopes and global variables Your code looks very good; it's a fairly simple task, so there isn't too much to review. However, I'm going to suggest a different design that will keep things modular as right now you just have floating global variables which aren't good at all. To keep your variables in the same scope, you should encapsulate everything inside a function. 

Your code is very slow/not very efficient right now, even though it may not totally seem like it. This is because you are interacting with too much, and interacting with can be slow (I mean, you are accessing this external memory bank for data perhaps many times). An easy way to speed this up would be to store the local storage in this object itself. To do this, you could create an init method that simply copies local storage into the object: 

Making the code portable again You did a fine job cleaning up last code's bugs. My answer will be fairly short this time. 

Then, all you need to do is iterate through this map with a loop, checking with the key and returning the object if is /: 

This will return if the expression evaluates to , and if it evaluates to . No conditional needed. Or, if you wish to further simplify this function, just return the length of . Python treats 0 as so if the length is 0, it will act as in a conditional. At that point, it may not even be worth it as a function. 

Always use s and . On bigger codes, omitting these can cause really big problems that are not very easy to notice at first. It's just better practice to put them there. 

Rather than re-writing this out for each case, you should refactor this to its own function that returns the two inputs. That way, you can just call that function to get the inputs. Also, speaking of inputs... 

I don't this code is it; I am assuming that it is in a class. If so, then these variables should all have scope identifiers, like the one that has. However, going back to , I think you should make this a field. Keeping this public could be a potential security issue. Also, from I am shown, you are only accessing from inside the class, so there is no point in letting it be access globally. For the same reason as I just stated, I think the other fields should be private too. The reason why I say this could be a security issue is because this is going to be run on a client's side and it is handling billing and payment information. Someone might be able to manipulate the information if the field is public. 

You did not specify that you are purposely reinventing the wheel here, so I'd like to point out that you are over-complicating some of these methods. Also, in your method, you are using a built in method, anyway. Here are some built in JavaScript methods that already accomplish the same task: 

To me, it would make more sense to use here because you are performing the same operation to each of the elements: 

This assumes that can access , too, which it now should be able to so you don't have to get the element over and over again (which is inefficient). With these changes, your code is much more efficient now. With the addition of this look-up table and the new use of the function, your code now runs in \$O(1)\$ time (I think). 

All that's left to do with this controller is to move some of the information from your original controller into this controller. For example, you might want to move and In order to properly deem what should and shouldn't be moved, remember this: a controller/directive should only accomplish one task. If you need to accomplish another task, you need another controller/directive. 

Bad UX I don't have much to say about the code, but I want to comment on the UX of your form. Whenever the animation is running, the user is not allowed to enter anything into the input boxes. This is very poor UX as it forces the user to wait before filling out the next box when completing the form. Animations can be cool, but if they become detrimental to UX, then it'd be best to find a middle ground. In this case, I'd suggest somehow fixing your animation so that the user is still able to edit the input boxes when the animation is in progress. 

Don't do a few string operations and then change the class of an element; just set style property to none. 

Look at both your appends: that are appending the exact same string. Therefore, we can just store this in a variable: 

Your function would return to these if these were passed in in this order. A simple fix to this would be to reset to every time a character is encountered that is not the right one. 

That giant chain in is very ugly. I recommend that you create an array. In the array, the elements would be the random values to check. Then, if a check passes against an element, you can simply return the index of that element + 1. That would look like this: 

Instead of having to have a conditional where you check for two options later ("yes" and "y"), give the user their options: 

Only, rather than hard-coding the tags into the code, this is just using the tags from the object that we already created. Now, all that's left is to check the data property and set the new image. Here is what that looks like: 

Your logic gets a little confusing to when you get to the loop. To me, when you were reversing the string at the very beginning and then splitting it up into words, I figured you were going to append the words in reverse order in to a blank string. Then, for some reason, you start reversing all the words in . It makes more sense with the beginning of your logic to continue as I thought it was going to continue. Here is little bit more into my idea: 

Refactor node deletion You did a very good job of refactoring your code for the most part. The only repetition that I can find is here: 

Repeating animations If the user clicks on a box and the animation starts, but the user clicks to another box before the animation finishes, the animation will repeat in the original box and focus will be reset to that box. As said above, this is also seriously harming the user in the speed that they can fill out the form. If the user is too quick by less than a second, they could end up writing over older answers to the form that they wrote. You can kind of fix this by deploying a when the listener is called, and then destroying it if the listener is called again. 

I don't know the rest of your code, but I believe that it is fine keeping this as its own function; it is good to separate logic in code. You will not have much of a performance impact with function calls, and it's okay to use as many as you need as long as you are following good practices (and you are for this, as far as I can tell). 

Simplify win checking I'm not going to go too much into it because I've said it way too many times before, but your checking for the win can be simplified greatly by storing all the possible win combinations in a large array. So, here's what the structure of your array would look like: 

Having that extra variable is unnecessary. You can just use the variables you already have: and and the number . 

While ing to the console is a good idea, this doesn't give other code using this library a lot of control over errors; how is other code supposed to know when something went wrong? I recommend throwing (custom?) errors along with logging a message to the console so, along with the person using the library being able to see and debug the error, their code will also be able to see and interact with the error. In case you aren't familiar with Java, you can create a custom error just like you can create any other class. Here is an example using your code: 

This line is getting the data attribute of the element ("data-xl", "data-s" ...) and setting it to . The reason why is set in the conditional is so that the method does not have to be called again if the conditional passes and the new attribute is being set. 

where is a class that uses to set properties and methods and is not just a function that returns an object. This code seems to be creating a false-OO feeling to it with how it is using this manually-created object inside functions that don't use to "instantiate". 

Why are you trying to find the element again if you already have a variable stored with this element at the above of your code? It would be a lot more efficient to just use this variable, because 

Again. These chains of variables with numbers at the end of them. Typically, when you have variables named like this, ya dun goofed. Instead of keeping a bunch of variables like this, you should be storing them in an array (or in this case, a tuple). 

By not having the keyword, you are creating a global variable, which means that other variables will not be able to share the same name as that variable without affecting the original variable (which can prove troublesome with iteration variables like ) 

Functional components Your and components don't actually hold a state (basically, they aren't using ); they are simply presentational components (they display state). So, rather than using to create these components, you should use a simple function that returns what would normally return. Here's an example: 

The design of your function is very confusing. First off, by the top of the code, we learn that there is a variable that is in a scope for all these functions to see. Then, looking at this function, if either of the first two conditionals pass, that outer variable is going to be set, and then it will be returned. Then, looking back at the function, you are again storing the return of in the outer variable. Why are you doing it like this? This is very confusing. As a solution, I recommend that you get rid of the outer variable because you only use it in . Then, just handle the return from . Since the outer will no longer be used, here is what will look like: 

You have objects like in that are all being displayed to the HTML using . Hmm. Let's think about this. You are repeating very similar objects all dedicated to one purpose in your HTML... sounds like it's time for a directive! 

Sometime in the future, you may try and add more functions to this calculator. Depending on how many more functions you add, this statement can get quite lengthy. And, some operations won't just be a single character like "+" or "/". I recommend creating a dictionary/map where you map the name of an operation to a function. Then, in this function, all you have to do is call the function associated with the operation. Here is what I mean: 

First off, if you are going to check for the existence of , why not also check for the existence of ? I personally think you could just drop the checking all together because 

There's a bump in your indentation You are being inconsistent with your indentation. In some places, you are indenting two spaces. In others, four. I recommend that you stick with one (I like four). Defining the undefined 

Three separate function calls to concatenate three strings? That's not very efficient; and it's quite ugly. It would be better to use : 

I think that you are just running a function right after you've created it. I recommend setting this to the of the webpage, just to make things more clear and to be absolutely 100% sure the function will run after everything has loaded. Here is what I mean: 

If you continue to work on this code, you are going to build up quite a big statement in your function. As an easier way to solve this problem, create a dictionary containing the name of the command and the function to call for that command. Here is what I mean: 

It's not very efficient to be iterating through the entire list every time as long as there are still elements inside it. If, for example, there were 10 items in the list, the first you would iterate through 10 items, then 9 items, then 8 item... until you've iterated through 55 elements. And that's why sorting the array first before working with it will be much faster (in fact, the highest voted question on Stack Overflow is about why processing a sorted array is faster).