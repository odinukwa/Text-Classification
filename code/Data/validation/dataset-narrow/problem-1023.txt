Power that must be delivered by a USB port is defined in Section 7.2.1 of USB 2.0 Specifications. To start, the power delivery is defined in "units of load". For USB 2.0 one unit is 100 mA, and for USB 3.x one unit is 150 mA. USB standard defines two classes of USB ports, "high-power ports", and "low-power ports" The specs says, page 171: 

In theory your tablet should discriminate between ID pin grounded (host mode, sources VBUS), ID pin floated (device mode, consumes VBUS), and ID pin = 100-125k, meaning "accessory charger". In this case the tablet should serve as a host, but consume VBUS for internal charging. 

Yes, a RS232 to USB converter does have a full-blown UART circuit built-in. As any standard UART, it does have Rx, Tx, and flow control pins. As any UART, it must be properly configured to be able to communicate with the "partner" at the other end of UART link. To do so, the UART circuit is "bridged" to USB interface. The USB interface has the CDC class descriptor (Communication Device Class), and the USB host driver maps this USB device into a virtual COMnn port with nearest available number, so PC applications can use it as an usual COM port. The bridge is fairly simple. To read the UART data, the USB COM port driver is constantly asking the USB device for data (since it has no other means to know when the UART will receive its data and will be ready to give them to host). When there is no data, the bridge responds with NAK. When data is there, the USB side returns the piece of data. When the host wants to send a UART data, it issues an OUT packet with 1 byte of data. The bridge receives the serial byte into a parallel buffer (at USB speed), and then stuffs the received parallel byte into the parallel side of UART for transmitting it at UART's speed. Before communicating over UART, the USB side must configure the UART for proper baud rate, stop signal length, and use of flow control, as in case of usual UART in a PC. This is virtually transparent to application terminals, and the terminals use the usual interface to set these parameters up. 

This problem usually occurs with HDD when the SATA controller mode has changed from the native AHCI mode to the compatibility IDE mode, or vice-versa. If your HDD was formatted under one mode and Windows is installed in that mode, changing the controller configuration in BIOS to another mode will result in infinite loop of reboot cycles. For some strange reason any Windows recovery cannot find the issue and fix it. Try different modes in BIOS, it might fix the problem. 

Modern Intel's CPUs use more sophisticated internal interconnect technology called "Coherent Fabric", in various incarnations. The reports from software tools are simply misleading because the logical architecture of configuration and resource allocation spaces for peripheral devices still remains in classic PCI format, for convenience and software PNP compatibility. So the logical protocols remain the same, but physically the data are moved much, much faster. 

If your videocard does not have the Type-C output and you are using DisplayPort, the DP link does not have the USB capability. The Type-A USB3.1 receptacles will not work unless you connect the LG Type-C port via additional C-C cable (to Type-C host) or C-A cable to a regular USB-A host port. You can connect the monitor via Type-C port to a Type-C host (using C-C cable), if the host supports Display Port video over Type-C. But then you will need a very special support from host to have USB functionality, because the cable can do either USB, or DP @ 4K resolution,[see correction/clarification below]. You can use HDMI ports, then #(1) still apply. 

If you are talking about 2x5 connector with a plastic key, and 2x5 shrouded headers on mainboard, the key should match an opening in the shroud. This was the standard for many years. If no fit, it is very strange, and you should really examine pin assignment on the header, check where the +5V is at least. If you are sure that the headers you are targeting are really USB2 headers, and if you connect them correctly to your front-panel extender, then obviously it will work, to some extent. Regarding the concern about mainboard performance, obviously older chipsets will underperform as compared to newer ones, because of gradual improvement in individual I/O blocks and bug fixes. However your both boards are based on the same H61 chipset, so the differences, if any, may come only at differences at BIOS level, to what extent the manufacturers implemented all patches distributed by Intel. Lack of USB3 isn't an indication of anything, it is rather a choice of a manufacturer. The H61 doesn't have the native USB 3.0 controller, so the USB3 functionality is likely added by a third-party controller on PCIe bus. Regarding the bandwidth, it is identical for identical platforms. However, some (non-premium?) manufacturers may fail to design their boards to best signal integrity standards, so the highest-performing modes might be flaky, so they would reduce their operational speed via limited configuration (in BIOS). So all bets are off. 

All answers are wrong. There is no way to figure out how much current a particular USB port can deliver other than to use a "variable USB load tester", and crank it up until the voltage either drops to 4V, or the VBUS gets disconnected with "port overcurrent" message, or the entire PC resets and restarts. Every design (laptop, desktop) has its own idea on how to supply VBUS. Some use hi-side switches with pre-set current limiter, some use resettable polyfuses with unmanageable range of flip thresholds, some use nothing, just a direct connection to the internal +5V standby voltage rail, with possibly one "ganged" polyfuse for all ports. All software tools are based on formal reporting from devices, which may be totally off, have no relation to reality, and cannot possibly show real maximum potential of a port. 

There is no such thing as "passive hub". There are "self-powered" hubs (powered from AC wall adapter), and "bus-powered hubs", who receive power from host port. In theory, a bus-powered hub must report itself to a host system as such, and the system is supposed then to police the delivery of power to peripheral USB devices that a user might plug in. The bus-powered hub is not supposed to take too much power from host port (500mA/900mA limit), and the total must be fairly split between downstream ports of this hub. Each bus-powered USB device has an information on how much power it will consume. Roughly devices fall into two categories, "low-power devices" (100mA or less), and "high-powered" (above 100mA). The policy of USB host is to determine the required power a device needs during initial stage of device enumeration. In case of "bus-powered" hub the rule is to reject devices that report their operating power above 100mA. In theory, if a hub is able to get a power from DC jack but a user forgot to plug it into AC adapter, the hub must detect this, and change its descriptors to reflect this change. As result, all high-power devices who were working fine with AC adapter would stop working when the hub gets power from upstream port. Obviously, this behavior will cause major customer confusion and disappointment. So, in practice, the world-wide industry invented a "work-around" by violating USB specifications and making hubs that do not report the change in power source. As result of this little "lie", the USB host will allow any device to be connected and go full power, which sometimes causes problems with power to USB devices as HDD enclosures. Therefore, the answer to posted question depends whether (a) if the hub is truly USB compliant (which is likely not), and (b) whether the devices are high or low power. I would guess that both audio and BT dongles are low-power devices, so regardless of the kind of hub there should be no problem in this setup. 

This logo is awarded to USB devices (and hubs!) if they successfully pass all logic and physical layer tests developed by USB consortium specifically to ensure inter-operability between products coming from different manufacturers. An ordinary user cannot make the assessment of USB product quality, because it requires very expensive test equipment (to evaluate compliance of physical transmitters/receivers to USB standard), and specially configured host PCs with USB protocol analyzers to evaluate compliance to all logical protocols during connect-disconnect, all kind of data transfers, and all layer of aggressive power management of USB links. For USB 2.0-only hubs this equipment must include a 4-channel high-speed oscilloscope (2GHz at least) with a special processing software, and with a set of specialized test fixtures, plus a dedicated protocol analyzer. The cost of all test equipment goes at about $100,000 and up. For USB 3+ certification testing the cost of equipment goes to $500,000 and above, because of the need of expensive BERT (Bit-Error-Rate-Test) instruments, 12+ GHz oscilloscopes and USB 3.1 protocol analyzers. Testing for functionality of Power Deliver options carries additional cost. The USB-IF set of tests are fairly comprehensive, but the governing body is lenient and can grant a manufacturer several exceptions if something does not meet some required parameters. So if a device does not have the USB-IF certification logo, it means that something is brutally deficient with the device. For example, USB requires all devices to have no more than 10uF capacitance on upstream cable upon initial plug-in (there could be effectively more caps, but they should engage later, and smoothly). This requirement serves to protect upstream (host) ports from excessive inrush currents that can disturb inner functionality of host. Most so-called "portable hubs" totally ignore this important parameter, and hook up all downstream port caps (100-200uF per port) directly to the input VBUS rail. I have a hub (TP-LINK) that has 880uF of capacitance on its VBUS. Plugging this kind of hub into a laptop essentially crowbars the USB port. No wonder this hub doesn't have any certification logo. Unfortunately, the USB-IF certification process does not have any legal means to be enforced, so unscrupulous manufacturers skip on tests, and most USB devices on consumer market lack the certification. 

This is not about making "own wire". Since you have Type-C laptop, you need to make your powerbank compliant to Power Delivery specification. It can be done by designing some in-line "adapter", with 20-V input on one side, and power delivery on the output side, with Type-C cable at the end. You will need to design this board by yourself. There are several IC manufacturers who offer Power Delivery chips/kits, to negotiate and supply higher voltage to a laptop. Here is an example of solution offered by Texas Instruments. You will need to implement the block shown in RED square in the following diagram, on the right: 

so it might be the root cause of the issue. There might be some configuration within the Eaton application to turn any watchdog service off. 

The device you are looking for is called "SD card duplicator". Prices range form $100 to above $1000. Your choice. 

Your system has two identical XHCI controllers. If one has no problem and works but the other doesn't, there is no issue with software drivers. The problem seems to be in hardware of the second XHCI controller. The problem could be in faulty solder joints, or it could be in local firmware for the XHCI controller IC. Renesas/NEC XCHI used to have an utility that upgrades IC firmware, which usually comes in a package with Windows driver. Try to obtain the original Renesas driver, it might fix the problem. Alternatively, you can try any stand-alone Linux/Knoppix, or other stand-alone CD-based bootable OS (like Hieren's CD), to see if these systems can recognize both controllers and run them with no problems. 

There is no such thing as "standby" in USB framework. There is SUSPEND state, and several active link states with various degrees of power management. Again, nobody "allocates" anything like the 150 mA. The 150 mA in USB3 is a mandatory minimum of 5 V power, and "active" devices can take whatever they need, up to 900 mA. Or less. All depends on "devices". Therefore it is illogical to expect 150 mA x 4 consumption, especially from a compound device with 4 embedded functions. If your host driver stops communicating with all four downstream devices, it doesn't mean that all links will automatically enter low-power states, the host driver should FORCE each link into lower power states. Devices in USB 3.0 framework can also request and turn their respective links into U1 and U2 states, but they must be enabled to do so. But not into U3. And again, the controlling silicon will still be active. To get into "true SUSPEND" (U3), host must force all links into U3 (SUSPEND) states. However, if you are making a self-powered compound device (hub+devices), there is no specific requirements on its own consumption, all up to designer, whether it is made to conserve power, and to what degree. Even if the upstream link is forced into U3, self-powered device can do whatever it wants, it is up to "green certification" or whatever requirements to make it power-savvy. In this particular case the compound device either was not forced into U3 state by host, or the device itself ignores the state of upstream link, and does nothing to change its power consumption. Overall, the USB power management was historically a challenge for system software, and for years this feature was disabled in USB3 framework. Even in the USB2 framework there are still glitches and incompatibilities, suffice to mention the frequent advice to "disable selective suspend" mode. 

Your log seems to indicate that the Sandisk drive was connected, and then disconnects in 1.5 seconds, for whatever reason. 

Disable any sleep/hibernation states, set the PC to always ON, to rule out USB SUSPEND-RESUME issues; make sure nothing ever sleeps. Try to use latest USBview.exe utility, and try to reset ports/root hubs etc., to see if software reset recover anything; To exclude possible Win10 driver incompatibility with C600/X97 chipset, disconnect you Win10 HDD, get any old SATA hard drive (I am sure you have a few in garbage box), and install old Windows 7 (preferably the original Dell version), and let it run. Alternatively, boot into any version of CD-ROM based Knoppix, and see if the hangs continue. If yes, you have some hardware problem with chipset, with EHCI controller, some platform voltage deterioration, or else. 

You are very mistaken about the "Kingston DT microduo". This is a dual-interface flash drive with USB-A plug, and Type-C plug in parallel. 

These devices use a serious IC to bridge from USB3 to DisplayPort following USB Video class specifications. This is a USB device that provides one or more monitors to a system. Most common maker of these bridges is DisplayLink 

A bus-powered (aka "unpowered") USB hub cannot officially supply full power to downstream ports, because the power source is already limited to one-port standard USB capability, minus the hub own IC power consumption (which is about 1W or 200 mA in today’s technology). This leaves about 700 mA to all downstream ports. Since the system must reserve 150mA minimum to each port, it leaves only 250 mA maximum for a 4-port hub, see Sec. 10-14 p.10-61. This power budgeting is new and improved over USB 2.0 specifications, where 100 mA was hard limit, no balancing. In theory, a bus-powered hub must advertise its power source in hub configuration descriptor. USB system software will then apply power policy and refuse to connect any USB device when the power budget is depleted. This is very inconvenient for ordinary users, so unscrupulous manufacturers are cheating. They lie in hub descriptor by setting it as "self-powered" (i.e. using external power source) no matter what. Since these “mobile hubs” cannot be USB-IF certified at all, they usually have several other out-of-control deficiencies, and who knows what else. One fundamental deficiency is that these cheap hubs don’t implement VBUS power off function. Even if all ports can be ganged and presumed to serve as “charging ports”, the VBUS toggle function should be implemented to signal to downstream devices when upstream hub connection to host starts running. See Sec.10.3.1.1 of USB 3.1 specifications. The other typical issue with cheap hubs is huge excess of capacitance on VBUS. The USB requires no more than 10 uF of load to upstream VBUS. Most cheap hubs use a common VBUS rail, but connect huge caps to each port. For example, the TP-LINK “mobile hub” Model UH400 has a 220uF cap per port, making the upstream VBUS loaded with lumped cap of 880uF, exceeding specifications by a factor of 88X. This cap can easily break any PC on connect, by nearly shorting +5V standby rail. 

You are not way off base, but not entirely correct either. Every USB device advertise itself as a member of certain pre-defined class of devices - HID, COM, Mass Storage, webcam, etc. As such, these devices indicate to OS that they conform to certain well-defined functionality. The OS will load a generic driver for this class, and you should expect basic functionality from that device. However, many device manufacturers want differentiate themselves from others, and incorporate some extended functionality, like auto-focus, or special buttons, or extra formats, etc. In this case the manufacturer would provide his own driver, which is VID/PID specific. If this driver is installed, the OS will load it every time, so you will have new shiny functionality from your new device. The way how the custom driver is implemented may differ. It could be a completely custom driver, or it could be some modification of the default driver using a method known as "filter driver" in Microsoft world, something like in your picture. How the product-specific drivers are implemented in Android/Linux, you better ask people in corresponding forums.