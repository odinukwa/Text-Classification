Have you tried going to /etc/networking/ and tried changing the config file called interfaces Try setting it up with a static IP see if that works. I don't use the wifi. Also if you use a wireless keyboard with a USB receiver and the USB wifi adapter just remember they are both 2.4GHz. I've heard people having issues with this because their operating off the same frequency. I haven't had an issue but I've heard people have. If you want to try using a ethernet cable and set up the interfaces file for static IP you will need to find two things. 1.) The routers IP address also know as the gateway IP address. 2.) A IP address that is not being used by another device in your network. So get on another computer and do a ifconfig (using mac) or ipconfig(using windows command prompt). This should tell you what address your computer is using. Go a few above it. So if your computer is using lets say 10.0.0.2 then chose 10.0.0.20 for your pi and you should be fine. Here is what your interfaces.config file probably will look like: 

My friend and I have been reading up on articles talking about controlling ESC/Brushless Motors from a Arduino or Raspberry Pi. Articles i've read give caution on the idea that controlling such systems depends on the specifications of the ESC. For example one articles i've read talks about controlling 20A or 30A ESC's but the ESC we're trying to control exceeds that. Here is a link to the ESC and Brushless motor that i'm trying to control through a Arduino and/or Raspberry Pi. $URL$ Is there anyone that can give me some feedback on whether this ESC/Motor can be controlled using a Arduino and/or Raspberry Pi. I would like to get some feedback before my friend and I go through with the order. 

I was shocked once I found out, that some USB cables would not provide as much power as others to the Raspberry Pi. We have an Android phone connected to the Pi, and when its battery is mostly flat and its browser is rocking on 4G/LTE, then your battery could be drained faster than it can be recharged by the Raspberry Pi. So I bought a simple USB power meter and found out, that one specific noname USB cable was really a bottle-neck - the meter wouldn't go any more than 700 mA. I am using Anker cables now, and the meter is somewhere around 1,3 A with the phone plugged into the Pi. In my setup, there is actually 2 USB cables: 1) is supplying power to the Pi from a USB charger, and 2) is connecting the Phone to the Pi (data via and charging the phone). Obviously the cable 1) has approx. 250 mA more load (the avg. current of the Pi). Also, I would like to mention these settings in found on the Pi: 

this looks very familiar. I work with a large variety of linux machines which run at more than 100 service providers, so it happens from time to time, that their network is to some degree broken, especially if IPv6 is involved. You see that immediately when using -- the domains would resolve to a IPv6 and freeze right there. All IPv4 traffic was working fine. for my purpose, I just need IPv4, so I disable IPv6 on all machines during installation like this: 

We setup a web server at school already. However, my school has 3 different networks. One for administrator one for students, and another that is experimental for us students in the engineering department. We picked a few ports in the IT department, where I work, and traced them back to the server room. We made sure these ports were connected to the experimental network so we could do what we wanted too and NOT be throwing up flags in the system. When then obviously used a hardline connection to our pi and was able to ssh into our pi's from our own computers for any terminal work we needed to do. You can also download and install the xrdp (windows remote desktop protocal) on your pi and be able to even get into the GUI if you needed to. You'll need a remote desktop program on your computer though. I have a macbook so the apple store has a Microsoft Remote Desktop App that works great. I even use it to remotely fix software and networking errors on all the staff employees computers. We installed Apache2 and made our own web server when in return spiced up the web link using some easy html coding. We made some shell scripts that we had the web link point to on the pi to light up a simple LED. So now we can be anywhere in the building on a computer or on your phone and go to that url and turn on a LED. Pretty simple but this is how we setup something simple at first with our networks. Were hoping to get alittle more crazy now since we have stuff working. 

Going further into the FAQs we see more useful numbers for the Pi 3 based on average & peak consumption. Peaks: 0,75A when booting, 0,55A for video playback (H2.64) and 1,34A under stress. I'd say that if you are able to boot the device, you'll be able to do video playback. You won't break the Raspberry Pi 3 by testing this, worst case scenario is that it won't (fully) boot or shuts down. Give it a try on your USB 3.0 port. Let us know what happens! 

If this doesn't work right away, make sure to power cycle your Raspberry Pi (, disconnect all cables, wait 10 seconds, connect all cables and let it boot again). Then try to make user pi owner of the root folder of the USB device. 

Yes, that should work. You need 1 ethernet port on your Raspberry Pi and 1 ethernet port on your PC to connect your Raspberry Pi to your laptop. You can use a USB to ethernet cord when you don't have an ethernet port available. 

Attention for the next 2 steps / edits: these paths are followed by a number. Don't edit or remove the number! ( becomes , becomes , etc. ...). 

Done! You can make the partition your SD-card read-only (but there wouldn't be any writes anyway). Also, if the SD card would ever fail again, you have a backup of the partition on your USB device. Optional If you have a Raspberry Pi 3 B, perform these extra steps (on top of the previous steps) to not need an SD-card at all. 

So in general: I'd avoid switching an interface on/off (using / ) and rather select the network interface you want to use in your code. And have some extra code which periodically tests any given interface for connectivity, you can find some ideas for that here. 

I have been using it for monitoring network traffic since a few years. it offers live observation (with ) aswell as traffic stats over time (hours, days, months). Download 200 MB though your setup and then compare and ) Update: Don't forget vnstat updates its database only every x minutes (see ) Another remark regarding throughput speed in bytes/sec: In my opinion, this is a hard task to do accurate. Network traffic (especially when wireless is involved) can be very inhomogeneous, i.e. it might transfer 1 MByte/sec right now, then suddenly stop for 1 sec and then do 2 MByte in the next 1 sec, then go back to 1 MByte/sec. If your tool (vnstat, ifstat) is looking at a 2sec interval, you'd never notice that it was stuck for 1sec. So the refresh rate (interval) should be much shorter, like every 10-100ms. That's just one example why this can become tricky. 

the serial number which you already mentioned, find more details about it here the MAC address of the eth0 or wlan0 interface. for eth0 you could get it by using or . The result will be something like 

If your mobile 3G/4G connection expired, the data volume is exhausted, or the prepaid credits have run out, the curl result will be something entirely different or not work at all. By testing for an expected value, you can make sure whether your mobile connection is still able to access http websites. You could combine my method with or just use a curl options to control timeouts. This method is working with approx. 15 different prepaid mobile carriers world-wide. Update: You might want to use (Show document info only), this will not download the http response body. It will save you a few bytes on traffic and is a bit faster. Check the response header for . I mostly use that as a "ping" to measure how fast http response is. It's not accurate, since your mobile provider might inject his message into the response body. Most of the time however, they are redirecting you to their own site and you'd get a response. 

Since the Pi Zero and the Pi Zero W are identical in hardware (except for the addition of WiFi and BT) and you can install RetroPie on top of Raspbian (which supports WiFi and BT), I don't see a reason why it wouldn't work. 

Before we continue, a default Debian/Raspbian installation has read-only support for NTFS. Try installing ntfs-3g for read & write access: 

Done! Shut down, remove the SD-card from the Raspberry Pi 3 B and boot again. This will take longer than usual. Mine did a strange sequence on it's own: I put the power in, then it showed a color image, it rebooted on it's own, showed the color image again, rebooted on it's own again, showed the color image again and suddenly booted into Raspbian. The next reboots were much faster. Make sure to remove the line in on the SD-card if you plan on reusing the SD-card in other Raspberry Pi's that don't need USB boot mode enabled. 

Go back to the original config.txt file (in case something is messed up, the original should work) and make sure your Raspberry Pi boots correctly (eg. hardwire it to your network and see if it shows up in your router). I had similar problems when I wanted to connect my Raspberry Pi to my display for the first time. Eventually, it worked without changing any settings. After some testing, I think the display needs to be actively looking for HDMI devices while you boot the Raspberry Pi. 

this will turn off the display, but only somewhere during the boot sequence 2) add setting to your I found the follwing settings here: 

I suggest to configure your tools, to use a specific network interface. Let's say you are currently using to make some HTTP GET/POST to a web API endpoint. Just add the option to curl, to make it use a specific interface ( or or -- use to list all available interfaces) for the network request. 

I was facing a very similar situation. I ended up not using but . because many times, ping will still work even though the mobile 3G/4G connection has run out of credits/data -- while accessing the web is blocked. On some networks, ping does never work (because ICMP protocol is blocked). In any case, ping is not a reliable way for testing internet connectivity. This is how I check whether the 3G/4G connection has still access to the internet: 

Now you could just test your main connection with (assuming you are using eth0 and not WiFi) and whenever it becomes available, you start using in all of your network requests. If eth0 still doesn't have connectivity, then you keep using (or the name of your 3G-dongle interface). For a similar option would be where you have to pass the IP address of your raspberry pi for that interface. Usually you have something like this and If you are using PHP with you might want to look at which is explained here. Example: