Your /etc/resolv.conf is empty, which is consistent with you being able to ping by IP address, but not by DNS name. How are you getting your IP address on your RPi? If via DHCP, your DHCP server should be configured to provide DNS information. If you've manually configured a fixed IP address, you need to list a DNS server (e.g. nameserver 8.8.8.8) to your /etc/resolv.conf file, or via GUI. Let us know how you've configured your RPi's network and we can provide more specific help. 

I asked this question over on the Raspberry Pi forums in an attempt to keep it low key, but I can't seem to find it now, so I'll ask it here. It is on-topic and definitely specific to the Raspberry Pi. There is a lot of news in the security channels recently about a local exploit on Apple OS X that allows a non-authorized user to append a line to the sudoers file to allow the use of sudo without entering credentials. The Register has an article describing the exploit. Essentially, a user with local access can add themselves to the sudoers file to bypass password authentication for use of . [edit]My question isn't about the exploit, but rather the implications: A user able to use to execute root commands without entering credentials, particularly when coupled with an account that ships exposed (on raspbian) to the network with a well-known default password I don't see how the resulting situation on an Apple is fundamentally different than the default situation on a RPi. A non-root user is able to execute root-level commands without entering credentials. Obvious differences: 1. A user on the Mac not in sudoers can add themselves. 2. The default 'pi' user account on every raspbian install has a fixed, well-known password as well as ability to execute root commands with . 3. [Edit] The RPi, by default, listens on the network. So which is the bigger deal? A Mac user who could elevate procedures if and only if they have access, or an RPi with a default password and the same access? 

Change to your 2 character country code. From what I've read, the line is the real trick, but the others are recommended. 

Note that your new user will automatically have a group created matching their username. You do not need to add your new user to the group. You can add your new user to each group individually using . For example: 

Roblox is a commercial entity. For whatever reason, they have chosen not to support linux. Many companies make a decision to support only Windows or only Mac in the same way. You should contact Roblox and ask them to provide Linux support. 

I'd suggest Flask. It's a python "micro framework" tailored to do exactly what you're looking for. You can find python-flask in the raspbian repository. 

Save this to a file (e.g. ) and enable it with . The key is the statement that designates local filesystem availability as the only dependency, meaning this should kick off very early in the boot process. The problem with using is that, to be sure programs will work, it has to wait for the network and other targets to be available, so only kicks off near the end of the boot process. The " way" allows for more granular specification of dependencies. The option directs to blank the screen before playback. To get a truly silent boot, you have to specify some other options, but I am restricting this answer specifically to launching a video early in the boot process. 

If you want to stick with stock Raspbian, Adafruit has a repository that includes, among other things, Node v0.12.6. 

If you just want to lock certain domains wholesale, simply blocking them in DNS is straightforward. You can create DNS entries pointing undesired domains to 127.0.0.1. There are full-blown projects such as PiHole that use this technique to block advertising sites, and you could easily modify such an install. The problem will be when you inevitably need/want to access a blocked site. The plus to configuring a client proxy is that it's relatively easy to turn off. If self-discipline is your problem, there are browser extensions that are supposed to help with staying focused. Instead, you might want to set up a "focused" work environment without a browser, fun-time apps and just what you need to get work done (e.g. a word processor or text editor). It's straightforward to set up a "serious" RPi image that boots straight into an editor, for example. All that said, I find that people tend to start using "setting up the perfect distraction-free work environment" as yet another procrastination technique. Don't get obsessed with it. 

Assuming you're on a Windows machine, try opening Start->Run and enter (or whatever you named your RPi) or enter that path in Explorer. 

It can be done several ways. You can connect GPIO pins as simple IO, or use the pins with UART capabilities for a serial connection (essentially like using a null modem), or use the pins with I2C capabilities for a master-slave serial bus arrangement. I'm sure there are other methods as well. For a simple GPIO example, you could cable the 2 RPis directly together as you've described, with a pin designated as output on one RPi fed to another pin designated as input on the other RPi. The problem is that this is only unidirectional, so only good for letting one RPi know of a condition, and not any sort of response. Any given pin can be configured as either input or output, and won't have any way of automatically switching between modes without some extra work. If you want bi-directional communications, you'll need a second set of pins for traffic going the other way. Always be aware that the RPi GPIO pins operate at 3.3v. Be careful if introducing other devices that might work at higher voltages. Also be cautious if using long copper cable runs if the RPis are on different grounds. At any sort of distance, a direct copper cable may not be your best option. You might want to use isolators or some circuit protection if doing anything complex. If you need distance between the RPis, network communications might be simpler. tl; dr: Yes, it can be done. It may not be simple, but you need to expand on what you're trying to do to say for sure. 

I was able to select a variety of fonts with no problems using something like (-s to specify size, -n to specify font name as shown in ). 

You could try adding a sleep duration to the start of your script, or possibly launching it later in the boot process using . Here's an example of a service file I've used to launch after networking is up and running, and with a 10 second safety buffer: 

The RPi 3 running off of a proper 2.4A power supply can provide up to 1.2A to the combined USB ports. If your power-hungry drive requires more, you're going to have issues powering it directly off the RPi USB ports. The RPi 3 itself requires more amperage than a USB-standard port provides. Products vary widely, but even USB 3 provides only 0.9A on standard ports, or 1.5A on charge ports. In your case, make sure the hub provides sufficient combined power for both the drive and RPi concurrently. Non-standard hubs may provide more, but not necessarily to multiple ports concurrently. 

If you are executing those commands on a running RPi, you are writing to the running system () unless I'm missing something in your explanation. I'd expect your command line to look like: 

If you have the RPi set for the default gateway for 192.168.43.0/24, that should be all you need. Alternately, you could simply set up NAT on the RPi and redirect inbound ports on 192.168.1.20 to the inside computer at 192.168.43.2222. 

The first question has to be what the access to the 4 individual RPis is from the outside. Can you access them from your server? Can they access the server? The answer to that question is going to determine the viable solutions. Running the program on the 4 remote RPi as a service sounds like part of the solution. Write the appropriate startup scripts (see man update-rc.d, this link for a discussion). If properly written, it will be easy to stop and restart the program as needed. As to updating the program itself, rsync (in combination with ssh) sounds like an easy solution. (see man rsync). You could initiate rsync from "inside" (the remote location) or "outside (your server) as needed, depending on connectivity. If it is program source code that needs to be updated, you might use an automated git process. If the program has significant installation requirements, you might investigate creating a private deb repository and having the RPis update with apt-get regularly. 

GNS3 shows in the raspbian repo, but dynamips seems to be missing. A quick google search indicates that there are some issues due to the ARM architecture of the RPi affecting performance. Raspbian seems to lack libpcap-devel which is a dependency for compiling from source. Somebody on the RPi forum has indicated success with dynamips. 

By default, if you're not , you're not "administrator". You can enter at the command prompt to see who you're logged in as. If your user is a member of the group (assuming you're running raspbian), you can execute commands as using . To see what groups your current user is a member of, enter at the command prompt. This can all be customized, so all bets are off if you're using something than a stock raspbian configuration. 

It allowed me to get a more current version (though not the latest) of node up and running within minutes on my existing Raspbian installs on older model Bs, although you really need a 2B to run anything heavy. 

You can configure your system to automatically log into the command line by creating a file in with the following content: 

Yes, you can do this. There are many guides on configuring various servers that you can locate with a bit of googling. You'll need SATA-USB adapters for the drives and likely a powered USB hub. Fans are probably not required, and a lego case should be fine, so long as there is adequate ventilation. If you can be more specific about what you are trying to do, we can probably provide better answers.