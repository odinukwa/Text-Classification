If using the new hostname will be accessible at myhostname.local If is disabled, the new hostname will be accessible at myhostname.domain.tld as long as there is an entered in the DNS zone file. 

Will allow the USB memory stick to be mounted by a user ... but will not be automatically mounted at boot. 

In order to get recording to work from my USB headset, which may be approximately the same... as long as the default sound card drivers work... I needed to select device 1 as follows: 

And you would like to know why there are no interfaces listed even though you still have the WiFi dongle attached to the system... There are a few questions: 

So, it seems that is has two locations for with the user Remove the second one, and see what happens. 

If so, then you'll need to find the datasheet for the board. The transistor can be setup to activate the coil on a low input... i.e. Ground the input terminal. Or it can be setup to activate the coil on a high input... i.e. 5V applied to the input. If you can't find more information online about that particular board, try asking your local shop for more information. Most electronics shop people will talk your ears off if you ask a question or two... I know, because I was one once. 

Plug your modified miniSD card into your Pi. Plug in your power cable. Wait 60 seconds. Plug in your USB cable into your Raspberry Pi and your PC. Run on your GNU/Linux machine and wait until you see the serial device register as something like Open a serial terminal program such as . Change your serial device in the program to match your OTG registered Pi. Press Enter 2 or 3 times and wait a few seconds. 

The relay was designed to be operated with a +5V signal, according to its specification. The Raspberry Pi GPIO outputs 3.3V signals. So, this relay is not usable as is with the Raspberry Pi. You will need to either create an external transistor circuit that will control a 5V signal, or use a different relay board. 

It's important to remember that the alias needs to be created in the proper user's environment. So, if you run as , you will need to create the alias in a shell. 

Check that your network is up and basically working by trying to ping a machine on your local net by IP address (). Check that you can talk to your router by attempting to ping the internal interface of your router by IP address (). Check that your router is routing by doing a ping to the external interface of your router by IP address (). Now try to reach your router's router by attempting to ping your router's default route by IP address (). Success means that you can reach a remote machine – specifically the machine that your router will be forwarding all of your Internet traffic to Now verify that it is all working with a to ping something far away by IP address (). 

With NOOBS the initial setup has to be done with a directly connected keyboard and display, isn't an option. So you'll either need to set that up or pick an OS for your initial install. I've been having good luck with Raspbian Stretch which you can download here. Then, in the root of the SD card, you'll need to put a file named – it can be empty. Just mount the card on your Mac, the SD card will show up in Devices in Finder and will probably be called – then it Terminal do: 

Use to check it DNS requests are getting resolved. Use a well known server by IP address (e.g., 8.8.8.8 or 1.1.1.1) –  Then try the same thing using the DNS server that you have configured. Then try pinging a "new" host (one that you're confident isn't in your local resolver cache. 

There are a number of questions asking about installing/running FreeBSD on the Pi – it looks like there are a lot of problems. Is FreeBSD runnable on the Pi? How can I get started? 

The problem is that Stretch does not run Bonjour out of the box, so the name of your Pi is unknown. You should be able to connect if you: 

A lot has changed, for the better, since the early days of FreeBSD on the Pi. In my experience installing and running a recent version (11 or 12) is pretty painless these days. Here are the steps that work for me on the "big" boards – I don't have a Pi Zero so I can't speak to them: 

Perl is a programming language and associated interpreter. happens to be written in . The probably has to do with your file permissions when you setup It's probably a good idea to stick with which is far simpler to setup and use. is probably not the application for your use case. If you are planning on accessing your files via the Internet and a home based web server, I highly recommend securing the connection via TLS... self-signed certs are fine as long as no one else is connecting to the home server, and you know they were generated by you. Superuser: Self-signed certs for home server question If you have no idea what any of this means... I highly recommend that you don't open your network and home file server up to the Internet. 

When prompted for what do to with new certificates, choose . And then select the with space. Test that it works: 

Enabling the RPi OTG USB Serial Console Service In order to use the OTG Serial port as a console, you will need to enable the service on the RPi. If you have a GNU/Linux host machine, this can be done directly on the miniSD card as detailed above. However, it can also be done by booting the Raspberry Pi with keyboard and monitor attached. Then enable the serial console service: 

You can easily experiment with adding a parallel capacitance. Simply solder a small value capacitor in across the C1 capacitor listed in the schematics. To lower the overall capacitance value, you'll need to replace the surface mount cap on the board since the board doesn't seem to have any pads to attach series capacitors. 

The screen itself looks like it work just fine. However, the neither the HDMI cable nor the USB cable that accompany the unit will work with Pi Zero. 

And then change the root partition in your to You can do this on your Windows machine, just like you did to add the IP. 

On exe's The executable format in GNU/Linux is the file format. However, most compiled executable programs have no extension. Any file can be executed if its execute bit is set in the file permissions. Usually a compiled program will have its execute bit set automatically by the compiler/linker. However, if you compile a Pascal program and it doesn't execute even after compiling without errors, you may need to set the execute bit as follows: 

Take some time to read through the documentation for the module and your library. Then if you still need help tell us what you've tried and post the code that you're working on (or a relevant snippet). 

Well, 2GB is the limit of a signed 32-bit int, so you might well be right. Why is it signed? That's a harder question – it could be just defensive programming against the chance that somebody used an int where they should have used in unsigned int. Or, it could be that the math involved needs negative numbers. As to why it hasn't been compiled with large file support, that doesn't make sense to me... 

Note also that if you are connecting directly from you Linux machine to the Pi there is a slim chance that something is failing in the auto-crossover negotiation and the network isn't up, you can check this by looking for flashing lights at the Ethernet plugs and also by running on the Linux machine to see if the network is up. 

If you have a clear shot to the buoy you should do some tests. You may be able to get considerably more than the nominal range with no obstructions in the way. Do a test on the beach or in a field where you don't have to go for a swim... On the shore side there are "tricks" you can do to improve the efficiency of the antenna. That would also help with your range. A search on will net you lots of ideas to try. 

A quick look at the STM32 F4 info on Wikipedia shows that it has I2C and SPI interfaces as well as a lot of GPIO pins. At first thought I2C or SPI seem like a better choice than GPIO both for economy of pins and because they handle a lot of the inter-device protocol issues for you so that you can focus on getting the data you need from the STM32. You sound like you have given this a fair bit of thought and you must be pretty comfortable with a lot of this project... So, at the risk of stating the obvious and hoping that I'm not way off base, a good way to start might be to block out the functionality and where the responsibilities lie – for example it sounds like you're planning to do EKG capture on the STM32 and communication with the SIM808 and, I assume, coordinate things and provide the user interface with the Pi – so the next step could be to decide how the devices exchange information and build a simple mock up to test the interfaces. Try to minimize the coupling between components so that you can test each one on its own. I'll stop for now, it feels like too much unasked for advice, but feel free to ask more questions. Hopefully others will jump in as well. 

You can also check if the default password is what is expected or change the default password by modifying the file on the SD card. The instructions for adding a new user included in the link @Ghanima posted in his comment should work as well. Update From your comment, it seems you are trying to install Noobs without a display, perhaps these instructions will work for you. They are a little on the old side, but perhaps they will still work. My advice would be to download the official Raspbian image which is a lot easier to work with on initial install without a keyboard and monitor. 

To more directly answer the question... The DAC8532 on the board is not an SPI device. It accepts serial input into its shift register as can be seen on its datasheet However, it's not strictly SPI. The device is not tolerant of SPI protocols. 

There are some shortcuts for path names. However, using the full path should be more error free for a beginner on UNIX like operating systems. I recommend reading through the Free Pascal Documentation, since there be some changes from what you are used to in other compilers. 

Simple Debugging of X11 SSH Connection There is no need to start X11 manually on the Mac side. If you use the option when trying to connect via ssh, you'll get useful debugging messages. Towards the end of messages, you'll notice that X11 is started automatically: 

Have Xwindows running on the local host. Enable X11Forwarding in sshd_config Use the option with ssh 

So, on a system where has not been installed, installing will also install . However, is not the same program as , and seemingly does not rely entirely on the cache. So, in order to properly setup the command is required. There is a clue in output when install and pulling in as a dependency. 

CA certificates are located in as well as and in some cases . In general CA certs should not be manually added to the local trust store. There are reasons why certain CAs are not included. Without further research, it's unclear why this particular CA root cert was not included in Raspbian. It seems to be included in my Debian 'Buster' installation running Brave Browser. All trusted CA certificates are added to a main trust store at . The main trust store is updated through either through: 

If those all work then you have a network connection that is working at the IP level. If any of them fail, then that is the spot to start investigating further. Next test that DNS works. You could: 

Create an empty file named in the root of your SD card, and Figure out the IP address of the Pi (see here if you don't know how), and finally 

In cases like this it helps to break the problem down – which in turn means knowing something about the pieces that need to line up for a network connection to succeed. Much of this information isn't specific to the Pi or it's OS, but it will be helpful to know the tools and foibles of the particular hardware and OS that you are using. This question and its answers may help: How do I set up networking/WiFi/static IP address?. Testing with other devices on the same network may also help pinpoint where the problem lies. Rebooting often works wonders. In general you want to start close and expand as you test, so you might: 

Yes, there is. Take a look at the Raspberry Pi entry on the FreeBSD Wiki and also this question and (especially the last) answer. 

Download an SD card image (both STABLE and CURRENT images are available, for version 3 boards look here for the 64-bit CURRENT build) details of what is working are on the wiki. Decompress the image 

If the SD card isn't called substitute the name you see in Finder. Then eject the card and put it back in the Pi and reboot the Pi. Next you need to figure out what IP address the Pi has been assigned. I'm assuming that it is "headless" so you can't just watch the console. That would be too easy... So, take a look at this question: Find Raspberry PI address on local network, my favorite method is to the broadcast address on the network () then use . Once you connect to the Pi run the command and permanently enable it is under Option 5, Interfacing Options. As I understand it, the trick in step 1 is a one-time thing. 

Once the Pi is up and running, login – ssh, keyboard & display, or serial all work (for credentials use or you can also login with if you're on a serial line or the keyboard) and have fun. If you are doing a headless install it may be a trick to get to connect to the Pi. Find Raspberry PI address on local network gives some good techniques for finding the IP address assigned to your Pi. Once you have it: