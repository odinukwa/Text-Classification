You should set the switch number and priority before adding it to the stack. You should also define the new switch on the stack before adding it to the stack, and you should verify that it is running the same IOS version as the stack before adding it to the stack. A switch will not automatically change its priority when added to the stack. On the stack you should have the switch priority set on each the way you want. Don't depend on an election of equal priority members. The best practice is to manually set the switch priorities so that you have a deterministic failover. For instance: Existing stack: 

Sleeping devices don't tell you anything; you must first wake them. Hosts are off-topic here. There will be no RFC because the IETF doesn't deal with ethernet standards, and I know of no such protocol from the IEEE. 

The routing table entry is a network. If traffic is destined to , the routing table will be searched for the longest match to that address. The longest match is , so the traffic destined to will be sent , the gateway to the network. The router assumes that knows how to get the traffic to . 

It is all binary, just like IPv4 where you have addressing that does not map to the octet boundaries. 

Actually, you do not tag on the access interfaces (those connecting to the host devices, like PCs and printers) because most end-devices do not understand VLAN tags. You tag on trunk interfaces (those carrying multiple VLANs, like the connections between switches or from the switch to the router) in order for the network device receiving traffic from multiple VLANs to be able to separate the traffic back into the correct VLANs. 

You don't have an Area 0. Areas can only talk to Area 0. This is an OSPF basic feature which helps prevent routing loops. Router 1 needs to be in Area 0. Try something like this: Router0: 

That particular switch model, WS-C2960X-24TD-L, doesn't have PoE. Cisco Catalyst 2960-X Series Switches Data Sheet 

From the perspective of the network, you need the physical connection between the two routers on a common subnet, but you also need the routers to share routes, either through a common routing protocol, or by configuring static routes. You need to make sure there are no overlapping routes, too. From the perspective of the computers connected to the networks, you may have a problem with DHCP. You will need to make sure that the routers only connect to each other on their own link, not the LAN of the other router. When a host requests DHCP, it will use the first DHCP response, which may end up being the wrong DHCP server if the two separate networks are connected via layer-2, not layer-3. 

IANA maintains the IANA IPv4 Special-Purpose Address Registry and IANA IPv6 Special-Purpose Address Registry pages. You can filter any ranges marked as False under Globally Reachable, plus the multicast ranges ( for IPv4 and for IPv6). Anything else is a valid, public IP address that can be used on the public Internet. 

You did this on the Van Nuys router, pointing to the Seattle router, and vice versa. You need to do the same thing for any other networks on the other side of the Seattle router, including the link from the Seattle router to the OK City router, and the network on the other side of the OK City router. From Van Nuys, those networks are on the other side of the Seattle router, which is the next hop router for the networks attached to the Seattle router. You will also need to do the same thing on the OK City router for the networks on the other side of the Seattle router from the perspective of the OK City router. 

That is only true if the attacker is trying to spoof the gateway MAC address. At its core, ARP spoofing is responding to an ARP request with a spoofed reply pointing to an incorrect MAC address, and it could be for any IPv4 address, not only the gateway address. The spoofing can be tricky because the real host will also respond to the ARP request. The ARP request is a broadcast so that all the hosts on the LAN get it, and both hosts claiming the IP address will respond with a MAC address for that IP address. The first ARP reply received will be entered into the ARP table, and if all hosts are on the same switch, or the responding hosts are on different switches than the sending host, you cannot predict which one will be received by the requesting host first. In the meantime, the requesting host will receive an ARP reply from the other host, and it is supposed to update its ARP cache and use that MAC address for traffic sent to that IP address. ARP table entries also time out, necessitating more ARP requests at a later time. 

When using logical, or virtual, that is opposed to the physical version. A logical address is something like an IP address, where it really has no physical presence, but a physical address is like a MAC address where it is burned into a PROM on the interface. (In practice, MAC addresses can easily be changed, but the one burned into the PROM will still be there for the next time you restart). On the other hand, IP addresses are assigned in software. When it comes to logical connections, topology, etc., you have to remember that how devices are connected physically may look different than how they look logically. For instance, VLANs, trunks, tunnels, etc. can all affect how traffic flows that is different than how physical links seem to be connected. For example, a tunnel has two endpoints, but it may actually pass through many different links, each with two endpoints. To the traffic, the tunnel is a single hop, rather than all the multiple hops (which may change from packet to packet) that are really how the traffic flows. You also can have logical (virtual) interfaces that behave like real, physical interfaces, but they are software constructs. A good example of that is a loopback interface. 

Switches are not hubs. Hubs repeat a signal on all ports, but switches selectively send frames to only the ports where the host with the destination MAC address is connected. You don't seem to understand the difference between layer-2 and layer-3. An IP address is a layer-3 address. A host will have an IP address, mask, and configured gateway. If the destination IP address is not on the same network, as defined by the mask, it will send the packet to its configured gateway. Switches don't see layer-3 IP addresses since they don't strip off the layer-2 frame to inspect the IP packet; they look at the layer-2 MAC addresses. A switch learns which MAC addresses are connected to which ports by inspecting the source MAC address of any frames coming into the ports, and it populates its MAC address table with this. If the switch doesn't have a MAC address in its table, it will flood the frame to all ports. Switches will quickly learn MAC addresses since it only takes one frame from a host to populate the MAC address table with a MAC address. If the switch has the MAC address in its MAC address table, it will only send frames destined to that MAC address to the port it finds in its MAC address table. When a host wants to send something to a particular IP address, it needs to get the layer-2 destination MAC address (resolve the layer-3 IP address to a layer-2 MAC address). To do this, it looks in its ARP cache to see if there is an entry for this. If it doesn't have this in its ARP cache, it will send an ARP request to find the MAC address. Once it has the MAC address, it will create an ethernet frame which encapsulates the IP packet. It then sends the frame to the switch. When the IP address is on a different network, as defined by the mask, it will use the MAC address of the configured gateway, and it will use the above process to get the MAC address of the gateway. 

This question is really too broad to give you a complete answer. You are really asking about a subject for which libraries exist. What happens when you connect two hosts with a UTP cable in their ethernet ports depends on the ethernet standards. With modern equipment and 1000BASE-T capable ports, the cable does not need to be a crossover cable, and the two ethernet ports will negotiate things like MDI/MDI-X, speed, and duplex. This doesn't involve any program on your host. You need to read up on the ethernet standards. The earlier ethernet standards, without Auto-MDI/X, required crossover cables when connecting two like devices (e.g. host or router to host or router, hub or switch to hub or switch), but dissimilar devices (host or router to switch or hub) could use a straight-through cable. Modern OSes have IPv6 enabled by default, and they prefer IPv6. Also, IPv6 can self-configure addressing. Regarding your request for the whole picture, you need to learn about the network layers. There are multiple models, but the OSI model is something everyone learns. Just understand that these are just models, and don't necessarily reflect the real world. You will learn about abstraction between the layers, and how each layer is independent of the other layers. Ethernet involves both layer-1, the physical layer (multiple different media), and layer-2. IP, both IPv4 and IPv6, are at layer-3, and TCP and UDP are at layer-4. Just because the world seems to revolve around ethernet or Wi-Fi (a separate protocol from ethernet, both at layer-1 and layer-2), IP, and TCP/UDP, don't fool yourself into thinking these are the only protocols at layers 1 to 4. For instance, UTP cabling (layer-1) can be used for various layer-1/2 protocols, even POTS or token-ring, and it can transport various layer-2 protocols, like IPv4, IPX, IPv6, etc. IP is not restricted to UTP cabling, either. 

Based on your addresses, you need to use masks of . If you use subnets any larger, you will overlap the subnets, and you can't do that on the router interfaces. 

The good news is that there is a standard IPv6 network size: . You could use other sizes, but there are some features of IPv6 that can break if you use network sizes other than . The recommendation is to assign a , or shorter, network to a site, and subnet that into networks for each network, even if you have very few devices on a network. Each network can have 65,536 networks. Also, ISPs will not advertise any prefixes longer than . You should use networks for things like loopback addresses, and networks for point-to-point links. A best practice is to not use any other part of the network from which you use a or network. There are plenty of addresses, so get out of the IPv4 "I must conserve addresses" mindset. At any given site, you can use IPv6 prefix delegation to assign networks to interfaces. There are actually RFCs about things like this. For example, RFC 6177, IPv6 Address Assignment to End Sites and RFC 7421, Analysis of the 64-bit Boundary in IPv6 Addressing. 

Based on your updated diagram and edits, you have one obvious problem: multiple routes to the same remote network. You need to prioritize the routes to use the test network when you want to test. In your Ciscos, you should be able to do this, but it depends on how you have the routes set up in the device. One of the easiest ways is to use administrative distance to do this. Set AD lower on the route you wish to prefer and higher on the backup route. AD works with both statically defined routes or routes received through routing protocols. You didn't include the Cisco configurations, so I don't know how the Ciscos get the routes to the other site. 

For a layer-3 switch, the layer-3 module in the switch is a router, and it works just like a router, which works like any other host for ARP. A layer-3 switch is still primarily a layer-2 switch, and the layer-2 switch still acts just like a layer-2 switch. The layer-3 and layer-2 parts of a layer-3 switch are really separate. The layer-3 interfaces (both virtual interfaces and any physical interfaces configured as layer-3 interfaces) will use an ARP table, but the layer-2 interfaces will use a MAC address table. When a host, including a router or the routing module in a layer-3 switch, sends an ARP request and receives no reply, it marks the ARP table entry as . 

The problem is primarily that the torrents are filling you bandwidth in both directions, monopolizing your WAN. 

CSMA/CA is used on Wi-Fi, a shared wireless medium, while CSMA/CD is used on wired ethernet. The closest you come to mixing them would be a WAP (Wireless Access Point) that translates and bridges between Wi-Fi and ethernet. The WAP will use CSMA/CD on the ethernet interface, and CSMA/CA on the radio. 

The WAP showing you 1514 bytes is due to the fact that the frame does not have an 802.1Q tag, and the interface or driver is not giving Wireshark the FCS. From the Wireshark Wiki: 

This is done all the time. Under a switch interface, you simply define a voice VLAN with the command. Something like this: 

The relay agent will send the DHCPOFFER as a broadcast if the broadcast flag is set, in the same manner as the DHCP server would. As far as the client is concerned, it is dealing with a DHCP server, not a relay agent. RFC 2131, Dynamic Host Configuration Protocol: 

You don't even have the pool which you are referencing in the NAT statement. It should be something like: 

On Switch0, you should configure a trunk interface for the interface that connects to Switch1. Use descriptions on the interfaces, including the one connected to the wireless router. Also, you will also need a password on the VTY lines if expect to connect to the switch via telnet. 

ACL placement is important, and the ACL design is dependent on whether it is inbound or outbound. The general rule for ACL placement is that extended ACLs should be placed as close to the traffic source as possible, and standard ACLs should be placed as close to the traffic destination as possible. If you think about the contents of the ACLs and how they work, this makes sense. Changing the location or direction of the ACL is something that you normally don't want to do without changing the ACL itself. 

Default Values of Spanning Tree Protocol Timers forward delay The movement of a port into the listening state indicates that there is a change in the active STP topology and that a port will go from blocking to forwarding. So the listening and learning periods during which the forward delay runs must cover this consecutive period: 

Basically, the control plane is for data destined to the router itself (e.g. routing protocol updates), while the forwarding (data) plane controls what goes through the router. The forwarding plane can make decisions based on what is learned in the control plane, but the control plane itself doesn't make the forwarding decisions. It sounds like you are sort of describing layer-3 switching. One thing to understand is that, ideally, each packet is switched independently of any other packets. You may want to study process switching vs. other switching methods. There are many documents, e.g. How to Choose the Best Router Switching Path for Your Network, which describe the various switching methods available, but this is vendor-dependent. 

Since the router changes the IPv4 header (it decrements the TTL), it needs to calculate a new value for the checksum, otherwise subsequent devices receiving the packet will think it is damaged. This only applies to IPv4. IPv6 has eliminated the checksum, instead it relies on protocols above and below it to do any error checking.