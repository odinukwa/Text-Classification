If you get a black screen on your X11 desktop after Omxplayer is finished, you can use this command to restore your view: 

There is a php.ini setting called safe_mode which must be turned off to allow shell execution. you can see that, and the php.ini location, by opening phpinfo.php in a webbrowser which contains 

My old first gen, 256MB version B, RasPi is never powered off. I put it to dynamic clocking with min.freq of 100Mhz and a max. freq. of 850Mhz, it doesn't need much power and doesn't generate too much heat when idle. To answer your question, when the raspi is always on you can control it, like rebooting it etc, with a Secure Shell SSH. 1) Simply install openssh-server on raspian and set it up (search the web, I recommend using a 2048bit private key auth and pw auth turned off). 2) Add a route to your router for port 22 from your router to you raspi IP. 2a) if you've a dynamic IP you might need to setup a dyndns service for you router that your router registers it's new Ip to the dns service maybe dns-o-matic can help with that, too. finally you can connect to your router's IP or yourdomain.dyndns with a PC windows with putty linux with ssh (cmdline), or remmina (gui) android with juiceSSH, or other app the only scenario imho how a boot can possibly fail are unstable overclocking settings and (failed) updates such as a new kernel I don't think you can SSH on a failed boot, since the LAN kernel module is not beeing loaded and/or the sshd daemon is not running. however when it boots, it boots. there are linux servers in the internet that didn't boot for 10 or more years... so why reboot? (windows reboot / linux be root) 

I found the answer, simple mistake - I was missing a before using the variable. The working code should look like this: 

Choose a GPIO pin (one with GPIOnn in the name, green in the pinout) and connect the red wire to it, and then connect the black wire to any ground pin (marked in black on the pinout) Then to make the speaker sound, here's an example in Python (unable to test so feel free to edit). For this example, the red wire is connected to pin# 11 (GPIO17) 

I'd go for idea 2, using an Arduino for the ADC and something fast on the Pi (maybe C if you don't mind getting your hands dirty) to do the processing, and communicate between the two using serial (there are a few blog posts/instructables on how to hook up an Arduino to a Pi via serial). IIRC it's just enabling some options in the boot.txt on the Pi and getting baud rate right on both of them. 

shows that sh is the default shell, not bash! sh executes the /storage/.profile on ssh login. here's my quick & dirty hack to switch to bash. make sure you have the /storage/.bashrc file and that it's error free. 

(always backup old php.ini. php.ini changes need a restart of your webserver/apache daemon) usually php + the webserver runs as user www-data make sure your /etc/sudoers contains this user something like 

note this can be a security risk!!! finally rather than calling a php script which calls a python script, I'd call the python script directly, or handle a python-script with another python script. There are tutorials howto Configuring Apache2 to run Python Scripts. Since memory is rare with a raspi, I'd rather use event-driven webservers such as lighttpd (easy to configure) or nginx(not so easy to configure) instead of the heavy old apache2. 

I have tested all my GPIO pins in the past, and I know they all worked as outputs. Today I was using pins 11,13 and 15 (Board numbering), and they were all working fine, but suddenly pin 15 stopped working. Now after disconnecting everything I can't even light an LED up with pin 15 any more, but with the same wire and same LED and same resistor I can light it with pins 11 and 13. So it looks like whatever I did, I've unfortunately fried pin 15. I guess I'm lucky the other pins escaped. Has this happened to anyone else, and is this damage maybe fixable (some kind of fuse can be reset maybe?) or is it probably permanent? 

TLDR: very little. It might be audible in a quiet room, but nowhere near loud enough to play any kind of music through (it may be good enough for Sonic Pi, but you may as well use headphones). For any situation where other people might be talking, you will really want some kind of amplifier IC or circuit. Like you said, it is line level and is not designed to drive anything of significance. 

So I need to measure the temperature in my conservatory, and with all the doors shut on a summer's day it gets pretty toasty (uncomfortable for more than a few seconds). My question is what sort of temperature range would be OK to use the Pi in? 

Ah, the class you want to run is not in the jar! Then add the current directory to your classpath as well as the jar. 

This is a really vague question, or set of questions. You might want to start by searching the internet to get some ideas, and then ask more specific questions once you've decided what you want. You could search for "raspberry pi robot" or they're often known as "pibot" for short. There is boatloads of information available and loads of different designs you can use as starting points. Basically, if you're building a robot you're going to want to use some kind of motor, so you will need some kind of interfacing board between the pi and the motors. An Arduino can do this, or something like a Gertboard maybe. One starting point might be The MagPi issue 6, which talks about the basics using an old BigTrak. Other issues of the same magazine deal with other aspects of the design as it is built up. Or you can buy a book ("PiBot: Build Your Own Raspberry Pi Powered Robot") or even buy a basic online course (same author, same title). You might find some further ideas at let's make robots. Yes, you're going to have to solve the power problem, presumably using some kind of battery-powered supply for the pi and all the other stuff. Yes you can use sensors, lots of different kinds. Yes you can also stream camera images if you have wifi. I don't really see why you'd want to synchronize two raspberries but for sure they can communicate with each other, probably again over wifi. 

An expansion on Steve's comment on OP This is the pinout of the Pi3's GPIO, it's oriented so that if you have the USB and ethernet ports at the bottom, the top right pin (5v, pin 02) will be at the top-right of the Pi. 

If you just want SSH-like remote terminal without Ethernet, you can use a serial TTY to USB converter, which plugs into the Pi's serial GPIO pins (Tx&Rx plus 5v&Gnd), and the USB end can go into your laptop. This will allow you to control the Pi's terminal from the laptop (with some configuration). For moving files, you'd probably want to stick with SSH (SFTP operates over SSH) using a USB Ethernet adapter to keep the onboard Ethernet free. 

You say it works fine now but it sounds quite inefficient and it will take longer and longer as you add stars and add frames. To speed things up you should look at reusing the Rect objects, and using the method to move each Rect object to where you want. Then you don't have to delete and destroy objects, reallocate memory, and create and resize arrays for each frame. I don't know enough about pygame to know whether painting 200 Rects black and then 200 white is better or worse than just clearing the whole surface black, drawing your white dots and then calling (without passing all the rects). 

The motherboard switch pins don't require huge amounts of voltage or current, as jet mentioned in the comments you should be fine with any of them. I'd go with either of the PiFaces as they'd have the best documentation for hooking up and programming. If you don't want to tie up a relay board, you would still be fine with some transistors and a breadboard, but it's up to you. 

The Raspberry Pi only has USB host ports, and Android has a client port that can also be used like a host port through OTG. Therefore the Pi can't be connected to the Android when the Android is an OTG host, as the Pi cannot be used as a client. The Android could be connected to the Pi as a client, but this doesn't involve OTG, just normal USB operation. Hope this is clearer than my previous answer.