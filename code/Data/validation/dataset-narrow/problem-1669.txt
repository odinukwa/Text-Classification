Current situation: a simple imageviewer in a loop. I'm displaying still images by using the framebuffer via . I generate the list of images by a simple script right before firing it up. It runs in an infinite loop. To stop the slideshow, my script fetches the pid of fbi and kills the process. Now I'd like to have some extra functionality by implementing a physical 'PREV' and 'NEXT' button, attached to the GPIO pins. The most simple approach will be to launch a seperate process listening to those 2 buttons, kill the process at press, re-write the imagelist and restart . While this is easy to design, something tells me there must be a better, cleaner approach. I assume I could modify the fbi source and implement the functionality right into it. This will take an awfull lot more effort though as my coding skills might not suffice to bring this approach to a good end. What other approaches are possible? 

Use the Raspberry Pi Video Modes reference link to yield the above results and finetune. After rebooting the Pi, your monitor firmware might show errors like 'out of sync' or 'resolution not supported'. Lower the resolution and/or refresh rate and try again. After testing I got good results even with small Chinese $3 adaptors connected to the cheapest monitors available in the shop. Out of the box the converter gave a blank screen with the monitor going into powersave mode seconds after. After following the above steps my now shows: 

If you write to a mounted network drive there is no reason why the Pi would write to the SD card. Unless your download application uses the SD card for temporary storage until the file has been downloaded. This would be easily fixed in the application's config file. Lately this forum is flooded with people scared about worn out SD cards. While it is theoretically possible, IMHO chances are low it's going to happen. So again, people, unless you're moving tens of Gigs every day like there is no tomorrow, please stop being scared about flattening out your SD. 

You probably know by now that it's a power issue. We also use POE splitters and indeed they work fine. Perhaps your adaptor isn't strong enough or there's too much loss through the cabling. We have good results with Ubuquity POE adaptors but they run on 24 and 48v which we counter by placing a buck convertor between the wiring at the Pi end (so not at the splitter end). 

Over the past few years we've been pulling plugs out of hundreds of Pi's, every day sometimes multiple times a day. We did have 1 or 2 Pi's blowing up, but I sincerely doubt it had anything to do with pulling the plug. So I wouldn't worry to do the same. Indeed, the worst that can happen is that you'll damage an SD card, which can be recovered easily by reformatting it. But IMHO you'll need to be extremely unlucky to even get into that latter trouble. EDIT: rough calculation: at least 100,000 plug pulls (or the equivalent by power cuts or switching off the mains). 

If you're talking about this screen I'm afraid there is no drivers available for it. I've asked a similar question on the RaspberryPi.org forum a while ago but the question was left unanswered though. I've also tried to rewire, but no avail. I'm afraid your LCD will have to stay married to your old Pi. 

Both facts in mind, I don't think this model is too bad. It's well build, safe for all equipment (cfr. 'Powered by SMART IC') and it certainly won't eat 50 watts out of the mains grid so it's quite economic also. Additionally it will last forever because it's not nearly operating at full capacity, and offers enough space for future expansions. I'd say go for it. 

Webmin can be quite a resource hog and, while very powerful, it might be overkill if you just want to get a quick working webserver environment. I'd try to go for vestaCP. It's quite easy to install (just 2 commands) and comes with apache, nginx, mysql, php, python etc. It doesn't come however with sqlite, but I don't see why a simple wouldn't work. I haven't tried to install it on a Pi but I cannot see why it shouldn't work. Don't be fooled by the fact vestaCP is less known compared to webmin. I'm running it on a lot of webservers and am quite happy with its performance. 

You will need to somehow check your mailbox, process the mails and parse the contents to the system shell. There is probably no turnkey solution for this; you will need to develop your own. disclaimer: I'm giving you my ideas but there's tons of ways and starting points really. What's probably the best solution? Having a Python script running on the raspberry doing all the work. PRO: clean, single server solution CON: (IMHO) it's easier to find PHP examples for doing this than Python ones. What would be my personal solution: 1) An external PHP webserver checks the mailbox every minute, processes the contents, parses the contents in a queue 2) The raspberry checks that queue every minute via a simple cron'ned or and parses that contents to the system in a similar way as you did manually at the command line. PRO: the least amount of overhead services on your raspberry: no need to run a PHP server. CON: potential security issues because unsecure communication between the php script and the raspberry. TLDR: This most probably will require some development. First ones that come in my mind is Python, Perl or PHP. Have done something similar in PHP this would be my first language of choice. However if you want to run PHP on your raspberry, this will require you to run (at the very least) a PHP server which obviously will eat valuable system resources. Alternatively you can choose to run the parsing script on an external webserver which already runs PHP, and have the Pi to check that webpage regularly via a cron. No matter which language you use, if you're leaning towards basic experience level, I'd suggest you don't use a gMail mailbox; these are only accessible via secure layers and - whilst definitely technically capable - will yet add another barrier of problems in your development process. Choose a more basic mailbox (at your provider perhaps). Anyway you can setup your gMail to forward to this address. 

It might take a while before you find the right exact overscan numbers for your system. use to start, to stop. In you just list all pictures line by line. This example uses the flag, so it quits after it finishes 1 cycle of the slideshow. I need that because I have a seperate script which manages the file. I personally wouldn't show the IP on the screen itself. Rather use a crontabbed script to ping a server with the hostname and IP. Method to do this can be found over here, I've submitted this a couple days ago on this very same site. 

Did you use the correct pins? There is a difference between the old Rev1 and Rev2 GPIO layout so you might used a wrong reference. If you plan to do loads of led GPIO, the time to designa GPIO LED overview board might save you a lot of time in the future. A good reference for pin layouts is $URL$ However actual GPIO numbers might differ depending on which lib you're using. 

If you do a request to an external webpage, you can use this identifiers to redirect you to the desired page. The solution below will allow you to setup your raspberries without needing to know where they need to point at beforehand. It logs the requests in $URL$ so you can identify new raspberries more easily. The scripts on both sides probably will need some fine tuning, but I hope it helps you to get started. It obviously requires an external webserver with PHP. On the Pi side: (example for use in bash) 

You could shut down the Pi by just disconnecting the power line. Many claim however it could potentially damage the file system - or worse. We're shuting down a lot of Pi's with simple radioshack 220v mains timers. We've done this since a couple years resulting in about 50,000 of raw unplugs and cold reboots. I still have to see the first Pi not wanting to spin up in the morning. If you follow the book it is not the right thing to do, but the effect depends on your exact situation. What works for us might not work for you. I do understand we're lucky. 

The power supply potentially could draw 50 watts. Potentially. If it doesn't need all that power, it will use less. Not completely percentual less, but less nonetheless. Your calculation is that you need 21.5 watts. But again, these are the manufacturers' specified maximum equipment draws. 

We manage an amount of Pi's as Digital Signage clients. We have plain picture and HTML based versions. For HTML we use Chromium. While we don't have a direct need for HTML5 video at this very moment it was something to try out. Since the first arrival of the Pi2 we have been trying to get acceptable speeds for serious javascripting, basic HTML5 and HTML5 video. Because its presentation as being the ultimate HTML5 browser, we also tried epiphany. Our conclusion: painfully slow and not ready for mainstream. Would love to hear other peoples experiences though. 

We had the same issue a while ago. (Considering you don't modify the kernel) our conclusion was: It's easy to reset passwords. A simple Google search shows you how to do this. It requires an SD card reader and a standard Windows (or Mac). Our solution was to port all development to C. (Nearly) nobody will be able to read your keys on that. And use a secured connection (like TLS) to communicate to your server. That will eliminate traffic sniffing. If you want any hardware asset tracking, you'll have to boot up the raspberry anyway. Therefore you can make a script to hardcode MAC and Serial number into your source code, and compile it right on the device itself. If you want more information on that I'll make a list on how we did that. 

As written a couple times before I'm a big fan of install scripts and would implement these at any deployment with less than a couple hundred Pi's. Pros: 

If you mean overkill because there's too much juice available, you're right. If your concern is that you'll spend too much money on power, I think you shouldn't: 

I'm trying to show my local IP on an LCD during startup. My script worked fine during normal testing via the command line, but when called at startup it doesn't seem to be able to fetch the IP. I tried to call the script via crontab and init.d. Both sequence locations didn't return the IP. My obvious guess is that the interface isn't up yet. But when/where exactly can I call my python script so I can get the IP address and use it as a string? 

AFAIK there's only one way to mount Extfs on a Mac and that's via Paragon Extfs for Mac It's commercial software but they do have a 30-day trial. Works great for me. 

The thing is most probably you'll need to login to the Pi at least once anyway. If your desktop can write extfs, you even can eliminate that first human login and run the setup script automatically. I have used this method in real life to deploy hundreds of our Pi's and I'm very happy with the results. 

If you're on anything before the Pi2, forget it. Eclipse is written in Java, hence you'll need a JRE (Java Runtime Environment) in order to run it. In a standard Raspbian this is available, but it doesn't seem to work out of the box. Perhaps these links can help you: How to install Oracle Java SE Embedded 7 on your RaspberryPi Installing Oracle JDK 8 on Raspberry Pi 

If you're using to display your pages you'll need to find a way to get this serial number pasted correctly. I cannot help you with that, I suggest you open a separate new question to get answers on how to do this. On webserver/kios.php 

Connecting to SSH on your Pi remotely will require a public IP address. More and more ISPs use NAT for 2/3/4G connections, and therefore give you a private, non-routable IP on the client side. The main reason for doing that is to limit the usage of Public IP spacing for the huge amount of mobile connections. There's nothing wrong with that, as it won't affect the functionality and/or usability of most - if not all - domestic users. Many ISPs however have separate solutions for M2M (Machine 2 Machine) connectivity. These connections are routable (either via traditional public IP or via a specially assigned - but still Private - IP subnet). The latter will limit routing only within the ISP's network. Another way of taking more money out of your pocket? Not quite. These type of subscriptions mostly are cheaper per connection compared with a normal domestic one, but mostly have to be bought in bulk. What, if, and under which terms your ISP can give you a routable IP depends on your ISP. Some ISPs doing direct sales, others via their Business Solutions division, others only via VARs (Value Added Resellers).