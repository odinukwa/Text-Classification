talking about computers in general is offtopic here. regarding the RPi, it's most likely your power supply will send a smoke signal before anything else breaks. however, if you're talking about components attached to the board, the first candidate is the power capacitor, it is heavy and bulky, but has small soldering pads and is very likely to just fall of the board. 

use Raspberry Pi (version B), it has the usb/network connections you may use to plug anything you want for easy development and reading the results back when testing. also, it has the monitor connector and can be used standalone (what's the point of using Raspberry Pi, if you need another computer standing by next to it?). get an GPIB-enabled power supply and some kind of USB GPIB controller to be able to drive your power supply into the mode you need for testing. depending on details of the part, you might also need a few I2C connected ADCs or sensors of some kind, cannot tell unless you explain your testing routine. regarding the software part, i'm not sure there's ready-to-use solution available, but RPi can be easily scripted using , and there are plenty of libraries to interface your software with the hardware. 

yeah, and there's something fishy is going on with your itself, it should never require to access the file, check if permissions and ownership are correct: 

your program cannot just end, it's supposed to make a system call, that returns the control to the operating system. also, this is totally off topic here. 

You cannot lower voltage with a 24kohm resistor. Please, use a proper 5V 2A+ power supply, unless you want to permanently damage your RPi and/or your current supply and successfully convert them into the puff of magic smoke. 

there's no module 'gi' installed on raspi by default, but nobody can stop you from installing it manually. other than that, there's a nice command that shows a lot of information about available networks, so I suppose in the unlikely event you cannot install 'gi' on raspberry, you may just run from python and catch/parse the output. 

and there's more detailed explanation if you need it. please, be very careful when working with 220v, it might easily kill you. 

Clearly, your BEETEL 450TC1 router does not forward the port 80 from outside to your Pi installation. You should check your router setup and make sure 1) the forwarding is enabled and 2) it forwards to the correct destination. 

don't put in your command, the correct command would be (no anywhere in sight) install MTA for jobs to send you the feedback and error messages or redirect their output to disable whatever you have in your cron table, it is preventing your RPi from shutting down 

TV formats are saved in config file that is most probably read only once at the boot time, so I think you'll need to reboot to change from PAL to NTSC. Or maybe someone knows the method to avoid the reboot. 

there are qt libraries available for raspberry pi, so basically it should be not very difficult, just download the source and and see what happens. you might get prompted to install dev. libraries for qt, though. 

You have to start troubleshooting from the other end, from the beginning of data. Make sure your adruino really captures your sine wave fully. I suspect, when your duino is sending the block of freshly captured data the capture routine is not called and this results in missing samples. Besides that, there are time proven data control signals used in serial transfers, XON/XOFF in software or RTS/CTS in hardware. Use them. 

you have to install and setup a entry to run this script, according to a very detailed explanation. there's also an extended version of this script available at the same url. 

you may get another SD card and USB SD card reader, then you may put a fresh image on your new card, put the old one in the USB reader, and modify the old one from the familiar linux environment. 

Some time ago I wrote an article "Raspberry Pi :: Monitoring CPU temperature with RRDTOOL" about the same problem. My solution includes receiving temperature from CPU, saving it into the round-robin database and building a nice graph as .PNG file, that is quite easy to put on the web page -- just copy it wherever you want. I hope you'll find it useful. 

the simplest is the hardware debouncer, that consists of RC filter followed by schmitt trigger, or just RC filter, if you are lazy. parts are cheap, available everywhere and could be easily accomodated in whatever circuitry you're going to connect to your Raspberry Pi. 

does not require root access to run (I could run it just fine from my non-root account) and command confirms this: 

you should use neither. one has too high voltage (5.5V is well over allowed max 5.25V), the other does not have enough current (recommended is 2A, not 1.2A, and it's very likely to throw the voltage far below 5V when used at high current rating). looks like a time for shopping, you should get the power supply (preferably NOT a cheap phone charger), that provides constant 5V (sharp!) with 2A as a MINIMUM rating (3A, 6A, 10A and 150A are fine, 1.2A is not). 

4.75 is the lowest limit for Pi, you definitely have to invest an outrageous amount of about $5 into the decent (5V sharp, 2A+) power supply. 

while recognizing this as a funny and great hack, i'd advise against using it for anything except the proof of concept demo, because broadcasting on unlicensed frequencies might break the law and/or result in legal problems and/or heavy penalties. please, use only licensed equipment to broadcast within the permitted frequency ranges and output power limits. you'll never know if there's a pacemaker-equipped person in your neighbourhood. 

where is your user name (use to find out if unsure). After that you might need reboot, relogon or just reinsert your device depending on the settings you've changed. 

The first tutorial describes setting up RPi for debugging, the second explains how to use JTAG to program MSP430. A slight difference that explains where are those extra wires going. Besides that, MSP430 JTAG support is very limited and could not be used with fully JTAG-compatible devices. You might (though very unlikely) get away with two wires if your goal is only to program your RPi, but what's the point? Wires are not expensive nor hard to find, use as much as explained in the tutorial and be safe. 

There are ways to Make Windows XP drivers work under Linux through ndiswrapper, but since you're using ARM processor, your best bet would be to get another cheap USB WiFi adapter, could be easily found for $10-15 on ebay. It's very unlikely you'll be able to find working drivers for your current adapter. 

please, don't connect your Pi directly to the internet, use router for that purpose. this way you may put all the necessary authentication in the router settings and share the same internet connection between several devices (PC, phone, tablet, Pi) at the same time. 

there might be a few instances of gpsd running at the same time you're unaware of. kill 'em all and restart gpsd: 

If I were you I'd implement a temperature monitor, that shows how hot was the CPU for the last day/week/month and if the temperature does not exceed 70`C you should not worry about it. I have two PIs working 24/7 in closed boxed without holes. Nothing happens (my real temperature data is included in the before mentioned URL). 

Actually, the second one is preferred, especially if your delays are quite long, as I suspect. And don't forget to use the appropriate include file: 

The thing is called X10, it's an industry standard for most home automation tasks, including controlling lights. The control signal is sent over the same power line your appliances are connected to. To be able to control everything from the computer, you might want to read about X10 Computer Interfaces from OpenRemote web site. The model you're most probably are after is CM15A with USB interface, that has Linux support. Also, it might be a good idea to check ebay for X10 enabled wall sockets and screw in lamp modules, these can be bought quite cheaply, in the $10-20 range. 

HDMI splitter/switcher will easily go beyond several hundreds, it might be easier and cheaper to get one RasPi for every TV you have and control them all over a network. 

simple web-camera + "motion" software (you may install it with 'sudo apt-get install motion') should take care about the first part of the question. motion has plenty of parameters in the configuration file, you may run external scripts when the motion is detected. the second part of your question (re: SMS) will require internet connection and subscription to some kind of SMS sending service. there might be free ones available in your area, but I cannot promise you that. basically, the SMS delivery service company will provide you with the SMS sending scripts written in a few languages, you may choose the one you like and use it to send messages when "motion" detects anything interesting. 

100000 (100k) of 32-byte hashes will occupy about several megabytes of memory and take less than a second to calculate. I would not worry about any caching unless you go as high as tens of millions of keys. 

you'll need some external circuitry to do that, because afaik the raspberry does not provide the battery voltage anywhere in the system: $URL$ 

I'm really sorry to disappoint you, but RasPi is more like a computer running Linux with GUI and the whole nine yards, than some kind of microchip intended for being accessed with an iron and/or the breadboard. Sure, there are GPIO pins, but so are "IO pins" in my desktop inside the PCI connector. If you're looking for a cheap linux playground, where you may interface standard USB/HDMI/video/audio devices to a palm-sized computer, you are on the right tracks with RasPi. But if you're looking for something more hardware-related, probably you'd be better off with Arduino or BeagleBoard or hundreds of other microcontroller-based designs.