Especially in a scenario like what I have in my country, C fits in perfectly. As an alternative, I also would recommend Javascript but I think it is already in one of the other answers. 

Overview about Cloud, specifically Azure Why Azure (or in general, why cloud service versus say a database server) Cloud Services (data services, web site services) Virtual Machines (and then reconfiguring them to Active Directory, ADFS and FTP) Using items from the marketplace to complete a project. Pricing considerations between cloud providers (Azure, AWS, Google) and conventional solutions (like web hosting, blog hosting providers, VM providers, SQL db providers) 

I would go further, ask them to use the Camel Case (any one of its variations) but since not all will end up developers in your course, perhaps this is not useful. I emphasise preemptively solving the problem of syntax errors here. If syntax errors have already happened, I guess, you fix them line by line. Alternatively, simply start from scratch, follow the above 2 guidelines is what I tell my students. 

Along with the several reasons mentioned above (especially the part about educators themselves not having used version control in their learning days, and the part where it was written that version control is more of a work place concept), one more reason why we (as in universities here in India) cannot teach is because we simply don't have git server access. Its a cost that some colleges are simply unable to bear. An alternative to that would be using an online service such as GitHub or Bitbucket (my preferred choice) which are free. However, that also does not work because internet access is either non-existent or not provided (because kids will spent time on the internet). Perhaps the final reason why we don't use it here is because, for many students computer access and internet access at home itself is a challenge. Even if the college does provide version control access, the students cannot access it when they want to anyway. Due to these 'infrastructure issues' code is usually carried by the student via printouts, USB pen drives or simply stored as files on their mobile phones. 

Again, before I let these early finishers out, I do take permission from the head of the department or the person incharge. That is a logistical issue, but I ensure that proper protocols are followed. 

I particularly love the second method because, I won't be blocking the projector and since the Wacom tablet is also wireless, I can move around the class and improve the pointing out process. 

I write two numbers on a piece of paper and give it to the student. In the code, this is like, I am the main function calling the add function and sending two values. Now, the agreement is that the student cannot just shout the answer (this is like printf in the code) Since shouting is not an option, the only way the student can let me have the answer is to 'return' me a piece of paper which contains the answer, which is the total of the two numbers I gave in step 1. So, the student returns me the piece of paper. This in the code becomes, the value being returned. 

I go ahead and use something a little dramatic in my sessions. I use the vampire mythology to explain viruses. For instance, vampires only come in when invited. Viruses are the same. The user has somehow allowed the virus to be installed on their machine. This 'invitation' part puts an emphasis that viruses entering a machine is almost always a fault of the user. Then, yes, once the vampire is in, they start sucking up all the life out of everyone in the house. Same thing with viruses. They take up resources, destroy things and completely ruin everything. I find that this brings out a lot of laughs (what with all the Twilight fans in the audience, and general awareness about vampires) but also allows them to learn the concept. 

Did this work? For me, it did. I was able to carry on with my usual syllabus with confidence that they are at least, not as blind as before. sure, I had to spend 2 of my personal days, but it was worth it. Here are the things I crunched on those 2 days. 

So, talking from first experience, the situation you described is the norm rather than the exception. If you want to get them up to speed, I suggest a bootcamp or a similar variation. 

I almost always teach programming by connecting each component of programming with something in real life. For instance, when explaining variables, I ask the students to imagine them as boxes in which you put things, like food items or gifts or something similar. For methods, I ask them to think of their friends. For instance, there will be a 'rich' friend, and then there are 'stingy' friends, 'useful' friends and so on. So, bring up a scenario. For instance, lets say the challenge, you are in trouble and you want to ask for help. You have 3 friends - rich, stingy and useful. Instead of friends, think of them as methods, and you (as in the individual) is the program or the main method. Now, you need help, which friend aka method are you going to call...you will obviously call the 'useful' friend/method. So, essentially, whenever you want something to be done, you design/code a method for that, just like how in life, you want something done, you call upon a friend. So, methods are like friends who help out get things done. Of course, in an actual classroom, I pick students, make them do role-play (pretend that they are functions) and make it all very active (and hopefully fun) and it seems to work for me. and of course, once they get the concept, I jump into code right away, building small methods that do simple print statements, then upping it to display simple variables and then complex stuff including sending and getting values 

I am surprised that I did not bump into this question already. I have been running an informal tech club for 5 years now. Of course, I have been working from a home office from 5 years, so, I have a lot more free time than others. For instance, I don't have to go to office everyday. With that in mind, I have a simple 'fill when time is available' policy. Some weeks I have a ton of work ( sometimes as high as 50 hours) and other times, its less (as low as 10 hours). On 50 hours weeks, I do everything (discussions, coding sessions, guidance about doubts and clarifications) online, over email and Skype. On 10 hour weeks, I do more face to face interactions, extended lectures, write ups and so on. My students are used to this ( I communicate them via group email that next week I have a 50 hour week or a 10 hour week) so they also adjust their schedule. For instance, when they know I am on a 50 hour week, they have a lot more free time, so they take care of their time intensive tasks. Then, when they know I have a 10 hour week, they know they will be spending more time at the club, and adjust accordingly. So, communication about availability, planning activities based on time available (in other words, the split between work and educating is still happening regularly but the ratio keeps changing dynamically) every week has worked out well for me. 

I know exactly what you are talking about. Back when I was still ( I am glad I am no longer doing that) working as a faculty in a university, I ran into situations like this. In fact, with my usual style, I got confrontational with the faculty who was supposed to teach OOP in the previous semester and stuff happened. Here is what I did. 

These are things I am planning. I believe many of you are not just educators but work in the industry (similar to what I do, train and work). So, let me know what else I can add/remove here. Also let me know if you have any thoughts about the topic itself. and, if Azure itself is not the right fit, perhaps something else. If the topic itself is too broad, please leave a comment (before down voting if possible), and I will break up the question into many questions and link them up. 

When I started, the first language I was advised to use was C programming. We had to use Turbo C. Although, I never got a chance to use C professionally (like when I work on software projects for enterprises and small companies and startups), I ended up teaching that so many times. From a software developer perspective, C is just not right for todays environment, but for some reason, I feel that it is the simplest language to learn, and that is what I advise to students who are young, and brand new to programming. Here are some reasons why I would go with C (although I personally don't like that language) 

Dont ignore warnings. Another classic beginner problem. Ignoring warnings. Unless it is really something that is trivial (a declared variable that is not used) I insist on fixing the warning, as that could potentially be a syntax issue, or something that is being used properly. 

The choice of using spreadsheets to teach programming itself is kind of baffling for me. I would rather you use of the several online ways to teach coding, which are much more useful. If online is not an option and you want something simple, a straight forward combination of Visual Studio Code and GCC Compiler (which is probably already there on the machine) would be a good option. If these are first years, and I was a first year, I don't want to see Excel sheets. Spreadsheets make command line look like an attractive neighbour. 

I took up iOS teaching recently, and the book that am having great results is the iOS Programming: The Big Nerd Ranch Guide $URL$ I liked their style which is extremely practical, and although the book itself is huge, it covers the essentials. I see that the question is already answered, and I am not being paid to recommend this book. Just adding what has helped my students for those who might be looking for a book that is ideal for teaching older (as in already graduated or those who looking to transition from say being an android developer to iOS developer). 

Let's see if I can answer the questions head on here. Should I provide answers to the exercises? Yes. programming is not like mathematics, although they are closely related. They are multiple ways to achieve the same results. Some students appreciate when they are provided with the expected answer. If so should I include them as a part of the document with the exercises or as a separate document? Separate document would be better. There are a lot of students who dont want to be treated with holding hands. They can easily ignore the separate document while those who need it can look at it. 

To be fair, TypeScript is promoted by Microsoft. That means, it has excellent intellisense support along with type checking and all the other standard stuff (regularly updated with bug fixes, premium support, dedicated team and of course the huge marketing muscle of a huge tech giant) we can expect. However, the thing is, Javascript is simply far more popular. There are more resources and stack overflow itself has like thousands of questions on that. Almost every web app and web site I can think of uses JavaScript at some level. I cannot say the same for TypeScript. If anything, I have not seen it being used either academically or at workplaces. I would say, if you are already onboard with JavaScript, stick with it and avoid TypeScript. Further, if you really want to add something on top of JavaScript, I would suggest you use jQuery (which is used almost as widely as Javascript) and is actually useful to build stuff. 

I like to ease people in. You have mentioned that this is for first year. So, yeah, easing in would really have a positive impact on the overall learning experience. I would like to draw from my own experience between a GUI and command line. When I was introduced to version control, the whole thing was intimidating. I decided to go with the Github Desktop, and got an understanding of version control. Once I was okay with that, I switched to the git bash command line. Now, I use command line everywhere, and have been for years. I have used this technique on many students, and the success rate has been higher. Also, most of these students (at least those who take software development seriously ) will migrate to the command line on their own when they are ready. That way, I leave the choice to them. 

When I was a student I was one of these. Back then my faculties would just make me sit around. However, I told myself that if I ever become a faculty, I would not make students wait around. My solution is (this is a little brazen, and it may not work in every campus but at least it did in my campus, and sessions that I conduct) is to simply let them go. The normal session is about 3 hours here. So, if someone finishes, I tell them that they are free to leave the class and generally have a good time. Many a times, the labs would be followed by a free afternoon. I found this is to be beneficial to me because... 

I could share what helped me and what I share with my students (who eventually have to end up self-learning things anyway) is to associate what you are learning with something standard. For instance, I have started learning iOS on my own. I asked a couple of iOS developers, got a recommended book, and decided to use that. While the book is used, I mostly end up learning things from stack overflow and apple documentation (which is how I learnt everything I know anyway - official documentation and stack). Another thing I do is compare what I am doing (coding, designing and deployment) with the suggested ways of doing by the official documentation. Back when I was still building windows apps and UI, I would spend hours and hours on how to design the UI as per Microsoft. Same goes to learning anything. There is always some kind of documentation, a mentor, an experience person and forums like stack where you can get to the right techniques. That way, you still get to learn on your own but at the same time, you avoid the pitfalls. 

I have not done Java, but I will draw from my experience teaching C #, jQuery and an entire collection of platforms I have worked on.