The seems to be handled by , and it does not mention any way to change how it is expanded. But it does use the environment variable. You could specify a new value for , but that might confuse other things that use as a place to store files (, etc. that might want to read from or write to files under ). As an experiment, I wrote up some advice to that temporarily changes the value of . The idea is to minimize the amount of time where the alternate value is active. 

If it is Finder that is crashing, you should see fresh crash logs in . You can use the Console application () to view the file. The stack traces from such crashes might give you a clue as to why it is crashing. If the crashes consistently indicate some third-party code (e.g. a “haxie” or similar “injected” code), then you might try quiting/uninstalling whatever application is injecting the code. If you are also seeing crashes of various other applications, it might be a hardware problem (i.e. bad memory). You could also check (system.log in Console) for things like disk I/O errors, etc. 

I wrote the answer below when the question was about Vim’s swap files. The same idea applies for Vim’s backup files with the option instead of (i.e. use a central directory for the backup files to keep them out of the way). 

It is not necessary (as some other answers have suggested) to use killall (or similar) to kill the parent AppleScript application process (“applet”) in this scenario. It can even have untoward side effects if the name/pattern given to killall matches more than just the parent applet process (e.g. other, concurrently running AppleScript applications (if using “applet” as the pattern)). Something like might be more reasonable, but we may not want to assume that the applet of an AppleScript application is always the immediate parent of the shell started by do shell script. Luckily, there is a perfectly reasonable way to do what you need. Per TN2065 (under “I want to start a background server process; how do I make do shell script not wait until the command completes?”), the proper method is to redirect stdout and stderr and have the shell run the program in the background. Use Script Editor to save the following program as an AppleScript application: 

The command does much of what does as well as sending various reset/initalization control sequences to the terminal emulator. 

The following examples have prefixed so that you can test the patterns before actually using them. Remove the to activate the . Substitute to prompt for confirmation. ksh has a negative match extension to its globbing: 

tmux does not currently support “reflow” or “rewrap” (following the behavior of xterm). The author of tmux has written several times that he does not personally like the reflow behavior of screen, but that he would consider incorporating it into tmux (as an option, presumably) if someone else were to implement it. Mailing list references (older first; not an exhaustive list, just what I pulled up with a bit of searching): 

All Disk Utility and diskutil ever show is “Not Supported”, “Verified”, or “Failing”; it is a simple summary of the SMART status. The usual command-line tool for getting detailed SMART information is smartctl from the smartmontools suite. smartctl can display the SMART values and attributes for supported drives (i.e. internal drives, SMART does not seem to be supported over the generic USB and Firefire disk protocols). Smartmontools does not come bundled with Mac OS X, but it is available in MacPorts (package info), Homebrew (package info), and Fink (package info). The GUI application SMARTReporter seems mostly to be a wrapper around smartctl. A web search will probably turn up other GUIs. 

Is the source directory hierarchy being used by something while you are doing the copy? I was able to elicit that error message (and some others) when I give it pathnames that do not exist: 

Barring some use of ACLs outside the basic permission system, a can be undone without extra authority. The permission bits control access to the contents of the file, but they do not control write access to the permission bits themselves. Typically, root and the file's owner always have write access to the permission bits. So, you should be able to ‘recover’ the file, as long as you can take actions as the file's owner. 

In the version that I am using (zsh 4.3.10), the option for inserting unambiguous prefixes is inside the following menu 

The global value will be effective for any sessions that have not established their own value (see below). If you just want to change a single session (e.g. change only the current session, via a Prefix- command line): 

So the unexpected bit is that pane 0 (i.e. ) is running (only) the command which ignores your “typed” command. This pane never runs an interactive shell that could interpret the “typed” command. There are at least a couple of ways you can fix this: 

There are some gaps in the overall user interface (i.e. there is no easy way say “clone the repository at this URL but only checkout X, Y, and Z”), but it should be enough to get “partial checkout” functionality. * see “core.sparseCheckout” in the git config manpage ** see “Sparse checkout” in the git read-tree manpage *** see “Skip-worktree bit” in the git update-index manpage 

Be sure to include the trailing dash (or some other ‘word’) if the shell is of the Bourne/POSIX variety (it is used to set $0 in the shell script). Also, care must be taken with quoting, since the shell script is being written inside a quoted string instead of directly at the prompt. 

Which and are you using? There is one that comes with the system, and one available in MacPorts (I do not use Fink, and I did not find one in their package list). I do not have the MacPorts one installed, but looking at its Portfile, it seems that it is setup to only manage the MacPorts installations (/opt/local/bin/gcc). The system manages . The system is from the normal Developer Tools (). Using it to select a other than the ones provided by the Developer Tools installations is probably “unsupported”. It might work, but it would require installation into (or at least symlinks in) various "system" directories. Try (e.g.) to see what is says it expects. 

To keep it clear who should use each session, you should will probably want to give each session a mnemonic name. I will use and below, but you will probably want to use something based on your real names, nick names, login names, or something else equally identifying. Rename this original session as and (outside of the original session) create a grouped session named : 

(where “2515,2516” is a comma-separated list of the processes of interest) But under Tiger, I see no direct way to get the tty device name of a particular Terminal window. There is a horribly ugly way of getting the tty name in Tiger. Maybe Leopard or Snow Leopard can do better. I put it all together in an AppleScript like this: 

I think the closest equivalent to svn export would be git archive. You could pull the directory from the master branch of a repository and put in the local directory like this: 

You could convert to the circled numbers like this (bash syntax; tested with versions 3.2.48 and 4.2.20):