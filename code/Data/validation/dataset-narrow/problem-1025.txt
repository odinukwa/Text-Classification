Your device has irrecoverably lost a smaller amount of data. Statistically, it is likely that more is to follow. You also are at a greater risk of losing the entire drive ("greater" as in "a higher probability than a comparable drive population without bad sectors would expose"). 

The overlapping partition problem arises partly due to the oddities of PC partitioning. The partition table has space for exactly 4 "primary partition" entries. If you need to have more than 4 partitions, there is a mechanism called "extended" partitions - it actually creates a large partition (in your case partition #2) which in turn has an own sub-partition table, allowing for additional entries called "logical" partitions. What you have done is creating an extended partition spanning from sector 208845 to 1953520064, but also additional primary partitions 3 and 4 overlapping the disk space reserved for the "extended" partition. The most easy way to resolve matters would be as follows: 

Although most of the generic stuff has already be said, but formally the specific answers to your questions are missing: 

This will keep full resolution (defined as seconds per interval in the of the plugin config) for 1 day, scale down to 10-second consolidations for 1 week, further reducing the resolution to 1 minute for 1 month and 5 minutes for 1 year. Caveat: is only honored when actually building the RRD anew. If you already have the RRD built, mounting into the plugin's config output will not do anything unless you delete the RRD and plugin state data at the server. 

It would not address the protocol-specific issues of GPRS, though. I would not use VPN links with enabled compression - it likely will not help your problem since the transmitted data is compressed already most of the time: most webmasters are using GZIP compression for HTML and CSS and image data is compressed as well and cannot meaningfully be re-compressed with lossless methods - i.e. without resizing and/or transcoding. 

As always with caching questions, the answer would be "it entirely depends on your workload". The cache is only of any use if your running processes are spending a significant amount of time accessing memory and exhibit a noticeable locality of reference for memory addressing (and are not happy with the smaller L1/L2 caches present per core for this matter). Having a high number of processes running within different threads increases the odds for thrashing of the shared cache and thus diminishes performance gains which possibly would have been achieved otherwise. This is also the reason for increasing the cache size with an increased core count - the more memory-competing threads you have running, the larger your shared cache likely needs to be in order to be useful at all. There is an oldish article from Tom's Hardware comparing two old P4 chips with and without L3 cache for a number of rendering / graphical workloads. The numbers are rubbish, as is the whole benchmark, but it contains a nice explanation of the caching architecture in general and L3 caching in particular. The bottom line: you likely would not notice the difference, but if you need the exact numbers, you would have to purchase both CPUs and run your workload on both of them to compare runtimes. 

The value is not standardized, but the way I read the spec, any value other than "no" should suppress bounces. I also threw in the option as a fallback; if it works, it could be useful by its own, as many mail servers will not generate bounces for messages which have an empty envelope sender. However, not all sites allow you to control this. 

Since the template is embedded in the program itself, there is no need for it to exist in any other file. To extract it on a system where you don't have a crontab, try temporarily setting your editor to . 

This will replace any existing crontab. A somewhat less risky approach is to check for an existing crontab, and add the desired stanza at the end if it is missing; but you can't really avoid a race condition. The sanest solution is probably to have a modular designed around or something similar; but this is unfortunately not a standard feature. 

I'm not altogether sure you need here at all, but your exposition doesn't reveal what exactly and its subdirectories refers to, so I assume you know what you are doing there (or how to stop doing that if you don't). 

With this, you can see in the log the result of each individual regex in this complex multi-regex recipe.) If you need a completely watertight recipe, perhaps write a simple script in Python or Perl (or Ruby or ... what have you) to normalize the MIME structure. I remember there was a tool called a long time ago which did something like this, but it was never very well-established, let alone well-documented. (In fact, IIRC it was designed specifically to plug into pre-MIME , and was near-impossible to use for anything else.) 

(The :s are literal DEL characters, ASCII 0x7F.) The space in the place of a tilde at the beginning might be a hint as to what went wrong in the conversion, but this is wild speculation. ESC looks like the ISO-2022 code to "designate other coding system", but what does the stand for here? I'm probably too dense to understand the Wikipedia article without further examples, and everything else I could find seems very focused on some subset such as ISO-2022-JP. Does my analysis so far make sense to you? Can you help me figure out what happened, and perhaps even offer advice on how to revert the corruption? I have posted hex dumps of extended fragments of these two examples at $URL$ 

This is somewhat obscure, but apparently means and . The package's file listing reveals exactly what it contains. As of right now (version 1.6.6-1) it contains the following files: 

PS: I think Google Drive will allow you to view PDF without "executing" anything locally, so see about storing them there and I'm sure it's virus checked also. 

I just challenged myself to find and change a value in memory using scanmem and wrote this script to increment a simple value every 5 seconds. 

From Hardware management (Run: devmgmt.msc) you can view the devices properties. If the Tab for Power management isn't there or doesn't list "Allow this device to wake the computer" then it probably doesn't have the ability to do so. The permission error is likely meaning it can't set that property at all. If you're doing this from another computer/phone/tablet then explore Wake On LAN (WoL). Enable in BIOS and grab an App for WoL. That is best for waking a computer remotely which then gives you all the normal functions. 

As @DavidPostill said .. "powercfg -lastwake" will tell you what device woke the computer. I have found it is usually a mouse or Network component. You can then go into Device Manager, right-click the offending hardware and under Properties > Power management (Some items don't have it), Clear "Allow this device to wake the computer". It's also good to go through each device and make sure they also have this disabled, The Keyboard is usually all you need enabled. You may want to just put the computer to sleep and wake it from the keyboard then check what's reported; as it may be listed as "USB Host controller" not keyboard 

Using a VM is a little overkill. AV should be scanning it on receiving anyway. For extra peace of mind; Sandboxing would be the answer. Using something like Comodo (free) virtual desktop or having it sandbox the PDF readers executable on execution is easiest I think. I've run Comodo alongside other AV software fine, just disable Comodos AV. Mostly used for it's firewall features so it's extra protection. As a side note .. Consider how all these PDFs would be created? If it's from your own service or customers/clients then there shouldn't be a problem if they want your services. (less likely but I know the problems) 

Windows has a "Reset This PC" in Control Panel, negating the need to reinstall. Granted it's maybe not as clean and any Dual boot menu may be lost. I believe you need to boot in BIOS mode to see BIOS drives correctly on installation. and vica-versa. How I install a dual boot system in UEFI 1: Install WIndows in UEFI from USB. 2: Use YUMI (UEFI version) In windows to create an Ubuntu Live USB and install/re-partition from there. A windows ISO can also be added to the YUMI USB and booted from there, you choose which to boot during startup. I generally have several OS's on one 32GB stick. IF You want to keep an existing OS which is BIOS boot then when you choose a device to boot to from BIOS; a USB stick will sometimes have 2 listings, one prefixed with **UEFI: **, the one without is BIOS boot. 

Common spell checking utilities include and . Other things being equal, I would recommend the latter; but there are legacy reasons to prefer , and if it's installed on your system already, and is not, it should be fine for English. Maybe also look at which, despite its name, is not just for Hungarian. For the vast majority of the languages of the world which use a (vaguely) alphabetic orthography (and possibly the majority overall), it is vastly better than tools which are based on the limited morphological system of English. 

Cron doesn't have access to your X session, by design. You should probably run this in a background loop from your or similar instead. 

You were never using or in the first place, and there was some other dead code in your script as well. 

I will concur with the comments to add the user to the group instead to solve this particular problem. 

Your attempt required there to be a slash before the underscore, but of course, there isn't one in your file, so the regex didn't match anything. You say you want to replace with but several of your attempts look like you also want to remove the underscore before the number. If that is correct, obviously drop it from the replacement string. I speculate your doesn't recognize which would otherwise have been a good attempt. The last one of your tries is so far removed from any valid syntax that I don't think I can comment on it meaningfully. It parses as attempting to use the string as the name of a command, with the arguments and passed to it as parameters. 

but then you'll need to make sure yourself that the (start, end) pairs in cover all of the space between 0x00000000 and 0xFFFFFFFF if you really want to examine all of it. (And again, notice that the range increments the last byte and that applies the bytes of the value in reverse, in accordance with your stated requirements.) If you wanted to use two different addresses, you quickly run up against the limits of what's feasible to do in your lifetime with brute force; but you could, for example, split the 4-byte number into two 2-byte parts and apply those at different offsets. 

I'm vaguely speculating that the encoding might be related to ISO-2022, but I am not familiar enough with it to really be sure. It has obviously gone through at least one broken filter, possibly multiple, before ending up like this. Looking at the first line, is ѓ and was probably a single 8-bit byte before the conversion. A general pattern seems to be followed by a signal byte, where the FF is some hex sequence in plain ASCII (mostly 83 here, but generally from 80 through 9E in the entire sample), and the final byte is now an UTF-8 character. (It could have been multiple bytes in the input as well, of course.) This sequence appears between words (always ?), and sometimes within words. Here is the same fragment as just text, as it renders under UTF-8 now.