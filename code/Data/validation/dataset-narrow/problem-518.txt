I come from VB6 where everything is single threaded, so I've never written a lick of multi-threaded code before. I just added a wait cursor to one of our GUI's by stumbling through the docs, but I'm unsure I've done it the best way. Did I? is a Winform view and the code below is located in the presenter class. Full file can be found on GitHub. 

The latter two can be solved by taking advantage of casing, but what about ??? Why, we just call it what it is, a (regex) pattern. 

All I'm going to say is that you know better and this is neither cute nor clever. This is a slippery slope to Spaghetti Code. is leftover from an ancient version of Visual Basic that didn't have subroutines. Use a proper subroutine or function. For what it's worth, it appears to be a correct and clean use of . You just shouldn't be using it. 

Note that the naming stuff is nitpicky, but the code structure is not. You shouldn't program right inside main like that. 

The comments are nice, and add a bit of clarity to the code, but these kinds of comments indicate an opportunity to extract subroutines/functions. Each of these comments could be replaced with a well named function. 

But I find it a bit odd that a validation routine is returning a string. I would consider returning a boolean instead. It has a smaller memory footprint than a string and is, in theory, faster than a string. 

I don't much with GUIs often, so I'm not sure if it's necessary to specify the type the way you have. As I mentioned earlier, consider using the keyword here. 

First and foremost, you're modifying the that you passed in. That's a terribly surprising side effect. You could be creating yourself a nasty bug due to unexpected global state. Minimally, it will be harder to maintain due to that global state. Much better to build a new list. And if you're going to build a new list, you might as well use a . 

Do you expect the code for returning a new mock with no setup to change? I'd just chalk it up to rounding out an exercise in futility and ego stroking. But yes, the code looks nice. You have a good style. 

But I still don't like it. Let's say down the road Mr. Maintainer realizes that something else should happen . Then they do something like this. 

I’m relatively certain this only works by accident. The default value of an int is zero, so I’m actually uncertain of the actual behavior here (and I’ve been using C# a long time). Consider the alternative code. 

As for an actual review then... I dislike that each visitor method is a copy/paste of each other visitor method. I'd go one step further and create this method overload. 

Naming Per Microsoft, Hungarian notation is to be avoided. It was developed for untyped and weakly typed languages. vb.net is a strongly typed language. The IDE will tell you what type a variable is. Don't use Hungarian notation. Bugs 

Etc. The Boolean is unneeded. If you were calling more than once, I would say to leave it, but you're not. So don't. 

That message will mean absolutely nothing to the end user. You should always strive to give end users meaningful, clear, and non-technical messages. This method shouldn't be responsible for displaying messages to the user anyway. You should be throwing an exception instead. Let the calling code figure out what to do with the error. Most likely, it should pass it off to a logger and maybe display a message. I don't have enough context to actually say what the correct thing would be. 

Are the row heights actually different, or is this the only way you know how to set the row height for a range? Whenever possible, you should avoid looping when you could work with a object. In this case, is a type, so you could just set them all at once. 

This provides a much nicer string back. Consider a workbook with a value of "Hello!" in cell A1 and the following code. 

Refactoring The first thing I notice is that there are a lot of similar variables declared and that the code is deeply nested. These are indications that the code is doing too much and is in violation of the Single Responsibility Principle. It will be our goal now to simplify the code. There's a quick hit right at the beginning. There is no difference between and . We can get rid of entirely. While we're at it, let's go ahead and extract a function for . You'll find yourself needing it a lot if you continue to write vba code. 

If you need to create this same Moq for many tests, it would be better to use the attribute and have it set up prior to each test method being run. See this for more information. 

Relies on existing abstractions and framework code instead of rolling your own. We've defined an actual data structure for your packets. Client code can use this higher level abstraction without knowing all the knitty gritty details of how the packet was passed over the network. Removes the need for the "other" infinite loop on a separate thread that's reading your data. It can listen for the event and react to it and the explicitly passed packet instead. This should lower the risk of race conditions. 

Maybe I'm missing something, but I think declaring a character array for delimiter is overkill here. 

Yes, that's useful and that's why your logger is just plain wrong. Don't log the message, log the stack trace. You'll thank yourself later. 

I wouldn't go crazy, because the number of threads it will spin up is limited, but it seems reasonable to me to run each year in parallel. It's possible you'll see a good boost. 

Move the check and the row insertion out of the loop. Reintroduce the variable with a new purpose. Write the values to the iterator range, instead of offsetting based on some counter variables. 

Don't use VBA when an Excel formula can do the job. Look into the Workday function. It takes in a date and an optional array of holidays and returns a number indicating the day of the week. I have a feeling with just a bit of effort, it can completely replace your VBA code. 

I know this is a fairly old question, but I'd like to point something out. While and are commonly used as "counter" variables, they only serve to obfuscate the code in this case. By time we make it to , it's very difficult indeed to tell which variable stands for what. These should all have meaningful names for Mr. Maintainer's sake. This is a little more verbose, but (I think) a little easier to understand. Particularly considering that it's easy to see now that the in the initial loop, is not the same as the one nested in the second loop. 

Runtime errors are thrown from deep within the function and the caller has to dig into the internals to figure out where things went wrong. (Thankfully, they only have to look at your header, good job!) Undefined behavior occurs and the caller silently gets wrong results. This is bad. Very bad. 

I'm not very good at C#, so there may be an even simpler way, but you could certainly just split it like this. 

So, I know it's not terribly obvious, but this works because returns a zero indexed array, but our month numbers start at 1. Perhaps it'd be a bit easier to read if we introduced a variable. 

There are so many examples of using one letter variables for lambda expressions out there that I don't blame you. I don't. We all do it, and often we shouldn't. I think this is one of those times. Sure, I think I know what these stand for, but am I certain? No. Either way, I had to think about it longer than I should have. 

You print all of the multiples of 3 or 5 below 1000. To meet the spec, you need to actually sum up all of the elements of . 

It's not bad. An extension method is a nice choice here. There's no state and you're extending a class that you don't own/can't directly modify. Good design decision. I also like that you're using the paradigm. A common mistake for VB6 devs moving to .Net is carrying over the VB6 error handling pattern. One thing I don't like about what you've done is this. 

Well, which is it? Are you optimizing for speed, ram, or executable size? You say this is for an embedded project, so it’s likely you’ll need to pick one. Once I needed to calculate a sine wave for a motion controller. The timing was critical, but we had plenty of ROM and enough RAM that we just included a pre-calculated table of sin values. They never change, so there’s no need to perform an expensive calculation at runtime, particularly if you’re in a timing sensitive function. I honestly can’t tell if you’re calculating the same values or not, but the principle still applies I think. You only need this code long enough to calculate the values once, so it’s quality is a moot point (so long as it’s bug free). 

The base class shouldn't know about any child classes. As you have it, any time you create a new class that inherits from you would have to go back and modify BaseHelper (potentially breaking it and any classes that inherit from it.) I would definitely spend some time thinking about how you could make it so that BaseHelper is "closed" and "finished" code that you never have to think about again. It looks like you're trying to implement the Visitor pattern, so you might want to take a look at some examples. 

I suppose you added all the s in an attempt to speed up the query? Don't bother. It won't help. Specifying it once for the table is sufficient. Which actually brings me to an optimization. Your query is equivalent to using , but without any of the benefits. You're not currently getting the unmatched records anyway, so you might as well switch. You might see a significant performance increase. 

You've already received a very good answer, that I completely agree with. However, I want to mention this just in case you really want to stick with the error handling pattern that you're using right now. (I recommend you don't by the way.) There's a bit of code here that essentially does nothing. 

I changed the parameter name to make it a bit clearer. Speaking of naming, it's a convention in C# to PascalCase method names. You've camel cased yours. It's consistent though, so I can't gripe too much about it. To address your actual question though, typically yes, you will pass your view model to the controller as you've done here. However, that's because the controller is typically updating the view. That doesn't seem to be the case here, so the thought comes to mind that it is better to only inject what you actually need. I like that you've used polymorphism to simulate the state of an object, but it makes me wonder if what you have here is really a view model and not some other concept. 

You're converting to a string outside of the block. Like I said, I'm not absolutely certain, but it at least looks potentially problematic. Are there any crazy edge cases where won't get cleaned up in the ? I don't know, but why take the chance? 

There's nothing wrong with this code, but it might be nice to expose a getter too. That way the client code could take action based on whether or not the browser is visible. There is such a thing as too much symmetry, but I definitely don't see any harm in exposing it. It always feels a little weird when you can set a property, but not inspect it. 

Note that if you use a switch without a , you would need to , as the code would continue to "fall through". 

Your index variables are scoped a bit larger than they need to be. This happens in several places, but this is a simple example. 

The other thing I would like to mention is the hard coded IP address. should take that in as an argument in its constructor so that the ip can be stored in a configuration file and injected in at runtime. 

I simultaneously love and hate giving answers like this, but I feel like I have to... You're trying to solve the issue that everything is stored as an in the App.Config file, right? Well, this problem has already been solved by the .Net team a long time ago. Exactly 10 years ago actually. The solution only works if you're on at least version 2.0 of the framework, but there are relatively few apps out there running on something less than that. Anyway, instead of declaring items in the config with 

Which moves into your presenter. It catches the raised event, and interacts with the View's interface, performing this work. This means, that you can now relatively simply test your code. I like using Moq for this. Moq makes it easy to mock out the view and test the presenter. Because that's what we're really aiming for here. Your Form (IPartsView) needs to be dead dumb simple. It shouldn't need to be tested. If the presenter and model do all of the work, then there's no need to test the view. A simple test could look something like this. 

Why does the client code go through all the trouble of spelling this out? should know how to get the info it needs from an so the dev doesn't have to. 

I would create two functions that take a form as an argument and return a point representing the and center point respectively. 

You've made it work. Now make it right. In this case, by "right" I obviously mean you should make this understandable to Joe Maintainer who will have to grok this code without ever having seen it before and without a clue about how it works. Remember, 6 months from now you yourself might as well have never seen the code before. Some of these I can't even possibly take a stab at, but here are a few replacements that I would make. 

I can't ignore the obvious here though. There is no reason for any of this code to exist. It literally does nothing but pass through to the . Entity Framework is already a repository & unit of work. That's not to say that you shouldn't hide the fact that you're using EF from your controller though. It's much better to create a domain specific API to decouple your controller from the persistence. In our projects we'll often have things like and kinds of methods. It makes for pleasant reading and easy implementation changes.