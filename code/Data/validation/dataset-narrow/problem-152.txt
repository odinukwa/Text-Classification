The basis for the decision (for any decision in a router) is a set of rules in some form or fashion. In this case, for each of the interfaces involved (i.e., the internal LAN interface vs. the external WAN/uplink interface), the administrator will have implemented rules. Those rules are quite different, i.e. the rules for a LAN interface look wildly different from those of a WAN interface. Knowing where a packet comes from and where it goes to is the bread and butter of what a router does. Let me start with an Example Wikipedia's NAT page has a lot of text on this issue, but a simple case (a simple company LAN vs. a single DSL uplink) this is what happens: 

198.51.100.20 eventually receives the packet, notices that it is a SYN ("establish new connection") and sends a SYN-ACK message back to the sender. From its point of view, this is the IP address 203.0.113.10, with the TCP destination port of 12345. The router receives this packet on its WAN interface. The WAN interface has been configured to resolve NATted addresses like this. The router then... 

At no point at all does the topic of a "connection" appear. The NAT router (in its simplest form) does not need to care about the content of the messages. It cares about the IP addresses and the ports of the sender and receiver, but nothing else. (Granted: this is likely skipping over all kind of security- and performance-related issues; but this is about the very basic principle like the one at hand in this question.) So how does the router know? The router does not need to know about "connections" at all. In fact, similar procedures like described for TCP exist for the connectionless UDP protocol (UDP hole punching), or could, really, be implemented for any protocol that has something like port numbers in the transport layer. The reason why the router needs to know the transport-level protocol (TCP, UDP, ...) in regards to NAT is mainly that the ports themselves are not part of IP; and ports are what makes the "hack" that (this kind of) NAT is, easily possible. So, to your question: 

The client PC tries to initiate a HTTP connection to an internet-based server, for example 198.51.100.20. The PC itself has a non-routed address like 192.0.2.2. The cheap DSL router has two interfaces, one internal (192.0.2.1) and an external (203.0.113.10, very likely changing often and provided through some local link protocol by the DLS provider). So the PC sends a SYN packet to 198.51.100.20:80 via its default gateway, which is 192.0.2.1. The router picks up the packet at its interface 192.0.2.1, like it also would do if there were no NAT involved at all. It has been configured to do NAT on this interface, so it proceeds to do these things: 

Yes. The yellow line as many switches, which, as related to the packages between the two hosts, do not have IP addresses. Modern switches can obviously have IP address of their own for their own configuration (i.e., if they offer a management web GUI). But simple household switches, even if they are rather intelligent (i.e. if they do not broadcast any and all ethernet packages on all ports, like they did in the stone age of networking), need to have no IP address at all. Remark regarding comments: this is equivalent to saying that all the switches between those hosts are part of one subnet (i.e., one IP netmask). This is, admittedly, to some extent an assumption, as these days there can be very complicated switches, and some people may even call routers switches. But still; per default I would assume that a chart labeled with switches contains switches. They may (in fact, they most certainly will) look at the IP address to make the decision on which port to send a package. But they do not introduce new IP addresses as part of the path the packet takes. 

While you can manually configure a sticky address, it is not usually used that way (and in fact Cisco recommends against it): 

If the switches are vlan capable, there is one broadcast domain per vlan (if the vlans are trunked between the 2 switches , otherwise one broadcast domain per vlan per switch. If not vlan capable, there is one single broadcast domain. For the collision domain, the topology is very poorly drawn but I assume that each set of 3 computers is connected to a different port of the hub or switch above it. In that case I count 6 collision domains: 

which matches the traffic between the Anyconnect client (which is on the outside!) and the inside. Therefor you need NAT Exemption, i.e. a NAT rule saying that al traffic from inside to the VPN should not be translated, like this: 

Cisco documentation: Require VPN Connections Using Always-On Note that this feature is configured in the Anyconnect client profile, which can either be pre-deployed or pushed from the ASA. Obviously, if you want the feature to be active from day zero, even before the user makes his first VPN connection, then you need to pre-deploy the profile. Also note that the comments mentioned concerns about the user being able to circumvent this feature by defining their home (or coffee shop) network as "trusted" in the Windows firewall settings. Anyconnect does not use the Windows firewall settings for trusted networks. Instead it uses another Anyconnect feature named Trusted Network Detection (TND) feature which allows the ASA admin to control which networks are considered trusted based on the DNS settings of the client. cfr. Configure Trusted Network Detection 

Basically (simplified) an SDN controller allows an administrator to configure various settings on network devices (which may include switches, routers, firewalls, ... anything that has an appropriate northbound API/protocol that the controller can use). So seems to refer to the sum of all these settings, as defined by the administrator. In other words 'network configuration' can consist of vlan names and numbers, port settings, forwarding rules and drop rules, etc.etc. What exactly is or is not part of the configuration depends on the actual controller being used, and what the API or SDN protocol (e.g. openflow) of the network devices supports. 

You don't block the icmp unreachables - which are sent by your router - but the inbound packets sent by the traceroute or other tool, that have a TTL (time to live) of 1. See e.g. Cisco Guide to Harden Cisco IOS Devices - look for the section " Filter on TTL Value" edit: corrected url edit: note that in that Cisco document the example filters everything with a TTL < 6. This way you also prevent the next 4 hops in your network to appear in the traceroute without having to add an ACL to those routers as well (assuming all traffic passes through the router you are configuring). Also note that the number 6 is just an arbitrary example, you should use a value based on the diameter of your network (maximum number of hops a packet might traverse within your network). An added benefit of this is that traceroute will still work within your network. edit: Please note that as Brendan notes in the comments, some protocols like BGP, IGMP, ... may require you to make exemptions in the ACL as they use low TTL values. 

Configure a route on the ASA (as RonMaupin suggested). However, if the Meraki is on the inside of the ASA then this will require two more things in addition: 

Yes, Ethernet frames in a strict sense are only transmitted in a LAN. In a WAN, you will have other formats. 

When I write of "usual" here, I am thinking of your average consumer WLAN-NAT router with a sane configuration, or some simple Linux networking with default settings. As usual, this can be made as complex or complicated as necessary. As the question is very basic, this seems to make most sense to me instead of going straight for any more complicated enterprise-level NAT solutions. You have already accepted an answer, but let me try to directly address the question you asked: 

In short, TCP uses up one very finite ressource, which is the number of ports on the client (which is limited by the size of the port field in the TCP header, 16 bits). So, TCP is able to run out of ports, if a client opens up a lot of TCP connections in parallel without closing them. The problem only occurs client-side, and it does not matter if the connections are with the same or different server IP addresses or server ports. In your setting, you seem to have one application which takes in many client requests (these could be individual TCP requests, as maybe your clients use this to log some events to your application and don't hold the TCP channel open inbetween), and create a new internal request to your Kafka broker (which very easily could be individual TCP connections if you chose to implement them like this). In this case, the bottleneck (in terms of ressources, not performance) would be if you manage to get huge numbers of requests at the same time from your clients (no problem for you, as on the server side you only need one port for all of them), and you open up a huge number of forward requests to your Kafka, and Kafka is not able to process them fast enough, ending up with you having more than 16bits worth of connections open concurrently. You are the own judge here; check your application and try to find out if you are connecting to Kafka with a separate request each time (maybe through some REST API proxy). If you do so, and you have huge numbers of clients, then you are certainly in danger. If you only have a handful of clients, less than 65k-ish, and/or you keep a single connection to your Kafka browser, then you'll be fine. 

I like the excellent wikipedia page on TCP. It clearly shows what happens with the port number. It, by chance, also contains a helpful chapter on ressource usage: 

The PC receives the packet and does not see anything about the NAT procedure. The packet looks just like if 198.51.100.20 had sent it, as if the NAT router was not there at all. 

Outbound connections are per definitions those that start with a SYN packet (or an initial UDP punch in the case of UDP) appearing at the LAN interface. Calling them "connection" in the case of NAT is a bit much; they end up simply as a temporary entry in a NAT translation table (plus whatever security/performance additions the individual NAT router might employ as well). Inbound connections do not exist in the scenario I used in the answer so far. There are of course variants of NAT that do this; for example you can statically identify a port on the WAN interface of the router with a specific IP:PORT on the LAN interface, which makes it possible to run a server inside your NATted LAN. This is also often supported by cheap consumer DSL/WLAN routers. And with "real" routers, you are obviously able to configure them in whichever form or fashion you like. Further inbound/outbound IP packets are not different from the ones given in the example. Once the initial SYN handshake has been done and the router has the entry in its translation table, it will pass through (with the same translation as explained in the example) all further packets in both directions. If, in the context of a thus established TCP connection, the server wants to send data to the client (which it is perfectly possible - TCP is bidirectional), these are just further IP packets, as far as the NAT router is concerned. It will not really care that much about the contents of those packets (i.e., whether they contain certain payloads, or are just "management" packets of TCP or whatever). At no point does the router somehow "close the tube" as you put it. Obviously, the router will have some notion of when it can clear out the entry from the translation table (probably when it notices a FIN handshake which ends the connection, or by some timeout or some error state), but from start to finish it is one continuous affair. 

Yes this is achievable with VLANs. Just create 2 vlans on the switch, in the first you put the inside interface of your pfSense router/firewall and all devices that need Internet access, in the other you put all devices that you want to be cut off. As long as you do not add a router to that second vlan, the devices in that vlan will only be able to communicate with each other. 

Option 1 - manual conversion Cisco's Migration Guide for Converting Cisco PIX Configurations to Cisco ASA 5500 Series Configurations has a whole section "Manual Configuration Conversion": 

Option 2 - convert the config by upgrading You did not specify which PIX model this is, but given that you have 6 ethernet interfaces it must be one of the bigger models (515 or larger). If it has enough memory you can upgrade it to Pix 7.x, which will automatically convert the configuration to version 7 syntax, which is identical to ASA 7 syntax (apart from interface names). Migration from PIX 500 Series Security Appliances to ASA 5500 Series Adaptive Security Appliances describes how to do this. Now, there are still some differences between 7.x syntax to 9.x syntax (mostly the new NAT syntax introduced in 8.3). Typically you would normally upgrade an ASA e.g. from 8.2 to 8.3 and then from 8.3 to 9.0, and each upgrade would automatically make the necessary config changes for you. To be honest I'm not sure if this automatic conversion will also work if you copy/paste a 7.x syntax to a 9.2 system. You can either try to find this in the documentation, or just give it a try and see how far you get (and/or use the document mentioned in option 1 to apply the remaining changes). Some doc pointers: 

Note that this requires authorization to be enabled in addition to authentication. Src: How to Assign Privilege Levels with TACACS+ and RADIUS 

You may wan to have a look at Integrated Routing and Bridging (IRB) but I'm not sure if (a) you can configure the LAN interfaces on a 877 separately and (b) if your existing NAT would still work (as you would need to move it to the BVI interface). A possible alternative exists if the 3rd party can configure the Juniper to have a private IP address (from the range you currently use on the inside) as primary ip address on its WAN interface, and the public IP address as a secondary address (or loopback address, or whatever works). In that case you just add a static host route on your router like 

From the Cisco Documentation: Recover and Load an Image for the ASA 5506W-X Wireless Access Point To recover and load a software image onto an ASA 5506W-X using TFTP, perform the following steps. Procedure 

In addition there are line cards with SFP ports that can be used with RJ45 SFPs, from the WS-X4448-GB-SFP up to the WS-X4748-SFP-E. Having said all that, I strongly advise you to double check with your Cisco Partner/Reseller before ordering. Or in case you are considering buying from another source, make sure to get a money-back guarantee as there are sometimes corner case scenarios (like card X is supported but requires IOS version Y, and you already have another line card Z that is no longer supported in version Y). 

In general a router should always use the best (longest-match) route available. I'm not familiar with the output format you quote, so not sure if that router considers the /18 route as available. In that case it will try forwarding the packet to 73.0.45.1 which probably means it gets dropped. (Real world example: a static route with the next-hop on an ethernet interface but the next-hop is down; the router doesn't "know" this so it still considers the route as active but packets get dropped because it cannot arp the next-hop). If the absence of the U flag means "do not use this route", i.e. the router knows the route is not available, then I expect it to use the default route instead. (Real world example: a static route with the next-hop on a serial interface but the next-hop is down; the router "knows" this because the serial interface is down so it removes the route from the routing table and traffic follows the default route).