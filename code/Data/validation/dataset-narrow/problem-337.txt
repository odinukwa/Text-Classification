To your specific question of (easily satisfied) plausibility, the answer is yes. Since you seem to be looking for a broader critique. You seem to be mostly on the right track, but a few things are making your description overly complex. It looks like your Classes table is more like what I would consider a course to be and your departments_teachers_and_classes is more of what I would expect a Classes table to be. A course would be Math, but a class would be the Math course taught by a particular teacher during a particular school term. A class is like an instance of a course. To carry this change through, your departments_teachers_classes_and_students could simply be ClassStudents. It seems as though you are using the department concept on several different levels. You should decide where the department belongs and stop referencing it everywhere else. You've said that a teacher can teach for multiple departments, so we can't put the department in the teachers table. This leaves Classes and Courses. Whichever you decide, it need only have a foreign key to the Departments table (unless you decide that one can be in multiple Departments). This eliminates the Departments_and_teachers table. Teachers_and_Students could be replaced with a teacher foreign key in the Classes table and students/classes foreign keys in a ClassStudents table. In short, for the portion of the design you have described, you probably need the following tables: 

This is the root cause of your problem. There is no such thing as a parent table in relational model; foreign keys are constraints, not navigation paths. You are dragging OO terminology into a relational DB and these two do not match -- paradigms are different. 

Note: I am using RDBMS wording for constraints, in general is an internal uniqueness constraint, foreign key is a subset constraint (inclusion), and is an internal value-comparison constraint. 

| Teacher (TeacherId) teaches in school (SchoolId), in district (DistrictId). Each teacher may teach in more than one school in a district. For each school in a district it is possible that more than one teacher teaches in that school. If a teacher teaches in school in a district, then that school must be located in that district. If a teacher teaches in school in a district, then that teacher must be licensed to teach in that district. 

Another workaround is to wrap the function in to_number. I don't see why either should be necessary. Updating a column to the results of a compound expression that contains a scalar subquery expression added to a value is supported by the syntax and should work. Similar behavior found here also with no resolution. 

If your database is Oracle, the best way to do this is to create a packaged procedure encapsulating everything you want to happen. This would include both inserting the row and doing the http request. The Oracle user used by the php script can then be given execute privileges on this package allowing the script to call the procedure. Not only is this more clear, flexible, and secure, it also takes full advantage of the database software and avoids triggers. 

P1 Course named (C_NAME), assigned a course number (C_NUM), exists. .. and constraints c1.1 For each course name, exactly one course has that name. c1.2 For each course number, exactly one course is assigned that number. The predicate leads to relation; the constraints to -- well, constraints like: PK, AK, FK, CHECK etc. 

Though there is nothing cyclical here it does have few problems. For example, the model has no relationship between and , although you do state that "District has many Counties". It is also possible to have such that that teacher does not teach in the district the county is located in. 

which is often not preferred in high-transaction-volume environments, so it is common to see these replaced by an auto-increment, essentially serving the same purpose. It is true that this auto-incremet is now unique, hence it can be used as a KEY -- but you may choose to look at it as a necessary compromise for the . So, with some renaming and -> you may arrive to this model 

What is a good book to read to learn about RAC? I am most interested in the practical end rather than the theory behind it. 

Very high is a relative term that depends on perspective. You could mean 1 hour, 1 month, 1 year, etc. Assuming you mean something between one minute and one month, the answer will depend on how much undo is being produced and how much storage you have available. I haven't seen anything higher than two weeks. Oracle automatically manages the undo space and will dynamically decrease the retention below the undo retention setting if space constraints require it. The caveat to that is when the undo tablespace has guaranteed retention. The Oracle Database Administrator's Guide covers all this information on one page. Here are some excerpts: 

The only problem that the author of that article has is not understanding database design. The problem in his examples is simply lousy design stemming from insistence on single column PKs (IDs), and not understanding how business logic relates to DB constraints. In the second example, his design assigns re-sellers commission based on the user and the product, instead on an actual purchase, which makes no sense business-wise. In the first example it is possible to assign a user to a task outside his project scope; again nothing to do with "circular", but not knowing how to implement constraints. 

As far as mandatory address is concerned, verify that on the application layer and wrap the loading statements into a transaction -- that way you'll get all or nothing. 

In addition to what the others have said, you could keep some data in flat files and them copy the files to the ephemeral storage on startup. You could then access it using external tables. I don't know if this would be faster or better, but it is another possible use. 

To update a column using a sum of values from other tables that may have nulls, do something like this: 

Could someone explain what I am doing wrong or give me a way to troubleshoot this further? Here is my test code: 

Another option with it's own limiations would be to use the negative of the sequence value for the second entry. 

Bi-directional replication is technically feasible, but is anything but simple, which is why it is not used unless absolutely necessary. Streams can be setup to do bi-directional replication. See the OracleÂ® Streams Replication Administrator's Guide. However, Streams cannot handle automatic client fail-over and since it seems that high-availability is your goal, this is not an option. The Oracle solution for this type of problem is RAC. It meets both the bi-directional replication requirement and the fail-over requirement. However, if you are looking for storage redundancy, it does not provide that as the database storage must be shared between the servers. If your primary concern is instance failure, then it will help you. Since you are on Enterprise it is an extra cost option, but if you can tolerate downgrading to Standard Edition, you can run RAC without any additional cost. Another option would be to turn your two servers into Virtual Machine Hosts and virtualize your two databases. This again would not provide storage redundancy, but would allow you to transparently migrate either database to either server, running them on the same server when there is maintenance to be done or a server outage occurs. The Golden Gate product Oracle acquired does bi-directional replication and is more flexible than streams, but at a higher cost. There are other options at various levels of granularity and capability all the way from Materialized Views over database links to storage based snapshots. Consider carefully what you need and whether a solution meets your primary requirements. 

If you prefer single-column then you can ADD them to and tables, but you must keep the existing ones as (unique) and reference them in foreign keys where applicable. 

Instead of searching for tips and tricks (deferred constraints included) I would suggest that you simply design your way out of this "reference lock" -- so try something like this: 

| Teacher (TeacherId) is licensed to teach in district (DistrictId). For each teacher, that teacher may be licensed to teach in more than one district. For each district, more than one teacher may be licensed to teach in that district. If a teacher is licensed to teach in a district, then that teacher must exist. If a teacher is licensed to teach in a district, then that district must exist. 

If you are in SQL plus and just want to know what instance or database you are connected to, you can use the following: 

Doing a and then a should cause a new to not show any entries in most situations. Here are a few situations that could cause this to not be the case. 

This is by no means the only way or necessarily the best way. You should consider streams and GoldenGate as well, but if at least one application is designed to use packages and access the data only through those packages, consider the following: 

When you see Modifiable you should read MEMORY Modifiable. For ALTER SYSTEM then this would mean can the parameter be modified in memory for the system. The Database Reference document you site includes part of this information: