Popup is simply put on top of the page. If it fits the viewport, it has (fixed position relative to the viewport), if not, (fixed position relative to the pge). With the latter being its drawback. Ability to scroll the page while popup is shown (with popup, that is) doesn't look good. Improved implementation. Page is enclosed in a wrapper. When popup is shown, wrapper shrinks to fit the viewport and its content (the page) is positioned (relative to the wrapper) in a way that it seems like nothing happened (page retains its visual appearance). But as a result, viewport scrollbars disappear. On top of that popup is put. In a wrapper, that fits the viewport. If popup doesn't fit the viewport, wrapper's scrollbars appear. 

. It coordinates things regarding window event. On receiving the event, it notifies (if in mode (2)), then (calls 's and 's method). . Updates page wrapper's extents. . It "listens" for other two "events". It calls its method when showing popup, after images has been loaded. And after textarea resize. method notifies if in mode (2), or updates popup position (, , properties) if in mode (1). . In mode (2) popup updates vertical position on receiving the event. Horizontal position is handled automatically, since wrapper is basically a table. 

footer Footer is to be stuck to the bottom of the page. That is done by setting for everything but footer: . If there's little to no content on the page, 's "moves" the footer to the bottom of the page. In mode (2), when popup is shown, footer can't just take viewport's client height (), since it might have changed when showing popup (scrollbar might got hidden). So, it asks , which in its turn asks about client height viewport had before popup was shown. Another issue you might encounter with footer in mode (2) reveals itself when you scroll down to the bottom of the page, open popup, then enlarge window vertically. Footer is supposed to follow page's bottom edge. And in this case, the abovementioned formula doesn't work. You've got to add for it to work as just described. Also, after having closed the popup, you have to set according to the first formula (without ). In mode (1), you don't add to when popup is shown. In this case the formula takes the following form: . Additionally, consider a page having . When popup is shown, it might cross right boundary, if not taken care of. In this case, you generally want to increase page's : . Manager class 

. Responsible for hiding page's scrollbars. Is not created in mode (1). . Basically an abstract class, that is to be inherited to make use of. Popups are shown by instantiating subclass. It has the following components: 

. Acts as a public interface for parts of the page that doesn't open any popups, but need to know how popup affects the page. Like footer, which is to be stuck to the bottom of the page. Responsible for: 

wrapper In mode (2) page wrapper is shrunk to fit viewport minus scrollbar width/height. Should it fit viewport unconditionally, page might change visually when showing popup. For instance, consider page having vertical scrollbar, popup gets shown, viewport scrollbars get hidden, and now page has more room to take horizontally. Right-aligned elements would move scrollbar width to the right. As a result, popup's wrapper should have the same scrollbars the viewport had. Or else, there might be empty space where viewport scrollbars were. To avoid that, passes 's method to via options, and when is about to be shown, it creates , and passes to the latter scrollbar state it gets from . In mode (2) when you click outside of popup (on the wrapper), popup closes. The naive implementation would be to close popup each time wrapper receives event. But then every time you click on popup itself, popup closes. To counter that, listens to event, and notifies about itself having been clicked. Then when event propagates to , it can decide whether to close popup or not. On a side note, it doesn't close popup directly. It calls method passed via option from , which is 's method. window/content change One other function popups have, they reposition themselves in response to window resize or popup's content change. The latter may happen in at least two cases: 

If you want a product id to return a list of products use a non-zero id. For delete, return an error status status on zero the same as if it were an invalid product id. 

Case insensitive tasks require extra CPU cycles. RegEx is the usually least efficient string function especially compared to stringtolower() and trim() Using these two function before the RegEx gives the RegEx less work to do. Consider giving the trim additional mask characters: e.g. Plus any other characters that could need to be trimmed (quote marks?). This worked well for you test : 

The following is rather unconventional but it is simple and fast. Run this only when CSS files needs editing: 

Expand and Contract (ec) the one Section where multiple Sections can be Expanded or Contracted. Only one Section is Expanded at any given time. (ecp ec paired) 

Consider using an extension other than . Even html is easier than php for users to remember. You could use the extension for the user to select the response type. For Example: In the Apache config or .htaccess 

At first glance I would first trim without a mask and then stringtolower inside before the preg_replace. 

At this point in your code Assert RTS and DTR Then Check Port Status by reading DSR and CTS If the device you are connected to does not support hardware handshaking they may have these signal set to an active state or they may be left unconnected. If these signal are not driven by the connected device, be sure your cable loops back your DSR and CTS to your DTR and RTS. Or use an RS-232 loop back adapter. Keeping in mind the PC is a DTE (Data Terminal Equipment) device not DCE (Data data Communication Equipment) When designing the original PC IBM perceived the PC to be a Terminal to their Big Iron so the logic of DTE and DCE are reversed. 

I would rather see ENVIRONMENT equal to 0 instead of 'development' and 1 instead of 'production' This is so if it is undefined it will equate to zero with . 

While on the subject of parameters I would suggest using integer parameters over string whenever possible. Integer is compact keeping down the Request Header size, is the easiest to validate, and makes comparison functions faster. Example: On a string true false parameter , no need to do it's not there it's zero. And it resolves typing between numeric 1 and string '1' when it is used as an array dimension. Instead of this: 

You may be over thinking it. It's actually very simple. The only ambiguous thing is if the year is two digits. In most cases a two digit year can be fixed like this. I believe in your use the month and year will be all be future and nothing from the 1900s. 

I can get the divs with , whereas jQuery does not know that the example-x class is only used on divs. jQuery has to get all elements and compare every one of them with (in my opinion) a long string. that is not a huge issue with this small example HTML, but on a real life web page it is a huge issue. Auto Find Pairs Rather than manually type in the pairs like this: 

the true condition should usually precede the false. so if I used the if else` this would be better: 

Where the width of #page would be device width. A responsive design cannot have a fixed width. A desktop responsive #page will have a max-width and a to center it in larger windows. For mobile the max width should be used in the viewport meta tag. If the max-width: is 60em, then the viewport is 16x or 60 x 16 = 960. 

Check validity of all passed parameters. Then determine the best, most specific and user friendly response. The best user response is to fix the error when possible. If a parameter is missing, add a default. If you had an HTML error on your web page, do you expect it to render? Would you like it if a single HTML error returned a 404 response? If a Browser was that rigid it may not get much use, same goes for your API. 404 is not an appropriate response when the document URL (index.php) is correct. Additionally this will confuse some users as to why. They may just think your server is down and they go somewhere else. Consider using an alternate response such as 409. You want to make it as easily as possible for the user to understand what their mistake was. 404 should be reserved for an error in the URL Also for diagnostic and support issues, use various response codes for different issues and document them for the user. You could use a text header and a message identifying the specifics problem with an error message. 

I am trying to get active directory groups with their users, all while disposing of all assets when they reach the end of their usefulness. The groups and users are passed into a method that extracts certain properties and adds them to . This requires a decent number of nested blocks. Since the method is private, and most of the variables only exist in the blocks, I gave the variables very short names. Naming them properly as or would involve breaking even more lines to fit the long names. 

This is a Windows Presentation Foundation application that queries active directory and can display lists of users, users by group, groups, and users by manager (direct reports). It operates on whatever active directory server the host computer belongs to, and dynamically builds a of all the Organizational Units in the active directory for the user to navigate through. Once a user has selected an Organizational Unit, they can use one of the buttons to start a query. The results of the query are then displayed in a . Complete Process: 

Is there anything I can do to reduce the number of blocks? Am I even disposing of everything properly? 

I got annoyed having to do things like when it seemed as if would perfectly suffice. Therefore, I wrote a small, simple library to wrap the static methods of primitives in extension methods. I don't suppose there is much to critique about the code itself, as most methods are one-liners, but I'm wondering if what I have done violates any best-practice principles. Is there some insightful reasoning behind why these methods were left out in the first place? The class dealing with strings is also very long, as I separated the classes based on which primitive they operated on, so all the and methods belong to the string class. I also further wrapper the methods, making and methods. Is that an unnecessary layer of confusion? CharExtensions.cs 

This class represents a single query on an Active Directory. It is given the type of query to run and the types of data to return, and performs the query and returns the data when it is commanded to do so. The goals I had with this class were to ensure that the query is run async so it doesn't freeze (and crash) the UI and to be able to create the query without executing it immediately. The queries also support cancellation (it is handled farther "down" the calling tree in the and classes). Questions I have: 

Your conditional statement using the variable reads very oddly. Granted, I normally wouldn't be using a loop over a collection with a randomly generated number as the conditional, but maybe that's just me. Outside of the code itself, I don't understand what "problem" you are trying to solve. I don't see how this type of transformation would be useful. In your example, the code will actually do nothing, as the first list is initialized empty and nothing is added to it. 

I have created a few extension methods to get the direct reports of a as s themselves. This saves the user of the API quite a bit of typing. 

As an assignment for a class, I have made a small Harry Potter family tree in Prolog. It compiles into a self-contained executable that can be run straight from the command line on Linux machines. This is my second ever program in Prolog, so I am still learning. My background is in imperative languages, so I am probably doing things and formatting my code in a not very "Prolog-ish" manner. Main 

The code is executed by creating a new and calling . Like I said before, if I change the program so that the string building is handled inside the directory getting, thereby only iterating over each directory once, the program runs many times faster, but at the expense of being able to split the paths and then "right-align" the permissions result. I thought about displaying the permissions first, and then the path, but that goes against the spec I was given to work by. 

Converting user principal to dictionary entry. Getting direct reports property of dictionary entry. Casting property to string enumerable. Using each string (distinguished name) to search for a user principal.