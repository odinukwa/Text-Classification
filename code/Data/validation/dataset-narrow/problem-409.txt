In one of my projects I needed a simple dependency incjection activator so I've built one. It performs only type/inheritance matching because I'm not creating a second Autofac and I think I won't need anything more complex any time soon (aka YAGNI). To find the dependencies I use a with a custom comparer. It runs over constructor parameters and tries to match a dependency and maintain the order of the parameters. If the parameters and dependencies counts don't match I use to find the missing ones and put their names in the exception message. I don't use a DI container because I use it for creating commands based on the command line. 

This is the only part that you actually can optimze. Eeach of the three algorithms does this and only the second one is a slightly different way. Not suprisingly LINQ kills it's performance of the last solution. 

This means that the and the aren't abstract enough and they don't separate you from either Entity Framework or any other DAL. They just use different names for some EF types. 

Now you or anyone else will swill know in few weeks what's going on here. There are more magic numbers here and there but I think you'll now know how to deal with them. 

All your methods differ only by one parameter and they are all amost identical. You also use the same properties for each control (second parameter). You should create an interface for it 

There is also a secondary problem: there is no constructor accepting any s so every time you create a dictionary from something non-dictionary you often end up looping twice twice over a collection (expecially with types derived from a dictionary) - and you cannot easily work with tuples. I tried to fix it with my own implementation that is built on top of the normal dictionary. It adds two es to add the key to the message and it adds constructors. 

You could use single loop and a buffer that you obfuscate and empty each time you find either a or . Then you can fix the line breaks and join the strings again: 

I cannot teach you anything about encoding, like @Adriano Repetti did in his great answers but maybe I can save you from more typing... You don't have to create a yourself, s are already arrays so let the compiler concatenate them and initialize the collection from a : 

Now we take parts of the big and move them into fuctions that do only one thing - we always strive for this because it's easier to maintain when you only have to care about one thing at a time (see SRP). 

There is still too much redundancy and you could improve more then the above but I don't know how the type looks like. 

I don't support the idea of having this method public and I cannot think of any case where it would be useful. If I create my value-object I either expect it to throw an exception or to have an exception-free . woudld mean I have to implement myself. 

In this case you might as well be using just a list but there will never be more then one item in this collection because the method has an invalid name and should actually be called . It adds the target floor to the list and at the end removes it from the list so its is always . You are ordering a list that can only ever have at most one item. Your elevator does not support multiple button presses because as soon as you press the first one it moves to the target floor immediately not allowing to add more requests and start moving after a few seconds. It's not asynchronous so you could just use an instead of a list. 

but I would like to see something that is working. I'd like to see that you can write code that compiles and does something useful and that you know basic stuff. So exactly what you did here. 

I've applied the same pattern to the but as it already had a lambda for the incrementation I just changed the argument to : 

You shouldn't mix the vocabulary. If you create a then the instance is a and not a although in this case it is technically a notification because it can only send a single message over and over again. If this is the desired behavior then you shouldn't call it an but an . The names need to be clear otherwise the usage of your API is very confusing. 

This way your printing becomes even cleaner and you can manipulate the header separately. The same applies for other cases. 

Injecting the doesn't seem to be of much use here as you are setting its to a hardcoded string of the . The whole point of DI is to inject an already configured rest client so that you can test it against various targets that you pass via DI. The same goes for other things that you setup in the constructor. Currently no matter what you inject the result will be the same. ApplicationException You shouldn't throw this one. Create your own that by its name already names the reason for the exception. 

Other things that aren't implemented correctly are the two detail properties. We don't use the prefix for them. Only for methods. The way they work is also a little bit strange. I first need to check the type of the exception to know which property I'm allowed to use or otherwise it'll might throw. They should return null if there is no exception of this type. The only exception they are allowed to throw is the if a object is in the state. The property should not be publically settable. This should be a part of the constructor. 

This is not a correct name for the base type. It should be something more concrete but still some kind of an abstraction. We use inheritance to add a layer of abstraction. does not abstract anything. 

SRP What botthers me most in the current implementation is that the class contains a lot of not related features. I find you can split it up into four smaller classes. Currently it's not only hard to test them but some of them are good candidates to be reused in other projects. This is what I suggest... 

The class should be abstract because it's rather unlikely that you'll have an instance of it. Consequently the constructor needs to be . The two properties this class it provides should be as you set them in the constructor and the derived classes call there's no need for their setters to be . Actually you can remove the setters if you are on C# 6. The same rules apply to other classes derived from the or other items. 

I need to execute several commands in a specific order but before I excute the main command, another command needs to be executed first and in some situations there are more commands that also need to be executed last. To achieve this I build an extended chain of resposibility. It does not only have a post-command but also a pre-command. The main command in the middle is the one that a user sees in a menu. 

You should always choose meaningful names for all variables. You did it well for the others. This could have been or . 

This comment would be unnecessary if you named the variables properly. For example instead of you could say . The method is also not helping. What does it mean that a path is valid? Is it valid because it doesn't contain any invalid characters or is is valid because it exits? You should decide and use the proper method. If you check if something exists then call it if you validate it then call it but with all the s and s such a long name might be a problem I guess ;-) 

In general I'd say it's a good design. You use dependency injection and provide all required parameters via the constructor. You also use an abstraction (interface) for the service but... it's not very useful. 

I think instead of looping indefinitely over the queue you should only start it when the first popup is queued via the and loop only as long as there are any popups. After you've shown everything you should exit the loop and start agian when something arrives. 

Next you modify the base client class to accept a list of notifiers and that requries the derived classes to implement the method (this is one of the Factory Patterns where the derived class provides something conrete for the base class - here just strings): 

The biggest change undergone however the . Generics don't support arithmetic operations so I needed to add a lambda for the sum. Now it looks like this: 

I think the class has too many resposibilities. It stores the license data, it encrypts/decrypts the license, it serializes/deserializes it, it writes/reads it into/from a file. My suggest to refactor it like this... 

Googling for xml compare c# produces countless results so I just review this code without suggesting anything alternative. 

Writing tests is sometimes a really boring task especially if you need to write the same test for the n-th time like when you are testing another custom . I thought if I write another such test I'm going crazy ;-) then maybe I'll try to automate it at least a little bit so I wrote a base class for such tests. In particular it tests the and methods with the possibility to disable the hash-code part because I sometimes just use a if I am not interested in it or it's not possible to calculate it. 

Or if you want to have only one method then try this (but make the other two and add the suffix - otherwise there'll be a conflict) 

This is what I ended up with. I removed the meaningless dictionary and replaced it with a . I need additional processing for the values thus the additional to make the lines more compact. 

I don't know if you always have pairs but in case you don't, the will make this not crash if a value is missing.