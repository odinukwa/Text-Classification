As the directory would suggest, those are the list of "sources" from which will pull applications from. lists the official repos, and appears to be an official mirror. 

This statement is nonsense and doesn't make sense. It's possible that they're trying to say that using a 3.5mm to 3xRCA output requires more CPU than using the HDMI port, but I can't find any real data to back up the claim. Thinking about the issue, the graphics output should be handled by the GPU, so I don't know why this would be true. This seems to be a case where the documentation just sucks. Sorry. 

There's no way to know for sure, but I highly doubt it. That's a pretty small battery (700mAh), it gives us no indication as to how much power it outputs, and it doesn't look like there's a built in way in which you could divert power from it to the RPi and Wii board simultaneously. 

An expanded GPIO header. The A+ has 40 pins which considerably larger than the original 26. Additionally, the new form factor and I2C compatibility allow standard Raspberry Pi hats to be used with the A+ model. MicroSD. The A+ switched from a standard SD card to a MicroSD card as its primary storage medium. Less Power. The A+ has significantly lower power consumption due to more efficient circuitry. Better Audio. The new circuit has a dedicated low-power supply Smaller, and neater form factor. The A+ board is about 2cm shorter than the A, and has had the composite video moved to a 3.5mm four pin jack. 

As I mentioned in chat, this project isn't possible as is. As with an engine in a vehicle, computer processors can very dramatically. A boat, plane, train, and car all have an engine, designed to move the vehicle from point A to B. Unfortunately, that's more or less where the similarities end. You can't take the engine out of the the boat, and put it in your car. They're just not compatible. Likewise, processors have fundamental differences known as architectures. Your 32-bit PC is running an processor, while the Raspberry Pi (and most phones and tablets) are running an processor. As with the example above, the architecture is fundamentally different, and not swappable. Theoretically, you could swap out components, and change the appropriate configurations, but it defeats the purpose of what you're trying to do. The kernel isn't the only thing that would need to be swapped. You need to recompile literally every single binary on the system, including the software you're trying not to lose. If you can't download the application anymore, I doubt you have access to the source code, which means recompiling it isn't an option. Alternative Solutions: 

You can setup linux so that the sections of the filesystem that need to be writeable are mounted to tmpfs. This will put all the filesystem writes into a RAM disk. The benefits of this solution is that they may speed up your RPi, especially on slower cards, but you will lose information on reboot. This may or may not be a problem based on your setup, but a UPS could significantly reduce the possible impact Some people prefer that their Pi boots from the SD card, and then loads the OS from a flash drive or eHDD. This will significantly reduce writes to the SD card, and will retain information between reboots. Performance will vary pretty wildly based on the USB device, but it's a viable option. 

Does the Raspberry Pi 2 support hardware virtualization? Looking at the ARM specification page, the Cortex A7 chip has the ability to do so, but I'm unsure if there may be other problematic concerns with the SOC or Raspbian itself. My end goal is to be able to create a very simple image that can be run on the RPi for learning Kernel development. 

By POS I assume you mean Point of Sale System. There's no reason that you can't use the Raspberry Pi as a point of sale system, but you'd probably need to write such system yourself. While it is a full fledged computer, there are some fundamental differences between the RPi and a standard desktop computer. The primary difference that will cause you problems is the architecture type. I went into some more detail about that on our blog. In summary, programs compiled for a standard desktop or server system won't work on the RPi. You'll need a binary specifically compiled for the it. If you can find an open source system that you can compile yourself, or there's one in the repositories already, you're golden. 

At this point it simply isn't possible. The makers of the RPi's GPU aren't particularly forth coming with access to the chip. Since we aren't provided with an API to get the GPU's load, any attempt at determining the load would be little better than a feeble guess. 

At this point I'd say it's fairly safe to say that this parrot is no more. I'd even go so far as to say that it's a fire hazard if it's heating up and making noises. It should be properly disposed of (recycled) and replaced. 

Once this is done, you're finished! Other Notes * If you don't know what the terminal is, I highly suggest you ask your grandson for help at this stage. While it's not rocket science and I'm sure you can learn, it's much, much easier to learn this part with someone who is already familiar with type of thing. 

Additionally, if connectivity is touch and go, you may find the flag useful. It monitors for events concerned with the HDMI port. Sources: 

As Joan mentioned, you seem to misunderstand the return value provided by . According to the documentation, and your output, it returns a . The operator ands a single value. Instead of a single value, you've given it a list (containing 32) of values. If you want to add that operation onto every member of that list, a map function is probably your best bet. I've given an example for your first operation. 

The RPi 2 is backwards compatible with almost all software. I would recommend a full upgade though as it should give you the best performance. While we can run ARM6 code, ARM7 is better. 

The vertical split in Screen isn't a part of its default functionality. It's a user patch that several distros keep in their repository to go with Screen. Since Arch usually keeps a more update, but 'pure' repository of software, you're missing the patch. I don't think arch keeps the patch in their repositories, but from some Googling, you can download it here. In my opinion, screen pails in comparison to Tmux. It has a lot of the features you want built in and is far easier to use. It might be worth a try ;) Edit: To install the patch, install it like you would a standard Linux application form source. 

There's really no settings on the pi that would change how well that works. My guess is the TV port puts out the bare minimum power it needs to interface with whatever the specified receive is. Often times, USB ports on TV's aren't for anything more than a diagnostic tool or flash drive with some pictures on it. My recommendation would be to plug the Pi into an outlet. 

Oh, trust me that's incredibly high for an RPi. in this case is 500 MB. The Pi only has 1 GB of available memory, which is 1024 MB... Essentially, you're dedicating half of your system's available RAM to the GPU. If you're going to use a camera, it requires 128 MB of memory to be allocated to the GPU, but for anything else, the default 64 MB is plenty. In a previous edit I flippantly joked about setting it to 0, but this isn't actually possible. The RPi needs a minimum of 16 MB allocated to the GPU, and if you set it to 0, the RPi will default back to 64 MB. Personally, I set my headless RPi to 16 MB. 

It's not really necessary to avoid the temporary writes. I would just log directly to the file. I find your design choice a little odd, but it's not wrong or ill advised per say. 

The easiest way around this would probably be to create your own webpage that has HTML tabs and embeds your vendor pages in iframes. Create a browser plugin (or utilize something like greasemonkey) that inserts the solution or something that accomplishes the same goal as #1. Add a button(s) to the kiosk that will run a script to change the page available to the user through the kiosk. Run multiple kiosks. 

Based on your picture, it looks like the power switch is flipped off. If you look at the board oriented with RPi PowerPack V1.2 at the top, you'll notice there's a switch at the very bottom of the board. Switch it to On. I'm not sure if this matters, but in the images provided by your link, they all show the RPi being plugged into the top USB port. If they're ordered, it may make a difference. 

Like any other OS, Raspbian has some defaults enabled. Since the RPi is geared towards children, those defaults tend to be on the friendlier side. If you want to edit the defaults, you can change them with the traditional blue screen by using the command . 

You're not getting enough power to boot the RPi when you plug in the HDMI cord. Without the strain of the HDMI cord, you probably have enough to boot the RPi, but if you increase the load on the device, you'll probably run into problems like SD card corruption. Compared to the RPi's internals, the USB and HDMI interfaces are very power hungry. On boot, the RPi detects that a TV is connected and tries to send the TV a signal. That signal ends up pulling more power than the TV is able to provide and crashes your RPi. 

Attempting to install fsevents on the Raspberry Pi doesn't even make sense. According to its package page, it's a library to get OS-X FSEvents. Since those don't exist on the RPi, it's not compatible. The warning you get from pm2 specifically lists the dependency as optional. You'll loose some MacOS functionality, but you don't need that anyway. 

Shorting it Plugging it into a car battery Overclocking it to 3GHz Putting it in an active volcano Using it in a pool Using it in the ocean Running it over with a car A drive by shooting Using it near explosives Hitting it with a meteor Feeding it to a dinosaur Jesus smiting it 

Yes, as Goldilocks mentioned, you can compile the software directly on the Raspberry Pi itself. Short of that, you need to setup a cross compiler. How you do that is well outside the scope of this site. This is not a tutorial service. Your problem seems to stem from the a lack of understanding the Raspberry Pi's processor. Unlike your desktop or laptop computer that you're compiling the program on (), the Raspberry Pi 2 runs an processor. These two things are fundamentally different, and are not compatible. Our blog post goes into that in more detail. 

No, the things don't just plug into each other to create Voltron. Which is unfortunate, because that would be cool. 

It's certainly possible that the SD card reader is broken, but it's difficult for someone in our position to give you a definite answer. A few thoughts on the matter: 

Yes, you could theoretically make your entire desktop environment in Java. Since it's significantly slower than C, it probably won't perform as well, but there is no real reason you couldn't do it. All it will take is a lot of time, effort, and skill that you may or may not yet have. 

Dealing with Compression The extension on the end of the file means that the file is compressed using LZMA or LZMA2 compression. On Windows, the best way to unzip the file is using an open source tool called 7-zip. Use the graphical interface to extract the file, then install the file normally. Installing the IMG file The official Raspberry Pi site has a tutorial on how to write an image to the sd card when running Windows. From their website: 

No, not really. It's theoretically possible to emulate code on an machine using some form of virtualization, but the Raspberry Pi is not powerful enough to do it functionally. 

At this point there's no experimental builds, and both the RPi foundation and MS have been fairly closed mouth about the entire thing. I'm betting that we won't see it until early 2016 since the normal desktop/tablet version is expected sometime around the end of this year (though no official dates have been released). Edit: According to this interview, the Windows 10 release will be available "later this year", and will be geared primarily towards IOT applications. 

According to elinux's documentation, 5 flashes and a pause from the green LED indicates that is not found. I would try reinstalling the OS. 

You cannot run Matlab on the Raspberry Pi. Matlab requires an processor, while all current models of the Raspberry Pi use an processor. They're fundamentally different, and incompatible. We go into that some on our blog. The only way you can utilize a Raspberry Pi with Matlab that I know of is to use the RPi as a sensor device. You can read about that in their documentation. 

The Raspberry Pi pulls from Debian repos and the Foundation's custom repo which holds RPi specific software. A tutorial on setting up an entire Debian mirror (same instructions should work for the RPi repo) is way outside the scope of this site. I would suggest you look at Debian's documentation on how to setup a repo mirror. It's worth noting that the entirety of the repo is roughly 1.5 TB. You can cut that down by just including the arm and source stuff which will put you closer to 150 GB. 

No, it is not possible to use the HDMI port on the RPi as a video capture device. The HDMI port on the RPi is an output only port. It can receive some basic status messages (HDMI-CEC), but it isn't able to receive video in. You can buy hardware that is designed to operate as a video capture device, but in general, it's pretty pricy.