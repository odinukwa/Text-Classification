The following will be a polynomial-time fixed-parameter reduction from $\pi_1$ to $\pi_2$: Try the FPT algorithm on $\pi_1$ for up to $n^{\hspace{.02 in}c}$ steps. 

the automaton to have it track its output's location in ​ ​ ​ the pre-periodic part ​ / ​ the period ​ , 

of [the pre-periodic part concatenated with the initial period] is less than $\: C\hspace{-0.04 in}\cdot \hspace{-0.03 in}j \hspace{.02 in}\big]$. 

gives an exact cover. ​ Since elements of $\mathcal{S}$ from clauses do not have any elements of $\mathcal{U}$ 

Now, plugging in ​ $j = 2^k$ ​ and [using just $k$ random bits] and $\big[$using the actual input machine's structure as a Turing machine to simulate reading from a $\left(\hspace{-0.04 in}O(S)\hspace{-0.04 in}\cdot \hspace{-0.04 in}2^S\right)$-state automata whose probabilistic transitions are all coin-flips$\big]$ gives a ​ $O\hspace{-0.04 in}\left(\hspace{-0.03 in}(S\hspace{-0.04 in}+\hspace{-0.04 in}k)^{\hspace{.02 in}2}\hspace{-0.03 in}\right)\hspace{-0.02 in}$-space algorithm that uses $2\hspace{-0.05 in}\cdot \hspace{-0.04 in}k$ random bits to sample from a distribution such that, other than $\bot$, the probabilities for each output are less than $1\hspace{-0.04 in}\big/\hspace{-0.07 in}\left(\hspace{-0.04 in}2^k\hspace{-0.04 in}\right)$ away from the original probabilities, and whenever the latter is greater than $1\hspace{-0.04 in}\big/\hspace{-0.07 in}\left(\hspace{-0.04 in}2^k\hspace{-0.04 in}\right)$, the resulting probability will be at least $1\hspace{-0.04 in}\big/\hspace{-0.07 in}\left(\hspace{-0.04 in}2^k\hspace{-0.04 in}\right)$. ​ ​ ​ (Since $2^k$ is a power of two, 

By Bertrand's postulate, $p$ will be less than ​ $4\hspace{-0.04 in}\cdot \hspace{-0.04 in}C\hspace{-0.04 in}\cdot \hspace{-0.04 in}j^{\hspace{.02 in}2}$ , ​ so for $j$ given in unary, logspace can find $p$ 

for all real numbers $\epsilon$, if ​ $0<\epsilon$ ​ then the promise problem Input: ​ a game as described in my question 

and from reachability on such a DAG, one can recover the root as the unique vertex from which every other vertex is reachable and the tree by observing that x is adjacent to y if and only if [x≠y and [one of {x,y} is 

whose absolute errors are each less than $1/\hspace{-0.04 in}\left(2^{\hspace{.02 in}\operatorname{length}(x)}\hspace{-0.05 in}\right)$ 

For n such that $\;\;\; 1\hspace{-0.04 in}\big/\hspace{-0.07 in}\left(\hspace{-0.02 in}n^{2+j}\hspace{-0.02 in}\right) \; < \; \operatorname{Prob}_{\mathcal{O}}\left[A^{\mathcal{O}}(n,z^{\mathcal{O}}(n))\right] \;\;\;$: In particular, there exists $\big[$an oracle-circuit $C$ of size at most j+n$^{\hspace{.03 in}j}\big]$ and 

$\operatorname{Pr}_{x\in \{0,1\}^n}\hspace{-0.06 in}\left[\hspace{.02 in}R\hspace{-0.04 in}\left(x,\hspace{-0.04 in}C^{\mathcal{O}\hspace{-0.02 in}}(x)\hspace{-0.03 in}\right)\hspace{-0.02 in}\right]$ is infinitely-often greater than $1\hspace{-0.04 in}\big/\hspace{-0.07 in}\left(\hspace{-0.02 in}n^d\hspace{-0.02 in}\right)$. By countable additivity, there exists a positive integer d such that for a non-null set of oracles $\mathcal{O}$, there exists a sequence of circuits of size at most d+nd such that 

Let ​ $D,\hspace{-0.02 in}m$ ​ be the number of variables,terms respectively in the simplified instance. 

must output ​ NO ​ if : ​ ​ ​ the game's value for Player 1 is less than $\epsilon$ remains RE-hard even when player_to_move is always 1 ​ (i.e., only 1 player is needed) and s0 ≠ sa ​ and ​ sa is not in Range(next_state_table) 

exp(-(2/324)$\cdot$n), which is less than 2-(1/113)$\cdot$n. ​ Thus, for choosing a subset of {0,1}n whose 

$\langle \hspace{-0.02 in}$s,0$\hspace{-0.02 in}\rangle \hspace{-0.02 in}$ to $\langle \hspace{-0.03 in}$t,k+1$\rangle \hspace{-0.03 in}$: ​ increment the right coordinate with each step, and keep the left coordinate as t once it becomes t. ​ In the other direction, to get from $\langle \hspace{-0.02 in}$s,0$\hspace{-0.02 in}\rangle \hspace{-0.02 in}$ to $\langle \hspace{-0.03 in}$t,k+1$\rangle \hspace{-0.03 in}$ with at most k inner nodes requires that each step increase the right coordinate, so [the steps for which the 

The weight of each edge is equal to that edge's terminal vertex. However, one can topologically sort the vertices and then use dynamic programming 

must output YES if : ​ ​ ​ the game's value for Player 1 is greater than 1-$\hspace{.025 in}\epsilon$ 

for $\: U\in \{0\hspace{.01 in},\hspace{-0.03 in}1\}^L \:$ and $\: p\in \{n\text{-bit primes}\} \:$ uniformly distributed, the statistical distance 

$\Bigg(\hspace{-0.08 in}$The polynomial can be $\;\;\; \displaystyle\prod_{i\hspace{.02 in}\in \hspace{.02 in}\text{coordinates}} \: \left(\displaystyle\prod_{c\hspace{.02 in}\in (\mathbb{F}\hspace{.03 in}-\{0\})} (x_{\hspace{.02 in}i}-c)\hspace{-0.07 in}\right) \;\;\;$ and X can be the origin.$\hspace{-0.08 in}\Bigg)$ If "large" means larger than 1 plus [the minimum over the variables of the degree in that variable], then there's a uniform NC$^0$ algorithm that will, with no access to the polynomial, with neither 

routine can be done with bounded fan-in in depth $\:o(\hspace{.02 in}\log(\hspace{.02 in}\log(k)))\:$, 

without loss of generality that the output tape is part of S's workspace. ​ ​ ​ ​ ​ ​ ​ Consider each pair of consecutive times that S goes from an end of 11111...[n of them]...11111 to an end of that. ​ Since S uses sublogarithmic space, its [internal_configuration,direction] pairs must repeat between different pairs of adjacent input bits. ​ Such repetition must continue in the same direction and with the same spatial period until S gets to an end of the input. ​ If the end S gets to is the same as the end S started at, then extending the input in the other direction obviously won't affect S at all during that time. ​ If the end S gets to is the other end, then extending the input with [a number of 1s equal to the spatial distance between the repetitions] won't affect [the internal configuration S is in when it gets to the other end] or the internal configurations S uses along the way. ​ Thus, increasing n by [the product of the numbers of steps between those repetitions] does not affect the number of internal configurations S reaches, so does not affect the amount of space S uses. ​ In other words, there are infinitely many n for which S only uses O(1) space. ​ By the initial sentence of this proof, that means that means f is not in ω(1). ​ Therefore, by monotonicity of f, f is instead in O(1). 

in unary) NC2 can determine whether there is a pair of $\big[$strings with length less than $\: C\hspace{-0.04 in}\cdot \hspace{-0.03 in}j\big]$ satisfying the condition in the paragraph just-before the at-symbol, and if so, find that pair. 

Let p be as in Theorem 2, and set $\;\;\; f \: = \: 2\hspace{-0.04 in}\cdot \hspace{-0.04 in}p\hspace{-0.04 in}\cdot \hspace{-0.04 in}\left(\hspace{.02 in}j\hspace{-0.04 in}+\hspace{-0.04 in}n^{\hspace{.04 in}j}\hspace{-0.02 in}\right)\hspace{-0.04 in}\cdot \hspace{-0.04 in}n^{(2+j)\cdot 2} \:\:\:\:$. 

Thus, [[stopping a path of length at most k from $\langle \hspace{-0.02 in}$s,0$\hspace{-0.02 in}\rangle \hspace{-0.02 in}$ to $\langle \hspace{-0.03 in}$t,k+1$\rangle \hspace{-0.03 in}$ when its left coordinate becomes t] and then projecting down] will always yield a path of length at most k from s to t. Furthermore, there is a DLOGTIME-uniform AC0 algorithm which, given an alleged output of that reduction, will either correctly conclude that its input is not a possible output of the reduction or [output a proper 2-coloring of its input and a set of integers such that [no element of 

communication complexity that scales quadratically with the size of the SAT instance or reduce to 3-coloring and, although the communication for each instance of the "core" 

less than $\: C\hspace{-0.04 in}\cdot \hspace{-0.03 in}j \:$ strings for which there exists a configuration which is good for the string.