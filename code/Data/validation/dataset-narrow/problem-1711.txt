OK, I've managed to solve the problem myself: In fact, I had prepared the sound output beforehand by using the ALSA audio API functions described in this tutorial, unfortunately including a call to the function, which engaged the sound output device. After studying the sourcecode of out123, I found out that out123 already opens the sound device when issuing the function â€“ by using , of course. However, I've still gotta find out how to make the necessary settings to ALSA when working with out123. 

I'd like to play MP3 files on my Raspi 3B by using mpg123, so I added (among others) the following lines of code into my app: 

I've now got an Ultimate GPS board attached to the UART, and use both the GPIO pins, and the SPI interface by addressing the pigpio library. The pigpiod docs tell me that pigpiod would control the UART, too, but then it would probably interfere with the gpsd, which already controls the UART. Any suggestions? 

When calling mpg123 from the command line, though, I do get line 1, but not line 2, and the line with is also missing in the debug output! 

I've got the following tricky problem: I'm using pin #22 (GPIO25) of my Raspi 3B as a GPIO input and read its state by using the pigpio function , where is a pointer to the function called when pigpio detects a state change. After adding a JustBoom DAC HAT sound card, the input kept on working, but once I started talking to the sound card by using the function of the mpg123 library, I stopped receiving alerts from pin #22 without getting any error messages. The pinout description of the sound card states pin #22 as optional (for use with an IR receiver). I don't have such a receiver soldered to the sound card, so that I don't really understand why the card interferes with a pin it isn't using anyway. Low-level checks by using and did deliver correct resoluts: Once I pulled pin #22 to high, I received a 1, and a 0 when I pulled it to low. Any hints? Thank you for any useful information. 

i thought it was the 'I/O' bottleneck stuff, so i went to Multiprocessing code which is basically polling the frame whenever it is available without waiting for each time camera capture frame to complete (that is what i'm currently understand). but there were no significant different on FPS counter or i must say, only 2 FPS increase. This is my Multiprocessing code: 

I'm currently trying to develop image tracking using color in Python 3 and OpenCV. But i am facing problem in PiCamera. At the moment, i've done some method to fix white balance, shutter speed, and other stuff. But i can't get something fixed yet. i assume it was a white balance that drift. this is my setting: 

i've changed the metering mode to 'spot' dunno if that make a different but the effect seems more predictable in this mode. i already change it to all of it's available option but the white balance? is still drifted in one or other way. 

Currently, my system is only producing 10 FPS out of 20, which is my target. I'm barely hit 15 FPS in single grab-and-show simple code like this: 

After that i went to Raspberry Python 3 to do the same thing, but nothing happen in Python console when i tried to run it. the console cursor just sit there doing nothing beside blinking, but when i try to run it from terminal by typing and followed by file directory, the text just appear like nothing happen. I don't know why, but i'm definitely missing something here. can i actually run this on Python 3? and why the text are not shown in Console that called from IDLE? 

The return value of is then , but in the same moment, the status LED on my sound card (JustBoom DAC HAT) is switched off, and the card delivers no sounds any more (until I reboot my Pi, at least). The debug messages emitted when is called look quite strange: 

The default device is a JustBoom DAC HAT named plughw:0,0. When using mpg123 on the command line (by using the device name explicitly, or resorting to the default device), everything works fine, but when using the mpg123 library functions in client code, I always get such an error, no matter whether I set the device and driver names to NULL (which means trying out the drivers out123 knows and using the default device). I don't really execute mpg123 by using fork ()! What's the problem here? Thank you for your help. UPDATE: After switching to the recent mpg123 version from GitHub & setting verbosity to 3, I get the follwoing messages when issuing : 

After a thorough check of the wires leading to the display, I found out that the soldering of one of the ground wires (which is soldered to the GND connector of a USB cable, which is itself plugged into the UPS of my Raspi) had gone loose (which was invisible at first glance). Unfortunately, it wasn't just some GND pin, but display pin #20, which must be pulled to GND for the display for its SPI interface to work. After resoldering this wire, everything now works fine. :) Shame over me!! 

The short answer is yes. The long answer is yes, but... 3.3VDC is enough to run a low speed fan provided its designed for 3.3VDC. I wouldn't try anything larger than a 40mm fan like this one, and this is why: the larger the fan blades are, the more torque is required to turn them, in in turn requires more power. When you only have 3.3 volts, it takes 4 times the amount of current than with 12 volts most computer case fans run on. Also, the fan speed will not be as fast as the regular computer case fans either. But yes, it can work for you. A quick google search found a few pre-made options like this one on Amazon for one with a fan running on the Pi GPIO pins. . I can neither speak for nor against either of these fans as I have not used them, they were just the first reasonable hits in my google search for "3.3v case fans". 

I realize this is well past its date, but your really better off with a 3.3v or 5v fan rather than trying to recycle an old case fan. Even if the fan's power needs were more of a match, the larger fans require more torque to spin the blades and that will draw more current. 40mm 3.3v or 5v fans are a good soft limit for trying to power from the RPi itself. I give you full props for trying to up-cycle that old computer case fan, but it really isn't a good fit here due to the limits of the RPi power supply. A quick google search will find a number of inexpensive 40mm 3.3v fans out there. There are even some specifically designed with mounts for use with RPis. As for how to do it: take two male-to-female jumper wires color matched to the wires on the fan cord (ignoring the yellow wire) and then plug the male end of the jumper into the fan's socket. Then take the female end of the jumpers and plug the red one into pin 2 and the black one in pin 6 of the GPIO as shown in this diagram. 

Basically no, you either need a buzzer for simple BEEP stuff hooked to one of the GPIO or using HDMI adaptor that contain an audio jack. for more complex, a bit permanent solution you can build one of pwm based audio like what Bj Black already mention 

In sort. No, you cannot modify IDLE easy enough without dismantle IDLE core code or something. Instead, you can use Geany (in raspberry or linux stuff) or Notepad++ with your own RUN-command. But with a drawback, even this is not in the scope of question. See, the Geany and Notepad++ is only for printing stuff in multiprocessing or multithreading code. It's not mean to be a debugger or some sort. 

I have couple keyboards now sitting in the desk but somehow it refuse to work on raspi3 Jessie with pixel (genius kb100-holtek semiconductor and prolink usb keyboard) , both tried using powered usb hub and without it. From the list in this elinux website. Instead buying a supported keyboard, can i just install the driver or other stuff to make it work? 

I've been trying to create a program that split few different section of my main OpenCV program to increase fps. The first thing i ever think of is the Pipe() function from my friend. I've tried this 'default' code below in python 2.7 on Windows 10 to learn the basic first of multiprocessing: 

It is unlikely you bricked your pi. Short of pulling the plug when the Pi was flashing its BIOS its pretty hard to kill one. It is more likely that when your pi lost power abruptly that something in the hardware configuration manager got a little confused. This happens from time to time. Re-flashing your SD card is a good guess but not my default default solution. First thing I do is to pull power cord and let the Pi cool off for a couple of minutes before I try again. Its also a good thing to double check to make sure the USB cable your using for power isn't frayed or otherwise worn. Swapping cables and/or power supplies here isn't a bad choice either if you have the extras lying around. Remember, with RPi's the shorter the USB power cord is, the better. The next thing is to pull the network cable if its connected via Ethernet and see if it will boot without the network cable connected. I'm thinking this is where your problem is because you said the Ethernet port lights didn't come on. If this is the case, after a normal shutdown you should be able to plug your network back in and the Pi should boot normally. Why would the Ethernet make a difference? Some Ethernet controllers and hubs support something called Power-over-Ethernet or PoE. Even if the hub or router does not offer PoE it might offer pass-through support for PoE. If your network cord has the extra pairs of wires inside, thats where PoE flows. 100baseT networking only uses two of the four pairs, and cheaper network cords might only provide those two pairs. PoE is great for IoT projects but can be a pain in the neck for troubleshooting power issues because if your using a network cable that supports PoE and your using a router that supports PoE or PoE pass-through, you might be supplying some power to the Pi that way unintentionally. The Pi does not support PoE, so this would be like any other undesired voltage. The Pi has a polyfuse to protect itself from this, but until the current reaches quiescence the polyfuse wont reset and your Pi won't boot. If that doesn't work, we head into less common areas. Try a different power supply and USB cord next, if you didn't earlier. Its possible that with a different power supply the Pi will fire up and everything will reset during the boot sequence. If that doesn't do the trick, pull the power and then pull the HDMI cable before plugging the power back in. HDMI can provide limited source current to a HDMI device (for HDMI plug-in hardware like Chromecast or Fire Stick) and like PoE, this can upset the power controller on your Pi too. If you use a display adapter or run headless you can skip this step. If the unit doesn't have a display, or the display stays blank, how can you tell if the unit booted? Watch the green light next to the red power light. When power is applied to the Pi both red and green lights should come on. The green light should go off and start blinking or flashing as the Pi starts booting. The red power light might go back off and stay off if the power is less than optimal, but the Pi will boot as long as the green light shows activity. If there isn't a display, how can I safely power it back down after it boots? If you boot to the command line this is relatively easy. Wait five minutes, plug in a keyboard, and carefully key in your login and password. Then type and wait until the green light stops flashing. If you boot into Pixel instead of the command line you have to watch the lights as above. Once the green light stops flashing or blinking and stays off for a few moments, you can kill the power. If these blind methods make you nervous, you can go a little risky here and hot-plug the HDMI. Unlike a network cord with PoE, it is 'safe-enough' to do this to double check if your Pi is booting. Its not really good for the Pi, but in this edge case we can get away with it. Still isn't booting? Next remove any hats, including a display module, and anything else connected to the pi like the camera module. Double check to make sure any extra pins or jumpers have been removed from the run holes or the GPIO, and that the Pi is resting on a non-conductive surface. Try again with Pi bare (wait to plug your keyboard in until after you see if it boots) and watch for the behavior of the red and green lights light above. Then re-flash your Pi and try with just the HDMI or display adapter installed once you have your re-flashed card installed. As a last ditch, try powering the Pi without a SD card installed. The Green light should stay on, even if the red light goes out. If neither the red or green lights come on, then its time to look into what options for warranty you may have, as its likely the Pi has some other fault. The good news such that it is, that the newer Pi 3's are out and just as inexpensive. Good luck, and I hope this helps.