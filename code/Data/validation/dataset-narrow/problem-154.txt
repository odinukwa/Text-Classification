In your sheme you need 3 trunk links (if there is only one physical connection between these switches): 

The routing between these subnets will be handled by the L3 switch. so if pc 0 wants to ping to pc 1: PC0 > (gets it on his vlan 1 port) switch 1 (trunk) > switch 0 (trunk) > switch 2 (trunk) > L3SW (vlan1 > vlan2) (sends it out of its trunk port) > switch 2 (trunk) > switch 0 (trunk) > switch 1 (vlan2) > pc1 

I think the problem is the encryption used for wireless connected devices. This is probably possible, when not using any encryption. (not recommended, and be sure you only test this on your own network, otherwise, in most countries, this is considered illegal.) 

Yeah, it is possible to do CCNA without any real time experience. I wouldn't go so far with a CCNP/CCIE but CCNA is made to give an introduction to the world of networking, routing, switching, ... . However, you will not know it "in deep". This is not the intention of a CCNA course. You well have a good base and even a bit more... . Examinations of CCNA requires that you know your theory, commands and Cisco proprietary stuff. The commands mentioned here, you should train them with something called 'packet tracer'. This is a software made by Cisco. 

ARP spoofing is just the thing that is doing the multiple MAC's for one IP. :) So if you want to avoid duplicate adresses... stop ARP spoofing (poisoning) your network. If you want to understand this, read the following page: $URL$ 

you should check out VRRP or HSRP (when using Cisco) $URL$ $URL$ In a nutshell: 2 routers will check availability, when the main disconnects, the backup takes over. These routers need to be in the same subnet doh, using 1 IP per router and 1 shared IP. This shared IP is your default gateway. 

The MX platform does not have the general concept of a "VLAN" that is present on the whole platform. The MX only "sees" VLAN tags on incoming packets and can then act on these tags. What you want is to bridge packets from two ports that have the same VLAN-ID in the L2 header and then add a L3 interface to that bridge. On the MX platform you have two ways of configuring bridges. Service Provider Style and Enterprise Style. As I'm more familiar with the SP style I'll answer your question that way: Juniper MX SP Style Bridging First you configure your interfaces to accept packets with the right VLAN tags: 

I have two MX80 routers which are connected. When I enable the interface on one router I get the following packet from the other router which I can't explain: 

I'm trying to connect one end of a L2VPN tunnel to a VPLS instance on a Juniper MX router. The L2VPN should act like a local interface in the VPLS instance. Is this possible at all? I can't find any information about how this could be done. 

Reverse DNS for IPv4 is specified in RFC1035 Section 3.5. The special domain was created for this. For IPv6 the special domain is as specified in RFC3596. The record type that gets requested for reverse lookup is the record. For IPv4 the IP address is reversed on the "dot" boundaries after every byte: gets transformed into For IPv6 the address gets reversed after every 4-bit "nibble" (every number/letter) with a dot inserted: gets transformed into For DNS servers there is no extra work involved, every DNS server software understands/supports PTR records. The reverse lookup on the client is done by the application(s) you use. There are standard system calls for reverse lookup on every OS. 

This is really frustrating, since DHCP is dead simple and it should work without any hassle. The DHCP server in question is the isc-dhcpd-server running on Debian 7 Wheezy and it's on production, serving a lot of different subnets, so it's working as it should. What I'm missing? There's something that should be enabled on Nexus? Perhaps some kind of default ACL's blocking the DHCP traffic? To be more precise here's a drawing of the topology: 

I even used tried on client machines to see if the DHCP packages are sent and I can confirm they are being sent. On the switches I tried some debugging with and what I see is a lot of "DHCP Discover" requests without any answer. Only the SVI DHCP request of the first switch appears to be working. Here is a snippet: 

I have figured out. After four working days wasted, it was a bug on the NX-OS firmware 7.0(3)I2(2d). After upgrading to the latest recommended version 7.0(3)I4(6) the DHCP packets started flowing normally. Here's the link to the Cisco website: $URL$ 

A couple of design questions: - Are you mixing iSCSI and other data in this cluster (I assume you will user VPC)? - Are you mixing iSCSI and other data in the same port with tagged frames? 

If you just plug it on the network without touching anything on the configuration it should behave just like an unmanaged switch. This happens because the stock configuration generally allows this. If the switch have VLAN capabilities it come for example with a predefined VLAN1. But do yourself a favor and at least learn how to connect to it and explore its features. If you like networking you'll be pleased. 

I have a firewall counter on a Juniper MX router () and want to poll its packet/byte count via SNMP. I searched for an OID but I'm unable to find one. Is it possible at all to poll firewall filter counters via SNMP and if so which MIB/OID do I use? 

There is no XML output for Juniper ScreenOS devices. Only Junos devices have XML configuration output as the underlying management system on those devices uses XML. 

You can override the path loop protection (on Cisco this would be the command). stands for the number of times your own AS is allowed in the path. So if you strip private AS from the path the eBGP neighbor may not see it's own AS (when it is a private AS) and there would be an unrestricted loop. 

As for the second part of your question, HSRP, VRRP etc. use gratuitous ARP to update the MAC address tables on L2 devices (switches). Also there is the option to use the burned-in MAC address for HSRP instead of the "virtual"one. In that case the gratuitous ARP would also update the ARP tables on L3 devices/hosts. 

It dependsâ„¢. Normally for a 10GBit/s interface it means 10GBit/s full-duplex, meaning you can receive and send at 10GBit/s at the same time. Sometimes marketing gets in the way and you get stuff like "This linecard does 260GBit/s" just to realize (before buying it, hopefully) that they meant 130GBit/s in and 130Gbit/s out. But for a single interface it should always be full-duplex. That being said the practical maximum speed of the interface will depend on a whole bunch of factors, for example the speed of the backplane, oversubscription of the linecard (and utilisation of the other ports on the linecard), amount of packets (many small packets are much more "expensive" to handle than fewer, bigger packets with the same amount of GBit/s), etc. 

I've a strange problem with a pair of Nexus 3048 Switches in a vPC configuration. Since the core are still under implementation we've hit an strange issue: clients can't get IP addresses from the DHCP server, but the SVI can get an address from the DHCP server. The DHCP server is plugged on another switch, but the connection is made on one interface on the first Nexus and the interface have this configuration: 

There's no Layer 3 routing happening inside the Nexus. It's plain Layer 2 networking, which should work without any hassle. The curious thing is that the SVI can get the IP address from the DHCP server. The same SVI on the second Nexus cant't get the address either. I've done the following tests to debug the problem: 

I'm running two Nexus 3048 switches as network core and I got an issue when linking another switch (specifically a 2960-X) on the vPC links. Consider the scenario: 

We're building a new core for our University and one thing that bugs me is the iSCSI network. We already considered Jumbo Frames and Flow Control on the iSCSI ports, but one thing remains for debate, and it's the QoS Feature. Our new core consist of two Cisco Nexus 3048. There will be two different iSCSI VLAN's for MPIO, one VLAN will be in the first switch and the other one on the the second. The Jumbo Frames and Flow Control seems trivial, but QoS does not appear to be simple. I was unable to find any guidelines for iSCSI on the Nexus 3048 models. There are a lot of information for the 5000 and 7000 series but many features are missing on the 3000 series, like the QoS traffic match with the iSCSI protocol. Another thing that I'm unsure is about CoS (Class of Service) Classification. Is this a requirement requirement? I don't know where iSCSI should be placed. Thanks in advance, V. EDIT with Answers: 

To block an unacceptable website you would normally use a proxy server or web filtering firewall. Either by forcing everybody to use the proxy and blocking the normal access to the web or use a firewall and block the offending URL(s). Using IP addresses is never a good option for websites as these addresses can change very often for big sites (when they switch to/from CDNs, when they add another cluster that's nearer at your location, etc.). Finding out all IP addresses a big website uses is very difficult with big players like Facebook and Google. Also there are many services who can be used as a proxy to access these sites despite you blocking the IP. 

There are two things you could do with BGP: RTBH - Remotely-Triggered Black Hole First option is the radical one: Blackhole (stop traffic) for the IP getting attacked. Downside: The IP being targeted is no longer reachable. Benefit: The rest of your network stays up. Packetlife has a nice explanation on how it work and how to do it. The second option builds on the first one: Source-Based RTBH RTBH can also be used (in certain configurations) to block traffic coming from specific IPs (in a real DDoS that wouldn't help much as traffic would come in from thousands of IPs). Again, Packetlife has an explanation. In your case you could get all prefixes for the AS from a Routing Database like RADB and block these with Source-Based RTBH. Traffic would still hit your network at the border though. When you use "simple" RTBH the advantage is that you can send these RTBH routes to your Upstream ISP (if they support it) who could then block the traffic in their network already so you don't have to handle it. 

the 1 bits in the address are the network part of the address, this cannot be used for assigning hosts. In this example, you can use 9 bits for the hosts (minus 2 hosts, reserved for the broadcast and network address).In the /23 you have, you can use: 

everything before the "|" is the network area, that cannot be changed in this subnet. Everything after, you can use for your hosts, except the all-0's and all-1's. This is clear if you put the subnetmask under it. You can calculate everything here (and on other sites): $URL$ 

You can set up the basic Zenoss monitoring server, it's supports Cisco Devices information gathering via SNMP. This provides a lot of information just by adding an IP (like: IOS version, interfaces + IP configuration, ...) 

BGP is very scalable and can be configured easily (however to be able to troubleshoot, you need to know BGP indepth). It is used on a global scale by ISP's as well. To calculate the routing path, BGP uses a few variables and not just a metric or number of paths. So this should be more accurate. Even if you want to set up a backup path, this can be done simply by adding the same AS number over and over in the path... . The routing table can handle large amounts of entry's as well. If you want further information, I do suggest you take the CNNP BGP course. It's very good, but a lot to put in one post of course :) 

It means from point A to point B in the network and everything in between (in this context) ex: PC (A)=> switch => router => router => switch => PC (B) 

To begin I looked at the "Configuring Match Conditions in Routing Policy Terms" document from Juniper. First I thought about combining a to only match routes from the customers prefix-list and a to limit the accepted prefixes to /32, like so: 

TCP keepalive uses the TCP protocol in a special way, sending a duplicate ACK with no data attached to it. Thing is: You can't count on it being available. Also some firewalls filter TCP keepalives. For BGP to function correctly you need a way to implement specific timers for keepalive (how often do we send a message) and hold (after which time do we declare a peer to be non-responsive) that are reliably sent. So BGP is using it's own keepalive message which is not a lot of overhead (19 bytes) compared to TCP keepalive. 

Mind you that this is only for the default forwarding-classes. If you have defined your own forwarding-classes you have to do it for these as well. 

Wireshark and other capture tools are not aware of TCP streams during capture. They would have to save tcp stream state in memory to do that which would reduce troughput. That being said there might be a way. If your packets have metadata there might be some sort of identifier (header, string, etc.) that is in all the packets with metadata? If so you could filter these with and feed them to a NFLOG target which can be captured with , a tool that is shipped with wireshark. For example, if all your metadata packets have a "X-Metadata" string in them, and you capture them on you could do: 

I think you're looking for the OSPF "Sham-Link" feature. This feature builds virtual OSPF links over an MPLS infrastructure to connect OSPF networks. The feature is available on Cisco and Juniper gear at least.