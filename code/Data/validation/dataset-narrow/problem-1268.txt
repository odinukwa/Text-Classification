I think we should ask Jeff Atwood and Joel Spolsky for their insight on this. After all, Stack Exchange is a perfect formula of these different "game dynamics" as evidenced by all the programmers now addicted to the sites. 

How to Choose Between Two Things Seriously though, it sounds like a personal choice to me. Which one do you have more experience in or are more comfortable with? How might you start making an RTS with XNA vs. making it in Unity3D? Unity3D is higher-level, more engine-like; do you want to deal with matrices and stuff, essentially writing things from scratch, or do you want to work within Unity's environment? Also from a goal-oriented perspective, it sounds like you're doing this for the end goal of showing an employer your game AI. It seems like you would want to do the least amount of work to get to the point of implementing AI, therefore you would want to choose Unity. But if you want to impress your employer with what you've written from scratch, XNA is definitely closer to starting from scratch than Unity3D. 

I tend to reason through problems on plain old pencil and paper. There's just nothing quite like it; it's completely unstructured. Otherwise, I mean, there are math problems like Maple, Matlab or Mathematica (those are the popular three) but they of course have a learning curve. Figuring out that particular problem was mostly just a matter of reasoning; define exactly what you want to accomplish, what variables you need (intersection point, velocity of ball, distance of intersection from center of paddle, minimum and maximum speeds), and then determine how to go from what you have to what you want. Sometimes maybe it just takes being familiar with the math too, or having solved similar problems or understanding different angles of the problem. For example, I had already seen similar problems like this one in my Calculus classes, so it was pretty easy for me to tackle. Math is important in game development. 

RuneScape has put forth some effort into supporting the machinima community. They introduced an in-game item, the "Orb of Oculus". A player holding the Orb of Oculus is able to freely move and rotate the game camera (to an extent, of course); this essentially makes that player into a "cameraman", and they can record other players from interesting angles (since the camera in normal operation is always hovering above and centered on the player's character). Here is the manual page on the Orb of Oculus (and other fun items for provoking emergent gameplay), and here's the news post which links to the blog post about it. You can, of course, see the results by searching on YouTube for RuneScape machinima videos. It has also been used to look at the other sides of impassable boundaries and find hidden unreachable areas, and to discover how two areas which might appear to be in two completely different places in the game world, are actually just off screen of each other. 

I hear that the console game platforms have strict requirements for their games. For example I just read an answer that stated loading screens must have an animation on them so that the game doesn't appear to be frozen -- this makes sense, of course! I think a lot of the guidelines in these books would probably be great information. Are these documents protected in some way or is there someplace on the internet where I can read them? I would love to read through all the guidelines for good design that the console manufacturers have put in place to give console players a good experience, and probably to adhere to them in my own games (at least those which are not console-specific, obviously). So, where can I find these fabled console video game design guidebooks? 

Obviously there is a lot of room for optimization. When rendering the reflected scene, you should probably as much culling as possible, since mirrors are typically small and the default off-screen culling won't kick in for the geometry which is on screen but not seen through the mirror. You can also render just a simplified version of the scene through the mirror. For effects, and to obscure the user from noticing the reduced quality, you could apply a shader (e.g. blur, or maybe bright/washed-out) when you do your mirrored render. I imagine, if you're using DirectX, the procedure would be much the same. 

If for some reason you are actually crazy enough to be using Java for game development like I am, here's a quick explanation of serialization in Java: 

As it says in the browser title, Prison Block is a "FREE prison RPG game" (RPG meaning Role-Playing Game). It also appears to be multiplayer and therefore can be considered a "MMO" or "MMORPG", albeit browser-based (in contrast to popular MMOs such as World of Warcraft). I recommend looking at the source of Legend of the Green Dragon (sourceforge project). I'm not sure if it's still being updated, but I remember finding it several years ago and being impressed by it; so much so, that I made my own little web-based multiplayer game (Magbor, sf proj - warning, it's messy and not too impressive!). LotGD is a web-based multiplayer RPG like Prison Block, and completely open source. 

I've created a simple 3D terrain and then wanted my character to walk across the terrain. So, to find the character's height at any point on the terrain, I used bilinear interpolation. Here is the Java code I use for the bilinear interpolation: 

But I really like the interface! It's a lot like sfxr - click a genre and download a song. That's so cool. Is there another program that does this same sort of thing but without a restrictive license, so that I can generate a bgm and use it in my game? 

Just because Java applets aren't popular doesn't mean they aren't powerful or worthy of gaming. In fact I am focused on Java game development at the moment; I like the high-level nature of the language, its cross-platform-ness (as compared to C#), the JOGL library which provides a very C-like OpenGL experience for the Java platform (or its alternative, LWJGL, or an engine like jMonkeyEngine), and its speed (obviously slower than C++, but considerably faster than scripting languages like Python). With Java you can deploy your application as an Applet to run in the browser and even provide a JNLP alternative for those who prefer installing something. You can take advantage of all the tools that have been created for Java; the wonderful Eclipse IDE (or any of the other IDEs out there), testing tools, continuous integration, the huge community of Java programmers, etc. The statistic for what percentage of computers Java is installed in varies (and the version varies even more) but I've seen pretty high numbers for Java market penetration. And the installation process remains pretty simple, so that if any users don't yet have Java installed, they can be up and ready to run your game in very little time. I personally feel less hesitant to install the Java plugin than the Unity one. In fact, I am yet to install the Unity game plugin on my computer; I just don't quite trust it. Java is proven; it had a rocky beginning but now, many years later, it is stable and fast and, well, it continues to have some security issues (but so does Flash) but for the most part it's trustworthy. I will continue to avoid Unity web games until the Unity web plugin is a little more widespread and proven. So I absolutely recommend Java, whether through an applet or through Java Web Start or an executable JAR. P.S. The world's most popular free online MMO, as recognized by the Guinness World Records, is RuneScape, which runs as a Java applet and recently has a desktop version. It supports both DirectX and OpenGL as well as a software 3D renderer, and has approximately 10 million active accounts. 

Take the middle Y value of the paddle, and subtract the Y intersection of the ball. If the paddle is 10 pixels high, this number will be between -5 and 5. I call this the "relative intersect" because it is in "paddle space" now, the ball's intersection relative to the middle of the paddle. 

Your second "question" is only an observation, and a depressing and (in my opinion) very wrong one at that. There are certainly bad games out there, graphics-heavy games with little gameplay. Movie games come to mind, since they're often the ones that aren't so great. But graphics and gameplay are not mutually exclusive. From reading your rant I almost wonder if you have played any games lately; there is a huge variety of choices out there and I'm sure there is something for you. But I don't see at all why nice graphics implies bad gameplay. And if you are completely against fancy graphics, there are still games out there for you. You could even go to eBay and purchase an old system and old games for dirt cheap. The funny thing is, I would be willing to bet this opinion has existed for a really long time now, through the last several generations of consoles. I'm sure people looked at the Nintendo 64 when it came out and thought the same thing: great graphics (for its time) = bad gameplay. And there were good and bad N64 games. And then I know for a fact people were worrying about this sort of thing during the era of Gamecube and PS2 and Xbox. Heck, I sat back and watched as games for the Xbox did this exact thing. So there are always good games and bad games, and you need to just calm down, take a deep breath, and go find some games that appeal to you. There will always be games on either end of the spectrum; low-res games that you can't stop playing years later (CounterStrike 1.6 anyone?), and high-res games that are total flops. And yes, there will always be more of the latter, because graphics are easier to crank out than good gameplay ideas. Their existence doesn't take away from the existence of the good games, or reduce their numbers. They just give designers more evidence of what not to do when designing their next game. Is that such a bad thing?