In general, Javascript developers can subscribe to the readystatechange event as you have done, as well as use to subscribe to the DOMContentLoaded event: 

Does that mean running a query to select data from each table and then subsequent queries to select the affiliated data? If so, repeated (redundant) queries (i.e. on one table where only a condition changes) can lead to poor performance. But, if the associated data can be shared across records (e.g. multiple accounts have the same location) then it might be better to have one query per table and then look up records in various result sets when needed. If paging can be integrated, for example: populate the first \$n\$ results, where \$n\$ can be 20, 40, 60, etc. then the query with the joined tables might be optimal. 

Feedback I like the style, timing of events, and how the number input spinners are hidden. It really looks like a console application! Plus, pizza is my favorite food!* Suggestions Cache DOM references As was mentioned in answers to your other question (like the retirement calculator), any DOM element lookups that happen multiple time should be reduced to a single lookup that is stored in a variable (or a constant using ). So in your code, it would be wise to cache , , etc... 

since that value is ultimately used to determine the maximum index used to get a character out of the string. Use or Bearing in mind that you might likely need to alter the length of the column, instead of generating your own random string, you could consider using MySQL's or function. That might eliminate the need to repeat the loop of calling and running a query just to see if the return value isn't used by any records. One other approach to a really short URL would be to just have an auto-increment integer field starting at 1... up until there are 9,999 records, the id would have 1-4 digits... Unspecified parameter doesn't appear to be passed by the one place that the function is called. Unless you plan to utilize that, the default value could be made a constant: 

Since is always called with , that can be moved out of the blocks and then only have a check to see if should be called with the modified arguments (i.e. ). 

Notice that the mouseout handler has a partial function, which is created using Function.bind(). That way, the function will be called with the duration and opacity values pre-set (and the other arguments that are passed to the event handlers like the current datum , the index , etc. are also passed to that function in this case). CSS border Bearing in mind that you mostly wanted feedback on the Javascript, I noticed that the stylesheet for the tooltip contains: . I don't believe that is necessary, unless there is some other style declaration that would need to be overridden. If it is required, then one can omit the units (i.e. ) or use . While it is over 9 years old (and about ems), this SO question seems relevant. 

The code already uses template literals. Most of the functions don't appear to currently have more than one parameter but if any did, there could be a place to use default parameters. Also, you could perhaps utilize destructuring assignment somewhere - maybe for the assignment of ? If you really wanted, you could perhaps utilize the class structure to move your code to being slightly more object-oriented, but be aware that it is "primarily syntactical sugar over JavaScript's existing prototype-based inheritance. The class syntax does not introduce a new object-oriented inheritance model to JavaScript."1. Other feedback switch statement 

And instead of using to select the form element, could be used, could be used if an id attribute is added to that form element, or even simpler, can be used because the event is bubbled up through the DOM. 

Obviously there are other ways to handle setting the values within the emotion property on , but those might likely require more lines. One could also conditionally display list items (e.g. add before the line that pushes strings into ). If there was a way to filter with a callback when calling that would be an advantage here but unfortunately it doesn't appear that is the case. Other review points Feedback The code looks quite succint. There are two DOM lookups at the start but then one DOM lookup in the click handler so that could be cached in a variable. Suggestions vs / Perhaps you have already learned more about and since posting this question but many es-6 developers would prefer using for values that don't change (e.g. , , etc.) Template One could also utilize a script template to display the list items, though that may not be desirable here. Invalid HTML when Error occurs This line in the promise catch: 

The code in Your Common Sense's answer is a good improvement over the original code, for multiple reasons: 

line endings after function definitions Methods are defined on like without a line ending. While line endings can be automatically inserted by the JS engine, it would be better to be consistent. And Such a function could also be expressed as an arrow function: Simplify one-line lambdas There is often little need to create a lamda/anonymous function just to call a function. For instance: 

Event delegate instead of using click handlers as properties Instead of passing click handlers to each component, a single click handler can be used on the TabScroller component. Then in the click handler, check to see if the target of the event matches an element in the TabNav component or in the TabList component (utilizing ), and call the appropriate method: 

If that pattern matches any rows, will have the country code and will have the country name. In theory, could be sent to the model method, though that might be a weird design to accept the fields to insert directly (and the numeric indexes might need to be removed). In theory the logic involving and can be removed by simply checking of the pattern matches. 

One technique would be to apply fundamentals of event delegation by adding a method to handle all clicks. For instance, an event listener could be added to the root element (or one if child its child nodes, like a ) 

Placeholder text I would use the attribute instead of the attribute of the text input, since it appears that text is really prompting the user... 

Generally it is acceptable, though each library requires extra resources (e.g. download size, time, etc.). There are whole websites about removing the need for jQuery, like $URL$ if you were working on a team, some teammates might prefer to have as few libraries as possible 

I would suggest adding the message to the DOM via the success callback - that way, if an error occurs then the message isn't displayed on the page. Other feedback Javascript Cache DOM lookups I would suggest you cache DOM references - e.g. store , , in variables (or better yet, constants if you are using es-6), preferably in a DOM-ready callback, because DOM-lookups aren't exactly cheap.... Accessing elements by class name can return multiple Also: is equivalent to ... which returns multiple elements. While methods like and operate for the first matched element, it would be more appropriate to select an element by id (i.e. with an id selector). with nested I don't believe it is necessary to add the window load callback within the DOM ready callback. Also, bearing in mind that you posted this code a couple years ago, is now deprecated as of jQuery version 1.8, because there is a new method in the AJAX section. Note that in the line below, is called and does not return a function, so the call to appears superfluous: 

The general consensus is that the array lookup is faster. And typically it can require fewer lines of code. There is a quote somebody said (I can't remember who, so if you know who to give credit please let me know): "The easiest line to debug is the line you didn't write". 

It must be asked whether the type of needs to be an integer. If any falsely value will suffice, then could be simplified to , otherwise, use strict equality: Beyond that, the only idea I have possibly removing the closure by some technique like currying or just defining a function... or if ES-2015 is an option, simplify it into an arrow function. Update In response to your answer, I shall reveal another option I considered, which some argue might be less readable, but yes, like you typed: “if we are going to one-line it, let's one-line it!”: 

See a demonstration in this PHPfiddle (PHP mostly used to generate lists depending on the URL parameters). Note: I only added one single main controller... if you need to have two separate child controllers that we can look at keeping that constraint. Arrow functions could be used to make those functions even shorter. For example, the function can be simplified as below: 

Abstracting common code to a function One could pull out the common code to a common method. The name suggested below could perhaps be improved but at least it describes the task. 

Sure you could do that, though bear in mind that as of jQuery 3 "only is recommended" and will still work but is deprecated.2 

and the messages could be stored in a mapping (i.e. an array), with the index (starting at 0) of each message corresponding to the result : 

Redundant unit strings Don't Repeat Yourself. It appears that each row follows a simple (yet lengthy) pattern. This can be simplified by pushing each result into an array, and then using Array.join() to separate each unit by . Also, the parentheses around each array element reference are unnecessary. Additionally it appears that the code in the loop over-writes each variable in each iteration. For example, if is 16, then each of those variables gets assigned 16 times, which means every iteration except the last is superfluous! The code below has the loop removed, since there is no need to generate the units multiple times. I also made this jsPerf test for the sample three units in the example. The simplified code typically has ~8 times as many operations per second compared to the original code. I expect for 16 units it would be a much larger difference. 

And the check for the first row (i.e. ) could be eliminated using the :not pseudo-class along with :first-child: 

Other thoughts Ternary vs Short-circuiting logical operators As I mentioned in an answer to your previous post, the ternary could be simplified from: 

Notice that in order to look up the price for the associated select list, use the id attribute (e.g. ) to get the price value from . Rendering options Additionally, when rendering the HTML form with Wordpress, PHP's foreach and range() could be combined to generate the options, like in the example below: 

See this plunker for a demonstration. Update It has been mentioned that the fetch API has no support for aborting the request. If that is desired, there are other alternatives like Superagent (recommended by you might not need jQuery). See this updated plunker for an example of using superagent with its abort method in the componentWillUnmount method. 

Feedback Nice work using the classes and sub-classes, as well as generators and the keywords const and let where appropriate Suggestions Sub-class constructors identical to super constructor The sub-class constructors (for and ) appear to match the super constructor (for ). Unless you plan to add extra functionality in the sub-class constructors, I would remove those overrides. This is for multiple reasons, including but not limited to: 

Why not just return or , or better yet, just return and get rid of those state values? Duplicated code The code contained in the , and callback functions to looks very identical (except for the comparison operators). It would be wise to abstract out common code into function(s) where possible. Unused variables? These variable don't appear to be used after being assigned. Am I missing something? Perhaps those were for testing... 

Put the filtered users in a computed property. One could argue that the difference is small - it adds a couple lines, and the function is technically still called the same amount of times, but it takes the function call out of the markup. 

Feedback The code looks decent - I don't see many repetitive DOM lookups and style updates (refer to Stop Writing Slow Javascript for more context). I also like the use of the spread operator and functional programming techniques (e.g. ). Though actually I do see that function does a DOM query each time to set the active class on the clicked item and clear it on the other buttons. I would advise using event delegation to look for clicks on the buttons. Instead of adding an attribute to each button, use data attributes like in the HTML below. That way the logic to filter items is taken out of the markup. 

One approach would be to take off the value using with array_splice() and then put it (the first element from that spliced array) at the beginning using array_unshift(): 

the method has a lot of duplicate code in the two blocks. The after the extra code to store the image could be removed. Then it can be simplified like below: 

P.S. Your comment makes me think of adapting a quote from the Most Interesting Man in the World: "I don't always have a second monitor, but when I do I open the 2nd Monitor"