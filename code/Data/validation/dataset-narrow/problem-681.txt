This is probably fine so long as you're only interested in mocking up a project with a single code module, but you'll quickly find yourself in need of a proper collection of modules. This method should have an overload that takes in an , or perhaps an method would be better. 

You can strong type your settings by using the GUI. Then you can use your strongly typed settings like this. 

It's already been mentioned that you're in need of a player class and you seem to be interested in my XML Serialization suggestion, so I'll forgo a traditional review and show you how I would do that. Let's start with looking at your XML. (You should properly indent your XML by the way.) 

Where the interface matches the public API of . This allows you to test your client code in isolation from the native library, which likely interacts with hardware/the OS. 

You need to immediately search the code base for every instance of this pattern and remove it immediately. It serves no purpose but to destroy the stack trace. That makes it much harder to debug production issues, because you've no idea where the exception really came from. (While you're at it, look for any place the previous developer may have been simply swallowing exceptions too.) Next is this patten: 

I like that you're testing your code, but you have to visually verify your program's correctness. It would be better to use a testing framework and automate that task. 

If I got that wrong and those are namespaces, not static properties, for goodness sake use some imports. 

You're almost there. You have the right idea, but you missed the execution of the idea a little bit. 

I shouldn't be selecting all like this. Even if there's not really a performance hit because open query needs to get all of the meta data anyway, this is a bad habit to get into. Selects should be explicit in what we're selecting. 

Potentially useless comment, but I don't suppose it's causing any active harm at the moment. What I'm more concerned about is setting to true before the event has actually fired. The chances of it not firing after setting the boolean variable are slim to none, but it's still odd enough that it caught my eye. 

Putting aside the fact that EF already provides both a UoW and Generic Repository, there's still a huge flaw with your . It disposes a resource it doesn't own. You pass the context in as a constructor arg, store it as a member, and then code analysis yelled at you for not implementing IDisposable, so you disposed of it. The problem is, the UoW has no way of knowing that it's supposed to dispose of the context, because it was injected into the class. In all the years I've been working with .Net, not once have I actually needed to implement . Every single time that I thought I needed to, I didn't. I just needed to keep the lifetime of the short and contained within a block. That's possible if you abandon this folly and implement a domain specific service instead. 

One final note: I'm not entirely comfortable with the fact that the catch block doesn't actually contain any code. It feels a bit hacky. 

Why not just split on ? The Replace feels unnecessary here. Actually, the more I look at this, why are you splitting? Split returns an array, but you're not making an assignment here. I really think you need to decide what this line is supposed to do. 

Anytime you find yourself saying "if condition return true, else return false" you can directly return the result of the expression. 

I also think it would be worthwhile to pass into as an argument. It makes the sub more re-usable, but I would definitely think up a decent name for it. 

XML doc comments are great, but only if you fill them in completely. I don't like your constructor either. 

Speaking of , you have the exact same logic for both 1 & 2. That's a dead give away that you need a function. This one will take a string parameter and return another string. 

Similarly, I don't like having the entire statement on one line. I usually put the statement on the next line, indented one tab. 

And a class implementing it. uses to create a default instance. The Logger class remains unimplemented for the moment. Console.cls 

It could be YAGNI territory, but I'm a big fan of getting away from primitives as often as it makes sense to. 

You're using a with block.... why? You've effectively added 2 lines of code and an additional 12 or so keystrokes. No reason to. Just make the call directly on . 

Why? Wouldn't it be much simpler to just create the list inline to work with? More importantly, why does it need a list at all? The first thing you do to it is it. 

I honestly don't understand why this works at all. It shouldn't. VBA is single threaded so should either be set or not by time you reach the While loop. The call to should block the execution from moving forward until it's completed. If it's not, consult the docs and see if that function returns any values. If it does, you might be able to force it to block by "using" that return value to set a variable. 

It's not obvious to me how to fix it, but there should be some way to clean up the seeming duplication here. It should be possible to write a single function to do this work. Perhaps it takes a boolean parameter. I'm not sure, but I know there's a way. 

Where is an extension method that transforms a dataset into a list of your model class. Now you're in a position to extract an interface for the BAL so it can faked during testing. Finally, you'll be able to think about ditching the DAL entirely by replacing the guts of the BAL with calls to an ORM like Entity Framework. 

This is the only place you use the variable , so you could just use the block the way it was intended to be used. 

CommitVisitor.cs Git's commit history isn't a tree, it's a graph and we don't want to visit any commit more than once, so this class needs to keep track of the commits it's already visited. 

One letter variable names are hard to read. It would be better to use and here. Alternatively, and are common abbreviations for "left hand side" and "right hand side". I don't care for them, but they're common enough that I let them slide through code reviews at work. 

All of these variable types declarations could probably be replaced with the keyword. I know the last one could. 

Setting the ranges leaves a little to be desired though, so we'll use a bit of a hack to clean up those lines. Let's just concatenate the last row to a string indicating the ranges we want to work with. 

This is reasonably complicated logic for a boolean check. Even though this is the only time may be using this logic, it is absolutely reasonable to extract it into a private boolean function; just to make the code readable. 

Again, you're numbering aliases, which you shouldn't do. But that's not why I quoted this snippet. I quoted it because is a terrible name. Sometimes we don't have control over the names in the columns of our tables. That's okay though. Because that's what aliases are for. It's for taking long or confusing names and making sense of them. Okay, I take it back a little bit. It turns out you're doing a self-join and , aliases do make some sense here... However, if you're going to number things, do it consistently. You have and both referring to the same instance of the CTE. 

Recursion can make for elegant code, but it can also make for very slow code. Calculating Fibonacci numbers and Factorials are both classic examples where the recursive algorithm is simple to implement, but slow beyond the first few (and very small) input values. I don't know Delphi, so I quickly implemented this in VB6, but you should be able to consider it psuedo-code. 

There's usually very little I can say about your code, but maybe if I just start going down line by line I'll find something. I'm hoping someone else who knows more about mvp and dependency-injection come along as well. Simple Form 

Now, the order here maybe important, and I might not have it right. First, verify that can handle a null value. If it can, then you need to study the data to determine which is the more common error state. You want the most common case to come first in order to optimize the logic. 

There's no point in catching an exception just to re throw it. This adds unnecessary overhead to the code. You might as well just remove the block. 

The hungarian notation isn't necessary either. Things like aren't necesary in the modern IDE. I'm sure you read somewhere that it's best practice, but it's just clutter. I do like that I know exactly what that variable is though. It's a little long, but its meaning is clear. I'll reiterate what @Malachi said about the loops. is easier to understand. On the other hand, this is probably more understandable as 

As someone who's been writing cross-platform tools on .Net Core, this doesn't do what I expect it to do. 

I noticed that you've left code that has been commented out. That's dead code and should be removed. If you're worried about needing it later, that means you're not using any type of Version Control software. You really should look into it. It can and will save you headaches down the road. This line of code gets repeated a lot. I would wrap it in a private method that return a connection. 

If you know it, you can Assert it. Instead of an , you get a very clear "The original developer thought this should never happen" message. CodeExplorer_PrintCommand Your print command is creating a new Font instance once for each iteration of the loop. Creating it outside the loop would save on some memory and reduce garbage collection. I'm sure RD is beginning to be a memory hog. It'd be prudent to pay attention to such things. CanExecute / Execute You're doing all of the parameter validation in both of these methods. You could DRY this up by calling from inside of the method, then doing direct casts instead of safe ones. I would also consider throwing an if Execute is called while it's not in a valid state to be called. 

It just occured to me that you might not want to repeat this code each time you need to pad to a different length, so you could wrap it in a function like this. (Even though I still hate passing in a number as a string.) 

This executes for each record in the table. You only need to do this once; outside of the loop. ...and then you split it onto an array. Which I guess is ok because you don't want to check the first or last records for some reason. There's something smelly here, but I don't see how to fix it. Maybe another reviewer can comment on that. Now we're into the third loop. Again, There's no reason to . Just call . I can't quite figure out what you're doing here, but you probably want a series of SQL delete & update statements instead. 

Your solution appears to be correct, although I can't speak to the space complexity of it. Linq makes complex things look easy. There's a lot going on "behind the scenes" here. Anyway, let's look at the heart of your code here. 

It's not very DRY or configurable this way though, so I tend to go one step further, and make my repositories look something like this. 

Remove... Remove what? How about ? Even that wouldn't be a great name though, because the method seems to be doing two different things. (This could be my own lack of understanding, perhaps you have a good reason. Maybe these lists need to be kept in sync. If that's the case, you're probably using the wrong data structure for the job.) 

I like this function and the abstraction it provides, but you are calling it over and over and over to get the same string. Declare a variable and call this function once. Also, as an option, It would be completely acceptable to remove the variable and one line this function. 

Visual Studio likes to add a bunch of statements when you create a new console program. You can get rid of these. You're not using Linq or multithreading. 

If you look carefully at this, you'll notice that the only difference between these loops is the source column, the destination sheet, and the destination column. 

Now, there's a trade off to be had here. We now have more sensible objects and code. You have the ability to quickly create new views based on these other business objects and the ability to quickly create different ways of getting them back from the database. That's good. The bad part of this is that you'll have to explicitly bind each field to a column in the DataGridView. You know what though, that's not really all that bad. Explicit binding is better in my opinion anyway. Yeah, it's nice to let Visual Studio automatically bind an object to a gridview, but I've been bitten more than once by changing a class's interface, only to have one of my forms suddenly "broken" and not displaying information the same way. Had I explicitly bound it to begin with, it wouldn't have been an issue when I changed the class. One last thing... 

This allows us to define behavior of the types. We could easily implement an that implements , or a that implements . 

So, here's the deal with getting data from closed workbooks... you don't actually have to open them. Add a reference to the ADODB library and use it to query the workbooks as data sources. A bit of searching "use ADODB to query Excel worksheet" should put you onto a much faster solution. The hard part will be getting the connection strings right, and learning the funky Excel/SQL syntax for querying. This is faster because the workbook never has to be loaded into an instance of Excel. It's read directly from file.