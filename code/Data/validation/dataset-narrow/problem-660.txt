I can't really comment on your structure in Razor, as I am unfamiliar with that framework, however, your replacing structure could be improved. By using a function, alongside a dictionary, you can simplify this greatly. 

Note, you could string concatenate the selector inside the function, but that limits the use case that you select another DOM element. 

It looks like you keep as an integers like the suggests, but use strings, as the suggests. If you do measure solely in integers, you ought to change the database type. 

: In the above point's code, you never actually use , as it is the second parameter, it can be entirely removed, JavaScript does not require an explicit amount of parameters. 

Regex ಠ_ಠ Regex is evil, the worst. seriously. stop it. right now. kill python.exe right now and change it. You use beautifulsoup, a dom parsing library, literally a few lines later, but you choose to use regex. You sir, are evil. I would suggest looking further at beautifulsoup, or taking a look at Scrapy, a scraping library for Python that makes use of generators to scrape large element sets (and even has cloud support!) 

XPath and I nearly forgot entirely about XPath, thanks for bringing back the nightmares. In all seriousness though, CSS selectors have been a core feature of JavaScript for a very long time. You should use them instead. Instead of your eight parameter , you can just pass through a simple CSS selector () 

Then, you could just let the input be either, in case the user has a preference, or a need for custom rules. 

When you declare and , you also declare as an empty variable. Don't do that. The loop can declare it you. 

Explicitly checking the length of is redundant, when you have a or loop. If there's \$0\$ elements, the won't trigger. 

Also, note that you should keep your use of quotes consistent ( & ) This is especially helpful when trying to avoid re-calling a function, or a method call that is somewhat slow. 

This is a script that accesses the SE impromptu APIs to receive the , a variable need for connection to chatrooms, and uses it to build a websockets connection which is handled by Node.js. This is also available on GitHub. It requires your username and password in the file and looks like this once executed: 

Make sure you include brackets in your statements, because as @EthanBierlein pointed out, funny business (serious bugs) can happen if you mess them up. 

Support Currently, very few browsers support ES6 entirely. I wouldn't necessarily go using it unless necessary. You don't particularly want to kill off support for a large portion of users by using it. 

This uses the season numbers, to test whether its the one you're switching into or not. One suggestion I'd make though is that, instead of the variable, I'd use a database script, in PHP or something similar, to hit the database for the different episodes/seasons. That way you can totally move this to the automated paradise you want. 

First, you should fix your indentation and styling, I would use a tool like JSFiddle's Tidy function to clean up your code. 

You should question what it is you're trying to do. You shouldn't be coding to the "cleverest" way, because when you come back to try to maintain it in two weeks, or in production code for others, it's gonna be really hard to maintain. You don't want a call from the new guy two weeks after you're finished while you're sipping mojitos in Barbados. Try debugging Regex over the phone. Not fun. Anyway, you probably should avoid using regexes for everything (they're all throughout your code), they overcomplicate your code, and make it really really hard to read. 

Your code shouldn't be accessable from the Console. I would recommend using getters and setters to limit incorrect addition: 

If you want to reduce the code indentation level, then you should use separate variables to store each step in the process, or just simply use a standard loop. 

Default Parameters: This a new language feature, and as such, some browsers don't support it. Realistically, you shouldn't write production code in ES6 until it's fully rolled out. Instead of using default parameters, do it inside the function like the following: 

Onto code, in , you initialise an array, build to it, and then proceed to it. However, in , you initialise a string, build to it, and then return it. In , it'd be better if you just built to the string instead of an array. 

As for your specific question, I would style it better by splitting it into parts, and joining each part like so: 

You can improve the following block by swapping the logic and not initialising : You also don't need a check, will do for integers. 

However, using an enum is usually suited more for when the contents of each have different execution styles. In your case, it'd be better to move the code to an object, and have a single execution path referencing said object. 

I don't particularly have an issue with your HTML, however your JavaScript could be improved. Currently, you have a lot of duplicate logic. You should move it to a function that each case can call. Like the following: 

and then similarly to before, you can assign values inside the chain, and call the functions like . Additionally, this allows you to use a constructor, in case you want to build different game instances, like: 

Big base64 strings: I would store those big strings as constants at the top of the function as to improve readability, adding to the beginning: Then, you can use ternaries instead of the statements: 

If you were directly printing these then it would be a bad idea, but in this case, not really. However, I suppose you could move them to an object, or an array and return the result of a function. You could even return it as an array, and print each result. Which would remove the need for the s at the end, and DRY up the at the beginning of the strings (put it in the loop, not altogether) 

: binary operators are suggested, by PEP8, to have a space pre&proceeding the operator : is that last one a misspell? : If you're testing whether the variable is empty, as PEP8 says, you can use 

Here's the code on GitHub too. If you want to run this code, comment out the lines relating to calling and it should run with posting messages in console only. 

This really is my favourite time of day; ternary time! By using a ternary statement, you can simplify the following: 

I'm not a Gmod developer, so I'm not familiar with the spectating abilities built in, but, I'd assume that if any exist, they're probably better to use than re-inventing the wheel. 

should be , and you shouldn't use for single line comments, and you even have an superfluous after . is for multiline comments, and only then would you use a per line. 

In both and the executions are very similar, so, you could consider combining them, and splitting the possible pathways at 

Like @200_success said, you should be caching your results, so that way, when you keeping increasing, you won't have to recalculate every thing over and over. 

Instead of calling or whatever alternative is slightly less horrible, consider wrapping your entire solution in an Immediately Invoked Function Expression and passing in the window as a parameter. Additionally, moving your code into a chain solution would be more effective. 

In , you could improve . Why don't you just set to instead, seeing as you don't use other than for that? In you should also improve your line spacing as well, as it seems a little strange. 

You shouldn't be having actual data hardcoded in, pass it in from a database or config file for better maintainability. 

Otherwise, your HTML isn't indented correctly. Four spaces plus the parent's indention is where the children elements should be. 

Simply move this to a function! Then attach the function to a submit button on your . It will only get called after the form has been submitted, rather than on addition. 

You're not actually mapping anything. The map function is passed in, but you don't actually use it. If you changed to , then you would be mapping something. Your code will error, if any of the items in parent array aren't arrays, because you attached your function to the . 

Seriously, you need to format this better. Try using Python's style guide, PEP8. when running your code through the online analyser, it threw 20 errors immediately. When coding good Python, PEP8 should be your goto style document. 

: I'm not sure why the content of the loop is on a different line, perhaps design influence from another language? 

The shortside to ternaries is that you sacrifice readability for effectiveness. However, if you can move past that, ternaries are an effective part of a Programmer's Toolbelt(TM) 

Overriding : You override in the following code block: You should apply the same as before and name it or something (because is already existent) 

Your file is a little different. I found a lot of instances of massive strings to be appended. Consider using instead of strings. What I also saw is that the jQuery you have could be replaced with vanilla JavaScript equivalents, meaning you could chop the library entirely out of your code. 

Unnecessary logic: In your block, you check whether the number is divisible by 3, then by 5, then by 3 and 5. You don't need to perform the last check of 3 and 5, the first two make up that one. 

: JSON files can get very large at times, so it's best to keep this in an external file in the same directory, and use the magic of the UserScript header: 

I have a feeling I'm misusing the language syntax in relation to adding strings to . I also have a feeling my underlying structure of: 

UVN Unexplained Variable Names Don't use names like and , they're confusing at best and unreadable at worst. 

When adding equals to a more than / less than check, it adds or removes one from the amount you have to check, which is why you have on the end. You can change this to the following instead: 

You have an extraneous line here, that's alright if that's your style, however, keep it a constant pattern throughout your code. 

Please do not do this. Ever. You don't need to wrap your initial code in a big, literal box. A simple comment, or even multi-line comment like the following would be much better: 

Your code is really nice, and your use of generated property keys is really good. There's a few things you can improve upon: 

: Providing a array is useless if you don't use any other property than The following line is redundant if you wish to create and not an empty object: 

Your comments seem a little basic, at that, maybe write more than the basic reasoning of each function/execution, etc. 

Clarity: Your program is unclear, the variables are named with single letters, which is bad practice as it is unclear and potentially hard to maintain in the future. Consider using entire words instead of letters. 

UserScript headers If you're hosting this script on GitHub or somewhere public, you can include and headers so Tamper/Greasemonkey will automatically update your userscript when you push out a new version. 

You have an extraneous whitespace after the keys in your objects. In your object, you have a weird indentation style, I would recommend not indenting it that much, or just not all > //////////////////////////////////////////////////// Not only is that ugly as hell, it's fundamentally pointless. If you're declaring config items or whatever, do it in another file, or built inline into the page. In , you define a variable, only to return it immediately after. Just return it directly. 

I've written a small script to enable the vote count viewing functionality that comes for users at 1k reputation: 

As of ECMAScript 5, the default radix used in is supposed to be \$10\$, before that, \$0\$ would get parsed as a octal number instead of a decimal number, and, as it seems, you can just omit that optional argument entirely. Although, as @EthanBierlein pointed out in the comments; MDN recommends not to omit it. 

Magic numbers: Building on the last point, you call array indexes at , , , , , : What are these points? What is at that may or may not be in ? You ought to move these array indexes to their own variables to declare the importance that each of these indexes holds. 

HTML is what's known as a markup language, which means the actual meaning of the elements (whether you choose or ) is up to the code to interpret. Browsers have their own CSS files they apply to every page, so which tag you choose to use for an element doesn't really matter. Except for types like and that have special purpose in the browser That said, using tag names that better suit the purpose increases the readability of your code and improves maintainability for future development. Standards like HTML5 add more style rules for elements (as well adding more special purpose types like and a bunch more stuff). There's not an optimization tradeoff as the CSS engine doesn't treat rules on different than rules on .