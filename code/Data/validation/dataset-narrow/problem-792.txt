There are lots of good reasons for using rather than . However, both are viable options. To do as you wish just switch the domains in the standard document for using domains. Using a single virtual host for both is my approach. Define the virtual host for the desired domain, then add the other domain(s) as aliases. The following specifications should force canonical names for the naked domain. (The rewrite condition rules are modified from the apache rewrite documentation to remove the from the name.) 

I know of no search engines for moving email addresses. Most administrators would not want their valid email listed. However, there are lists circulating among spammers, although they are not well maintained. If you are moving to a new domain, retain the old domain. Use the same MX for for both domains and configure the mail server to accept both domains. Both of the domains should have working (someone handles the email) for abuse, hostmaster, webmaster and postmaster. Some common business related aliases include support, info and jobs. (Warning: Spam is often sent to the business aliases even if they have never been published.) Update the mail links on the website to the new domain. You can use some of the following techniques to prompt users to update their address books. You can have the people handling the email include an update when responding to email to an address with the old domain. The correct message code for invalid users is 550. Depending on your server software you may be able to provide new address with an aliases such as: 

If you are using cookies for persistence you need to provide a cookie jar for curl to use. Otherwise each request looks like it is coming from a new user. Try a command like: 

Your model opens up a raft of routing and configuration issues. Having distinct DNS entries for each service all resolving to the same IP address would be much more workable approach. It is common for DNS names like smtp.example.com, ftp.example.com, ssh.example.com, and others all returning the same IP address. These services all use distinct ports which allow them to run on the same interface. can firewall by service, and if need be destination address. The addresses can be on the same interface or different interfaces. I haven't found a solution that would allow DHCP to provide multiple addresses for one interface. 

Reverse DNS is useful for providing some measure of trust in the identity of a connecting server. It is most commonly used to validate incoming SMTP connections. This is highly reliable for personal email. However, automated mail sending services are often poorly configured. 

As an email sender properly configuring your server goes a long way toward establishing credibility/trust. Almost all evaluation is automated now, and many organizations are selective on what they publish. A majority of the connections to my server is clearly spam. 

In your example, email destined for is deliverer either or . Which ever MX receives the mail forwards it to when possible (usually immediately). stores the mail until the user's UA connects and reads the mail. Depending on the setting email is deleted when read. Neither nor needs to be up when email is read. However, as is the MDA and has the email to be read, it must be up when you want to read email. The user will read only email which has been delivered to and will not be fetching or gathering email from or . 

The normal fair share approach work well for most work loads, and it is not common to tune priorities for performance. Tuning process priorities can have undesirable side-effects. There are cases, such as batch processes, where applications are specifically niced. You will need root privileges to give the JVM higher than normal priority. This might be acceptable if the process is I/O bound. If the process is CPU bound, you may find it kills performance on ALL other processes. This will include the process you used to up the priority. It is common to batch processes, so they don't use resources which might be used by interactive processes. The CPU speed monitors can be be set to ignore such processes when determining if CPU speed should be increased. If batch processes are niced, this is typically done in the script running the process. Modern kernels also allow you to set IO priorities for processes. Check . If your JVM is IO bound this might be appropriate. I do run my processs extremely niced. This is because I only want to use CPU cycles which would otherwise be unused for these processes. They typically uses over 90% of the available cycles. 

When you specify name servers in DNS they are defined by name. These first few names are typically names for name servers, so I believe these records are the names listed in the records for the domain. I am concerned with the number of name servers, as normally there are 2 to 8 name servers for a domain. It appears the presented list of names also includes the names returned by looking up the addresses of the servers. The IP addresses listed should be the IP addresses obtained from the record for the names servers. It is common for an IP address to have multiple associated names. PTR records are usually configured with only one name. Many ISPs by default configure their PTR records to indicate the service type, and some additional information. The names beginning appear to be of this form. With the exception of servers sending email to the Internet, there is no requirement to have names on records to match an record which points to them. Try doing the lookups for yourself. You can use or to find the IP address and corresponding names. 

For GET requests a caching proxy could be configured to serve already cached data. Most of the POST requests I work with depend a lot on how you navigated to them and are not really cachable in either direction. POST requests are often used in a sequence controlled by the server. This makes it extremely difficult to effectively store POST requests. HTTP was not designed as a store and forward protocol. For simple GET requests, it is possible and often desirable to cache data to ease load on the network and servers. Other requests are often non-cacheable. 

You may want to set an ACL variable in an ACL during message processing to indicate that the message was received from the SPAM filter. There are several ACLs that are normally undefined that you can use for this. An ACL block something like this should detect the spam filter by IP or DNS name: 

An implementation similar to BATV (Bounce Address Tag Verification) should be able to handle this. The tag would be tied to a post. The MDA would need to be aware of the tags and respond appropriately. 

Use to give you access to all the files on the disk. Ownership will follow wherever you mount the disk. Default owner for the root directory of a disk. You need to change it to allow you access. I was thinking windows partitions in which case you would have various options. 

Link local addresses are derived from the MAC address of the device. They are auto-generated as a part of bringing the interface up. Auto-configuration includes a discovery process to ensure that the address is unique on the network. A similar process is used to auto-configure routable addresses when a router advertisement is available. These addresses may be regenerated periodically to provide privacy. RFC 4862 specifies the processes to be followed. 

VPN traffic is easily detected by packet inspection, or in this case just by the ports in use. It is quite possible your company is aware of what you are attempting or doing. If your are trying to reach the same IP address as you are using to connect to the VPN, it will not be sent to the VPN. At a minimum, the address of the VPN server is connected to directly. The VPN may be able route the destination for ports not used by the VPN. As your right side is in the 10.0.0.0/8 private address space, your IP address will undergo Network Address Translation on your end. This is prone to breakage if multiple devices on the same LAN are connecting to the same remote VPN server. If you want your browser traffic to always be routed to the VPN, you will need to configure your browser to use a proxy server on an address reachable via the VPN. If your address is showing as your local IP address, it is traversing the VPN. 

Indicates that about 1.2 GB of new objects were cleaned in less than 1/100th of a second. If this is occurring once every second, an application is creating a lot of short lived objects. Check the time stamps and see how often this is occurring. I generally aim for several seconds (10 or more between new generation GC cycles. You didn't provide enough data to do much of an analysis. It is common for concurrent GC cycles to occur every hour or so. These have a different set of log messages. It is often helpful to specify a separate log file for GC data. This makes it easier to review. You can specify that this log be rotated after it reaches a certain size. Try these options and if you don' have a separate log add . With that large a new generation, concurrent GCs may take a long time to run. Adding will cause the new generation to be cleaned at the start and should improve GC tuning. Review the documentation on garbage collection to better understand what is happening. 

runs the local program to deliver the mail rather than connecting over the network stack. In your case, exim4 is used as a drop-in replacement for sendmail. The mail will be treated as a non-smtp delivery. Rate limiting will need to be done using a non-smtp ACL. 

Install a munin server, and run a munin client on the virtual instance. It will log memory usage and a number of other useful statistists over time. 

I reviewed the document and found the author(s) don't understand DNS propogation of new entries. When updating old entries there are configurable cache times that can be several days. However, new entries need to be fetched from the authoritative name servers before the can be cached. If keys are being rotated by the suggested process of rotating keys behind three CNAMEs, the there may be significant delays while cached entries are updated. This can be mitigated by dropping the TTL on record to be updated in the period before it is updated. The CNAME rotations may also be problematic in the case an emergency key rotation is required. Randomizing the key names does provide some small measure of protection against the public key being retrieved in advance of use. Once the key is in use, I would assume that it could have been harvested for the purpose of generating an alternate signing key. 

The advice from @user36376 is good. It looks like you have a memory leak. Until you track it down tuning apache to kill processes after servering some number of requests will likely give you some time to identify the leak. As this is a new occurance, a recent change should be suspected. You may also want to consider using ulimit to minimize the size of the apache children. The leaked memory can likely be swapped out with little impact, so increasing swap may help. Consider using top to monitor the virtual image size. You can change the order so that virtual size is the first sort field. The largest programs will float to the top. 

I would put an Apache2 proxy in front of an application server. Apache2 has a specific module designed for this. It adds the appropriate headers to the request for your application to identify the remote user. Apache2 can be used to serve static content, and only pass application requests to the application server. Windows does not implement privileged ports (ports less than 1024). Other than running Jetty as root, some technique is required bind port 80 as root and pass the data to Jetty. Apache2 uses setuid after binding the port so that the process handling a request does not have root access to your system. The sites you have found show some of the options: 

Mail servers usually prefer to deliver messages immediately rather than queue them up for later delivery. It has been my experience that many email users expect this Instant delivery mode. I looked for instruction for running Postfix in queue-only mode, but didn't find any. Exim which is packaged for many distibutions can be configured to run in queue-only mode. New messages will be queued and delivered later by a queue-runner process. This is likely what you want. Exim is normally configured to do minimal checks on messages received from local sources. Alternatively, you could look at spawning a thread or process to sent the email. 

Hostnames make it easy distinguish between servers. See RFC-1178 Choosing a Name for Your Computer for more details. For what you are doing the server's hostname doesn't really matter. In your case your host will be hosting serveral FQDN (Fully Qualified Domain Names) to enable services. You could add more using addtional DNS CNAME or A records. As you have a small site ALL of these domains refer to a single host. Larger services like google.com have multiple IP addresses backed by multiple servers. In some cases the IP addresses may belong to load balancers in front of multiple servers. For an Apache server you should use IP based virtual hosting. You can use Apache ACLs and/or a firewall to restrict access. I use both when I can. If you add a mail server there are additional rules which should be applied. The FQDN for the mail server should be the same as the name the Server announces. In addition, the IP address should have a PTR record returning that FQDN. 

AAAA records can be delivered by both IPv4 and IPv6 resolvers. You can add IPv6 addresses to your domain and they will be delivered. People with IPv6 only resolvers (which I believe would be relatively rare) won't be able to resolve your domain in any case. The standard work-around for DNSSEC is to use DLV (DNSSEC Lookaside Validation). This has been used for a long time and has been the only way to validate a number of TLDs for a long time. As TLD providers add DNSSEC support the requirement DLV disappears for those TLDs. Overall uptake on both IPv6 and DNSSEC has been very slow. Where I am, I still require an IPv4 tunnel to get IPv6 connectivity. 

If you are doing everything right, you should have few problems. The more things you do right the more likely you won't get flagged as spam. There are a few sites that will evaluate your mail server to verify your configuration is correct. I have noticed a lot of automated systems don't use their FQDN in their HELO command. This makes you appear more like a spammer. Checking your server with port25 and intoDNS to verify your configuration helps. Some of the big sites have a page where you can register your mail server. You may also want to register with which provides a reliable whitelist of legitimate senders. EDIT: I have documented my experience with Detecting Email Server Forgery. The article also has a fair bit of information on avoiding being seen as forging an identity and verifying a servers configuration.