The issue is that you are running your GIS programme from a domain that is not trusted by the domain in which SQL Server resides. That are numerous methods you can use to correct this. You should discuss with your network admin/sql server admin as to the best approach. 

When the SQL is run the SP is created and stored in SQL Server. Once the SP is created the Grant execute statement is executed. When the SP is executed only the contents of the SP are run. The Grant execute statement is NOT stored with the SP in SQL Sever. This can be verified in a number of ways 

In order to get the desired result you need to join your table to itself and then ignore those rows where c3 is null. The SQL below produces the required result. I'm not a PostgreSQL person so there may be a better way to do this. 

In general there two different ways to obtain an Identity value after performing an insert, using the SQL SERVER SCOPE_IDENTITY/IDENT_CURRENT/@@IDENTITY or SQL SERVER OUTPUT. 

I have recently seen this exact same problem with an upgrade from SQL Server 2008 R2 to SQL Server 2014 where a very small number of Stored Procedures (SPs) (approx 5 out of 3,000 ) performed worse in SQL 2014 Compatibility Level 120 than in SQL 2014 Compatibility Level 110 or in SQL 2008. In SQL 2014 the Cardinality Estimator (CE) has changed which may impact how a SP performs in SQL 2014 Compatibility Level 120. There are a few possible solutions 

Create a SQL Server Account and use those credentials to connect to the SQL Server <-- this might be the easiest Trust the domain in which your GIS Programme is running <--I would be loath to do this 

Allowing even trusted users to login to what appears to be a production database is in my mind a big no-no. The solutions you mention above may provide you with a sense of security/relief but they their own have side effects. I would be particularly worried about your statement 

From the implementation point of view for a database, is it preferable to handle optional form fields by setting to some default value (e.g. false, 0, "", etc.) or just ignore such fields (do nothing with the specific attribute) So supposing you have a form of 

I am developing a weekly timetable which ideally would allow teachers pick what subjects they teach. While most of this is fairly straightforward, from a conceptual point of view I am unsure how to handle time (which is, naturally, a fairly crucial aspect of the database). Nobody can teach more than one thing at a given time, so having time as a primary key makes sense. Classes work on an hourly basis so integers are acceptable to this end. Times don't change from week to week. While this seems fine on paper (and there is a quick mock-up of the database in Access below), this nonetheless has some additional baggage. Monday 9am == 9. Monday 2pm == 14, etc. Cool. But Tuesday 9am == 33 and Tuesday 2pm == 38. A little bit awkward. Also, if one is using the integers for simple calculation (worked between 10 and 14?... 4 hours worked... correct), this can be easily messed up (worked all of monday and tuesday?... 48 hours worked... incorrect). But is integer still the best option for this type of data (given that date is unimportant)? Data relating to class times will likely have to be manually input into the database. The database may have to be able to provide some sort of automation (automatically assign teachers to modules) and/or allow users to select modules to teach. RDMS likely to be MySQL. 

I think you answered your own question. E-R diagrams are meant to be problem solving diagrams for the sake of creating a database schema, whereas UML are supposed to model a completed db. I personally don't place a huge amount of value on ER diagrams, as I would personally do such brainstorming in my head, but I imagine many people would swear by them. As such, the answer is UML as a general rule, but ER can hypothetically be useful in the construction of databases. 

If you have users who are updating/insert records then I am sure they are also deleting records most likely with no or a very limited audit trail. If this was my database I would 

I don't know of a specific product called "Amstrong Database" but I have heard of Armstrong's Axioms which are a set of axioms relating to the functional dependencies of relational databases. The axioms have been around a long time (mid 1970's). There is an IBM Research Paper available. I would think a Computer Science or Maths Department in your local University would be able to help. 

Take a user created Stored Procedure, MySP and as part of the SQL Script to create the SP add a SQL Statement to Grant execute permissions on the SP. 

As you are looking for the Maximum value for Sequence for each Booking_ID you could write some SQL similar to that below: 

Using the above example a new table, #tmpTable will be created with the data from coulmnA, columnB and columnC from tableA. The data types in #tmpTable will match the datatypes of tableA. You can of course create a true physical table and have multiple tables in your select statement. 

SQL syntax. This syntax creates a new table and insert the resulting rows from the query into the new table. 

By opening SQL Enterprise Manager, locating the database in which the SP resides and viewing the SP under Programmability. Use sp_helptext 'MySP' which will return SQL Servers stored version of the SP 

The 'AUTO_UPDATE_STATISTICS' Option has two possible values, False(off) and True(on). When set to False, 'AUTO_UPDATE_STATISTICS' will not update any statistics. When set to True, 'AUTO_UPDATE_STATISTICS' will update statistics. The method chosen to update the statistics though depends on the value of the 'AUTO_UPDATE_STATISTICS_ASYNC' option. This option has two possible values, False(off) and True(on). By default, 'AUTO_UPDATE_STATISTICS_ASYNC' option is False(off) and the statistics update synchronously. When 'AUTO_UPDATE_STATISTICS_ASYNC' is True(on) the statistics update asynchronous.