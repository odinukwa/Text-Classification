I'm trying to use the best practices module in powershell, but both the invoke and get -BpaModel are not recognized. I also tried to use Import-module BestPractices, but it says no valid file was found in the module directory. This is in powershell 5 running on windows 7 . Any idea what i'm missing and why it's missing to begin with? Could this be a permission issue? 

Not really answering here, but adding to the answer above. What you have is probably as stated by previous answer is adware, although it is possible it could also be some other form of malware (or even a combination of different kinds). To protect myself against malware, viruses, spyware, adare, etc. etc. I use Malware Bytes, which has an active protection version that can be paid for but also a free version that only has a scanner and remover (doesn't automatically block malware), adblocker on my browsers, and of course Microsoft Security Essentials Suite. I bought the premium version of Malware Bytes, and it is constantly removing malware, as well as providing a limited firewall like service. Its targeted more towards malware, adware, and spyware, but it has respectable anti-virus capabilities as well. Adblocker is also very useful (sometimes too useful, actually blocks advertisements that are normally presented in video in some cases). That setup has served me very well. With that said, here is the basics of what software you need to protect yourself: a firewall service (can be a substitute or in addition to router firewall, or you can just use the router firewall, but I reccomend an extra layer of protection), anti-virus, anti-spyware, anti-adware, and some sort of rootkit detector and removal tool. Many of these are bundled together in some cases, such as malware bytes, but not always. Google Chrome has a version of adblocker available, and I highly reccomend it. Its free, although it does ask for donations for the developer. 

I am trying to run a virtual machine in virtual box as a service, meaning virtual box has to start and load the virtual machine immediately after windows 7 (host operating system) loads. The problem is that most solutions I am seeing require extra software to be downloaded. Also there are multiple users on the host machine and I want the same virtual machine running at all times regardless of login. So, without downloading extra software, how can this be done? I'm thinking vmbox headless, but I'm not sure about this and I am also uncertain how to set it up. Note: This needs to be done without downloading extra software. I already have the virtual machine working with a normal start of the Virtual Box, but I need to be able to have it running for different users of the same host machine. Update: I realize now that the problem itself is actually multiple problems that having a virtual machine run as a service would solve (simplest solution if feasible). In light of that, let me break down the problem into its parts: For each user, despite virtual box being installed for everyone, the virtual machines themselves are loaded from private user folders. I tried to change this by changing the settings on Virtual box, but it would need to be changed for every user it appears based on results. Since we have a lot of users and are constantly adding and removing them (and I don't have access to most of the accounts anyway), this isn't a good solution. Copying the virtual machine file into the different user accounts is not viable as it eats up storage resources. At one point, I suggested making a publicly available Virtual Machine user account that everyone could log into for the sole purpose of turning on the virtual machine if it wasn't already on and then switching to their user account after it was on, skipping this process and simply logging into their own account if it is already on. However, this is undesirable due to the "any user can access this account" nature. Is there a way to perhaps automate a login at boot but automatically switch user once logged in? I guess I started with "running as a service" because that seemed the simplest, but if there is another solution, I will welcome it. I still think that 

(Answer from comments reorganized to logical order.) The encryption key value in this example is 32 chars that are valid hex digits, which are inherently also valid base64 chars. Normally one should know the encoding of data from the process that created (or where applicable sent) it. This value is very unlikely to be base64 because a base64 encoding of more than a few bytes, unless deliberately crafted, will almost always contain some chars that are not hex digits. And it is impossible to be base64 because 32 chars of base64 not using base64 padding () encodes a 24-byte value, but we know the value is an AES-128 key which is 16 bytes. Thus this key is hex encoded, and giving it to which expects hex decrypts correctly. 

SSH uses two different sets of asymmetric (private/public) keys -- one to authenticate the host/server to the client(s), and optionally a different one to authenticate a client to the host/server. The configuration in is for the keys for the host, not for any client. The directive in that enables pubkey authentication for clients is , but you don't need to specify (or usually uncomment) it because it is on by default. It should work, and does for me, to convert an OpenSSH-generated key with PuTTYgen and use it in PuTTY as you described, but ONLY if it is in for the appropriate user (*) -- this is required for ANY client key, no matter where or how generated. Generating a key on one Unix system does not automatically add it to on that system (since you don't usually need ssh to access a system you are already on) nor any other system (since this system can't know which other systems you might wish to access, including perhaps several years in the future). You mention adding to only for your new PuTTYgen-generated key, not the Unix-generated and PuTTYgen-converted one. (*) or other location if specified by in but that's rare 

It depends on exactly what you mean by 'control'. If you, the attacker, get to choose two files that should have the same hash, that's what cryptographers call a collision (attack) and for MD5 it's now very easy. If you can choose both files freely it takes seconds; if you have to satisfy fairly weak but common constraints like 'it looks like a PDF' or 'it looks like a tar' maybe hours to weeks. On the other hand if you have one file pre-specified (usually a 'good' one) and you must find another ('bad') file with the same hash, that is not a collision to cryptographers, it is a second preimage. The best known preimage attack on MD5 is only slightly better than brute force at 2123.4. Your $5k can probably buy half a dozen good GPUs, which gives you somewhere in the vicinity of 237 trials per second (about 100 billion). That is roughly 262 per year, so it will take on average about 260 years (about 1,000,000,000,000,000,000 aka a quintillion). In more convenient terms, that is about a hundred million times the age of the universe. Your computer probably won't last that long. 

If you do want to specify a username/password, you can configure a user on the NAS (usually by browsing to the NAS's configuration interface) and specifying the username & password from there) 

If you want to mount the NAS and not require a username/password, you can mount it as a guest. Mount the NAS as a guest share, as follows. Make a folder on the Desktop called and type the following into the terminal: 

I'm trying to use Windows Explorer. Whenever I launch the application, it appears to attempt to load This PC, but this runs indefinitely and never completes. This is the window I see: 

I bought a Windows 10 laptop from a Dell reseller (harveynorman.com.au) last year. Everything was good until I tried to reboot one day and it got stuck in a boot loop. I tried to automatically repair and that didn't work. I tried to restore to the factory settings, and it consistently freezes at 94.6%. I'll be starting a new job on Monday which requires that I have a functional laptop running Windows. What would be the quickest way to get Windows 10 freshly installed on that laptop? 

We just purchased an iMac yesterday to view our travel videos. The thing is, all the videos we have stored on our external Hard Drive are in the .MTS file format (AVCHD). The thing is, the Mac or QuickTime won't recognize them. Are there any good / free file converters so we can convert the video files to .MOV as that seems to be the common file format for Macs. I read on-line that you can fool your computer into thinking that it is reading the video file straight from the Camcorder instead of from an external Hard Drive but you have to reorganize the storage or hierarchy of the videos. Apparently this can take up a lot of memory though - maybe up to 10 times the size of the original video file size? Is it a viable solution? What's the best / most straight-forward / preferably free way to get the videos into a usable format? 

Every few weeks my computer will become unusably slow with lots of error messages e.g. "this or that has stopped working", or just won't boot into windows. I use the Windows Diagnostics / Fix utility thing to get the command prompt and run and my computer will be usable again.. for a few weeks until I have to go through the process again. Each time I run CHKDSK it'll report that it had to replace a number of bad clusters in files xyz. I've reformatted & reinstalled a few times and I get the same behaviour regardless. Does this mean my hard drive is slowing failing? 

Is there anything I can do to see what happened to it? Is there a chance it came loose? How can I check if it's fried? edit nobody stole my RAM. I didn't physically do anything to it. I have a Dell Studio Laptop. I'm running 64-bit Windows 7. I don't know exactly what else to specify, I'm not familiar with dealing with RAM. Update I ran a MemTest but it did nothing except confirm that I had 2 gigs of RAM that worked. I opened the laptop and took out the 2 GB module, putting the 4 gig module in its place. I powered up the laptop, and it reported 4 GB. I then put the 2 gig module in the old 4 gig slot, powered up, and the laptop reported 6 GB. The short story is that I don't know what the problem was, but it's no longer manifesting itself. Don't buy Dell. 

and when you want to stop it, at latest before starting a new one using the same file, do (as the same userid) something like 

Not a complete answer yet, but some ideas/directions: That cipherlist change is meaningless. The term you added is in standard RFC format, also used by Java and some other things like Wireshark, but NOT the format used by OpenSSL; the OpenSSL format is which was/is already in your list. Also, is useless here; it would remove any export suites that had been added, but none have been, and it would prevent any further specs from adding them back, but there are no further specs. Some early versions of Java 7 SSL (JSSE), I don't remember exactly which but probably including 7.03, did have their default cipherlist in the wrong order, which could result in selecting a poorer than necessary ciphersuite, but your ignores the client order, so that can't be it. Recent versions of httpd have started defaulting to larger DH groups (for DHE, which you are preferring), and that does cause problems for Java 7 (and earlier) at least using its default crypto providers. But $URL$ says these changes were 2.4.7 and .10, so .10 to .12 shouldn't make any further change I know of. Query: Do you in fact have DH 1024bit configured as $URL$ suggests? If that isn't it, I would need more data. Is anything written in the httpd log(s) when the problem occurs? Can you get more details from the Java client with the problem, like an exact exception message? (Is this a client you can run yourself, or does it belong to another person or persons?) Can you get a network capture of a failed attempt with Wireshark or tcpdump or similar? If all else fails, can someone run the Java client with or equivalent, and get the (rather voluminous) resulting output? 

Through OpenSSL release 1.0.2, the TBS portion of a certificate is field with type which is a typedef for . Following the usual pattern you can ser/deser this with . Remember X.509 has an AlgorithmIdentifier for the signature (OpenSSL type ) both inside the TBS and outside, so you'll need to set the inside field to some valid value even if it isn't the value that will actually be used when signing. In 1.1.0 the X509 structure is made opaque (along with many others), and there is no API to access this piece. But if you cheat a little and use to get it, the typedef and declarations for the i2d/d2i routines are still officially externalized. This is inconsistent, and it wouldn't surprise me if it changes in the future. 

CA cert and privatekey must (both) be in PEM format; you can include the privatekey in the cert file and omit the option. If you omit validity defaults to 30 days. oldcert and newcert are PEM by default, but can be changed with and respectively. If you are only doing this once, it's easiest to use for the new serial. If you will or might do this multiple times for one CA, to ensure each one gets a unique serial let OpenSSL use its serial-counter file by specifying on the first one at least. By default extensions are left unchanged. If oldcert has an AuthorityKeyIdentifier extension pointing to the old CA, and the new CA is different, this will make the resulting certificate unusable because it can't be validated. Other CA-related extensions like CRLDP and AIA may also cause problems. Use to remove the old extensions; if you do need (any) extensions in the new cert, you must configure them (all) in a file specified with and optionally (section). See $URL$ (and follow the link to x509v3_config if you need extensions). The warning under "... without the -req option the input ... must be selfsigned" is overstated; if not openssl gives an error message about "unable to verify", but does create the new cert as desired. Also, release 1.0.1 before f had a bug that causes this case to produce wrong output; make sure you don't use one of those versions. And as already noted unless you have the matching privatekey somewhere (possibly on a different system/app/whatever) the resulting cert is of very limited utility.