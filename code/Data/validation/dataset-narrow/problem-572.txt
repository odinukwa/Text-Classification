As you can see, there is lots of repetition, and I'm sure there's more Python-ic ways to approach this problem. Any suggestions? 

Other than that, the program looks pretty good. You didn't include , so I couldn't do too much refining without making sure I wasn't breaking the program. Final code: 

Over-fitting It could be possible that you fit your data too well, to the point where we don't generalize well enough. An example of this is given in the picture: 

@Filipe hit the main point I wanted to cover. But there are some minor improvements that can be made. 

This question was tagged connect-four, hence my shape parameters. Those could easily be changed to the variables input by the user (which you should handle in a separate function). Note that this will perform slower than the other presented solutions for smaller values. The speed improvement kicks in with larger sizes. 

For an assignment I had to create a client and a server that communicate over a well known FIFO. The server is required to use three threads to serve the client, managed by a semaphore. The code was pretty hastily written due to my busy schedule, but works as intended from what testing I've done. Feel free to rip it apart. 

The Sigmoid Neuron is defined as: $$ \sigma(z) = \dfrac{1}{1 + e^{-z}} $$ Torch implements this neuron type here. (1) Excerpt with minor edits from Neural Networks and Deep learning 

Here is a Bitcoin address validator I am looking to have reviewed in C. Normally I would have the and function prototypes declared in a header file, but I decided for the purpose of this question to integrate them into one for easy copying and compilation. 

This is the current Makefile that I use with my C projects. Here is what I would like to be reviewed: 

I've created a JSON parsing library in C, and would like some feedback on it (feel free to submit a pull request on GitHub). Any and all suggestions are acceptable, but I would prefer if reviews were focused on making this more efficient. My header file: 

Looks pretty clean for the most part! Here's the source of the actual GNU implementation used on most systems for comparison (if you already haven't taken a look at it). Just a few notes: 

And in our method we just do . All the heavy lifting is now extracted, and if we add a new UPC it's trivial to add it. (Add a parameter to our method, and pass the value to .) 

The biggest issues I see are some conformity/readability issues. For example, the following / structure: 

And we're done with this method! :) I'm not going to comment on the others, they're not nearly as big of a mess, and you should be able to take a lot of what we learned from here to them. I wrote this entire thing outside an IDE and I'm a little tired at the moment, I'll try to clean this up more when I wake up. Overall, not bad for coming from java. Hopefully you learned something from all of this. I mean it all in the best of spirits. :) 

So now our input prompting is separated from our processing, that's good but we can do better. The block is now something along the lines of: 

This will centralize the common methods/properties/events/etc. with all your characters, meaning, you only have to write the implementation once. The only downfall is that you can only inherit one other class, any other "inheritance" must be implementing interfaces. That said, your abstract class can also inherit one other class and other interfaces as well. 

Usually I would omit type-annotations, but when building a generic, multi-purpose module I always keep them. We could define an file instead that would contain all the signatures, but that's beyond the scope of what I wish to explain here. Finally, we're back to our code, you had: 

Obviously this bit is easy, but then you should have a method (or for ease-of-use a constructor) in it: 

This makes the code a bit more readable, and now if you modify where the location is (say you add 3px buffer) you don't have to modify both lines. Personally, I would add a method to the class, and call it instead of putting this logic into the form class. Lastly, you really need to clean up the indentation/whitespace, in Visual Studio CTRL + K then CTRL + D will automatically clean a lot of it up for you. 

Don't use percentages or decimals or negatives for or attributes. Those are considered illegal. If the image needs to be width, then you should apply an appropriate to it. The and attributes on tags are designed so that browsers can determine how an image will affect page-rendering, before it has been loaded. For and tag attributes, you should encode the URL when necessary. I.e. use for spaces, especially. attributes on tags are obsolete - CSS can replace this. Of course, tags alone can be considered bad-practice, avoid them if you can. Back to vs. : the following code is illegal by the specification: 

If it were true that a small change in a weight (or bias) causes only a small change in output, then we could use this fact to modify the weights and biases to get our network to behave more in the manner we want. For example, suppose the network was mistakenly classifying an image as an "c" when it should be a "o". We could figure out how to make a small change in the weights and biases so the network gets a little closer to classifying the image as a "o". And then we'd repeat this, changing the weights and biases over and over to produce better and better output. The network would be learning. The problem is that this isn't what happens when our network contains perceptrons. In fact, a small change in the weights or bias of any single perceptron in the network can sometimes cause the output of that perceptron to completely flip, say from 0 to 1. That flip may then cause the behavior of the rest of the network to completely change in some very complicated way. So while your "o" might now be classified correctly, the behavior of the network on all the other images is likely to have completely changed in some hard-to-control way. That makes it difficult to see how to gradually modify the weights and biases so that the network gets closer to the desired behavior. Perhaps there's some clever way of getting around this problem. But it's not immediately obvious how we can get a network of perceptrons to learn. We can overcome this problem by introducing a new type of artificial neuron called a sigmoid neuron. Sigmoid neurons are similar to perceptrons, but modified so that small changes in their weights and bias cause only a small change in their output. That's the crucial fact which will allow a network of sigmoid neurons to learn. Just like a perceptron, the sigmoid neuron has inputs, \$ x1 \$, \$ x2 \$, ... But instead of being just 0 or 1, these inputs can also take on any values between 0 and 1. So, for instance, 0.638 is a valid input for a sigmoid neuron. 

I thought the function would be optimal for this, and I believe it makes my application pretty robust and fast. On my Mac (ommiting 196 lines of filename output each): 

Do not that and are different classes between GitHub and Bitbucket. I'll not bother posting any models, as they don't do anything except contain attributes and properties which those attributes apply to. One of the things I thought about doing is making an class to handle all these event args. At the moment I have like 20+ files that all look like does. 

I saw that and died on the inside a little, considering what you're doing with this you should rewrite that to one case for and then sub-cases for . It's nice that you're trying to use the new C#7.0 features, but let's not abuse the new C#7.0 features. You can make the first case and then test from there. This little guy: 

Regarding the service-layer handling database access: this is a good approach, I'll tell you that a lot of my code in this project I've mentioned previously is in the controller, and it's cumbersome. What I would change is reject the idea of needing to create a (or pass it to the method) controller-side, and do one of two things: 

Ah, I guess I really did need after all. While both of these bugs are pretty major, for your situation they're really not something you would look for. You are specifically switching between languages that have different parents, and you're only creating one . (Which is probably the most likely scenario.) 

I don't know how WorkflowInvoker works, but I assume that it has the capability of throwing an exception, which means that your line would not be reached, and I wonder what other issues that might cause for your application. (Looking for operations that aren't there, for example.) I would consider a / block, or decrement before your operation gets invoked. (You can probably consider "In Progress" as a non-outstanding operation.) The other issue I see with your Lambda method is regarding the idea of "closures", and captured variables. In .NET the and variables are still part of the local method and are simply referring to the local copy, which means if you modify either variable after queuing up the worker, you could end up with a different result. This may not be an issue with your infrastructure, but I feel it's worth pointing out none-the-less. 

I have to modify the number of points in this XML in order to test the performance of another program of mine. Here is an example of the XML I have to modify. performance.xml: 

So it turns out we are doing a lot of extra work here. Apple has implemented their own way of accomplishing this. 

I have the following header included in some of my projects so that I can add a little color to the terminal output. Here is how it would be used: 

You could use , and then if there is a group greater than 1 output . However, it's in a module, which you don't want . If you look at the link, it shows how the method is implemented (though I see no reason to reinvent the wheel). 

I must use at least two functions in this project. In addition, I am also supposed to count and output the number of occurrences of each character. : 

Overall, I think this is very well done. There is one major thing I find wrong with it though: Where is the documentation?!?!?! Sure, as a developer using this library I could read through your short source file and pick it apart to figure out how everything should work. But my time is better spent elsewhere, reading the documentation of other larger projects and programming my own code. That could actually even be a breaking point between using this library, and using a similar (even inferior) library that had good documentation for me to read. 

Now you want to know how many seconds are these clock cycles. For that, you want to know how many seconds a single clock takes, i.e. . If you find that, simply multiply by 50 to get total time taken. For that, OpenCV gives second function, . It gives you frequency, i.e. how many clock cycles per second. You take its reciprocal to get time period of clock. 

The last part of my speech recognition series: finally training my network. Here's the dataset I did it with (self-generated, small I know), and the code I used. After running this code (takes about an hour on my Mac), I get a validation accuracy of roughly 30%... not spectacular. Any ideas on how to improve the training speed, or the neural network's accuracy? Any other suggestions in general? 

If you have C#6.0, you can do the third condition (and make sure is never returned) with a modification to the call: 

All three of these have the same response: Properties exist to allow is to idiomatically access information within them. By not using/creating properties, you fall into the trap of having to remember just exactly what the operation means. So, for: 

Why is that a single line? Let's break it up so that we don't miss that bit that gets hidden by scrolling. 

So that is all wrong. In C#, you should know that member naming is and member naming is . Yes, Unity tends to violate this, but generally speaking you shouldn't. Second: any public-facing members are expected to be properties. For it's a simple fix: 

Second, the only issue I see with your code is the order of arguments. When writing functions it's nice to be able to use the pipe-right operator () to push the left value as a parameter to the function on the right. In the case of your function, if I were to try to pipe an array to the right, it won't work. This is because the pipe-right (or pipe-forward) operator pipes the left side as the last argument to the right side. 

The only public members would be and . Finally, I have a method which I use to test the distribution of our randomly generated values in \$[0, 9]\$. 

It helps deflate the file and make it easier to associate blocks. I would declare the following variables (from each method) to fields: 

One method of rewriting it could be checking and likewise for 2 before you enter the loop. You should also store outside the loop. 

Overall, good work. Hopefully this is somewhat educational for you and not just a bunch of random nonsense. :) 

This is wrong, because has an indexer and is a . The method you call on to get the index increases the amount of effort, work and time that your program has to perform in order to give you a result when all you really need to do is index the list. 

This could definitely cause a division by 0 error if not handled properly. (It's handled properly here, but could easily be made not to be.) Here's a link to ideone with the two tests, for comparison. All-in-all, I hope this was helpful. :)