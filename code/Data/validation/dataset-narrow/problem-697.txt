There are some magic numbers in your code, that you might want to extract into variables. Since JavaScript doesn't have variables (afaik), consider marking them via naming conventions. For example: 

Method names are inconsistent , , . Consider writing constants in uppercase to differentiate them from variables you intend to modify: instead of or in this case something like is more appriopriate You declare and assign your variable the first time somewhere between all the functions, although you have a method There are several magic numbers, that you could/should turn into variables Some parameter names are rather cryptic: You could use objects instead of arrays for some variables. E.g.: is an array with 2 elements (probably x/y pos). You could turn this into an object . That might improve readability in some places. Currently your update logic seems to be mixed with your draw logic. It is probably better (and easier to maintain), if you seperate these. Also, you check for game over inside your draw call... 

I have this code that fetches rates from a website called X-Rates, and outputs to excel the monthly averages of a chosen country. The code runs quite fast, but I still think there's improvements to be done! Apologies for long code, but if you help me I would be really grateful! 

I am working on a project on VBA where the objective is to have a "program" that fetches rates from a website called X-Rates, and outputs to excel the monthly averages of a chosen country. Initially I was doing simple XMLHTTP requests and output to Excel the results. But now I have tried to develop a "pseudo" multithread excel web scraper, based on Daniel Ferry's article on excelhero.com Since I don't know much about VBScript, I think there's enough room for improvement, so I ask please review my code! Apologies for long code! Global Variables: 

The four if statements inside and seem to be the same, so you could move them to a seperate function. However, you currently have set to a fixed value and you don't change it. So as it is, the if statements are unnecessary. Some variable names are rather cryptic: , , etc. There are unused variables: e.g. The browser identification and the "calculation" of seem to be good candidates for a seperate function. 

I suggest splitting HTML/CSS/JS into different files Your use of indention and whitespaces is inconsistent 

Mixing of PHP/HTML This is probably the problem, that will annoy you the most in the future. As it will make dealing with outputting stuff way more complicated than it needs to be. I highly encourage you to use some kind of templating system to render templates and display html. Don't ever output or print html code in a php file. Take a look at twig (used in eg. Symfony). Something like that will extremely improve your codebase. Your problem with printing will vanish and you can use common parts of html code without any problems. Advice #10: Use some kind of templating mechanism to output HTML. 

Over the weekend this article inspired me to write an ASCII string implementation that avoids memory allocation during basic operations like and . It's still a work-in-progress but I think this is a solid foundation to build off of and wanted some help checking my logic/maths. The main method of interest is the overload of that accepts an offset and a count since most other methods are implemented by calling it. 

There are an infinite number of ways to do this but one possible approach would be to use a dedicated hash function to compress your inputs; out of sheer laziness and convenience I chose to use the built-in for my example. To improve the performance characteristics of your code I hoisted the construction of the hashing class up a level and use so that we only have to instantiate it once per call instead of once per string. I then chose to sample the first three bytes of the hash result in order to come up with values for , , and . 

First of all, it's good that you try to implement something like a blog/forum on your own. It will teach you a lot of good/bad practices. In one comment you said, that you are trying to understand how these frameworks could be impemented, so it would be very good, if you take a look at them. Check out their APIs and see what they did. Im used to Symfony ($URL$ so my advice will mostly use their architecture as an example. However, be sure to remember that there are many ways to success and the things I describe are my current point of view. Your major problems (maybe not now, but in a few days/weeks/months) are the structure of your project, the structure of your source code and the mixing of php/html. 

Source Code Structure As already mentioned, only define one class per file. I like it, that you encapsulate the fields of your classes. However, you have many static functions, which basically degrades your classes to some kind of namespaces. There is nothing wrong with static functions, but be careful not to overuse them. Advice #6: Don't overuse static functions (and statics in general) As you mentioned, and is suboptimal. You have pretty much three options: 

I have a code that fetches rates from a website called X-Rates, and outputs to excel the monthly averages of a chosen country. The code runs quite fast, but I still think I could improve the code a little bit, but just don't know what to look for. I've done the obvious things like, making the option explicit and disabling screen updating. Can someone point my flaws? Also you will see that the code uses if's instead of select case. Could this be an improvement to think about atm? Apologies for long code, but if you help me I would be eternally grateful! 

I've added a test set of data to use and the results I get. It can be found at this pastebin link Important note: I've run the rubber duck on this version and updated the code! Also, thanks for reviewing a very long code post! 

If you're going to spend the time abstracting things then you probably want to invest some effort in refactoring a lot of your common logic into helper functions. Starting with the very first issue, a hard-coded connection string, we can create a function that'll build one out of components: 

I also went ahead and hoisted up the into a static field since there's no real security benefit gained by allocating a new one on every call. Usage in your current function is straightforward: 

Edit: Dunno what PCG is and don't want to read the paper? Maybe this video of Melissa O'Neill (the author) explaining things will be palatable instead. Original: I attempted to answer this question last week and was thrown off when someone mentioned in a comment that my method would show bias. Eager to prove the naysayer wrong I discovered that things were even worse than he suggested as certain ranges will cause things to break down entirely. So I decided to start from scratch, do some more research, and try again. Performance was also much more important to me this time around so I decided to try and find a way to avoid calling to generate every single value. Eventually I settled on PCG as an appropriate modern algorithm. Floating point math has also been entirely avoided while working with integers in order to avoid the sorts of issues I encountered in my previous attempts. Looking for potential ways to speed things up or simplify the code; the branch statements bother me quite a bit but can't envision a better way to include the full range of values without them (the upper bound cannot be generated by the method). Haven't been able to find any bugs so far but that doesn't mean they're not lurking either... 

The use of global objects is generally discouraged, but migh be okay given your current experience. Another (slightly) better option is to instantiate the database once and pass it to the method that needs the database. The imho best option is to use dependency injection. However, this is pretty advanced stuff and something you want to look into in the future. Advice #7: Use dependency injection if possible. Globals might be okay for now, but lead to trouble in the future. You say, that you have posts and comments. However, in your code you only deal with assoc arrays. Why don't you create classes for Post and Comment? This is the perfect place to use a class. Advice #8: Use classes for entites (Post/Comment) and not assoc arrays. If you use classes for Post/Comment, you might wonder how to write them to json. PHPs jsonSerialize will help you there. However, you probably have to convert json -> Post/Comment yourself. Advice #9: Use jsonSerialize or something similar to serialize objects to json. 

So the codes for the configuration are mostly the same across all variables, but it always end with an equal sign. It happens that when a store has more than 10 codes we have to split them manually, it results in a quite of work. My ultimate goal for this string splitter is for it to be : fast, reliable, easy to maintain /understand and user friendly. Concerns about code Being unexperienced with programming, I still have issues using the proper naming conventions. I have been studying the VBA Developers Handbook by Ken Getz and I didn't quite understand the conventions. Also I feel that I am using a shotgun to kill a ant (apologies for the cringy metaphor). Code & Logic 

I am trying to perfect my string splitter's performance, to be more fast, more easy to maintain if someone else reads it and more readable code-wise. Context ,Scope and Objectives Where I work we use a sort of "configuration files" to calculate some data warehouse databases. For example, if you wanted to config a file to calculate the number of supermarkets in a country, the config file would like the below example, where the: first line is the description/name of the store and the line below is the code for the program to pick up (where 50 = S is the category for the sales, 97 = 01 is the "I've bought it myself" and 183 is the column where the code for the store is stored (in this case 0040).