I think you're conflating two unrelated concepts - "free-to-play" and "advertising supported". A lot of the free-to-play games have many ways you can plow money into the game if you so choose, and they encourage you to do so at every opportunity. See Puzzle Pirates for an elegant example of this and Age of Wonders Online for a significantly more hamfisted version. Both of those games are "free to play", neither of them have advertising, and both of them make money off users anyway. (Puzzle Pirates, with true design elegance, manages to make money off even the users who aren't interested in putting money in.) 

It's worth pointing out that there are really two kinds of "turn-based" systems. There's the true turn-based system, and there's the immediate-mode hybrid. In a true turn-based system, you come up with a set of orders, but nothing actually happens until you push the "end turn" button. There's no combat, there's no production, there's just you laying out orders for what you think should happen during that turn. For examples, look at the PC game Dominions III, and the classic board game Diplomacy. In games like this you never have to ask questions like "which unit should attack first this turn" because there is no "attack first" concept - everything occurs simultaneously. This is also the genre that's amenable to play-by-email. Every player makes their orders, every player hits "go", every player looks at the new turn with dismay as their entire plan collapses due to everyone else interfering. In the weird hybrid mode, generally unit movements and combat happen "immediately". Generally you can buy units, and that also happens immediately. You can say things like "I'll attack this force, and if I lose, I'll buy reinforcements before the next turn". Eventually you run out of action points and you have to hit end-turn, at which point it does end-of-turn effects like healing, resource gathering, and also lets other players take their turn. This is often known as "hot-seat play" because each person can do their turn in a row, but has to sit there waiting for the other players. In the first case, it's pretty simple. Each unit, building, and city keeps information about what its next move is. When you hit end turn everyone carries out their orders - you just run the simulation, in whatever manner your simulation requires to run. In the second case it's also pretty simple. Some units (generally buildings) have orders, but most units just do what you say, immediately, often with a pretty little animation. You'll need to keep track of when they have to stop doing things. If you want more than that, you'll have to tell us what you're having trouble with. :) 

Obviously it's difficult to come up with a way that many of these can actually be, you know, interesting, but I don't think it's impossible. You would, however, need a thoroughly different model from WoW's. Also I kind of dread the idea of "okay it's time to go run Deadmines, we need twelve players from twelve completely different classes", so I feel like any functional game would either just pick a different set/layout of these from WoW or wrap up a bunch of them into one class. Just as an example of a possible combo, I really like the idea of Tank+Debuff+Sniper being one class, Threat+Mobility being another, and DPS+Healing being the third more common class. Your tank's job is to stay alive and keep the monsters from obliterating the party, you have one utility character constantly trying to redirect every monster to the tank and keep people out of fire, and you have three damage-dealers punching enemies and making health fly out. I think there's potential here. You can easily generate other interesting combos by just mixing and matching various roles. It's also worth pointing out that, with these roles in mind, WoW's "standard trinity" is actually much more complicated than you might think. It's not just "Tank/Heal/DPS", it's Tank+Threat / Heal / DPS, but virtually everyone is also Buff/Debuff, DPS often has CC, Priests do Screening, and half a dozen classes have Sniper (for spell interrupts). But those are always in a rather minimal form, it's never the focus of the class. 

In my experience, there's two major ways of doing it. 1) Dead reckoning. Got someone on-staff who's written that kind of game before? Got someone who has really good instincts? Maybe they can tell you. If you're real lucky, their response will bear at least vague similarity to reality. 2) Prototype it and find out. The only reliable way. There's a third, if you're using a well-established engine in a way that many other people have used that same engine, and not planning on doing anything fancy or out-of-the-ordinary: 3) See what they did, then do the same thing. but that only really works if you're, say, making a first-person shooter with Unreal Engine 3. 

Many MMO questlines behave like that. You're never given the illusion of free choice. Now, free choice itself is horribly expensive - I'm not going to say that every quest needs to be a branching quest, or anything. But even something as contrived as "stumbling across footprints in the snow", when in reality those footprints are either so common as to be unavoidable or literally spawning next to you every fifteen seconds, can give the player a sense of exploration and plot advancement that is sometimes sorely lacking. If the player doesn't know why they're doing what they're doing, then the player won't be engaged with the quest. And maybe that's cool, maybe that's okay, but eventually it gets very, very old. Unfortunately, players have been trained out of reading quest descriptions. What you've got to do now is to build it into the quest. One line: "It's freezing cold here. Please find us some warm clothes, and if you can, figure out what's causing this." Then send the player out to explore, and they shouldn't need to come back to town until they've got a backpack full of wool and a spear capped with an ice demon leader head. All carefully constructed so that the player's guaranteed to meet all the important creatures, without, of course, realizing that they're being funneled down that path. 

A few answers! The coordinate system I've seen most often for hex-based traversal is one where the player can move in every normal NSEW direction, as well as NW and SE. Then you just render each row half-a-square offset. As an example, the location (2,7) is considered adjacent to (1,7), (3,7), (2,6), (2,8), and the weird ones: (1,6) and (3,8). Meanwhile, if we assume (2,7) is rendered at the center of the screen, (2,6) will be rendered up-and-to-the-right, (2,8) will be rendered down-and-to-the-left, (1,7) and (3,7) will bracket it to the left and right respectively, and (1,6) and (3,8) will place themselves top-left and bottom-right respectively. A diagram of what I mean: