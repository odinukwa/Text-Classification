Unless you know for sure there is no html or user editable content, you should really html escape it 

Another useful function you might add is get_once. I do something similar for when I store an error message in the session, then redirect to a new page and display the error message. After that the error message is no longer relevant so I remove it from the session. 

Well if you want to split hairs, you could do a couple of minor changes (commented below) Honestly, I can't see any advantage in making it recursive, it works fine as it is 

I haven't read the book you mention, although it looks good so I might buy it and have a read. A few things for me There are echo statements in the code, I am assuming that is for debugging and you are going to remove them. In a couple of places you use die(), and then elsewhere you throw an exception. Personally I would throw exceptions and let it bubble up to somewhere that can handle them properly. Your class is called fileImporter, but it also has a download aspect to it as well. I am wondering if fileDownloader should be separated out. You have a private getter function 

Avoiding double code Both variations of the method have almost the exact same logic in them. A better practice would be to extract the common logic in a separate method and call that method from the variations. This way you avoid a lot of work when expanding it or making changes to the implementation. Here's how you can do it: 

Naming: Like the previous answer stated, your classnames are far from following conventions. The should be and not . Also a name like is definitly not meaningful, not for you, not for others who read your code. Try names like , or , and so on. Tip: Names of Classes, Structs, and Interfaces Braces: Microsoft doesn't have any conventions on the formatting of your braces. This means you can chose between following: 

and naming variables: When possible, try to use instead of explicitly declaring your variables. The compiler will determine the type for you so you don't have to worry about that. Also give your variables meaningful names. and are not meaningful, better would be and . More reading: 

It looks reasonably well thought out to me, although I am not sure how much it would be used beyond practice. There are a few small things that can be improved. Comments are inline 

The StudentRepository is all about database, and shouldn't know about $request and $response objects, that is the job of the controller. What if you were fetching data to put in an excel file, then you can't use the StudentRepository as it was to fetch that data. 

Database service, take the config out of the service, and store it in a config file. otherwise you need to edit the code when you deploy to a different server. Would a join work better here 

Have you tried using this function before? It does a fair bit of what you are trying to accomplish. $URL$ Failing that, I would try learning regular expressions, as they can make a lot of your strpos more concise. Its a handy skill to have in the toolbox. $URL$ I also find the a,b,c thing incredibly cryptic You could use constants 

Note that I put the line breaks there just for readability. In Visual Studio it can be on 1 line, making it 6 lines in total plus the method. That should be shorter than 6 blocks of 4 lines of code. Hope this helps! :) 

Solution for the Repeater - ItemTemplate Here's a solution that works when your data resides in an ASP.NET Repeater control. Following is a sample markup: 

Another way of using a method is making it return a to see if the parsing succeeded and using the parameter. This results in following method and usage: 

And then do this for the other class as well. This is not the most ideal situation because when you want to change the order of the properties for the output, you'll have to change the method in all the derived classes. There's not magic automated way to do this I believe. 

If this can be applied in real life, the Mars Rover could keep going indefinitely, as long as the change of X is equal to the change of Y. Example: 

On a final note $lang->xlate may sound like a nice function name, but after a while you will get sick of typing it, $l->x is cryptic but shorter 

The bulk of your code looks fine, I have made what are (In my opinion) a few usability enhancements, but take it or leave it as you see fit. I don't think you can really make the xml processing any less ugly. Comments are inline 

The get function here would probably be more useful with a default value option then just returning false. 

I have been using php for over 10 years and never found a need for a session wrapper, but maybe you find it easier/better. There are a few improvements that could be made with your code If we are checking to see if the session has a key, a simpler test is 

The security aspect of things looks fine, but there are some areas for improvement, I have provided inline comments where possible. The whole quiz could be coded as a class, and would be a lot nicer, however I didn't want to go too far from what you started with so you can see what changes I have done. Overall, I have split the code into functions, and tried to make each function do 1 thing only, and renamed variables for readability. This will become more important when you go to maintain the code. The first bit of code is what I used to test all the functions and catches exceptions that occur. You could improve by adding more error checks after each prepare and execute, but I will leave that to you, as they are only really necessary if the database structure doesn't match the sql. 

Using variable names like and are very bad practice. Not only will other people not understand your code, if you haven't looked at your code for a while, you might have forgotten what each variable does/stands for. Give your variables a meaningful name. So after applying this, your code looks like this: 

A few remarks on your code; Naming: Names like or don't mean much, not to you, nor to others. Use meaningful names for your variables. The keyword: From the C# Programming Guide: 

UpdateDatabaseStatus(): You should only instantiate the when is not null. And since you don't use the variable, get the rowValue in one line. I also applied the naming tips already in this method. 

Why mix fieldnaming with and without the underscore and capitalize some and do not so with other? Prefixing them with an underscore is personal choice but fieldnames have camelCase, according to the capitalization conventions of Microsoft. 

I know I have strayed from the Exception subject but I thought this might help you too refactoring your code. Keep in mind that exceptions are for when your code does something unexpected. Ecxeption-handling is for catching situations which might result in abnormal behavior of your program, not for data that you (not the code) expect there to be. I hope you understand what I mean and that this helps! ;) 

The dump function, why do you throw an exception if the session doesn't exist, but not anywhere else if the session doesn't exist? I would re-write it like a guard clause rather then having a return halfway through the function. 

Personally, I would just stick with what you have already got. You could try something like this, although too me it doesn't look any tidier. You would need to profile it against your database, to see if it performs any better. 

You have a lot going on in one middleware. Keep in mind a middleware runs for each request so it needs to be reasonably well optimised. I have split the logging bit out into PlatformLogger class, that seemed like a logical separation. I have also removed a lot of the } else {, to me they just add noise and in most cases you return anyway, so the else will never get triggered. PLEASE NOTE: The conditions below where I removed the else's may not all be the equivalent to the sample provided, it is just to show you what it would look like, you would need to check and make those changes yourself if you choose to do it that way. Also check your if conditions, and do the cheapest test first as they might short circuit the if statement and you won't have to perform the other slower test that involve database access for example. 

When using this method, there's no need for creating strings and arrays and again conversions to numbers. Your entire code can be written as follows: 

Why create methods/functions/lines of code that do something that's already been made for you. If you want to get the filename without the extension, use the Path.GetFileNameWithoutExtension() method. 

Although 'RubberDuck' has already provided a nice answer, since CodeReview allows also reviewing the code as a whole and not specifically to only the question: here are a few tips. Note that my tips might not be perfect, just trying to help you write better code. :) Shorter code: Following code: 

Above code is for inserting a leading zero when the minutes variable is smaller than 10. This this can be shortened to following code: 

Now you know you're talking about the box and not mistaking it for some possible rectangle. Don't uppercase field names, use . Also, is not a very good name, choose a name like or . keyword: Use instead of declaring your varibales explicitly, let the compiler decide the type. Your code will also look cleaner: