If the stream has gone bad then writing to it will not do anything. Also a stream going bad is a very expcetional thing so I would just test for it at the end of the function not every time through the loop. I would simplify the above code too: 

Pointers are a really bad idea. They do not convey ownership of the returned object (so who is responsible for deleting them). I assume the problem is that if you can find the object you need a way to indicate that it was not contained and you can use NULL to indicate this. Containers in C++ usually return iterators on a find. A failure to find an element returns end() (which is an iterator to one passed the end of the container). Also prefer to pass parameters by const reference (prevents an unnecessary copy). 

I can read the code which because of good function naming actually tells me more than the comment. Writing bad/useless comments is actually much worse than writing no comments as you now have to maintain the comments and make sure they are the same as the code. When writing comments do not explain what a line of code does. The code is usually better than the comment. Use your comments to explain WHY you are doing something or explain an algorithm. Don't explain the code (the code explains its self). Simplify the delete. You have deleted a node. Because of the way you hold the tree (an array) you must fill that node. The invariant you must maintain is that all nodes on the left are smaller and all nodes on the right are larger. A simple trick is: look at the left tree. Then find the largest value in that subtree. It will be bigger than all the other values on the left yet smaller than all the values on the right. You can then use it as the node to replace the current node. If the left tree is empty. You can use the same trick on the right (just pick the smallest node on the right). 

You have the correct answer. Its an that you use to create the correct object. But you don't need to use a unique pointer. You could use a reference rather than a unique_ptr (but a unique_ptr is simpler). But rather than do it in main I would move this work into a factory specifically for this job. 

Note: Your attempt at measuring move assignment was wrong. You were measuring the time required to create the list then move it. So I removed that output. 

I have been bitten a couple of times were macros expand to more than a single statement. Which renders the block incorrect. As a result I always use '{}' for sub blocks. I recommend it for everything it will prevent those impossible to find errors. Since we now live in 2014 (nearly 2015). You should be using the modern version of the compiler. So add override to functions that override virtual functions. 

Major FAIL. Once you have handed a pointer to the constructor of a shared pointer you own that pointer. You must delete the pointer when this object is destroyed. Normally the destructor will do this. But if you fail inside the constructor then the destructor will not be called. 

So I am not sure what you are doing with it here. I would remove it completely. @glampert pointed out that the used with varargs on GNU is a special extension that effectively drops the proceeding comma if the argument list is empty. Using ternary operator as an I think your use of the ternary operator makes the code less readable. 

I can keep doing this but you get the point. If the comment provides no more information than the function name they are a waste of space. And more importantly a cost to maintain. 

It seems fine. Not sure the interface buys you anything over a normal iterator. The only error I see is: 

But is not the only stream you can print to. How about a file or a socket or an internal buffer before writting to a socket. I would pass the stream you want to display on as a parameter. It can alwjays default to but allow a user to specify an alterantive: 

I think doing authentication your self is a bad idea (this is a specialized field with lots of gotchas). Anway don't you want to spend time on your application rather than doing mundane tasks like authentication? I am not an expert on front-ends so I have no good recommendations on packages that can do it for you. But I did play around with (available via google source), which is the same authentication package that the stack exchange sites use. This allows the users to login-in to your site using the open-id credentials (google/open-id/facebook/yahoo/stack-exchange)). 

Sure. But not in any meaningful way. But before I can give a more exact answer I need you to be much more specific. 

You should strive for the strong exception guarantee (also known as transaction exception guarantee). 

Also note the use of rather than . The adds a "\n" to the stream but then also calls flush. This is hardly ever what you actually want to do. Let the stream flush itself it makes it much more efficient to do so. In your loops get used to use to loop over containers. They are much more versatile and apply to all containers. Also you can pass them to functions very easily and they allow you to specify sub-ranges very trivially (event the uses iterators underneath). How I would do it. First note that the output does not depend on previous values. You could cache them for speedy look-up but that seems overkill for such a simple algorithm. So there is no need to store the data in a vector. 

Other notes: Be careful using a '_' as the first character of an identifier. Most of them are reserved and unless you know all the rules (and everybody in your company does) you may accidentally end up in hot water. PS. You are OK with . I just prefer never to use them (As the first character). Container class are designed to hold objects, but you are storing pointers. The question now becomes who owns the pointer (as they are responsible for deleting the pointer). This is compounded by your add() interface which also passes a pointer. In modern C++ you very rarely see RAW pointers being passed around. How we change the interface will depend on how you expect it to be used. But I assume you are dynamically allocating the object and passing the ownership to the container. In this case I would change the interface to: 

On failure you return EOF. Yes I get that it is -1. But your making assumptions. Follow specs to the letter. Things like this scare me: 

From your code I would not subclass iterator_base. I would redefine it slightly but then use typedefs to get the two iterator types. 

A file stream is the same concept as a stream. So writ the code to use a stream. Then you can pass while you are testing then swap in object when you are ready to pass a file. Technically this is illegal C++; 

If there is a possibility of NULL then yes, otherwise return a reference. Here you are adding a child: 

Associative container Update: Because of the O(n.log(n)) nature of std::map we have concluded this is not a good idea (But it was worth the test). Rather than using a vector to store the count you can use an associative container. 

Sorry that function is big and clumsy and hard to read. It also does not provide the strong exception guarantee. You modify the content of this object doing exception dangerous work (call destroy) before updating the content of this object. To do any work in exception safe way you need to follow a three step processes. 

You should probably also check . But unless you explicitly want that error message you don't need the test; just use method. 

Rather than calculating the mid point both in and in , it may be worth just passing the value as a parameter. Learn to do the inplace merge so you don't have to copy the values back after the merge. 

No need to at the end of main(). It does that automatically. Normally you use to indicate there was a success BUT also to indicate that it could fail and there is another way to exit that could return a non zero value. When I see a I immediately start looking for alternative returns paths to see under what conditions the application will fail. So if your application can not fail don't return anything (this is an indication that it can't fail). The compiler will add the if one was not provided. 

You are correct. You could have a normal parameter. Questions from above: Mainly looking for feedback on: 

Emplace Back. Usually emplace back (a new form of push back). Creates the in place using one of constructors. Your version only allows for Element to have zero parameter constructor. It is usually written like this: 

Your header file is how most people will first see your code and try and understand how to use it. Thus putting the parameter names into the header file is probably a good idea as it helps document their usage. 

I assume you did this to save the cost of copying the vector out. This is a false optimization. C++ is highly optimized and it is unlikely that a return by value would be copied out. The compiler has aggrissive RVO/NRVO optimization that would build the result at the destionation. In C++11 move semantics are introduced and compliment the RVO/NRVO optimization and in the few cases were they can not be built in place move semantics kick in and the content is moved optimally out of the method. So declare this function 

You now have a pointer to an object with the ref-count incremented to +1. If you now put the pointer back into an intrusive pointer the count will increase to +2 and when that goes out of scope it is back to +1 and will not be deleted. Personally I think you should still decrement that reference count, but not delete the object if it reaches zero. You still have to remember to manually delete the object when you are done. This also mimics the behavior of the other types of smart pointer. In addition to the cast to the pointer. 

Container Semantics Need to add the required types and methods for it to be considered a normal container. Comparison Operators. Most containers can be contained to other containers. So it may be worth defining those. 

Note: Most of what I said above also applies RingBuffer. I will not repeat myself. So this next section are only the other parts. No need to use macros 

That's old school not seen that in a while. But its also not even needed. A stream object used in a boolean context (like returning a bool from a function) is converted to a boolean value (or pre C++11 a value that can be used in a boolean context). So easier to write: 

I would just put all methods in (no need for a ). But this is a pattern not a design and you may have a reason that are not obvious from the current question. There is no need to define methods that are covered by the default versions.