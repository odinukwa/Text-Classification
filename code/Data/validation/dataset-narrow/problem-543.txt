Yes, it will be simple for an attacker to know when they used a correct key. I'm assuming that you would encode a message like this: , and then get it back from a cipher via . You can test this and see that a wrong key will give you a lot of non-ascii characters, making a distinction between correct and incorrect decryption easy. Misc 

I fully agree with the existing answers, and only have two small additions. This looks very odd and possible insecure: 

I'm not that familiar with the HTML5 tag, so I will not say anything about that. Your code is open to reflected XSS here: (inside script tags). You might also think about extracting some code blocks to functions to increase readability and reduce duplication. For example you have twice, which amounts to quite a lot of duplication (oddly, you one use and once ). A function like might be helpful here. 

Just a couple of small points: Constructor: setting fields The general style of setting fields in a constructor looks like this: 

This could be further simplified, and the other queries could be added as well, but honestly, I'm not quite sure if it wouldn't be easier to change your database schema. I'm not quite sure how it currently works though. Misc 

I would go with the first approach. It also gives you an additional level of security as you can filter more strictly. For example, you may not want a user to be able to read out the table. Or if you do want to allow that, you definitely do not want them to be able to read out the column (although this filtering likely has to take place at a higher level). Misc 

You could also create a class (containing logic for adding, getting, and showing cards), which the class extends. That way, you could also add a class, which also extends . 

That doesn't necessarily mean that the code should be changed, especially not without discussion, but that's a bit off-topic here. 

It is customary to have a private class when implementing a list. This separates the holding of data from the managing of the list. You on the other hand have both functionalities in one, which leads to all sorts of confusion. For example, you expose the internal workings of the list by essentially returning nodes or working on nodes that are passed in from outside. Your method is also very confusing. It doesn't actually work on the list it is called on, but instead on a node passed to it. The same is true for , but not for . I would completely rewrite your code. Start with a class that has and as fields, and a class that has and as fields. Then add the methods you need, but keep in mind to not expose the class to the outside world. 

or would be alternatives. Another possibility: . Non-technical people will assume that this means they should enter a whole number. If they enter a different number, give feedback accordingly. Consistency In your first version: getNumber outputs the prompt each time, while getBool does not. This should be consistent. The names of the input variable should be consistent as well (either or . I would prefer . Other You can do instead of . As already mentioned on UX, show the possible values for the boolean answer in the prompt when asking the question. So 

If you are not echoing or interacting with a database, and you don't have any authentication (the script is open for everyone) there isn't all that much that can go wrong. Your script is open to mail injection, but that doesn't really matter, as the script itself allows the sending of multiple emails to user controlled recipients. I'm not sure if this is intended though, because the example form doesn't allow this, and it doesn't seem like a good idea, because it allows anyone to mass-distribute spam via your server. Also, as you are calling for each recipient, your script could help an attacker in a DOS attack. If this is not intended: Do not trust user input, ever. Attackers don't have to comply with what a HTML form says, they can just send whatever they want, for example Misc 

is a placeholder for any string (you would use for numbers), and it will be replaced by the rest of the arguments for . The advantage is that you do not have PHP variables/function calls inside your HTML/SQL/etc. join You can read about join here and a bit more in-depth here. Your query should look something like this: 

If this is your intention, then that is fine, but otherwise you should check if all values are set and if they are all decimal numbers. At the least I would check for division by 0. Misc 

Yes, you have way too many fields, which makes your code quite hard to read. If you split your code up into multiple classes, you should already see a reduction in fields. Then, you might also notice that some fields don't actually need to be fields, but could be declared at method levels. Misc 

If you do this, you would need the check. This approach would also speed up your code (less checks in loop) and I think it might also be more readable. You could probably remove the case with some restructuring, but I think the resulting code would be worse than what you have. Misc 

I would say "Main" is acceptable if it doesn't to anything except start the app; it doesn't contain any app logic itself. I think for your game this is pretty much true, but I would probably extract the init stuff into a MainGUI or ContainerGUI class (because it will most likely grow soon, eg by adding a menu, customizable view, etc). 

Yes, you really should move away from . It's deprecated for quite a while and not secure. And there isn't that big a learning curve. Once you actually parse user input instead of having hardcoded values for testing, your code will be open to SQL injection. You shouldn't put variable data directly into queries, but use prepared statements instead, either with PDO or with mysqli. Includes 

No and no. Non-Random Token: Login as anyone The only data you store in your cookie is the username*. But usernames are generally not considered secret, and are relatively easy to obtain. Because of this, an attacker can just calculate themselves and log in as anyone. You definitely always want at least partly random data in your cookie. 

And I removed from . Now the reset works without reloading each time. CSS I would put this in an external css file, and format it properly (each attribute on its own line, etc.). If you care about performance, minify with a tool later instead of writing harder to read code. 

[*] In India it seems to be written eg as , which doesn't use 3, but which also isn't a fixed length. 

Generics Since you asked: Sure, generics would be nice. Right now, your would be better named , as it only accepts integers. Mutable 

Well, assuming is safe, it should be safe, because you will only ever have strings containing numbers in your query. But what is also safe are prepared statements, and they are well tested over the years. And prepared statements don't have the downsides of your solution: 

Then, check at the beginning if the input of the users is equal, return "tie" if it is. If it is not, find the appropriate array for user1 (I would use a switch instead of many if-else) and see if it contains the choice of user2. In this case, extending the game is easier. New item? Add a new array and a new switch option, and add the item to some of the other arrays. In case you really want to extend the game (I mean like adding a couple dozen or more options), this approach too would become somewhat annoying. In that case you might want to read up on graph theory, as this is basically just a directed graph. I think that an adjacency matrix might work well then. For rock, paper, scissor, the matrix would look like this (it contains duplicate information, but I don't think that memory is a concern and removing it would make it harder to use): 

if x and y are at the border, return 3 initial neighbor count: 8 Check if x is at the border, if so, subtract 3 Check if y is at the border, if so, subtract 3 return initial neighbor count 

I don't think so. Your code isn't deeply nested, and the if-else that exist mostly exist for a good reason. In some cases you could return directly instead of checking and returning true, eg this: 

loop Your loop would work much better as a loop, as you are iterating over anyways (you would get rid of two extra lines of code, and the code would be clearer as well). raw list It's always a bit ugly to have raw types, so could be . Naming 

Arrays and Lists I noted this last time, but as you still convert lists to arrays, I think maybe you don't know how to handle lists on their own? Generally - if you don't have a good reason to do it differently-, you should stick with the collection you have. If it's an array, handle the array. If it's a list, handle the list. Eg this: 

Yes, that would probably be a good idea. In you internally use an , I'm guessing because it's a lot easier to use than an array (which is true, a is the correct collection type here). But then you transform it to an array, which isn't really needed. Returning lists instead of arrays is perfectly acceptable in Java, and is in fact used in most cases (an exception might be made for fixed length arrays in performance critical code, eg coordinates). So just change your signature from to , and then use a in as well. Misc 

Note that there are contexts in which HTML encoding may not be enough to prevent XSS. Improving your Code Why are you using different cleaning functions for array values and non-array values in ? It doesn't make any sense to treat these differently. For that matter, if you would use the same functions, you would have duplication in your code, which should be removed (either by using recursion or by extracting the cleaning to a separate function). Also: 

For now, I can't help you with performance, but maybe with readability. Raw Types You shouldn't just declare raw lists, because it makes the code hard to read, and also error-prone. 

Not really. You basically wrapped your function up in a class. It doesn't hurt, but it doesn't provide any benefits either. 

They are not. All three scripts are vulnerable to directory traversal. This is what an attacker can achieve with each script: 

Maybe. You didn't post where and come from, if they are user-supplied you may be vulnerable. Also, you should switch to using prepared statements. Escaping is a weaker form of protection against SQL injections. Returning early You can avoid nested if statements by reversing it and returning early: 

Each of the method calls is optional, and it's clear for the reader what the query will return, without looking up the documentation for each method. 

Also note that you probably want to remove a trailing slash from the first to avoid getting empty values. 

Further Simplify if statements You could also save some comments and an if-clause if you save the conditions in variables: 

The improvement to your previous question is that you are now successfully encapsulating mysqli, instead of exposing part of it by returning mysqli related objects. I still stand by my previous answer though: Your function still doesn't make it easier to write queries, and it abstracts away essential functionalities of mysqli (ie prepared statements). With your function, your code looks like this (I cleaned it up a bit): 

raw types Try to avoid raw types. should be , same for function returns and method arguments. Bug If I do this: 

So there are many methods to solve this without goto. I like the third best, but choose the one you like. Misc 

Always after a redirect as clients do not have to follow them, meaning that the code below a redirect will still be executed. 

Structure Your should be the only part of your code that is aware of how the ini file looks internally. That's the whole point of the interface: With it, you can parse different kinds of files (or even retrieve the data from something else). If the file structure changes at some point, you should only ever have to change your class, nothing else. But right now, that isn't the case. Your also needs to know how your file looks. To fix this, I would add explicit getters instead of the generic getter you have right now. So you should add , , etc to your class. This has the added benefit that you can validate them (see that they exist, etc) as soon as you parse the file, instead of when you are using the credentials. Then of course your naming doesn't make that much sense anymore. So I would rename to and to . You might also think about passing the names of keys to it as well instead of hardcoding them inside the parser. If you do all this, your class is decoupled from the ini file itself, and also, your gets more meaning (before, it was more or less only a wrapper for ). and continue If possible, I would avoid . In some cases it makes sense, but most of the time, it makes code harder to read. Your code could look like this: