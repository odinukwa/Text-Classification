Here are the drivers and the description of how to install the screen given by Kumantech. I got it working, and touch screen functionality also worked. I actually did this with combination with other tutorial. Issues I had was that the Pi froze on next reboot, but I'm not sure if error was mine, or just weird faith. I'll be playing around with this now and I'll post my further results. 

I have Ubuntu Mate installed on RPi3 with official 7" screen. I was changing screen brightness through Mate's GUI where I dragged the bar too much towards the dark side... Resulting BLACK LCD!!! How can I revert this? I can remove the microSD and mount it, but not sure where settings are stores (directory /sys is empty when I mount through Windows). Any ideas? 

I wonder if it's possible to connect 2 power supplies to one Raspberry Pi 3. One used my Pi itself (GPU/CPU/etc) and other to power USB devices such as USB web camera and USB high-gain WiFi. This is one scenario, other is running Pi 3 with 7 inch official screen and some USB components. Either way, I'm seeing that Pi is running at power-saving mode and I would like to prevent it. 

I'm trying to to retrieve most recent master version from the Hexxeh/rpi-firmware which is used by Ubuntu Mate 16.04. The update script exist on this page but I'm unable to fishout how they check if their version is newer than my local one. What repo file, or what CLI/Bash command cold I use to get the newest available version online? EDIT: I could do but is there cleaner way? 

I'm just using this individually for a fun project so I don't really mind setting permissions to 777. With my settings like so in : 

I'm a bit lost at this point. It'd really make this project easier if I could type on the RPi and connect to the internet at the same time :P Any other ideas? 

Start Edit I'm connecting the Pi directly to my PC with an ethernet cable. End Edit I'm trying to share a folder that's on a Raspberry Pi (running Jessie Lite) with my laptop (running Windows 7) so I can use Node.js to write a simple text file to it. I set up samba on the Pi in the following way: 

I'm kind of stuck right now. This needs to be user friendly. This app will be packaged and distributed to several people who don't know how to navigate a file system, let alone set up a Pi to work on their personal WiFi and SSH in. I need a way to transfer the JSON data file from their PC to the Pi. The solution: 

Even though the Pi's shared folder shows up for a few seconds (during which I call the above Node.js script), I still get that error. Anyone know why Windows 7 is dropping the Pi's shared folder? Is that what's causing Node.js to have issues writing files to the Pi, even though the Pi appears to connect for a brief moment? 

This being a model A, I can't plug in the USB keyboard and the USB wifi dongle at the same time. My strategy is to , remove the keyboard USB, and replace it with the wifi dongle. When the RPi boots up, I can see on the screen that it recognizes the wifi dongle and assigns the RPi the static IP I chose. I then go to my Windows laptop, open up , and the RPi static IP address. Success! However, when I open up PUTTY and try to SSH into the RPi at that IP address on Port 22, I get the dreaded "Connection refused" error. Things I've tried to get rid of "Connection refused": 

Once rebooted, the WiFi connection and SSH sessions should be much more stable; you shouldn't need to do any additional work, like adding cron tasks that ping servers or anything like that. 

It seems that the only concern is that your power supply, if it's not a decent, reliable supply capable of 2A+ of clean output power, might not be able to power the Pi sufficiently, resulting in crashes or frequent rainbows. See, specifically: 

FYI you can at least get faster speeds through the Pi (in terms of raw bandwidth), using a USB 3.0 Gigabit network adapter; the USB 2.0 bus still hampers the ability to fully utilize gigabit networking, but in my testing, I was able to reliably get ~222 Mbps over the USB 3.0 adapter. A comparison of the different networking options I have available: 

But some of the people mentioning the setting warn against setting this value unless you absolutely need to... my question is, why is that? Is something else disabled or changed about the Pi that would increase a risk of damaging the Pi or anything powered over USB, or is it more a general warning to scare off people who don't know what they're doing and might not have a decent power supply to the Pi? 

That was from the thread B+ and max_usb_current, which I found after posting the same question here to Any negative impact with setting ?. 

I've been searching around for more information on the configuration directive , trying to find out exactly what happens when that is set to , but it's hard to find any official documentation. I know the following: 

I reboot the Pi, login, then connect with an ethernet cord to my Windows 7 machine. I can see the Pi () under Networks > Computers. I also see it pop up when I type into command prompt. However, after a few seconds I notice that, in the "Network and Connections" dialog, the "Local Area Connection" adapter drops the connection. I have to disable and re-enable "Local Area Connection" again. After being re-enabled, it says "Identifying..." and I again see the Pi on the "Networks" tab under "Computers", next to my PC. But then "Local Area Connection" switches to "Unidentified network" and the Pi disappears. Process repeats. Because of all this I can't access the Pi to write files to it. For example, in Node.js, I try: 

I'm using a Pi to drive a Fadecandy board to light up a varying-length string of RGB LEDs in different, pulsating colors. I've been successful, however one snag I ran into along the way was programmatically defining the LED colors in RGB. I copied the Fadecandy example program measuringstick.py (which makes every 10th LED green and the rest white) and tweaked it to create a rainbow of colors instead. Wrote the program into /etc/rc.local, rebooted the Pi, and noticed that my colors were completely off! After a half hour of messing around, I realized that defining the colors in GRB instead of RGB gave the correct result. In other words, if I want an LED to be bright red I have to define its color as (0,255,0) instead of (255,0,0). Is this a normal thing with LED pixels? All of the example code was written in RGB, so I assume that GRB is not normal. Can someone explain to me what's going on? I'm more curious than anything at this point. (Sorry I don't have any code to show you. My collaborator has the lights/Pi with him today)