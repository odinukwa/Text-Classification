Type-C connector has a mandatory requirement to keep VBUS off until a cable with proper CC termination is plugged in (device-type cable, or device). This requires a high-side power switch, which is cost-prohibitive for junk-style off-the-shelf Type-A hubs, where they simply tie all VBUS to input cable, and call it a day. This is USB-legal for Type-A, but you can't risk power conflicts if symmetrical Type-C cable is used. A Type-C connector needs two extra pairs of high-speed traces, and a pair of CC signals, to determine polarity of plugged cable and properly re-direct USB signals. If to use the regular USB 3.0 silicon controller ICs, the Type-C requires extra SS multiplexor, and a control IC that looks for CC-pins state, and enables VBUS when proper signaling is detected. This is quite a lot of dollars involved. If a dedicated USB3.1 hub controller is used (and several manufacturers announced plans to do Type-C directly), each port would require 7 mandatory pins to be allocated on IC package, four for extra SS interface, two for CC, and one for VBUS control. This would about to double the pin count on controller IC, and will take a lot or real estate on PCB. Both factors add substantial cost. 

On a PC mainboard, USB ports are powered from +5VSB (standby voltage) of the system PSU. This particular pwer rail is not powwrful, typicaly 2A. If the standby voltage is flaky, the computer will reset/reboot randomly, since the power-button logic is powered from the same standby voltage. So you need first to check if your PSU can supply reasonable power. 

First, make sure you have the 4/8-pin EATX12V connected. Without this connection the board won't start. Second, check if you have +5V_STBY voltage at 5 V, 

You have the calculations wrong. The bit rate for USB 3.0 SuperSpeed Gen1 interface is 5Gbits/s. Each byte takes 10 unit intervals to transmit, because all data are 8b/10b encoded. So the highest possible theoretical throughput of USB3.0 is 500 MBytes/s. Practically each SS link segment has several overheads. One is the link management overhead, when both directions must periodically transmit LUP and LDN packets (link up and link down). Then there are ITP - Asynchronous Timestamp Packets, equivalents of SOF in USB2. Then there are flow control packets, like credit exchanges and LGOODs. Then there is an physical-layer protocol overhead (IN-OUT transaction packets etc,). Cypress has reported the throughput up to 450 Mbytes/s in artificial test environment, without application-level overhead. So, the mileage can vary. And yes, many laptop docking stations use a single USB3.0 port to provide decent video resolutions to two-three monitors over USB-HDMI converters. See Dell D3100 for example. 

I would strongly advise not to use any unpowered USB hubs (officially called "bus-powered hubs", and sometimes advertised as "mobile hubs") if you don't want communication/connect surprises, for the following reasons: 

When a USB port with attached LS keyboard is in SUSPEND, the bus is in idle LS state, D- is high, no activity. To wake up, the system expects the wake-up signaling sequence - "K-state" should be generated by keyboard (in LS mode the K-state is D+ = high, opposite to FS/HS bus states). When you unplug the keyboard while in suspend state, the port hardware logic will sense "USB disconnect" (SE0 state), and the port will move into "disabled" state. This will cancel the wake-up mode. To make the computer to wake up in this situation, you need to enable something like "wake-up on hot plug". I am not sure if this function is available. 

Get an old USB cable, cut it open, and put a 10-ohm load between black and red wire. The voltage should remain at 5V +-0.5V To check if the USB controller any good, boot into BIOS configuration state, and attach a USB keyboard. If it works in parallel with your PS/2 keyboard, then at least UHCI root hub is working. Also attach a USB pen drive, formatted as FAT32 on a Windows machine, not with some Linux stuff . It also should appear in some BIOS area, as a bootable device or something. If this works, the problem is in your Linux misconfiguration. Try to boot from a standalone CD Knoppix, or from Hiren's Boot CD. 

Formally, the microUSB connector comes in four incarnations: cable uA, cable uB, receptacle uB, and receptacle uAB. These connectors have one extra ID pin. If a device has only one microUSB connector, it should be able to change its functionality from device to host, formerly called "OTG", nowadays it is Dual-Role Port. In theory such device must have the uAB receptacle, meaning that it can fit to both uA (squared) and uB (runded) cable connectors. If the cable is "rounded" uB type, it has the ID pin floating, and the port assumes a role of USB device (Media player usually), and will take the USB VBUS power for charging itself. If the cable is uA type (square shaped), it has the ID pin grounded. The device must switch its role to host mode, and instead of consuming VBUS, it must supply it to downstream devices as pen drives, hubs, and keyboards. The Lenovo Yoga Book, from pictures, has the micro-B receptacle. This means that officially it was not designed for users to be a host, since formally the uA cable will not fit. However, informally the industry has invented a trick called "host adapter cable"". This is a piece of short cable with uB connector on one end, and Type-A receptacle on the other. However, against USB OTG specifications, the ID pin in this cable is grounded as in uA connector. So, by plugging this adapter cable into Yoga, the ID pin will be grounded, and a OTG compliant device should be able to become a host and recognize and connect to USB flash derive. This functionality depends on manufacturer's ideas and software/firmware of the tablet. It is very likely that Yoga can do this. Now, the ability to boot from USB flash is again up to the manufacturer, how they design the BIOS/UEFI firmware, and what options do they provide to end users. There could be no options, to prevent sophisticated users to install different OS and screw up their secure internal partitions, so you are here on your own. 

In order to get full charge over Type-A to C cable, the Type-C end of cable must provide 10 kOhm pull-up inside its overmold. Then a Type-C compliant device/phone should be able to take all 3 A. However, this would make this nice short A-C cable illegal, because if someone will use this cable with a regular PC, it might create hazardous overcurrent condition. Since the Nexus 5X doesn't support QC (no v2.0, nor v3.0), and the QC3.0 port in the QC charger likely doesn't have an alternative BC 1.2 protocol, your phone will rely on CC pin pull-up in the Type-C cable overmold. If the particular QC charger doesn't police the QC protocol and will output the minimum (5 V 3 A), then your phone will take the same current as from any other port. Therefore, I expect that there will be no difference which Type-A port to use, unless the LG phone/charger uses full-blown Power Delivery protocol. In the latter case your "dual charger" won't work at all, maybe at 500 mA. To get a practical sense of what difference do you have, I recommend to invest in a USB power meter/tester like this one, with proper voltage range.