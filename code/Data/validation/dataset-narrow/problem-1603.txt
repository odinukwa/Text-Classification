I'm assuming you have a Pi2 (40 pin expansion header). The linked Adafruit LCD is I2C based so only uses two gpios (SDA/SCL). That means you have a choice of four gpios for hardware PWM (gpios 12/13/18/19) and any spare gpio for the 1-wire bus (1-wire used to be limited to gpio 4, that is no longer the case). Although there are four hardware PWM gpios there are only two hardware PWM channels (12/18 share one channel, 13/19 the other). 

You may not be doing anything wrong. Perhaps you just have a poor wireless system. To debug have a look at dmesg (from a command prompt type dmesg). It normally show some wireless dongle diagnostics. The output of iwconfig may be of interest. The exact dongle type (ID) as reported by lsusb may be of interest. 

If a LED works from a gpio the LED will also work from the 3V3 rail and the 5V rail. Without looking over your shoulder it's hard to know what you are doing wrong. If you have wiringPi installed I suggest you use its pintest utility. That should be run with nothing connected to the gpios. Alternatively there is my gpio test which requires my pigpio library. It is slightly more thorough and again nothing should be connected to the gpios. 

CAUTION If you power the receiever with greater than 3V3 (as you would probaly want to do) then use a voltage divider to cut the receiver data line from Vcc to 3V3 before connecting to a Pi GPIO to read. 

One option is simply to store your Python scripts on a network drive. For instance I keep all my code on a laptop (suitably backed up) under a directory called code. I export the directory to the network using NFS. On the Pi the laptop NFS directory is mapped to /code. That allows me to develop on the laptop (or Pi) and run the script on the Pi simply by ssh'ing to the Pi and using /code/script.py. Generally I find that Python reveals enough about my errors with its backtrace for me not to need additional debugging tools. 

This isn't really my field (communication between Pi and Arduino) but I have done a little so I'll give an answer anyway. RF comms are not noted for their high reliability so messages are usually wrapped in a protocol including a checksum to guarantee integrity. One of the popular messaging protocols used on Arduinos is Virtual Wire. I have implemented Virtual Wire for the Raspberry Pi in the form of a Python module. See $URL$ The module supports sending and receiving. As goldilocks pointed out with a single transmitter/receiver pair you will have to decide whether the Pi or the Arduino is the sender. That rather begs the question of how you will get any response. 

How do you use RPIO on a Pi Zero, Pi2, or Pi3? When I run an RPIO script I get a Python error message such as 

Just buy a motor driver board, either a L298N based one or a L9110S based one. They can be bought off eBay for a couple of GBP (British pounds). They will let you drive a pair of DC motors forwards and backwards and control the speed (using Pi generated PWM). 

Using sockets would be the standard network solution. Use TCP/IP if you want guaranteed in-order delivery or UDP if that isn't a concern. I've used TCP/IP to deliver over 100,000 12 byte messages per second from Pis. 

An LM35 is not a 1-wire sensor. Its output is an analogue voltage proportional to the temperature. The Pi has no analogue inputs or outputs. You will need to use an ADC to read the sensor. 

I suggest you always add raspberry pi to your search terms. E.g. if you are interested in temperature sensors search for "raspberry pi temperature sensors". That should give you a short list of potential sensors. Then when you have a sensor in mind also include raspberry pi. E.g.if you are interested in the DHT22 temperature sensor search for "raspberry pi DHT22". That should give you a list of implementations on the Pi. Of course if you are interested in a particular programming language or library also include that in the search terms. 

Highly unlikely. The DS18B20 requires being able to do timings of the order of microseconds. Currently Windows IoT on the Pi seems to have a delay granularity of a millisecond. 

Pin 1 of the expansion header is closest to the SD card. As far as I am aware this holds for all models (a possible exception is the compute module). 

The answer is you use the CGI (Common Gateway Interface). The precise details of how you would use CGI depends on the script you want to use on the Pi. There is a pigpio CGI example for my pigpio library in these Python examples. There is a somewhat simpler method not involving pigpio or Apache if you run your own Python server on the Raspberry Pi. There is example code called Easy as Pi Server at these Miscellanous examples. You'd need to look through the code example comments to see how it should be used. 

You will also need pin headers, solder, and a soldering iron to connect the pin headers to the breakout board. In addition you will need a bootable SD card for the Pi3B. Apart from those provisos your list looks complete. 

You control stepper motors with stepper motor driver boards. You need to find an appropriate driver board for your stepper motor. You also need to make sure that any driver board you choose can be controlled by 3V3 GPIO. 

I copied the script to an original Pi B connected pin 18 to pin 10 (GPIO 24 to GPIO 15 UART RXD). set the UART baud rate to 9600 (stty -F /dev/ttyAMA0 9600) 

No, RPIO.GPIO is not installed by default in the Raspbian or raspberrypi.org images. You will need to install from the github. EDITED TO ADD If you have access to the internet just download $URL$ and copy it to the Pi SD card. If you have to use Windows put the SD card in a card reader. The boot partition should be visible. Copy master.zip to the boot partition (normal copy) then place the card back into the Pi and reboot. Copy master.zip from /boot to where you want it. Remember to delete the copy in /boot to save space. Follow the github instructions to install RPIO. Note that installation requires a few not installed by default packages such as python-dev. 

Pin# is the physical pin on the expansion header. NAME is either the voltage rail connected to that pin or the GPIO connected to that pin. RPIO.GPIO uses the Broadcom numbering system. The different GPIO have different specializations and this is documented by Broadcom GPIO number in the Broadcom documentation (BCM2835 ARM Peripherals) An alternative to RPIO.GPIO is my pigpio which is a C library but may be accessed through a Python module. I would use waves to construct any repeating waveform. Have a look through these general Python examples, some will use waves. Here is a pigs example of generating the (comment) requested waveform. 

As answered earlier the problem is with needing root privileges to access /dev/mem. Programs which manipulate the gpios need to use /dev/mem as the gpios are memory mapped. The RPi and RPIO Python packages access /dev/mem and require root privileges to run. The pigpio Python module works differently. It does not require you to use root privileges to run Python. It communicates with a separate daemon process which may be loaded at system start-up. The daemon alone needs to be run with /dev/mem privileges. 

NOTE: You MUST use GPIO numbers not physical pin numbers. There is no user GPIO36 so I assume you mean pin 36 on the expansion header which is GPIO16. See for details. 

The following untested code may work. Untested as I don't have a device which inverts the logic. Change the baud rate to suit. 

On Pis with the 40 pin expansion header GPIO 35 is connected to a 5V supply monitoring system (it is also the GPIO used to control the power LED on the boards with a power LED fitted). It will read high (1) if the supply is greater than 4.65V and low (0) otherwise. See rasberrypi.org forum post. 

Any security system you put in place can be circumvented. All that is typically needed is access to a debugger. The only way to stop people using the software without paying is to make the software valueless. It may be marginally better to grab the serial number from the mailbox interface rather than /proc/cpuinfo, as you say /proc/cpuinfo can be spoofed. The mailbox interface may be slightly harder to spoof. $URL$ 

You could bit bang I2C on any spare gpios, so you could use the RTC on other gpios. However I expect you want the RTC module to automatically assign the time to the Pi when it is booted. To do that it must be connected to I2C bus 1 (gpios 2 and 3 on pins 3 and 5). I2C is a bus so more than one device may be connected at a time as long as there is no conflicting gpio usage. You would need to ensure that the z-wave module either does not use gpios 2 and 3 or uses them as the I2C bus. Your next problem would be connecting an RTC to the gpios. I suppose you could solder wires to the underside of the pins on the bottom of the board so leaving the top free for the z-wave module. 

Here is a Python script to read the MAX6675. You need to edit the script to define the SPI set-up you are using from one of the following. 

I'll assume your question is literal. You can't execute a device as a program. If you want to see what is arriving on /dev/ttyS0 do 

You need to carefully check the voltage. You can measure the voltage between pin 2 (5V) and pin 6 (ground). It should read around 5V. See $URL$ 

Running Python as root is a VERY BAD IDEA but used to be necessary with some Python GPIO modules. It should not be necessary anymore as long as you are using a reasonably up to date Raspbian system. Make sure your user (assumed to be pi) is a member of the gpio group. 

Servos/ESCs need precisely timed pulses in the range 1ms to 2ms. If the pulses are not precise you have a condition called jitter where servos will twitch and ESCs will speed up/down at random. I suggest you use a module which provides hardware timed pulses such as servoblaster, RPIO.GPIO (note NOT RPi.GPIO) or my own pigpio which is a C library but has a Python wrapper. Try giving the ESCs a 2ms pulse for a couple of seconds, then a 1ms pulse for a couple of seconds. Then it should accept pulses in the range 1 to 2 ms to control the speed. For pigpio you can do this from the command line 

The device is not properly connected to the bus. The device is broken. One of the Pi's SDA or SCL GPIO is bust. One of the Pi's SDA or SCL GPIO is not in the correct mode. 

You will have to write your own code to meet those requirements. pigpio will read the serial data and place it into a buffer. It does not time-stamp each data byte. Apart from that requirement the rest you can do with pigpio and is just a standard programming exercise (with the possible exception of USB to laptop as it is not clear what you mean by that). 

wiringPi - a system of "logical" numbering based on the numbers used on the first Pi schematics and extended to later models. Generally this numbered GPIO from 1 upwards in the order they were likely to be used. Broadcom - the GPIO numbers as used by the SoC manufacturer and the hardware. These are apparently randomly ordered in the region 0 to 31. Pin numbers - a system which numbers the GPIO by the physical pin they are attached to on the expansion header. 

The Pi's GPIO are 3V3. There is no authoritative source for voltage levels. For the likely voltage levels see $URL$ A GPIO can output considerably more than 16mA. Whether it is safe to do so for any length of time I don't know. I think I have measured sourcing and sinking about 40 mA from a single GPIO, but I'll need to check my figures. Yes, you can power LEDS directly from the 3V3 GPIO. Best to use a resistor to avoid the risk of burning the LED out. 

The only doubt in my mind is in how you plan to drive the LEDs. RGB LEDs require 3 GPIO per LED so you need a total of 6x6x3 or 108. The Pi only has 27 usable GPIO. So you will need an expansion port like the popular MCP23017, each one of which can drive 16 GPIO. You can connect 8 to the Pi's I2C bus to provide 128 GPIO. Alternatively you could use shift registers such as 74HC595N to achieve the same affect. With both of these methods you will have to use solid colours, e.g. R, G, B, RG, RB, GB, RGB. PWM to vary the brightness isn't really practical using these expansion chips from the Pi. 

For full details Actually 9600-8-N-1 is the default. The presence of /dev/ttyUSB0 implies the device is ready. Unless the device supports handshake signals that's the best you can do without actually trying to read/write to the device. 

By default pigpio samples GPIO 0-31 at a rate of 200 thousand times per second (once every 5µs). You can register to be alerted when 

You could just ignore the warning. Alternatively I thought the warning told you what to do if you don't want the warning printed. Alternatively call the cleanup() method before exiting the script. Alternatively see which GPIO are exported. 

It will be safe as long as the powerbank provides a voltage in the accepted range of 5V +/- 0.25V. You will need to take additional precautions if the system is exposed to rain etc. 

ESCs and servos need precisely timed pulses at 50Hz+. Generally each pulse will be between 1000µs to 2000µs in length. Neither wiringPi (unless using the hardware PWM function) nor RPi.GPIO are suitable for driving ESCs/Servos with any degree of accuracy. They may be ok if your application doesn't mind a lot of jitter (software timed pulses will vary a lot in time). If you are doing any serious work you need to be using one of the modules which provides hardware (DMA) timed pulses, or use one or both of the hardware PWM channels, or use external hardware. Servoblaster, RPIO.GPIO (not RPi.GPIO), and my pigpio, all provide DMA timed PWM. 

You can not control individually addressable LED strips with PWM. You need to send a highly precise signal containing RGB values down the strip. The protocol used is determined by the model of LED strip. 

I'm not sure. You can use sched_setaffinity to limit a process to a single core. You can also use sched_setaffinity to tell another process not to use that core. 

I'm not sure what is wrong with your code (apart from the test for #0101 is wrong). I've converted it to pigpio as it's much easier to test. 

Yes, you can determine the current mode of a gpio. You'd have to search the wiringPi documentation and source code to see if a method is implemented by wiringPi. My pigpio library provides the C I/F gpioGetMode function as well as Python and command line methods. For example code see Minimal gpio access. 

I2C is not the same as SMBus. Try using the SMBus read word command rather than two read byte commands. You may need to swap the bytes in the word when received. That will be closer to what you are doing on the Arduino. 

I tend to develop code on a laptop but have one or two open SSH sessions to the Pi. I keep the code on the laptops hard drive. The code directory is exported as /code via NFS to the Pi. The cycle is usually edit, save, cross-compile on top right window, download to the Pi, run in the bottom right window. Or if it's a scripting language like Python or bash then just run in the bottom right window. 

You need to find out what, if anything, is blocking. In my experience Linux driver I2C problems usually return IO error 5. The pigpio i2c* functions use the Linux I2C driver. The pigpio bb_i2c* functions use bit banging and there is a 10ms timeout per bit (which I will probably make considerably larger). 

If you want to do this in you need to add the information immediately after the eth0 declaration, e.g. 

You can't afford to waste time in an interrupt service routine. Especially with a protocol like I2C or SPI as a slave where you must respond at the master's clock rate. Either remove or at the very least move it to after the 

Input mode is for reading from the pin. Output mode is for writing 0 or 1 to the pin. PWM mode is for writing 0 and 1 to the pin in a rapid sequence. The pin will be cycled between on and off many time a second. For each cycle the pin will be on (1) for a time and then off (0) for a time. The proportion of time on for each cycle is called the dutycycle. PWM output may be used to control the brightness of LEDs and the speed of motors. In effect you can think of PWM as digitally changing the voltage. Full on (100% dutycycle) give 3.3V at the pin. Full off (0% dutycycle) gives 0V at the pin and half on (50% dutycycle) gives 1.65V at the pin. This is a VERY SIMPLISTIC description. Research on line for a more accurate description.