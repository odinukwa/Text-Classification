There are many different protocols that can be used for 2 and 3, I have personally tended to use openvpn but others may have their own preferences. 

The firewall inspects packets and uses the information in their headers (and sometimes their payloads) to keep track of connections. This information can be used to allow only incoming packets that relate to an existing connection. It can also be used for network address translation to hide a large numper of clients behind a single public IP. 

The source of the wikipedia list seems to be primerally $URL$ with the occasional line updated based on protocol specific references. It looks like for older allocations both TCP and UDP port numbers were allocated to a protocol even if the protocol only actually used one or the other.For example FTP has entries in the IANA table for both TCP and UDP. These entries both reference RFC 959 but RFC 959 has no mention of UDP. Generally the go-to resource for finding out what underlying protocols an application protocol actually uses would be the standard defining the protocol. Some protocols can use either TCP or UDP either at user choice (for example NFS) or depending on the details of the request (for example DNS) 

The headline interface speed may or may not accurately reflect the actual speed of the interface. For Ethernet controllers in desktops and servers it's probably pretty good, for VMs, WiFi etc it's likely to be wildly inaccurate. Related to 1 some things may not be counted in the traffic counters but may still take up capacity on the link. This may limit your accuracy. On a shared medium such as wifi or really old Ethernet networks it won't tell you about traffic that is on the medium but not flowing to or from your system. It only tells you about available capacity on the link from the local machine to the nearest switch. It will not give you any visibility for conditions deeper in the network. 

We are getting much closer to the physical limits of twisted pair media nowadays. I doubt you will see the massive increases on the same cable we saw in the transition from dialup to DSL and the transition from 100BASE-TX to 1000BASE-T. We might see some more incremental improvements. There is talk about new standards for speeds of 2.5 and 5 gigabit per second over twisted pair (google for 2.5 gigabit ethernet to find lots of articles about it) . $URL$ indicates that there is an intention to support 2.5 gigabit and maybe 5 gigabit on 100 meters of cat5e. 

Use a home/small buisness router to provide routing/NAT/firewalling between your new network and the existing network. If you do this make sure the router you buy uses an Ethernet port on the WAN side. Have one of your servers connected to both your new network and the existing network and have it provide routing/NAT/firewalling. 

First some background: The first thing to note is that there is a distinction between VLANs and subnets. A VLAN is a group of Ethernet devices that are isolated at layer 2 from other groups of Ethernet devices on the same physical infrastructure. A subnet is a block of IP addresses defined by the subnet mask where the devices within the block know they can reach each other without going via a gateway/router. Often there is a one to one mapping between subnets and VLANs but there doesn't have to be. There are some caveats with running multiple subnets on the same VLAN but for the most part it's workable. As a general rule if more than one VLAN needs to pass through a switch then that switch should support VLANs. IF a router is going to connect two VLANs on the same physical infrastructure then either the router needs to support VLANs or it needs to have a seperate connection to the switch for each VLAN. 

There are two main types of connection between ISPs (and few in between variants). A peering link is a link between two ISPs to allow the (direct and indirect) customers of one ISP to communicate with the (direct and indirect) customers of the other ISP. Depending on the relative market power of the ISPs there may or may not be payment involved. A transit link is a link where one (usually larger) ISP provides another (usually smaller) ISP with connectivity to the internet in general. A good ISP will try to keep their internal links and their peering and transit links to other providers uncongested most of the time. A bad ISP may not. At the top of the pile are transit free ISPs. These ISPs buy no transit and rely entirely on peering. 

Multiple public IP addresses (and a router that can handle those addresses appropriately). A http proxy, your proxy accepts the connection, terminates the ssl/tls and forwards the decrypted traffic (possibly re-encrypting it) based on the http headers. A SNI proxy, your proxy accepts the connection but does not decrypt it, it uses the SNI extension in the TLS headers to decide where to forward it to. Downside here is that this only works with modern clients. 

I expect you need to use the redirect target in ebtables to pull the packets out of the bridge and into IP routing so that the NAT machinary can see them. But I haven't actually tried it so I don't know if it will work or what if any gotchas there are. 

Strictly speaking it only has to be unique on the local network. The way this was supposed to be ensured was by making the default MAC address of devices globally unique. This was acheived through splitting the address into a vendor part and then a part that could be assigned by the vendor. In practice some vendors are sloppier about this than others. Most VM software and at least one hardware vendor assign addresses randomly from within a vendor ID (which may or may not actually belong to the vendor in question) and just work on the assumption that the number of devices on a network will be small enough that MAC collisions are unlikely. 

The key issue to consider with your current setup is that the devices on different subnets are not really isolated from each other. Sure IPv4 unicast traffic will by default go by the router but IPv4 unicast traffic is far from the only type of traffic that can flow over an ethernet network and even the IPv4 unicast traffic can be made to flow directly with some minor tweaks to the routing table on the hosts. VLANs OTOH isolate the hosts on different VLANS from each other so that the only way they can communicate is via the router/firewall. 

I think this is a case of the same pair of words being used for two different things in two different contexts. "port forwarding" in the context of NAT routers is a rule added to the NAT implementation such that incoming connections on a given external IP and port are mapped to a given internal IP and port (often but not always external and internal ports are the same). "port forwarding" in the context of ssh is a system that forwards application-data from a TCP connection on the client side to a TCP connection on the server side over the ssh connection. Unfortunately rather than making a clear distinction between the two meanings the wikipedia article you linked to confusingly mixes them up. 

Afaict there are several layers. First there are individual strands of fiber, usually in pairs one for each direction. Afaict the number of strands on long distance undersea cables is relatively small compared to terrestrial or short distance undersea cables due to the need for optical amplification. Depending on the design of the cable system only a subset of the strands may be brought ashore at each landing. On top of that you have WDM. The strands are split up into wavelengths which may be routed differently at the landing sites (including being sent back under the sea). And on top of that you have digital data communications which again give many options for routing data. 

The TCP checksum is 16 bits and a port number is also 16 bits. So if just one port number is missing you have a reasonable chance of finding the port number by brute force but you may end up with more than one possible answer. If both port numbers are missing then this isn't going to work. 

There are basically two approaches to this. One is the firewalling aproach. You create explicit rules to restrict the traffic, for example on a Linux router you would create rules using iptables. The other is the reverse path filtering approach discussed in RFC3704. This talks about three filtering modes. Strict, loose and feasible. 

So you are in a situation where for whatever reason people sometimes plug desktop switches into access ports. In an ideal world you wouldn't have this but in practice it can be difficult. Sometimes rooms simply do not have enough outlets for the amount of equipment that is in them. Adding more wiring and/or cabinets so you can replace the desktop switches with properly secured and managed ones can cost a lot of money and time. I would say the first thing to do is research. Write a script to figure out how many MAC addresses are behind each port. That will let you get an idea of the scale of the problem. It may also be an idea to run the script multiple times so you can figure out if the unknown switches are remaining static or are moving around. Probablly a reasonable compromise is to limit ports by default to a small number of MAC addresses (maybe 7). This should quickly shut down any loops while not blocking small unmanaged switches on desktops. 

No, the tier 3 ISP may pass the traffic to one of it's own customers or it may pass it upstream to a tier 2 who manages to route it over a peering link or even route it to a customer. * See for example the HE/Cogent fiasco on IPv6. 

What interface the packet should be sent through. What the IP address of the next hop is. If no next hop is specified in the routing table the IP of the destination is used as the next hop. 

IP addresses and port numbers primerally. Sometimes application payloads may also be inspected/translated (for example this is needed to make active mode FTP work). 

There are basically two approaches. One is to make each datacenter (or cluster of datacenters) a separate "network" with it's own IP space (which may be either allocated by a provider or provider independent) and it's own routing and it's own deals (transit and possibly peering) with networks who have a presence in the datacenter's locality. Traffic between the datacenters in different parts of the world would then go via one or more IP transit providers. The other approach is to rent circuits (which may be dedicated fiber, WDM wavelengths, MPLS links or whatever) between your datacenters and build a network which appears to the rest of the internet as one network. Traffic between your own hosts in different datacenters never leaves your network. Traffic to hosts elsewhere on the internet will obviously flow in and out of your network but possibly not at the same location where it is generated/consumed. This gives you more flexibility on how traffic is routed and makes it easier to move IPs around to different geographical locations but it can work out more expensive, especially if you are small. I'm pretty sure google takes the second approach. 

This is somewhat misleading, both TCP and UDP sockets can exist both with and without a remote IP/port, though only UDP sockets can pass data without one. 

Run a new subnet on the same layer 2 domain. Either have the existing gateway handle both subnets (with NAT if needed) or have a "router on a stick" (possibly with NAT) routing between the subnets x Run multiple subnets on seperate VLANS over the existing physical infrastructure. Again you could either have the existing gateway router handle both VLANs or have a "router on a stick" (possiblly with NAT) has the advantage you can separate DHCP and broadcasts will stay constrained to the individual VLANs but the downside that the switches will need to support VLANs and be configured to put the correct port on the correct VLAN Run the new devices on new physical infrastructure. Either have two seperate ports on the existing gateway router or have a router (possiblly with NAT) joining the existing and new networks. 

there should be no need to micromanage. Address space is relatively plentiful. The expectation is that all subnets will be /64s NAT is strongly discouraged. For large buisnesses that is no problem, they just get PI space or even register as an LIR and advertise their space over BGP. However for small businesses it leaves a difficult choice, do they apply for PI space and buy more expensive internet connections that will let them use it? Do they run private addresses and ISP allocated public addresses in parallel and hope that no ISP allocated addresses end up in long term configuration files? do they ignore the IETF and run NAT anyway? The hexadecimal notation makes nibble boundries conviniant for addressing levels.