I'm talking about SQL Server in particular. I suppose a user tried it and got an error (you don't have select permissions on hidden underlying view B not explicitly mentioned in query). The main view A joins a table and another view (view B) together, and they don't have permission for view B. I'm not in charge of permissions for the database, but I'm curious how it works. Do you need to grant permissions to every object built underneath the views? Or just the view itself? Or either one? I thought one of the purposes of views was a snapshot of underlying objects that you DON'T want to give full permissions for. That's what is unusual to me. 

I'm not sure how to accurately phrase this question. Essentially, say I have a bunch of salespeople on different sales teams. Like, the Blue Region, the Orange Region, the Red Region, whatever. Now, these sales people are each connected to one sales region, but may, on occasion, change sales regions over time. Say Bob Jones was in the Blue Region for January 2015, February 2015, March 2015, but on April 2015, he went to the Green Region. So I'm trying to create a report that would aggregate sales revenue based on Region (even though at the technical level, its logged to sales person). So we would have transaction (table: employee_sales) data as follows: 

I know that SQL SERVER 2016 can co-exist with previous versions on the same server. I wonder however if there are any gotchas that I should be aware of? We have a test server that already has 2008r2, 2012 and 2014 instances on it. Is there any chance that there are anything on the existing instances that will behave differently if we install 2016 also on the same server? 

My question is as follows: If the DIFF Backup 1-file is corrupted somehow, could I then restore the database with just the FULL and LOG backups? Like this: 

Any help is appreciated. If this has been answered in another post, please let me know (I tried searching). 

Anyone have any suggestions to what might cause this? Have the output tables changed somehow since the procedure was called sp_Askbrent? The version of sp_Askbrent was reported this way: sp_AskBrent (TM) v20 as of Jan 1 2016 12:00AM. Any help appreciated. 

) GO Above is the definition as it is created when generating script in SSMS. As you can see, the default values are not in the script. 

We're using a business intelligence system and need to load a list of dates so we can flag them as 'last week' or 'last 12 months' or some dynamic value. I'm wondering what's the simplest way to virtually generate a table that simply lists dates in one column, literally every date from '2014-01-01' to the current date (the other columns I can use a formula from there). Actually even appending future dates on for a year would probably be useful as well. Now yes I can grab distinct dates from another random fact table that has thousands of entries, but that seems sloppy and is creating a dependency where there really shouldn't be one. 

in the example you see that bob is omitted, as max/ min will only find the two endpoints. If there was some kind of function to pull the second highest value, or 50th percentile value, on strings, that would be helpful. 

Is that the best way to accomplish this? Just wondering. Especially if the survey is expanded to 10 questions, or what not. I realize I can have a row for each question response rather than each survey for the table structure --- that's a possibility but I think it's a bit more difficult given the structure of the JSON, but maybe it's more logical. 

I'm looking for a way to create new schema from existing database selecting only subset of database objects. I.e. I want to have some "database representation" which only includes subset of tables explicitly specified. What is the easiest way to create schema which includes/has access not to all objects in the database. Is it possible at all? I'm trying to do this in MS SQL Server 2012 R2. 

Is it possible to control permissions on a single stored procedure level in SQL Server 2012? It seems that SQL Server Manager doesn't expose such functionality via GUI. Can somebody advice me how to view/set permission on a single stored procedure level? In particular I'm interested in removing "Connect" right on one procedure for specified account while leaving Connect rights for this account on all the others procedures. Is it possible? 

I have Windows Server 2008 R2 with Oracle Client 11.1.0.7.0 client installed. TNSPing to 100% available databases (accessible from other machines, i.e. I can do TNS ping to these databases from other machines) returns me following error: TNS-12535: TNS:operation timeout. At the same time I can telnet to database host/port and see that proper tnsnames file is being used. Environment variables are configured as appropriate (ORACLE_HOME, TNS_ADMIN, Path). Also I can connect via telnet using service/host name + port - so this is unlikely a firewall issue. After enabling Oracle client logging I can see following error related details in tnsping.trc: 

I'm not an expert on database performance. A colleague has suggested splitting a BI data warehouse database into several databases based on functional business unit - I believe still on one machine though I'm not sure - for performance reasons - there are many processes, procedures, logging, and monitoring happening. This has nothing to do with security or permissions - in fact those will be made more complicated potentially. Again I can't say I'm the expert but for some reason, it doesn't seem logical to me. DB in total is about 500 GB and we have about 200 tables. Naturally it seems like most solutions from my cursory research recommend improving the disc drive speed (like SSD) or RAM (currently an anemic 4 GB) for performance reasons. Or possibly keeping one logical database, but fragmenting the schemas into 2-3 different machines. But I don't know. Is there a significant use case or performance reason to split one database into 2 logical databases - other than user permissions/ security which aren't a factor here. There will be many views that span across these 3-4 databases. Do read operations, normalization, tuning options, or database/table locks come into play here? My instincts tell me no - those are entirely separate issues, but I can certainly be wrong. I'm just concerned that we are going to trade minimal, if not zero, performance improvements for a whole lot of added complexity and maintenance. I obviously am coming in here already leaning/ biased at one side, but wondering your thoughts. 

I have a user defined table type in SQL Server 2014 that I need to drop and recreate. However, if I use the script from SSMS, the default value constraints that are on some of the columns, will not be created. I also have problems viewing the default constraint, so I do not what the default value should be. Is there a way to view what those default value constraints contain? 

I tried googling the collation Compatibility_60_406_30001, but the search came up empty. Anyone have any suggestions on what to do here? So far I have not seen any errors becaus of this, but I would like to choose a valid collation for this database also. 

We have an SQL Server 2014 (recently upgraded from 2008 R2) instance where one of the databases has some strange settings for collation: In the Properties window for the database we have the following: 

Under full recovery mode, will a differential backup "break" the previous log backups? Let me give an example: Let's say we have the following backups: 

Today I wanted to update to the new renamed procedure sp_BlitzFirst. After creating the new procedure, I changed the code in the agent job to run sp_BlitzFirst in stead, with the same parameters. Everything seems to go OK until it is time to output values to the tables, then there seem to be some kind of conversion error. The whole history output is as follows: 

I have the following task: I want to execute fixed SELECT statement against SQL Server table with some fixed condition and I need to do it after specified period of time multiple times... Let's say N times with 1 minute interval between each execution with final goal to display only records which were returned all N times... Final goal is to check if some specific records persist in select results over time or maybe even order them by time they were returned - i.e. one record was returned in 3 first SELECT executions and interval was set to 1 minute hence I can say it was persistent for 3 minutes, another record was returned 5 times - so I can conclude it persisted / met my condition for 5 minutes. Nature of my condition/data dictates that records not meet this condition for more than one minute and I want to catch abnormal records which meet my condition for prolonged period of time. From explanation above it seems that it all involves some cycle, temp table and condition to put results in yet another temp table. But I'm posting it here to check if I maybe missing some simpler approach/solution which will allow to achieve the same result? 

I'm working with a colleague who's proposed to split our 1 instance-database into about 7 databases (divided by data domain) for development and 7 identical databases for production. I get the test-production duality logic, but in what case or what advantages are there to splitting our 1, relatively straightforward database into 7 databases? Our data warehouse is only consumed/ used by ONE business intelligence application, period. I am concerned about this direction so hopefully you can discuss the general reasons proposed for this split, and I can give you a run down of the current properties of the database. 1 database Data Warehouse: 352 GB total, 203 tables, 170 views Proposed split: 

etc. etc. So in order to aggregate by region, I would need a helper dimension table as follows (Remember, region can change over time) (table: employee_region) 

I'm using survey monkey's API to dump survey data into a SQL data warehouse. So I'm dumping response data into a table 'resonses' thusly: 

I'm having some friction when it comes to showplan permission security. Say there are 5 databases on a server. And each one has a test/ production split (so 10 total). There is one sysadmin. There is another person (non-sysadmin) who is responsible for the data, queries, tables, views, design, structure, indices, etc on DB Number #1. And that alone. Do you grant SHOWPLAN/ View Server State permissions on DB Number #1 to the person responsible for its design, query optimization, etc? Or does that present an unacceptable security risks to a non sys-admin? Perhaps it's a bit subjective or a gray area, but I wasn't sure. Are there specific patches/ procedures that can be put in place to mitigate these risks? Are there any alternatives to SHOWPLAN when optimizing queries and query run time? What about sys.sql_expression_dependencies, also a related View Server State permission, correct? Some may argue that you have a a DB_Development, DB_Test, and DB_Production split. Perhaps ideally, but when you only have the resources to implement a Test/ Production split, maybe access on Test alone is sufficient risk mitigation? 

The only strange/suspicious thing about this machine is that it had multiple versions of oracle client installed (10, 11.1, 11.2) - removal of all versions apart from 11.1 & reinstall/repair of 11.1 haven't resolved this issue. Also it seems to me that v10 of client was not removed properly - it disappeared from Programs and Features, but files in installation folder had not been deleted. Any advice on what to check / how to resolve this issue? 

I have application / service which connects to Oracle database (11g) which shows me "ORA-00942: table or view does not exist" in its log file without any indication of particular table/view with which it has problem. And there is no way on app side to increase log details to include this data. I have direct access to the Oracle database which is using by this app (not DBA level privileges, but quite high level of access) any advice on how to check with which table or view my app having issue? Probably I can use some query to check this? I'd like to find out object name so that I can check granted access and any locks on it.