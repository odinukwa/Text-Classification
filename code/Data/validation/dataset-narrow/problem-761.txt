note: I'm using TestNG and made IntelliJ do most of the heavy lifting for me. So the first 3 lines of code are from the IDE. It is importing all that I need to start testing. The method I created with the annotation. (you can read more about how TestNG finds tests to execute on your own). So the actual arrange for this is simple. I created a new and a new set of arguments that I want to give it. In this case it is an empty String array. Act Now that we have the test arranged like we want we act on it. most of the time this is a simple one line call. 

Worried about the code not working the same? Look into unit testing. I wrote these tests (using nunit) first before I changed 1 line of code and made sure all 9 tests passed. Then I proceeded to refactor until The code looked like it does above. 

Now in Program.cs in you'll need to make an instance of your GameGraphic to make use of it. But before we do, I want to introduce you to another type of class. A test class. Unit tests There are many different TestFrameworks available so you can search for them on your own (NUnit, xUnit, msTest...etc etc). Even though I'm part of the NUnit team I'll recommend sticking with what is built into Visual Studio so that you don't have to learn about NuGet and all that it brings to the table (although it is also a good easy research project). So you've created a new Test Project (Create Unit Test Project how to). Now lets write a test for GameGrahpics. But wait! It doesn't compile! And even if it did it doesn't lend it self to a easy test. Grumble.. ok not a huge problem. Really we only have 1 test that we need to write, we could write more and with any thing it takes practice, but I'm going to write my test to make GameGraphics work the way I want it to. So here it is: 

After cloning your project and reviewing the blog post you mentioned I find that your structure is close. I can see that you tried copying what he did, but missed a few points: Your tests are in the same directory as your production code. This is frowned upon in all words of languages that I've been in (C# being my current, but Java and Android all apply). Looking at Android10's github link and I see that he correctly put his tests in a different directory (domain/src/main for production code, domain/src/test for his tests) than his production code. So that is my first item in your review: Move your tests out of your production code. I would be angry if I saw JUnit library floating around on my android device! Short blurb about names. What is OC? I've read the source, I've read your tests, but can't figure out what OC stands for. Use a better name. Uncle Bob would have wagged his finger at you for that. :) OcTest: I'm not sure if this is just the initial phase of your tests, but they are not very good. In general testing anything with a Cyclomatic Complexity (Wiki Page) of one is not needed nor is it helpful. The reason for that is is that it adds no value to your code. Doing this is akin to testing the framework and not the behavior of your system; It makes for brittle tests. I say brittle because properties change, structures change and if Oc is going to only be a model with getters and setters you don't want to have to change all your tests around it because of a small change like that. Look through Android10's tests and see how he does his tests. From what I've read so far his tests are good. If you really really still wanted to have unit tests on your model, at least come up with a system that uses reflection to get all your getters and setters and exercises them. This way your model and change, but your tests won't. I see that your code base is kind of big so there are other things you could open a new thread about. I'd be more than happy to review those as well if you put them up here. 

Unit Tests I can see why you would not like your unit tests. Although it isn't required for you to use a test framework to write unit tests it is helpful to use them because you can run them in isolation and quickly and as an extra bonus visual studio has a nice window showing the status of your unit tests. MSDN - Run unit tests with Test Explorer 

I still have both options in use for the folder selector. I believe the second one is the one you are after. Plus it is only 1 line long. The previous call told us we are going to be checking the Files in the Folder. Although we don't do that we are getting ready to do that. So maybe we could have chose another name such as PrepareToCheckFilesInFolder() but the last line does start the checker, therefore it isn't the worst name in the world. And you can guess what the last method looks like i'm sure. To answer your question then it is not necessary to move it out because obviously it still works either way. But you have to ask yourself if you'll know what that method does a month from now. Will you have to re-read your code and figure out what it does or will you be able to read the method name and know EXACTLY what it does. The second is the preferred way. Now you can reuse the code elsewhere if you need. If someone else comes in and reads your code they won't be temped to repeat the code you have, they'll just use your code. This is preferred. Last little tip is that you don't use your stream. Even if you did end up using your stream you are using incorrectly. consider something like this 

the test runs in about 300ms, and it took me about 2 minutes to make that test. 300ms may seem like a lot, but that includes compile time, setup time and execution time. Actual time to format that is very minimal. So now I have a string that is formatted the way you want NumberDisplay to show it. You would pass in your numberformatter in the constructor, and use setNumber which would run the number through the formatter and put up the appropriate images as needed. (I have that code on my personal laptop so maybe it could be a exercise for you) Speaking of which, before I couldn't get this working without first having to change all your images to use . I believe it is good practice to use that instead of hardcoded string literals. I even pulled out all the images into a abstract ImageResources class which loaded statically. 

and to use it it was just a matter of saying So that's what I have right now. Sorry I didn't get a chance to show you the other mine class I just ran out of time. 

I noticed that when writing this you require that you'll ALWAYS have 6 modules. This would mean that could be enhanced if you were to make it more dynamic. Tests are a nice way of informing you (very quickly) if the changes made to a class are breaking anything (I say very quickly because most tests run in less than 1 second and they can be run repetitively). When it fails my IDE shows a big red X and red progress bar saying something failed and a description of why it failed. Likewise if it passes I get a nice green check mark and progress bar. Now lets dig into your code. It takes less than a a second to run this test so I'll run it frequently. I see that is declared outside of where it is used. Its an integer and so does not need any resources cleaned up, nor is it used outside of that method. Therefor its declaration and value should be on the same line. After doing that I check my test and it still passes. Also you have a hard coded the size of marks, yet it should be dynamic to match the number of modules. I changed it to and run my tests and it still works. Moving down we see some nicely declared variables stating what index 0,1, and 2 are. I like that! The last part to this method, though, has some logic that could and should be moved out to a small private method. This way you can replace the comment used to describe this next section with a method name that does just what the comment says. Pulling out this small bit of logic into a small method also makes it easier to see how the logic can be rewritten (if possible). Often times when refactoring multiple conditionals it is worthwhile to reverse the conditional and see if it clears things up. I actually found that doing so removes the need both conditionals. The refactored code that I mentioned specifically looks like this: 

If you have to put a comment to specify what a request type is then you should either change Request type to be a enum so it uses words, or if you can't do that then use a constant in your class that would change. I'm going to assume you can't change RequestType easily, so I'll just show using constants 

and if you look at the rest of them they are all basically the same. You set the Words, and the Category and show the MainGameDialog. (side note I think you have a small bug in each of your click methods. I think you meant to use and not ) This could easily be extracted into a method and called by each button click. This would clear up atleast 40 lines of code. something like this is what i'm thinking. 

I don't have much this moment, but if you could provide a little bit more information as to how things are calculated and what some expected output is that will help. I see that you are doing a C approach to this, and some of the C++ habbits are rubbing off in the C# code. Here are 2 things I spotted right off C# initializes values to 0 by default making this code a waste of cycles 

it might be slightly over-engineered, but it gives me two things. First is that it gives me a class that I can easily change the outcome of a file is found (regardless if it really does or not) by simply extending with a class that overrides FindFile and returns true or false as I see fit. Now testing that class isn't really worthwhile, but if I were to have a class that used a that could give me some value. Now lets consider a class that would use it. 

So to answer your question did you implement it... Yes and No. Yes: you did it twice. No: You did it twice in the same method but the algorithm says once. Does it really matter? No. You want a random deck of cards you'll get it. 

Obviously this has some compile errors which means the test automatically fails. To make it pass I have to add those 2 methods to my class. A few quick "make this method for me" shortcuts later and now I have: 

consider replacing it with this I'm going to assume that this was a mistake specifically because a few lines above you ask and if it did you split it up. Which means that your smallerTOkenValue should not contain any ',' Lastly I believe you can actually use a small form of recursion to simplify your code some (providing of course you split your big method into smaller methods). below is my final outcome. (I have not tested this, as I'm typing this in notepad++). Notice that the second to last method uses calls itself.