Documentation You should add comments at least to describe the program and the different main functions. 

ÃŒ am not sure calls for list comprehension. I might be wrong but should do the trick. Same applies to other of your list comprehension. If you do want to create a new list out of the previous, does the trick but this is not required when using the slice operations as they return new list already. The is not really useful, is it ? is this any different from ? Then, I must confess I got lost in the middle of the code. Please have a look at what can be simplified based on my first comments. 

Class names and and docstrings are still to be fixed bu I'll leave that to you. Logic If you check that the 2 inputs have the same length first, you don't have to check that they are both non-empty. Also, because an empty list of fraction would lead to a sum of 0, this error would be properly caught and signalled to the user so this check might not be useful. Once your object is properly created, we always have , thus, there is probably no need to store it in the object. Your code then becomes : 

You could them split this into 3 arrays but I am not sure it is worth the pain. Indeed, a few things can be done in a more concise way now like : 

Improving the code for the basic version Here again, the list is not that useful. The point is just to perform a re-indexing : what we are really doing is that we loop starting as and we stop at (included). You can put a few s in your code to double check that we don't really need the values from as we can compute them. 

I think the problem is that you are counting the number of double-six and not the number of trials that lead to (at least) a double-six. The difference it makes is that if in a same trial, you have double-six multiple times, it should be considered as one failed experiment and not many of them. This correspond to adding a after and does fix the issue. 

I do not really know how you plan to use your object. From what's in the constructor, I guess you'd use it to convert a string corresponding to a numeral into a integer. By doing so, you define multiple attributes and call multiple internal functions. I am convinced some things could be re-organised: 

which is easily fixed. Class variables Class variables are a pretty messy topic in Python and it is easy to get it wrong. The solution is quite simple : avoid class variables unless you know what you are doing and move this : _rolls = [0] * 21 _current_roll = 0 to a proper method. You can see the issue by adding the following check (it uses a method I'll define later): 

I know you do not want to talk about this but your function could be removed if you were to use a proper logging function. If you really do not want to do this, you could at least define a function doing exactly what you are doing but calling the function automatically so that you do not have to do this every where in your code. 

This is making your code slower (performing string concatenations instead of additions) but you shouldn't be able to notice this because we are working with pretty small values. Also, this is a first step for an actual optimisations to be performed once it works : you just need to replace whatever involves string with their length variant : 

Then you can actually be smarter by considering how many times you'll enter the loop. This can be decided with a simple division: 

I think see this the neatest solution. Then if on only want to create the table only once for performance reason, you can put it a variable outside the function but it's probably not needed. 

the line definitly shouldn't be a list comprehension as we are building a list that we do not use. If it is side-effects we are interested in, we might as well use a . 

Algorithm For each , , it only makes sense to check if it can be written under the form if it is bigger than the current best value. 

After introduction of 0 in the first slice expression and a bit of mathematics, in the condition check and in the second slice expression, the code is now : 

The global design is a bit weird from my point of view but I'll comment on the code you've written. In : The code is properly formatted. A few remarks anyway : 

The name is a bit of a problem because it hides the builtin. I do not find any alternative better than which is still pretty poor :-(. Edit: I don't know why I didn't think about "s" in the first place but after reading it in another answer, it looks like a much better option indeed. I am too lazy to edit my code everywhere. Finally, is a good name for an (integer) index. For a single character, seems easier to understand ( if you feel verbose). Chained comparison In Python, you can chain comparison. If your case, you can write: 

Minor optimisations in Some square roots are computed only to be squared afterward. This seems sub-optimal. 

On top of the other very good answers: Code organisation and tests It is a good idea to separate the logic about input/output from the logic computing results. In your case, you could have a function taking an expression as a string and returning a number. This makes your code easier to understand, easier to reuse and more testable. Also, it is a good habit to put your code actually calling the logic behind an guard. All of this taken into account, you have: 

A better use of itertools You wrote which shows knowledge of the package which is good (because it is so awesome) and of the star-argument syntax (I ignore what the real name is). However, this looks a bit cryptic and can probably be improved. Indeed using the argument, you could simply write : 

I'll stop the review here to let you deal with the issue found. Before finding the problem, I was about to suggest something along the lines of: 

Writing pythonic code Python has a coding guideline called PEP 8. It contains a lot of relevant information about how to write your code. You'll find various tools to check your code againt PEP 8 to ensure you follow it properly. Among other things : 

Distinction between computing a value and setting the field It may be interesting to make a distinction between functions computing values and functions setting the different fields. It would make things less verbose in the various small functions and more explicit in the functions. For instance: 

As for the performances, I am a bit concerned by the fact that you are actually performing copies by using the sublist notation. Thus, each step of the algorithm, instead of operating in constant times will be bigger if the sublist you are copying gets bigger. Also, you are re-sorting the whole array everytime the function is called (and even more that this apparently). The point of using binary search is that you pay the cost of sorting () upfront assuming you'll amortize it by performing many searches in times. If you have to re-sort everytime, you might as well use a linear search iterating through the array and stopping when the element is found. 

Regular expressions might not be the right tool for this. is potentially very slow and might not do what you want it to do (it could match many more than what you want). would most probably do what you want. 

As a side-note, I had not given enough thought before writing the code above but if I had to re-do it from the beginning, I'd choose as a default value because it wouldn't need a special handling (all strings start with as far as I can tell). Simplifying code All your variables were useless. Your variable is not really useful neither. Also, could be named . Finally, your conversion from list of labels to set of labels could be done only once at the very end of the function. 

Use enumerate Enumerate does exactly what you are trying to achieve : keep track of the index while looping on an iterable. Just use . Remove levels of nested logic Using , you could make your code a bit easier to follow. The inside of the becomes : 

Then, there might be a way to make this a one-liner but I find this to be pretty easy to understand and pretty efficient. 

My point is to just take into account the fact that a time is just a value and a unit. We store the value in the easiest format and we convert it on demand. No conversion is actually required for comparison. Adding a new is straightforward (assuming there is a constant factor to multiply - month and year wouldn't work because they do not always last the same time). 

Here's the principle : the interval will contain the closest element to at any time. At the beginning, this interval is the whole array (). At each iteration, we'll make it strictly smaller. When the range is limited to a single element, this is the element we are looking for. In order to make the range smaller, at each iteration, we'll consider the middle point of . Because of the way is computed, is also in the range. We'll check if the closest value is at or and update or accordingly. One can check that the range actually gets smaller. Edit to answer to comments: As spotted by @Vick-Chijwani , this code doesn't handle perfectly the scenarios where an element appears multiple times in the input. One can add the following working tests to the code : 

On top of @Quentin's comments, please try to avoid repeting yourself too much and declaring useless variables as it tends to make things harder to read. 

Style and tools Your code looks weird : you have line breaks in unexpected places but not in a few expected places (such as before defining a function), whitespaces are not consistent. In Python, you'll find PEP8, a style guide that can be quite helpful to you. Even better, you'll also find tools to detect problems such as pep8 and to fix them such as autopep8. You'll also find various other tools to check your code such as or and . They can be useful to find problems in your code. For instance, and (for your information, is the usual name for throw-way variables in Python). Finally, your variable names do not follow the convention. Once this is done, your code looks like : 

Re-think your logic (bis) On the code above, the last 2 checks are a bit redundant : if we don't go into the block then we must have and ``lastindexval <= indexofitem` must be true. After cleaning this, the code looks like : 

Enum might be the real solution to define the different possible operations. The implementation of the XOR method could be more concise : and you probably don't need it anyway because Java has a bitwise xor operator. Also, that would make your cases AND,OR and XOR more consistent. You should try to make your code a bit more consistent : sometimes you store in a variable before using it, sometimes you don't. My feeling is that even though it's not great from a performance point of view because it makes you compute stuff you may not need, it might make things easier to do : 

As far as I can tell, using like you did is ok. However, I guess you should handle values that could be out of the range you are expecting (I couldn't find easily something telling which range of values can be returned).