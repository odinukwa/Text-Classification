5) serves little purpose - it is always . Drop it or if code should correlate to the type of references, than use that directly. 

treats a null character just like any non- characters. So if the first character read is a null character, then is 

Unclear why code is using , yet returning . Corner case: With , should have the textual value of , then assignment to is UB. Consider printing something when Make a clean separation of parsing form quadratic calculation. (2 functions) 

There is no need for a and . Alternative, only store and have the tail point to the head of the list. End of list detected when . This makes your head node one field smaller. Important if code uses lots of queues. Unclear why code uses for the queue size type. A signed type is not needed (could use ) and on a system where could be much wider than , a queue size like is more prudent. Robust code would check for a queue exceed the max value of in . Good use of for . Good error checking for . Good to have test case. IMO, a commented sample usage in the file is nice. ; the being the public interface to your good code. Pedantic: Robust would check for in as that negates the correctness of the checks which should be . A little documentation goes a long way. suggest a line or two of comment preceding each function declaration in . Functions like that do not alter should be declared . This self documents the unchanging nature of in the function to users and allows some optimizations a compiler may not otherwise employ. It is a check on the implementation of the function too. For completeness, suggest in . Change order. Put first as a check that does not depend on the 3 include files - unless that file is coded in . 

As does not alter the pointer data, best to use for wider applicability and better emitted code. IMO, the name should reflect the structure's name closer and lead with that. Let the calling code print a if it needs to. Some option should match ISO 8601 with its y-m-d order and minimum 4 digit year and 2 digit month/day - zero filled A statement is appropriate here. I'd expect a print function to handle or return the return value from , not simply it. The and are OK , but not needed here. 

Minor Was the right type used? Why bother with making sure? Use the size of the referenced object, easier to code maintain and review. 

Good that initial coding attempt is to save type . Saving a generic type has pitfalls that are best handled after mastering the basics. (OP is very close here.) I'd declare functions after non-static functions in preparation for moving the non- functions into a "darray.h" file. is OK and recommend to follow that idiom. This is even more important should the code set functionality tolerate/detect in other functions. 

As the header files used , , and maybe others, should be in that header file. Usage of a header file should not oblige .c code to do the including for it. The .c file should your "linked_list.h" first to insure it does not require prior includes. 

Biggest design concern: lack of control on how "almost" operates. I'd expect a 3rd, perhaps optional, parameter to gauge "closeness". From a design stand-point, code is mixing absolute and relative in determining the the return of and is incapable of returning a sensible result based on just one of those. Perhaps 2 functions: 

Did not notice any limit in code to incrementing . suggest adding test to insure before access arrays. 

Concerning . Any parsing that lacks a scanned digit (or inf or NaN) should flag an error. E. g.: , , , , etc. 

Beware of FP does not always compute the same as mathematical code would expect. may be ever so slightly negative! Then leads to unhappy code. 

An alternative to saving the lengths and recomputing is to use some non-standard function like which copies and returns the pointer to the null character. As if this is faster than other approaches, YMMV. IMO, is the best to speed code along and since the length was compute prior, take advantage of that even if managing the saving of those prior results is a minor extra burden. 

Code is reasonable. The larger issue is how to handle errors. Detect them is one thing, but them what? At least the code sends a message and quits. The function can fail a corner case: . Returning in that case is not an out-of-memory. 

When de-allocating, especially in debug mode, consider setting the pointer to . This helps detects invalid subsequent usage. 

The 3 arrays rolled into a 2D array is disconcerting. Code then uses to note which array rather than a more meaningful . Further, the loop accesses , yet has to skip over every third element . This needlessly spreads out the data, likely increasing cache misses. Also, the type of needs to match type of , yet not type . To rectify all these, suggest making 3 separate arrays, 2 of type and the 3rd (tally array) of type . By clearly using , code can readily be adapted to cope with "number" as stated in the post, be it , , etc. 

Minor inefficiency. Test for digits first. A simple test for leading sign would do. Decimal point is locale-sensitive. 

is curious. That standard defined is in , yet code did not include that. Suggest adding it and only retain the if there is a compelling reason. 

Questionable architecture: The below does not distinguish between returning as a error condition and as the value of . This restricts use of this generic container. Better to use an alternative to indicate range error. Perhaps instead return the address of the element or pass in a destination parameter? 

Instead allocating to the size of a type, allocate based on the variable. As code develops and the type of changes, the following is automatically the right size. 

It is easier for people to understand rather than . This is important for writing the correct code and maintaining it. So, when practical, avoid negation. Don't you think it is not a bit mis-understandable to negate the inverse of a sentence, No? 

Create a white border and make the matrix a bit larger. Rather than have special "am I near the edge" code like cases and , just make the matrix (n+2*B)*(n+2*B) and fill the border with "white". This will not reduce the O(), but will speed along code with the removed special cases. I think the can be 1, or maybe it needs to be 2. 

%f v %g Recall that floating point numbers have a floating point. With , large numbers will print with many unnecessary characters and small numbers will print . It is more informative (especially during debug) to print the leading digits than to a fixed decimal point format. Suggest using or . 

The magic number is unfounded. Just some value? It deserves a comment to explain its rational - even as terse as system requirement. No out-of-memory detection Code lacks OOM detection. Further, recommend to allocate to the sizeof the de-referenced pointer, rather than to the size of the type. Easier to code, review and maintain. 

The approach fails in 2 places. Say the input was a serial device, either may simple fail. For a text file, fails the following: 

Same code loses precision near and total loss of precision near . The same line of code unnecessarily loses precision. To improve #1, 2 and 3, rather than being a power of 10, just use integer values and add to . This will greatly reduce but not eliminate issues near . There will be less precision loss, but not fully eliminated. IOWs, the generated will be closer to the best one. [Edit -->] Another simple improvement: Rather than , use . This will allow precise calculations near the extremes of without undo over/under flow. Quality assessment. Unknown - but should not be. Part of writing a good is to test its correctnesses. By renaming this to and testing against the standard would be a first step. Then rate how close the two functions are. This post omits any statistics, so I assume none have been done. With any math functions, such an analysis, even crude, should be attempted. Note that such test code can be much more code than this and it is work. If truly interested in improving your algorithm, refine it with by first writing a good (using only math) and compare that against . I do not see clear consensus about use of sign on so may or not be needed. Also, that code might not provide result in . Consider using . One of those FP corner cases. Pedantic: expects a value in the (or ). With a signed , the below is a problem with negative values. 

Unclear why code is using for flags. linux.die.net implies the type should be . Check your prototype for - also its return type. Is it or Ref? Although code nicely aligns, I'd expect an structure rather than 

Code uses the contents of , before knowing they are valid. When returns , the state of the buffer contents are undefined if an I/O error occurred. Best to not inspect the buffer when returned 

Architecture is usually line buffered. So nothing is given to until the user hits Enter. OP code will give multiple error messages with input like "Hello 123". Better to separate user input from input validation. Read the line of user input with or some version of your own as does not some weaknesses. Then validate the input. 

Conclusion In all, using FP math to solve an integer problem has various unexpected corner concerns and so is hard to insure code is right for all . 

As @Mike Nakis began with suggesting treating the file as text all the way, OP's code has undefined behavior UB in using 

Use when referenced data is not changed. Allows for optimizations and defined behavior when the array address passed is . 

Note that binary constants are not standard C. Consider using a decimal/hexadecimal constant and simplified code 

Not a fan of , which looks like a constant or object and it is not. Perhaps make it look like a function. Or be emphatic that is 0. 

Instead of filling code with the above (it has better error checking, but is longer), make a helper function to handle user input. Something like the below. The key is to control and validate user input before trusting it. 

Use an auto formatter. The extra space betrays manual formatting as it is inconsistent with the rest of code. Life is too short for manual formatting. 

Interface unclear Certainly the comment was meant to be "... caller does not supply ..." When returns, how to determine it it succeeded or failed given: "If the caller does supply the correct parameters, return the string object * unchanged"? Recommended to return an error flag, value or . Name space Functions names , , and others share little to hint that they work together. Recommend a common prefix. Doubling unclear. In , why repetitively call if code can determine the minimal needs? Just allocate once: maximum of 2x former size and size needed. Inefficientcy In , code re-calculates and incurring a run down each string. Just save the lengths and re-use. Specifically the is an issue as code may have called and code cannot assume the 2nd call to returns the same length. 

This may improve performance a bit as it can allow various compiler optimizations Avoid UB functions are UB when as they are designed for and . As a may be negative, cast to to cope with this pesky C nuance. 

Use rather than for speed. If range is of concern use the widest range instead of . may be a happy compromise, but it is neither fastest nor necessarily the widest range.