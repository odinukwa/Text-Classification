And you can even pre-compute the required capacity to avoid unnecessary array copying while building the string: 

will return . will return . If you want both to return then replace the with in . Marking as is purely optional but it seems to me like a good fit. 

Using as a function name seems very ambiguous. The method name used in the Java class from LeetCode seems more appropriate: (thereby specifying that the arguments, although not numbers themselves, represent numbers). You can remove the explicit type specification for if you add explicit type arguments to . I personally find this more readable and less verbose: 

Unfortunately this can sometimes look a bit strange using , etc. but in Kotlin 1.1 you can use bound callable references: 

You're method is not transitive (e.g. and but . See Any.equals - stdlib - Kotlin Programming Language for more details on the requirements for . You might also consider using from for testing your own implementations of . If you define your own method instead of defining a custom, non-transitive implementation than your existing solution can become much simpler: 

For determining correctness of your implementation I recommend referring to an existing implementation such as Apache commons-lang or the newer commons-text: 

which will avoid creating an intermediary list (small optimization in this case). Perhaps a minor issue but I personally prefer using "index" instead of "i" or "idx" to avoid any ambiguity. "idx" actually has several meanings. I find used with to often be more readable than combined with : 

Personally I prefer "row/column" instead of "y/x". Thinking "y" before "x" is unnatural. You can always define your own methods too which can improve readability. e.g.: 

You can use the slightly shorter instead of . You can also move trailing lambda arguments out of parentheses: 

Kotlin already guarantees that and are not as you've used for their type instead of . As such, the statements are unnecessary. I do not believe you gain much from and . and read clearly and are read in constant time so the additional variables seem unnecessary to me. You can place the last lambda argument in a function call into parentheses as you have done but I personally find moving it out of the parentheses easier to read and more idiomatic: 

[EDIT] I did a little benchmarking and my functional solution is indeed much slower than traditional (procedural) code which the compiler is much better at optimizing. I built a procedural solution with systematic additions to see the difference with a similar approach implemented procedurally. I also wanted to know how much overhead the indexing of matrices entails: 

I've tried several variations and appart for a minor improvement on the offset calculation (to allow negatives to rotate to the right), I couldn't find anything meaningful to add: 

If you compare this to lottery draws that pick numbered balls out of a basket, you're actually applying a variable probability on the decreasing number of remaining balls. Using this analogy, you can process random selection in an array of "remaining balls" and never have to worry about testing for duplication (which would bias the probabilities): Here's an example of how this approach could work: 

It is less impacted by the start position. I got results on an 88 character string that were about 4.5 times faster than the OP's function with a 5 character substring starting at 10. This performance difference increased to 9.9 times faster with a start of 80. Additional testing showed that, the optimized version (that uses isEmpty() and computes endIndex relative to startIndex) is faster than this padding approach when the end is less than 35. Beyond that, the padding approach is faster and progressively much faster as the end parameter increases. The padding function seems to somehow get to the first character in O(1) then it gets the substring in O(n) as a function of the length of the substring independently of the position in the main string. You could probably combine the two approaches and select one based on the value the end parameter. 

They were likely looking for something in a functional programming style and you probably needed to demonstrate that your solution is O(n^2). for example: 

It generates 6 indexes in the range corresponding to the number of remaining balls after each draw. The random indexes are then extracted from the array, removing the selected element each time. This will perform exactly the same number of iterations as your count and never have to do any searches for already drawn balls. And, as a bonus, it will work with any type of elements you want to pick at random (e.g. BINGO balls, Card game, ...) and you can make additional draws from the remaining basket (like picking x number of cards from the top of a card deck). 

This also prevents printing a trailing space. You don't need to re-read "dict.txt" as it doesn't change with each word. 

"args" is more common and descriptive than "a" in a function signature "\n" is system-dependent; I recommend using instead can be used with a instead of first mapping an using a and then calling . e.g.: 

In some languages variable names like are common and expected but in Kotlin (and Java) I find it more common and expected to have variables names avoid abbreviations, use camel casing, etc. I recommend using instead of . You are returning a . This is fine but data classes are so much better and Kotlin makes it so easy to define and use them. I recommend creating your own type to return. e.g.: 

I recommend removing as "Neutral" is not an Element Type, it is the lack of an element and therefore makes element.type not applicable. With removed you can greatly simplify your solution: 

If is never used then even itself can be eliminated and the tree string building logic can be placed in a single function: 

If you are going to have classes for computed numbers than I find (like ) much more readable than for , , etc. Naming an instance of as simply "tree" is rather confusing, I recommend using type names (at least the end of them) at the end of instance names (e.g. "stageTreeWidth", "stageWidth", "treeWidth", or simply "width"). Kotlin has a neat function to simplify building strings with a repeated char sequence. e.g.: 

In my opinion, the main factor in preventing you from having a clean primary constructor is indeed the two paths to the super class (via or ) and having a super class define the property is in fact what also prevents you from making this a data class. I recommend making an or with no properties in its constructor. e.g.: 

If however you actually need/want classes for tree components then I recommend making those components (or collections of those components) members of a class (e.g. a has ). 

Sometimes in Kotlin you don't have to declare temporary variables so that you can do something with a return value before returning it. e.g.: