for bother there are 2 different approaches that come to mind to either avoid, or mitigate the situation: adding a pre-collision raycast system, and grouping collisions together. for the pre-collision raycast this basically uses the objects current velocity, and uses that as a ray-length, and if another object touches that ray then next frame there "might" be a collision between them. I say might because if both objects are movable then there is a chance that the object will move out of the way, but this should be a trivial concern if have a multipass collision handling system. for the grouping of collision this can either be used independently, or in conjunction with the pre-collision raycasting, or can be taken from a spacial-partitioning/hierarchy system. where if there is at least one collision then the objects that are around that collision by a determined value (this could be found statistically, or by trial, and error), and they are included in the collision system, and the entire system is solved (or attempted to be solved) all at once. on the immediate situation I would say that the pre-collision raycasting would be most beneficial. Though if your completely convinced that pre-collision raycasting is unusable, or to much overhead, and the case of objects passing each other is of great concern then you could log the position of each object the frame before, and then determine if a collision happened somewhere in the middle. though what I have found is that this in the long run is more costly, and only works a fraction of the time. not to mention having the problem that you are making your collision resolution system do a "lot" of guess work on how to resolve the collision that it does not have solid data on. 

This can be done in terms of pure numbers, or in terms of psychology. pretty much it all comes down to what is the value of the currency with respect to effort put into the game, or physical currency being spent (I do not condone/like the latter, so I will not discuss it to much). If there is a item (that boost your characters stats to an extraordinary amount) in the game that can only be obtained by purchasing it from a specific vendor for lets say 2,000,000 (currency), and it requires the player approximately 1 minutes of actively trying to earn 50 (currency) then it will take said player 40,000 minutes to acquire enough currency to buy said item. putting that in perspective that is 27.8 days (without breaks). if the player does the same math they will do some risk/reward analysis, and might come to the conclusion that that amount of time is not worth said item. the big take away is figuring out some kind of calculation of this risk/reward analysis the easier it is to earn currency the higher prices can be, and visa-versa, but some numbers no matter how easy the currency is to obtain the player might just think are to high even if it is obtainable. 

This actually falls to a more complex analysis of your game. In the terms of what needs to be sent across the wire, what needs to be kept on each machine, and what is a system not to be trusted with? once you answer those questions then you can start to ask the questions of where does the data get held. In the context of your direct question: a case where the hold machine was the server, and responsible for receiving validating, and updating the other systems is Halo 1 for the PC. This had no checking for connection to that host, and so the host system could be unplugged, and the game would still be going, and then the system would be reconnected, and that system would update the others. To hilarious results of score. An example of the server simply being a client that started the instance of the game would be more in line with an MMO. Though this all follows from what you want your data security/validation to act like. EDIT: it should be mentioned that in some instances letting the player update some of their characters information before validating can still be perfectly fine. For example the player should be able to update their own position (trying to do this all server side can get expensive), but still have it check in with the server every X seconds. To avoid similar to Halo 1 for PC have the connection tested every X seconds. in terms of expense pinging every 20 seconds is a small price to pay to stop any entity from cheating. again it is a complex analysis of your game to determine what gets determined where, and if some things are even worth sending. 

have the same loop as a variable frame rate, and just don't enter it until a minimum amount of time has passed. have a threaded system with physics working on its own, but only wake the physics thread at given increments. 

but this logic has the problem for say the U, or L shaped rooms in my example, and then I also have a problem conceptually if the room needs to be rotated. 

and the reverse for the other directions. the big thing here is instead of moving with respect to time, or some counting your moving with respect to fixed numbers. though this is primarily for rectangular tiles (square if = ). if your doing different shape tiles (hexagonal, triangular, etc...) then your going to have different math, but the concept of moving at fixed increments is the key here. 

I am going to attack your question out of order, partly because I am seeing issues with the way I think your attacking the problem. 

One possibility that you could do is see if your company would be willing to create a pay for title. this could either be an extension of one of your free2play games, or an original IP either way if your the designer/producer, and it does well then you have the chance to use it as a showcase. Similar to Kylotan statement showing that you can create a mod with a companies engine is a good thing to look into. though a word of caution here that this will probably put you in at most as a junior dev. Another thing you could consider is if you could get into some of the industry conferences, and rub elbows/network this could give you access to the secret job openings that companies don't want to advertise (because to many 20 something couch potatoes will apply, and they don't want to deal with every Joe gamer who submits an application. 

I know that I have to make sure for convergence (namely the end is reachable), and to do this until there are no more doors on the list. right now I am simply trying to get this to work in 2D (there are rules that introduce 3D), but I am working on a presumption that a rigorous algorithm can be trivially extended to 3D. EDIT: my thought pattern so far is to 

This is relatively a language independent question. though my java is a little light, but the logic is the big thing here. Tile systems are relatively straight forward, but still equally as difficult as continuous motion, in that instead of incrementing with respect to time 

for either approach it would need to yield the component rotations (theta about X, phi about Y, rho about Z). I have a feeling that breaking the quaternion down might be the easier rout, but I am not sure as to the actual operations to do this break down. 

I don't know why this would be slow, unless you are constantly creating, altering, and destroying these cubes at run-time, but even then 200 cubes is child's play to unity (when you start getting to say 10,000 simultaneously interacting items then Unity can start to have problems. You don't need to have physical "objects" in your world to ray-cast between them. you simply need to have objects in your world (Empty GameObjects) 

This is not an exhostive list, and will ignore some extraneous things such as T-shirts, figures, posters, etc..., and any costs will be given in US$($1 = 80 Microsoft points) for MSRP, and will discount profit margin/cut, and distributor cut (some of these must be directly negotiated by medium) Physical Media: considering that the average Xbox game retails for $60 these usually are purchased by the retailer in bulk (1-10 thousand at a time) up front (independent on actual sales), and distributed among locations (usually 5-10 copies per location). Keep in mind that in order to release any physical media game on the XBox Microsoft must give it a green light, and to have it placed in any store requires that the owner give permission by purchasing them. these can have digital material in addition to the physical media (see DLC for details) XBox live: