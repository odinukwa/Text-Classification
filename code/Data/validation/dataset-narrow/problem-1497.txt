Yes. You should absolutely identify the specific risks of each technology or tool that you are going to teach and discuss those risks before you assign students to use those technologies or tools. The exact form of these warnings depends on what exactly you are introducing and the age of the students. This is also a decision that should be made in the context of a school-wide policy on information technology. If you're teaching TCP/IP to college freshmen, there's obviously no reason to go off on a tangent about the dangers of sexting. If you're teaching sixth graders how to use your school's library databases, it's probably not appropriate for you to bring up many of the dangers of the internet. So of course keep the warnings relevant and age-appropriate. But if you're assigning students to create a class blog, you should give them instruction about not putting certain personal details on it, about dealing with spam, about creating and protecting a secure password. If you're using a social media group (like a facebook group for the class) you should remind students about school policies that apply to the group (about swearing, offensive materials, cyber-bullying, cheating). If you're teaching php development for a database app, you should warn students about SQL injection attacks and other common security risks. Keep in mind that it's unlikely that you'll encounter students who haven't already used the internet. My son is four and he's a big fan of YouTube already. So remember that you aren't really introducing "the internet" - you're introducing a specific tool or technology. Your obligation is to teach the risks of that technology. 

I find the "box" aspect is far more important than the named aspect. Maybe it's personal bias. However, we can combine the two: it's a named box. So you can say "Go look in the 'object color' box." If you're working with pure data (no objects), it may be effective to set up a white board, and mask off a few "boxes." Each box gets a name like "number of chores done today." Concepts like "Add 1 to the number of chores done today" start to become really meaningful that way! And it just so happens that the word for these spaces on the whiteboard is "box," which is similar to the 3d boxes you might put objects in. Even better, it puts her in an excellent position to deal with the nuanced behavior of reference mechanics when she gets there. If you're used to thinking of variables as spaces on a whiteboard, writing references to objects, like referencing the members of your family by name, is easier. For many people, the jump to reference mechanics is a real struggle because they got used to the idea of "x is my bear, that's in a box on the shelf" rather than "x is a variable referencing my bear. Y also references the same bear." (I personally have struggled to help people with reference mechanics because it forces them to unlearn whatever models they used up to that point, and unlearning is hard) You can even use different color markers for references and data. That starts to get them used to the idea that there is some fundamental difference between the word "dad" and a reference to Golo Roden. 

Peer Instruction materials exist for Discrete Math, for instance Cynthia Lee's Peer Instruction questions from Stanford. You may be able to adapt some of the questions to fit your needs for a HS course. To your first point, I find Peer Instruction to be an excellent balance of lecture and active learning. There is direct content delivery, but it is short, and punctuated by active Peer Instruction questions that get students talking and allow the instructor to know that the students are actually thinking :) 

Have you considered the social aspect of your class? For most people, I don't think there's anything more motivating than working towards something you want with people you like. And even if you're doing hard, boring, or confusing work, if your friends are doing it, you'll want to give it a shot too. If your buddies are excited about their future in the field, then you'll very likely become excited too. It's peer pressure. It's infectious. This is the reason that cohort models are so powerful. With more time around a group of people, taking all the same classes at the same time, you build deep bonds that make you more excited to come to school every day. Proximity is the strongest predictor of friendship. I have used this approach to build strong cohorts among students I worked with (18-25yo college students). This is done by frequent teambuilding, constantly mixing up their seating, active learning, pair programming, talking about how they are a cohort, calling them a cohort, reiterating how we're all working together towards our goal, etc, etc. In my setting, students were excited about graduating with their CS degree and getting a great job. Sounds like it could be similar in your case. I'm sure this looks a little bit different for older adults, but everyone loves being part of a group that's going somewhere. My recommendations: 

It's almost impossible to convey a sense of wonder when they don't appreciate what they have. My personal favorite approach is to point out that the Apollo Guidance Computer (AGC), which sent us to the moon, was a 2Mhz processor with 2k of RAM. The original Game Boy had a 4MHz processor and 8k of RAM. The old game boy was more powerful than the AGC! Well, almost. The AGC did have triple redundancy on all circuits, so you would have to duct tape 3 Game Boys together if you really wanted to compete with it! And, of course, a modern cellphone chuggs along at 1800Mhz! I find it helps to first appreciate just how blindingly powerful and fast computers actually are. Then we can talk about where they came from. One of the calculations I did a while back was comparing the speed of a cache hit versus going out to memory to get the information. It turns out, due to serendipity, that the difference in speed between a L1 cache hit and a round trip to memory is actually the same speed difference as that of a Cheetah at full sprint vs. the top speed of a snail. No joke! Of course, that doesn't help if you don't have a sense of how fast either of those are, so let's compare them both to something we can appreciate: how long it takes to load a web page. There's a latency associated with going across the world over fiber optics. It turns out that your round trip ping time from America to Europe (the absolute bare minimum portion of loading a web page) can be put on this scale between cheetahs and snails. This web page access proceeds at the speed of the San Andreas fault slowly opening in California! Yes. On this scale of speeds, California actually starts sinking into the ocean! 

I don't think there are shortcuts hereâ€”the students just need more foundational knowledge before they can be independent. It takes significant expertise to be able to transfer knowledge to new contexts [ref]. Novices have shallow knowledge that is closely tied to shallow features. As an expert, you have insight into meaningful patterns in your area of expertise. You have also seen many, many different problems and cases that you can relate to current problem-solving. Your knowledge is organized in terms of its applicability to new problems [ref]. It seems so straightforward from your perspective! But think about the challenges facing novices. To them, the problem looks different than anything they've seen because they don't recognize the generalities. Do they even know what words to Google? I agree with other posters that confidence is necessary. Knowing good resources to use (e.g. user-friendly documentation) also helps. But most important is foundational knowledge. Teach your students well, with many examples, and as they learn more they will begin to seek out knowledge on their own. 

You ask an excellent question. That means it's a hard to answer one! The example happens to be an especially difficult little program to write because its operation is so entwined with the way Linux approaches process management. On Windows, for example, one uses the function, which avoids a lot of the oddness of the steps you refer to. However, I recognize you intended your example to just be an example, so I'll try to use it to point out how other software might be written. I'm a big fan of serendipity. Last night I was watching a bunch of Russian physicists discussing consciousness with the Dalai Lama. In it, one of the physicists brought up a model Einstein used to depict his notion of modern physics. In a letter to Maurice Solovine, Einstein depicted how modern physics works like this: 

Can you see how murky that would be if you blurred the 3 hats? It needs to be clear that, in this process, you will have at least 1 person in your corner: your Scrum Master. If they can't see that, they may rebel against the idea. Now sprint planning will be the last major challenge I think. There's a few issues here. One is that you have too many people on the team. SCRUM teams work best in small numbers. A classroom is likely too many. You will probably have to adapt the sprint planning process to fit reality. The other challenge in planning is that your students aren't the experts here. You are. They don't really know enough to break down the backlog items into tasks that can fit into the sprint. As a result, you may have to help. As part of the Product Backlog, you may want to provide suggestions for how to approach each curriculum item (such as "Lecture" and "Problem set A" and "Problem set B" and "Research"), along with some way of estimating how long the task should take. Let them assign the story points -- it's an essential learning process for SCRUM. If they want to try to learn the curriculum in a different way from what you provided, then you may need to introduce the concept of the Sprint Goal, and explain how they can use that to provide cohesion. Also, do remember flexibility. As a PO, you are going to have to demonstrate to your customers that these students learned the material. That's all. If you can work with them to find clever ways to demonstrate that they are learning what they need to learn, then always let them deviate from the obvious curriculum. If you're teaching sockets, do you really need the backlog item "Learn to use ?" Or can we add a new item "use asynchronous threads to add functionality to the awesome product produced last sprint?" The answer really depends on how much freedom you have in your curriculum. 

Help students make improvements to a toy website with git & Github I have taught git and Github basics with this activity from OpenHatch. It was successful for helping students learn git basics: clone, add, commit, push, and pull, as well as Github basics: making an account and repo, submitting an issue, and making a pull request. In the activity, small groups work to improve a small website housed in a Github repo. The site is also hosted on Github, so they can see changes immediately. Issues are available in the repo for students to claim and then work on. Students really see the difference between running the site locally and seeing the version hosted on Github. It requires some setup before hand, since students interface with a real Github repo. But it's worth it, since students get to use git in a realistic way (and so they have contextualized knowledge!). Another bonus is that no specific programming language is required, since students can modify text in HTML to complete tasks, or hack some javascript for the most advanced tasks.