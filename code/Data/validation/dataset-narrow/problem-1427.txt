It sounds like you are asking a question about Game Theory. This weird branch of math-psychology-business contains a number of "games" that sound exactly like what you are asking for, such as the Ultimatum Game and Prisoner's Dilemma. Each player makes a very simple yes/no or numeric choice, results are compared to an outcome table, and players typically follow algorithms that are based partly on math/logic and partly on a subjective sense of fairness. 

In my experience, conversations with NPCs in games are always scripted. Natural-language parsing and sentence formation are difficult and mostly unsolved problems at this point, so we fake it. To the extent that there's anything that could be called "AI" you can do one of two things, both of which still count as scripting in my book: 1) Flags. If the player has taken a certain action in the game, or earlier in the conversation, or whatever, then set a flag on the NPC that makes them treat the player differently. Think of every RPG you've ever seen where the palace guard tells you the princess has been kidnapped, until you bring her back, at which point he says something else. 2) Numeric ranges. The player has one or more numeric attributes. These might be global attributes (Karma in Fallout 3, Light/Dark side points in Knights of the Old Republic, etc.), or specific to that NPC or that NPC's faction (like your friendship/romance levels with other characters in The Sims). If your value is higher or lower than a certain threshold, the NPC treats you differently. 

Red flag: your design is missing a "hook" -- what is it about this game that would make someone want to play it? There are only about a zillion racing games, ranging from hyper-realistic NASCAR to powerup-based kart-racing, 2d to 3d, single to multiplayer. There are racing games for arcade, console, and PC, and probably a bunch for Web and smartphone, too. I'm not seeing anything in your design that hasn't been done before many times; where does this game stand out? What does this game give you that you can't get from dozens of other similar games in the genre? Start there, before figuring out details like point scores and number of laps. 

Mostly done through randomized starting positions and a variety of opponents that each have their own strategies / special abilities. 

For people with no programming experience, I usually advise they start in the first category, just to get started doing SOMETHING. When they feel comfortable with a given authoring tool but are really feeling like the limitations are outweighing the benefits, it's time to learn something in the next category up. 

One question I'd like to answer even if you didn't ask directly: SHOULD game designers involve programmers in their design meetings? (As others have said, whether they actually do or not varies from team to team.) I think this is an emphatic YES. A programmer's job is, essentially, to turn the designer's ideas into working code. For that to happen, the programmer needs to have buy-in to the design, whether this comes from feeling like they have creative input, or merely that they are "in the loop" in terms of the current state and direction of the game. Especially in teams where the designers are not strong coders, it is also vital that programmers have "veto power" over any designs that would be more difficult or time-consuming to code than they are worth... especially if they can suggest trivial-to-implement alternatives. Programmers also tend to be good at finding holes in the design, because they are thinking in terms of "how do I code this" so a missing detail will stick out to a programmer easier than it will to a designer. 

It varies widely. Ballpark is 8 figures for a big-budget ("AAA") title these days... i.e. 10 to 100 Million (US $). But a lot depends on how you count, and there are tons of exceptions. Here's a good way to guesstimate: 1) How many people on the team? A small team is around 20-30 people, large team would be several hundred. Look at the credits of a few games you own (either on the Credits screen from main menu if there is one, or in the back of the instruction book... or just check www.mobygames.com). 2) What was the length of development? Typical range for AAA development is 2-5 years. 3) Where was it developed? Games made in San Francisco are going to cost more in payroll than those made in Denver. Look up the IGDA Salary Survey, adjust for cost-of-living of the area, and cut it by a small amount because the Salary Survey is slightly inflated. If you have a particular kind of game in mind, find some similar games (same genre, comparable production values) and you can probably research all three of the above things for a similar title. Then, multiply: size of team (number of people) X length of development (years) X average annual developer salary ($/year). That gives you the baseline development cost in payroll. Example for a small game: 20 people X 2 years X $40K/year = $1.6M Example for a large game: 200 people X 5 years X $60K/year = $60M What about other "operations" costs (office space, computer hardware and software, electricity, payroll services, etc.)? Ballpark, estimate those as 25% of the total dev cost, with payroll being the other 75%. So multiply the above figure by an extra 4/3 to get the final dev cost estimate. If you want to include publisher costs (manufacturing, distribution, advertising), ballpark that as equal to the dev cost, so multiply your figure by 2 to get the final total cost of a game. Hint: next time you hear someone complain about how video games are so expensive because they cost $60, remind them that the little package in their hand cost a lot more than $60 to develop :) 

The good news about card games is, they are some of the simplest to program, so this is a great first project for getting into game dev. Why? Because you don't have to deal with a great deal of graphics (simple sprites for the cards, no scrolling, no 3d, not even necessarily any animation) nor do you require realtime input (when you say "trump based" I assume this is a turn-based game where you select cards one at a time to take tricks), so the event-driven programming that you're used to in more general software development can apply here just fine. If you're an experienced programmer, there are likely only two things you'll need to learn here. One is how to draw sprites to the screen, which is not terribly hard -- there are tons of libraries that will let you do this, PyGame has the functionality built in if you go with Python. The other is, assuming this is a multiplayer game to be played over the internet, you'll need to figure out how to establish a connection and send messages over a network. But that's really it... aside from that, treat it like any other software project. 

Since you mention "investors" - investors care less about your Great Idea for a game, and more about the team you've put together. Do you have people with a strong track record of executing a project, getting it done, and doing it well? If not, you'll have a hard time getting investment capital. The design doc is the first 1% of the work, after all. That said, if someone does want to see your design doc and you're really that paranoid about it, my advice would be to consult a lawyer in advance and have some kind of NDA (Non-disclosure agreement) that the other party can sign before you show them anything that would be potentially damaging to you if they "steal" it. NDAs are pretty common in this industry. As others have said, no one is going to steal your idea (they have too many of their own as it is), so it comes down to how paranoid you want to be. And for the love of all that is holy, have a working, playable demo to show. That is the bare minimum bar to hit if you're trying to get funding. If all you have is paper, then you have failed to show any ability to turn it into reality, and you'll be politely shown the door. 

I can't say I have any inside information, but given the finite number of shapes (note how even in your screenshot two of the large-asteroid shapes are repeated), I always assumed it was hard-coded. You could certainly reproduce it that way if you were going to build it today. 

I'm assuming this is a game balance question and not a coding question, and there are a lot of ways to handle this. From your existing algorithm, I suspect you are making it more complicated than it has to be (three attributes AND a random number make for an extremely muddy system from the player's perspective). My first instinct is to simplify! Favor attributes that do multiple things, rather than results that are determined by multiple attributes. DEX works just fine as the primary determiner of to-hit chance; the addition of everything else just serves to make it harder to balance. Think of it this way: a player's expected damage on each hit is their to-hit % multiplied by their average damage when they do hit. How do you plan to calculate an "expected" or "typical" to-hit % with so many variables? I see another issue, which is that your formula doesn't scale, and this is probably what you're experiencing. Assuming DEX, LUCK and SPEED tend to increase over the course of the game, differences between player and monster in those stats will also tend to increase. Just as an example, if a player's early-game DEX is in the 4 to 6 range and so are monsters, that's a 10-20% to-hit modifier. If the range is more like 10 to 20 in later stages of the game, that's up to a 100% modifier. One way to fix that is to keep the stats fixed. Player and monster ranges are the same throughout the game, and getting something like +1 DEX is a huge deal, extremely rare, and treated as such (if it exists at all). Then your formula will work fine for the entire game, and you'll see a player with about the same to-hit chance throughout. Another way is to change that hardcoded "10" to scale with level, so maybe it's "10 + monster level" or "10 + dungeon level" or something, which causes a slight increase in difficulty as the game progresses unless the player levels up their stats accordingly. A third way, as others have said, is to set hard caps on the highest and lowest acceptable to-hit %, and simply say "if the calculated value is less than X, use X instead". For the sake of completeness, I'll point out that there's no absolute law that you MUST include a to-hit roll in the first place. Taking an action in a game that's ineffective is not particularly fun, and doesn't really add to the experience except in rare cases. An alternative is to let players ALWAYS hit, and just mess with the damage range so that sometimes they'll do a lot less damage than others. Remember that complex systems are more fun for the designer than the player. 

Most 4X games I've seen do not actually achieve this. AI in a 4X game is a really hard problem; the solution for many games is to keep it as a "dumb" AI but give it numerical boosts (faster production/growth curve). My understanding is that AI is usually developed through trial-and-error and playtesting; start with a fairly simple AI, play until you see it do something really stupid, then figure out how to make it so it doesn't do that stupid thing anymore... and repeat. Not particularly interesting or glorious but it works. 

Does your studio not have access to legal advice? Ask an attorney specializing in contract law to draft a contract that clearly spells out everyone's rights, responsibilities, and ownership. As for "who owns what" -- it can be whatever all parties agree to! If this is unpaid work, you'll probably want to contact someone about this anyway to make sure the agreement is legal; I hear that in some states, "unpaid internships" are not allowed, for example. While you didn't ask, I'll give you two caveats with this kind of "industry asks a student team to make a demo" project: 1) Student projects don't always work. Sometimes the students don't have the skills to pull it off, or they don't get it done in time, or they turn in something that's only partly done. 2) Expect zero support after the academic term is over. Students will TELL you they want to keep working on it, but in practice they almost never do. Choose a project accordingly :) 

"Game design" is an incredibly broad field that likes to include level design, systems design, and story writing (among many others) under its umbrella. When I think of game designers, though, I think of systems designers: the people who write the specs that get implemented by programmers. And yes, spec-writing is a skill that is used in the greater software industry (these people are sometimes called "systems analysts" or "program managers" or lots of other names) - just look at all of the "design" articles on joelonsoftware! This goes triple for designers who specialize in UI, since the principles of designing a good UI are still largely the same whether you're making a game or a business application. So, yeah, the skills transfer quite nicely. One caveat: not everyone in the software industry knows what it's like to work in game development. There is still the stigma of "oh, you used to get paid to just sit around and play games all day? We actually do Real Work here" that has to be overcome in some companies, so you may have to convince people that a game developers is actually one of the hardest workers and most skilled labor they are likely to find. This might mean, for example, carefully crafting your resume and cover letter to focus on job responsibilities that sync well with a given posting, and downplaying the "games" aspect. 

Lots harder. If you're not comfortable making a 2D game, you will REALLY not like what it takes to make a 3D game. The good news: 99% of the time, you don't really need it. Think of any 3D game you can. Take the camera, fix it on the ceiling looking down so that you're now looking at a 2D plane. Doom becomes Gauntlet. Civ IV becomes Civ I. Metal Gear Solid becomes the original Metal Gear. None of these games are "bad" just because they're 2D; they are perfectly playable and generally have much of the same gameplay.