Doing this each view requirement would be a case of incorporating the partials in as required. Pitfalls on view model composition and partials: On problem with this approach I had was that when using these viewModels within the views the resultant elements created meant that the bindings did not come back on posts. What was happening was that I would render a partial as such 

Personally I try to keep the view models as close to DTO's as possible. That way you can have any number of objects populating the data from any number of sources. And, as you mentioned, it helps keep them lean and free of domain logic. If there was only one particular method of doing the transformation I might look at existing mapping solutions i.e. AutoMapper. Alternatively as you suggested I might create a separate builder class that was responsible for doing the building. The main problem I have with doing it your way (apart from those mentioned by Larry already) is that it tightly couples the ViewModel with your model. Re-using the viewModel in different contexts becomes harder. Also, if you were to to TDD, I might find it a bit strange writing a test like: 

We could perhaps do away with the bulk of the children class code by implementing a bit of logic in the base class. A starting point for discussion would be something along the lines of: 

Then using an IOC container (Ninject, AutoFac, Unity are a few I've used. Or see this blog by Scott Hanselman for a list of what's around) I would inject these into my controller. The setup of the dependency registration would be dependant on the IOC implementation. 

Although this might be overkill I would also consider separating the methods for doing the authentication into their own classes. I believe this may help with being able to do unit testing against each class in isolation as well as not separating the responsibilities out of whichever class is handling identifying which process to use etc. Something like this perhaps. 

I don't see anything that stands out in this. It's fairly small and quite compact. The only thing I might suggest is changing the public fields to properties. 

I'm not sure of the purpose of the () method. If we are reading the file when we first access the singleton instance why do we need this method at all to be public? could we not ensure it exists in our constructor? When using the singleton pattern I always like refer to Jon Skeet's article on it. 

How about something like this. It's pretty much what you have but all I have done is seperated a couple of the parts into methods 

I like your solution as well. The only thing I might consider doing differently is making input a private instance variable which would mean all your input parameter requirements to the methods would no longer be required. Something like: 

The downside from this from what I can see is if you use this parser in alot of places then you will need to handle the exceptions accordingly. However the upside is that if you wish to do different things based on the reason why something failed then you can catch individual exceptions as required. Offered as an alternative for consideration in any event. 

I guess if I was doing TDD I would have created the view model and stubbed the MySpecialService first and created perhaps a test like 

Now I don't know about the BONUS option, but if you wanted to further eliminate the need to always be specifying the Scheme and Host when Creating the action you could consider writing an extension class on UrlHelper. 

I think in this case I would simply make a private method to capture the duplicated code. I probably wouldn't mind about the extra call to the SaveChanges() as it's only one line and removes any need for further complexity on the code. 

Then create an implementation of errorHandler that wraps a StringBuffer (if you wish or whatever i.e. FileWriter, DbWriter etc) 

or if you wanted to make it explict that the ProductViewModel always needs parameters then create the constructor to take the IFooRepositoriesContext: 

Firstly I would consider injecting the DbContext into the repository. Even though your RepositoryBase class is abstract I would have a protected constructor 

I agree with everything Simon has suggested. But to add a slightly different approach (albiet a bit over the top maybe for this question), I would consider removing the need for the exception altogether and introducing a couple of methods. Even being simple, by moving some things into methods I believe it helps with readability as well as abstracting away some of the method details so that the main method can concentrate on flow, not the rules within that flow. The resultant code might look something like: 

Now from your question you state that you do not intend to use the method anywhere else. Your example tends one to think it would be beneficial in other situations as it is fairly generic. In that situation I would be leaning towards an extension method as others have pointed out. However I often find myself in the situation where a block of code will be repeated in a function and only the variables passed in will vary dependant on local switches etc In this situation I think it's perfectly reasonable to create a local delegate and use that in the function only. So, to summarize. Yes I think it's acceptable. In your example, probably not, but in situations where the block of code is local only to that method and you know that is the case, then yes. You can always refactor later! 

Pass in a delegate that handles the changeable part Use Template method pattern to implement the changing parts Use composition and DI to inject the different elements 

in most of your methods and then comparing the result to check whether it's null or not. By definition single expects there to be exactly one element that matches your query. If there is not one element (0), or > 1 an exception will be thrown. 

Adding a new Urgency then becomes a matter of adding a new class and adjusting the if else in the Urgency property. 

Honestly if a colleague said that to me then I would immediately say. Great thanks. What do you think I could move out and why. It's great to offer feedback but generic feedback like that for me was never useful and I personally always prefer specific help to follow. Looking at that code it doesn't look like you any logic there to play with, so unless he is meaning the Model -> ViewModel mapping then yes, you could move that to a Mapping layer but I don't consider that a necessity. If you were considering that the code would probably benefit from using a tool such as AutoMapper to achieve this. Using AutoMapper The trick here is you define your mapping rules in the AutoMapper configuration so they can be reused whenever you need to map X -> Y. 

What about seperating your sorting from your criteria? I'm like you, I'm sure there is another way so am interested to see other opinions. I'm not exactly sure if this would scale for multiple orderBys either but I think it might (NOTE: this code is untested and some types are not defined) Something along the lines of: 

I would probably say yes. You are tying UI concerns in your business models. Why does your model even care about the text that is used to display it? It should be more concerned with buiseness rules and performing buiseness operations I think. Let your UI layer/layers deal with presenting it to the user. 

I personally think this is fine if the concept of creating a , is directly tied to creating a , i.e. one cannot live without the other. That is because the abstraction of the method CreateAccount() hides away the implementation details of what needs to be done (insertion of data into 3 tables). As you already have this abstraction you are now in the postion to potentially refactor the CreateAccount without effecting the rest of your code. Excellant! So, as an option, I might consider refactoring the service layer itself so that the CreateAccount() method is a bit more streamlined, as you put it.