If $f$ is an elementary symmetric polynomial over a finite field then it can be computed by polynomial-size uniform $TC^0$ circuits. If $f$ is an elementary symmetric polynomial over a characteristic $0$ field, then it can be computed by polynomial-size depth three uniform algebraic circuits (as you already mentioned the Newton polynomial; or by the Lagrange interpolation formula); and so I believe this then translates to polynomial-size uniform Boolean circuits (though perhaps not of constant depth) (but this may depend on the specific field you're working in; for simplicity you might consider the ring of integers; though for the integers I presume $TC^0$ is enough to compute symmetric polynomials in any case.) If $f$ is a symmetric polynomial over a finite field then there is an exponential lower bound on depth three algebraic circuits for $f$ (by Grigoriev and Razborov (2000) [following Grigoriev and Karpinsky 1998]). But, as mentioned in 1 above, this corresponds only to constant-depth Boolean circuit lower bounds (while there are small uniform Boolean circuits in $TC^0$; meaning also that the polynomials are computable in polynomial-time). 

To my knowledge, such a reduction is in fact known: Hrubes and Wigderson ITCS 2014 show how division gates can be eliminated from non-commutative circuits and formulas which compute polynomials. They also provide exponential-size lower bounds for non-commutative formulas with division (not circuits) that compute any entry of the matrix inverse function $X^{-1}$. Moreover, your main question about lower bounds for non-commutative circuits, is not known (while for formulas it is known as mentioned above), because non-commutative circuits in which each gate computes a polynomial (not a rational function) with division constitutes a class which is at least as strong as non-commutative circuits. But there is no known super-polynomial non-commutative circuit lower bound (see [Hrubes, Yehudayoff and Wigderson STOC 2010] on this). 

What is quantum analog of multiplexers? What does the matrix of f-CNOT gate look like? How can I design quantum circuit for any boolean function? 

I am trying to figure out how quantum computers work. Diagram above is what I "think" f-CNOT gate should look like. Given a description of a function it is trivial to design classical circuit to calculate it using multiplexers, logic gates etc. 

Read more in this survey paper Certifying algorithms by McConnell, R.M. and Mehlhorn, K. and Naher, S. and Schweitzer, P. 

Space savings: $log_{10}$ roughly computes length of a number in base 10. If you store a number N, as a string then $L \approx \log_{10}N$ bytes are required (assuming 1 byte per char). But if we use representation of numbers given above then approximate number of bytes needed are $\approx \log_{10}L$. Reason for this is lots of zeros in the number. $$space \ savings \approx 1 - \frac{log_{10} \ L}{L} = 1-\frac{log_{10}\ log_{10} \ N}{log_{10}\ N}$$ Python Code: 

Take 100 papers. Sort by number of citations. Take top 50. Go to the list references at the end of each paper. Make a using all those references. Sort by number of times some paper appears in the . Choose top 15 papers. Read. Read. Read. Read one more time. And just once more. And now you will be able to tell papers you should read from those you shouldn't without much effort. 

It is well known that random $ k $-CNF formulas over $ n $ variables with $ cn $ clauses are unsatisfiable (i.e. they are contradictions) with high probability, for sufficiently large constant $ c $. Thus, random $ k $-CNF formulas (for $ c $ large enough) constitute a natural distribution over unsatisfiable Boolean formulas (or dually, over tautologies, i.e. negations of contradictions). This distribution has been studied extensively. My question is the following: are there any other established distributions over propositional tautologies or contradictions, that can be considered as capturing the "average-case" of tautologies or unsatisfiable formulas? Have these distributions been intensively studied? 

The following result by Raz (Elusive Functions and Lower Bounds for Arithmetic Circuits, STOC'08) is aimed at $VP\neq VNP$ (and not directly $P\neq NP$), but it might be close enough for the OP: A polynomial-mapping $f:\mathbb F^n \to \mathbb F^m$ is $(s, r)$-elusive, if for every polynomial-mapping $Γ : \mathbb F^s → \mathbb F^m $ of degree $r$, Image($f$)$\not⊂$ Image($Γ$). For many settings of the parameters $n, m, s, r$, explicit constructions of elusive polynomial-mappings imply strong (up to exponential) lower bounds for general arithmetic circuits. 

For strong enough proof systems the graph representation of a proof in the system seems less consequential, since (as Joshua Grochow already commented), DAG-like and tree-like Frege proofs are polynomially equivalent (see Krajicek's 1995 monograph for a proof of this fact). For weaker proof systems such as resolution, tree-like is exponentially weaker than DAG-like proofs (as Yuval Filmus described above). Beckmann and Buss [1] (following Beckmann [2]) considered restricting the height (equivalently, depth) of the proof-graph of constant-depth Frege proofs and investigated the relationship between DAG-like, tree-size and height of constant depth Frege proofs. (Note the distinction between restricting the depth of the proof-graph and restricting the depth of a circuit appearing in a proof-line). There might also be separations between tree-like and DAG-like Nullstellensatz (and polynomial calculus) proofs, which I currently don't remember. 

I was given task similar to yours on my job. I used two things given above. Both the things work and should give you general idea. In the end you will have to do some tweaks that are specific to your graphs. 

If Statement I is then do we have solution for GI problem? Note: I am n00b in this field. I invent funny techniques daily. 

I haven't read the paper you linked to but a must must read paper on Bell Inequalities is Hidden variables and the two theorems of John Bell by N. David Mermin. He has written a lot on Bell Inequalities. 

Those on the left are s and on the right are s. It is easy to see that every vertex in has degree . This paper claims that graph isomorphism of such graphs can be tested in polynomial time. Also, can be converted to in polynomial time. Statement I: G1 and G2 are isomorphic iff T(G1) and T(G2) are isomorphic. EDIT: Specifications for G1,G2: 

$X = \{\{0,5\}, \{1,4\}, \{1,1,3\}, \{1,1,1,2\}, \{1,1,1,1,1\}, \{2,3\}, \{2,2,1\} \}$ $X$ is partition of 5 where only single digit numbers are allowed. Observation: Any number with digit sum 5 can be represented by permutation of one of the above sets stuffed with 0s. Example: $\begin{eqnarray*} 14 \rightarrow 10^040^0 \rightarrow 14:0,0\\ 104 \rightarrow 10^{1}40^0 \rightarrow 14:1,0\\ 10000000000004 \rightarrow 10^{12}40^0 \rightarrow 14:12,0\\ 100040000000000000000 \rightarrow 10^{3}40^{16} \rightarrow 14:3,16   \end{eqnarray*}$ All these four numbers can be stored in a dictionary with 14 as key and list of number of zeros to stuff between each non-zero digits. 

The question seems quite open ended. Or perhaps you wish to have a precise characterization of the time-complexity of any possible symmetric polynomial over finite fields? In any case, at least to my knowledge, there are several well-known results about the time-complexity of computing symmetric polynomials: 

Yes. If $ 0< \epsilon <1$ is a constant (or $1/\textit{polylog}(n)$), and you are promised that at least $ \epsilon 2^n $ of all possible assignments are satisfying the input 3CNFs, then you can find such an assignment in deterministic polynomial-time. The algorithms is not difficult: Claim: Under the promise stated, there must exist a constant size set $ S $ of variables that hits all clauses in the 3CNF, in the sense that every 3-clause must contain a variable from $ S $. Proof of claim (sketch): Otherwise, there must exist a large enough family of 3-clauses from the 3CNF, in which each variable occurs only once. But this family, when sufficiently large, has already less than $ \epsilon $ fraction of satisfying assignments. QED Thus, you can run over all possible (constant number) of assignments to $ S $. Under every fixed assignment to $ S $, the 3CNF becomes a 2CNF, by the assumption that $ S $ hits the original 3CNF. Now, you can use the known polytime deterministic algorithm for finding a satisfying assignment for 2CNF formulas. Overall, you get a polynomial time upper bound. The algorithm for 2SAT is I think already in S. Cook famous 1971 paper. The algorithm for 3CNFs is from: L. Trevisan A Note on Deterministic Approximate Counting for k-DNF In Proc. of APPROX-RANDOM, Springer-Verlag, page 417-426, 2004 The original paper showing the result for 3CNF is: E. Hirsch, A fast deterministic algorithm for formulas that have many satisfying assignments, Journal of the IGPL, 6(1):59-71, 1998 

Lagrange Multipliers (Entropy example) Relation between crossing numbers of complete and complete bipartite graphs Simpler version of Stirling’s approximation It is impossible to write computer game without calculus. Many computer games use calculus. 

Suppose, transformation is defined as given in the diagrams below. Every vertex () is replaced by . And then graph is reconnected as shown. 

There is a course at MIT OCW called Mathematics for Computer Science, it lists some topics you MUST cover. Learning some Abstract algebra will be a big plus. Because I see too many references to group theory in literature. 

DAWGs are most probably posets and close relatives of Finite Automata. So special properties of posets and FA should apply to DAWGs too. 

cr(G) - Crossing Number is minimum number of crossings with which a graph can be drawn. If you are using only straight line edges then its called Rectilinear Crossing Number. Determining cr(G) is NP-complete. Circular crossing minimization is NP-hard. This paper suggests heuristics to minimize number of crossings. This might be the thing you are here for. Crossings in circular layout >= Crossings in any general layout Rectilinear crossing number >= Crossing number 

This algorithm uses graph minimum cuts to classify large amount of unlabeled samples using only small amount of labelled samples. Its undergrad friendly. I have explained this to a few randomly chosen undergrads and they understood it. Ref: Blum, A., & Chawla, S. (2001). Learning from labeled and unlabeled data using graph mincuts. Self promotion Visualization of the algorithm on youtube.