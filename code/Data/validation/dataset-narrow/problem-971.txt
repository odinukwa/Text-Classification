is a "Virtual Disk"... probably backed by a file by the hypervisor. It looks like you're using Xen as the hypervisor. From the output you've posted, we can see that you have a 48GB partition, with a filesystem that is only using the first 28GB. Thus, you need to expand the filesystem to use the whole partition - they are two independent things. If you're using ext2/3/4 then you can use the following, which can be performed while the filesystem is mounted / online. This will automatically extend the filesystem to the length of the underlying device. 

You will also find that if you have indenting enabled, then pasting a block of code into vim (in insert mode) will indent too much - it'll auto indent, and then your pasted code will include indentation. 

Using will (as the manual states) "Restrict the rescue domain to the blocks marked as finished in the mapfile file." - i.e: only try reading the successful blocks. Again, as the manual states, this is useful in conjunction with other utilities to reduce the amount of data read, and potentially reduce the runtime and number of errors encountered. 

It's also worth pointing out that while Thunderbolt 2 claims 20Gb/s, Thunderbolt 3 can actually push up to 40Gb/s 

Not that I know of... I expect that the recommendations would be along the lines of my other answer. 

I'd strongly recommend that you just use - don't avoid a tool that is suited to the job, running it isn't hard, and you'll save yourself some stress. Invocation is simple: First run: 

These methods are replacing components with the relevant text. To avoid this, use one of the following approaches. Note the use of single quotes (), and a "quoted heredoc" (). 

As such, typing doesn't fit into the pattern above, and the omnibox will interpret this as a string to pass to a search engine. You have three options: 

As @sawdust has kindly reminded me, a stop bit is also important to ensure that we can successfully detect and synchronise at the end of one frame, and the start of the next. This would be difficult if frame one ends in a zero, immediately followed by frame two's start bit. ... and there we have it! A nicely framed piece of data. 

It looks like GitHub is trying to upgrade the connection to a protocol that your ancient version of (or even / ) doesn't support. Additionally, your certificates are going to be waaaaaay out of date. 

Port numbers are 16-bit unsigned - I suspect that the software was incorrectly displaying them as signed values... is , which is . Quake 3 uses the following ports by default [ref]: 

If you could share a photo of the sled and the M.2 drive you mentioned (or its part number), then it would help to avoid speculation... This SATA Express connector provides the 2x lanes of PCIe for the NVMe drive. So you'd probably be better off taking the NVMe drive off the sled, and connecting it to a more readily available M.2 socket. edit: From the specsheet, it would appear that this is indeed the case - "M.2 SSD / PCIe NVMe, PCIe 3.0 x 2, 16Gb/s". Do not try to adapt this to SATA - if you don't have a PC with SATA Express, take the NVMe drive off and use an alternative adapter. Be aware that most (all?) USB to M.2 adapters will only support SATA M.2 drives, which yours isn't. You may need to get a PC with M.2, or a full-size PCIe to M.2 adapter. 

Make sure you shut it down properly when you're finished (do not just press and hold the power button), don't throw it around or drop it, etc... 

You have the cameras plugged into two ports of a Root Hub. I'd guess that these ports are in fact connected to the Z170 chipset. You have to consider two things: 

Another option is to unmount the filesystem, and temorarily mount it with , forcing the lazy init to be more proactive, but performance will suffer. The default value is 10, so if performance is important in the meantime, perhaps try values in between. (ref) 

As @grawity has pointed out in a comment, will return the next free file descriptor, filling any gaps from zero. What you see above is a snapshot of files that are currently open, and will change over time. 

This would come to 10-bits per 8-bits of data, which wouldn't work well in a file that stores 8-bits per byte anyway - add parity or another stop bit and you exacerbate the situation further. Additionally, once you become interested in the framing, you should really also be interested in timing information such as baud rate and frame-spacing - something that your commands don't even configure. 

RJ-45 doesn't mean Ethernet, and Ethernet doesn't mean RJ-45. It's quite common to find RJ-45 wall sockets in office buildings that have been patched to an analog telephone system - though with VoIP this is becoming less common. Ethernet (like DOCSIS) outlines the signals and cable requirements, but it also outlines options for the connectors used. 

I then subsequently register as 's name server with my registrar. We can't resolve the address of without first knowing who is responsible for . Once we know that is the name server for won't we get stuck? Surely there is no way to contact because the A record identifying their IP address is held by that same server...? Presumably there is a step that I'm missing in the lookup... 

This is likely due to your ... try specifying the full path to or . The SSH session, without a shell or PTY will most likely have a very basic set... 

Parity is optional because it's related to assuring the integrity of the data - facilitating the detection of corruption. Nothing in the world is perfect (sometimes I'm amazed that anything works), and knowing if the data that you just received is valid is mighty helpful. Unfortunately, the specification is very old, and the parity bit only permits us to detect an odd number of bit flips. If there are an even number of bit flips, then the parity cannot detect this. Today we have much more advanced error detection, end even correction technologies, which are able to detect (or even correct) an amount of corruption. Protocols that run over UARTs today typically do not use the parity bit, and prefer instead to use a checksum to ensure the integrity of the data transferred. You'll also often see UARTs used to interface with a device - a serial console. In this case, the device is interfacing with a human, who will either not notice or not care that the data is corrupt (they could just re-run the command). Finally, UARTs today are generally used on very short links, with good strong drivers - making noise and corruption at the physical (electrical) level much less of a concern. 

This is more appropriate for StackOverflow... in fact it's been asked many times before! Inspiration from this answer. 

Split the network into "Trusted" and "Untrusted" zones, and as you get deeper, the trust levels go up (the reverse of what you've proposed). You might need to get couple of extra bits of hardware to accomplish this. The router on the border of Trusted / Untrusted could be what is often referred to as a "Cable Router" in the consumer space. This means that it has an Ethernet / RJ45 WAN port, not a DSL port. Using one of these would probably give you the behaviour that you're after - Internal Hosts would not be accessible from your Guest Wifi (without setting up port forwarding / NAT), but the internal hosts can still access the internet, and potentially the Guest Wifi hosts. 

The issue you have is that your versions of // are stuck in the past, and with the advances in security, you'll find that much of the internet will become inaccessible for you. You will be able to access HTTP, and some HTTPS servers (but not all). As the packages for are gone, I tried building a more recent version of wget, but alas, I have no compiler: 

It's also worth pointing out that the M.2 slot on your motherboard that supports SATA will be doing pretty much exactly the same thing, it's just that the signals are all on one board. NOTE: this means that using "SATA mode" on the motherboard's M.2 slot will likely "use up" one of the SATA connectors, so make sure you read the manual! 

It's possible, yes. If you were to perform a "Verify and Repair" type operation, then it is possible for bad data to be considered correct, and for the parity device to be updated... even when the parity device is in fact correct, and one of the other devices is at fault. 

The H110M-R uses the H110 chipset - which supports "Up to 4 USB 3.0 ports", so I'd expect similar capabilities - if you are connected to the motherboard's USB 3.0 ports directly. But from your wording I suspect that the cameras are connected via a physical / external hub on this PC... in which case all of the camera data needs to be transferred over the single USB 3.0 link between the hub and PC. If this is not the case, then it could be a driver or architectural improvement between the chipsets... 

Ideally, only power it from one source - laptop or battery. If you need to power the Arduino from battery continuously, then look into disconnecting the 5v line between the computer and Arduino... this may require removal of a component, or a bit of work on an old USB cable.