I'm upvoting David's answer, but started writing a big comment talking about other stuff so I'm just putting it as an answer. GameMaker is probabl your best bet. He can start off by clicking and dragging Actions in response to Events. Then he can start learning to express these things in code with GML (Derek Yu's tutorial series is good). After a while he'll start to ask, "Why can't I execute this type of code in this type of situation?" That's when you start him with Python. Try going through Invent Your Own Games With Python. It starts with basic programming, guides you through making a couple of ASCII games (Hangman, Tic Tac Toe, etc.) then builds up to using PyGame. And then he can coast on PyGame for a while :) 

I hadn't noticed the FromStream method, that's a good one to remember. I'm now curious about using FromStream vs DynamicSoundEffectInstance, since you could theoretically accomplish a lot of the same work with both methods. Google turned up this library: $URL$ And you could also conceivably call lame.exe from within your app to decode the sound. I'd be wary of MP3 though, it's a legal can of worms. Adobe pays a hefty fee to Fraunhofer for the right to use it in Flash. Ogg Vorbis is a superior format, easily converted from mp3 using free and open-source software, and there seem to be many more C#/.Net decoder libraries for it. 

Of course you'd want to introduce some timing compensation for the double button stuff, but this style of managing input has proven to be nice and flexible for me. Like ClassicThunder says, you're kind of stuck in a polling model with XNA. The system event work around works but only if you don't want to deploy to Xbox. 

Yes, there's an impact. How much that impact matters depends on the minimum hardware you want to target and what else is happening in the game at that time. But, before you run into performance problems, you'll run into ear fatigue problems with that many sound effects if you don't do some clever mixing. 

2. How do I use my new robot zombie sounds to generate music on the fly? This is a really open ended question, and is half of the fun of computer music. You can start somewhere as basic as selecting notes at random from a predefined scale, and then from there implement random rhythm variation as another step. People do everything from selecting portions of music from a database of pre-written compositions (there's a really really thick book on a project to get a program to write 2-part Inventions in the style of Bach), to applying genetic algorithms to an initial interval vector and apply the results to different starting pitches. Eventually you'll want to think about how to create larger movements of smaller, randomly generated musical components. As you start building up, this is where you can begin to insert game hooks. Maybe the angle of the mobile device can alter the range of notes, and when bad guys arrive you change the set of pitches in the scale to closer resemble a minor rather than a major scale, or adjust other properties such as attack envelopes and frequency of note events. Timing can be tricky, because you don't want to be polling the elapsed time of your audio source, but you also want to be accurate. Relying on "sound complete" type of events will generally be much too slow. In Flash you can get away with musical timing for long sound cues if a 50ms delay is acceptable and it wouldn't be too obvious if you faded out one sound then started it again on another channel in sync with everything else. The catch is you need to check Channel.position on every frame update, unless you're manipulating your own sample data, in which case you're crunching a lot of data anyway just copying stuff to the SampleDataEvent buffer. Performance aside, just use basic ratios to figure out beat and tempo to millisecond interval conversions. 

It's likely that the as3 class's sin/cos functions work in radians, so wrap the range to . Another approach is to think of it in terms of physics and orbiting bodies: Uniform Circular Motion (you may have studied centripetal force in high school physics). This page has a nice thorough explanation. The general idea is that you have a velocity that is parallel to the vector running from your orbiting point to the origin. Then, every step, this velocity is accelerated by a force perpendicular to that velocity (that is, it is the force going from your orbiting point to the origin); Roughly, in pseudocode: 

This started as a comment to bummzack's answer, but got long. Unless you actually make it asynchronous (dispatch events on a new thread), your objects are still getting the memo synchronously. Assuming your event dispatcher uses a basic hash table with a linked list in a cell, the order will be the order in which objects were aded to that cell. Further, unless you decide to use function pointers for some reason, you still are using virtual function calls since each object getting a message must implement IEventListener (or whatever you call it). Events are a high level abstraction that you build using polymorphism. Use events where you find yourself having to call a laundry list of methods for various in-game happenings in order to synchronize different systems in the game or where various objects and systems' reaction so said happenings are not able to be clearly defined or you want to add more reactions to said happenings in the future. They are a great tool, but like bummzack said, don't assume that polymorphism and events solve the same problem. 

This creators club thread suggests that WCF has some unnecessary overhead compared to just using the lower level socket API. Have you looked at a third party library like Photon? They're built on top of Enet (C++) and allow you to add logic via .NET. They handle providing infrastructure like message channels, packaging multiple messages, and reliable UDP. There's also Lidgren. Ryzom is a MMORPG that has open sourced their game. And be sure to check GameDev.net's section on multiplayer programming. 

Are you using or another library? Core Media Supported formats: $URL$ Peter Drescher on implementing sound in Android games via FMOD: $URL$ $URL$ He also did a presentation at the most recent AES convention in NY where he showed the equivalent implementation of FMOD vs Android for the Vector Pinball game, I don't know if he put his slides online though, can't find them anywhere. Ogg vorbis should work fine though. Make sure you start with one encoded and formatted as a basic stereo or mono 44.1kHz Ogg Vorbis file. 

That doesn't seem like a very useful way to do it IMO. Any profiling methods should introduce a consistent overhead, but relying on the callbacks may reduce accuracy. Try using the Date class. Or better yet, a legit profiler like The Miner 

Many audio playback libraries start a background thread to load/stream audio into memory and write to the output buffer. You adding another thread on top of this wouldn't do much without a lot of main loop tweaking and tuning (which is probably futile if you aren't specifically targeting XBLIG). 

I started writing this answer, and it just got longer and longer, so this will be the verbose answer, so take from it what you will. Like CeeJay said though, you don't need to worry about this stuff typically. Especially so if you can use an API like FMOD, Wwise, or XACT that lets your sound designer hook everything up themselves so that you're not saying "play this.wav" but instead "trigger the 'PlayExplosionSound' event" you'll have a much easier time integrating sound into your game. 

If you want to sell your game but not pay for a 3d audio library, you're pretty much stuck with OpenAL. It may cost money, but FMOD has an extremely well thought out API. Something else to consider is the added value of their EventSystem. It's not as robust as Wwise, but being able to define high-level sound events in an external authoring tool makes achieving high quality audio a lot easier. Stuff you would have to spend time coding is easily defined in terms of parameters and sound instances in FMOD. If only they allowed you to add events as well as sound instances to event layers. BASS from Un4Seen is another free-to-try, pay-to-sell library that supports Windows and OS X. 

I haven't used SDL, and very little SFML, but the consensus I get is SFML is like SDL, but hardware accelerated and object-oriented. A quick google of your points gave me the following: 

My perspective: I'm a student at NYU, been heavily involved in game development since sophomore year, worked on several projects, and I'm graduating from university this semester. Fundamentally, successful people will be successful. There's no getting around that. If you have a shiny CS degree and 4.0 GPA from UC Berkeley, you may still get passed on for a game programming job by someone from Some Lesser Institution Of Learning(TM) if they're able to demonstrate strength in the skills and knowledge required for a position--especially if they have a cool playable portfolio. People in other industries may be impressed by where you got your degree from, but it seems like game people care less about it on average. I'm attending one o'them debt monster "selective" colleges. I feel if I had gone to a less prestigious university back in my hometown, I still would have learned fundamentally the same things. However, what I'm really paying for is connections and opportunities that I might not be able to get at another school. Of course, all schools have opportunities and connections, they just have different types of opportunities and connections. For example, I'm loving it in NYC, but large game studios tend not to last long here. I'd like to work at a large game studio to get some experience working on AAA games. This may have been easier had I been going to school in a location with those kind of studios around. Similarly, since NYC is obsessed with tech startups, I've been immersed in that environment. The location in which you study can influence the paths you take. Of course you could always skip school and just move to an ideal location. But then you've gotta figure out rent and find a job right away, and maybe you still need to spend time building your portfolio and doing your independent study. It's doable, but college kinda puts you in this not-really-adult world where you can put a few of the real world concerns away for a bit while you learn. TL;DR Location matters. Don't be lazy. Also, college is great! 

Now for a tile class. I'm using a library called as3signals (alternative library: TurboSignals). It basically allows you to create C#-style delegates to get around the hassle of having to use Flash's standard event system with strings and EventDispatcher. You can accomplish the same thing using the EventDispatcher method, but it's much less sexy. The way it works is you have fields in your class that are of type Signal. Each signal has an add() function, which behaves like eventDispatcher.addEventListener, except that the listener you are adding is for that specific signal, and nothing else. It makes your events type-safe, so it's good for events where you know you will absolutely need them, such as OnObjectEnter and OnObjectLeave. Sure, you don't get the flexibility of arbitrarily defining event string literals to shoot out into the ether, but these things are pretty easy to use. And nothing stops you from using EventDispatcher in conjunction with signals. One thing that's nice about as3signals is you can define the type of argument that you send with the dispatch. In the case of the Tile, it will send a GameObject parameter, so that whoever is interested in the event will know which game object entered the tile. I just created two signal slots: and . These serve to notify other objects when a has entered/left the tile. This is what we will use to implement the teleporter. 

Farseer does ship a physics view, and thankfully it requires very little brain power to implement and use. If you downloaded the "Farseer Physics Engine 3.3.1 Samples XNA" recommended package on their download page, you'd see a lot of examples included. Navigate to (or click these convenient links to the codeplex page :P) to see example usage of . It boils down to this: 

Are you looking to have a text-based interface like typical roguelikes? If so, isn't the most obvious approach to store chars in a 2d array or other structure? Then you can concat each char to 1 single string (with newlines where appropriate) and draw that each frame with , then when the player moves update the structure, concat the elements, and start drawing that string each frame? I've got a feeling your display code will end up a lot simpler (or at least more straightforward) for the same relative results. Or if you're looking to ditch ASCII, just use a tile engine. Either way, you essentially just need to replace the visual component of your game, right? I've got a feeling you may be able to whittle down your Window code since you'll no longer be dealing with Curses. Take this as an opportunity to cut/rewrite parts of the code, since though some techniques might make sense in Ruby may be a pain to manage in C# or vice versa. 

For games where you'd only have a single Journal (ie: no multiplayer, sync or async), the namespace approach is perfectly valid so long as it fits within your scheme of namespace usage. You could also make a class with entirely static members. The differences are subtle and not worth thinking about. There's fundamentally little difference between calling and . You're just allocating and initializing memory, manipulating it, and then freeing it. Now for my commentary on Steven's comment. I might have misinterpreted what you were getting at, I apologize and please let me know so I can edit this to make more sense. This approach doesn't seem to be that flexible in the long run. If I'm following your logic correctly, this means that for any sort of system like this related to any system that may be a part of the player, you'd need to add a check to the list of things that happens when the player interacts with an object. Say you wanted a rock that would add something to your journal and give you a buff. That's an extra conditional in the function. "Do you have journal text to add? Do you have buffs to apply to the player?" Now what if you have another rock that adds a buff to the player, but also triggers a cutscene. Now you have "Do you have journal text to add? Do you have any buffs to apply to the player? Do you have a cutscene to play?" This will get out of hand. It would make more sense to me to make a behavior/component which would be in charge of calling the Journal functions. That way you could add as many sorts of components as you'd like that could respond to a player interact. If there's only ever one Journal ever, then hiding Journal functions behind the player class seems like it's adding unnecessary overhead. This would make sense in multiplayer, since each player would have their own journal, but if this is single player, that's not really necessary to do and just adds one more set of functions to your player class that don't need to be there. The implementation could be, that in your scene data, you give this rock a list of components that respond to . When the rock is ed with, it iterates through all of its components that respond to and each has the opportunity to do their thing like adding content to the journal, buffing the player, triggering a cutscene, or whatever. EDIT One point I forgot to mention about the Journal namespace vs class thing, is that you'll likely find it easier to create and use mock journal objects if you want to do unit testing with a mocked . ANOTHER EDIT: But then again, what's so bad about include guards?