Type constraint: Remember my point for making the serialize method generic too? For now, you don't validate the incoming and outgoing object. What if I pass an instance of a class that has no public parameterless constructor? During runtime I'll get an with a message like: 

So your would perhaps become and would certainly become . Seeing or makes me think about booleans. Examples from .NET: 

Since you only have two properties, performace won't be a problem. Even if you were to add a couple more properties. Hope this helps! 

and can even be shortened to simply this, because you're simply returning a boolean corresponding to the value: 

If this can be applied in real life, the Mars Rover could keep going indefinitely, as long as the change of X is equal to the change of Y. Example: 

There is no magic method in .NET that will know the datatype and magically returns the right parsed value for you. So, creating your own method of parsing and doing manipulation is not a bad thing. This can be improved though. Use a method: I prefere to place code that does a certain manipulation or calculation on variables in a separate method/function. This gives me the ability to reuse the code if necessary and maintaining the code is also easier then looking in chunks of code to change just a small bit (like adding a datatype in your case). switch vs. if/else: When facing a simple check for a value or condition of a variable, an if/else-statement will certainly do. But when you have a list of options for a variable, it's better to use a swicth-statement. Your code not only looks cleaner, it is cleaner and again, easier to maintain. This results in following code: 

If you read this carefully, you'll understand that an exception occurs when something unexpected happens, something you do not have control of (most of the time). In your example, the fact that for a given ID, no user exists is not an unxpected behavior of code. It just means that there is no data in the database for that ID. When trying to get an object with given ID (which will obviously return null) and perform some method on it or get a value from a property, this will result in an exception. In this case this will be a . I suggest you rewrite your code to following: 

For any Maya users, this doesn't include the animation or colours yet, but here's a class to build it in 3D. You only need to iterate through to use and , so if you have a different 3D software package it'd still be easily possible to display. 

: What type the input is : How many bytes to look at for . Because this number will always be quite low, it's stored as a bunch of 0s, ending with a 1. : How long the data is : The input stuff As to why there is both and , for example, if the input has 255 bytes, the current way would result in 9 bits to say the length is 255, whereas having only 1 value would result in 255 bits to say the same thing. When reading the data, instead of splitting the string up, it just uses offsets on which part to read. I'm not so happy with writing it but didn't know a better way, as I just store it as a string and basically use or . The en/decode functions work with the string of binary numbers, and the and functions just get it to and from a human readable form. For the record, I'm planning on having something in , just haven't thought of what yet. Example: 

In response to the comment by holroy, I decided to keep with float (as opposed to store the decimal value as a separate int) because I've still got to think about conversion to and from the game world. With the current way, unless the float value goes above the block size, it's literally just a single addition, whereas the other way would be a lot slower, and the precision to that level isn't really needed. I did the block method in a previous project which was about octrees, where the coordinates were stored relative to each 3D block, which was split into 8 smaller blocks (so a coordinate would be for 4 nested blocks, which results in . The problem with this approach is if a coordinate was at 16, that's too high to store, so you'd need to recalculate everything for 5 blocks instead of 4 (which upon writing this, I've realised it may be as simple as multiplying all of block 4 by -1, though I'm not sure). The boundaries can also be a bit confusing, as the size of the block is to , like -255 to 256. I wanted this to be able to scale as much as needed, without getting overly complicated, and the current way seems to accomplish this fine. 

This answer is another way of achieving the same. I am not claiming that this is the cleanest or most performant way but it certainly works. 

Naming: A name like is bad practice. Give meaningful names to parameters/variables. Change it for example to . Although the class is , the method probably expects a "print-job", making a meaningful name. Writing output: Try to apply separation of concerns. In this case this means that you shouldn't write output to a screen in a method that merely returns a boolean. You could refactor it like this: 

I don't see you using the variable inside your loop? If it's just for counting you could perhaps rewrite the loop to: 

I don't know what the possible rest of your code looks like, so my opinion might be wrong. What I don't understand is why a lot of people use jQuery for the slightest bits nowadays. The display of the array could be done like this: 

Naming: Like the previous answer stated, your classnames are far from following conventions. The should be and not . Also a name like is definitly not meaningful, not for you, not for others who read your code. Try names like , or , and so on. Tip: Names of Classes, Structs, and Interfaces Braces: Microsoft doesn't have any conventions on the formatting of your braces. This means you can chose between following: 

Why create methods/functions/lines of code that do something that's already been made for you. If you want to get the filename without the extension, use the Path.GetFileNameWithoutExtension() method. 

Anyone may correct me if I'm wrong but honestly: I don't think so. (Offtopic) This can be rewritten: 

Now you can use these bool variables to do some magic. In the clause of the query, use these flags to check or ignore the condition you want to apply. If the flag is true, the condition will be skipped and if it is false, the condition will be evaluated. A small example: 

will return . will return . If you want both to return then replace the with in . Marking as is purely optional but it seems to me like a good fit. 

This also prevents printing a trailing space. You don't need to re-read "dict.txt" as it doesn't change with each word. 

For determining correctness of your implementation I recommend referring to an existing implementation such as Apache commons-lang or the newer commons-text: 

Instead of using you might check to see if the given product is greater than the currently known maximum product and then assign it if it is. This is minor but personally I prefer to avoid unnecessary assignments. I wouldn't worry about trying to do all of this in one pass. Each directional slice has different row/column bounds so I think four separate loops is the clearest/cleanest. You can remove some duplicated code when it comes to calculating the product and updating the maximum. 

You can still use a enum if you'd like but this function is very similar to so would seem to suffice. Every enum class has a function implementing (Enum Classes - Kotlin Programming Language). As such, would declare both and which seems confusing to me. I suggest defining superior and inferior check functions instead of but this may not be practical depending on how you are using : 

You might want to take a look at Delegates.observable - stdlib - Kotlin Programming Language which you may be able to reuse to improve and reduce your code. 

If however you actually need/want classes for tree components then I recommend making those components (or collections of those components) members of a class (e.g. a has ). 

If you are going to have classes for computed numbers than I find (like ) much more readable than for , , etc. Naming an instance of as simply "tree" is rather confusing, I recommend using type names (at least the end of them) at the end of instance names (e.g. "stageTreeWidth", "stageWidth", "treeWidth", or simply "width"). Kotlin has a neat function to simplify building strings with a repeated char sequence. e.g.: 

It's been a while since I had a bit of fun getting something useless working, so I thought I might as well ask if there's anything to improve about how I do things. The original idea was to convert to a higher base for more efficient storage, before I realised I was hashing the value anyway so that would be pointless, and you can simply do to achieve the same effect. Anyway, I got it working for all bases from 2 to 221, with the option for higher if you can find any other characters to add. The padding was a bit of a headache, but I figured out the maths to get the maximum expected length, though it's only really useful if you were doing a database input with a set column length or something. It also works with seeds, so it could be used for something similar to hashids I guess. 

Normally the game speed with pygame is locked with the fps, so I attempted making a simple two classes that'd be super easy to use, to allow for the same game speed no matter what the fps is. For each frame, it calculates the difference between the amount of ticks that have passed, and how many should have passed (I get that this way could be better, but people don't change this mid game right?). For example, the difference at 60fps at 60 ticks per second is 1, at 30fps, the difference becomes 2, at 120fps, one frame will have a difference of 0, and the next 1. I did my own version of ticks since I locked the actual ticks to the fps. With the frames per second, I set it to calculate it every x seconds, so it's a bit more accurate and avoids times so small it causes zero division errors (0.1 seconds for 1753 frames is more accurate that 0.00005704506 seconds for 1 frame). If you don't limit the fps, the inbuilt fps function just returns 0. There does seem to be a bit of a problem though, and I'm not sure what's causing it. I'm sure I've done the framerate calculation correctly (with a minimum time so it doesn't end up working with tiny floats), but setting the fps to 500 reads as 333, and 1000 reads as 500, which is really strange. Setting it to something really high or quite low returns something that looks a lot more correct. I've not really used a with a class containing another class before, so I'm not sure if I've done it right (I originally only had the one class, but realised and needed the class called each time), so any feedback would be good as to what I didn't do well. 

Using returns a new object but such isn't necessary in this case. You can use directly on the . You can reduce duplicated code by using classes and/or extension functions. e.g.: 

In my opinion, the main factor in preventing you from having a clean primary constructor is indeed the two paths to the super class (via or ) and having a super class define the property is in fact what also prevents you from making this a data class. I recommend making an or with no properties in its constructor. e.g.: 

"args" is more common and descriptive than "a" in a function signature "\n" is system-dependent; I recommend using instead can be used with a instead of first mapping an using a and then calling . e.g.: 

You're method is not transitive (e.g. and but . See Any.equals - stdlib - Kotlin Programming Language for more details on the requirements for . You might also consider using from for testing your own implementations of . If you define your own method instead of defining a custom, non-transitive implementation than your existing solution can become much simpler: 

You can use the slightly shorter instead of . You can also move trailing lambda arguments out of parentheses: 

Personally I prefer "row/column" instead of "y/x". Thinking "y" before "x" is unnatural. You can always define your own methods too which can improve readability. e.g.: 

Using as a function name seems very ambiguous. The method name used in the Java class from LeetCode seems more appropriate: (thereby specifying that the arguments, although not numbers themselves, represent numbers). You can remove the explicit type specification for if you add explicit type arguments to . I personally find this more readable and less verbose: 

Technically a "trunk" does not include the branches, etc. so "TrunkWidth" and "Trunk" are kind of confusing names for this. You might consider "LayerWidth" and "Layer". I see very little point to all these classes as they do not serve much purpose. A class with a single method to define its single behavior might as well be a method. If , , , etc. will be used by methods other than then it might make sense to have these as classes. If they are simply to build a string representation then I would drop them in favor of inline calculations (OOP does not mean that "every thing is a small object"; e.g. "height" and "width" may be attributes of objects but are not necessarily objects themselves). This entire collection of classes can be reduced to the following (assuming no other code is using , , etc.): 

Now I've grasped the very basics of Pygame, I thought it'd be useful to make a few classes that I could use later on if I try make a simple RPG style game. I've done this to handle the coordinates for the player movement (and possibly for other things too), and tried to do it in a way where you wouldn't get the floating point precision errors that Minecraft and similar games get when you travel out very far. I tested it against the module, and mine appeared to up to 10x faster for small movements, though the speeds evened out when using super large movements like +- 10000000000000. It's only half a days worth of work so it's not perfect, I can't find any more bugs though. It's recommended you input the coordinates as strings though if you're using large ones to start with, especially if you're using floats. 

If you set some bounds and the multiplier to 1, it should draw a proper style maze, it's just a bit boring that way. Since the tree data isn't really stored after the generation, here's an example of what the tree looks like at 3000 nodes in 3D. There's probably a better way of doing it but it worked for me. One thing I've realised is I may be able to merge with , but I've given up on coding for now so I dunno yet. Edit: Added a few extra bits, mainly for Maya. You can now remap coordinates, so for example, you could use a 3 dimensional generation and swap with , so basically you have the 3D generation, but only 2D slices of it that you view by changing the time.I also added the shaders too, so now you can see 4D generations properly. To be totally honest, I thought they'd look cooler (the 4D generations, not shaders), but they're a bit disappointing haha, but I'll try render a video later to show what it looks like. If anyone has an idea for the 5th dimension or any others, I'm all ears.