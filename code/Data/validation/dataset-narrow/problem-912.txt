to list all the dependancies of a package and see what needs to be installed without downloading or installing anything. 

When you purchase/rent a server from a provider, chances are the assigned IP address was used on another customer's account. This is most likely what has happened here, you have acquired the IP/system of a previous customer and have been getting the traffic they used to get. There is also a chance a small portion of this incoming and outgoing data could be to do with your providers monitoring system (depending on the system they use). I would get in touch with your provider and see if there is anything they can do to assist you with this matter. 

If its that much of a bother to you, you can modify your policy to exclude the folder from its scans.... to exclude /proc you could add something like: 

Guy - There are two kinds of power management, one is c states (i.e. c1enhance for intel - something similar for amd), and the other is p states (cool 'n quiet for amd). Is this 'CPU power management' listed under advanced software features in your conifiguration -or are you seeing this somewhere else? If CPU power management is disabled that might mean you already have cool 'n quiet disabled in your bios. Power.CpuPolicy should be set to static if you want cpuz to read the clock frequency. However - dynamic 'dynamically' scales frequency up and down. It may make sense cpuz reads only 528Mhz - your server will run at the lowest frequency necessary to accomplish the current task. See Faq 1 at CPUZ . Maybe try running a load on your server and then see if the frequency scales up. If it is not scaling you will need to do 2 things to (possibly) fix them: 

So it actually established a plain connection and waited for EOF from the terminal and only after that it would start with the SSL handshake. 

In this case you redirect from one hostname to another hostname. The target IP address might be different but it might also be the same if both names are hosted on the same system. But this actually does not matter. All what matters is that the hostname in the URL must match the subject(s) of the certificate. And the redirect changes the URL and thus might change the hostname of the URL. It does not matter if there are different IP involved or not: if the hostname in the URL does not match the subject of the certificate the validation will fail. Thus what you need is either: 

Some mail server support multiple certificates on the same IP address but they need a SNI aware client for this so that the proper certificate can be provided. Not all clients support SNI so you can not rely on this. This means that you have to live with a single certificate on your mail server. The easiest way would just setup the MX for the client domains to point to this server securemail.hostdomain.com and not to mail.theirdomain.com as you currently do. If you don't want to go this simple way you need a multi-domain certificate which includes all domains you want to serve on this server. Of course it is necessary for this the you actually own all these domains or at least have enough access to be able to react to the challenge used in DV certificate validation. If these domains are instead in full control of the client you cannot do this. 

You cannot use SPF records to redirect emails from one domain to another (as David W rightly pointed out) You're best bet would be to use email forwarding/redirection. You mention that you are using GoogleApps to handle the mail for the new domain, if you link the old domain to the same account you can setup the forwarding/redirection there. Take a look under the "Domain Settings" pages in the master control panel. This will only apply to new emails received however. If you want to have existing emails from the old mailboxes in the new ones, you can "Allow users to upload mail using the Email Migration API." under settings>email in the GoogleApps Control Panel to allow importing of the old emails to GoogleApps. 

this will grab a list of packages and dependancies required. Before installing it will ask you if you want to install or not, just answer no and no changes will be made. Alternatively you can do 

In this case you must configure apache to not accept any clients which don't support SNI, i.e. . In this case virtual hosts without a configured certificate should cause an error at the client, i.e something like invalid server name or handshake error (depending on the browser). 

The Host header is part of the HTTP protocol, but HTTPS is HTTP embedded into a SSL connection. Which means you first have to establish the SSL connection (which needs the certificate) before you have access to the Host header. If the client supports SNI (all modern browsers do, but IE/XP not) it will send the target name inside the SSL handshake already. Providing different certificates based on the target name is usually done with different server sections in nginx. You might try to use the within the default section but I'm not sure that this will work and even if this works it might affect optimizations like session caching in a negative way. 

So basically this is what I have learned from this experience: Don't use the packaged version of gjc and then install other java on top of that (even when using alternatives!). I guess this could be the 'best practice' rule: 

To list all the files/directoires associated with that font package - this should list all the font directories. Hope this helps. 

The MegaRAID MSM is MegaRAID_Storage_Manager-13.01.04-00.noarch And MegaCli is MegaCli-8.02.16-1.i386 All of these packages are installed through the LSI provided packages. Any dependencies have been installed through yum, so they should be up to date. I find it hard to believe that there are no temperature changes (not even \pm 1 degree) at all throughout a day (as the temperature of the environment is not nearly constant). Everything else works properly so I find this odd. I should note that gives the same temperatures as - so where ever these utilities are obtaining their data from is consistent. If anyone has seen this or solved this issue I would appreciate some insight as to why these values don't seem to update. 

Since you disable all SSL 3.0 ciphers and since TLS 1.0 and TLS 1.1 just use the SSL 3.0 ciphers and since IE 8 does not support TLS 1.2 there will be no shared ciphers. You will probably find some error messages about this in your log files. Note, that the POODLE attack is a design flaw in the SSL 3.0 protocol, not in the SSL 3.0 ciphers. Thus you should only disable the protocol, not the ciphers. Also, your current cipher suite includes very dangerous ciphers, because it includes ADH ciphers which don't require any form of identification of the server. With such ciphers man-in-the-middle attacks are possible. Edit: in your comment you mention that the client is using Windows 7. Windows 7 should support TLS 1.2 but since the client obviously did not do much updates on the system (otherwise there would be no IE 8 in use) it might be that there are problems with IE 8 and TLS 1.2. 

Earlier this morning I noticed that one of the nodes in our Cassandra cluster is writing logs an hour in the future, despite the date/time being correct on the OS. A couple of other nodes I checked via logs appear to be writing logs at the correct time. I now need to go through and check each node in our 80 node cluster and ensure cassandra is running on the correct time, problem being is some of the nodes don't write to the logs very often as they aren't doing much... the question is, is there some form of tool/utility (ie nodetool) that can tell me the time that cassandra is running on? All the systems date/times are correct, ntpdate cron in place has been for a while. Servers are set to Belize timezone to avoid DST changes so its nothing to do with that. 

With HTTP you have the User-Agent header. With FTP there is no such thing, which means that the server is not able to find out the client software and thus can not log it. 

In summary: I see multiple problems at the server side which might result in the problems you see. If you have access to the server try to fix them there. First it looks like the SSL stack of your target host (174.47.225.118) is kind of broken: 

The expiration of the servers certificate is checked against the local time on the client. The simplest explanation thus is that these clients had the clock on their system off by exactly one day. 

And rightly so. Port 443 is the port for https not http and the Apache config you show correctly configures https at port 443. Thus will not work but (i.e. https instead of http) will work as will a simple because 443 is the default port for https. 

Do the same for C1Enhanced in the bios if the above doesn't work. If you do this you will be running hotter / more power (if you server is constantly idle). These settings don't really matter if your server CPU is utilized fully (near 75%+ constant CPU load- i.e. you can't save any power if you're always running close to 100%!). Finally - CPUZ is not a great choice for determining processor specs in a vm. You should use some benchmarking software (SPEC) to get an accurate understanding of what your processor is doing! I have windows machines under ESXi that read all kinds of weird ( some read 50% max cpu utilization when it is 100%- some get confused if you add/remove processors/ switch to a computer with higher/lower base clock speeds), so I wouldn't rely on any software based CPU gauges. You really need to run a benchmark to give you an understanding of whats actually going on, as there is too much between you and the CPU when virtualizing! 

Knowledge of the RSA private key is only sufficient if RSA key exchange is done. Modern systems instead use Diffie Helmann key exchange (DHE*, ECDHE* ciphers) to provide forward secrecy. In this case the private key is only used in authenticating the server but not for the key exchange and thus knowledge of the private key does not help in getting the encryption keys. Instead the SSL pre master secret would be needed since this is used to derive the encryption keys. While some browsers support exporting this secret in some special debug modes other clients usually don't. As for your specific problem I would instead to try a man in the middle "attack" which logs all traffic in plain even though the client gets encrypted traffic. This works similar to man in the middle proxies for HTTPS, only that it supports the initial plain connection and understands that STARTTLS upgrades to TLS. From a quick search I've found starttls-mitm and that sslsplit has some beta support for this. Of course the client needs to connect to the man in the middle proxy and trust the certificate it gets, which might be the original server certificate since you seem to have access to this. Another option would be to enable debugging in the specific MTA in case this provides detailed enough information for your specific problem.