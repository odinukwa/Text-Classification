Running Code Analysis in Visual Studio on this code throws up a few issues, with which I shall combine some of my own remarks. Program.cs 

I've created a voting system that's similar to Stack Exchange's in a Ruby on Rails web app. It's working great - as far as I can tell, all the edge cases are caught. This is the action to cast a vote. There are some conditions I've had to satisfy: 

What is this verb "Enqueue"? Method names of this format should be verb-object, as in "do this to this thing". If simply adds the passed object to a queue, the correct name is . 

[ln 215] ? Seems like one list to me. Rename it; again, consider the point above that it should be . 

What sorcery is this? You've conjured a string from thin air! Where did that come from? You should avoid magic strings where possible, instead assigning them to a or of commonly used phrases within your application. The same can be said for in the call: what is 1987 and where did it come from? Assign it to a resource list. Client.cs Code Analysis Says: Implement correctly. Your class nominally implements , but you've only written half the implementation. You also need a method, called by . If called as , it should also clean up managed resources; if it's you should only clean up your class' resources. You also need to tell the garbage collector not to run the finalizer on your class because you've already implemented . In this case there's no difference that I can see, so a few simple modifications: 

[ln 60] Single responsibility: if 's purpose is to get news, it shouldn't also be dealing with notifying the user if there is none. Make this method return if there is no news to be had because of the , and do the check in the UI code [ln 55]: 

Why is this here? If it's because you're waiting for the client to connect, this is a bad idea because you don't know if the client might actually take longer than 1 second to connect. Instead, you should execute the next line inside the event handler: 

Did you just... catch a generic exception? And ignore it? You need to work out what exceptions to catch and what to do with them. In this case, you're most likely to get a or , assuming your arguments are constructed properly so you don't get an or . So instead of catching a generic exception, catch both of those and tell someone about them. Something's gone wrong and this program doesn't work, I want to know why. 

Where is declared? I can't find a field or property called in this class. If is a type, it needs a variable identifier after it; if it's a declaration and identifier, it needs a type before it. Were you trying to assign to ? I stand corrected: the property concerned does exist. Naming - the same points apply here as to Client. 

[ln 179] Folder !== Directory. Be consistent throughout: if this is a setting that a user needs to understand (hence why you used Folder instead of Directory), convert it to Directory code-side. 

At the moment, I'm updating the record if there's already a vote by this user on this post, but I wonder if that's the most efficient strategy. Would destroying the old row and creating a new record be faster? I'd particularly appreciate efficiency comments - at the moment, this is a very server heavy action, which I'd like to minimise. 

is technically safe, and is fine for your current script, but if you want to adapt it for another script, it'll break. A more general, equivalent one-liner is: 

and its equivalent on the next line, is redundant: you should only use when you're passing in a delegate, and even then not always. Rewrite those two lines: 

ServerManager.cs This class is generally good, apart from naming. Rename your variables here and you're OK on this class. 

More in general, this class is doing too much. This is the code-behind for , it seems, which should be an effector class (handling what the user sees). Make another class containing the helper methods like , , etc., for the business layer, and refer to it from . 

String replacement If you've got a lot of replacements, or you plan on adding more, try an extensible solution instead of all the calls: 

Don't prefix your names like that. If you're adding a prefix, it should still follow all the rules of variable naming for C#. For private fields, variables are named in , with the underscore before it. Public properties are named in . So, you can rename a number of variables, for example should be . Server.cs I do believe I've found an error here. 

[ln 30-31] Style choice: I recommend using around conditionals, even if they're only one line - because if you update them and make them more than one line and forget to add the brackets... exceptions. Also, your indents are off here. Indent the first line of the snippet above by one more space. 

can just be , because range starts at 0 by default. The syntax is essentially - the only mandatory param is . Filename parsing If you want to parse filenames by yourself rather than using a library, then while your current solution: 

I've written a userscript that pops up a dialog before you take a moderation action (closing, deleting) with some pro-forma comments, so that you can add one of those before you cast your vote. I'm pretty happy with how I wrote it, but what's clear to me is unlikely to be so to others. Is there anything in this that I could have "phrased" better, or that could be optimized more? Comments on style (or, for that matter, anything else) are also welcome. It also occurs to me that this isn't as extensible as it could be: it's not easy to add new comments. Is there anything I could do to facilitate this? I've also put this code in a gist, if you want to see it there. 

(A quick note on vote types: the column has type , and the possible values are 0 (upvote) or 1 (downvote)). 

For the above reasons I would recommend against using this as a general utility function. However, if this is going to be a specific utility (for example you're trying to create a simple data-binding framework where you know you won't have to worry about the above) this might be the rare legitimate use of the controversial with statement. 

In other words, this methodology is good for idempotent, non-mandatory tasks such as "clean up the temp directory" or "remove any unused profile images from the file system" 

Ok, so I just recently arrived at a way of doing this sort of thing that I actually like so let me share. In my opinion, the if statements aren't really the problem, its more that they are not really pertinent to controller code. Actions should strive to contain code only about major decisions of what code path will be executed. Solution: You take advantage of the fact that a Linq query returns an IQueryable to store the query logic along with the model and an extension method to give it a nice DSL like interface. Similar to the pipes and filters pattern. This is what the action is going to look like: 

I'm getting more and more into programming js in a functional manner which makes heavy use of multiple returns via tuples (especially useful with recursion). Also, a pattern that I use often is creating simple temporary values for projections 

A direct answer to your question: Just remember what dropdown controls have been initialized and hide those. 

I realize that a service and some sort of inter-process communication (whether windows inter-process communication, HTTP, or something else) is more standard and reliable but I have a frequently changing team and don't want to add another step that is necessary to run the app. This seems to work but I've only launched it in a dev scenario. Am I missing anything that would cause problems in production? That's a System.Threading.Timer by the way. 

Usually I see tuples in js implemented with arrays though of course an object - while annoying to write would be just as valid: . So for this sort of use-case (creation and light usage of a bunch of temporary objects) I'm curious if there's a significant performance difference so I set up this jsperf. Object tuple test: 

It's not really a problem, and I like to gently prod newcomers into learning features like lambdas. That being said, I don't think that your url duplication int the first case is anti-dry, its a perfectly acceptable method extraction and it's private. Within the scope of private methods you can do pretty much whatever you like and it's not going to offend anyone too much. Another possibility that you might consider (though it would be a greater scope) would be to extension method the url so you can do url.ConfigureUriVariable("foo", "bar"). The above would be a bit clearer if instead of a string you used a dedicated Url class. I recommend the built in Uri or make your own. But really, I think you're all good. BTW - the lambda is still compiled to a delegate so the generated CL is pretty similar using either of your techniques. 

This is honestly pretty good. I usually use to set the paths and configurations on require (it's going to grow a lot as you add things like shims, urlArgs, etc). You will also probably want to reuse it in several places. See my blog article on how I recommend doing this. The general idea is that you don't use to bootstrap things, you instead have a request for the configuration file and another to actually bootstrap the specific page of your application. Next, I'll ask why bother injecting and manually into ? Injecting dependencies is what RequireJs already does. app.js 

Since this is a public method I added some checks and downcast List to IEnumerable, which is a looser contract and all you really need here. By the way, .Net naming conventions are pascalCase for private and local variables CamelCase for public and protected. It's rare to use underscores. 

While this is the simplest and is certainly acceptable architecture it is always a good idea to also consider Composition over Inheritance So instead you might do something like 

you have non-unique ids! This is against spec and you will find that many tools and libraries have problems when using non-unique ids. Instead you should use 

Or for the totally and absolute 1337 (meaning you shouldn't do it for something this simple but it demonstrates some useful techniques) 

Javascript Javascript naming convention are to use with no underscores. It's not a big deal but it's pretty standard. The only exception is to use for variables that are intended to be used with the keyword (which you don't have here). To a lesser extent than php, but with the javascript community where it is, its probably time to start considering choosing a javascript framework (like angular, backbone, knockout, or the like rather than using jquery directly. In my opinion you are over-specifying your selectors, no need to do when id is already specified as unique, no need to when holds no semantic nor structural meaning. Consider that all this stuff is indexed in the browser so by adding more selectors you might actually be slowing things down however slightly. You don't need to use to select, you can just say Your scope management looks pretty good, I'm happy to see you using - another syntax which achieves the same purpose and you might find flows better (or not) is . You've got inline styling and html. Why? Just put the element on your html page and show or hide it from javascript. Finally, just about everything you're doing in js is handled in a very elegant manner by the jquery.form plugin. Just use that. 

Yes this doesn't do all the type checks that you do above but why do you need them? Now let me be clear It is possible to expose an XSS vulnerability for your users here Specifically if you allow users to enter values which are posted back, persisted on the server, downloaded by other users, and then used with this function on their computers. Suppose you are doing binding to objects which users can customize. These can be arbitrarily nested so you use this pattern. You also have summary screens in which users can view other users' customizations. All an attacker has to do is create a property named and it will be eval'ed and run on the machines of other users of the system. That's the danger. If you're aware of it and make sure that condition never happens, feel free to use the with-eval.