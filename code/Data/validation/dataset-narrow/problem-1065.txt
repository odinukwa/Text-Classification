To communicate with "a custom USB3 device" the system must have a custom driver. The custom driver will communicate with USB3 host controller, and controller will arrange any data in proper USB format and protocol. Yes, it is possible to send any data, as long as a computer application prepares them, and issues a transfer request with the data to driver. For example, for a mass storage USB device, one can create "raw" (incrementing pattern, or anything else) binary data in a file, and then drag and drop the file into USB drive. Serial UART protocol has nothing to do with any USB whatsoever. The amount of data depends on type of what device can consume. If this is a video streaming device, the amount of data is unlimited, you can play movie stream forever. If the device is of storage type, the amount is obviously limited to device capacity. If a device is fast enough for USB3 protocol, a fast computer can deliver about 450-480 MBytes per second of data in one direction. The limitation for USB3 Gen1 is the speed of the bus, which is 500 Mbytes/s minus link management and protocol overhead. 

How capable are USB hubs? Their capabilities vary with manufacturers. A good (and USB Certified) USB hub would be self-powered (getting power from a wall adapter, not from the host port), will have individual port power protection/control. And will have an official USB-IF Certification logo. These hubs still sell for $40-$50. A cheap (bus powered) USB hub would take the power to supply all connected peripherals from upstream (usually non-detachable) cable. Technically speaking, these "minimized" hubs (most of them) a cheats, because they report in their descriptors that they are "self-powered", thus lying the system. A bus-powered hub can/should supply no more than 100mA per port, and the system will deny any USB device that describes its power consumption above this limit (you will have a pop-up error message). So to be useful and avoid system power policy, these el-cheapo hubs must lie to the system. In addition, the port where this hub is connected to must have a lot of current sourcing capability to drive all four suggested devices (if they are NOT self-powered from wall-type adapters). Bus-powered hubs have one big disadvantage with regard to quality of power delivery - power to any new attached device will go through the same piggy-tail upstream cable. As result, the initial voltage "droop" (on connect) will affect all other already connected devices, so they might disconnect. But if you are not planning to use hot-plug devices while the rest is operating, this might be of lesser concern. In short, the Targus hub will give you full USB2.0 functionality on all four devices if all hard drives are "self-powered" with wall adapters. If not, you might experience functional instabilities. Or might not, all will depend on quality of your host port. 

The canonical answer is already given - get data out and trash the stick. USB Mass Storage class of devices uses a subset of SCSI commands to operate flash drives above USB physical layer. There is REQUEST SENSE command (see Section 5), which returns a bunch of status data, including code "07" - WRITE PROTECTED MEDIA. All this bits are set inside the USB-to-flash bridge chip, by chip's embedded firmware. If the firmware has decided (as SanDisk once explained) to set this bit "for protection of possible user data corruption", there is no way to "unset this bit", at least people didn't find any way to circumvent the firmware. Formally, this WRITE PROTECTED MEDIA bit is just to inform the host that it should not attempt to write to this media. If a host driver gets the WP status from media, it will not attempt to write. To circumvent this, the host driver must be hacked. Some media controllers might accept and execute the write command even if the bit is set. But apparently there are controllers IP that are overly protective, and will refuse even this hack on host side if their firmware logic has come to a conclusion that the media exhausted its reliability thresholds. 

The RS232 devices are usually FS devices, with USB protocol running at 12Mbps. When plugged into a hub, USB2 or USB3, the communication goes over special communication processor called "Transaction Translator", or "TT", which is embedded into every USB hub. There are two kinds of hubs, the ones that have only one TT for all ports, and the ones that have individual TT for each downstream port. If you have several FS devices connected to a single-TT hub, the buffering resource will be starved, and FS bandwidth (12Mbps) will be shared between connected devices. To get full FS bandwidth over each downstream connection you need to have so-called "Multi-TT" hub. Also, the handling of FS transactions over TT requires special approach on host side, called "split transactions". Modern computers have native FS support through XHCI (USB 3.0) host controllers, so direct connection is handled naturally by XHCI driver. Older computers have the FS support inside their hardware, and muliplex ports to older OHCI or UHCI controllers, so they also have direct support for FS traffic rates. However, if a hub is in between, the FS traffic must be handled by split-transaction technique, which is solely software-based. The split rules are horribly complicated, and covered by about 150 pages of USB specifications. If your robot driver has poor (or no) support for split transactions, FS and LS devices would fail to work behind a hub, specially if there are many of these devices. Addition: Orico hub uses VL812 controller IC, which has only one TT in HS path. With (presumably FS) 422-USB device configured for 500,000 bauds and other FS devices, it likely has no bandwidth left, and host has problem with transaction scheduling and barfs on something. 

A "USB [[peripheral] sharing] switch" is a device (a hub) that allows to share a set of USB peripherals (typically keyboards, mice, and printers) between two different USB hosts. Typical use case is when you have these stationary equipment hooked up to home workstation, then you come and connect your laptop into the second port of that special USB hub, and all connected devices drop from workstation and nearly immediately connect to the laptop, with no need to reconnect any cables. The hub can be equipped with more sophisticated controls, such that some ports remain connected to workstation, or are switched individually. These switches do not connect one host to another, nor they connect any USB peripheral to each other. The device actually consists of two individual hubs that can take ownership over a set of downstream ports depending on control either from pushbuttons, or based on priority of which upstream port is connected or not. 

Active cables with re-timers every 4 meters, see products from Newnex. Maximum cable without a hub in between is 16 meters, with three re-drivers in between; This is mostly very new developments. More established fiber-optical converters (USB-fiber-USB), made by Corning Optical Cables. These can run for 30 meter distance. 

To connect one Type-C device (one PC) with another Type-C USB device (or another PC) and expect some connectivity, at least one of the "Type-C link partners" must support so-called DRD - Dual Role Device. The DRD port advertises its dual role by continuously switching its CC (communication channel) pins from 5.1k pull-down (signifying a USB device) to 56k-22k-10k pull-up (signifying USB host with different VBUS supply capability). It does this flip-flop several cycles per second. However, to be a DRD Type-C device, it must have TWO USB controllers inside, one of xHCI (host controller interface), and another of "DCI" type - device controller interface. The IO of these two controllers must be multiplexed at the USB port pins. Currently only a few products (notably the Intel SoC aka "atom cheery trail" family, and other mobile-oriented chips found in mobile phones) have this capability. If a PC is made of desktop line of processors, no DRD is available yet. If both PC are of the same kind, no connection (and no harm) will happen. If one Type-C PC has DRD functionality, it will pick the phase of its "flip-flop advertising" with the role that is opposite to the connected single-role device. If the connecting device is host, the DRD device will lock as device, and vice-versa. If both devices are DRD, the roles will be selected at random, and later should be switchable in software. 

see Section 11.11, third paragraph. I have never seen this kind of hubs. No wonder that you can seldom find ANY hub at local electronics store that carries USB-IF certification logo. The only hubs that comply with Hub Port Power Control requirements are the hubs that are used in official USB-IF certification process, so-called "Gold Tree" devices. One of the "good hubs" was made by D-Link, however there is no guarantee that the off-the-shelf mass-produced variant has all power-switch ICs populated and not bypassed by either poly-fuses or just shorts. So you are likely out of luck even in this case. The last resort would be to cut the red wire in USB cable and put there a electro-mechanical switch, a relay, or a high-side switch, as suggested by Antonin. Then you need to find out some means to turn it off when PC goes to deep sleep, feed it from internal 5V rail, or something. 

If you have a hub connected to the tablet, the tablet is in host mode, and must be a SOURCE for VBUS. Therefore it can't charge itself. To accomplish what you want you need a special device called "accessory charge adapter". In simplest form it might look like this: 

Thus, the "Out-Of_Band" channel operates from Standby (always-on) voltage, and hidden network access is always on. So, no matter if you remove any "malware" or other services from your OS, external "manager" can do almost anything it wants with your PC. Enjoy modern technology. 

It sounds like the DisplayLink USB device (display processor) in your dock station has died. Did you try this usual USBView utility link to see if the DisplayLink processor is in the USB tree and has no yellow marks? Make sure that the entire docking station operates at USB3 speed. Most reliable way is to use this USB dongle and determine the speed of USB link between laptop and dock: link Also, try to borrow another good D3100 to see if your drivers are OK, or try another computer with good known USB3 port to see if the problem goes with your questionable D3100, or your computer. It could be that your computer has developed a problem with xHCI (USB3 controller) and operates only in USB2 mode. 

If nothing works, try to completely reset the BIOS. This is the last resort. Remove the BIOS (coin) battery, and short the battery terminals for 10-20 seconds. Then reboot, load "safe defaults", and start over. 

If your "port extender" (read: "USB 3.0 hub") does not have any external AC-DC power adapter, you can use only one downstream port with full theoretical capacity. Actually, it should be less than one port, since the entire power comes from a single laptop port, and some of this power must be wasted to power the internal hub chip controller (which can be about 1 W, or about 200 mA from the 900 mA official USB 3.0 port budget). If you use another non-self-powered "extender" (with no AC-DC adapter), similar consideration would apply to it: you can use only devices with power requirements under 500 mA total (another 200 mA will be needed for powering internal IC in the second "extender"). However, if your "extenders" do have proper external power supplies, there should be no restrictions whatsoever, it should work with every USB 3.0 or 2.0 devices, including bus-powered HDD enclosures. Proper power supply for a 4-port hub must have at least 4 A capacity at 5 V. Of course, the laptop port might be able to supply more than the official 900mA, but you should not be surprised that some ("high-powered") devices will behave erratically. 

To check if your mainboard and USB controllers are functional and to isolate the Windows corruption fault, try to boot into some stand-alone OS like Knoppix or other bootable CDs like Hiren's BootCD. Or at least to check if USB keyboard is functional in BIOS/UEFI config mode. If you still find the USB subsystem non-functional, the last resort (before replacing the mobo) is to completely drain and reset BIOS, by pulling off its battery and bleeding the CMOS power to ZERO. Draining the voltage is important because brown-out conditions might leave some flip-flops in BIOS in some odd state, and they might keep the state even if the voltage rail is as low as 0.3 V. 

Most classic laptops (with built-in non-detachable keyboards) use a dedicated keyboard controller (direct scanning of key matrix) that comes out of LPC bridge (sometimes called as "Super-I/O"). The LPC (Low Pin Count) bridge also controls all legacy devices, BIOS chip, timers, RTC etc. The LPC bridge comes out of a dedicated PCI unit, and the LPC bus supports all necessary interrupts. If you check the PC device manager "by connection", and expand "ACPI xxx-based PC", you will eventually see all PCI devices. The keyboard will show up as PS/2, but this is only logically, there is no actual serial interface. So you can say that the laptop keyboard uses interrupts. Various keyboardless devices as tablets use the USB interface to communicate with keyboard. Detachable keyboards also use USB. The key scanning electronics is local to the keyboard and processes all key-press and key-release events locally. The bus uses USB Periodic Transactions called "Interrupt Pipe" to get keyboard data, which is formally a form of polling. 

TB is faster because it uses TWO pairs of Rx/Tx lanes, while USB 3.0/3.1 uses only one pair. USB 3.1 cables contain only one set of differential Rx/Tx pairs, while TB uses two pairs, and therefore is thicker and more expensive. In Type-C connector, USB 3.1 uses only one set of Rx/Tx contacts, or another set, depending on which way a cable is plugged in. And a USB 3.1 host uses data multiplexer to switch to corresponding pin set. The TB uses BOTH sets of high-speed data pairs. For the same (comparable generation) transceiver technology, 5Gb, 10Gb, whatever, the TB will be always ~2X faster, since its data path is 2x wider. 

it is very likely that the USB 3 signal would be fully restored at this end, and extra passive cable of your device will likely work. 

Yes, there used to be a company "SMSC", now a part of Microchip Technology, who were (and are) making USB hub chips with two upstream ports. From description: "USB2524 is the industry's first USB switching hub that combines a USB Hi-Speed hub and switching functionality in a single device. Equipped with two upstream ports and four downstream ports, USB2524 enables USB device sharing and switching between two USB hosts without "cable swapping". Requiring no more than standard USB hub driver support, the USB2524 appears as a 4-port USB hub to either USB host system and supports standard USB topology." I believe I/O-Gear did use this chip for retail products. This is another example. 

Unfortunately, it has DisplayPort input, so you will need to buy a HDMI-to-DP adapter, if your laptop does not have a native DP. Alternatively, you can get a number of USB3-to-video adapters, with VGA/HDMI/DVI outputs, connect them to a USB3 hub, and have many individual displays. 

This voltage should be "always on" as soon as the computer PSU is connected to AC outlet. If the standby voltage is not there, or low (less than 4.5V), either the mainboard has a fault, or your PSU has insufficient standby power rating (it should be no less than 2 A). Check if the power switch makes a short between pins if you press the power button. You can try something conductive (like tweezers or screwdriver) to initiate the power-on by shorting corresponding pins on the "panel" header. Before doing the above, disconnect all peripherals (disks, CDroms, etc, even video card and all USB), leave only CPU and memory. Even if you have no peripherals and can't see/do anything, the CPU fan should start spinning. And "RGB strip" should light on. If still nothing happens, check if some ICs or secondary power supplies (on-board) are too warm to the touch. If yes, your board is likely damaged. 

20 minutes is 1200 seconds. Even if the ISO size is 4GB, it makes the write speed under 4MB/s. This is a sustainable write speed of a typical low-end el-cheapo USB pen drive. You need to invest into good USB 3.0 pen drives, and obviously have a USB3.0 host to do the pen writing. Keep in mind that not all pen drives are made equal. Some loss of write performance can happen in USB-NAND bridge, and most critical part is in architecture of storage chips. Some higher performance pen drives may have "dual-channel" architecture, better ones have quad channel usb flash drive topology, with reported write performance up to 100MB/s - 150MB/s. This will cut your write time to under 1 minute.