Using a switch does not make a network slow. In fact, in most cases, it makes it faster since switches provide separate bandwidth per interface and many collision domains. Only when it comes to broadcasts do switches prove inferior (assuming without vlan, etc) since it has only one broadcast domain. Routers are only used in the case of linking two different networks. As for your problem, I would suggest checking the cabling you're using with the switch. You should be using a straight through cable for switch to host connections (length of the cable also matters). Usually, slowness with a switch is attributed to duplex or speed mismatches between two devices. However, to zero into your problem, we'll need some interface information of your switch (maybe a show interfaces f0/0?) 

I have a bunch of Cisco AIR AP 1602e, which I have configured. These are dual-band a/b/g/n access points. Sometimes my users do expirience lags and spikes, even the associations start to break (for some of the users). This WLAN is deployed in a large office buildings, occupied by a number of organizations, and a scan from a FreeBSD machine reveals more than 18 (!) SSIDs on 2.4 GHz, without taking into account my own SSIDs. In the same time carrier busy test for 2.4 Ghz show busy rates for a set of channels where 17% is the minimum, and the maximum sometimes can go up to 71% (!). The 5 GHz range isn't that overcrowded (5-15% at the CBT), but still, spikes happen: sometimes once a week, sometimes less frequently. What is the best strategy to mitigate this ? You should take into the considaretions the following measures I attempted: 

Routing tables usually have a default path. Packets that don't meet the longest match for any entry in the routing table are then forwarded through the default route. There also exists Proxy ARP which can help find destinations that aren't in it's local routing table. But definitely the router doesn't forward packets out all interfaces in case it can't find the destination, it just drops the packets, in which case you'd get a destination unreachable or timed out or some error depending on the situation. 

So when enabling object tracking on an AVF for an ISP uplink (for example), while running GLBP on another interface of the router, we specify a weight range and tell the AVF that if object loses its IP reachability, the weight is dropped below a certain limit and if that is below the lower limit specified, that router can no longer be part of the GLBP process (or does it become an SVF?). I'm not even sure if my question makes sense but, why is this range even required? Is there any other use of enabling this range? If the uplink goes down, why not just directly take the router out of the AVF role, what's the need for checking with a range? 

in the enable mode. Since clients connected to this switch can reach Google public DNS, they have information on where to look for the gateway. Switch from the context of the network connectivity of it's management interface is an ordinary network host. 

Quagga losing routes was my primary reason to switch to bird. Over some time I am running a corporate VPN with hundreds of branch-offices, linked through the ipsec/gre/whatever point-to-point tunnels. On some branch offices I was using the FreeBSD/quagga setups. The issue was - in a OSPF router chain like A - B - C the prefix originated from A was seen on B, but not on C. After months of struggling, finding no solution, and seeing this situation spontaneously arises and clears it self with quagga (and with no proprietary vendors like Cisco or Juniper) and various prefixes, I switched to bird. Now the problem is gone. You may call this lame. You may say I should report this and help communnity to fix it. But for me quagga and it's bugtracker seems to be for a long time some kind of post-nuclear desert, where sporadic groups of friendly developers may be encountered, but more likely you will die of dehydration or some bug. Bird is developed more intensively, and it's mailing list is more populated with developrs and practical help. 

In a frame relay multipoint topology where the routers are running RIP, we know that RIP by default keeps split horizon on with IPv6 and we go into the RIP process an use no ip-split horizon to disable it. But my question is, what command do you run to check whether split horizon is enabled on disabled on that interface with IPv6? Much thanks! 

You forgot to configure RIP version 2 for R2. You've specified it on R1 and R3, but not R2. Without this, subnet information will not be advertised and hence you cannot use disconnected networks. That's also why R2 is not showing anything on debug mode. 

I have a Juniper EX4600 switch which I'm using for host connectivity (obviously). Now I need to set up a VRRP/CARP between two hosts that are in the same vlan, and it's the default one. Surprisingly, it's not working. And the reason is that these two hosts simple don't see the multicast packets from each other, they do see only self-originating packets in tcpdump (so my VRRP cluster is in split-brain state permanently). Previously I have successfully set up such scheme on a variety of switches, including EX4600, and I see no big difference between them, except that in the case of the working VRRP on EX4600 I have all of the interfaces in non-default vlans. I was suspecting it's the igmp snooping feature that blocks the multicast, but it turns out there's no such thing configured on my switch: 

I don't know if this will help, but when I want to add similar lines to various devices, I connect to each device on various tabs in SecureCRT and then at the bottom there's a window that provides a "chat to all tabs" capability. I use that. 

How is 2^11 = 121? Firstly, 2^11 = 2048. The formula for finding the number of valid hosts are (2^n)-2 which is 2046. The 2 being the broadcast address and network address. In the example you've given, 10.0.0.0 is given as the network ID. Since the mask is a 255.255.248.0 one, it means that the hosts jump in terms of 8 hosts, and will have 32 subnets. The broadcast ID of the first network will be 10.0.7.255. So the network ID of the next subnet will be 10.0.8.0, while it's broadcast ID will be 10.0.15.255 and so on. You're not clear with your logic of subnetting. Please watch a few videos on how to subnet. I suggest this one and the rest of their series. 

I've already posted this question on the Juniper community forums, but, unfortunately, both replies authors thought that I need the IGMP snooping feature, not the VRRP, so I should mention that I don't care at all about the IGMP snooping and I'm showing it here merely to show that this isn't the reason of VRRP packets getting blocked (at least as I understand it). I've also tried to enable the IGMP snooping (in case I understand it wrong), it gave nothing. I also tried to experiment with various spanning-tree protocols (as far as I know this has nothing to do with the multicast, but just in case - as I was out of options, to see whether I do understand anything) - I tried rstp and vstp, and this also gave me nothing as I expected. So, - prior to buying the support for EX4600 and asking in JTAC, I decided to try once more and ask in the community - how do I make the VRRP work in the EX4600 default vlan ? I'm aware about the solution "move everything into non-default one", but this requires outage, and furthermore, I want to solve this, - after all the default vlan is just a vlan.