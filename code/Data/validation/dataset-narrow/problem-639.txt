To answer your question "yes it's possible" because you've said your competitors do it. I don't really understand what "it" is so I can't give specific advice. Besides which, code not yet written is off-topic for code review. On to current code. 

That's the Template Method pattern but it's more normal to call multiple methods within the template method. 

Have you tested this? You've used the words 'quick' and 'SharePoint' in the same question which, in my experience, is almost always a lie :) You have a problem here: 

If all of those conditions are met, I think this is a reasonable extension method. I'd probably change some of the names though. 

Well, I won't go in to how it makes me feel. If is the current file why don't you call it . Then when you're doing things with the current file, I won't have to scroll back to the top to figure out what is. Try to name local variables in : should be . What is ?! Classes should be like , etc. Stop abbreviating things because I promise that even you won't remember what they meant when you read them back in a week, let alone a year. 

The reason I'd do that is because you're otherwise forced to loop through the other repositories' locks which will never match - i.e. it's a waste of CPU. With the above (very rough, possibly not working) approach you only loop through the locks which are taken out within the current repository. I also removed the Lock property as I don't see why you would need that :) 

I've assumed that should return true as "text" does appear before one of the "sample"s. If that's not the behaviour you were going for you can change the to a simple 

Not that I've Pascal cased to . I've treated user and name as separate words here () but if you implement full authentication on the site, you might find you move towards an actual username (one word). Having said all of the above, the chance of someone randomly changing a GUID and getting another entity is infinitesimally small. 

I'd say that if you feel the need to do this, you may have need of a partial view. A modular UI is key to maintainability. For example, in your code, create a new partial: ReceiptDetails.csthml 

It prints 'action' four times. That's not what I expect from the API (but is what I expected from reading the code). I'd expect the number I pass in to be the total number of invocations - not the number of retries after the first attempt. 

Thread synchronisation It's generally one of the more difficult parts of programming and this is just wrong: 

This is going to sound brutal so I apologise beforehand but still feel that it needs to be said: this code is horrible to read. Let's start with namespaces. . What is ? What is . Why does a have a ? Common to other whats? The guideline from MS is . Once you've sorted out the namespace names, chuck in some s: 

Other answers have covered all of the points I'd make about the code already; I just wanted to get a bit physics-y. Your implementation treats the "parentObject" as a fixed body and there is an implicit assumption about the relative masses of the two bodies. That is to say, you are assuming that the parent object will have a mass very very much greater than the orbiting body and so will be relatively unaffected by the pull of the smaller body. That's fine for something like a satellite orbiting the earth but would be a bit odd if you have similar sized bodies orbiting each other in a different context. For example, here's a two body system with bodies of similar masses in an elliptical orbit: $URL$ Now, treating the real world as the real world is obviously much much more complicated. However, you could easily satisfy the physicist in me by renaming your object to and ensure that the mass of the parent object is much greater. This comes with the caveat that I don't actually know Unity so I might have misunderstood how the code works. 

It's an interesting problem isn't it :) Here's my extension method that does the same (stripped of some additional options) 

The second output has 1 fewer 'character' in it. Using NormalizationForm.FormD decomposes the string into its canonical form. I could have written but I would have had to look up the modifier character (which, I've ended up doing anyway). 

There is no way that person can be . After being created, you never set it to anything else. Funnily enough, I thought it was going to be my most used feature of C#6 but I almost never use it. 

That's not a good hint - I've already called . The message could also be more specific as you didn't find a not any old attribute type. The point is you've extended 1 line of code to an entire class for no benefit. 

Braces should be on a new line. Remove redundant . Don't make obvious comments about the code. I know that will rethrow any exceptions not handled by the above code. I'd also lean towards a custom exception but I have used for this kind of thing myself and I've certainly used programs that have thrown it in similar circumstances. I feel like it's supposed to be more to do with the current object's state rather than outside factors. 

No more logic duplication. You could also close over listEnd if you wanted to have a single argumented function: 

I'm going to suggest something completely different to your current implementation... I'll dump the code first (see js fiddle) notice that the fiddle has changed from running the script 'onload' to 'no wrap - in <body>' 

It's a stylistic thing without doubt and if you prefer the brevity then that's absolutely fine. I should have been more explicit about that being a preference thing rather than a rule! 

You can see that your (column) is being boxed to an and passed to . So your question is really: why does this work? 

In general, you create your entire object graph at your composition root and never create the dependencies again. You can achieve that with "Pure Dependency Injection" (my example) or with some kind of Inversion of Control container. There are a lot of these, e.g. StructureMap, Ninject etc. Learning all of this can be really tough - I'd recommend Mark Seemann's fantastic PluralSight course on Encapsulation and SOLID. If you don't have access to PluralSight and don't want to pay, you can get 3 months free with Dev Essentials. After the 3 months you'll probably decide you want to pay anyway. Are extension methods bad? No. Well, not when they're used properly. There are certainly trade-offs involved in using extension methods but they are extremely effective when used correctly. Of course, this type of thing is pretty terrible IMO: 

Good use of on the connection multiplexer but consider making it a field so you can't accidentally replace it later. Doing this in the Lazy's factory function is a bit odd in my opinion . I'm not sure what options you have for initialization in a Azure Function but you could do worse than use a static constructor on your type. As for the rest of the function, did you know that there is a type in ? 

This review comes with the caveat that I've spent a few days in total on Elm so far... Take anything I say with a pinch of salt. Firstly, some style things. 

Reuse the mappings Test the mappings Read the method that uses the mapping without tripping over all the code for it 

This is dangerous: you can't make the guarantee that the child node will be a text node. For example, say that I have this console message: 

Now, this is the most troubling line. Constructors should not do non-trivial work. When I first read the code I thought: that variable is unused, it's probably there by mistake. Do you know about ? There's another place where you're reinventing the wheel: 

Some comments on your code: When checking for empty strings, this works but is less than ideal. It can sometimes be hard to see the difference between and when you're scanning the code. 

All of those questions (and more) would need to be supported by your final design. If you just wanted to support 2 for now, you could track the up and down votes separately. As for your code, I'd split out the up and down votes and add a get only property called . Worth noting, if you plan on supporting multiple regions you have to store you dates and times unambiguously. Usually, that means storing in UTC. so