You make a lot of assumptions. The statement about 1 month is just flat-out wrong. Compact flash cards are actually worse for this kind of operation than SD-cards. I tried to install a server onto one which lasted a whole three weeks before dying. Compare that to the server I have running on an SD card on the pi for over 3 months now 24/7. But no, there are no guarentees how long it will actually last. Many SD-cards use middleware to ensure that writes do not happen to the same sector but it is a bit of a mystery which manufacturers provide it with their cards and this is the cause of most of the confusion with SD cards for the pi. Another option is to use the SD-card for the boot loader and keep your distro and a USB hard drive. This however will inflate its size. Lastly the pi is not meant as an everlasting solution. Neither is the beagle board or the Via APC (which both run of micro-sd cards). If you want a full-fledged desktop system, get a pc of your preferred form-factor (via is a good option). The pi is a development platform and should be used as such. 

where mAh is the battery's mAh, mA is the current consumption, and 0.7 is a security factor. I'm currently trying to achieve this by using a 6V battery and a voltage regulator to take it down to 5V. If I succeed I will share it here! Also check for example this pi battery pack from adafruit: $URL$ 

This it what I've done and what has worked for me, but I'm not entirely sure it applies to everyone so do this at your own risk :) (based partially on this post at raspberry forum) I've tested this steps on a 8Gb Noobs image, with only one OS (Raspbian) installed. I have RECOVERY, BOOT, ROOT (Raspbian), and SETTINGS partitions. 

Insert sdcard into an linux computer (I use ubuntu) Backup the entire sdcard to an image file, just in case you need to restore it if something goes wrong! (). Replace "xxx" with the actual sdcard device and "my_backup" with whatever you like. Mount RECOVERY partition in a convenient location () Mount BOOT partition also Copy all files in BOOT to RECOVERY Edit cmdline.txt (now in RECOVERY), where it says , change it to , where /dev/anotherthing must point to your current ROOT Raspbian partition (in my case it was ) Unmount sdcard, put it back in the raspberry pi, and boot it. Hopefully, it should work. 

When I run the code It prompts me to the color 'selection' input, but when I input something the led does nothing. 

so I've read around forums that the max current from a RPi 3.3v GPIO pin is 50 mA, but since it is the max I don't know if I should take a resistor for 50 mA or for a lower current. 

The error was that I had set the pins to their corresponding pin number, not pin name, which meant that pin 11 was pin 17, pin 13 was pin 27 and pin 15 was pin 22. Here is the final code: 

YES!!! Finally got it to work! I installed Raspbian Jessie this time, not NOOBS, I introduced a modified version of @leviataint 's code, changed my Pi's password, and finally managed to SSH using the Pi username. 

The first script is never ending because you have a while True, but you are not breaking it or stopping it in any way. Putting both scripts in a bash shell and calling it will not resolve that. Are you trying to run the first script endlessly as a "daemon"? If so, first test your setup by running both scripts manually in separate terminal sessions. Once you have it working, you can install script 1 as an actual daemon/system service (google "how to install python script as a daemon" for your specific plaform). You will also have to design some form of communication between the two scripts (using a database, a pipe, something) if you want script 2 to use information provided by script 1. I also notice that in script 2 you are not using anything produced by script 1, in your INSERT you are reading GPIO 18 again, not trying to use the "input" variable (that wouldn't work anyway), so how is it that you expect both script to communicate? 

So yesterday I was using my Pi 3 when the power went out. I wasn't really worried, I just unplugged the Pi, turned the power back on, then waited for about 30 minutes, and then turned the Pi back on. And then I wasn't getting ANY response. The green light wasn't flashing, my TV said "No signal detected" and so I thought that I didn't plug in the HDMI properly. So I unplugged it, plugged it, and turned the Pi on (again). Same thing happened, so I decided to install NOOBS again. I deleted all Pi partitions, created a new one, set it as active, formatted the SD card, etc... When I plugged the SD card back in the Pi and turned it on, nothing happened, just the red light turned on (like before). BTW I already had the newest NOOBS version installed. What do I do to make it work again? 

Configure postfix to not use ipv6. Use fail2ban to blacklist ssh login attempts. Update firmware on router. 

Update: After having spent a great deal of time trying to figure this out it seems a number smaller issues have helped: 

The pi does not support -h since it is not capable of entering a powered down state. It is either on, as in running or it is not connected to a power supply. When you run shutdown -h it enters single user mode instead. If you simply need a power cycle why not simply reboot: 

I am using my raspberry pi as a headless server. The problem is that after a couple of hours of inactivity it seems to enter a power suspend state where it disappears from the web and refuses ssh connections. After having prodded it via ssh it comes back after a couple of minuttes and uptime informs that it has been alive all the while. This makes me think it is some kind of power management scheme that is in effect but I have read other places that the pi is not able to suspend. Does anyone have an idea what is wrong? 

Haven't tried this myself yet, so this is a little bit theoretical. The raspberry runs on 5 volts, not 9. Not really sure about autonomy of a battery powered pi, but first you would need to reduce the input voltage. Then you need to be able to supply the pi's required milliamps (check $URL$ for your particular model), and last but not least, would be the matter of how long it would run (which is related to the mAh of your supply). The math is very simple, check this online calculator. Basically it's: 

If you are courious about why this works, I recommend you have a look at this wiki article about NOOBS partitioning and boot process. Hope this helps! 

Based on the fact that your coworkers can access it and you can't, I believe this is possible a networking issue involving your workstation, rather than a raspberry pi issue. 

So, I was wondering if I could light up an led a little bit, so the led wasn't neither off, or completely on. The only way I found on Google to do that was with pigpio, so I installed the program on my Pi 3 and ran it by using sudo pigpiod, then I decided to write a code to see if it worked, but with no success, here is the code: 

I'm trying to access my RPi 3 via Putty from a Windows 10 laptop. When it prompts me to choose the user I type in pi. I have tried typing in raspberry as the password, resetting the password with sudo passwd and trying with that password but nothing works. BTW I have already placed a file named ssh in the boot partition of my Pi so that it automatically boots with ssh on. I'm using NOOBS 2.1.0. 

I've been struggling to make pocketsphinx work with the audio system of my raspberry pi. As stated in pocketsphinx's website, one of the steps to build it for a raspberry pi is to execute this: 

What this does is to setup the environment prior to actually compile the program. I just have ALSA installed (no PulseAudio, no JACK), but configure continues to say that I has found JACK. So, when I run make, it compiles sphinxbase to use JACK. Then, when I try to run pocketsphinx, of course it fails with the following message: 

To the extent of my knowledge, those steps should accomplish what you were looking for. Additional (optional?) steps: 

Why does pocketsphinx want to use JACK? How can I force it to use ALSA (which is the only audio system available by the way). Thanks!