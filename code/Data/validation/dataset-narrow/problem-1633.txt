Its pretty simple, once its installed, requires network access, everything else is enabled via the BMC GUI. Then in RaspBMC you need to enable Airplay once. 

This is not possible, in the way you want to do it. The BCM chip uses dedicated IO lines to the SD card and the OS only has access to this via the Kernel Module, which means the OS must support this kind of data multiplexing (or server if you like) and act as a host. 

Like you said the Pi uses maximum 1A which which should at the worst case give you 2 hours battery time. Now why the peripherals do not turn on might be caused by the line converter you are using. Looking at a generic spec sheet of a LM1117 it is rated for 800ma - These things are smart now a days with current limiting, short circuit protection, etc. Possible cause What you can be experiencing is the current limiting feature on the regulator? Maybe the peripherals does try and turn on but because it does not have enough current the internal circuit of the peripheral gives up and does not turn on again (like a polyfuse) so you have to take it out and try again. It happens so quick that the Pi does not experience a dip and does not restart but too quick for you to notice anything happen. 

The mfrc522-netmf code is build for the MicroFramework and its not the code but the PIN numbering that is not compatible withe the Raspberry Pi One way is try and copy the code into your project and just replace all the with the actual RaspberryPi specific static ones. That code "should" then be able to work on the SPI since the SPI is the same implementation on any device. For more infomration on working with SPI you can look at this to see how it communicates on IoT on the Pi - There is more information on the SPI here and a whole bunch of samples here It not really that difficult to port it over you may just need to invest some time for it. And when you do get it working, please consider pushing your code to the IoT github or host it your self. More people can use it and improve it then. A good sample is here - Try and follow how the SPI device is used. - In particular the method. 

Here I have deleted the partitions. Right clicked ans said create new partition. There is a whole list of file system types. I did not click apply so no operation has been done yet. 

But if you have no choice but to use Analogue you could get a 16 channel multiplexer and connect that using a few digital pins to the Raspberry Pi. You can find those at any popular electronics shops and are pretty cheap, you shouldn't need to pay more than 5USD/3GBP for one of these. You still need to convert the output from the multiplexer SNG to digital though. 

You would then supply 5Volts into the relay Vcc direct from the 5V apapter that connects to the Raspberry, NOT from the Raspberry itself. The transistor, when you pull up a GPIO will "connect" the GND and the relay will work. Transistor have diodes built in and also also offer other protection to the GPIO. Transistors are well marked and you you can use a variety of them. If anything weird happens with the relay the transistor will blow up saving the MCU in normal environments. The worst case scenario is lightning striking it, then, sadly allot of things break. The schematics for the device you pointed out already contain all this circuitry. Isnt that nice of them :) It means you are protected and you just need to connect 3 wires, since all the above is ALREADY on the PCB :) Notice a 4.7K resistor in between D1 and Q1. Q1 is the transistor and you also have an LED show when the relay is active :) Now just take care when connected 220v to J1 - You run LIVE to the relay. So you switch LIVE on AC and not GND. Do not connect LIVE and NEUTRAL into there. 

If that still has not resolved the issue you can try some more, rarely needed commands in the event of a royal stuff up 

I like to use a program called screen It starts a new separate terminal "screen" from where you go do all the same stuff as in a terminal but if you loose connection that "screen" continues to run on its own thread uninterrupted. You can come back and reconnect to it later. To install it simply do ... 

Using GPIO means that MAX have to wire twice as many wires as the amount of slave devices you need. You might end up spending more money on copper than anything else. Also trying to find the correct wire might become really complicated. This problem is solved with SPI daisy chaining that uses 3 copper wires to send data to all the SLAVES but only the target ID will react to your command. 

Those restrictions strictly apply when using UWA you may be able to get away by using a console app but it is not that simple on IoT as everything is sandboxed. Otherwise the other way to use the DLL on the Pi is to run a nix OS like Raspbian, install the latest MONO and then you can embed DLL's into your projects and it should just run, even if targeted for x86 - Thanks to all the clever stuff mono does. 

You might have to press to connect to the access point. If you were wired that will most likely kill the LAN interface and bring up wireless. It is also manages the connection so it will reconnect to any configured wireless access points if it drops out for whatever reason. I tested plugging out the WiFi adapter and plugging it back in. It takes about 60~90 seconds but it will connect back to WiFi (I think the LAN must be unplugged though) Hope it helps! 

I would strongly suggest you use a complete PCB and not just a IC on its own! Just because the pin says connect RX here, TX there and power there- Does not mean it will just work! You need the antenna also; All various sizes for each frequency. It has to be near perfect or you will get poor range, performance. Just find a complete PCB some on ebay, sparkfun, digikey, cool components, farnell, etc etc 

In my honest opinion, your should use the built in LAN on the Model B! It is fully supported by by Raspbian and I can get 80mbits with iperf on my mixed 1gb/100mb LAN network. On my desktop I get 100mbits just fine, for comparison. These kind of problems, that you are experiencing, seem to boil down to power problems, about 80% of the times, on the Pi. I am talking about less efficient, not the bad header issue. You do not say how you connected all this up? An external HUB or just Wifi USB and LAN USB? I would suggest connecting a 5.2volt power adpater to the GPIO pins which is not typical so the next best thing is a Regulated power supply. Not the cheap transistor based ones like mobile phones use. Also connect it to the GPIO. Regulated power supply will make sure the voltage is 5volts up to 98% load of the power supplies capacity. Another problem might be electrical interference between the Wifi Module and the LAN module if they are stacked on top of each other. That is not easy to figure out and is a pain in the back for any RF developer. You are lucky to get nice Wifi speed on your Pi - As myself I, after trying about 6 different kinds of Wifi devices, and 3 routers, this causes so many issues if I move further away form the routers. 

Eagle PCB is a great PCB CAD design software. There are no pre existing designs in CAD as this is usually intellectual property, and cost allot of time and money, if you carry on reading you will understand better. You may consider trying it your self and once you have a prototype you can get a consultant to fix er up for cheaper. It takes some getting used to working between PCB layout and Schematics mode. These modes are used to validate basic circuits. There are allot of design aspects you need to know and usually gain as a professional. For a basic PCB like you need it doesn't really matter for prototyping but any commercial releases need professionals to implement design rules for mass production and FCC regulations. First of you need to find out who is going to make the boards for you. I found Seeedstudio is really great and cheap! THey even do 4 Layers now, but that is used mostly for RF, 2 Layers will be more than enough. They can do various sizes, check the sizes you think you need, you can even split massive PCB and they will cut it to size for you. Once you know the dimensions you start your CAD up and define the PCB borders. You find "SODIMM DDR2 sized (6.5cm by 3cm)" in the parts list and plop it down. From there, the compute module schematics becomes your new bible (If you only have 1 screen, print it out a few times). In CAD start drawing lines from the pins you need and slowly add new parts, like PINS, USB, etc, etc Do not worry too much about how the PCB traces run, you will eventually get to a point where you need to lay everything out nicely, or in an ordered fashion. Concentrate more on the schematics part so it makes sense. There are priority traces and less important but various rules apply. 

You can try and use FFMPEG. But the problem is not to use the repositories version because it is outdatted. There is a forked version that works really well. You will have to compile it which takes 5 or so hours or download a precompiled binary. You can then pipe the data from the V4L driver to FFMPEG with these settings. Where the should just be to caputre the piped stream and the you will need to double check how to output it H264. the FLV repackages it into FLV that can be played with HTML players. 

Its got 1GB RAM, Gifagit LAN, Wireless and a SATA Port, where you can attach a port multiplier to connect a whole bunch of Hard drives in RAID. Its great because you can install the full Ubuntu onto it or Android 4.2 possibly even something like RouterOSEverything but ARM? or pfSenseDoes not support ARM :( but FreeBSD is kind of supported which can do all that. 

To regulate the voltage you can use an UBEC. I have 3A (5A available too) UBEC U3 Pro. There are many to choose from but for the Pi it is important to get one with the filter capacitor on it otherwise you may have issues with Wireless devices. You can find them on hobbyking or ebay. Input voltages up to 22Volts or as specified on the UBEC. I then bought very 2x small NimH in size but pretty big capacity 1500mah battery packs. I had to use two packs (2 x 6volt) in series (12volt) because the input voltage should be more than 7.2v into the UBEC for it to work properly at max rating. So try and find batteries for your solutions, size and capacity that will give roughly +-10v (but more voltage will last longer) charged and fall to ~6v when discharged to have a smooth power experience. 

Piezo speakers are what you need to get some sound out of pushing some frequencies through GPIO. Piezo speakers have a built in driver, a very simple one that uses a crystal and when you apply a voltage or wave that driver creates a resonance that drives the tiny coil in the piezo bender causing a metalic plate to vibrate at the frequency applied and producing audible sound. Piezo speakers draw very little current and work exceptionally well at high frequencies. 

Micro Controllers, they used every where! Fridges, microwaves, heating systems, cars, bikes, some toasters, PC's, Macintosh, iPhone, Android, Nokia 3310, Nokia Lumia, Raspberry Pi HD camera, tvs / monitors, health equipment like cardio vascular implants, Everywhere! Even in the BCM Processor, a version of a MCU kicks of the "System On Chip". The BIOS on motherboards is initialised by proprietary MCU's to kick off the OS on the PC. Has any of that ever concerned you? Has it crashed? needed updates? Nope. Processors are required today run operating systems that need more processing power and flexibility, like on the Pi or Smart TV's and iphones/android. They are prone to heartblead, malware, viruses, corruption, ram failure, bla bla bla. Dont get me wrong. I love the Pi as small computer thing. It would make a great front end for 10 of these devices the OP builds with MCU's. Arduino happens to be very mature, popular, and compatible with crap loads of hardware (code wise) is cheaper and is definitely MORE reliable in doing the same thing over for 10 years without failing, than the Pi doing the same without some interruptions and wont last 3 months. Sure, Micro controllers like atTiny or atMega are 8mhz or 16mhz and cannot decompress a JPEG. But that is not required. There are newer MCU hybrids with 32mhz - 96mhz frequencies if you needed to analyse a bitmap a zillion times over without getting a blue screen or hacked by heartbleed. I talk from experience and the fact that MCU are so transparent in our lives today is because they just work. I am NOT trying to sell more Arduino's or PIC's and defer people away from the Pi. I want poeple to buy more Pi's and buy my book about Pi's. But the PI is just not the solution to the OP's problem and even if he got there he would regret using the Pi. I am not going to pretend like a it is by providing him false hopes and maybe answers. And as it turns outs the OP knows exactly what he wants to do he just started on the wrong Q&A. 

I would recommend using Visual Studio .NET 2.0 or 3.5+(4.0,4.5) with the MONO Cross Platform .NET framework. You can use VB code style in Visual Studio, but the recommended programming style is Object Orientated C#, but using VB you can build linear classes "modules" with little drawbacks. You can install MONO on the Pi and fully supports .NET 2.0, .NET 3.5 with some features missing in .NET 4.5 

Yes, PiFM is great and really, like Fred says, a wow project. Simply transmitting FM on GPIO is was an absolute first for me. It made allot of people, more interested in the Pi, which is great. There can be a few reasons for your issues. 

It will be best to power the Raspberry Pi using a good 2Amp power supply. You will still need a transistor to drive the relay. 

The simplest way would be use the hardware UART (disable console on Pi first) on both devices. When configured at 115kilobaud you can transmit allot of text data, like JSON but even binary data like zips, jpgs can be handled. It is recommended to start with lower rates first because some libraries have issues at higher bauds. You can then write wrappers on the Pi in any flavour you like: C, PHP, Java, .NET MONO, Perl or Python. This is an option for lightweight library that you can build up you self and there are an abundance of articles on how to do this on Arduino and Raspberry Pi. 

I do not know where to get the other versions from, even though I have a MSDN and Microsoft Parter account - I cannot find these download for testing 

This is not how electronics works. Just think about it. Look at your light on your ceiling. Is that light daisy chained to your bedroom light or lounge light?? Nope!Why? Because there is something called like a Common Rail that provided 220v/110v to the a single outlet / fitting which is also fused up and marked well. And that fuse is powered by another common rail that comes out of the street.. and that common rail is powered by another common rail.. yea you get it now... (also each house has it own common rail.. we are not daisy chained with our neighbors, not even in Brazil) Common Rail in your application is to have a nice power supply, like a 10A Switching Power supply (50Watt) - Get a good decent cable of 1mm core and then use that to power all your Pi's, USB Hubs, Touch Screens ... You can run about 25 - 50 metres of 1mm core cable @5v before you start to notice voltage drops at the end. I'm talking about 4.9v~4.8v Daisy chaining as you wish to do it never ends well.. or in any electronics application.