Give some level of bonus points for any mistake they point out - in your teaching, in your problem statements (even grammar mistakes), in your code, anything. They don't need to be significant, just enough to encourage it. After a little bit, not only will your written/handed out material be better for it, but you'll have a group of students ready and willing to work with you. Another option is to give bonus points to a student who can explain a topic more succinctly or clearly than you (first they'd have to write it out and hand it in, as to not waste class time). This will also help you see what explanations stick. Plus, you can just wave off mistakes as a way to 'keep your students on their toes' ;) If no student points out a mistake, prompt them ("I've made a mistake here. Can anyone see what it is?") and then explain it after a second or two. If you realize the day after, address it ASAP in class. 

Very short, clean code. Less variables to keep track of - nice for any programmer, let alone novices. Much easier to iterate through lists/arrays/dictionaries/strings or perform batch operations. Allows you to introduce list comprehensions much more easily (what's a list comprehension but a condensed foreach loop?), and everyone knows list comprehensions are the best thing since sliced lists. Very commonly used in awesome programming languages like Python. (Seriously, though, Python's pretty commonly used - best to be prepared for using it.) 

Well, my first thought is an analogy. Lots of things follow patterns, right? English is a massive, complicated, crazy language, that often disobeys its own rules. (Python is much nicer.) But it, like most languages, has certain patterns. Like tenses, for instance - I drank some milk earlier tonight, but I'll drink some water tomorrow, and I'm drinking juice right now. There's other patterns, too - we don't often use 'methinks', but 'I think', or while texting, abbreviating words quite a bit as in 'lol' or 'ttyl'. We often prefer to use first person when talking, but second person in commercials, and a mix of third and first person in books. Roots in words can help you figure out the word's meaning. In math, most operations have an inverse (subtraction and addition, multiplication and division, multiplying a matrix by a matrix and multiplying an inverse of a matrix by a matrix, etc). Operations involving apples and objects tend to involve integers, while bank accounts use numbers that can be represented as a ratio. Formulas involving circles tend to include $\pi$. In physics, quantum mechanics involves more linear algebra, and it all uses calculus. Papers in physics tend to be more theoretical or more experimental, and experimental ones must show the statistical significance of their results. Physicists tend to be either theoretical or experimental, not both (a famous example being Pauli's ability to break experiments). In Python, brackets with an index or value are used to access elements of a variable commonly, things can often be shortened to make them cleaner and more efficient. Readability and indentation is a must. We use these patterns to jump to conclusions all the time - figuring out words from roots and context, parsing out the pronunciation of a word using phonics, guessing at the meaning of a particular symbol in math, generalizing results, and extending them. Python is no different. Picking out patterns and generalizing is right quite often, and is faster than painstaking trial and error, or reading through every word of documentation. 

Have them explain why this doesn't return (heh, maybe don't use that term) any errors. Have them explain what is doing in this case. Then, another program: 

By prerequisites I mean primarily math skills. There are plenty of kids in my grade who struggle with basic math facts like 5*9, or order of operations. That inability also damages coding ability. Further, a lot of the logic taught in math comes over to CS/coding. Math practice may be necessary to help give them more confidence. A lot of students don't know how to learn. Maybe they've had it easy in school. Maybe it's been hard for them all along and they've just checked out. Maybe they've been struggling but don't really know how to do it other than cram for a test. Teach them how to learn - taking notes, understanding conceptually, understanding practically. A lot of students, especially in countries where there's a summer break, forget a whole lot over the summer, over the months, etc. Do they even remember what they've learned? I sure as heck couldn't tell you what we talked about a year or two ago. Do they remember what a variable is? Do they remember how loops work? Even if they remember the concepts, it's even harder to actually understand them, and be able to apply them themselves in their own thinking. Explore what they mean beyond just definitions and coding, but what they mean intuitively. Lastly, perhaps they know and understand concepts, but they don't know how to build on them. That requires practice and patient teaching, and then a little waiting for that aha! moment when it all clicks and settles into the framework of what they've learned. Help them make connections to other topics. 

A fun exercise is giving the teacher directions to, say, get to and open the classroom door. Of course, the teacher must act like a computer. My engineering teacher did this and it was rather entertaining because one kid forgot to tell him to stop at one point. Another fun exercise in this vein involves having the students tell you how to make a PB&J. Another cool thing is having them play with a robot or major project past years have done - that excites people, even if it isn't super CS related, and provides them with a taste of the awesomeness of your class =) 

Well, in terms of your second example - inefficient code, because it's "easier" - try doing a code golf style game. Whoever gets the shortest code on an assignment, project, lab, or whatever goes on a leaderboard, for extra points. This may help improve coding knowledge. As for the other problem - well, if it's on the student's time they are doing this, then it's theirs to spend. Perhaps show them how they can iterate - starting by creating a quick stick figure for a character and then improving it once the key stuff - the code - is done. Make sure you also have clear expectations - it needs to be neat, but not a work of art. Also, if they are "going down a rabbit hole" by adding extra features to a project in the code, I would encourage that, again perhaps on a leaderboard of some sort (for "most well-done" project, or something like that). So, in summary - it depends on the rabbit hole. Make sure there are clear expectations and challenge them to push themselves with leaderboards/competition/extra credit. Edit: As Buffy points out in the comments, there is too much of a good thing. In industry, there is no need for "extra features" - you do what the client wants, no more, no less. And code golfing taken too far can lead to terrible pieces of code - of course as the teacher, one would have to accept only "golfed" solutions with good variable names, etc. 

Often, an amazing way to persuade people is by showing them. As they say, a picture is worth a thousand words (though I'd say a demonstration is worth ten thousand). So, in this case, try to show other teachers with your class. One of my teachers is kind of an amazing guy. He teaches 8th grade science. So he made up a few songs, and sang them in front of the class (which to a bunch of adolescent awkward teenagers was kind of jaw-dropping), and taught us about the layers of the Earth that way. And he told stories to make a point. I really think everyone in the class liked him, as a person at least. And he told us at the beginning of the year that every one of us could get an A, if we worked hard enough, that he would make sure of that. And the other thing about this is most teachers, I think, know that they should try to reach everyone. It's a matter of doing it. Another teacher of mine pulled a couple of us aside and told us we were to be her guinea pigs - she was trying to start figuring out a system to start trying to reach some of the different levels of students. So I'd say, most people recognize it - then take the plunge! Ask students to help you out. In the end, though, it's the teacher's choice to do that. Another thing I should point out - yes, there are kids out there who are total jerks, or who seem not to have picked up that yes, they are in 9th grade, and yes, acting like a 3 year old is no longer an option, but there are also tons of kids out there who are more mature than some adults. Please, don't blow us off.