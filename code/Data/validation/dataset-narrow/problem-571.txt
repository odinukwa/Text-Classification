just a few ideas from the top of my head. I would define a variable with your start directory at the top of the script, so to that you can always refer to absolute paths in contrast to using often. In case you ever change the structure of your script, this will ensure that everything keeps working. 

Start parameter adjustment The adjustment of can be done before entering the while-loop. Making the while loop shorter and easier to understand. I suggest placing it at the beginning of the function, as you are adjusting an input parameter. Some people think it is bad practice to overwrite a parameter's value, but that depends on your personal taste. I think it is ok in this case, if done at the beginning of the function. A different way to handle the situation of an incorrect input would be to throw an exception, because clearly the input is incorrect. Documentation I'd sugguest adding some comments to at least your public methods, so that the user of your utility function knows how to use it properly. This would also be a good place to document how you handle incorrect input (e.g. the correction of the start value to one, in case the entered value is smaller than 1). Pattern as static variable As the used pattern for splitting is a constant, you could handle it as such buy using a static attribute like this: 

I like the Idea of this very small framework and it looks like a nice way to measure runtime quickly. I just have some minor comments. If-Statement 

I agree that the String should be left out of the name, as this is quite obvious in StringUtils. How about this short version? 

Hope it helps :) On a last note, you should try to write some unit tests ;) it really helps getting better at coding ^^ 

Now, instead of implementing our own solution, let's take a look at the standard library for an answer. No method exists in the utility class... but let's dig a bit more : you can rotate a List so let's do that : 

Now, onto the main course : I find your algorithm overly complex. :/ It's also higly "procedural" IMO, in modern computing we'd rather "tell" the program to do something instead of manipulating everything by ourselves. Julien Rousé has shown a nice and short solution in another answer... which is probably faster than mine but please bear with me :) (After rereading my answer, I see that I used some Java 8 tricks that may feel overwhelming if you are a beginner, if you are new to programming I'd recommend to not consider my solution) Let's try to solve your problem step by step : Here is a simple solution I came up with (almost the same as Julien Rousé) 1) count the number of occurences within your array... you end up with a structure linking all elements with the number of occurence... it's usually called a bag, while there are some java library that supports this structure let's keep things simple and use a Map 2) if any occurences count is greater than the maxOccurence parameter then it should be set to maxOccurence 3) for each elements in your array, print it if the number of occurences is greater than 0 and reduce the number of elements in your bag Let's dig a bit in java 8... surely there's a tool for us in there. We are looking for something that'd allow us to "tell" instead of creating everything by hand. In the Collectors util class ($URL$ we can find some really fancy tools. For our use case, and sounds useful. groupingBy allows you to transform a stream of data into a map where the key is found using the first parameter. counting (from Javadoc). 

I have a number of suggestions: Exceptions I don't think your constructor actually . Remove it? Braces in if-blocks Use braces even for one line if-blocks. 

This saves the jvm from compiling the pattern for each new instance of the class. Micro optimization You can save yourself the boolean by checking instead. 

I think the is not needed, as this is the pre-condition for adding a method to . Code Documentation Your code is lacking any form of comments in the code. In my humble opinion, at least every public method should be commented. For developing it might be useful on private methods as well. For example to me it is not obvious (by reading the method names) what the difference between and is. Comment ratio depends on your personal taste a lot though and is very dependant on the methods' names. Other Comments could probably be inlined. It is only used once in . : Maybe rename to to: or similar? : Maybe rename to or similar? : Maybe rename to or similar? Someone with more expierence implementing anotations than me should probably answer your questions about the annotation implementation, so I'll not comment on that. 

As for the structure, I'd probaly create all the directories in one 'paragraph' and add the templates in a second step, just so that you one place where you can clearly see which directories are being created. But that might just be my personal tast. In the template creation I'd use absolute paths here as well, using the new variable. Keeps you from having to navigate around a lot using which might cause confusion later on. Hope this helps! 

The could be abstracted with a function... Since Java 8 we can pass objects that are very tiny wrappers around functions, they are called s. Let's take a look at the package storing all those objects : $URL$ We sadly cannot use as it cannot throw exception... there is a interface in java.util.concurrent but we cannot use it as it doesn't take any parameter... so let's use a new functional interface that suits our needs : 

I'm one of the people that don't really care about using for very simple cases... however putting the return on the same line makes it harder to read IMO. As said in others questions, any good IDE have a code formatter included solving all previous points (and auto-indenting your code) ;) The Sieve is okish... I don't really like the fact that it fails with an exception when you use with a too big number. Also you should make the field ;) I'd probably make the sieve lazy and not compute it until is called for the first time. 1000 is a magic number and should be turned into a constant. Finally, storing every results in an array is really space-inefficient. Maybe consider storing only the integers that are prime into an , the method with a is incredibly fast. I'd optimize to : 

One last point : some people think it's a bad practice to use s as parameter in Java ;) Hope it helps ! 

General notes about formatting Your indentation isn't very good. Also, it's usually a good idea to have space between comparator/equal sign and their operand ( instead of ). You also want to have a space after commas to make the parameters more readable. Any decent IDE have a code formatter that can solve all this issues ;) A few proposals