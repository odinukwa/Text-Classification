The reason might be the way in which the Content Pipeline works. It compiles the various content into xnb files, then loads these back again when you run the game. I think some of these xnb files are caching and arent being recreated when you switch screenmodes. Try this to see if it helps: go into the Debug/bin or Release/bin folders in your project folder depending on your build configuration, and delete any files. Build and Run again, see if it solves the problem. 

Non-distributed systems as you mention, rely on processing within a local environment. They are not designed to scale. Therefore, your approach is based heavily on the use of local processing, in that you aren't considering distributed approaches. Distributed systems, rely on processing spread out both locally and remotely. In order to achieve a communication method between these systems, a messaging architecture is added in. Information and data is exchanged by this messaging system. These approaches scale well, but require a modified design approach from the start. It's hard to tell if your planning is feasible for the long term, but definitely feasible for the short term, where scaling isnt an immediate concern. 

so, you could ignore the requirement for an app.config, and simply pass in a string for the configurationname and endpoint, such as an endpoint written as eg: "http......". Im not sure how the configurationname should be written, you will need to look at that within your app.config and paste it as a string: 

EDIT 2: It looks like the ContentVaultServiceClient is implementing the IContentVaultService, therefore we could write something like: 

It looks like the endpoint configuration in your app.config is missing in Unity. The exception points to the "ctor" or constructor. The fact that it errors on the "InvalidOperationException: Client endpoint configuration '*' was not found in 0 endpoints." makes me believe that it cant find the configuration for that endpoint. It probably needs that, so that it can make the secure connection. So, if it were a problem I needed to solve, i would start by looking at how to use the configuration in the app.config file, in my unity project. This exception doesnt relate directly to the fact that the dll is compiled against the wrong .NET version, it relates to the configuration of the endpoint only. EDIT: if you look at the instancing of the contentClient: public class DataManager { static ContentVaultServiceClient contentClient = new ContentVaultServiceClient(); you're simply calling the default constructor, but, the class has several constructors of choice, namely: 

This isnt the full lowmemblock, but just a snippet. It highlights the point of efficiently using the high and low nibbles, to further reduce the size of the block in memory. One other interesting point to consider, is Garbage Collection. If you are able to sacrifice a potential stutter at specific frames, make use of the gc in .NET to clear up deallocated memory. Two more techniques that I found to work well are: 1. Sparse matrices: $URL$ Quote: 

Here is an analysis of Kickstarter projects for games 2012: $URL$ The final few slides provide a percentage split per game category, and interesting for you is a comment on slide 15 - "RPGs and Adventure games are still very much dominating" Edit: Another article $URL$ for global sales across all platforms, compiled during 2012, shows 4 of the top 5 slots are held by RPG and Adventure games. Edit2: Alexander, if time is no question for you, then please make use of "App Annie" (google it), and Distimo provide reports too. You could contact Distimo or AppAnnie via email and ask them a question or two on this matter. Good luck! 

This gives us the WVP matrix for rendering the mesh at the chosen block. But, we still need to determine which block to place adjacent to that selection block. This is done by using a vector3 to that position: 

I'm a coder, not an artist. In making games in my free time, I found that sometimes if the gameplay is good enough, the graphics don't matter. You can make great free sound fx using $URL$ for example. My advice to anyone really, is think about a great game idea. Why not use one of the 100s found here $URL$ ?? Work on the idea a little. Then, see what can be done with the graphics without changing the gameplay. Here's a great blog post with links to free music composition tools: $URL$ Again, gameplay first :) 

What you need to do, is split the world into regions. Perlin noise terrain generation can use a common seed, so that even if the world isnt pregenerated, the seed will form part of the noise algo, which nicely seams the newer terrain into the existing parts. This way, you dont need to calculate more than a small buffer ahead of the players view at a time (a few screens around the current one). In terms of handling things such as plants growing in areas far away from the players current screen, you can have timers for example. These timers would iterate through say files storing information about the plants, their position etc. You simply need to read/update/save the files in the timers. When the player reaches those parts of the world again, the engine would read in the files as normal, and present the newer plant data on screen. I used this technique in a similar game I made last year, for harvesting and farming. The player could walk far away from the fields, and on returning, the items had been updated. 

Think in terms of glyphs. Decouple the display of the text from the meaning behind it. For example: (pseudo code) 

Without getting into discussions about matrices and viewports etc, it looks more than likely that your sprites and tiles are being drawn just fine, but at positions that are outside of your fullscreen size. Something like this in your main class should be there first: 

An idea: I would think a camera for the front layer is enough. Placing sprites a distance away from that on the z plane, and lerping the distance gives you a fraction on which to move that back layer. For example, an object distance 10 from the front camera moves 1/10 in the background layer. An object of distance 2, would move 1/2 in its respective layer, etc. 

Some things to consider here are that the object might not be rotated towards the camera, and that the position in 3d world space of the object is not always linear. So, objects farther away from the camera would need the font size reduced in relation to their depth in the view. Here is some sample code that transforms relative to the camera: 

The sparse matrix is ideal: It allows you to specify a position, and store the data at that position. The positions in the sparse matrix that have no data, are not initially allocated. So, in reality, the matrix is a defined array, but only that doesnt use memory for any cell that has no data. It is much more memory efficient that a usual array. But, I found that it can be slow to traverse when dynamically reallocating, as I was doing with procedural voxel terrain. It might work perfect for you in your game though. 2. Weak references: $URL$ Quote: 

You shouldn't be attempting to instance individual cubes at all. I developed Techcraft together with two close dev friends. It has all the sample code you will need to learn from, if it helps. Feel free to download the source code and use as you wish: $URL$ Good luck! Hopefully we can add your game to the list on the project page. 

Here's an example of a large number of block entities per frame: $URL$ (spool to position 1:07) The way I had 100,000+ blocks per frame, single threaded was to limit the data that defined those blocks, ie: 

The glyph atlas can in fact be a lookup into a ascii table with various encodings. The point here is merely to separate when to display, with what is to be displayed. I would recommend making a framework from scratch. It would give you more freedom.