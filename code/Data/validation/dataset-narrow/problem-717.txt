The following is rather unconventional but it is simple and fast. Run this only when CSS files needs editing: 

the true condition should usually precede the false. so if I used the if else` this would be better: 

You could just add pairs to the HTML and this routine will automatically find the pairs of divs. There are just a few rules to the id naming convention. This javaScript routine works with between 1 and 100 pairs of divs. It could be expanded to more divs by adding more digits to the id The pairs must be the only divs where the id starts with "d". In the pair, one div must start with "d0" and the other "d1". The following digit or two digits are the pair number. id="d0x" is paired with id="d1x" where x = 0 through 99. This snippet uses the same id pair numbers as the previous snippet: d0x and d1x and pair numbers (x) are 1,2,3,4,and 99. The first part of the JS finds the div pairs The last part sets the height to the max height of the pair. 

You may be over thinking it. It's actually very simple. The only ambiguous thing is if the year is two digits. In most cases a two digit year can be fixed like this. I believe in your use the month and year will be all be future and nothing from the 1900s. 

Responsive Design 101: All, whenever possible, horizontal CSS widths should be instead of or a percentage. All font-size are specified in em. Height should not be specified, so when the width is reduced the height will auto increase. The basic structure of the page: 

While on the subject of parameters I would suggest using integer parameters over string whenever possible. Integer is compact keeping down the Request Header size, is the easiest to validate, and makes comparison functions faster. Example: On a string true false parameter , no need to do it's not there it's zero. And it resolves typing between numeric 1 and string '1' when it is used as an array dimension. Instead of this: 

Where the width of #page would be device width. A responsive design cannot have a fixed width. A desktop responsive #page will have a max-width and a to center it in larger windows. For mobile the max width should be used in the viewport meta tag. If the max-width: is 60em, then the viewport is 16x or 60 x 16 = 960. 

if you want to limit what you find to a particular scope. Or, perhaps you should just be using a class name if there are potentially multiple matches: 

You are correct that it would be much faster to parse all the parameters once into an object and then just access them from there rather than refind every single parameter from scratch each time: 

FYI, I also find this a LOT easier to follow what's actually happening than the code you have. It also saves several comparisons on the value. 

And, you'd have appropriate CSS for a testItem span (see the jsFiddle demo for details): jsFiddle demo: $URL$ 

If you can allow fetch to load potentially before promises are available, then you could use the fact that fetch presumably can't exist without promises in a native browser environment (because fetch returns a promise) and could use this shortcut: 

In modern versions of node.js (v6.0 or v4.x in strict mode) or when using an ES6 transpiler, you can use the ES6 keyword: 

You can rearrange the if/else to be a little more efficient. You can retrieve the length a little more efficiently. And, use (pre jQuery 1.7) or (jQuery 1.7+) with a selector of a parent object close to the elements. That will perform much better than for large numbers of elements. It could look something like this: 

You can combine the two identical assignments at the end into the same line rather than recalculating the same value again: 

Correct (produces the desired result) Reliable (always produces the desired result) Robust (handles errors appropriately and is not brittle when things change around it) Readable and Maintainable (try working on someone else's code or even working on your own code 3 years after you wrote it) Appropriate Performance (most code does not need to be optimized for performance) 

You could also remove some redundancy from the table by making the table only be the steem method name you want to call. 

is pretty harsh (removing all possible styles). If you're just trying to show the menu again when the width has exceeded a desired value, then you can just do this: 

Case insensitive tasks require extra CPU cycles. RegEx is the usually least efficient string function especially compared to stringtolower() and trim() Using these two function before the RegEx gives the RegEx less work to do. Consider giving the trim additional mask characters: e.g. Plus any other characters that could need to be trimmed (quote marks?). This worked well for you test : 

If you want a product id to return a list of products use a non-zero id. For delete, return an error status status on zero the same as if it were an invalid product id. 

At this point in your code Assert RTS and DTR Then Check Port Status by reading DSR and CTS If the device you are connected to does not support hardware handshaking they may have these signal set to an active state or they may be left unconnected. If these signal are not driven by the connected device, be sure your cable loops back your DSR and CTS to your DTR and RTS. Or use an RS-232 loop back adapter. Keeping in mind the PC is a DTE (Data Terminal Equipment) device not DCE (Data data Communication Equipment) When designing the original PC IBM perceived the PC to be a Terminal to their Big Iron so the logic of DTE and DCE are reversed. 

I would rather see ENVIRONMENT equal to 0 instead of 'development' and 1 instead of 'production' This is so if it is undefined it will equate to zero with . 

I think a good responsive design does not start with downloading 247,387 Bytes of jQuery and 67,546 Bytes of Bootstrap JS. It only requires some simple CSS. Instead of trying to decipher what Bootstrap is doing with jQuery, take that learning curve and use that time to learn CSS. Bootstrap is a band-aid. A band-aid that is not needed. And definitely a cure worse than the disease. When something is not working correctly how do you remedy the problem. It's a CSS problem. You didn't take the time to learn CSS but put on the Bootstrap Band-aid. Felt good at first. Now you have a problem. What to do? Is it a Bootstrap problem? A jQuery problem? A CSS problem? It's a CSS problem buried under 300+KB of Bootstrap and jQuery. Good luck with that. The only reason I know Bootstrap exists, is because so many issues are posted on Stackoverflow. Basically you will at some point have to put yourself at the mercy of others to fix your problem. Will someone be there for you? No it's not that bad. You just have to give up on that creative genius idea that got you stuck. Bootstrap, Mediocre at Best If you are going to use 3rd party tools use something designed by those that know what they are doing. Not Bootstrap Number One, I think a good design has no HTML or CSS errors. I have run bootstrap's pages through the W3C HTML, CSS and Mobile OK Validators. As I recall the page I ran had hundreds of CSS errors. I just now picked a page at random and 44 CSS and 14 HTML Errors. Their pages also score 0% (zero) on W3C MobileOK. Mobile experts? I think not. So when the CSS is not working correctly, what do you do? CSS can be difficult. Now add 300KB of JavaScript and you end up creating work arounds for Bootstrap and jQuery because they are too troublesome to figure out how they work. I find many (e.g. Bootstrap) associate responsive with mobile, which is not the case. Non-Responsive is when the text goes off the right side of the screen and you have to scroll over to read. The horizontal scroll bar will never appear in a response design. Whereas mobile is about font size and readability, viewport, and usability. If the buttons that need to be clicked are too close together and or too small, usability suffers. When on a mobile device have you ever had to zoom in on something to click it or read it? Ever need to zoom and the view port is set to not allow zoom? Why would anyone think they should take away zoom from the user? Keeping that answer to myself. Another requirement is the Web Server be configured correctly. Bootstrap has 9 JS files in their , these 6 are servered from their Server. 

What you have looks like it would work just fine. Declaring the structure does not execute the functions you've assigned as properties. It just defines the functions and assigns them as properties (waiting to be called later). You could save a little execution overhead by moving the static definition outside the function so it just gets defined once (I'm assuming this is private module scope so moving the symbol outside the function is fine) and change it to . You can also remove the and since neither add anything here. You're just returning a promise anyway so you can just return the promise directly without and . I also added more explicit error checking for the category name. 

So, this is pretty much the same amount of code as what you had, the main difference being that this version has full error handling whereas your version did not handle errors from and the browser request was left permanently with no response upon error. 

Your object would be simpler if it was a object because you can avoid all the stuff and just use methods like , , etc... It also has built in iterator instead of your manual iteration. 

Your implementation is taking and mapping it to which is not exactly the same thing. An exception or return of a rejected promise in in your implementation will hit the , but in , it will not hit , so I think your is not correctly imitating the behavior in some circumstances. Here's my implementation that should more closely mimic : 

And, here's an even faster version that just attempts to calculate the desired pixel spacing and starts with that. This is 14x faster than your original. I don't think the last two loops are probably needed at all. 

The last three steps are pretty much the same for all branches once you have the value and know the style name. So, you can move those three steps to a common place and do them once and just set up the appropriate state in the if/else. Also, this structure: 

Putting inside another function like this seems a little odd. Usually, you would call inside a as that would make your function a bit more reusable. Setting up an ajax call to run every 3 seconds in perpetuity is generally not a good idea. For starters, it's horrible for battery life (phone, tablet, laptop). And, it can get messy if you every get in a situation where the ajax call takes longer than 3 seconds to finish or timeout. Then, you have multiple ajax calls in flight at the same time and they could be building up. The safer way to do this is to launch the next ajax call from a that is set in the completion of the previous ajax call. Then, they can never build up. 

Expand and Contract (ec) the one Section where multiple Sections can be Expanded or Contracted. Only one Section is Expanded at any given time. (ecp ec paired) 

Below are actual numbers from webpagetest.org. when the content download is less than 1ms webpagetest reports nothing. The numbers for these two figure I got from my Browser. 

Consider using an extension other than . Even html is easier than php for users to remember. You could use the extension for the user to select the response type. For Example: In the Apache config or .htaccess 

And it's not because of all the unnecessary bandwidth wasting white space either. 100% of what? Just by the nature of HTML it is going to always expand to 100% of the content. 100% of the Browser window? Why? If there is not enough content to fill the window, why fill it with 100% of nothing? Your page no Bootstrap or jQuery: Basically I changed the #loginBox CSS from to 

At first glance I would first trim without a mask and then stringtolower inside before the preg_replace. 

Check validity of all passed parameters. Then determine the best, most specific and user friendly response. The best user response is to fix the error when possible. If a parameter is missing, add a default. If you had an HTML error on your web page, do you expect it to render? Would you like it if a single HTML error returned a 404 response? If a Browser was that rigid it may not get much use, same goes for your API. 404 is not an appropriate response when the document URL (index.php) is correct. Additionally this will confuse some users as to why. They may just think your server is down and they go somewhere else. Consider using an alternate response such as 409. You want to make it as easily as possible for the user to understand what their mistake was. 404 should be reserved for an error in the URL Also for diagnostic and support issues, use various response codes for different issues and document them for the user. You could use a text header and a message identifying the specifics problem with an error message.