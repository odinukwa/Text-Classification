The operator will read one word at a time, not a whole line. If you want to read whole lines, you should use . 

Again the input is one word each instead of lines. Data which includes the word would trigger the end. 

In summary: Your code will likely not do what you expect it to do in many cases. You should generate more diverse test cases. (try instead of in your example file and report what happens). Several parts of the code are redundant (all the map-iterating loops) and at the same time they might be very time costly for large input files (since the map might grow rapidly). 

There is a fair amount of room for art and style in formatting, so don't take any particular suggestion as "you must do it this way" — in fact, I've mixed a couple different styles into the above example. The goal is to write code for which it is easy to see what the intention is, and without much clutter. You can improve readability further by realizing you don't need the , and can simplify to printing newline characters: 

Note the use of and for yielding results. Using generators has a number of advantages including: you get to see results as they're created, you can stop iterating when you're happy with a result, rather than having to wait for the entire recursion to finish, you don't waste memory/time creating a list of all the results. Generators take a little bit of time to get used to, but they're well worth it, and should often be preferred to returning lists of results. Finally, one last neat trick; the general pattern of "make a change ... do stuff... undo the change" can be error prone; it can be easy to forget to undo the change, or an odd code path (e.g. an exception) skips the change. The other answers suggest making copies; however, backtracking algorithms like this can often suffer massive performance penalties from such a change, so it's worth knowing a pattern that mitigates this problem without introducing copies. We can use a context manager to do this automatically, such as below. (this post is not meant to be a tutorial on context managers) 

The whole purpose of a map is to be able to access the values via a key instead of iterating over them. You should use this functionality: 

Instead of using , you can also connect the comparisons all together, potentially saving the double variable lookups: 

I think this doesn't do what you expect it to do. It finds the position of the last character in which is equal to either of the single characters in . You probably want to use instead, which returns the position of the last occurrence of the full string . Looking at your example file however I believe you actually want to check whether the beginning of the line is (consider the work string might include ), so you would use and check it against instead of . 

There is a better way to implement the design you seem to be using. Rather than generating numbers and storing them in a list, just generate the numbers: 

You are using a reserved name due to the double underscore; you should adjust your naming convention for header guards (e.g. only use a single trailing underscore). The relevant passage from the C++11 standard, 17.6.4.3.2 , says 

There are times when it makes sense to have some sort of class whose instances are objects that can perform a bubble sort. This is typically when the algorithm might need access to some precomputed data, or maybe to acquire resources that will be reused through several invocations of the algorithm, or hold configuration options, or is keeping track of performance metrics, or other such things. (but this pattern has its own advantages and disadvantages and there are other patterns that can be used to achieve that effect) However, this implementation is very much not one of those times. 

Here you try to dereference , which you previously checked to be . Dereferencing the iterator invokes undefined behaviour. Since I guess these lines are debug output only anyway, just remove that part. 

In order to use you need to . What is the purpose of the at all? It stores the s as keys and s as values. The only difference between the two is that has an added. Why do you need to save this? You can append the each time you have a new . This would be much easier to read and much faster. If you are trying to minimize the number of calls you might want to store all the opened s in the map and access them as you need them, closing all at the end of the function. Notice however that is not copyable, so you need to store references to them in the map, instead of the objects themself. If the input files are not that big, you might also consider saving all the parsed data in memory first and then writing it to the output files in one go. While parsing you can use a string-string map to save the data for each file. You are lacking any check of syntax errors in the input file. You probably should add code that reports back if the syntax is not as expected instead. 

One issue is that your function is four functions in one. The problem is that they are four unrelated functions — yes, they all have the job of displaying results, but: 

Finally, one may dislike the fact that useful functionality is buried in nested functions; we can pull the nested functions out: 

Making a local variable will likely result in a performance increase. It would also allow multiple threads to safely invoke concurrently. Similarly, making static will increase performance. Not directly, but because the current design will tempt an application to create new objects all the time whenever it needs to perform a sort. 

Since you do many index lookups on these arrays turn them into lists. Numpy is not good at single index lookups. 

You should declare objects in the narrowest scope that they need to exist, instead of the function head. 

Instead of assigning the array elements to , , etc., use them directly. Since later comparisons are not executed if earlier one already return this might save array lookups: 

What is the purpose of this stream? It is opened (multiple times!) in the code but never written to. 

What is the purpose of this loop? You just inserted the key into the map and now you search it again. Why not simply access it directly: 

This advice is likely to be somewhat controversial, but Explicitly flush when output should be available 

and let manage the allocated memory, rather than managing it manually. Similarly, in , you have declared 

Use the memory management tools the standard gives you In particular, should be of type , not . The memory management you are doing is a standard and common thing... and also well-known to be an extremely common place for programmer errors. Use the right tool for this job, so that it's easier to write code, less likely to have errors, and more obvious to the reader what your implicit intentions are. (and yes, you do have errors — for example, the way you wrote the code requires a destructor to deallocate the memory, and you don't have one!) You have a const correctness error is a const member, but it returns a pointer that would allow the user to modify the contents of the string! If you are going to have this function, you should have two variants 

Your algorithm is of time complexity in . If your current code needs for , then one could estimate the time for to be roughly . Even an improvement of the most inner block's execution time by a factor of would yield an execution time of about . I guess this is not good enough. So you should better try to improve the algorithm itself. However I do not really understand the problem the function is trying to solve and I couldn't come up with a better solution on the spot. Also I haven't looked at numpy approaches, because you seem to have no vectorizable calculations in there. Nonetheless I tried to make improvements to the code as is. I came up with the following: 

would be better. In fact, you might consider doing something different: you could pass around by value rather than by pointer. Passing these objects around with move semantics may turn out to be more efficient. (you should probably explicitly deleting the copy constructor and copy assignment, to indicate that they shall not be used that way. Although this will automatically happen implicitly if you follow my advice and change to be a ) 

Generally speaking, buffering is good for performance, so it's better to write newline characters rather than inserting when you don't actually need flushes to happen. As a bonus, they're less typing and usually easier to read. Of course, I/O performance is basically irrelevant here because the human delay far outweighs any other concern — but it's good to get in the habit of writing what you mean early on. Thus, the above code snippet demonstrates the general pattern: I use newline characters to write newlines, and I do something to flush the stream at the point I want to ensure that all of the output has been written. Using to do the flush isn't an option here, if I want the flush to happen at the right place! 

These two strings are the same? Why? In the following code they are used interchangeable, so stick to one and remove the other. Even if they were used differently you could still use . Also you are trying to get a substring of the same length as the whole line (the second argument to is the length of the substring to be extracted), which obviously doesn't work. However truncates in this case such that a substring ending at the end of the input string is returned. The supposed filename you are extracting should be the part after in . However you start the substring one position after the position of the last occurrence of , which would be result in being part of the string. However with the particular example file you provided and in combination with the semantic error I laid out in 5., you actually get the expected result. Here two errors cancel each other. For different input however you would have very unexpected results.