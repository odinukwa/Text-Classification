Your router has two IP addresses, an internal one for your local network and an external one on the outside. Your client looks up 123.123.123.123 in it's routing table, decides it doesn't have a better match and sends the packet to it's default gateway which is your router. When the router receives the packet it looks up to see whether the destination IP is one of it's IPs. It is so it processes the packet locally. Why do you see the admin interface when accessing the public IP from inside but not from outside? Most likely the answer is your router has firewall rules for local traffic which are based on the incoming interface. So the request coming in from outside gets blocked but the request coming from inside gets let through. 

Traceroute relies on sending out probes with controlled TTL and monitoring the ICMP time exceeded errors that come back. The probes can be any protocol. Windows uses ICMP echo packets by default. Most unix-like systems uses UDP packets by default. If our networks were as simple as the designers of the internet envisaged there would be no need to have options for changing the protocol used in traceroute but in reality we have firewalls, NATs, traffic prioritisation systems etc. Using the same protocol (and possibly the same port number) for your trace as the protocol the application will actually use increases the chance that the results of your traceroute will be representative of the network your application will see. 

PPPOE has little to do with it beyond the fact that the "PPPoE server" is likely the first IP device your traffic hits in your ISPs network. NAT can be used to translate the addresses on packets to hide multiple clients behind one address. In your case you have two layers of NAT, your local "router" acts as a NAT hiding your private network behind 192.168.13.234 your ISP in turn has a NAT hiding multiple customers behind 91.223.224.42. If you control the NAT you can "port forward" incoming services through it, but if you don't control the NAT you can't do that. So you can forward stuff through your NAT but it doesn't really help you because you can't forward it through the ISPs NAT to your NAT. 

What happens next depends on the type of interface. If it is a point to point interface the packet is just sent. the next hop IP address is ignored. If it is a type of interface that supports multipoint addressing with it's own addressing scheme (for example the MAC addresses used by Ethernet, wifi etc) then the next hop IP address is looked up in the ARP table for the interface, if a suitable match is found then the Packet is sent. Otherwise the packet is queued while an ARP request takes place. If the ARP request is successful then an entry is added to the ARP table and the original packet is released to continue it's journey. If the ARP requests are unsucessful the packet will be dropped, possiblly with an ICMP "destination host unreachable" error being returned to the sender. 

So what happens when you power cycle a machine and ping it? At first you likely already have a valid ARP table entry. Your machine puts the packets on the wire but they never get delivered because the network stack on the destination is down. You get "Request timed out" (with microsoft ping, linux ping doesn't display the lack of response at all). Later the ARP cache entry times out. The hop before the box you power cycled (may be your client box or a router) tries to do a new ARP lookup but fails, so it bounces the packets with ICMP errors. Often you see multiple packets get queued up and bounced at the same time. Finally the network stack on the target box comes back up. ARP succeeds and the packets are sent to the target which replies to them. * With IPv6 the principles are similar but the details are different. 

Yes it is possible to run two Ethernet lines down one four-pair cat 5 cable. There are some caveats though. 

There are several possible soloutions to "Not enough IPs" depending on what exactly the problem is, what equipment is present, how cooperative different stakeholders are and so-on. 

Yes. Devices on the same L2 domain can be vulnerable to each other. ARP spoofing, Mac spoofing or MAC flooding techniques can be used to intercept traffic. Protocols other than IP may be running and not as well protected as IP. Some software firewalls default to trusting devices on the local subnet. Some switches have features to mitigate these issues but they are bolted on as afterthoughts, in some cases you may find your switches have protection features for IPv4 but no corresponding features for IPv6. It is also difficult to firewall between devices on the same L2 domain. Splitting up the L2 domain allows you to reduce your exposure to L2 weaknesses and allow you to put firewalls in place to control communications between different parts of your network. You could do this splitting by building physically seperate networks but that is expensive and error-prone. VLANs with tagged trunks allow you to realise much of the security benefit of seperate networks without the high costs. 

Assign the IP addresses to the interface with a /32 netmask Add an explicit route with the netmask you want. 

Your client sends to initial packet. The router gets the initial packet, determines it relates to a new connection and passes it through the chains in the "nat table". The packet is matched against the SNAT rule. The router modifies the source address. It may also modify the source port if the rule requested a randomised source port or if needed to disambiguate return traffic. The router creates an entry in it's connection tracking tables describing the new connection and the translations that were performed on it. The router sends the packet onwards towards the internet. The server crafts a reply, swapping source and destination IP and port as normal. The router gets the reply packet, looks it up in it's connection tracking tables and determines it is related to an existing connection. It changes the destination IP and possibly port. The client gets it's reply with the expected addresses and ports. Further packets relating to the connection continue to be translated based on the information in the connection tracking tables. 

It depends on the relationship between the entities. For an end site with a single IP using NAT it is likely that the provider will simply treat the customers router as-if it was an end device. The provider will allocate the customer their IP either using DHCP or using the IP allocation features in PPP. The customers router in turn will point it's default route at the provider and will perform NAT to hide the private IPs of the internal devices behind the single public IP. For an end site with a single block of public IPs and a single upstream provider it is most likely that static configurations will be used. The provider will tell the customer what settings to use on the external-facing port of their router and will then statically route the customer's IP block to the customer's external address. The customer will point their default route at the provider's router. For complex relationships where large numbers of prefixes need to be exchanged between the entities BGP is normally used to exchange prefixes. 

It depends on what is connecting the devices. If it is a hub then the frame will be delivered to both B and C. If it is a switch then the frame will be delivered to whichever of B or C most recently sent a frame to the switch. If the frame arrives at C it will be processed normally. If the frame arrives at B then asuming B is configured an end node it will probably drop it. If B is configured as a router then it may try to route the packet. This may end up with a duplicate packet arriving at C. 

EEK If by "hard reset" they mean reset to factory settings that could easilly have made the situation much worse. 

I'm not at all convinced that there won't be customers with overlapping IPv6 addresses on their internal networks. Furthermore I think even if there are no address overlaps there will still be a desire to keep traffic belonging to different customers separate. Firstly because it's less error prone to tag everything with a customer than to maintain a massive central list of what addresses belong to what customer. Secondly because you will get situations where two customers do want to talk to each other but they want to route that traffic through a central location where it can be firewalled/monitored, not just have it hop across by the shortest path. 

There is no way for a router to say "I have routes to these networks but not the internet in general". There are no provisions made for redundancy and load balancing of multiple gateways (this can be hacked arround at lower levels). DHCP servers are stateful There is no provision for running multiple adresses in paralell. IPv6 proponents saw running multiple addresses in parallel as a soloution to support multihoming without resorting to NAT or bloating the gloabl routing table with PI space. There is no provision for telling a client that due to unexpected network structure changes previous promises made in the DHCP lease can no longer be kept. 

Traceroute can often be quite informative. If this is a "broadband" connection then very likely any public IPs you see in your traceroute mean the packet reached the ISPs network and was dropped inside it somewhere. You really need to understand what all the boxes do, how they are interconnected and which ones are under administrative control of the client vs administrative control of the ISP and if at all possible get admin access to them without doing a factory reset. The trouble is right now you don't know if you are dealing with a simple home/SMB router on it's default configuration with a dumb switch to add extra ports and a patch panel to connect the network equipment to the rest of the office or whether you are dealing with a more complex network set-up. Assuming the former when the latter is the actual case could easilly result in either you or a bigcorp tech doing more harm than good. Trying to connect a computer directly to the cable modem may be worth trying. However some cable accounts may be MAC address locked, so you may need to clone the MAC address of the router for this to work. 

It is likely that at some point your provider will start charging extra for public IPv4 addresses. It is likely that for the forseeable future your ISP will provide some mechanism for accessing resources on the IPv4 internet. As mentioned above that may be traditional v4 NAT or it may be an IPv6 based mecahnism like NAT64 or DS-lite. 

Yes, Bridges were not originally designed as security devices but as a method of helping networks to scale by splitting up collision domains. However the bridge support in linux is more than just a bridge. Bridge traffic passes through ebtables and by default IP traffic on a bridge passes through iptables (this can be disabled). This allows one to implement packet filtering and can therefore allow a firewall to be introduced without breaking up the layer-2 domain. $URL$ 

It is unlikely that your server will be able to initiate a connection to a listner on the client. There are tricks that can sometimes be used but they don't always work. If a TCP connection sits idle for too long then firewalls/NATs are likely to cut it off. Certain network glitches can cause a connection to be cut off without the endpoints realising it is cut off. 

Exchange points are not the be-all and end all of peering. They are a mechanism to allow the costs of a physical connection to be shared among multiple peering relationships, the downside being that you have to pay for the exchange points switching infrastructure and organisational overhead. So low traffic peering relationships tend to go via exchange points while high traffic ones tend to go via dedicated private links. When a provider buys "transit" (that is the service of providing connectivty to anywhere on the internet) then again that connection is almost certain to go over a private link. There seems to be a big difference in attitude here between the US and Europe. The big access providers in the US tend to be very monopolistic and have the attitude that peering with "little guys" is giving away for free something that they could be charging for. In many cases those big access providers are also teir 1 transit providers. On the other hand in Europe there is more competition among ISPs and the individual access providers are generally smaller and have to buy transit to reach large parts of the internet. The result is that there is more incentive for the access providers to peer directly with the content providers and internet exchanges flourish. 

I think it reallly comes down to how you define "modulation" One definition (taking from the first paragraph of the wikipedia "modulation" article): 

IP can transmit data just fine, the problem is what happens when that data gets to the other end. The only identification information is the IP addresses of the hosts and a protocol number. Neither of which provide any way to distinguish what socket the data is for. It is possible for programs to use IP directly through what are known as "raw sockets" but the lack of a proper mechanism for deciding which socket to send data to raises security and performance concerns (the kernel has to send the data to all raw sockets for a given protocol number). For this reason the ability to open "raw sockets" is usually restricted to root (or your platform's equivilent). UDP is a fairly minimal layer over IP. It adds port numbers to identify what socket the data is for and a checksum (to reject corrupt packets). The application remains responsible for dealing with lost packets, controlling congestion and splitting the data into appropriate sized packets. TCP is a more complex protocol that in addition to providing port numbers and checksums splits byte-streams into packets, reassembles then at their destination and provides congestion control and recovery features.