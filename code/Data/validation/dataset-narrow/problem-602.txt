and do the same sort of thing when talking with all of them. If you do all of that, your code will be much more concise, and much less dependent on repeating the critter names for everything. One last point. I found myself getting a bit confused over the variable 'fun'. In my head a bigger number for fun suggests there should be more fun, but yours seems to be the other way round. I'd suggest either renaming 'fun' to something like 'boredom' or changing it so bigger numbers = more fun. I know that's a bit tricky given the way it interacts with 'hunger', but a bit more thought about how to represent this would take away what was the only irritant in reading the code. You're making excellent progress here. Keep up the good work. 

That's very neat and tidy code, and it is obvious what it is doing. A pleasure to read. And, since the critters are so cute I was smiling all the way through! Good work. I think you've kind of missed the main point of the exercise though, which is "Create a Critter Farm program by instantiating several Critter objects and keeping track of them through a list." Let's walk through it. Instead of this... 

There's a small bug in the talking_one() method, as random.randrange(0,5) gives you a number from 0 to 4, and 5 will never happen. I'd suggest using random.choice instead like this: 

... and the reason you should be doing that is it makes a lot of other things much easier. For example, this ... 

Which means you don't have to change the code if you add another critter, or rename one, or delete one. Also it is shorter. And the same goes for playing with them, and talking to them. (It's a little bit more tricky to do the same sort of thing when selecting the name of a Critter you want to interact with, but since you seem to be doing so well I think I'll leave it to you to work out how. Drop a reply here if you want some help with that.) I suspect also that you don't actually need separate methods in Critter for, for example, play_one() and play_all() as the only difference is whether the critter responds to you. You could just add a parameter to the call like this ... 

sets up an event listener for the tick event, then unsets it once it reaches the coordinates. The ticker is passed as a parameter: 

I've come up with two ways to do sprite movement with CreateJS, and I'm wondering if one is better than the other as far as performance and maintainability. The player data is saved in a json file and looks like this: 

In my game, I need to detect whether any buttons/keys are pressed at all before I try to process any input. This is easy enough for keys since the XNA library provides a method on the class: 

If you don't have a strong reason for using the attribute on your element, I would suggest attaching the submit action to the form without it. This would work: 

When MyGame is constructed, it calls the Setup method of the Input class, which creates a dictionary using reflection: 

I tried whipping up my own extension method but, as I'm not really familiar with enums or arrays in C#, I'm afraid it's a little sloppy: 

You could hide the errors to begin with (just put on them), then you don't have to hide them in your script. Also you can group your variable declarations: 

My game uses configuration files in JSON format. One of them is used for setting up control bindings, and it looks like this: 

I'm writing a program to help with remembering complex bash commands. On invoking the program, it asks for a description of the desired operation, e.g., "increase volume" or "find orphaned packages", and displays the commands matching the input ordered by closest match. Matching is determined by splitting the command text into a string vector, then the description, and combining these with a list of additional keywords to compare with the input via . This is currently case sensitive, which I plan to change. This is my first C++ program so I've probably made plenty of mistakes. A couple things I'm still unclear on: when to pass arguments by reference, when to use and , and when to use pointers. 

Then you can iterate over keys in instead of having separate variables for player name, and there's no need for separate turn counting. 

Variable Names: In static typed languages it's common to use short names for variables in part because writing out the types provides some documentation. In Python however no such hints exist so we use longer variable names. Grouping Like Things: your code has no data structure to keep each player's information together so things like roles, position, etc are all jumbled together. Reusable Code: Not using a data structure also means that adding players beyond the first is greater than linear effort: you have to write out all the same new variables for each new player, and implement a new level to your loops and if/else statements to handle them. If instead we create a data structure for player information, we can easily create a new instance of that structure for each player. If we then keep the instances in a list, we can iterate over them and reuse the same code to play out each player's turn. 

The keys are our player numbers, and the values are their position. Now we can iterate over the dict for each players turn. 

The simple answer is "yes". But let's take a look at why that's true and how you could make this look better. 

In general if you have a statement, you should reorder your code to not need it. In this case, your code actually tries 9 times, not three, because you 3 times, and then jump back to your goto label up to 3 times. The simple fix in this case is to remove the extra calls, enclose the entire try/except block in a loop and or if the call is successful. Something like: 

There's no such thing as an "If" loop, but perhaps you meant a While loop? That is exactly what you need. Otherwise this looks like a pretty good start. Next you might consider: 

If you know how reflection works in .Net, then you know it's looking for the methods by name in the MyGame class. The Exit method is actually defined in the Game base class, which I don't control. What does everyone think of this? I am considering moving the MoveDown, MoveLeft, etc. methods into another class, like IPhysics or something, where I would also do the collision detection. Since I haven't gotten that far yet, these methods live in MyGame for now. EDIT: Initially I tried to focus this question as much as possible on the Input class, but I would be grateful for any advice. 

The reason this works is is a shortcut for . With JavaScript, it is usually recommended that you keep from cluttering the global namespace. You currently have everything contained in , which is good. But since you're using jQuery, you might as well use a jQuery plugin, which would allow you to do something like this: 

The second implementation has this instead. is called on every tick regardless. When the mouse is clicked anywhere on the stage, is called once: 

This way, you aren't introducing another variable into the global namespace. Plus, the jQuery plugin architecture affords you some additional benefits, like syntax, etc. 

I'm no PHP expert, and this might be personal preference, but I like to initialize variables at the top of the function to make it clear that their scope is not limited to the constructs in which they're defined. 

If this is a web application, you can use an HttpModule to do your session management. Begin every web request by opening a session and beginning a transaction. At the end of every web request, commit the transaction and close the session. As long as you're wrapping all the hits to the database in a single transaction, you don't need to worry about efficiency too much. 

In the Main method of the Program class (my composition root), I read the file and hand it off to the Input class: