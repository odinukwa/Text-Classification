From my limited mysql knowledge, I don't think you can use PIVOT or ROW_NUMBER(), so here's a more generic suggestion on how to solve your problem: 

Important: The query above will return all stored procedures containing the text string "symmetric", not just procedures that use symmetric encryption or keys. Remember that it will also match for instance text that is in comment blocks och quotes. 

.. returns more than one row. If you limit it to return only the first row, or rephrase the WHERE clause to return only a single row, you should be ok. 

I'm not trying to mess with you. It's my firm conviction that if you don't rebuild the report now, you will most likely have to some day, going forward. 

I'm self-joining the common table expression that we created before, : On one side, groups with a positive , on the other side groups with negative ones. To further filter out which rows are supposed to match each other, the swap of the positive and negative sides' rows must improve , i.e. get it closer to 0. The and selects the "best" match to swap first. Now, all we need to to is add an , and loop it until there's no more optimization to be found. TL;DR - here's the query Here's the complete code: 

Most likely because the expression is interpreted as a numeric expression, i.e. which is 0 (with integer division rounding values down). Telling Access that this is a date can be done using quotes (not really recommended) or by using a date function, like this: 

.. and see which works best. EDIT: When performing bulk-logged operations, make sure you make a backup (full or transaction log) before and after the operation if you need point-in-time restore capability and you suspect that other activity may be going on in the database at the same time that your ETL job is running. I wrote a blog post on minimally logged operations a while ago, there are links in there to other posts and documentation. 

If you want to return the running total at any given time (including the first few dates as well), you would change the to something like: 

The following pattern will often render very good performance, compared to self-joins and correlating subqueries: 

An obvious solution is not to use dynamic SQL. I think your task can be accomplished with regular, non-dynamic T-SQL code, which also gives you other advantages in terms of security (like ownership chaining). So instead of: 

This looks lika a operation, where you want an aggregate (the count) of your error codes, grouped by date (on rows) and error code (on columns). First off, pivot reports are probably easier to design in your reporting tool, Report Builder, so I would try this query first and try to format the results into a pivot table in the GUI. I don't know Report Builder very well, but the query should look something like this: 

Or you could build some type of temp table (or a regular table if H2 doesn't support temp tables), then populate it in three steps. Again, this will probably still compile using an anti-semijoin or some other type of outer join, but maybe it'll function as a workaround for your bug: 

These are the customers that have not received an e-mail in the last 7 days AND have received less than two e-mails this month: 

There are a few good DMVs (system views) where you can find this info: sys.partition_functions and sys.partition_schemes can be joined to sys.partition_range_values to get all existing ranges. The number of ranges should be the number of partitions. The data_space_id of the partition scheme can be joined to that of the index or heap in sys.indexes on the table (sys.tables) that you're interested in. 

Next, we need to drop the existing column (you can't just "add" an to an existing column, you have to create the column as an ). The primary key also has to go, because the column depends on it. 

I haven't the slightest idea if this is the "correct" solution according to Kimball, Inmon, etc. Instead, I would urge you to see if it applies to your particular needs. ;) 

Wildcard matching strings with good performance will always be tricky, but here's a best-effort attempt. First off, your indexing can be improved. The index on #PARAMETERS only includes the actual column, which is fine if you need a list of parameters, but whenever you need any other column, the index will be useless to SQL Server, and it'll revert to scanning the entire table instead. I would propose fixing this by changing the index to a clustered index: 

As a workaround, you could explicitly convert the output of the function, which should give you the correct results: 

What happens here is that produces a . According to the documentation, the output type of is of the same base datatype as the input, although the scale (the number of decimals) may change, which is what happens here. 

The CASE within the aggregate function adds a condition, so if the row has the correct type, the amount is included in the aggregate, otherwise not. You could probably solve this using PIVOT if you want to, but the syntax is a bit trickier in my opinion (google it). 

I would add the events and/or as well. That way, you can compare the SPID (the session ID) and find which query executed on which SPID. For the record, Profiler is being replaced by Extended Events (XE for short) as of SQL Server 2008, though the GUI is really only usable as of 2012 in my opinion. 

Or you could build a primitive encrypted scalar function that uses a paramter as a primitive "password" of sorts - this would give you an additional layer of security. Using ownership chaining, you can allow your stored procedure to retrieve the value, while still denying "regular users" permissions to view the table/view/function's contents. Or, why not put the password in your scalar encryption function in the first place - just remember to add to it. Important: 

I suppose you could use this code in a logon trigger and save the information to a table, but if you need a running log, you may want to look at Extended Events or running a trace (SQL Server Profiler). 

I would guess that is not really part of a relation, but rather an ordering key used to denote what book is the user's first, second, third and so on. Or, like you say, it could be that a user can have multiple copies of a book, but that still wouldn't make part of the relation, only of the primary key of . Or, a combination of the above two (ordering key and user can have multiple books). 

Please, don't ever kill the sqlserver.exe task in Task Manager - what you're doing is equivalent to pulling the power plug on the server in mid-stride. "In recovery" means that SQL Server is trying to go through and repair ("recover") any work that needs to be rolled back in the database as a result of this uncontrolled interruption, which could be a considerable amount since your query took so long to complete. Often, rolling back a query can take longer than it actually took to execute. I would advise you just to wait it out and never do it again. ;) Next time a query runs away, there are a few options: If the query is in your Management Studio, just click the "Cancel Executing Query" button (Alt+Break) If the query is running in the background (for instance, in a service), or it's not your query, you can find it using sp_who2: