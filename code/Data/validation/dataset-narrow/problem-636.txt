Yes you can move the output away from the code, however that's usually difficult to do with this type of procedural code. The code is extremely tightly bound, which makes separation harder than it should be! The two function you call are fine as they are. So lets focus on those for now. 

a couple times. You could put this in a function (with appropriate parameters) and simply call the function to reduce multiplicities. 

Now when we do the 50k calls, we learn that now the average function time is about 2.6226 E-10 seconds. However, there is a little overhead due to the user function applied over top of the built-in function. By just calling without the function does reduce the processing time, but by an amount so small it's hard to even say it's an amount! Just for the sake of cleanliness, I'd remove the user function anyways. Don't tell me that's not an improvement! However, without this function, I was unable to get a faster execution. I tried , , and . Using for the closure, as that proved faster than 's third parameter. 

I'll skip MVC for now, as I see a whole review for formatting and the such. Perhaps someone else could break down the pattern for you. Right now, let's focus on each individual class. Model 

To expand on @amkoroew's answer: really doesn't seem to be an appropriate name here. When I see that, it makes me want to believe that I'll be given the vehicle that is on top of a stack of other vehicles! That wouldn't make much sense, would it! I suggest renaming to something more appropriate such as plain ol' . Then you can rename your main method there to something such as . 

I think this is a very clean looking code base, so congrats getting that down. I also think that the the way you implemented the pattern worked out very well. I don't have much to say, it's mostly just formatting. 

For a quick summary: I've created this internal web application, and I've hit a point where I can really see the mess I've made. I need some help separating the logic, the view, and the data. More detail: Over the past few months, I've been doing all I can to learn more about JavaScript built web sites/applications. I've created the below code, and it seems as though any additions are just ruining the entire thing. This is the fourth time I've started from scratch on this, and I can't get a product I really like. Now, it works as it should, I just don't like the way it's built. I tried using Angular.js, but that was over-kill for this single page app (plus working with the routing was nightmarish). Now I've just created this mess of a main.js file, and it needs refactoring. It'd be great if we could avoid suggesting tools requiring node.js. index.html 

So overall, there are many database access classes that come with frameworks that actually do improve the safety and handling of databases, unfortunately it's difficult to replicate your own. Don't be discouraged though! It's not a simple task, Laravel has about 50 different classes + interfaces just to make sure connecting to the database is perfect! 

It all depends, everything has a purpose and a correct time to use it. It's up to you to determine if what you're doing is the best implementation. Would your example be correct usage, yes. However, many people are unfamiliar with late static bindings, and so it could be easy to misinterpret or skip that line if a new developer is reading your code. Perhaps there's a way you could reevaluate your code to see if you can restructure it in a way that does not depend on this functionality. 

Here are some flags you may way to consider in order to help secure this connection even more. Each can be found in the docs. 

I know you've been seeing a lot of php, but I think this is the first time I've seen you ask a question with the sole intention of learning php! Great :) I think you'd be able to handle any critique thrown at you, at so I'll do my best, but it's a simple script which leaves little room for huge critiques! 

With that in mind, winston is generally considered a good choice for Node.js logging. It's dependencies are a little dated, and support is minimal. Another option is Scribe.js (lightweight, but also minimal support). 

If the user's session says they're logged in, and they have a username in their session, check their session Basically that's what it's doing. Don't tell me that's not redundant! Moving back to consolidating and values: how does improve your application? It's clutter! Simply, if they have a username, check 'em. If they don't have a username, they're not logged in. Next up: 

I've been waiting for this question to be reopened because the formatting issues here are quite extraordinary! I think I'll keep this post to a clean code/code styling post exclusively, that way others can touch on purpose and implementations. I think what's required here is a bullet point list, which I know is boring, but it's the easiest way to go line by line! Let's begin :) 

Option 2 Have a type searching function to automatically determine the type and assign it. This could be a simple helper function with a few conditionals, each with one of the variable functions. You would want to call the function as a parameter of . Pros 

The Security Aspect Good to see that you're not just checking for a file extension in the name!! Basically, yes, it's the minimal security needed. There aren't too many steps needed to make an image uploading script safe, however, doing it wrong could present some future issues. Here's some notes though: 

This could either be turned into a if you have plans on changing the action a category makes. However, neither of these categories requires special treatment in these s, so why not just take out the conditionals completely! Leave it as a one line assignment. In the class of , a variable is created and used in this context: 

Unless you plan on having features for each of these states, you can take them out. Right after that, you have: 

doesn't seem to be correct. I tried to copy this conditional, and I'm surprised you haven't noticed the error. This statement says: If is equal to 'offset', or either 'push' is non-null or 'pull' is non-null. I believe it should be: 

What you're doing is extremely typical. So typical that a language was made specifically for it: Ajax! I'll make some comments here, starting from the top. Your method It's close, but it can be simplified even more. For reference, here's your method: 

Maybe this answer is a bit late, but hopefully someone can benefit from it! First off, very interesting concept... It was a challenge to try and figure this one out! I have come up with another implementation, whether it's truly better or not is for the author to decide. Here it is: 

Well, that is why I think it's unclear code! As far as your actual code logic, I could write another post on the security and alternate implementations and efficiency, but that would make this far too long! :) 

Now your code might get a big here if you implement each detail with a getter and setter. Sometimes you can manage this, other times not, which then you might break things apart: have the manufacturer get/set in an engine object, and the car will only have the get/set for engines. Like one of the comments said, you should research object prototyping. For a fresh start on JavaScript programming in an object oriented style, read Mozilla's documentation. Misc. I'm not convinced having a variable and a variable are the best way to accomplish creating cars. I suggest a new object, maybe or and create/retrieve/store/pimp your cars their. It will allow for later changes, or dynamic modification of the cars. Purely for fun and for homework: add in the ability to specify exhaust, transmission, tires, driving skill, etc. and then compute horsepower/car level. Pretty soon you could challenge cars up against each other in races! :) 

I'm having a hard time deciding what you mean in your question. It's hard to understand... As of now, your class seems to be indescribably complex for such little functionality. You constructor is doing way to much work. It should really only be setting up the class that's being called! Login and authentication should either happen in separate methods, or even separate classes. Have you not tested your class to see if works as it should? To the best of my knowledge, it shouldn't. And it seems unnecessary since you already made your variables public. Which they shouldn't be. I'd also avoid throwing an exception from the constructor. It's uncommon and wouldn't really be expected. 

I believe your best option in this case would be to transform your individual, repetitive variables ( ... ) into a matrix, or multi-dimensional array. By doing so, you'll be able to take advantage of the power of loops, most likely you'll want to explore . (Explore the different jQuery traversing methods too) Keep in mind while you're refactoring your code that you can dynamically reference your HTML elements. For example, you can replace with a more general . Where is a incremental value given by some original array or a loop. Here's the MDN docs for loops and iterations in JS for you to check out. I'm refraining from giving too much code because I think this is a great opportunity to learn about the different looping functions in both JavaScript and jQuery. If you'd prefer to just see code, comment and I'll edit this post! 

To be consistent, I suggest separating and into two files. Especially if you decide to add controlling code in the class. Naming I touched on this earlier, but it's come back! The names you've chosen for a few things are very misleading and confusing. First off, really doesn't need appended on the end. We know it's going to be a class. However, Document is a bit broad, try finding a name that fits the situation better. Is an account balance or a field? I think you should change one of those names (variable or class). The Balance class is a bit misleading. I want to believe that a balance class should be handing the business of the deposits and withdraws. Perhaps a better name for that class would be BalanceButton? In , could really just be . It doesn't hurt. In , the variable is used. I can't even tell what it stands for! What is the "g"? Same class, the global is made, but only used in the one function. Unless it's used outside of it, perhaps reduce it's scope as to not pollute your global scope. In fact, reassess the variables that are currently global, and see if they actually do need to be global. Lastly, I'm not sure what 's means. Usually events have verbs as constants to use.