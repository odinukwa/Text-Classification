It would be helpful here to explain why is a list of lists. Why not just a single list? Maybe this would be obvious to me if you came up with a more descriptive name. I'm guessing that is short for result. I would have probably named it . 

Now we give a reasonably correct error in either case. This also exits and locks in the header. Your original code would keep trying to show the page. This is called early return. It has the side benefit of putting the error message near to the error condition. Your original version had the normal flow close and the error message as far away as it could be. You could then continue with 

You don't need to from at the end of execution. The compiler will handle this for you. Only if you need to do so early. If you do explicitly , then do it as follows: 

If is greater than the recursive result of calling this function on the rest of the array: increment a variable; print out a statement describing what happened; return because it is the largest member of . 

The initialization for the second loop is tricky because you want it to start on the last odd number. If there are an even number of elements in the , then the last odd index is the last index: ; otherwise, it is one less than that: . After that, you just need to copy the new over the old: 

First, this introduces a magic number. What's special about ? The answer is that it is one more than . 

I'd call this , as there's more than one. Alternately, you could name it and use it to mean that is . I changed this to a variable as it's the same for every object. We only need one copy, not one per object. This changes the usage slightly. We'll access as . It's generally easier to read if you add a little whitespace between elements. 

Note that is longer than , so it's clear that this is not a convenience abbreviation. What is the benefit? It almost seems like you are trying to make a base class that you can reuse for other database types. Unfortunately, I don't know that you can rely on each database offering the same abilities. For example, a key/value database is not going to offer some of the capabilities that a relational database will. If you are going to alias something, then there should be a reason. If there's a reason, you should comment on it so that the reader knows it. As a general rule, if you are clever, explain to the reader how it's clever. That way, the reader doesn't need to be clever just to read the code. I don't like the use of . It doesn't seem necessary. Either don't care about that situation, or check something more direct like the existence of . 

There's the title and we use the keyword to make sure that it's the highest stars. More on when we can use later. 

That seems like it might be more useful. You accept a parameter if offered. Otherwise, you give it a default value. That may or may not be what you wanted to do. 

The will allow us to use . It says to return only one row per value. The other columns need to be aggregated with grouping functions, like . You already had the clause and presumably it's correct. 

You don't need those statements. The return is sufficient. You use both kinds of strings for the same purpose. Since you are not using variable interpolation, I'd suggest only using single-quoted strings. 

That also resolves another issue where you were calling the function with a parameter even though is a member of the class. 

This is clearer about what it is doing than the of the results. Also, it doesn't parse each line twice. And of course it doesn't define a hash just to get the keys. In general, I would make more use of paragraphing. This is extra new lines to separate blocks of code. This allows you to easily see what pieces of code go together. For example, note how I separate the from the file handling code. You have comments explaining what the file format should be, but you don't explain what the command line arguments should be. A user would have to read the code to figure it out. Your function does two distinct things. First, it reads the command line arguments. Second, it opens a file and processes it based on the command line arguments. It would be better if you could separate that into two functions. 

I'm going to second guess a bunch of decisions that you made. I don't know that you made them all incorrectly, but I think that alternatives deserve consideration. 

You can't share variables between different pages without storing them somewhere in between (e.g. the session). If you just want to share between all the scripts used by a particular page, you can just create global variables in PHP. In fact, any variable you create outside something with limited scope (e.g. a class or function) will have global scope. So you could replace those two functions with 

I removed your comment, as that just restates what I can read from the code. I'd still like a comment here though. It's unclear to me why you are shifting the bits right by zero places. The only reason that I can see is that it forces PHP to treat as an integer. A comment would be helpful, but I wouldn't put it here. Instead use a helper function here. 

Note that gets around this by demanding that the comparison functions return zero for equality and positive or negative values for inequalities. 

I just made them members of (which I renamed to ), but you could also put them in or a new class if you wanted. I would tend to think that should be in while should be in a separate class, but it really depends on how you use them. There's an argument that should handle making inferences in which case would be redundant. I wrote out and to make it clearer what each represents. What are and ? Longer, more descriptive names would make the logic easier to understand. Notice how none of the variables defined in the first function are needed in the second (with the exception of which is actually declared in ). This is a big part of why I felt that they should be in separate functions. Now knows that it needs to read input and make inferences, but it doesn't need to know how to do those things. Ontology 

That does one flush at the end of the output (and you may not need that, as the will also force a flush). 

What you do here is run a query based on the string and then return the first row of the result. However, you now have no way to get subsequent rows, as you throw away the query result handle. You take care of this situation with a in 

It's much easier to see where each block begins this way. Also note that I added curly brackets around the statement in the innermost . Not only does that make it clearer where one piece begins and the other ends, but it avoids a particularly nasty to debug issue where someone tries to add a second statement to an form that only allows one. It's a bit confusing to call this an . The term interface has a specific meaning in Java. You might be better off calling it a Facade, an Adapter, or some other Structural Pattern name. 

Also note that the spacing between and was simply wrong. I also renamed to here. Given how little it's used, it seemed better to favor readability over convenience here. This is what Larry Wall calls true laziness -- commenting your code so that it's easier to read later. In application, you will spend more time reading code than writing it. It's only in the somewhat artificial environment of learning that you can spend more time writing code than reading it. So it's better to get in the habit of writing readable code than terse code. Comparing 

This avoids the possibility of SQL injection by someone who spoofs your AJAX call. Or use (preferred). 

Your indentation is a little inconsistent. I don't know if that's how it looks in your IDE or is an artifact of the copy and paste. In general code is easier to read when formatted consistently. For example, your declaration of the class is indented more than its fields. Usually the opposite would be true. 

See if that allows you to get rid of the breaks after the div. If you have too much or too little space, adjust the to whatever makes it fit. You don't need a four-column indent in HTML. It makes more sense to use a two-column indent. HTML isn't code. You don't need to use a broad indent to force yourself to avoid nesting. In general, your HTML would be easier to read if you made the indent consistent and removed many of the empty lines. 

It's not clear to me what this buys you. Why not just put in the clause? This will seriously confuse the optimizer. Same thing for the query. Given this query, do you have an index on , , , , ? This query could hit only the index. It's possible that should be before . I'd try making it both ways and then running to see which it hits. Then you can delete the other. You should put whichever of and has more potential values first. It's possible that should go before either, but I'd have to test to see. You put and last in the index because they have inequalities. This keeps the query from being able to optimize later columns, so they go last. In regards to the portion, I believe that it may be able to hold its place on the and pair, so I put after them. 

The statements should have semi-colons at the end. Apparently you need the parentheses when using with a variable. As you noticed, you need to put columns in the to include them in the . You can get around this by using the variable instead of the column. I prefer capitalized keywords and a more compact formatting, but that's really up to you. 

Using the function can allow you to change how you protect the output in many places at once. Without the function, you'd have to change it everywhere it's used. 

This also fixes your indentation issues. Note that I'm not commenting on your use of . Looking at the documentation, it seems that depends heavily on the configuration. Without the configuration, that is off-topic for review. 

Separating a closing from its succeeding will only lead to tears. In general, I find your comments to be simply English versions of what your code does. Whomever is reading your code should be able to make that translation without comments. You should save comments for explaining why you are doing things, particularly if what you are doing is clever. Example: 

Perhaps this is the correct behavior for your application, but it seems odd. This would seem better as an error case for most applications. 

You should avoid commented code in production. By the time that you are ready to send out for code review, you should have cleaned these things out of the code. 

By writing it this way, it just holds the input to generate (two million in this case; ten in the original example). You can write a generic, reusable function: 

If you are logging to HTML purely because it's easier to get the data that you want, you may want to check out . That will give you more verbose output that you can log. 

Another advantage of this version is that it is the first loop that does more work. Since there are more products than categories (because there are multiple products per category but only one category per product in this model), this should speed things up. Remember our assumptions though. If they don't hold true, then the code should change: 

In general, you are using a lot of C notions plus the non-standard variables. Presumably this helps with interacting with the Windows functions, but it forces you do more work than you should. 

On my computer, the iterative version runs in about ten microseconds. The recursive version is a few microseconds slower. 

Part of the problem is that you are running some of your pages out of sub-directories. It is more common to put all the externally accessible scripts in the same directory. Then you can make constants that relate the sub-directory locations to the root directory. That way if you move your classes directory, you just have to change one constant. As a general rule paths are determined based on the location of the script handling the page request rather than on the locations of any scripts included by that script. That way you don't have to worry about how any script is called except the one that is directly related to the page request (e.g. index.php or doRegister.php). 

Ok, now I see why you wanted to check that the array wasn't full, but I still think that you shouldn't have done it where you did. Instead 

Hopefully you know that the former is a shorthand for the latter but think about the next person maintaining your code. What if this is that person's first time using Perl. People in that situation will see your code and think that is some kind of special variable name in Perl classes (once they realize that it's not defined in the class). How does such a person get from there to the latter version? The is a Perl built-in function which is defaulting to the variable. In that context, is set to the arguments to the function with the object as the first argument. The built-in takes an array as the first argument, removes the first entry, and returns that entry. Then you dereference the result with the operator and grab the value for the key with a hash lookup (since classes are generally built on hashes in Perl). Also, seems a confusing name for a function. I would find or even to be easier to read and understand. If I were the one evaluating your interview code, then I would give points for writing clean, consistent, readable code. It's often worth taking a little extra time to make the code pretty. Most of my employed time is spent maintaining existing code, not writing new code. Writing the original code correctly is important. I don't care as much about quickly. The most important part is that it should be easy for me to debug and modify. That's where most of the time goes. If you save fifteen minutes writing code but I spend fifteen hours trying to make it work, then that's not a good tradeoff. As always, other reviewers may vary. The fact that they were asking you to write substantial code with a deadline may be a sign that they have different priorities than me. 

Your function will have collisions. There are only 100 possible results, but there are at least 366 valid day/month combinations. Running it on all 416 allowed day/month combinations (including zero values and weird dates like the 31st of February) shows that some results are more likely than others. For example, 91 and 92 (and eight others) are never returned while 16 is returned a whopping twenty times. For most uses, it would be better for this to be more evenly distributed. My test code: