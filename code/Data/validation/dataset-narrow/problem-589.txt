Why is everything static? Your methods use a shared resource (the ) which should indicate that it is in fact anything but . 

Personally, I think your approach is very complicated for what it should be trying to do: loop over all days between the start and the end date and count how many of those are not in the weekend. Translating that sentence to code, gives me this: 

This is basically one method where you provide a standard option. There are two choice you have here: either put the implementation in one method and create an overload like this: 

Why are you using to get the value and then placing a useless call to to discard of the value? That's not how a stream is intended to be used: simply call from the start then. 

Architecture One thing that jumps forward is that you're going straight from the UI to your datasource. In a three-layer design (UI, Model, Persistence) or MVC (Model, View, Controller) there is always a layer between the UI and your datasource. A samplesetup would be this: 

Feels a little pointless to inject a JS function and then only call it once. Can't you directly call from ? I would use an intermediate variable to store the string for readability purposes. 

The above code can be used for both the input files, and only writes out the word if the word has not been seen before. This way you have only one set, and you do the merge at the same time as the reading. Also, you should be using Java 8 streams..... hmmm... that would be nice. 

Note that you will likely need better error handling on the Scanner. The complexity in here is \$O(n \log n)\$ which is pretty decent. It has little overhead other than the data array. The error-handling for empty inputs, and non-existing results (where there are no unique values...) makes this answer incomplete. 

Now, that looks neat... so small now that it's hardly worth having it's own function, let's pull it back in to the function (which we will rename to because I prefer client... and we'll remove the from the struct because no-one else uses it in any other place... our method is now: 

If the method does not need to construct a new instance, then it makes sense to me that the semantics should return , since that allows skipping new instances for and . 

It is still probably too busy, but you can at least see what's going on now. Note how the user is prompted with valid values before they are entered now: 

Code suggestions I would use a instead of a dictionary, since it is much cleaner looking and easier to use. When to use a namedtuple! Using the above suggestions and adhering PEP8 I get the following. 

DONT! String format your sql queries, but let the cursor do it for you. As @Gareth Rees said, this is not secure! 

Note that using wilcards would be considered bad form in a regex You might want to change that to suit your needs. 

I need cheap GPU's and decided to make a little ebay-scraper to make sure I can buy it at cheap prices. It works and I can search for (any) product to scrape the Title, Price and Shipping cost of that product. But I feel like I haven't done it in a generic way, hence the need to post it here. Thus my question is, could this have been done more generic? 

To learn some PowerShell I made a tool, I've made before in bash. It pings the subnet for arp values and checks if there is no weird behaviour. 

You could make use of something like opencv to find the individual pieces. Afterwards you can crop and save those pieces. This will be a big improvement as you could give it a different image, and it would create individual pieces from it... no more measurement from the user! 

I have thrown in a few things there. First up, on our one machine at work, we really do have the directory /opt/OSS-EVAL/ which we use to install/evaluate OSS software/libraries. The above will break your parsing because it has the embedded in the name. Next up, is 'POSIX-style' commandline arguments can have quoted values, and also values with an in the value. So, things I would recommend to you: Locate the source of your command-line values. It will likely be available as an array, not a single string. Keep the data as an array! Second, with the array, it is easier to look for stand-alone values that are , or, if the input is then you look for values that start with -E. Finally, when you split the key/value on the , limit the split to 2. 

In many cases, the simple solutions are... simpler. In this case, your solution of splitting the data on space , and locating the longest word, is accurate, but a simpler solution was probably intended. As an up-side, the simpler solution is actually better in terms of time-complexity (it is \$O(n)\$, which means the performance takes twice as long if the string is twice as long. Other solutions take more than twice as long if the input data is twice the size). Bug: You have a bug in your string clean-up too, because you strip all punctuation, and replace it with the empty string , you are vulnerable to input like , and you will identify that as one word: . If you set the replacement as a space , you will be OK. Note, this solution scans the data only once. Other solutions require that the data is scanned multiple times (once to split, once to sort). 

Now I will immediately know what your intentions were and the general idea behind your approach is clearer. I'm certain your teachers will appreciate such informative commenting when they have to look through a multitude of assignments, many which will not have gone through a review. Member order Regarding your edit on method order (which I changed to member order to get some other things as well): usually I would point you to the Java Code Conventions but appearantly they all give a 404 right now. However from the top of my head, this is the order of which a class' members should appear: 

This is aside from any remarks on whether or not your code fits your problem description, as @rolfl states. I don't see where you split it in sublists of 3 elements. 

Consider it is just an initializer and will only be used this once, there is no need to make it explicitly return the data when you can just set it directly. Therefore the second approach would be my approach as well. Naming Method names are UpperCamelCase in C# so this 

Working on my first "big" project using the mighty Xamarin. Likewise my first venture in XAML so I suppose most focus will be going towards these new areas. Performance- and user-experience related remarks are welcome as well though. Or you know, just any issue you can see. The solution consists of 3 actively used projects (the 4th - MoviePicker.Android - doesn't contain any platform-specific code). There's the shared Xamarin.Forms project, a ASP.NET Web Api 2 project and a PCL to share models between the API and the app. I will omit the PCL since it's just a few models with JSON annotations. Web API WebApiConfig 

BUT I think if you put this conditional before your block, this would be one loop, because after this conditional you kinda repeat yourself alot. 

Running your code through PEP8 will produce alot of errors, you can see it for yourself. Just to name a few PEP8 improvements: 

For timing, see the Time complexity for python You use some expensive operations while this can be done is a single loop 

Try it out for yourself to see the difference, and if unclear what is going on you can always ask me 

I was playing around with the pygame module, and decided I should try to make a game. I like to play Gomoku, so that was the game I decided to make. It is my first experience with pygame, thus I'm guessing there is plenty to improve on. Any stylistic review or more pygame specific would be helpfull. 

Just a simple utility that logs the pressed keys in Python and takes a screenshot everytime a new PID is opened. ÃŒ got bored at work, so decided I was going to have some fun with this. Made in Windows 

Use indentation of 4 spaces, it looks cleaner Functions should be named with lowerscore letters. Example: You use a lot of which could be rewritten to Same goes for which is just You have some calculations like which can be rewritten to When using comments don't indent them! should be 

Utilities You have done things really well, in one sense, your use of try-catch is extensive, and you are closing streams in the appropriate places ... but, (this one will make you cringe)... have you read up on the try-with-resources functionality in java7? Actually, in this particular case, you will likely be well served with the new-in-Java7 class (Javadoc) As far as I can tell, the overwrite flag makes no difference in the saveFile.... I tend to force a charset for all files. This may not work for you, in which case you can remove the StandardCharsets.UTF_8 arguments, and rely on the platform default, but this may mean a file you save on one computer creates garbage on another. Rewriting your Utilities class: 

Now we can even remove the map from the sendMessages` go-routine. Read up on the statement which is how communication from multiple sources is handled: $URL$ Conclusion This post has been long enough already... hopefully you'll get something out of it. I hope that you at least get how the unbuffered channels can impact things, and that communication with select-statements allows you to localize resources to just one routine, meaning mutexes are not needed. 

Accessing the security API's in every loop is a lot of wasted time, and MessageDigest classes are designed to be reused. Parallelism... A lot of the work you do involves getting and managing URL's... this is slow work that can be done in parallel with the hard work of generating the key hashes. I would recommend one thread that builds a stream of hashes (with the relevant input stored) and feeds them in to a BlockingQueue with a limited queue size... then, have the controlling thread read these off the queue, and 'farm' them out to a number of other threads that create and check the URL's against the server. The parallelsim could give you orders-of-magnitude performance improvements.... (but will heavily load the server you are bruting...) 

I created a new for each file. To have better accuracy I should have merged the frequencies for each file to a new , for instance . And once all files a processed try to break the text. My is redundant, I don't do anything with the frequencies. I could have just return the to yield the same results. 

Especially if you're new learning Python, I suggest to learn . Support for will be dropped soons since EOL (End Of Life) is just a few years away. It seems silly to learn a language that will be dropped soon. 

Python program to test ideas Below is a little python program I used to test if everything went well: 

Perl localhost test enviroment I have tried to create the important features of the webpage, namely that you can post the and , compare it to a database entry and give back the result. I have used the as I think it would be the way of keeping things simple. My recreated perl webpage 

Any review is welcome! Plus I would be happy if anyone has additional information on how to prevent MiTM attacks. 

This could be done in one loop, by tracking if any of the current visited vertex in the dfs, are in either the last or first (row or collumn) Alternative code 

I would call it simply since being part of is implied and you don't have to distinguish from other nodes. 

I've been writing a small library that allows for easy querying of the Stack Exchange websockets. I'm going to add an to replace the manual at every so you can let that one slide (unless you have something else in mind). A few thoughts I have: 

In this line of code you're essentially recreating a new object that already exists inside . I would just retrieve the existing from instead. 

is a helper method. If it is only used in then it should be declared there and made . If it is used elsewhere as well, then it should be either moved up into the hierarchy (if that makes sense in your structure) or to a separate helper class. 

Do these all have to use a fully qualified name? It would read a lot easier if you'd drop all the unnecessary namespaces and used a directive instead. 

You're declaring your viewmodel as . This indicates encapsulation abuse because a single viewmodel instance should be tied to a single page. In fact, you often want a specific viewmodel for every page (where appropriate) so there isn't that much re-use of the viewmodels in the first place. This should become unless I'm missing a critical piece of information.