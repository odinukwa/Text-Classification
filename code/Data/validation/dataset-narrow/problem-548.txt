Friend Functions. Its a lot simpler to just place friend functions directly into the class declaration. Rather than: 

Also when re-sizeing. You should NEVER deallocate first. If the allocation of new memory fails then your object is in an invalid state and there is no way to repair the damage. Also don't you want to copy the data from the original array into the new array! This is generally what a resize does. If you are not copying the values into the new data storage area then this should probably be called Realloc. The processes should be: 

Even though is a static function there is no guarantee that static methods have the same calling convention as a C function. Future versions of the compiler may break your code. You should do something like this: 

But I think an easier way is to alter the shut down code. The reason is set inside a is that if we set inside then threads will start to exit the main loop in as soon as is set to true; even if there is still plenty of work to do. But we see from the discussion above that we don't really want to modify in a child thread as that adds a whole set of problems. So an alternative is to alter the termination condition. 

That's a perfectly valid tag. Your code is not going find this tag. Issue 2 Web pages can be big. If we just look at amazon.com 

If you follow this rule (and re-order your declarations). Then you can safely move the initalization of into the initializer list. 

Create an new stuff that can throw (int temps) Change the state of the current object (using no-throw actions). Destroy the old stuff. 

So prefer to use a system that works without change everywhere. Manager The is not used outside of so personally I would make it a private member class of this SharedPtr. Though you don't do any copying it is obvious that the Manager is non copyable. So it would be a good idea to make it explicitly non copyable to make sure you don't do so accidently. Doing is very dangerous. 

Depending on how you compiler implements it. It may potentially be faster to allcoate a block of zero memory and compare it (This of course will be platform dependent). Some instruction sets allow all the following to be done in one op code (each line). But of course any speed improvements you get have to be weighed against the readability. 

Also note that the stream operator returns a reference to the stream. Which (as stated above) when used in a boolean context will convert itself to value that is useful using 

This makes a difference when you have copy semantics and you are using standard containers. There are situations where the standard will rather use the copy than the move to preserve the strong exception guarantee. I know you are trying to optimize the use of the assignment here. 

Iterator The iterator object is supposed to be a very cheap object to maintain and copy. As a result it feels strange to have a move operator. I don't think you will find many people move iterators around. 

You could also add Move Semantics. (I did this to some old code and got a 30% boost in speed by doing nothing else but recompiling with C++11 on). 

Also your code can delete the sentinel and thus cause all sorts of problems. You should not allow the deletion of the sentinel and your other functions should check for a list with just a sentinel in them (this is the empty list). Why are you giving back references to the ? This is an internal implementation detail. Return a reference to the value (or throw an exception if the list is empty). By returning a node you are binding your self to use a specific implementation (take a leaf out of the standard library and just return a reference to the value). 

Nothing wrong with sleep. It actually releases the processor for other threads to use (ie its not a busy wait). But most conditional variables have a timed wait that allows you to break out after a timed period. 

The difference is that the C++ versions put the function into the stanadrd namespace so that we avoid name collisions. You have not implemented the rule of three. 

This invokes undefined behavior. It does not necessarily invoke a crash (or termination). If you want to raise the abort signal do so explicitly: 

Is A Null_Suit the same as another Null_Suit? in double a NaN is not equal to another NaN you may want that kind of functionality. 

Notice how I have pulled common elements out of if blocks to a higher scope. Now that we have done this it becomes easier to read and leads to more clean up. 

The part is a new part of C++14 so you will need to tell your compiler to use the newer version of the standard (that's not a default yet). But usually this means adding to the command line. Templatization Your code does not allow for easy templatization. In fact you don't define in the code sample above. This is more easily solved using templates around a class. 

The trouble is this seems to work and compiles if val1array is a pointer to an array. Unfortunately in this case sizeof(val1array) will return the size of the pointer, and sice you can not pass arrays as arguments to functions in C (they decay into pointers) there is no way to determine the size of the array on the other side of the function. So (Rule of Thumb) if you ever pass an array as a parameter then you should also pass its size using the trick above and pass that information forward with the array at all times. 

I would be surprised if most compilers don't turn the recursion into a loop. Its an easy optimization. I would worry less about optimization and more about readability. Its usually much more important. The compilers are darn good at making the code fast. 

The number of bits in a byte is: . Static Static is one of those overloaded keywords. Using it on a function in a header file (that has a definition). Means you get one definition in every compilation unit (that includes the header file). This is probably not what you want. 

But in the long run makes your code more brittle and harder to update. Pass things as parameters to make it easier to maintain and extend your code (or create an object that wraps the information). Also it looks like some of these properties would be better held in arrays rather than individual variables. Edit base on comments: This only detects a collision if the top right corner hits a wall. 

For loops like this use the standard algorithms: Personally I don't see the point. I can achieve the same effect in one line: 

Internally you can then use the PIMPL design pattern to abstract the different types of DB. For now you just implement the sqlite version make the others generate an exception. 

Prefer to use smaller than than smaller than or equal. This is a bit nit-picky but when working with array bounds you can then use the same number in the test as in the size of the array, wich makes it slightly easier to read. 

In the same veign as @vnp The print can be made easier to read by printing the pointers rather than the value: 

Why are you passing arrays as pointers around. Avoid passing pointers at all costs as they do not convey ownership semantics. This makes re-using the code hard. You should probably use a namespace: 

Additional the action of is not obvious thus a comment on its usage in the header would probably be a good idea. Actually a small blurb about how the first parameter can be an array would probably be a good idea (as it is not obvious without reading the code). Be careful with comments: 

There is a standard library function for this . On some systems it is even highly optimized to be quicker than stuff you can write using standard C. So use the system version it will potentially be quicker than stuff you write. There is a standard library function for doing a copy: 

Comments on encapsulation You wrote your program very serially. Basically what you wrote was C code (you just happen to use some basic C++ constructs, this does not make the code C++ (C++ has a style that is distinct from C)). What you should have done is encapsulate the date in a class of its own. Then you can write an input method that read data from a stream so that the object initializes itself and can also print itself. The main should have looked like this: 

Don't think that is a good idea. The threads are not shared with anything else. So better would have been but even that is not good. You don't need to dynamically allocate the thread. You can simply have a vector of threads. 

Your regular expression for detecting valid urls is very weak and you can slip a lot past it. Though you have used escapeshellcmd() to protect yourself a bit from people trying to run alternative commands you have not protected yourself from people sending extra parameters to ping. Two alternative attacks spring to mind: 

Yes all books use this. But it is bad practice in general. They have a good excuse in a book that they only have so much horizontal space to keep things readable. In reality using it is dangerous and should be avoided (even for short programs, as doing it here becomes a bad habit and bad habits have a tendency to accidentally intruding on production code). See:: Why is “using namespace std” considered bad practice? Don't declare all your variables at the top of a function. 

This line is not doing what you thinkg. Here you are making a copy of the object in your tree(array). Any changes to current are not reflected inside the tree(array). If you want to manipulate the tree your need a reference (unlike Java/C#) you have to explicitly declare references otherwise they are local objects. 

Your test for reaching the end of line and end of col is in several places. Rather than test on the call. Just increment the col and handle overflow at the top of the function (in one place). This will greately simplify the whole thing. 

They are used to set up the connection. But are not used after that point. So not really much point in keeping them as members. Initializer List