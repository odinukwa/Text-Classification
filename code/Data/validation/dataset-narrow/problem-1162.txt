Shiu Yin Yuen; B.K.S. Cheung, Bounds for probability of success of classical genetic algorithm based on hamming distance 

As for your last question, the are several candidates for combinatorial one-way functions. This paper by Kojevnikov and Nikolenko lists three combinatorial complete one-way functions that are based on the tiling problem of Levin, semi- Thue systems, and Post Correspondence problem ( complete means those functions are one-way if one-way functions do exist). Update: A more interesting candidate was given by Gligoroski. He proposed candidate combinatorial one-way function based on Latin squares (Quasigroups). 

A fun example and entertaining one is the undecidability of the tiling problem of Wang tiles. The result follows directly from the undecidability of the Halting problem by a simple simulation of Turing machines using Wang tiles. Interestingly, the undecidability of tiling problem for Wang tiles led to the beautiful result that there are tile sets that tile the plane only aperiodicaly. Wang conjectured that every tile set that tile the plane must have periodic tiling. Therefore, the conjecture implied that the tiling problem is decidable. Later, Burger proved the undecidability of the tiling problem which implied the existence of tile sets that tile the plane only aperiodicaly. The bounded version of the tiling problem is $NP$-complete which can be used as a master problem for $NP$-completeness results. 

EDIT1: programmer here is a program that is able to generate other algorithms runnable on some computing device. One motivation is whether intelligence of an algorithm is dependent on programmer's intelligence. EDIT2: I'd like to formalize a notion for the intelligence and creativity of programs. Not all programs created equal. My question is an attempt to model and formalize aspects of intelligence that are not captured by current definitions of AI. For instance, Does an evolutionary algorithm possess any intelligence? If yes, What is the source of this intelligence? EDIT3: My goal is to remove the subjectivity from Turing test. If the programmer is able to convince a Turing machine that it was the product of creativity of the programmer then the Turing machine is intelligent. Furthermore, the programmer is far more intelligent than the code he created. So, the challenge is how to formally convince the Turing machine that the programmer has superior computational abilities. In addition, the programmer must convince the Turing machine that those superior computational abilities are required and critical to the creation of the Turing machine code. 

This paper, Obtaining a triangular matrix by independent row-column permutations Fertin, Rusu, and Vialette, shows that the problem is NP-complete for binary square matrices. 

Parallel approximation results may shed light on the parallel complexity of perfect matching. Fischer, Goldberg, Haglin, and Plotkin designed parallel algorithm to find approximate $(1-\epsilon)-$maximum cardinality matching which puts the approximation problem in $NC$. Their algorithm uses $n^{\Theta(1/\epsilon)}$ processors and runs in $O(\log^3 n)$ time. T. Fischer, A. V. Goldberg, D. J. Haglin, and S. Plotkin. Approximating matchings in parallel. Info. Proc. Lett., 46(3):115, 1993 

2-colorable perfect matching in cubic planar graphs is very similar to your problem which was stated to be NP-complete by Schaefer in his famous dichotomy theorem paper although he did not give the proof for cubic planar graphs. The problem asks for the existence of two coloring of cubic planar graphs such that every vertex has exactly one neighbor of the same color as itself. EDIT: Defective coloring is the decision version of your problem. A graph is (k, d)-colorable if one can color the vertices with k colors such that no vertex is adjacent to more than d vertices of its same color. The decision problem (2,1)-coloring with defects, which is equivalent to your optimization problem, was shown to be NP-complete even for planar graphs. 

This does not answer directly your Max-SAT problem but the references may guide you to the complete answer. Szeider showed that Satisfiability is ﬁxed-parameter tractable when parameterized by the treewidth of the incidence graph. Samer and Szeider gave an eﬃcient dynamic programming algorithm. References S. Szeider. On ﬁxed-parameter tractable parameterizations of SAT. In Proc. 6th International Conference on Theory and Applications of Satisﬁability (SAT’03), Selected and Revised Papers, vol. 2919 of LNCS, pages 188–202. Springer-Verlag, 2004. M. Samer and S. Szeider. Algorithms for propositional model counting. In Proc. 14th Internationial Conference on Logic for Programming, Artiﬁcial Intelligence and Reasoning (LPAR’07), vol. 4790 of LNCS, pages 484–498. Springer-Verlag, 2007. Samer and Szeider, Fixed-parameter tractability. In A. Biere, M. Heule, H. van Maaren, and T. Walsh, editors, Handbook of Satisﬁability, part 1, chapter 13. IOS Press 

Minimum bandwidth problem is to a find an ordering of graph nodes on integer line that minimizes the largest distance between any two adjacent nodes. A $k$-caterpillar is a tree formed from main path by growing edge-disjoint paths of length at most $k$ from its nodes ($k$ is called the hair length). Minimum Bandwidth problem is in $P$ for 2-caterpillars but it is $NP$-complete for 3-caterpillars. Here is a very interesting fact, Minimum bandwidth problem is solvable in polynomial time for 1-caterpillars (hair length at most one) but it is $NP$-complete for cyclic 1-caterpillars (in cyclic caterpillar, one edge is added to connect the endpoints of the main path). So, the addition of exactly one edge makes the problem $NP$-complete. 

There are algebraic formalizations of combinatorial problems. Combinatorial problems can be transferred to a problem of solvability of a system of polynomials. For instance, Bayer was able to model 3-colorability using a system of polynomial equations. Here is an excerpt of the abstract of Hilbert’s Nullstellensatz and an Algorithm for Proving Combinatorial Infeasibility: 

EDIT: I found in the graph classes database a weird case of solid grid graphs where Hamiltonian cycle problem is in $P$ while Hamiltonian path problem is of unknown complexity. 

The decision version of your problem is NP-complete. The NP-complete 3-Partition problem is reducible to your problem (input has only three boxes having the same volume with zero divisions of items). 

In this reference, Papadimitriou and Roughgarden pose 6 open problems related to computing correlated equilibria: Papadimitriou and Tim Roughgarden, Computing Correlated Equilibria in Multi-Player Games 

A Rice-style theorem for $NP$ is the result proved by Hemaspaandra and Thakur which states that every nontrivial language property of $NP$ sets is $NP$-hard. 

Algebraic dichotomy conjecture (Bulatov, Jeavons and Krokhin): Assuming ETH, every constraint satisfaction problem is either in $P$ or requires $2^{ \Omega(n)}$ time. 

Here, Intermediate NP-complete problem is a problem that neither has a pseudo-polynomial time algorithm nor NP-complete in the strong sense. I guess that there is an infinite hierarchy of intermediate NP-complete problems between weak NP-completeness and strong NP-completeness. EDIT March 6th: As mentioned in the comments, an alternative way to pose the question is: 

Since you are emphasizing natural problems, Here is a very natural $NEXP$-complete problem that is not in $NP$: Square Tiling Problem: Given a set of finite tiles, Does it tile a square of Size $2^n$ x $2^n$? Note that when the square size is $n$x$n$ ($n$ is encoded in unary) then the problem becomes $NP$-complete. For the $NEXP$-completeness of square tiling, check the reference. [1] Christos H. Papadimitriou. Computational Complexity. Addison-Wesley, Reading, Massachusetts, 1994 

Tao suggests the existence of law of conservation of difficulty in mathematics: "in order to prove any genuinely non-trivial result, some hard work has to be done somewhere". He argues that the difficulty of some mathematical proofs suggests a lower bound to the amount of effort needed by the theorem proving process. 

Holyer, Ian (1981), "The NP-completeness of edge-coloring", SIAM Journal on Computing 10: 718–720 $URL$ 

, NOTICES OF THE AMS, VOLUME 51, NUMBER 9, (2004), 1024-1034 A. TURING, Rounding-off errors in matrix processes, Quart. J. Mech. Appl. Math. 1 (1948), 287–308 J. RENEGAR, Incorporating condition numbers into the complexity theory of linear programming, SIAM J. Optim. 5 (1995), 506–524 F. CUCKER, and J. PEÑA, A primal-dual algorithm for solving polyhedral conic systems with a finite-precision machine, SIAM Journal on Optimization 12 (2002), 522–554. 

Motivated by this post, Strongly NP-complete variants of subset sum or partition problem, I am interested in this variant of partition: Given a solution to balanced partition problem (both parts have same cardinality), find another solution that have maximum cardinality discrepancy (i.e. $||P_1|-|P_2||$ is maximum). 

Is there any unexpected consequence that follows from $\mathsf{fewP=NP}$ such as the collapse of the polynomial hierarchy or disproving any other widely believed complexity-theoretic conjecture? 

The answer is yes. Yato and Seta state that $ASP$-completeness imply $NP$-completeness (Page 2, second paragraph). Another solution problem (ASP) is exactly what I call Second X problem. Oded Goldreich states the fact that "all known reductions among natural $NP$-complete problems are either parsimonious or can be easily modified to be so". ( Computational Complexity: A Conceptual Perspective By Oded Goldreich). 

I'm reading this paper, A simple NP-hard problem by Demontis, where he defines an interesting $NP$-hard set and finally he conclude with this theorem: 

Edit Dec 16, 2010: MAX CSP with hard gap means that the problem has optimal inapproximability factor. For instance, 3SAT has hard gap at location one since it is polynomial time approximable to a factor $7/8$ but it is $NP$-hard to obtain approximation factor $7/8+ \epsilon$ even when all clauses are satisfiable. 

Partition problem is weakly NP-complete since it has polynomial (pseudo-polynomial) time algorithm if input integers are bounded by some polynomial. However, 3-Partition is strongly NP-complete problem even if input integers are bounded by a polynomial. 

Manuel Blum is talking about applying Levin's universal search algorithm to the Integer Factorization problem. The idea of Levin's Universal search algorithm is equally applicable to any problem in $NP$. Here is a quote from lectures notes given by Blum on SECURITY and CRYPTOGRAPHY: 

Basically, there is no measure of progress that can survive the Bait and Switch trick of Rudich and successfully leads to a lower bound. 

While searching The information System on Graph Classes and their Inclusions, I found several graph classes for which the Hamiltonian Cycle problem is NP-complete while the complexity of Hamiltonian Path problems is NOT known. Some of those classes are bipartite maximum degree 3 graphs, maximum degree 3 grid graphs, and 2-connected cubic planar graphs. Also this phenomena applies to circle graphs and triangular grid graphs. 

H. Buhrman and J. M. Hitchcock, NP-Hard Sets are Exponentially Dense Unless $coNP ⊆ NP/poly$, In IEEE Conference on Computational Complexity, pages 1–7, 2008 

Kozen in his paper, A clique problem equivalent to graph isomorphism, gives an evidence that $GI$ is not in $P$. The following is from the paper: 

the Incompressibility method from Kolmogorov Complexity is used to obtain Urquhart's $\Omega(n/\log n)$ lower bound for a class of Tautologies. I wonder if there are stronger results using the Incompressibility method or other results from Kolmogorov complexity? 

$P \ne NP$ if and only if worst-case one-way functions exist. Reference: Alan L. Selman. A survey of one-way functions in complexity theory. Mathematical systems theory, 25(3):203–221, 1992. 

Also, check Graphviz Graph Visualization Software from AT&T Labs and Cytoscape : An Open Source Platform for Complex-Network Analysis and Visualization. Cytoscape is one of the best tools and it is backed by a consortium of corporations and academic institutions. 

Cameron and Wu investigated several algorithmic problems for groups, The complexity of the weight problem for permutation and matrix groups. They proved NP-completeness for some of them. 

Deciding the existence of 3-cycle cover is $NP$-complete on directed graphs while it is polynomial time solvable on undirected graphs by a reduction to perfect matching. 

Longest path problem is not polynomial-time approximable to any constant factor in cubic Hamiltonian graphs (Longest path $\notin APX$). I don't know if it remains in-approximable in cubic bipartite Hamiltonian graphs. Maximum independent set is not in $APX$ unless $P=NP$ but it is in $APX$ for cubic graphs. David Eppstein pointed out that it is $NP$-complete to find maximum clique in claw-free graphs and it is not clear to me if it is any easier to approximate than in general graphs. 

Also, Babai in his recent breakthrough paper Graph Isomorphism in quasipolynomial time gives an argument against the existence of efficient algorithms for GI. He observes that the group isomorphism problem (which is reducible to GI) is a major obstacle to placing GI in $P$. Group Isomorphism problem ( groups are given by their Cayley tableis) is solvable in $n^{O(\log n)}$ and it is not known to be in $P$. Here is an excerpt from Babai's paper: 

Mathon has shown that the conjecture used by Corneil and Gotlieb is false. The first reference states this fact. 1- P. Foggia, C.Sansone, M. Vento, A Performance Comparison of Five Algorithms for Graph Isomorphism, Proc. 3rd IAPR-TC15 Workshop Graph-Based Representations in Pattern Recognition, 2001, pp. 188-199. 2- R. Mathon, Sample graphs for isomorphism testing, Congressus Numerantium, 21, pp. 499-517, 1978 

As suggested by Peter, I converted my comment into an answer. Valiant-Vazirani Theorem states that if Unique SAT $\in P$ then $NP=RP$. To prove their theorem they showed that the promise problem Unique SAT is $NP$-hard under randomized reductions. [1] Valiant, Leslie; Vazirani, Vijay. "NP is as easy as detecting unique solutions", Theoretical Computer Science, 47: 85–93 

The problem of finding Vapnik–Chervonenkis dimension is not known to be in $P$ neither known to be $NP$-complete. The problem can be solved by quasi-polynomial time algorithm ($ O(n^{\log n})$). The problem can not be $NP$-complete unless $NP$ is contained in Quasi-polynomial time. 

Here is a strongly $NP$-complete problem (with numerical data as you requested): Schur Triples problem: Input: list of 3N distinct positive integers Question: Is there a partition of the list into N triples $(a_i, b_i, c_i)$ such that $a_i + b_i= c_i$ for each triple $i$? The condition that all numbers must be distinct makes the problem very interesting and McDiarmid calls it a surprisingly troublesome . 

For instance, Is the star system problem $NP$-complete if the target graph is cubic? If not, What is the minimum $k$ such that the problem remains $NP$-complete for $k$-regular target graphs? F.Lalonde, Le probleme d'etoiles pour graphes est NP-complet, Discrete Math. 33(3), 1981, 271-280. 

In light of the recent result of Arora, Barak, and Steurer, Subexponential Algorithms for Unique Games and Related Problems, I'm interested in graph problems that have subexponential time algorithms but believed not to be polynomially solvable. A famous example is graph isomorphism which has subexponential algorithm of $2^{O(n^{1/2} \log n)}$ run-time. Another example is log-Clique problem which is solvable in quasi-polynomial time ($n^{O(\log n)}$). 

No one has a proof whether Universal Turing machine halts or not. In fact, such proof is impossible as a result of the undecidability of the the Halting problem . The smallest is a 2-state 3-symbol universal Turing machine which was found by Alex Smith for which he won a prize of $25,000. 

As for your first question, Allender states (in Amplifying Lower Bounds by Means of Self-Reducibility) that no natural NP-complete problem is known to lie outside of NTIME(n). This means that all known natural NP-complete sets have linear size witnesses. 

This result might be helpful: Emden-Weinert, Hougardy, and Kreuter proved that determining whether a graph with maximum degree $\Delta$ has a coloring using $ k=$$\Delta - \sqrt\Delta +1 $ colors is NP-complete ($k\ge 3$) T. Emden-Weinert, S. Hougardy, B. Kreuter, Uniquely colourable graphs and the hardness of colouring graphs of large girth, Combin. Probab. Comput. 7 (4) (1998) 375–386 

Karp reduction is polynomial time computable many-one reduction between two computational problems. Many Karp reductions are actually one-one functions. This raises the question whether every Karp reduction is injective (one-one function). 

It proposes Lagrangian based heuristic to solve Degree Constrained Minimum Spanning Tree Problem ($NP$-complete) in very large graphs. 

Perfect Matching problem is polynomial time solvable in general graphs. Given undirected simple graph, 

Check these references: Programming languages CondLP and CondLP+: Gabbay, Giordano, Martelli, Olivetti, Sapino, Conditional reasoning in logic programming, Journal of Logic Programming, Volume 44, Issues 1-3, 1 July 2000, Pages 37-74 Claudia, Oliveira, The implementation of CondLP, Lecture Notes in Computer Science, 1996, Volume 1085/1996, 713-715 Gabbay, Giordano, Martelli, Olivetti, Conditional logic programming, Proc. 11th Int. Conf. on Logic Programming, Santa Margherita Ligure, pages 272–289, 1994. References to proof theory: Olivetti, Pozzato, Schwind, A sequent calculus and a theorem prover for standard conditional logics, Journal ACM Transactions on Computational Logic (TOCL), Volume 8 Issue 4, August 2007 

1-Nash, A., Impagliazzo, R., Remmel; J. "Universal Languages and the Power of Diagonalization." 18th Annual IEEE Conference on Computational Complexity (CCC'03), p. 337, 2003. 

One more example; The Subset-sums equality: Given $a_1,a_2,a_3,...,,a_n$ natural numbers with $\sum_1^n{a_i} \lt 2^n -1$. The pigeon-hole principle guarantees the existence of two subsets $I, J$ in ${1,2,..., n}$ such that $\sum_{i\in I} a_i=\sum_{j \in J} a_j$ (since the are more subsets than possible sums). The existence of polynomial time algorithm for finding sets $I$ and $J$ is a famous open problem. Subset-sums equality (pigeonhole version) 

The literal explanation is that Subset Product problem is NP-complete by a reduction from strongly NP-complete problem such as exact cover by 3-sets. In such "strong" reduction, the input integers are bounded by some polynomial function in the number of integers in the resulting instance of Subset Product problem. Such a "strong" reduction is impossible from any strongly NP-complete problem to Subset Sum Problem unless $P=NP$. We have polynomial-time dynamic programming algorithm for solving Subset Sum problem if input integers are bounded by a polynomial. 

An example of weak reductions is $NC^0$ many-one reduction (using circuits of polynomial size, constant depth, and bounded fan-in). In an $NC^0$ reduction, each output bit of the reduction can depend only on a constant number of input bits. Many $NP$-complete problems remain complete under $NC^0$ reductions.