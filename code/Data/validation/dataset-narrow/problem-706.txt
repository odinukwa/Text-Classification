As the comments suggest that it is not designed for main thread only, then look at this Action returned: 

vs. vs. other types: well, you better use not to run unto troubles with the signbit (sign-extension, sign-preserving shifts, division, modulo). But otherwise, it is your choice to use or . If the question was not about the argument (for ) but generic, then I would advise to use standard , , , when used in the program, but when you write some message-data-structure to be passed over IPC or packets (to make it architecture-independent). There are even big-endian and little-endian versions... but this seems to be far away from the simple example. 

How to synchronize? We have to protect anything that we may access from different threads. The common practice is to have some that we can use for . The list of is exactly what we need. So, any access can be protected this way: 

You will need to use that interface (e.g. method) to synchronize final action with main UI thread (simple would do). 

Comments about this topic ( and such) appriciated, I will gladly edit the answer, if somebody can shed some more light at it. 

I usually focus on the design and this review won't be different. You seem to have created some custom universal allocator, that will place all the (different) objects in continuous space (a page) or create new page if needed. The whole space can be released all at once, but no individual objects. So... 

The already pointed out is a bit more complex, because we are executing unknown actions - we should not do that in synchronization block (under the lock): 

How are you going to solve that? What I am missing is some (or or ) that would be used for building the packet. That could requiere a whole different class if you really need to minimize the total memory footprint, but I would not care for one more or member called e.g. . 

I would personally use and private inheritance and few static_asserts, but you can as well think about private member, your custom and doing everything by hand to make it work in any possible scenairo. Note that this is my personal review and may not fully express the customs of this community ;) EDIT: Using seems to be better idea since C++11. See comments. 

As you seem to specifically ask for: Is there a better way for calculating the position of the user controls that are being added? I don't like the way the if/else looks but I am not sure how else to do it. My answer will address only this. You can make a better use of the variable and instead of use and later . The code: 

You can see I have moved few variables outside and added few to reduce the code a bit. But I am really not the one to talk about code-styling :D 

Tag for SFINAE The needs to be identified by a tag () to allow SFINAE in variadic functions (templated overloading with ). 

...but when I give the whole matrix input as 0's or so the solver takes a very long time. That is because your code is very brutal, you simply try every possibility, always check all the slots and continue the loops even when you already know the solution is bad: 

Example (added) I have purposedly created bad XML file and opened it in my app. The result is not so perfect (for a user, because they should never hand-edit the XML), but I can clearly see the problem: 

Template (with some SFINEA for iterator->const_iterator) Inheritance (common base with the implementation) Composition (common struct to place inside as a member) to share some code. 

For I would not worry about duplication, but you can solve it by const_proxy->proxy private constructor (and ) and some to help you. Not nice, I would rather copy three lines and adapt. Again, some templated private helper could solve that as well. It is your class, if you are fine with , then it is fine. If not, enhance it and use std category tag. 

with one waiting/sleeping Thread to finally dispatch the finish action. Or atomic downcounter that last job will know to dispatch the finish action. 

GetKey + Less (the approach taken) Transparent Less (able to compare the object to the key as well - that was composed in the solution form GetKey + Less producing the comparator) Map Hack - wrapping pointer to the key inside the object and use it in . No real advantage and some overhead added. 

You can bring it to your C++11 code as well (and I am using it this way) and make your code a bit nicer and more readable. const_proxy Well, you could possibly use other SFINAE trics to allow simple , but I would not worry that much here. iteratorT I think that and should be the same as on the container here. Pointer could in fact be the iterator itself, but I would rather not define it. I hope somebody more experienced will address this, because this is getting opinion-based and touches the problems about - is derived from . 

- what is that method doing? Number of vectors? Something different? The names and design The looks like , where is something like location/position (seen in example) - a key - and is the value. Why not naming it that way? As already mentioned, may describe what is it about, but still is too connected with the implementation, not the purpose. (The location could be enumeration and our metric could measure the distance using dijkstra or whatever algorithm.) vs. + : I would take inspiration in and use pair of iterators - there would be no need for and the two methods could be made one. vs. : which of the two will be most used? What about adding another template parameter ( or ) for it? The name could then be simply ( can be removed as well). 

vs. - the later seems to allow multiple nodes (e.g. cities or what payload can be) in same place + accept/return list of such nodes/elements. What I am really missing is some Doxygen documentation describing every method and adding some usage example (note: the example was edited in the question while I was writing this review). - I would personally add another method taking pair of iterators: 

This can be rewritten in some byte-code and recursively executed (using e.g. array of function-pointers). No need for the byte-code, good classes/structures with pointers should do. When I read your code, I have noticed but and . You should probably choose if you want to use prefix or place some and such. You can run into unexpected troubles with . Parser 

Stateless C++11 allocators Allocators were at first (my opinion) designed to be simple empty classes / templates, to just call or similar function. They are treated this way as if copying was no-cost. I would personally design it in a bit different way, but I understand that it is what it is. Allocator must therefore be either empty (with only static/shared members) or a reference/pointer to the real logic. Using is therefore fine and satisfy the stateless requirement as I understand it (it handles the destruction as well). boost::pool as allocator This is actually something I have used myself for tiny blocks. It can help a lot if your application needs to allocate many tiny objects (2-3 pointers/integers per object). But beware... used in std::vector But vector is not so good with such an allocator, would be. The problem is that is an array, which reallocates as needed. That often means that new array is created, items copyed and old array destroyed. Container that does not reallocate its node would be better (e.g. tree or deque). In better words: would better be utilized with such "no-destroy unless deleting" container. using single allocator in multiple containers Yes, of course you can. But take care about thread-safety and copy/move constructors (which you solved by using ). the code Well, your indentation may need some improvements, your last line looks like you have the counter outside of the class. But other than that, I can see no errors. 

Alternatively you could track some instead of making the copy, but that would complicate it a bit (you'll have to take care about it in - possibly decrement it if index of removed is larger). It was just an idea, your copy is fine, no need to complicate it. 

More functions like this are needed (e.g. ). Documentation The is no longer default behaviour of Doxygen and the comments shall therefore be changed: 

You can then immediatelly use these to produce some bytecode instead of the text representation. It is not a requirement, but a personal hint - I have actually started with small calculator, infix-to-postfix and infix-to-prefix conversion algorithms, expression evalution, and finally ended with ECMA-262. The byte code I have created used prefix notation, something like this: 

You should rather check the return value from (e.g. and/or maybe use + to ignore anything but digits: 

And original added to destructor, similar changes througout the interface. This way, the caller is made responsible for the pointer and the object gets disposed if the return value is not used. Other pointers (like on ) are no problem. No other proposal (except formatting options for the preprocessor) was accepted, see comments at the end, if you wish. Vertical spacing Given sample of the real source code: 

This IF definitely needs some work, some parsing helper (like ) and separate (fetch the string to some variable first). 

Alternatives The main question is wheter you really need the especially for its nice -> (which is again dispatched through main message loop). The alternative I would personally choose is to spawn for each job ( is doing that for you, maybe using ) and use 

as the is unnecessary Reuse code, don't duplicate You can use one and have one in the final catch for each method body. That could possibly have some speed penalty, but not something really important. Simplicity, readability and maintainability is more important (especially for managed language/code). Why the argument? Do you really need it? Does it have to be parameter? Are you calling it with variable or always , or default? I would personaly create methods returning that throws (e.g. and one with name starting with (e.g. ) that would call the first and on exception. Actually, you intent to throw for DEBUG, to know it, to diagnose. So, it seems to be designed to throw, not to return false (this sounds like: we rather remain silent in release instead of crashing the app). 

Your code looks good, constants are good for understanding and possible future changes. BitArray is memory-optimal (if we don't count the overhead of the very object). Using it is limiting your getter. The only thing that could improve your code would be to use directly. That would need few shifts and masking, e.g. , but that may get less readable for somebody. For 8x8 board, may be even better: 

Inheritance vs. Composition Composition of the comparator is clearly wrong, because inheritance is taking advantage of Empty base optimization. Protected (or private) inheritance of containers is no problem - public inheritance would be, because of possible polymorhic destruction. There is no big difference between having first protected/private member or inheriting it (except EBO). The need for GetKey Unfortunatelly, Loki just state something, which he refused to proof or even explain. I think that he just missed the method and . We don't need to get key for sorting (if we know how to compare to objects), but need some of these for the searching: 

This will be quite big project it seems. I will try to give you some hints (I have written something like ECMA-262 / JavaScript compiler and iterpreter with custom bytecode as school project). If you really plan to develop big language, then you should probably learn about LEX, YACC and BISON, but you'd have to learn about formal grammar for parsers. If you are fine with learning by trial and error, your Lexar is not bad, but I would advise to start writing some custom classes and enums instead of all those strings: 

Overall the interface looks good and I have no problem with private inheritance here, it allows you to use to export (publish) some features that are already there. Second option would be to use private member and forward everything (typedefs, methods simply calling the method on the inner variable), no win here, I would prefer private inheritance. The allows you to have those links in second vector instead of using that without problems with , but I personally don't see big problem in using or directly - it is your vector, you have the right to define as you choose and any vector have to accept integral types as indexes - again, I can see no big problem, but to make sure, would be good: 

You can see, what is wrong, in the title - File Open Error And can track the exceptions to see what elements and what attribute is wrong (page-state-badattr). It won't tell much to the user (except for the title - could not properly parse selected file), but I know, immediatelly. Actually, the stack trace is not that important here, but the exception chain is perfect! But to achieve this, I had to create custom exceptions and add additional data (element/attribute name) to them. But that should be normal :) 

Packet: Observer, Router: Obsarveble This looks like good pattern for new / system introduced in .NET 4.0 (or 4.5). I have used similar patter (my is your , is the same, my method is your ). I cannot see where you subscribe the transmitted packet to the receiver, but assume you will do that somewhere. Some inefficient code