There is no need to reboot the device for the sake of "cleaning the system", its simply not necessary or recommended. You can use to force a reboot without going through , this can cause data corruption issues, but will work closer to "power cycle" reset than 

Flash is slow, files are not immediately written to disk, unless you force the operation it may be longer than you expect. In shell, bash use , a system call 

To compute the power supply required you need to add up the power used by each connected component, and use a power supply that is adequate to run your peripherals. For example Assuming (At 5V) 

This type of problem is actually quite difficult for an embedded device to do. Decoding and multiplexing audio streams in real time is the realm of a dedicated Digital Signal Processor (DSP). Using 8 Output Devices will list the available audio devices You best bet is to write your audio data to a raw audio file Using 8 separate sound cards, you would start each file with a script 

You can edit /etc/rc.local and include your command before its exit statement. Then to enable it And to reboot and see if that has worked out for you. 

Is there a way to programmatically control LCD brightness of the screen connected to RPI over HDMI? As far as I could figure there is really no way to achieve this with RPI over HDMI. What about RPI HDMI to LVDS boards? Does this method give this control? There is a board by chalk-elec that mentions this capability yet I would still like to understand if getting this board is my only way of controlling the brightness of the screen. 

@goldilocks provided a very sound answer on sources modification and why you don't really need that. I wanted to add that your real goal is probably getting some specific things configured - for that you can follow this simple route: mount the card image and modify its content to meet your specific needs, including semi-installing additional software or change default configuration (network interfaces, autoruns, additional scripts you may want to add). This is what I do for my RPI boxes - I'm using them as smart home agents plugged into network in different areas of the house - they are able to discover network and start acting as soon as powered up. 

Magic! Replace uptime with other system utilities or shell scripts that print information you need. The connection is bi-directional so you can use it to pass arguments or diagnostic commands to your scripts as well. Use access control to restrict who can connect to this port, if this is a pi on a public network. Aggregating information from several pis can be done with an intermediate webserver that queries each pi through a secure network or VPN and displays the needed information. Because it's a simple socket interface, you just connect and read a status string. CGI Script By installing nginx, apache, or other webserver, you can execute simple shell scripts to create plain text pages, this is usually sufficient for internal (non-public) diagnostic and debug information. It is not recommended to use this for devices on the public internet, however, security risks can be mitigated by using access control lists in the webserver () to limit hosts that can connect to the pi. Script Example (, make sure it is executable) 

You are probably going to get your best answer from official RPI web site. There are hints in their FAQ section that kind of give clues to what your chances are: Will you sell a self-assembly kit? 

A better way to organize this would be setting up a media client as mentioned above. Here is a good article on this. 

Are you editing /etc/crontab or /var/spool/cron/crontabs/*? can you copy the output for the whole file? 

There is an article on this - it is possible but takes little play to accomplish. If your cable contains USB<->Serial chip (like one here), it should work. But with USB/ethernet available - why? :) 

I'm not good at hardware at all so apologies shall this question sound funny or weird. Is there a board or something that I could use to protect the I2C pins of my raspberry from being damaged? Just in case I connect something the wrong way - can I hinder the RPI from being killed by it? I'm going to only use the I2C pins. 

Multiple Threads Edit If you are using multiple threads, you must guarantee that all resources that are provided by the external process are protected. You have a few options (Not All Inclusive) 

That is, folder, configs and public keys get set to and private keys to If you are using key authentication, the same must be done for user config and key files under 

True, however the downside is not the extra thread, but that you cannot use the same bus at the same time in two places, regardless of how many threads you have. Your multithreaded approach is basically out of laziness. You do not wish to design a robust polling loop so you are asking the kernel, to do its best to schedule your threads and you use locks to resolve resource conflicts when the scheduler screw up. Of course this is less efficient than a serial approach. However, it is simpler (easier), but can cause unintended side effects, the scheduler/kernel is not always doing what you think it is doing. 

What happens when you enter 'yes' to the SSH prompt though? You are playing with two different IP addresses, this could be the problem. Best way to get the IP is logging into your router and checking for the right one. If you can't do this for some reason, try this: I would assume you are wirelessly connected to the same router/hub with your RPI 

There are quite a few posts raising pretty much the same issues as yours I believe. Here are a couple. Most advice that you make 100% sure your power supply suffices RPI and the HDD needs. Not only your HDD needs to be supplied enough power but the RPI, too. Disconnect everything from the RPI, leaving just the network and the HDD and see how this helps. I don't know what your hub make/model is, but mine has two ports that provide 1.2A each whilst rest of the ports on it only do 500mA and will require a Y-cable to connect to HDD. Check into that to see if that helps. 

For asynchronous or polling access, the better approach is to serialize your hardware access into a single thread for a given bus. This thread should run at relatively high priority and establish the "time-base" for your application control loop In pseudo-code 

An description of what this thing is can be found in the kernel documentation. However, for us it is suffice to imagine this as a "bitmap" of your screen. With many caveats, because the formatting of the data is platform dependent. Your application (written in , , , whatever). Would open this file, and write (Platform Dependent!) bytes to it to display and modify an image on the display. It would also need to grab raw input from mouse and keyboard and interpret that as button clicks, and distribute events (calls) to appropriate functions. For example 

Messing with SPI/I2C extenders for those distances is going to be an unreliable monster. Instead Consider the Following alternatives. Kelvin Sensing Using basic 4-wire (Kelvin) sensing you should be able to reliably measure a 0.01V in a 5V FullScale (1 Part per 500 aka ~9 Bits) with a remote differential ADC. This is likely sufficient for your application. The principle is that there is no current flowing on the wires going to the ADC's, no current = no voltage drop in the cable = no effect from the cable impedance. This is a reasonable assumption for cable impedances and slow signals (~1KHz) with software averaging. 

You can run pretty much any distribution as long as it's adopted to RPI hardware. Linux adoptions to ARM architecture seem to often be a separate activity alongside their mainstream development and so is adoption to RPI. Not all distributives are announced on RPI official web site, like Slackware RPI for example. 

Run terminal on your mac and do You should see two lines, one with local loopback (127.0.0.1) and another one with the IP obtained from the router (192.168.XXX.XXX) Check that the IP you are trying to reach is within the same subnet with yours (only the last number on the IP should be different) Another way to check if you are on the same network is doing a traceroute to this IP - should be one hop, not many. SSH to it and answer "yes" when it's asking you if you want to establish the connection. 

If you are editing individual crontabs, you don't need to specify the user and should not edit the file directly and instead use crontab -l to view your crons and crontab -e to edit them.