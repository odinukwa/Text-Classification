Your class is very clean. I particularly like that you over rode the method so that it returns something meaningful. It's a little detail that often gets over looked. Well done. That said, I'm not sure what you're really getting from the class. 

That ternary condition has no place in a function called . I would try to keep those separate. You should be able to call on any array of numbers. 

I'm not sure how to make this perform better, but there are a couple of nit-picky things I can share. 

Most people would have used which I believe to be wrong. The way you've done it, it's clear that the first case is a multiple of the other two cases. Well done! They are magic numbers though, and should be replaced with meaningful constants. Otherwise, I wouldn't change another thing. (Disclaimer: Someone will come behind me and talk about ways to make the code more efficient, but none of them will be as readable as this algorithm.) 

But like I said, it's non-standard. The standard is to use PascalCase for methods, camelCase for local vars, and _underscoredCamelCase for private fields. 

Note that I use this method for serializing many different classes, so it requires that you tell it what type to save back to XML. You could modify it to be specific to your class, but I'm not sure there's a benefit there. And finally, the client code can load/save classes (and their state) to XML pretty simply. 

According to the single responsibility principle: no. The App component defines the routing. It feels awkward that it also handles login logic. It seems to be doing too many different things. While the Login component seems perfectly suitable for handling everything login-related. 

I would still question your decision to use binary encoding for storing the deviations. It has several downsides besides the extensibility problem: 

In general, I would say: no, just serve the same page for all kinds of devices, regardless of mobile or not. Perhaps though you have some sort of reason why you want to serve one kind of page to to mobile users. Without knowing that, however, I can't really assess whether your solution is good or bad. 

Regarding a plan to implement them recursively, I would suggest you instead look into implementing an algorithm like merge sort or quick sort, which are recursive in nature. 

This separation between components and logic is good. I would suggest separating them even more by moving the and functions to separate file, which you can then test completely independently from the component. The component rendering test however is dependent on the logic. That's not good: 

So your component test really is more of an integration test, not a pure unit test. There are basically two ways to improve on that: 

That is smart and clean way to get a substring, but has potential to confuse a rookie. Consider adding a comment. 

Visual Basic Naming Rules - Office 2013 Language Reference This pattern is a bit more restrictive than need be, but I think it will certainly cover the cases laid out above. 

I don't know if sqlite supports sized data types, but if it does, you should determine what the right size is and declare it. I'm sure declaring a field as dimensions it to a size that's bigger than you really need. The formatting looks good. It's very readable and consistent. I see a lot of SQL that's difficult to read, so good job there. 

I maintain a VBA process that prints a large number of PDFs. It was awful when I inherited it and I've been making improvements over time, but I'm a bit stuck on this one. There are at least 4 functions with this exact same code used to check to see if the program has been initialized properly. They could all be called individually, or together depending on circumstances. I do not want to initialize again if I don't have to. Hence the check in every subroutine, but I just can't figure out how to do it any differently. Thoughts? Is there a design pattern to deal with this kind of thing that I don't know of? Please try to focus on the pattern and not the supporting intitializer. I know there are a few issues there and intend to deal with them soon. I included it in case it was relevant. Main code: 

First off, consider which browsers is this DOM library supposed to support. Then test that it works in all of them. 

This code looks needlessly tricky to me. It's not immediately clear what kind of values are stored to the state. I would just write it out explicitly: 

Checking for runs A basic check for runs is quite simple. You just loop through all the buckets in order and check for the longest sequence without holes: 

Definitely. The is already a pretty large component. I'd suggest splitting it into even more smaller components, like: 

Presentation matters. It really does. If you would apply for a newspaper reporter position, would you submit an essay where paragraphs would start without indentation and sentences would end without full stop? Any fool can write a program that a machine can understand. A greater challenge is writing code that other people can easily understand. You need to learn how to properly format your code. Google "JavaScript style guide" and follow whichever you like - doesn't really matter, as long as you format your code consistently. Code structure One of the benefits of a framework like React is that it allows you to split you code up into multiple simpler components which you can then compose into other components that perform more complex tasks. Your code does not take advantage of that. Instead it has been written as a single large App component. The same applies for functions. Instead of large function like you should strive to break your logic down to smaller functions. Giving these functions good names, will also allow you to make your code more self-documenting without needing to write a comment. 

You can do the same for and , but you will need to Override the property. You should also do yourself and the devs you work with a favor and study up on the C# Naming Guide. Properties and Methods should be PascalCased, variables should be camelCased. Also be careful with your bracket placement. It's usual to see brackets on the new line at the same indentation level. They're all over the place in your second snippet. 

Now, you could repeat this process for , but it's not nested so badly now, and the function is pretty short and concise as is. You know what though, I'm not quite happy with it... I think this is a case for . It's shorter and undoes the nesting, but does sacrifice a little bit of "understandability" (as any ternary operator would). 

Just a couple of notes. The biggest of which is that I think you've misunderstood what does. It creates a default instance of the class. Which allows you to do things like this 

Y u shrt yr nms? is a really bad name. It's completely meaningless. Call your class what it is, a . You have a similar issue with your names for and . Code is read much more often than it's written, so it's important to be crystal clear with our naming. Particularly our public API. What would you think/say if you say this in some code you were unfamiliar with? 

So in conclusion... this whole big doesn't really seem to provide many benefits over the jQuery.ajax() API. Perhaps all you need is a simpler helper function to wrap it in. 

loadValues() is rather problematic. It checks for each possible data-attribute and if present overrides the value in . These repeated checks are just duplicated code which could be eliminated by just calling without parameters to grab all the data-attributes. But the fact that it's modifying is a real problem because the function is used like so: 

Most importantly, try to care about your code. If you put your code out for others to see (by posting it here), try to first make it as good as you possibly can. Remove dead code. Fix the problems that you know about. Post a complete example, not half-finished one. Structure it so that it's as easy to read and understand as possible. Run it through JSHint and fix all the warnings, so you that people will not need to point out the mistakes that a stupid machine could have told you about. 

Follow the You ain't gonna need it principle: Don't add methods/properties to a class just-in-case. Have a clear purpose and clear plan how you'd expect your class to be used. Unless you're really sure, it's better to leave it out. Less is more. Design first for your own specific use case. Leave out everything you don't actually need. Then try to use it in another project - see if it works as is, or do you need to improve it somehow. Only after having found it useful in several places of your own, consider sharing it with a wider audience. 

Which my tiny brain can't even begin to wrap around. I do see an awful lot of duplication here though. With the exception of (which should be by the way), the first coordinate in each of them is the same. Precalculate it and store it in a variable. 

I don't like relying on default properties when I can avoid it. It's better to be explicit. This would be more properly written as: 

If I understand your code (and I'm not 100% certain I do), your class only returns one object (as opposed to a collection or array of objects) and should thus be named , but as @Mat'sMug pointed out, it conflicts with the namespace. Since your has nothing to do with that name space, you might want to think up something else. I'm drawing a blank though. isn't a very descriptive variable name, but given the context, not too hard to figure out. There's some inconsistent whitespace here. 

I think you minimally owe your future self some comments as to why it was done this way, if not a general rethink about what you're doing here. 

I know that was a lot to take in, and not a whole lot of actual code from your project, but you really do have yourself in a pickle here. I recommend implementing something simple with this pattern before trying to refactor to it with this monolithic code behind that you have there. I fear that if you try without having a simpler experience first, that you'll fail and never learn how powerfully awesome this pattern can be in your code. Good luck!