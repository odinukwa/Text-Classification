We can modify Dijkstra's algorithm to solve this problem too. For each vertex, in Dijkstra's algorithm, we store the shortest path to that vertex obtained so far. Here, we store $r+1$ different shortest paths per vertex (where the required colour sequence is $c_1,c_2,\ldots ,c_r$). In each vertex, the first path corresponds to shortest path so far, containing only whites. And for $i=1,2,\ldots ,r$, $(i+1)^{th}$ path is the shortest path so far, that contains vertices of colours $c_1,c_2,\ldots ,c_i$ (in that order) mixed with white vertices. While modifying shortest paths for the new node, we will modify all $r+1$ paths if it is white and if it is of a different colour $c$, only those $(i+1)^{th}$ paths are modified which have $c_{i+1}=c$. And when the algorithm ends, the $(r+1)^{th}$ path in each vertex gives the required shortest path to that vertex. Complexity will be $r$ times the complexity of Dijkstra's. Note that we have not assumed the colours in the sequence to be distinct (so we can get shortest paths with required sequence as red-black-red-blue too). Also, we can easily modify this to allow multiple vertices of same colour to occur together (i.e., red-red-black-blue can be considered same as red-black-blue). 

Is there anything in the literature close to the following problem: Given a bipartite graph $G(V,E)$ with balanced bipartition $ \{U,W\}$ , does there exist a perfect matching $ M $ in $ G $ such that for every 2 edges $u_1w_1, u_2w_2\in M $, there is an edge $u_1w_2$ or edge $u_2w_1$ (or both) in $ G $? In other words, is there a perfect matching $M$ such that the induced subgraph $G[M]$ is $ 2K_2 $-free. (With balanced bipartition, I meant $|U|=|W|$.) The extra condition is something like an opposite extreme of that used in induced matching problem. Another possibly related one is the problem of finding maximum size matching $M$ in bipartite graph $G$ such that contraction of edges in $M$ minimizes the number of edges left in the graph. I checked the list of matching related problems given by Plummer in Matching and vertex packing: how "hard" are they? without success. PS: This problem is a special case of this decision problem :- For a given $k\in\mathbb{N}$, is there a maximum matching $M$ of a bipartite graph $G$ such that $G[M]$ is $2K_2$-free and $|M|>k$. If the input graph is balanced bipartite and $k=|U|$, we get the above problem. Thank you. 

I think both of your problems are in P. Here's an algorithm that works in P without any restriction on the $(a_i,b_i)$ pairs. Formulate your problem as the problem of choosing $x\in\{0,1\}^n$ subject to $\sum_i x_i = k$ so as to maximize $$\textstyle f(x) = \pi(x) + \sum_i x_i a_i$$ where $\pi(x)=\prod_i \exp( x_i \beta_i)$ and $\beta_i = \ln b_i$. Relax the problem to allow $x\in[0,1]^n$. For intuition, note that the function $f(x)$ is convex, so it is maximized over $x\in[0,1]^n$ at some $x\in\{0,1\}^n$. (To see the latter, note that any $x\in [0,1]^n$ with $\sum_i x_i = k$ is the weighted average of integer points $x'$ in $\{0,1\}^n$ with $\sum_i x'_i = k$, and $f(x)$ is at most the corresponding weighted average of $f(x')$ over those integer points, so one of those integer points $x'$ has $f(x') \ge f(x)$.) Anyhow, find an optimal integer solution $x$ in polynomial time as follows. The first derivative of $f$ with respect to $x_i$ is $$\textstyle a_i + b_i\, \pi(x),$$ so (given the constraint $\sum_i x_i = k$), there exists $\lambda$ such that for the optimal $x\in[0,1]^n$, $$x_i = \begin{cases} 0 & \text{ if } a_i + b_i \pi(x) < \lambda \\ 1 & \text{ if } a_i + b_i \pi(x) > \lambda \\ ? & \text{ if } a_i + b_i \pi(x) = \lambda. \end{cases}$$ Furthermore, WLOG there are at most two indices $i$ that are undetermined by the above condition (because otherwise three pairs $(a_i,b_i)$ lie on a single line, a condition that can be broken by an insignificant perturbation of the input). Given any $x$ and two such indices $i$ and $j$, consider the neighboring points $x'$ and $x''$ obtained by raising $x_i$ to $1$ and lowering $x_j$ to 0, or vice versa. Since $f$ is convex, one of these points is as good as $x$, that is, $\max\{f(x'),f(x'')\} \ge f(x)$. Finally, to find the best $S$ in polynomial time, determine the $n\choose 2$ breakpoints $\pi$ such that $a_i + b_i\pi = a_j + b_j \pi$ for some $i$ and $j\ne i$. For each such $\pi$, order the indices $i$ by $a_i + b_i \pi$, and take $S$ to contain the first $k$ indices in the order (if there is a tie for the $k$th, there are at most two indices that are tied; try both, giving two sets $S$ for that $\pi$). Take whichever of these at most $2{n\choose 2}$ sets $S$ gives the largest $f(S)$. 

$f_i$ are constant real numbers. They stay the same over the entire path. But note that the paths are not necessarily edge-disjoint. So an edge could be present in multiple paths and hence the actual flow in that edge will be sum of all the corresponding path flows. For a path $P$, let $cap(P)$ denote the smallest edge capacity in the path. A thickest path is a path $P$ with largest $cap(P)$ (imagine the edges as pipes and capacity defining the thickness of pipe). A bottleneck edge of path $P$ would be an edge with capacity $cap(P)$. After sending a flow $f_1$ on $P_1$, in the corresponding residual graph, let $P_3$ be a thickest path. If the residual capacity of the bottleneck edge is $0$ (i.e., maximum $cap(P)$ value is $0$ over all paths), then no more flow can be sent from $s$ to $t$. But this implies $f_1 \geq f_1^* + f_2^*$ contradicting the assumption that $f_1 \lt f_1^* + f_2^*$. While constructing this new graph $G^\prime$, edge capacities were reduced to smallest values that allowed the flow $f_1$ to be feasible and the flows $f_1^*$, $f_2^*$ to be feasible. Suppose $e$ is not present in one of the two paths (say $P_1^*$). Then the capacity on edge $e$ must have been reduced to $f_1$ (as $f_1 \geq f_2^*$), resulting in zero residual capacity. So $e$ must be present in both the paths $P_1^*$ and $P_2^*$. When we say something is $(1/r)$-integral, it means the values involved are integral multiples of $1/r$ (so standard integral solution will be $1$-integral). Here, $D/k$ integral flow means that each edge has a flow which is an integral multiple of $D/k$. Using lemma $1$, if we have a flow $f_1+f_2$ obtained through two augmenting path iterations, then this flow can be written as sum of $3$ paths with flows $f_1^ \prime ,f_2^ \prime ,f_3^ \prime $. So we have $f_1^ \prime +f_2^ \prime +f_3^ \prime = f_1 + f_2 \geq f_1^* + f_2^*$, where $f_1^* + f_2^*$ is a maximum 2-splittable flow (from lemma 2). Suppose $f_3 ^\prime$ is smallest among $f_1^ \prime ,f_2^ \prime ,f_3^ \prime $. Then $f_3^\prime \leq (1/3) (f_1^ \prime +f_2^ \prime +f_3^ \prime )$. So taking the two paths corresponding to $f_1^\prime$ and $f_2^\prime$, the net flow is $f_1^ \prime +f_2^ \prime \geq (2/3)(f_1^ \prime +f_2^ \prime +f_3^ \prime ) \geq (2/3)(f_1^* + f_2^*)$. So this gives a $\frac{2}{3}$-approximation. 

Upper bound of $O(\log N)$ I only sketch the proof. Fix any sequence of circles. We will argue that as $N\rightarrow \infty$, the total distance traveled by the bug in the first $N$ steps is $O(\log N)$. Assume without loss of generality that the first circle has radius 1. Fix an arbitrarily large $N$. Let $p$ by any point in the intersection of the first $N$ circles. Note that because of the way the bug moves, in each step that the bug moves it gets closer to $p$. First, consider steps where the following ratio is at least $1/\log N$: $$ \frac{\mbox{the reduction in the distance to } p}{\mbox{the distance traveled in the step}}.$$ The total distance traveled in such steps is $O(\log N)$, because the total distance traveled in such steps is $O(\log N)$ times the initial distance to $p$. So we only need to bound the total distance traveled in the other steps --- those in which that ratio is at most $1 / \log N$. First, we argue something slightly weaker: that the total distance traveled in such steps before the circle radius decreases to 1/2 or less is $O(\log N)$. (We show later this is enough to give the bound.) Consider any such step. Let $a$ and $b$, respectively, denote the locations of the bug before and after the step. Let $o$ denote the center of the current circle. Let $b'$ denote the point on the ray $\overrightarrow{pb}$ such that $|pa| = |pb|$: 

I understand that it is common not to be concerned with specific details of simle things in such papers. But it seems i am missing something. Is there anything easier? Sorry; i know this must be a simple thing. But i don't see any better way. Thank you 

(I asked this on mathse. May be it suits better here) How to find the cyclic ordering of edges incident on a vertex in a plane graph? (ie, in a plane embedding) Of coure we are looking for a polynomial time algorithm. The algorithm i settled on uses dual graph. The idea was to take the set $E$ of edges incident on $v$. Take the set $F$ of faces that contains vertex $v$. Let the dual graph be $G^*$. Take the induced subgraph $G^*[F]$. It will be a cylcle and hence we have a cyclic ordering. From this, we can obtain a cylcic ordering of the edges incident on $v$ in the original graph. In "Planar Formulae and Their Uses", Lichtein says 

No. Here's a lower bound. Claim. For any $\epsilon>0$, every comparison-based $n^{1-\epsilon}$-approximation algorithm requires $\Omega(\epsilon n\log n)$ comparisons in the worst case. By "comparison-based" I mean any algorithm that only queries the input with binary (True/False) queries. Here's an attempt at a proof. Hopefully there are no mistakes. FWIW the lower bound seems likely to extend to randomized algorithms. 

You choose a probability distribution $p^t$ on $[n]$ (the $n$ so-called experts). Knowing $p^t$, the adversary then chooses a payoff vector $a^t\in [0,1]^{n}$. You receive payoff $p^t\cdot a^t$ for the round. 

See Wolfe and Berlekamp -- Mathematical Go. Using Conway's theory of games, they show how to analyze certain kinds of Go endgames. Their solutions turn out to be measurably better than the solutions given by top Go players. (Not quite an answer to your problem, as those latter solutions were probably never claimed to be optimal.)