You need to create variables that determine the position of your image, make your render function use those variables as the position, and change those variables when you want to move your object. Here's how you can do it: 

It is generally assumed that the mass does not matter and they bounce up to the same height. This is because the coefficient of restitution, which lets you calculate the velocity change after the collision, does not depend on mass. The velocity right after the collision determines the height that the ball will move up to, independent of the mass (just like how mass does not affect free fall duration). So, for games, it's safe to assume that they will end up at the same height. However, in real life, it can be hard to make the two have the same contact properties and balls with different masses may end up bouncing to slightly different heights. This paper can provide further insight. 

1) Yes your observations are correct. 2) The standard global XYZ coordinate system makes sense when you think in terms of a first person shooter, when you are looking through the eyes of a character in the scene with a blank(identity) transformation matrix. Like it would when you draw a coordinate system on a piece of paper, X points to right and Y points upwards. According to the right hand rule (x->thumb, y->index finger, z->middle finger), Z points towards you. 3) It wouldn't be wrong, but it would be a diversion from standards. There are three problems that I can think of at the moment: (a) Let's say one day you want to use a physics library that uses the standard coordinate frame. If you did not follow the standard, now you have to think about the transformation that takes you from your world to the physics world. Can get annoying when you want to fix a bug. (b) When you want to share code with someone, or bring someone over to help with development, they have to get used to your convention. (c) When using standard 3D models, you always have to have a transformation above them to prevent them from looking sideways. Now to add to question 2, it is sooo useful to think of X, Y, and Z as not just three letters, but as right, up and backwards. Every character in the scene has a local coordinate system attached to them, and in their local coordinate frames X is always right, Y is up and Z is backwards. Once you have this, now you can make sense of vectors that you print out, or write your algorithms in a way that makes sense. Let's say you have two characters A and B, and you want to do something if one of them is facing the other. You can simply find B's location in A's coordinate frame (Ta^-1 * p_b), look at the vector you get and see if Z(backwards) is negative and X(right) and Y(up) are small, because that vector tells you how much backwards, right and up B is with respect to A. 

Blue is walls, white is floors, orange is doors and green is the designated "center" of that room (usually used only for A* pathfinding.) I kind of already had an idea of how I could find the available space, but decided to ask because I wanted to know if there was an simpler way of doing it. 

I'm working on a dungeon generator and I'd like to be able to connect rooms through other rooms. What I currently have set up is two dictionaries and a map (an int array.) The first dictionary holds room templates separated by height, width and type (so: .) The other dictionary holds rooms that have already been added to the map and uses rectangles as keys. I'd like to be able to find the maximum rectangular area that could fit into an empty space, then select a template room accordingly. So what would be the simplest way for me to do that? Edit: Admittedly, I was a little vague before so here's a little more information. My current method for creating the map follows certain steps: 

The AI form a group of four, determine which one of them is the strongest and bravest (whichever has the highest number), make that one the leader and then snake behind the leader. This doesn't workout because the leader ends up getting stuck on the others as they attempt to walk through him to form a line. The AI moves from one room to another. This doesn't work out because the one changing rooms will get stuck on ones that are doing other things or even on other room changing AI. 

A more interesting approach would be to determine a difficulty rating for the wave, and a difficulty rating for each enemy type. Then you could add different enemies to the until you have reached the desired difficulty. 

I am working of some editor scripts for Unity but have found that it is difficult to force Unity to reload my editor scripts. My scripts are modelled on the static constructor approach and perform some manipulation of the Tag Manager. Currently the static constructor is called when either: 

If familiar with OpenGL Immediate Mode this approach is pretty straight forward, but if you later decide that you would like to texture your primitives I would recommend using a MeshRenderer with a custom mesh. Morten Nobel has published a tutorial on using this approach with 3D meshes his blog. The same approach can be used create a plane of arbitrary shape. 

A great explanation of this technique as a demonstrated by SMW is has been posted (also by Shaun) on youtube. The transitions between these modes can add additional complexity. Of course when done right the player will be unaware that anything special is happening behind the scenes. However this complexity can cause problems as demonstrated at about 3:35 in the second video. 

These No Warranty / "as is" clauses are intended to reduce any liability brought against the software developers/publishers. 

The best way to increase your chances of being employed as a game developer is to get your hands dirty and actually work on the development of some small games. You say that you are "interested in programming games", which makes me believe that you haven't developed any games, yet. I advice you to stop thinking and start doing. However, the first order of business will not be to specialize in any of those fields. Let me elaborate. When I interview you for a job, if you tell me you are interested in programming games and your specialty is game AI, I will immediately ask you which games you worked on. If the answer is "none", I don't care about how many books you read or how you believe you are an expert in game AI. You won't be hired, period. To obtain game development experience in a specific field such as AI, you need to seek out others that are developing games and try to get into their teams. You want specialization, remember? A generalist can develop the whole game, but a specialist needs to work in a team. However, you will again be asked for previous work for someone to trust you with the AI of their game, let's say. Even if you will work free of charge. So, it's a chicken and egg problem right there. Basically, you can't just specialize in anything with no prior game development experience. Here's what you need to do: you need to forget about specializing and start contributing to the development of a game in any way you can. You can develop a simple game using a game engine such as Unity, or ask someone else developing a game and they will tell you what they need done. Then you'll figure it out and that will give you experience. Once you have something to show, not only you will have a better chance of joining a team, but also you'll have a better idea on fields that you can specialize in or that you don't like to work on. Trying to make a decision right now without that experience is like marrying someone without getting to know them. You cannot know if you will hate coding game AI unless you have some relevant experience. 

If this doesn't provide enough information then setting a breakpoint and setting though the code will usually find the problem. 

Unity will attempt to add a component of this type for you, If this fails (e.g. mixing RigidBody/RigidBody2D) then the script will refuse to attach. 

First go though your list of obstacles an compile a list of fields that are currently unavailable for movement. This list could contain field IDs or grid references or some other way to identify a field that works for your data structures. Next perform your Breadth-First Traversal and for each field perform a check to see if it is on the list of fields that contain obstacles. Creating this list will be a low complexity task so it shouldn't matter if it is recreated between each turn. 

Using a consistent naming scheme e.g. all types use CamelCase. Use the generic form of as it allows compile time type checking: 

This allows the parent object to move around in world coordinates as required, while the GUI appears to follow despite moving in viewport coordinates. 

I recommend Natural Earth Data as a source of public domain cultural and physical GIS data with global coverage. Vector data sets include landmasses, countries, populated places etc, while raster base layers are available with optional details like land elevation, climate, waterways and submarine elevation. This data is intended for use with GIS software, but can be manipulated and then exported as something more "game friendly" (svg, png etc.) using tools like QGIS or indiemapper with no financial outlay. The vector layers come with detailed attribute tables that might also be useful for simulations such as names, populations and GDP. Here are a couple of quick mock-up produced with this data: 

Using a similar method as before, create rooms necessary to the game (shrines, barracks, treasure rooms, etc.) and place them randomly throughout the map, checking if they collide and moving them accordingly. 

Load in room templates from an xml file. Create the start room in the middle of the map using a start room template with a random size. 

I'm currently working on AI and, as stated above, I'm having trouble figuring out how to keep the AI from getting stuck on each other. More specifically, I'm working on two different behaviors for the AI: 

With the black representing walls. After the map generates, it goes through the map and finds all the outward corners and places a node on them. The end result is something like this: 

The way I've programmed it, AI traveling to a destination will calculate which tile gets it closer to it's goal (they use jump point pathfinding to find their way around) and then they calculate which tile they'll move to the next turn. Other AI check to see if a traveling AI is around them and if there is, they move one space to the side (or at least they're supposed to move.) Does anyone know a way to keep this from happening? 

When it finishes that, it goes through the nodes and connects the nodes that have a clear line of sight to each other. Like this: 

By authoring an audio clip with high BPM, then playing back at half speed you are effectively halving the sample rate. You can achieve a similar reduction in asset size without changing your workflow or any existing audio files by reducing the sample rate in the AudioClip inspector. Also checkout the various compression options on that page as they all have different storage / quality / CPU trade-offs. It is often best to import assets files into your unity project as they are. Unity then allows configuration of independent quality settings for each build target. 

Note: this last line will produce a unit vector (i.e. of length one), you may need to handle thing a bit differently if you want the diagonals to be of length sqrt(2) like the code you posted with your question. Edit: I can see two approaches to address the issue of switching directions on each frame and approximating 16-direction movement. BlackList: If each time a player changes direction we disable or blacklist the direction they were taking before that turn, this would rule out that issue, and instead result an a high degree of over steering. This might be acceptable if the target was stationary but is unlikely to look natural if the target moves into the direction we have blocked, and players would learn to take advantage of this.