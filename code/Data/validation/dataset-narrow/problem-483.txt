is appropriate and the code doesn't proceeds. Outsource I'm also not sure if it would be better to outsource this part (as : 

when you store assign a few lines above in the -condition. will just search for a , which you assign by yourself with ... Besides these points I can't see any major mistakes. You should just think about your comments a little more (Do I really need this information? Is this self explaining? Is a single line comment enough here?). As I already said: I can't say much about the networking part, maybe someone else will jump here. 

I'm sorry for the long post (I'm not 100% sure if this is allowed - I'll delete the post immediately if it's not). 

And I think that the code will stuck if a non-digit, non-'+/-' and non EOF file character is found. Since it'll just unget this char and read it again in the next function call. Is this made on purpose? I left out the , since I think that the function is supposed to just read the next char of input in the next function call... 

I modified the version inside K&R quite a bit and was wondering if I did a good job at doing so. My is supposed to return EOF when end of file is reached, 0 if it failed to read the current character as an integer and 1 if it successfully wrote the into . The K&R code begins with the follwing lines: 

In of my software engineering classes, I had to write a truth table calculator in the language of my choice. This is what I came up with, and I would like to know what I should do better next time: 

I have more menus to account for, but I haven't implemented going back to them yet as I do not have them fully implemented. What is really going on here is I need to programmatically select a menu to open it so I can select a menu item within it. If I do not open the menu, will not have , so the app will crash. This is CurrentItem: 

I found I could remove the lines without effecting the display. In , you don't need to set . I do not know why you need to do that to remove the spacing in the class, but I was unable to get it working without it. I do not like that as it is not clear why you need to set the there, and there is probably a cleaner way to do it, but the usual trick of using a negative margin value isn't working, and neither did setting the to . I did not make any other changes; as I said above, your CSS is very clean and neat. 

Your comments are redundant because it is clear you are adding it to the list if it does not exist. You did use braces here, which is good. Please be consistent whatever you choose, though, and either always use them or never used them when they are not needed. 

So in the vein of an old dog trying to learn new tricks, I've decided to try to polish up my JavaScript skills. I've used it a lot but I don't claim expertise. I'm looking for any critique on the approaches I've taken, particularly in style - I can accomplish what I want, but I don't have the intuitive sense of the best approach to take to various problems in this language. The Goal My first goal was to come up with a good way to handle routing to an MVC controller in Express. I had looked at some other frameworks (Sails.js, etc.) but wanted to try my own. Basically, I wanted a way I could ask Express to create a route like and have it route a request such as to an action called login on a controller called user. The Design Some of my design choices: 

The above defines an action 'login' with separate handlers for HTTP get and post, and an action 'logout' that handles all HTTP verbs. An Example of Using It The module exports one function which takes a directory as input and returns a router suitable to be added to an Express middleware stack. This router defines a method called addRoute. Note that the route must either specify :controller and :action as route segments or these must be defined on an options object. It's perfectly fine to use with both and - each router will only map those URLs which correspond to actual controllers/actions found and loaded, it doesn't match all two-segment URLs. 

Notice how I removed superfluous variables, moved some variables into a tighter scope, used more meaningful variable names, and tidied the code up a bit. 

Please tell me the good, bad, and awful so I do, don't, and don't do the same in my next venture into VB land. 

isn't very descriptive. I have to read the test to figure out what it is actually testing. Later on when you make changes that make this test fail, how are you going to know what is actually failing without reading the code? I would give it a name so descriptive that I could tell what failed from the list of failed tests. 

Don't put your logic in . 's job is to start and stop the program--not to do any logic. Your should look something like this: 

A while ago, I was working on a chess project with a couple other people. In the end, I wrote all but a couple of the lines of code, including these: 

This control uses four converters. Two of them convert the given to the comboboxes' to a list of localized strings, and only convert one-way. The other two take the selected item, which is now a string, and convert it back to the specific enum type used by the combobox. This is used to bind the selected item to a value in the view model that more accurately represents the selection; these latter ones must work in both directions. These are uncomfortably similar, but I am not sure how to reduce the similarities: 

If is equal to . Could not create socket will be printed as well as Socket created, which is misleading. I think: 

One of the K&R exercises is to write a small piece of software to compare two files and print the first line in which they differ. Here is my attempt: 

I'm currently learning C with "The C Programming Language" by K&R. At the moment I'm at the chapter about pointers (since I come from Java, they are new to me). In the book is an example code for a method , which is supposed to read integers from input, but doesn't handle freestanding '+' and '-' correctly. 

I recently read K&R The C Programming Language and wanted to write a small program to count the occurrence of each word in the input (std-input - I piped a file with all shakespeare pieces in there). Since I wanted to learn how to split source files into multiple files with this project I pretty much outsources every function I could think of. This is the part I'm most unsure, whether its bad practice or not (I include multiple libraries from the std-lib multiple times. Is this a bad thing?). You'll see. find_words.c 

Unnecessary comments I don't know who else will read this code but comments like followed by this will just make the code more obscure, since the goal of the error message is pretty obvious. Calling strlen for no reason Also it's not really clear to me, why you need to call here 

Really you only have two approaches - iteration, or precomputation. There have been some other examples of precomputation here, but I'll throw one more into the mix - computing the sums at the time each element is added/removed from the collection. You'd need a custom collection type - here basically everything except .Add, .Remove, and .Clear just call into the list's implementation. Add is quite straightforward, we added a new item and it becomes part of a new triplet. Remove is slightly trickier as we have to remove three precomputed values and recalculate two of them. A Dictionary is used to count the number of triplets summing to a particular value, so that we can remove the key only when every possible triplet summing to that value is gone. I chose to do the bounds checking within the sum method itself but that could be done elsewhere. 

I wanted it to load all controller files within a given directory. That seemed the right trade-off in terms of granularity. It's important, though, that I could create multiple instances in order to load more than one controller directory. I defined a 'controller' as any file ending in within the given directory. I strip any suffix if provided (e.g. either or defines a controller named .) A controller will export 'actions'. An example of two exported actions: 

My Main Questions / Thoughts I debated a lot around what the export of this should be. I was considering exporting either a new ControllerRouter object or the ControllerRouter constructor but instead created a new object and closed over it. My main reason was to give a simple and clean interface. I opted to use a ES5-style constructor function rather than an ES6-style class just to get more familiar with thinking about prototype-based inheritance, not because an ES6 class is a bad approach in my mind. 

Any and all comments welcome. If you see something that I can improve, or that I am not doing something the idiomatic F# way, please let me know. 

Don't put a comment on a brace's line unless the comment is about the brace (like , and we all know those comments are terrible). Put that comment on its own line above the statement being commented. Robert Martin (author of Clean Code) says that a comment should always cause the programmer to cringe in shame that we couldn't make our meaning clear using just the code, even though he does admit that they are a necessary evil in certain acceptable cases. I'm not saying this is a particularly bad place for a comment, this is just food for thought. 

Finally, here are my unit tests for the view model, which have 100% coverage. Two of these tests test methods that make broad changes, so I use multiple s to ensure everything is working. Is this OK, or should I split these methods up and test only one output of these methods at a time, or do something else? 

I am satisfied with my VM, but here it is for completeness. If anything can be improved, please bring it to my attention. 

This looks just a bit messy in places. Am I missing some ways to clean it up? P.S. The owner of Rubberduck says to use (and it is pretty obvious what things are once you know the project internals :P), so you needn't comment on that.