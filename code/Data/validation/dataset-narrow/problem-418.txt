Should there not also be an otherwise we could just call this ? Prefer over is something from C. It is basically zero. And has a type that allows it to be assigned to numeric values. Use it is a pointer type that can be converted to any pointer (but not a numeric type). 

Note: We do the deallocation after updating the object to a consistent state. This is because the deallocation may fail (or throw an exception). So if you deallocate before your object is consistent you leave your object in an invalid state that is not usable. Luckily for you int does not throw exceptions on deallocation (but a user defined type may do). So you should be careful. If another program comes along behind you and tries to make your Vector generic but does not notice this he may get screwed over accidently. Looking at your function again: 

By convention identifiers in all caps are reserved for the pre-processor and have the potential to be stomped all over. Stop using new 

Callback function Notice we pass a pointer to its own QueInfo object as a parameter. Only this thread and the main thread can see this object. But all access is guarded. 

Thanks. But I can read the code. I don't need a comment to tell me that. Too many comments is a real problem. Because the code can become out of sync with the comments then what does the maintainer do? Does he believe the comments and fix the code to make them align with the comments. What happens if the code was changed because there was a subtle bug? Reserve comments to describe what you are trying to achieve. NOT how you are achieving it (the code is a description of how). The comments should by WHY (and potentially the goal). Why is this in the middle of the loop? 

noexcept You should mark the function as no except (it is noexcept) but it makes using it from other functions useful (like move constructor and move assignment). 

You can initialize it already zero'd out. For dynamic memory use for automatic arrays use So the above two can be combined into; 

I don't like the duality of Vector4. You have controlled it by allowing very limited access into the class. But with a slight tweak you can make the pointer representation the normal without worrying about leaking (any more than you do currently). 

Copy the whole stream to another stream. Seems like a bit of a waste. Then read a line at a time. Why not just read a line at a time from the original stream ? 

Use exceptions to kill an app. The function exits the app. But does not unwind the call stack. I am not sure how the functions affect the GPU if the resources are not freed. But I should not have to worry about that. If you throw an exception the stack is unwound (thus calling the destructor of all objects). If you have correctly used RAII then these destructors should release your resources. Thus placing your GPU back into a good state. 

Personally I would disable the copy semantics of the object. Conversely I would enable the move semantics of a socket object. So that it can be passed into functions etc. 

Your encrypt and decrypt is very limiting. This means you need to load the whole of your input into memory before you can start any operations. It would be nicer to have a stream/iterator like interface that allowed you simply read the data as needed. 

Where each call to getaline() means the result of the last call is leaked. Your line doe not contain a new line. So when you print it, it may be a good idea to add the new line back 

Here you are only getting l-values passed to push_back so you are copying the underlying elements. Why not try and get a move out of it. 

Yes it creates a new variable . will be destroyed(and its destructor called) when it goes out of scope (just like all variables are destroyed when they go out of scope). This is not a big deal. Personally I would have used Flex/Bison to implement the parser. 

You don't encapsulate your classes. Your whole interface is public. Thus you are now doomed to forever maintain this interface for eternity. Additionally it allows other people to accidentally modify your structure. Use the C++ class system to encapsulate your objects and at least protect your objects from accidental miss use. Your tree-traversal actually depends on the node object to track traversal. Now that's a bad design thing. You are basically binding yourself to an implementation and limiting the usability of your code. You should most defiantly look up the . 

Once you start writing to a stream the locale can not be changed (at least not consistently or in a guaranteed manor). But you get around that problem by using an alternative stream object and re-using the stream buffer. Thus allowing you to use a specific locale (good choice with "C"). But See note below. Small problem. The stream pushes the locale through to the stream buffer. So you have changed the state of the stream buffer which is not restored. Normally I would say do: 

There is a bug here You are using the wrong size: is the size of the words. But the track_letters array has a size of . 

I added unit tests to my code above (after adding most of @Deduplicator suggestions. This discovered a few more issues: The can fail leaving the object in an invalid state (Especially after fixing that spurious return). 

By making it a reference you don't need to check that where is NULL and it should always be used with a known object on the other end (). I would just have made this a reference as that implicitly conveys this requirement to the user and thus reduces the chances of misuse. 

Declare them as close to the point where you use them as possible (it makes reading the code easier). Also in C++ we sometimes (quite often) use the side affects of the constructor/destructor to do work. So you don't want those firing until you need them to fire. 

For this you will need a real parser. Regular expressions will just make this worse. Code Review using namespace Don't do this: 

This is better. Because if you change the so that it actually mutates the class it will generate a compiler error and thus prevent you from accidentally getting undefined behavior. But personally I prefer to add another helper method and thus remove all athe casting: 

Memory Management (Ownership Semantics) In modern C++ it is unusual to pass around RAW pointers. You would normally pass by reference or a smart pointer (or potentially a container). 

I really really hate when the comments (which are supposed to help) don't agree with the code. Because now you don't know which is correct (the code or the comments). 

Design. You use a mixture of int and doubles to represent monatary units. This is not a good idea. double (like all fixed with decimal representations, can not hold all values exactly). You should use an integer like type (where all values are represented exactly). If you are in America and using dollars and cents then I would use an integer but the balance of the account is held in cent. When you print it out you can then place the decimal point in the correct place. Code Review In: 

Might by worth setting this as a default. But the user should be able to change the default. Global variables are not a good idea: 

To go along with forwardign you probably want two versions of on that takes values by reference/value one that takes r-value references: 

Two things no note about variables. Using the automatic variables $_ and @_ make writing the code easier but (in my opinion) also can make the code harder to read and maintain (if overused). This is why perl has got the reputation of being a write once never read or understand again language. So please try and be explicit. Also all the variables you declare are global scope (you seem to have fixed this). I know for this short program it does not make any difference but a habit you should get into is declaring variables with . This scopes the variable to the current block (thus making them behave like variables in most other modern languages). By doing this you reduce problems associated with modifying global state accidentally and when you do drop you know it is on purpose and thus affecting the global version. Loading the whole array. Personally I would not have loaded the file into the array and parse it. I would have just read the file line by line and done the appropriate parsing: 

On startup a lot of the code is there to deal with making sure that threads don't start work until the SimpleWorkQueue object is correctly initialized. This work is not related to the work queue and should be factored out into its own class. The concept of a barrier was mentioned in the question comments. So here it is. A barrier is a thread concept that blocks all threads that until the specified number of threads have all arrived then they are all released simultaneously. This is often used for synchronization. A simple Barrier 

Don't define the copy constructor or assignment operator if nothing special needs to be done. Let the compiler generated version do the work for you. Unless you have something special in the destructor or have RAW pointer members this is unlikely. PS you should not have RAW pointer members either. 

This is better but it sort of defeats the purpose of using algorithms. If we had used the loop it would look like this: 

You create a shared pointer. Get the pointer value from the shared pointer. Destroy the shared pointer then return the pointer that was in the shared pointer. So now you have a pointer but no guarantee that the object it points at exists anymore (as you destroyed your copy of the shared pointer). There are a couple of operations on the master pointer that you don't support. 

It also makes reading types easier. As you read types from right to left and const always binds to the left (unless it is the first item then in binds right). 

It is better to use modern constructs like or as these object maintain there type information correctly. 

In main if you don't explicitly return the compiler inserts a return 0. Thus if there is no possibility of an error state for your program then don't return anything (this is an indication that it will always work). 

But what if you change the type of the internal container. Then you need to also go and change the type of the iterators. It is best to define the iterator types in terms of the container you are using. 

Note: Not all iterators support as an operator. Prefer to use Why erase all then put at the back? You break up space locality in the data if there are lots of pieces being allocated and deallocated in a random orders. 

When you loop over your containers you are using a C style (ie you are using an index). It is usually more conventionally to use an iterator style to index over a container (even a simple array). Thus if you ever choose to move to another style of container the code itself does not need to be changed. The iterator style makes the code container agnostic. Personally I don't think it is a big deal. In this limited context. 

I like to keep my unit test separate from my source. So I put all my unit tests in a sub directory under the source. The makefile detects its presence and forces a build of the unit tests if you try and install the code. The unit tests also automatically do code coverage and fail if you don't get an average of 85% across all the files: 

Methods that do not change the state of the class should be marked as const. That way the compiler has more information for debugging. Also if you must return a reference here then it should be a const reference as I would not expect you want the user to be able to change the size of the list via this value. I would expect: 

IO and timing do not work well. The IO operations are notoriously complex and using IO can change a lot. You want to avoid all IO operation during any timing phase and print the results out at the end after all timing information has been generated. Standard Idioms There are a couple standard idioms you should follow (as most code will be written like this). Rule of Five. You forgot a destructor. Though it will not affect your timmings you should probably write one just to be tidy. Copy and Swap. The copy assignment operator is usually written in terms of copy and swap. Swap on move. Movement is usually implemented as a swap operation. That way you don't have to explicitly tidy up your content at this point if you don't need to. But the moved from object will do the tidy up eventually if it needs to. Currently your move assignment will leak if used. Noexcept: The move operators should be marked as no except. This allows containers they are used within to perform certain operations that would not otherwise be allowed to maintain the strong exception guarantee. 

iterator Vs const_iterator There is a lot of repeated code here. There are a couple of ways to solve this but basically you can put put the common code into a single class and then the different code is done separately. Iterator creation. 

Since C++11 we have had move semantics. This (move) is never more expensive than a copy and usually much more efficient than a copy. None of your intermediate arrays are re-used. So there is no need to preserve the data in these intermediate containers. So you should be using move semantics when moving the objects internally. Use standard algorithms were they are available. 

Assume the user knows the pre-conditions You can check the operation and throw. But if the user has already checked and knows that the stack is not empty you are doing extra work. For example the user is popping all the values from the stack in a for loop check for in each iteration. Then your check becomes redundant extra work (because was already called). 

Bugs You have several race conditions: There is no guarantee that a worker stays joinable between these two calls. 

Now that we can see the interface clearly there are a couple of things you should watch for. Const correctness. A method that does not change the state of the object should be marked . This tells the compiler that calling this method does not change the object. 

When writing comments. DO NOT put a comment for each obvious line of code. The code describes itself I don't need you to tell me what the line of code does. I can actually read code (as can everybody that will read your code). When you write comments describe the algorithm that your code is trying to implement (preferably with a link to a static page that will never move (wikipidia) that not only describes the algorithm but what its trying to do (or put it in the comments at the top of a chunk of code). Describe WHY you are using the algorithm and what the final result will be. Code: 

This is still a static storage duration object. This means its initialization can happen after a call to . So you have to solve this problem first. So the instance variable needs to be wrapped in a function to make sure initialization of is guaranteed. If you are going to do that you may as well not dynamically create the object. How about this: