What does any of this prove? When the OP's code is optimized it results in a very nice benchmark, but it also requires a different set of work to add new types. Once we optimize everything, it comes down to what you want the best. Do you want one class that magically handles everything? A class you have to derive for each type you need? A single class with no additional references with a magic type applied to it? 

What happens when we're not going back to the main menu again from either of those methods? Now you have multiple places that you have to modify, and in a larger, production application that would mean very possible breakages. So we're going to eliminate responsibilities until each and every method only has one left. Let's start with : We can take the following block and extract it to a new method: 

You could consider trying to push the compiler to do more inlining on some of your smaller methods (it may be doing it already, but you can also coerce it). 

Same thing, so that gives us an estimate that we should be seeing ~35x improvement on execution time just from these optimizations. In reality it'll be less, a good conservative estimate is ~20x, just because of overhead and I'm not certain this is the course the JVM is taking. (It could have optimized something.) If the JVM did a good optimization, and not one for the special case of , then you're likely looking at 2-10x improvement, but that's still a lot of improvement. 

In this case, you have a lot of whitespace to the left of the conditions, usually in this case I just break the to a new line and then work from there. 

As the two of us discovered (thanks Maxim for starting this discussion) the method performs it's operation within a context, and will throw an on the last test-case I provided in this case. Wrapping the entire thing in an context does not result in a solution, as the local context in takes precedence. We could define a method that would do the summation inside an context, but that takes us out of vanilla-LINQ mode, and requires an additional dependency on a new method. (I literally want zero additional dependencies, I only want vanilla / naked LINQ.) Regarding: 

You're doing all wrong. I know you don't believe me, but you are. I've been working on a (very) long-term project (3+ years) with a 'settings' type system, and my solution was very bulky, but creates a lot less work later. I can't even tell where you plan on using in the class, what does it act as a seed for? Everything? You need to group things into categories so that you can create a separation of responsibilities (SRP), and keep things that are related together. The first thing I did is create a class that has the common settings systems in it: 

Those actions should be . Unless you absolutely have a need for mutability, you should try to favour immutability. It leaves you less vulnerable to problems with data validation, et al. 

Should there be a operator? If so, should it be ? Should there be an operator? If so, should it be ? Should the API include a constructor that allows one to pass a tuple of ? A proper definition might be: 

You should, ideally, create a dictionary and put each row in there, then select the row from the dictionary using LINQ, but I'm writing this entire answer outside of an IDE and it's been some time since I've done VB.NET. The same principle applies to and . Then, you should make one more method: which is similar to the follows: 

You have the tightest coupling of interfaces I have seen in my life. You are also restricting them in abnormal manners. For example, should not need to know about the . Instead, it should be worried about , which can worry about. This way, the coupling is reduced and things are coupled with appropriate interfaces/classes. You want to reduce your coupling to only couple around what needs to depend on what else. Things that are generic like shouldn't have to worry about more specific things. They should be, well, for the buzzword: generic. Think about it as "what happens if I need something else to draw?" If you have another class/interface that has to draw something, and you need to modify to count that in, then something is fishy. 

So, we've improved everything you've got going, but there's still one more improvement we can make: convert all our operations to a dictionary. What do I mean? Well I'll show you. 

This whole thing screams for adjustments. Since C# it constantly trying to become more functional (why? we have F# for that...) we should take those same functional paradigms and apply them. That first line in the method () should be the last. Define your functions before you use them like we would in F#. (Not sure if you have experience with it or not, but that's what is required.) Next: 

Pretty freaking simple. If we have a method, then we can do the transformation, if not then we have that exception. As a test, consider the following method in : 

Now we can build more test-cases pretty easily and functionally. Because takes a single parameter of a , we can pass the entire shape to it and then pass each portion of the tuple as individual parameters. 

You should be explicit with your constant types. I don't know if the compiler will always convert to a , you may be seeing slight performance impacts from that. So when you do , you should consider . 

Now the difference is that we create an that takes an and , then it calls itself, but it calculates the new first, and the new first, we could rewrite it as: 

Generally in .NET (especially C#) public members are . On a more important note: don't use strings for the . Instead, use an enum. 

Then, finally, we need to be able to return the array sections, one-by-one, to pass to our parsing. This uses and to be lazy (I'm a lazy dev, so I may-as-well write lazy code). 

Second, what are you using a new DB query for? Does not have our student already? Next, you can write one abstraction now that we have in a list instead of having to write an block for each combination. 

As the title explains, this is a series of extension methods that convert certain numeric types to and from byte-arrays, for certain actions which work better on byte-array types than numeric types. Any and all suggestions are welcome, I am also attaching the Unit Tests. 

This also throws a little C#6.0 in there: the string interpolation, the expression. We can also do the following for 

This was more confusing than it should have been, so we'll correct that as we get to tail-call recursion. 

(Sorry for the size, it was enormous at native resolution, feel free to click to view original.) In the image you can see that both "WO" icons are the same colour, but the two "G" icons are a different colour, this is because the "G" icons come from different email addresses and the "WO" icons come from the same one. So of course I wanted to write a system that could generate a similar thing, based upon "some string", it could generate a colour that would be mostly unique to that string. (I don't particularly care if multiple strings return the same colour, but a similar string should be substantially different.) This should be entirely predictable. Every single string should result in the exact same output every time. There should be no deviation (unless the underlying implementation of changes). For the solution of this I went purely LINQ / method calls, and I want to keep it that way. 

I'm just going to cover one point, single-responsibility principle (known in the trade as SRP). SRP dictates, pretty self-sufficiently, that each method should have one and only one responsibility. That responsibility could include multiple sub-parts, but the method itself should have one job to do. Your method has several, let's go over them: 

So here's what is interesting: we have , which represents what the result of the was, and all we're going to do is check , which tells us if the task failed () or succeeded (). From here, it's a matter of modifying and slightly: 

And clean it up a bit. First, remove the curly braces around the first two statements, you have no code specific to them so we can omit those braces. These statements will then go to the same indentation level. 

Output information regarding programme definition to user; Accept and process user input; Call appropriate method(s) based on user input; 

The method doesn't return a value for the which is entirely acceptable in an . (It could, for the most part, I would just have to count how many bytes are in the first row, but I'm too lazy to do that and it would then rewrite the binding for which I don't want.) Finally, the one bit I left out is the , which is below: