So you wanna be a master of Pokemon? Do you have the skills to make a Pokedex? The Pokedex is a piece of complicated machinery. As a result, this code review will be more focused on the conceptual approach; how your data relates to other data and the best ways to represent that data. It will not cover implementation details, such as whether the actual data is derived from text files, databases, is hardcoded, etc. Nor will it cover how best to organize the code in different files. So... here we go... There are quite a lot of things to think about when creating a Pokedex, even one as simple as what you've got going on. So first we'll take a look at design decisions. 1: Types There are (currently) eighteen types that a Pokemon can be. These types are well-defined and discrete; that is to say, there are no gradients between types and the set of available types do not change dynamically. As a result, types are best represented as an enum. 

You do a lot of mapping from parameters to arrays and vice versa, which you could simplify by storing an array of the parameter names and whether or not you want them trimmed, for example: 

If you want all your exceptions to follow this style, then you could have one parent Exception class, then make your application exceptions extend it, like so: 

There's a couple of issues with it, for start your nested if blocks are unnecessary: instead of manually checking and returning true or false, just return the result of those methods, like so: 

I have a array and a of a custom object and I'm needing to loop around and perform an operation on both but only as long as one of both is available, the original method is as follows: 

The expected behaviour changes depending on what it is I am doing, sometimes I want to see Login success when I user values that exist in the database and other times a single error on either the username/password or both. The behaviours that I expect occur. I wanted to know if there is a better way of doing what I currently am? 

I have created a test login page that, as most do, takes in two values from the user (username and password) and the processes it. For this I have opted to use jQuery and AJAX to pass the results to a separate page to be processed, checked and validated before allowing access. My main front end uses Twitter Bootstrap v3.3.5 and jQuery v1.11.3 (I know there are newer but it's what I am used to until I learn the newer one). The front end looks like this: 

Additionally, you have made and into optional parameters by making them auto-initialise to empty arrays, however you cannot have an statement without specifying at least one field and value, therefore instead of making them optional array parameters, you should use type hinting to ensure they are arrays, and then check to make sure that the arguments are correct before you send the query off to the server, something like this: 

There's a few changes I'd suggest to insert, firstly as the second parameter has to be an array, you can use type hinting to indicate this: 

So it sounds like they want it so you can add a mouse to the choir and it will only squeak, and a cat will only meow. Instead you have a single choir which randomly picks a sound to make and no distinct objects for the animals. I suspect they were wanting an Animal to make a single noise which is specified upfront in a more object-orientated way. Something like this at a minimum: 

This is working for me, but I wanted to know if there is a better way to do this? Info: This is used in this way: 

Currently I am only testing the method, and this works, but I wanted to know if there is a better way to do what I am doing? I know it is incomplete, but I need to know if this is right for the method Edit I have completed the class and tested, it works perfect, but it seems there has to be a better way to do the method and also the method. I have updated the code to show these changes For anyone who may want to know, here is how this is used: 

If number of lines is your primary concern, then really all we can do with this is merge your array creation lines, and use to create temporary arrays which you can loop around, like so: 

You can increase the readability and reduce the number of checks required in your if block by performing each of the four booleans you get at the start, then checking against them instead of performing it over and over as well as separating out the check then reveal logic into its own method, like so: 

The first thing that jumps out is all the Strings you have which are reused throughout, those need to be removed and ideally put into constants so you only have to change them in one place if you ever need to rename them: 

3: Evolution Most people know Pokemon can evolve. Many of these evolutions are linear (a Krabby can evolve into only a Kingler). But some have branched evolutions. Eevee, in Generation I, can evolve into Jolteon, Flareon or Vaporeon. So what to do? We could store the three pieces of evolution data three times for each Pokemon, even though Eevee is the only one in Gen I that will use more than one. I consider that to be wasteful. We could store evolution data in a vector. That's better, but there's a clever and simple solution: go backwards. No Pokemon can be evolved to from more than one base form. Let me repeat that: There are no two Pokemon that evolve into the same thing. So we can store our evolution data one per Pokemon and instead of the evolution data saying "This is what you need to do to get to the next stage and this is what the next stage is" it will say "This is how the previous stage got to this form and this is what the previous stage was". So what does the evolution data look like? Well, in Generation I there are three ways a Pokemon can evolve: Level up (at a certain level), Trade and Stone (with a certain stone). So we have method, data and form. This is what it may look like in code: 

And all functionality etc. works, but is this a good thing to do? Does it allow me greater control over the files that are included? Is there a better way to do this? 

I am using PHP to create a file structure in which to store XLSX files, for this I have created this class: 

I am creating a system for a client that loads information from an XML file and then parses the information where needed. For this, I have got this class: 

I am using PHP in order to create a custom wrapper for including files, for this I have written this class: 

I am attempting to create functions for getting an algorithm, hashing and un-hashing a string. As it stands, it works, and very well. But, I feel this is not secure enough and someone could easily break it! Can someone help me to improve this? Code: