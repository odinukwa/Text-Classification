Yes. This is what I am using, and what is recommended by Adafruit and supplied with SkPangs Raspberry Pi Starter Kits. 

In fact, the latest and best tools do not need to be built by yourself. On the Raspberry Pi Tool GitHub Repository you will find the and toolchains for cross-compiling software. I recommend using the toolchain, as that will compile for Hard Floating Point, which will result in a much faster system. 

Update: With the release of new hard float distributions boot time has been significantly reduced. In addition, Arch Arm Linux is now using instead of which starts processes in parallel and is considered to be much faster. As a result my Class 10 SD card now boots Arch to a login prompt in about 6-7 seconds. 

You can use a great tool called . This essentially treats the monitor connected to the remote device (the Raspberry Pi) as a second screen to you existing session as if you had two monitors connected. Install on both devices: 

I know that my USB powered Hard Drive doesn't work, but what is the minimum power requirement that the Raspberry Pi can fulfil for devices that connect via USB? 

It doesn't look as if alsa can find the device. Try manually inserting the module and running your script again. 

That tutorial is for the Squeeze version of Debian and you are using Wheezy. Distribution upgrades often result in some packages being renamed, and others removed from the repositories. In this case, those two packages have both been removed. It appears that they are now built into one of the other packages, so your inability to install them wont effect the build. Also note that the packages and have changed name to and respectively. Let me know if you have any more issues. 

I believe the problem is with Awesome WM. It is written mostly in Lua, which runs on the Lua Virtual Machine. Since there is an abstraction away from the hardware, performance must take a slight hit (citation needed). Even if you are using a distribution that supports Hard Float calculations, the Lua VM doesn't. So this will not improve performance as much as with other Window Managers. As I've said, you can attempt to improve what you can in Awesome by disabling any extra features such as transparency and by increasing the available RAM to the GPU (forget about swap), but perhaps you might want to look at other WMs. I use Xmonad, which is simple like Awesome and is also tiling, so you might get on well with that. It runs on Haskell I believe, and performance for me has been great. Sources: 

One of the problem about those online tutorials is that they are obsoleted and never bother to update it, and many tutorials were prior nodejs has the official binary package for ARM CPU which Raspberry Pi used. Please take a look at this link for the correct installation. Please noted that the link does not refer to the latest available binary, please visit the official download page of nodejs, and right click on ARMv7 for Raspberry Pi 2 and 3 (or ARMv6 for older Raspberry Pi) to copy the link and replace it with the commands that refer to the early version of nodejs. 

As per @joan's comment, I also decided to solder the DS12B18 and the pull up resistor direct to the back of Raspberry Pi header connector to make sure verify that the problem is not due to pure join to connectivity (see the picture), but I get the same result. 

You didn't provide the full program so it is hard to know what you are missing, but I think you probably setting up the client mix up the client/server relationship. 

You didn't mentioned what OS distro you are using. But if you are using Raspbian Stretch, RPi.GPIO is included in default installation of Python 2.7, but it does not seems to be included in Python 3.5 by default, you will probably have to install it either running: 

Both way you described (either using a potentiometer as a voltage divider, or connecting a resistor between the contrast control pin (Vo) and ground) are valid configuration. The contrast of the LCD is determined by the voltage (VLCD) between the Vcc and Vo. When terminating the Vo with a resistor to the ground, the internal impedance between Vcc and Vo formed a voltage divider with the external resistor. 

According to the /boot/overlays/README, the would only needed if it is operated in 2-wire parasitic mode. My configuration is clearly not running in parasitic mode, but nevertheless, this seems to solved the problem, and I can get the temperature data consistently and correctly. Information abstracted from /boot/overlays/REAME 

Here is my explanation: The output you're seeing is normal. Jack is an audio server and the errors report that Jack is not installed. There's nothing wrong with this, will just use a different audio engine such as or . In your case it looks like it's using . The above command will just hide the output from you. 

The first boot doesn't need any interaction. The second boot will start and generate the keys. You'll have to figure out the IP by looking at your router or attempting to ping the Pi. You can log on over with the default credentials. The only issue here is that if the first boot script fails for any reason you won't know about it. I have a 20MB connection and it took around 10 minutes. 

Yes it is possible. But not with PoE. The board can be powered using the GPIO. Here is a pin diagram showing the pins for power at the top. 

is simply a section of memory on the processor where you can store whatever information you like; these are called general purpose registers. We write the location of the GPIO controller to this location so that we can reuse it later, as we would usually do using a variable in high level programming. I think the value 0x20200000 actually refers to the first memory location in the table on page 90. You'll notice that before we write to the register we increment it by 4, giving us (see table), the register that controls a few pins, including the one we want to write to. Does that help at all? 

Essentially all you have to do to create a start-up script is the following: Create a file here and make it executable: 

Select the , click the , select your username from the menu and close. After the next reboot you should be automatically logged in. 

The problem with using is that the variable we're trying to export does persist across to the root shell. I'm not really sure why. 

My first thought would be this is a firmware issue. Try updating the firmware using Hexxeh's tool, it appears to be the easiest way for Debian users to update (someone please correct me if I'm wrong). You can download the tool from his GitHub repository here. Arch Linux users should already have the latest firmware, as it is installed with a standard system update. 

Data communication are often serialised and transmit in instead of string. Bytes in python are indicated by the prefix in front of the data as you shown but you are trying to treat it as a as your if statement is trying to compare, you can confirm that the return data are indeed in bytes by by running: 

This will create a web server serving HTTP on your local network at $URL$ (i.e. $URL$ You will need to install (and learn) Flask for python web development. The simplest flask python code that addressed your question of serving the sensor data to a web page would be: 

It will make more sense to setup "IP and Mac binding" on your router in your case for whatever reason you'd want to run multiple OS. The procedure varies from router to router, but all you need is the MAC address of RPi eth0 or RPi wlan0 MAC address. run to find out the MAC address, for RPi built-in and when your RPi is connect to the network, the mac address has a prefix of . No, you can't map more than 1 IP for the same MAC. 

mariadb by defaults uses UNIX_SOCKET plugin to authenticate user root. $URL$ It works by retrieving uid of the process that has connected to the socket and allowing to connect to the MariaDB account with the corresponding user name. In another word, if you are running your RPi as user, when you run 

I'm not sure this will work but I would try to add in the configuration on Pi zero which basically telling the Pi to add interfaces that you want brought up at boot time. If this is not working, maybe sharing your and on P3 would help to diagnostic. 

As per @Ghanima's suggestion, repost my updated as a separate answer. I've solved the problem by myself by changing the settings from 

You should create a user for your current user, and grant all the privileges to the user, this will allows you to access the database server without sudo. Remember to restart the service at shell: 

Where is the image file, and size is the size you want to enlarge (or shrink) the image. For example, if you want to extend the image by 2GB you would execute: 

I love my Pi, but it takes a considerable time to boot. If I want to use it as a Media Centre, it's quite important that it powers up quickly. Are there any steps I can take to improve boot performance? 

This is what comes by default in Arch. The setting sets the HDMI output to , which is apparently an unsupported resolution for my monitor. I believe that deleting the file sets the output to , which is . Clearly this is suboptimal, so I recommend experimenting to find the best value. 

Both accpet wildcards, so you should be able to use them to search for what you need. They will respond with a brief description of the results so that you can tell if it is the required package. For example: 

Since there are only a select few operating systems used on the Raspberry Pi I would suggest detecting which distribution is being used and handle software installation using that distros default package manager. This way you don't have to overcome any cross-distribution differences and software can be packaged as simple files. 

If that fails then you wont be able to use the USB device as a root partition without enabling the kernel modules for it. And for that you may need to compile your own kernel. If it suceeds then it should work fine with some tweaking of the boot parameters that the Pi uses: On an existing image, open , which can be found on the boot partition, and enter the following lines: 

Now change your command in to and the command should run as root without the user having to enter a password. 

There are several tools that will check integrity of a filesystem, and recurring errors will point to a SD card reaching the end of its lifetime. is a commonly used Linux application and you can use it to check a partition like this: 

First, WEP key (i.e. password) only allowed hexadecimal digits (i.e. 0 - 9, A - F) as password, therefore 'hello' is not a valid password, and maximum length for the password is 26 hexadecimal digits (or 104 bits). This is the reason that WEP is not very secure and seldom be used nowadays. If you still want to use WEP, here is what you need to do. Run your editor (example using nano) to modify the configuration of file: 

1) First since the release of Jessie, many tutorials or past posts of changing the became obsoleted. It was common in previous OS release to make changes directly to the for network configuration. When using Jessie, it will be necessary to make changes through . 2) As mentioned by @Millways, your configuration doesn't make sense. If your netmask is , then both of your routers are actually on the same network instead of what you said on two different networks. Therefore you should check both of your router configurations and provide more information so that others can help you. 3) Since we don't have sufficient information on how your two networks are configured. But in general, if you have two sub networks (e.g. and with an assumption of netmask of ), in order for each network to be able to communicate with the other, you need to setup a static route at router A with settings like (as per your example), and another static route at router B as . These can be done at routers. On the raspberry pi, you will need to setup your wlan0 ssid credentials to connect to router B. Hope this give you a general direction to work it out. 

The Relay module in your picture is what so called Relay shield specific designed for directly interfacing with micro controller such as Raspberry Pi or Arduino, the board already consists of the protection diode and switching transistor and active/disabled LED indicator. You can connect 5v, GND, and GPIO directly to VCC, GND, and IN at the shield. To test it out before you applying high voltage source to the Relay, connect an AAA battery (Positive) to the anode of LED, and the cathode of the LED to the NO of the Relay. The COM of the relay connect to the negative of the AAA battery. When you activate the GPIO through program, the COM and NO should formed a closed circuit between the LED and the AAA battery. The green LED on the Relay Shield should also turned on indicating that the GPIO pin is pulled to low.