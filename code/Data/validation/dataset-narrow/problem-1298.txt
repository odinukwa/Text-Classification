I'm trying to implement a settings menu component similar to that in Angry Birds - a button control that makes an options menu slide out of it and back into it when clicked on. I use to build the UI components: a in a to implement the button control, a to implement the options menu, and a to lay these out one on top of the other and at this moment I have the following behavior: 

You could change the color of the sprite batch when it is drawing the bullet, and then back to white, like this: 

I have decided to answer my own question to provide the solution I have come up with, in case someone may find it useful: I have extended the class and overridden the method of the new custom label: 

Any ideas how I can get the sliding out of and into effect on user clicks with libgdx? Similar to what Angry Birds provides. Maybe using the TweenEngine, actions, interpolations, combinations of these? Thanks in advance. 

Use an instance instead of because extends and can be added to a as an individual actor. Then split the content to be displayed on your screen into four pieces: one for the first bit of text, one for the first , one for the second bit of text, and the last for the second . Add these actors to different cells in the same row in the table: 

You can then play with various layout/spacing/sizing effects in the table as you see fit for your case. Just type in on the method and then hit to see what functionality it provides. You might also want to check out the following link which provides a pretty nice description of the : TableLayout. Hope this helps. 

Then, in your scene2d update method, you keep polling the task execution state, and then, when it's finished, get the result data and do something with it, in your case, update the scene2d actors: 

Explaining the code above: You first iterate through all the bullets you currently have. Then, depending in which direction you are shooting, you need to check the bullet position, relative to some certain position close to the starting position of rendering your bullet, so you know when to tell the sprite batch it is time to tint the bullet texture color to yellow. The ">" and "<" checks are meant to cover the possibilities of shooting in the right and up directions and in the left and down directions respectively, depending on your implementation. You then set the batch color to YELLOW, so this will tint the rendering of the bullet texture. After the bullet has been rendered, you restore the WHITE color of the batch, to let it render other stuff in normal way. Hope this works for you. If you have questions, please let me know. 

where is a protected field of the type in the AbstractFactoriesCollection class. Do the same for the Desktop project. So, you should now have two new classes: one in the Desktop project, and the other one in the Android project respectively: and . Since the object is of type, this means you should have an abstract factory class for your bezier curves logic in the core project. The abstract factory class should have an abstract method or something, that both of its concrete implementations should implement, and each of them should return that logic implementation that is found on the given platform: 

I have a texture atlas that is linked to my file. The atlas contains a region named "game-title". I would like to declare a object in the json file, to retrieve it later in my code via . I tried declaring it as follows, but it does not work - exception gets thrown - : 

you can store the (the object) as a public field in your class. And that's it. This is a lot of information, I was even thinking of writing an article on implementing the Abstract Factory pattern with libGDX on diifferent platforms :) I hope this helps. If there is any confusion caused by anything written above, please let me know and I will try to clear that up. Good luck! 

Remove the call from your method. You have a method, which is called when your app gets "hidden" when you press the home button, got an incoming call, etc. Place a call to the dispose method here. Put the call to the for example in the listener body of a button that's responsible for quitting the game, or catch the hit of the back button in Android and use it there. 

In the inner loop, shouldn't you be incrementing instead of ? You're doing twice, so at some point, your code is trying to access , which is causing your to get thrown. 

I also highly recommend that you watch dermetfan's (Robin S.) beginner tutorial on libGDX, he makes use of scene2d in his episodes and provides very nice explanation and illustration of how to work with it properly. Just watch them all, starting with this one Java Game Development (LibGDX) | Episode 1. Hope this helps you. 

What am I doing wrong here? What would be the correct way to do this? Is trying to declare a in such a way a correct thing to do, in the first place? Many thanks in advance for your feedback. 

When the user hits the button control for the first time, then the alpha of the table component is set to 1; When the user hits the button control the second time, then the alpha of the table component is set to 0; And so on. 

This way you'll make sure all your resources are disposed of correctly and that you are not attempting to dispose of something for a second time. Hope this helps. 

If you check your input event with s, the first triggered event will be processed, all the others will be ignored, I guess you can see the difference. Of course, you can play with your code to split this into two different input controllers, or even two different input processors. If you choose to use two different input processors at a time, you will have to set them both using an when setting the input processing handler on the game screen, like this: 

The body of the method is not the right place to call the method. Calling the latter will invoke the call of the former and so you end up with calling on your objects for the second time. Hint: Read the javadoc of the method to see exactly what it does. What you should do is: 

Do I need to do anything other than setting the text, adding it to the as actor, and then updating the text elsewhere? The label displays its original text, though the text updating works fine. Thanks. 

Hope this helps. Just also remember that Google is your first best friend in situations when you don't understand stuff ;). 

The delta time is the time elapsed since rendering the last frame. Since the optimal number of frames rendered by the GPU is roughly 60 frames per second (the optimal frame rate for games), then, in normal conditions, when the game does not have any performance issues, then the delta time will roughly be equal to 1/60. Simply googling for "libgdx delta" produces various results, the first of which is a link to the Screen interface API, which has javadoc description for the method. Here it is: 

I am implementing a game on both Desktop and Android. The Desktop version will just rely on the keyboard to handle the user input on the game screen, whilst the Android one will have to have a set of buttons placed in a bar at the bottom of the game screen, using a . Consequently, I am expecting the game world to take up the entire space available on the Desktop screen, whilst on Android it should expand to the entire width of the screen, and to the screen height minus the height of the buttons bar I've mentioned. What would be an appropriate approach of handling space sharing between the game world and the buttons bar? Thank you. 

I display a on the screen, update its text and the font is updated dynamically on the screen as well. I seem to fail to do the same with a scene2d added as actor to a . The and methods are being called in the method. My code basically looks as follows: 

on Android, where and are concrete implementations of a collection of various factories you may need for different purposes (including that of running different code for your bezier curves logic on different platforms), when it comes to providing code specific to the platform you're expecting it to run on. So, in fact, the constructor looks like this: 

where is anything else you might need to provide here. Each of the concrete implementations of the specified above implements a method, where it instantiates all the factories used in your project. Example of such an implementation: 

The method comes from the class, which the class subclasses. It is usually used for stuff like collision detection, but not setting the size of your actors. In your case, you can go as simple as calling to have your table fill up the entire space in its parent (btw, are you adding it to a stage or something?) Otherwise, use the and methods to explicitly set size and position of your table inside its parent. You might also want to check out this tutorial on using tables in libGDX: TableLayout. Hope this helps. 

You can use an to run your Box2D logic. Its method returns a result of the type you indicate when parameterizing your . It looks like this: 

On Desktop, for example, in your method, you should check for all the expected input events at the same time, not just one per method call. So, if you want both move and look to be triggered, you should do something like this: 

The deltaTime is the amount of time which passes between drawing two consecutive frames. It is used for updating things on your screen that change in time, for example when moving your objects around, you would want to apply the deltaTime to the object's speed, in order to have a consistent movement across devices. When calculating playtime though, you should only use the system time, increase it, decrease it normally, without applying any delta to it. You would have to store your playTime value as a long, since you are going to add to it the value of TimeUtils.millis(). Just forget about the deltaTime in this case.