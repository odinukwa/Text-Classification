You can see the part in this picture. It is a ceramic capacitor. Most likely it is a decoupling capacitor which means it is used to help suppress voltage variations/spikes. Your Pi0 may crash under particular types of workload. It's hard to say how exactly since I don't think there is a published schematic for the Pi0. If it's not bothering you for your use cases, I would just leave it be. Soldering it on shouldn't be too hard, but you should practise on some scrapped electronics first. 

No, the A0/A1/A2 pins can be tied high/low individually, so you can have up to 8 on the MCP23017 on the same bus 

Although the pi has been enormously successful in terms of volume - the Foundation originally planned on about 10k units, so somewhere around that volume you probably could design your own. The processor on the pi was cost optimised and isn't really that great, but it does have a nifty GPU built in that you don't seem to care about (so why pay for that?). I don't think you'll be able to get the CPU/data sheets from Broadcom for just 10k units. The Foundation has some members that work for Broadcom and managed to get a great deal on the processors. Part of the attraction of the pi is that apart from a couple of minor variations - everyone is running the exact same hardware so it's easier for people who aren't experts to get help from people who are. So you want an ARM CPU with a bunch of RAM - some GPIO and 3G (probably via USB)? If your volumes are high enough you can probably make something around the same price of the pi, but the pi would be a crappy starting point. I'd have a look at the open source Beagle Bone Black instead 

Leaded solder and unleaded solder don't really like to mix. You can try a few iterations of adding leaded solder/wicking it off, but make sure you've got enough temperature to melt the lead free solder. Pulling the parts off with hot air is probably easiest. It would be better if you had a preheater for the PCB, but if you are patient, hot air can probably do the job. Mask off the area with kapton or Al-foil so you don't cook surrounding components too much. Practise with the hot air on some old motherboards or similar - the ground/power planes take a long time to warm up. Expect at least 3-5 minutes of hot air to slowly heat the board/part to avoid thermal shock. 

Yes you can do it. It will compile around the same speed as a Pentium 300. Many people would consider this "too much time compiling" 

Not a conventional relay, you'd have to use a very small relay (if you can find one with a 3.3V@16mA or less coil) to switch a larger one and then be careful that the back EMF didn't damage the GPIO pin. Much better idea to just use a transistor if it's just a single relay However it may be possible to find a solid state relay that's suitable. Although they tend to be more expensive than a transistor+conventional relay. 

This is a confusing situation, as you have shown by including the USB pinout in your question. Compounding the confusion is the use of the same colours that USB uses, but for completely different functions. There is a chip buried inside the USB plug that is doing the USB-UART conversion. There is no standard for what white/green means in this situation. There is also no standard that they even use white/green. You may improve your situation by making sure you buy the same part number from the same manufacturer every time. If you need to find out which is which, you can try connecting each wire to an LED first. Transmitting at 9600 baud will cause the LED on the TXD line to flash. 

I have installed 2012-07-15-wheezy-raspbian, and the i2c-dev module and i2c_bcm2708 are there and work with i2c-tools. How do I get the i2c-dev module etc. to load at bootup? 

Is there a way to tell whether the camera module is present without actually trying to record a video or take a photo? I thought maybe would show it up since the camera uses the , but it doesn't show anything on the bus 

You can see bootup messages by connecting to the UART on pin 14/15 of the GPIO port Here is how to connect it to one of the PL2303 UARTs that can be found on ebay for a few dollars. I didn't need to connect GND because I am powering the RPi from a USB port on the same computer. If you just want to see the boot messages, you'd only need the orange wire. If you want to log in once it boots, you'll need the purple wire too. If you need to connect GND, it should go to the pin to the left of the orange wire. 

The H.264 license is included. If you stick to H.264, you don't need an extra license. DVD playback is problematic, because you can buy the MPEG2 license, but it's not currently possible to buy a license for the DTS audio. You may be able to decode DTS audio satisfactorily in software on an overclocked RPi. For example an H.264 with 1536kb/s DTS audio I tried used 30-60% CPU @950MHz Stick to H.264 

Using the raspberry pi camera with , I find that sometimes the camera seems to lock up. exits, but the red LED stays on. Rebooting does not reset the camera (LED still stays on - sometimes the OS doesn't even start). I have to power cycle the pi to get the camera to work again. What can I try to fix this? 

3.96V is definitely way out of spec for a 3.3V regulator. I can't see the part number of the (U1) regulator on the schematic. It just calls it REG3v3 and says not to use an LDxxx there. There are numerous LDO regulator families it could be a member of. Are you able to read the part number off your board? It's possible they somehow managed to put a 4V part instead of a 3v3. 4.65V is very low to be the 5V supply for the pi. You probably need a better power supply. This won't be the cause of the 3.96V on J7 though. 

Is is relatively safe to bypass them on my Raspberry Pi so I can use a wider range of keyboards/wifi/harddrive with less problems? 

You can connect the anode of the LED to the +5v and pull the cathode to GND with the GPIO pin. This gives you 850 ohm for 2mA. 820 ohm should work fine too. 

It should be fine. You should connect the grounds together though. If the wires are really long, you may have problems with earth loops 

RPi isn't a great choice for your "brain". It's not particularly energy efficient, so you need to lug extra batteries around/fly for less time. You're probably better off to start with something like this video development platform (of course it's a lot more expensive than a RPi though) 

It should be fine. The backlight is the main power user, and it's typically only 20mA in addition to the 1mA that the LCD part uses. 

Since you're not using full UART handshaking, it's your responsibility to make sure you are clearing the serial buffer before it overflows. If you're not going to change the sender to use handshaking (RTS/CTS or XON/XOFF) or lower the baudrate. The only avenue left for you is to read from the buffer really really often. I'm not sure what size the hardware buffer is - but assuming 8 bytes, you'll need to be polling it at minimum of 115200/8 = 14400Hz. I don't think the scheduler will give you a guarantee of a slice every 70 microseconds 

The USB ports on rev 2.0 no longer have the silly poly fuses, but the power to the ports still goes via the main polyfuse. Increasing the powersupply isn't a great idea, because of this polyfuse and also because it exceeds the specs of the USB socket the PI uses for power. You should either use a powered hub (yuck) or splice the power cable to the drive (also yuck as this defeats the original purpose of the polyfuse) 

The CPU clock is derived from a crystal. Typically you can expect 10-20 parts per million for the clock accuracy (about 5-10 minutes per year) 

Now, you need to tell the server to look for this node, on the server edit /etc/munin/munin.conf. Add an entry for the RPi 

Use a desktop PC or another RPi for your 24" monitor. Then use it to display the desktop of the development RPi (lots of ways to do that, xterm/vnc/rdesktop/ssh) 

No. You should use pulldown resistors. The value shouldn't be critical (10k - 100k say) unless there are some other constraints (eg power consumption - unlikely since you are using a raspberry as the controller). 

Using ssh keys to log into your RPi is much more convenient than typing the password everytime. It's especially handy if you want to log in from automated scripts or use programs such as scp or rsync So how do I set up ssh keys to log into my RPi? 

to but I haven't found a value for that works yet (VGA8x8 is much worse, VGA8x16 is the default). Maybe the kernel can be rebuilt to include VGA16x32 

Some switching supplies need a minimum load to get good regulation. It probably won't damage the RPi, but you should confirm that the voltage is 5V without too much ripple if you can. 

Power Supply - better power supply seems to help Long HDMI cable - try shorter/better cable Marginal HDMI signal - try 

I'm not sure what type of realistic faults the polyfuse can save you from. Most short circuit conditions will cause damage way before the polyfuse reacts. After a fault, the polyfuse can take hours to full reset, so may have to be patient. I'm not sure what the usual voltage drop is, but yours seems higher than I'd expect is reasonable. (It's no so much about the drop as the ripple/spikes you would see on an oscilloscope) I've had no problems just shorting the polyfuse out (or feeding the 5V into the GPIO header), and I probably poke around with GPIOs and so on more than most people do. On the other hand getting the power in without the polyfuse in the way seems to reduce the number of unexplained crashes.