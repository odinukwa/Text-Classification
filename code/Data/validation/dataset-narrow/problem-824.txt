If you don't have exactly six items between slashes, then this pattern won't match, and you'll get a 404. You can make five new rewrite rules containing one through five variables, respectively, (or someone who's better at regex than I am might suggest a single rule to cover all six cases, but that's above most people's heads) or just handle this in your application instead. 

You installed the EPEL repository for CentOS 6, but you are actually running CentOS 7. Remove the RPM, and reinstall the correct RPM. Once you have done so, run to clean out any old metadata relating to the wrong version of EPEL. 

The obvious problem is that you have placed inside a block. Best practice is to place it in the block. This is one of the most common nginx misconfigurations. 

Put your code in a script (you ARE writing a script, right?) and grant the user access to the script. It'll probably end up looking something like this: 

While this is really a minor issue for me, since I could go live without IPv4 DNS updates (it's nice to be 100% dual stack) it's still annoying to not know what's going on here. Perhaps there are logs that I missed that would shed light on the situation? (Oh, and yes I turned it off and on again.) 

It looks like you actually are using firewalld. In this case is ignored, and firewalld is configured using . Just telling firewalld to add the services you want should be sufficient. 

I build virtual machine images for Azure using Hyper-V, of course. The primary thing to worry about is that you have to use a VHD disk rather than a VHDX disk. For Windows, you need to sysprep the image, and for Linux you need to install the Windows Azure agent in the guest. See also Microsoft's documentation on creating a Windows image for Azure and creating a Linux image for Azure 

This may be useful in more restricted environments since is likely to be installed with your base system or available in approved vendor repositories. 

You have set in your Postfix configuration. This directive requires that all clients have a client certificate issued by you to that specific client. Incoming SMTP connections to your server are then only allowed from preapproved hosts. This is plainly not what you want. You are trying to receive mail from the whole Internet, and you can't possibly issue client certificates to every SMTP server in the world. First, remove that directive, and try again. You might have other issues, but this is the one causing the immediate problem. 

A post on Microsoft's web site suggests that you can work around this problem by disabling query prefetching for the linked server. 

To resolve the problem for your own server, you can create a local SELinux policy module with . Feed the AVC to by standard input, something like this: 

You can't. This manual crash functionality is embedded in the PS/2 and USB keyboard drivers in Windows, and keystrokes originating from remote desktop connections never go anywhere near those drivers. Thus, you can only trigger this manual crash from a directly attached keyboard. 

Then run and . See generic(5) for more options on rewriting sender addresses and the ADDRESS REWRITING README for everything you ever wanted to know about address transformations. 

Use a different IP address for the hosts which should never answer on SSL, and ensure that nginx only listens on port 443 for the appropriate IP addresses. 

In this case, the first hostname is what the mail server identified itself as in its . The second hostname is the reverse DNS recorded at the time the connection was made. RFC 5321 section 4.4 explains the format of the Received: line, with a formal grammar. In your case, no reverse DNS was recorded. Since your IP address has a PTR record, this may be because they didn't look it up, or there was a temporary DNS failure. 

If this command fails, fix the problem before continuing. Go to single user mode. You need to be on the console for this. 

The Unix error 110 means "Connection timed out". The remote site never responded to the request. When I tried to reach 80.75.1.4, I also was not able to reach it. It appears from and that there is significant packet loss on the network after it enters the state of Iran. This is probably why the site is failing to respond. 

You're using a catch-all block to handle all of your subdomains. So, if you name your XML sitemap files using the actual subdomain name in the filename, then this gets very easy. For instance, you may create a file . Then you can load that file with a single with an : 

errno 12 does indeed mean , so you are running out of memory somehow. You should reduce your virtual machine's memory consumption or give it more memory. 

You have an SELinux issue. Your is being denied access to open a TCP socket. However, I can see in the current SELinux policy that this should be allowed. 

should not be an actual directory containing your files, but a symbolic link. This is the way capistrano does it: 

If you put postgresql on the SSD, it will start up faster, but since programs run in RAM (unless you're swapping) it won't make much difference while postgresql is running. (And if you're swapping, go buy some more RAM.) The same is true for any of your programs, as well as the operating system itself. 

Unfortunately, beginning with Windows Vista/2008, Microsoft disabled the ability for a single network interface to use both DHCP and static addresses at the same time. So you're left with workarounds. One sure-fire way to do this is to put a second NIC in the server. Configure one NIC with DHCP (to pick up a DHCP reservation and all of your DHCP options) and configure the second NIC with your other static IP addresses. 

Therefore, if the URL contains a query string, the path that nginx tries will be appended with a and will not match the file. The request will then pass to your application. 

Github will highlight scripts containing such a directive, as well as those with a .sh extension (and a few others). Your example script was identified correctly by github, but it was highlighted incorrectly. This suggests that you've somehow triggered a bug in their parser, linguist. This is something I would contact the linguist developers about. 

From the context, we can see that it simply means each unique installation of Windows Server, whether physical or virtual. 

You're using the wrong variable. You're trying to on the variable, which does not do what you say you want. This variable, as documented, contains the entire request line from the HTTP request. For instance: 

The only way you can do this, therefore, is to continue to set the ownership after the filesystem is mounted, e.g. in . 

KVM is just the hypervisor itself. It allows overcommitment without any artificial limit. The limits are provided by any management tools installed on top of KVM, such as OpenStack. 

To map a hostname to an IP address, you use an A record. It should go within the configuration for your domain (known as a zone). 

(See the RFC for complete details; again, it's much too long to reprint or even take significant excerpts from.) For a more general discussion of IPv6 transition security, see RFC 4942. 

Try using firewall rules to restrict IP address usage to the user assigned to them. For instance, let's say that the user bob is the only person who should use IP address 203.0.113.48. His user ID is 503. Then we will deny any other user ID to make outgoing connections using that IP address: 

Modern web browsers do not follow the usual rules for IPv6 preference, because doing so would cause very lengthy delays if the client has broken IPv6 connectivity. Instead they use an algorithm called Happy Eyeballs, (RFC 6555) which tries both IPv6 and IPv4 almost simultaneously, with a brief delay between them, and then uses whichever connection it receives the response from first, dropping the other one. This algorithm was meant to work around situations in which the client has broken IPv6 connectivity. When Happy Eyeballs is in use, it is quite normal to see both IPv6 and IPv4 connections from the same host to your server. 

This is the problem that SPF solves, and you can integrate it into Postfix with one of two SPF validating daemons for Postfix. The Python version is probably the best choice. The installation will vary a bit depending on your Linux distribution, but in general you'll do what's in Ubuntu's tutorial: