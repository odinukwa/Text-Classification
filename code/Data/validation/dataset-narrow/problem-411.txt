You should either if the action might not occur. Or, if you think your person (like me) is going to commit to drinking whatever is in that cup then you should always let them do it. 

As the stack has no elements, I'd expect the count to be 0, to return and the to enumerate no elements. I appreciate they're all symptoms of the same bug but a useful illustration none the less. You need to fix your enumerator so that it returns an empty enumerator when the stack is empty. 

You could also inject the into the classes constructor but as it is a static method and I don't know what the rest of the class looks like, I'll leave that point for now. 

You don't use the result so I can only assume this persists something somewhere - that's not obvious at all from the code. Parsing This sort of code: 

I really disagree with the view model saving itself - it reminds me of active record (which I've never really liked). It gets the job done but I think your code would work better if the class was just a wrapper around some data and you had another service to have the responsibility of saving the model. This service would almost certainly depend on both and . 

I've added in a commented out Route attribute just in case that floats your boat duck. I personally prefer attribute routing because I like to see the url in place. Especially because one of the people I work with is mad for clean urls, so you can do: 

Firstly, the biggest problem is that implements so your class should too as it holds a reference at the class level. 

Which is clearly incorrect. Your code is also needlessly complex - you should be able to do this with one iteration through the source array: 

I've modified your html to include the number of searches per month in a data attribute. I've also added a class to the elements that will be turned into counters. This allows the javascript to deal with any number of counters on a page. E.g. a counter would look like: 

Why don't you materialise from the collection (whatever that is) and then access the properties instead? 

I think it definitely makes sense to use an object hierarchy here. What's the difference between a black and a white pawn? Its colour! (which will affect which way it can move relative to the board). All pieces must have exactly one colour, and we have two to chose from: 

Then your parsing code can consume each logical bit at a time. As I mentioned in my comment, I'm fairly confident this is an implementation of the shunting yard algorith which you may find interesting to read up about. I never seem to have enough time, there's a lot I'd like to say but I'll limit myself in the interest of at least saying something: 

Note that should be because local variables are in C#. If you're using C# 6 you could take it further with string interpolation: 

I appreciate that the Regex might be more complicated than you're comfortable with but it simply says that I'm looking for 2 groups seperated by an sign. The label group and the value group. You can then access these by name in the match evaluator. The means match one or more of any character which is not a comma. Edit: You don't actually need the option - sorry, I modified your Regex and the first iteration had an extra set of around it. I'll leave it in the answer as it's something that's worth knowing about. 

On the whole, this feels like a cached value to me - there are probably existing constructs which would suit your needs better depending on what framework/type of app you're building. Rolling your own cache is hard. Remember, there are only 2 hard problems in programming: naming, cache invalidation and off by one errors. 

Although the code is untested and typed directly into this answer (so it might not be right) you should hopefully be able to see that we've eliminated all of those operations where we keep searching all of the items we've already added to the timeline instead just keep a list of end dates (which is all we need as we are going in order of start date). Note that I've also not eagerly evaluated the and have structured the code to avoid needing to detect the no items case. I've intentionally not done any formal big O analysis so please excuse the hand waving. Update I decided to see how much of an impact the changes I suggested would have. On 10,000 items that have to be scheduled across a minimum of 5 resources: My version: 2ms Original version: 4324ms I also tried it with 100,000 items that have to be scheduled across a minimum of 5 resources: My version: 44ms Original version: 438834ms (~7.3 minutes) Tests were averaged over 10 runs with a first warm up of each not measured. I also checked that the algorithms were returning identical results (which they were as far as I could tell). 

You have a lot of magic strings around the place: "Inspection", "Meta", "CodeInspectionSeverity_"... They should be well named constants. 

Then you just create an Action that does all the stuff you want on your tree - you keep SRP because that method (or lambda) should be broken up into different methods that do different things. e.g. 

Just a very quick note: you really don't want to be using for messages passed between different computers! If the other computer uses a different encoding your message will be garbage. Take a look at the msdn docs: 

You'll need other classes too. Like a with an (for storing items) and a (for storing money). Potentially, objects to pass into Shops/Wallets to change the amount of money etc. So to answer your question: the method length is the least of your worries, you need to break the problem up into smaller pieces and make each piece responsible for a single thing. 

As an aside, age of codebase is no excuse for it being poor. The codebase I work on is only a few years younger than yours and we don't have monstrous classes or functions that are hundreds of lines long. It's never too late to start refactoring ;) 

Include an access modifier (, etc.) in your class definitions. C# never uses snake_case. Classes should be PascalCase Why is the method called the same thing as a bool declared in the body? That implies one (or both) are named badly Why is status a string? Use an enum or bool () Why is it named in English? Be consistent with your language What is the point in calling it with ? You create a new closed connection and then do nothing with it. is better written as The final is redundant The class should be 

Remember not to abbreviate names. doesn't mean anything to anyone. I'd also suggest grouping by and converting to a string in your UI layer. I don't know if you need it, but it's much harder to localise if you include hard coded format strings all over the place. 

Okay, you're deep cloning the items (I would guess) - no indication of why and you've made me try to figure out what you're doing. 

I needed a priority queue so I used the first one that came up in Nuget for that search (OptimizedPriorityQueue) which provides the class that I use in the implementation: 

I have some bad news for you... According to MSDN only one thread can enter an upgradeable read lock: 

I haven't written raw ADO.Net code for several years so I apologise if the above is massively incorrect. You should explore a product like Entity Framework (full ORM) or Dapper (more lightweight) to simplify a lot of this repetitive code. 

Just looked at your event args and recommend you read this blog post by Eric Lippert. It has some pros and cons of what you're doing there. 

And it's really obvious what's happening without having to change file and look through the route table. I probably wouldn't do it on actions with obvious routes though (like index). You can read more about attribute routing here. 

If you're going to keep your SQL queries as part of your code, you should pull them out into named constants. You can also use a verbatim string literal to keep them nicely formatted: 

I think your best bet would be to teach about unit testing. For example you could do a really simple assertion to prove your solution works: 

Naming: Method names should contain a verb and describe exactly what they are doing. For example, look at . That sounds more like a type name to me, and I have no idea what the method will do by its name alone. and are much better. 

Name your constants! E.g. the double quote and the space. A single space is the most difficult thing to read in source code (in my experience). 

There is also the possibility of creating a constructor that takes a of item and probability for bulk population. You'll note that I like to use and also don't want to get into a holy war about it. 

I'll refer you to this excellent blog post on Coding Horror in regard to the name of your class. in general is never going to be a good name for a class. You should sort your usings alphabetically and get rid of any that aren't used. Visual Studio (or resharper) can both do that automatically for you (using 'organise usings' or 'clean up code' respectively). What is your base class? . I could argue that singletons are always 'eternal' - at least for the lifetime of the application... so the name is a bit off too. As already mentioned - you shouldn't normally use public fields. Properties are better for encapsulation as you can control who sets the value as well as who can read it. At the moment you're letting any consuming code update the values. Auto properties aren't even much more code: 

It's basically the same, but it looks a little clearer to me. If you don't want to use the builder, you can at least fully interpolate your strings: 

This takes the average run time from ~45ms to ~10ms on my machine (YMMV). I also think it's a more intuitive solution: 

I've removed your labels for the constructor parameters as I think it's fairly obvious without them. Cleaning it all up and including advice from other answers: 

Or name your constant. E.g. . Anyway, the code looks good - nice names, nice spacing, great formatting in general. I'm assuming isn't one of your own interfaces? So, on to some dangerous hand waving. I feel like you need to make the seperation between displying the buttons and wiring up the command a bit more obvious. I think the way you can achieve that is with the mediator pattern. You basically have a central hub that sends messages to the right things to do the right thing. All of your buttons could then do the same thing - send a message to the mediator. 

That's not true: "my.file.txt" is a perfectly valid filename - your code appears to incorrectly drop the file extension and changes the extension to ".file". That's a pretty big bug. You should use the methods available on the class e.g. GetFileNameWithoutExtension rather than using . 

I'm coming back to F# after a long break (2+ years) so I'm not going to suggest anything else as I'm still relearning! Edit: Actually... 

I'd think to myself, does this person know about the overload of that mirrors ? Do they know that line endings can be different on different operating systems? I'd much prefer to see here or another call. Cool, let's move on to the next line: 

The naming of the variable is terrible ( at best). The comment is, I assume, some sort of inside joke - either that or you keep a very odd shopping list. To be completely brutal, everything about this code screams "buggy, unprofessional, puerile". 

ListNode Though isn't a bad name - it could be better. Consider ( already exists in the BCL) Properties should be PascalCased and not use abbreviations, should be and should be . 

You wont have to search through the whole data table each time which should save a lot of time when the data table is large. However, you will use more memory. 

You have misunderstood what dependency injection is - what you have done is just use a parameter to set the length of the sequence which is great from a flexibility point of view. Dependency injection at its simplest level is a class having its dependencies injected into it by something higher up. So, you're writing the fizzbuzz out to Debug - that's a dependency but your class uses it directly. It would be better to have that injected in. In a non-unity world: 

But, delegates are hard to name when they're not used in an event handler... sounds like I can open anything. However, you add "Excel file" to the filter. I think you should remove the parameter and rename either the class or the method. e.g. or . would sound better to me as . 

EDIT: Sorry, it's been a year or more since I used the Enterprise Library I can't remember whether you need the @ at the start of the parameter name or not - it might be . EDIT 2: I remembered why I couldn't remember if you need the @ or not (if that makes sense). You do need the @ BUT, you should use the method to create the parameter in the format the current provider expects - for sql server this is an @ symbol before the parameter name. This is how you should do it: 

I've added comments but I think the code is pretty clear. I've also modified the code a fair bit as we support quite a few different ways of deciding where to split. You'll also notice that it's greedy - I.e. it tries to keep the string as long as possible. 

is a poor name IMO as it's a list (even if it only has one item). I think it should be pluralised: . There's no need to call which I think makes the intermediate variable pointless: