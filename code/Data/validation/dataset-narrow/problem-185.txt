Note that none of these have anything to do with BGP redundancy, which I believe is the real problem you're trying to solve. However, it should be quite possible to run VRRP on the provider side of your two Quagga hosts and configure the VRRP virtual IP as "your side" of your ISP-assigned /30 and use that to peer with your ISP. The failover time would likely be close to the same (if not just a hair faster than) the solution with Linux-HA below. With that said, I'd personally believe that the Linux-HA solution would be cleaner and simpler, but this also may depend on the topology. As for your options with BGP, there is an IETF draft for "multisesssion BGP" that introduces a new BGP capability code which aims to support multiple BGP sessions with the same peer over the same address, but this draft assumes that both of the sessions would be on the same device, however the draft is brand new and support for this is not likely to be in current revisions of Quagga. One other option is to use Linux-HA to set up a heartbeat cluster between your two boxes, and configure it as such so that if the primary router fails, the heartbeat will recognize this and turn up Quagga/BGPd/etc on the standby router when that happens. 

The provider could be using one of a handful of technologies to provide multipoint-to-multipoint connectivity for you, VPLS being one of them. It's also not clear from your question if you're actually getting a true multipoint-to-multipoint service, or if your provider is giving you just a bunch of point-to-point services, or a rooted multi-point service. MetroE providers (at least MEF-compliant ones) will typically advise you to shape into the UNI/EVC(s) for the best performance, but it's certainly not mandatory for you to do so because they'll likely be shaping on their ingress coming from you anyway. Depending on what services you've purchased from your provider, your typical bandwidth profile options are (it would be useful to get this information from your SLS/SLA): 

where X is the privilege level for your desired command set. EDIT: I should point out that this doesn't actually provide true user based command authorization, it only provides privilege level based authorization, because the commands themselves are only bound to one privilege level at a time, so it's effectively a router-wide change. It's intended to work in a hierarchical fashion; each privilege level can run the commands at that level as well as all levels below it. If you want true user based authorization, you need an AAA server of some kind (see my note below). You could technically also change the privilege level of the command to be one higher than the user's privilege level so they don't even have the option of running it: 

The TTL field itself in the IPv4 header is 1 byte, which leaves a maximum decimal value of 255 regardless of the vendor of the router. Pursuant to RFC 1812, the answer to your question is no. Every router is required to decrement the TTL value by 1 whenever it receives an IPv4 packet. You would receive ICMP "Time Exceeded" messages on the source host from which you are running the ping. More information on the TTL field can be found in the RFC. 

I'll go ahead and provide some more "in-depth" instructions on telling GNS3 to use a "remote hypervisor" (a dynamips instance listening on another machine). You can even use this setup with Amazon EC2 (or another utility computing provider). A setup with a utility computing provider would also be extremely useful for testing out topologies with a very large number of routers, to see how OSPF may behave at scale, etc. I've documented how to do this at my last job (but this was before GNS3 was so popular) and we used it successfully for numerous scale tests. This would also be ideal for folks that don't want to spend the money on a high-end server but can afford to spend a few dollars for a few hours of "server time" for GNS3 labs, without chewing up CPU cycles on their home machines. The following instructions assume your remote hypervisor is running Linux. Step One: Set up your Linux box. 

Same thing, different (older) branding. Normally for 802.1ad there's a C-TAG and an S-TAG. The C-TAG (customer tag) will have almost always have a value of 8100 set in its TPID (tag protocol identifier) field. The S-TAG (service tag - the tag on top) will have a separate set of fields (same as the C-TAG: PCP/DEI/TPID/VID bits) and its TPID should be 0x88a8 by the standard. A lot of vendors will let you set the value for the S-TAG TPID to something arbitrary (Brocade likes to recommend 9100 a lot - probably for compatibility reasons). Some vendors (Brocade also being one of them) will let you also set the C-TAG TPID but I can't think of any useful reason why someone would want to deviate from the norm of 8100. It's more common to want/need to change the S-TAG TPID value. 

Coincidentally (or maybe not?) this number is always the same as the number of prefixes that I am receiving from the peer () There's a couple reasons why this is really puzzling: 1) Like I said, there is no policy. This is my BGP/neighbor config: 

If you have access to config repositories, the best way to do this is to search through them all to find duplicate entries. Assuming you're on a *NIX host, you could do something like: 

If that still returns an error, the next step would be to just run a bulkwalk on the unit to see what OIDs are available, as the SNMP agent on the device may not export everything that's available in TRIPPLITE-MIB. 

Now you can see how an entry in the table is supposed to be indexed, and also the OIDs that make up the table. The first 3 entries are the indexes. Each entry in the table is going to have these 3 indexes - essentially ipNetToPhysicalIfIndex + ipNetToPhysicalNetAddressType + ipNetToPhysicalNetAddress. Then subsequently there are 5 "columns" in a row of this table: 

Removing previous answer as I misunderstood the question, and my previous answer was actually incorrect - MED is exchanged between peer ASN's but is not propagated beyond that (meaning it won't transit an AS to propagate to another AS). However it's still an optional attribute, so it's not required of an implementation to pass on the MED between eBGP/iBGP speakers. MED is typically only evaluated in the best path selection process if there are multiple paths coming from the same AS (relevant in your scenario). If you've got the same provider at both locations it's likely that they'd set a MED on all of the prefixes rather than a subset, and if you don't see that in your output, it's likely that they're not sending you MED's. However it's also a possibility that they're only setting MEDs on aggregates that the provider actually owns rather than peer/customer prefixes. This doesn't mean that you can't set the MED yourself as part of your inbound policy for your iBGP routers to pay attention to however. Also consider sending MEDs to your provider to force them to do cold-potato routing towards you. Edit: to also include @MikePennington's good and relevant info and depending on your design, your IGP will also solve this problem for you without the need to worry about setting MEDs or LP values. To answer your question, you could create a route-map with a match clause that matches a given MED value, and then do . For this I'd recommend something like: