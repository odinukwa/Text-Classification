I have which declares a single method; the following classes implement : : represents code that assigns a value to a variable 

I am following good programming practice (I'm not new at Java but its been a while and I usually code in python so I am likely to miss idiomatic ways of doing things) My class design/structure is appropriate and (more importantly) easily extensible if I want to add more features somewhere down the line I'm handling the actual logic (tokenizing, parsing, building syntax trees, etc.) the correct way. My interpreter works right now for what it is supposed to do, but I want to make sure I am doing things the right way so that in the future it is easy for me to expand it. 

I have the following python code which implements a simple neural network (two inputs, one hidden layer with 2 neurons, and one output) with a sigmoid activation function to learn a XOR gate. The code runs fine (ie no syntax errors or runtime errors or anything) and I have it plotting error over time to visualize its progress. I have tested it piece by piece; I know the feedforward works correctly as I tried hardcoding in weights and feeding it through and it gave the expected results, and while I didn't have the patience to backpropagate errors for the entire network by hand, I worked out the errors on the output and one of the hidden layer nodes and got similar numbers to the code. However, when I try to train it on the 4 test cases I have cyclically, the network consistently converges to . I've tried changing various parameters (, , , etc.) but to no avail. I even tried replacing the function with for the activation but that didn't change the results either. I've used in some places to make the matrix/vector math cleaner. I would greatly appreciate any suggestions on how I can improve my code, as well as what could be causing my problem. 

Ok with all that routing question out of the way - I agree with mbanzon with basename being fine to check for internal directory structure to block people out... If you want extra security you can run a short alpha numeric check to make sure nothing funny is included. As for the white list - since this is a routing file and a static one a white list can also help speed things up as long as its minimal, one problem though with that is if you file system becomes extensive it maybe best to not have a whitelist at that point (you dont want your lookup to be too large to maintain and add. Side note: if your looking for interesting ideas symfony2 routing is pretty good (its being use at core with laravel). It is more extensive than your solution of course but still interesting to look at. 

I will apologize for the lack of formatting and using your code segments as straight example - but as I re-read your code I see my old self a whole lot and I don't consider myself any level near some of the coders here. However one important aspect to improvement is obviously trial and error and a lot of refactoring. So you asked about OOP going from procedural php within a single require I would assume your going into one right way which is using classes - however there is a lot of pitfalls in your code. The first would be that to effectively do OOP you should use SOLID design pattern. First there are plenty of ORM out there that does your PDO wrapper. One thing starters would like to do is to wrap a low level class (the PDO object) into a higher wrapper functional object - its not wrong to do so - but its been done over. In reality what you should do is not offer the user (ie you in this case) a simpler form of accessing data that you need while using the database. The database of your APP can change...what will you then? You will need to write a wrapper class again because your class is tightly coupled with PDO. Lets take a look at the database class 

When the program runs, it will load the player data and location data (knowing x and y from each section definition) and start the game. Finally, it sounds like you might want a decent IDE, I'd recommend starting with the community version of PyCharm from JetBrains. Hope this helps with your design and code. Good luck! 

Reviewing your design, you mention , however you have: - "name": "none", - "health": 100 These lend themselves to player actions and multiple players in a game. The health, for instance, where do you manage the "drink potion" and "being attacked" functionality? It seems like you need a class for the player and two methods, and - which means we also need a property for when (not real code): 

having them all send a sql string into a single function. That way, you separate the database functionality from the business logic of each activity. For and , three things. Personally, I don't use double underscores for functions, a single one is sufficient to advise other developers that the function is intended for private use. Secondly, the string building process, you should attempt to use list comprehension to build the strings rather than a loop, this will result in much simpler code (and no "last param won't have..."). Thirdly, both these functions are the same, and only differ in their use of a or . You should have both refer their details to another function with a parameter. Something like (not functional code, just a typed up demo for the concept): 

You should pass the body of the mail as an argument and it will do what you need. The body part should have been on the outside and independent of the mailing function. This way if you decide to expand this - you wont need to copy paste a third version 

I have a private function in PHP that takes a given URL string and just leave the Alpha or numeric and certain punctuation left. I need the stripping of string due to having it match against ElasticSearch and ElasticSearch doesn't take it too kindly for special characters when it comes to exact match. The following function so far is working fine. 

I'm currently using a make shift INSERT on DUPLICATE UPDATE function that relies on a DB raw query from eloquent. I'm looking to improve the quality of the code and the speed. Please take a look 

Can it be better? is there a lib that does this better? I've used Laravel Validation service where you can specify alpha_dash but this is not for validation but rather I need the left over to see if there is a match to the Database Storage for a search. 

Admittedly I actually wouldn't do the last line, purely because it's not clear coding, but it demonstrates the ternary and that you can utilise functions in such a fashion. The while loop is removed, the exception is removed, and the input isn't converted. An extra line is printed explaining what happens if any other key is pressed (you should trust your users will know if they hit the right key - don't over engineer it - plus also as they have to hit [ENTER] to complete the input, they have a chance to fix it, if they do actually press something other than intended). Hope this helps, Good Luck! * code is wrong: Not wrong per-say - but a failure to express the instructions in an easy to comprehend fashion. If I cannot read your code and understand what you're trying to do - then you've wasted time writing the code (obviously there are always exceptions to the rule and there are times when a comment is necessary). 

If you are working in PHP use a framework that has MVC such as Laravel(up and coming and popular), Symphony, Yii, Codeigniter(defunct), etc. Each of them will enable you to use some reuse mechanism. Laravel itself uses a template PHP called blade. There are several other template mechanism such as Twig that enables you to template your views to even add more granular way and cleaner. If its a single file system that you must what you are doing is fine because you are using require_once it enables you to call other files and you can modify that file and it will reflect any other files that references it. 

I will extend mulquin's short post. Sanitizing your POST will enable you to make sure there are no SQL injection. Since you are using PDO - you should use prepare() function reather than exec(). exec doesn't escape your query. (as shown in the link provided by mulquin) Furthermore - you are not checking if the email is indeed an email or not what happens if its not a real email address (ie the format is not john@doe.com) - you will be storing gebrish at this point. So a bit of validation so that not only spammers won't just enter anything. 

I am working on a project that involves me writing an interpreter for a small toy language in Java, and while I intend to build it into a fully featured programming language at some point, it is currently in its very early stages (I have only implemented parsing complex mathematical expressions and boolean expressions involving , , , and , as well as a very rudimentary way of storing values in variables). My code seems to be increasing in complexity very rapidly, and before I continue on to implementing statements, loops, and functions, I want to make sure that 

subclasses and implements the specific syntax of [math_expr] GT|LT|EQ [math_expr] which is not covered by : 

The codebase itself consists of 22 classes which is a ridiculous number to copy/paste into here, so I figured I'd just share the relevant/important ones and then provide a quick description of the others. If code from the other classes is relevant, I can edit this to include them. Without further ado, here is the tokenizer class (): 

because is the same as etc. When I run your code after making those changes, I do want to ask why you have the file "split" happening. When you perform that, (if I use the smaller example data on pastebin you linked to) I get the following structure as : 

I see quite a lot of repeating code, repeating the same activity: get request, build string, query string, return result. The Single Responsibility Principal can help to clarify your code here. As a suggestion, you might want to turn something like get_products (and similar) to: 

which is easier to work with. Anyway, hope these code suggestions help you to write better code and update the design of your code to make the solution work for all data sets. Good luck! 

I would narrow down your try:except to only the statement(s) which could throw the error. Having such a large chunk of code in a try:except block could result in many exceptions thrown, none of which would be caught as you're only looking for IOError. Also, for performance, you should build the statement and the data set from the loop, then throw the statement against as a single database call instead. Regarding construction, your code is just one huge blob. It's important that you refactor each operation into its own function, this saves on tracking down errors, and if you make changes in the future, your changes only affect one function. If the change is not liked by the rest of your code, it's easy to back out. Can you imagine if you made 5 or 10 changes in your program as it is right now, and then it stops working? Which change was the breaking change? How would you find out? Why did it break? etc. Also, I'm not talking just simple syntax errors, I'm also talking about logic errors or data errors. These can be hard to track down if you don't have any tests validating your code. Good luck! 

From a first pass over - all you are doing are if else without any throw or inspection as to what possible errors that the PDO might be tossing out. Thats bad because on production servers - I would assume that you won't be turning on error/warning reporting but will be logging them. Also as @Alex L mentioned - you are missing a IF statement that checks if $pdo == null then throw exception. However its better with a try/catch 

Too many variables - the majority of the time the need to hold onto the DB's credential inside the object is not necessary - it should be part of your configuration of the APP and invoked as such then passed inside to the DB object to initialize the connection - once that is done you don't need this info. If you change information then a new object should be created. Why? because image you do need to connect to two different DB (one for user, one for tracking as an example) - if you store your credential your stuck to this. Also as I can see from your constructor - your not even passing your credentials to it - its fixed from a global stand point. The majority of your class is just a smaller typing of what is already presented ie: query, then bind, then execute. Its a rehash of the system's PDO. Another flaw is your Single() function - it has the command - what happens if your query returns more than one result and you want to iterate it one at a time - you can't re-execute the query to grab the second row. fetch()'s purpose is to go fetch and iterate through the rows one by one. You can argue that you can use resultSet() to grab all then foreach but if you are returning 10K rows you will be in a heap of trouble. Next - lets touch a bit of the tracking class. One flaw is the getInstance. Singleton are bad for maintainability because you can't make more than one object of it and its hard to test it. Ideally - since all your functions are relying on the database - you should have passed it (aka injected) is part of your constructor and then call your functions which uses the DB. Its not like you will instantly use a different DB within the function because you are tightly coupled from it. Basically: your Track class is your repository, and your PDO is redundant because its just shorthanding the coding. thats my first pass through of your code. 

Then instead of at each iteration, just add to that set; this ensures that it is unique. Or if you want to print it right away, do something like this instead of the 

: Represents an expression that evaluates to a single value. This is an abstract class, and is subclassed by and which differ only in the operators implemented in the overridden method. 

UPDATE: I took the time and backpropagated the errors by hand for a couple of random initial configurations, and my results matched what the network calculates. Also, I ran it once on each test case and saw that the error for that test case improved marginally after the update, so I know my backprop and weight update steps are correct. Unfortunately, it still converges on bad values. Any ideas? 

is a tiny class I wrote to "box" variable types so that I don't have to know what kind of an it is, just that it has to be evaluated. I'm not sure that this is the best way to do it, but I couldn't think of anything else that maintains that level of abstraction. I'm also slightly uncomfortable with how complicated the class got, but it doesn't really fit into the because that deals with operators whose arguments are also s, whereas takes arguments. Finally, the method in my class currently just tries to evaluate a boolean expression and if it doesn't work it tries to get a math expression; the boolean expression class tries to parse a single boolean and if it doesn't work, it tries to find a comparison. I don't like this "guess and check" approach but I don't know how else to do it, because I can't just look ahead in the token stream as I wouldn't know how many tokens to look ahead. Any and all advice you can give me would be greatly appreciated. 

Several issues with your code which is causing you issues (this won't give you the final code but it will help you get there). Firstly, never hide issues by modifying the stack recursion, and never wrap operations in . The errors are there because you are doing operations the computer does not like (and you shouldn't be doing). As an analogy, you could drive sometimes on the wrong side of the road to get places faster - but you don't because it breaks convention. Next, update your code to be more python'ish. For example: 

Also, for your locations, having functionality and properties separated into tuples doesn't make sense, you'd need to create hundreds of tuples and track them all (how do you link them for the adventure? how does the user move between them?). It would be easier to create a base class of and or to inherit. The class would contain the logic of the user moving into and out of the location, Rooms would have additional functionality like light switches (and if they're on or off by default). For this, I'd use a feature map (a matrix containing a 's default properties) and make the process of loading them responsible for creating the objects (and adding certain items to a room). As this design is quite complex, I would suggest separating the location data from the code, possibly by using and storing the data into an file. Something like: