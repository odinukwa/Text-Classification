So, I just followed the steps on the tutorial you pointed to. I am running it on a Model B+ with a Raspberry Pi Camera attached. I found a few issues with it. 

Create a flag that you will use to indicate that recording has started (e.g. ) When you begin recording, set that flag (e.g. ). Now, you can change your test for GPIO18 being HIGH to : 

When you think of turning on (and off) a LED with GPIO pins you are thinking of the physical layer of the architecture. Home automation systems (and systems in general) make use of several layers. Each one doing a different job to bring all the functionality together as a system. A heavily simplified example of what happens is that all the endpoints (devices connected to lamps/door/windows) start up and register/advertise themselves and their capabilities and status (e.g. I'm and I can and , my ). The will also start listening for messages, and regularly reporting their status. Some 'control module' will then take your input from a UI, or a set of rules and change those events (, or ) into (protocol) messages. The endpoints will receive these messages and if it was for them it will interpret the message payload into some physical action (e.g. , will be interpreted by the device as set pin X to high). More detail and a better explanation can be found on the openHAB architecture page and it's worth reading a bit on the ISO systems architecture model . 

So, another option is to have (by default) all sensors at address 0x28 (all COM3 pins LOW) and then use an IO pin to drive the chosen sensors COM3 pin HIGH and do all your I2C for address 0x29. This would need 50 IO pins, so you'd still need something like 3* MCP23017 devices. 

You are talking about a reverse proxy. The apache docs explain it in detail here : $URL$ Essentially, you need enabled and then you can use the ProxyPass directive. Example (from the docs): 

Unfortunately I don't have the CO sensor to test, but... From the file it looks like you have to call before using the function. When you create the instance of the file descriptor (fd) and address (addr) are both set to -1 

I have a Pi Zero Wireless running Raspbian Jessie Lite (4.4.50+) with a pHAT DAC. I ran the automated install - 

The solution author is saying that he toggled the GPIO 8 line before and after packet received for the frame. He wrote this function to simplify it for himself (and added it to the file: 

It really depends on the size of the camera you want to move. For example I've had success moving a small webcam (plugged into the Raspberry Pi's USB port, with a relatively cheap (< £10) pre-assembled pan and tilt head driven by sg90 micro servos (included). For more of a 'CCTV style' camera, you will definitely want something beefier. 

I'm not sure what you mean by ? the device does not have a buffer holding multiple readings ... it just sends the latest sample when requested. If you want 1024 samples then (as you say) put the command in a loop. Not sure what you mean about timing not being guaranteed. Each command is independent and should get you a reading (the MCP3208 can sample at up to 100ks/s. This might help from the py-spidev library implementation : 

Okay, so it looks like there a number of issues with your code. I'm not sure it would even run. This line... 

Another option could be to use Wifi/Http as the 'bus'. There are many versions of the ESP8266 devices readily available (for a few dollars/punds) with varying numbers of IO pins. Even the basic ESP8266-01 had 2 IO pins, that can be used as I2C which is a common interface to inexpensive sensors (temperature, humidity, pressure, etc). Something like: 

I believe the is the storage on the Raspberry Pi itself, which Visual Studio maps when it deploys to the remote machine. I'm also not sure what error you mean - the penultimate line in your pasted output says: 

According to this the power required for the servo is around 200mA (but yours may be a different module, check the current requirements for your own model). So with 2 of them you'd need the L298 Motor driver modules' onboard 5V to be able to provide 400mA. Depending on the module it could be providing anything from 50mA to > 1A - check with regulator it uses and find the current it can provide. 

Bonus material As well as stacking the images to produce a composite (star trail), you can combine them into a movie. To do that you use from the package. Here's the command... 

Sounds like you are trying to measure the source voltage (rather than try to get a stable 5v to power your Raspberry Pi). As you know the Raspberry Pi does not have any analog input so you'll need an external device to do this - as you have already identified a MCP3008 is a good candidate. Now the question is how to you get convert the 12-18v down to something that can be used by the MCP3008. For that you can use a (and some Ohms Law): 

Then he called that function before and after line 34 (correct at commit dfce76f) in this file, like this 

Make sure you also reset the flag (to FALSE) when you stop recording. EDIT - After further clarification Sounds like there is no need for GPIO16 - you state you want to start recording when GPIO18 goes HIGH (the button is pressed) and keep recording until it then goes LOW again (you stop pressing the button).. Here is some code that should do: 

Note: The sets the SSH port to be used to 2222, rather than the standard 22 - SSHelper uses this port if there is no root access. But you may have to change it for your own needs. Also Note: The will need changing to whatever you set the device name to. Make sure you keep the .local as SSHelper advertises itself via Avahi/Bonjour, so no need for IP addresses, just use the device.local name. Also, Also Note: There are a number of rsync specific recommendations for SSHelper on this page. 

DP - DisplayPort The cheaper adaptors (in the £5 - £20 GBP range) are passive adaptors which are designed for DP output to HDMI input (the opposite to what you want/need). There are active adaptors (in the £50 - £100 GBP range) that do the HDMI output to DP input. These typically need or come with a power supply. You might want to try a HDMI to DVI cable if your monitor support DVI. 

Further, section 3.5.3 provides GUIDELINES FOR WRITING RUNTIME-CAPABLE OVERLAYS. Although it does state that the guidelines are poorly documented (but gives some tips). 

...is setting up channel 1 for 1Mhz (which should be fine), but later you are trying to read/write on channel 0 (which has not yet been setup...) 

You can use SSH, port forwarding, and dynamic dns to acomplish this. SSH This gives you a 'remote command line' from any other machine to your Raspberry Pi. Read more here : $URL$ Port Forwarding It is likely that your router will block incoming connections from other internet connected machines (outside your home/local network). So to allow thew connections to come in you'll likely have to configure your router to allow connections (either from a known set of IP addresses, or to a specific port - in the case of SSH that will be port 22). Essentially you'll need to tell the router that any requests it receives on port 22 should be handled by the Raspberry Pi so send those requests over to the Raspberry Pis IP address. Read more on this here : $URL$ Dynamic DNS Each time your router connects to the internet it gets an IP address, the address it gets usually changes semi regularly, so you cannot always be sure you should be using the same IP address. To get around this you use Dynamic DNS - this lets you configure a fully qualified domain name (FQDN, for example or ) and has your router (or Pi) update the domain name with the correct IP address regularly. Now, instead of have to SSH to a different IP address each time you just SSH to the fully qualified domain name. There are lots of tutorials on each of these, and in all there (because it's a common questions/request)