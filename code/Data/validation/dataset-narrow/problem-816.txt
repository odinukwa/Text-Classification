StartSSL offers free certs and are trusted by all browsers. Unfortunately they just got some form of compromise, so closed for business until they sort it out. I've been using them for my blog for almost 2 years now. 

Do you have more than one applicable certificate in the client's personal store? If there is more than one certificate, IE might not be able to choose the right certificate, so it won't send anything. Does the server require client auth when looking at the network sniff? When the issue is present, can you list the client certificate using certutil.exe? You can use certutil -v -user -store "my" and check for permissions/encryption test passing/other things that might look off. If there is something, you can try to find the root cause of it. 

SSL as already people pointed out is a protocol designed by Netscape in the past. At some point the IETF standards body decided to adopt the SSLv3 protocol as a standard one, so it got change very subtly and it was named TLSv1.0. So for most people, TLSv1.0 is almost equivalent to SSLv3. The reason people still call the family of protocols SSL is because of historical reasons - everyone is used to the name, so they keep on using it. It is quite possible for the VPN to be using TLS under the cover, but the marketing name still stays as SSL VPN. Since TLSv1.0, there have been two revisions of the standard and it is now at TLSv1.2, which while still compatible, has some significant changes. Because of the SSL/TLS design, both client and server can negotiate which version of the protocol they want to use, so clients using TLSv1.0 can still talk to servers implementing TLSv1.2 and vice versa. Considering the interoperability between all the versions of the protocol, there is no "making a switch", since they are the same family. It is a question of "do I need to use newer version?". As with any other area, the answer to this question will depend on whether the current version you are using has any limitations or not. Currently there are no problems with using SSLv3, but the majority of clients and servers out there work with TLSv1.0. I hope this clarifies the picture a bit. If not, let me know what is still confusing I will try to explain further. 

I have a number of VPN sites where the MTU is lower than standard (1500). I have had at least one site where fragmentation of packets has had an effect on the success of building an IPSEC tunnel. I am able to set the MTU on the equipment at the remote sites. However, at head office I wouldn't want to set the MTU to the lowest common denominator. Is there a way of setting an MTU lower for traffic destined to a specific IP address? Is fragmentation something I need to worry about for functioning VPN connections? Is it worth addressing this where I don't have problems? HQ equipment is an ASA 5510. Remote sites have ASA 5505. 

Microsoft provide their own Key Management Server for automatic product activation of Windows. Is this what you are asking about? 

Really you are asking how many different subnets might a given IP address belong to, if you don't know the subnet mask. This sounds an awful lot like a homework question. Anyway, the smallest possible subnet is /32 with a subnet mask of 255.255.255.255. The largest possible subnet is /1 with a subnet mask of 128.0.0.0. So there are 32 different possible subnet masks, but there are a different number of subnets possible for each mask. However, there are only a certain number of subnets for each size which a given IP address will be valid for. E.g. 1.2.3.4 is not a valid address in the subnet 254.254.254.0/24. A further complexity will be whether you know that the IP address is assigned to a computer, and isn't therefore a subnet address or broadcast address, or one of the other restricted addresses - this would exclude some subnets that would otherwise be valid. 

I created a script to do this using PowerShell. Comments appreciated, and if anyone has a better way, I'd really like to know. 

I don't have enough points to comment yet, but I'd like to add the tip of pulling some fishing lines through the conduits to help pull cables at a later date - in my experience, cables have a tendancy to get caught on the ridges in flexible conduit. Being able to tie a new cable to some fishing line, then go to the other end of the conduit and pull the cable through is a big time saver. When you pull a new cable, tie some fishing line to that, so it leaves a new line for the next cable, and so on. 

Fire up network sniffer and capture the traffic from the browser to the servers. It will show you what is attempted to be loaded over HTTP vs HTTPS. The browser might be misleading and the network traffic is after all the authoritative source of data for the browser. Alternatively, you can provide the URL if the site is public. 

If you are getting errors trying to resolve the DNS name and the WINS server is not returning proper responses (which what the SMB_NETLOGON packets are), this means that your Win7 machine will not be able to discover a domain controller to talk to. This is inline with the error message you are getting. To help you troubleshoot those types of errors, enable Netlogon logging by running "nltest /dbflag:2000ffff" and after reproducing the problem look at %windir%\debug\netlogon.log. You will see the machine trying to locate a domain controller and what the errors it is getting are. Once you fix those, it should work fine. Since you mentioned that the WINS server is supplied by the university, is it actually reachable from the VM? Likely you can't do NetBIOS name resolution because your WINS server is unreachable and your DNS configuration is busted (the error in step 2). 

What OS version is this? I assume you are talking about LDAP over SSL when you say "accessing AD over SSL through Java". If you have 2k8 or above, you can put the LDAP certificate in the NTDS\MY store and it will ensure that LDAP picks that one versus certificates that match the machine in the LocalMachine\MY store. Take a look at $URL$ if you need details. 

Limiting the ciphersuites is not the right method, as they could be negotiated by SSLv3 client as well, which will result in SSLv3. The best way is to follow the article Robert pointed to ($URL$ and set the proper registry keys. Anything other than that is prone to errors. 

Have you tried looking at a network sniff to help diagnose the issue? One big difference between Win7 and XP is that 7 sends TLS extensions, which could cause some servers to not succeed in negotiation of SSL/TLS connection. Have you tried the software against different servers running different software? It could also be related to ciphersuites offered by the OS. Really, a network sniff can help you answer a ton of questions. If you manage to get one of the working case and failing case, post it publicly and I can help you look into it.