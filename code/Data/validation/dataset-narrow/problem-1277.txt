Take a look at this video tutorial that show off the trigger editor. Here are some good tutorials to get you started. The game itself was written in C/C++. 

You're gaining valuable insight as you work through the process. For any good business man that works on a project it's fairly easy to tear your project to pieces when analyzing what you did wrong. Figuring out want went right is a little harder. How I would approach a thorough postmortem Get All Perspectives in Writing Ask each team member to write a few pages on project observations. Instead of randomly laying a trail for them to fulfill I would ask exact questions that you want to know about. You can supplement this with a meeting, but I rather get someones sole attention without distraction. The most obvious questions would be 

Data drive your characters with LUA scripts or even XML files. When you interact with an NPC, grab the file that is attached to it, read it in, adjust for any game variables that may have been triggered, and product the valid response. The biggest gain from doing it this way is you can easily go in and manipulate the dialog, add new characters, etc. You also avoid mucking up your code base with special logic in handling each and every case. 

Good luck EDIT: I have missed the part where you wanted to make an "Animation", so if you want to move your character around you should use the physic vector3 functions that I mentioned before. In case you meant playing back a pre-made animation from some external 3d graphic program you should take the animation from the project view drag and drop it on the item that is supposed to be animated. The function is called Animation.Play 

There are plenty roles in Gamedev. business, each role splits at least into a dozen, if you want to work at some company as a game developer here are some roles you can pick: 

Most MMO's I played do not store messages for a longer period of time. Because that would most likely turn them into a GameCompany with a negative badge like the NSA. Unless, the players had direct access to their database. Runescape has the messages stored in cache, and it only is avaiable for a small ammount of time. I have never heard of anybody getting banned due to the fact that such data has been stored. If one should ever report another play for what he said. He has to be quick, until his 500~ line chat limit gets used up. After that time all his messages will be deleted. In the most crowdy place, where players shout out each other it is up to 10 seconds. The messages are always sent via server, and storing takes place at server not client. Otherwise, Player A who hacked into the client, would be able to manipulate the array responsible for chat and literally write that PLAYER B wrote something else. After a short while he could report that player for writing something and the other players cache might no longer hold such info. If you store the messages on the CLIENT, which has done by a chat portal GaduGadu.pl the users will lose the ability to check their chats on different PC's. The data generated by the user would be vulnerable to third persons. Mostly in public internet Cafes. Or at friends house who might seek vengeance on his former friend. If you store it on your server, it is impossible for Player B to access data of Player A and vice versa. Keep in mind that saying "can player B access that data" is a broad question. You can never tell if the data is safe, unless your server is offline! Here is an example. 

Big companies tend to create group atmospheres. Artists will hang out with artists. Programmers will hang out with programmers. Testers will probably hang out with support. You will have to make an effort to network (lunch, activities). There is no reason why you wouldn't be able to create good relationships with developers. 

Don't ignore details... Short fingers? Scars? Tattoos? Missing eyeball? One leg? Tearful body odor? You can now use those descriptors to assist in bringing your character a personality. If you're designing a combat game, you can take the fact that you know your character has scars to describe a hard-fought battle the character was in back during Vietnam. Now that we know that, maybe your character has PTSD which will influence certain game mechanics. If you're developing a puzzle game, maybe your character got those scars from a science experiment gone wrong. The goal is getting all of the possible creative juice out of you that describes every single detail that you possible can about this character. Give your other designers all of the information that they could possibly need to fit your character into the game world. If an Artist is modeling your character they can simply look at your descriptors and recognize the look. They can read a short bio and realize that this guy is a thug or an innocent/clumsy scientist. If a musician needs to compose a piece that focuses on your character, they can discern the mood they need from reading a short bio. 

The market would be reset every few space travels. With various commodities added randomly. In the top left corner of the map. There has been the most remote station Talidor. Lets say, it has been the only place where you can buy the "Talidor Tonic", it's price would be approx 2k in that station. The approximation would be completely random (I think FishLabs made it +-7% of the initial item value) to give the player a feeling of reality. The Tonic's price is highest in the other corner of the galaxy on Ni'mrodd 9 solar systems away. Where the price would be much higher, Lets say, for instance 190% of the initial cost making you earn 1800 credits from each Tonic you sell. If I were to set up that system I would make one, or more "production" sites, and the further you travel the more +X percents you will get to the items value. Talidor: 2000; Ginouya: 2200; Eanya: 2400; (...) Nimrodd/Meenkk: 3800 If you feel strong, you can also make more "production sites" which would change the items value using the simple arithmetic mean, using the same method as before "The more times you have to travel, the more the price will rise". All the values, along with the % the item will rise every time you move up the map can be reset every few travels. 

This is a team effort. If people are playing the blame game you might want to look for some other company to work with. With code bases being hundreds of thousands lines of code no tester is going to find all of the bugs. That's just not realistic. 

Fail Early, Fail Often Well, it is pretty hard to 'fail early' when your project is out of the door. Hopefully the feedback you gain from the above will shed light on processes that may have been pretty dark to you. There are problems that you will run against that will sting pretty bad. It'll be pretty difficult to just forget those. To make sure that you don't forget the problem areas it could be handy to write a 'Core Value' type list that you keep at arms reach. Keep them available for others to see and for you to see. When the your next project starts I might be inclined to bring some of these to the table to get other people's perspectives. If you have new eyes on the project you might get feedback that could shed new light on solving a particular issue. As long as you're aware, and you keep your problems in the light, you're bound to solve those issues. Write It Grab all of the writings and bring it all together. 

There is. I hope you know that through the advanced analytic options inside of the google adsense you can get a lot data. You could add a blank field across the onGUI funcion. For every touch, in the spot where the ad shows up send packet to your server. Just with location. Your server will know that someone clicked, while you will not have to worry about trolls that love changing their phone time. 

The easiest way for the developers (who tend to make games for commercial purpose) to make community patches is to give the players an SDK/API or whatever has been created strictly for the game. Of course a normal player will not have access to the 3D Studio Max, but the developer can provide something else, like the 3d item prospector, 3d world builder etc. Bethesda Softworks has provided the Skyrim community with the Skyrim Creation Kit which is a combinatin of all tools that were used to assamble the game, by level designers, game designers. $URL$ It has complete solutions for the AI system along with a complex NPC talk-action dialogue system. That way the players can do anything to the game, no source code is needed. As the matter of fact the Skyrim uses Havok Physics engine, and I am sure that distributing the expensive Havok Engine soucecode would make the Intel corporation rather unhappy. The community creates various patches that are shared over the net. Even though the company has no money from the additional player-made patches, it encourages players who play on a pirate game version, to buy one because it gives you access to the community mod patches along with the Creation Kit. Bethesda used some of the ideas/solutions provided by players in mod packages upon creation of the official game patch, which was free. And later they have used some of the mods in creating the official Skyrim expansions such as the "Dawnguard" or "Dragonborn" which cost about $15 each. It doesn't have to be opensource to encourage players to create using the SDK (Software Development Kit) you provide. Thus delivering source code isn't mandatory to create the game fully "modable". The best proof of that is Skyrim - 4+ large official patches and 15,000+ community made patches with 16+ patch combo's with major bug fixes done by enthusiasts. 

I have seen a couple of things in the past where I have seen a crowd majority buck their heads. One really sticks out in my mind: Little Challenge In a prior project, I leaned against the word 'casual' a little too much. I imagined people picking up this game and simply solving a simple feat and moving on. I didn't integrate any kind of losing mechanism per say, but left that for the player to determine. A 'did the player meet his/her expectation' type of situation. Judging from the feedback I received I see not giving a clear losing mechanism a mistake and a missed opportunity. It seemed that those players who wanted a way to lose actually enjoy knowing they've lost. I guess that may sound obvious, but I wasn't quite thinking about it that way. Reward a Player By nature humans are always trying to achieve that next best thing. I think there are some instincts at play there. At a young age our mind was a buzz when we got a new toy, for example. So in a game I imagine that a player who is given something along the way will improve the fun-factor. I assume this is exactly what Achievements are targeting - a direct reward. 

Dokkat, from my experience I can tell that Unity 3d Mecanim animation has a sophisticated system for all sorts of animations, with the Mecanim tools the ammount of code you MUST write is limited, but the sky's the limit. You have plenty options to choose from. $URL$ I have to note that it will only be usefull to use Unity animation, if you are going to use Unity as your native environment. You can't export those animations into Maya/Max etc. Edition of the Magic Sword colour can be done using the V4 in the Color class $URL$ Function "operator Color Colors can be implicitly converted to and from Vector4." 

I haven't gone deeply into server programming, but as the matter of fact, I was close to choosing the Unity+Photon Cloud engine solution for my MMORPG project. (HeroEngine won) The server side is done in this one in C# and one thing I strongly remember is the way things were explained in the tutorials. 

I have two methods; One uses a shader, the other one could use a GUI. Both will start the same: "Simplified" - Shader will give more realism, you can apply a distortion Like This one Fog Like Com. Boy stated, can be applied through GUI. Create a photo, with a partial transparency and use it as GUI on the entire camera view. For the photo you supplied I would try a brown colour. This has been used in a horror game called Drea D Out. If the player approached a ghost, the screen would turn foggy. Although it wasn't used under water it gave a similar effect :) You can always choose both methods, or make a shader that would change the colour. 

AI in MMOs are pretty ignorant. You're dealing with a world where you have the potential to reach millions of players all of varying skill. If AI in MMOs were really present you would see creatures constantly rush attack your healers, then go after the cloth wearers, etc. But we don't see that. We see a system that gives a mob x health and an attack rating depending on it's level, and a faction that it falls under (which makes it attack people whose faction differs). They run (sometimes) when health < y, and might trigger more mobs to help if condition x is met. The system might do a DX roll to see if the attack/spell hits or not, and goes from there. If one player is attacking a lot (raising threat), creatures turn to that player. So this system is very, very basic. There's not a way for a casual player to flip a 'casual' switch. From there we do get into some 'advanced' encounters that appeal to the hard-core crowd. But even these are not fully automated by AI -- they're scripted events. Once a high level guild takes a week and figures out how to kill the King of Dreams, then they can pass the encounter details to casual players. I remember back in EverQuest that you could start a conversation with NPCs and you could trigger different actions by saying certain things! Some linguistic AI. 

If you want to go "solo/indie" you will have to know a bit of everything; kind off like the game director who needs to know the role of every team member. Here are a few tips. If you would like to create 3D games you have to know about 3d modelling: You must know how to use 3d creation tools, what formats are there etc. For start I'd recommend Blender, due to the fact that it is light (120mb~~) and opensource. Or simply get the Autodesk 3d Studio Max or MAya. Those weight a bit more (3.2gb~) but have all the functions a 3d artist needs, they are supported by most game engines when it comes to 3d asset pipeline. You can download a free student version from www.students.autodesk.com . When it comes to learning I'd advice you to use the cg tutorials that are avaiable over the internet, for Blender Blendercookie.org , For anything else Digitaltutors.com - I used to learn on that website, they have thousands of hours of video tutorials on 3ds MAx/Maya/Zbrush/PhotoShop. I don't think that there is a better website, the only con I found about it is the fact that it costs $45 a month. //Keep in mind that if you would like to use Autodesk student software for commercial purposes you are not allowed to do that, and you will have to get a copy for about $4000 to be "legit". 

Introduction to 3D Game Programming With DirectX 9.0 (awesome) NVIDIA FX Composer (good for examples) There was a Shader X2 intro paper on ATI's website, but it's been removed... Ah! Found it here! 

Essentially any game related forum. It's not easy 'getting it out there.' It's quite time consuming. Aside from that, I would get active on $URL$ There is a ton of activity and you can post your game, mod or add-on. If you sign up on gamedev.net and pay a yearly fee one of the perks is listing your projects in their showcase - $URL$ If you're working on something really really slick, you might want to think about writing in to some of these websites and see if they would write a post / review your game. That could help quite a bit. 

And much more. I'd download it and play with some of the samples they have included that demos much of it's functionality. 

I have no experience in this domain, but I've seen something that may be useful. If you know, or anyone else knows about this feel free to elaborate on it. A buddy of mine pointed me to this when I was talking about creating a multiplayer web-based game. $URL$