The output displays two columns, the first the drive letter, and the second is the device ID displaying the GUID. To find the drive letter for a specific GUID try this: 

Windows does not report on the TcpExt properties. The reason is because Windows does not TOE by default. You can verify this by running and the offload column will likely be . In contrast, Linux uses TOE (TCP Offload Engine) by default and tools are built to query the TcpExt properties. The data you're wanting is completely dependent on the driver built for the OS to expose that data. There also needs to be a Windows provider created so you can query the data (could be a driver assembly). In windows open up the Device Manager and check out the advanced tab of the properties to the Network Adapter. You can see there what types of data are supported for collection in windows and whether or not it's enabled. I realize others have advised that Windows cannot do it by default and have recommended other tools (like pcap). Though I thought you'd want to know why. 

Source 1 and Source 2 All available cluster tests are grouped into 5 test categories. They are , , , , and . Only the category contains tests which will trigger a failover or impact performance (according to Microsoft that is). Additionally, most of these test categories are not intended to be executed after the cluster is certified and operational. Except for one that is... For Existing Clusters Microsoft designed tests for use on an existing cluster. In fact, these tests only run on existing clusters. To execute this test category run the following command: 

I kept digging and found a script online where someone wanted to find user email addresses for incidents. I figured they'd have to find the user first (which would give me the AffectedUser), and I was right. Here's the solution: 

Novell Identity Manager is also an option, though AD really is better suited for the task. Novell's solution requires an eDirectory Vault and the Novell Client on each system. Check this link if you're curious IDM Implementing Password Synchronization. IDM allows you to build drivers which synchronize passwords between eDirectory and Active Directory. If you propose this solution, you're exec will likely acquiesce to using AD as Novell has increased cost and headaches. 

Also, just an aside, but powershell does not require line terminators unless you're processing multiple commands on the same line in the shell. In short, you don't need to end every line with . 

As I need to be able to add and remove items from an array I need to cast it as an as opposed to the more common options (, , ). I also need to preset it with data, but the caller of the function needs the ability to change the preset as they desire. The preset in the block is required as another entity is looking for preset data. I've tried several variations, but here's the one that makes the most sense: 

It looks like you're trying to combine properties from multiple objects onto the output stream. I think the best way to accomplish your goal is to leverage calculated properties on your pipeline. However, in your code example is an undeclared variable which may be the leading cause to why your process isn't working. Though you've likely cherry picked what code to show us (generally a bad idea) so I'll assume you're trying to integrate the MBX DN with your dataset. 

In my test environment the network tests generated some warnings which triggered the conditional approval. I've googled quite a bit to find documentation which describes the logic behind the "Validate" vs "List" split but I haven't turned up anything. This leads to the question... Do list requests trigger a failover event? 

You need to create a credential object with the cmdlet, store it in a variable, and use it with your . 

When I complete automation projects or do automation training classes I'm always asked why I don't use . Microsoft claims is the same as except that it saves the output to the file. While that statement is literally correct, it's not a replacement for the tried and true code of: 

Looks to me like you're just running into trouble translating the VBS code into powershell. There are some subtle syntactic differences such as: 

This will effectively pause the script until the job completes. It also handles the possibility that your job was never created in the first place (in case of error or other such reason). Since your completion message line trails this code your completion message should be at the end of your log. 

An option that I know of would be to use Novell ZENworks as it supports the OSX environment. You can research more about it here: $URL$ Novell typically is less expensive than Microsoft solutions. But is also less reliable in my professional experience. This option may not be feasible as you're dealing with a relatively small client base (cost x users). 

In your case you're trying to equate one variable's contents to the object, it'll never match because only is -eq to . An empty string ("") is a object without a value. Which is why you want to use it with comparison operators (-eq, -lt, -ge) to evaluate other strings. 

If you're using the parameter to selectively choose your tests, there are two safe storage tests you can run. They are: 

Let me know if there's any parts of this you want me to explain. I'd like to call out my casting of to the . That basically tells the system to issue the command and move on. I think you were getting hosed when it was waiting for 50 operations to report a status of some kind. Also note the unique scoping needed inside the block. I also decided to make it so that it could accept pipeline input from . 

The change you're seeing is a trivial one. The value is being changed from null to an empty string. This is not uncommon for drivers, firmware, or interfaces (wmi, cim, custom applets) to make slight data changes this way. While I can't point to a specific line of code in your circumstance, I can tell you the most likely way this is occurring. It's not unheard of for a developer to set their code so that null variables are disallowed. To do any kind of work with the object it must be serialized and instantiated. When that's the case the property are assigned their values and a null is transformed into an empty. Believe it or not null and empty are totally different from a programmatic position. There should be no danger or adverse consequences from this. The failure's your seeing are most likely attributable to something as yet undiscovered. Perhaps the error messages or logs might help? Certainly post them if you have them. 

You'll notice I've noted your variable in special way. I've done this so Powershell know's for sure that $CertToList is a variable and to pull its contents into the body. Now, you can make the body however you want, you can do something like: 

You have two ways to solve your dilemma, one of which you may not know exists. As to your question, the loop isn't breaking because is a boolean. Boolean's are a specific data type in Powershell. What you want to compare to is as your variable is null unless the cmdlet returns a user object. The option which I recommend you use is that you specify the Domain Controller to the exchange cmdlet (likely ) with the parameter. You can get what Domain Controller a system is communicating with by using the following code: 

I think you're looking for the property of the mailbox. If you set this parameter to , the read status won't be displayed to senders who view delivery reports for messages they send to this user. To change the parameter run this: 

Erm..... First hit from google (search string mx record lookup) was: $URL$ For those who have never used it, it has a history button to show previous mx records for a given domain. 

My answer is for the "Is there a smarter/simpler way to do this?" part of your question. This script was successful in removing a go daddy cert for me 

When the domain was originally created there was a "god" account created. Find out what that was, its password, and you should be able to login to the DC hosting the global catalog. From there you should be able to undo what you did and give it time to propagate. If that fails there are some hacker techniques you can use, but it wouldn't be appropriate for me to relay that here. Contact a local security expert as they're usually up to speed on hacker techniques and can help you regain the domain. Of course, if this is just a few servers, and it's not critical, you might as well just wipe and start over. 

The split between Validation and List is intended to direct what result to expect. Validation tests are boolean and return pass/fail, yes/no, up/failed, etc. The List tests return statistical and operational data for review. Microsoft built the tests with Zero Downtime in mind. And for the most part that's true. There are tests which will trigger a failover and cause downtime. They are: 

PSCredential encrypts the string using that machines private key. The encrypted data has the same level of protection at rest as it does in motion. The level of encryption is dependent upon the certificate being used, so check your environment's certificate template for machine auto enrollment (if you use it). Alternatively you could just look at the certificate on the machine in question. Having said that, the string can easily be decrypted with a powershell one liner (using .Net not the built in cmdlets). All someone needs is access to the system and the file. I strongly recommend you look at other alternatives, like a locally hosted password management tool. 

$URL$ Just a quick update but there's currently a request with MSFT regarding this exact issue... $URL$ 

and an empty string ("") are two different data types to powershell. Replace any instance of with and you should be good. Almost all MS provided cmdlets are set to . I'd like to expand a bit on what is. Powershell is an OOP (Object Oriented Programming) shell with direct hooks into .Net. is a placeholder and an object in it's own right that represents nothing. Don't worry about fully understanding at this point, a lot of people (even some programmers) don't understand to the Nth degree. So why is this relevant now? Let me link you to THIS REFERENCE but I'll copy the relevant info here... 

You have two Environment Resource's (variables) which have the same Name parameter value. This is likely causing a conflict when the engine goes to create the environment variable. I recommend you change to something like this: 

I read over the MS page on this and it wasn't clear on whether the pre/post scripts can help control the CAU process. For reference: Advanced Options and Updating Run Profiles for CAU 

Powershell treats "\" as a reference to the root of whatever context your operating from. So if you're working from the standard provider (e.g. "c:\") "\" is the root of C:. If you're working from the certificate store provider (e.g. "cert:") then "\" is the location container for the user and machine cert stores. Another nuance to Powershell is the way it works with network resources. You typically experience greater success when operating from the file system provider (e.g. "filesystem:") than you do from the standard provider. You also have to specify the network location "\server\shareroot\etc". Your path variable needs to reflect either the mapped location (e.g. "Y:\Trunk\bin") or the network location (e.g. "\servername\folder\trunk\bin"). Hope this helps. 

I added a so that this code wasn't dangerous for the "copy\paste\run" folx. Now, you'll need to adapt the , , and add the variable, but the above template should have you going. 

It's typically bad juju to mix local GPO and domain GPO with servers (it should be one or the other, otherwise you run into "one off" issues). Following the principal of functional GPO's I'd recommend creating a GPO with the specific setting, attach it to your server OU, and create a filter to attach to the GPO. The filter could either be for the installed application (it's registry entries, install path, etc) or for the . The filter settings use WQL for your reference. 

Microsoft instructions advise to use "Services and Applications" but it's missing from the Failover Cluster Manager. For example, the documentation for Test the Failover of a Clustered Service or Application. Where is the "Services and Applications" option/section? 

To solve this I had to change my location from the CMSite provider drive to a filesystem provider drive and then initiate the BITS Transfer. Apparently the CMSite provider doesn't inherit this operation. 

The automatic distribution option in Exchange 2010 is performed by random selection. However, you do have some options to control which DB's are randomly selected. The following technet article will help you: $URL$ 

When using the New-JobTrigger cmdlet to create a startup trigger it's a good idea to specify a random delay period of 30 seconds or more to avoid conflicts at startup. This will also help ensure a greater chance of success for the job. 

Powershell error objects contain a lot of data but I can't seem to track down the time of occurrence for a given error. Using retrieves a lot of information but none that appears to be a date time of when the error was generated. It occurs to me this data would/should be part of the error object and I'm just not able to find the exact property. I could get a close approximation by using try/catch blocks and capturing time then, but I need as precise of a time stamp as is possible. Anyone know where/if the time of occurrence is stored in the $Error object? 

Summary When I call powershell returns the name of my cluster. For simplicity sake, lets call it . If I call it fails with an error. Error: 

Honestly, the short answer is that you need to switch to Intel nics. Broadcom has been trying to fix this problem for over a year and they still haven't licked it. Avoid Networking Issues Hyper V Virtual machines lose network connectivity when you use Broadcom That second link brings you to a Microsoft site which will link you out again to driver pages that supposedly fix this problem. Speaking from personal experience, for what that's worth, it didn't work. We ended up buying Intel Nics and switching them on maintenance. 

All of the tests listed above are part of the storage category. As such it's typically recommended that the storage tests be avoided on a server in production. To exclude these tests run the following command: