This leads to fewer string concatenation problems and is easier to read. Here is where the problems really start: 

I don't like this. I think if you are going to down the route of using then use it for all references that won't change, that includes: 

Firstly because of the scope of and also because loop indicies should be incremented inside a declaration unless you have a good reason not to. I would prefer the following construct as it show that I have two variables used in the loop, that the termination condition is and that I increment every iteration. 

This way they are outside of the running code and clearly constants. Similarly should (almost) always by an instance or class variable as having more than one is (almost) never useful. Use for outputting formatted messages: 

Here we do the to get the , we then out and to a . We then use the (often overlooked) to first the resulting and then to return if the joined is empty. The main work now becomes as simple as: 

I'm happy with this code - it's pretty clear and I'm not worried about its speed and memory usage as the file is small. Using the created I now need to process many tweets. Lets say I have 1GB of then in JSON format - from the live stream. What I need to do is: 

As runs in a separate , we need to consider visibility and atomicity of any variables used to communicate. So an seems the natural choice: 

So I am using a for-comprehension over the tweetsfile to each line in the file to its corresponding number. So my question is, how would you rewrite the above the maximise speed and minimise memory usage. Any other comments on the Python would be welcome too. I realise that I can use a single-producer -> multiple-consumer pattern to speed up the processing of the file, but I would for now like to stick with a single thread. 

Others have covered bad practices here, I am just going to demonstrate a Java 8 solution to the problem - as Java 8 is the current version of Java; I believe this is what should be written in modern Java: 

An Ace is to be put before a Two. Use the following order of Suites: Clubs, Diamonds, Hearts, Spades (the ordering used in the game Bridge). By that logic, Ace of Diamonds is greater than an Ace of Clubs. Using the ordering used in Bridge, Two of Diamonds is greater than Thee of Clubs. 

PS I am not suggesting as a function name. It just illustrates the concept. Avoid multiple statements in one line The line 

Create a base class called . Create sub-types , , and . Make sure has the necessary virtual member functions that are needed for supporting the high level functionality. Implement , , and in separate files. When the need for adding comes, it will be a very simple process. Create a class that captures the quantity part and the length unit part. Remove altogether. Make a regular class, not a class template. 

Remove the member variables and With a as the member variable, you have access to and . There is no need for storing redundant data. Argument types in the constructor Since it makes no sense to have negative values of or as inputs to the constructor, I would make then an unsigned integral type. 

Majority of the functions that operate with don't use in their interface. I would move them to be functions in namespace. It's not clear what the purpose of the member variable is. It's better to have a function that returns an empty rather than be committed to a member variable. I would change: 

My suggestions: Make a private, nested class is an implementation detail of . It's best to make it a private, nested class. does not follow the rule of three allocates memory in its constructor and deallocates the memory in the destructor. All such classes should follow The Rule of Three. You can get away with disregarding the rule of three if is a private, nested class. Even then, there is a possibility that you will run into problems if the implementations of any of the member functions of is not mindful of that fact. Provide function in You had to make a of in order to be able to access . Had you provided an function, that would have been necessary. Given the choices, I would recommend providing function(s) in . Fix the memory leak in You have: 

Iterators Kudos for correctly using an to from a while iterating. But, as described above, this is not the correct approach to implementing a Sieve. Programming to the I don't link this method declaration: 

Essentially we take each and we it that gives us a . I then you the method to append all present instances to a . If the `StringBuilder is empty simply append the current integer too. An alternative, not sure if it's better, is: 

So we check whether the game is over after reading a new value from the user. In the winning condition we call which interrupts the clock thread and causes it to exit. 

The other comments cover the code quite well, I have a few points to add. First, obviously this is a critical error: 

I have some code that calculates the "sentiment" of a Tweet. The task starts with an AFINN file, that is a tab-separated list of around 2500 key-value pairs. I read this into a using the following function: 

And yet you continue with your program knowing that it cannot possibly work. Either throw an exception (which will be reported to the user, and be ugly) or simply to exit and terminate the program: 

Scope It is generally good practice to scope variables in the minimum possible scope. I don't like this: 

You're close to a sieve, but you're missing some points. First and foremost your is incorrect - this should step though the range in steps of ; this very fact precludes the use of a . The usual approach uses a , on which you carry out the following steps: 

read a tweet file, with a JSON tweet on each line parse each tweet to a using extract the field from the tweet - giving the content of the tweet for each word in the content, check it if has a sentiment for each sentiment word in the tweet, calculate it's value (from the AFINN ) and sum across the tweet store that number 

What do you notice about the pairs 1. <-> 5. and 2. <-> 4.? There is a simpler solution to this problem than brute force... 

Are horrible! If you need to label a variable declaration with what that variable is, you have picked the wrong name. Further, if you are going to use inline comments, avoid the case where the comment makes the line so long that it's illegible.