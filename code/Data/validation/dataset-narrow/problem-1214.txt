This is not exactly what you asked, but the problem is NP-complete if k is not a constant but part of the input. This follows from the proof of Theorem 1 in van der Holst and de Pina [HP02], which says: given a planar graph G, distinct vertices s and t in G, and positive integers k and b, it is NP-complete to decide whether there are k pairwise internally vertex-disjoint paths between s and t each of length at most b. Note that the problem in the statement of Theorem 1 is different from yours in two respects. One difference is, as I mentioned, that k is given as part of the input. The other is that the problem in [HP02] is about paths with common endpoints instead of paths with a common source and different sinks. I do not know how to fix the first difference; the difference is so large that it is likely that we will need a completely different proof to fix k. But I know at least how to fix the second difference. The proof of Theorem 1 in [HP02] gives a reduction from 3SAT. This reduction has the following property: in the instance (G, s, t, k, b) constructed by the reduction, the degree of vertex t is always equal to k. Let t1, …, tk be the k neighbors of t. Then instead of asking whether there are k pairwise internally vertex-disjoint paths between s and t each of length at most b, we can equally ask whether there are pairwise vertex-disjoint-except-source paths P1, …, Pk such that each Pi is a path between s and ti of length at most b−1. [HP02] H. van der Holst and J. C. de Pina. Length-bounded disjoint paths in planar graphs. Discrete Applied Mathematics, 120(1–3):251–261, Aug. 2002. $URL$ 

This answer is based on the assumption that equivalence of two regexes is defined as they recognize the same language. It does not answer the current question. 

Now assume that P≠NP, and consider the case where S is infinite. If the k-restricted version is in P for every k, then by Schaefer’s theorem, every finite subset of S satisfies at least one of the six conditions above, and this means that the whole set S satisfies at least one of the six conditions. Does this mean that this CSP without the restriction on arity is also in P? Not yet. When S is infinite, we have to specify how each clause in the input formula is given. We assume that there is some surjective mapping from {0,1}* to S, which specifies the encoding of the relations in S. A Boolean CSP is specified by giving both S and this encoding function. Note that in each of cases 3, 4, 5, and 6 above, there is a natural way to represent relations satisfying the condition: a 2-CNF formula in case 3, a Horn-clause formula in case 4, and so on. Even if a relation is equivalent to (say) a 2-CNF formula, there is no a priori guarantee that its encoding gives an easy access to the 2-CNF formula which is equivalent to it. Now we say that a Boolean CSP is natural when its encoding function satisfies the following: 

If you want to restate the definition of MA in terms of PCP, you need another parameter for PCP, namely the proof length. MA is clearly the same as PCP with polynomial randomness, polynomial queries, and polynomial-length proofs. Usually the proof length in PCP is not restricted (that is, it is bounded only implicitly by randomness and queries), but this is insufficient to restate the definition of MA. If you are looking for some characterization of the form MA = PCP(q(n), r(n)), which is not just the restatement of the definition of MA, then I do not think that any such characterization is known. 

I do not know if your intent is to allow undirected edges in E and arcs in A to be parallel or not, but it does not matter in the end. In this answer, we assume that you do not allow edges and arcs to be parallel. Consider a special case where for each arc in A, A also contains the arc in the opposite direction. In this case, we can ignore the orientation of arcs and consider them to be undirected. We call edges in E black edges and edges in A red edges. Even under these two restrictions, the problem is NP-complete by a reduction from Max-2SAT. Let φ be a 2CNF formula in n variables $x_1,\dots,x_n$ with m clauses. Construct a graph G with 3n vertices $v_1,\dots,v_n,x_1,\dots,x_n,\bar{x}_1,\dots,\bar{x}_n$ as follows. G has 2n black edges: $(v_i,x_i)$ and $(v_i,\bar{x}_i)$ for i=1,…,n. G has $5\binom{n}{2}-m$ red edges. First, connect $v_i$ and $v_j$ for i≠j by a red edge. Next, for every distinct variables $x_i$ and $x_j$, consider four pairs of literals $(l,l')=(x_i,x_j),(x_i,\bar{x}_j),(\bar{x}_i,x_j),(\bar{x}_i,\bar{x}_j)$. Connect literals $l$ and $l'$ by a red edge if and only if clause $(\bar{l}\vee\bar{l}')$ does not appear in φ. It is clear that we only have to consider maximal matchings in black edges in order to minimize the number of red edges after contraction. It is also clear that every maximal matching M in black edges consists of n edges connecting $v_i$ to $l_i\in\{x_i,\bar{x}_i\}$ for i=1,…,n. Identify this maximal matching M with truth assignment $\{l_1,\dots,l_n\}$. It is easy to verify that after contracting M and removing parallel edges, the graph has exactly $4\binom{n}{2}-k$ red edges, where k is the number of clauses satisfied by this truth assignment. Therefore, minimizing the number of red edges after contracting a matching in black edges is equivalent to maximizing the number of satisfied clauses. 

This is not an answer. What follows is a simple proof that the construction for k=3 is indeed a counterexample. I think that the asker knows this proof, but I will post it anyway because the proof is nice and this might be useful when people consider the case of larger k. It is easy to verify that it is a shift-chain. Let’s show that it does not have Property B. In fact, the subhypergraph {(123), (145), (245), (345), (346), (347), (357), (367), (467), (567), (568), (569), (789)} already fails to satisfy Property B. To see this, suppose that this hypergraph has a 2-coloring and let ci be the color of the vertex i. Look at three hyperedges (145), (245), (345). If c4=c5, then all of 1, 2 and 3 must be the opposite color to c4, but this would give a monochromatic hyperedge (123). Therefore, it must be the case that c4≠c5. Similarly, 

One of the nice things about Turing machines is that they work on strings instead of natural numbers or lambda terms, because the input and the output of many problems can be naturally formulated as strings. I do not know if this counts as a “historical” reason or not, though. 

Hardness Following your comment on the question, we will call a circuit where each output bit depends on at most k input bits a “NC0k circuit.” Using this term, your problem is coNP-complete in case of NC05 circuits. That is, the following problem is coNP-complete. Instance: A Boolean circuit C with n input bits and n output bits where each output bit depends on at most five input bits. Question: Is the mapping from {0,1}n to itself computed by C bijective? As Kaveh commented, it is clearly in coNP, even without the bound on the number of input bits on which each output bit depends. To prove the coNP-hardness, we will reduce 3SAT to the complement of the current problem. The key idea of the reduction is the same as the one used in the paper [Dur94] by Durand, which I mentioned in a comment on the question, but the whole reduction is much simpler in our case. Given a 3CNF formula φ with n variables and m clauses, we construct a Boolean circuit C with (n+m) input bits and (n+m) output bits as follows. We label the input bits as x1, …, xn, y1, …, ym, and the output bits as x′1, …, x′n, z1, …, zm. We consider that the input bits x1, …, xn specify a truth assignment to the n variables in φ. 

I think that the answer is the affirmative. Maybe there is a simpler proof, but here is a sketch of a proof which uses linear algebra. Like domotorp, we will view a configuration of an n-state XOR automaton as a vector in V=GF(2)n. Let L be a finite language over an alphabet Σ={1, …, k}, and consider an XOR automaton for L with the minimum number of states. Let n be the number of states. We assume that the states are labeled 1, …, n, and state 1 is the initial state. First we set up the notation. Let v0 = (1, 0, …, 0)T ∈ V be the elementary vector corresponding to the initial state, and let s be the row vector whose ith entry is 1 if and only if state i is an accepting state. The subspace R = {v: sv=0} of V corresponds to the configuration vectors that are rejected. For each a∈Σ, let Aa be the n×n matrix over GF(2) which represents the transition caused by letter a. For example, the configuration vector after reading the input string ab is AbAav0. For a string σ=a1…at, we denote the product Aat…Aa1 by M(σ). Let S = {A1, …, Ak}. A subspace W of V is said to be S-invariant when AW ⊆ W for every A∈S. In our context, this means that once the configuration vector goes in W, there is no way out of W by reading more letters. Because this XOR automaton has the minimum number of states, we have the following properties. 

Let me supplement David’s nice NP-completeness proof by adding a reference to the special case asked by Jukka in a comment on the question. If the graph is the complete graph and the edge weights are restricted to ±1, the problem is equivalent to the NP-complete problem known as Cluster Editing. Cluster Editing is the following problem introduced by Shamir, Sharan and Tsur [SST04]. Here, a cluster graph is a graph which is a union of vertex-disjoint cliques and an edit is the addition or the removal of one edge. Cluster Editing Instance: A graph G=(V, E) and an integer k∈ℕ. Question: Is it possible to turn G into a cluster graph by at most k edits? Cluster Editing is NP-complete [SST04]. To see Cluster Editing is equivalent to the aforementioned special case of the current problem, let G=(V, E) be a graph. Let n=|V| and consider G as a subgraph of the complete graph Kn. In Kn, give the weight −1 to the edges in G and the weight +1 to the edges not in G. Then G can be turned into a cluster graph by at most k edits if and only if there exists a partition (S1, …, Sn) such that c(S1, …, Sn) ≥ $\binom{n}{2}$−|E|−k for this weighted complete graph Kn. [SST04] Ron Shamir, Roded Sharan and Dekel Tsur. Cluster graph modification problems. Discrete Applied Mathematics, 144(1–2):173–182, Nov. 2004. $URL$ 

Let’s call an assignment of vertex labels feasible if it satisfies all the inequality constraints, ignoring the condition on the number of distinct labels. Here is what I think is a proof that it is NP-complete to decide whether a given directed graph G=(V, E) with integer (possibly negative) edge weights has a feasible assignment of labels which uses at most k distinct labels, for k=|V|/2. We construct a reduction from the following NP-complete problem [WY92]. Equal Subset Sum Instance: A finite set S of positive integers. Question: Do there exist two disjoint nonempty subsets S1 and S2 of S whose sums are equal to each other? Let S={a1, …, an} be a set of positive integers, where n=|S|. Construct a directed graph G with 2n vertices u1, …, un, v1, …, vn by connecting ui and vi in both directions for each i. Give the weight ai to the edge (ui, vi) and −ai to the edge (vi, ui). Consider the instance (G, n) of the current problem. Note that an assignment l of labels is feasible if and only if for each i, it holds l(vi)=l(ui)+ai. From this, we can prove the following, establishing that the above transformation is a reduction from Equal Subset Sum to the current problem. Claim. G has a feasible assignment which uses at most n distinct labels if and only if there exist two disjoint nonempty subsets S1 and S2 of S whose sums are equal to each other. Proof. First observe that if we are given a feasible assignment l (which might use any number of distinct labels), we can construct a directed graph Hl from G by removing the edges with negative weights and merging vertices with equal labels. Note that Hl has exactly n edges whose weights are a1, …, an. Also, note that the number of vertices of Hl is equal to the number of distinct labels used in l. For the “only if” direction, given a feasible assignment l which uses at most n distinct labels, consider the directed graph Hl. Since Hl has at most n vertices and exactly n edges, Hl contains a cycle C ignoring the direction of edges. Let S1 be the set of weights of edges appearing in C in one direction, and S2 be the set of weights of edges appearing in C in the other direction. It is easy to see that the sum of S1 is equal to the sum of S2. For the “if” direction, fix S1 and S2 be the subsets of S satisfying the condition. Without loss of generality, assume that S1={a1, a2, …, as} and S2={as+1, as+2, …, as+t}, where s=|S1| and t=|S2|. Then we assign the following labels to the vertices of G: