Basically, you're maintaining the full text that will eventually be displayed, the current text that is being rendered, and the current index into the full text. is the delta time since the last update and is the time that has passed since the last time you moved to the next character in the string. When that time (here in seconds) has gone past half a second, append the character to the current text, increment to the next character, and reset the time. 

I'm using the latest version of Tiled Map Editor (0.9.1) to create isometric maps. I have objects that are larger than my tile size (64 x 32), so I am breaking them up into two tiles of the correct size. Below I show that the blue blocks are made of a top and a bottom (both of which are 64 x 32). You can also see that when I am placing these blocks side by side, there is some strange rendering overlap. Shouldn't the foreground be showing if it is rendered in the correct order? In that picture you can see 4 blocks stacked side by side with the problem, 2 blocks side by side with the problem, 1 block by itself without the problem, and 1 dissected block in its two components. Anyone know what's up? Note: this is the view from within the Tiled Map Editor itself, not from within my game. 

While Trevor's updated answer does reflect the current state of SDL2, you can also trap the mouse by creating your with the set. Be aware that I've run into some strange issues on Linux (presumably due to some X windowing quirk) where you cannot ever exit the window unless SDL_QUIT is called (even if another OS event steals the focus away). 

Here I simply scale down the Y value by a factor of 0.5. Problem And it works, kind of. There are some tiny 1px-2px gaps between some of the tiles when rendering. I think there's some precision loss somewhere, or I'm not understanding how to get these tiles to fit together perfectly. I'm not truncating or converting my values to non-decimal types until I absolutely have to (when I pass to the render method, which only takes integers). I'm not sure how to guarantee pixel perfect rendering precision when I'm rotating and scaling on a level of higher precision. Any advice? Do I need to supply for information? 

I see that you've posted your own solution for how you handled the particular question, but I want to post what I do with my SpriteSheet assets in case it helps you at all. Note that my answer does not define a ContentTypeWriter or ContentTypeReader because I did not need to use any special writing or reading rules. ContentSerializer knows how to serialize/deserialze at content build time / run time because I've used native types. I've supplied classes for the serialized .xnb file generated at content build time and the deserialized final product used at run time. These are the four classes involved: 

Establish a rate of movement in whatever units of measure you want (such as pixels per millisecond). Get the time since the last update that has passed (elapsed time). Establish the direction of movement (you're already doing that). 

I won't write the code for you, but I can put forth a conceptual path forward. Assuming your text is displayed in a string, it is possible to iterate through the character array that makes up that string. The goal here is to print each character individually (or however many at a time you want) separated by a delta time. When you think about it, this isn't really any different than animating a sprite. Instead of moving the index into a spritesheet, you're moving the index into a string and appending that character to the displayed string. So, for example: 

My goal is to display a tile map in isometric projection. This tile map has 25 tiles across and 25 tiles down. Each tile is 32x32. See below for how I'm accomplishing this. World Space 

Figured it out. It's due to the tile graphic extending beyond the tile. Update: I managed to work it out by playing with the tile layers. I placed foreground tiles in a layer below the background tiles. 

I want to emphasize that there are many ways to solve this and that you shouldn't fool yourself into believing that one size fits all with this problem. This is a little subjective and anecdotal from my own game, but here's how I view it. The world (level) and the beings that populate it (entities) are separate "things". That is, entities still exist even if the world doesn't and vice versa (ignoring realism for the sake of argument). That said, I tend to structure my object "ownership" in terms of a hierarchy of what populates what. For example, while the world doesn't own the player (or any other entity), the player does populate the world and is subject to its rules. A player (and other entities) in my game are managed by a third party. This third party extracts necessary data from both the level and the player when they need to interact (collisions, events, etc...). So really that was a long winded way of saying that another option is to do neither of your suggestions. 

I have a top down shooter wherein I generate a projectile on each mouse click at the player's position and translate it in a straight line until it reaches the edge of the screen. I also have powerups that enhance the player's current weapon by giving a multishot for a certain time span. Here's my problem. I'm not sure of how to place the projectiles relative to the player so that they are offset to the "left" and the "right" instead of directly on the player's position. In order words, I will need to: 

You'll see that the error message tells you exactly what is wrong. You are passing arguments that are invalid for that constructor. You need to pass a object as the first argument and a as the second argument. 

And finally, define the run time type with attributes to determine serialization at run time (an instance of this class is deserialized from .xnb file at run time): 

Here's how my classes look (condensed for clarity): First, define the deserialized instance of the SpriteSheetData: 

I'm having trouble calculating the offset vector because I need to take the current rotation of the player in to account as well. TL;DR: How do I find a point relative to the player's current position taking rotation of the current player in to account? My theory is that it involves calculating a circle around the player with a specific radius that determines the distance away from the player and placing the points somewhere on that circle. I can draw a picture if necessary. Right now I'm on my laptop so it isn't draw-friendly. 

My game is written using a entity system approach using Artemis Framework. Right know my collision detection is called from the Movement System but i'm wondering if it's a proper way to do collision detection using such an approach. Right know i'm thinking of a new system dedicated to collision detection that would proceed all the solid entities to check if they are in collision with another one. I'm wondering if it's a correct way to handle collision detection with an entity system approach? Also, how should i implement this collision system? I though of an that would check every 200ms (this value is chosen regarding the Artemis documentation) if some entities are colliding. 

Note: the above image show the feature of this software Physics Body Editor will create a JSON file that you will need to use in your game to create your fixtures, fortunately, libGDX comes with a native loader and here is a code i took from the demo that shows how to do it: 

Once again, no problem, the quad is properly rendered. DrawUtils is a simple class i wrote containing utility method to draw primitives shapes. Now my problem is when i want to mix both of the above, loading/rendering the 2D image, rendering the quad. When i try to load my 2D image with the following: 

1. You will need client side prediction here. Basically, as you said, your client will send the actions performed on his side to the server and instead of waiting for the server to send his new calculated position, it will them on his own side. In general, the client and server run the same code for a particular action, so basically for a a client would perform, the same moving logic will be run on both client and server. When the client receives a new game state from the server (containing the actual position of this particular client on the server), it should set his position to the one in the game state so the client stay in sync with the server. Lag between client and server can makes things a bit more tricky though. Imagine the situation where there is 150ms of lag between the client and the server. Client send action at and instantly predict the result and move 5 units right (client is at X = 5 after prediction). The action will take 150ms to reach the server (due to lag) but the server keep sending game states regularly (let's say one game state every 20ms). Here is how the timeline looks like on the server: 

is received at t = s (s is the time on the client) The action starts being processed on the server (the player starts moving to the right until a new action is received) is received at t = s + 5 The server knows at this point that the action () has ended and lasted 5 seconds on the client (but on the server it lasted 5 seconds + 150ms since the is received 150ms late) The player then need to be snapped back to his correct position 

Also if you want to use Python be careful of what tools you decide to use. I would recommend avoiding PyGame for this kind of things. I made a Wolfenstein 3D clone in C that i tried to port in Python using PyGame, the game was terribly slow. 

Just to clarify a bit. First read about about callbacks. If you have to call it yourself, it's probably not a callback. In java, you can override a method (maybe you should read about OO concepts) like you did: 

It works but it's damn slow. What would be a fast way to know all the cells an entity overlaps? Note: by "it works" i mean, the entities are contained in the good cells over the time after movements etc. 

Where loc is the location of the image and "width" and "height" are respectively the width and height of the image. What changes are needed to make it works on a scaled context? e.g make it works with something like . 

I hope you can see the problem now. If the client performs an action at , the server will process it a t = 150 and you will only receives a game state reflecting this action at . So basically, you will move your client 5 unit right at (X = 5), snap it back to X = 0 at and finally move it 5 unit right again at , which is of course unacceptable and will make your game unpleasant to play or even unplayable. An easy way to overcome this problem is to keep track of unprocessed action on your client. When the client send the action, predict it and then store it with some kind of id. Your server should also send the id of the last action he processed with each game state. So now, when you receive a game state on the client, you can determine which actions are not yet processed on the server and reapply them on the client. The problem is very well explained in this article: $URL$ 2. Your server should only include what needs to be updated in the game states it sends. If a player has not moved since the last sent game state, no need to include it. You could also use to reduce the amount of data you send over the network. About the rendering, i'm not so sure, only render what is visible on screen (i don't know if want to implement scrolling). Ho, and of course: $URL$ 

You have to know where you are going before writing code and writing/drawing can be a good way to materialize what you want to achieve. I say drawing because drawing diagrams, sketches etc. may also help you a lot. You don't need to make a wonderful document made with Word or anything, just take a pencil and a piece of paper (lot of pieces of paper?) and draw, write everything you may think about. To me, it's a good practice to use pencil and papers, it helps materializing your ideas and also set where you want to go to prevent going anywhere, fix your goal. It works for everything that needs reflexion. And it's obvious in a lot of domains to write things down before doing the actual work. 

My quad is not rendered anymore (i'm not even trying to render the 2D image at this point). Only the fact of creating the texture create the issue. After looking a bit at the code of and i found that the problem appears after the call of the . In the class: