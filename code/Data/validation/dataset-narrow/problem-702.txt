I don't think you should add a method for setting includes on the query object. That means your consumers have to know which properties need to be included and which ones don't. I think you should be explicit about it on the query. One approach could be to simply add a property: 

Comments shouldn't tell me what something is, the name of it should. I don't even know what to say about this: 

The explicit interface implementation means you have to use an instance of the interface not the class. So with explicit interface implementation I can't do this: 

As Heslsacher says, you could further improve by using named constants for the indexes. I did write some additional stuff about using a method to get a Func but then I realised that is a long so it all went out the window. Edit For posterity, I'll add in what I had written: 

Forgive the second answer - it's very separate to my other answer so I think it warrants a new one. A bug? Your code (and my suggested solution too) has a bug - UTF16 surrogate pairs... Here's an example: 

I wanted to implement the Sieve of Erathosthenes up to in C#. No object is allowed to exceed 2Gb so you can't allocate a array. In order to solve the problem, I created a class that packs the bits into an array of bytes instead. I know that it's possible to use a segmented sieve: this was just for 'fun'. 

What happens when contains an invalid username? You'll either return an empty string or "noPass" - either way, the will throw anyway. The control should also be renamed to . Ideally you should create a method on a well named class that takes a username and a password and returns either true or false depending on whether the log in attempt succeeded: 

If all of the implement how do I know when to stop enumerating? I think it's a potentially confusing API design. There's also no way to go back to the property name as far as I can tell - in your colour example how do I know what colours are in it? I don't see what all of this buys you to be completely honest. 

I realise it doesn't save you much over the original code other than centralising the connection string... A more advanced idea would be add an method to your base repo but I don't think it would add much... 

I'm afraid that's about the limit of what I can suggest at the moment. It seems like a good approach to me but I'm not exactly an expert at this kind of thing! I would suggest putting some search string validation/escaping in as it's generally a good idea to be cautious. 

Note from the above that, like you, I prefer non-recursive solutions where possible. You also have dead code here: 

You say cache I say memory leak. You haven't given much thought to your eviction policy yet and that's 95% of the work in writing a decent cache. Your expired entries are only removed when someone tries to access them. Consider the case when the cache is used poorly - i.e. you end up caching a huge number of things that are only accessed once. Without a subsequent access after they are expired, they aren't removed and you have a whole bunch of wasted memory. Your cache also lacks thread safety - that's also a really, really bad thing for a general cache that you intend on using everywhere. A cache doesn't need to be thread safe if you intend on using it in a single threaded application. However, I'd argue that isn't how most caches are used. Why don't you use something like to do all the hard work? 

That's a seriously impressive answer from Heslacher. I remember doing something like this a while ago (turns out to be nearly 5 years ago) and thought I solved it completely with regexes. I've slightly modified it to use an object as it originally used a dictionary: 

This is going to be a quick review to kick things off... As this is a public method should should check the arguments and throw suitable exceptions. 

You should use parameterised queries. Other comments I prefer to see all SQL keywords capitalised or not (I personally just go all lower case and face the wrath of my colleagues), a schema on your table name, PascalCased column names and a list of columns to be returned. Also confused about the name "tblOperator" - it's fairly obvious that it's a table you don't need to prefix it. All of the other comments I'd make about not disposing resources etc have been mentioned already but one other thing I'd note is that I've worked with data access layers (written by others ;)) passing around data tables - it becomes an absolute disaster. You should return strongly typed objects, e.g. an class. You could invest in adding an ORM like EF or NHibernate but you can also write the rehyrdation code yourself. 

Although Philip C has provided one option, I'd just like to show a couple of others for completeness. My suggestion from the comments: 

You should use the highest level of abstraction you can. A double can be anything (e.g. hours, minutes, seconds...) - a timespan is a period of time, much more suitable for your : 

I prefer explicit access modifiers on everything. e.g. . In Unity, with the whole public field thing, it can make the class easier to skim as well. 

If you're going to set an explicit value for one enum member, I'd say you should do it for them all: 

As pointed out by mjolka in a comment. It would be advisible to implement () as well. See the documentation for why it's a useful thing to do. Further edit... It does say in the comments for but you should additionally override and e.g. 

Producer/consumer is more easily implemented with a queue of work. It's weird that your consumer has to know how many things the producer will create. Some general style points: This was mentioned in your previous question. I don't think you can actually fall foul of this here, but it's worth remembering that and aren't atomic operations. If the type of the RHS of an assignment is obvious, use . You don't need to create an explicit delegate here either: 

Something that's a bit terrifying is that the method takes SQL command text but has no parameters to pass in. That's a big indication to me that this sort of thing might be happening: 

Requires it in addition to what? There's also a tag that will generate a link to the given type/member's documentation (in the right tools, e.g. sandcastle). 

You're making life harder for yourself by not allowing the delegate to have a return type. You could create an overload that accepted a instead. 

Is this secure? No. It isn't secure because you can change anyone's email address on the last step. To do so, all I need to do is change the stored in the hidden field (for example, using my browser tools). In the final step you must verify the token. You don't need step 2 at all. There are two requests you need once you have your reset token. Typically you'd click a link in the email. GET passwordReset (pass in the reset token) POST passwordReset (pass in the reset token and the new password) Use the reset token to look up the email that you're changing the password for. The token should be time limited, long and random to avoid guessing. 

I would remove your class entirely. It also violates the D in SOLID because it depends on your chooser directly. 

It's probably going to complicate the design a bit but I think the addition of some type objects may help you in the long run. I realise that the above isn't really a review of your code... I can whine about some of your naming if you'd like ;) Naming You're inconsistent with capitalisation on / the class is but you . I'm guessing that's because VBE is a generated class? The documentation for (and what it does) is a lot more than just navigating to the project builder. method doesn't quite follow the pattern elsewhere - should be . Those are the only ones that I can see... Your code is getting too consistently good to pick out many things! I wonder whether calling your methods that navigate to a parent builder would make the code read a bit better? 

You are mostly right. This is a very common pattern but your naming is a little bit different to standard implementations. I should note that in this particular case, this is completely overkill but I'm assuming that this is a learning exercise for you and not something you are planning on using. 

If I've read your code correctly, this will never return because the time based cancellation token will have already requested cancellation and you don't check the property at all. It would be better to store the TimeSpan in a field and set up the time based cancellation token as the first step of your method. 

You just inject this service into all the places you need to get files in the working directory. You don't have any magic that you need to worry about. If you change the setting and save it, then you expect (and want) it to be saved. 

A list that doesn't allow values is really odd. There is no reason why you should disallow . You wouldn't stop me adding to a list of integers. 

It's a pain to do it but you'll thank yourself in the long run! Not much of a review... I'll hopefully take a closer look later in the week.