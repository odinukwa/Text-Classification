I'm building a RESTful service that sends emails with body rendered by partial views. It replaces my old solution that used hardcoded templates of inside each application. One of its features is to inline es as . I'm using because it's easier to design a view this way. Since it's about emails, I'm not expecting any fency style selectors and to make it simple I'm using only es. 

It probably doesn't matter here but it's a good habit to always dispose objects that are disposable. This means the requires special care. You also want to know what went wrong so don't swallow the exception. Print either the message or log the entire exception. When working with paths you should use the method to avoid any invalid paths like ones with missing etc. 

I won't claim the names are perfect (like the could be etc) (or that there is no more room for improvement) because as we all know it's really hard to come up with good names but as soon as you find them, the code is almost self-explaining. So keep up finding good names and you won't have to do it yourself everytime (explain the code). Let the code do it for you. Example output for and delimiter Original: 

If you are interested in reusability, testability and maintability then this solution is none of them. I guess this is not the only place in your code where you are checking if someone can do something. You should replace it with some kind of a role/authorization system and rules for each action etc. that you can apply whereever you need them instead of writing the same or similar conditions all over the place... just imagine what happens if there is a new role that can not only cancel bookings but also do other things. You'll have to adjust probably several methods. This is a maintenance-hell. 

I measured your code and this score is 8. There is a way to improved it if you encapsulate the code creating the paths. Currently those two lines cannot be tested so you actually have to debug or run your application to be able to verify that both paths are the ones you expect. If you put them inside another tool like a 

Use full names if it's not something obvious and really short like a LINQ query. Single letters are hard to understand. Define your variables as close to their usage as possible. 

RestClient I currently test it with just two methods: GET & POST. Each of them accepts an uri-builder and its own . They are basically wrappers for the boilerplate request code. Before each request, first the default headers are set and then the each caller can further customize them. 

You can use a copy constructor. It is a constructor that takes an instance of itself and instantiates a new instance based on anohter one: 

Other that this I cannot help unless you provide more information. Perhaps there is a better way to parse your data but without samples you'll probably won't get anymore advises. 

where the copy loop won't copy it. So if I had queued a resize would result in . You either should prevent enquing or don't change the content. 

Each square has a position and a symbol. It's abstract so we can derive more concrete types from it. 

Some time ago there was a question about something similar that you might find interesting: Refactoring away from exceptions. I think what you are trying to do is virtually the same. I tried it and it's a real mess when you once start using it. You're better off with a simple repository encapsulating all db operations an their exceptions. 

Create new types to hold the results. Personally I don't like s because they cannot be easily queried with linq and require disposing so I advise you against them. 

This second line might be killing the performance but even if it's hit only occasionally it's usually a bad practice. is blocking a thread completely. Nothing else can be handled by it during the wait period. You are using s in other places so try to use a here or even better a timer that will trigger a relaunch. 

You have this code in the where you can something but this does not really make sence as I can still do on the list or add items by myself and the allocation would be corrupted. You should either return an or give the user the full control over the property. Having both is confusing because I can modify the list in anyway but set a new one. To replace it I need to call and then the unexpected happens. The property returns a new list. You need to rethink this. 

This way you'll be able to construct any combination of anything and I will be easy to add a new character or dungeon because you won't have to modify any of the existing classes but create a new one. Then you just register is somewhere and you're done. 

Finally tell the method that requires some angle the exact type it should take. For example radian. With each type having one more you don't even have to use the property. 

This constructor is really huge. If you have so many optional parameters then turn them into properties. It'll be clearer to the user that to create a valid object he only needs to specify a single parameter. Sill better would be an entirely new type holding all the optional parameters as . You already plan to extend this class so moving the configuration into a specialized class might a good decision. Nested function calls & missing Dispose() 

The compare I use here takes two s for each interface method. Factory methods make the creation easier. 

IsPrime This method should throw an exception if the number is less then 0. Consequently you would the be able to return a clean boolean value. What does the mean anyway - maybe? A number can be either a prime or not or there is an error. This would make other parts of the code much easier because you wouldn't have to cast it. Why do you need the there? This is a very strange design. You add values to it but you never use it, only the property. For this a simple counter would be more adequate. I don't understand why you need it. On the other side it should be just . We don't use type prefixes in C#. Among other variables the is super confusing and misleading. It suggests it's a list but instead it's an . firstA firstB They don't make any sense and their names don't help to understand their purpose either. 

Not all services may support a subject but a subject and a message are the two properties that actually every notification has.