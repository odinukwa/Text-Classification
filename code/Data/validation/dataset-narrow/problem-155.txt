The difference between maximum link capacity and link utilization defines your headroom for future growth or additional workloads. The smaller this headroom the shorter is your time before you have to upgrade the network. If you manage to distribute the load more evenly and lower the peak network utilization (with the same overall/daily throughput) the longer the time you can use the network without problems and the lower the overall cost. Of course, lowering the overall throughput serves the same purpose. 

Basically, auto negotiation tells the port which PHY to select. The PHY starts up and its PCS will then receive the carrier (or carriers for multilane), depending on the PHY flavor. 

For Ethernet, maximum cable length is 100 m (Cat-6 for 10GBASE-T, Cat-5e for 100BASE-TX/1000BASE-T, Cat-3 for 10BASE-T), the only exceptions are 2.5G and 5GBASE-T where the maximum depends on cable grade. The link is likely to come up (link pulses are rather low frequency), but will not actually work with excessive lengths. A cheap LAN tester will only test for continuity and pairing. For attenuation and NEXT/FEXT you'll need a professional cable tester. If you need longer links you'll need fiber or plug a switch in between for regeneration. 

Essentially, each layer has a specific function and doesn't need to worry about the function of the other layers. On the very top, an application opens a TCP socket and sends a stream of data to the destination. It doesn't care about routing, packets, checksums, and line codes. On the next lower layer, a transport protocol like TCP, sitting on top of the network layer doesn't need to worry how to transport data across the globe. It can concentrate on packetizing a data stream, retransmissions, segment sorting, congestion and such. The internet or network layer's function is to route a packet across a large network to its destination. It doesn't know about applications or data streams, it just knows how to get from A to B. In real life, this is how IP packets are forwarded across the Internet by routers. On the next lower level, a link layer protocol like Ethernet can concentrate on physically framing the logical network packets and moving them across a rather small, 'flat' network. Ethernet also covers the physical layer were frames are serialized, encoded, moved over copper or fiber links, decoded, reassembled and passed back to the destination's link layer. Note that I used just one example for each layer. There are many alternatives. The network layer might be using IPv6 and the physical layer ADSL. The application doesn't need to know about this, its interface to the 'stack' is the same. Likewise, the network layer doesn't know about the physical layer because its downward interface is always the same as well. 

A router does stop broadcasts (unless configured otherwise). However, it's not quite clear from your question how everything was connected. Multiple LAN ports on a router can often be configured to be a switch group - usually you'd connect multiple clients or switches to the router without connecting the switches. These switch group ports act like a switch (connecting parts of the same segment) and not like a router (connecting multiple subnets). From the manual: 

The FCS is a CRC over all fields (except the FCS) with the polynomial G(x) = x32 + x26 + x23 + x22 + x16 + x12 + x11 + x10 + x8 + x7 + x5 + x4 + x2 + x + 1 with the procedure detailed in IEEE 802.3 Clause 3.2.9 - complement first 32 bits, run the polynomial, complement the result and transmit most significant to least significant bit - this is reverse the normal Ethernet order. 

Linux traceroute uses UDP (to port 0) by default. Usually, you don't get responses from the silent devices either but UDP is less likely to get filtered and stop in the middle. 

The Ethernet broadcast address with all bits as was first officially defined in the original IEEE 802.3 standard Clause 3.2.3.1, published in 1983: 

Which information the switch has about a connected client depends on what the client is transmitting. First of, any frame transmitted carries the client's MAC address as source and updates the switch's MAC table (from the switch's POV a server is just a client node). Often, this will be the DHCP recovery for a dynamically assigned IP address but it could be anything. Servers often have static IP addresses assigned locally, so in that case the first frame might be an ARP response. As Ron's already pointed out, the MAC address most often reveals the server or NIC manufacturer. Switches with active port authentication can learn quite a bit more about the client unless they just pass on the authentication information. Everything else has to be voluntarily sent by the client, including various discovery protocols like LLDP - if the switch supports these protocols. 

Huh? I assume your "network layer datagram" is supposed to be the IP packet - the IP packet just carries the protocol number for the transport layer, nothing else transport-layer specific. The headers's protocol number field containing 0x06 indicates that the packet's payload is a TCP segment. The TCP segment has got its own header indicating the source and destination port numbers. You can check out what's in the headers yourself: IPv4: $URL$ IPv6: $URL$ TCP: $URL$ 

Tunneling is used to route between two networks that can't be routed directly, especially when private IP addresses are used. It is a kind of overlay network. Technically, there is no difference whether you access just a single host or a complete network through the tunnel. Of course, the tunnel broker knows your real IP address but those behind the tunnel might not - they only see your private address (the one before entering the tunnel) or a local one (when using NAT). 

Yes. A managed switch is a switch you can configure in some way or other. Whether it supports VLANs or not is not the question. Even a switch (or a hub for that matter) that only provides status information can be considered "managed". However, the vast majority of managed Ethernet switches do support VLANs. There are countless other features than can be configured on a switch, e.g. port parameters (duplex, speed), PoE, LACP/LAG, spanning tree, ACLs, routing, authentication, access, multicast/IGMP, QoS, MVRP/GVRP, SNMP, SPAN/mirroring, ... 

Don't ever bridge remote networks, route them instead. You need to set up VPN links between the routers and make sure each one's got routes to the remote networks (either dynamic routing or static routes). Don't use NAT or port forwarding if you don't want a mess. 

Often, a given device has a hardware limit of e.g. 512 VLANs. With 802.1q tagging, the absolute limit is 4,094 (the tag is 12 bit in size and VIDs 0 and 4,095 are reserved). With 801.1aq tagging, the tag (SPBV) is expanded to 24 bit, so 16 million VIDs are possible. When trunking between devices you can have a single VLAN untagged, all others need to be tagged. 

You need to have the links measured with a proper network tester. These testers check whether attenuation, crosstalk etc. are within the allowed margins. Any link that's not been properly checked is a gamble. A simple continuity tester just tells you whether the cables are in the right places, no shorts etc. It can't tell you if the link really works. On the switches, check the log for up/down events and check the interface counters for any errors, especially FCS, Alignment, and Tx drops. If any of these are higher than maybe a dozen (mainly from connecting/disconnecting a link) the link is unreliable. Additionally, if you haven't done this already: you need to set up the VLANs on the Netgear as well. The uplink trunk has to be set up in the very same way as on the Cisco. The phone ports also need to be configured as VLAN trunks. I'm not sure if you can set up the Netgear to automatically assign phones to the VoIP VLAN. Alternatively, most vendors have DHCP options that tell phones connecting to your PC VLAN to move to the VoIP VLAN instead. You just put those on your DHCP server. 

In real life, you can't stick entirely to the OSI model. It's helpful and necessary as a guide on how to structure the components in a complex network but you can't always say that's layer x. Tunneling is wrapping packets or frames from one layer and using another transport mechanism to transport it where you need it. At the tunnel end you unwrap the original packet and continue forwarding it natively. This is especially useful when routing IP packets in between networks that use private IP addresses over the Internet. You can't use the private addresses on the Internet, can't change them (NAT) as the other end needs them, so you (simplified) wrap the private IP packet in a public IP packet, route it across the Internet and unwrap the original packet. So, when looking at a tunneling protocol it's much more helpful to check what it runs on top of and what kind of interface it presents on top. E.g. PPTP runs on top of IP and presents a layer 2 PPP interface on top that you usually in turn use with another layer 3 protocol (IP or IPX) on top. Other protocols like OpenVPN present an Ethernet-like layer 2 on their top, so you use a virtual NIC as a logical interface. 

The Cisco GLC-SX-MM for gigabit should be compatible with your 2960 - some vendors offer compatible SFPs using 1310 nm wavelength for 2 km MMF ("Cisco GLC-SX-MM-2K compatible"). 

Ethernet across switches doesn't work without a valid MAC, no matter what you do on top. With a dedicated point-to-point link you can do whatever you want if both sides are fine with it. However, Ethernet is not a simple serial line. PPoX requires its special Ethernet variant PPPoE in order to work on Ethernet (unless you build your own, similar variant) because Ethernet is not point-to-point. An IP address of 0.0.0.0 is only used for very special cases (esp. address probing in DHCP) when addressing is ensured by the underlying layer (usually Ethernet). Ethernet has nothing else to rely on, so an "empty" MAC address simply won't work. However, if you require a temporary MAC address for some time you can freely use any locally administered address: set the two least significant bits in the MAC address's first octet to 10 and simply make sure the address is unique within your network. 

With directly connected computers, both need to use the same speed when sending to each other. Transmitting and receiving with different speeds requires splitting up the data into packets and some kind of packet buffer in between the computers. Such a buffer is part of a network bridge (switches work like bridges) or a router. Repeaters (and hubs) have no buffer and can't change the speed - except for dual-speed hubs that use a bridge and buffer the packets between speeds. These buffering devices first receive a packet at the speed of the sender. When it's complete, they decide where it should go and forward it to the destination at its speed. In a larger network this can repeat many times over intermediate destinations until the packet reaches its final destination. The way the devices make their forwarding decisions can differ quite a bit and is a major difference between switches and routers. As the other answers have already pointed out, this hopping and speed-changing can cause a number of problems that the network and the protocols in use need to solve. 

It doesn't work. I'm assuming 192.168.2.2 uses a subnet mask of /24 or /16. With no route to 10.0.2.3 and no default gateway, A has no way to send the packet. You're correct in that ARP requests are only made for local destinations, they can't cross a router. If you can set up both PCs with a mask of /0 (= all IPs are local) it'll work both ways. PC A will view B's IP address as local, ARP the IP and send the frame over Ethernet to B's MAC address - whether or not there's a switch in between (I'm boldly assuming you're using an Ethernet connection). When setting a mask of /0 is a problem you can also set up a default route (0.0.0.0/0) to the local IP. 

A proxy - forward or reverse - always "interacts" with the traffic: the proxy terminates the incoming "from client" connection, creates a new outgoing "to server" connection and passes the data in between. 

The message itself doesn't change. Generally, higher layer data is encapsulated in lower layer protocol overhead, transported along - the lower layer protocols likely change along the way - and pieced together at the end again. For instance, an application on host A sends a UDP message to an application on host B, containing the string "Hello": 

That's a job for GPO: in Local Computer Policy, Computer Configuration, Administrative Templates, Network, and Network Connections set _Prohibit installation and configuration of Network Bridge on your DNS domain network' to enabled and Prohibit use of Internet Connection Sharing on your DNS domain network to enabled. It may take a while for the GPO to catch, so you might want to reboot his machine. On his switch port, set ACLs to filter all traffic not from or to his MAC or IP address. I'd disable the port completely. Surely you've got policies against this. 

Whether the source or the destination/next hop node is a router, multi-layer switch or end node doesn't matter. 

The way you have assigned the VLANs to the switch ports makes the 1910 behave like two separate switches. You need to connect one of the DMZ ports to your firewall. Alternatively, you could configure a single, VLAN trunk port with both VLANs active (both tagged or one untagged, one tagged) and connect it to a firewall port. Then, that firewall port needs to be configured in the exact same way. When the IP interface you've bound to the second VLAN is set to DHCP it requires a DHCP server (the Sonicwall) to assign an IP address to it. In any way, the DMZ port needs to be configured on the firewall. You'll need an internal IP address/subnet plus firewall rules to allow a connected device Internet access. Additionally, you'd probably want rules to allow internal devices to access the DMZ (or allow DMZ devices access to the internal network, but that isn't the point of a DMZ). Since the 1910 is capable of routing and you probably wouldn't want an unfiltered connection between the internal network and the DMZ, make sure that routing on the 1910 is deactivated. EDIT after comment: The manual isn't exactly clear on that but I think to remove routing capability from a VLAN you need to remove the VLAN interface (in parallel to removing the IP address on the larger HPE switches): 

The default gateway IP address is that of your uplink router, not your local address. Your local IP address appears to be 172.20.20.20 ( indicating an Intel NIC). The local MAC address doesn't appear in the ARP table because nothing will ever be sent there. ARP is used to send IP packets within local Ethernet frames, so entries in the ARP table will indicate other devices within your local network (the table is a cache, so only recently used devices are listed). shows you the configuration details of your local NICs. The default gateway's MAC appears not to be valid. The OUI belongs to Xerox and has probably been out of use for decades. (Not a problem though, it just needs to be unique within your network.)