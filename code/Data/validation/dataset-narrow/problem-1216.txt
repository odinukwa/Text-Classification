Lutomirski goes on to provide a $\mathsf{coAM}$ protocol for determining whether the number of components (partitions) is greater than $1$. 

If there is an Arthur-Merlin protocol for knottedness similar to the [GMW85] and [GS86] Arthur-Merlin protocols for Graph Non Isomorphism, then I believe such a cryptocurrency proof-of-work could be designed, wherein each proof-of-work shows that two knots are not likely to be equivalent/isotopic. In more detail, as is well known in the Graph Non Isomorphism protocol of [GMW85], Peggy the prover wishes to prove to Vicky the verifier that two (rigid) graphs $G_0$ and $G_1$ on $V$ vertices are not isomorphic. Vicky may secretly toss a random coin $i\in\{0,1\}$, along with other coins to generate a permutation $\pi\in\ S_V$, and may present to Peggy a new graph $\pi(G_i)$. Peggy must deduce $i$. Clearly Peggy is only able to do this if the two graphs are not isomorphic. Similarly, and more relevant for the purposes of a proof-of-work, as taught by [GS86] an Arthur-Merlin version of the same protocol includes Arthur agreeing with Merlin on $G_0$, $G_1$, given as for example adjacency matrices. Arthur randomly picks a hash function $H:\{0,1\}^*\rightarrow\{0,1\}^k$, along with an image $y$. Arthur provides $H$ and $y$ to Merlin. Merlin must find a $(i,\pi)$ such that $H(\pi(G_i))=y$. That is, Merlin looks for a preimage of the hash $H$, the preimage being a permutation of one of the two given adjacency matrices. As long as $k$ is chosen correctly, if the two graphs $G_0$ and $G_1$ are not isomorphic then there will be a higher chance that a preimage will be found, because the number of adjacency matrices in $G_0 \cup G_1$ may be twice as large than if $G_0\cong G_1$. In order to convert the above [GS86] protocol to a proof-of-work, identify miners as Merlin, and identify other nodes as Arthur. Agree on a hash $H$, which, for all purposes, may be the $\mathsf{SHA256}$ hash used in Bitcoin. Similarly, agree that $y$ will always be $0$, similar to the Bitcoin requirement that the hash begins with a certain number of leading $0$’s. 

As one example, we may apply such a protocol to some problems in discrete robot motion non-equivalence, rather than adjacency matrices of graphs. That is, we can have a sound zero-knowledge protocol that a discrete robot in a particular position cannot be converted to another position, using a fixed set of invertible generators. Rather than deciding only one element of the symmetric group $S_n$, Vicky must choose a particular path along a Markov chain, where each state is an element of the configuration space and each transition is given by one of the generators of the robot. After mixing, the test element of the configuration space will be chosen uniformly from all elements of the configuration space in the same equivalence class as the given robot configuration. 

Furthermore, given a system $F=0$ of $k$ polynomial equations on $n$ variables, where the maximal degree over all monomials is $D$ and the bit-size of the largest coefficient is $h$, if the system is unsatisfiable in $\mathbb{C}^n$, unconditionally it will only be satisfiable modulo a finite number of prime $p$. Effective Nullstellensatz shows that for unsatisfiable systems without a solution in $\mathbb{C}^n$, there are at most $$A_F=4n(n+1)D^n(h+\log k+(n+7)\log(n+1)D)$$ primes $p$ such that $F=0\mod p$. However, if a system of polynomial equations in $\mathbb{C}$ is satisfiable then it will be satisfiable in $\mathbb{Z}/{p\mathbb{Z}}$ for a positive density of primes $p$. Assuming the Generalized Riemann Hypothesis, Koiran showed these primes $p$ will be distributed "evenly" across different equivalence classes, such that there is a "large" gap in good primes between satisfiable systems and unsatisfiable systems. This gap can be verified with only looking at the behavior of "small" primes. Accordingly, Koiran proposes a protocol of certifying the satisfiability of the system over $\mathbb{C}$ by finding a rare prime $p$ such that both there is a solution to the given system in $\mathbb{Z}/{p\mathbb{Z}}$, and $H(p)=y$ for some randomly chosen hash $H$ and randomly chosen image $y$, where the size of the codomain of $H$ is chosen carefully such that there are enough candidate preimages $p$ to be able to invert the hash $H$ iff $F=0$ is satisfiable in $\mathbb{C}$. 

Peggy and Vicky agree on a small number, say $r$, of generators $\pi_1,\pi_2,\cdots,\pi_r$ of the symmetric group $S_n$ on the $n$ vertices Vicky (secretly) tosses a fair coin $i\in \{0,1\}$ to determine to which graph $G_i$ she will permute the vertices Vicky (secretly) chooses $t$ random numbers $g_1,g_2,\cdots,g_t\in[r]$, and applies the (concatenated) permutation $\pi_{g_1}\pi_{g_2}\dots\pi_{g_t}$ to the vertices $M_i$, to generate a new matrix, $M_3$ Vicky presents $M_3$ to Peggy Peggy must deduce $i$ from $M_3$, that is, she must deduce which of the graphs $G_1$, $G_2$ Vicky chose in step 1 

In section 8.4 of Arora and Barak, after describing the public coin protocol for $\mathsf{GNI}$ and $\mathrm{IP=PSPACE}$, the authors state: 

"Beltway Reconstruction Problem” - arxiv.org/pdf/1212.2386.pdf may help. Note that you're asking for the function corresponding to $P$ whose autocorrelation is the given function corresponding to $A$. I've often thought that there's some relation to factoring, at least to for the turnpike version. You can consider $A$ as an integer $Z=a_1x^1+a_2x^2+⋯a_Nx^N$ in base $N$, and by factoring $Z$, some of those factors would be the indicator function of $P$, i.e. would be $1$ at the $k$'th position and $0$ otherwise. So maybe the turnpike problem is in $\mathsf{BQP}$. 

This seems to be explicit or at least implicit in Lutomirski's 2011 "Component mixers and a hardness result for counterfeiting quantum money" - arXiv Lutomirski formally defines component mixers as a family $\{M_i\}$ of one-to-one maps between elements of a set $S$ partitioned into $\{S_1,S_2,\cdots,S_c\}$. He gives a number of example $S$'s, such as the set of all graphs on $n$ vertices, where each partition $S_1,S_2,\cdots,S_c$ corresponds to different isomorphism classes of graphs. Each element $g\in S$ is a given graph on $n$ vertices, and is a member of only one partition $S_g$. "Mixing" means to randomly draw another element $g'$ from the same $S_g$. He notes that for many sets $S$ one can mix easily enough, with permutations or straight-line-programs. Otherwise, he comments that: 

For example, Chao and Gao prove Morley's theorem, which states that given any triangle $ABC$, trisectors of each angle $\angle ABC, \angle CAB, \angle BCA$ meet at an equilateral triangle $DEF$. Chao and Gao provide a system of about $k=12$ equations in about $n=12$ variables, where the maximum degree $D=5$ and the maximal bit-complexity of the coefficients is $h=\log_2 6$. Thus, the Effective Nullstellensatz bound for Chao and Gao's description of Morley's Theorem is $A_F\le 2^{40}\ll 2^{72}$. We can look for a solution in $\mathbb{F}_q^n$ to Chao and Gao's polynomials describing Morley's theorem, or, following Huang and Wong, we can decide that the system does have a solution in time $O(\log q)$ without necessarily finding the solution. Hence, if one uses a SAT-solver to find a solution to Chao and Gao's system of equations for Morley's theorem in $\mathbb{F}_q^n$ for $q$ as the 288-bit prime root||nonce found above at the Bitcoin blockchain of height 520605, or if one uses Huang and Wong's approach, does one then have something close to a probabilistic proof of Morley's theorem, where the probability of being "wrong" is something like $d\times A_F\le 2^{-31}$ or so? Comment: Even though I've rewritten this, I'm accepting DW's answer as helping to crystallize thinking.