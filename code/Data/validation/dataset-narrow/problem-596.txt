Scoping : In your controllers are all your services default scoped. In mine humble oppinion make them private, if you wish to have the default scope make getters and setters default scope. Why: You easily can forget the private before a global variable but getters/setters are mostly autogenerated public so normally when these are not public it's ment to be. Final's : What is looking odd is that in you don't have the marked as final as you do that in your other controllers. Error handling : 

You are in a while loop so your loop will continue as long is bigger then 0. So I'm guessing you inserted that code for the last bottle. You just have to change : 

I was working on refactoring your code. When I was finished I saw that @tim already posted an answer. He address the most what I also wanted to point out, but in mine opinion he forget 1 thing. 

Method names do not start with a capital. starting with a capital is for classes. Fourth : You rely on users of your class that they close your connection. You will have memory leaks cause they will forget to close your connection. There are 2 possibilities what you can do. First : 

Personally I wouldn't do this. The reason why is when your field change name, your test fails because the field is hardcoded there and with refactoring this isn't persisted to the test. What should I do? Normally your is in the same package as your . When this is correct you could use a protected method. Example : 

I'm looking at this class and I'm confused. The reason why is that I'm doing web programming so a dialog can be asked on different sessions. In that case this class is useless. In stead of holding your and in your class as static variable, just return them in the method. Then your 

Now you have a more generic method that can sort, even more entries in the map is no problem. Hope you have something from this review. 

if - else if - else if ... When you see this, it's time to consider switch statements. I hope the is an enum, so you can refactor this to a switch. If it is a String, you need java 7 or higher to do switch on Strings. Code can be as followed : 

Isn't it better to call them and ? It helps you when you are programming. Take in mind that you get this code and must find a little bug. You are getting a headache just by always thinking what and are Check for your own faults : 

All over : Nice readable code, as an outstander, who doesn't know the things the other classes need to do I still understand what this class has to do. 

Code should be self explaining, so if you need to put comment behind a variable name to explain it, there is something wrong. Mine suggestion is : 

for the same result. Naming : While you have not many var's to call => I like that you already point to the bottle. Still I'm thinking could be a better var name. While loop : Well it doesn't make a big difference but for your own sake, use a for-loop. You don't forget to substract one then. 

We all know what you are trying to do. But what happens if is magically turned 10? You have a bug that will not correct by himself. Let's say we do the following : 

Your naming of variables is hard to reason about. When I think about what your program is doing you, I come up with the following sequence of steps: 

I don't understand it, what do you mean by "create a pixel"? It is not, as of now a docstring, to make it one, use the triple quoted string and put right below the function declaration, so: 

A couple of the things they mention are only a concern for Python 3+ like . Also, it seems is a grammar rule introduced in Python 3+. (However, you may want to account for this in the future.) You seem to be also removing docstrings from , I am not one hundred percent sure, but you may also want to add as well. There is also a . However, I find it rather weird stylistically compared to your current method of looping. So... I'm not confident in making any comments about whether you should be using it or not. Nevertheless, I'm putting it out there so you are aware in case you weren't. 

Your variable try appear to be roughly the "ASCII" equivalent of the ones used in the equation. You cite the paper where you got the equations from. (This is probably the most important thing to do) This allows the programmer to understand the context. 

Or something along those lines. Furthermore, once you have done this, is only called once in your entire code. I would just get rid of all together and just call . 

Is prone to errors when you don't use braces. Python enforces indentation so it is hard(er?) to make a mistake with the lack of braces, but in Java the indentation doesn't influence anything here and some programs will silently "work" that shouldn't and no error message will be given. 

Why not something like and ? and are used so often I would certainly forget (even with the comment) that this referred to falling objects in particular. 

The word sounds like your taking an iterable of some sort and summing all the values in it. would be a better name. Even then, I would expect to return all possible pairings, which the code doesn't currently do. 

Using this algorithm you only hit each word once instead of going through the even words again as you do in your algorithm. The PEP8 style guide states that Python functions use instead of so: . 

takes an iterable and creates tuples of . We reverse the string and then multiply each character by the appropriate power of . This allows you to go beyond the 6th power. Alternatively, you can keep an value that counts up from . I'll leave this as an exercise. It might be faster than using . You should not need a dictionary though. 

Also, add some spaces in between your function declarations, it's hard to read when everything is clumped together. But don't over do it (in particular, don't double space everything). 

Is unneeded. (Although, there might be some weird floating point thing I'm not taking into consideration. Regardless, you can adjust for this.) Don't have: 

What should be in place of ? is often assumed to be an integer, yet you use it as a string. Organization doesn't really feel like a test, it feels like the main point of your application. Maybe just change it to and do something like: 

Too long is way to long. It is hard to read and interrupts the flow of statements that call that function. may be a better alternative. You probably wont get a name quite as descriptive as what you came up with but I would just write it in the docstring. XSS sounds like you're talking about an XSS exploit or something. Why do you use that as a variable name? Why not or ? (Same goes for etc.) Some hardcoded stuff. 

Are now package private. Declare them private and if you need them outside provide getters and/or setters. So it should be : 

As you can see now, I can easily refactor the code. Let's say you class grows and we need to change the to For me it's one little change and it's completly done. Your old class, you have already to change it 3 places, possible fault's .(forgetting one to change) waiting to happen when your class grows. 

Or something like that. Let the method return the actionlistener, but in the creation of your actionlistener use also at least 2-3 methods. Edit : Your problem : Use instead of with your eventlistener. looks for multiple button clicks, so it will merge some events. 

Default value of a is . Default value of a is . Take care, default of and is . Defensive programming 

edit : This last one is wrong cause doesn't implement . Or from java 7 you can use try-with-resource When you extend and implement the you can do the following : 

You are declaring this synchronised. So if 2 threads are calling this method, the second one has to wait until the first one is finished. Because you don't have an input variable, the output will always be the same, setting false. In this case there are no race conditions what could affect the outcome of this method, so I wouldn't make it synchronised. private static final : You are making a great use of the fields. What I'm not liking is the next step : 

A bigger problem here is that you don't log the . It vanish in thin air cause you don't use the in the catch. Succes with finding the problem at that time. 

Default values This is a part I have to say. It's educated to me so I educate further but I'm not a fan of it. 

This field could be because you set it in the constructor and there is no setter for setting this at a later point. LogFileFunctions.java Javadoc preffered 

You can do it a little more generic but I'm afraid you still have to test each. I don't know if your case is always changing to green or not. If not I suggest the following enum : 

You do not check if qc is null, what is possible when you get an exception. You have 2 options for this. 

This is completely safe in your pojo, nobody could even acces the object. And outside the package no one will ever see this method. The advantage is when you refactor or the method name, your test is automatically updated. 

The intendation is correct but always use braces for if's. A lot of mistakes with if's comes from this. Example : 

It's hard to say but if I get this with an interview, you will not pass. On the other hand, I'll find it good you come to here to learn. Number 1 is really red flags. Let's start with the review. 1. No with logic. I removed the comment lines to point it out. 

So the result in the abstract class could be (You know what exactly the code does so make the names better for your cause): 

We start with that tab disabled. As the subscriber is created you can set the disabled to false and set the source of the include, so the tab will unlock. Another option, what I use in mine application is using the "visible" attribute. 

Your code doesn't give an infinite loop, but it doesn't make sense really that you return for your function. If you "allowed" the funciton would return an infinite list of s. (Why?) 

Although you should comment your work, some of your comments seem unecessary. Let's look at some lines to see why: 

Your list comprehension seems relatively long to me and I had trouble understanding exactly what it does: 

But you can abstract this further! Create a higher order function, that depends on a string parameter and pass in either or . 

is the name of the Garbage Collection interface module. It shouldn't matter too much, but, when reading your code, it feels like that you are asking the garbage collector to find books and then I remind myself that it isn't actually the garbage collector. 

Should be somewhere in your function, not score. Pass a erence string to . I would advise printing out more information than just numbers, something like this, so you can tell what is going on: 

At a quick glance, you do most (if not all of these tests). So in some sense the coverage is good. The amount of testing may be overkill. You have to realize you can't test every possible thing. With that in mind your tests should: 

This was mentioned in the last post. Even if you can't find the specific number you need, you should at least assign to some variable something like so the meaning of such a number is more obvious. 

This could be vastly simplified using JSON and the Python library. tl;dr JSON is a convenient way of storing data (in file) that roughly resembles a Python dictionary. (There are also alternatives to JSON like XML, but I prefer JSON). You can also refactor using JSON. Place stats into a dictionary. I would put the player stats into a dictionary so you can make access stats like: 

This code is also pretty self explanatory. If you did have a comment you should be explaining why you do this. However, bubblesort is pretty well known so you probably don't even need a comment on this. 

The biggest issue I see with your code is your ability to extend it effectively. I would recomend you store a lot of you data in a format like JSON. So you could create for a something like: 

Should probably wrapped into a "main function". Furthermore, to keep stuff in the "main scope" I highly recomend you actually make a function. So instead of just: 

(This section is less of a "review" and more of considerations for future development) Not exactly required, but a lot of casinos have different variants on craps here are some possible abstractions you may want to consider: 

The way you have it set up, it doesn't matter, if someone gives me a number like (-3)/(-4), my first thought is this can be reduced to 3/4. I would probably call reduce in the function, so any constructed is immediately reduced. You could get an integer overflow sooner if you don't reduce stuff immediately depending on how hairy the fractions get from repeated arithmetic. Possibly a good exercise is to write a test that illustrates this overflow issue. 

Firstly, "sub-string" is different than "word". I think "word" is more appropriate in this situation. (A substring can contain non-alphabetical characters). 

Firstly there are some minor stylistic errors that can be detected with pylint. Most notably you never use the module. I looked mostly at this section of code: