Lock based concurrency in .NET is a fairly simple paradigm (compared to the other ways of ensuring thread safety in .NET). When you lock, you declare a block of code as a critical section, protected by that lock object. .NET ensures that a second piece of code in the same app domain will never be running in a critical section protected by the same lock object while one instance is. Here is a good resource for more threading information: $URL$ Pedantry When most people discuss thread safety they mean it in the same sense as saying strings are immutable. That is to say, as long as you don't do anything I shouldn't reasonably expect you might do it is safe. Unfortunately, locks aren't good enough to actually provide true thread safety (bulletproof against reflection and C# pointer code), they are good enough for most usages where you control the software stack out to the actual application. If you need to ensure thread safety in these instances you must ensure thread safety at the field level in your classes (stuff like the keyword will help you here, but watch out). Some example threads that would break your safety here: 

You have redundant parentheses here: . You can also make your type more generic: . I think it looks a bit cleaner using an as-pattern and guard clauses. This way you don't need and can just write . 

If isn't being used elsewhere in the class, move its declaration inside the inner loop, or just use it in the function call. Now your method looks like this 

In and , is used as the first index and as the second. This is confusing, as the usual order is row then column. For instance, 

\$O(2^n)\$ is certainly an upper bound on the number of valid interpretations, but we can find a tighter bound. Here's a hint: let's look at the number of interpretations of this sequence of inputs 

I'm worried this is turning into Code Golf, so I'll preface my alternative with some actual review. There is a pretty big bug in your code, as the following will not terminate: 

The method could probably be replaced by a call to , with and being the basis for the argument (see code below if this isn't clear). API Why is there a parameterless constructor? What is the expected result of ? Why have a constructor at all? What can I do with an instance of other than repeatedly call , returning the same result? I think it would be fine to replace with a static method, so client code might read 

So the question is how can that function be written? If you can alter the html, you could add a attribute (or something like that) to the div tags with the ids of the big div tags: 

I really wouldn't be too worried about css efficiency, yes this does take a little more effort on the browser's part to render than a simple css background image, but the paths are all highly optimized already and this way you have defined the style instead of giving the browser a limited example (try a two line button with each, or zooming the document, or any other of the many ways to mess the button up in one or more browsers). Comparing the http transfer efficiency of these two probably comes out in favor of the latter as well. The image version comes in 2 requests, while the pure css version is only one. I'd bet they both are fairly minimal on the total bandwidth compared to your page as a whole, but if you were really concerned about this you could always inline the image. If you want to go that route, here is a useful tool: $URL$ 

While we're at it, it should be more efficient to use the overload of that takes an , so we're not making lots of throw-away strings: 

as it's a bit more readable. When re-inventing functions, it can be instructive to look up their definition using Hoogle. Following the links, we find this definition in : 

I would recommend making a set containing the paths in . Then instead of adding and removing , just add them instead. 

This takes about 5.2s. You might want to try some of the overloads to see if you can get any further improvements, and remember to take these results with a grain of salt. 

There's no reason for to be protected; in fact, if we make it public we can let implement (not forgetting to add a null check). 

One way of writing unit tests is called arrange-act-assert. Following that method and using the above recommendations, the code would look like this 

Why is this a class? It contains no data and has no methods; the only thing it has is a constructor. This would be more suitable as a method. Let's step back and look at the desired behaviour: 

In response to the comments: This is very similar to the code you initially put up. I derived it again on a gist using the code you put in your question here (slightly different from the code in the fiddle): $URL$ Clone that repository to see the full history. 

This implementation (whether or not you pull out the functions is irrelevant to this single use) will let you manage inheritance properly, but it does have some inefficiencies (setting radius raises the event 3 times, similar to how your implementation does). If you weren't concerned about inheritance you could simplify this by not bothering with the change event and modifying the private members outside of their own setters: 

One thing I would not do is name this method as if it were an event and then not use based arguments. Conventions are good when everyone follows them, but when you don't but remain close enough that the code looks at a glance like you are then you have only made the future editor of your code think more. Edit: Using .NET 4, (still ignoring immutability) I would probably implement it like this: 

I realise someone passing in a UTC is unlikely, but it is something to keep in mind. One option is to consider using NodaTime, which fixes some of the issues with . 

The more I think about it, is doing too many things: exact matching, fuzzy matching, and matching within a range. Here's one possible solution. Create an abstract class (or interface) . I went with an abstract class just to keep all the validation in one place. 

is possibly not the correct encoding for the file (and may change over time). The parameter you pass to the constructor only helps if the file start with byte-order marks. You should know how your files are encoded, and pass the appropriate encoding, e.g. . A more concise way to read the lines of a file is , though it doesn't specify share access (which is something I'm not sure you want, either). As for timing, I generated a test file of 7,000 lines, 25 entries per line, and your code runs in < 0.02s (not including ). So my guess is that it's that is taking most of your time. Try it without and see if that improves performance.