I looked at them when they first came out and decided not to use them. Did go through and look at the topics and make sure that we're covering everything we need to in class. But between labs that I've written or purchased we've got a pretty good set of assignments that covered everything that the AP provided labs hit on. The 3 AP labs also lean more towards projects instead of simple labs. I prefer to do a lot of small, single method labs. Especially early in the year. We do larger scale projects later, and they overlap a lot with what AP provides. And not really part of your question, but I can't imagine only spending 20 hours on labs through the year. We probably hit that goal within the first month of the year. Edit Following up on a comment asking about lab sources... The best labs are past AP exam FRQs. My goal every year is that by the AP exam we've done every past FRQ in class as a lab, quiz, or test. We start in September. Going back to 2004 there are 45 FRQs if you don't include the GridWorld ones. I generally assign them as in class assignments though since there are solutions posted everywhere online. If they're assigned to be worked on outside of class they'll be daily grades which have very little grading weight in our district. Another good, and cheap, source are programming packets from old contests. UIL, the organization that runs academic and athletic contests in Texas, sells past tests on their website. You can buy a PDF with all the tests from a year for $4. There are 5 or 6 tests a year with 40 multiple choice questions and 12 programming problems in each test. Only downside is that they're not sorted, so you'll have to go back and figure out where they fit. And some are more data structures problems instead of AP-A. ACSL also sells past contests on their site. And our district buys curriculum from A+ Computer Science. Best thing here is that it's a complete curriculum - labs, project, quizzes, tests, slides; everything. I use this mostly for the written tests because I hate writing multiple choice questions, but I also tweak some of the labs a little and use them. 

I never explicitly assign homework. It's easier on everyone, and I don't think that they're getting that much out of homework anyway. We spend a majority of our in class time working on labs and projects. What I noticed is that most confusion can be cleared up with a 30 second conversation with me or another student. If the same thing came up at home it would take at least a couple of emails back and forth, and it's usually much more difficult to explain that way. Sure, sometimes students don't finish assignments by the due date and need to work on it at home. But my calendar isn't designed for that to be the norm for a majority of students. And pretty much everyone will study for a test at home the night before. But I don't assign review assignments or anything like that, so nothing is required. 

I used seats in the room. The classroom has an address. So, if someone wanted to come and talk to one of the students they would come down the hall and into my room. But, that only gets them to the room (server). They need to talk to a specific person, so they go to seat 17 so they can talk to Bob. So Bob's socket is . I tried once to continue and the floor became cable runs, each hallway was a subnet, the corners were routers, and the school map was DNS. That pushed it a little too far :) Did find though that most kids had at least a passing understanding of ports. Most of them had opened ports on their home routers to play games over the internet. 

I don't think there's a "best way." I do a bit of a shotgun approach. No research to back this up, but it works well for me. Lab Assignments Most of the assignments we do in class are small lab style assignments. Average students can finish a few of these in a class period. We do all of these online with an autograder. Students can submit their code as many times as they want by the due date to get a score they're happy with. I'd say until it's perfect, but some stop early with a "good enough" grade. For these I encourage them to work together. They bounce ideas off of each other. They work through snags together. And, yeah, sometimes they straight copy each other. Fortunately, where I teach these are worth such a small part of their average that a little plagiarism here doesn't really help them much. I think the biggest advantage here is that they're able to get instant feedback on their work and not wait for me to grade it. If they click the button and it didn't work they can go back and fix it. Free Response I teach CS AP-A, so the kids have a partially written test to prepare for at the end of the year. We do a lot of FRQs through the year on paper. Some of these are test grades and I hand grade them. We'll do maybe 20 or so of these throughout the school year. The limit to this isn't the students, it's how many I can grade. If I had minions who could grade for me I'd probably do one of these a week. But it's not realistic when I'm the only one grading. Most are done on paper before they're let loose to put them on the computer, at which point it looks like the lab assignments above. The main difference is that they have to start on paper. Some days I have them show me and walk me through their work before they get on the computer. Some days I'll put a timer up and when it's done they can get on the computer. Projects This one is pretty new for me. It's something I started doing last year. Projects are really easy to cheat on. My first year teaching computer science I had 45 students turn in the exact same code. What I started doing last year is splitting projects into two parts. The first part is the actual project and they're graded on a rubric targeting specific methods. I count this as 70% of the grade. The other 30% comes from an on paper FRQ similar to the project. For example, we just finished a Black Jack project. One of the methods that they had to write for the project was a shuffle method. One of the FRQs was shuffling an array of integers. Should be really easy if they did the project. I've found that splitting projects like this does a really good job of separating those that copy from a friend and end up with 0 points from the FRQ and those that know what they're doing and get all 30 points. It also allows them to work together on the project and still keeps the accountable for doing their own work. 

I've been trying this year to make videos of me working through the problems. Sometimes they'll be screencasts of me working through the problem in front of the class. Sometimes they'll be a little more scripted and recorded when there aren't students listening. Usually it's the shorter problems where I'll just record myself during class and the longer ones that I script out a bit. Another activity I like is to do code reviews. I'll screen shot several student submitted solutions and we'll go over them anonymously. I'll include a couple that are really good solutions. But, better than that, I'll also include a few that are really close but not quite a working solution. On some assignments, especially those that are a little more difficult, I'll provide a pseudocode algorithm with the assignment as a bit of a cheat sheet. Nothing that can be just typed in, but sometimes students need a little bit of a nudge in the right direction. 

I look at it as two separate tasks. Learning: The goal here is to learn new things and practice what you've learned. For my classes, these are mostly small lab style assignments. I want them to work with their neighbors. I switch seats every two weeks or so that they have new neighbors to work with. I've gotten pretty good at explaining concepts, but sometimes another student can explain it in a way that I've never seen and makes perfect sense. Best example is from a couple of years ago. We were going over and the starts at , up to but not including . A student raised her hand and asked if we could just do to figure out how many characters to keep. It works. I just never saw it. What I tell them first day is that the point of labs is to learn, and if they understand the labs when they're done it doesn't matter how they got there. Some like to work alone. Some work well in pairs or small groups. Some find almost solutions on Stack Overflow and tweak until it works. Some bang their head on their desk until something clicks. The guideline is that I should be able to give them a similar problem on paper the day after a lab is due and they should be able to solve it. Yes, there has to be a grade assigned here because there are some students that won't do the work if it doesn't directly affect their grade. And, in high school at least, students don't seem to get the connection between learning how on labs and doing well on exams. Fortunately for me, our district has a very low percentage (10%) assigned to daily work. Assessment: At some point though we have to figure out where the kids are. They have to do an individual assessment. For me these are always in class either as a multiple choice test when it can be assessed that way or writing code on paper. The goal is to figure out what that student is capable of when they're working alone. And in most cases I'll let them go back and correct if it's not a grade they're happy with. I don't really care as much about what they know on the test day as what they know when they walk out of the room on the last day of school. Mixed: Projects are a mix for me. They're multi day assignments where students work together. But only part of their grade is based on the actual project. This year 70% of the points came from the project and the other 30% came from a written assessment that's similar to what they should have written for the project. Next year I'm probably going to 50/50. 

Seems like an objective test early in the year over syntax is a really good way to run off rookies. If your kids write enough code, they'll pick up the syntax. After forgetting a semicolon for the 20th time, you start to remember. Trace enough code with = vs == and you'll figure out what's going on. It's the same way experienced coders pick up new languages. When I first started with Python I would forget to indent or forget colons at the end of loops. Made the same mistake a few times and got used to the syntax. 

The last time I used a whiteboard as a whiteboard was to describe a maze building algorithm. It was a small-ish board that I put on the ground and drew a grid. I then stepped in a square and we walked (literally and algorithmically) through the algorithm where I built the maze. The whiteboard on the front of my room gets used sometimes when I want to write over examples. I'll project and then annotate what's there. But that's rare, and it's usually covered up with a large projector screen. Of course, my handwriting is terrible and my classroom is large enough that it's tough to see anything I write from the back. So that's probably part of the reason. Somewhat related story here... When I interviewed, before I saw the classroom, the AP that was interviewing me was very apologetic that there wasn't a Smartboard in the classroom. They had just gone through a rebuild and reconfigured most of the classrooms, and most had a Smartboard. Mine had "just a normal screen." When I walked in I was good with the screen. It's almost floor to ceiling and covers probably 80% of the width of my room. Much better than a little Smartboard. 

I taught a Cisco networking class for a couple of years and we had to stay off of the district network any time we were doing networking stuff. What I did was build a separate network in the middle of my room with old computers. Ran network drops from there to the racks in the back of the room so we could hook into switches, routers, and stuff. Once we got to the point where they knew how to program routers over IP instead of wiring directly in I started messing with them. For one of the labs I closed the ports they needed on the router. One student figured it out and started scanning ports on the router to see if I had changed it. I had. We spent a lot of time going over the reasons you would want to do certain things like port scanning. When it's the right thing to do and when it's not. I also posted links to several articles about people getting arrested for computer crimes each week. Since our network was segregated, we could do pretty much anything we wanted to on it though. A couple of times I setup a web server and had them try and break in. My personal favorite though was having a student put their iPhone on our network and had about 20 computers constantly pinging it. You could watch the battery meter dropping and by the end the phone was seriously hot.