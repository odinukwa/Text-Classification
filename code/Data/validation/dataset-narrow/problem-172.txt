It's quite a extensive algorithm, so I won't try to replicate its contents here. The link provided above is very stable and will not disappear :) Feel free to ask questions in the comments and I'll try to clarify the answer if something is not clear! 

Based on the chat discussion some extra information: 6to4 is an obsolete technology. It was meant to give IPv6 addresses and routeability to people whose ISP didn't provide proper IPv6. A quick overview: 

That block of addresses is reserved for service providers to be able to do NAT in such a way that it doesn't conflict with the normal private address space. If you start using it as private space then you're potentially creating a conflict again, so no: don't use this as private space. 

This does the same for the interface. It uses the to give an address to the interface. One problem is that you're using the same subnet on the tunnel interface. You should use separate subnets for different interfaces. The flag tells the router to generate the last 64 bits of the interface address based on its MAC address. An example to (hopefully) make things clearer: Let's take the 6rd settings from the example: 

Yes, IPv6 uses one /64 per LAN. Your ISP should give you a /48 or at least a /56. They get plenty of addresses from their RIR and they should distribute them properly. The whole idea behind IPv6 is to give everybody plenty of addresses, and ISPs that give you only a /64 are screwing it up... 

And that's it basically :) The problem with 6to4 is that it needs 3rd-party relays on the internet to relay between the IPv4 internet (to which your 6to4 gateway is connected) and the real IPv6 internet. And you usually have no control over which relays are used for your outbound traffic, and you certainly never have control over which relays are used for your inbound traffic. This causes many many problems with reliability. Connectivity to some IPv6 sites may work, to others it may not, or performance is really unpredictable etc etc etc. So it is therefore better use i.e. tunnelbroker.net. They provide proper tunnels straight to the real IPv6 internet :) 

Yes: it's normal DHCP as far as you are concerned. They might have different server software with different provisioning tools. You just have to stick to what the DHCP protocol provides you. That includes only using the IP addresses you get for as long as the lease time is and refreshing that lease before it expires. Just statically configuring an address and not getting/extending the lease with DHCP will not work. It might work if what you configure matches a still active DHCP lease but it will stop working once that lease exires. 

If you want to run a fully managed network where the DHCPv6 server manages all the addresses (and please think why you want this before choosing it, if you don't use the information in the DHCPv6 server then letting clients configure their own addresses is much easier) then the router has to turn off the A (autoconf) flag for every prefix it announces and turn on the M (managed) flag so that clients know that they are not allowed to choose their own addresses but that there is a DHCPv6 server available to help them. This is how to do that on a Cisco router: 

Both Ricky and Ron are correct. IP packets have a source and a destination. The device at the destination uses the source address to determine where to send replies to, and if there is an error along the way the routers will use the source address of the packet to send error messages to. 

All of these classes were allocated from fixed ranges. Class A contained all addresses where the first digit was between 1 and 126, class B was from 128 to 191 and class C from 192 to 223. Routing between organisations had all of this hard-coded into the protocols. In the classful days when an organisation would need e.g. 4000 addresses there were two options: give them 16 class C blocks (16 x 256 = 4096 addresses) or give them one class B block (65536 addresses). Because of the sizes being hard-coded the 16 separate class C blocks would all have to be routed separately. So many got a class B block, containing many more addresses than they actually needed. Many large organisations would get a class A block (16,777,216 addresses) even when only a few hundred thousand were needed. This wasted a lot of addresses. CIDR removed these limitations. Classes A, B and C don't exist anymore (since Â±1993) and routing between organisations can happen on any prefix length (although something smaller than a /24 is usually not accepted to prevent lots of tiny blocks increasing the size of routing tables). So since then it was possible to route blocks of different sizes, and allocate them from any of the previously-classes-A-B-C parts of the address space. An organisation needing 4000 addresses could get a /20, which is 4096 addresses. Subnetting means dividing your allocated address block into smaller blocks. Smaller blocks can then be configured on physical networks etc. It doesn't magically create more addresses. It only means that you divide your allocation according to how you want to use it. What did create more addresses was Masquerading, better known as NAT (Network Address Translation). With NAT one device with a single public address provides connectivity for a whole network with private (internal) addresses behind it. Every device on the local network thinks it is connected to the internet, even when it isn't really. The NAT router will look at outbound traffic and replace the private address of the local device with its own public address, pretending to be the source of the packet (which is why it was also known as masquerading). It remembers which translations it has made so that for any replies coming back it can put back the original private address of the local device. This is generally considered a hack, but it worked and it allowed many devices to send traffic to the internet while using less public addresses. This extended the lifetime of IPv4 immensely. It is possible to have multiple NAT devices behind each other. This is done for example by ISPs that don't have enough public IPv4 addresses. The ISP has some huge NAT routers that have a handful of public IPv4 addresses. The customers are then connected using a special range of IPv4 addresses (, although sometimes they also use normal private addresses) as their external address. The customers then again have NAT router that uses that single address they get on the external side and performs NAT to connect a whole internal network which uses normal private addresses. There are a few downsides to having NAT routers though: 

You are pretty accurate. IANA is the Internet Assigned Numbers Authority. Its function is to make sure that numbers that need to be unique are actually unique. That includes protocol values, IPv4 addresses, IPv6 addresses and AS numbers. For IPv4, IPv6 and ASNs we have a distributed system: IANA doesn't assign those numbers directly to the users. They allocate big blocks of numbers to the five RIRs, the Regional Internet Registries. There are five RIRs: ARIN, RIPE NCC, APNIC, LACNIC and AFRINIC. Each RIR has its own region, and in each region the internet community (so not just paying members, everyone can participate) decides on the local policies for further allocation and assignment of those numbers. Giving each internet user their own address would be a bit inefficient, both organizationally and technically, so most addresses are allocated to the members of the RIR. They then further assign numbers to end users etc. Such members are called LIRs: Local Internet Registries. Often a LIR is an ISP who performs registry services for its own customers, or a large enterprise that is the registry for its departments and/or subsidiaries. When someone has been allocated or assigned IP address they usually want to route them on the internet. This is done using the BGP protocol. Each network that has its own policies (including transit connections, peerings, local routing policy etc) is an Autonomous System or AS, and needs its own Autonomous System Number or ASN. When you are a small network and you only connect to one upstream provider you don't have your own routing policy. You follow the policy of your provider. In that case you can let your IP addresses be announced from the ASN of the provider. That is how multiple organisations can appear as one autonomous system: one organisations controlling it and their customers using it. When you have multiple upstreams and/or peerings you need to get your own ASN. The other way around also happens: one organisation that runs multiple distinct networks. In that case one organisation will have multiple autonomous systems, each with its own ASN.