and so on. On port D18, however, the last port in the LAG, I see every single WAP. This is the case with both CDP and LLDP: 

With Cisco ACL's, there is an implicit deny ip any any at the end of every list. You need to explicitly state the traffic that you want to allow/deny. Note that it short-circuits on the first ACL entry it hits that it applies to, so if you're sending a packet from a host on the 208.73.210.0/23 network, it will first hit this ACL entry: 

This will allow all traffic except incoming traffic on FastEthernet8 with a source address of 208.73.210.0/23. 

I recently had two switches from different vendors, one was an HP 5412 Chassis running ProCurve and the other is an Alcatel 4-Switch stack, have a LACP misconfiguration which brought down a portion of the network via a switching loop. The LACP configurations were correct at first, but one of the switches (Alcatel stack) was restarted for maintenance, and the startup configuration was not saved correctly. This meant that the traffic was not handling 802.1q tagged packets on the correct VLANs and were all on the native VLAN (in this case, VLAN 2). The other side, however, attempted to negotiate LACP and, since there is no spannign tree within the network (not my design, I assure you), it created a switching loop. My question is why LACP does not detect this mis-match and automatically disable the ports? Or rather why is it allowed to forward traffic if it has not negotiated a LACP LAG? 

I understand the concept of logical address, and physical address when it comes to computer memory. That is, physical is the actual address and logical address is what the applications think the address is. The operating system that lives between the applications and the physical memory translates between the programs memory and physical memory. What's the equivalent of this when it comes to networks? From what I've read, IP addresses are Logical, and MAC addresses are Physical. What does this mean exactly? When I send something to an IP address, I'm really sending to some translator who figures out which MAC address I want to send to? Does this mean that at any given time, every MAC online is assigned to one, and only one IP address? Can you please clarify and explain, preferably with an example. 

To phrase it as it's phrased more commonly: What does tell us? I've seen this formula - Transmission Efficiency - mentioned a lot when it comes to networks: 

In past experience, this is generally indicative of a loop of some sort. (Note: This is a school, and students have been known to intentionally plug in an Ethernet cord from one wall to another. We have plans to re-mediate this, believe me.) The setup is rather simplistic in that there are a total of 324 Cisco WAPs, each connected to one of the four switches in the Alcatel stack with a 1 Gbit uplink. Now, on the core, when I run: 

The left most 18 bits represent the network, while the 1's represent the hosts on the network. To find the broadcast address, just maintain whatever the first 18 bits are in the original 10.0.0.0 address, and replace the following 14 bits with 1's. In order to get the next subnet, simply increment the left hand side: 

(for each port. I did it one by one instead of a range to specify). Each port from D11-D17 shows the MAC address of the Alcatel stack as well as the port to which it is connected in a fashing like: 

The question "What is MAC for?", "What is IP for?", and even "What is the difference between MAC and IP?" have been asked many times, even on these forums. Yet, there is STILL no clear explanation, of Why do we need both? The question has two facets: 

Every device - or more specifically every network card - has a MAC address. If I want to send a message from Device A with MAC address to Device B with MAC address , why do I need to add more address systems? What does IP tell me that MAC doesn't? It's clearly not more unique than MAC. It doesn't seem to add anything special. Every device on the network has an IP address. Pretty much exactly like the above question, if we can find devices using their IP address, why do we need to add another address system like MAC address? Why isn't IP enough? 

What does each one bring to the table and why do we need them both? I'm looking for a clear explanation and example of why MAC alone would not work and why IP alone would not work. 

I have a 4-switch stack of Alcatel Omniswitches connected to an HP 5412 core via 8 uplinks; these are ports D11-D18. Unfortunately, the client did not yet give me access to the Alcatels, but a request has been sent out. Meanwhile, I am seeing a high amount of TX/RX traffic on several ports in IMC regarding the core. An example: 

Note that the 208.73.210.0/23 network will still be able to communicate to other networks over different protocols (UDP, ICMP, etc). To block all outgoing traffic, try: 

and so on... Similarly, simply change all of the host bits (right most 14 bits in this case) with 0's while maintaining the first 18 bits' original values to find the network address. So, the last subnet would have to be, while keeping the first octet in tact (RFC 1918 address): 

I have a physical host server connected to an HP (say, 2650 series?) switch. The host is running multiple Hyper-V virtualized OSes, each on a different VLAN. If I make the switch port dot1q tagged for each VLAN and untagged on the main host, will that allow access for the OSes to function and connect to the network? In pseudo-Cisco terms, if I make it a trunk port for VLAN 2&3 and an access port for VLAN 1 (you can do that in HP), will this solve my problem? This is very time sensitive so I'm sorry for the short post. More information is available to me if needed. Thanks! 

I know it's just an example but is it true that the telephone network is isochronous? I was always under the impression that it's non-isochronous since telephone conversations happen in live time at any time - and they can't be constrained to any particular clock. If the Wiktionary article is correct, why is this? 

I'm having trouble understand exactly what the point of a subnet is. I read about WHAT it is, and all definitions say something along the lines of that it is a logical grouping of nodes with the same first digits. I can't understand what benefit this provides. To me this sounds like implementing "sub-student groups" for students at my university, based on their IDs. So for my fictional student ID of , I'll be part of the substudent group, the subgroup, the subgroup etc. This seems so silly and obvious to me. Me and the guy with don't really have anything in common. We might be in totally different faculties and semesters apart. From what I read, it can be the same with "subnets". So why have them?