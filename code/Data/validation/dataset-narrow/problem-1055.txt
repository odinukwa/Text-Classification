In its naïvety, this is an obvious security risk since the contents of could be changed by the user, but if it concerns local operations, in practice this should be of no concern (unless you don't trust the local user, but then you have other, greater problems, I believe :-) ). 

Note: these commands will run the first time after a week and then periodically, not directly. Change according to preference. See the projects' documentation for more info on attaching/detaching sessions. ( is GNU specific, I believe. Just put there instead if the version only supports seconds.) 

Use with if your version supports it to edit the file in-place. The real "magic" is the command of the form "", where is a line number, denotes "insert" and is the text to insert. Here it will expand to 

The syntax for the time specification corresponds to the one for . See for info on the switch named for more information. It is not possible to use e.g. to do this. It was reported as a bug against GNU find, and was solved by implementing in findutils 4.3.3 (~2007) as I showed above. 

Yes. When you choose "Beta 12.04", you tell your computer to use packages that are "tagged" 12.04. They call it "Beta" since they are still in the testing phase, but you use the exact same repository that will be flagged as final when the beta period is over. It will be a seamless transition. You can also go from e.g. 11.10 to 12.04 without reinstalling from disk - everything can be handled by online upgrades. If you have an older version of Ubuntu currently installed, just follow the upgrade instructions. 

You could create a file with the patterns, one per line, and just run . Perhaps it doesn't fit you, but it's difficult to know without explicit examples. 

I often split Vim windows to edit several files, but I use tmux if I need to combine Vim with a shell in a single terminal. I haven't had good experiences with the Conque plugin personally, but I thought I could mention it to help complete the discussion. 

Scroll lock is used by e.g. Microsoft Excel and some terminals in its original meaning: modifying the arrow keys to scroll the content instead of moving the cursor. Pause/Break is used in some IDE:s to break output for debugging purposes. It is also used in some programs similar to Ctrl+C, that is to break execution. Win+Pause also triggers system properties in Windows, though that is highly non-semantic. They appear since they were part of the ruling keyboard standard (from IBM) when the PC market started to stabilize. They are included in the common QWERTY layout, and thus program developers may assume they are present. It would spawn large problems if keyboard manufacturers would start stripping buttons at will, and their products would probably not sell. Caps lock is used not least in helping input for people with dexterity disabilities. Num lock is always on for me as well, but that does not mean that no one else uses it. Some programs offer different functionality for its different states, giving you 11 extra buttons in a good position. 

A more hack-ish and probably cheaper solution than a dedicated analog tuner with HDMI output is to use 

Since encoding is usually a highly parallelizable task, many cores will give an almost linear gain (i.e. 6 cores is ~three times as fast as 2 cores). See e.g. $URL$ for some real life numbers. The article also mentions that at least Handbrake doesn't scale well beyond 9 cores, so many more than that won't increase speed (unless you run several parallel jobs, which probably is connected to other slowdowns, though). RAM is used to keep the images in memory which is needed, but the limiting factor will almost always be CPU power. So: if all you want is encoding performance, cores will give you the best boost per monetary unit (within reasonable bounds). 

And curse the programmers (their bosses, more likely) that don't include progress bars with any connection to reality. "People like stuff that is moving. Let's spin that cube/progress that bar, even if nothing is happening!" 

should give you a list of the process IDs belonging to currently running processes started by the user. In the package you also get which kills a process based on a similar search process, so you wouldn't really need a pid file if this is all you are going to use it for. 

"" is a UUID that uniquely identifies a disk in this case. The mapping is available for you to see with e.g. 

which match only the files except . It quickly becomes convoluted, and is in my mind a more extensible solution for complex file matching, but if you want Bash only, similar constructs are possible. 

If you have saved all the links on separate lines in a document, you can pick out all links on the domain with e.g. 

1. One simple change to not die on file names that start on is to add (means "now all options have been given, only positional arguments left") before the file name arguments start, e.g. 

If you add to the playlist after the intended file you want to play, VLC will quit after playback has finished. This is surely possible to catch from the command-line. (Perhaps this is also what you really are trying to do: quit VLC after playback has finished and let the script continue.) 

and such have been issued with perhaps good intentions, but it is also more or less the one user error that could make me recommend "just reinstall" for a *nix system. If you just , then you will among other things give read and execution permission to every file for anyone. If one just removes execution for every file (directories need it to be browsable), then one will remove the execution bit for some files that were supposed to be executable, and so on. In this case it is perhaps not as severe as , but in e.g. there are many files that are not supposed to have read permissions for anyone. A small excerpt: 

You can edit multiple files in different "windows" inside Vim with vertical () and horizontal split (). The above trick can also be combined with the Vim plugin Conque which allows you to run any terminal command inside Vim, e.g. a shell. 

First: perhaps Shift+← and Shift+→ work as substitutes. But for the problem in hand: it's most probably some input anomaly, where some part of the chain is not really aware of what "language" others are talking. With PuTTY in the mix, this is not unexpected. A practical way to solve it: 

to set display command history times. If you have not set the environment variable when using a session, the command times will not be saved and you will then of course not be able to see them. By default the current time will be printed as the command time for every command lacking a time indicator. 

in a directory to see in which order things show up. This is the same order that would remove the files. 

That folder should just contain Wine specific profile files and files installed in the virtual Windows-like environment via Wine. Its basic structure is easily recreated by just running again. You could/should check why it takes up a lot of space, though, so you don't accidentally delete some useful data that you have forgotten about. I just did a test, and a clean Wine profile directory takes up 16 MB on my system — if yours is a lot larger, you probably have something hidden there. 

( is just a counter to show you what is happening) If you wrap your logic in such a while loop, you can access the first argument as , then use which pops the first item off the argument list, and then iterate again and now is the originally second argument. Do this while the argument count is not 0. 

If this is something you will do often, see the "Auto update tmux pane size for nicklist.pl" section at Install and setup BitlBee for an irssi plugin that keeps the tmux pane size constant. 

If you don't know the number by heart (but you need to know it if you are going to connect to the server anyway), you can check e.g. for information. If I do that locally, I see the processes 

UPDATE: Ah, is only read for interactive shells. Read , section "FILES". You don't start an interactive shell when you use in that way. 

Uses find to create a string of separate byte sizes ending with "+". This string, with an ending "0" to keep the shell from complaining about an empty operator, is given to the built-in shell calculator function. 

and look at the left-most column corresponding to the Apache server. This is the user that is running Apache, and by inheritance also PHP. Change ownership of the upload directory to this user and restrict the permissions a bit, e.g. if the web server user was that belongs to the group of the same name (using a sample path of ): 

Drag and drop like this is not trivial to implement over network, and running a file manager over X forwarding like this will not (trivially) work for the purpose. You should use SSHFS instead to mount your remote server in your local file system over SSH, and the use a local file manager to browse that mount. This way drag and drop will work over SSH, and the file manager will be much snappier. Another alternative is to use a graphical SFTP client such as Filezilla, which will allow you to log in over SSH and get a tree view of your remote files, with drag and drop support. 

It could be done using the PDFtk CLI tool (included in the Ubuntu repository) and either directly in the standard PDF reader Evince, or using PDFjam, which requires a LaTeX installation, though. In Debian Sid, PDFjam is currently contained in the package. The idea is similar in both cases. With only PDFtk and Evince: 

as in your linked post seems to be the most correct tool for the job, except using e.g. the available Python libraries to bind directly to the APT system in such a scripting context. With : 

This is not trivial to restore. And that was just one directory. All in all: even if you did make SSH work again, you have had some not trivially repairable permission information loss. If it concerns a strictly personal server, the consequences are probably not that dire, but the permissions are set as restrictive as possible for a reason. In e.g. the log files I mentioned above, sensitive information may be stored, and now it is enough for an exploit with gives regular user rights to find this out and gain even more information for root permission attacks. 

Another way to solve it which avoids the problem more or less completely is to instead of symlinking the binary in your path, create a small script at that contains e.g. 

...but compiling a full list is not possible (if someone wants to try here, feel free to edit my post). Your best bet is to use search engines to find the correct notation for your current application from case to case. 

All in all, it might be better to simply have the material stored in the archived form and instead use on-the-fly decompression or something similar when you want to use it. There might be other benefits to keeping the archived format. 

...just as you try to do. If this works, then you can set a "true default" via e.g. , where your aliased sink should show up as an available output device. This way makes you able to switch output on the fly for all applications. The definition of the remote sink can also be done nicer via Avahi, but I haven't been able to get that to work here just yet (not a PulseAudio problem). 

You might have hit Ctrl+S, which turns off flow control in terminals and stops the terminal from accepting input. It is reenabled by pressing Ctrl+Q. 

The idea is that if you are at an untrusted location, e.g. free public WiFi, you can open up an encrypted channel to your home server (you must thus have an online computer at home) and relay all traffic through that. This will make sure that no one at the public WiFi place can get any information about your browsing (except that you contact your home server). It would be pointless to set this up to relay traffic from your local computer to your local computer. Nothing will be hidden, complexity is added. 

What you describe sounds like a shell issue, and nothing that has to do with Urxvt/Gnome Terminal. Probably Bash is used in both cases - perhaps you are missing the package or an equivalent in your current setup (it seems like you have left Ubuntu, but you don't say what you use now, so I can't give more specific tips). Try installing that. 

EDIT: I assumed Heroku ("hero", and some Japanese ending, come on :-) ) was a game that you wanted to run a server for, but the other answer says that is not the case. Ignore everything below this line (will remove the post later, just wanted to make it clear that I saw the other post). 

You say you need to do it "in Bash", but you seem to mean "in a script" and not "using pure Bash syntax" (there is a difference). I assume you want the "in a script" meaning. 

Check your temperatures. I had this problem with a computer that ran far too hot, which didn't crash the computer (though it throttled the CPU down), but a restart would fail since the BIOS would not let the computer start at that high temperature. This is consistent with that your problem goes away after a few minutes, when the components have cooled down (most likely the CPU). Solution for me: install an extra fan. 

Will return true (exit status in shell script) if the package is installed, false (exit status ) otherwise. 

This was on my system, and shows that UUID points to what is currently and so on. Equivalently you can run to get a list of these identifiers. UUIDs are unique for a certain partition and do not change on reordering of disk connections, such as insertion/removal of physical devices, which makes them a more robust identifier in . 

tests if the file exists and is executable. See for more information. If you want to create working relative links you might need to think about how you provide your directory paths, or use the option to (which is a somewhat new GNU extension (≥ 8.16), but should be present in all "recent" distributions). If you want to traverse into subdirectories using this method, activate with and give the search path as (see in the Bash manual). The test will include directories with the executable bit set, which might not be wanted. If it is a problem, an extra test to see if the match is a file can be added. 

Just call from Apache and the script given in the above file should be run as the user specified in the above file. 

You said you used /. With that combination, this script kills the terminal from which it was started: 

you will not get Bash as return value, but Dash. You have the correct preamble, but that only matters if you run the script as after making it executable. Right now you force-run the script via the interpreter, which probably is Dash, and the construct is a Bash specific one. That's "why?". If you just replace the double brackets with single ones (and change to , since your script is now only using POSIX functions anyway) it should run as intended. 

where is for the data portions of the disc and is the audio data. There can be both on so called "mixed mode" CDs. Furthermore: 

where is a safeguard during testing. The same code in an overly commented, more readable script version: 

The words "Stable", "Testing" and "Unstable" are first and foremost pointing at package versions. Packages enter Unstable once they have been correctly packaged as per Debian standards and tested for major incompatibilities in the "Experimental" branch. "Unstable" does not mean "Will crash", but "the application/library versions are upgraded continuously from upstream in this branch, and thus the versions are not stable". Testing is the current candidate for the next "Stable" version. Packages propagate from "Unstable" when they have been deemed good enough for a possible inclusion in a future "Stable" release. In "Testing" they are further "tested", and here the application/library versions are also updated until the "freeze" occurs (this happens a few months before declaring this version as the new "Stable" version). After the "freeze", the aggregate amount of known bugs among all applications/libraries in "Testing" are worked down to 0, and finally the release is declared Stable. This version will now retain the current package version with almost exclusively security updates during the lifetime of the stable distribution. "Why?", you ask: in e.g. a corporate environment where everything must "just work" (tm), this is essential, since no one will pat you on the back for keeping the packages at the latest version if it risks downtime because of newly introduced bugs. At home you should in practice be able to be completely safe with "Testing". Many (including myself) use "Unstable", not because we like living on the edge and don't care about availability, but because this gets you new package versions and a good opportunity to help iron out bugs and such. So, if you want to stay within Debian and have the most recent upstream package versions, use "Unstable".