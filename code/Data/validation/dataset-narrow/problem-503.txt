Is this a property in an object? If so why have you named it ? Give it a proper name such as or something along those lines to make it more obvious what it does. Now it's just confusing. And for the other function you could name it . If you included some additional markup it would help your question a bit. 

I've made my own pagination service for my forum that I'm working on. I'm quite happy how it turned out but it feels a bit rough around the edges so I would like to know how I can shorten this code and make it more efficient and better structured. The comments are overly redundant just so that I can pick up on the flow of the program really quickly now during the production phase whilst working on other things simultaneously. Figured it'll also help you guys understand what's going on easier so I left it in. Any pointers here are welcome, let me know if you need any additonal information. The markup (excluding banner): 

This might need a bit of editing but you get the idea. However I'm not sure if any of these are actually better ways of doing what you want, but it's other ways of doing it. It might make everything more manageable if the code gets even bigger. Hope this helped. 

I need to concatenate 3 input fields into a string which is formatted as a date , using or will not work in my scenario because Firebase doesn't allow it for some reason. I came up with a rather ugly solution, but I'm not quite sure how to improve it. is bad for performance, but I think that it is needed because I need to completely remove the properties from the object once they've been used. 

In a bigger project of mine I'm using angular to create a dropdown menu dynamically and then toggling a dropdown menu for some of the menu items. This is why I got a function that toggles the dropdown menus for only the items that should actually have one. However, I feel like I should try to DRY this out a bit since I'll be repeating the same function even more than what I've done so far. How can I improve this code? Should I create a self invoking function or something similar? Here's the functions (they're part of a controller object that I left out): 

Also, you're using some nice concise bit-shifting, and you'll have noticed that VBA doesn't have any shifting operators, but you might consider using some bit-shifting functions to make the code slightly clearer (and you can re-use them everywhere else that you need to shift bits. And finally, unless you're certain that will always be a single celled reference, the color will default to if there are more than 2 cells in the range and they have different colors. 

If the subform is set dynamically, and you only know the return type will be a Form, then return that base type: 

If sorting the data doesn't help move the blanks to the end of the data range, and deleting the rows is a better solution, given your data, then you can try this approach. If you know a column will always have data (and never be blank) for a valid row, then you can achieve the deletions without a loop. 

But the would ideally be defined as a constant instead of as a magic number in inline code. Check bounds before using 

If you absolutely need to use your Find approach, or if you'd just like to see a centralized error handler, as per you question, then you can use a variable to store the custom error message, and then refer to that variable from the error handler: Also, in you On Error statement, you don't need the trailing ":" as that indicates that the line will have another statement following the ":" 

I have an XML stream that looks like the following (attribute and node quantity , and node depth reduced for demonstration purposes.) 

I assume you're working with a 40MB file instead of a 40GB file. The performance will vary greatly depending upon: 

I've sacrificed a few features of Collection (like being able to add a Widget before or after an existing collection key), and I haven't honored the CompareMethod of a Dictionary, but these are easily added. Have I missed anything? Am I missing some performance tweaks? 

The advantage of this method is that you can use any selector. For example, if you want to use class selector for one of the checkboxes, just use as the selector in mappings and it will work. 

Lodash Do you really need a library for this functionality? The Same functionality can be done without Lodash or any other library. If Lodash is only used for this functionality, it can be removed. Missing Semi-colons Although, a small thing Automatic Semicolon Insertion can lead to unexpected behavior. The usage of the semi-colon is not consistent. I'll recommend using JSLint/JSHint. Alternative I'll recommend the use of and String methods to make the first character uppercase. 

Using with value accepts second parameter which will be converted to Boolean internally and depending on the value, the action will be taken. So, the and statements in the question can be combined as 

when working with strings, work as string concatenation operator and operands will be implicitly casted to string. Thus, in is not required. Note that, the code is not equivalent to , this is code and is equivalent to 

Line #1 is the prefix Line #2 will give Line #3 will add suffix to make the selector valid. With this, the code will be 

: Match a digit : Match either a space character or hyphen and add it into first capturing group : Match digits n times. : Match whatever is in first captured group(see #2 above) 

loops: loops is used three times in the code. Nested loops should be avoided. There are very few cases when nested loops are required. Always try to avoid nested loops wherever possible. In the first loop, the keys of the object are joined using tab character. 

Then, to disable/enable these buttons, they can be referenced. HTML5 attributes HTML5's custom attribute can be used to store custom data on HTML elements. 

Using common class Sometimes, adding all the elements under a container is not possible. In such cases, adding a common class to all the elements will allow to select elements using class selector. 

`CurrentDb` is a function used like an object is a function that returns a pointer to a . It's a member of the Application class, but note this text from an old KB article: 

IMO, you're better off with a function that either returns a boolean that confirms the sheet is present (before you try to do something with it), or returns a reference to the sheet or otherwise Nothing. That way you can keep you error handling concise, and avoid the need for labels. Here's an example of the reference approach: 

And, I'll use an Enum for setting the state of the predeclareed instance. It's either ready, or it's Initializing a new Point. Note the use of a leading to make the non-default enum member hidden, and the use of square-brackets to make the syntax valid. 

That can be confusing to read, and difficult to debug. Consider using independent variables Magic error numbers You've done half the work of creating custom error numbers: 

Hex to String - Preserving the leading 0 Hmm, I think I can use a bit trick to make the Hex conversion more efficient. 

Waking this one up... ExecuteNonQuery Return value never assigned never has its return value assigned. Return value type You have an opportunity here to return a richer value than a . Very often when executing a command, you're interested in the number of records affected. You can return the number of records affected, or -1 if there is an error. Execution Options You're not explicitly setting any on the . As per MSDN: 

And why not throw in a factory method too, although some might argue it's a return to the year 2000. In order to get the enumerable features of a Collection, I'll have to use a Collection behind the scenes, but I'll augment that with a Dictionary that keeps track of the keys used in the Collection. Then, when I want to test the method, I can check the Dictionary (and get all of it's hash-tabled goodness) instead of enumerating the Collection or suppressing a potential error by checking the index/key directly. I also want to make the Collection configurable so that it can be 0 or 1 based according to preference. I've made this setting private to the Collection, so it's up to the developer to adjust for the purpose at hand, but it could easily be exposed as property or set in a factory method. Pass the Widget First, we need a class for the objects that we'll put into our custom collection. A will do nicely. Nothing special here - just a class with a few encapsulated fields, and a bonus read-only property for returning an instance of itself. 

The events bound on are not needed to be wrapped inside . Also, multiple statements can be chained and function reference can be used directly as handler. 

which basically says, when hover on , select next sibling and it's direct children , having class. Demo:Although, you cannot see images, you can see it works as expected when hover over an image. 

Conclusion Now, the JavaScript code don't have to be written again for each new element. Just adding the markup with required attributes will automatically work. The relation between HTML element-JavaScript handler is reduced from many to many to many to one. 

Here are some suggestions: As is used either the environment you're using supports ES6 or the source files are compiled to ES5. Following features of ES6 can be used 

Naming Conventions The variable doesn't tell what it contains. does reflect what it contains. , , , - huh? , the name of the function has nothing to do with filtering. It is iterating over some data and calling provided callback for each property. Global Variables is global variable. Global variables is bad practice. Please see Why are global variables considered bad practice? and I've Heard Global Variables Are Bad, What Alternative Solution Should I Use?. Using Proper Methods is used to update each element in collection. Here, is used just to iterate over the elements. You can use , , , etc. in such case. Diving into DOM In callback, you're diving into DOM three times to get the same element. The element can be cached and reused. Method Chaining in can be chained. Unnecessary code is not required as only returns properties in an object. can be safely removed and flag on the next regex can be used. Also, HTML is case insensitive. No transformation is needed when changing attribute. 

UPDATE: After editing by OP. Both the approach will work for the other functionality too. So, the answer will cover those cases too without updating it. OP just needs to write similar code for other functionality. 

Despite the documentation above, does actually seem to return when the ParamArray argument is missing, but it's still safer to check the array bounds. You obviously have a private helper function in , but it is not necessary - if the ParamArray variable is "missing", it will be an array, but its upperbound will be -1, and its lowerbound will be 0, so the statement is sufficient. 

There is a trailing blank line, but CR MarkDown isn't showing it. Edit: With Excel working again, I imported the file, and I do get the extra header line, and if it is exported with a header line, and reimported, there are then 2 header lines, so I'm getting the same behaviour as you. You won't be able to rely on the position/order of VB_Attributes, so you'll have to parse the file. You're also assuming a user won't have intentionally placed a blank line at the top of the module. And what happens if the user has more than one blank line at the top of the module? The safest approach would probably be to count the blank lines at the top of the code module, before the export, and then adjust the number of blank lines found after the last VB_Attribute but before the actual code begins. That would potentially deal with any fix that might come to VBE. 

Hijacking the predeclared instance's fields In the factory method , I temporarily set the state and X/Y fields of the default instance, and then in the event of the new instance, I read those fields though the default instance's getters. As such, I've relaxed the conditions around being able to access the default instance's getters, but this could easily be re-added. The default will always have X and Y's getters return 0, in much the same way that the default will always have default value 0. 

Properties in Standard Modules Standard modules can have Properties, but as @Rubberduck pointed out, they're not necessarily intuitive (although they do force you to qualify a call with the module name, so there's that as a redeeming quality). You could write public methods instead, but you could also create a class, and if you wanted to avoid the need to it up, you could give that class a attribute. A class would better reflect the stateful nature of the settings, and would give you the flexibility of abstracting the persistence of settings from the retrieval and usage of settings. Right now, your approach looks up the value from the underlying table every time, and writes it to the table every time. That's time consuming disk access and page locking. It might be better to load the settings on demand, use/change the settings, and then save them on exit. Variable Names is presumably short for . Why not use the full name, or better still, something like ? could be confused for the statistical term , or a user might infer that the is Hungarian notation, but guess at what type that notation represents. SQL Injection Kudos for using the (presumably from @Mat'sMug's CR question), but you're building a SQL statement on the fly, and a malicious user, or inadvertent user could cause an error, or worse, by providing a parameter with a single-quote in the . What happens if the user supplied ? At the very least, sanitize your inputs. Better still, parameterize your queries and leave a sign up saying that Johnny DropTables isn't welcome. LateBound `PageFrame` property You're explicitly returning an , which forces usage of the property to be late-bound. You probably know the type of the return value, why not use it? If you know the return-type will always be an instance of , then return that type: 

The RegEx will match a single non-line-break character and check if that is followed by the same character any number of times. here is the complete match and is the first chaptured group value i.e. the character. 

can be moved to CSS. This will be better UX and user will not see any flickr on the screen if page take long time to load and thus hide the element by JavaScript. 

This will search for any string followed by until or is found or the string ends. Since, returns an array, use subscript notation to extract the value of . To check a checkbox, use instead of . See .prop() vs .attr(). 

Use to check if an element is having a class. will fail if the element is having more than one class Instead of iterating over s and counting visible s, use pseudo-selector. The same applies for the and See Live code snippet You cannot return from the . Only when is used in , the loop is exited. 

Eight Digits Digit-Space-Three_Digits-Space-Two_Digits-Space-Two_Digits Digit-Hyphen-Three_Digits-Hyphen-Two_Digits-Hyphen-Two_Digits Two_Digits-Space-Two_Digits-Space-Two_Digits-Space-Two_Digits Two_Digits-Hyphen-Two_Digits-Hyphen-Two_Digits-Hyphen-Two_Digits 

Less DOM interactions. Using this code, there is only one DOM dive to get and set the updated innerHTML. Single regex to replace multiple strings has better performance than multiple replaces with single string Shorter code 

Use the same value in the query param as the ID of element in the HTML so it can be directly used as selector If you don't want to change the query param value and ID of checkbox, create a mapping of param value and the selector 

RegExp Constructor vs RegEx Literal is used to create a new regex. This form of regex accepts a string as the first argument and returns new regex. This is used when creating regex from a variable. Since this uses string, the backslash is used to escape following character. This will produce unexpected results when regex itself contains a backslash. Example, will return . When using a backslash in this form, they need to be escaped . This is not necessarily difficult but requires to take care of escaping. Passing regex literal syntax to the constructor is same as literal syntax to create regex. So, is same as . Mistake The regex for object doesn't work for all cases. means to match anything which is not AND . If the key of object contains , this regex will fail. Check this demo. Removing solves this problem. Not a mistake, but a validation. Using quantifier instead of . says, match zero or more of the previous pattern. For example, will match which you might not want to match and process. Better use of capturing groups The regex will match the string starting with to the literal and put the complete string in first captured group. Then inside , and are again replaced