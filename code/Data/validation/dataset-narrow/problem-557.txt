This way if I am working on a project I can leave it (potentially in mid modification) and work on another library without the two being affected. The two will only ever interact after they have been installed into the build directory. This means I also add the following too my makefile 

I would get the time of day Loop over all the timers to see if they had expired and call the associated function. Once all this has been done you can sleep() for the minimum time required until the next timeout (assuming that non of the functions take too long). 

Also your bounds are a bit funky. You do beginning to end. Normally in C++ we do beginning to one past the end. If you want to be consistent with C++ usage you should adapt this methodology. Written as: 

Iterators A naming thing. Iterators should not have a type . Pointer may be a type of iterator but it is not an iterators type. 

You are exposing the name of the Saw just so you can sort. I think it would be easier to define the comparison operator rather than expose the internal works of your Saw. 

Don't do that: Allow your iterators to be comparted against each other with and . Then your code will look normal. Also in modern C++ the range based for assumes that iterators will work like that: 

There are more than two types of platform. You should make sure these are covered. If the code does not fall into a particular type then you should generate an error: $URL$ 

Don't put the void when you have an empty parameter list. Also if the destructor does not do anything then use the compiler generated version. 

I would make it so that you only have one sentanal. Then the list is empty when head and tail point at the same object. 

If you don't define it then the compiler will generate a version that does exactly the same (with the caveat that it will return a reference that allows assignment chaining). I have nothing against using void to stop the chaining but I though I should just point it out. Always try and make sue you symmetrically lock and unlock things like mutexes. 

a) Why not have a constructor that takes the two parameters to do the initialization. b) Who owns the object. The owner is the person responsible for deleting the object. c) If you had stored normal point objects in the vector this would not have been an issue. 7) This is just a tad nit picky: 

Will compile just as expected. Yet the test inside the function will never catch that -1. Truly unreadable 

I would take this a step further. I would create a class that wraps the string stream and does the imbue for you: 

Why not just a ? Even better why have search at all. Have a free list. Drop the head item from the free list and return it. When returning a value add it back to the head of the free list. NOTE: I am not talking about an explicit list structure here. You can have an array of objects. And an array of index values. Then the array of free items is contains the next element in the list. 

Dynamic allocation is relatively expensive (compared with local arrays). And you know the maximum value that a number can be. So you could just have a local buffer (you can even make it way oversized without much cost). 

You could use this will allow you to find the count in the most efficient way no matter what the type of the iterator. You only use Copy Semantics Your merge moves the objects between containers using copy semantics. 

Since you are using the member to make sure you stay in range then there is no need to call . This can be re-written as: 

Another thing pointed out in the comments is that all these jobs set to . This seems like a waste as this will be done by each thread (ie times). An alternative is to set to in one job and then add jobs that did nothing. This would have worked just as well and not have been wasteful in attaining the lock for each thread. Initially this may seem true but this argument means you are thinking serially about the code. Once the job is picked up by a thread it may be unscheduled at the hardware/OS level and a bunch of other threads are then executed (so potentially all the do nothing jobs may finish executing before the job to set to even starts executing (even if it is pulled from the job queue first). So because we can not guarantee that any particular job will finish before any other job. They must all set finished to true (or be forced to wait at some barrier). You are accessing mutable state without locking it: 

Also I would say that pivot is really the value you are pivoting around. Not the location of the value you are pivoting around. 

If this was asked at an interview then as the person asking the question I would have expected you to ask a couple of more questions about the input format. What we have here is relatively clear for the simple example but there are some subtitles that come out form this that we need to tease out from the input format. 

The only reason to use is to disambiguate the use of shadowed variables. But shadowed variables is an error waiting to happen. So it is best to avoid shadowed variables entirely (even turn on your errors to make sure they don't happen) 

Types and names In C++ the most important part of the program is the type information. There is nothing more important than types. Get your types correct and you are 85% there in a C++ program. As a result it is useful to be able to distinguish types from objects in the code. So a common convention is to use a naming scheme. A very common naming scheme is that user defined types have an initial uppercase letter while objects (variables/methods/functions) have an initial lower case letter. 

Your check for invalid characters is Windows specific. The OS will usually have a platform or OS specific set of functions for checking valid characters. 

If you're code never returns anything but 0 then I would not return anything (let the language do it stuff). Do this to distinguish it from code that can return an error code. I hope you profiled to make sure it was worth reading the file twice. 

This returns the distance between two iterators (from the same sequence). Standard Swap usage For this to work: 

Have a working version of MySQL implementation of ThorsSQL library done. If you want to check it out you can find the whole thing on github ThorsSQL. This is a follow on to previous code Reviews: Part 3: Layer 4 Part 3: Layer 3 Part 3: Layer 2 Part 3: Layer 1 Part 2 Part 1 The documentation for these classes is here: Part 3 (Layer 5): Request/Response Interaction with the SQL server is normally done via a / cycle. The client makes a request to the server and the server responds with a response packages. So I abstracted these two different types of package. The base class has the abstract method . This is called by the object to write the object onto the stream. So each specific child instance of must understand how to write itself to the stream. When we look on the stream for a response the first byte indicates the type of response message. Unfortunately some messages have the same first byte and we have to know what message was sent to understad that first byte. This is why the method takes an action map as a second parameter. When you call you pass a map of valid byte codes to functors; these functors create the correct child object from the stream. Note: Default response object are automatically handled. Example: 

Can't see it! Add braces. and use more vertical space. You should use around all sub blocks. It will help avoid issues in the long run. 

BUT. In the same function you also have another set of statements. That always result in a return. So the code never falls through to the last 'NIHL' statement. 

scratch will Never be NULL. I think merge (in merge_recurse) is easier to write than you are making it: 

are a waste of space. They are not part of the public interface and the function name clearly identifies what they do. Useless comments are worse than no comments as they need to be maintained. The check for file existence seems overly hyperbolic: 

The header file should include all the header files it need to make the required types available. There is no in this file. Also you do not prefix with so how does it know where it is defined. There are a couple of explanations to both these problems none of them good. NEVER put in a header file. NEVER make a header file depend on being included in the correct order. Vector.cpp 

Making the code better. The only difference between iterator/const_iterator is the type returned by and (one is T and one is T const). So you can create a base iterator type then specialize for const and not const versions.