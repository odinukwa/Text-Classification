It would be an advantage if you could get with the schools that you know who use your product and get them to write a recommendation about it. Use that when you are out pitching to other schools. If you can find hard numbers / results that would be extremely helpful. You need to turn yourself into a door-to-door salesman. It'll be a lot of foot work and a lot of convincing revolving around why they should use your product. Call schools and ask if you can get a moment of the deans, assistant dean, principle, etc time to talk about a very useful product you feel would be a very important learning tool. If you can't get them, then someone else that represents the school. A plus on the university front is that you can approach the separate colleges within the university and pitch to their staff, which is probably what you want to do for a game project. You figure you can approach one University and have 6 or so meetings/potential clients. Not bad. I've been on this road before but my buddy was selling an application vs. a game product. Games will be a tough sell unless you can really show what it can do. I might market it under a different buzzword instead of purely 'Game.' Simulation? Serious Game Project? 

I find it very difficult to randomly jump on a project with a random individual for free. You may find someone willing to join your project for free but they will likely have little to no experience and there is no promise they'll stick around. My single, biggest piece of advice to find artist's (or programmers, or audio guys, or ... : Network Have you ever been to the Game Developers Conference? You'll meet some amazing independents there and you don't have to fork out the money to get the top tier pass to meet them (scout events, meet-ups, etc). But if you do pay for a good pass, you might be inclined to jump in an art session to network. ;) GDC isn't in everyone's bag-o-tricks so I'd be on the look-out for any game development related events around you. If you're in school you can try to put together a meet-up on your campus to bring people out. Get yourself out on the web and abuse the forums around you. If you've seen an artist's work send them a message and say hi. They might not be available but they may know a few artists that are. While you're developing, thing about starting a development journal on gamedev.net or blog. My dev journal was what led me to join an independent team from a friendship that sparked. Help Wanted Forums tigsource.com and gamedev.net have some pretty friendly help wanted areas. I posted on tigsource for some artistic help and I received a couple of responses. Contract Work If you don't put in the time to network, you're flat out going to pay for your artwork on freelance websites like odesk, guru, craigslist, or others. 

Be sure to add this to your RSS reader. He is continually writing new posts. Don't forget to read the comments! 

It depends on what you're building. You may even be able to get away with just using Core Animation if it is not graphic intensive (my last two games were based off of taking advantage of Core Animation). If you do plan to push a lot of graphics, I would highly recommend Cocos2D for your 2D game. It's based off of OpenGL ES and so far I am really enjoying it. The learning curve has been relatively smooth. 

I would send (and have) an e-mail to every single website out there that reviews games of any kind. But not before I have an almost completed game. Be real. Be humble. Show off something innovative. A lot of places won't really take their time looking at you until you have something put together. Don't try to approach reviewers to review a pre-alpha-alpha prototype. It might sound like common sense but I have read reviewers make that kind of remark (which is enough of an indicator). As for feedback. Grab a few play testers, preferably locally, that you can watch play your game. That will be some of the best feedback you can get. Alternatively, follow the other's advice. tigsource.net, gamedev.net and devmaster.net forums. 

Well... While you're learning don't forget that Google is your true friend in this endevour. Step 1 is to get the mouse location -- $URL$ Step 2 is to move sprite to Location A to Location B which involves basic physics/movement -- $URL$ The idea is the same moving the mouse is for getting your destination where the user clicks. You are still going from point A to point B. What you're describing is an implementation detail which you can determine how you want to handle. I'm assuming your working with some sort of grid. The tiles on these grids will have specific properties like walkability. Attempt to move your sprite one step closer in the direction of the destination, if a tile is not walkable, stop. If you want your sprite to actually get to the desination you would want to implement an actual pathfinding algorithm which analyzes your tiles walkability. 

I'm looking for some quality audio/soundtracks as inspiration. Can you think of some really good puzzle games that went above and beyond in the audio category? If you're an audio guy, is there anything you specifically think about when designing music for puzzle games? If you know of examples for various styles, like dark/evil and bright/uppity, that would be great. Audio can set the mood and drive the story you are trying to tell and I find many games not spending any time really thinking through the audio portion of their process. This is especially visible in iOS development where developers tend to get lazy because most are under the assumption that the user is just going to turn off the audio and turn on their iPod. 

Imagine writing a book. If you can put together a very short story about your character (1-2 pages), hand it off to somebody and they start to feel for this character, you win... Your goal is developing a full-blown character that you could see in the real world. That means you are going to want to break down every component of a real world person into bits and pieces and use that model to mold look and behavior of your own character for a game. When you think about describing yourself, or somebody you see, what do you think about? Well, immediately our attention is drawn to what we can see. This is a good place to start. 

Well, it would be relatively simple for you to roll your own basic system using Google App Engine. You could implement some basic security if needed. Most likely, this is probably what you will need to do unless you find an SDK, like Steamworks, that include such a thing. Objective-C Solution: Cocos Live is free for leaderboards. I've used it previously for an iOS project of mine. It's a stand-alone library that takes advantage of Google App Engine on it's end. They don't charge you anything until your game is really, really pushing a LOT of scores (then they'll probably ask). 

You're talking about two different roles. One is a developer and one is not. Your entry level position revolves around manual testing (actually playing the game). If you have development experience then you would come on board as a QA Engineer and focus on writing code that tests the code (you wouldn't be playing the game). Small studios just don't have a budget to support a QA engineering staff so you'll have to target the big dogs if you're interested in this. 

More and more games are going the data driven route which means that there needs to be a layer of security around easy manipulation. I've seen it where games completely bundle up their assets (audio, art, data) and I'm wondering how they are managing that? Are there applications / libraries that will bundle and assist you with managing the assets within? If not is there any good resources that you would point to for packing / unpacking / encryption? This specific question revolves around C++, but I would be open to hear how this is managed in C#/XNA as well. Just to be clear -- I'm not out to engineer a solution to prevent hacking. At the fundamental level we're all manipulating 0's and 1's. But, we do want to keep the 99% of people that play the game from simply modifying XML files that are used to build the game world. I've seen plenty of games bundle all of their resources together. I'm simply curious about the methods they're using. 

That will be a largely painful process going from Java > Objective-C. Data Driven Build a game that is largely data driven. I think this speaks for itself, but this direction leads to less work you must completely re-implement. High and Tight Keep things very small and modularized. I say this because it will be much easier to port if you can easily take a component and implement just it, test and repeat. Contract Work Play your cards right and you might know someone who can take care of this for you. If you're best friends with an iPhone developer you might be able to buy him/her some dr. pepper to help migrate your code over. Use a Multi-Platform Engine If you've got a project in motion already then it doesn't make much sense. But if you're about to do a project, that you absolutely know will be ported to other platforms, then it might be worthwhile to take advantage of existing technology to help put your world together. Unity3D will be getting Android support with Unity 3.0. Conversion /shudder/ Tool And my least favorite recommendation is that you could use some sort of conversion tool to at least get your models converted from Java > C... But... I don't endorse that. 

Just discovered this for iOS Developers - AsyncSocket You set up a server in your application and connect to it via terminal. You can then pump over remote commands and start manipulating variables in real-time. Pretty slick. 

Isn't Quartz2D more for User Interface / Charts / Drawing Shadowed Text? It depends on what you're building. I've built game projects using Core Animation and I've just now started to dip into Cocos2D/OpenGL ES. The most I was doing in my projects was scrolling a background and allowing the player to manipulate views (drag and drop). The moment I thought about particles I figured I would slow the system down to a halt. Animations seemed to work well enough. But, again, I wasn't doing much. If your game is simple enough you could very well ride with Quartz2D. But if you're thinking about 50 enemy ships and particle effects already, I'd look at OpenGL ES and save yourself the headache. Might as well learn it earlier rather than later. I have to look at projects like Cocos2D and think that OpenGL ES would be the better route to go if you are serious about developing some graphical intense game projects.