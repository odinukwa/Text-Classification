Classful subnetting has been deprecated 25 years ago. Any exam that still asks about class A, B or C addresses is dangerously obsolete and should not be taken seriously. I strongly recommend to find an educator who has updated their training material less than a quarter of a century ago... 

Doing NAT from IPv6 to IPv4 is possible because you can embed the IPv4 address inside the IPv6 address. This is usually done with DNS64. Doing NAT from IPv4 to IPv6 is much harder because you can't embed an IPv6 address inside an IPv4 address. That doesn't fit. Matt is still possible, but you'd have to statically configure mappings between IPv4 and IPv6 address. I don't know if the Linux kernel can do that, but it's a bad idea anyway. Because of the different header lengths you'll run into issues with fragmentation and MTU sizes. Using a proxy would be a much better idea. 

This line sets an IPv6 address on the interface using the defined before. It tells the router to take the prefix, leave the other bits zero () and configure it as a single anycast address. The flag tells the router that the address may be used on multiple devices at the same time. It will therefore not perform any Duplicate Address Detection (not really relevant for a tunnel interface) and it will not use that address as a source address (because the return traffic might end up at one of the other anycast nodes). 

Routers are layer-3 devices. They communicate with other layer-3 devices (routers, NAT devices, layer-3 firewalls etc.) over layer-2 infrastructure (T1, ethernet etc.). ISP networks can be quite complex. Here in The Netherlands we have many DSL connections like this: 

The other station might not understand your extension headers, in which case it can not reply to them. But in general extension headers are allowed in all packets, even Neighbour Discovery. 

You are probably better off with not using NAT for the server. I don't know how to configure the Draytek, but your Juniper SRX is certainly able to do the following: 

The basic idea is good. Using both global and ULA addresses in parallel works fine. The only problem you might run into is that not all clients support DHCPv6 (notorious one is Android) so those clients will only get a global address through SLAAC, so its communication to ULA addresses will go through the router. 

You have to count in binary for prefix lengths to make sense. With a 2-6-6-2 solution I assume you're talking about the 16 bits between /48 and /64, basically the bits that an end-site has to create subnets from. Let's say that you have for your end-site. That gives you subnets to to work with. Each hexadecimal character represents 4 bits, and as you say the schema you have been handed doesn't align with the hexadecimal characters (basically a natural 4-4-4-4 split). So, back to binary. Just looking at the 16 bits between the /48 and a /64 gives us: 

Address delegation really used to happen in three sizes: class A, B and C. Class A delegations would be given from a certain address range, class B delegations from a different range etc. Because the different classes used different address ranges you could determine the class by looking at the first part of an address. And this was built into the routing protocols. 

Before NAT every device connected to the internet had its own IP address. That was how the internet was designed. This gives you great flexibility and visibility. If you have a firewall then it can filter traffic for each address, protocol, port etc individually if you want. Because the source address and port (if applicable, not all protocols have ports) and destination address and port do not change between the sender and the receiver it is much much easier to debug. And if you want to let a device look after its own security that is possible too: just tell the firewall not to filter anything on that address, or not use a firewall device at all. Your choice :) Let's look at the simplest case of NAT: When you ISP only gives you one address you can only connect one device to the internet. This is not what most people want: they need to connect multiple devices. So that single device performs a masquerading trick so that to the outside world it looks like that single device is doing all the internet communication, while behind that device there can be multiple devices that think they have a normal connection to the internet while not really having one. The trick that that single device with a real internet address uses is NAT. NAT can only do its 'multiplexing' for protocols that use port numbers. For protocols without port numbers a connection is defined by the addresses. As you only have one 'real' address you can only have one connection. For protocols with port numbers like UDP and TCP a connection is usually defined by both addresses and ports. So can be one connection and another. If was a NAT device (it's not, it is my own PC's address, I don't use NAT here) it could have an internal state table that remembers that corresponds to internal address . Outgoing packets get their original source address and port () replaced with the NAT device's own (), and the reverse is done for incoming packets. What often causes some confusion with NAT and (stateful) firewalling is that both of those functions need to remember state: who is talking to whom? A stateful firewall also has to keep track of who is talking to whom. So both a NAT device and a firewall need to remember that there is a session . A NAT device also has to remember that is really . A firewall does some extra filtering and inspections to the traffic. A NAT device without a firewall function will let unwanted traffic through if it happens to match something in its state table. A firewall will apply inspections to prevent that. But a firewall can also do that if the addresses of incoming and outgoing packets aren't changed: it doesn't need NAT to be able to perform its function. NAT is considered a hack because it makes the internet more complex. Addresses and ports are being changed, a NAT device has to remember what the original addresses and ports were, it has to actually understand all transport protocols it is applying NAT to so it prevents new transport protocols from being deployed (nobody will use new transport protocols because no NAT device will support them, and NAT devices won't support them because nobody uses them) etc. 

For the DMZ and LAN you can use either physically different ethernet ports and ethernet switches, or you can use VLANs to be able to implement it on a single switch. You could even make the DMZ and LAN one network, but then you cannot protect the LAN from the server (in case someone breaks in or finds an exploitable bug). 

When ISPs peer on e.g. an internet exchange then the internet exchange provides the addresses for the peering LANs. When ISPs set up a private interconnection then one of them provides the addresses. It doesn't matter which one. 

In the classful times when an organisation needed 4000 IPv4 addresses there were basically two options: 

Although technically you might be able to bridge all the different PLC networks together into one big layer-2 domain using WiFi (for which you can indeed then run a single DHCP server), such a setup would probably be very unstable and unreliable as all the broadcast and multicast traffic would have to be duplicated across all those networks.