Put the SD card in your laptop (via an SD Reader) Open the SD Card in your Mac Finder In the top-level directory of the SD Card, add a file with the specific file name ssh and no extension after it. Safely remove the SD Card from your Mac and put it in the Rpi again (steps courtesy $URL$ 

Now, when you boot your rpi it will have SSH enabled. You just need to use your router to find its IP address and you can then SSH directly into it over your local network. With your RPi on the local network, and your local network having internet, the sudo apt-get update command will successfully download the package lists from the mirror sites. 

I don't think you are missing dpkg. It looks more like the update process caused a corruption on the lock file and now apt-get cannot safely set the dpkg lock to prevent running simultaneous updates. One thing I typically do in a situation like this is restart the rpi (sudo reboot). This is a brute force way of basically killing anything that might be holding on to the lock or preventing dpkg from setting a lock. After rebooting the rpi, if this still does not work, your next step, which is also quite brute force, is to forcibly remove the lock file. I believe you can do this with 

Another possibility I came across is that I didn't get any display unless the HDMI cable was plugged in before the Pi was switched on. Should be a relatively quick one to fault-find, but worth documenting here nonetheless. 

It doesn't support WoL. Considering the device draws so little power, the benefits of shutting it of and waking it with WoL are few and far between. Just leave it on! 

I'm going to be bold and just say no! While it's true some big capacitors can retain their charge and shock you, there's none nearly big enough on the Pi for this to happen, and I don't believe there's anything on the Pi that runs much above 5V anyway. Definitely not at a voltage that could shock you! 

Not really for fully featured dev work, unless you really do love command line based IDEs and editors rather than graphical ones. Simple messing around with text editors / compilation will be fine though. The major problem is the speed of the interface. At present, with X not having GPU acceleration, even relatively simple applications such as the web browser run pretty slowly for me. Fully featured graphical IDEs would be unusable, even if they did run (which I'm unsure about due to memory requirements.) Some of these issues may be mitigated when X gets GPU acceleration. Speed of compilation can also be an issue for some languages such as C++, though is less of an issue with others (C / Java.) To all practical intents and purposes, the stuff you compile on the Pi will only run on the Pi (well technically other ARMv6 platforms.) You technically could cross compile, but I'd argue whether that's really worth it! In short, if you want to play around with a bit of development work with standard editors then it will do, but you'll probably find yourself getting frustrated quite quickly if you move onto anything more serious. 

I am running Transmission v0.7.6 on OpenELEC v4.1.2 on my Raspberry Pi Model B. All downloads are first saved to my SD card and when complete are moved to my external hard drive. How do I change the incomplete downloads folder from my SD card to my external hard drive? 

I have a model B raspberry pi running OpenELEC v4.2.1 connected to my TV using the composite output. I also have a Freeview box receiving terrestrial TV from a coaxial cable connected by Scart lead to the same TV. The Freeview box and Raspberry Pi are at different sides of the TV but are still within three feet of each other. None of the Freeview cables cross over or touch Raspberry Pi cables. When the Raspberry Pi is turned on the signal on the TV from the Freeview box becomes distorted and eventually ceases. When I turn off the Raspberry Pi the signal returns to full strength. Sometimes the Raspberry Pi will be turned on and the Freeview signal will be good before losing quality without any reason. What causes this interference and is there any way to shield the Raspberry Pi so it doesn't affect the TV signal quality? 

It's technically possible that if a future "model C" were to be released (I'm just speculating) the hardware requirements may be good enough, alleviating some of the above issues - but from a practical perspective I don't think running Windows is ever going to be hugely feasible. 

Don't run it on a conductive surface, that's a sure way of damaging the Pi, or at least making it unstable. You'll probably end up shorting random points on the board. Any non conductive surface should be ok - plastic, wood, etc. if you're thinking of building a case should all be fine. In the short term I'm running mine on the anti-static bag it came in which works a treat (I've run whole PCs this way with no issues.) 

Nope, because Windows isn't compiled for ARM (and not being open source, you can't do it yourself.) Yes, Windows 8 is apparently going to have an ARM version, though I seriously doubt it will work for a few main reasons: 

Oracle have now released (as of Java 7u6) a JDK with JIT that works on the Pi with full AWT / Swing support. It also supports JVMTI (cacao only has partial support.) Press release here. I've verified it works with Greenfoot, and provides a huge speedup compared to the likes of a plain (non-JIT) OpenJDK build. At the time of writing it doesn't support hard floating point, and so won't work with distributions like Raspbian that only use hard float - this is however planned for a future release. UPDATE: As Darren pointed out, a hard float version has now been released for ARM in the form of a JDK8 preview release, you can find it here. UPDATE 2: Hard float is now supported in JDK7. 

From the article you linked to, it appears your mac is connected to your rpi for ssh, but I don't think you've connected your rpi to the internet yet. Based on the above assumption, I think you first need to connect your rpi to a local network that has internet access via the ethernet cable. Before you do this however, you can enable SSH in an easier way following these instructions: 

I am trying to run an SDL-based application, PICO-8, on a headless Raspberry Pi 3. When I run it locally, everything works fine as it should. When I try to run it via either RealVNC or SSH X11 Forwarding, nothing appears. This SDL Application is know to run in full screen mode. Currently, I believe the solution lies down one of two paths: 1) RealVNC with experimental DirectCapture enabled - this succeeded in opening the application in the VNC Viewer, but without any functional keyboard 2) X11VNC - googling seems to show this might be promising, but I have not been able to get it to succeed in even showing the application like RealVNC. Thoughts? 

There may be minor differences between different boards - different batch runs could use slightly different components in appearance, though I'd expect them to be functionally identical (at least to within some reasonable margin of error.) It's not unusual at all on these sorts of devices. As to whether they're all unique though, the answer is no - I have two that look identical, and I can imagine in the vast majority of cases ones from the same batch will be practically identical. 

The video codecs actually fall into three categories - those supported and enabled by the GPU, those supported by the GPU but not enabled due to licensing restrictions, and those not supported at all. As for details of what goes where, this blog post gives the info: 

One of my friends signed up to grab a Pi from both Farnell and RS, he received both without any problems. I'm not sure if this is technically allowed, but I doubt you'd have any grief - especially if you're registering interest now when the availability isn't anywhere near as scarce as it was a few months ago. 

I am running Transmission on OpenELEC v4.2.1 on a RPi model B. Every time I reboot the RPi the download location, queue size, download number and all other settings are reset to their default values. Is there a file I can edit to permanently set my settings? 

I have a model B raspberry pi running OpenELEC 4.0.7. I want to use a web browser using the raspberry pi and OpenELEC. Is there an addon for OpenELEC that allows a web browser to be run? I have seen some posts regarding Chromium for xbmc and Advanced Launcher but I have not been able to get these working. $URL$ 

I have a model B raspberry pi running raspbian with an 8GB sd card. I want to connect my laptop by ethernet cable to my RPi and then output the laptops screen over the RCA composite output of the RPi to my analogue TV. Laptop >> ethernet cable >> RPi >> RCA composite >> TV I am aware of vnc options but the framerate using vnc is too slow when displaying video. I want something faster. What software do I need on the laptop and on the RPi? 

Is this a problem that can be fixed with a later firmware update, or will it likely require the purchase of a new device? 

The easiest thing to do would be to try another SD card, and then perhaps potentially another Pi if you can get your hands on one. Until that, it's quite difficult to say which one of those issues it likely is. 

I'm tempted to use the Pi for controlling an autonomous robot that could be subjected to harsh conditions - mud, water, the lot. (It's theoretical at this point, but the concept remains the same!) Because of this I'd either like to build or buy (relatively cheaply) a completely waterproof case, preferably one rated for submersion up to 1m to be safe. What would be the best way of obtaining such a case, and how could I safely route cables through it whilst still maintaining its waterproofing? 

This is one area where I believe the Pi could really shine - suddenly we're at the point where, in terms of cost, you can feasibly hand a computer with your software on as a sample, all set up and ready to go (rather than say a USB stick.) I think in the future this will be a great use case for them - a year or two from now perhaps. At the moment it's not really viable due to limited availability, but in the not too distant future, I'd say definitely.