If you must, round up rather than down, as overlapping sprites is better than sprites with a gap between them. 

Besides sines and cosines (which 50-75% of programmers I've met didn't know how to use), learn the magical arc-tan function and how it can be used to get the angle of any vector. 

I'm not accounting for air friction here or other physics engine shenanigans, so you might need to test various constant values to see if you get the right distance and height. 

The question is a bit vague, so I'll give a primer on the subject. To make an AI opponent, you'll need to create a sub-routine that considers the current state of the board and chooses a move, just like the player would. For example, in Tic-Tac-Toe, the subroutine would look at the state of the nine positions of the board, and choose where to place its own mark. Now, how does this subroutine choose what move to make? In a simple game like Tic-Tac-Toe, each optimal move is obvious from the rules of the game (try to make three in a row and don't leave open lines to the player). For more complex games like chess, that depend on strategies beyond one move, you start looking into AI. AI is basically "guessing for computers" - algorithms that calculate not the best move, but a move that -could be- good. AI algorithms involve, among others: 

If you really want to use XNA as your framework of choice to build your game, you should have a look at MonoGame. Support for 3D is quite new to the framework and probably not ideal, however it would let you write in C# and reuse the vast majority of your code for both platforms (WP7 Marketplace and Windows 8 store). Game are already being submitted to the Windows 8 store using MonoGame! Saying that, I believe Windows Phone 8 is set to support C/C++ and Directx (not sure on limitations). 

Unity3D has already been suggested and is an amazing tool. Another option would be MonoGame (an open source implementation of XNA). This might be a bit more advanced then developing for Unity3D, but a good option if you are going for a 2D game (MonoGame is 2D only) and looking to learn something new. There are a lot of tutorials and documentation on the net to help with XNA development, likewise with Unity3D. 

Hello and welcome to "Linear Acceleration and You: How To Use Math To Throw An Object The Right Way". Assuming an initial horizontal speed of s (in distance per time unit), a jump speed of j (distance per time unit), maximum jump height of h (distance) and gravity of g (distance per time unit squared). Time to reach maximum jump height is t (time units). Your basic jump will take t = j/g time units to reach the top of the jump, and 2j/g from start to end. Therefore, it should cover a horizontal distance of d = s*(2j/g). The maximum jump height, using the basic equation for linear acceleration you learned in Physics 101, is h = g/2 * t² = g/2 * (j/g)² = g/2*j²/g² = j²/2g. And now we have a two-equation system: 

TVTropes has an interesting list of archetypes in game characters. While the terms used are less than technical, I'm sure you can translate them to whatever vocabulary you wish to use. 

I'm not sure I understand why adding tileX and tileY is a bad thing? If you want to draw the whole tileset, one way of doing it is with a couple of for loops like so. 

I am currently working on a simple game that I am building in Windows 8 using MonoGame (develop3d). I am using some shader code from a tutorial (made by Charles Humphrey) and having an issue populating a 'texture' parameter as it appears to be missing. Edit I have also tried 'Texture2D' and using it with a register(t0), still no luck I'm not well versed writing shaders, so this might be caused by a more obvious problem. I have debugged through MonoGame's Content processor to see how this shader is being parsed, all the non 'texture' parameters are there and look to be loading correctly. Edit This seems to go back to D3D compiler. Shader code below: 

I will ask you to reconsider your position. Drawing the same art ten times just so it's not 'blurry' will force you to either spend a lot (and I mean a lot) of time on the art or rush it and have the same issue with quality. What if you have to redraw an asset? More common strategies to deal with this issue are: 

And voila. j is directly proportional to s, and g is directly proportional to the square of s. Going back to code: 

If you want to make a worldwide grid, I suggest you divide the planet in countries or continents, and make a square grid properly centered on each. Let the ocean cover the seams. 

Badweasel correctly pointed out that this solution would require excessive resources for little effect, but you have asked for what security issues remain on your solution. Let's look at the typical avenues for cheating, more or less by order of difficulty: 

JSFiddle Example Just my preference, but the naming below might make things a bit more clear as well. 

Service Stack for services and serves up XML, JSON etc. Amazing in general for setting up the services. Also cross platform. As far as 'DB communication', if you are able to use Windows Server for hosting, Entity Framework works well, and very easy to use and code against. There might be alternatives like DbLinq (Linq To SQL for Mono), but haven't tried it so not sure on how easy it is to use. OrmLite is another option and you can get it as a part of ServiceStack framework. Update: Entity Framework now works under Mono so windows hosting would be optional for all of the above. See here Obviously, this is only really an option if you don't mind coding all this in C# and doesn't take care of all the database design you'll have to do, but that kinda goes with game logic. Hope that helps. 

I'm trying to spawn a number of CharacterControllers and have them move around an area, but they keep getting stuck on each other. Is there a way to make them pass through each other while still respecting the terrain's obstructions? 

If the concern is for speed running, you can measure how far the player is from the puzzle "entrance" by the time they first see a part of the puzzle, calculate how long it will take to reach the puzzle entrance at top speed, and rewind the puzzle state by that many seconds. Most games just make periodic events happen often enough that you're unlikely to miss one by too long. If you're making a game for speedrunners, you should allow for some creativity when navigating sections anyway. 

What you're attempting to do is not a common strategy (in fact, I don't think it's even a rare strategy), for several reasons: