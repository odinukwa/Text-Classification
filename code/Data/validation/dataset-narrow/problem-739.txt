This will turn the named variable back into an rvalue reference. We shouldn't need to pass by value inside the recursive function. We can work with the actual matrix. We need to make one copy at most to avoid changing the variable outside the function. 

We take advantage of that by starting with . Then we add two () to get seven. Then four () to get eleven. This skips nine, which is divisible three. We alternate incrementing by two and four thereafter. In case you haven't seen it previously, is a shorter way of writing . 

You use the number in multiple places. You should define one or more constants to replace these uses. 

Note that I use the block form even for single statements. This helps avoid a class of bug where someone modifies the code thinking that it will only occur in the or but it actually occurs all the time. This can be hard to spot in diff views. It's especially problematic if no one notices immediately. It's easy to skim over the problem. Debugging this once can take longer than a lifetime of adding curly brackets. It's also worth noting that both your original function and this function will if is greater than half the maximum value. 

You would only do this if you wanted to access a global variable named . Since you do not do that, this line is unnecessary. An alternative would be to replace most of your functions with a single one: 

There is a book called Perl Best Practices by Damian Conway that suggests some things to change: Always use parentheses with functions (except builtins), even when they take no parameters: 

This seems like this is not code that you wrote, so it would be off-topic for review. As a general rule, you should answer questions like those posed here before sending the code out for review. In particular, if you don't like variable names in code that you maintain, then why not change them? MITJavaWordNetInterface Your indentation is inconsistent here. A more typical form: 

This idiom is quite common in C. Note that I'm not arguing against the range-based loop proposed by EngieOP. That obviously will avoid this specific problem in this case. However, there may be other circumstances where that won't help you. Another solution for this specific problem would be to use the method of the vector object: 

This seems overly complicated. Under what circumstance does the value at a particular offset outside the array matter? 

Avoid the Single Statement Form You use the single statement version of an twice, both times with the block then clause: 

That limits the scope to just the loop. Note that I also changed the name from to . To me, a variable that starts with "is" is a . This makes statements involving them read nicely: 

It's also more common to put the code on a new line after the opening tag. Unless you're opening and closing the PHP block on the same line. If you're interested, there is a PHP Coding Standard. Personally I don't always follow it, but I find it a good way to make decisions on issues that aren't important to me. It also makes your code more portable. 

While putting the explicit there won't hurt anything, it's not necessary. You can just let the block end and it will fall out naturally. You only need the explicit when the following code should not run under that case. You're out of cases here, so it's not needed. 

By switching to the inequality, you can avoid a class of bugs where you start incrementing by more than one row at a time but don't update your gate condition. The check costs the same either way, so you might as well do the more expansive check. 

As a general rule, you should define variables of the type of the interface rather than the implementation. In other words, you'd normally say 

probably shouldn't be a public member of . It would seem to be a characteristic of the and should be stored in that object and accessed by a getter. 

This seems unlikely enough to not be checked. You already check that the file opens in the method. It shouldn't close itself arbitrarily often enough that you would need to check it in each write function. 

As a rule, don't do work in the constructor. You could either pass the connection as a parameter to the constructor or do this in a later call. 

is more robust. For example, what if you change Enqueue to take a collection of items? Note that you want to compare the sum of startingPos and Count to the array length. Otherwise, you may overrun your array even though it doesn't have much in it. Also, you may not always want to Grow when you hit the startingPos + Count issue. Some of the time, you may want to just reset the array so that startingPos is 0 again. Alternately, you could make the data circular (when you hit the end of the array, start putting things at the beginning again), but the logic for that is trickier. Unless you are really memory or time short, the dumber solution is better for robustness reasons. If you implement a Reset function, you may want to refactor Grow and Shrink so that all three call a function that handles the array initialization and copying. Or just replace them with something like 

The original code did not make these assumptions. It's unclear if that is because they don't hold as it needed the checks for other purposes. Additional context might have made this clearer. An advantage of this version is that it will throw an error if the second assumption does not hold. The original code would just leave things in an inconsistent state. 

Here's the recursive call. You get the result of on the new smaller array and check if it's equal to . This could happen either because every remaining value in the array is equal to or because there's nothing left in the array. This seems unnecessary. I'm thinking that we could get rid of the comparison and return here. Obviously, the recursive call is necessary. 

Well, that almost certainly isn't right. You take a parameter which you then ignore, overwriting it locally. 

I also added a line break at the end. Functionally this won't matter, but it makes the HTML easier to read. The whole thing: 

The reason being that you then go on to output . You also might consider moving the definition of to be directly before this statement. That puts all the code related to together and makes it easier to follow the logic. Alternately, you could stay with the original and replace with . Then you don't need to define at all. 

I don't like the name . I'm guessing that this is short for list of tiles, which is redundant. We can already see that it's a list of tiles. What's the purpose of this list of tiles? As a default name if nothing better presents itself, I'd prefer just which is simpler. Also, I'd again rewrite this: 

You get two things from . First, it issues a line feed in the appropriate fashion for that system. Second, it causes the output buffer to flush. I.e. it takes everything that is currently in the buffer and makes it output. Sometimes people will tell you to use a rather than an to avoid that flush. If you were going to do that in your code, you'd say