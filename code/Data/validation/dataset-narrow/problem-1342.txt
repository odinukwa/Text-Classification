You want to use the concept of chunks or pack files or the like where the entire chunk is streamed. The chunk should contain the data that it needs when used in the game. World Geo, specific models for that area, textures, sound effects, scripts and the like. It should not contain background audio, that should be a streaming system on its own. You really dont want to read an individual packed file for each of these, but you definitely do not want to read each individual asset. The FileIO will kill any overhead. (Ideally the chunk files are all packed together into one large file you can just fseek() through to get to the right chunk you want to load) Hope this helps. 

This comes down to use the appropriate data structure for the task. If you are using this for internal functionality key to your game and such then your own data types that hold the values in a format you are using them would make sense. If however this is dealing with rendering and graphics hardware then you will want to use floats as that is what the hardware is generally built to use and accelerated for. Hope this helps. 

There is no other answer that is also not a good answer. Programming Tests: Generally want to see what you are capable with and what your turn around times are.. Just remember that a Wrong answer is never a good one so do not rush these in order to make it look like you can turn them around quick. Just do a google search for programming tests. Also, take a look at the Sucker Punch programming test.. that one is Infamous and has been around forever (hundreds of forum posts generated from trying to get a good solution to it). Over the phone: These will generally be light tech questions and mostly personal questions. Why do you want to make video games, why do you want to make Their video games.. etc so on and so forth. In Person: Usually the final stage.. Making video games is VERY stressful.. you need to show you can be accommodating, interact with the person you are interviewing with and I can almost guarantee you will be shown around to a few other key members of the team. Also, some hands on tech questions can be brought up here... I have however been very successful in avoiding receiving them... Might be something to do with telling Them what their code/script is doing with out them asking me to write something ;) Please note though, as mentioned at the start.. No other answer here is a bad answer, the questions will be wide and many.. Mostly game or game object oriented, but programming is programming.. video games just have to do it 60 times a second :) Good Luck! EDIT: Cached link to an old Sucker Punch Job Listing w/ Programming Test referenced at the bottom. 

At the end of the day make any game or application in any language you want that will get you the result you are looking for. If you can put together your application in C# and there is no performance limitation then there is no need to choose a 'real' language. What you are running into are the limitations of some development environments. Java and C# are managed languages and so you do not have direct code access, its going to be run in its own little environment. C# has made huge improvements on execution speed and resource management to make it more Viable but you will find developers have a general bias against Java because of its large amount of overhead. C/C++ is closer to the hardware but dumps a lot of the management on your own shoulders. This can let you better utilize the resources because you can specialize them to your needs as opposed to the general case environments you will find in the languages listed above. I can not really speak to Python as I have not tried to use it to make a game, just tools and quick little scripts and the like. Overall though, the first part of this answer is the important part. A completed project always wins hands down over just debating about a project that is never completed. Hope this helps. 

I would suggest some kind of Interface class for your Entity objects would be nice. It could do the error handling with checking to make sure an entity contains a component of the appropriate value as well in one location so you would not have to do it everywhere you access the values. Alternately, most of the designs I have ever done with a component based system, I deal with the components directly, requesting, for example, their positional component and then accessing/updating the properties of that component directly. Very basic at a high level, the class takes in the entity in question and provides easy-to-use interface to the underlying component parts as follows: 

There are a couple of issues with the layout that could be causing you confusion. First up is that your Update() method of the Humvee seems to be a rather bad name as its not Updating so much as Shooting a bullet. Second up is that you are never calling Update on the bullet object anywhere. I can gather that you may have wanted to do it at the start of the Bullet's Draw() method so that it will calculate its new position and then draw itself there. (While not important right now you may want to consider doing the Update elsewhere as you will generally only want to do Draw() specific code when drawing, but that is another matter all together). Since you are seeing things I am going to assume that at least draw is being done and so my above comment would suffice to get the bullet moving as long as you also adhere to @Gajet's comments. You have seen 

Your system looks fine. I am more used to having all of my configurations for a game in a single file but I also work on very large projects where I have folders of configurations. Your system as described above should be able to handle both of those situations just fine. I do not see any concerns you may be perceiving in the question nor do I foresee any that you may run into either. As to your thoughts of changing it from an INI format to Lua, that is completely up to you and no general 'this is better than that' rule exists. Just make sure that it fits your needs. If you have Lua in your engine already for other purposes (Its how you script game play or UI components or AI logic checks, etc) then it may make sense to change the configuration files over to use it as well. Maintaining less technology can make things simpler in the long run. Just to be clear, adding in Lua processing just for a configuration file parser is probably overkill, especially when you already have a parsing system in place. Hope this helps.