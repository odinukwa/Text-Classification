Here is a great guide on Lifehacker. I'll list all of the supplies that you need, and the basic idea of the steps you will have to follow. You'll have to read the entire post on their website for a complete tutorial (it's too long to post everything here). 

I would recommend using the NOOBS software. It is easier than installing an OS manually. All you need to do is: 

You are going to have to restart your Raspberry Pi (probably by unplugging it, since you can't run the shutdown or reboot commands). You may have to reflash your SD card if this corrupts your image. Some process is leaking memory, so other programs can't use it. To get an idea of what is causing this, run: 

Are there any problems with leaving my Raspberry Pi powered even though it is shutdown? Sometimes I forget to unplug it after running , so I was wondering if I was affecting the lifespan of my Raspberry Pi or something like that. 

There are multiple approaches to accomplish what you want. They way I am going to describe is probably going to have a learning curve though, because I used C. Most of the information I used came from this very helpful guide. With this method, you are going to need a client and a server to communicate between the two Raspberry Pis. The exchange of information between client and server is summarized in this diagram:                                   

I found a lot of information in this Raspberry Pi forum post; they are trying to accomplish the same thing you are. To do so, they installed and setup a MiniDLNA media server on the Raspberry Pi. You need a DLNA client on your computer to receive the stream. Here is a list from Wikipedia. 

Right now you are doing the only reasonable way I can think of. The problem is latency. The computer you are running the VNC server on is already using a lot of resources to run the game, compounding the issue. Unless you write some very specialized software (or port the game), you are going to get a lot of lag with transmitting a game to your Raspberry Pi. 

When you have finished editing the file, it should look like the following, using the settings above: 

It looks as if you are not supplying enough power to the WiFi device. You need to either get a device that consumes less power, or use a powered USB hub instead. 

You can download a file from here. It may look different, but it includes comments to explain all the different settings. Reading through the comments, I'm not sure if all the warranty comments are 100% accurate or not. But other than that it contains a lot of useful information! 

This is a software bug, and has to be fixed in the source code. There is no known workaround to this issue. The only (known) way to fix it is if you know how to program in C++. Them you could take a look at the code and attempt to fix it. 

That said, I found this forum post detailing success with LinuxCNC on the Raspberry Pi. Here is some information about the LinuxCNC: 

Any OS could work for this, as long has you hook up the Raspberry Pi to the CNC machine properly and have the proper software on the OS to interface with the machine. 

Any suggestions? Power isn't the issue since I'm running the dongle from a powered USB hub. I do not want solutions that tell me to downgrade my software. That is not a solution, that is a workaround. 

Unfortunately, there is not much that you can do to prevent this, since it can only be solved by program developers properly allocating and freeing memory in the source code. 

There is an unofficial V4L driver available. It was not funded be the Raspberry Pi Foundation in any way, so I guess he has done this off his own initiative. I have not tested this driver for myself yet. 

You can install htop, which is an interactive process viewer for Linux. From the htop Wikipedia page (bold emphasis is my own): 

Download and Install RetroPie on a SD Card Boot Your Raspberry Pi and Set Up EmulationStation Configure Your Controllers for the Emulators Transfer Your Roms from Your Primary Computer 

Remember your device may be different, so you will be entering your device ID for your device. You may have noticed that I only entered RTL818 instead of the whole ID. This is because it didn’t find the adapter when using the apt-cache command. You may need to shorten your description. The result returned for my device was: 

Other Raspberry Pi forum users have tried it and found it to work pretty well. There are some instructions on that forum post on how to do it yourself. The explanation is pretty lengthy, so I won't post that here. 

It depends on how much your motors and servos will draw from the board. But yes, it should suffice. A possible alternative would be the GertDuino. 

Weston doesn't support yet. You can read more about it in this Raspberry Pi forum post. Here is what Wikipedia has to say about Weston: 

I'm a little late to answer, but my solution only involves two simple command issued from the console (one to turn the volume up, one to turn the volume down). It require only a little setup, and the use of aliases. Make sure you are in the user folder: 

You could add that command () to the bottom of . That way, every time you log in the time will be updated (assuming the WiFi device is connected to the Raspberry Pi and running properly). 

Make sure you can use the command () and setup your Raspberry Pi to send emails from the command line. You need to look up the SMS gateway for the phone you want to send an SMS to. An example of a number converted to an email would be (for Verizon). Send the email/SMS: 

You will need to update your package information. Be sure that you’re network cable is plugged in as we need to get some updates from Debian. 

Format your SD card using the SD Card Association’s formatting tool. Download and unpack the NOOBS zip file onto the SD card 

Create the file (this will be where I keep all the aliases I make so they aren't lost when I reboot my Raspberry Pi): 

If you are looking for something comparable to Arduino, consider looking at WiringPi. WiringPi is an Arduino wiring-like library written in C and released under the GNU LGPLv3 license. The code example looks very similar to code written for the Arduino. You could also take a look at the bcm2835 library. The example code looks pretty simple. Just some extra suggestions to those already out there. 

Since the Raspberry Pi Foundation has declared the "standard" overclocking options safe, overclocking no longer voids your warranty: 

Create a file for your startup "script": Add the line to your file. Exit and save: Ctrl+X, Y, Enter Make the "script" executable: Register script to be run at start-up: 

We need to edit the configuration file, , and add in the settings we need. Before you proceed, you will need the following: 

If you cannot get that to work, I would recommend using a different VNC server altogether. The one I use is TightVNC, and it works very well. To install: 

Midori is under heavy development, and it looks like this is just a bug related to improper handling of memory. I would compile the latest git daily with a cron script to make sure you get a version that doesn't contain that bug as soon as it comes out. 

To make the console wireless, you are going to have to power the system as a whole from a USB battery pack (one with multiple USB outputs is better). You will also need a small wireless USB dongle to transfer the ROM's. 

Inside of your hard drive's case is an Initio logic board (some call it the USB-SATA bridge board) which has its IC (microchip) installed right on the drive. This is what your Raspberry Pi is communicating with. 

After a little research done by myself (with a little help from @Jacobm001), I found that this command solved my issues: 

Basically what it's saying is that your SD card is at fault, not your power supply (which you said was outputting 5V, and because it is a smartphone charger I am assuming that is at 1000 mA). 

I followed this tutorial to set up my Bluetooth dongle and get it running. I have the same Bluetooth dongle that is in the tutorial, yet I can not seem to get it to work. I get to step "C" and then I run into problems. Here is some commands I ran to diagnose the problem: 

There are several programs to take screenshots. One that I have used is ImageMagick. Install by running the command: 

You can read further into that guide I linked to learn how to develop more advanced communication between clients and servers. 

I understand that the Web/Epiphany browser is in beta, but why does it cause Raspbian to stuggle just loading Google, or any other website (with only one tab open)? Midori doesn't have this problem, and Web's features contradict this: 

After a few minutes of updating you will be back at your command prompt. Enter the following command to see if your adapter is listed. 

I'm not sure exactly how you performed the installation process, but take a look at this tutorial (for both Raspbian and Arch Linux): 

One thing that that I can think of is that you have not expanded your filesystem to fit your entire SD card. To do this: 

Note: This solution has only been tested on Raspbian systems only (the OS that the OP assumed they would use). 

Add your script to the list. Be wary of the syntax that cron follows. Here is an easy to remember format: 

Short answer: roughly 6 years (2006-2012, concept to production). Long answer (derived from Wikipedia): There were 4 different hardware revisions to the Raspberry Pi Model B. Prototyping of the first hardware revision started in 2006: 

There are multiple problems that could cause the error you are experiencing. One of these problems could be a faulty SD card. You should verify your SD card works with this list. There could also be a problem with your power supply. Make sure the power to your Raspberry Pi is adequate to boot properly. Another possibility is that your file was corrupted on download (this is the most unlikely, but is an option). 

Make sure you are in the folder: Open up for configuration: Scroll down to the bottom and add the line Exit and save: Ctrl+X, Y, Enter 

You would have to use sockets in order to do that, or you could try using libcurl instead of sockets: 

No OS that exists has this feature. There are operating systems that can recover from it better than others, but no system can avoid it. This is because OS's are constantly transferring data from one place to another. When you are using your system, there is a lot more transferring of data going on than if you were just letting the system sit idly. When you shutdown your system abruptly, you run the risk of your halting you OS transferring important data. This is why you will usually see a message of some sort telling you to not shut down your computer when you are updating. Doing so will destroy the system, and it can't recover from that by itself. 

If you look at the Raspbian kernel source code, you will see that the limit it is set at 48 kHz. It should be possible to overcome that limit if you modify the file and recompile the kernel. 

I find a small flat-headed screwdriver to be extremely helpful in these situations. Just find a small crack between the case and the Raspberry Pi, then carefully insert the screwdriver. Use the screwdriver as a fulcrum to lift the Raspberry Pi out of the case (keeping the case stationary). Please be gentle. 

Also, have you tried using to download the files you want? In my opinion, it is a better option to downloading something then using Midori or some other web-browser. It's very simple to use as well: