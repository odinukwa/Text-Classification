Your code is very clumped together. I recommend that you add some spaces to enhance legibility. For example, this 

Why are you inserting a script into the HTML via JavaScript? Why don't you just put the script tag in your HTML so it is loaded to start? That way, you don't have to wait for the script to load from the source after the page has loaded; the script will load as the page is loading. 

untested right now, but should work; tell me if there are any issues. This will make so that if a client attempts to visit any path that is not already specified under , it will automatically go back to . Aside from that, you should specify a for your . To start, you can use (comes with the router): 

Don't feel the need to answer all of these in an answer. Any other recommendations are also appreciated. 

Contrary to what people have been commenting, I think that the big comments going across your code to split it up is a good idea. In my opinion, it helps with legibility. The use of . It's a pretty good idea; I like it. 

I assume that when you say that you want your code to be "dried" up, you want your code to be more DRY, right? Well right now, you are doing quite a bit of repeating: you've created individual conditional statements for each property of an object. Your code would be much more DRY if you iterated through the object and checked the properties as you iterated. Since we are handling an object, let's use a loop: 

Game class First off, why is it a class? You are only using it once. It makes much more sense to just save the class's fields as normal variables. However, if you want to keep the object oriented flow, you can make this an object, and access it's fields as like: So instead of this: 

EDIT: In fact, I was wrong about the state. For ES6 classes, it is okay to set state like that in the constructor. Otherwise, you should be using . 

Now that you have this new variable, you can just use that when running the rest of the code, rather than the specific or : 

Now this satisfies the idea of keeping everything in it's own scope, and it can be used quite easily: 

In a couple of the methods of , you catch an event and call to stop it from performing it's default behavior. I'm unsure if this will make a difference, but it might be better to move that function call to the very top of the function; that way (I think) the default behavior of the event is more likely to not be executed 

Now, the directive is going to show whatever HTML is inside the file, which is the file that you just created. 

Where did the number 50 come from in the call? Don't use magic numbers; set and use a variable, probably called . 

This way, to add more routes, all you need to do is add another sub component; this is more readable. Also, it allows you to provide default routes to redirect to when no paths are matched with : 

This is not an appropriate name, nor is this variable used anywhere. Looks like you meant to delete this. While on the subject of deleting unused parts, you should go through and delete all of your commented out s and excess/unnecessary blank lines. 

The chances of it being exactly are very low. It's such a small thing that most applications ignore. 

ing with 0 will make a bit 0, but ing with 1 will return the bit being ed. And, to enhance understanding, I would create a macro for finding out if a number is even or odd: 

Why is there an statement? You have nothing in it, so there is no point in putting this here at all. 

You seem to be repeating this pattern of and then a lot. In jQuery, this is a method called that will add the class if it does not exist in the element, and will remove it if it does. To simplify your code and cut the method calls in half, you should set the styles of or to be the default styles of the buttons. Then, when you want to apply the other class, use . The applied class will override the default styles. This should speed up your code. 

Sure. Considering you know that you are going to be sending in a large amount of s, then why not let take an array? 

This will just be a short review, as I had trouble following along with your code (I think it's just me; your code looks perfectly organized). 

You have a lot of repeated code down there. To reduce this repetition, you should store the two players in an array, and then each time loop through the array an do what you need to do with each player. To make it cleaner, you could use comprehensions: 

Now your code is more organized and is ready to be used by another class. Here is how you would use the class and it's method: 

It's poor design that this function is returning a string to symbolize a result. Usually strings are returned and the string itself is used for displaying to an interface. In this case, the string is treated as a value that needs to be checked against. And, to add, string comparison can be fairly slow. I recommend that you split up this into two functions/methods that like and . Perhaps you could contain these new code snippets in an object like . That might look like this: 

These are the only two lines that are different among these two methods. Everything else is exactly the same. You should refactor this into one method that takes a parameter that tells if the cards are the first cards or not. Then, your new method would look like this: 

versus A few times in your code you move the value into a register. A more efficient way to do this is to the register with itself. 

This, with the incrementing in the middle along with the conditional makes this area a little clunky. These lines can be easily reduces using a ternary operator: 

to get the factorial of . Note that you don't need to specify the second paramter because of the first conditional in the function. Now, you can remove this conditional if you'd like, but you'd have to either: