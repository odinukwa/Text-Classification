To change the nice level of an already-running process, use "renice". So if I wanted my firefox session to go faster (dumb idea), I would do this: 

I've just authenticated my first Apple machine onto the active directory infrastructure. Yay! The only thing I'm having problems with is specifying that the AD user is an administrator, and able to make changes. I don't see any interface for that. Is there an interface in the system by default, or do I have to download the Server Admin Tools? 

My only suggestion would be to utilize iptables to redirect the traffic from one interface to another. Here's a link to someone else who did something similar: $URL$ Essentially, the command was this: 

I would start with monitoring. If you're having intermittent problems that don't go away on their own, but rebooting solves it, check your resource levels. That's a sign that /something/ is expending your free resources of some type. 

Your main issue is going to be bandwidth, I'm afraid. Under best conditions, you're going to be using more than half of your dialup bandwidth for plain VoIP. Add encryption overhead to that, and you're going to be very close to your maximum. This is going to make it very susceptible to line noise and other interruptions. 

Oh, I hate myself for saying this, but have you looked at daemontools by DJB? ( $URL$ ) They do what you want. But why do you want to do it like that? Are you having some sort of problem where your daemons die? Can't we fix the problem, rather than continually respawn them? 

Ok, questions: 1 - Do you have vmware tools installed? 2 - Has it always been like this, or did a recent upgrade do it? 3 - How were the graphics during install? 

JS was very, very close. As it turns out, "c:\Documents and Settings\Default User" still exists, but must be unhidden with attrib. After running 

In terms of GUI, Windows DNS is unparalleled. It's simple, clear, straightforward, and easy. I use it for my internal DNS without reservation. I would think long and hard before I used it externally as the authoritative DNS for my external domain, though. Windows' security history makes me hesitant to trust a server out on the net, even though plenty of people do it every day and don't get their servers cracked. It's probably my relative unfamiliarity with the OS that leads me to this prejudice. But if GUI is your only concern, there's nothing I've seen easier than Windows DNS server. 

If you take troyengel's solution of throwing an entry in the root cron table, then modify it a little, you might have a workable solution. If you absolutely, positively need to use apache to signal an interface restart, why not have PHP create a file that acts as a flag, and then have your root cronjob that runs every minute (or whatever) check for the existence of that flag. If it exists, restart the interfaces. If it doesn't, die. (remember to have the cronjob remove the flag after it successfully restarts the interface). This accomplishes the goal (restarting the interface, triggered from apache/php) and circumsteps all of the possible problems involved with granting a web / scripting service root level access. 

I don't throw them away until I'm not using any servers that have that specific model of trays. The reason is that once you throw them away, it's nearly impossible to get the parts from the mfg again without purchasing drives with them, so you're essentially at the mercy of Ebay or craigslist to get the parts you need. That's never a good situation. 

If not, use the error to help troubleshoot (or post it here) Step 5 - Does SMBClient let you list the shrares remotely 

You might want to notice that I've parsed the nmap output through grep a couple of times. By default, the output is verbose, and nmap reports on every host it finds, whether or not the port is open. Since I only care about hosts with that open port, I grepped out the lines that reported the IP, only if the result was that the port was open. Also, I performed a "syn" scan, which only initiates 1 step out of the three that comprise the TCP handshake protocol. This means that it's able to identify open, closed, and filtered ports. It also requires root privileges to create the raw socket necessary to perform this type of scan. Once you've done this, go to the physical switch and check the lights. If there are more lights lit than hosts who responded, investigate by following the cables. 

It would be normal to show activity for a while after a server was shut down, due to decaching of data. If your array does it indefinitely, it may be trying to auto-arrange data or defragment the array. The documentation probably mentions something like that, and if not, you may want to contact server support for more answers. [EDIT] You've halted the OS. Is there something unusual with having to power off and on the machine? (If the answer is 'the server should power down by itself', then have you turned acpi=off on the kernelline? If that doesn't work, try 'shutdown -hP now') 

Authenticating is absolutely simple using Likewise Open. $URL$ Nearly my entire Linux infrastructure has centralized authentication and user management thanks to Likewise Open. It's stunningly simple to install and implement. I cannot possibly say enough good about it. As a note, UIDs and GIDs are assigned according to a hash function, so they are identical across the entire infrastructure, so NFS mounts work perfectly. 

Have you considered using SNMP to log this (and many, many other things) on your system? Lots of monitoring system should be able to get you the information, and if you already have one in place, you can probably use it without needing to deploy another solution. 

Again, I can't recommend RAID 0 ever, except in the most unimportant cases. I second Tom's idea of RAID 1 to mirror the system drive where you install ESX(i), but I don't see the need to RAID-6 your drives, and lose the 2nd drive to parity information. The reason that RAID-5 is falling out of favor is because of performance (due to the way the information is written across drives) and failure rate (because the likelihood of an unrecoverable read error goes up as drive capacity goes up). RAID-6 doesn't improve performance over RAID-5 when it comes to writes, and your 8 300GB drives aren't anywhere near the capacity where it starts to become statistically significant that you'll fail during a crash. 

So, overall, I've really got to agree with William's answer of "hey, what about IPv6?".... Essentially, you're talking about at least a /22, and maybe bigger. When you say "least expensive", you really mean "wow, I'm going to hemorrhage money". Please, describe what you're trying to do. There may be another, better, way that doesn't involve insanely large amounts of IP addresses. 

That works well enough, but lots of machines have firewalls setup to block incoming ICMP packets, and so won't reply to a ping request. If it's an all-Linux network, you can scan for port 22, which is the ssh port. That's done like this: 

On the other machine, cd to the .ssh directory, and edit a new file called "authorized_keys". Paste the contents of the .pub file into this (it's all one big line). 

I suppose it depends on your environment. I occasionally get an optical disk that can't be read, but rare is the time that I've actually lost data because of it. If there were a solution that was nearly universal, and unobtrusive, and didn't double the amount of space needed, then I think it would be worth it, but it hasn't affected me much, so I don't see the need, even though others might. When I'm transferring things, I typically do so over the network, and when I don't md5sum tells me whether I got a good copy or not, even before I disconnect the storage. 

1) There are much better (read: cheaper) places to get SSL certs. Go Daddy has an intro price of $30/year ($URL$ 2) No. You can get a (very expensive) wildcard certificate that could work for www.bikestore.com as well as shop.bikestore.com, etc 3) Well, if you want to take credit cards, then you need SSL. You could go with a company like paypal that does all of the processing for you, and uses their own site to do it, so you don't have to deal with setting up a secure site only to have it hacked by a vulnerability in the shopping cart software. Edit Don't use a self-signed SSL certificate. As phoebus says, they're for testing or internal use, and no one trusts them. Get a commercially signed certificate from someone cheaper. There are lots of companies out there. I was thinking about getting a certificate for my blog and here's the ensuing thread: $URL$ 

It seems like there's a lot of disagreement in mindsets when it comes to installing rackmount servers. There have been threads discussing cable arms and other rackmount accessories, but I'm curious: Do you leave an empty rack unit between your servers when you install them? Why or why not? Do you have any empirical evidence to support your ideas? Is anyone aware of a study which proves conclusively whether one is better or not? 

Judging from the comments to the original question, and you just want some sort of GUI, isn't vnc-server the obvious solution? 

The strong-armed solution for something like this is 802.1X, where a user has to authenticate to gain access to a network port. Implementing this is non-trivial. How large is your userbase? If it's reasonably small (or if you have a good up-to-date inventory of user machines), you can configure your DHCP server to only hand out addresses to known machines. What are you using for your DHCP server right now? 

I love the smell of new machines in the morning. I'm automating a machine creation workflow that involves several separate systems across my infrastructure, some of which involve 15 year old perl scripts on Solaris hosts, PXE Booting Linux systems, and Powershell on Windows Server 2008. I can script each of the individual parts, and integrating the Linux and Unix automation is fairly straightforward, but I'm at a loss as to how to reliably tie together the Powershell scripts to the rest of the processes. I would prefer if the process began on a Linux host, since I imagine that it will end up as a web application living on an Apache server, but if it needs to begin on Windows, I am hesitantly okay with that. I would ideally like something along the lines of psexec for Linux to run against Windows, but the answer in that direction appears to by Cygwin, and as much as I appreciate all of the hard work that they put in, it has never felt right, if you know what I mean. It's great for a desktop and gives a lot of functionality, but I feel like Windows servers should be treated like Windows servers and not bastardized Unix machines (which, incidentally, is my argument against OSX servers, too, and they're actually Unix). Anyway, I don't want to go with Cygwin unless that's the last and only option. So I guess what I'm asking is if there is a way to execute jobs on Windows machines from Linux. Without Cygwin. I'm open to ideas and suggestions, including "Look idiot, everyone uses Cygwin, so suck it up and deal with it". Thanks in advance! 

So yes, originally, the password file contained actual passwords EDIT This was in UNIX. Even by the time the above referenced paper came out, it was seen as a bad idea. Since Debian is post-1991, it would be ludicrous to assume or believe that the Linux distro would have enabled password files without even crypt protection. It is far more likely that initial versions of the Debian passwd suite used non-shadowed passwords, which would have stored the encrypted passwords in /etc/passwd itself. The mechanism used back then would have been 'crypt', which is mathematically simpler to compute than the current practice of using md5 (although other options are available). If you get a chance, pick up the Linux Pro Magazine's "Shell Handbook" edition. I've got a 4 page article on command-line user manipulation, and I talk about the history of UNIX password security. 

I created two OUs, one to store "Employees", and the other to store clients who need to authenticate to our FTP servers. The reason that I used OUs is that some of my devices can authenticate against LDAP, but don't (seem?) to recognize group membership only. Also, it "felt" better to cordon off external accounts. If I had a bigger infrastructure with more clients, I would have created their own domain for them. 

Alright, so I want to start leveraging my SAN a little more than I have been, and at the same time, take advantage of ESXi. Currently, I've got an array of Dell PowerEdge 1955 blades connected to a single-enclosure EMC AX4-5 FC storage array. I'm essentially using the SAN as DAS. I've got LUNs on the SAN that are pointing at specific physical machines, and those machines utilize the LUNs for whatever (mostly databases and Samba/NFS shares, depending on the target server). I've got multiple physical file servers, and each one has a samba config setup to serve the appropriate shares. Since I never got RHCS to work, only one of the file servers has the LUNs mounted at a time. In the event that a fileserver dies, I fence it manually (either by unmounting and unpresenting the drive, using the navisphere utility, or by killing the power via DRAC) then use the navisphere utility to bring up the presented LUNs on the next contender (after which, start apache and the other daemons). All by hand, right now. I feel sort off like Ferris Bueller playing the clarinet. Never had a lesson! Anyway, I'm trying to improve. What I want to do is install ESXi on the physical hosts, then create LUNs to hold two fileserver images (in case one gets corrupt/fubar), one of which will be the active, the other will be the standby. At least this way, I don't improve the automation (although I'll get around to writing a script to switch the "active" server at some point soon), but I feel like I'm adding flexibility, plus I can use the ESXi hosts to hold other VMs, and the hardware won't be wasted, like it is now. My questions are: 1) How stupid is my plan? 2) When it comes to the actual implementation, should I create a normal vmdk image on the LUN, or should I give it a "raw" partition (if that's even possible with ESXi?) 3) Is there a "good" way to use non-clustered fileservers? 

They have the ability to blacklist any keys generated, pretty much whenever they want. There was a "free" technet subscription offered by mistake a couple of months ago, and the keys generated during the mistake were all cancelled. At least, that's what I heard happened.