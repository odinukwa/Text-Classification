Depends on your Linux kernel vendor(Linux distribution). But most likely it has one. To check / your / / for string : 

You can probably workaround that problem by changing your docker's network settings (e.g. disable IPv6). Or if you have some time to spare you can try resolving to a LOC and try figuring out what could've caused GPF there. PS. Also you you probably haven't posted your first Oops here, since you already have and in your 

Yet again nobody mentioned php-fpm. It's now bundled with php itself so you should read docs about php-fpm in PHP manual. 

Looks like a race in Linux kernel between timeout and with : $URL$ Ubuntu Kernel git says that fix was merged in on 5 Mar 2012. Upgrading your kernel to (at least) (or moving to release on your production servers) should fix your problem. 

Bigger address space means that address has more bits that can be used as data storage. For example hop-count between two nodes then can be a function of their IPv6 addresses e.g.: IPv6 address can be in format so closer nodes will have more Most-Significant-Bits same. This is just an example, of course "closeness" metrics could be stored in some kind of external database like DNS records. There are some techniques of using address space of IPv6 for cryptographic purposes such as Cryptographically Generated Addresses (CGA) and SEND (SEcure Neighbor Discovery) When IPv6 is enabled all nodes in network have link-local IPv6 address(if not configured otherwise). So there is a chance that you can access even mis-configured node. You can get nodes' MAC addresses directly from link-local IPv6 address (if IPv6 privacy extensions are not configured) There is no way you can possibly use IPv4 in subnets with thousands of nodes - your network will be overloaded with broadcast traffic (e.g. ARP). You can query node for additional information using node information, e.g. in BSD you can query host for ICMPv6 Node Information Node Addresses: 

BSDs are using structures called / for network data. They used everywhere from driver code to socket layer. Even if packet had 1 byte of payload it will consume 256 () bytes in mbuf. If packet size (with all frame/packet headers) >= 256 it will consume 256 () + 2048 () bytes. Hence the difference between and . To answer your question: is more correct value to use. PS. For more information consult to TCP/IP Illustrated Volume 2 - W. Richard Stevens and Garry R. Wright, Chapter 16 - Socket I/O, Section 16.3 - Socket Buffers, p.476 

then ones a day/week/month you should run to update collection (not programs them selfs) After ports are extracted you can find one you want and install it: 

Solution 1: Hide untrusted PC under another router. This will solve arp-spoofing/mitm problem. Solution 2: Use any router with DD-WRT firmware. There you can setup different Wireless LANs and even put them in different VLANs. Too bad that ADSL modems aren't supported by it. 

in your case you should have with and . Also note that I set MAC of same as my wifi card. As another solution you can set up an IGP between host and guest OS (e.g., OSPF). 

If I understood correctly one is for input drops other for output drops (i.e ). PS. For additional information refer to Section 3.3 " structure" of the TCP/IP Illustrated Volume 2, Stevens & Wright. Or source code of you OS. 

Question is fully answered about a three time by now, so I wanted just add some cents. Note that for quite a some time default ipfw config drops this kind packets: 

From the shell, you can just run setup and change the ip range for the blue adapter. The options you do are: Networking -> Address Settings -> Blue Change the IP address to the desired setting and make sure that the subnet is correct to make the network the correct size. Given you have it working with a /23 you don't need to change the subnet. 

Wanted to thank both @BillThor and @kasperd for their excellent answers. Incorporating points from both of your answers, I am doing a deep dive on the Microtik RouterOS and looking at either the 24 port "smart swtich" $URL$ or the "13 port switch" $URL$ would be a great fit in this application. They look like a great value and are very flexible. 

I have looked for a solution to this problem but everything that I have found never seems quite match this scenario. I have a small colocation space and I only get 5 IPv4 addresses. I also get an IPv6 /64 block. I only have one LAN drop, external IP addresses only. The colo provider doesn't provide private network addresses. The gear I have is a 4 node superserver... each node has IPMI NIC and 2 regular NICs. I also have space for a 1U "switch" of some description that I am seeking advice on what to get. My understanding is that the IPMI ports only support IPv4. I need to be able to access these 4 IPv4 IPMI ports with only the "switch" operating. I also need at least 1 IPv4 address per node for web servers etc so I am out of IPv4 space. What I would like to do is find a 1U switch/router to route the IPv6 addresses to the IPv4 devices. I have looked at some of the Layer 2 and Layer 3 switches and they have static routing, but I don't think it would route across protocols like this. Am I going to have to break down and put in a full router? What are some of the approaches to achieve this functionality? 

I am at a colo provider that supplies a single IPv6 /64 block. The goal was to route the provided /64 of IPv6 addresses to the hosts behind the Mikrotik running RouterOS 6.24. Some Mikrotik examples and that I found always had the user getting a /48 or at least a /64 and another small block to connect with the gateway, or blogger major.io describing the possibility, however not recommended to use the link address to connect with the uplink router. I didn't have access to this so I tried to do it another way. What I had tried was a router IPv6 address on the gateway port as a /126 block aaaa.bbbb.cccc.dddd::2/126 to talk to the uplink router at aaaa.bbbb.cccc.dddd::1/126. Then I created another router IPv6 address on the master port behind the firewall with the mask aaaa.bbbb.cccc.dddd:8000:1/65. I also configured neighbour discovery so that the clients could autoconfigure. From the router terminal, I was able to ping the internet, and ping the hosts behind the firewall. From the hosts, I was able to ping the router addresses on both sides of the firewall but not when it needed to go to to the uplink. From another network, I could ping the external router addresses in front of the firewall, but could not access the aaaa.bbbb.cccc.dddd:8000:1/65 that had a static route entry in place the master port behind the firewall. I had no rules in my firewall during testing. Is my theory wrong, or is there problem with this model being used on the Microtik?