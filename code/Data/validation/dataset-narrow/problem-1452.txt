If you mean the APK for debugging on Android, I wouldn't worry. Once you have your project setup, plugging your phone in will make Eclipse automatically upload and run the APK on your phone. The Android project in your workspace will generate the APK in \bin. In my case, I had a project and an project, and my APK shows up in . Edit: since you mentioned deploying your app to the store, you need to sign it. Detailed instructions here here on their wiki: 

You can do the same thing -- all you need to do is draw the sprite with the opaque pixels coloured with your outline colour. (Maintain transparency values so that round edges still look round). This works, looks better than drawing a scaled version, and has some other cool properties (like being able to control the outline alpha for boldness, and retaining any "holes" in your sprite image) -- the only drawback is that you can't really control the width of the outline too well. 

An example of core gameplay mechanic is: in Tetris, you spend 99% of your time rotating and placing blocks on top of other blocks, trying to make lines. That's your core gameplay. Most of this you won't know in detail; the rest, you can figure out along the way. 

In a word: PCG (procedurally generated content). Procedurally generate the level; this allows you to create "infinite" length as needed by the user. What does PCG mean? In your context, PCG means: only create as much of the map as necessary (maybe 10 screens worth or something ahead of the user). When you "run out" of road, recreate more. The content is generated algorithmically. Looking at the video you posted, I would just randomly generate the width of the road; that's it. Generate enough ahead compared to what you need. It's really simple, and flexible; you get "infinite" road. 

The solution allowed me to have a single class with an instance, internally, which is platform-specific. And it works. 

Remember how AABB is non-rotated? Ninja Physics will handle rotations (so it can do slopes and complex tiles). This is a more flexible (and probably more accurate) physics model; it's probably slower. 

(To summarize, my question is: is there an existing, free to use collection of RPG Maker XP style assets I can use somewhere out on the web?) 

Working on small teams across small games (one-man teams on small casual games), I moved from "heavy design" to "quick design." I find iterative development (two weeks focused on a single goal, eg. core gameplay) helps flesh out the design, and gives you something to play, which means that you won't change your mind and invalidate 90% of what you designed which looked good "on paper" but not in-game. Having said that, I do spend most of my design time on the core gameplay and mechanics (how the main game will function), and that rarely changes much -- it gets tweaks and sometimes I pick up new ideas or drop old ideas; but nothing goes without a working prototype. On the technical side, anything should get at least a few minutes of thought before making the code real. But, you can always refactor later. 

This is going to sound obvious, but, why not just split your room into smaller pieces? Pick an arbitrary size that won't bump heads against any graphics cards (like 1024x1024, or maybe larger) and just break your rooms into multiple pieces. I know that this avoids the problem, and honestly, this is a very interesting problem to solve. Anyway, this is kind of a trivial solution, which may work some of the time for you. 

Take a look at the features page. Under "Platform Comparison" it has an entry for . For this is not available, but for it is available. Therefore, yes, it is possible to make a PC game with it -- provided you have the pro version. How much is the pro version? Based on the FAQ: 

Because you can uniquely identify a line with two boxes, since every pair of boxes only have one shared side. 

3DSMax is pretty expensive. I haven't used it since the late 90s (and remember complaining when the cost hit $1000!) -- it's now around $4000USD, which is pretty pricey. It's also great, and I find working with Blender difficult (the UI is pretty hard to work with.) Anyway, excluding the 30-day trial, is there any affordable way to legitimately acquire a 3dmax license? With Photoshop, I was able to snag a copy of CS3 at a very reasonable price from someone who upgraded to CS5, but I don't see something similar working here. What does everybody else do? 

Well, this is embarrassing. It turns out that I was not drawing using integer positions, but float positions. Archy pointed me down the right path with his comment As soon as I added a trace statement, I noticed that nothing traced out. It turns out that my class correctly used integer values, but my still used float values from the raw . Although I didn't try texture filtering and clamping, I was suspicious that these were not the correct change, because I was drawing a 2D image at the same width and height as the source image (no scaling). 

I've made a few games which I've actually released into the wild. There's one particular issue I run into over and over, and that's the issue of the interface/theme of the game. How can you make non-arbitrary, consistent decisions about the look-and-feel and interface of your game? For example, in version one of my Silverlight chemistry-based game, I made a (bad?) decision to go witha natural, landscape-style look-and-feel, which resulted in this UI: 

You can treat this as a max/min tree. The goal would be to minimize the "visibility" of the predator. You can compute values as something like: 

Also, read widely in your field. Read GameDev.SE, read game development blogs, and implement things that look cool, fun, or interesting. 

If you're worried about performance, the performance of checking multiple times is not usually significant; ditto for having bool conditions. If you're interested in something else, you can use something similar to the null design pattern to solve this problem. In this case, lets assume you want to call a method if the player has no lives left. You would implement this as two classes, one which calls , and one which does nothing. Lets call them and like so: 

In my case, I used a configurable interval like to indicate frames should be updated every tenth of a second. 

Otherwise, it's probably not worth the work; and in the worst case (average case?), you may even decrease efficiency. 

My roguelike generates a number of circular rooms. I quite like the current results, which look something like this: 

I decided to go with libGDX for similar reasons. To expound on my comment, I will mention what I find are the pros and cons. Pros: 

No, there's no technical or legal issue why you can't sell your LibGDX game on Steam. However -- and this is not specific to any platform or library -- your game needs to be pretty good for it to get their attention. 

TLDR: if I have entities like and and components like and , should I create interfaces for each component and inject them into my entities using DI, or should I be doing something else? (In this case, would extend and have an instance of a which is injected by DI. Any calls to or would be implemented as or .) 

refers to the instance of your image. and are the horizontal and vertical scaling components respectively, with the trivial case of when you scale uniformly. Edit: if the origin of the image is not the default (top-left corner), you should also adjust your rectangle by the origin point. 

After adding velocity to my game, I feel like my textures are twitching. I thought it was just my eyes, until I finally captured it in a screenshot: 

How do people making 2D games maintain a consistent scale for everything in their game? Say I'm coding an RPG. A house needs to be proportionally bigger than a person; an item, smaller. Everything from enemies to locations to people. Is there a technique to doing this -- like picking a single item like the player sprite and scaling everything relative to that? 

In terms of storing code in a text file, I personally like compile-time error checking. You'll lose that (if you have it -- Ruby, anyone?) by doing this. If you're still keen, look up dynamic compilation. You can read the text file, compile it at runtime, and execute it. 

One simple solution used with file downloading is hashing. Hash the save file and store this "fingerprint" somewhere. When you load it, hash the file, and check it against the fingerprint. If they don't match, the file has been modified. Of course, if someone decompiles your code, there's nothing you can do. For this answer, this means they can store the hash of the modified save file, too. Another option would be to send the fingerprint to a server somewhere, where the end-user can't manually modify it if they've modified the save file. This is similar to what iTunes does when restoring iPhone images. 

I have a pretty vanilla Monogame game. I'm using PNG for all my sprites (made in Photoshop). I noticed that XNA is butchering the aliasing; no matter what I do, my graphics appear jaggedy. Below is a screenshot. The bottom half is what XNA shows me when I zoom in 2X using a on my (to make the effect more obvious). The top is when I pasted the same sprites from Photoshop and scaled them to 200%. Note that partially transparent pixels are turning whiteish. Is there a way to fix this? What am I doing wrong? Here's the relevant call to draw to the : 

All you need to worry about is tracking which cells are connected to. The added benefit is if you put a delay before notifying neighbours (eg. 0.25ms), you can "see" the electricity "flowing" from start to finish. Unplugging would mean turning off the power source, which should work in a similar way, except with setting stuff to "off" instead of "on." Inverters wouldn't be hard to model either. 

Each of the drawable classes (Sprite, etc.) have a method, which takes a as a parameter. The game class then passes the sprite batch to the screen, which passes it to the dra method. This served me pretty well. The separation of concerns is pretty good (from my perspective -- I like to hide anything platform-specific, like XNA-specific, from the actual game logic and classes as much as possible). Not sure if it's exactly what you want, though. 

Make it 3d. 3d Tic-Tac-Toe is played on three 3x3 grids. You can win on any single board, or across boards (eg. top-left square in every board; or top-left, center-middle, and bottom-right across the three boards. Some win conditions: 

I'm creating a bunch of games similar in style to RPG Maker XP -- 2D, top-down style adventure/action/RPG. I used RPG Maker XP in the past, and their sprites are great. Their content is packaged into something called an "RTP", which is a collection of sprites, tilesets, etc. which is available for exclusive for use with their tool. Is there an alternative, free RTP I can use out there? Or, is there a large collection of freely-available material I can use? The standard RTP comes with most common tilesets (forest, grassland, desert, snow, 100 types of people, etc.) so I need something similarly comprehensive. 

Thanks for the comments -- I finally understand what you want. TLDR: the summary of your question is encapsulated in the libGDX project setup page. Essentially, libGDX has you create one "core" project (which is a standard Java project). Within it, you have your main game code. Beyond that, you have wrapper projects (one per platform); these only call the main startup code from the core application. For example, if you want a standard Java (Desktop) app and an Android app, you would have these projects: 

Have you tried PlayN? It's a cross-platform library that compiles to Flash/HTML5 (web), and Android; iPhone is in the works. I haven't used it, but it looks promising. (Be warned that the Android bindings are also very new.) 

*Solution:* I have a RealTek ALC888. I solved this (OpenAL) by disabling hardware acceleration on my sound (Control Panel > Sound > Advanced, disable acceleration). I'm trying to integrate sound into my Monogame game. I don't have the content pipeline hack -- just straight Monogame (Beta 3) at this point. (I tried adding the content pipeline, but ran into some issues.) I added a .wav file to my directory, and I can create and instantiate both and classes. However, both show durations of (on a ten-second long file), and neither plays. I can call without any issue. But when I call , nothing plays. I've tried a couple of different sounds, and different formats (MP3 and WAV) to rule that out. Only WAV seems to even load without crashing out, but it doesn't play. This issue only occurs on Windows XP. I tested it on a Windows 7 laptop, and the sound plays fine. Edit: I opened a MonoGame issue to track this, and it includes several more details. 

My "usual" stack for game dev is to create (in-browser) Silverlight games. I've decided I want to branch into iPhone or Android, and decided to go droid because it's cheaper (considering I don't have a Mac). Having now all the requisite software and hardware, how do I decide which games to code on both platforms and which to not? In an ideal world, it would only cost me 5-10% more (time/effort) to port it to Android having developed it for SL. But I know the worst case is 100%+ (i.e. rewrite), and that it'll be somewhere in the middle. Considering everything will likely be free (although it might be worth it to release the SL one free and offer a $5 paid one on Android, not sure), what are factors to look at? 

Your situation may vary. If you don't need any or all of these benefits, it's not worth the additional overhead to: 

(Emphasis mine.) Based on this, I can safely assume that MonoGame/XP is broken for audio. Unfortunately, Steam's hardware survey frequently cites around 10% of their user-base uses XP. So it's vital to support it. To make this work, I has a sad. I already have my game/framework code both split by platform (Windows and Android). I added NAudio to the Windows side, along with this lovely OGG player for NAudio. To get my framework code to be uniform, I: