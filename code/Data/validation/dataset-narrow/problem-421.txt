While you're doing right in using (the equivalent of) , you are forgetting that can be called, breaking your code. My suggestion is to use something like this: 

Have you considered an array? You can then create multiple objects, having each object the values per point. Like this: 

You trust too much in the user. You have no validation what-so-ever! I could say I have 5 coins and then only give 2 denomination in the wrong order. What would happen? 

With the replacement as an empty string, you would remove the double-space in . Normalizing it to a single space will return instead of minifying into . 

You are extremelly inconsistent with your backticks. Either you use it or you don't use it! Don't mix both, please! 

Notice something? The use of jQuery just to retrieve the value of an . Just remove the jQuery from there! has the same effect at a WAY HIGHER speed, without ANY bloat. You have it right a few lines below, and I give you credit for that. 

This could help a lot with any future class change. You repeat 3 times. This shows a little of misuse of the library, and you should be careful with this since it kills performance. Try to save it into a variable or chain it's methods, if possible. You have a "magic" number there! Imagine that now you want to change the width that the class it removed from 990 to, say, 1020. You can argue and say "I just edit it manually, duh!". Now imagine you have 300 lines of code and you don't know where it is and it's previous value. I recommend storing that value in a variable by itself. You can eliminate a lot of bloat by reducing duplicated conditions. You have the following code: 

Because is inside the loop, it always gets reset. Are you sure you have tried the algorithm with larger files? (And tested it is correct)? There are more reasons why I think your code is broken, for instance the handling of , and where the assignments take place. Rewriting . What should do is the following: 

And be done with it. There's probably a lot that can be cleaned up further in the rest of the code, but I just wanted to give a short overview of how to fix the . 

An important aspect when doing optimisations is profiling. You should really start with that instead of asking random strangers on the internet. Anyhow, let me take a quick look. Filtering 

Let me begin with . The variable is not used, except for being updated. It can go. The same goes for , , , , . 

It seems a bit silly to use both and . I'd suggest replacing both by or . Using is a bit superfluous for ranges of length 3. 

First of all, the could as well be written , but the point is: sometimes returns 1 (and other times 0 or 2). In that case, you'd call , which is basically a do-nothing operation. In fact, I'd hope that would throw an error in this case, but I can't check your code there, so I'll assume it will happily move whatever you tell it to. Unreachable conditional? One of the conditionals in your code is the following: 

Created a few variables at the top, with needed information. Created a loop to go through all the elements Reduced the number of local variable to the bare minimum Removed global variables being declared inside the function 

Besides this line being repeated, it also has the number of rounds to run. You should create a constant for that, at the top. 

And to improve performance, you don't need the . It's a waste of time and CPU power. Also, why instead of ? And why not an array with these objects? I would rewrite the whole thing as this: 

I'll end the Javascript review here, since it is already too lengthy. Notice that I didn't made any attempt on making the changes incremental. I took right from the original code and showed you with the changes. All these changes are left as an exercise to the O.P.. 

To avoid 'poisoning' the object, I only created 2 variables and use one of them as an (The other is just to save if we are running in Javascript or PHP). Was this a good decision? What else can I improve on my code? 

First of all, let us do some short-circuiting. You're doing a lot of logic to see if it is a nice geometric progression, and after all the hard work, you check some very easy conditions. Turn that around! 

Now, let's start analysing the large method . First of all, we could apply the same trick as we did for to speed up the lookup for . That's going to make your code a bit more efficient. It's a tad large, so let's first talk about the branch. 

Also, make sure to add any created object to the after creating, so that you don't incur a database hit for that. Dispatch 

And a similar loop for columns. This has one problem: What if the user does not enter a number but something else? 'Pizza' or 'one'. In that case, the throws an exception, and that should be handled as well. 

This is a bit convoluted: you're performing a lot of queries (depending on how many followers a user has). Ideally you'd like to perform just one query. Also, looks like it will return a queryset, instead of a list. 

As @Dan said, you are re-re-re-re-re-forcing jQuery to painfully look for the header, every time you scroll. Can you imagine how slow that is!? I will take @Dan's suggestion and change it a bit: 

Also, notice that when you use on an event handler, jQuery runs and . Depending on what you are trying to do, you should be careful when returning anything in an event handler. 

Now, how will you distinguish between an error-ed query and a successful one? You can't! And that makes angels angry and cry. Return in case of error. 

Knowing it is a rather large script, I've tried to split it into multiple functions, to make it easier to understand, read and maintain in the future. You can see the complete instruction list on $URL$ As far as I know and tested, this is working as it should. All it's functionalities function as intended and there seem to be no obvious errors. Regarding readability, error handling and readability, is there anything else I can improve? 

What, in the name of the Lord, is going on here? Why are you fetching an object instead of an associative array? What does do? Why is it called ? What is for? What's in it? 

I do not want a record to be added if a record already exists with the ShiftID and ShiftHour of the record that I am trying to add. The way I am achieving this currently is having the property 'RecordOutput' in the helper class try and add the record then return a string which I handle with a switch statement and provide feedback to the user accordingly. This seems to be working fine but I can't help but think it's a terrible way of doing things. Can anyone provide any feedback and suggestions for improvement? Output helper class: 

If I am going to require this list elsewhere in my application or bind a different Gridview with the same data then clearly a class is the way forward, however if I do not, is it fine to just bind the GridView using the query in the code behind as per the first example, or is it recommended to keep all such operations in separate classes regardless? 

Scenario: I am using a helper class called 'OutputHelper' to add a new record to the table 'Output'. My 'Output' object contains the following: 

Your validation is scaringly non-existing! You currently don't even check if has the method . You don't check if is an object! Here's how I would do that: 

This function should do 1 thing and do it well, not a bunch of them and doing it ok-ish. The already-mentioned readability Variable names should be descriptive. Example of variables you have: 

Yesterday and today I've made a very basic syntax highlight. It creates a function in the object that handles part of the job: 

If you want to support older browsers, this is required. Otherwise, just ignore this, since all modern browsers support it. (Partially or completelly) 

These are easily fixable. Fixing this may solve some quirks when you spice up your page, in the future 

This helps the code to be more readable and reduces the nesting level. Too many chained s and loops will cause your code to be hard to read. 

The on the same line is target of discussion. In my opinion, it should be in a line on it's own but most people prefer this way. Other things like this: 

Why do you even have the /? It adds nothing of value. Also, the parameter is now a list of , instead of a . Another thing I'd suggest doing is using the attributes of our class we just defined. 

One of the first things that I notice is that you define the as an instance variable. Better would be to define it at the top level: 

Wow, we saved a few lines of code. If we're lucky, it's also going to gain us some performance. Next, you have . This can be replaced by (as that's how dict containment checking works). Furthermore, can be replaced by . Furthermore, you write followed by . You can simplify this to . 

First, you get the sentences from . Then, you again get the sentences from , but as many times as there are sentences in . Then, you only use the first item from the second set. 

(Also note: if the user inputs something different from or on the first go, you get a : is referenced before it is assigned because you never enter the loop). 

It isn't the prettiest thing on Earth, but may work for you. To call it, you don't have to change anything! Just remove that on . With some bitwise operations, you can cut down this code by a lot! 

First, you have that dangling . You are currently wasting too much CPU! You repeated 5 times! You have no idea how slow that is. Store that in a new variable. You could remove repetitions, like this: 

Based on what I've seen on Firefox 53.0.3(32-bit), on Windows 10, my implementation is around 5-20% faster most of the time. You can try it bellow: 

You aren't validating your images properly! This allows me to send you an image file with a webshell. Something like this: 

Named as , I can access it as , which would execute the PHP code! Also, you even allow names like , which can be used to place executable code somewhere where an attacker can access. This can be solved by using , which returns the filename and extention. This is a tremendous hole! NEVER verify the mimetype. The mimetype is a lie! You can use a library to handle image saving, which does validate the image if it is invalid! One example of a library is WideImage. Here's an example, using WideImage: 

I am then doing this to get the Description field from the DowntimeCode table for the DowntimeCode with the sum highest value in the Downtime table for the current date and a specified line: 

Something that bothers me a lot when coding is best practice. I am completely self taught and I find it difficult to know whether I am doing things in the 'right way'. Let's say I have a Gridview on a page which displays data from the following list: 

Or, should I have a class elsewhere that performs the query and returns a list and then bind the Gridview like: 

Regardless or how simple or complex the query is, can I just bind the Gridview in the page code behind file as below (in Page.Load or wherever else I want it to run): 

I'm new to ASP.Net and up until now my code has worked but has been a mish mash all over the place with no real structure. I'm trying to teach myself how to keep the presentation/BLL/DAL separate so I have built a simple page to try and work with. Page has 3 text boxes: clock number, first name and last name. On inputting a clock number in the clock number text box, I want to go off to my database and fetch the first name and last name of the person that clock number belongs to. My DAL consists of 3 classes as below: 

What's wrong? The names! implies some actual text, but you have a . is alright, but it is actually . And that is a . I propose the following rewrite: 

(Due to limitations on the representation of whitespace, I've seen myself forced to replace all tabs with a 'indicator') 

In the name of all Javascript developers, I thank you for taking this very simple step! You have no idea how much is helps us and helps you! 

Why the double ? You only need 1 and it is outside that , since both return the same and there's no more code. Library misuse: You repeat 4 times! You can chain everything and it will work. That's what jQuery is for! Please, chain them. Duplicated event handling. You have this: 

Same goes with quotes. You have single-quoted and double-quotes strings everywhere! Just pick 1 style and use it! (My recommendation goes to single-quotes.) 

It draws a 1-2 pixels high horizontal line, using the specified color. Some HTML engines and browsers use , others , others simply and others need the tag for coloring. And yes, using actually changes the color on some browsers and engines. Is there any other way to write this, but still keep it as compatible as possible with as many email clients as possible?