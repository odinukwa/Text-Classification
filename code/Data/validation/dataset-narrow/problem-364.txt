I need to make packages for Oracle 10g that can be changed while users are still logged in an using an application that makes database calls through PL/SQL. Unfortunately, anytime a package is updated while users are using it they get the following error: 

The values , , and can be replaced with the values of the the stored procedure that you would like to look up. 

a column defined as VARCHAR contains alpha characters but is being used where a number is required a column is null and is being used where a number is required 

I am trying to alias some columns that are being used to interface with a 3rd party data aggregation system. This company has stated that they might change their naming scheme in the near future, so I preemptively created constants to be used as column aliases in my PL/SQL package. However, it doesn't seem like constants can be used to alias columns. After quite a bit of searching I found that variables can't be used to alias column names dynamically (there are lots of questions about dynamic aliasing), but I wasn't able to find anything stating whether or not they can be aliased using constants. My attempt to do so failed and Google search results returned negative, so I assume the answer is no. If the example below isn't feasible are there any alternative ways to alias columns, so that they only need to be changed in one location? Example PL/SQL Code 

104,40 What happened to jsonb here? What caused it to inflate? Maybe if I use smaller numbers that have less characters... 

What is the additional overhead of an array compared to a normal column of that same datatype? In other words, if an array will almost always have one value in it, how much space would I be "wasting" by using an array instead of a normal column? 

20,26 Check if jsonb actually stores integers as plain text; if so then this next one should use 4 bytes more for jsonb: 

The json key in is 46 characters longer than that in . Would the size of be 46 million bytes greater than ? 

I'm using Django with Postgres, and I'm looking for a field/datatype to store address components that come from Google Places API in this format: 

Long version: I was originally interested in using an array of integers, here are those tests. In each pair of comma separated numbers, first corresponds to (bytes), second number is (bytes). 

The goal is to allow users to see this row in their results if they search for , , , , , etc. How should this data be saved? 

Split by Schema instead of Database. I think this is the best option if there are no performance sacrifices relative to having a separate Database. Don't share usernames; a user in Canada could have the same username and primary key as a user in USA. 

Are there any methods or database variables that I can set to help isolate this error? Why isn't the error being trapped by the error handler? 

However, the procedure raises the error and does not get trapped by the error handler at the bottom. Questions 

My first inclination would be to use a check constraint for validation instead. I did a Google search for situations where one should use a check constraint and when a trigger would be preferable. Question My question is, what specific situations should one use a check constraint and what situations should one opt to use a trigger? 

I was looking at a tutorial on triggers for SQLite. The tutorial said that a use of triggers could be for data validation. The following code was given as an example: 

This makes it really difficult to make changes that are still compatible with the application that is using these PL/SQL packages. I read that by using the error can be avoided by: 

Background I am working on fixing a large query that I inherited. The query consists of over 200 lines of DML statements. The search queries the database restricting the data to a single month. Most months work just fine, but there are a few months that generate an error. I suspect the problem is one of the following: 

Since PostgreSQL doesn't have 1-byte tinyint, the second best option would be smallint. However, I've read from various posts that it may actually be slower because CPU's are optimized to operate on 32-bit integers, or there may be implicit conversions to 32-bit integers. Besides these reasons, are there any other reasons I'm not yet aware of for not using integers smaller than 32-bits? 

Save it as-is in ? There's a lot of duplicate text, for instance and keep appearing over and over, wasting space. Strip all the keys and only keep the actual meat of the components in a , ex. ? Normalize this data in layers of foreign-key related tables? Four tables are required to normalize this: , , , . (I actually started with this, but couldn't wrap my head around how to go about querying it.) Something else? 

22,26 Strange, it uses 2 bytes more, no idea what that means. Try some more practical and realistic data now: 

99.9% of queries will be filtered for a specific country (either USA or Canada for now), so I would like to split the database country. This way, a query would not have have to step over all the rows for the other country, there's one less column to index. All countries should share users so there are no duplicates, but Postgres cannot create a foreign key to another database. and share users, and share users. How do they do it? The alternatives I have in mind so far: 

The second half of this warning is difficult to understand and I have not been able to find any examples through the Oracle website, Ask Tom, dba-oracle.com or any other website that provides information about Oracle products. Question: What are some examples for invalid usage of packages that implement the pragma and will I be able to use this with client-side reference cursors? Example Package 1 

If I can find the row that is causing the problem, I can change the query to handle said data appropriately. However, I don't know how I can isolate that row. I have attempted to break the query into parts and see where null values are being generated, but the entire query is dependent on a number of outer joins. I have been able to isolate the range to few days, but that doesn't allow me to isolate the row in question. Also, the query has been defined as a stored procedure. At the end of the procedure I have defined an error handler to catch all errors and display a message: 

After reading through lots of documentation, I keep stumbling upon the same warning for using the pragma. 

I did a little bit more research and found the answer to the problem. Even though the first parameter for is listed as in the 10g documentation for DBMS_OUTPUT. The actual name for the parameter is . You need to bind the name using . The actual parameter names for stored procedures can be discovered using the following query: