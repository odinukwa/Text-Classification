I have been trying to debug this problem for 3 days now. I tried using the wiring-pi library and the pigpio library but both have the same problem. This is an example code with the same issue: 

Good day, I am currently working on an obstacle avoiding UAV using stereo vision to obtain depth maps. I noticed that the quadcopter would sometimes not steer to the correct direction. I am using the Raspberry Pi Compute Module IO board which comes with two CSI ports used with two v1 Pi Cameras. Issue I soon found out that due to the latency between the cameras, the left and the right images are not in sync thus the errors in the depth map result. Steps taken: I noticed the image blur when moving the cameras around so I adjusted the shutter speed by setting the UV4l/raspicam driver. With the shutter speed, I also tried to increase the framerate as I've read, it improves the latency issue. In my code which uses the opencv library, I used the grab() and retrieve() commands to replace the read() command so that the frames from both cameras is grabbed at the nearest time possible however it didn't help much. Does anyone know any possible solutions? 

You don't need the file at all - The default setup in Raspbian Stretch does not contain an interfaces file. So just delete/move/edit the /etc/network/interfaces file if you have created one. This just works as the wpa_supplicant service will just start up automatically if it finds its config file () and connect the WiFi interface () to the network. The default DHCP client dhcpcd attaches to all interfaces so it will then obtain an address. If you want to assign static IP addresses or do other fancier network config you may then need to create an file or modify the file. And if you want the device to be accessible via ssh then you can create a file in the directory (remembering that if you're doing this to the micro SDcard on another machine - the boot dir is mounted on the first partition e.g. /dev/sdb1, and root would be on /dev/sdb2): 

To get the WiFi working on a Pi Zero W only requires minimal config for Raspbian Stretch. The only file you need to modify is and this file needs to contain your WiFi network's SSID and password - which you add after the initial lines (the first 3 lines) that are already there so the file should look like something like this ( might be different for you): 

Good day, May I ask if it is true that if I activate turbo on the raspi-config, the pi doesn't always run at the maximum speed at 1Ghz. 

The vcgencmd command is the more accurate one as the vcgencmd command takes the reading from the firmware and the cpuinfo_cur_freq takes the reading from the kernel. The problem with using cpuinfo_cur_freq is that when the cpu throttles due to too low load, undervoltage, or high temperature, it does not get reported back to the kernel. Source here and here I hope this helps :) 

I am currently using the default range of 0-255 and a frequency of 400Hz. int gpioSetPWMrange(unsigned user_gpio, unsigned range); from: $URL$ 

I remember editing the dtblob for the CMIO to reroute the I2C, is there a required way similar for UART set-up? I have been so stuck with this problem. Your help would be very appreciated. PS, I cannot use the ethernet port as the CMIO does not have one :) 

hdmi_force_unplug=1 Add or uncomment this line to force the raspberry pi to output at the HDMI port and not on the composite video output (3.5mm jack on the new pi/yellow jack on the old pi). hdmi_safe=1 Add or uncomment this line to force the pi to output at low resolution which is supported by most displays in the market. config_hdmi_boost=4 You can boost the hdmi signal by adding or uncommenting this line by changing the value from 0-7 (o-default 7-maximum). 

The code is a bit lengthy so I'd rather not post the full thing. A snippet of the part using the piCamera code 

I don't think it's the problem though since it works as expected until the MMALError occurs. I have used sudo apt-get update but I can't say if it's fixed it until the error occurs. I've read that error usually occurs when two or more processes attempt to use the camera simultaneously but I don't think that's the case for me as it's the only program I have using PiCamera on reboot. However, is there a way to check if another program is using the camera? Is there a reason why it works initially then fails? When I restart it, it seems to work just fine again. I'm a bit of a newbie so I was thinking of using Try and Except to restart it when the error occurs. How do I go about it and how do I raise the MMAL error to test if I've coded it correctly? CODE 

So the "uni" network will use DHCP whilst the "home_static" network will use the static IP address 192.168.0.20. Though one doesn't have to use the option and the device will just use the defaults (see the doc file). 

As mentioned on the Pi NoIR specifications webpage it is only missing an InfraRed filter. So you can just buy a separate "IR-cut filter" (search on eBay or elsewhere) and use the Pi NoIR in daylight with such a filter as people have shown (e.g. here). There are also IR filter switches so one can switch the IR filter in for daytime use and out at night night time so it can see Infra Red (e.g. here and here). There's even commercial offerings (e.g. from modmypi) that provide this all built into one module. 

To set up an Access Point using you need to set the following in the hostapd.conf file (the channel can vary between 34-165 - see output from iw list): 

Whilst you can't directly monitor the power consumption you can obtain information about the operating voltage of the: (default), , , and (see here for more details). 

It turns out, in the dt-blob.dts file that I have previously modified to accomodate two pi cameras that the UART was disabled :) 

Good day I am trying to sample distance using a sonar/ultrasonic sensor for altitude measurement. When the PWM is not active, the sensor gives accurate measurements in centimeters, however with the PWM active, the sensors outputs unrealistic measurements. I have seen other having issues with the arduino platform and have resolved this issue by decoupling the supply of the sensor with an electrolytic capacitor. However this does not resolve the issue and upon closer inspection, with the PWM active, the measured pulse/echo is wrong. Is this an issue with the sonar and PWM fighting over the raspi's timer? 

Good day I am currently setting up UART communications for two Raspi's using wiring Pi's uart library. I have three Raspberry Pi's (B+, Compute Module IO board, B2). I have been able to make communication between B+ and B2 but so far have been unsuccessful with the CMIO/Compute Module IO board. Is there a special way to set up UART for the CMIO board? The uart communication was intended between the B+ and the CMIO, the B2 is just used for debugging. What I have tried are the following: 

I'm running a program which records a 5 second video and analyses it every 30 seconds. The program runs for a while but after like an hour or so it fails saying 

The Data out is correct but the order is wrong. Channel 6 should be 2.5V and Channel 7 should be 0V. I guess I could swap them around but I wanted to know what exactly is going on. Why do the values get swapped? How do I edit my code so the values come out the way I want (swapped)? Is there a way to add a small delay so they don't affect each other? I tried a similar thing with pigpio and the results were similar. 

Background: I am trying to make transfer measurements from an ADC LTC1867 to my raspberry pi using SPI. I get it to work with one channel. The ADC has 8 channels, I have one channel connected to a 2.5V reference and one connected to ground. The ADC reads them when I only call spi.xfer2 once in my code. I want to use the 2.5V reference channel to determine any offset or gain errors to correct my actual reading. However, in my code 

FYI the Raspberry Pi 3B+ does support 5GHz - you can see the available Frequencies using this command: 

OpenWRT/LEDE is now supported on most of the Raspberry Pis. It has a range of features and is designed around deployment to embedded systems. For example it uses the Linux OverlayFS in conjunction with a read-only root filesystem image to provide for robust operation in the face of Flash memory corruption and arbitrary power cycling. Whilst a number of features may also be achieved using a conventional Linux distribution on a Pi OpenWRT does provide a packaged reliable solution ready to go with a web interface. For general info in QoS on Linux see LARTC and for OpenWRT. To control queuing on Linux you'll need to use the command. E.g to show detailed info and stats on the current queue configuration for the eth0 interface: 

With the latest versions of OpenWRT the default queue is now the fq_codel which has been designed to alleviate the problems of "Bufferbloat". 

It explains that whilst the Managed mode just allows for connection to single configured WiFi network, the Roaming mode allows for connection to multiple WiFi networks with potentially different network configurations which may be controlled by adding the special option which is then matched against corresponding entries in the network config file - specified in the file. e.g: