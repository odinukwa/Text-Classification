Another optimization this time on compairing. To compare with zero, you can equally test the value with itself. So writing . This shortens the program. 

You've used a WHILE-loop here. A REPEAT-loop would have been more optimal. Also a better way to zero a register is by -ing it with itself. Furthermore by using the register you eliminate the need for the and : 

A big danger. When the len parameter happens to be a muliple of 8 and all of the full qwords have been processed, there will be no remaining bytes to process. Your code calculates the number of remaining bytes using 

You've used the register to set a bit in a stacked number. This can be optimized by writing . Although this instruction requires 2 extra bytes (ASP prefix and SIB byte), you gain 4 bytes from dropping the , , and instructions. There's a trade off here. If in a similar situation, you were to manipulate several stacked values in a row then using would be shorter. 

Avoid redundant operations. In your most inner loop you keep checking if CurrentPrime exceeds 2000000, but you forget that the value of CurrentPrime does not change within this inner loop. Best move the test above the next_prime_test label introducing an additional label MAYBE_next_prime_test. 

This is a misconception. The following only depends on and for its operation. It will leave a result in DX:AX, but does not have to be initialized beforehand. 

There's little point in first moving the contents of the variable d to a register and then doing a subtraction between registers when there's a possibility to subtract the variable directly from the accumulator writing . 

When writing library classes you should follow the python guidelines to enable generic duck typed interfacing. have a look at the python datamodel and try to make e. g. the following tests work by implementing and . 

There is nothing wrong in general with for loops. If you have to iterate over some elements there is no magic that can avoid this. So why is your function "not very efficient"? And why is this because of the for-loop? However you asked for a pythonic solution. In Python explicit for loops are avoided by using list comprehension. Internally Python again loops over all elements, however slightly more efficient. Better readability is the other big gain. So let's measure (I did some renaming for readability). I compare 

explicit loops python has list slicing and list comprehension. in you use comprehension but could use the more dense slicing 

Problem definition it is not clearly defined whether shall result in. your implementation suggests as desired result. other possibilites include 

Your loop has a potential complexity of R * M (R number of words in ransom, M number of words in magazine). Additionally you use in the inner loop which which does linear search in magazine. The solution is to count occurences of words in both, magazine and ransom. this is done in a single sweep and of linear complexity R + M (dict get/set is average linear). the moste dense and readable solution is 

here i used list [comprehension $URL$ Use the right data structures If you want to look up code for a letter you want to write which is clean and readable. so we use a dict for storing our codes 

You should write in a more readable fashion. I suggest you make all the instructions, operands, and comments start in their own columns. 

Currently your calculation shifts the BPB_RootEntCnt 5 times to the left immediately followed by shifting it 9 times to the right. Can you see that this comes down to just shifting it 4 times right? To get code that won't fail on exotic BPB_RootEntCnt values use next calculation: 

From this comment I understand that numbers in the range [0,9] will be shown with 1 leading space and 1 leading zero. Wouldn't you agree this to be ugly? The version I propose next will show 2 leading spaces on such numbers. 

The part where you copy the filename can be much improved by using the string primitive instruction. You load the desired amount in and then repeat () the operation. The direction flag (DF) is cleared beforehand to force the CPU updating the and registers moving up in memory. 

Not only does this clobber the registers , , and , it also uses the instruction variant that produces an 128-bit result. Intel advices against this form when the upper 64-bits of the result are not needed which is the case in your program. A better multiplication then comes from using the 2 operand form of . 

One final point about this code is about the use of . The negation of zero is also zero. That's why this kind of testing often uses which guarantees the value gets modified. This doesn't impact your code however since you've chosen an address that certainly does not contain zero. But choosing a fixed address like eg. 21h*4 (DOS isn't loaded for sure) would make setting up much shorter and even allow you to not use at all. 

still there is an if clause which we could make shorter. there are numerous techniques to toggle/select/cycle values from a limited set. here i am tempted to use a very lazy one (as the number of iterations is small) 

if you hold your rows and columns as list of lists (which has some other advantages we will see later) you can even omit parameter n whe testing a line 

it is clear and readable and tells all and shall not be done any other way. Now about sorting a . You rely on a 3.6 implementation detail that will be guaranteed in 3.7 when released. whenever you do such a version-stunt you shall check the version and either raise an error or implement a fallback (e.g. ). However when 3.7 will be released there might be a sort for implemented as well. Your solution is most likely becoming obsolete when becoming legal. About coding You define an inner function for no reason introducing a lot of complexity. In your inner function you check the existence of an outer to decide on returning a , that's awful. You mix and exception handling in for control flow. your clause is a completely regular case. You shall not implement a silent fallback to sort by string (or whatever the type is) when the user requested sorting via . this is a complete fail, hiding a user error and presenting false data as regular result. 

(and so does ) does not handle the 'not found' case. this went unnoticed as you did not write a test. So the main point is - if you write a library class/function it is mandatory to do good tests. full code coverage and all regular and edge cases you can think of. python provides a unit test framework, use it. 

This is where your program has its first error. You trust the user at the keyboard to actually input a digit, but your program should make sure it indeed got a digit! 

Using is certainly not wrong, but the optimal way to check for any inappropriate counter value would be to use the instruction. 

Here you need to verify your understanding of the count in . It specifies the number of characters that you want to draw. The hexadecimal value 1000h equals 4096 in decimal, but the usual 80x25 textscreen only has 2000 characters to play with! In your program it seems to work OK only because the video memory is much larger than that single display page you're looking at. Nonetheless you should correct it to avoid developing the bad habit of buffer overflows. 

A loop like this is wasteful because of the uncondional jump that gets executed on every iteration, on top of the conditional jump that needs to be processed anyway. You can make the conditional jump the only jump that gets executed repeatedly. 

When it comes to the compairing section of the program you could definitely tidy up a bit. It will enhance readability a lot. 

As a final note on the indentations that you used. I've nothing against it as long as it is used in a consistent manner. This seems not to be the case! Sometimes the editor on StackExchange/CodeReview is to blame though. 

The way you find out about the number of left over bytes is too complicated. It's correct but needlessly involved. Basically all it takes is anding the original counter with 7 to extract the lowest 3 bits. Simpler, shorter, and using one register less which in future programs will always be handy: 

You already got some advice on coding style. however there is a big flaw in your algorithm which is not addressed by the accepted answer. you try to iterate downward to get an effective implementation but you got the inner loop wrong. while you expect the outer loop to do few iterations your inner loop does check relatively low numbers early. you tried to limit that by stopping the iteration at 900, a magic value without reasoning. so your implementation may give wrong results as a pair of 901*901 is much smaller than a lot of untested pairs. you need at least a check if your product is bigger than the biggest untested one 999*900. on the other hand if we do the inner loop right all problems are gone. we use the outer loop for the lower value and the inner loop for the greater one. we do not need an arbitrary limit any more and we are quite efficient. 

this would be less heuristic than your approach, although you probably will again apply some more algorithms/heuristics to find the 'exact' match start/end. 

unfortunately we find a big bug - if fails we switch user (and run out of player indices). we fix that later. we continue with 

Proper error handling so now the big bug. if we cannot place the player in we switch user. if something is an error report it to the caller. that does not mean to print something to the screen but to return an error condition or raise an error. Output to console shall be done from main only. so we refactor to return success and remove the print 

With the instruction you're avoiding to have to write the much longer . Very understandable but the 1 byte would still be shorter. There's also some danger lurking in this code snippet. Who is to say that Intel/AMD in future iterations of the processor will not be returning non-zero values in EAX[8,31] ? Already today some leaf numbers aren't used. 

All of these instructions are correct. When the first instruction is being executed the PC is at x3001. Adding x001F to it will correctly address location x3020. When the third instruction is being executed the PC is at x3007. Adding x001B to it will address location x3022. From the manual we learn 

Each time you clear a register (any general purpose register!), you can do this more efficiently by ing the register with itself. 

I would love to see the rest. I don't find 720 lines of code much. As you'll see from my profile I tend to turn in long papers myself. 

Apart from my remark about these are actually quite good. You used descriptive names and there's a good ordering of the subroutines. 

This procedure is the natural continuation of the Example 4 that I wrote for How buffered input works, a Stack Overflow Q/A. Features include: 

You didn't initialize the register because you know it has the correct value from the code above. That's fine but given the separation between setting it up and using it, and considering the note you've included, ... 

there's also no benefit in calling the ADD32 proc (that also can do without the check for a zero increase as commented by Fifoernik). 

No I/O from core functions We already did remove a print from . We now do that for others as well. When you do print from core functions you either 

comments and docstrings in you use a parameter choice which is one-based. this is not common and not mentioned in the docstring. so while there is a 6 line docstring one of the most important facts for correct usage is not mentioned. While your parameters and return values are listed by name there is no hint about the correct type nor the value range. 

we also fix all the column indices in (where we find 9 winning cases which is one to many). Do not repeat yourself now we have a close look at as it looks now. 

while the big clauses were identical from the start the smaller cases did differ only because of the bad data representation. Avoid error prone repetition of constants now let's have a closer look at . there is one diagonal checked twice, we delete that one. the cause for this error is editing by copy paste and altering values. with a little python list slicing and comprehension we can make this code shorter and thus less error prone 

so any other variable referencing a node or even the root node will possibly reference something old. 

Before adapting we have a look at the names which are not reflecting reality. the loop shall be because it is a single row. likewise should be as there are several data/spacing/separation parts in there. That said we change to (still not perfect) 

This is a very nice routine that totally succeeds in using a direction flag set to 1. I've seen others fail at this. Some observations: 

In stead of preserving the dword , which uses 4 bytes, you could content yourself with just and because the high word is never in danger of modification in your code. This saves another 2 bytes. 

If you used the register for the BF data pointer and the register for the BF source pointer, not only would this be a more natural choice, you could also dismiss the and around . By further using for the loop depth you can also eliminate the need for and around the same . Do note that clearing a register is better done trough an instruction: 

It's practically never needed to zero the registers prior to using them. And if ever it would be useful to wipe a register clean then -ing that register with itself will produce the same result more efficiently. e.g. 

the increment of will keep producing NZ for a very long time! Resolve this by exiting if the instruction sets . 

I would definitely choose adding 444h to in such a specially crafted routine. Relative addressing is so much more flexible to work with. 

You used very descriptive names for all of your labels. This is good. Please allow these 2 observations: 

I don't see how this comment relates to the control variable being 6. It just by-passes the output, which is wrong because the number 6 fulfills the conditions.