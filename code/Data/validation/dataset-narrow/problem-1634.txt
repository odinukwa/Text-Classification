This is theoretical but perhaps you could modify a short (quarter ?) length track as the finishing line by carefully cutting a centimetre section of track there (two cuts, in one side) and linking the outer segments to restore the ability of electrical current to flow from one end of the segment to the other. You then wrap enough turns of fine insulated wire around a reed-switch to make a current sensitive switch with one end of the wire connected to the outer segments and the other to the isolated centimetre middle sector. The effect of this is that when a car is drawing current from the slot and it enters that isolated sector the current will flow through the coil around the reed-switch (which has now become a reed-relay) activating it which can be used as a volt free pair of contacts (i.e. a proper switch with no built in voltage or biasing issues that can be used anyway you like within reasons). Of course having the start/finish line like this means that a master switch/relay could isolate all eight of the coils and guarantee an equal start. If you do not want to mangle a track segment so much you could isolate a whole piece of track in the same way with some isolating material (nail varnish?) on the slot tabs at either end of the segment - hopefully you can still make a connection to a piece of the relevant metal on the underside for one side of the slot. Note: I have rather assumed that you are using a track made from repeated sections of moulded plastic with metal inserts that provide the conducting rails that the individual cars pick up electricity from. I have discounted using the magnet from the car's motor to directly activate a reed switch glued to the underside of the track in the vicinity of the start/finish line but it might operate and is in effect a mechanical equivalent to FCML's answer but nothing like as sensitive - and probably too insensitive to work... 

To be perfectly honest USB devices should fit most of your requirements - and there are a range of devices out there so it is just a cost vs. quality & features trade-off - and USB devices are more likely to handle a multiple instances of the same type situation that you look to be heading for... As Matt has suggested there are dedicated sound cards that may also provided multiple input and outputs but many will only have one (possibly stereo) input and output pairs (which is what you might get from even the cheapest USB unit) and it would be unlikely to provide more. One interesting exception I found is the (kick-starter funded) Audio Injector's Octo Raspberry pi sound card which seems to have 8 channels out and 6 channels in and can provide amplification with additional plug in units. It is NOT clear how those channels are divided up into, say, stereo pairs. The downside is that it does cost a fair bit more than a couple of USB units... 

Revision Given your end-use case you may want to do the calculations slightly differently by producing a value that ideally goes from -1.0 to 1.0 with 0.0 in the middle, now we want to consider only half of the range and using the one with the larger magnitude to work with. For this the "minimum" is the value at the control's centre and the "maximum" is the extreme value in the relevant direction. Consider a case where the minimum control value is 100 (not 0), the maximum control is 3150 (not 3200) and the centre value is 1680. The upper "half" is 3150 - 1680 = 1470, the lower "half" is 1680 - 100 = 1580. The lower has the larger magnitude and we want the result then to be -1.0 so posting those values in gives: 

Strangely even as a UK customer of one of the Official Suppliers, CPC, the consumer arm of Farnell, are only listing a Raspbery Pi Zero and Cable Bundle Sorry - Farnell links to "Zero" product died within a few days! pi0 - at the time of writing they are "awaiting delivery" - for £10.54 excluding V.A.T {12.648 inclusive} for 1-49 off and no sign of a bare unit. By my approximate calculations the headline $5 figure works out to around £3.33 so the cables are significantly more than the base unit. In the UK their web-order postage is now only free for orders over £5.00 excluding V.A.T. (was no minimum limit over the Summer) *sigh* EDIT: A response from CPC: 

From what I have seen I think the jumper controls whether the relay(s) are active when the input line for each relay is× high or low. Upon further consideration it is more likely that those three pins are "power-supply" ones and have been brought together so the two non-ground supplies can BOTH be powered from 5V or the input part split off and driven by a 3.3V one; it is a bit nasty though in that if you move the jumper over to split the supplies you would be wanting to apply 5V to the JD-VCC pin and could feed the 3.3V in via the 4 pin connector carrying also Gnd(0V) and the two control signals - however you might be tempted to "park" the jumper on the VCC and Gnd pins - thereby shorting out the 3.3V rail to ground! <rant>Be careful what you use these for, though, because most of these modules (from the Far East) are NOT safe to use on High (Mains) Voltages (at least in the UK), unless the rest of the control circuitry (your Pi and anything hanging off of it) is properly isolated from any user. Although the relay might be rated for 250VAC 10A the gap between the contacts in the relay and particularly the COM connection pin is not far enough away from the Coil and the pins for it to be a safe distance (5-8mm in air). HiPot or Flash test are things that come to my mind when I think on this.</rant> 

This can be enhanced by also recording the "default" or centre position when the controls are released (if there are centering mechanisms) or held there by the user (if not). This can be used to provide a "dead-zone" (range of values) for which the control can be considered to be in its "default" position which is particularly useful if you want to emulate a clockwise-stop-anticlockwise type motor control so that there has to be a minimum amount of movement away from the default position before an current is supplied to the motor. This is also a type of hysteresis and makes the design of electronics a bit easier if you are using an 'H'-type control system as in this "dead-zone" all legs of the "H" are deactivated - without it there is a risk that the design might try to drive all four legs at once instead of only two diagonally opposite ones! For your case: xmin is 0 and xmax is 3200 so the formula degenerates to: 

i.e. 5.8Mbps per image. Well USB2 is supposed to be good for 480Mbps but in practice (Wikipedia) with bus access constants this is more like 280Mbps or 35MBytes-per-second. So USB2 should be good enough as far as I can see, for several comeras... 

Are you sure you want to run your X-server in 8-bit mode? It uses a completely different way of setting colours to the modes with more bits (the colours for each of the 256 index values are arranged in a palette that has to be shared between ALL applications and if there isn't enough to go around the inactive applications will lose some of the colours they want to use to active ones so their colours will change randomly as the mouse is moved between windows.) From the eLinux guide to config.txt settings we have: 

I'm using a second-hand UPis "Basic" by PiModules (does not have the additional 7-20 Volt-ish(?) Power Input, external RS232 port, "1-Wire" Serial Port, or NO Relay that the "Advanced" one has) it can be configured to connect it's on-board micro-controller to the RPi GPIO's Serial port (not the default configuration) and then the RPi can interrogate the UPS about these sort of via short text requests over the serial link. It also uses a dedicated GPIO pin that the Pi has to monitor with a script so that the latter issues a "shutdown" command when the pin goes low - so that the UPS can tell the Pi to shutdown before the UPS cuts the power because the main supply (from the UPS micro USB input - or the external DC power input on the advanced model only) has failed AND the UPS back-up battery has reached a critical level. This product does seem to no longer be manufactured (it has a 26 Pin rather than a 40 Pin GPIO connector) however the replacement is the UPiS Pico and that seems to have EVEN MORE features but different internals. Note: the firmware has only just been finalised for the Pico (and the firmware for both has been developed for some time {years} - so it is possible that some functionality was not complete in existing samples, however the firmware is designed to be updatable via the microUSB that is also used as the power input (same style as on the Pi but the data lines are wired up!) The best place to track the developments (and get updates) are the Forum rather than the download link on the main site IMHO. 

I think you find that those things work with X11 and not from a Linux console - I believe you will want to Read The Fine Man-pages to look at the command line program 1 and then set (and export) the relevant environment variables for the editor program to detect. i.e. type . should report all the locales available for you and changing the right variable (probably LANG for the system environment - where you are and the standards for your location; and LANGUAGE for what you want to enter) to what you want before starting your program should change your settings, i.e. on my Debian PC: 

Sounds like you are trying to take too much power from the 5V supply for the Pi, the screen, the ULN28001a IC and anything that is connected to the USB ports that is not a powered Hub! Also, for that L.C. Display, does it have 5V or 3.3V inputs? Both types exist! Are you the person who put these posts on the forum at rasbperrypi.org? More generally, which pins are you using and relating to that, which set of pin "numbers" are you then referring to {"Broadcom", "WiringPi" or actual "header" pins - and on which model of Pi...!} EDIT: The "later" model Pis will flash/turn off the Power LED when the 5V drops below a certain level (and also flash a "rainbow" coloured square in the top right of the display); FWIW those models can also show a "red" square that indicates that the CPU/GPU is overheating... 

The first issue you will need to overcome is that of getting the audio signal into any RPi - the audio hardware on all of them is output only! The cheapest solution would be a USB audio dongle which can be around the size of a thumb drive and typically will have a pair of 3.5mm sockets - one for stereo audio output (to, say a a low-cost pair of headphones or amplified speakers) and one that is a mono microphone input (the connector may seem to be a 3-pole {stereo} one - tip-ring-sleeve but the either the left[tip] & right[sleeve] are connected together internally or the sleeve is open-circuit). Once you have got a sound signal into your RPi then you will need software that can continuously monitor the audio and then can perform a Fast Fourier Transform to convert a series of samples (instantaneous sound wave amplitude or voltage representing it vs. time) of the waveform (at at least twice the frequency of that which you are trying to detect and with very strong filtering to prevent frequencies above that limit {the Nyquist frequency} from passing to the sampling system) to frequency bands present in the samples for the time over which the series were taken. You can, by controlling the number of samples, and the rate at which they are taken, control how finely you can determine the bands of frequencies you want to detect and how quickly - and there are engineering trade-offs to make. I am not aware of any packages to do this right now - but I have not looked hard - there may be something out there to do this; it is just that my University Degree a large number of years ago had an uncompleted project that strong links to this area (but then I was using a system with a Digital Signal Processing IC that was built for this sort of thing)... Incidentally if you are only looking to use specific frequencies in order to activate some sort of control you may want to investigate using a Dual Tone Multi Frequency system which uses pairs of carefully calculated frequencies (so they can be distinguished from one another) to signal one of, typically sixteen combinations as most telephone systems do nowadays to transmit the numbers dialled down a telephone line. The advantage of using such a limited number of frequencies is that there are integrated circuits out that can generate and decode such signals with a degree of reliability and simplicity that hand-crafted code may take some effort to match. 

I suspect you are hitting that issue! It might be worth investigating joan's library which would I think allow you to use another pair of GPIO pins (with suitable pull-ups for I²C use) as a separate slow bit-banged I²C interface specifically for that device without hitting the issue of the RPi not handling clock stretching (the slave device holds the SCL line in a low state to slow down the data transfer to a rate it can handle, but which requires the master device noticing this and waiting for the SCL line to raise before getting the next bit in the transfer). The bottom line is, I think, that the data is getting corrupted as it is transferred between the RPi and the CCS811 and the "Device ID returned is not correct!" message is the first sign of this. 

It ought to be possible to unsolder the five surface mount connections that attach the 3.5 stereo socket to the PWB and connect some skinny wires to the pads which (after bonding the wires with some hot-melt glue to reduce the chance of the wires being yanked off the PWB and ripping the pads on the PWB that they are connected to) can be run to your own nearby externally mounted socket). It is not clear whether two of those five - being contacts in the socket that would carry the audio left and right signals back to internal circuitry if a plug is NOT inserted - actually serve any purpose in this application... (if the adjacent RCA "Phono" sockets were installed it might be that they would carry the audio output if a connection was not made to the jack socket!) This would most likely invalidate any guarantee that the product supplier would otherwise give you. It might be worth contacting the supplier and asking whether they could source a unit without the 3.5mm socket fitted - if you explain very nicely that you really need to keep the overall height of your assembly down in an already designed enclosure, but I would not be overly optimistic that they could do this unless it is something that they build themselves and could take the time to do one without the socket. On the other hand if they had a "reject" one with a broken socket they might be willing to do a deal! You will also likely have to figure out the wiring but a test 3.5 plug, the original socket removed from the board and a multi-meter set to it's continuity "buzzer" mode (and an extra hand or two to hold both meter leads AND the socket 8-) ) will probably allow someone to work out how to connect an external socket to those wires. Addition: If you do manage to get a board without the socket you may need extra skill to work out the wiring - however with a bit of searching I was able to find what looks like the socket (or a clone of it) which suggests which pins might be which - try the .pdf file for the 35RASMT4BHNTRX part on this "Switchcraft" website page. In summary, from the top looking down and from the edge of the PWB onto the socket: the pin furthest from the PWB edge (at the back) is 5, the two close together on the left are 2 & 4 with 4 nearest the edge and on the right the one further away on the right side is 3 and finally 1 is the one nearer the PWB edge. Then the pins are: