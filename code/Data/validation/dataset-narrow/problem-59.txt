You'll need a router with an interface in each VLAN, for example 192.168.x.1, which then provides routing between the subnets. All hosts then needs to be assigned that IP as the default gateway. The router also needs to have a default route pointing at the DSL router. You could do this as "router-on-a-stick" internally in the switch, and from what I've read the 1920 should be able to do routing, provided you have a limited amount of routes and they are static. 

You can use a splitter (you can even buy these abominations for both 2 FastEthernet links in one 4 pair cable, or FastEthernet and POTS) at both ends of the permanent link of the run but you'll get a lot of crosstalk depending on the cable type used for the run and how long it is. I've never seen an application where these splitters work as advertised, usually you get so much errors when both are in use that it renders one link unusable. On a side note, any particular reason for why you just can't install a switch at the far end of the link? 

Looks like a too long Ethernet run for PoE to me, you see the STP flap because STP starts by blocking the port by default, then bringing it online when it notices the port being an edge port, and then your device either draws too much current so that the voltage drops too much at it's end, shutting down the device to protect it from a brown-out condition. This removes the load, and the voltage jumps up again, restarting the cycle. Could also be a faulty PoE device. According to ancient HP manual; 

Traceroute is a Layer3 technology, aka. by it's very design it'll never show anything else than the routers in path to the specific host. Traceroute works by sending packets with increasing TTL, thus making every router in the path respond with a message say that the TTL value has been exceeded. Switches live in L2, so they have no concept about what's in the frames containing the traceroute packets, they just forward them appropriately so that they reach the correct next hop router. IPS:es are usually also designed so that they sit out of band, and only extract packets that they don't like. As such, they will never respond with anything to a host sending the packets, they just drop the packets if they match a specific filter rule. 

According to the Installation Manual, only USB 1.1 and USB 2.0 are supported, along with FAT and FAT32 file systems. If I were you, I'd try to find a USB 2.0 2-4 GB stick and format it with FAT32. 

EDIT 2: I tried connecting the devices directly to the the switch, and they still operate in "low-power mode" so for some reason they don't seem to be able to negotiate 802.03at. Any ideas? 

It shouldn't be impossible since you essentially have the same problem with WLAN-cards, they also hide all the ugly business with WiFi from the OS, and only give it the ethernet frames. But there's still software available that let's you see all the WiFi specific packet info. Check how different NICs handle VLAN tagging when you generate packages. A lot of NICs these days have VLAN support, and they should be your best bet if you want to generate traffic with VLAN tags, since they obviously know how to tag traffic correctly. 

I found the issue, it has to do with the device itself, specifically an Meraki MR42 AP. When the 802.03at Meraki APs first powers up, it does so in 802.03af mode, thus limiting the power it can draw. Then later in the boot sequence it tries to request more power to be delivered, and for some reason the HP switches does not understand to give it the full 33 watts it needs. The solution is to force the port to allocate power based on a configured value instead of what's negotiated over LLDP. The Meraki documentation shows you how to do it through the GUI, which in my book isn't that useful. Instead, the following commands does the exact thing but for several ports at once. 

Both IP's are today registered to Amazon, so I guess it's something Aruba Cloud related hosted on AWS. They probably got some unused IP-segment from MIT and there was a delay in the ARIN records getting updated (whois.arin.net shows them registered to Amazon in April '17). 

You need some sort of credentials for SSH to work. You can either set it up using passwords like normally, or you can use a certificate to authenticate. Here's a discussion that might be helpful: $URL$ In Cisco parlance, they call it "RSA-based public key authentication". 

The switch configuration is wiped on both switches when you enable stacking. The switch configuration is preserved on the first, "master" switch when you enable stacking, and wiped on the following "slave" switches. The switch configuration is preserved after enabling stacking on both switches. 

What you have is Bi-directional fiber modules, and they use one wave-length for TX and one for RX. The downside is that they come in pairs of upstream and downstream modules, since the wavelengths need to be switched in the downstream module. This is a downside since you now need to stock 2 different spare parts instead of one. Upside is that they use half the amount of fiber strands. They can also be quite costly, off-brand they are usually 3-5 times more expensive than their regular two-strand counterparts. I've never seen or heard of a BiDi module for MMF. If you need more capacity, I'd say invest in new SMF fiber runs instead of esoteric modules. Check the mantle of the MMF cable, it'll usually tell you how old the cable is. If it's older than about 2005, I'd say they pulled MMF to save money. Or they just spec'd it because of old habits. 

I have a really weird issue with a certain model of Cisco switches. The industrial IE2000 models come with a SD card slot, which can be used to store the configuration or boot from. I had 5 of these switches to commission and they are in a quite industrial setting so I figured I'd configure one of them at my desk, copy the config to the SD card, swap the SD card and do the changes needed for the next switch and swap the SD card, etc. etc. I did exactly that, resulting in 5 SD cards with identical configurations except for the hostname and IP addresses. When I went to install the SD cards and copying the config from SD-card to the onboard flash, everything worked just as expected, except the SFP ports. The ports all complained about Low TX Power Alarm (they were fitted with GLC-FE-100LX modules), and correctly, the TX power was low on every fiber port. I couldn't find anything wrong with the config or the modules, so I did a factory reset, and typed in the config manually this time. And then it worked. Every single time, in 5 identical switches with almost identical configs. I even compared the config I had on the SD cards to the one I typed in, and I can't find a single difference between them. Has anybody else ever seen anything like this? Is there some command that has to be issued to make the fiber modules actually send signal out? Or some command that disables that? The modules could detect signal coming from the far end switch, and I verified the measurements in the switch with an optical power meter. 

I like the OODA loop, Observe, Orient, Decide, Act, which basically means you observe the current situation, come up with a game plan, decide on how to proceed, and act on that plan. Then you loop back up and start the cycle over. Try to break the project up into manageable chunks, for example what you can get done in a service window. I'd start with Craig's 4 steps. It's important that you spend a lot of time getting to know "the proper way" of doing things in this industry. You won't get it right every time, but you'll spend less time reworking your own creation later on when you gain more experience. When you have all the intel you can coerce out of your current setup, I'd clean up the L2 networks of every floor one by one. It's the most manual place to attack something like this, and it helps to have clean-ish racks when you break something by accident later. Don't try to get it perfect, just get it manageable for now. Then attack the L3 backbone of the network. Tidy it up and get it running smoothly. Then attack the server room last. By now you should have a pretty good idea of what you have and what you would like to have. After this, you can start on the higher level stuff, like reorganizing the IP addressing scheme, add redundancy and better performance, the things that doesn't make the network function any better in a binary sense (connectivity/no connectivity) but improve the quality of the network service. The progression of fixing a messy network is basically the same as troubleshooting it, start with L1 and move up in the model when you have the previous layer licked. 

First, devices with different IPs do not belong in the same network. 10.0.0.0/8 does not cover 192.168.0.0/16. The reason adding the second IP works is because the devices are on the same L2 network, but it's very mickey mouse. So you have the following options; 1) Change the IP on your camera to something in the 10.x.x.x range that's within the subnet you're currently using. Easiest way to accomplish this is to do as Ron says and enable DHCP. 2) You add a second network to your nearest router/gateway, in the 192.168.0.0/16 to suit you camera, and make it shuffle packets between both networks. My suggestion is that you try option 1, preferably DHCP first. 

I like to keep broadcast domains the "standard" /24, that has always worked fine for me. Separating departments into different /24's is a good idea, that makes your firewall rules and ACLs easier. Printers and other garbage I like to put into a different L2 network just to keep things tidier. Management traffic into another as well. L3 roaming is nice on WiFi since you can keep the department/subnet logic working there as well then. Remember to leave room for growth between your networks, for example allocate a /22 for each department and assign them the first /24. If that department grows, you can easily allocate another /24, and if you did everything right, you don't need to change any firewall rules.