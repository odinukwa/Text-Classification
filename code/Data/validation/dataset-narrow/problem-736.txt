No, no, NO!! If by "construct" you mean constructor, then no - use a method instead. If by "construct" you mean a set method like , then sure, if you want to change some value you'd have to do but that's fine. This won't affect performance much. Java even use a Just in Time compiler to boost the performance of such calls. If you want to you could even add a method like this to your Item class: 

Version 2 is the one I like the best, but with some modifications. Java Coding Conventions about braces is that they should be on the same line as the condition/loop and not on it's own line. Adding a few spaces makes the code more readable. Most IDEs has an Auto-format key-shortcut. Ctrl + Shift + F in Eclipse and Alt + Shift + F in NetBeans. I recommend using it. The results of the above mentioned fixes: 

Even though it's not used, the parameter to a main method is better named as . Also please write it as to be consistent and to adhere to the convention of where to put those . 

Defining database connection parameters It is not recommended to hard-code your connection parameters within the script. You could for example parse the database properties from an external Json source. There are other methods available in Groovy as well, such as reading properties from XML, or from a file, or from a file, but I think Json might be the one you would feel most comfortable with. 

I am not sure if you really need this one. Especially not inside that class. It is good that you have not made your class a singleton at least, but I'm not sure if this 'global' is really necessary. 

And then all you would need to do is to use (assuming is not subclassed, otherwise you could loop through the supertypes as well when adding to the list). 

If you want to create a SQL query to search for properties like you are doing here, I recommend using Hibernate (which simplifies this a lot -- once you actually get the whole system up and running correctly...) 

The first thing that comes to my mind when I read your code is "this would be a good job for a template engine". File constructors 

At one place you write and in others Luckily for you, it has the same dimensions so you won't notice, but should it be the following? 

Closing statement Again, your code was very readable and your approach is good, and indeed it is a greedy algorithm As said on Hackerrank: 

I have tested this code for many cases using a for-loop, and it works mostly fine. I had one problem with using though as the was converted into , which loses some accuracy. So it seems like you need a special case for : 

Your current code Other answers provide you with plenty of alternative approaches, so I'll comment a bit about your current code. 

I'm the wrong person to ask about performance :) Can't comment much on this one. I can't see any big performance issues directly though, which is a good sign. 

Does the order of the result matter? Only for your unit tests. Change the tests! Don't be dependent on the implementation of . Use instead, or . In this case, I would return . No order of the integers really matters, because the integers themselves are the order (inside the String). It is important to know that there are no duplicates, so a is perfect. In fact, the inner might be better of as an array instead. So Permutations @rolfl beat me to it on this one, but here's what I would do: 

This is a bit inefficient, as ultimately, once should be enough. To accomplish that, we need to check each item exactly once (or technically, at most once, as it is possible to return false early). Also, to make the method slightly more useful, you can use . Which is easiest, checking if the list does adhere to your requirements or checking if it does not? In my opinion, it is easier to check if one of your requirements fail, which means that we can have the method as the last statement and perform some early returns for if something doesn't match your requirements. What I would end up with is this, which is pretty much straight-forward: 

First of all, everyone who uses arrays should be aware that array indexes in AS3 is zero-indexed. Secondly, the term 'index' was also mentioned in the previous documentation line but there was no stating there that it was zero-indexed. I would leave the part out. The rest is perfectly fine, and is what one would expect out of the function. Code I would prefer a space after each colon, but that's just my personal preference. At least you are consistent about it. It's great that you use in your code and not or some other, shorter, type. A minor problem would be if the match was found at index >= 2147483648 though, as you return an . This is however the same in many other functions because you want to return if no match was found, and I doubt that you will get an array of length > 2147483647 as input. Also, retuning would be horribly overkill so there is really no other option here. I personally find your comments in the code unnecessary, but they are definitely not "clutter" so they are fine. Although can be removed as that behavior is described in the documentation of your method. Now, there's only one thing left to say; Why not use the type? Then you wouldn't have to check for each element. Also, IIRC, is faster than . Overall, well done. Your code looks quite fine overall. Null and undefined You explicitly ask this question: 

There is a better way to get the hash code. Currently, you will get many duplicates because of the XOR operator. 

There are a few methods I've left up to you to implement, but I hope you get the idea of them. So what is the most important change? The idea is to keep a map of all created reflections, stored with an id, and when you previously created the new reflection, you look them up through the factory (which contains the map). Essentially, this creates what would be called a "Multiton". A class which has a limited amount of instances. (Compared to a "singleton" which only has one instance) 

I believe that all of your variable declarations above your constructor can be marked private, and I also believe that all them can be final: 

The positions of the 1-9 numbers can be computed mathematically which makes it possible to create these buttons in a for-loop. I have not tested this calculation, but I believe it is correct: 

As the lock keys are different for different sessions, it is a whole lot more safe to use . That way you are at least sure that the dictionary won't screw up. However, your approach of the map I have some doubts about. What you really seem to want to synchronize is the and calls, so I would place the lock only around those. Speaking of placing the locks, consider placing them within the class. In fact, I would try to move the and methods to the class. If it needs the object to perform its job, then pass the as a parameter to the method. Right now your seems to be only a , make better use of that class. I think you created it for a reason. 

Let the be responsible for that, and save the actual values as instance variables, instead of using . For example, instead of exposing , expose these: 

Honestly I believe you have answered this question yourself: The app works just fine. From what I can see, you are using the intent exactly as you are supposed to. You are also using properly. But, because you have come all the way here I guess you want to hear some suggestions/criticism as well so I have tried really hard to come up with something: 

(Later you will also learn about constructors, getters and setters, and other stuff) With this approach, you can have a where each book knows if it is applicable or not. For example: 

As you see the is essentially your old constructor, and is essentially the actual implementation. Calling will get us the same comparator as you used before but in reversed order. We can take that though and just call on it. Let's create a static method for this: 

Now that's only a stub but there's a lot you can add to it. You can even add a method (also include some kind of e-mail validation if you feel like it). In the end however, your method would just be this: 

Your current situation: You are storing all the visited numbers in a list and then querying only the size of the list. Instead of doing this you can instead have a single variable that keeps track of the number of visited numbers. You don't need a list. 

Summary I would recommend that the and classes should be removed through refactoring using the suggestions above. 

Your last block of , including the if-else that comes afterwards should be indented one step further. 

Even though you store the result as a , you're actually using int division here which makes the result an . To add some accuracy, you have to specify one of the ints as being a double, a simple way to do this is: 

You have a field in your class that seems to only be used in one method, and should therefore be a local variable. 

Another thought is that you can use a to describe what kind of it is, and the type can have a method. Then you could check As I only see a portion of your code and not the big picture, I can't really tell what would be best for you. 

However, if you add that optional constructor; the users will have to send your code a List of size one. That's not optimal. Perhaps a class to create pagination without some previously already existing pagination would be useful? (This is actually what I expected from your code when I first saw the class name of it) A possible bug Your variable confused me a bit at first, even though it sounds like it should be equal to there is absolutely nothing that forces it to be so. What if returns a list that does not correspond to the that the class got? I can tell you what happens: Adding one extra string to the second page of your example causes it to be completely ignored for some s, and for other values of callerPageSize the first absolute index directly after is ignored. Also, if accidentally returns a list of size less that before it actually is over, then that effectively cuts the list so that the last items does not get seen. By removing the item in your example, the list always stopped at 19 for values of . Possible Solution: Throw an exception if the method returns a list of a bigger size than what was expected. Solving the problem of an incorrect smaller list is more difficult because of your optimization of smaller lists == no more items. Even though this might be by design, it is very important to document this behavior. Another possible problems might encounter when using your class is that if returns null; this causes (caused by Guava). This should either be fixed or documented. Returning null might be a way for a programmer to try and tell your code: "This page does not exist". Remember that when writing code for other people to use, they might not use it in the way that is intended. 

It is totally fine to do it this way. This is an anonymous inner class. The alternative is to use an inner class (non-anonymous), this would reduce code from your constructor but that code would be added in other parts of the class instead so which way you go doesn't matter much. This is fine. 

String or int? Many of your parameters are s. I would use them as ints. A port number is an int, an id for a tweet is (most likely) an int. Don't use them as strings! 

The only difference being that you switch to and vice-versa on some of the calls. I would create a method for this, 

You have put the whole game, all it's screens, all the game functionality, all components, everything! into one single class. This has made it very hard to see which things belongs where. For example, if I look at the method or alone, I have no idea in which part of the game they are used at. If you would have properly divided your code into a class, a , and a entry-class, that would help a lot. (It can probably be divided into even more than that as well). At the moment, your class is just... too large. 

Now, about that strategy pattern... (This is only an example on how to do it, there are many other ways. Use the things that fits you. The important thing is that you understand the overall structure of what I am doing below) Something that can improve the cleanliness of your code is to put the game variables in one object of a class; this could contain variables such as , , and so on. Then create a interface. 

I like your usage of Guava, and overall your code seems really good. I might actually use it myself somewhere. The code could use some more Javadoc though, especially on the class itself and the constructor. Explaining those and parameters is very important. Possible extension Currently, you leave some work for the user of your code to divide it into some fixed page size. What if that programmer is very lazy and don't want to do that? An optional constructor could be helpful to indicate that technically, you support that feature. 

Ah, much better! It can even be extended to find the number of wins and losses in the same query without too much effort. Can also easily join with the player table to find out the player id for a specific player name. Game Actions 

There's one particular thing that I don't like about your framework, which will help you get rid of that ugly variable: You're passing a to the framework instead of an instance! Don't put the responsibility of creating an actual object to test the methods on on the Framework, let the user supply an instance of the object to your framework. This will allow the user to use Dependency-Injection style constructors for the objects that are going to be tested, in this case this would allow you to do: 

You only use fields which reduces the usefulness of your solution, as you can only check one Sudoku board at a time. Learn more about object-oriented programming and use classes and objects without static fields. Checking a 3x3 square can be improved by writing another (nested) for-loop, instead of hardcoding the position of the squares to check (which is prone to coding-errors). You check for non-duplicates and for the sum 45, but what about the integers \$0, -2, 4, 5, -21, 1, 13, 42, 3\$? They also add up to 45. So what you have here is not necessarily a Sudoku checker, it could be a Math puzzle checker. 

Do not store the connection information in a file unencrypted Assuming that you are connecting to a database somewhere on the internet... If you plan on distributing this application, do not store the connection information unencrypted in a file on the user's device. In fact, preferably don't store the database connection information at all. Do not let your Android application connect directly to your remote database! It is not recommended to let your Android application, or any other distributed application, connect directly to your database. This is because it is very easy to decompile an application, which would give information about the connection details, your database structure, and a whole lot of other things. Instead, perform connections to a server-side script or application that is responsible for handling the connection between your Android application and your database. Only let this script/application that only you control deal with the database connection. Unless you deal with this, any number of prepared statements your application itself uses doesn't matter, as a user could just find out the connection details from your application and then create their own connection to the database server. 

This is not entirely only in your imagination objects are meant to be reused. Recreating a object each time may cause a specific pattern in the result. This depends a bit on the Java version. There is no need to pick a seed, Java picks a seed for you based on a varying number, and the current system time (see Java 6 source). Newer versions of Java uses a better method. I am not sure about what implementation the Android platform uses. Additionally, Java variable names should start with lowercase letters by the coding conventions. I would also use a for better efficiency and lower memory usage. To avoid confusion with the class, I would name your String variable and your variable .