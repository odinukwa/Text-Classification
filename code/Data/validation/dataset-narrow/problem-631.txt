It's not even ten lines long and yet trying to figure out what it is supposed to do is way too hard. Plus you're concatenating strings, which is almost always a bad idea if you're not using a . Or, in this case, . 

Adding "New" to a method name -- as in -- is just bad, unless this is a temporary measure and you need to check whether your new method does the same as your old one. Why not call this one ? 

This is example code -- I don't know neo4j, so I don't know if this is possible. Also: is that ... really necessary? It certainly looks dangerous: an exception is thrown and it is just ignored and an empty list is return. 

and are virtually the same method and could easily be reduced to a single method with two parameters (, ). And does there really need to be a block around this? Does this functionality even need to be in a separate method? Why not just call ? 

isn't a good class name. A class represents an object, and thus a plural name should be avoided. I don't see the point in how you use it here anyway: why create a 250+ line class when you really should have a class and separate , , etc. classes (and thus files) that inherit from . Surely you'll agree that isn't looking very nice. Keep classes small and clean; the moment you've got a class that hundreds of lines long you probably need to start refactoring. isn't a good name for a property. Microsoft's rule is to use Pascal case or camel case for acronyms more than two characters long, and to avoid abbreviations in identifiers or parameter names (if you must use abbreviations, use camel case for abbreviations that consist of more than two characters). Those same rules also apply to and . , , , : DO NOT use underscores, hyphens, or any other nonalphanumeric characters. The rules for acronyms and abbreviations (remark #2) also apply. Like @Heslacher said in his review: is a confusing name for a class. : see remark #2. : see remarks #2 and #4. is a plural name, and thus to be avoided as a class name. : properties should use PascalCase. 

I'd probably refactor that even more, but right now you only posted fragments of your code and it's too much work to fill in the gaps. 

(This is based on my answer from yesterday, so it is possible that not all names are completely in line with the ones presented above.) 

Even though is only twenty-odd lines long, there's much more wrong with it. You use but ignore the exception: that's bad. But I wonder why there's even the possibility of an exception happening? Why do you use a loop instead of a ? You should also move the logic inside the try to a separate method which accepts a as the parameter. is odd. Why not use ? Also, why even bother assigning , and if doesn't contain a value? , and should be camelCase. 

Don't have methods like . DB Connections should be properly disposed of, and thus they should be used inside a using block, e.g. 

Don't have all your code in Program.cs. Instead, construct a class (or multiple if necessary) and call that class from the of Program.cs. 

What's the point of ? As it stands now it is a barely-there wrapper around with a built-in connection string(!) and some odd behavior when you call . You claim this works, are you sure -- because why wouldn't throw an exception if there isn't an open connection? 

Why do you do if the next step is ? Instead don't bother with the initialization and just assign it directly: 

Your comment style is inconsistent. I'd put the on the line above the method, not next to it on the same line or below in the method's body. Also, is it even necessary? 

Why don't you simply use from_ etc. in the rest of your code? In fact, some of these variables aren't used at all! 

I'm not a fan of properties like where the name of the property doesn't reflect that it's an . Sure, is not exactly great, which probably means the class name isn't that great and perhaps should change. Quite frankly I can't see why that class isn't simply called ? 

But when I then stepped through the logic, I found that this still does a number of things that don't seem necessary. And I distilled it down to this: 

I get the logic and how you're mimicking the logic of , but isn't it a bit much to return a and the ? Wouldn't it be easier to simply return a and test if you get a or an actual value? 

Why aren't you using an ORM like Entity Framework instead of this ugly, needlessly generic code? I mean: , -- really? 

But quite frankly, I'd avoid the endless separating into a which then calls an which uses a ... To me this creates more problems than it solves. Instead keep it simple: 

I get why you're naming things , ,... but I feel that's the wrong approach. Instead I'd propose a single class that contains all of the necessary parameters, e.g. like this: 

Now, let's look at the whole method. You have four parameters, which is bordering on getting hard to maintain. Consider a class that contains , and . Note that I leave out of it; quite frankly I find it odd to see you pass a connectionstring to a method. There's a lot of semi-duplicate logic, especially in in the insert or update. Move that to a method and call it with the required parameters. I'd also be inclined to move everything inside to a separate method, if only to reduce all those indentations. I don't see the point in doing this: 

Considering the repeated use of the pattern, I wonder: why not use a , fill that with all of the necessary values, and at the end use to combine them all? Something like this: 

is a seriously bad idea. It doesn't even do what it says, and what it does can be done far simpler with a -- not that this would be a good idea either. 

Your flow is very hard to follow and seems needlessly complicated. I'd for instance leave and to the very end instead of splitting them up. Make your flow easier to follow: 

Always explicitly state the access modifiers. I should not need to figure out myself what the scope of etc will be. 

You seem to have copy-pasted three lines which are almost identical for both cases, except for one parameter. If you're doing that, you should extract those lines into a method, or if you feel that's overkill you should simplify your code: 

Comments should tell me why, not what. If you suspect I cannot detect from your code, then your code is bad. 

: is this supposed to be a field or a property? If it is a field it should be , if it's a property it should be PascalCase and should have a getter/setter. 

I'm not fond of the calls to in the class, since it isn't properly testable. Considering that plenty if those calls repeat the same logic I'd at least move these calls to a separate method, e.g. 

I really don't see the point of your original code, BTW. For instance, the is completely superfluous, since you're working with a . It is always going to return a . But why do you even check for ? You already know it isn't from the previous line's check -- -- so at worst it is empty which is your default value anyway! 

But at least the average programmer can look at that code and understand what it does. When he uses your wrapper, he doesn't gain anything IMHO. All you've done is add a layer which more or less obfuscates what is happening. I would sincerely recommend you to throw away this code and go with established solutions like NHibernate or Entity Framework. If a developer checked in this code at a place I was working and I had to review it, I'd tell him/her exactly that. 

: I don't know what's worse, that you've got a property named , or that it apparently isn't a at all. 

In addition to Heslacher's advice, I'd also suggest you to move most of the logic to a separate class, e.g. , and call that one from the . Yes, the current program is small, and even smaller when you apply Heslacher's advice, but IMO you should get in the habit of keeping the of your 's as small as possible, and more importantly have dedicated classes that handle your logic. Note that currently the data in etc. is fairly limited, but what if there are dozens of different message parts in the future? Consider moving those arrays to a separate class, and perhaps even to a config file. 

You have a spelling error: . However, what's worse is that you repeatedly use this string instead of setting it as a and using that. Same for other strings. 

I'd certainly try to reduce the indentations, not in the least because in the case of it involves a 30-line block, and the is just a single line. Also: if you're going to fail, do it fast. But there are other issues to consider. 

Your casing style is inconsistent: , , , etc. should all be camelCase when they're local variables or parameters of methods. 

Nearly 200 lines of code in one class is IMHO too much. To me, the class of a Console application should contain as little as possible, and all logic should be contained in separate, well-defined classes. Think SOLID. I'd refactor and to a class each, for instance. 

Work with smaller blocks of logic, each designed for a specific function. Start from there, and then try to improve on your logic. For instance: 

I need to return a "human readable" description based on a minimum and a maximum value. Note that the minimum is included in the condition, but the maximum is excluded -- so for instance if the parameters are 6 and 9, the valid values are 6, 7 and 8, but not 9. The maximum value is also nullable. I started out with nested statements, but I quickly abandoned them because they were unreadable and would be hard to maintain. Instead I kept the original , but moved each nested switch to its own method. Note that the code currently supports only a handful of cases, but these are the ones currently needed. Though it is possible others will need to be added in the future and thus I'd like to have something that would be easy to maintain. The code as featured below doesn't feel "mature" to me, but I don't see another solution right now. Perhaps the Strategy Pattern could be a solution, but it feels a bit overkill for this purpose. 

Those should be moved to a separate method to start with. I also don't like that it does two things: update and then use to update ; this looks like a mix of UI and business logic. 

Seeing that this functionality is repeated several times, consider making it into a method with the necessary parameters: 

has ten parameters, ditto . That's waaaay too many. Once you go beyond four or so, you need to consider creating a specific class where each of those parameters is a property. That way you only need to pass this class, and adding/removing parameters is much easier. Also, you don't risk to mix up parameters of the same type e.g. and , or , , and . 

Don't put all of your code in . IMHO that file's method should basically do one thing: call a method in a class you wrote yourself. 

Is there a reason why has two different constructors? Why not simply have a single one which takes , and , that way you can concentrate on filling and and just have a single at the end.