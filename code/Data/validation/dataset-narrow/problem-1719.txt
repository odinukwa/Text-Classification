All RPi boards use standalone quartz crystals, not external oscillators. It's impossible to replace a crystal by an oscillator without some redesign of the schematic, and it will be very hard to do on an already populated PCB. Check out the datasheet you've found: the IQXT-260 oscillator has 4 or 6 pins depending on the package. The X1 part on the RPi has only two pins. 

In no case should a working LCD display such lines. Double check your connectors, try another HDMI cable if you have one, then RMA the display to the vendor while you still can. If you can't, you may want to look up how to dispose of electronic waste in your community. 

Alternatively, you can ignore EDID altogether using or settings. If you want to get to the root cause of your issue, read EDID while connected to each port of your monitor, run these files through and compare. 

Running x86 applications on ARM will require emulation, which means x86 Eclipse will run with an extremely poor performance, if at all. 

While using two displays seems possible, the video core only provides one framebuffer, so the second display can only be used by apps which can output a video signal directly via hardware. As I understand it, this really limits it to video players (and maybe GLES games) supporting display redirection. Anything using Xorg (read: 99% of Linux graphical apps) will need a framebuffer to function. Note that you will need to make the LCD your primary device (using ), so it gets a framebuffer assigned to it. One workaround I can thing about is to use 2 RPi boards. You can use a Pi Zero to manage the small LCD and communicate with the second RPi which would handle the video playback. 

You have to understand that multiplexing means you only actively drive a single digit at a time. The brightness you get is inversely proportional to the number of digits. If you multiplex 7 digits, each digit will have 1/7 of its original brightness, no matter how hard you try. If you need more brightness, use more IO extenders and less multiplexing. Another limitation comes from the IO extenders you use. MSP23S17 can only sink 25 mA per pin, which is not a lot: if you have to drive all 7 segments at once, you'll get less than 4 mA per segment. Assuming standard LEDs which allow up to 20 mA of current, you just crippled the brightness by another 5 times in the worst case. Considering the brightness loss due to multiplexing, your LEDs have only 1/35th of their original brightness which I agree is not a lot. You might want to use more powerful extenders, drive common lines with several IO pins in parallel (but beware, if you bridge two pins together, driving one of them low and the other one high will damage the IC), or use transistors to amplify the current. The difference in brightness between individual displays may be explained by the software implementation of your multiplexing functionality. If done right, you should get equal brightness on all digits. 

As you can see, was executed in 0.28 seconds, consuming 0.535% of my two-core CPU (so, essentially loading 1 core at 100%). An average of 0.61 instructions per cycle suggests it's not heavily optimized, and so does the 12% of branch misses. 

Looks like your WiFi adapter's driver didn't load. This is frequently due to missing firmware. You may want to check your folder: if it's missing or empty, try putting these files there and reboot. You might also try to load the driver manually: 

Your log suggests that rasbpian server names (like ) are resolved to the IP address , which is private IP. At the very least you don't seem to have a working DNS server, but it's entirely possible you have unrelated network problems which prevent the RPi from reaching it. Try using google DNS instead of whatever is configured now (put in ). If that doesn't help, your network connection doesn't work properly and you'll need to fix it. 

Your function basically polls the sensor repeatedly to determine the pulse length. This inherently limits the number of sensors active at the same time to the number of simultaneously running threads, which in turn corresponds to the number of available CPU cores. Unless you deal with very fast moving objects, you should consider taking your distance measurements sequentially, one sensor at a time. That would also eliminate possible interference issues between the sensors. Also, there is no way this would work 100% reliably in a multitasking environment such as Linux, since your threads can be stopped and resumed by the OS at any time. Real-time stuff is better done by MCU boards such as Arduino. 

If you want to expose your RPi via the router's port forwarding feature, the RPi should be connected directly to the router. Right now, there is your laptop between the two, and I expect it is not configured to forward packets from its WiFi interface (connected to the router) to its Ethernet interface (connected to the RPi). As a result, the connection between the router and the RPi cannot be established. 

objects close the port automatically when deleted. However, your script doesn't guarantee that object will be deleted at the end of your script. You're at mercy of the garbage collector: if the GC runs before Python session closes, it will delete the object and the port will close. If Python interpreter terminates before the GC has a chance to run, the memory is freed by the OS, but the handle to the serial port may be left behind. This leads to those hard to reproduce errors you're seeing. Do yourself a favour and learn statement: 

prevents the OS from initiating any TX/RX operation on the interface. The RPi shouldn't be transmitting anything at this point, and you won't be able to scan for wireless networks until you bring the interface up again. Depending on what you want to achieve, you may also want to disable Bluetooth, since WiFi and Bluetooth share the antenna and parts of the transceiver. If you want to guarantee that no communication takes place (as much as you can guarantee something on a closed-source hardware), you'll have to disable WLAN and BT drivers in and reboot: 

No, this is not normal. That column suggests that your script fails to terminate properly and instead hangs up in "interruptible sleep" forever (or at least for a long time). You should debug your code to figure out which method ends up sleeping. Most probably it's either or (which is implicitly called at the end of block). I would begin by adding a statement at the end of your script. 

Hopefully the HTML output you'll get will provide enough insight into the problem you're having. Aslo note that it's much more secure to have in sudoers, and locate the script in a place where your webserver doesn't have persmissions to replace it with whatever hackers will manage to upload. Otherwise you risk letting people executing random python code on your RPi with root permissions. 

Try powering your RPi with the thickest and shortest USB cable you can find. If that doesn't help, plug the HDD via a powered USB hub. 

Slow speeds doesn't rule out overflow, it only takes more time before the overflow happens (seem like your case, right?) Restarting your python script flushes the IO buffers on RPi side, and you say it helps, so I'm inclined to believe your problem is exactly that. You should make sure you empty the buffer every time you read and before you send a reply, both on RPi side and on Arduino side. Either flush the buffers after a read, or keep reading until there's nothing left to read (not just the sequence you expect), and only then send a reply. You may add relevant parts of your code to the question (both RPi and Arduino) if you need help programming that logic. 

Assuming no power-hungry peripherals and no heavy computations, your RPi will draw about 0,5-0,7A. Since you want to run it 24/7, you should account for these rare cases where it's raining for several days straight without any useful sunlight. If you want your RPi to survive a 5-days outrage (120h), you'll be fine with a battery of 60Ah. This won't be cheap, but if you can afford such a battery, then problem solved. There are several tricks which can reduce this number to something more reasonable. 

Of course, you still need to keep the read-only settings in , otherwise Linux will keep trying to write to the SD card, fail to do so and report all sorts of filesystem errors. Current Linux drivers seem to only understand the mechanical lock switch present on full-size SD cards, and fail to understand the locked status when no switch is present. for the Raspberry Pi can be downloaded here. 

You will need software to receive and decode AIS signals. Reception is handled by a package called which can be installed using . For decoding I would recommend xDeco which provides builds for the RPi. You may want to take a look at this tutorial to see how it all fits together and what kind of antenna you will need. I suggest you try to receive some signals on a laptop first, so that you will only have to deal with RPi-specific problems when trying this out on an RPi. 

Incidentally, if you happen to have special characters like or in your password, you might be interested to know how to encode them. 

Above all, there's no such thing as "USB RX". USB is a strictly "Request-Response" protocol, you will never receive a reply without sending a request first. It's also quite complex: each device expects to be configured before it can be used. Even if you managed to generate correct D- and D+ signals, you'd have to implement a USB host controller driver for your approach to work. 

Since Debian is using OpenSSL 1.0.1e, it is simply not affected. I don't know what stands for, but from package management point of view will be considered newer than , so the former will be installed if both are available. 

What happens here is a current flowing from 5V supply, through the LEDs, into the GPIO pins and into the 3.3V supply. This is a protection mechanism which prevents a short voltage spike to instantly blow up the pins, by limiting the overvoltage to 3.5V as you have seen. Should this mechanism fail for some reason (like an actual voltage spike coming in addition to the current from the LEDs), you will damage the CPU chip. If you're lucky, you'll only lose the pins, but more often that not you'll lose the whole board. So no, it's not safe. Sometimes this situation is hard to avoid (the device you connect requires 5V and won't work well with voltage shifters), so this is being done in some DIY projects. In your case however, I expect the LEDs to work from 3.3V supply just as well, so it's best to avoid it. 

Note the hidden service name (which looks like "randomcharacters.onion") which you will connect to. On your client computer you will need running as well. You will also need to make sure SSH will use while connecting, e.g. 

If you happen to have a file named , you should know that this file takes precedence over , so you need to either remove if you don't need it, or add the contents of at the end of if you do. One way to know if those options are really effective is to use : 

It sounds a bit strange that RPi Foundation is concerned about breaking FCC certification by documenting the UFL connector site on their board. There are many SBCs which have a UFL connector onboard by design, e.g. Banana Pi M2+: 

Then type (or paste) the four lines you want to put there, and terminate with Ctrl+D. Be careful, is not an editor, so you won't be able to modify a line after you press Enter. 

One thing that doesn't look right is that your contains an absolute path, while the error message complains about a relative path, . Make sure you use the absolute path in . If you're actually using , you should check whether you've built against , and not something else. Run 

Simple checks like that are easy to discover (either by searching for the known ID or by monitoring calls to ) and remove. A much better approach is to involve the ID as a constant in calculations. That is, instead of somewhere in your code you will write 

It sounds like you failed to mount the drive in the right place (in your guide that's ). Without the mount in place your mounpoint (the directory where you want to mount the drive) is just a regular directory on the SD card, that's why you see the disk size of your SD card when you're trying to use it. I suggest you try to make a backup from your Mac (is it possible to backup a single file?) and check where the backup files are created on the SD card. Then run the command and check to which directory your drive is mounted. Hopefully you'll see a discrepancy, and your issue will be resolved once you correct it. 

I wouldn't worry about syslog trashing your SD card (it would take years if not decades), but disabling a service you don't need is generally a good idea. You could also remove NTP completely if you're sure you don't need it: 

The error "Name or service not known" comes from Linux NSS. This is easy to confirm: other programs using NSS (e.g. ) should fail with a similar error. Non-local network host names usually come from DNS servers, which are configured either statically, or via DHCP. Fixing DNS configuration and making sure your DNS server is working is therefore the first step to fix the issue. 

You don't find those packages ( and ) because you followed the instructions written for Ubuntu, while using Raspbian. I suggest you follow the official build instructions for Linux. As you will see, those two packages you're missing are not even required. The official build prerequesities are 

And while you're at it, you may remove AMD64 packages if you don't need them, by running the following command (check the list of packages to be purged before accepting!): 

Try removing the voltage suppressor that have smoked and power the board with stable 5V (e.g. USB, not that power supply of yours). If you only fried the suppressor, there's a slim chance it did its job protecting the rest of the board before dying. Unlikely, but it costs nothing to try. 

Debugging a running Linux kernel is possible. You will need a J-Link debug probe and you will have to enable JTAG functions on your GPIO pins. It is recommended to use an RPi 1 for this, for which there is a nice tutorial. I suppose it's possible to do the same on RPi 3, since the RPi foundation claims the SoC architecture is mostly identical, but you're on your own here (tl;dr: Broadcom BCM2837 datasheet is not available). Note that this requires to set a non-default mode for GPIO pins, so it won't work in early boot stages. If you need to debug the bootloader or the early kernel booting steps, you'll have to use an emulator. 

If you get no errors at this point, you'll be able to use gadgetfs libraries like this one to program your custom USB devices. 

If that doesn't help, I would be inclined to check if LXSession is actually used as your session manager (e.g. by checking X11 config files or running ). I know it sounds silly, but it's not impossible to install e.g. openbox, forget about it, then wonder why LXSession ignores its config files. 

Edit the Eclipse package to remove the unwanted dependency (most probably and its alternatives) Create an empty package which claims to provide that dependency (or one of the alternatives). 

In case of PHP specifically, set . If swap helps, you can activate it automatically at boot time by adding a line to : 

As far as I know there is no analog Audio-In pin on any of the RPi boards, so there is no way to simply connect a microphone. Your best bet is to use a USB sound card which as a built-in microphone or microphone input. 

In case of PHP specifically, set to 16M in . 2. If that doesn't help, use swap. It will slow your webserver further, but at least prevent OOM crashes: 

You're obviously running out of memory. Without knowing what exactly you're running on your system it's hard to advise, but check out two main suggestions: 1. Configure your web server. Go thourgh and reduce settings which could use RAM (number of simultaneous connections, buffer sizes, etc.) If you're using web scripts (PHP and friends), check out their configs as well. These settings may be a good start: