Short answer: Speed optimized? Perhaps. Memory optimized? Not that I am aware of. Improved flexibility? Yes. 

There is nothing in the description saying that you should return for an empty array. I think it would be better to throw an exception. There's no need to return an when you can return . You're using generics so that you can use your own comparator. An alternative (not saying it's better or worse) would be to use pure , sort the array as usual, and then loop through the array backwards: 

Below, I have tried to refactor your code by extracting inner sections into their own methods. The way I have done it here might not be optimal, it might not even be functional, but it will give you an idea of what to do with your code. I have not done the fun part of defining and passing the parameters needed to the separate methods (and making them return something useful). Essentially what you need to do is to make sure that one method does one thing. "Retrieve history" seems to be a big tasks that needs to be broken down into several subtasks. That is what the new methods should be for. Here's what I did to reduce your cyclomatic complexity: 

So all you are doing additionally is to wrap it in another exception which is explained just slightly better. But personally, I think this message... 

Make that . Whenever possible, make variables final. The same goes for fields in your other classes. Prefixing fields with is something I would not recommend. Although I've seen a recommendation about that somewhere a year or so ago, about prefixing internal fields with and static fields with , it is not something I see a lot in today's frameworks. I would recommend to not prefix those names. Most IDEs today have a code highlighting feature to separate between these. 

You're doing nine times (because it is inside the loop), as you're doing it inside the loop. Do it outside the loop instead. What you should do: 

You don't need either or the in your class. As your value change listener is an anonymous inner class, it has access to the outside object, which you can access with . As your is passed as a parameter and you want to use it inside the anonymous inner class inside the method that the parameter is passed to, you can mark it as to make it usable. 

If you want to code games and want to support more than just Android, I can highly recommend using Libgdx Additionally, you might want to use an Entity-Component-System approach to your game. It is often used for games and is a way of really separating the parts of a game into their smallest possible parts, which you can then use with composition to create the game you want. I'd recommend reading an article about ECS on Gamedev.net 

Remember that enums can have constructors and methods in Java! Look at Oracle's Planet example. Take a look at Oracle's tutorial for an example on how enums can be used. Then you can use a on the enum, or compare using . 

For comparison and inspiration, check Java's class. Note that it has two constructors available, one for initializing to System's seed and one for initializing to a specific seed. That is an approach I would recommend. 

The statement is definitely to be preferred in this case. Not only do I consider it more readable, but it is also handled differently by the compiler. As said by @JS1 in the comments, the compiler is able to transform a switch statement into a \$O(1)\$ operation using a jump table. A nested ternary is essentially a line of if-else-if-else-if-else... which is a \$O(n)\$ operation. If you really think the takes too much space to write, remove some newlines: 

The reason for why you have to do that is because of Type Erasure. Simply put, the generic class is only known during compile-time. 

The idea now is to use multiplication to get three numbers, it is important to remember what number in each group we want to write first. Looking back at our list of ASCII values sorted by the order they appear, we see that we want 72, 101, and 44. Using a bit of mathematics, we know that \$72 = 7 * 10 + 2\$, \$44 = 4 * 10 + 4\$ and \$101 = 10 * 10 + 1\$. Generating the numbers To generate these numbers in BF we will do the typical BF construct: 

You have several unnecessary comments here (although I understand some of them are because you are new to the language). 

You can add a and and increase the and there. And then you reset and to 1 whenever you change the or . 

Of course, if you still want to, you could provide an overloaded constructor that requires a and tries to instantiate that, although I think it is better to stick with one way and this seems to be the best way IMO, with regards to flexibility, dependency injection, and a whole lot of other things. 

String literals vs. constants vs. enums I think that the biggest terrible thing that you are doing here is 1) using magic string literals that are not defined as constants. 2) using a string when you can use an instead. 

Some things about your current converter: can just be . Technically it would be enough to specify it as as is a superinterface of , but declaring it as is fine as well. To support null values (even though you might not need it) you can use instead of 

Field Visibility Restrict field visibility as much as possible. Use wherever you can (the compiler will let you know if you can't). 

What you already have leads to the least code-duplication. It's clear what the "default" margin is and then you provide a specific margin for margin-left. I would definitely stick with this: 

Unfortunately your question about "How to..." is off-topic for this site but I feel that your code really needs to be reviewed as there are some things that can be improved. 

That's got to be one pair right? Nope, the code says that is two pair. Again, two pair of both high and low aces. So what is a possible fix for this? In in , pass the results first through the following method: 

Oh, and by the way... as I've already introduced more advanced topics, let me just say that by using Machine Learning your problem would be handled even better, and would be how today's real world book recommendation systems work. "Collaborative filtering Recommendation System" is a concept that are used by the big companies out there. "Logistic Regression" is also something that could be applied in this scenario. 

Arrays and Lists Speaking of I wonder why your constructor takes a instead of an array: . I don't think you gain anything by using a list. The only thing you gain at the moment by using rather than is the possibility for this: 

Please note that there are even more improvements possible for the method, I don't want to reveal all my secrets for now though ;) And also, this is just one way of doing it, which will reduce your code duplication a bit at least. There are other possible approaches here as well. 

At the end, you will have three lists holding the names of the best people to call in each category. 

Public? None of the classes you wrote are declared as , how did you intend them to be used? Additionally, your class is , which makes me wonder how you are testing this? Did you declare this class inside the test class? I see no harm in making this one RatingComparator Your has this field: 

Once the constructor is finished, you're not using your String variables again, pass them on to the connect method and remove them as class fields. Only pass them on as parameters. 

But I have to agree with @Kao that your class does not seem to be very useful. It is better to learn the existing API than creating your own API to avoid having to learn the existing API (Yes, I just made that up. It makes sense though, doesn't it?) 

Generic tile scanning Many of your mission goals depends on a sum of all tiles (when purely counting, the value for each tile matching the predicate is 1) This leads to a possibilty of: 

Note however that now I'm adding parenthesis around the last statement, as I don't like mixing with on the same line. Once again though, consider the readability differences to this line compared to my previous non-one-liner rewrite, or compared to @200_success' answer. 

Nitpicks is a bad variable name. or would be better. I am not a big fan of in your original code. is not dependent on at all. They start at the same value, sure, but it's more clear to set Your method lacks an accessibility modifier, you probably want to make it a method. Overall Well done! 

This is not how you should give two cards to a player. With this code, there is a probability that the player will be given the same two cards. That should not happen. This is why the answer by 200_success is very important, where the cards is first shuffled and then a card given with: 

Edit: Adding a sample of code to show how to implement and on an existing class instead of using anonymous classes: 

There's often a benefit of using Streams, I suggest you try to learn the Java 8 Stream API at some point. 

Then you computer the of the digits in this array, so for example if is , then that part counts as . Then the result is how much more you have to add to make it evenly divisible by 10. For example, if then the result is as . 

I am not completely sure if your question is as easy as it sounds (or if I am missing something), but here's my thought on things. Using a singleton class for this does not make much sense in my opinion. There's no state to be stored, and therefore there's no need for an object at all. Instead, it sounds like you could put it in an utility method. 

Oh, a wildcard! But this is still considered a three of a kind, right? Wrong. It should be a three of a kind, but the code considers this a full house because ace can be both high (14) and low (1), so we have a full house with three 14's and two 1's. We can even get rid of a few extra cards and take a look at this one: