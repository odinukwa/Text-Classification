I had a Laptop with no RAM yesterday. It woud turn on, then off after the CPU started, noticed no RAM and stopeed itself. Rebooting is very similar to resetting at that point in the boot cycle. So yes, your PC is probably as normal as you'd expect. 

A little bit slow for windows file transfer. I'd expect 3.3 megabytes per second and you're getting half that. 100/10 ~= 10 Megabytes per second raw ethernet at roughly 8 bits per byte plus overheads. then windows tops out at about 30% of any given network. consider it MS tax. so 30% of 10 is 3.3 megabytes per second. So yes, below normal, but not markedly. cableas are okay and both computers have clean 100meg connections ? If you're getting link errors that will slow things down. Check both pc's using the manufacturers diagnostics for the cards in question. (for most vendors it installs by default from their driver disks.) 

4Gb ram. memory tests are OKAY. Since you're running a 64bit OS, it's probably a buggy device driver. If they ported the code form a 32 bit driver and left some 32bit assumptions in, then it will crash, particularly when playing games which are graphics ,sound and i/o intensive. Look for newer drivers for your devices. Try getting only MS drivers. Try substituting other drivers one by one. Sound would be my first guess. then video then network ? then keyboard, other usb things etc. 

No. The hub has to admit how much power the loads use, and can only give out the amount it can get form it's connection. Some ports of the hub may not work if you try to plug too many things in , but nothing will break. 

A solution where you rip the screen out would require the card from a suitable broken LCD monitor or TV ( with the exact same LCD as your laptop) With a little software, your choices get easier. You can use a video capture card on the laptop to drive the display. If your acer has a video input, this is not too hard to set up. If it still runs windows, you might ebe able to use a the TV /record app that came with it. If you have no software, Use a lightweight linux like puppy and run a full-screen TV window, with the video input selected. If your doesn't have a video input already, there were PCMCIA capture cards, you might find a cheap one on ebay. I'm assuming the laptop is too slow to run a USB video capture device. 

I've seen some mechanical failures of connector soldering in PCMCIA cards ( same connector as CF but more ins). You might be able to rework the connector joints and get the device to be recognised. But it's equally likely that the damage is electrostatic discharge and the whole board is dead. So it you can, or have friend who can, rework the connector, it might work again. 

Excel does all it's math as double precision floating point numbers. (64 binary bits in total) that gives you about significant 14 to 15 digits in decimal. 5000 097 208 326 954 is 16 digits. If you do this in excel... A1 = 5000097208326954 A2 = A1 +1 A3 = A2-A1 A3 will display 0. Full disclosure: I'm a member of the ACM and I'm obliged to tell the public about risks from computing. It's in our code of conduct. Please Don't use Excel for anything critical. You'll get more accurate answers with a pocket scientific calculator. Excel is written in C/C++ and uses 64 bit numbers, It also uses the Microsoft floating point libraries to calculate functions like sin, cos and exp. These libraries are pretty inaccurate compared to scientific ones, even operating on the same size numbers. Floating point is fine for simple stuff but awful for scientific work or serious engineering they are too inaccurate. Numerical methods where you add and multiply numbers over and over again get ugly fast in floating point as the 15 digits of precision go away, one digit every 4 multiplications. Floating point is bad for Financial work (0.2 is an infinite recurring number in a binary floating point.) So if you add 0.2 dollars 1000 times, some money goes missing. Programmers in the financial world use infinite precision numbers where they have to (just like writing numbers on paper) And then use special functions for doing money math that when all the rounding adds up, no money goes missing. Old school programmers used FORTRAN for maths, which does the math in decimal, like you or I. The libraries are very accurate in FORTRAN, as the users expect to do numerical methods; that is what it is for. Calculators use decimal internally too. I have used Excel to reproduce maths rounding bugs in C programs before. You can get pretty graphs of your calculation going hopelessly wrong this way. 

To achieve your desired result you have to use an outer join (example in Syntax valid since Oracle 9i): 

When the content (e.g. a document or an Excel sheet) is created on the fly the size cannot be known before. In this cases the server cannot send you the size of the download before and the brower cannot display the total size. 

This is not (easily) possible with linux as some files are written to the home directory (e.g. or ). You can create a new group and assign this group to the users that only read files. Then give the file permission to the files and assign the created greoup to the files. So the users can only read the files. Also you can give the permission and assign the group to all directories so that the users may not write files into directories. 

The is no simple answer as it depends on the updates made. If the kernel had a serious security problem then it is good to restart as soon as possible. If the kernel had only minor fixes then the restart could be postponed. If you guarantee an availability > 99.9% then you will almost always have a clustered system where you can reboot the nodes one by one without interrupting the service. So you reboot the first system and reatach it to the cluster. Then the second and so on. Then the service will never become unavailable. 

You confuse automount with autorun. Automount is basically not harmfull as it only connects the device with your computer. This is also done in Windows (when the drive letter occurs it is mounted automatically). In Windows automount is activated always (without hacks it cannot be deactivated) where in Linux you have an easy choice. What is dangerous is autorun. This is dangerous on Windows and on Linux as it can run unwanted scripts. Therefore I would suggest to turn it off. 

Why should this not be possible? Yes you can compress an already compressed file. The result will vary depending on the source files and the compression algorithms used. E.g. compresses every file itself and puts this files together into a container. If the compressed files have a large redundancy then it is possible that or can compress the file even further. If you have no redundancy in your files it is also possible the the target file becomes bigger. 

The answer to this question highly depends on the laptop you own. And the answer to this has two parts: BIOS and hardware. The BIOS reports the number of drives it can handle which is 2. This is because the first HDD controller could handle 2 drives and therefore the BIOS up to date can also handle 2 drives (for compatibility reasons). In laptop it depends on the size if you can house 2 HDDs. Most laptops with 15" or less have only 1 HDD bay whereas some larger latops could house 2 HDDs (e.g. I've a Dell Inspiron 1720 which houses 2 HDDs). 

You cannot directly modify a file inside a or file. To modify a file inside a compresed file you have to extract the file, modify it and then create a new compressed file with the modified file. It is pssible that a program does this transprently for you so that it seems that you directly modify the file in the compressed file. This extract, modify, compress scheme is needed as the compressed file depends on all the content. You cannot simply change a file (with different size) inside a compressed file as all pointers in the compressed file must be adjused in this case (also you have to move the other files in the copressed file which is programmatically copying the content to a new file). 

and when you want to stop it, at latest before starting a new one using the same file, do (as the same userid) something like 

It depends on exactly what you mean by 'control'. If you, the attacker, get to choose two files that should have the same hash, that's what cryptographers call a collision (attack) and for MD5 it's now very easy. If you can choose both files freely it takes seconds; if you have to satisfy fairly weak but common constraints like 'it looks like a PDF' or 'it looks like a tar' maybe hours to weeks. On the other hand if you have one file pre-specified (usually a 'good' one) and you must find another ('bad') file with the same hash, that is not a collision to cryptographers, it is a second preimage. The best known preimage attack on MD5 is only slightly better than brute force at 2123.4. Your $5k can probably buy half a dozen good GPUs, which gives you somewhere in the vicinity of 237 trials per second (about 100 billion). That is roughly 262 per year, so it will take on average about 260 years (about 1,000,000,000,000,000,000 aka a quintillion). In more convenient terms, that is about a hundred million times the age of the universe. Your computer probably won't last that long. 

OpenSSL routines read and write DER (d2i means DER-to-internal, i2d means internal-to-DER); read and write PEM. Routines where type is read and write public keys in generic X.509 SubjectPublicKeyInfo form, which is usually preferred (although there are alternatives). You have a private key in PEM format (nongeneric, but that doesn't matter) and the program wants a public key in generic DER format. Do 

(Answer from comments reorganized to logical order.) The encryption key value in this example is 32 chars that are valid hex digits, which are inherently also valid base64 chars. Normally one should know the encoding of data from the process that created (or where applicable sent) it. This value is very unlikely to be base64 because a base64 encoding of more than a few bytes, unless deliberately crafted, will almost always contain some chars that are not hex digits. And it is impossible to be base64 because 32 chars of base64 not using base64 padding () encodes a 24-byte value, but we know the value is an AES-128 key which is 16 bytes. Thus this key is hex encoded, and giving it to which expects hex decrypts correctly. 

This won't work (and neither will piping) if needs to prompt for a password; that means you must either: 

Not a complete answer yet, but some ideas/directions: That cipherlist change is meaningless. The term you added is in standard RFC format, also used by Java and some other things like Wireshark, but NOT the format used by OpenSSL; the OpenSSL format is which was/is already in your list. Also, is useless here; it would remove any export suites that had been added, but none have been, and it would prevent any further specs from adding them back, but there are no further specs. Some early versions of Java 7 SSL (JSSE), I don't remember exactly which but probably including 7.03, did have their default cipherlist in the wrong order, which could result in selecting a poorer than necessary ciphersuite, but your ignores the client order, so that can't be it. Recent versions of httpd have started defaulting to larger DH groups (for DHE, which you are preferring), and that does cause problems for Java 7 (and earlier) at least using its default crypto providers. But $URL$ says these changes were 2.4.7 and .10, so .10 to .12 shouldn't make any further change I know of. Query: Do you in fact have DH 1024bit configured as $URL$ suggests? If that isn't it, I would need more data. Is anything written in the httpd log(s) when the problem occurs? Can you get more details from the Java client with the problem, like an exact exception message? (Is this a client you can run yourself, or does it belong to another person or persons?) Can you get a network capture of a failed attempt with Wireshark or tcpdump or similar? If all else fails, can someone run the Java client with or equivalent, and get the (rather voluminous) resulting output?