Don't use std::endl unless you want to force a flush. This is rarely the case. std::cin and std::cout are linked. If user input is required the cout is automatically flushed so the user can see any questions (or output). Excessive flushing severly degrades performance. The most hidious of things ever: 

Interface Passing an array and then two indexes is a very C style of interface. In C++ it is much more common to pass two iterators. An iterator is a generalized form of pointer. So rather than: 

Follow up on previous review: Sign an EC2/S3 URL I have fixed the previous comments. I have also added the code needed to sign HTTP header fields as part of the request. 

You are using a runtime loop (over each bit). You could use a compile time loop over each byte. Because the number of bits set for each specific value for a byte it is easy to pre-calculate. Note: For each byte there are only number of bits (usually 8). Which is 256 values. So you can swap space for time here for a single byte. 

Dry your code A lot of this code is repeated across both sides of the if statement. Why not remove duplicate code out so it happens first? 

Then you can pass any container that contains Widget pointers to the method. Also solves the problem about ordering. You pass the appropriate iterators for the task. But my main problem. Is why are you storing pointers in a container? Who owns the pointers? If it is the container then you are doing it wrong as the destructor will not clean up (nor will replacing elements do the correct thing). For this you should use (in ) or if the container is not taking ownership then it should hold references to the object there are other alternatives but it depends intirely on the semantics you intend to achieve. But pointers in containers is a no-no (in general). Better have a darn good reason. 

This is also a perfect example of where is dangerous not to use '{}' around the conditional blocks. is not actually a function call (even though it looks like one). Its a macro that will be expanded inline (luckily here putchar is so commonly used that it is written well). But in C there are a lot of macros that look like functions and if they are not well written they will screw up what looks like perfectly good code. 

Personally I thinks this obfuscates the meaning and makes it harder to see that the call is using virtual dispatch (but that is just an opinion there is nothing technically wrong here). I have a hard time following the logic here: 

The algorithm "moves" all the bad elements to the end of the container (returning an iterator to the first bad elemenet). Then the erase will "erase" from the container from that point to the end. Another alternative is to split the container into two. One of bad values and one of good values. A bit more work. But can be made relatively efficient by using 

This exists in the standard library as std::isdigit() If this is C++ why are you passing C-Strings around. 

Don't see the need for your custom Mutex/Lock class. Just use the standard ones directly there is no need to add a layer of indirection that future developers need to go and check. Excessive Flushing Calling flush after each item: 

The standard (Since C++11 (so 6 years now)) has supported 64 bit integer types directly in You can use: . Don't use macros where function can be used. 

Each of the pointers in this structure are initialied by a function call that obviously allocates so object and returns a pointer. I don't see any code that correctly tides this up. You should wrap each of these pointers in an class that will correctly tidy itself (otherwise at each failure point you need to write code to tidy up the object correctly). These constructors in Map are obviously not doing anything: 

It brings everything from standard into the global namespace. This is a problem especially if other people include your header file. The reason std is short so it is not a problem prefixing things with std:: . Delete all commented out code. 

I should hope it inserts a value it is after called insert(). More useful would be notes of any pre/post conditions etc. 

But when the object is destroyed currently you have to manually destroy the elements by calling otherwise you will leak these nodes. You should set up your destructor to call delete to make sure this happens automatically. 

When writing C++ code you should definitely not use the C cast operator. C++ has four of its own that you can use: 

I would avoid unless you really want to flush output (usually not the case). Prefer to use in its place. 

But I would always put the braces around sub statement groups. It becomes too easy for people to accidentally add more code to the without thinking about it and suddenly what you expect to be in the loop is not actually part of the loop. Also it keeps your style consistent if you always have the rather than only sometimes having them. Same comment about here. 

You can use a simple test if you want to do things locally. throwing exceptions is what you do when you want to indicates an error that goes beyond the public interface of your class and thus you can not control how it will be received. Internally you have full control and thus exceptions are not expected. But here you do want to throw an exception and let it escape your class. You do not want the user to be able to construct an invalid object. If the input is bad throw an exception. Force the user of your class to catch and deal with exceptions. If they do not deal with exceptions then the program should exit as you would be running code with an invalid object otherwise. Printing is non mutating. 

Your biggest problem is the code does not take into account not finding the word. If it fails your code will loop forever. You need a not found exit case. This is always a bad sign 

Sure. But only if you need to expose that data. I would rather encapsolate the manipulation of the data inside the class so you don't need to expose it. 

Warning There is already a std::array You may want to be careful because there is already a standard array. You don't want want your user to be confused. I don't think it will be a problem but you should keep it in mind. Don't re-write container classes. Your array class is basically a simplification of std::vector. BUT it does not have all the features that make vector efficient. Why not use the standard container? If you don't want to expose the whole vector interface just wrap it and expose the methods you actually want. Your style is a bit cramped 

It is easier to put the read as part of the while condition (so that the loop is entered only if both reads succeed). A couple of other things to note (they may be intentional and if so they should be commented). If is valid then an empty meaning causes both to be dropped (ie not put in the map). If hits eof (ie there is none) you don't test for this (thus meaning is left unchanged) you don't exit the loop. This will put random (probably the last value) value into the map. 

I would do a couple of things differently. Early escape Your use of early escape is good and makes the code easier to read but you don't need the else section if the body of returns. 

Overview I am sure the maths is fine. But overall very sloppy programming and as a result a maintenance nightmare for anybody to take over. Validity Looking at: $URL$ seems like your functionality conforms. Review Your code is a bit compressed for my liking. This is OK. 

IContainer In the class the member is public. Which leads to potential incorrect useage. Non private members is a code smell they should be hidden behind access methods (not get/set but more like chain()). Also it would be easier if you used smart pointers to make sure that everything is correctly cleaned up. Delegate The class has owned raw pointers and does not (google rule of three as it is more common but the rule of three was expanded to the rule of five with C++11). You can fix this be either implementing (or disabling) all the compiler generated methods. Or converting your owned raw pointers into smart pointers. My choice would be to convert them into smart pointers as correctly handing multiple RAW pointers with exceptions propagating is non trivial (a class with multiple owned RAW pointers is a Code smell even if you do implement the rule of five). The code ~Delegate() and Clear() is very similar (ie code duplication). You should refactor this to move common code to a single function. If the code changes you then only have a single location that will need fixing. In the method a lot of work is done that is usually associated with the constructor of the object. If you give IConnect an appropriate constructor this code becomes highly simplified and easier to follow. In the method 

Now that looks like a lot of hard work. There is an easier way to achieve exactly the same affect. You can use the copy and swap idiom. 

Its a little heavy on the code side. Your definition of a token still leaves possibilities that you have not defined. 

Why do you use a different technique for numbers and char during sensitization. You could templateize the function and use the same code. 

If that new throws you leak the pointer that was given to you. Probably the best way to handle this is the initializer try catch: 

This is particularly bad here because it is in a header file. You should not use it in a source file either (bad habit). Doing so makes your code much more susceptible to bugs, read: Why is “using namespace std” considered bad practice? Putting it in a header file is worse because it can pollute other people's code (any code that includes your header file). If I include your header file in my code it could potentially break my code in subtle ways. Things like that get you band from projects. Its a bad habit and you should break it as soon as possible. The reason the "Standard" namespace is called is so that it is short and therefore not "much" of a burden to use as a prefix in-front of Types/Objects. Public Member Variables are always a bad idea: Anybody can come along and change the state of your object without you being able to tell. 

Avoid using it hides errors. The only reason to use is to disambiguity a member variable from a shadowing local variable. If you forget to use there is no error or warning you will one day mistake and accidentally forget and thus have an error in your program. A better solution is to make your compiler warn (generate an error) you about shadowed members then make sure you change the name so it is not shadowed. Now you can never make the mistake of forgetting the as a result less chance of a bug. 

This looses all the relevant information about the original exception and replaces it with a string. Loosing information is never good. Answer to Comments I would refactor like this: 

If the interface takes a by reference you can tell if it is taking ownership or not. When you pass a unique_ptr to an interface the parameter is normally a value parameter this forcing you to use to transfer ownership. I suppose in this case it might be OK as you don't know if you are going to take ownership but the use case worries me a bit. This is way to long with way to many special cases. It should look like this: