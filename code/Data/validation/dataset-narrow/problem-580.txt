naked calls Note that simply allocates memory - you have no guarantees about what the newly allocated memory contains. For that reason it is better to write a function which both allocates and initializes an new object, i.e.: 

array reshaping array row, column and diagonal slices to compute the product of all elements in an array flipping the array to get anti-diagonals 

Each of these steps can be put into their own helper function which are also called "subroutines". The will make the body of the while loop a lot more readable. Here is an example of a subroutine to get a valid number from the player (again, pseudo-code): 

This means that your code doesn't cover all of the possible cases. Append to your question an updated version of which doesn't produce any warnings, and then I might have some further comments about it. (Please append to your question instead of modifying it so it doesn't invalidate any existing comments.) Let me know if you are not seeing this warning from ghc / ghci so we can figure out what's going on with your environment. filterEmpty I don't think the logic is right here. What if you have this message: 

I also couldn't help but notice that you defined X/Y pairs multiple times, which always resulted in copying the X and Y components individually between different structs. Define something such as a "position" once, and then just reuse / nest the struct definition. E.g. 

Now might even be an arbitrary of the model instead of a single post, and you get the run time down to what you originally wanted. Cutting down on the number of individual database queries is the key here. 

The only exception to that is the part below 1,000 which has no suffix. However, a missing suffix can simply be approximated by an empty suffix instead. So the logic approach is to write yourself a helper function which correctly formats every number from 0 to 999, because that is the range you need commonly. Your next realization should be that it is easier to start constructing a number from the LSB, than from the MSB, since you then only ever need one set of constant numbers to extract the relevant part of the number. Once you have that function, can be written much clearer: 

Note since we are multiplying everything by 100 that the value in is just the value 1, not the conventional 0.01. Given two patterns, and , we say they are close if 

Note here is represents the upper left corner of either the row, column or diagonal we are taking the product of. That's why both range from 0 to 16 We just run both and from 0 through 19. We examine a few extra products (some with less than 4 terms), but since we are looking for the maximum it doesn't matter. 

more There is a much faster way to compute the shift of a letter using the fact that Char is an enumeration (i.e. an instance of the Enum class) and therefore the following functions are available: 

Time for a little overkill then - PHP can be just as fast, or even faster, than the C++ solution here. 

This also goes for return types and method parameters. You should never require a specific type, if other implementations of the used interface work perfectly well either. 

Please don't re-invent the wheel. There is nothing wrong with wanting to re-implement linked lists, but you also re-invented the interface. Your interface is not compatible with any of the standard ones, neither STL, nor boost, nor anything else. There are some strange design choices in that interface, you ended up placing e.g. a method in that class, but completely omitting a basic functionality: Iterators. And neither does your implementation include any functionality which you would typically associate with a linked list, namely insertion at arbitrary points. You also mentioned in the comments that you intent do derive from this class, and yet not a single method of that class is . 

Note that is a pure function which makes it very easy to test. You can create unit tests for your code which may be run automatically by your build process. Pure functions are also a lot easier to test directly in a ghci session. Your game loop can now look like this: 

The only thing I have to say is that the use of and means that the output will depend on the current locale setting. This may be a bug or a feature depending on what your original intention was. Also, the use of seems rather small for today's processors. The only way that is going to fail is if it can't fit all of the output in the buffer. Since memory is cheap, you might as well make it or . This kinda of ties in with with the question of whether you expect to use this with custom locales. Alternatives: 

So yes, the OOP version is still slower and consumes (slightly) more memory. This is expected though. Typing early and properly did have an measurable impact on both performance and memory consumption of the OOP version. The effective memory overhead for the OP wrapper shrunk to about 50% just by typing early. Using the data-structure efficiently and minimizing the number of accesses did yield the biggest gains though, and is effectively more than a full magnitude faster than the OOP approach. When comparing this to the 32bit version, for PHP, you may actually cut all memory requirements roughly in half. PHP wastes most of its memory on pointers, not on actual data. 

Let's start with the code style, even though not asked explicitly. It says , but apart from using a constructor on the and using /, that is pure what you have written there. Especially the style input and output handling is overcomplicated, with regards to how much simpler the interfaces are to use. 

Even though they are not needed, they aid in reading the code. Also, aligning the in the case patterns helps with readability. The type signatures on your calls are not needed due to Haskell's type inference. insert You should be getting this warning from ghc and ghci: 

has the same shape as and the diagonals of are the anti-diagonals of . Solution Putting it all together: 

Due to laziness it may not make any difference. This is something that perhaps should be benchmarked. To form the groups the first way use the function from like this: 

Not that recursion is bad, but using streams results in a more declarative definition. append I would avoid in a Lisp or a Scheme. I'm sure it's not efficient for use on lists. , however, is always efficient, so in you should use: 

Note: Appears to work only with CLANG and gcc. Visual Studio e.g. fails to handle correctly. Obviously the preprocessor output isn't even remotely that nicely formatted, so good luck debugging that! 

If by "finished" you mean the executor is ready to be destroyed? That is already the case. Otherwise if you just mean to wait until the pool runs empty? Well, you do have in there. All you really need now, is a second condition variable: 

Defensive programming please. You've only verified that the function is injective, but you didn't test for surjective property. That means that only tells you that every \$f(x)\$ was unique. However, you probably should also have validated that all of the given \$f(1),f(2),...,f(n)\$ where also within the permitted range of \$[1,n]\$ While the specified function signature doesn't even allow this case (so the corresponding test would pass trivially), this becomes relevant if you were to reuse the logic in an environment where this guarantee isn't given. Well, actually you didn't even test the injective property properly. You only checked if \$n\$ unique values where found in the input. Not if there were also exactly \$n\$ inputs provided. Currently, your program would wrongly judge the following example as bijective, despite not even being a valid input by any means: 

Then you have a list of primes and their exponents: (p1, e1), (p2, e2), etc. and the number of divisors is: 

is still a quadratic algorithm because starts the stepping process from the beginning instead of using the result of . If you really are going to be using the sequence of stepped configs, just use directly like does above. Finally, a some philosophical musings... What's going on here is that the code you've written for stepping n times turns out to be less efficient than just applying the step once function n times. Turning this around, if you have a "step once" function: 

First of all, there are so many pitfalls associated with programming that I prefer to write all except the most trivial scripts in a language like perl, python or even awk. I realize that availability is a concern, but all of those languages are pretty standard now. If you write the script in a better scripting language you can get rid of the duplicate call to which is one thing that I presume bothers you about the code. If you must write in /bin/sh, then run your code through one of the following static analyzers to help you find potential coding problems: