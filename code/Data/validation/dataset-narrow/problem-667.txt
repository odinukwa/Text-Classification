Edit... you're not closing your table row in the loop either. I'm not gonna bother updating the code snippet. 

Now you can prevent the user from manually setting by marking it as private, thus, forcing the input to be validated by your setter. 

In Firefox Dev edition your original code worked fine unless I a) resized the dialog or b) the body was too small for the dialog. The fix for each is to set the containment on the resizable widget too and don't let the dialog start out larger than the body to begin with, respectively. 

Really, your code is fine. These are mostly just nitpicks. You're already using vanilla JS with no (non-native) libraries. 

Stupid nitpick.. There's no such thing as a JSON object in Javascript, they're just objects in Javascript. JSON stands for JavaScript Object Notation - Talking about JSON objects in the context of Javascript is like saying "strawberry flavored strawberry ice-cream which is strawberry flavored." Sorry. </rant> Best option If this is a realistic representation of your objective then the third one is the best, fastest and most concise. Creating a function to add two numbers is a waste of space and memory. Creating a variable is also a waste of memory as it will just have to get garbage collected. Approaches you aven't considered 

Strict mode is the same thing whether you use it in a function or at the top of the file. The difference is scope. putting it at the top of the file means it will take effect for the entire file, putting it in a function means it will only take effect for that function. If you want to make sure your entire script is in strict mode put it at the top of your file simply because it's easier and saves a few bytes. There are cases when you would want to put it in only certain functions though. If you have a bunch of undeclared variables, in strict mode, rather than defining the vars in the global scope it will throw an error, so you wouldn't want to put the entire script into strict mode. But what if later on you have to use (god forbid) in a function and want to make sure it doesn't introduce any variables in the surrounding scope, putting at the top of the function can be a helpful security measure. Really, everything you need to know about strict mode is documented in MDN. 

There's really no purpose in having 3 banner images if you're going to add and remove the image source from each one. You might as well just have a single image and change the source of it on each iteration. When you do that trick with setTimeout, where your timeout is the index of the array multiplied by an offset, you are effectively creating a new thread for every iteration, which can be memory intensive when you have a lot of images. A better approach would be to use recursion. Consider this function. 

The browser will replace spaces in the url automatically, so this is not nessecary, however, what if someone passes in "blahblah#importantstuffhere" for that param? The browser will ignore everything after the hash unless you properly urlencode it. JS has a built in url encode function, behold: 

Requests are asynchronous You're setting the your callback function that sets will not be called until after you have already returned the result variable. Surely you have noticed the method is always returning nothing? (which means this code is not working and technically belongs on SO, but i've already written all this)... Explaining async code is off topic for this site, but if you need help with that I would suggest talking to your teacher. Building your props object dynamically Just start with an empty object and build it dynamically, like this.. 

I would start by abstracting the DOM references in the code. Maybe just pass it a single div or span and then generate the select boxes dynamically for maximum reusability. Then I would combine the methods into a class or constructor of some sort because if you have a function in your code called , for example, later on you might have a hard time figuring out what that does. is much more descriptive than just Here's an example of how you might accomplish this: 

Your functions are small but, really, there's too much happening in them. Your function should only have to change the stylesheet. This type of stuff should be done in the stylesheet itself rather than with js: 

Generally speaking, you should keep your markup and your PHP logic separate. And the intermediate variables don't really have a purpose, just use the values from the array. You've got two opening form tags and no closing form tags. Your first condition (i there are records in the table) does not close the or the create a . Your delete button is no button at all, it's an input wrapped in an anchor tag (). That's why it's not working as expected. Either remove the anchor and give the input a type attribute of "button", or remove the input and put some text in there instead. Use a prepared statement. It's not cool to throw variables into your queries all willy-nilly. You will anger the code gods. Here's a quick re-write (assumes you're using PDO - If you're using MySQLi, see the docs to convert the prepared statement to MySQLi) I'm just going to go ahead and post this since i spend three or four minutes on it, but after looking at this code, there is no way this was working as you had it. This site is for reviewing working code, not fixing broken code. If your code doesn't work you need to ask on StackOverflow in the future. 

I've upvoted 200's answer and you should take his advice, but for your future reference and information, I'll answer the question you posed... Create your function.. Maybe think of a better name than this though 

Now you just need to write a short description on the first blankk line and fill in the types (if NB wasn't able to guess them already). eg.. 

If you're not sending an HTML email you should wordwrap your parameter at 70 chars. (You can create a variable to determine if the email will contain HTML). 

Ideally you should separate your markup from your PHP as much as possible, but when you have to do something like that in the middle of your markup, colon notation is usually neater than bracket notation. 

the HTML string on , doing so will leave the tag name as the first word in each string in the array. Loop the array and explode each string on (space). Even if there is no space, this will result in an array of which the tag name is the first index, possibly followed by a if there are no attributes. Get the tag name, trim it up and if it's unique, add it to an array of tag names.