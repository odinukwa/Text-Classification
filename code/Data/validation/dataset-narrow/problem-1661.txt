interesting observation. such kind of measurements are hard to align. WiFi packets might have a different packet size, error correction etc. compared to eth0. I don't think you will see anything suspicious via - but I suggest that you try another tool: vnstat 

I was facing a very similar situation. I ended up not using but . because many times, ping will still work even though the mobile 3G/4G connection has run out of credits/data -- while accessing the web is blocked. On some networks, ping does never work (because ICMP protocol is blocked). In any case, ping is not a reliable way for testing internet connectivity. This is how I check whether the 3G/4G connection has still access to the internet: 

this looks very familiar. I work with a large variety of linux machines which run at more than 100 service providers, so it happens from time to time, that their network is to some degree broken, especially if IPv6 is involved. You see that immediately when using -- the domains would resolve to a IPv6 and freeze right there. All IPv4 traffic was working fine. for my purpose, I just need IPv4, so I disable IPv6 on all machines during installation like this: 

The MAC address is only 48 bits and the serial number looks even less. So they are by no means cryptographically strong. You could now generate a HMAC of these values, or maybe from both (by chaining). You should consider that it is possible to disable the wlan0 interface (and probably the eth0 aswell). Which would void your MAC address result, so you need to test for that. 

I have been using it for monitoring network traffic since a few years. it offers live observation (with ) aswell as traffic stats over time (hours, days, months). Download 200 MB though your setup and then compare and ) Update: Don't forget vnstat updates its database only every x minutes (see ) Another remark regarding throughput speed in bytes/sec: In my opinion, this is a hard task to do accurate. Network traffic (especially when wireless is involved) can be very inhomogeneous, i.e. it might transfer 1 MByte/sec right now, then suddenly stop for 1 sec and then do 2 MByte in the next 1 sec, then go back to 1 MByte/sec. If your tool (vnstat, ifstat) is looking at a 2sec interval, you'd never notice that it was stuck for 1sec. So the refresh rate (interval) should be much shorter, like every 10-100ms. That's just one example why this can become tricky. 

No, this particular camera module can't be used with Raspberry Pi 3. While the camera hardware itself would work, the ribbon cable is of a different size and won't fit. 

Referring to THE LATEST UPDATE TO RASPBIAN it can be done easily. Just place your WiFi configuration on the freshly burned SD card: 

I've made a fork of shairport-sync which is an AirPlay client. You might want to take a look at it. It does some OpenGL audio visualizing. But it does not do anything more. But to my understanding, Volumio is a collection of programs just like shairport-sync along with other. So I don't see a solution that covers all your audio paths. 

Where XX:XX:XX:XX:XX:XX is the MAC address of your bluetooth device. You have to create the serial device that binds to your paired bluetooth device. 

No, for several reasons. The most notable is that only Pi Models without a USB Hub (Notably Pi model A, A+ and Zero and Zero W) can be backpowered through the usb Port. Also to my best knowledge only Pi Zero's USB port can be used as an OTG port to use it as a USB gadget. As there is a ethernet gadget available which emulates a NIC over the USB port to access the Pi. So with a Pi Zero W you might be successfull if you configure it as a bridge between WiFi and ethernet. 

Your program will likely have to higher requirements regarding to RAM and storage than on an MCU. But this sounds like no real match. As you stated to not have that much experience with Linux (not even using terminal on macOS?), I highly encourage you to grab a Raspeberry Pi over an Orange Pi. There you get an up-todate Linux which is made specially for the device. Most things work out of the box with a multitude of tutorials out there if you want to do some special thigs, like SPI (which regular computer usually don't do). Python works out of the Box with Raspberry Pi. You can quickly evaluate if it offers you the speed you want. Otherwise grab for C/C++ as there are all the required libraries to do SPI and other GPIO related stuff there. In general I don't see anythin that should cause headache with your requirements. 

I suggest to configure your tools, to use a specific network interface. Let's say you are currently using to make some HTTP GET/POST to a web API endpoint. Just add the option to curl, to make it use a specific interface ( or or -- use to list all available interfaces) for the network request. 

Sounds like the OS (Raspbian Linux) is not booting up from your SD card. Are you sure you installed the OS correctly on the SD card? check out the official documentation 

the result should be your mobile IP address. You can verify the result, i.e. with php save any keyword on any website that you have access to and just curl its URL. Compare the result with your expected keyword. 

You might want to read my answer here. It describes how to connect to ssh using USB tethering and your Pi. Bonus: you can even add android's WiFi hotspot to that solution and connect more devices. If that's not enough, you can use adb to forward your SSH port with and From my experience, you will need a recent adb build, which you'll have to compile yourself as described in my answer here. 

I think should do what you want. And if that doesn't help you can still try a few other things found in this article: 

If your mobile 3G/4G connection expired, the data volume is exhausted, or the prepaid credits have run out, the curl result will be something entirely different or not work at all. By testing for an expected value, you can make sure whether your mobile connection is still able to access http websites. You could combine my method with or just use a curl options to control timeouts. This method is working with approx. 15 different prepaid mobile carriers world-wide. Update: You might want to use (Show document info only), this will not download the http response body. It will save you a few bytes on traffic and is a bit faster. Check the response header for . I mostly use that as a "ping" to measure how fast http response is. It's not accurate, since your mobile provider might inject his message into the response body. Most of the time however, they are redirecting you to their own site and you'd get a response. 

I checked to see if it knew I had the USB microphone plugged in using . It gave me the following output: 

I have no idea what I should do from here. Any help with this would be awesome. I'm running Raspbian Wheezy 7 on the RPi 2. 

I've finally got it working again. I downloaded the fail2ban package from the debian package repository using . Once the package was downloaded, I used . Then following that command, I used . And finally, I used . Everything seems to be working great now. 

For some reason, my WIFI dongle doesn't want to connect to the internet anymore. It was not too long ago. But I think something happened that caused it not to work. I can't figure out what's going wrong but I think it has something to do with me uninstalling the package. I have a strong feeling that removing that package somehow messed up my WIFI connection. It was working perfectly before that. If anybody knows what to do about this, that'd be great. I even tried to connect to my pi through an ethernet connection but I still have no luck with it. I can't even scan it on my network. I know for a fact that the WIFI was configured correctly because everything seemed to work fine until not too long ago. I have absolutely no clue what I did. Let me know if you need anymore information than this. Thanks for any help. It's appreciated. 

If anyone needs more information on how to get this done. Leave a comment and I'll try to get back to you. 

I've tried making a build directory in the /lib/modules/4.1.19-v7+/ directory, but all it does is search for a non-existant Makefile. Here's what the Makefile looks like for anyone who would like to check it out. 

I was wondering if it had something to do with either or since I installed those after the first time that actually worked. Those were the only things that I could think of that would mess with . I removed those packages but nothing changed with them. If anybody could think of any other errors that should be checked in order with arecord to working once again, be sure to either comment or give a well developed answer. Final note: Just in case you've already forgotten, arecord used to work using the same USB Microphone on the same Raspberry Pi. I'm using a Raspberry Pi 2 running the Raspbian operating system. 

I think your best bet is to dive into Processing. But to my best knowledge you will only be able to mirror your desktop. But with 24 screens that might also be neat. 

I don't think it would work. You still can develop on your i386 desktop and compile/deploy remotely via SSH. That would be the easiest way I can think of. If you really want it, you can setup a cross-compiling environment. But you'd get much overhead in the beginning. I personally use a set of Makefiles that copy the changes to my Raspberry Pi via (only copying deltas) and running on the Pi to compile the code (that changed). It works pretty fast and is convenient. But for why you should not try to compile directly on your i386: works by utilizing hardware capabilities of the VideoCore IV part of the CPU which has an embedded media encoder and decoder. OMX refers to OpenMAX which is an interface to that hardware. I am not aware of any device compatible with OpenMAX except in the mobile/embedded space. But as modern intel/AMD CPUs and also nVidia/AMD GPUs also include hardware media encoder and decoder, they might provide OpenMAX compatible driver. Only then you might have a chance. But still I am not aware of such drivers. 

should also work if you run the script from within the same directory or change into the dirctory within your script. 

According to eLinux 128 GB SDXC cards have been successfully tested by individuals. But not all cards seemed to be working. Entries with "Card Type" SDXC can only be used with RPi 1 Model A and B. All other models use microSDCX. 

I think you are mixing up signal moldulations. HM-T433 uses FSK (Fequency Shift Keying). Most applications in 443MHz use ASK (Amplitude Shift Keying) and of those most use OOK (On/Off Keying). That means they either send a signal with constant amplitude and frequency for "1" and don't send anything at all for 0. RTL2832 is capable of doing both FSK and ASK. But you have to configure it correctly for your application. The rtl_433 utility is fitted for ASK/OOK so your transmitter does not match. You will need to find another utility that uses FSK. Try GQRX to find out if you receive the signal at all. 

Download the package here. Move the .deb package onto a usb drive. Plug that drive into one of the PI's usb slots. To mount the drive, use this command . sda number will vary. Move the .deb file into your home folder. To install the package use the command followed by the command . Restart the Pi. Hopefully, your internet connection will be working once again. If it doesn't work, there may be another problem. 

Open up the Raspberry Pi configuration menu by entering . There should now be a menu that's popped up. This is the Raspberry Pi configuration screen. Select option 8 and press enter. Select option A6 and press enter once again. From there you should be able to change wether the audio is forced through or the . 

Before I start, I'd like to tell you that I've used in the past with the Raspberry Pi 2 using the same USB Microphone and it has worked just fine. For some reason, it doesn't seem to work anymore. I need some help looking for where the error is. I'll give you as much information as possible. The error started when I tried to use . It gave me the following error: 

Everything should work as planned. This is a great way to use on debian wheezy. Good luck to anyone else trying this. I hope that this helps you out. 

I've recently updated to by building it from source (Since I can't download it from the repositories, I'm still using Wheezy 7.0). The build went perfectly and once it was installed, using the command gave this output. 

Well, I've fixed it by restoring from another backup I had. I don't even know if I should keep this question up. But just in case there are people out there who are as clueless as I am. DO NOT DELETE THE PACKAGE EVER Never thought I'd be saying that. Nobody in their right mind would delete their network management software, right? I learned the hard way. Took a lot of work getting the computer back to normal. Fortunately, there is a much better solution for other people that may run into this problem. Here's how you can install the package without a connection.