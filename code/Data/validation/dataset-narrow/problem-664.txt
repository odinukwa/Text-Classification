Note that I'm using strict version of left fold (see here about vs ) and strict . This means that map of height counts constructed in single pass without thunks. 

Maps as arrays In you are taversing heights 200 times. It is possible to emulate array with and do this in one pass: 

It is really better to have many small and named functions with type annotations. This not only documents code but also helps to localize type errors while developing. Please note qualified imports. It is considered idiomatic to modules like , , and some other. This prevents name clashes with Prelude. 

While generating walkers for the next journey you traverse list of subsequences twice. This could be not very efficient as there are subsequences for the list of length . Here is less readable but more efficient approach: 

is the same as , so . You can use instead of to print strings without quotes. Using the fact that , you can merge and into: 

It may worth inventing your own combinators with semantically appropriate names. Here is an example using ExceptRT monad from errors package: 

Now, when you have all of the expansions, you need to filter and count those with numerator longer than denominator. 

is fine. The resulting string in is misleading. The is the amount of cans the vending machine currently holds and the is the number of coins that have been inserted. You should also directly return the string instead of creating an empty variable 

Extracting UI calls Finally the UI calls must stay in the UI-part, namely into the JavaFX controller. Typically it could looks like this (simplified): 

Update: taking into account This is how I would fully replace a boolean into a business class. It looks like overkill but in reality it's not. Each class has a single responsibility, is testable and maintainable. is now abstract because the "blocking" behaviour can't be defined here but only in suclasses. 

At the moment there is an method. However since you should add cans and not set cans, you should rather take as an argument the number of cans you should add: 

TaxiMeterApp This class also doesn't need to depend on , the only useful information is the amount of the base charge. One now takes as a parameter since the distance is obviously not known when starting the taxi meter (the base charge is, however). I also removed the App from the class name because I think it has no value and only bring visual noise. 

Haskell is great for it's declarative style programs and most of the first hundred Project Euler problems are easy to write in such a way. First of all, this problem is about ratios, so let us import module. 

(Btw, why "movie"? we were talking about "films" all the way.) I'm using partition from to extract matching movie(s) from database. Also there is funny syntax I'm using to update movies: 

Haskell also allows different datatypes to have common field names, so the code could look like this: 

In this case changing fields in or won't break . You can enable extension to get only specified fields : 

'encrypts' each letter of input string independently of other letters. This could be emphasized by using at the top of instead of hiding it in helper functions: 

It is possible to create cyclic directory structure with symbolic links, so it may be reasonable not to traverse them. E.g. you can use from package to traverse only real directories: 

creates cycle from a list. skips some characters and returns list starting from . Try it in ghci ( is infinite so be careful with it). 

Vectors as arrays If overhead of trees is too much for you, it is possible to use which is for real arrays in Haskell. 

I see at least one big problem in your method: there is no separation of concerns. Everything is mixed into this method: common rule for password double-checking, business rules for password validation and UI calls for user response. Extracting the business logic The business logic in your case if the password validation specific rules, as you named them rule1, rule2a, rule2b, rule2c and rule2d. Everytime you will need a password validation, you will need these rules to validate a password, therefore I would extract these rules into a BO. 

This parameter is the thing that bothers me the most in your class, and also the one who gave me the most trouble when trying to remove it. Why does it bothers me ? Everytime you have a in a method (or constructor), it's a sign of poor design because the class/method should do 2 things now (one for each boolean's value), therefore violating the single responsibility principle. It makes your code hardest to test and to maintain because of the conditionnal logic flow. If I understand correctly, the purpose of this flag is to avoid client code retrieving a when calling because the cache has not been updated at least once. I would rather resolve this problem by blocking in as long as the cache has not been computed once. In Java, one have the who is a thread-safe class able to fulfill this responsibility by blocking only until the cache is computed the first time. I came up with the following wrapper to achieve that: 

I suggest you to use more advanced data structures than plain list. As your is actually a map from to it is better to represent it as . To use we need some imports (please be sure to import it qualified, otherwise some names may clash). 

This is pretty nice code. I have two main concerns. The first one is about handling errors. You are mixing tree approaches: , throwing explicit , throwing implicit (as in ). It's better to stick to or â€” they are explicit and you can handle them in pure code. The second one is about dividing your program in meaningful functions each having single responsibility. Such functions are simpler and you can more easily compose them. For example, checks if dictionary is not empty, adds to pattern and matches pattern. It is better to split error handling from data processing (in this case by lifting dictionary check to ). Another one is : it parses string into list of digits and implicitly checks for nondigits (throwing useless 'no parse' error). You can skip this as you check for invalid symbols in . 

I tried to elaborate on great answer by Toxaris. After precomputing results for first numbers, most of time is spent on extracting digits and squaring them. It is possible to calculate squares of digits for sequential numbers in incremental manner. If you have list of squared digits for some number then here is how to calculate list of squared digits for . 

Update Following your comment, this is how I would implement the file creation based only on a date + a counter (if needed) 

The hardcoded string for the path The fact that you directly depends on , making the method hard to test 

If the rules are likely to change, it would also be possible to refactor this code and take the "final predicate" as a constructor argument. Extracting "standard" logic In your case, it is only the rule that assert the password and the confirmation password are equals. This is not a business-specific rule but rather a commonly accepted rule everytime a user creates a password. Moreover it seems you have a "validation flow" defined (first check the equality between the two password, then check if the password in itself is valid) that can be extracted into a separate class 

Beyond the requirements The two setters are superfluous and can be removed. Also, Java class naming convention is CamelCase so you should rename to . Since your class is not meant to be inherited, you can mark it . Here is the full resulting class 

This is the kind of test I would write (I picked a convention for the names, you can choose another since it stays coherent). Given the previous refactors, the test implementations are more expressive now: 

Using is justified only for big numbers, in your case using is enough and could be a bit faster. Here is another solution: 

As lazy IO is considered deprecated, it is better to use iteratees/conduits/pipes to work with IO effectively and in compositional style. Here is an example using pipes: 

Now you just squares of digits and get index to precomputed cache of chain results. Here is the full code which on my machine is 15 times faster than the original one: 

It is really nice that you provided domain-specific type aliases. This makes type signatures more readable and allows to easily change underlying data representation as in this case. 

Working with text is easier with . E.g. it has already defined. Tagsoup understands so you don't need many type conversions. For greater amounts of data it will be notably faster and much more memory efficient. Instead of defining you can convert tag stream into tag tree, take first node and convert it back to stream: 

Thus you get self documenting code and all of functions for free (for each field compiler generates accessor function with the same name). This also leads to more concise implementation of other functions: 

replaces letter by searching for another one positions away. I'll implement this literally by creating cycled alphabet and searching for letters in it. This is inefficient but allows to get taste of laziness. 

This kind of requirement is the kind of which clutters the code with at least one and is in general irrelevant. If you are okay to have a number in the filename (going from 1 to n), then why not having 0 ? After all, the requirement behind that is that no filename should be erased by another with the same name. So the real problem to resolve here is how to make sure this method won't create 2 files with the same name ? Since you stated 

The requirement is fulfilled. However how it is implemented is a code smell now. It's a good practice to have only one main constructor doing the fields assignments, the other constructor just calling the main one with other arguments: 

I also voluntarily removed the log statement. I'm not sure it really add any value when only logging "Create File". Either add more information such as where the file was created, with which name, etc. or get rid of it. In the end you could use these methods like this: 

Bill What does a need in order to compute a price ? A base charge and a distance. These two values must be provided in the bill constructor. The bill doesn't have to know about the . Then, the implementation becomes (note that I have made this class immutable): 

From that nice formula it is easy to see that the process of computing âˆš2 is iterative. You just need to decide what function to iterate. Let us consider this one: 

Snap catches all exceptions thrown within handlers and converts them into responses with HTTP 500 code. So error handling in your code is pretty fine (if you are ok with converting "postgres is down" or "invalid query" into HTTP 500 code). Side note 1: You are setting at the top of the handler. It is easy to forget to add/remove this code if you are modifying some part of handler that is actually writes response data. It may be more convenient to define helper function: 

is ok here, no need to make it faster. In functional programming functions are everywhere, even inside other functions and this is ok. Using ViewPatterns extension it is possible to rewrite as: 

( is the result of the last computation in GHCi.) There is a function in Prelude that captures such a process of applying some function to the result of applying that function to the .... and so ad infinitum. 

Writing instead of is not only a bit shorter, it also allows you to change/reorder fields in without updating . Btw, in my opinion, splitting in several lines adds more readability than rewriting it somehow. 

Meter I think this class totally useless since you only wrap an (for nothing ?) Don't you think it's a bit redundant to write instead of ? I would remove it. CarType As Tunaki said, I won't couple the distance into the , this has nothing to do with a . Don't you have the feeling when you compare , and that there's a lot of redundancy ? From my point of view, it's screaming for an enum since the only difference between all of that is the value of . I would refactor all of that into the following: 

I also suggest that you declare of type instead of so that it becomes unambiguous for anyone reading that the synchronisation in is guaranteed. 

Using LocalDateTime Since Java 8, there's a new API to use when you are using dates. I refactored the code to use this new API instead of the old one. 

Class is open to modification should be closed for modification, this is the OCP principle. If it's not, its behaviour can be altered (by inheritance for example) and can lead to an unpredictable behaviour which make it rather difficult to test and maintain. How to achieve that ? Mark . Executor never shutdowned Once started, the executor can never get shutdown, which causes the task to be run indefinitly. How to achieve that ? Create a method: 

Nice code: it is readable, well-structured, with consistent style, with self-explanatory function names and data types. 

The code seems a bit too verbose because of explicit search tree construction. It is possible to make it more concise by using list monad for building search space. Here is my attempt to rewrite it: 

You can read more about it here. And of course it is better to use instead of simple lists if the code is full of lookups. 

Note that in Haskell there is no single element tuple, so parentheses around are redundant ( but not ). 

Here is my attempt. It follows ideas from your code but uses function to update vectors. It is subject to fusion hence runs quite fast (test case #15 runs in 0.18s on hackerrank). The code is a bit ugly because of index juggling. Python version does not require this and is much cleaner. 

I switched arguments in because this allows to define function more concisely and it is also correlates with update/insert from : they have collection as a last argument. Now it is possible to skip directly to and implement it in couple of lines: 

Side note 2: Some libraries export functions with quite generic names (like or ), it is easier to read code when you have some explicit pointer about were function comes from. You can import library with alias: