Considering the default value of a boolean is , you are in danger of unexpectedly adding a query filter. IMHO you should use only nullable booleans in a filter like this. To me the default behavior when sending an "unconfigured" filter to this method -- e.g. without setting any property -- is that a query is constructed without a single clause. 

If you're certain that those checkboxes exist, you can do and then work with instead of doing repeatedly. 

is a warning sign to me that your design is probably flawed, and when I look at the context -- a list of questions and a separate list of answers -- I fear that your code has far worse issues than the reason for this question. 

Much of your message is also repeated in the various parts. Each of your contains ", you have a", each of your contains a ".". Those should be moved to the line that generates the message, perhaps something like this: 

But I fear your refactoring might need to widen its scope, because even if you apply this you still have an ugly or . 

"Backend" is a compound word and thus the correct capitalization should be "BackEnd". However, that would still be a fairly meaningless name for a class, even for a namespace. 

Note that this is basically example code, just to give you an idea in which direction to go. Once you start copy-pasting code, consider it a sign you're doing something wrong and you should move things to a separate method. The point is not so much to "shorten" code, but to avoid repeating/copy-pasting code blocks and to make it easier to maintain. By using this base class you can easily add another without having to copy-paste half a dozen lines and making some minor adjustments. Instead you add a new class and focus on the one important piece: the contents of the method. 

Note: the use of FUNC (not FUNCTION) is deliberate in development. This function is currently designed for use in both Rebol 2 and Rebol 3. Simple Diff in Rebol 

I don't think this works in Rebol 3, at least not without wrapping the function call in a CATCH block. As I understand it, you need to DO an error to trigger it. Coerce Output Type An /AS refinement might be a good way to do this, so long as the type is with the ANY-STRING! typeset. It'd be a close call as to whether /INTO or /AS would take precedence for output type: 

Are you just testing for these two types of function? Otherwise ANY-FUNCTION? would catch both. Throwing Errors 

I have a function that iterates through a block, tests each value against a given function and is placed in a block associated with the product of that function. 

Don't know how else to discern the initial string allocation, perhaps just start with zero? OUT might be a strange word for a value that is both input and output. I'd also allow a NONE! value here. 

I'm not certain about this, but I believe FOREACH is faster than WHILE. This seems like an inefficient way of expressing: 

I've taken a crack at implementing Simple Diff in Rebol (versions 2 and 3). Simple Diff works by finding the longest common sequence in two series, then recursively applies itself either side of this sequence until there is nothing further in common. It returns a block containing additions (), omissions () and matches (). Example: 

This change was greatly simplified because I had already moved away from the assumption of indices and instead got the index type from the collections associated type (implicitly). In other words, here is of the type rather than . With this strategy each sorting algorithm can be added separately with the type constraints it needs, and a user of this API would have access to only the sorting algorithms that are available for the type of collection they are using. At this point I don't see any value in the wrapping struct, since these algorithm could be added as extensions to the collection itself in the same way. This solutions also has a more convenient and more "swifty" call site syntax 

Other than the minor syntactical difference, this means that the type of is an associated type of the collection being enumerated. This has no benefit for arrays, but will be important if you want to be able to sort other collections. Secondly, since the loop body is only executed when the element at that is smaller than the element at the current I would possibly move the inner if-statement to a where clause: 

Finding the index of the smallest element I'll make two small syntactical changes to the code that finds the , partly to leverage Swift features but also to prepare the code to be generic (which I'll discuss later). First, I'd like to describe what this loop is doing as "iterating through the indices of the slice of elements starting from the current index". In code I'd translate that into: 

But Straight is even worse than and just is incomprehensible. What is ? Why do you need to execute each time -- it's not likely to change, now is it? suggests that is sorted, but there's no evidence of this being the case. This next bit looks a lot like a similar block in above and I'm wondering whether they shouldn't be the same. 

Is this really actual, working code? Also, you're not showing us ; I wouldn't be surprised if it doesn't need to be an "overloaded function with 6 type overloads". I also would expect a method called "Create" to return something, but that's open for debate. You could look into System.Convert and use that to convert the object to a value, but again: this depends on . I'd advise you to submit a new question and include those methods, and provide us with more background. 

What if the order changes? Also, this makes it hard to figure out which parameter is connected to which field. 

Though I have to say there's still too much repetition there and thus room for error, but I fear that's inevitable when you want to stick to s. I would also consider moving repeated logic like this: and . There's a lot of repetition there, which suggests it could be moved to a method, something like this: 

One solution would be to extend the native function to accept a argument corresponding to the object field. However, that would require an update to the language and might take a little while to be accepted. I've sketched out the following function that would take either a word (for the object field) or a block (an expression that is applied to the object): 

I'm looking for a more consise way to sort a block of objects. Where you can sort a block of blocks based on the numeric position of the values to compare, there's no such shorthand for comparing objects by a given field: 

Any thoughts on the approach, particularly economy? Or even the need for such a function... Obviously is lacking a descending/ascending switch—implied in future revision. 

For its argument, a or a is accepted—a is transformed into a function with a single argument . NB. applying before returning the block neatens the resultant block—for aesthetic purposes only. Review questions I have are: 

Originally this function was designed to work only on blocks, but since comparisons are done using the series API, I've permitted the use of strings and it seems to work. I'm looking for feedback on: 

It's not ideal—it iterates through the block pulling the respective value from each object and adding it to the block; sorts the block; and removes the value again. 

Background One of the projects I'm working on is an Intranet website which is a front-end for several kinds of data, each aimed at a different set of users. Access to the website is handled through ADFS; users are put into one or more Active Directory groups and it is this membership that determines what pages they get access to. The website was an afterthought to a larger project, and while usually we build Angular SPAs with an ASP.NET Web API back-end, it was decided that this should be a fairly simple ASP.NET MVC website. User management Managing Active Directory groups using the usual Windows tools is a rather cumbersome excperience, and thus we usually implement an Admin-only management page in our projects where we can easily search for users and add them to or remove them from the various Active Directory groups. We usually copy-paste these implementations and change the necessary variables (group names etc.), but that couldn't be done now since the front-end is in Angular (the code of the ASP.NET Web API back-end could largely be re-used). And thus I quickly whipped up a simple implementation in ASP.NET MVC. However, while it does work, I'm not happy with one part of the implementation. I suspect I'm not well-versed enough in ASP.NET MVC, and thus I'm hoping someone here might come up with a better solution. User 

This alternative works, if it's a style that you prefer. However, it's iterating the slice twice; once to find the element and once to find the index. To address that I'll use a to iterate over both the elements and the indices at the same time and find the minimum element-index-pair by comparing the elements. Since only the minimum index is needed to swap the elements I'll use tuple destructuring to only reference the once it's found. 

If you're following along step-by-step you'll notice that the of the enumerated array is now unused, so you can change it to only loop over the : 

You could consider creating a class that holds the indices for a larger amount of text (for example a paragraph or a section or a subsection in the text). That class would have the absolute index for where in the file it begins and relative indices within the paragraph/section each line begins. Whenever a new line is added or removed only the lines within that paragraph/section would have to be updated and the absolute start index of all the following sections as well. (I don't know what text you write or what you use the line starts for). You could still find a specific line very easily (and probably very fast) by enumerating the absolute indices of the paragraphs/sections and when you find the right section enumerate it's lines. 

I note that you keep the Excel file open and then parse one or more text files. Have you tried closing and opening the Excel file for each text file you parse? Also, have you considered other ways to open and edit Excel files besides Microsoft.Office.Interop, like OpenXml? 

You have an called : that's wrong, only interfaces can use the prefix. Instead I'd expect this class to have in its name at the start or the end (whatever is your preference). 

and aren't good names, not in the least because they contain the word "String". Wouldn't and be better? 

This wasn't tested, this was written in Notepad++. Look at it as an example of reusing code. (Also, what kind of front-end is this code for? ASP.NET WebForms? Isn't there a better way to bind a grid to data instead of looping through something?) 

... can be solved far more elegantly by implementing MVVM and using commands, both of which you should be doing anyway. I'd write an example using your code, but you've not given us much to work with (and I don't have the time right now anyway). Also, is a really bad name for a method. 

What are these, fields of properties? If they're fields they should be private; if they're properties they should have a getter/setter. 

is repeated more than a dozen times, so instead of copy-pasting it and changing one string variable, move it to a method.