As you notice it is better readable. From here there are two approaches how the code can be optimized further. Approach 1: IsValid-methods should be created. These kind of methods performs a validation. 

Script is terminated in the constructor The script should not be terminated in a random class but by an . The type of the exception decides wether the script has to be terminated. Commonly a leads to a termination. Possible Route class 

Recommendation Curly brackets are sometimes in same line as a method header and sometimes in the following For the sake of a good code-reading and understanding code should be structured. Write curly brackets either in the same line as the method header or in the following. 

You have broken the rule of three/five. Once you fix the destructor. You have a rule of three/five violation. Look it up. 

This is a ligitamate solution for a wide sub-set of tasks. But I don't think it applies to to your vector expample. As a user of a vector I would expect to be able to copy it. Solution two Take the time to create a copy. 

If I type 'fred' then this will enter an infinite loop (even if the user enters 10 next time around). Because the bit has been set and nothing will be read from the stream while this bit is set (its set because you are trying to read an int and you got fred (which is not an int)). Don't declare all your variables at the top of the function. 

Variable definition You sometimes define variables in camelCase and sometimes with underscores. I recommend to use one spelling type only. PHP If function is not part of a class consider developing a database class that handles it. Another option is to add a function to each of your Model classes. This makes your code easier to read. For more details check mvc pattern. In the function you establish a new database connection with each call. You can avoid it by promoting the function to a proper class and define a global attribute holding your database connection. JS In your javascript you have html code. I recommend to either load it with rest of the dom and hide it by default or load it using ajax. I personally compare it with inline css. HTML In html form you have an attribute . It should be in a javascript file. I compare it with inline css as well. "QUOTES" Also see CodeX answer. As tim mentioned and other variables not provided by yourself have to be validated and parsed by htmlspecialchars e.g. to avoid XSS. A bit about security I've added this section due to mentioned XSS. Security is a very complex topic and must not be underestimated. There are a lot of options to implement and grant security. What kind of options you choose depends on your time/budget but also kind of project and data that are going to be stored in your database. I kindly ask you to think wise about the data that will be saved in the database and make researches about proper security measures. There are a lot of PHP Frameworks. I recommend to take a look into some of them as those provide security standards. 

Prefer not to use instead of . It has no major benefits and can slow code down dramatically. If you want to guarantee a flush print the whole structure first then use instad of the last '\n'. 

There are much better ones out there. I think you will find you get more clashes than you think from a standard corpus of text. 

Why not use a std::vector? You can still pass it as an array pointer by taking the address of the first argument. 

So chances of a 1 are: 1/6554 while chances of a 9 are 1/6553 To compensate for this you should reject values greater or equal than . 

Not every method has a self-describing name : What does it return? Object Length, Current Line Length, ...? I recommend to rename the method to what it does - . 

You include an autoloader in the test class. From UnitTests I am aware of a bootstrap file. If such a class exists/can be registered for functional tests as well you should move it to a respective file. 

There are multiple returns in one method This makes the code less maintainable. Having more than one return means there are multiple scenarios when the method can be stopped. In case of a bug one need to debug through the whole method to figure out the return-point. 

Doing it this way, makes the compiler generate the actual numbers (so there is no chance that somebody accidentally puts two identical numbers into the list). Also if you change your signature to use the enum people can not accidentally pass an integer, as the compiler will spot that and force them to use the correct type. A base class with virtual members. Must usually have a virtual destructor. 

To Clarify because of comments: I suspect for most compilers the cost of std::unique_ptr will be zero at runtime. But it is something worth validating with your compiler before assuming. Access from derived types. Personally I would not give direct access to the vector from derived class like that. 

Description: This section describes missing setter, multiple returns and if-conditions. In the constructor of the class Route are multiple returns. This makes the code less maintainable. Having more than one return means there are multiple scenarios when the constructor can be stopped. In case of a bug one need to debug through the whole method to figure out the return-point. So, at this point a switch to if-else-if-else should be performed. Below you see a minimalistic sample. 

In general your code is a good start. Keep going :) However the class should be refactored. Issuelist: 

As others mentioned the code is not completly OOP. A real OOP application does not contain functions but classes and methods. Well, except of the file that includes the class that initialize the application and the autoloader function - AFAIK function expects a function only. The autoloading part is missing as well which is part of dependency injection. I recommend to get into it. In the constructor of class User you do not validate the email etc. that are stored in the session. They should be a) passed as arguments to the constructor and b) validated. E.g. in the method. Another point is the php closing. To avoid errors never close php. It's hard to figure out a space or another character after php-closing. 

If it compiles I am not sure what is happening. But it is definitely not good. In the constructor you should prefer initializer list. 

Insert Your lock is over too large a surface area. You lock the queue even while you are working on and this is not used by the reader thread. The reader thread could be actively using the queue while you play with the word count object. You should also look into using RAII to correctly lock and unlock your lock. You read loop is a busy loop. You are going to melt the processor doing this. It would be better to use a condition variable and force the thread to sleep if the queue is empty (which it will be most of the time). Lastly you overcomplicated the addition. 

There are both empty methods and methods that return always true : When a method body is empty it usually means you have not implemented its logic yet. It is possible that one forget to include its logic but calls the method which can leads to a difficult to identify bug at a later time. Therefor I recommend to throw an with message . , : Why does this method returns true/false anytime? Does it switches tags on/off? , : These methods rather append, do they? Or does this word describes appending as well? 

PHP-tags are closed It is not recommend to close the PHP-tag. It can happen that you have an empty space after the closed PHP-tag which leads to error. Not closing them reduces headaches :)