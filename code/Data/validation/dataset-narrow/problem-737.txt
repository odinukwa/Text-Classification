Depends on what you want. Typically programming challenges are not validated on clean code. But on correctness and efficiency. 

In this case you just want your input to be an integer (or a long). So using the regex is one idea. But you should also consider malicious users. What if you try 

Don't do a lot of work in the constructor This is a bad programming practice in general. Because just creating instances can already take a lot of time. I would prefer an method instead. Or put the work you are doing in the constructor, in the method. Which can call a or something. Prune entire BFS iterations If you hold a maximum radius for each node while visiting. You can determine at start that a certain node will not decrease the radius. When it is already visited with a higher or equal radius. 

All that is left to is checking if all bits in the mask are set to true by the current player. This is very easy using the bitwise -operator. Example: 

For readability I would recommend create a instead of working with . Typos are sometimes difficult to track. 

I am writing a new web service that will be performing a lot of large data load operations. To do so I am moving the data to a temporary table then merging the data in to the live data via a stored procedure. That part I have down and working and am very confident in. What I am doing now is trying to optimize the loading code to help take the load off of the IIS server that will be performing these operations. Here is what I am currently doing synchronously and works fine. 

I have a class that I inherited from someone else. It is doing a P/Invoke on CopyFileEx to copy a file (we are using UNC shares if that matters). The code is marked but I thought you only needed to use that when dealing with raw pointers, if you are using only your code does not need to be marked unsafe. 

With the suggestions from svick and some other tweaks I made while waiting for an answer here is the final version 

I think the is not needed but the person who wrote this originally claims he was getting intermittent errors during run-time when in production environments when it was not marked unsafe. Was he right about needing or did he have a problem elsewhere that was just fixed at the same time that made it look like fixed the issue? 

First of all, I support @EBrown about whitespace and braces. Some other ideas depending on what you are doing: 

You are having a lot of duplicate code, parsing numbers. Check out the class which has these methods builtin. $URL$ Remark: When efficiency is important, may be a lot slower than . In this case I still recommend putting the one time effort of creating your own custom read methods. 

=> All bits in mask are set to true REMARK: Instead of looping, you could hardcode all row and column masks. Which are still only 8 masks. If you understand this, you should also be able to understand how to 

Consider using an field instead of . You are using a lot of hashing, which causes overhead on a String. 

You are looping over all intervals. This means you have to check all intervals with each other. Hence complexity: This is a well known problem, you could find a lot of reading about this online if you want. 

So we only need to work with the first 9 bits of an integer: To check if winning we can use the following masks: 

List of major edits in PainterField module: 1) Removed useless import from beginning (main module doesn’t directly use custom classes). 2) Iteration over dictionary elements: Had a lot of (see ): 

You can also use dictionary to prepare questions and then simply ask them in some order (random in this case): 

5) Try to organise code in general: - Defined functions are in random order. Use alphabetic. It will be easier to find and edit each. - Constants are everywhere. Constants block are in non-clear order. And they are somewhat mixed with code. Define them at the place they are needed if possible. If used in many situations, place somewhere at the beginning or use separate module just for the constants and functions. Edit: If you don’t want to introduce classes you should probably stick with elif statements. You can try to modify global variables, but very carefully since they can mess code logic easily and usually this a bad practice to use many global variables: 

You can use this as template and modify code a bit to add bonus check or just enclose part of loop in another function which will be called in main loop. Plus with minor edit you can import questions and answers from text file. 

The part I am not sure of my self about is that section. I thought it would be good to start opening the connection and creating the temporary table while I populate the bulk copy column mappings, and I have used async/await many times before but this is the first time I have used in conjunction with the async/await syntax. Did I do it correctly, or should that be ? I still do not exactly understand when I should be using . EDIT: Ok, is not listed so I could not use it even if I wanted to, but if anyone wants to include a explanation in their answer of when I should I would appreciate it. (P.S. Do not worry about SQL injection from the strings being passed in are hard-coded resource strings with no user input.) 

I need to lock on my AesManaged instance to call CreateDecryptor() however the CreateDecryptor() method is not thread safe and this function could be called by multiple threads. Is this the correct way to create a disposable object while needing to use a lock on the parent creating the object?