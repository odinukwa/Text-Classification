Usage: Unit Test I used a simple "Tile" class that you can see the properties of in their initializers. Downfall #2: If you use that PredicateBuilder function on a type that doesn't implement some of the operators it will throw an exception. (e.g. string and '>=', '<', etc). 

This way on first use it'll cache the list and then from there on out you will have the list already loaded. This way if you were to ever change what is white-listed or want to use this in another project it's already setup to be re-configured. Pointless variables In many locations you have something like this: where you don't actually need the variable. The places validTag and tag are used are as follows: 

Constructor Adding the ability to give or of items in a constructor could be really helpful, especially if you have your set operations return new sets as suggested above. 

You do a and when setting the text for all of these similar functions. I'd recommend creating a method extension like this, 

Magic String/Lists Personally I'd reduce away those lists of strings that're really just configuration settings. e.g. could become something like this: 

Disclaimer I just want to start by saying I don't recommend doing this and you should go with unholysampler's answer (or your current solution; You're not saving much code there). I'm posting this possibility to show you what could be and why you shouldn't do it. I was once in a similar place to you and thought it would be great to do something like this, but it was not worth the time or effort (though it was a nice learning experience). "Solution" Okay, so you can technically make a function where you build the expression from a property selector, operator (enum), and value you're comparing to. Downfall #1: Using this method, you'll see that you're just moving the switch-statement you're trying to get rid of. So if your goal is to reduce the number of lines of code this won't help. NOTE: This was written in a unit test class. 

Note: Don't use this exact code, as it's been a while since I've done any javascript so I probably missed something. I just wanted you to get the idea, anonymous/inline functions can be great, but if over-used they quickly become hard to read. 

The name tells me absolutely nothing about why it is taking an object and what it is doing. Yes, it tells me it is doing something with time, but what? Try narrowing your names to something more specific (Yes, this can be very difficult at times, but 2+ weeks from now if you look at this code again it will be worth it). A suitable replacement for might be perhaps? I don't claim to be the best at naming; the point is to describe your functions/variables as best as possible. If you're using generic names and the code isn't generic, you should look for a better name. 

Other Actions The only other thing I see is that the following code is repeated in many of your actions. 

Spelling This isn't that big of a deal but it was the first thing I noticed, Address has two d's. The reason this doesn't matter that much is that you're consistent; however, it might confuse someone having it spelt wrong so take that into consideration. There are very handy tools in visual studio for renaming variables. Repetition Your is very repetitive. Personally, I would have wrote it like this to avoid large repeated chucks of code; however, sometimes simple is better than not repeating yourself. 

One Problem Your for-loop wants to use the variable later in the call. That call specifically wants the whole model, so if it's possible why not just have store the whole model? As it stands its purpose is to store data, so have is store all the data it could need then that should reduce the amount of code directly inside your for-loop. I hope you find these suggestions helpful. 

The way you're using regions implies a lack of inheritance. You could simply pull each section into a separate class and apply inheritance appropriately. Make a navigation class to contain the code inside your navigation region then just add a property to your . I assume there is some code that will apply to all pages in your selenium framework? Navigation and Page initialization for instance. Make a or class that all of those pages inherit from so you can share code between them. Doing this should remove your need for regions. The only time you need regions is if you're using them in place of inheritance or your class is just that big (which is still sometimes due to a lack of inheritance). Testing 

All this does is make it to where you have to type less, there will be some cases where you won't want to do this. I feel like the best way to know is experience :) Doing something like this might make your code a bit more concise (and therefore readable) since you don't have to create a new ServiceResponse multiple times a function as you are doing now, which is multiple lines of code. Hope these tips help or give you some of your own ideas! 

Always use brackets. Even if the statement afterward is a one-liner just use them, it'll prevent a rookie mistake in the future. Secondly, if you insist on not using brackets, be consistent. You have an if-statement with brackets and the else-statement doesn't. Curley bracket placement. The standard for C# is placing brackets on their own line. You have spots where you do this, but you also have spots where you place the opening curley bracket on the same line as the if-statement. 

Conclusion: There's a lot here, and some of it may not entirely apply in your case, but with a grain of salt (I sound like a broken record) I hope this will help you. 

Another inconsistency is your use of . This implicitly determines at compile-time what the type is, so if your code is obvious what it is returning (e.g. or ) then I would recommend using it. Unused Code 

Functions Make and parameters and turn the contents of your into it's own function so that you may call it again. That'll instantly reduce the code in half. Then you'd just call and . Redundancy Your event is calling code identical to your function. Just call . Parameterizing it in a similar fashion to the above example will allow you to do so. 

Background/Intro: I've been using (and refining) this setup for all of my MVC applications I've been doing at work and now that I think I've worked out all the kinks I see in the 'architecture' I was wondering if there was anything anyone else saw that could be improved. I have a few concerns but I'm generally open to any/all suggestions. Concerns 

Ternary Operator The operator could become very helpful to you as it allows you to inline an if-statement. Microsoft Documentation. For example, 

This is my 1st F# program so I'm open to any and all criticism on my syntax and the way I approached the problem. Challenge Project Euler 16: Power Digit Sum 2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of the number 2^1000? 

Inconsistency I noticed that in the first part of your program you use a statement for handling but then in the you used an if-statement. The switch statement is a nice use in this case since you're comparing the same variable and you could end up adding more values later. var You can use the keyword instead of typing the variables type twice (e.g. can become . This is mostly preference, but you can imagine how convenient this will be. It has no effect on performance, the compiler is just deducing the type at compile-time. Conclusion That's all the nit-picking I could manage, haha. Overall, your code looks pretty good, especially for a beginner!