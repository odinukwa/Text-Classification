The same is also true for input strings. For example, nobody will be able to remember . Code length Your main class is way too big. A first step to fixing this would be to extract duplicate code. For example, you have this very often: 

I don't have all that many complaints (other people didn't seem to have many either), so just a couple of small points. I generally like your code. Your styling is clean and (mostly) consistent, and your variable/function naming is mostly good, which both really helps readability. There also do not seem to be any major errors or antipatterns in your code. Security 

Not a full review, just a couple of things I noticed: Security All of your queries are vulnerable to SQL Injection. You should use either mysqli_ or PDO with prepared statements. Your setRecord script is also vulnerable to reflected XSS ( where n is user supplied). Your code is also vulnerable to CSRF and stored XSS. Structure Your PHP file contains HTML code, CSS code, and PHP code. This is definitely too much. Personally, I would separate it as much as possible. The first thing I would do is put the CSS info in its own file. Then, I would introduce functions; for example , , , etc. This makes your code reusable, more readable, and means that you can get rid of most of your comments. You should also introduce functions for duplicate code. For example, instead of this: you might have 

[again, those names are just placeholders, I'm sure you can come up with better once.] I actually think that your code is more readable, but if you plan on extending your field, this might be more adaptable (although if you do plan on extending the code, I would really go with a matrix). By the way, tic tac toe is a solved game, so you could hardcode these rules to make a perfect AI. That's of course a bit boring. If you are interested in AI, you should take a look at the min-max / alpha beta pruning algorithm. 

There is a lot in this code that doesn't follow general conventions, and it honestly is quite hard to read. But if you follow some of the points below, I think it shouldn't be too hard to make it a lot better quickly. Formating Your formating makes your code quite hard to read. Especially your indentation and your use of spaces (or lack thereof). If you paste your code in any IDE, it will fix this for you (for example, in Netbeans just press ). It is also not common practice to declare multiple variables on one line. It makes it easy to overlook a variable. It also makes it easy (as in your case) to declare way too many variables (at the wrong level), because it doesn't look like that much. Naming Variable names should give a reader a good idea what a variable does. But I wouldn't know what the difference between and or , , , and is without looking deep into your code. Also, try to avoid short variable names, especially at a class level (, , , , , , , , , , and so on). But also for method parameters (, ) and inside methods (, , , ) expressive variable names can go a long way to make code readable. If it is a technical term, short(ish) variable names might be ok (as for example ), but I would add a comment, for people who are not that deep into the matter. The same goes for method names. and are not all that clear (at least to me). If they are technical terms, write a comment for the method. Also, it is customary to use camelCase in Java, not underscores ( -> ), and variables should start with a lowercase letter ( -> ). Fields You have way too many fields (class level variables) for such a small class. Try to make the scope of a variable as small as possible. For example, the Command fields are really only used in (as are a lot of other fields). , , , , , are further example of variables that should not be declared at a class level, but right where you need them. And loop variables should be declared inside the loop: , not at a class level. Overly long method is way too long, and thus makes it very hard to read. First of all, create new methods for each command (so you have an , an and action (although don't name them that, I am just unsure what is), and so on). Then, create new methods for taxable and non-taxable pgs. Also, try to separate the parsing of input and the outputing of data from the calculation. They are different things and should not happen in the same method. Magic Numbers Don't hardcode numbers, store them in a static final field. That way, you can give them a nice name, and you can reuse them (for example, appears more than once. But I wouldn't know if this is accidental, or if it the same meaning behind the ). Command I don't have the class, but right now, you are just creating instances of it to compare it to the input. Instead, I would store them somewhere (for example as static final fields in the class). Classes Your current class does everything. It builds the GUI, it performs the tax calculation, etc. Try to create more classes, each for its specific purpose. 

First of all, I would remove the call to . There is really no reason to regenerate the session id each time you check the useragent. If you want to bind a session to a user agent*, the best place would probably be (and then you could destroy the session and return the empty string if it doesn't match). But then it's important to not use the stored user agent from the class - because this will always match - but to store the useragent in the database when first creating the session, and to then compare the current useragent against that stored value. 

This will always throw an exception, the first value should be . Unnecessary Variable This code is confusing: 

You are doing a lot of things right. You are using a whitelist instead of a blacklist for extensions, you are using pathinfo to get the extension, you clean nullbytes (optional, but still good practice), you use basename in the filename (also optional), you have a strict whitelist for filenames (theoretically), you use a good content type, and so on. There is one issue, and two small suggestions: 

test_input I see this function quite often, and I would not recommend using it. It just applies some rather random functions to the input which may or may not be appropriate. I went into this a little more in-depth here, but the gist of is is this: 

Long Method Your method is too long, too nested, and does too much. First, I would extract methods such as: (which can include all the code inside the outside while loop), , / (I'm just guessing about the names; they could accept a , so you wouldn't loose any performance by creating additional ones), and . Splitting up the code to different methods doesn't only help with readability, but will also help you identify bottlenecks by profiling the code, and thus tell you where you actually need to improve performance. Lots of Null checks You check if null is returned a lot, and your logic seems to depend on null a bit too much; see for example or . What is the expected result here? Is the data store set to null if the document should not be deleted? This would not seem like a very good system (better to have a delete boolean in there for that). Or is this just error checking in case the data store is null, which it never actually should be? In that case, I would handle it like an error (throw an exception). Naming 

I'm not even sure why you have the debug statement in there, it shouldn't be needed, and it will add a lot of unnecessary overhead in production. If you want to know if calcPressure works correctly, it's not going to help, you would need automated tests for that. And if you just want to see if something is calculated, you would see that in the view anyways. 

Same goes for the other query (the added benefit is that this way, you don't need because the SQL code and the PHP code are already separated). Escaping Variable Part of Output I would also sanitize all variable data when echoing it to the user. Right now, anybody who can create posts can include arbitrary javascript via . This might actually be ok, but still, to be save I would write it like this: 

populateAddressVars Right now, is set twice: once if exists, and then you override it when exists. I'm assuming that this means that you want to set it to if it exists, but if it does not, would be fine as well. For this to work, you are relying on the structure of the json file (that always appears before ), which you shouldn't do, as it is out of your control. For the other cases, I would use instead of to gain a slight performance increase and reduced complexity, as it doesn't seem that they can happen at the same time (for elements such as this would not be the case). Return early You are already using early returns a number of times, you should use it in as well: 

Security XSS You might want to consider HTML encoding the database values such as product name, description, price, etc. It may or may not be needed currently, but generally, you might want more than one type of user in the future. You may have a site admin, a sales manager, data entry people who add new products, and so on. If you do not encode these values, less privileged users could escalate their privileges via XSS. CSRF You also do not have any CSRF protection. This means that an attacker can add products if a logged in user with the right to add products visits an attacker-controlled website. As you are also open to XSS, an attacker can gain XSS via adding products. SQL Injection Escaping is really not the preferred way to defend against SQL Injection. It's certainly a lot better than nothing, and if used correctly will be secure, but in practice, prepared statements result in better and more secure code and are really the only correct way to handle SQL Injections. Structure Your code is generally quite readable, but it would be even more readable if you would separate code into classes and functions. This would also make adding new functionality a lot easier For later exercises, you might want to look into MVC. But even for a small example script, you might want to at least separate the database connection , so in case the credentials change, you do not have to change them all over the place, but just in one configuration file. Functions would help make your code even more readable. You might consider functions such as , , , etc. You might also consider extracting those methods in a separate class (or a class for the database interactions, and a class for the displaying functions). Misc 

Single Responsibility definitely does way too much. The name already hints at this: Whenever you can't think of a fitting name, you are likely in violation of single responsibility. Your class: 

Yes, I think specifying it is better. It is more readable, and if you change your DB layout later, you don't load columns you might not even need. 

This is indeed quite messy. It's really hard to see which else ends which if. Just invert the and return early: 

Decoupling: your content is decoupled from the actual HTML. If HTML ever changes, you only have to change your class, and all the code that uses it continues to be correct. You could also easily print your content in a different format than HTML (well, maybe not easily, but it would certainly be possible). Fast to Use: it might be faster to use than writing HTML yourself. Minify: it can produce already minified HTML. Correctness: You can verify that all HTML is correct (no missing closing tags, etc). 

As @Mat's Mug already suggested, your code is open to SQL injection, which makes it possible to read out any database values (and also may make it possible to execute commands, write and read files, etc). Casting the value to int somewhere may prevent SQL injection in this situation, but you will eventually make a mistake and be vulnerable. It is impossible to always be sure that each value is already cast/filtered in some way when this happens somewhere else. You really need to use prepared statements. You are also vulnerable to XSS via email. Also: