This is a great question because the actual relay state may differ from its nominal state. Feedback is critical, since actuators are physical objects that die over time. It is well worth the effort to add a way to sense the actual actuator state. For example, if the relay engages a pump, add a vibration sensor or sound sensor to determine if "everything is working as expected." Such a sensor will detect pump failure as well as relay failure. For robust system design, add a sensor for each actuator. Open loop systems (i.e., blind actuators) do work but are maddening when they fail (e.g., "We lost the entire crop because we thought the relay was on"). Simple actuators (e.g. light switch) can be exceptions because the operator can usually deduce their non-operation and repair as necessary. 

Given the lack of answers at this stage, my hypothesis is that your MicroSD card has shot itself in the head and is now a zombie. Think WestWorld and try again with a new MicroSD, perhaps not 149 times. 

Powering the Raspberry Pi can be challenging for high current draws: 1) use a powered USB hub (but do you really need all those USB ports?) 2) use a wall wart that provides the current you need (but why are these so expensive and hard to find in the current you need?) 3) use a DC-DC buck converter to convert a higher voltage (e.g., 12V) to 5.2V and feed that in thru GPIO 5V/GND. (lots of these cheap on Amazon). I've done all three and settled on #3 because it lets you do things like hook your Pi up to a car battery and solar. 

On a single line, you will see two IP adresses. The first IP address is the IPv4 address. The second one on the right is the IPv6 address. IPv6 is longer and was introduced so that we could internet the galaxy. IPv4 is shorter and still in use. IPv4 remains more practical for humans because of its brevity. 

The problem lies in a lack of diagnosis tools. Relays require current and voltage. Arduino relays switch on 5V. Raspberry Pi relays switch on 3V. Use a multimeter to measure current and voltage at the TRG input. Compare your successful measurements with the code-driven measurements. Even if your circuit is nominally producing the right voltage, it could be requiring more current than your setup can supply. For example, if your Raspberry Pi is powered by a USB cable at 500mA, that may not enough to trigger all that circuitry. The fix in that case would be to use a powered USB hub or dedicated power supply for the Pi. If the blue relays are not switching, then the fix is to replace them with a Raspberry Pi relay such as AdaFruit FeatherWing non-latching relay or Pimoroni Automation Hat. In general, Arduino relays don't work well with Raspberry Pi. When my code doesn't work, I double check with a multimeter. 

When implementing projects that affect the public, be very careful about protecting privacy. For example, the problem statement requires "photo sent back to her phone", which implies that she divulge her phone number to your project. Ick. Stalker cam. But there's another way that might help you interact with the public. A less invasive way of providing "you are here" feedback would be to use the Pi to take a picture and upload that to a website that they can view on their phone. You can show your website right next to the camera and print the URL for all to see. This protects the privacy of their phone while engaging them to interact with your camera. 

Most of us write and test our code as user "pi". At startup the Pi is running as "root" with a completely different environment and directory. I found it helpful to use "sudo -u pi ..." in my startup scripts to switch to the pi user as needed. Here's an example: $URL$ Note also the explicit cd into the desired directory. Yours will be different. 

Steppers are typically driven by stepper driver boards such as the TMC2208. Microcontrollers such as Arduino or Raspberry Pi send pulses to the stepper driver boards to turn the stepper motor. I assume you have already acquired a motor hat or such. For smoothness, it is ideal to have well behaved acceleration curves for the pulse train sent to a robotic arm so that it doesn't spaz itself to death. However, for peristaltic pumps, you would not need to worry about such curves since you can spread the motion out over time to reduce jerkiness. In fact, lowering the frequency of pulses will give you better torque (stepper torque disappears with speed). Therefore, all you would need is to send the computed number of pulses in a steady slow stream, where "slow" is a compromise between what works and your patience. If there is a need to send a pulse train instead of a single pulse for each 1.8 degrees of motion, reconfigure your stepper board for microstepping (e.g., 256 microsteps). Then send K*256 pulses for each K*1.8 degrees of motion (provided 256 is your microstep factor). 

I just want to add to the above that sometimes the auto-startx line can be found in especially when dealing with touchscreen images obtained from vendors. I once was trying to disable startx and did not think of it being here. The line will before . Just change the "pi" in that line to your new username and reboot! 

I cannot see anything wrong with the syntax there. Any ideas? UPDATE: I tried suggestion in comments bellow to to switch both but that gave the same error. Any Ideas? 

You could use and . I have never done much with bluetooth but I don't believe you need much more to get a basic connection. To get this running at boot, put the line with the path to the script in with a & to fork it to the background, e.g 

I saw a tutorial here that shows wiring a button without a resistor. I have heard that this is bad if you set the pin as an output by mistake and press the button because it shorts the pin to ground. Besides that issue, can this be done with multiple buttons as long as I make sure to code it correctly? I read somewhere else that this only works with the I2C pins and thus can only work with a maximum of 2 buttons. I am working with a Raspberry Pi b+, but I also have a Pi 3 available. 

I just got this touchscreen that you attach to the gpio. It comes with a special image for the Rpi 2 under a red link called "Materials for the latest raspberry pi 2". In that zip is an *.img file. Now my question is how do I set this screen up assuming I can ssh into the pi or use an hdmi screen. Does this replace the operating system? 

But ffmpeg returns an error saying that I must select at least one output source. How can I fix this to recognize that it is supposed to pipe it to the pifm program? 

After a reboot this script works fine. However after an arbitrary number of runs it stops turning the backlight on or off. However if I the file, the number has changed...the screen is just not turning off. A reboot fixes the problem but then it starts happening again. Any ideas why this is not working? EDIT I also have this line in so I don't have to use sudo. Without this file and line I cannot echo to the bl_power file even with sudo. 

Apparently this can only be run on a Pi Zero because of a certain feature that is only on that board: 

Even if you do not want a user interface for turning it off as @Ghanima was saying but just want to unplug the cord you could make a bash script that executes when a power failure is detected(assuming you followed @Phil B. idea of using an RC circuit). Here is an example of a hardware detection system. One of your gpio pins would be connected to the "power fail signal" wire as input. If it went high the bash script would halt the Pi(I have not personally and be careful not to fry GPIO). 

From what I have seen and heard in multiple places, this is most probably a problem with your supply. Many times as you were saying the description of the adapter is not the same as what it actually outputs because of faulty hardware. I do not know which model you have but many of the models need at least around 700ma so there is not much room for error there. I would highly suggest getting a solid high amp adapter for the Pi which you will want in any case for other power hungry projects. 

I am sure the paths I have a real files and I know that because it works perfectly from terminal. For some reason the call method is not liking this line. I tried all sorts of combinations of quotes to make it know which were the paths, etc but I have not been able to get it to work. From Python I am calling it like this: where $ is the above command. If I change those quotes to single quotes it gives a syntax error: 

To turn the backlight off through software you could follow this tutorial by adding (see tutorial for full setup). This would be put in the if clause above right after . This would make the screen turn off at the same time that it blanks out. To turn it back on you would put the line in the function above in the file right after . 

I have my raspberry pi connected to my router and a laptop also connected to the router. I can SSH to the pi from the laptop perfectly. However, when I try to install something it says "". When I try to ping google I get a 100% packet loss rate. My Ethernet light is blinking as if data were being transmitted though and when I run i get a message saying its already configured. My file has my router's ip as a nameserver and my interfaces file is set up for . shows my eth0 with an IP of 192.168.0.9. This is a fresh install of Minibian(basically Rasbian but without extra features.) I also tried it with Rasbian and had the same issue. What could the issue be?