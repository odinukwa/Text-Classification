Are you talking about layer 3 traffic for vlan interfaces that can be seen with 'show interfaces vlan.### extensive', if your trying to find it per vlan in total including layer 2 traffic that's not a capability of the device. The only ways to find the layer 2 traffic rates would be to write a script gathering the interfaces that are in a specific vlan, parse the output for rates and then add them together or in a monitoring application create a view that has the all the interfaces in a vlan and show you the throughput of them, or with SFLOW you could have the device send you the stats and again parse the data somehow to add them together, but this again would mainly layer 3 data (it'll show you inter-vlan communication rates as well though at least). 

If you take this information, and map out what the switches are doing at each step, you would end up with MAC address table as below for each switch: 

And now, we can finally answer your question fully: The Pre-Shared-Key is combined using a PRF with Nonces, and a bunch of other values known to anyone else in the negotiation. The result is a value that can only be mutually attained by two parties if both parties started with the same values -- aka, the same pre-shared-key. The resulting value is what is shared on the wire, with allows two parties to verify they have matching Pre-Shared-Keys without actually exposing any information about the Pre-Shared-Key itself. Main Mode goes a step more secure by also encrypting the exchange of the "resulting value" described above, making it even more difficult to extract any useful information about what the Pre-Shared-Key was. 

You can either choose to turn on ICS or do the following: Go to Start and search on cmd or command. Right click on either cmd or command then select Run as administrator. At the command prompt type regedit. Navigate to the HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\ Services\Tcpip\Parameters\IPEnableRouter setting, right click and select Modify 

The active/active cluster allows you to split traffic into groups so the A node handles traffic for some networks while the B node handles traffic for the others, in the event of a failover the stable unit will handle traffic for both A&B traffic groups (assigned on a per context basis). Active/Standby cluster handle all traffic on a single node while the other is brought into use only in the event of a failure. This is generally used when you're going to have more traffic than a single node can handle, if one of the units fails, instead of stopping all traffic destined to the failed ASA it will run in a degraded state until it is replaced. So essentially you're stretching you're hardware and actually utilizing it taking the risk of degradation if there's a failure instead of paying for a standby unit that essentially never sees any traffic pass through. Edit: Forgot to clarify active/active is only available for multi-context mode since it would serve no purpose otherwise since you couldn't create the groups 

Notice we don't need the cable to cross the wires for us. What the PC sends on its TX wire is received by the switch on its RX wire, when then transmits on its TX wire and is then received by the other PC's RX wire. Therefore, when a Switch is connected to a PC, it can simply use a straight through cable (one that doesn't introduce an additional crossing of the wires). PC to Switch to Switch to PC What then happens if we have two switches in the mix? They each "cross" the wire once, therefore two PC's connected through to switches would have the switch's crossing effect negated. Unless of course, we introduce another pair crossing in between the switches: 

Return Path vs Reverse Path are the same thing, as far as I know. But maybe someone else will have an answer that says otherwise. 

Change what ever rule hit you want to send email to the specified level you want emails sent out this may require you to create a separate access rule if you only want it when it's specific traffic. Change the severity for the new specific rule's severity level and set the email alert configuration to that. Edit for configuration. it would look something like this: 

So before the explanation you could configure a separate OSPF area (or possibly the second ospf process) that is purely for the DMVPN, that way the hub is the DR for that OSPF instance, you can initially make the cost higher to go over the DMVPN than adjust the cost when you're ready to cutover. Another solution could be to run EIGRP over the DMVPN instead since it's all Cisco equipment you don't really have to worry about interoperability, but seeing how you already run OSPF in your LAN you're probably much more comfortable and experienced with it. The only other option (I'm aware of at least) would be to a dual hub topology which may break some things since you you already have L2L tunnels to each site on one of the hubs, I've never had to attempt to configure this in tandem though so I'm unsure what the result would be. You may want to do this after the fact though anyways in order to have some redundancy should the DR go down. The reason that this needs to be configured this way is because the hub is what creates the NHRP mappings in between all the sites, with the nhrp multicast map each site sends it's updates to the hub and the hub then forwards it onto all the other spokes. The spokes learn of the routes in the NHRP 'cloud' but since the DR isn't part of that topology it has no way of sending updates through NHRP since the BDR doesn't send out updates until it becomes the DR, with no way to forward the updates there is no way to propagate the information needed for the spoke-to-spoke tunnels. Furthermore the spoke routers cannot form an adjacency with the DR making it since as defined in the RFC 2328 'On broadcast and NBMA networks, all routers become adjacent to both the designated router and the backup designated router' Reference Sec. 10.4 Let me know if this helps or if you have any more questions! 

It does indeed seem that the problem is on your Openswan server. These lines from the output of your ASA indicates the Firewall has never received any packets through the VPN: 

Then the iRule would look for an an HTTP Cookie of using the HTTP::cookie command. Then an or statement matching which would assign the session to a particular web server using the node command. 

My question Is there a reason for the switching of the Source and Destination in the L2 headers? If so, what is the reason? 

Absolutely correct. Since Router3 doesn't know the full path, only the next hop, it would just forward the packet to Router2 

Almost. You are correct in saying that Router 3 will send an ICMP Redirect to PC0, informing PC0 that the proper 'next-hop' to get to PC1 is to use Router1. However, when the ICMP Redirect is sent to the original sender, the original packet is still forwarded. Which means when Router1 receives the original packet, it will be receiving a packet from a host in its own network, for which a better next-hop exists, also in the same network (Router0). So Router1 will also send an ICMP redirect from the first packet. So the path of the first packet will actually go Router3 -> Router1 -> Router0 -> PC1. But both Router3 and Router1 will send PC0 an ICMP Redirect informing PC0 of the better next hop. Since Router1's ICMP redirect will come after Router3's, then Router1's ICMP redirect will overwrite Router3's. So the second packet will go PC0 -> Router0 -> PC1. 

Then on the Sophos box NAT your protected subnets to the 192.168.26.50 address when destined to the 192.168.71.0/24 network. Let me know if you have any issues with that or if you need more help. 

Somehow STP got enabled on those two, which is strange because it's disabled by default... To resolve, whether you configured this or not do one of these: Disable spanning-tree on the bridge group ( bridge-group # spanning-disable), turn off BPDUGuard on these ports, also since technically an AP is a switch or make sure the 'bridge protocol ieee' isn't on the bridge group of the 2 as well. 

It can be done but it's not really recommended. You just have to make sure your server has a scope for that network so it knows which pool to use when it reads the relay stamp and configure the helper on the local router (don't configure multiple devices with helpers, it's a really common mistake to see). Best practices rant: When possible you should do DHCP as close to the originating network as possible, if a WAN link goes down they're not going to be able to access any of the information locally. If the .200s site link goes down any sites relying on that server have lost access to every thing until you go around and statically configure addresses on devices that need it. Typically you'd use helper if you have multiple subnets at the same site (or layer 3 boundaries? I can't tell exactly what's going on in your screenshot, it's small and my eyes are strained currently) 

RFC3810 supersedes RFC2710, but still agrees with the above. (Thanks to @logion for pointing this out!). I'm leaving the quote from RFC2710 in place because I think it lends itself to be more easily understood without additional context. In particular, the part of RFC 3810 that confirms the behavior is here: 

It seems you added more debug output since I last viewed this. I don't know if this is still an issue, but if so, the problem is identified here: 

With all that said, we can refer back to your question: What key is used to secure the Pre-Shared-Key? In Main Mode, the Pre-Shared-Key (PSK) is verified in Messages 5 and 6. Message 5 and 6 are Protected by the Session keys ISAKMP generates, described above. In Aggressive Mode, none of the messages in the negotiation are encrypted. And the PSK is verified in Messages 2 and 3. Notice, I said in both cases the PSK is verified, and I never said the PSK is exchanged. Obviously, if nothing in Aggressive mode is Encrypted, and you simply sent the Pre-Shared-Key across the wire unencrypted, there would be a huge gaping security vulnerability. Lucky for us, the writers of ISAKMP already thought of that. And as a result, they created a special method for verifying that each party has the correct PSK, without actually sharing it across the wire. There are two items that are use to validate to each Peer that they both have the same PSK: the Identity Method and the Identity Hash. VPN Peers can choose to identify themselves by various methods; most commonly, peers will simply use their source IP address. But they have the option to use a FQDN or Hostname. Each of these, along with the correlating value for the chosen method, are what make up the Identity Method. So for example, if I had the IP 5.5.5.5, and I wanted to use my IP address to identify myself, my ID Method would effectively be [IP Address, 5.5.5.5]. (Note: BOTH values make up the entire ID Method) The ID Method is then combined (using a PRF) with the Seed value we discussed earlier (SKEYID), and a few other values, to create the Identity Hash. Recall, that what went into creating SKEYID in the first place was the Pre-Shared-Key. The ID Method and ID Hash are then sent across the wire, and the other party attempts to re-create the ID Hash using the same formula. If the receiver is able to re-create the same ID Hash, it proves to the receiver that the sender must have had the correct pre-shared-key. This is described in the RFC here: 

You'll configure and allow hairpin NAT on your SRX ($URL$ make sure to allow the traffic from the VPN zone to the other VPN zones for services that are needed. Depending on your setup you'll either add the customer network list to the protected networks for split tunneling on the clients, if it's not split you'll don't have to add anything client side. On the site to site VPNs you and your customers will have to add your VPN subnet to their cryptomaps so the client VPN traffic will be encrypted and forwarded to the remote sites. If you are using a pulse appliance for the VPN the configuration could be more simple if you just NAT it out of the pulse box to an already trusted network, that way the traffic appears to the SRX as already coming from the inside and the client sites will already know of the network that it's coming from so no further configuration on their end would be needed.