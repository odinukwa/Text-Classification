It's information other protocols (routing, QoS, etc.) can use to select an interface, size queues, etc. 

Broadcast ping () within the management VLAN, and hope it answers. Of course, that requires knowing the management VLAN, and what port(s) are in the management VLAN. This is why I hate hardware that doesn't have a physical console. 

Operational range depends on both ends. If the AP can be heard 10mi away, it doesn't do much good when your laptop/tablet/phone has a low power transmitter that cannot be heard 300ft away. The Nanostation range is between two nanostations. 

Simple answer: No. Your mobile knows the APs around it because it's listening for beacons. (and actively probing its list of known APs) For an AP to figure out what's around it, it would have to constantly listen on every channel to pick up traffic. That's better known as monitor mode -- something does. 

In a word: NO. Your IP address changes when you change ISPs. So any calls currently active on the now-down-ISP will fail. (there may be some trickery that could get the call(s) to redirect/forward to a new SIP endpoint, but I don't think that can work with the current endpoint unreachable.) If you have a tunnel to your internet voip provider, then yes, you could rearrange the underlying transport all you want -- the endpoints aren't changing, so the calls will stay up. (failover quickly) 

Your access switches operate at layer-2 -- they're "just switches". At layer-2, everything funnels back to the routing-switch. The routing switch then moves ("routes") traffic between vlans. All of this looks fine, so far. The issue is, you cannot ping anything in 192.168.11.0/24 from any of the other VLANs? (i.e. the firewall and thus the path to the internet) That's because nothing else in the network knows about the other networks. Traffic is getting to 192.168.11.0/24, but the reply will follow the default route to the firewall, or if you ping the firewall, it's default towards the internet. You should be able to talk to things in the other vlans from any of the new vlans, because they're default gateway is the routing-switch. (also, I cannot recommend the use of RIP. EVER. Your network is tiny and (mostly) static, so it's unnecessary. The firewall is the only thing that needs to know about the other networks.) 

Indeed, enable spanning-tree. The 2810 is standard MST by default. Depending on how you have your trunks configured (Trunk vs. LACP), the individual ports could still create a loop. Call it insurance... you may never need it, but the one time you do and it's not there, you'll regret it. (Other networking mistakes could also create a loop.) 

Note: This only works for TCP. As per spec, the originator of the traffic must keep all traffic until it has been acknowledged by the receiver. If a packet is lost in transit, it can be resent. If a packet must be smaller, it can be resent. This can be done with UDP, but it requires the application do it. (i.e. replicate TCP's reliable transport, at which point there's no reason not to use TCP.) 

Avoidance is used for the very simple fact that every radio ("client") is not necessarily in range of each other. Thus, without the AP coordinating who can talk, distant radios may step on each other because they cannot know the other is transmitting. 

Short answer: Yes. Longer answer: :-) There are bugs in every piece of software. The longer it runs, the more likely one is going to setup shop in your network. But more to the point, the longer it's gone without a reboot, the more little bits of "old" configuration and/or status will be left lingering. In IOS, will emit a warning that it's not completely destroyed and configuration elements may reappear if you recreate the interface -- shouldn't happen in an ASA but in rare cases, it does. I've also seen phantom NAT entries after deleting them from the config. (that one actually is a bug) When dealing with IPSec/crypto, I've found a whole lot of crazy can be cleared up by a . In one case (pix 6.3.5) it wouldn't re-establish a VPN tunnel until I did. [edit] A word on reboots in general: I tend to reboot things just to make sure they will. All too often I've had various systems (routers, firewalls, servers) running for extended periods -- constantly being modified, and when something ends up restarting them (usually a power outage, but "oops, wrong machine" happens too) they rarely come back up exactly as they were before... someone forgot to make X start at boot, or some odd interaction of parts makes something not startup as expected. I admit, it's less of a concern for more static parts of one's infrastructure. 

It's a negotiated feature, so if a device doesn't support it, it won't be negotiated and thus won't be active. As Dib points out, it is a bit of a hammer, but given the way most systems use it ("oh, sh*t, my buffers are full"), it's still useful as the alternative is a lost frame. That said, there have been bugs where an interface would act on a pause frame and then never process the unpause. But that should be rare today. 

However, support for it varies from platform to platform. And if you want to enable/disable native tagging per port (after flipping the above switch): Cat6500 IEEE 802.1Q Tunneling 

No. Not unless further packets arrive for that stream, and that would result in "RST" (reset) being sent. The whole process is complicated state machine to execute an orderly shutdown despite the possibility of network failures. Networks break, links experience errors, links become saturated and have to drop packets, devices fail, etc. As an exercise, run the state tree for an active connection when one of the endpoints just disappears (eg. power failure.) TL;DR That state tree is designed to handle every possible failure mode. 

Yes, the crashdump contains a great deal of information. The ones I have archived here are 200-300k of information. Cisco can make sense of what's in there; end-users, not so much. (as this is an EOL device, Cisco won't bother.) However, there is a tool to look at the trace-back information. In all likelihood, this is a sign of bad RAM. There were problems with a batch of systems a while back. 

Simple answer... it's not possible to get at the keys directly. They're stored in the nvram private-config which is not user accessible. If the key was generated in the default fashion, then it wasn't set as exportable, and thus cannot be retrieved. @legioxi has already provided the "long answer" (make they keys exportable and export/import them) One other option is the use of a "secure usb token" () for key storage. The token can be moved when replacing a router. However, that token is still a single copy. So the more involved export method may be needed. On the plus side, the keys only need to be backed up once. (the whole point being the key never changes -- even when the hardware is replaced.) [See also] 

What you are describing is IP Source Route. However, any network with even a hint of security will have source-route disabled. But if you want to try it anyway, keep in mind there's a limit to the size of an IP header, and thus, a limit to the number of hops you can specify. 

That is correct. The point of the switch engine is to move packets, at line rate, between the necessary ports. The CPU is only used for things the switch cannot handle, or isn't setup to handle. (IGMP join/leave, spanning tree, port aggregation, etc.) Unless you are programming the system, you don't need to worry about any of that. 

"Nesting" (overlapping networks) requires proxy-arp and therefore SHOULD be avoided at all costs. No enterprise router will allow such a broken configuration -- each interface/subnet must be completely independent, which means out in the real world, where real IP addresses are routed, this method of "conservation" cannot be used. (aka: nonsense) [*] It SHOULD not be attempted by anyone not thoroughly versed in networking. (i.e. if you haven't been designing, setting up, and maintaining large, complex networks for a decade or more, you shouldn't even be talking about this type of damage.) (Full disclosure) I'm doing this exact thing in an OpenStack development environment right now. 192.168.xx.0/24 has a /29 behind one of the machines in the larger /24. That machine has to have a number of specific, non-default setting changed to pretend to be hosts within the /29 slice. (aka proxy-arp) Yes, I can add a route for the /29 on the router, but the machines in the /24 still won't be able to talk to the /29 because their larger netmask means they're link-local; I'd have to add that /29 route to all the machines in the /24 for them to work. All-0 and All-1 Those concepts haven't had any tangible meaning in modern networking for decades. Nothing you're likely to run into on the internet makes any assumptions about network size -- everything is classless now. Yes, there used to be issues using an all-0 (or 1) subnet -- say 199.72.0.0/24 (the first subnet from 199.72.0.0/16) (true story) -- because some random system on the internet (AIX) applied class logic to the range. Nothing does that today. So, with 199.72.0.0/16, the address range is 0.0 to 255.255 -- with the those too addresses being the /16's network and broadcast addresses. Those are always the /16's network and broadcast, even if a /24 were nested with it somewhere. The active netmask ALWAYS defines the network and broadcast. Yes, that means a nested construct has multiple broadcast addresses, but due to different netmasks, nodes within different zones (sub-network, parent-network, ...) listen to different addresses. At layer-2 (ethernet), all hosts in the same domain (eg. vlan) see the same broadcasts but the host will filter out, at layer-3, the "foreign" broadcasts, unless they're sent to the "all nodes" broadcast address of 255.255.255.255. [*] ISPs wanting to conserve space like this do it via bridging, but that has it's own problems. [*] I warned my idiot ("we know more than you") coworkers not to use 199.72.0.0/24, but they did it anyway -- putting the webdev desktops in 0.0/25. A day later came the "What. Did. I. Tell. You." after complaints from every single person about random places on the internet they simply couldn't get. That was in 1997. 

240/4 is what was called "Class E" address space. (the address space above "Class D", or multicast, space) It has been reserved address space for the entire existence of the internet. Because of the shear volume of systems that won't allow the use of the space, and those incorrectly treating the space as multicast, IANA/ICANN chose not to attempt to recover the address space. It's not a "real" address. It is not routable, and it never will be. 

mtftp would be what you're looking for. HOWEVER, you are very quickly going to learn wireless (esp. old 802.11b hardware) and multicast do not play well together. Outside Uverse circles, it's hard to tell what wireless APs can deal with multicast -- Uverse has wireless receivers fed from an isolated AP, but the limit of 2 STBs suggests they don't work so well either. 

qdisc reports what the kernel is dropping, not what the network is dropping. You're getting zero's because the switch isn't dropping frames. (I don't know if your virtual network system supports simulating frame drops.) 

First, it is invalid to configure more than one untagged VLAN per port. Into which VLAN does an untagged packet belong? Thus, VLAN 1 (management) should exist, and be the PVID, only on trunk ports. (PVID 10 everywhere else.) Second, unless a switch is acting as a router (eg. the core switch), it doesn't need an ip on any non-management interfaces. Thus, the default gateway for devices in VLANs 10 and 20 (and 1) should be the relevant address of the core switch. With this setup, the VoIP devices need to know to use VLAN 20. This can be via direct configuration, maybe DHCP(???), or CDP/LLDP[1]. [1] Disable "Voice VLAN Security". Enable LLDP-MED. 

There's a big difference between "allowed" vlans and "created" vlans. Very few (read: NONE) of the switches I'm aware of can handle 4095 vlans. Entering the equiv of (i.e. all vlans) will result in an error. is not the same as having all vlans on the switch -- just that the port will not filter any vlans. Bottom line, you still have to go to every switch in the land to create any new vlan(s) and assign them to the necessary ports. Vlan pruning is simply a means to reduce traffic to switches that have no need for it. A broadcast packet will be replicated to all corners unless the vlan is pruned. (and the only two protocols I know of to communicate vlan configuration -- VTP (cisco), and GVRP -- are a can of snakes, I just don't do it.) 

I am unaware of any licensing entitlement changes between 9.1 and 9.4. In general, whatever features were licensed in one version will still be available in later versions. (i.e. you don't need a new activation code) Moving to a newer release without SmartNet (or Cisco TAC explicitly providing the image) would be a violation of numerous licensing conditions. 

This is a simple case of private addressing leaking into a public network. Trust me, this isn't reaching the internet; it may reach the edge of your provider's network, but that it. It's common practice to block/filter/null route RFC1918 space at the edge of your network. ISPs should filter this crap on customer ingress links. (but best practices just aren't followed.) In Cisco-speak: 

The instant you enter , TACACS applies to every command you enter. If you aren't authenticated by TACACS, you will be unable to do anything. If the tacacs server(s) aren't reachable, there can be significant delays for each command as it tries to authorize them. 

What they call "STP" is "Fully Shielded" -- a per pair shield and an outer sheath shield. "Compatible" is open to debate. If you want to maintain the panel and cable shielded specs, then no -- as the panel calls for shielded pairs. But just the cable, maybe. You'd have to look at the specs for the cable as those tend to require bonding to a shielded crimp. (or a patch panel that shields each port.) 

As Inga alluded, you cannot setup the ASA do this. It does not support "ip aliases"; it has one, and only one address. There are no options to configure isakmp / ikev(1|2) on it's own address. (it's either enabled on an interface or not.) (And if you get the bright idea to put a free address on a second interface, it won't allow subnets to overlap. However, you could assign "B" to it's own interface, but you'd still be terminating traffic to the ASA's interface address.) 

<joke>Unplug it</joke> Bittorrent clients can (and do) use random ports. Blocking the common ports will only encourage users to move to different ports. Also, the inter-client traffic has supported encryption for some years now -- originally as a means to limit ISP interference -- making the actual p-t-p traffic unrecognizable. Looking for "info_hash" in the client-tracker communication, while somewhat effective, is also easily defeated. (tor, ssl, vpn, etc.) It also does nothing to stop tracker-less swarms (DHT), peer-exchange (PEX), UDP tracker protocol... If you've managed to kill 50%, count yourself lucky. This is a game of whack-a-mole you cannot win. 

Yes, CDP is layer-2. However, the frame switch is a frame switch. CDP isn't frame-relay, so it will ignore it. Once a PVC is created, CDP will flow through it, but not before. As there's no VCs, R1 and R2 aren't connected to each other. 

Your USB stick is not compatible with ROMMON. Partitioning it to 2GB doesn't make it a 2GB device. I've run into this too many times with too many devices. Your options are: 

The linux bridge is a pure software switch -- the cpu is involved with every packet. With a "managed switched", there will be dedicated switching hardware. 

160 = Thus 3 important bits: or (255.255.224.0) BUT we know there's a 161 subnet which a /19 would step on. So, the largest 160 can be without treading into 161 is "all bits" -- 255.255.255.0 (/24). Similarly, 161.128 = Thus 1 bit in the last octect: 255.255.255.128 (/25)