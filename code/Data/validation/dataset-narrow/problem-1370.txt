You can find out what the SpriteSortModes do here, but Deferred is usually what you'll want. It's really worth it to familiarize yourself with the other parameters though and you can find them on the MSDN docs as well. 

Expanding Shiro's comment: You could increase the speed the game updates to a higher fixed rate (as long as you know beforehand it can handle that FPS). While this isn't really SOLVING your problem it will at least reduce it's effect. You could either set the FPS to a specific amount: 

Then every time your game updates it will add a value of 2 to the variable. Now since you used to be at 60 frames-per-second this meant that your variable was being increased by 120 every second (2 * 60fps). But now, Since you changed the frames-per-second to 30, instead of XPos adding 120 to it's value every second it is now adding 60 (2 * 30fps). The result is that everything is moving at half the speed it was moving when you were at 60fps. The solution to this can be very simple if you keep good coding practices. XNA provides your game with a variable. Inside this variable are two very useful values, and . ElapsedGameTime gives you the amount of time that has passed since your game last updated (your frame time). TotalGameTime gives you the amount of time that has passed since your game started. Using ElapsedGameTime you can make your game run independent of the framerate. Borrowing from the earlier example: 

A unique graphical aesthetic is obviously important when developing a game. I wonder if the same is true for audio? Is it worth investing my time in recording, producing my own sounds or should I just buy stock effects? 

Unsurprisingly, the Ogre guys have a cut down template project that you can use as a basis to build Ogre XCode projects. If you have downloaded and installed the SDK (i.e. haven't built the source yourself), you can just install the Ogre XCode templates and they will build and run out of the box. If you have built the source from the Mercurial repo, you can find the template projects in the SDK/OSX/Xcode templates directory of the SDK. You might have to play around with library and include directories to get it working, as they assume the layout of the prebuilt SDK. 

I am at the design phase of a board game on the iPhone and am considering a couple of options for rendering the view: 

So I was sitting here staring at my computer wondering why it absolutely refused to run my program, and then it hit me. I wen to my anti-virus, turned it off, and voila, it works. I don't know why Avast didn't come up with some sort of message about the program being unsafe or anything, but at least now I know what the problem was. I'm a little worried about what these means for anyone else running the same AV but at least I can start developing again. 

If you are looking to use a Matrix as a camera and to scale and rotate the scene then spriteBatch.Begin() is indeed what you are looking for. Now I know it looks like a lot of parameters but you can actually assign most of them null values. For example: 

By multiplying the Speed variable by how many seconds have passed since the last update you end up moving the XPos at a consistent rate across varying frame rates. TL;DR - Change your movement variables to take into account the ElapsedGameTime so they run at a steady rate. NOTE: When using a FixedTimeStep you often do not have to take into account the elapsed time as it is usually steady, but it's still a good idea. 

You have probably noticed by now, but I thought I would add that you can now choose when you submit your app to: 

This means you don't have to play guessing games about when your app is going to be approved. Just set the flag and release when you are ready. 

I can think of several 2D games which use the Accelerometer successfully, but in my experience as a player, character control in a 3D environment tends to be frustrating. Mostly because a 3D environment often involves a wider, continuous field of view which prevents me from sitting comfortably while playing. Is this an unfair generalisation? Are there examples of the Accelerometer working well for 3D games on mobile devices? There is the obvious tradeoff here, screen real estate unobscured by thumbs, but is it worth it? 

Keeping most of the game in 2D simplifies the implementation and the artwork, but I wonder if the overall finish will suffer. Is it practical to render 3D views (for the dice rolls) on top of a Quartz 2D app? Should I just bite the bullet and go 3D? 

Again: this depends on hardware and the performance of your application, but in simple cases it will be more than fast enough for your precision. Just get the amount of time elapsed from the start of your application (or a separate TimeSpan) whenever a button is pressed and compare it. 

I'm working on a small Unity 2D project in which I need to modify the collider of the player at runtime. I'm using Physics2D.Raycast to find the collider and then what I'd like to be able to do is then copy that exact collider over to the current gameObject and remove the current collider in the process. Basically when my Ray hits an object, I want my player to turn into that object. I'm fairly new to Unity and have been digging through the API for some hints but haven't found anything yet. Any help would be appreciated. So far all I have is as follows: 

I have built a couple of games on the iPad using core animation, but for my next project I would like to built a 3D game. I am not really comfortable with programming OpenGL directly and would also like the toolset that usually comes with a mature 3D engine project. I have used Ogre3D on the PC before and was very happy with that, but I wasn't sure if it had been ported to the iPad specifically and if there were better alternatives available. What engines have used and can recommend? Specifically I am interested in: 

I have used Photoshop for years through my work, but couldn't quite justify the cost of personal development, so I have taken up Gimp and Inkscape. I use Gimp for handrawn stuff and Inkscape for UI elements where vector graphics is a bit more predictable. Both have quirks (especially on the Mac) which take some getting used to, but overall I am pretty happy with them. 

I've been working on a monogame project for a little over a week and had no problems. Today I went to test out the project outside of Visual Studio, by running directly from the .exe in the release folder. When I click on the .exe I get the cursor icon indicating something is loading, but nothing ever does. No window shows up, even though I see processes related to my game in the task manager. Also when I try to end mygame.exe in the taskmanager it doesn't work and the process still sits there. I've tried both a Windows and Windows OpenGL monogame project and both hang once I click the exe. Does anyone have any idea why this may be or any steps I might take to track down the issue? I'm using Windows 7, Visual Studio Community 2015 and the latest Monogame Build. My project references Farseer Physics, Lidgren, Json .Net, and my own Utility class library. Edit: I tried creating a brand new Monogame project and run it without debugging in VS and it hangs the same way running from the .exe does. Also the project runs when placed on my laptop which also has monogame installed so it's nothing wrong with the project.