XNA Games on 360 use and are required to use -- which as I recall means max users per "game" is 32, and you can not connect to any outside services at all. 

I assume since you're students, you are building this as a class project. Please let me first suggest that you scale back your ambitions. Making games is hard, making good games is harder still. I HIGHLY recommend that you and your team 

You'll want to use something like Amazon S3 or Azure Blob storage. Both of these services will charge you for data transfer both IN and OUT; as well as the average storage amount you are using on their servers. They both offer a simple API to read and write data to and from, you can write iOS, Android, BlackBerry, Windows, Mac, Linux, etc versions of your application, which would all consume the same web service API. This gives you the ability to have users interact with data on any platform, and have those changes immediatly available on any other platform. Optionally, you could write a simple web-service which handles your data conversion between platforms, you could use something like Amazon EC2 to host a service like this. Depending on the complexity of the data you are storing this might be over-kill. 

Since you're already tracking the state change of the game for each move, I don't see what else you might monitor in relation to the "game" itself; however, many commonly tracked server metrics include: 

So i would suggest you to create a texture (an image) of one body part of a snake and find a way to display it. (Using Content pipeline, ContentnManager.Load and SpriteBatch.Draw) Find out how to handle when someone presses keyboard and when he does move that body part and display it on next location (using Keyboard.GetState()) Make moving of that body part automatical, and with keypress just change direction (using Update method on Game1 class) Draw other things like food Find out how to handle collisions of snake and food (using Rectangle class and Intersects method) 

Unless i am missing something i think that XNA approach is flawed. You shoud have something like this: 

Now even if there is infinite loop, the code will not block your code. And users can write logic "sequentially". As you can see this is essentially what unity does in its Behaviors (I wrote this from head so it has probably some errors in it) Or you can write your own CIL interpreter and interpret few instructions each frame :) 

In example you gave, you don't need any sort of alpha blending. (Pixel is either visible or not - and i suspect most of studd in minecraft like game will be like this) You can just call discard in shader for pixels you want to be transparent (and they won't write to depth buffer) (In XNA 3 it was possible to set RenderState.AlphaTestEnable which will do the same.) 

The bottom line is Triangle Rasterization, which is how computers render objects to the screen. Though others say it more elquently than I: 

In my opinion, the number of achievements is not important, what is important is that there is something for everyone. In my mind, there are two objectives for achievements in games. 

Since iPhone code is C/C++/Objective-C you can write the code anywhere. To use the SDK, compiler and debugger, a computer running OSX is required. Per the license agreement this must be an Apple built piece of hardware, although I've heard that hackintosh machines work just fine. 

I think that the positives of a local loop back server, far out weigh the negatives. The amount of code reduction is extremely valuable, in my opinion. With regard to running redundant physics simulations, you should look into server ticks, Valve has a great writeup on it here. In a local server environment, you maybe able to remove the "client simulation" and simply send full-world updates, in a local-only situation to avoid the redundant physics simulations since you'll have plenty of bandwidth. 

The answer depends on your target audience. Do you want people to play your flash game on their Netbook and/or their flash supporting Playbook or Android tablet? If so, then memory usage over and beyond 50 MB is likely going to be an issue. If you only expect your game to be played on tricked out gaming rigs, then taking up 100-400 MB memory is likely not going to be a problem. The issue, may be Flash's ability to address this much memory quickly. I'm not a flash developer so I don't really know, but if your game needs this much memory it probably has a lot of supporting code, which is where, even on "gods-own-machine," you may run into issues. 

Edit: Try the following, flip the y by map height which you say is 21, given it starts at 0 and not 1, then its 20-row and not 21-row 

The % part is modulus which ensure that the grid X,Y are wrapped round without using if statements to check edge boundaries. If that doesn't quite work try exchanging the parameters around to: 

You repeat this for left / right and top of the player. Note: Your character height is higher than 32 pixels so you probably need to do 3 calls to collided, one for top, one for midway down, and one for bottom Added more info: 

You were using rectangle.Center.X for both x, y You were using the center of the player rectangle as your top, left when creating potentialNewPosition rectangle. 

You got Up and Down mixed up with Left and right (And I'm assuming your comment are correct here), also worldHeight and worldWidth have been corrected. I see no code that enquires what tile the player is currently under so unable to fix anything related to that part of the question. The following should work: 

This >> means rotate the bits X number of times. 32 is a power of 2 number, i.e. it is a bit in binary, for this reason, rather than doing divide by 32, you can do >> 5 instead. The advantage of doing this is the rotating bits is far faster at machine level than doing a divide and you also do not have to worry about rounding. 32 in binary is 00010000 So, if you 000010000 >> 5 Becomes 00000001 which is the same as 32 / 32 = 1 If you want to learn more, search for bitwise rotation 

I would highly recommend you grab a copy of Paint.NET its free, and 100x better than MS Paint -- its got some basic tools to facilitate generating art in the sense you are looking for. It will, for example, allow you to make a selection and fill the entire selection with a given color/gradient, this will save you from using the pen tool and drawing pixel by pixel. Its not even close to photoshop, but its excellent for this type of use-case, where you are looking for basic style art. 

As you read the first byte (which you know will always be there) you decide how to process the next set of data. If the first word (id) is you know there are three more dwords following, and that is the end of the packet. To continue the example, you might have id = and your specification tells you that for id value 2, you process , , in that order, which might specify a player position in world space. Think of it as writing your own binary file system, you have a header value, which describes the rest of the data, where it is located (what position) and what type of data to treat it as. 

What I'm wondering is how complete your design documents typically are before beginning the implementation of a project? I'm talking about medium to very small projects with a very small team here where even fully fleshed out the entire document may only be a few dozen pages. Do you start with a rough framework and start fleshing out the details at the same time implementation is starting? Do you completely flesh out every section completely before any implementation is even started? If so, what percentage change have you seen after implementation starts? If you have experience with one of the two scenarios I outlined, I'd love to hear your opinion on what issues going that particular route caused and what obstacles you feel it helped you avoid. 

$URL$ I would suggest to create subclass of SpriteBatch that would have DrawLine and DrawRectangle function and in constructor create 1x1 texture. 

And then have dictionary of opcodes and handlers and invoke them. So no big switch at cost of dictionary (or array) lookup and one additional method call. This is how you register handlers 

Where should I store input layout? It's a connection between vertex buffer and specific pass, i can live with just 1 pass but I still have diffferent techniques so i need at least an array with some connection to effecttechniques, but I would appreciate something not crazy like dictionary. I could also create wrapper for Effect and EffectTechnique, but there must be some normal solution. 

and Model should be created in game by new Model(Content.Load()) and not cached (or loaded by some alternative from xml). Materials should be collection of parameters that you pass to effects inside Mesh.MeshParts[].Effects (like texture) 

Something similar is done by content pipeline on basic effect when importing Model, and thats where it should happen 

You need to check if you bullet is touching any part of image, if image is rectangular you just check if bullet is inside rectangle. If your image is more complex then rectangle you need to do pixel perfect collision, that means go through all your image and check if your bullet hit some colored spot. 

I don't think that half of your code base will turn into network code if you decide to implement a feature such as this. In my opinion, the most simple way to do this, is to setup a "central" server (even if that means that one player "hosts" the game and then connects to his own server) that accepts all user input as fast as possible, and sends it back out to each client. On the client, you implement this no differently than if you were doing a co-op game for two players locally, except you read P1 from keyboard, and P2 from network. You'll need to have the server send out a full game state every once in a while, and both clients can either snap to the new authoratitave state from the server, or they can slide into the new state (over a few seconds). Unless you have horrible packet loss or tons of clients per server, this approach should suffice for the situation you outline. 

In most of my games (that are all small in scope) I have used an and a (in some cases an ) and it has always been sufficiently fast. I've never had more than a few states, which helps. 

It depends how many you have and how many of those would be in use at any given time. I would break it down as follows: For each "sprite" I would have one sheet, each WxH section is a single frame. If there are only a few states, I'd keep those all in the same image file, and just make a map of 

explanation: someone could use your Turret class from their assembly, and inherit from it, at that point they could call Shoot method (because its protected, so only inherited types can call it), but they do not have access to Level class, since it was not public (therefore not avaliable in different assembly) 

You can collect draws from all your methods and then draw them all at once. (Because in debug draws you don't really care about ordering) This you will call anywhere in your code (like in update method) - you an make DebugRenderer singleton 

Is there a way to render something custom inside some html element in Awesomium? For example: I have inventory screen (that can be moved around) that has 3D avatar playing some idle animation weilding all equipped items. The screen should be html but the avatar is rendered by the game (to some texture) and now i need to display it on html page. 

Effect has Techniques that tells you what vertex shader and pixel shader to use In your .fx file you will have 1 vertex shader and 2 pixel shader functions, and two techniques 

You can use CodeDom to compile C# code into assembly, and then run this assembly inside your code. If this code would run in same thread as your game you have to make sure that the code that they write will not block your game code. You can use this by using yield, that will generate state machine on behind. So you could have something like this: 

The points raised here are all good. In my experience (which admitedly is weighted more toward business apps than games), there are great uses for static classes and members and I've used them many times. I have found, that as requirements and complexity grow, I end up recycling those static classes and converting them to instance classes and start passing them around. The point I'd like to make is that, if using a static class helps you get this game out, go for it, but still do the right things: implement an interface or base class so it is easier to rip it out and convert it to an instance class later on. An ounce of prevention is worth a pound of cure, so make sure your static class doesn't tie you down in away that makes it hard to change. It is pretty easy to refactor a method using a static class that implements an interface so it accepts a new interface parameter and uses that interface instead of the static class reference. 

I highly recommend you track the number of milliseconds between each iteration of your loop. You can use this data to determine how far to move your background based on how long the last loop took. This should smooth out your scrolling for the most part. If the issue is because your image is so large that drawing it is taking up too much time, you may need to break the image up into smaller parts and "stream" it across the screen based on the scrolling position. 

You shouldn't be checking every block stored in collisionMap. it is many times more faster only detecting blocks around the player by indexing the original tile map. To check if you are standing on a tile: 

You get the player X,Y co-ordinate Add the player height to Y. Divide this X, Y by tile width, height Index the original map data and get the tile check if tile == "n" to determine if are standing on anything or not. 

If that doesn't work then you need to do a for next loop for all rows and cols and print the map value out on screen. Once you see your patterns of 0 and 1 on screen you will soon see where it is wrong. 

row would make more sense if you used newPos.y and not newPos.x, so try swapping them round like I have done below 

I guess it safe to assume it is never negative, given that doing so would be reading outside the confine of the array. If that the case, simply rotate the bits 6 times which gives the same results but is far faster than using the int divide counterpart. 

You do this twice, once for the bottom left hand side of the player and once on the bottom right hand side of the player. Code is rough and some variables are just made up but names give clue to what is what: