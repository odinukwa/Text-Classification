You have to be very careful. Assuming your query is not restarting and you have a for that SPID. If you restart SQL Server it won't help, because transaction still would have to be rolled back. The problem with that is following: When you run a transaction in multi-CPU environment with not restricted degree of parallelism it most probably will generate parallel execution plan. Would say your transaction run for 10 minutes on 8 CPUs. When you Killed it, will be processed ONLY by ONE CPU. That means it might take up to 8 times longer to recover. 

Needless to say, it is impossible to get fluent in the naming of our database objects. Also, because we are very agile with releasing new updates (uptime is not much of a concern so fast is better than correct at first attempt), we keep adding more objects with wrong naming. Postgres will help me out in some cases, but it will not fix references to a table inside a stored procedure and the same goes for any references from our any application, or configuration script. What I am after is that if I write a stored procedure then the stored procedure will use the following while running: 

Premise: I ship a Java application which will make a JDBC connection to a MySQL database. (At the time of this writing it could be 5.1 or 5.5, but hopefully the question and answer don't rely heavily on the version.) Observation: Clearly, I can use the the MySQL JDBC driver (Connector/J) or the MariaDB JDBC driver (MariaDB Java Client) to make the connection to the MySQL server. One huge benefit from the standpoint of an ISV is that the MariaDB driver is LGPL licensed while the MySQL driver is GPL licensed. Performance of the MariaDB driver seems very good. Question: To what extent is the MariaDB JDBC driver a perfect replacement for the MySQL JDBC driver? I'm not looking for a debate on the relative merits of the two. But rather I'm hoping someone can answer along the lines of one of these: 

I have a very central table in our database that is used by a range of applications, it has rules attached to it, triggers and all the dependencies that you can imagine. Now I would like to modify the table without causing any problems with the dependencies. I have previously been successful with doing the following but in a much less complex case: 

This fails with the error: ERROR: syntax error at or near "RETURNING" What I am trying to achieve is to be able to run an update statement on table t with a returning clause. I know that I can achieve this if the statement run in the rule was an INSERT or an UPDATE (by adding a RETURNING clause), but I do not know how to achieve this when it is a SELECT statement. If I remove the RETURNING part of the query above, then I get the following message: cannot perform UPDATE RETURNING on relation "t" query: UPDATE t SET c = true WHERE id IN (1000460) RETURNING id hint: You need an unconditional ON UPDATE DO INSTEAD rule with a RETURNING clause. It was this error message that lead me to attempt the syntax in the beginning of this post. 

I select and copy these 4 characters: I think my clipboard should contain just those 4 characters. But it doesn't. Instead, it contains this: This is perhaps related to this old thread between Josh Berkus and Dave Page. But that discussion focuses on the fact that pgAdmin puts the character at the beginning of any file. In my case it's really not the file that is the issue. It's the clipboard. More practically, the solution in that case was to go to File -> Options and turn off Unicode file writing. In pgAdmin 4 (v2.1 on MacOS), that menu doesn't exist. The menu File -> Preference exists, but I can find no corresponding setting in the Preferences. Question: can anyone help me to prevent the FEFF character from sneaking into the clipboard whenever I copy anything in pgAdmin? 

I am wondering whether anyone has experience with using this function? Does it have similar functionality as Greenplum, Aster Data or Stado/GridSQL? These all offer the ability to utilize many computers to process any SQL query in parallel, which is a huge benefit if one wants to undertake data-mining on a large dataset. I was unable to find any documentation on this on the Pgpool-II pages. 

I think it is incredibly tedious to administer user rights in Postgres. If I for example want to give editing access to an updatable view, then I need to ensure that the user has the right accesses to, the database, the schema, the underlying table, the sequences used (for inserts), all the columns. So often something goes wrong, also due to my lack of understanding. However, I don't really see any need to have a deep understanding of this. I can imagine a tool where I could just grant access to the view and the tool would somehow cascade (is that the right expression) the user rights to all needed objects. I understand that this could get difficult to do if giving access to, say, a pl/pgsql function, which touches 100s of objects under various conditions, but for basic objects like views, tables, etc. this should really save me a lot of time. Please tell me if this question should have been in the softwarerecs StackExchange, I felt that this was the right place, since it is so specific to postgres and, I believe, of general interest. 

Does anyone have a working sample of loading data into an Amazon AWS RDS Oracle database using SQL*Loader where the source file is on S3? In principle it's clearly possible. The Amazon RDS Data Import Guide for Oracle documents using sqlldr. But the only sample there loads data from a local EC2 instance. I have worked with RDS and with S3 and with SQL*Loader before, but I haven't worked with all 3 together. One sample would be really useful. (Related advice would be welcome too... but a sample is all I'm really looking for.) 

Now I would like to utilize the test view or any other view in a GUI which simply presents an editable table. This is possible with the recently introduced automatically updatable views. I want the table to contain drop-downs containing all possible values every time there is a column with constrains on it, like the column with a foreign key in this case. How can this be achieved? I know that I could utilize enums and I do that today, but on Amazon RDS they are unreasonably hard to modify. I had an idea of (ab)using the "EXPLAIN SELECT" query for each column and check which table and column is being queried. 

I'm having trouble using copy/paste from pgAdmin 4. The symptom is that I get the character aka Zero Width No-break Space aka Byte Order Mark (BOM) prepended to any string I copy. The workaround is to paste and then delete that first character. But in practice this is cumbersome. In some contexts the character does not get pasted (in vim on my machine). In some contexts it is pasted, but it's not visible. In other cases it is "visible" as a space (in TextWrangler on my machine). Here's a bit more detail. I successfully type and execute a query: