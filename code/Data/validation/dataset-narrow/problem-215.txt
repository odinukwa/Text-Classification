The fastest repair, since the data file is not modified. A second -q will modify the data file if there are duplicate keys. Also uses much less disk space since the data file is not modified. 

Passes a new path for storing temporary files if you dont want to use the contents of the TMPDIR environment variable 

QUICK The quickest option, and does not scan the rows to check for incorrect links. Often used when you do not suspect an error. FAST Only checks tables if they have not been closed properly. Often used when you do not suspect an error, from a cron, or after a power failure that seems to have had no ill-effects. CHANGED Same as FAST, but also checks tables that have been changed since the last check. MEDIUM The default if no option is supplied. Scans rows to check that deleted links are correct, and verifies a calculated checksum for all keys with a calculated a key checksum for the rows. EXTENDED The slowest option, only used if the other checks report no errors but you still suspect corruption. Very slow, as it does a full key lookup for all keys for every row. Increasing the key-buffer-size variable in the MySQL config. file can help this go quicker. Note that CHECK TABLE only works with MyISAM and InnoDB tables. If CHECK finds corruption, it will mark the table as corrupt, and it will be unusable. See the Repairing tables section below for how to handle this Checking tables with mysqlcheck The second method is to run the mysqlcheck command-line utility. The syntax is: . The following options pertain to checking (mysqlcheck can also repair, as well as analyze and optimize. 

I've got some resource leaking and I'm trying to find what's causing them. I think I have some statements or resultsets that aren't being closed properly. Is there any way to see all of the cursors that my JDBC connection currently has open? I am using Eclipse. 

I want to determine if a resultset exists very quickly. At the moment, I'm doing a count - this is taking roughly 55ms, which is unfeasable.The table has ~100k records - I don't care if it has 2, 5, 100k rows that fit a query; I care if it has 0 or 1. Maybe 2 in certain situations. Is there a way to do this? Would limiting a count using ROWCOUNT (so it only counts about the first 2 rows it finds) speed up the count at all? 

I'm using UTL_MATCH's Jaro Winkler similarity function and it seems to be performing well. However, I would like to adjust the prefix scale according to the situation. Is this possible? Is it possible to see what the default prefix scale is? I could not find any documentation on this, but it seems that in order to be a J-W distance, it must use a prefix scale. 

I want a PL/SQL procedure to give me progress updates as it runs. However, DBMS_OUTPUT seems only to give me the output when the whole procedure is done. Is there a way to make it give me updates during runtime? Thanks! 

Checks tables (only needed if using mysqlcheck under another name, such as mysqlrepair. See the manual for more details) 

T-SQL script which you can use to monitor the status of transactional replication and performance of publications and subscriptions. Things to be considered before executing the below script Requires permission on the following tables inside distribution and master databases 

Attempts to recover every possible row from the data file. This option should not be used except as a last resort, as it may produce garbage rows. 

Unfortunately I'm not aware of limiting characters but you have the option to enable word wrap for SQL Server Management Studio Tools-->Options-->Text Editor-->All Languages-->Settings - Check Word Wrap 

Repairing a table requires twice as much disk space as the original table (a copy of the data is made), so make sure you are not going to run out of disk space before you start. Repairing a table with REPAIR TABLE The syntax is, as would be expected, . This method only works with MyISAM tables. The following options are available. QUICK The quickest, as the data file is not modified. EXTENDED Will attempt to recover every possible data row file, which can result in garbage rows. Use as a last resort. USE_FRM To be used if the .MYI file is missing or has a corrupted header. Uses the .frm file definitions to rebuild the indexes. Repairing tables with mysqlcheck The mysqlcheck command-line utility can be used while the server is running, and, like all the methods of repair, only works with MyISAM tables. The syntax is: 

I have a query which generates a result set (key, a, b). I want to use an update statement where, for each entry in a table with Tkey = key, set ColA = a, ColB = b. How would I do this? Right now I'm trying: 

I have this sub-procedure in a fairly large program, and it is taking hundreds of times longer than comparable sub-procedures. Is there any way I could improve efficiency here? None of this procedure's sub-procedures are absurdly slow, so I am sure that it has to do with the structure of this one. This program looks through a table containing hierarchies of doctors. If it finds a matching root doctor, it adds to that root. Otherwise, it tries to find a matching not-root doctor. I think this might be the source of the inefficiency; the fact that it's opening two very similar cursors and looping through both quite often. Additional info: UNIQUE_GOOD_MATCH is, on average, taking about four seconds. UNIQUE_PHYSICIAN has roughly 200k records, and is indexed by first and last names. It doesn't seem to me that it should be taking this long, especially when other procedures are completing at a fraction of this time. 

I've been using sysdate to time procedures, but a lot of my procedures are very small procedures that get called thousands of times. Is there a way to get milliseconds elapsed instead of seconds? I know it has something to do with timestamps, but I can't find any exact way to do it. 

Checking tables with CHECK TABLE The first method for checking tables is to run the CHECK TABLE SQL statement while connected to the server. The syntax is: 

Can make the process faster by specifying which keys to use. Each binary bit stands for one key starting at 0 for the first key. 

After we know which users we will drop, the below script can be used to drop the orphaned users taking in account the need to first remove the association to schemas and database roles. 

The most commonly used option, which repairs most corruption. If you have enough memory, increase the sort_buffer_size to make the recover go more quickly. Will not recover from the rare form of corruption where a unique key is not unique. 

I cannot find reference from Microsoft Website but according to the Blog post from Alfred Songy. MS_DataCollectorInternalUser has to do with the Data Collector It is a user account intentially created with no SQL Login and A user created without login obviously cannot connect to the database and therefore I don't see a security risk. My suggestion is that it should not be removed deleting,modifying anything within system database is not a good idea. :) This query below helps to identify Orphaned SQL Server Users. 

Answer 3 Script featured on SimpleTalk TSQL as an agent job. Step 1 Create in a DBA database installed on the subscriber server. The code to create the table is: 

I partially solved it: PHONE is actually a VARCHAR2 column. However, this doesn't at all explain why comparing in one direction versus another works or doesn't work, when I make that mistake. So I'm still very curious. 

You'll need to put a trigger on the siteArea table so that whenever it's updated or inserted, it'll call a stored procedure with an argument representing the new site area and that procedure will calculate the needed values and insert them in a table. Your question is too ambiguous for me to describe further. 

Sorry if the way I phrased that is confusing. I'm writing a program that acts kind of like a filter - it retrieves an answer to a query, counts the rows, then I want to do a slightly more narrow query. I want to do those queries until I get a count of 0, which means the query just before it is the narrowest I can get. I then use a similar version of that query, except instead of counting I actually retrieve the records. The best implementation I know of is to just write all of the different queries, put them into different statements and feed those statements into different result statements, and retrieve the counts from there. Then, I use the last one that counted > 0 and use that main query without a count, and use those results. This seems like a horrible implementation. It seems like I'm just going to be bombing the database over and over. I'd prefer to hit it once, and then narrow the resultset on the client. Any ideas? 

Same as the CHECK TABLE ... QUICK option above. Note that you can specify multiple tables, and that mysqlcheck only works with MyISAM tables. Checking tables with myisamchk Finally, there is the myisamchk command-line utility. The server must be down, or the tables inactive (which is ensured if the --skip-external-locking option is not in use). The syntax is: , and you must be in, or specify, the path to the relevant .MYI files (each MyISAM database is stored in its own directory). These are the available check options: 

This option stores when the table was checked, and the time of crash, in .MYI file. You can also use wildcard to check all the .MYI tables at the same time, for example: 

Pls also consider I also noted that There is an issue with sp_replmonitorsubscriptionpendingcmds if you are still with SQL Server 2005 and 2008 Microsoft Connect If any of the above answer are unclear you can follow the source I have provided Thanks! 

Repairing tables with myisamchk The server must be down, or the tables inactive (which is ensured if the --skip-external-locking option is not in use). The syntax is myisamchk [options[ [tablenames]. Remember again that you must be in, or specify, the path to the relevant .MYI files. The following options are available: 

Note: depends upon installation where SYBASE ASE Server installed, so relative path of Run_serverfile can be differ.