There appear to be no value attributes set on any elements. Binding the method to the event handler The method is called from an arrow function in the onChange event handler attribute: 

That way each method is declared only once instead of once per each instance. That would have huge impacts on the memory used by the browser. For more information about that topic, read about it in this post Conditional logic The logic in the Enemy method that conditionally negates the speed, I.e.: 

P.S. I feel like this technique could very easily apply to your subsequent post for the 2nd part of this..., but perhaps for the sake of varying ideas, I shall refrain from mentioning this in that post... 

As others have already mentioned, Array.prototype.filter() might be the simplest approach (or Array.prototype.reduce() could also be used but would require more conditional logic). It would typically be slower than the nested loops because it would be adding additional function calls, but for small data sets it typically wouldn't be noticeable. For example, I did a search on Google for "jsperf filter nested loop" and found this jsPerf test. Using Array.prototype.filter() on , pass a callback function that returns when the value at property is included in by checking A1.indexOf() for a value greater than . 

So yes it will get the value of the data-id attribute of the first element with that class name. Consider the following snippet (try running it to see the result): 

As the comment implies, that assignment can be removed from the function . Then the HTML for the button can be simplified to not have that attribute, as many believe this leads to good separation for the business logic to be out of the markup. 

That would be difficult for us to answer without knowing the history of the team, code, etc. Perhaps the original implementor(s) didn't know any other technique for abstracting those values. 

Without knowing where the element(s) with class name inklogin exist, it can only be presumed that it exists as a child of the element with (or however the controller is named). If that is incorrect, please update your post to include that HTML output (from the ASPX code). Given the presumption above, jQuery can be eliminated by adding (bound to user.ExtraData.userPermissions.notary.allowed) to the input with class inklogin. Bearing in mind that you stated you attempted this, perhaps there was something wrong with the setup. Below is a working example of this: 

The question originally was tagged with functional-programming, but it seems more declarative/procedural than functional, other than the fact that callback functions are passed to the click handlers. The answer by Nomis is good: one can iterate over the values in criteria and as soon as a blank value is found, show the error message container. A functional approach for this would be to use Object.values() to get the array of values in and then utilize Array.every() to look for empty values: 

Feedback The script looks pretty good. For a small script that runs on your local machine it appears to suffice for your needs. Is the goal to only show the latest link? Or would there be a use for showing previous links? Suggestions Variable naming This variable naming might be misleading: 

Then those population headers can be fetched from the DOM using document.getElementsByClassName() and stored in a variable: 

Feedback The code makes good use of the jQuery slide functions, as well as basic CSS class addition/removal. One could utilize event delegation to use a single event listener on a parent container element, along with .is() and tree traversal methods like .parent(). Tips to improve this Utilize .toggle() and .toggleClass(), along with dynamic function call using a variable (e.g. where is a variable containing the function to call) to condense the code. Also, as mentioned above, use event delegation to register a single click handler. Then check if the target is a child of various elements (e.g. with class indented, with class sub-expander, etc.), and handle actions accordingly. 

That can be abstracted into a function (which could accept a parameter for the ) which could then be called in place of that repeated block. For example: 

The code is somewhat acceptable, though please consider the suggestions below- especially the first one! Instance/Prototype Methods It would be much more efficient to define the methods on the prototypes instead of attaching to each instance. For example, take the methods out of the Enemy constructor: 

DOM querying is expensive Search on Google for "js DOM query expensive" and you will likely find many posts from the past 10 years that discuss how in-efficient it is to be querying the DOM each time. Stop Writing Slow Javascript appears to be somewhat recent - see the section Cache DOM Lookups. This answer on SO about various DOM-selector functions will likely be interesting as well. In the code below, notice that the variables and are declared at the top 

While it should be the case that will always be assigned before the block, it may be wise to guard against the scenario of an undefined value (e.g. due to cosmic rays) and ensure it is at least truthy before calling . 

Your sample code utilizes the 2.0 version of jQuery. Perhaps this is because the snippet lists 2.0 as the highest despite 3.1.1 being available in the same CDN, but if you are still using 2.0, it might be beneficial to upgrade to 3.0+ to take advantage of newer features. Closure/lambda function scope on click BenC mentioned you could use an arrow function and not have to make a separate variable to point to in the Cat constructor. Another approach is to use Function.bind(). As is illustrated in the code below, call after the closing curly-bracket and pass : 

Which would come before the HTML content... is that just left in for debugging purposes? It would be advisable not to echo content before the start of the HTML content. 

Because there isn't much need in passing the event object in the jQuery wrapper just to get the innerHTML of the target (and as mentioned above, the value doesn't appear to get re-assigned so can be used). For more context, refer to the article below. I know it comes off in the beginning as tough on jQuery but it has some useful information. Stop writing Slow Javascript. PHP Unused variable: It appears that variable is unused. Was that used for debugging, or checking the value of ? Mapping built-in functions The static anonymous that call built-in functions (e.g. , , ) could just be replaced by the name of the function in a string literal. 

Function calls in callbacks Instead of making a closure/lambda function just to call a function, the name of the function can be used instead. For example, the following block: 

See that all together in this playground example (not connected with Javascript/AJAX requests). JS The line to look up the element to remove by id attribute: 

Since that method is not static, it could simply refer to instead of accepting the parameter for it. Misleading Method Name The method appears to check if the curl function exists and then either makes a cURL request or utilizes . Thus the method might not always make a cURL request and a better name might be . The code in the block when the function does exist could be moved to a new method called . from The method has two statements. One is in the block, and the other is at the end of the method - i.e. . That variable,, appears to be the response from the API when the function exists (and thus the cURL request is made), yet in the block, is assigned a resource from . While this code likely functions correctly, it could be confusing to a teammate who had to update it. A more appropriate name for the return value from the call to might be something like . Then it might be simpler to either assign the return value from the call to to and utilize the of that variable at the end of the method, or when making the curl request, return the response at the end of that block. Redundant In There is an block to the nested statement that contains . That could be removed, since the last line of the method does the same thing. Constants for Response codes It would be wise to define (class) constants for the response codes, like the ones below. While there currently appears to only be one place in your code where that value appears, there may arise a need to have it appear in other logic and thus it would be useful to reuse the constant(s). Then if the value would ever need to be updated (e.g. if the API ever changes) then it can be updated in your code in one spot. 

It is fine to do that, but because the form data doesn't get sent to the server-side, you could also use the id attribute on the input instead of the name attribute, and then fetch that element by id. 

I agree with many of the points in Conor Mancone's answer. Sanitation of data is important - one could utilize PHP's Sanitize filters with . However, you did mention you are using prepared statements for the queries, so that should be sufficient if you really want to sacrifice security. And like Conor suggested, try to split the code in that large controller method into separate methods - not only for re-use, but also for unit testing. There are some duplicate lines of code in your sample - e.g. in both cases (ie. when a cart does/doesn't exist for the current session). While it isn't exactly the best example, it partly violates the Don't Repeat Yourself principle. If you aren't familiar with the S.O.L.I.D. principles then I suggest you look into it- especially D. - Dependency Inversion. That article mentions cases where a model constructor expects a database connection (just like your code). 

See it demonstrated in this playground example. Another approach would be to merge the spliced array and the original array using array_merge(): 

That way, we keep a reference the element that was just created and don't have to query the DOM for a reference to it. The same is true for adding rows (and cells). The following lines: 

Other Review points Feedback I like the usage of the jQuery ui keycode constant for the enter key (i.e. ). I must admit I hadn't used that before but aim to do so in the future. I really like the application of object destructuring for passing the named parameters - that is quite nifty! Suggestions Cache DOM references I see a couple places where DOM elements are looked up in succession, for example: 

And could also be used when setting up the Google Map instance, since presumably that is the same element used for the map. Using parseInt() without a radix If you are going to use parseInt(), it is wise to specify the radix using the second parameter - unless you are using a unique number system like hexidecimal, octal, etc. then specify 10 for decimal numbers. 

Having been taught to have a few queries as possible, my first thought is to try to help get that code to only use one query. My initial thought is to advise you to add the clause - something like the query below. Warning: Untested code: 

I don't see any subsequent lines in that file that re-assign a value to that variable. So it could be changed to 

The biggest change would be removing the keyword , and adding an arrow (i.e. ) between the (empty) list of arguments and the function block (since there are multiple statements). Then because an arrow function "does not have its own "1, now refers to the enclosing scope, so change to (in the first callback function, and then in the second event callback function). 

Most browsers won't show an error in that case but it could lead to unexpected results, depending on how the rendering engine decides to handle the code. Many developers in today's age feel that HTML table tags are antiquated - especially if a responsive design is desired (e.g. for various platforms - desktop, mobile, tablet, etc.) , and that a better approach is to use other elements (e.g. tags) and style them using CSS like table elements using display table styles. There are numerous resources - e.g. this one from Widsm Labs. In the example below, the , , and tags have all been converted to tags with an equivalent class attribute. 

Feedback While it looks like a lot of logic, it looks sufficient for the task. Good work in using to convert the dates. Suggestion to improve performance, and eliminate that lookup function 

And that string could be generated using the mapping mentioned earlier. With a query like the one above, the chain of ... statements should be replaceable with and . Also, the could use the statements to specify custom values. Refer to this SO answer but instead of string literals use the expressions mentioned above in the conditional fields. 

Like Kokodoko's answer suggests, the common code can be abstracted. I would abstract the common code to a separate method like : 

Which would hopefully allow somebody else reading your code to have a better idea of what that logic means. Though if those names are too long, feel free to shorten them. 

It is unclear how the variables are used but presumably they are passed as parameters to a function/method call. If that is the case, then could be used, or if PHP 5.6+ is used, then call the function directly and pass the parameters using the spread/splat operator. *Triangle series sum of 26 (351) + 26 - 1 (since each array except the last one has an extra element (the remaining fields separated by commas) 

without a radix The click handler calls with no second parameter (i.e. radix). The MDN documentation states one should "Always specify this parameter to eliminate reader confusion and to guarantee predictable behavior"3. So that call should have added as the second parameter: 

Yes it seems fine. The Fetch API is supported by all major browsers but not IE1 but some argue that it doesn't really have a simple way to cancel requests. If there arises a need to abort requests, then other libraries like SuperAgent or reqwest could be used. 

MVC architecture Obviously it can be difficult to break up the code in JavaScript to MVC components. Typically an instance of the model would hold information about each model item- in this case, a die. Perhaps a die model might be what you have created as the function in the controller implementation. The values currently stored in could just be properties of the controller. There is a multitude of articles about MVC in JavaScript online. I have not read many but I started looking at this Sitepoint article. It claims that the controller should let the view handle the DOM interactions (e.g. calling , , etc. That way the controller has better separation (of concerns) from the view. The controller only has to worry about the logic of handling the model and delegating actions to the view. I also looked at This Google Chrome Apps article about MVC architecture and it has a link to Addy Osmani's online book: Learning JavaScript Design Patterns. In the section about Views, the example shows a view that accepts a controller object and registers the event handlers using properties of the controller. So its up to you how you structure it but I would remove DOM interactions from the controller and not include the DOM elements in the view’s returned object. It may be more appropriate for the view to have methods the controller can call, like to display a message, show various components, etc. It appears your code uses the revealing module pattern and the view and model are passed to the controller. With this approach it may be tricky to subscribe the controller methods to events on the views DOM. One way might be to have a view method to register the callbacks. Or another way might be to use to have the view communicate with the controller. Other Feedback 

has a value in the attribute of input, and has a value in the attribute matching one of the three inputs targeted (i.e. 'ModifyRecord', 'DeleteRecord', 'DeleteChecked') 

Yes it doesn't hurt. Perhaps it would be beneficial to create a wrapper function to handle the boilerplate, like below. That way, the first three arguments (which appear to be the same throughout the code) to the call to don't have to be repeated every time. 

Const and let instead of var Unless browser support is an issue, use const and let instead of var, to limit the scopes of variables and ensure that values that shouldn't get re-assigned are consistent.x 

Why not use arrow function syntax for , and ? Was the goal to keep the scope of the variables inside contained? 

Then in the callback to .change(), accept an argument for the change event - e.g. - and check the target property 

And then might be better named something like or . Also, the parameter name in is pretty generic: . Perhaps or would be a better name. Default values ecmascript-6 offers default values for parameters. This could be utilized in functions like : 

If you wanted to avoid the possible undefined variable you could check to make sure evaluates to true. Second Update Perhaps this is too meta but it isn't obvious to me why this post deserves a downvote. While I understand that there is supposed to be some level of anonymity on these sites, I would really appreciate feedback on what reason(s) exist that caused this to get a downvote and what could be changed to reverse that action. Help not only yourself and me get our points back but also our community by improving this content!