The Raspbian Jessie repositories do not have a usable version of . The packages that look as if they might be seem to be ancient support packages from 2012, but the main system itself is missing. While it does look technically possible to compile sagemath under Raspbian (given a couple of days + plenty of additional swap space), it doesn't look as if many people have tried it since Mathematica 10 became available. 

The replacement line starts with a , which has the effect of commenting the line out. So all we're doing is not setting the option. Practically, this is down to the updates to Raspbian late last year to give it a more streamlined user interface. The rest of the lines are just there for context. They don't often help much in configuration files, but for code and text, they can be very helpful. (The line also tells you there aren't any more differences; often there are more than one.) You might not always want to accept changes. For instance, I use a backup tool () that I've had to customize for my system. If Raspbian updates rbackup, and I accepted their changes to its configuration file, my daily backups would stop. So for me, every time rbackup is updated, I need to remember to Keep my changes. 

Now try installing the printer again - you should be able to use the graphical printer configuration. Again: I don't know if this works, as I don't have the printer, but at least it builds the binary filter and puts the PPD files where the system might expect them. 

Under Windows, all you will be able to see is the /boot partition, which is in the MS-DOS VFAT format. Raspbian uses a different file system format for its system files. Here's the (edited) output of on my Raspberry Pi: 

the file that it wants to change (marked ) is , and the existing one is from September 2016; the replacement file (marked ) is from the dpkg process, which is Debian's package manager, and the replacement is from October 2016; and the changes are around line 96 in . 

Mike Cook's Breakout Board has zener diode protection for every port. It's quite a fiddly build, though. 

I don't know if there are Python libraries to specifically encode/decode Manchester data for the Raspberry Pi. It needs some fairly careful real-time signalling to work. You can't just send these modules character data and expect success, unfortunately. 

Yes, SQLite files can get a lot bigger than flat files, especially when they are writing large journals. But this won't likely happen for a simple logging application. 

following this: $URL$ — which may be the core of the updated link you gave. Step 3 (creating ) is critical! No need for HoRNDIS; you just need to set Internet Sharing to share to your RNDIS/Ethernet gadget, as described in the answer here: networking - "RNDIS/Ethernet Gadget" Share Internet - Raspberry Pi Stack Exchange 

These results were tested and generated on a Raspberry Pi running latest Raspbian, with gpsd reading from a Pharos GPS-500 on . Does your GPS have a satellite fix? Check with cgps/xgps, and see that the Status is at least '2D Fix'. If you're indoors and haven't warm-started your GPS receiver, you may never get a fix. You'll still get NMEA data, just it doesn't contain $GPRMC position data. 

over-current change means that your device is requesting a higher current than your Raspberry Pi is willing to provide, so the drive is getting disconnected. Try adding 

I've got something that might work. Can't test it as I haven't got that kind of printer. It's based on this. You'll likely need to install a bunch of things first 

What have you tried? What have you searched for? Both freetds and pyodbc show up in any I care to do. This might get you started: 

takes 53 s on a stock Raspberry Pi. The image is a 12 MB, 12 mpx file from my Nikon D90. A quicker, simpler workflow is to use a pipeline of two simple command line tools, dcraw and cjpeg, which you can install like this: 

As your own build has its own version number (and you don't have Debian's version to overwrite it) this should stick around for a while. 

Are there any other components on the module? From the dx.com page it looks like it's a bare LED. The 5V connection may not go anywhere. IR LEDs are pretty current-hungry, and that's why the examples have a transistor to beef up the current. You may get a faint flicker connecting it directly (most cellphone cameras detect IR from LEDs quite well, btw), but you might not get the range you need. 

If the Raspberry Pi is buffering serial data correctly, the output lines should have consecutive numbers. Results The Uno R3, Mega 2560 and Nano clone all produced similar results. Here's the output from an hour pause on the Uno R3 connected to a Raspberry Pi 3, complete with initial line noise burst (and Python's weird obstinacy against do what I mean data type conversion): 

With these particular add-ons, no, because they both expect exclusive access to the serial port. You can get GPIO stacking headers for adding multiple HATs, but you always have to check if there's pin contention. pinout.xyz is a good resource. Boards based on other chipsets such as the SIM908 combine GSM/GPRS and GPS on one module. 

You are running a very old version of hplip. Current version in Raspbian is 3.14.6, and the Envy 4500 has been supported by hplip since 3.13.6 from mid 2013. (Source: HP Linux Imaging and Printing) 

Windows would only find the 56 MB /boot partition. It doesn't know how to write to the other part. If you really want to write to the rest of the card under Windows, take a look at Ext2Fsd. I wouldn't recommend using your Raspbian system card as a general SD card on other computers, though. 

SD's read-only switch is, at best, a software option. Almost every device I have will ignore it, and if avra's comment is correct, the Raspberry Pi may have no way to tell if it's on or off. So, to your questions: 

Some Linux installations have PgUp and PgDn defined, but these always work. I have never learnt vi keys, despite using Unix since the late 1980s. 

For what it's worth, I just ran that same test on a stock Raspberry Pi 3B running Raspbian Jessie and it completed in 24.3 seconds. It took 73.4 s on a Model B rev 2 running Wheezy. Unless you have an idea of the system load beforehand, this isn't a particularly good general benchmark. Arbitrary-precision decimal number handling is a slightly special case. Maybe take a look at Roy Longbottom's Raspberry Pi & Raspberry Pi 2 Benchmarks for some options. 

It's been around since the release of Raspbian Jessie, so since 2015. The Preferences → Raspberry Pi Configuration menu runs a subset of the options available through , so you should be able to configure the system by opening a terminal and issuing this command: 

For reasons of their own (saving space? fitting on an 80-column terminal? meeting the tradition of having pin 1 at top left?) the pinout.xyz folks have decided to represent the GPIO pins rotated 90° clockwise on their website and in the command. The circles at top and bottom of their image are meant to represent the mounting holes. If you have a Raspberry Pi without headers, pin 1 has a square pad while all the others are round. Also, there's a small diagonal corner cutout on the board silkscreen by pin 1. 

Your Raspberry Pi will be spending most of its time building and rebuilding packages, and Raspbian is by far the most popular distribution for Raspberry Pi. There will almost always be a pre-built package for what you need, and the support community is great. 

and that's even with the File Manager window opened to the Desktop folder. (The 10 second delay is just there to stop a terminal window closing before I can read it.) You have to be very careful with paths; you can't assume that File Manager will have anything useful set for the current working directory. See if you have more luck setting to the right directory. Finally, doing stuff as the root user won't help you here. The root user gives you powers it assumes you know how to use. If you're not even conversant with working directories, you might not want to have that power, as you'll be surprised when you accidentally delete something important. Everybody does something stupid as root once; there's no excuse if you do it more than once ... 

(This may be a default now on Raspbian.) You need to log out and back in again for this change to work, but then it should be valid indefinitely. Serial ports can also have aliases. (or by default on a 3) points to . There are also the and devices that can be helpful for identifying particular ports. If you have multiple USB serial devices, the system will allocate to the first one identified, to the next, and so on. These aren't always in the same order, so the by-path and by-id aliases help you find the right physical port. 

The Raspberry Pi Zero (and Zero W, and likely those before the B+ as well) have very little in the way of USB current protection. If you unplug a USB device, your Zero will likely reboot. If you can, use a hub, or a combined USB/trackpad combo 

You don't ever need to choose a Debian archive. Raspbian has it hard-coded. If you've changed it, change it back to Jens Peter Nielsen's example. 

While this will change build and run commands to use Python 3, it won't modify Geany's Python template. Geany stores its templates in 

Five minutes? You sure are doing something wrong (or are using some CPU-intensive options that you haven't told us about). For me, the command 

With Raspbian, most network or USB-attached filesystems don't allow execution for security reasons. Commands need to be on a local filesystem 

This filters out just the NMEA data, and copies the output to the screen and to the file test3.nmea. You can convert this to KML using gpsbabel: 

Raspbian is compiled with decent general settings for armhf. You might manage to get some code fractionally faster with Gentoo, but: 

First off, that microphone isn't going to work. It cuts out at 10 kHz, so is better suited to voice recordings. Ultrasonic is usually in the 50-100 kHz (and slightly higher) range. You might be better off with a MEMS Sensor. If you have an unlimited budget, the G.R.A.S. ⅛" microphone is the one to choose, but it's designed for professional acoustic work and is breathtakingly expensive. The cheap Panasonic WM61 might work, too. You'll need a pre-amp and possibly phantom power supply for the microphone. You'll need a faster DAC, too. If you want to limit your highest frequency to 100 kHz, the 200 kHz PCM1794A could do the job. It's used in the Rpi DAC audio board. If you can give some more details of what you're trying to record, it would be useful. The higher you get above standard audio equipment, the more it costs; for instance, this “affordable” USB Ultrasound Microphone. If you only need to detect these frequencies, tools like the Simple Bat Detector can do this cheaply.