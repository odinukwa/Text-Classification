We define a simple undirected graph as a graph where no vertex has a loop and there is only zero or one undirected, unweighted edge between any pair of vertices. My question: 

Is there a more efficient way to construct the state with lesser number of qubits? If we need at least 10 qubits, which $720$ of the $2^{10}$ states should I choose? 

Prove that the graph automorphism problem is Turing-reducible to the graph isomorphism problem. Prove that the graph automorphism problem has a polynomial time computable or-function. Prove that the graph isomorphism problem has both polynomial time computable and- and or-functions. Combining the previous results, it may be argued that the graph automorphism problem is Karp-reducible to the graph isomorphism problem. 

I have been going through Certifiable quantum dice: or, true random number generation secure against quantum adversaries by Umesh Vazirani and Thomas Vidick. They have used entangled particles as shared resources for a quantum nonlocal game aka CHSH game. Because of the acronym CHSH I assumed that the game was proposed by Clauser et al. in their famous paper, Proposed Experiment to Test Local Hidden-Variable Theories. But it looks they proposed only the famous inequality not the game. So, I am trying to trace the evolution of intuitions, ideas and results of the researchers which link the CHSH game with CHSH inequality. The usual form of CHSH inequality is as follows. $$-2 \le S \le 2$$ where, $$S = E(a, b) − E(a, b') + E(a', b) + E(a' b')$$ Here $a$ and $a'$ are detector settings on side $A$, $b$ and $b'$ on side $B$, the four combinations being tested in separate subexperiments. The terms $E(a, b)$ etc. are the quantum correlations of the particle pairs, where the quantum correlation is defined to be the expectation value of the product of the "outcomes" of the experiment, i.e. the statistical average of $A(a)·B(b)$, where $A$ and $B$ are the separate outcomes, using the coding $+1$ for the '$+$' channel and $−1$ for the '$−$' channel. In the original paper the inequality is Equation 1b which is as follows. $$|P(\alpha) - P(\alpha + \beta)| \le 2 - P(\gamma) -P(\beta + \gamma)$$ As mentioned on page 883 of the paper greatest violation occurs when $\alpha = 22.5^\circ$ , $\beta = 45^\circ$, and $\gamma = 157.5^\circ$. But the paper doesn't describe a nonlocal game. Even the later survey, Bell's theorem. Experimental tests and implications, by Clauser et al. also doesn't describe any nonlocal game. So, my understanding is that the CHSH inequality is just a component of the CHSH game which was later defined by someone else. After googling and tracing through the bibliographies of the papers for a while I found the paper, Consequences and limits of nonlocal strategies, by Cleve et al. In section 3.1 they have defined the CHSH game formally. I assume this is the first formal description of the game. CHSH game is just another nonlocal game with two provers. In a CHSH game the contribution of the CHSH inequality is in the strategy of the game. For the nonlocal game the players, Alice and Bob employ strategies in answering to the referee. The strategies are quantum. The possible answers are boolean values. The probability distribution over the answers are the probability distribution retrieved from the measurements performed by them on a shared Bell state. This probability distribution is defined by the CHSH inequality. It's optimality is given by the Tsirelson's equality defined in Quantum generalizations of Bell's inequality (4th condition of the theorem 1) by Tsirelson and Quantum and quasi-classical analogs of Bell inequalities by Khalfin and Tsirelson (Equation 2). My question is : Am I able to trace the evolution of the ideas, intuitions and results between CHSH inequality and CHSH game correctly? Did I miss anything? 

My effort: I am confused how to approach this problem. Should we find the element in the hidden subgroup with with largest absolute value of its character? If we can determine the value, would it be useful? 

My question is whether similar reduciblity can be inferred for the problems under hidden subgroup representations (HSP). Let me define those representations. Graph isomorphism as a hidden subgroup problem Let the $2 n$ vertex graph $\Gamma = \Gamma_1 \sqcup \Gamma_2$ be the disjoint union of the two graphs $\Gamma_1$ and $\Gamma_2$ such that $Aut \left(\Gamma_1\right) = Aut \left(\Gamma_2\right) = \left\{e\right\}$ (a limited version). A map $\varphi : S_{2n} \to \text{Mat}\left(\mathbb{C}, N \right)$ from the group $S_{2n}$ is said to have hidden subgroup structure if there exists a subgroup $H_\varphi$ of $S_{2n}$, called a hidden subgroup, an injection $\ell_\varphi : S_{2n}/H \to \text{Mat}\left(\mathbb{C}, N \right)$, called a hidden injection, such that the diagram 

The hidden subgroup representation of a $3$-node graph isomorphism problem is defined over the symmetric group, $G = S_6$. So, any hidden subgroup algorithm that wishes to solve the problem should start with constructing the state $|f\rangle$. $$ |f\rangle = \frac{1}{\sqrt{|G|}} \sum_{g \in G} |g\rangle |f\left(g\right)\rangle $$ I am trying to figure out the efficient way to construct $\frac{1}{\sqrt{|G|}} \sum_{g \in G} |g\rangle$. For a $3$-node graph isomorphsim problem, $|G| = 720$. It means, if we map each permutation of $G$ to an unique basis state, we need $720$ basis states. It entails that $|g\rangle$ has to be at least a $10$ qubit register. My questions are: 

There have been a number of cases where efficient hidden subgroup algorithms have been found for specific non-Abelian groups with very specific structures. Why haven't we found any efficient quantum algorithm to find a hidden subgroup in a symmetric group even when the structure of the hidden subgroup is heavily restricted (e.g. the hidden subgroup could be a very special direct or semidirect product)? 

My question: With $F:\mathbb{B}^n \to \left\{0, 1, \text{"undefined"}\right\}$ i.e. not having a promise problem, do Kitaev et al define a broader class of problems? 

In Normal Subgroup Reconstruction and Quantum Computation Using Group Representations by Hallgren et al. In this paper it is showed that no hidden subgroup algorithm can distinguish the trivial subgroup from an order-$2$ subgroup consisting of $\frac{n}{2}$ disjoint transpositions when the group is a symmetric group $S_n$. My question: 

How do I compare the performance of simulated annealing against the performance of quantum annealing algorithms? In Convergence theorems for quantum annealing by Morita and Nishimori, it has been shown that QA performs better than SA. Let's me quote from the Discussion section: 

In this question, I am trying to understand the equivalence between the following two definitions of the complexity class QMA. In Quantum Computational Complexity, John Watrous defines the class QMA as follows. 

I assume it should be a special case of the exponential algorithm by Babai et. al introduced in Canonical labeling of graphs. As described in Reading List: Graph Isomorphism by Dave Bacon, this is not among the classes for which we have efficient algorithms. Thanks in advance for your answer. 

My understanding so far: I am trying to understand the effect of discarding the second register in the standard approach of hidden subgroup algorithm using this paper as resource. I will be using $S_5$ as my group of interest. It is said in the paper that, 

Right now I am going through Quantum Kolmogorov Complexity Based on Classical Descriptions by Vitanyi. In the introduction, the author assumed the primitive rotation $\theta = 53.13^\circ$ to have countably many quantum Turing machine. Is this choice of angle arbitrary? 

According to XOR Satisfiability Solver Module for DPLL Integration by Tero Laitinen, we need $2^{n-1}$ CNF clauses to convert an $n$ literal XOR-SAT clause if we do not want to increase the number of literals. So, I understand that the computational cost for converting an XOR-SAT expression into a strictly CNF $k$-SAT is exponential. My question: What is the computational cost if I want to reverse the process? What is the computational cost of converting a CNF $k$-SAT expression into an XOR-SAT one? I assume the promise that in this case only the $k$-SAT expressions with equivalent XOR-SAT expressions are considered. 

What is the complexity of the best known algorithm for the simple undirected graph isomorphism problem? 

I understand that it is possible to implement the Grover's algorithm as an adiabatic quantum algorithm. What I don't understand is the special relation between local Hamiltonian and combinatorial search problems. Any clue? 

The Simon's problem involves a function which takes binary strings as inputs. One seeks to find the period of the function which acts on those inputs. In the standard method, the first register has the capability to encode the inputs. The graph isomorphism problem is defined over two input graphs. The hidden subgroup representation of the problem involves a function which doesn't take the graphs as inputs. Rather it takes permutation over the vertices as input. Those permutations are agnostic of the input graphs. In the standard method, the first register doesn't have the capability to encode the inputs i.e. the graphs. Can anyone explain why the HSP representations of these two problem are so different in the sense that in the standard method of an hidden subgroup approach the first register of one of them encodes the inputs but the other doesn't? 

I assume $f$ maps $g$ to it's irrep. So, if we take the case of $S_5$, assuming an automorphism group of a $5$-node graph is hidden inside $S_5$, $|G| = |S_5| = 120$. Both $|g\rangle$ and $|f(g)\rangle$ are $120$ element column vectors. So, when it is said that the second register is discarded what it actually means? Let's take the case of trapped ion qubits. When we say we discard the second register, does it mean that we will not do any unitary transformation or measurement on them anymore but they will always be there? In the Wikipedia page of Simon's problem the second register is measured. I also don't understand why discarding (whatever it means) will let the first register end up in a mixed state. Shouldn't it be in a pure quantum state? 

is a commutative diagram, where $S_{2n}/H_{\varphi}$ denotes the collection of right cosets of $H_\varphi$ in $S_{2n}$, and where $\nu : S_{2n}/H_\varphi$ is the natural map of $S_{2n}$ onto $S_{2n}/H_\varphi$. We refer to the group $S_{2n}$ as the ambient group and to the set $\text{Mat}\left(\mathbb{C}, N \right)$ as the target set. The hidden subgroup version of the graph isomorphism problem is to determine a hidden subgroup $H$ of $S_{2n}$ with the promise that $H$ is either trivial or $|H| = 2$. Graph automorphism as a hidden subgroup problem For a graph $\Gamma$ with $n$ vertices, a map $\varphi : S_{n} \to \text{Mat}\left(\mathbb{C}, N \right)$ from the group $S_{n}$ is said to have hidden subgroup structure if there exists a subgroup $\text{Aut}\left(\Gamma\right)$ of $S_{n}$, called a hidden subgroup, an injection $\ell_\varphi : S_{n}/\text{Aut}\left(\Gamma\right) \to \text{Mat}\left(\mathbb{C}, N \right)$, called a hidden injection, such that for each $g \in \text{Aut}\left(\Gamma\right)$, $g \left(\Gamma\right) = \Gamma$ and, the diagram 

The classical representations of the graph automorphism problem is Karp-reducible to the classical representation of the graph isomorphism problem. The sketch of proof for this can be written as follows based on the detailed proof given in Section 1.5 of The Graph Isomorphism Problem - Its Structural Complexity. 

Detection efficiency, or fair sampling Communication, or locality Disjoint sampling Failure of rotational invariance Sources of error in (optical) Bell test experiments Free choice of detector orientations 

In Classical and Quantum Computation, Kitaev et al defined the same class (named as BQNP) as follows. 

I am trying to have a better understanding of the definition of the Quantum Turing Machine. My questions: 

How the hardness of the hidden subgroup problem changes when the order of the subgroup grows beyond $2$? Is induction the ideal way to derive it? 

I would like to know the reference of the statement that - errors of the various measured quantities are inversely proportional to the square root of the number of measurements. Thanks. 

Does this result settle the question of the performances for Simulated vs. Quantum annealings? I have a feeling that we should put a little more context here. I assume to settle the question we need to find a quantum annealing schedule which is faster than all simulated annealing schedules. The problem can be reduced to finding a quantum annealing schedule which is faster than the fastest simulated annealing schedule. Now, to me, the fastest simulated annealing schedule makes sense only when we know what optimization problem we are talking about. We cannot find the fastest simulated annealing schedule for all conceivable optimization problems. That just doesn't make sense to me. So, is the performance comparison between SA and QA settled? Is yes, how? If no, how can we do it? 

Currently, I am going through Algorithmic complexity of quantum states by Mora et al. In Section $2$, on page $5$, the authors discusses the finding of a "natural" upper bound also for the complexity of a quantum state. To do that, the authors introduce the concept of volume of a particular set. They consider the set of all infinite binary strings which is isomorphic to the unit interval $[0, 1]$. So, the volume is defined as follows. Any $n$-bit binary string $\omega_n$ identifies the set of infinite strings whose first $n$ bits coincide with $\omega_n$: the volume of this set (a ball, $B_{\omega_n}$) is $V(B_{\omega_n}) \sim 2^{-n}$. Could anyone please explain to me why it is $\sim 2^{-n}$? 

is commutative, where $S_{n}/\text{Aut}\left(\Gamma\right)$ denotes the collection of right cosets of $\text{Aut}\left(\Gamma\right)$ in $S_{n}$, and where $\nu : S_{n}/\text{Aut}\left(\Gamma\right)$ is the natural map of $S_{n}$ onto $S_{n}/\text{Aut}\left(\Gamma\right)$. We refer to the group $S_{n}$ as the ambient group and to the set $\text{Mat}\left(\mathbb{C}, N \right)$ as the target set. The hidden subgroup version of the graph automorphism problem is to determine a hidden subgroup $\text{Aut}\left(\Gamma\right)$ of $S_{n}$ with the promise that $\text{Aut}\left(\Gamma\right)$ is either of trivial or non-trivial order depending on the type of $\Gamma$. My questions: I think it can be trivially shown that the hidden subgroup representation of the graph automorphism problem is Turing-reducible to the graph isomorphism problem by giving two input graphs as the original graph and the candidate automorphism of the original graph. If I am correct, the remaining question is whether there is a Karp-reduction for the hidden subgroup representation. If there is, how it can be shown. 

I was going through the PhD thesis of Daniel Nagaj. At the beginning of chapter two he indicated a relation between the local Hamiltonian perspective of adiabatic quantum computation and combination search problem. I am not getting the intuition behind this. Let me quote from the second paragraph of the chapter. 

My question: What is the dimension of the Fourier transform for $S_5$? My effort: The dimensions of the seven irreps of $S_5$ are $1,1,4,4,5,5,6$. According to the notes of Andrew Childs, the Fourier transform is a unitary transformation from the group algebra, $\mathbb{C} S_5$,to a complex vector space whose basis vectors correspond to matrix elements of the irreps of $S_5$, $\oplus_{\sigma \in \hat{S_5}} \left(\mathbb{C}^{d_\sigma} \otimes \mathbb{C}^{d_\sigma}\right)$. Here the complete set of irreps of $S_5$ (which are unique up to isomorphism) is $\hat{S_5}$. We expand the direct sum of the irreps here. $$ \oplus_{\sigma \in \hat{S_5}} \left(\mathbb{C}^{d_\sigma} \otimes \mathbb{C}^{d_\sigma}\right) = \left(\mathbb{C}^{d_{\sigma_1}} \otimes \mathbb{C}^{d_{\sigma_1}}\right) \oplus \left(\mathbb{C}^{d_{\sigma_2}} \otimes \mathbb{C}^{d_{\sigma_2}}\right) \oplus \left(\mathbb{C}^{d_{\sigma_3}} \otimes \mathbb{C}^{d_{\sigma_3}}\right) \oplus \left(\mathbb{C}^{d_{\sigma_4}} \otimes \mathbb{C}^{d_{\sigma_4}}\right) \oplus \left(\mathbb{C}^{d_{\sigma_5}} \otimes \mathbb{C}^{d_{\sigma_5}}\right) \oplus \left(\mathbb{C}^{d_{\sigma_6}} \otimes \mathbb{C}^{d_{\sigma_6}}\right) \oplus \left(\mathbb{C}^{d_{\sigma_7}} \otimes \mathbb{C}^{d_{\sigma_7}}\right)\\ = \left(\mathbb{C}^1 \otimes \mathbb{C}^1\right) \oplus \left(\mathbb{C}^1 \otimes \mathbb{C}^1\right) \oplus \left(\mathbb{C}^4 \otimes \mathbb{C}^4\right) \oplus \left(\mathbb{C}^4 \otimes \mathbb{C}^4\right) \oplus \left(\mathbb{C}^5 \otimes \mathbb{C}^5\right) \oplus \left(\mathbb{C}^5 \otimes \mathbb{C}^5\right) \oplus \left(\mathbb{C}^6 \otimes \mathbb{C}^6\right) $$ So, the direct sum is a $26 \times 26$ matrix. The shape of the direct sum is: $$ \begin{pmatrix} (1) & (0) & (0) & (0) & (0) & (0) & (0) \\ (0) & (1) & (0) & (0) & (0) & (0) & (0) \\ (0) & (0) & (4) & (0) & (0) & (0) & (0) \\ (0) & (0) & (0) & (4) & (0) & (0) & (0) \\ (0) & (0) & (0) & (0) & (5) & (0) & (0) \\ (0) & (0) & (0) & (0) & (0) & (5) & (0) \\ (0) & (0) & (0) & (0) & (0) & (0) & (6) \end{pmatrix} $$ Here $(i)$ is an $i \times i$ matrix. According to the note there is one basis vector for each matrix element. So, there are $26^2 = 676$ basis vectors. The Fourier transform will also be a $26 \times 26$ matrix. Am I doing it right?