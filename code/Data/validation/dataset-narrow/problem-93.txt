You should craft an ACL for one direction. Don't put the same ACL on every interface in both directions. The general ACL rules: 

Using VLANs is like breaking a switch into multiple unconnected switches. On a single switch, no hosts on a VLAN will ever see any traffic for a different VLAN. Traffic must pass through a router, where it can be controlled, to get from one VLAN to a different VLAN. There are many reasons to use VLANs. One is that switches will flood unknown unicast traffic, and broadcast and multicast traffic is sent to all the other interfaces. Someone with bad intentions could be snooping on that traffic for other networks if the switch wasn't broken into VLANs. With VLANs, that type of traffic is restricted to interfaces configured for the VLAN. 

One option is to block torrents on the firewall, but this can be difficult to keep up with, and it depends on your company's policies to allow/disallow such things. Many companies consider this stealing of company resources; it does cost a company money to provide the bandwidth for this. If you can't block the torrents, then this is the perfect case for QoS. QoS is all about fairness, as the network administrator defines it. QoS is a topic too large to go into detail here, but I will cover some points. You may want to hire a consultant who can analyze your traffic and develop a solid QoS policy for you. To properly implement QoS, you need a comprehensive set of QoS policies that are consistently implemented across your network devices. You want to mark the traffic as close to the source as possible, usually on the access switches. Many access switches will simply mark all traffic as unless configured otherwise or for trust. You would set up policing, shaping, and queuing on your routers. Most traffic is fine to be marked as . You want real-time protocols, e.g. VoIP marked as and placed in priority queues with policing. Bulk type traffic, e.g. server backups, torrents, etc., should be placed in lower priority queues. There are also techniques like RED that will randomly drop packets in queues to prevent the queues from filling and doing tail-drop, which can cause TCP global synchronization (very bad, causes queues to alternately fill then starve). 

IPv6 is designed to restore the original IP feature of end-to-end connectivity. Each host can have a globally unique address. This fixes the problems caused by NAT use in IPv4. The RFC recommends that each person be assigned a /48 (65536 /64 subnets). Most ISPs actually will only give you something less like a /56. You can easily get a /48 by requesting it from your RIR. Most home routers can't delegate more than a /64, but that is still over 18 quintillion addresses. 

A best practice would be to use a pair of switches as the primary and secondary root switches, and all access switches are connected to both the primary and secondary root switches. Daisy-chaining switches is a poor practice that introduces SPoFs (single-points-of-failure). The failure of one switch in the chain will orphan all the devices downstream of the failed switch. 

This is a common scenario. One way that this is done is with a firewall. You can place a firewall so that the test network/lab is on the outside of the firewall. That way, you can connect to the lab from the production network, but the lab cannot connect to the production network. Using a second NIC in your PC may also work, depending on the level of security necessary. The PC could be considered compromised because it has simultaneous connections to both networks. If the lab must have an airgap, then you are stuck with what you are doing, although that would not work in some companies because you may then be using an unsafe host when you connect back to the production network. You would actually need a separate computer for the lab. 

VLAN 1 is the native VLAN, which means its traffic is untagged. That is fine for a trunk because it will be the only VLAN with untagged traffic. You tag traffic on trunks so that the other end of the trunk can separate which frames belong to which VLANs. Having a single untagged (native) VLAN will work with this. It is only if you have multiple untagged VLANs on a trunk where you couldn't separate the frames into VLANs. 

Directly connected networks. Statically configured routes, but the router needs to know how to get to the next hop. By sharing routes through a common routing protocol. 

To control traffic between the VLANs, you use something like an ACL on the router that routes traffic between the VLANs. 

A prefix list doesn't actually advertise prefixes; it permits or denies prefixes that that the router can advertise (or use received prefixes, depending on the direction). The network statements will advertise the prefixes (assuming the exact routes exist in the routing table). It appears that the configuration will let only prefixes smaller than to be advertised. This is sometimes used because ISPs will only let smaller prefixes to be advertised on the public Internet. Most ISPs will not advertise any prefix longer than , and some ISPs many not even allow prefixes as long as that. 

Those two devices are in the same subnet. When you mask the addreses with the longest mask, they have the same subnet: 

The real way to do this is to configure NetFlow on your network devices (routers and switches). If you insist on using a sensor for this, you will need to use SPAN if you have a single switch, RSPAN for multiple switches connected by layer-2, or ERSPAN for layer-3 separated switches. 

In either case, the router is necessary for traffic to get from one network to a different network. A VLAN is really just partitioning the switch into multiple logical switches that do not directly communicate with each other. 

If you have the WAPs in the same network, then it is actually pretty simple because it happens at layer-2. The MAC address is just seen at another switch interface, and the switch MAC address table is updated. Layer-3 roaming (from one network to another) is more complex, and that is where it really depends on the vendor. Some vendors can do this with Fat-WAPS that tunnel between them, and others use LWAPS with WLCs and tunnels. You can search for CAPWAP, the protocol most used to tunnel, but there are proprietary protocols, too. 

If both devices are connected to VLAN 1, then that command has no effect. That command would be for traffic leaving the interface, but if both devices are on that VLAN, the traffic never leaves the VLAN. There are several options for limiting the traffic rate on switches. You can limit on the physical switch interface with that command by applying it to the physical interface. Remember that if you have multiple links between two switches, STP will block all but one link, otherwise you will end up with a broadcast loop that brings down your LAN. 

As you suggested, it sounds like you should mirror the traffic. You can capture traffic specific to the port where that device is connected. You will need a switch with that capability. 

Ethernet can run on different media, e.g. fiber-optic cabling (supposed to be installed in a crossover fashion, while UTP cabling is supposed to be installed straight-through). So when you refer to an ethernet cable, you really need to explain to which medium you refer. A crossover cable is where the transmit line(s) on one and go the the receive lines on the other end, assuming both devices are the same type (both DTE or both DCE). Remember that UTP cabling is used for more than just ethernet, so don't limit yourself to believing that. 

Packet Tracer is fairly limited in many ways. It emulates IOS, but it is not IOS. OSPFv3 was created to add support for IPv6. Assuming Packet Tracer supports IPv6, and you have enabled , the you could try to enable OSPFv3 with something like: 

This sounds like a cabling problem. The cabling seems to work, but it is just bad enough to cause a lot of retransmissions. You should look closely at the test results that your cable installer provided. You should be able to get the installer to fix any problems. 

Patch cables use stranded wire. This makes them more flexible, but performance is less than solid-core conductors. Horizontal cables use solid-core wire, which makes them less flexible, but performance is better. These cables are not meant to be moved much after installation because repeated movement can break the solid wire. The solid-core horizontal cable can be run for up to 90 meters, and the stranded patch cables on each end can total up to 10 meters. UTP, in general, has an unloaded minimum bend radius of 4 times the cable diameter, which is about .25", so the minimum bend radius is about 1" with no tension. There is also a maximum pulling tension when installing cables: 

A switch stack basically works like a single switch with a single configuration, much like a chassis switch with multiple blades. You would configure SPAN the same way you do on a single switch. You can set up all the traffic to go to a single monitor port on any of the switches, although you could easily overload the single port and drop a lot of traffic. For understanding your traffic mix and quantities, NetFlow may be a better solution. 

Also, R4 will need a route to the source address so that it knows what to do with the reply since the original source address will be the destination address of the reply. 

Anything that monopolizes the WAN bandwidth will affect all other users need to use WAN bandwidth. Each peer that the torrent user is receiving from will try to send as much data as fast as it can. 

VRRP is active/passive. VRRP works on a LAN between a router and hosts on the LAN, and it advertises virtual IP and MAC addresses to the hosts on the LAN. The routers trade messages on the host LAN to share their priority with the other router(s). The router with the highest priority is the active router on the host LAN. If the other router(s) can't contact the active router on the host LAN, the remaining router with the highest priority will take over. This takes some time, during which traffic will be lost. I believe your switches are layer-3 switches, and by using IRF you can make them look like a single layer-3 switch which can be the gateway for all the user VLANs, obviating the need for VRRP. The links between the virtual layer-3 switch and the routers should be routed links, and a routing protocol will failover much, much, much faster than VRRP. 

Every time a hosts needs to send a layer-3 packet on a layer-2 LAN, it must resolve the layer-3 address to a layer-2 address in order to be able to build the layer-2 frame to encapsulate the layer-3 packet. That is what ARP (Address Resolution Protocol) does. A host will first determine if the destination address is in the same network as the host itself. If it is, then it will look in its ARP table to see if it already has the resolution. ARP tables begin empty, and ARP table entries time out, except for statically defined resolutions. If it finds the entry in its ARP table, then it has the layer-2 address to use to build a frame. If the layer-3 address is not in the ARP table, the host will send an ARP request to find the layer-2 address. If the target does not respond in a certain time period, the layer-3 packet will be dropped, and an ICMP message saying the host could not be found will be sent to the application. If the destination layer-3 address is on a different network, the host will use the above procedure to get the layer-2 address of its configured gateway. Most likely, the host already has the layer-3 address and layer-2 resolution in its ARP table, so it doesn't need to send an ARP request, but it will if the entry has timed out. 

The routing table contains the best routes from all the routing protocols' tables. When routes are added or removed for the table of a routing protocol, the routing table changes based on the changes to the routing protocol's table. Removing a routing protocol will remove its table, causing the routing table to remove those routes. That how dynamic routing works. The only way to retain routes in the routing table is to statically define them, but that doesn't respond to changes in the network. Dynamic routing is designed to respond to changes in the network, and removing a routing protocol (removing its table) tells the routing table that those routes are no longer valid. 

When you set a route, you need to give it the next hop. In your case, the next hop is , but your configured next hop is not. After that, you are trusting that the next hop has a route to then next hop in the path toward your destination. If not, you need to modify that router to have a route toward your destination. If you don't have access to that router, this question is off-topic since you need to have control over the network about which you are asking questions. 

IPsec was originally planned as part of the next-generation IP (IPv6), but security quickly became very important, and IPsec was designed as the Internet security protocol for both IPv4 and IPv6 (RFC 1825, Security Architecture for the Internet Protocol, later obsoleted by RFC 2401, Security Architecture for the Internet Protocol, later obsoleted by RFC 4301, Security Architecture for the Internet Protocol). Since IPv4 was already defined, IPsec is basically bolted on (IPSec packets are payload), but IPv6 was still being defined, and IPsec is a integral part of IPv6. From the beginning, IPv6 has had the AH and ESP extension headers, something not really possible with IPv4. It took longer than originally planned for IPv6 to start being used, and nodes began to use IPsec in applications for IPv4. The way applications use IPsec with IPv4 (simply as payload for IPv4 or IPv6 packets, or as tunnels where the entire packet is encrypted as payload of the encapsulating packet) can also be used with IPv6; it is really network protocol independent. As IPv6 came along, the way IPsec is implemented has not really changed, and the implementation using extension headers hasn't really materialized. One exception is OSPFv3. As IPv6 overtakes IPv4, we may see the way IPsec (or its descendants) used move to IPv6 packet headers, or it may remain implemented as it is today.