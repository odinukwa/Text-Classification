In Again more white space needed. Again tabs/space problem. I would replace the if with a trinary operator. 

The other thing you need to watch out for is the recursion here. This may work well for your test cases. But a huge list of millions of islands is going to eat up your memory. Look to using a loop instead of recursion. 

Personally I would move memory management from MyDS into the tree structure (disable the assignment and copy constructor just to remove the possibility of incorrect usage. Add a constructor that moves the data into the tree. 

Looks Good to Me. You missed the rule of three (this is a big deal). So you will need to fix that. Otherwise good code. If you want super extra credit (and you are allowed to alter TNode) then you could automate memory management by using 

In this case change two of the std::endl into "\n". Then use the last one to flush the output to the screen. Good start but you should validate the input. What If I typed Rock instead of 1. Then the stream gets broken and all further input is ignored. So validate your input and fix the stream if the bad bit is set. 

looks out of place for a public function. This looks like an internal function that is called when you know where to insert the data value. Best to just make this private. Simlify your Code 

Well to be blunt as it stands it is totally unreadable and thus unmaintainable. You should break that up into multiple variables that are combined in a way that is readable. 

If the application always succeeds then no return is an indication that it will always work and thus no need to check for errors (note: in C++ main() is special and the compiler inserts if it does not exist). Since you use the same stack in both situations. Why not declare it in main() and pass it in. Then if you need to modify it you only have one place to change (not two as in the current implementation). 

I can forgive putting the '{' on the wrong line as about 30% of developers prefer that way (the other 30% prefer to line up open and close and the final 40% don't care (as long as you consistent)). 

Since your four functions are identical apart from one method call you could write a generic version and pass that method as a parameter: 

If the members are default initialized then members are left in an undefined state. So the following constructor: 

You are using a while() loop. But a for(;;) loop would have been neater. It allows initialization test and increment in the same statement. This puts all work done on the k variable in the same place. 

When the type is not an integer (say you are sorting strings). This is not a very efficient way to do it. In C++11 we introduced move semantics which allows an object to be moved (in the case of a string that means moving its pointers and not the string). As you can imagine this makes it much more efficient than a copy. 

Then why not provide ? Not sure it is a good idea. but it is a question you should ask and answer for yourself. Style Check your local style guide. I personally don't like this as I think it makes the harder to read. But your guide may allow it. 

Do you really need these macros. If you must have them then why not name the variable copy and use the macros TRUE/FALSE 

The need to use is only required if we have shadowed variables. Shadowed variables are dangerous as you can accidently forget to use and then you will be changing the wrong variable (and how do you tell if you should be using a local or a member variable if they have the same name)! Shadowed variables are bad practice and can be detected by the compiler (and thus removed). When you have removed shadowed variables (because you code compiles with no errors) there is no longer any need to use . The use of this only creates problems so don't use it. Only put one statement per line. 

Use all caps for macros. The reason is to make sure macros do not clash with any other identifiers. Macros are not type safe. If there was a conversion from this object to int the compiler will now happily do it. There is already a type safe macro as part of the standard library. If you want to override the default swap behavior you just need to rewrite your type specific version and Koenig lookup will automatically find it. 

There is a bug. If your input string begins with a space then you don't prefix the number with a space. 

The creation of the unique_ptr here already creates an you do not need to call to convert it to a for assignment. 

Yes. Use the correct type. is a truth value it imparts meaning to the person reading the code. Humans need that extra meaning to help them understand the code better. 

No. Move semantics leaves the source in an undefined state (this is not what move semantics are for). Move is used to move an object efficiently to a destination where the source is no longer valid. 

This is never used. Also looks like a dreaded getter so probably don't want it anyway. Easier iteration 

Personally I would store the iterator (but that's just a small personal preference). Visitor Pattern You are recording visitation to the nodes in the nodes themselves. This is a simple solution but requires you to reset the whole graph before each traversal. PS you don't reset the visited attribute so you can only call once then it becomes invalid. There is a better technique called a visitor pattern. This basically delegates traversal of the graph to the nodes. But Uses the visitor object as a callback to do processing. Thus you can control order from within your code. Note: I would not think it as normal to describe a traversal as "Depth First" on cycle graphs. The graph may not be fully connected and there is no start point indicating a top. Visitor pattern: 

OK. Not an expert here so others may know better but I like to put the error checking and command on the same line. 

Don't use them unless you need too. I see no need to get the individual pieces out of the object. You should use the copy and swap idiom for defining the assignment operator. It simplifies the processes and when you create more complex classes all the hard stuff is already taken care off. 

Actually creates four vectors. A temporary one is created then used to initialize the other three. This seems a bit wasteful. I would just use resize() as they are about to be used. 

Also by using this convention you get rid of a lot of extra (+1) and (-1) from your code and it looks neater. 

Now that I have cleaned up the function I can understand what you are doing and it looks like it should work. But it requires the input sections to be already pre-sorted. I am not sure how your double loop in achieves this. 

I don;t believe you are correctly aligning your objects. 2. Realloc is wrong. if realloc returns the original pointer is not deallocated. 

But surprisingly I normally I prefer using the when the object is a pointer (or bool). I think in this case it is because it is combined with testing a nested member of a structure it just does not look correct (but as I said it is an arguable case). Edge Case What happens if the list is empty? 

Notice: rather than to prevent white space being skipped. Why are you treating a file output differently to output to std::cout? 

You should define in terms of to make sure they are consistent. Last you never want a pointer to be auto converted into a smart pointer (especially since the compiler created object will usually be temporary and destroy the pointer when it goes out of scope at the end of the expression). So you should always mark the constructor explicit. 

Never do a bust wait. This is a busy wait. Let's assume you fixed the above bug about being updated from multiple threads. 

Emplace back is usually used when you have the arguments and want to build the object in place using the arguments. By passing the object you are going to just invoke the copy constructor. As a result there is no benefit from using it. Though there is nothing wrong with using it either. Currently I am still working out when to use over but this is one situation where I would still use . Also because you pass the argument by value you are copying the object into the function then using the copy constructor to put it in the array resulting in another copy. So here I would pass by reference. 

By wrapping it in a function and retrieving it via a function call you can guarantee this already with no special code. are guaranteed to be initialized in a thread safe way. The first thread to call the function will initialize the function static object. Other threads that call the function will pause while it is created. So looking at your code. 

Control flow is usually not best handled with exceptions. But everything is situational. If you find it useful feature to use then go ahead. Creating your Own exceptions I used to create exceptions for different situations but found I never used them. So I have started simply using . The only time I define a specific exception is when it can be usefully caught outside the library layer I am throwing from. The trouble is the definition of "usefully caught". This not only means that the exception needs to carry information that I can use to fix the problem but the library itself must provide a public API that will allow me to fix the situation. If all you can do with the exception is log it (including dump to std::cout). Then is it really a useful exception to catch? 

Overall that seems needlessly complex. Design You return a value object even if you don't find the key in the tree. That seems funny. Especially since you must construct the value using the default constructor and thus your value type must be default constructible. Most containers when you search them return an iterator. If the object is not in the container then it will return an iterator that equals so that you can check to see if the value was found. Code Design There is no need to expose . This is an implementation detail that you leaking to the user. You should hide this and make it a private member of the class. When adding to the tree you only use copy semantics (on the value). You should look at using move semantics (on the value) to make the code more efficient. As a side note: because you use your tree itself is not copyable but is movable. Is this a desired trait? Must containers are both copyable and movable. Side Note Note all the methods in are used. 

Unlike new you don't support objects that don't have a default constructor. Using the C++11 varargs this should be easily doable: 

Naming convention. Personally I am not into abstract naming conventions (as it usually means you have failed in giving your variables (including members) names that make the code obvious to read). But when I do use them I try to use accepted standards: 

Why this can just as easily be an automatic variable. If I was reading this as part of your job application. I would just throw your resume away (not even file it for later consideration). 

You may have issues with in a union if it is non trivial (i.e. it has any constructors/destructors/assingment operators). From : Section 12.3 Union 

Insert Both insert operations have a lot of shared code. It would be better if you factor out the shared code into a separate function. As noted in the design section. The code can be highly simplified by using a sentinel node. Also the loop to find the end should be removed by either using an end marker in the list or by using a doubly linked list. Quick exit from delete. If this returns then is there any reason to continue? 

Your list does not support move semantics or emplace semantics. This can make the code very inefficient. 

Note: It makes little difference for an integer but if there is an object in the queue then it might. Formatting Your code is horribly formatted. Please do a better job in the future. Formatting is a critical part of coding. This is because your code will be read fro decades aftr you have written it by other humans. 

You are forcing a move of all the iterators in the vector. Rather than erasing it just free the memory and set the pointer to nullptr. That would be a much better test. You should use exactly the same code for both tests. The only difference should be the allocator used. You should have one test that uses your custom allocator. While the second test uses an allocator that simply calls new/delete underneath the hood. 

Protected! Not sure that is ever useful. But I see you are trying to say this class never stands alone and always has to be inherited from. Think I would prefer the to achieve that result. But Tomato/Tomato (you have to hear it with me changing accent). Sure the standard constructor. But in most situations are you not going to construct this with a string literal. Which means you are creating several string objects and copying around a lot of data. 

The more standard way is to use `iterators. Pass the begin and end of a section as the parameters. Remember that iterators behave like pointers so it is still relatively easy to write your code with them. You don't need to write everything from scratch: 

Also note: That if n >= size_of_int you are going to be left with zero. So the first thing you should do is make sure that n is in the correct range. Let us assume a value greater will just wrap around multiple times. 

With boolean expressions there is no point in testing a boolean against true/false. The point in making the variable boolean is so that it can be used directly and it should be named appropriately so that it's meaning is clear. This is fine: 

In the future it may be more than just numbers that you use in the expression. You want to prepare for that by using move semantics when transfering values in a couple of places. 

endl vs '\n' Don't use unless you absolutely want to flush the buffer. Probably OK here. Just wanted to note it. Don't pass pointers: 

Quick review (in anticipation of more code). The main issue I have with the code is that is not encapsulate in a class. 

Don't think it makes a difference. If your Web server is set up correctly it will never deliver php files (only execute them). 

But as a result I think you have made these less efficient than they could be. I would define all these operators in terms of . Assumptions. 

Because in C++ they don't want the library to do extra work. So the call to back() could do extra work and test if the object is empty and throw an exception if it is. Let assume that is the way it works for a second. In my code I have designed the code well and know that the method is never called if the object is empty. So the test to check for empty inside back() is slowing my code down. So I am having to pay for an extra check just because you as a beginner need. The C++ community thought that this was a high price. So they said it is the responsibility of the user of the object to test and pay the price. So that people that know what they are doing don't have to pay the price all the time but only when they need to. So the API is: If you call this when it is not in the correct state your code is broken and the result is unspecified. 

As a user of this class I could easily accidently pass the address of a Job object that is actual an automatic variable. Unless I read the code it is not obvious that the code will blow up. Even worse the code may not blow up for a while since the pointer is not deleted until after the work has been done. In this case I would use a smart pointer. The obvious one is . When you use this as a parameter you are indicating that you are accepting ownership of the object.