Briefly, yes. Zynga's Café World and PlayFish's Restaurant City uses Away3D. I think developers might use more of 3d engines because 3d is not everyone's cup of tea - they can just focus on implementing game logic and mechanics instead of meddling with math. However they would shy away from game engines like Flixel, for reasons that Nick Wiggill has mentioned. (eg. risk of middleware) Source: $URL$ 

I have thought about just coding a 2D game on Android using just pure Java and the Android SDK, no engines like libdgx, cocoa-2dx attached. I don't know if I really need to use a game engine or not. Doesn't Java already come with basic libraries and APIs for most things already? I'm not interested in the cross-platform aspect of game engines. The game is 2D, so there's no complex issues with 3D, importers, or what not. I also don't like to have to code around level editors or pre-built constructs like a character or tile class. Given this, are there any other benefits for me using a game engine to code my Android 2D game? For example, I'm clueless with OpenGL so if I'm doing it w/o an engine I would be using pure Java, would that be significantly slower than using an engine like libgdx? 

Ps. Roguelike games, which typically have a lot more objects, generally solve the same problem in a different way: they let you pick the object you want from a menu. Some of them, to deal with the potential issue of apparently identical objects that nonetheless are different somehow, also allow the player to name individual objects, or even entire classes of objects, so that one might see e.g. 

The problem with TCP is that it's a general-purpose protocol, and the way it handles these things is not always optimal for games. For example, it your game sends two position updates to the server, and first update packet is lost along the way, then TCP will hold on to the second packet until the first one has been successfully retransmitted, and only then let the server process both. In a fast-paced game, you'd probably prefer to have the second update processed as soon as it arrives and just forget about the lost first update. Unfortunately, while TCP does offer some options to tweak the buffering and retransmission algorithms, there's no way to tell it to just drop lost packets. For that, you'll need a lower-level protocol like UDP. The problem with UDP, on the other hand, is that it's a very low-level protocol — a very thin wrapper over raw IP, in fact — and takes care of none of the things listed above. Thus, if you want to use UDP, you basically have two choices: either use an existing UDP-based networking library like OGP that takes care of some of the things that TCP handles, but in a more game-friendly manner, or study network protocols like TCP and figure out how to implement the same features yourself. Unless you really like network programming, I'd only recommend the latter option as a last resort. 

Now, I've written XML files before using winforms, and the WriteXMLFile function is exactly the same. However, in my winform, no matter how much I press the WriteXMLFile button, it doesn't write the whole lot again. Is there something that I'm doing wrong or should change to stop this from happening? 

At the moment I am trying to create a tech demo in directX 9. I have a good understanding of basic lighting but, in my game/demo, I want to be able to create and light a scene like the following: 

I'm currently using the following MySQL example to make a server side high score table: Unity Server Side high score The above example allows me to create a top 5 player high score table that sorts itself based on the score amount. However, my knowledge of PHP and MySQL is limited to only that of the above example and I wish to expand upon it. What I now want to do is create a local score amount (the score the player accumulates during game play) that is updated on my server. At the moment, the server only calls the total scores once, and I want it to be polled so that it updates the moment the player earns some points. And displays this score. The reason for this, is because my high score, and local score, are going to be displayed on another device. Say your playing my game on a PC but the score is updating and showing you on an iPad (rubbish example, but you get the idea). Can anyone point me in the right direction as to how I would go about doing this, using the example I've already used? 

The character and the attack needs to be animated separate. That way you can swap out different attacks as needed.Usually the special attack is a particle effect generated using code, or a separate sprite. You probably could attach the attack to the character using an offset, for e.g. taking the character to be the attack's point of origin and positioning it (x,y) coordinates away. If it's just a runic effect kind of thing that flares up around the character, you might be able to just use a 2D translucent overlay on top of the character. You would definitely need to have more character animations though, if your attacks are radically different enough. For example, one set for your Rasengan thrusting, one set for Fireball blasting, and so on. You might probably be able to generalise your attacks as a series of basic classes (ThrustAtk class, MouthBlastAtk) and further inherit from them (LightningThrustAtk, WindThrustAtk, FireMouthBlastAtk, etc.) 

I don't think you should go with a browser game because it might entail producing 2 version of code: one for browser and one for desktop. In addition, browser technology might not be powerful enough to handle your game (depending on your exact situation). Unity might be one of the better choices for both desktop and browser deployment, but you have to consider the download of the Unity Player. While its filesize is actually quite lightweight and likely to be much smaller than your game itself, people are rather put off by the need to download. See $URL$ 

The way classic text adventure games of the Infocom style solved this problem was, indeed, by making sure that every distinct object did indeed have a name that allowed it to be uniquely identified. A detail to note is that, in Infocom-style parsers, one could refer to an object by any combination of words in its name. So, if the player came across a , a and a , typing either: 

The simple and generic solution, if you don't need to repeat this calculation millions of times per second (and if you do, you're probably doing something wrong), is just to use a loop: 

To minimize the additional latency when communicating over TCP, it may be useful to disable Nagle's algorithm using the flag. Instead, you may want to implement your own transmission buffering, collecting several small messages into one packet whenever possible (which is a good idea with UDP too). Edit: Rewrote the second paragraph per comments below. 

(Ps. I used instead of just to make sure that and end up in the valid range even in the unlikely case that the background movement speed exceeds one tile width/height per frame. It probably won't make any practical difference, but it's generally better to play it safe anyway. Of course, if you really were expecting such high movement speeds, you should rewrite this to use the operator instead.) 

As an embedded engineer you have some coding experience that is surely beneficial in terms of solving challenging design scenarios in game development. However, you would also need to brush up more on OOP languages as well as familiarise yourself with the tools and assets that a game programmer would have to interface with in code. I highly suggest you try to design and code a simple but interesting game, and see if it's really something you'd enjoy doing. And it'd be good for portfolio, i think? just my two cents as an EE engineer hobbying in game dev. 

I'm currently developing a Javascript web game for desktop users. It is a sort of tower-defense game that relies on mouse input only, developed on canvas using EaselJS. In the future, or perhaps simultaneously, I would like to adapt the game for mobile devices. I can see at least 3 potential areas in shifting from desktop to mobile: 1. resolution size and UI rearrangement, 2. converting mouse events to touch events, 3. distribution as native app wrapper or mobile Web. What would be the best strategy to facilitate this desktop to mobile conversion? For example, should I try to code the game for both platforms, or port the game UI over to mobile by branching the code base. Should I just publish on the mobile Web or wrap the game in a native app framework? And if I were to code for both platforms using the same codebase, should I register both click and touch events, or remap click events to touch using dispatchEvent? 

So I did the same. But, my program claims it cannot open the file. And I'm at a loss as to what to do next. Has anyone successfully managed to load FBX models into a Directx 11 application using 2014.1? If so, what do I need to do to get the correct lib linked? 

I have a strong hunch it's something I need to change in the int player and int realDepth values, but i can't be sure. 

This is found within my update function. I've been looking for the answer to this for hours now, but can't find anything. Can anyone please help me? 

I'm trying to make a TextMesh appear when ever an enemy prefab is hit. I currently have this functionality working. However, the text doesn't face the direction the players camera is looking. At the moment my OnCollisionEnter method contains the following line of code: 

Thank you so much for you in depth answers. These have provided a lot of useful information and I'm currently in the process of implementing the information you gave into my project. Though I currently have one issue I was wondering you could help me with. Please note, I know that I haven't really modified the code you have given me, I am just trying to get the build first, then modify it proper. If I can get at least a single particle to fall down with this, I'll know I'm on the right track. Right now, in my kernal class I have the following code: 

I'm planning out an adventure game, and can't figure out what's the right way to implement the behaviour of a level depending on state of story progression. My single-player game features a huge world where the player has to interact with people in a town at various points in the game. However, depending on story progression, different things would be presented to the player, for e.g. the Guild Leader will change locations from the town square to various locations around the city; Doors would only unlock at certain times of the day after finishing a particular routine; Different cut-screen/trigger events happen only after a particular milestone has been reached. I naively thought of using a switch{} statement initially to decide what the NPC should say or which he could be found at, and making quest objectives interact-able only after checking a global game_state variable's condition. But I realised I would quickly run into a lot of different game states and switch-cases in order to change the behaviour of an object. That switch statement would also be massively hard to debug, and I guess it might also be hard to use in a level editor. So I thought, instead of having a single object with multiple states, maybe I should have multiple instances of the same object, with a single state. That way, if I use something like a level editor, I can put an instance of the NPC at all the different locations he could ever appear at, and also an instance for each conversation state he has. But that means there'll be a lot of inactive, invisible game objects floating around the level, which might be trouble for memory, or simply hard to see in a level editor, i don't know. Or simply, make an identical, but separate level for each game state. This feels the cleanest and bug-free way to do things, but it feels like massive manual work making sure each version of the level is really identical to each other. All my methods feel so inefficient, so to recap my question, is there a better or standardised way to implement behaviour of a level depending on state of story progression? PS: I don't have a level editor yet - thinking of using something like JME SDK or making my own. 

Do you know how to implement sprites? If yes, then drawing text from a character sheet is easy: just treat each character as a sprite and draw them one after the other. The details depend on the font you have and on how fancy you want your typography to be. Obviously, the simplest case would be a monospace font, where each character is a constant-size rectangle. The font shown in your question appears to have variable character widths, which just means that you need to have a table giving the width of each character. If you already know how to work with variable-size sprites, this shouldn't be any more complicated. Just keep track of the current coordinates of the end of the text, and add the width of each character to the x-coordinate as you draw it. One minor complication is that, if you want to draw that can wrap over multiple lines, you may want to make your drawing routine split the text into words and calculate the width of each word before drawing it, in order to check whether it fits in the remaining space. (Of course, there are even fancier microtypographical tricks you can do, like non-greedy line length optimization and dynamically adjusting word and character spacing to justify both margins, but those are probably overkill for your needs.) Also, for fonts with less "blocky" shapes than the one in your example, you may want to implement kerning to make letter combinations like look nicer. A basic way to do this is to just calculate the minimum distance between two non-transparent pixels in a letter pair, and then move the letters to set this distance to the desired value. In practice, to improve performance, you may want to do this using downscaled bitmaps, or even a simplified model where each letter is first cut into a small number of horizontal slices, and each slice is then mapped to a pair of numbers giving the position of the leftmost and rightmost non-transparent pixel in the slice. For even fancier effects, like emulation of hand-written calligraphic text, you could implement things like ligatures and context-dependent letter form variants (which are actually pretty simple to implement, basically just a lookup table mapping pairs of letters to the appropriate variants; the hard work is in drawing the ligatures to begin with), but you probably don't need any of that stuff. For most purposes, just drawing simple rectangular character blocks in a row is more than good enough. 

Turns out, the answer is 11 different controllers Unity can handle straight out of the box. If you wish to add more, you need to write your own plug in. 

Is there something that I have forgotten to do when I build and run the game from the file menu? Has someone ever beaten this issue before? 

I'm trying to create an application using the Kinect to simulate the following project: Kinect Hand Tracking I want my project to have similar usability with the Kinect tracking hand and finger positions for use in a menu system, or to navigate another system. What I would like to know is; is it possible for the exact same to be accomplished in XNA using Kinect? I know that it can be done in Winform / C#, but I know XNA / C# a lot better and would (ideally) prefer to use that. 

I'm currently working on porting a particle system to update on the GPU via the use of CUDA. With CUDA, I've already passed over the required data I need to the GPU and allocated and copied the date via the host. When I build the project, it all runs fine, but when I run it, the project says I need to allocate my h_position pointer. This pointer is my host pointer and is meant to hold the data. I know I need to pass in the current particle position to the required cudaMemcpy call and they are currently stored in a list with a for loop being created and interated for each particle calling the following line of code: 

The simplest way is probably to get the angle of the vector using , as Tetrad suggests in the comments, and then scale and round it, e.g. (pseudocode): 

Assuming realistic Newtonian gravity (i.e. that the gravitational force between two bodies is inversely proportional to the square of their distance), and that the planets don't interact gravitationally with each other, but only with the sun, then the planets will always follow Kepler orbits (which, if closed, will always be elliptical). Conversely, if the planets do affect each other via gravity, then you're dealing with the full n-body problem, which can have all sorts of crazy solutions like figure of 8 orbits or even planets accelerating to infinite velocities. Admittedly, those particular examples are mainly mathematical curiosities that you're unlikely to see in your game, but still, you should not expect there to be a single, unambiguous definition of an orbit for general n-body dynamics. The best you can do is probably to just pick some arbitrary, pragmatic definition and stick to it. For example, in two dimensions, you could simply declare that a planet has completed a full orbit when its angle, as seen from the sun, equals the angle of its starting position (after actually looping around the sun). You could simply track this angle for each planet, adjusting it incrementally as the planet moves, and declaring a complete orbit when it hits &pm;360°; this way, you won't end up with false positives for planets that e.g. loop around each other and reverse direction without actually going around the sun. If the above seems too easy, you could also require that the planet must return to approximately the same position and velocity as it had before. (Again, you'll probably want to also track the sun angle, to make sure that the planet has actually gone around the sun and not just, say, around another planet.) This probably requires you to track the trajectory of each planet (which, of course, you may want to do anyway for visualization purposes) and to come up with some fairly efficient scheme for finding near matches (e.g. using spatial binning).