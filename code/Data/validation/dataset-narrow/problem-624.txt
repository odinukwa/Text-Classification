Conclusion While your code has a lot of room for improvement, your commenting was very good and helped me when trying to understand different fragments of your code. I also enjoyed playing around with your program and the functionality it provides is quite nice. 

While it is good that your program works the way you want it to (after all, that is the goal!), your code leaves a lot to be desired. Use of global variables Firstly, is essentially a global variable. Even in your class you still use even though it does not ever get explicitly passed to the constructor, nor is it a property of the class itself. This leads to a lot of well-documented problems. Lack of procedural abstraction Secondly, your function should get broken up into smaller functions, as (in its current form) it has too many responsibilities. You do this for a lot of your code (i.e. you have , , , etc.) but you need to do it for all of your code. Hardcoding Thirdly, you hardcode quite a few things, especially string literals you are comparing against. What if you wanted to change the desired responses from or to something else? You would have to find all instances of those characters in your code (which becomes tedious very quickly). What if you wanted to change the delay between each statement? This is not as bad because there is only one place you do this (in ), but it could still be made clearer to others looking to maintain your code. Scoping Also, please do not define functions inside loops or anything else - it is poor practice. Simply define your functions and like all of your other functions. Naming Although minor, some of your functions and variables are named poorly. Consider the following: 

I'm doing my first major jQuery development. It's a Widget for recurring events, and is as such a fairly complex beast. The full code is available at $URL$ for those who want to check it out. I appreciate any kind of feedback about any part of the code, so anyone who wants to take a look at it, that would be awesome. I have a couple of specific questions, and it seems best to put them as separate posts, so here is the first one: Does my directory layout fit with what a jQuery developer would expect? Is it "best practice"? The directory structure is this (somewhat simplified): 

would just do basic checking (is it a number, is it actually an option in the list, etc.). I'll leave the body of that function to you. There are a few advantages to this approach. Compared to your original, it operates within a single stack frame rather than creating a new frame for every new state. It also removes a lot of duplicate code. Compared to the fully object-oriented approach, it uses a lot less code, which means it's easier to maintain, has less potential bugs, less overhead, etc. The most significant advantage to this approach, though, is that it fully separates data from logic. You don't even have to touch the game code to change the adventure. In fact, you could store the adventure data in a serialization format (JSON and YAML are popular choices) and not even open the source code to make changes. If you worked in a game design company, you could pass off the adventure design to the artists/writers and dust your hands off, knowing you'd fully completed the engine with that single -loop. 

Overall, I think your code is simple and nice enough. I agree with the points raised in alecxe's answer too though. One thing that I noticed when skimming your code for the first time is the use of and on lines 21 and 22, respectively. Normally, a good rule of thumb is if you're numbering your variables, you might want to put them into a list. However, as you only seem to have two regular expressions, I can understand if that might feel a little redundant. Regardless, I think you should at least make those variable names meaningful by putting their intended function in their names (e.g. instead of perhaps ). Obviously this depends on your style guide/preferences. 

Why are you first removing the quotes and then putting them back? And why are you removing the brackets and them putting them back? This does the same thing, except change ' to ". It also doesn't handle commas in names, so if you have that it won't work. In that case I'd probably use a regexp. 

It's more than okay, it is nicely readable, has no problems and involves no abuse whatsoever. I sometimes do the same. 

This means I don't have the template inline, which is good, but it also means using the Widget is a bit more involved as you need the tag in the HTML, which is bad, and it is a bit of a horrid hack. Opinions on this is welcome, and even more welcome would be a third way that doesn't suck. :-) 

While it might not be recommended by every programmer, I think OOP would clean your code up a lot here (at least reorganise it in a better way). I have three main points of feedback: 1. Globals (although at least you're aware of it) 2. Hardcoding (magic numbers defined in amongst the code) 3. Redundancy (some logic can be factored out for cleaner code) Consider the following snippet: 

Without context, it is virtually impossible to infer what they mean. This makes skimming your code very taxing. What does mean? I understand how it is related to its purpose but that is not clear a priori. The same issue exists with (except this is arguably worse, as one might confuse that for your program's entry point). Other This isn't really about your code directly, but when I tested your program myself, it was unclear to me what input you expected. The prevailing convention is to have something like this 

The first thing that comes to mind is just to cache user permissions in memcache, but that might or might not be necessary. I'd try this way first and see if you run into issues. A simpler approach would be to define each user's key to be their username, then use get_by_id(). That has the advantage of being automatically memcached by ndb and being faster (I think). 

Actually, ignore my previous answer. You're looking for the binascii module. It uses C modules for performance. 

You don't need to list those as globals. Variables defined at the module-level namespace are available in functions in that module. Just remove the global declarations and you should be fine. Another thing: calling is kind of dangerous. It's always better to do this instead: 

Yes, too much for one line, yes, too confusing. Making a map an lambda for two values like that is silly, unless you are trying to win an obfuscation contest. So, the middle version is best. 

This is neat and simple, but the result is a lot of HTML inline. One of the templates is 219 lines long... :-) The other technique I use is to include the template as if it is a script in the HTML: 

With cred to @Vedran≈†ego for kicking me in the right direction, my current solution is simply to split the two regex-parts into separate parsings, the first one a split (instead of a match) and the second one a findall on the floats (because doing a split is near impossible, as - both should and should not be a separator, depending on context).: 

While this solution works, the parsing bit seems rather ugly, especially how I deal with days and day ranges. That part would be easier if I could just test if today's day of the week was in an allowed set of days, and I feel like that might be possible using , but I have no idea how to do it. Any other suggestions? I'm rather new at this parsing thing. 

The following code is intended to parse a string of the following format and return whether the current time falls in that window: 

While a full object-oriented approach would work, I would go for a more lightweight solution that leveraged Python's native data structures. First, define all of your states like so: 

And it runs an astonishing 23 times faster than the "replace" based tokenizer above, and 30 times faster then the regex based tokenizer, even though it essentially does the same thing. :-) I really did not think it would be faster to run this "dual" regex in two separate steps, and I have tried other "two-stage" variations before that was even slower, but this time I arrived at the right combination. 

I'm doing my first major jQuery development. It's a Widget for recurring events, and is as such a fairly complex beast. The full code is available at $URL$ for those who want to check it out. I appreciate any kind of feedback about any part of the code, so anyone who wants to take a look at it, that would be awesome. I have a couple of specific questions, and it seems best to put them as separate posts, and here is the second one: I have several big snippets of HTML and I'm using jQuery templating for this. My question is on the best way to include these templates. Currently I'm using two different ways, and none of them are obviously better than any other. In one case I use a string literal: