(Disclaimer: I am not familiar with HP switches, so I wont' be able to give proper command syntax for show/display commands). For a first, let's leave all routing discussion aside. AS5500 an AS3100 are on a common subnet (172.16.1.0/24) on VLAN1, so they must be able talk to each other directly. Accessing AS3100 from "elsewhere" is for later, we first have to solve a switching problem - or confirm that we don't have one. Here's two test procedures to see if VLAN1 is actually "going through", i.o.w. if it is one single broadcast domain spannig both switches 

Educated guess: The on AS5500 that IMO should not be there. Edge-Type ports are for the edge: PCs, printers, servers etc. Never another bridge/switch. I suspect that it has some influence on how the switches treat untagged traffic. Since VLAN1 is often being used as the default ("native") VLAN, frames from VLAN1 are usually sent without tags. What if one switch tags them, but the other doesn't, or expects them to be tagged, and drops incoming untagged frames, or maps untagged frames to another VLAN? There might also be a difference in default behaviour w/regards to tagged/untagged frames of the two different switch models - you'll have to consult documentation to find out. 

Small packets aimed at hammering the application of the server. Large packets aimed at exhausting available bandwidth. 

Backpressure refers to what is essentially concentration of traffic. E.g. I can have 10 x 1Gbit links internally that are all feeding into a 1Gbit link that provides me with Internet transit. at saturation point, the router can store packets in its buffer and/or drop them - with no particular configuration, a router will generally fill its buffers and then tail drop, this gives rise to two problems: buffer-bloat and tcp global synchronisation. The first refers to a case where the buffer is constantly filled due to constantly saturated link utilisation. The second refers to the issue of hosts re-transmitting dropped packets all at the same time, thereby causing a burst of traffic and thus, more drops, more retransmits, ad nauseum. RED was conceived a long time ago as a means to deal with this issue; namely by randomly selecting packets to drop during times of congestion. This however required careful tuning according to the properties and expected behaviour of the link. Fortunately things have moved on and AQM (Active Queue Management) is now the cutting-edge of the industry. A top-notch example of AQM is CoDeL - this is an algorithm that focuses purely upon the sojorn of a packet through the system and aims to ensure packets are passed within a specific time rather than caring about whether or not a certain amount of bandwidth/buffer is being utilised. 

All very good comments. I've also seen network standardization and IOS test results that can help drive ios upgrade. I would agree that vulnerabilities is high in the list, but it also depends on type of network and traffic type. For ex, a financial institution would be more concerned with security and vulnerabilities than another type of network that could be concerned more with bugs once they get hit with one thus driving change. Besides this, it's also best to disable services not needed in the network or on the devices. 

if someone were to set up an ssh tunnel to/from work or home, is there a way to prevent future SSH tunneling traffic? I understand that websense can block traffic, but users who use ssh tunneling can bypass websense or other similar products because it can't decrypt or look further in the packet to tell the difference between legitimate or illegitimate traffic. from some reading and research, I found that some things you can do are the following: - turn off SSH altogether; not allowed at all - restrict ssh access to only users who need them for access and deny everyone else ssh access - create a custom protocol to blacklist or whitelist ssh traffic by destination (assuming the lists are mangeable) - review logs for ssh traffic, review the destination IPs and check if they resolve to legitimate or allowable devices or not, or check whether there's more regular internet traffic than tunneling traffic and you can deny/blacklist that IP But I was wondering, besides these options, would it be possible to circumvent the above options through a man-in-the-middle attack? Or is there another option to block ssh tunneling traffic or even some network device that can filter/block this traffic? thanks for the help. 

This is basic subnetting/binary logic. There's 2 /25s in a /24, 2 /26s in a /25 (ergo 4 /26s in a /24) and so forth. The closest match to the requirements is to use which will leave you with one spare subnet. You cannot by definition have an odd number of subnets exist from any given subnet size. Either your teacher actually intended this and the 7 was a red herring, or somebody failed hard at math. 

This is not so much related to MLD so much as it is to listening on the built-in IPv6 multicast groups. ff02::1 is the all-nodes multicast - I'm actually surprised you don't see that too (are you sure that you don't?) ff02::2 is the all-routers multicast, any device configured to forward IPv6 packets will listen on it. 

Given the prudence and importance of address conservation, the general approach to using a /31 should be "if it works, use it". Of course, you could take this a step further and start using private space for your point-to-point links, but this obviously can be problematic if you're going to run traceroutes from across the internet rather than within your own network, although even that can be mitigated somewhat by configuring your router to issue ICMP errors with a specific source IP address. In short, do whatever you can to waste as few addresses as possible (within the limits of best-practice and feasibility, don't start throwing NAT concentrators up everywhere) 

My current setup is the following: ATT ISP ---- ATT wireless router ---- cisco 890 wireless router My cisco 890 is for internet and remote VPN access from home to my company, however, I don't have access/priv to modify or look at the running config of the router. I could however, connect to some of the ethernet port of the 890 for non-corporate traffic, which I'm allowed 1 or 2 ports for this access. So I use the cisco router for corporate access mostly, but use the ATT wireless router for regular home use (for my wife actually). I'm in the process of acquiring 4 cisco 3560 switches and setting up a server with GNS3 for CCIE R/S studying. My goal is to set up a secure remote connection from the internet to my home server with GNS3, but not sure where to set up or terminate the connection, that is on the ATT or Cisco router or even on the server. I've heard it can be done via port forwarding, but not recommended. Instead use SSH or VPN. I'm sure my IP from the ISP is via DHCP, so somehow I need to get it static or find other way to still work even if via dhcp. Is it better to use SSH and terminate at the server? If so, how would I handle this via the att/cisco routers as intermediary devices? Or is it better to use VPN? I guess I would need to terminate the VPN at the cisco router, but this assumes my company allows me to modify the config. If so, how could I handle this from the ATT router as an intermediary device? appreciate the help! 

Enable IPv6 throughout the network, until IPv6 capabilities and connectivity are on par with IPv4. Wait for the day to come when IPv4 is no longer relevant. 

Using a /127 isn't terrible, but letting it go into your backbone as a /127 is. The reason for this is that, essentially, most modern router TCAMs can typically only handle up to 64 bits of address width at a time - this means that if you're in a situation where all routes are /64 or shorter, lookups can occur in a single cycle. Anything longer and it has to perform another lookup operation. Even on a TCAM that only has 32 or 48 bit width, going beyond /64 is obviously still significant. So, my personal recommendation is to allocate a /64 for every P2P link even if you only use a /127 on the wire - that way, when you bring up your routing protocol, you can then aggregate the /127 to a /64. My personal favourite, however is to allocate a reasonable chunk of your IPv6 space purely for facilitating P2P links (in my case, I reserved a /48) - this /48 is then blocked on all network edge interfaces at ingress as a destination. In this way, you're free to just go ahead and use a /64 on your P2P links and still have traceroutes, ICMP errors et. al work, but you are not vulnerable to NDP attacks from outside. Obviously not everyone is going to care about this and if the additional cost of using longer prefixes is acceptable to you (or you have super-duper 128 bit TCAMs) then you can of course ignore everything above. How scalable do you want your network to be?