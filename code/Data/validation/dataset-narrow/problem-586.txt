Rename it and mark it propertly with . Let its return value be . In place of the you can use the shortcut : 

and you start updating the text box but the update was called not by the texbox implementing it but some other text box because someone misused it. The update wouldn't update this one but the other text box! Happy bugs hunting ;-) 

In my review I assume you cannot use EF or alike... I don't see any particular really bad practices here but there are a few minor things that make me uncomfortable when I look at your code. As the important things are correct (everything is disposed and you use parameters to prevent sql injection) there is not much left to review. But hey! this a good news ;-) 

Add an event to your new panel and raise it when it gets enlarged. You can then handle this event in the main form and set all other panels to 

You can use it for dictionaries, hash-sets, distinct and basically everything that allows you to specify an or just create an instance of it and use it without any collections: 

I don't see any reason for why the lifetime of the should be completely wrong. It's too general and probably just meant to not let you pass the question. The only things that I'm not so fond of are 

The has been extended to support formatting and max length for collections. A new check prevents it from crashing when is . 

Enum.TryParse I couldn't find the definition of but if this is your own type then you can parse the extensions directly as an enum. You just need to remove the before doing this. 

I still need to clean-up the container configuration but this shouldn't be easy done with autofac-modules also exchangable for testing. 

While making this work by implementing extensions for the and for the second is a nice trick the usage is very confusing. I don't know, maybe it's the example or maybe I don't get it but wrapping a with a only to be able to use it with a query doesn't sound very useful. The expression means that I evaluate each element of a collection but what does mean? What am I evaluating? Its properties? Its fields? Its constructors? No idea. The second line is even more confusing. What does mean? Am I looping over validation results? No! I'm looping over a person again! This is not just confusing, this is super confusing. No the biggest surprise, does not retrieve any but another . It's a func-ception :-] Nice work making it work but based on this example I don't see any practival uses of this pattern. 

There are multiple overloads that let you specify a lot of options with the TaskContinuationOptions enumeration. 

In order to create a string from a you can write an extension that does exactly that. If you can use C# 6 then you can also use the new string interpolation. 

and a null-markup-element that is used only as a builder. I'm not happy with this one but I didn't have any better idea. 

I find this method is unecessary. You're better off with normal casting then with this and its overhead. The problem with is that 

Without manual casting you are guided through the creation process so everything stays fluent. Or maybe there are better ways to suggest the fluent path? 

Common is not a good name for a class and it probably contains many unrelated methods. Try to group them in classes that have more concrete names like here the name would be great or even but at least something more specific. If I see I think: StripPrefix from what? however clearly suggests what's going on. 

Some custom object would use it like this (my real linked-object has a few more additional properties then this simple example): 

You could probably parallelize it with but the code isn't complete so I cannot make any other suggestions as I don't know how the works and what it is. 

It would also be a good idea to remove these lines from the method as they are not related to saving and put them in the class as properties with a getter only: 

I need to create a tree from a flat collection. The order of elements is defined in a specification so it's rather impossible that it will ever change... but I want the whole algorithm to be configuratble and extendable aka universal... the SOLID virus ;-) so I did the following... 

What if someone had a problem with the repository and commented it out and actually forgot to add or made any other changes ignoring the status-code? 

This property (the other two similar as well) are very fragile. Everytime you use the setter you add new values to the ComboBoxes. I guess you want to call before adding new items. 

This method should only generate a hash and not an encoded string. Encoding the hash is a responsibility for a different method. 

and hit if it worked you'll see around each formula in each cell and the results in the second table. 

What you do is a simple inheritance that needs a few improvements. You should start by renaming the base class and the models. Classes are objects and should have noun names. How about ? The models don't need the suffix and their properties don't need to be prefixed with the model name e.g.: 

When a text-box contains an invalid value an exclamation mark will be shown and hovering over it will display the message. 

Some more observations about the rest of the code: Be consistent, if you call the main class then don't name the other one just but 

Disposing You know the statement but you are not using it for all disposable types in your code. There are more like the cancellation source, the sql data adapter or the sql command. 

The should not be triggering the property-changed event. The assignment should be all it does. On the other hand if its type is an then you should use this for updates or make it an ordinary list becuase it's confusing when you have an observable that you are not using as such. 

I find enums are ofte easier to use then booleans. At some point you probably will want to search for users so consider this: 

you can simply use the extension optionally with your own comparer that can implement such things as etc. 

You could iterate over the only once with the extension where the first collection starts at the first element and the other one at the second element with . This will produce tuples with pairs such as & . Now you can filter it and pick at the same time the element that satisfies the condition: 

There's all kind of stuff you can show you are familiar with in this simple task like DI or strategy pattern: 

A parameter like is a really bad choice. If you want to be able to switch between throwing and not throwing an exception then you should have two methods. One that is called that throws exceptions and the other one that doesn't throw and don't have to catch any exceptions. You can perfectly solve it this way becasue the class already has such two methods: and that you can use for the new implementation. 

To me the method is too big. I'd split it in three parts. The first part would be the reflection stuff where you read and sort the properties - this could be a new class like or maybe an extension. The second part (maybe a method) would be the first that I cannot figure out what it does. The third part (maybe a method too) would be the second that does something but I'm not sure what. Putting them in methods would give them a meaning without you having to explain each time what they are good for. 

Where is the ? Don't you like it? You should not use abbreviations unless they are well known like html or xml etc. 

This isn't but rather . The argumetns have invalid values but they might be within the allowed range. 

I think it's very strange that the is only 99% immutable. The shouldn't have a setter and you could initialize it like the other properties inside the construtor. 

Avoid prefixes for parameters. I already know that is a parameter. The prefix is redundant. It's better to prefix private fields with an underscore like to keep parameters clean and the assignment easier . 

But these checks are another boilerplate code that I'd rather generate then write myself each time. So I experimented with the and wrote this helper. It creates a new type that implements properties of the specified interface and adds null checks if a property is decoreated with the (this is used by ReSharper). Derived types are cached. 

LINQ You have really a lot of loops there. They can all be replaced with LINQ and if you only use a jagged array instead of a multidimensional one it's quite easy to achieve. 

It would be a lot less surprising if the class implemented the interface... it's also strange that you named the method but the argument is . 

This line in the method could use in place of the empty array. I also don't like the huge lambda here . It would make more sense to make it a testable helper method in another class than immediately saving and hiding the result in a dictionary. 

Empty collections aren't considered an error. Most queries should work with empty collections just fine and return empty collections as a result. I wouldn't expect it to throw. You should check for only. 

As far as the test is concerned it's really hard to follow it. You should split it into multiple tests that possibly verify only a single case. This means you could have such test as: 

I'm using Autofac to create one of my classes inside of a static factory method . This code is working and I haven't noticed any side effects yet. Admittedly, I've only used it in unit-tests so far but I'm wondering whether there could be any issues with it later when I take it into production code? 

It depends on the collaction. Not all collection operations are . Sets return a if the operation succeeded and you use sets so return what they return. It's nothing wrong in having some feedback expecially if you are planing to do something based on the result or performance is an important factor. 

The decoder unshifts them and rebuilds the string (mainly for debugging purposes as I actually won't be doing this much). Additionaly if a letter exceeds the alphabet its case is fixed to upper-case. 

I sometimes write decorators to cache results I get from a repository or I write other caches... I don't want to write another cache anymore. I'd like to have something that'll work for anything. I've build a test-cache that I could use to replace other caches. It provides just the most basic methods. 

this will be the base for each property formatter. Next you implement it for each interface (hier just two): 

I don't like either of them because they look like multiple numbers could be assigned to multiple persons which is obviously wrong. You can get only one result for a search because you are not searching with wildcards so consider this. A person can have multiple numbers so for a person you can have a single hit. If you search for an exact number you'll also get a single hit. This can be made clear by naming the method appropriately: . Later you can add another one that can search with wildcards (patterns). 

Rather then this and catching exceptions use . This won't throw and is much faster. You should avoid exeptions where possible. 

Caching To avoid multiple loads (for each attribute occurance) the file is cached for the lifetime of a request and loaded by another helper service I call . 

Besides here I don't expect you to write a 100% bug free solution but rather create something that shows me that you know how to write good code. Code that can be improved and bug-fixed later easily. You could also ommit the implementation alltogether if you can provide a sensible API and explain what you would implement in each method. From a senior developer I expect he can write code so I don't want to see it. What I want to see is if he can think in abstractions, if he can design a modular and testable API, if he can properly separate concerns and if he knows more advanced techniques to accomplish such goals. 

The form seems to have everything you need to play the game. The other forms just extend it. I suggest renaming it to and move the logic of other levels to separate classes. I name it and I start with two methods: one that extends the form and an event handler for the card-click. By the way, your delegate does not follow the event handler convention although it tries to be one. 

I have a project where I need to search for directories and files. In fact I'm searching for paths in other projects. I don't want to just find files but I also want to exclude some directories or files from the results to avoid false positves. In particular I'd like to exclude the following paths/patterns (not regex): 

Unfortunatelly there is no objective answer to this question. Whether code is readable is mainly a personal opinion. I think you code isn't readable because it calls a lot of methods one after anthoer in a single line. I find it's hard to tell where one ends and the other starts. So I suggest adding a few line breaks to clearly separate all calls: 

But after being disposed it is not set to so using it agian after that would raise an object disposed exception. Or at least it should unless the session's doesn't really do anything useful so your code continues to work despite having been disposed. 

Like @Heslacher already suggested you should start by first getting only as many words as you need and you can express the same algorithm with two different LINQ expressions by making it even easier to understand. Additionaly you should name the parameters appropriately. The upper limit is exclusive so add this to its name. LINQ query syntax The first alternative uses the query syntax: 

Example In order to use it I just create a scheduler, specify what kind of timestamp it should generate and schedule some actions: 

Categories I suggest changing this design before it's to late. Having a table (?) with separate columns for each category (, , ) is a very bad idea. What if you introduce a new category? You need to change the database model. The categories build a tree. This means you don't have to store each category id with a listing. You know the parents so they are automatically selected if any child category was chosen.