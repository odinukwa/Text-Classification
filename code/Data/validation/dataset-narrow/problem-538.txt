Your solution seems generally sound. I would make a few changes: You are surrounding your whole code in a try-catch block. Instead, surround the area where the has a chance of being thrown (Also, use to print for errors): 

I am not sure if this is the formatting problem in copy and pasting from IDE or it was like this in the IDE in the first place. To correctly format your code here, you can copy and paste from your IDE, select all your code, and press or click the button at the top of the editing pane: 

You must only say numbers consecutive to the previous said number. You may say 1, 2, or 3 numbers at a time. 

How many warnings do you have? ANY of them means bad code. In this case, some of your variables are unused. Remove them. 

A couple of things: Indentation Indentation seems a little off in your question. Is this because of formatting issues when copy and pasting from your IDE, or is it your code? Most IDEs have a format function that formats the code for you. In eclipse, that is found in -> or the keyboard shortcut . Spacing You have what I call overspacing: 

I think I can separate Python from Java anc C++ now, so the is no longer there. But just in case, is there a stray ? Is the way this class is constructed Pythonic? Are the docstrings good? 

Some points: Formatting Your formatting is a bit hard to read. I have fixed it for you, but keep in mind of these standard Java Convention rules: 

This improves efficiency by reducing the time required to concatenate the s, as well as removing the requirement of the empty . In fact, you split the s where no split is necessary. can just simply be . 

is not only a bad name, it is also hard to read and understand. Cramming too much information in names is bad. Sure, names like are bad, but so is . That's what class-level javadoc comments are for. As for readability, java class names are in PascalCase, and method and variable names in camelCase. I suggest , and you can add a short comment about the class at the beginning, like so: 

One thing that I think is very important but not yet addressed in the other answers is: naming and abstraction. Albeit your code is short, I have to look at it and think about what these loops are doing to understand what your code is supposed to do. It's much better if that's directly apparent from the identifiers (variable and function names). Speaking of functions, there's at least one functionality that I'd put into a separate function: printing a substring. 

Just always use . Saves you from potential headaches when you later add a line of code without looking too closely. Consistency Just some small oddities, nothing of real importance: 

It's a "trick" that's fun to show once, but really don't use it. If you want to avoid the sequence of commands to compile, run and possibly delete, then write a shell function to do that for you. Global variable 

The benefit is more information - the array size - for you (and the compiler) in some circumstances. A C style array "decays" (is implicitly converted) to a pointer to its first element in most situations. This conversion loses the information about the array size. I doubt that this has any benefit to you in your particular case, though, because you can use ... range based ... even with plain C arrays, too. This saves you from accidentally wrong indexing and other, often hard to find bugs: 

BAAM! Undefined behavior due to signed integer overflow: After assigning the largest representable power of two, you do another which causes said overflow. lambdas ... Perhaps you don't want the "raw, unhidden" lambda there, but instead have names () for everything. Then, instead of writing structure templates ... how about this: 

...? DRY All these , etc can be implemented using the corresponding "self-assign" operator. This could be automated with a macro. Just as an example: 

This will be costly ... thus you get yelled at. To avoid such surprises, use the qualified function name when you are sure of the function you want to call: 

Separate logic from IO Don't put any or calls inside of "business logic" functions (like when you "calculate" the winner). Separating these two concerns allows for easy adaption to other IO situations (web app, GUI) and makes it (better) possible to test the business logic. TEST Your code should have tests. Look also into TDD (test driven development), where you write your tests before you write any code. 

And add your method in another class in another file called . That would look like (if you want to time it): 

Now let's do some actual reviewing... OOP Java is an Object Oriented Programming (OOP) language, which means it's based on objects. You did a good job trying, but if you leave a default constructor and let the calling code do the work, it's not OOP at all. Let's do some serious redesigning: 

Just for practice in the mathematical side of programming, I decided to rewrite the math functions, with the addition of the function, which the Math library does not provide, but can be easily done with where you want to find out to the th root. I also wrote this to review the Newton's Method, which works like this: Given an approximate \$x\$-intercept \$x_n\$, a better estimate \$x_{n+1}\$ is calculated with the following: $$x_{n+1}=x_n-\frac{f(x_n)}{f'(x_n)}$$ Where \$f(x)\$ is the function to find the \$x\$-intercept, and \$f'(x)\$ is the derivative. 

This looks confusing to me. return the title, which is understandable, but returns the old title and sets the title to the argument. What? I would rename the first methods to and the other to . Also, consider adding . This is the same with: 

For practice in Python OOP (first time) and for some relaxation from trying to learn Serialization in Java, I decided to write a LinkedList in Python. Now, this class would be pretty useless, because in Python, instead of: (Java) 

The second line is only two-spaced. Make sure that your spacing is consistent through your code. Don't import the whole package: 

The last case is not required if it does nothing. If you really want to tell a reviewer/code-reader that it will do nothing, simply use a comment. It is also understandable, as only the and options should do anything, and the button should be completely ignored, as it is in many real-life applications. I cannot think of a single situation where a button will do anything... SwingOverviewView 

What??? confuses me. Might want to do some naming changes. I would simply remove in and use instead: 

This is not directly applicable to above example, but ... Hide the initial value ... works nice with this, which should behave as you wanted (minus the default parameters): 

All in all there's not much to criticize. Be sure to fix the bugs mentioned in the other answer, though! 

Do you hear the evil laughter? "active" vs the lifetime of an object What happened? When you the vector from its initial size 0 to some larger size in the constructor, then the vector will be filled with default-inserted objects. So directly after construction of your object pool, it is already completely filled with alive objects. These objects stay alive all the time (unless you ). Your notion of an "active" object basically just revolves around whether one can access (through ) that object. "deleting" just moves one object out of the "active" (accessible) region of your pool. "adding" enlarges this "active" region. This is very confusing and not what one does expect from an "object pool"! Further, it puts up some requirements to that type, namely that it must be default-insertable. With the standard allocator (which you use) this means that has to be constructible through value initialization. That's a pretty tough requirement, as it basically means that needs to have a zero argument constructor. Now, if is a bit more than a simple value / data aggregation type, then its objects will probably depend on some objects of other types. To follow the SRP one wouldn't let an construct the other objects then, but rather pass it the requirements upon its own construction (dependency injection). Your object pool design does not allow this, though. In short: You sign yourself up for lots of future trouble. To fix this, use for your vector in the constructor, and actually construct new objects when adding (make of the vector accessible) and destruct (terminology is important!) them when you want to get rid of them. To keep that later operation fast, swap the last element and the one you want to get rid of and then the last. (Of course this only works when order doesn't matter. Moreover, it invalidates possibly obtained references to the last element.) Swapping done right Calling directly is almost always wrong. Bring it into scope with , and then just do an unqualified call: . This allows ADL to kick in and find potentially useful user-defined functions. Provide a complete interface provides , which - like yours - does bounds checking. It also provides which does not. Thus, I'd hope for (expect) your class to provide this feature, too. Furthermore, I'd follow the terminology used by the standard for adding / removing elements here: (or ) and . Expose the allocator allows to use a different allocator than the standard one. You should expose this with your pool, too. That allows for object pools whose objects have automatic storage duration ("are on the stack") when used with such an allocator. 

In See all advice in . In Again, see all advice in . In Not the A again... See second piece of advice in . Good Job! Hand Evaluators are very hard to implement. It's very courageous of you to tackle such a challenging task (as you can see, there are quite a few bugs). Good luck improving your code, and I hope to see a follow-up after the bugs are fixed! 

Don't reinvent the wheel, unless you were required to. Java has a method that you can use easily, e.g.: 

Even though it saves a lot of lines and typing, it's at the cost of performance and readability. Import each class individually. 

Since Java 7, there is such thing as a try-with-resources statement, which automatically closes the reader when an exception occurs, which you are not doing here. Your current code has memory leaks! With some other improvements: 

Similar to , but and result in , and every other combination . What is happening is that the ASCII values are 'd and 'd. Is this really what you want? In this case, you have to do it the tedious way: test each of them to : 

Though this program tells the truth (unless you change the source code), it does tell Fibonacci numbers, depending on the user's input. Keeping in mind of all (or most) of the feedback given from previous questions, I wrote this program to see how well I have progressed. 

This is the end brace of the previous method plus the new method. Again, a couple of things: Lines 1-2: Extra newline between Line 2: Should be separated into two lines: and declaration Line 2: Space before brace Line 3: Already mentioned, space before brace Line 6: Extra newline serves no purpose, but can be left there if wanted Result: 

This code seems to be a specific BucketSort made for a specific program. I would instead create a more generic BucketSort: 

Why the "A" in the middle? I would remove it completely, as it both reduces readability and is doesn't add anything to the meaning. Same with all the other ones. In 

Now that's not correct, is it? The only tail recursive functions in the code you showed are (thanks to the short circuiting ) and (where the recursive call actually is in tail call position). In there's in tail call position, in and it's a . An example of how to transform such linear recursive functions to being tail recursive is shown in Renzo's answer. "Only car, cdr and a bunch of basic predicates" If something like that's ever a requirement (for example in a test you have to take), then ignore it at first. Write your code using , and all the other handy utility functions. Then just write each of the functions you use yourself, using "Only car, cdr and a bunch of basic predicates". Everything else leads to a nightmare. Oh, and don't forget to also test the utility functions you wrote yourself (including edge cases)! Nothing's more frustrating than finding a bogus after hours of debugging ... Being fast Renzo already showed the IMO correct approach to such a function. If (and ONLY if) you need a faster solution (e.g. when this is run in an inner loop) then you can also achieve it in a single pass over the list by remembering the cell before the last occurrence and modifying its cdr to point to the cell after the last occurrence. 

But if you're using such a macro, better keep it "behind closed doors", e.g. only in the implementation file. Since these operators are probably the only ones in this specific code base it's very debatable whether it's worth the effort, though. 

I cannot provide an answer for this, as I'm not sure myself, but instead I leave a comment on two regarding your code: Don't break encapsulation 

performance related comments still under construction ;) Ok, I got a bit hooked up here, and I think I've got something usable out of it. I'm though not yet posting the code as it's late here and currently really a mess, so I'll tidy up tomorrow and post it then. Teaser (ignore the x-axis label): 

IMO this is a huge imbalance. The basically controls and does everything with the small exception that it's not shuffling the cards nor handle the player's bets / funds. As such, it's a violation of the SRP.