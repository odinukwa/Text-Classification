I have deleted my earlier "answer" which I wrote on a phone - the image is illegible on a phone, and almost on a laptop. is part of macOS on many Macs. is a powerful command, but DANGEROUS - it will happily overwrite almost anything without warning. The reason it failed is because you are trying to write to a disk with mounted partitions. You could "fix" this by unmounting, but it is still dangerous. I use the following script, which checks to ensure you are writing to a sensible place. However I strongly suggest you install and use which also has safeguards. There have been problems with recent Foundation images (due to the use of incomplete blocks) which handles. 

I agree with Joan's comments. The serial has a large buffer (about 200 bytes I think), so you can poll it infrequently. About once per second has minimal impact on processor. You may be interested in a function I wrote for the Pi. The available libraries have serial read, but there is no equivalent of to read a line of data. 

Going further into the FAQs we see more useful numbers for the Pi 3 based on average & peak consumption. Peaks: 0,75A when booting, 0,55A for video playback (H2.64) and 1,34A under stress. I'd say that if you are able to boot the device, you'll be able to do video playback. You won't break the Raspberry Pi 3 by testing this, worst case scenario is that it won't (fully) boot or shuts down. Give it a try on your USB 3.0 port. Let us know what happens! 

Done! You can make the partition your SD-card read-only (but there wouldn't be any writes anyway). Also, if the SD card would ever fail again, you have a backup of the partition on your USB device. Optional If you have a Raspberry Pi 3 B, perform these extra steps (on top of the previous steps) to not need an SD-card at all. 

Since the Pi Zero and the Pi Zero W are identical in hardware (except for the addition of WiFi and BT) and you can install RetroPie on top of Raspbian (which supports WiFi and BT), I don't see a reason why it wouldn't work. 

Your Raspberry Pi Zero takes a little while to boot, and there's a chance that your Windows machine is retrying the USB negotiation while it's doing it. By the time that the Raspberry Pi is ready, Windows may have given up. I've found the USB OTG network connection to be much more reliable if you power up the Zero from a different USB source (I've tried a power adaptor and a USB power bank), then once it's booted, plug the Zero's data USB cable into the computer. It should be recognized as a network device immediately. If you're feeling brave you can remove the power USB connection as long as the data connection remains attached. Also: OTG mode can apparently be unreliable going through a USB hub, so try connecting the Zero directly. 

A crude way of keeping the connection alive: on the Raspberry Pi, create a crontab entry () to ping a host once an hour:- 

Partial solution, which needs research on your part: you'll need to do a two-step process using and . Install both: 

The settings from the WiFi Config GUI are remembered across reboots, and it starts wifi on boot so you can do command-line things with ease. 

It is unsafe to connect GPIO to 5V at any time. GPIO are 3.3V tolerant. You can get away with this if you use a high enough resistor, but you run a risk of damaging the SOC. The Pi is NOT " allowing current into the GPIO pins" the current is flowing through the substrate diodes to 3.3V, and once this leakage current exceeds a safe value will destroy the SOC. You should use MOSFET or transistor drivers if you need 5V. Alternatively you could try running your LED from the 3.3V supply (pin 1). 

I want the equivalent of fgets(), and was going to write this using serialGetchar but the timeout caused problems, requiring post processing. I realised the required functionality was already in the kernel, it just required different initialisation. 

There is NO NEED to do anything before a reboot. If you issue a command Linux will manage an orderly shutdown of the software. This is, however, a poor way of ensuring a reliable 24/7 system. If it crashes there is no guarantee the reboot itself would happen. The normal solution would be to use a watchdog timer. The Pi has an inbuilt hardware watchdog which is suitable for the purpose - although setting it up can be a bit tricky. It SHOULD cause a restart on system lockup, but it would be better to have it monitor your process. As a side note your probably wouldn't work - you should specify FULL PATHS to all executables, including . 

You will need level conversion (something like 4× 74AHCT125), and use the 5 V power instead of 3.3 V. Also, there's a good chance that the 16 optoisolators are drawing more current than a Raspberry Pi can supply, and that might be causing your USB controller (and hence Ethernet too) to shut down. Backfeeding 5 V into the 3.3 V GPIOs could well damage your Raspberry Pi, especially when the 5 V is coming from a board with lots of inductive loads such as relays. 

As has been answered in the comments, Raspberry Pis don't generally have a device. The GPIO serial port is typically , although that's not always the case on a Raspberry Pi 3. All available serial ports belong to the dialout group, so for convenient read/write access it's best to issue this command once: 

… although you could just have it on flying leads from the GPIO. The idea doesn't seem to have had much work done on it since the early days of the Raspberry Pi. I'm suggesting that an SPI-based Micro SD adaptor should be able to work plugged into the GPIO. It's not going to be very fast, it will likely need kernel drivers, and you're probably going to have to do some magic incantations to stop the system croaking if you pull it out of a running Raspberry Pi. But these devices work well with µcontrollers, and the Raspberry Pi has all the right data lines. It's just a small matter of programming to get it going … 

See "Driving a relay" on $URL$ and connect your fan instead of the relay. If you cannot follow this, then I can't think of any way to explain it in this forum. You should look for some books on electronics. There are thousands to choose from; you can probably download some tutorials from the web. If you have never done this before then I WOULD STRONGLY SUGGEST that you have a play with the circuitry before attempting to connect it to the Pi. I might point out that you shouldn't need a fan. In Sydney, where the summer temperature can exceed 40℃ I have never seen my Pi exceed 50℃, even in a case. 

The activity of the LEDs is now controlled by Device Tree. See There is a limited ability to control the LEDs 

I assume you want the script to run on boot, but without having to log in. There are many ways to do this, but you could just put your code into rc.local NOTE You do not need sudo, as the startup code is running as root. You cannot edit directly as it is owned by root; make a copy to edit and replace the original (with the correct permissions). Only commands which can be run without login will work, of course. 

If this doesn't work right away, make sure to power cycle your Raspberry Pi (, disconnect all cables, wait 10 seconds, connect all cables and let it boot again). Then try to make user pi owner of the root folder of the USB device. 

Before we continue, a default Debian/Raspbian installation has read-only support for NTFS. Try installing ntfs-3g for read & write access: 

If you feel like file corruption is one of your major problems, consider moving the entire OS away from the SD-card. On a Raspberry Pi 1 / 2 / Zero (W) you need at least some boot files on the SD-card but you can run the rest from a USB device. With a freshly downloaded image: 

I should also mention that some people are using SSH over USB for the Raspberry Pi Zero (without using WiFi or ethernet). This is done by enabling "gadget mode" on the Raspberry Pi Zero, allowing the Raspberry Pi Zero to become both host/slave over USB. 

I don't know how familiar you are with GNU/Linux, but here is the explanation of the suggested commands: 

You say "copies whole card rather than actual image". What do you think the "actual image" is? An image is usually a copy of the whole. You can copy portions using but this usually requires manual editing of the partition table to match the target. You can use the which is available in the GUI of latest Raspbian to make a copy to an empty SD Card mounted in a SD Card reader. This works to a larger or smaller card. 

Why did you install if you want to run a GUI? This does not include an X server. It is not impossible to upgrade to a full installation, but I suggest you do a normal installation. 

As in Ghanima's answer the 2 are almost certainly connected together. There are very good reasons for separating power and signal grounds in many devices - specifically minimising crosstalk and voltage drop. If you are powering the board from the Pi over relatively short connections neither of these would be of concern. Just use a single Ground. 

(the command is there to remove group so the new user does not share files with ) NOTE editing the sudoers file is NOT recommended - many have broken their systems by getting this wrong. 

Is ssh running? The default has recently changed to have it turned off. ssh can be enabled on first boot by creating a file called “ssh” in . As can be written to by any OS that understands SD cards, this extra step is easily done on first installation. It does not need to be done again with the same card image. 

As suggested here, go to Build → Set Build Commands and change references to to in the Compile and Execute sections. After that, Tk will work as expected: 

I don't think I can quite answer all your questions, but pssh (known as on Debian-based systems) can pass the host name to the remote hosts in the PSSH_HOST variable. In order to do this, though, in the of all of the remote machines you need to ensure that there is the line: 

Sometimes, even if you've changed the host name via , the settings don't stick. To make it permanent: 

If you absolutely must run Puppy Linux, there's a version for the Raspberry Pi 2 & 3: Quirky Linux 8.1 for Raspberry Pi2 and Pi3. But I can't recommend running it at all: it defaults to running everything as root, which is about the worst idea ever.