I actually wrote an Action Research paper on getting student feedback as part of my administrative license coursework. Student feedback is an incredible tool to use to improve professionally! Just to add on to Peter's answer, I have not had good results with anonymous surveys. I've found that, although there may be some freeing of tongues associated with anonymity, most of my students (at least at the high school level) mostly take the opportunity for a freedom they are often more interested in: freedom from creating thoughtful answers. I explain to them that if they really don't feel comfortable writing something, that they don't have to, but that no one is asking me to do this. I just want to make my courses as good as they can be for them and for future students. I also mention that I hope that they think enough of me (and feel respected enough by me) to know that I would never alter someone's grade on account of honest feedback. I ask the same five questions in every class. The questions are a very loose adaption of Liz Lerman's gorgeous feedback system for dance classes, by moving from positive to negative, and introspective to outward-facing. If I want any additional questions (such as Likert-scale questions, or something else particularly course-specific) I put them at the top before this main set: 

The Technical1 Across the nation, many states have either legislated (or are currently in the process of legislating) mandatory CS instruction, so this is a fantastic time to find a job in CS education. In general, there are two paths into the classroom (at least in the public schools). The first way is to go back to school and get a traditional education degree. There are many graduate degree options available in every state to accomplish this. The degree program will also typically walk you through the process of getting your teaching license within your state (though details for licensure in ever state is but a few search terms away!) The second path is often called alternate route (though some states may have different names for it). Typically, an alternate route position is created by working directly with a school that would like to hire you even though you have no license, and then working with the state through them. There may be a background check needed before you are even allowed to apply. Again, your students should search for "alternate route, StateName" to get a sense of the procedure and requirements for their target state. The Emotional Tell them to be prepared for a very steep learning curve when they enter the classroom as a teacher. While attrition rates are nowhere near the fabled 50%, they are still quite high, and there are many, many reasons for it. The first several years are physically and emotionally punishing. In my experience (at three schools so far), getting started at a new school or in a new position requires an absolutely breathtaking amount of work just to survive for a few years. During my first three years as a teacher, it was not unusual for me to be in my school building from 7:30am until 11pm, only to report back the next morning and do the same thing all over again. Weekends were for planning, and vacations were for catching up on mountains of grading. Along with all of that work and exhaustion also comes the emotional roller-coaster. The highs are exhilarating and the lows can be quite dark. If you can make it through the first couple of years, it really does get easier, and you can switch out of "fight or flight" and really start honing your craft. That is when the magic really starts :) Finally Tell them to join professional associations (like the CSTA). And, no matter how much they need a break, go to at least one conference during their first year. Those conferences will bring them a million ideas, give them a chance to meet other teachers, and also remind them of how very sweet that light at the end of the tunnel is. And tell them to find some place they can go to with questions to help them deal with all of the bumps and pains along the way. Perhaps even... this very site? ;-) 1 - My knowledge base is primarily in the state of New Jersey, but I have reason to believe that many states work very similarly. 

Much of what has been said already is wonderful. I would like to point out that Mike's Pez dispenser visualization is brilliant, and lends itself to a direct lesson with manipulables. You can take a few of them into an actual classroom, mix up various Pez colors, and show all of the standard operations of a stack in a way that they can physically play with. , , , and are all clearly defined operations in a real life Pez dispenser. Let the kids wash their hands, and then use tiny bits of paper that the kids write on and place on top of a pez brick prior to loading it into the dispenser, and you will have a natural toy with all of the standard operations. And it goes without saying that the kids will love to eat the results of each operation as they sort out their algorithms. :) I also wanted to add that if your kids are familiar with linked lists, that is a great way to show a stack implementation. Where stacks matter a tremendous amount in my instruction is in AP Computer Science A when talking about variable storage and scope, and in our Data Structures course when we talk about how function calls operate. 

Michael0x2a's recent question reminded me of a problem I've had teaching about Nondeterministic Finite Automata in the past. I can get my students quite comfortable following and creating DFAs, but when I show them NFAs, they learn to follow without learning to create. They rarely become comfortable enough with the toolset to make any significant use of it, and when given the chance on any problem, they virtually always restrict themselves to the DFA tools. How can I make $\epsilon$ transitions and multiple transitions from a single state on the same input character simple and clear enough that students will use the tools with the same fluency and freedom that they can with DFAs? 

Just like @Peter, I also present computational complexity when I introduce sorting and searching. Even though the topic is not part of the AP Computer Science A curriculum, I present the concepts within that course. During that lecture, I have them figure out the $O$, $\Omega$, and $\Theta$ (where applicable) for every sort I present. We do, in order: 

It depends so much on what we're covering. In principle, anything which gets them doing or moving also gets them learning. Here are a few more ideas: 

All of the coding done by students during this course is in Scheme, so labs that naturally lend themselves to functional programming paradigms instead of imperative ones are appreciated. My best labs tend to present a series of very short lab assignments, and either present them in escalating order of difficulty, or provide some options to the students about which ones to pursue, to smaller-scale ideas are also a better fit for my class structure.