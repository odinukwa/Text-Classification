In Haskell you can always use , see The Haskell Report. So your original code could be written as an one-liner as follows: 

From the readability point of view, I'd suggest to keep some maximum line length, like 72 or 80 characters. Beyond that it's difficult to read. Also instead of having , declare your own data type with 3 constructors. Not only it'll be simpler, but the constructor names will also be more descriptive and it'll be easier to understand what's going on. You should also document the function better, it's not clear what the argument is without thoroughly inspecting the code. A small improvement is also replacing nested s with a statement. In general, I'd say that it's not really possible to make a genuine single-pass solution. Obviously we can't avoid checking the last element, if the list is a palindrome, and we need to have the first element to compare it to. So we'll always have to either get to the last element at the beginning, or keep the elements as we traverse the list, to have them for comparison when we get to the end, So we can't get to the situation when we just traverse the list from the beginning to the end, releasing the elements already traversed. In your case, you're also traversing the list twice, although it's somewhat hidden. The first pass is the recursive call to , which gets to the end of the list. And the second traversal is occurring in the line 

Yesterday and today I've made a very basic syntax highlight. It creates a function in the object that handles part of the job: 

This code was written purely for fun, but that's not an excuse to write it poorly. Still, I feel that there's something to improve on it. Besides of any performance issue that there might be, and some readability crimes, what else can I improve in this code? 

First, you have that dangling . You are currently wasting too much CPU! You repeated 5 times! You have no idea how slow that is. Store that in a new variable. You could remove repetitions, like this: 

Why the double ? You only need 1 and it is outside that , since both return the same and there's no more code. Library misuse: You repeat 4 times! You can chain everything and it will work. That's what jQuery is for! Please, chain them. Duplicated event handling. You have this: 

You are extremelly inconsistent with your backticks. Either you use it or you don't use it! Don't mix both, please! 

Knowing it is a rather large script, I've tried to split it into multiple functions, to make it easier to understand, read and maintain in the future. You can see the complete instruction list on $URL$ As far as I know and tested, this is working as it should. All it's functionalities function as intended and there seem to be no obvious errors. Regarding readability, error handling and readability, is there anything else I can improve? 

For comparing them, you can define an instance to simplify your code. Instead of describing all the possible comparison states explicitly, you can take advantage of the instance for tuples. So if you want to compare first by height, then by the Y axis and then by the X axis, you can write: 

Note: The last part is similar to what you have done in your . Realizing that is an instance you could have written 

This returns a pure result, but works somewhat more efficiently than (which is otherwise the way to go in Haskell), at the expense of being more imperative. 

Definitely a good idea. You might later decide to internally represent the data type differently, for example in , and this way you can do it without breaking the interface. But depending on the expected usage, you might include such conversion functions. 

Further ideas: In addition to insertion and deletion, there are two other fundamental operations on search trees: 

What you are experiencing is a common problem that occurs with threads and lazy evaluation. What happens is that the thread creates only an unevaluated thunk, which is passed through to the main thread, and evaluated only then, and the exception is thrown there. This is also a very good example why using exceptions in pure values is a bad idea (but of course if you're making a library like this you have to take this possibility into account). The solution is to fully evaluate a value inside the block, so that any exception that might occur is thrown there. For this we need a combination of two functions: and . The former creates an action that forces the evaluation, the latter one performs deep evaluation (to a normal form, not just to a weak head normal form). Also you might also want to separate the return value from the thread action. If you're not going to operate on thread actions, you can even omit them from the data type, as once you start an action, all you need is the channel. An updated solution could look like this: 

As @Dan said, you are re-re-re-re-re-forcing jQuery to painfully look for the header, every time you scroll. Can you imagine how slow that is!? I will take @Dan's suggestion and change it a bit: 

Now, how will you distinguish between an error-ed query and a successful one? You can't! And that makes angels angry and cry. Return in case of error. 

This won't be a very in-depth review since I don't know angular.js, and I will focus only on some superficial issues. 

If you want to support older browsers, this is required. Otherwise, just ignore this, since all modern browsers support it. (Partially or completelly) 

Notice that you have to use instead if you are using this in JSON! As I refered earlier, I would review it as an object. 

To avoid 'poisoning' the object, I only created 2 variables and use one of them as an (The other is just to save if we are running in Javascript or PHP). Was this a good decision? What else can I improve on my code? 

As pointed out before, in a comment, non-magic methods in a class shouldn't be prefixed with . Since they are private, they are prefixed with . 

Performance: Performance is quite satisfactory. It takes around 2.5s to search 9-bytes long repetitions, on a 8.58MB string, on my machine, using Google Chrome v47.0.2526.106. Using IE11, it takes over twice the time (around 5.6s)! Screenshots: Google Chrome, IE11. The time it takes is always around the same (with very small variations), which is a good thing. Running this code on a string that is 10% the size will take 10% of the time. That is, for a string that is 0.86MB it will take around 250ms. This is the code used to test: 

So I'd suggest to split the function into even smaller ones, each targeting one of these problems. While the resulting code is larger, I believe it's easier to comprehend and more maintainable in the long run: 

As suggested, I'm doing a review myself after a few years. First, let's use GHC's extensions to derive the phantom types from data definitions. This also has the advantage of having proper kinds for each of these types. 

Just one more note, please post code that compiles, especially for CR, it's much easier to work with; see $URL$ 

with the appropriate instance and supply the minimum monoid instance where is the infinity and takes the minimum of its arguments. For example could be greatly simplified by this. The comments are sometimes somewhat misleading, for example in Nothing is interpreted as 0 otherwise it's not clear what "otherwise" means. 

Easily check that a function keeps the required invariant when creating/manipulating nodes. Each value would be self-contained, depending only on its own subtree, thus can be shared within multiple trees. Following from 2., you can implement the operations on trees in such a way that each takes just O(log n). 

by setting , you get what you're looking for - converting a to . You just need to supply the two function for folding, for example 

This review will be entirely focused on your class. There's quite a lot to improve. Let's analize by method: __construct() Lets check the first victim: 

This should do it for you. It throws an if the imge is invalid or if it can't write to the location. 

This helps the code to be more readable and reduces the nesting level. Too many chained s and loops will cause your code to be hard to read. 

Besides this line being repeated, it also has the number of rounds to run. You should create a constant for that, at the top. 

As far as I know, it is working as it should, returning when expected. Is there anything else I can improve on this code, regarding performance or readability? Or even a better way to do this, without that pesky ? 

This part can also be used for the block. But a major concerning area is that regular expression. It is made to match newlines, the first and a space and . Here's my proposal: 

The on the same line is target of discussion. In my opinion, it should be in a line on it's own but most people prefer this way. Other things like this: 

Shows that it still takes 4-5 milliseconds, on Google Chrome (on my pc), while @Kruga's ES6 answer is a lot faster (0.9-2 milliseconds). Here are some improvements I've made, without any regards to keep the programming style integrity: 

A small improvement - is . Of course you'll lose the nice indentation. IF you don't mind repeating elements (which is what you have in the original shell script), you can use : 

Just one remark: When handling resources, I'd strongly suggest using for resources that are obtained at some point and later released. Not only it makes your code much safer, it clearly demarcates which resource is used in which parts. And that also prevents separating opening and closing of resources, which is often a hard-to-find error. 

I quite like your aim for simplifying the function and factoring out the generic part. One solution (untested, just compiled) could be done using from : 

Here results into , where the result is if the character is or if it doesn't match any supported operation. And then we use twice from , which, specialized for , applies to yelding . 

Both these functions are polymorphic with no coupling with . The final function is then expressed just as 

Updating a field in a complex data type is a common task, and it can be greatly simplified using the lens library. Instead of 

Be sure to always include types for top-level functions. Without them, the code becomes very quickly unreadable. For example, would you know what does and what is its type, if you didn't write it yourself? In many cases you can immediately judge what a function does just looking at its name and its type. If you do 

Based on what I've seen on Firefox 53.0.3(32-bit), on Windows 10, my implementation is around 5-20% faster most of the time. You can try it bellow: 

Remove . It's useless there. Change the id to Give the class to the . The is the one that will control the width of your . It makes sense to set it this way. Closing in the same line Since you are using jQuery, later on you may want to use the pseudo-selector , which won't work if you have newlines in it. 

Same goes with quotes. You have single-quoted and double-quotes strings everywhere! Just pick 1 style and use it! (My recommendation goes to single-quotes.) 

This is nowhere perfect, but it is better than storing it in plain text. This is just a tad better than nothing. Still, it isn't safe. 

You aren't validating your images properly! This allows me to send you an image file with a webshell. Something like this: 

Your validation is scaringly non-existing! You currently don't even check if has the method . You don't check if is an object! Here's how I would do that: 

And with this, I conclude my review. As I said before: the code is hard to read, follow and is very brittle. Object handling is it's weakness. 

Next, as pointed out in the comment, it's better to short-circuit if the property fails. It's more efficient and also more idiomatic in Haskell. Use an accumulator only if you need it. Something like this: 

Looks like you're on the right track, and this might eventually evolve into a parser, or converge to an existing one. From software engineering point of view, I'd suggest to make a . This better separates its API from the implementation, and allows to do changes later without breaking the API. Notice these two functions: 

The data structure doesn't help in determining if the required invariant holds or not. holds information that is outside of its scope - its level in the tree. This means, among other things, that a node can't be shared between multiple trees, which is something you want when manipulating trees (a new tree is just a slightly modified version of an old one, sharing most of its nodes). Your design focuses only on creating a tree from a list. If you don't need any other operations, that's fine, but if you want to do more operations later, like insertion/deletion, merging trees, etc., it's going to be problematic. In particular, for some operations, when the total height of the tree must change, you'll have to update the whole tree. Most likely, it'd be possible to find an arbitrarily long sequence of operations, each taking O(n) time (where n is the number of nodes in the tree).