I am not quite sure which variable(s) is (are) useful but let's try to improve this in such a way that code looks easier to understand but it really does the same thing. First thing : the can be factorised out of the two branches in the block (you might want to use the keyword for this step). Once this is done, you have a test with an empty block, it might be better to negate the condition. We now have this : 

Data structure I have troubles understanding what the returns data structure is supposed to be. A dictionnary mapping each category to a single update is a bit weird. Wouldn't it make more sense to map each category to a list of updates ? I've tried to emulate some item/category hierarchy to see what was happening but I might have wrong assumptions about what your code is suppose to retrieve. For the record, here is the corresponding fake function and the value returned: 

Because you don't really care about the order of the letters in the word, you could perform some simple preprocessing in order to deal with fewer words : 

This loop can be stopped when we do not have the condition as will "miss at least one element". Now, this can be summarized with a single boolean flag (that could be called or something like that): 

About You set to False at the very beginning and make sure you reset it back to False at each iteration so that the next iteration works fine. It would be clearer to initialise it to False at the beginning of the iteration. You could also set it to . 

in : can be re-written . Also, Python does not handle deep recursions very well because it does not perform Tail Recursion Optimisation. If needed, you can rewrite the function: 

If you ever change the label of (which most likely happened already - I assume that is its old name), things will fail and you'll have to fix it in different places in . What about doing : 

Many thing can be improved to make your code faster and clearer: Multiple useless calls to You keep calling on which is a string already. You can replace every occurence of "str(ter)" by "ter". The 2 loops with (apparently) different loop indices can be written in a single loop Unless I am missing something, the 2 loops could be written with a single loop. Loop like a native I highly recommend watching Ned Batchelder's excellent talk "Loop like a native". In a nutshell, any time you use and together, there is a better way to do it. In your case, after taking the comment above, the code becomes : 

You naming convention is a bit weird. My assumption is that stands for "float latitude". Because it is quite easy to know the type of a variable, there's no need for having the prefix. You don't need to cast to in . You don't need the temporary variable in especially as it makes the mathematical formula harder to read. Your method seems to be doing two things : returning a value and updating a member. It would be clearer to have a (const) method returning a value and another method using it to set a member. 

Style There is an official standard Python style guide called PEP 8. This is highly recommended reading. It gives guidelines to help writing code that is both readable and consistent. The Python community tries to follow these guidelines, more or less strictly (a key aspect of PEP 8 is that it provides guidelines and not strict rules to follow blindly). It deals with various aspects of the code style: naming conventions, indentation convention, etc. You'll find various tools to try to check whether your code is PEP 8 compliant and if is it not, to try and fix this: 

Style Python has a guide style called PEP 8. If you have no good reason not to follow it, just follow it. You'll find various tools to check your code (pep8, pep8online.com/, etc) and even to fix it more or less automatically (autopep8). Here's a list of problems detected : 

splitByThousands: By taking into account previous comments (types, divmode, etc), you can already get something more concise : 

Your loop can easily be rewritten into a more concise (and more efficient according to my benchmarks) way using : 

It is quite hard to understand what your code is supposed to do. Let's try to progress little by little. I've based my analysis on the test cases you have provided. 

I'll assume we are using the option from now. In order to integrate this part of the solution in your code, let's remove the duplicated code from what we have in the part handling the queries : 

Naming (/) is either wrong or very confusing. There is no point in doing . You can probably once you've done because new iterations won't do much anyway. 

User experience From a user point of view, it would probably make sense to stop amendments when ig given as a line_number. Having 2 questions asked to exit is a bit un-natural. Separation of concerns It is a bit weird to have the function to ask the user for a file name. Also, we have the logic in 2 places. A better idea would be to have the file name given to the function. Performing simple substitutions, we have : 

I don't really understand what your code is supposed to do but I can see some room for improvement so let's go! Style Your code looks good and PEP 8 seems to be respected. I find the spacing in the argument lists a bit unusual but he... Also, your functions probably deserves some documentation like docstrings for instance. Improvements is not needed here. 

And you should define and as unsigned int. Format your code The indentation seems a bit off in your question. I don't know if it's because you pasted the code in a wrong way or whatever but your favorite text editor can fix this easily. Tell what you want to do You are not describing anywhere how your program works : is not enough if you don't explain what the options are for. Also, it should be described somewhere that your program will affect only letters for instance. Move variables to the smallest possible scope It keeps things easier to understand and to split into smaller functions. At this stage, the code looks like : 

(I took this chance to replace with just in case we ever reach something after 4 for whatever reason) Then you could put the content of the else-block and the content of the if-block in functions on their own but this doesn't seem really required to me. 

Split your code into re-usable functions I just realised that vnp comment explains this already. nothing to add here. A few tiny code comments You don't need to use in your case. Also, you don't need a in your decode function : an would do the trick here. 

Pretty shallow review : You don't need to write a class for what you are doing (and I suggest you have a look at this video). Your class does not encapsulate any data and you just use it to have your functions in a the same entity. I guess things would easier to understand if you were to define to make it obvious that you won't really rely on any instance whatsoever. However, an even better option would be to just define functions in a module. 

For a start you could make your code twice smaller by removing the logic common to 'X' and to 'O'. Then, you can perform all the comparisons in one go. 

Style Your code looks good. However, your indentation and your spacing could be improved to comply to PEP 8. Suggestion Instead of having roll the same score every time. It could be an idea to have more flexibility. I've implemented such a thing with an array of scores : 

Different algorithm You do not really need to find the list of all factors to know if the number is prime. You can stop as soon as a factor is found. 

Edit : still not quite a review but you got me interested and I wondered if this could be written in a more simple way. Here's what I got translating my understanding of the problem into Python code : 

Realistically, you could use a proper test framework or just but this is enough for the time being: we have the base cases tested and we have a small, well-defined function with a clear input and a clear output. It is now much easier to improve the code. Boolean conditions Instead of writing (or ), you could/should write (or ). Also, it would make sense to re-organise the checks and conditions to write/compute a minimal amount of conditions. Also, this makes obvious the fact that we never reach the end of the function. 

Then, one can see that you are using recursion to emulate loops. It is not quite a good idea in Python because recursion is not that optimised (for various reasons) so you should stick to loops if it doesn't make things more complicated. In your case, it doesn't at all : you can remove calls to from your function which becomes : 

Not quite an answer but too big for a comment and it seems important to let you know that your examples do not work - at least not on my config. Here's what I have (string1, string2, actual result, expected result) 

Now we can get into the internals of . First, you could get rid of the various way where printing is repeated. 

Names Python names are usually . Also, would be a better name that which sounds like a class name. could be renamed , , etc. could be renamed 

Keep It Simple : because and are , you could probably make them public, removing the need for getters. Also, you could make this an inner class/nested class if you don't plan to use it for anything else. 

Also, you could put more than just the function in the dict. We could imagine storing the params as well: 

Something I had forgotten can be rewritten . On Python2, this is much faster (because a list is generated and then we perform a linear search on it). On Python3, the performance impact may not be so big. 

Making things even simpler You don't really care about the content of , just its length. Also, there's no need to check that it does not get longer that 2 at each iteration : just check when you update the list. Also, you can get rid of the list and make it a simple counter : 

Style You code does not follow PEP 8, the usual Python coding convention. You'll find tools such as (or its online version), , or to check for this and other points that might make your code cleaner, more idiomatic or more correct. I can't be bothered to break the too long lines nor to fix typos in the comments but I did perform the other changes so make happy. The result is : 

It is a good habit to use a guard to separate your function definitions to what you actually run when you call your script. It is useful when you want to re-use your code via module import. Tests Now that you've re-organised a bit your code, it is much easier to write and run unit tests to ensure everything is working properly. Based on the provided example, I have : 

Not that it is much easier to understand which function is responsible for what. Once this is done, a few things can still be improved : your function names can be clearer and you can had documentation. Also, you should try to be more precise when catching exceptions. 

Improving the existing Let's try to improve . Names I got very confused by until I understood and where not the index loops but the corresponding value. Depending on the context, naming your variable may not be a big deal but in nested loops with , it is probably better to avoid. I suggest using for the elements of solution and for the value which is unused ( is a usual name in Python for throw-away values). Avoid the un-necessary The value as a first argument to range is not needed, you can get rid of it. Also, instead of keeping a list and convert it to a set at the end, you can use a set directly. Finally, because you are considering only 0 and 1, you could write as . You'd have something like: 

Last detail Your first call to is useless because the elements are unique already and you just need an iterable. Also, you could get rid of the list comprehension by tweaking the parameters given to : . 

Not a proper code review as per se but I was wondering if things couldn't be done in a more straight-forward way like this : 

I think a more precise analysis of the mathematical property would lead to a smaller search space. In fact, because corresponds to the smallest side, we could write: and . Warning: from here, it's just me trying to apply random (and simple) math operations with no promise whatsoever that things will get better. By limiting the number of times sub-expressions are computed, one could write (but I do not find this very beautiful): 

for a total of (n-1)n(2*n-1)/6. This tells us that the current strategy won't be able to be better than O(n^3). Now, what you could do to is maintain 2 arrays instead of one : 

An optimisation You are getting the prime factorisation testing divisibility of various numbers. You know that if you find a divisors that way, it has to be prime but it will also be such that ( being the "current" version of the variable, not the one passed as an argument). Thus, you can stop the loop much earlier : . A tiny bug Because this has no impact on your code, you have no particular way to identify this but the prime decomposition of 2 gives 2*2 which is obviously wrong. It could be interesting to add (in the debug version) some check that the product of the factors gives the original number.