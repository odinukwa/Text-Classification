I have 3 tiers of labs. First are the required labs. They're worth 100 points each and every one must do these. If they don't do one, it goes in the gradebook as a zero. These are also the labs that I think are the best of each topic for practicing what they need to work on. My calendar is based on how much time I expect 90 plus percent of the students need to finish this set. Second and third tiers are bonus and challenge labs. They're worth 110 and 125 points respectively. If a student does these they go in the gradebook. If not, the grade is omitted so there's no penalty for not getting them done. These tend to be extensions of the required labs, but might be a little more difficult. Generally the students that are the fast finishers are also the ones that like doing the labs, so throwing a few more their direction will keep them working. Plus, it's an AP class so the 10 or 25 extra points on a lab grade will be a motivator. I also have a page with a list of websites they can go to if they're finished with all 3 sets of labs. It links out to sites like code.org, codecademy, Code Combat, and CodingBat. Sites that are related, but a little more fun than just cranking out labs. And I'll also let students come up with independent projects to work on. 

I know where to find the percentage of CS bachelor's degrees going to women in the US (Figure 2-16) and the percentage of CS bachelor's degrees going to people of different ethnicities at research universities in the US and Canada participating in the Taulbee Survey (Table B-3). Where, if anywhere, can I find the percentage of bachelor's degree in CS, ideally over time, broken down by both ethnicity and gender? 

On open source projects and industry teams, there are often detailed style guides about how many spaces should be used for indents, line continuation, etc., and whether braces should go on their own line. While I have my preferences (such as spaces around binary operators), I acknowledge they are somewhat arbitrary. Should I require students to follow a standard for assignments and team projects (perhaps conventions of their own choosing), or should I ignore these as trivialities? Of course, I would enforce more important conventions, such as proper indentation, appropriate naming, etc. 

How do you encourage students to benefit from code reviews you give them, rather than being discouraged or responding defensively? 

I would mention it in any class in which it is relevant, such as User Experience or where A/B testing might be used to show different users different versions of a website and measure their behavior. Because such research is ubiquitous (consider Google's testing different shades of blue), Facebook was unprepared for the backlash against their emotional manipulation study. 

Yikes, that doesn't sound like a fun way to grade. Sounds about like what I do with students that are competing in ACSL competitions. But that's only 6 or 7 students, 4 times a year. I can't imagine trying it with 100 students all year. Here's what I'm doing, and what I've done. Online Autograder This is what I'm doing now. Kids login to Canvas and it launches an LTI tool embedded in an assignment. They do their coding in Chrome and click the Test button when they're ready. They can keep testing until their happy with the grade. Grades get sent back to Canvas. I still have to transfer them to our actual gradebook. I can then go back and download the submissions if I want to look at them for style or tips. Generally I try and do this with everybody on at least one lab per lab set. What I've found is that students average about 11 submissions before they move on to the next lab. I only grade the last one, although I'll go back and look to see how they progressed. Downside to this is that it works well for smaller labs, but not as much with larger projects. I can break down large projects into pieces that they can check, but eventually there has to be a full project turned in. JUnit Tests Before I moved online I would write a JUnit test for every lab, and usually I'd write two. One that I would include with the starter code and one, more in depth, that I would use to test. Students could run the test code as many times as they wanted. Then, they'd submit their solutions and I'd run it against the other test code. Biggest downside is it was pretty time consuming to write unit tests for every lab. I've gotten pretty quick, but it's still a time suck. Walk around Not ideal, but I can pick up a lot about students' code by walking around the room and watching them code. I do this a lot with projects to get a feel for where the kids are on the project. By the time it's turned in I've already got a pretty good idea on what they've done. Doesn't scale well though. Biggest class I've ever had was 34 students. "Participation Grades" Sometimes I fall into this trap, especially with my second and third year students. I give them labs, they work on their labs, and I assume that they're done correctly if they've been working in class. Only saving grace on this one is that labs are worth very little and tests make up a majority of their averages. So even with gimmie grades on labs, they can still get hammered on the tests. Admittedly not a good solution, and one that I'm trying to work my way out of next year. Eyeball It Skim the code and see if you think it works. Same as the participation, this only really works with smaller assignments and when labs aren't worth all that much. 

[I asked the question. Even though I don't have the full answer, I want to share what we do, in case it is helpful.] Role Models Throughout the entire graduate and undergraduate programs, there are female professors and guest speakers, including women of color. In lecture, I highlight the work of all types of people. Connecting Students to Support Communities When surveying students at the beginning of the semesters to get their preferred name, contact information, pronouns, etc., I ask them to optionally provide demographic information that can help me match them with conferences and special programs for which they are eligible. We encourage students to attend the Grace Hopper Celebration of Women in Computing, the ACM Richard Tapia Celebration of Diversity in Computing, Lesbians Who Tech summits, AlterConf, etc., and we subsidize their attendance. In some cases, faculty attend with them. Fighting the Impostor Syndrome I educate students about the Impostor Syndrome, repeatedly. I tell them that it is normal to feel overwhelmed and incompetent at times. It does not mean they don't belong in CS; it means they're being challenged. When I correct students' mistakes, I let them know that I've made the mistake too. Direct Discussion When an event is in the news and on students' minds, such as the publication Susan Fowler's essay about Uber, I mention it in class and provide context. (On the negative side, her experience was awful. On the positive side, people are listening to her, which would not have been the case in the past.) In the capstone course this spring, I assigned students the following readings (which, in hindsight, were overwhelming): 

Sometimes. And sometimes they explicitly say that you must use the previous method for credit. #3 on the test this year did that. I also have a negative rubric point for any of the penalties. Destruction of data, unexpected side effects, returning from a void, that sort of thing. 

I post solutions after the due date of an assignment. And usually, I'll go over them in class as well. Two birds... 

Wish I had a good answer, but I can sympathize with your Scratch example. What I started doing was just giving up on the first day we did Scratch. I would show them the drawing tools before we did any coding. Spent about 5 minutes showing how to make sprites and backgrounds and then gave them the rest of the period to play, with the understanding that was the only day that they had to just play around and doodle. Day two, we start coding. Worked fairly well. It was at least better after I started doing this than before. I think the novelty of it wore off when they were allowed to goof off for a day. Haven't taught Scratch in a few years, but I noticed the same thing happening with Jeroo. Kids love painting the island with flowers and water. The last lab in the set is one where they get to build their own lab, and make their own island. I think having that to look forward to helps. 

In Programming Languages, I tell students that, in Fortran 77, the default type of a variable starting with , , , , , or is integer, while variables starting with any other character are reals. In either case, the default can be overridden with an explicit declaration. That sets up the joke: "Fortran is of great theological importance, because GOD is real (unless declared integer)." I recently learned about the deprecated Smurf Naming Convention. 

One way is to have an industry advisory committee consisting of alumni or friends of your institution. (I was on such a committee for a community college when I worked in industry.) Once a year, the committee meets with faculty to learn about the current curriculum and suggest changes based on their active professional knowledge of the field. Another way is for faculty members to spend sabbatical years in industry. I learned more about software engineering from a year at Google than from my entire formal education. 

I teach the "standard" conventions for the language, where they exist. For Java, I use the original Sun naming conventions and Google Java Style Guide. More important that standard capitalization (which I require) are: 

This provides a simple demonstration of the benefits of pointers and will help them understand why primitives (not counting pointers) are passed by value, while everything else appears to be passed by reference. 

The way our network is setup I have access to my students network shares. So, if a kid is absent I can get to their stuff and copy it for their partner. Not ideal, and definitely doesn't scale well if there are a bunch of students absent. Plus, I really don't like the privacy implications. But it works in a pinch. I've also had groups share a flash drive, and then leave that flash drive in the classroom. Works okay if there's no plan on working outside of class. Some groups will zip up and email themselves the work they've done at the end of class. Or, upload to DropBox, Google Drive, or something like that. My personal preference would be some type of source control. I've been looking for a reason to introduce git into my 2nd year course. Maybe this would be a good excuse. 

I use school colors and principal's name. If someone comes in tomorrow and says your principal is no longer Mr. Smith, it's now Ms. Jones then that change is made for every object (student) in the school. You don't have to go to each individual student and tell them that their principal has changed. It worked really well this year because we did get a new principal. 

You said he refuses to work, but has mastered the material. How do you know he's mastered the material? I've had students like this in the past. They'll finish 2 weeks worth of assignments in a day and a half. Talk to them. See what interests them about programming. The few times that this has come up, the student had something specific they wanted to build. It was well above what was expected in class, but it was still programming, so still related. We came up with a plan for them to work on their pet project, which always required that they finish the assignments I gave first. Then, they're free to build their project. 

Because the standards are explicit, it is clear that it's nothing personal if we say a student cannot continue in the major. If the student really is interested in computer science, I tell her this might not be the right time in her life for her to do it (not that she's incapable of ever doing it) and advise her on retaking courses, with any appropriate accommodations. I might also advise her on related majors in which she might be more successful. We have no way of stopping a student from continuing to take CS courses (as long as she has passed the prerequisites), but the policy sends a strong message that they should choose a different major. 

Georgia Tech announced an Online Master of Science in Computer Science degree in 2013, which has received very positive press. You said you don't want MOOCs because they don't "provide a solid, recognized degree." Georgia Tech's degree is solid and reputable. According to a 1996 New York Times article: 

When teaching Intro CS in Java, I sometimes tell students things that are not entirely true, such as that, unlike abstract classes, interfaces cannot contain any code. (For those of you unfamiliar with Java, that was true until functional interfaces were added with Java 1.8 in 2014.) I realize I could put an asterisk on the slide, or visibly cross my fingers, and let students know I'm not telling the full story, but, when I witness other instructors allude to irrelevant advanced material, I view them as pedantic and fear that students find the additional information distracting or confusing. I don't mean to open a debate on the importance of functional interfaces in Java -- they're just an example. What I'd like to know is if it's considered better to gloss over details in an introductory class or to always speak the whole truth. 

Grades. Works especially well around final exam time. You can find the average. Find the highest and lowest. Find the average with the lowest dropped. Find the most common grade. Count how many are in the range 90-100%. Given an array of grades assigned for each class, calculate GPA. Given 3 arrays that represent labs, quizzes, and tests calculate the final average. Each array can be weighted differently to match whatever your grading scale is. Ex: I would have labs weighted at 10%, quizzes at 20% and tests at 70%. 

Fingers crossed that this one doesn't get closed. I've tried to do something similar, but it hasn't come out well. Hoping that some others have suggestions. It looks like they're using some sort of overlay or whiteboarding software, and I assume a tablet or stylus. I can see a cursor where their pen is drawing. I've tried this, and it didn't go well. But, I think that's more a factor of my handwriting than of the idea. Enough years of typing being my main method of written communication has made my handwriting terrible. And it's even worse on a Wacom tablet. Same thing with some student created videos. They're just hard to read. I'd like to find whiteboard software that also allows typing. Haven't found one yet, although I haven't looked all that much either. A couple things that have worked... If I'm in a hurry, Powerpoint has enough animations built in that it's possible to do a fairly decent job. And, they can be exported to videos if you want to upload to YouTube. When I've had more time I've used Flash. It's deprecated now, but I still have an old copy on my computer. Takes longer, but gives me a little more freedom in what I build. Also can be exported to a video, which is especially important since browsers are starting to frown on Flash. Edit: Just played around with the pro version of Acrobat and it looks like it has a pen and text tool that might work for what I'm trying to do. Most of the time I'm just trying to annotate what's already typed out. Edit 2 - After "screen casting" was added This year I started capturing my screen as we work through problems and then uploading to YouTube for kids that missed the day or just want to go back for a refresher. I'm using a program called OBS. Works really well. A little Googling brought me to a Windows program called ZoomIt that will let me write and type over the screen as I'm demoing. Think I might bring my Wacom tablet to class tomorrow and give it a try. 

I spend up to many hours on each student. (Subsequent letters for the same student require only minor modification.) Mine range from a few paragraphs for students I don't know well to 2 pages for a student who has greatly impressed me and is being considered for something very important. (This is not too onerous, since I teach at a small liberal arts college.) If a student is applying for a job (or scholarship) at a company that has employed our graduates, I will explicitly compare the candidate to those graduates. In the programming project course, I ask students to do peer evaluations, and I quote these in letters of recommendation. As someone who reads letters of recommendation (for graduate admission), I like letters that contain details, such as "2nd highest score in a class of 40" or "strongest major in 2 years" or "created a website for the computer club using X, Y, and Z". Something that eases writing letters of recommendation is having a student bring in their resume, transcript, and any other information that will help me write a strong letter. If a student's grades are not good, I ask if there were any extenuating factors and what I can say about them. For example, I might say that a student's grades were low one semester because of health problems (or personal problems) that have since been dealt with. I believe mitigating circumstances sound better when coming from a recommender than from the student. Some things to keep in mind when writing a letter of recommendation (that nobody warned me about):