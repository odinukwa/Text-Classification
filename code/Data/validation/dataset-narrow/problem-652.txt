Again, that will change a few things logically throughout your code and header, but it will end up far cleaner and clearer than it started. You've got pointers to pointers in C, an often underestimated advantage over other languages, and so far you're doing great with them. If you can handle using them for pointers to arrays of pointers, you can handle using pointers to members as objects. Other than that, the nature of the task demands a bunch of hairy pointer-chasing and a little bit of pointer math, which is tough to read. Stuff like takes a second for me to digest fully. If your comments were at all lacking, I would want some of the longer statements to be broken up and have some intermediates made into local variables with names. However, your comments spell out what's going on very clearly, so I don't think that counts against you. 

I see some opportunities for improvement, which will get this up to about what we expect from a . First, the imposition that the stored elements are is not optimal. Sooner or later you will want non- elements, and you will not want to write and maintain another for each data type you want. is, in fact, the least useful element type I can think of. The solution is a class; instance objects would be declared ; a programmer will expect this syntax and the reusabilty it produces. Second, there should be no method as it is unclear where the new element is added. Instead, we expect methods like for O() insertion at and O(N) for what you are currently doing with . Third, you may recognize your as being O(k); this is because you've actually written a queue (with minimal modification, a deque), which extends a real . A real has no need of a tail pointer ( here). 

Well, yes and no. If you absolutely must instantiate classes by name as a string, and you absolutely must have exactly one namespace for classes, and you absolutely must not use the object or a module scope as that one namespace (i.e. just declare a function in your source), the way you're doing it is probably the simplest method. I would add a to make it more user-proof. However, for all the same reasons as above, I would again have a good hard think about how badly you need to instantiate objects by the name of their class. If you want to actually do reflection, you'll need to re-implement by name, etc. etc.; if you want to segregate your classes into namespaces or give them any other kind of scope, you have to re-implement scope. 

If you don't really need to constrain your declaration to one block, stick with and . You can still stick it in a hash or factory class if you like. That's the idiom that everyone understands, and it will do the same thing. If you don't really need to look up classes by name, use function scopes (again, look up module pattern) to manage your namespace instead of a hash. If you don't really need to be writing JS... well, it seems like you'd really rather be writing Ruby or Python. Those languages have classes. JS doesn't. It has prototypes and constructors and function scope. 

Since it has been said already, I will leave the issue at "figure out what's responsible for memory management" without further explanation. I have a few things to add: DRY, DRY, DRY! (ha.. ha... tumbleweed) It is possible that some day, you will want to change your container type. Maybe you import a library, maybe you need different performance or thread safety, maybe you write something entirely new that better serves your purposes. You did half the work of protecting yourself from this change by making a for , but you also have throughout your code, as well as its corresponding iterator. You can DRY that up by using the instead of in all cases. Possibly add another for the iterator type. That's just to save some keystrokes, though, rather than typing out every time. You probably won't ever change the fact that you need an iterator specific to your container, so is also fine if you don't care for brevity. The other thing I see repeated over and over is the code to select a subset of your s based on their subclass. I doubt that your 's role includes enforcing the class hierarchy, so you don't want the manager coupling to it. That makes your manager brittle to any extensions of you may make later - at best, every new type requires not only its own code and header, but also a change to the manager class, lest it remain un-queryable. There are two ways to go about reducing that coupling. Probably real OO gurus can think of more, but I'll stick with the simplest: 

This looks perfectly good to me. Everything has a unique purpose, everything is either clearly explained or self-explanatory. Unless you have tested this and found a performance issue, and you are sure that it is happening here, do not do any optimization to this. There is no loop and no recursion, the code itself can't properly be an optimization target. If you are observing that this is running slowly, the hidden costs of setting the scrollbars must be the cause. To address this you will need to change your entire strategy to keeping the contents in the right place using CSS only. I have to say that while I find using the position of some element (?) to be a pretty elegant way to duck issues of messing around with coordinates that will be inconsistent otherwise, it is technically the best practice to do all positioning with CSS. 

That really depends on the functionality you want to guarantee. Assuming this is working code and your interest is to "declare" all aspects of a "class" in one block and also have reflection (access to the class hierarchy, via in your example, it breaks if you have a name collision. i.e. you want properties called and that have nothing to do with the framework. I'm having a little trouble seeing how this code works, though: 

So whilst I have a lot of tweet data, I only need a list of integers. This is obviously much smaller. I want to be able to stream the data from the file and convert each line to its sentiment value in the most efficient way possible. Here's what I came up with: 

Scope It is generally good practice to scope variables in the minimum possible scope. I don't like this: 

As runs in a separate , we need to consider visibility and atomicity of any variables used to communicate. So an seems the natural choice: 

Iterators Kudos for correctly using an to from a while iterating. But, as described above, this is not the correct approach to implementing a Sieve. Programming to the I don't link this method declaration: 

So I am using a for-comprehension over the tweetsfile to each line in the file to its corresponding number. So my question is, how would you rewrite the above the maximise speed and minimise memory usage. Any other comments on the Python would be welcome too. I realise that I can use a single-producer -> multiple-consumer pattern to speed up the processing of the file, but I would for now like to stick with a single thread. 

So now you can easily add new "transformations" to the list. In order to transform an to the correct in Scala we would simple use as is also a collection. No such luck in Java. I came up with this thing, it's a little ugly but I think it's clear: 

This leads to fewer string concatenation problems and is easier to read. Here is where the problems really start: 

Are horrible! If you need to label a variable declaration with what that variable is, you have picked the wrong name. Further, if you are going to use inline comments, avoid the case where the comment makes the line so long that it's illegible. 

Others have covered bad practices here, I am just going to demonstrate a Java 8 solution to the problem - as Java 8 is the current version of Java; I believe this is what should be written in modern Java: 

read a tweet file, with a JSON tweet on each line parse each tweet to a using extract the field from the tweet - giving the content of the tweet for each word in the content, check it if has a sentiment for each sentiment word in the tweet, calculate it's value (from the AFINN ) and sum across the tweet store that number 

This should reduce the amount of time the spends resizing itself. This reduces the runtime by about for - so has little effect. These sort of micro-optimisations should always be tested using benchmarks to see if the additional code complexity warrants their addition. A few comments on the code: Use of You use sometimes to delimit references that won't change: 

The has no idea that we've won - it carries on and still emits that we lost. is a busy wait, so causes one CPU to "spin" while it's checking the time leaving it unavailable for anything else. 

So we check whether the game is over after reading a new value from the user. In the winning condition we call which interrupts the clock thread and causes it to exit. 

What do you notice about the pairs 1. <-> 5. and 2. <-> 4.? There is a simpler solution to this problem than brute force... 

This way they are outside of the running code and clearly constants. Similarly should (almost) always by an instance or class variable as having more than one is (almost) never useful. Use for outputting formatted messages: 

I would also suggest that you always use brackets for your statements. It's generally accepted common practice and with good reason - the few lines that you save by not doing so lead to some very insidious bugs. On an algorithmic note: why reverse the at all? Use one loop and read the both forwards and backwards simultaneously. For further improvement, walk through a comparison manually: 

But (and this is a big one for style) you should only use one type. You have got one type in some places and the other type in other places. Set a preferred style in your IDE and stick to it. Also, if using Egyptian brackets (the first style) please leave a space between the statement and the opening bracket. Comments Comments like this: 

it's recursive - Java doesn't handle tail optimisation and recursion is slow It makes a rather large number of copies - copies the underlying it's very long 

I have some code that calculates the "sentiment" of a Tweet. The task starts with an AFINN file, that is a tab-separated list of around 2500 key-value pairs. I read this into a using the following function: 

The other comments cover the code quite well, I have a few points to add. First, obviously this is a critical error: 

Set everything to as you don't know if anything is a composite. This isn't really required as in Java is by default. Starting with to , if , loop over for while in increments of and set . You now have an where anything that is () is a prime. 

Firstly because of the scope of and also because loop indicies should be incremented inside a declaration unless you have a good reason not to. I would prefer the following construct as it show that I have two variables used in the loop, that the termination condition is and that I increment every iteration. 

Essentially we take each and we it that gives us a . I then you the method to append all present instances to a . If the `StringBuilder is empty simply append the current integer too. An alternative, not sure if it's better, is: 

Using Caliper this method has a runtime of around for . I have done a few experiments with speeding up the code. For example, using the Prime number theorem we know that there are approximately prime numbers between and . Using this information we can create the used for storing the primes to almost the right size: 

I'm happy with this code - it's pretty clear and I'm not worried about its speed and memory usage as the file is small. Using the created I now need to process many tweets. Lets say I have 1GB of then in JSON format - from the live stream. What I need to do is: