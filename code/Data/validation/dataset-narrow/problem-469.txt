If the user is already authenticated, there is no need to adress this case. You are responding with which is wrong: there are no ressources conflicting. A reason to throw a is: e.g. when you have a content management system with a versioning field, and a user wants to update with a version number which is lower than the current one; then that is a Or when you wrote 

So. The Horse knows best, upon which grounds it would walk. 3) The Factory should know nothing of the abilities of what it delivers except the type. The ground which a transport is suitable for is up to the transport itself. It knows best. 

You have two responsibilities: 1) A , which is used to authenticate/log a user in 2) An , which takes care of all actions belonging to the user So a possible routing schema for the API would be: (1) POST: api/login Possible Answers: 200 OK or 401 Unauthorized If an unauthorized user enters a page, where authorization is required, the answer should be: 403 Forbidden. The same goes for every REST-action, which needs authentication. POST: api/logout Possible Answers: 200 OK (2) GET: api/users/ Possible Answers: 200 OK and a list of all users in some output format (JSON/XML whatever). The client could specify his wishes via e.g. application/json GET: api/users/{ID} Possible Answers: 200 OK including the requested user or 404 Not Found. If you keeping track of ex-users a possible answer could be 410 Gone. POST: api/users/ Possible Answers: 201 Created including the created Ressource in some output format (JSON/XML whatever). If there is anything syntactically wrong (something missing or a field misspelled) with the userinput the answer is: 400 Bad Request PUT: api/users/ Possible Answers: 204 No Content DELETE: api/users/{ID} Possible Answers: 204 No Content So far a possible Layout. Now some words to your code: 

You iterate over all books in the library, and if one book matches, you return the whole library. That's not, what you intended. And more Do not return ! Please, never ever! That doesn't make any sense and leads to excessive use of Guard Clauses against . It is a clear antipattern. In Java8 there is a nicer solution if you want to hide in an optional. Say, your teacher asks you to look for a specific book on the shelf and you do simply nothing - what does that mean to your teacher? A) you are deaf or b) you are dumb or c) you are neither, but there is no book. If someone asks you for a list of books, when there is none, simply return an empty list, and say politely: »Sorry, the list is empty, because there was no such book«. 

I've seen, that you made up this code as an example, so I hope, that this is not your production code: 

Does, what it should. Is simple to read, and was just invented for that purpose. I wonder, why nobody else came up with it. 

I don't know if it is good practice, but in my eyes it would be cleaner, since you have several JS-files at this point, to separate markup, layout and JS completely. So would reside in a .js-File. In some cases, when you only have a few lines of JS or -on the other hand- if you have to care for every millisecond to deliver a good page experience, it would make sense to embed JS in the html-file and retrieve the non-critical JS at later time dynamically. It depends on your usecase. 

As far as numpy goes, I can't say anything to that. But what I am generally missing from your Code is abstraction. This makes your code unelegant - at best. OOP ftw! This comes with ordinary lists, but it helps to clarify: 

Where X is the result of a function: either div(h,5) or rem(h,5). So the next step is refactoring number,Symbol => output to number,Symbol, fn => output. You get 3 lines instead of 9. The only tricky part is the 5 minutes row You could go the road of abstraction one step further and make one single function for each line: f(emptyline, functionToFillLines)=>output 1) For seconds f('O', fillSeconds)=>output 2) For single minutes, single hours, five hours f('OOOO', fillFunction)=>output 3) For 5 minutes f('OOOOOOOOOOO', fill5minutes)=>output Where the fillX-Functions were closures, taking one argument as input. 

Here is a Fiddle to play with. This should do for many applications, you write. If you have many modules, dependencies, etc. I would take a look at RequireJs 

There are more efficient ways to implement this: 1) If you only need a dictionary to keep your data together without semantics, you could split as follows: 

Perhaps you could go one step further: Instead of iterating over each block, you could make use of the fact, that between each block is a delimiter ( in your case). So you could get blocks by simply chopping up the string with . This makes it possible to do a on the resulting blocks. You could refactor the inner for-loop out. 

Here you are mixing two concerns printing the options and prompting for input. This pollutes your . One function should only do one thing (SRP). 4) Your code lacks an overall structure If you take every point together, this should now be clear. 

does exactly that. What your code is lacking is the initialization of the datatable (see (3) ). And then you are done. P.S.: Perhaps this is interesting for you. Edit: I forgot to address this point 

One reason to choose OOP is the advantage of creating an object in a predefined state. What you wanted is: you wanted to create a valid Comentari object. What you did is: in case the state of your object would be invalid, your object would be created and just break in to pieces because of your exception. It would be much cleaner to wrap this into a factory function like: 

Besides the nice OO-solution, another (procedural) solution to your looping problem is possible: If you have cases, where you iterate over a collection of and only the first element needs special treatment, you could it off your collection, treat it like you intended to and iterate over the rest, so in your case: parse the text until "headline" is reached and iterate as intended over the rest. You could make use of to shift the first element. Pseudocode: 

No. Within Javascript there is no way. But it is possible to send a message to the server, which lets the server know, that you wanted to delete one entry. It is possible to intercept the rendering process of , so that you generate attributes, which you could use to identify the objects displayed in the column (e.g. an ID or the like). And you could then initiate a request to the server