NOOBS contains a recovery menu. Press the shift key to enter rescue mode. You can now overwrite your existing install. This operation is destructive , all your settings and files will get lost. 

Since Silverlight is dead since three years at least , it is very very unlikely it will ever work on the Windows 10 IoT Core SKU. Silverlight didn't even work on Windows 8 RT , but only on Windows 8 Home/Professional/Enterprise. As usual, Silverlight on Windows 10 Home does work fine. 

Yes it is possible to overclock the GPU and yes , this leads to a performance improvement. Look at following resources: 

Obviously omxplayer is a commandline-only application. Coupled with an extra GUI it will still outperform (or actually use acceleration instead of) VLC or any gstreamer-based solution like Totem on old Pi models and even the Pi3 in special cases. A popular GUI is omxplayerGUI , part of the kweb package. Get it here : $URL$ 

Yes, there is a way to update cmdline.txt without starting again. The SD card has a partition with the name . I was able to plug the card into my laptop (a Mac, but the partition is FAT so it opens on Windows too) and edit . Below is what my working line looks like: 

Arch Linux is pretty minimal out of the box. I tried Arch for the first time on a Raspberry Pi after using Debian-based systems for years and and I'm very happy with it. Here are instructions for a RPi and instructions for a RPi 2. After following these instructions the base install is about 550MB. Wiring in to a network works out of the box and getting on wifi is pretty easy using netctl. There are differences to consider like its package manager, pacman, and its init system, systemd, but well worth the learning curve. I'm not sure what drivers you're specifically after but I haven't had much trouble getting software to run. For example, accessing GPIO via Python is a package install away. Hope this helps. 

Shrink your second partition with gparted to eliminate free space and use dd to only backup the parts you need. I suggest using a gparted Live CD (based on Linux) to modify RPi partitions. You can boot from such a disk without touching your Windows install at all. This is much safer. 

Synaptic is a graphical tool. It should make it easier for you to manage and search packages on Raspbian where plain apt is too confusing. 

A better option is the SD card copier (piclone) included in Raspbian itself , since it works with cards both smaller and bigger than the original. You must be running Raspbian on the Pi and need to use an additional USB cardreader (or USB harddisk/pendrive). 

You need an ARM driver for Windows 10 "IoT Core" - if you don't have the complete source code for it you must ask the hardware manufacturer for such a driver (except if you like reverse-engineering for hundreds of hours). A "normal" Windows 10 "Home" or "Professional" (x64- or x86-only) driver will not work . 

I've run into strange issues where the RPi is not getting enough power. I wouldn't power the RPi from a USB port on your laptop and make sure the wall plug supplies at least 2 amps. 

We install for a basic auth password file, to setup a process supervisor to start and keep Trac running across reboots, and / / to cleanly install Trac in its own self-contained environment. The environment and Trac install is done with: 

Put all your RPi's on a network and you'll be set for thousands of devices; e.g. - . My home network is a network, which would support 254 devices. The listener waits for a message with a timestamp, sleeps until that time and executes the desired action. For example, here's an implementation in Python. If your timing requirements are more stringent, maybe drop to C: 

The most important thing is that the seller makes references to device tree overlays. This guarantees that the driver is maintained by Linux/Raspbian and will always be updated and working, whether the manufacturer goes bankrupt or not. This is infinitely better than random images with random included drivers. Those are of no use if you are already using a configured Raspbian or Arch Linux ARM system. 

Replace the call to @epiphany to a call to @lxterminal. Epiphany is a browser and obviously the wrong program to execute bash scripts. LXTerminal is the Terminal program of LXDE, the Lightweight X Desktop Environment. LXDE has been heavily customised but is still the foundation of the "Raspberry Pi Desktop". 

Collabora has improved software for the foundation under contract. They implemented Hardware acceleration inside Webkit (for Ephiphany) and did work on a Wayland desktop called Maynard. It makes sense that they run an extra repository with the improved versions. Sources : 

I have an electronics question. I am no electrician and am trying to build an alarm pi Mark2. Currently I have a 12v power supply running through a relay which the pi turns on and off to trigger my 12v RGB led strip. Along side this I have a standard micro usb powering the raspberry pi. What I would like to know is A) would it be possible to leech power from the 12v power supply using a t-joint solder into the power cable, and a 12v-5v buck converter, and still run both systems? Further to this, in the next generation of my project I would like to include a wireless charging dock and a set of USBs so that the Alarmpi could become an all in one bedside alarm and charge station. So B) how do I figure out the required power supply for 4 charging USBs, 1 5v qi mod, 1 5v pi cable and the 12v rgb leds? Please as for clarification if needed I know this is a little garbled but any advice would greatly help! Just to note the pi in turn will be running a 20x4 rgb LCD screen, 2 small adafruit speakers and an led clock screen as well as a luminosity sensor and a small amplifier 

Lets approach this problem another way : systemd allows starting units in parallel. You actually don't care when every unit is finished. What you care about is when your unit starts , and how much time all other units your unit depends on take to become ready. Check which dependencies your unit/program has and make your unit dependent on them instead of multi-user.target. You can also use the After= directive directly to enforce this , if using the Requires= driective doesn't do this properly. 

Did you consider 2D Game engines/libraries ? Because OpenGL/OpenVG are very low-level and don't do font handling , the added "belt and suspenders" of those libs will make your life much easier : $URL$ $URL$ 

Neither Debian 7 (wheezy) or Debian 8 (jessie) support the Raspberry Pi3 in AArch64 mode. Debian 9 (stretch) will very likely support the Pi3 in 64bit mode , though. Progress can be monitored here: $URL$ 

In the code above you can put your logic in and you're all set. The broadcaster calculates a time in the future and blasts this on the network. I noticed sometimes the message would be missed, so I have it send it a few times. The listener above ignores any messages that appear in the past. The time delay is set to 2 seconds in the future. 

You might need a reboot for daemontools to kick on if you just installed it; I can't remember. I'd try to access the page as described below and if the browser connection fails reboot. Now, access port 8000 on your RPi through a browser and you should be up and running! 

I am not familiar with free image hosting services. However, if paying for bandwidth is not an issue, you can look into Amazon S3, which will run up to $0.09/GB (costs go down as data transfer goes up, see attached image from the AWS pricing page). 

Use readymade remote-controlled sockets. They should be tested AND work already. The hard part is replacing the supplied remote with a cheap 433 Mhz transciever , which might need reverse-engineering , see here : $URL$ 

Since the Raspberry Pi has no consumer-grade video inputs , your project is - as defined - impossible. If you allow at least some additional components , it might be possible (Composite and HDMI USB framegrabbers , if expensive , do exist). Note that still leaves the software question unanswered , that is , if those devices work on Raspbian Linux in a satisfactory manner (or at all). 

If Swing uses plain X11 as backend , it should be impossible for Java to detect a missing display since the X Server runs fine without a physical display. This will "just work" as long you always let the desktop running.