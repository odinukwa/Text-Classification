After confirming this worked with the Arduino I wanted to port it to run on a Raspberry. I enabled the SPI and confirmed the interface was available (method described here). I installed the BCM2835 C library on the Raspberry (wheezy) as described here Which is basically: 

Where is the username of the account you want to use for automatic log in. Note that this bypasses security, allowing access to your PI without the password of the user. 

You question does not specify whether by 'terminal' you mean the classic terminal or a graphical session with XTerm opening up automatically. I'm going to assume the first. If you're using you can log in automatically by editing Search for the line: 

This works great in the sense that it starts X (with ratpoison) and my application, and it also restarts the application unless that .keepalive file is missing (which is something defined by the application). The problem however, is that on the Raspberry version of Debian Wheezy, there is no file in the /tmp/ directory to indicate X has started so the check in will always return false and an attempt will be made to start X every time. How can I check if X has already been started on the Raspberry? 

With the function I'm trying to simulate the calls to in the original code, but I honestly do not know if it's the same, although if I don't call I always get 0x00 data. The problem is, that I receive 0xFF for all 3 values when the flash chip is connected to the SPI bus (whereas I receive 0x00, 0x00, 0x00 if it is not connected or I don't toggle). So I'm wondering why the code using the BCM2835 library doesn't work (but doesn't throw errors either) And what I might be doing wrong in the Python version. Or basically, how I can interface the Raspberry with the flash chip successfully. 

I'm trying to interface with a Winbond W25Q64BV flash chip via SPI. I started off by testing it on Arduino (target is a Raspberry) as I found a few implementations before I got started. Most notably this instructable and this project on Google code. The instructable gets the 'jedec' information like this: Looking at the code from the instructable, the implementation to get the jedec information 

The project on Google code defined multiple requests for each piece of information, but the idea is basically the same, for example getting the manufacturer id: 

It compiled, was able to execute it (as root of course) and it ran and completed without throwing any exceptions. It did not however output anything, not even the text "START". But if I remove the line it does output "START". I can't explain it and I'm not a C guy so I started looking at Python. Using py-spidev, which is 'somewhat' documented here, I started porting the code from the Arduino samples: 

Assuming you are using Raspbian, it gets automatically loaded. If you are not using Raspbian, just boot it temporarily, note the drivers that it loads, and then use that list to get it working with the distribution you are using. 

All commonly sold wall-warts are switching power supplies these days, so you are not doing anything out of the ordinary. You can power the 3.3V sensors from the 3.3V pin on the GPIO header. Search the documentation for the maximum current you can draw, but a few milliamps are definitely safe. 

(I decided to save you and others some time and included an example of a static address). If you really want to route traffic between the wireless and wired segments, don't forget to add in your (or some equivalent place). 

Adding to @recantha's comment, if you switch to an Pi3 at some point, the tty device will no longer be /dev/ttyAMA0. 

To make everything work: Choose some other subnet for wlan0, say, 192.168.4.0/24. The wlan0 stanza in should read something like 

If you are really ambitious, you can write your own code that continously reads from /dev/vcs1, and "types" onto the console by using TIOCSTI. 

High school trigonometry. The viewing angle is usually given as the angle along the diagonal. From that and the aspect ratio you can figure out the horizontal and vertical angles. 

Have you actually installed the cross-compilation tools? If so, you have to add the directory in which they were installed to your PATH. For example: 

you mean . is a Windows thing :) Easiest way to answer this is to load raspbian (which I know works on the RPi3, that's what I'm using), run and also look at the boot messages. I'd do it for you, but my 3 is currently off and I'm not at home. 

Study the installed packages, startup scripts, configuration files, and so on, of OSMC, and just duplicate those on your vanilla Raspbian installation. You will learn a lot in the process! Move all your project files from the vanilla Raspbian to OSMC (it's also Debian, remember?) and keep working that way! 

Let me try to un-confuse you :) In the good old days, computers came with serial ports. The standard is known as RS232. These slowly disappeared, first from laptops and then from desktops. These days, you can use either internal cards, or USB-to-serial adaptors (but read on). The serial connection on the Pi (also on Arduinos and other such things) is not real RS232: real RS232 signal levels are -3V to -25V for logical one ("mark") and +3V to +25V for logical zero ("space"). What's on the Pi, on these cables you are talking about, Arduinos, and so on, is a TTL-levels version. Obviously, **do not connect* a real rs232 port to your Pi, or you will fry it. You either need a level converter between your Pi and the real RS232 port, or you need a serial adaptor that brings out TTL-level signals. You have to be careful, because there are also a lot of USB-to-RS232 adaptors (they have legitimate uses!). And that's what the "special cables" you mentioned really are: USB to ttl-level-serial adaptors. Note that they don't normally bring out all the control signals, but what the bring out is usually enough for console debugging. $URL$ should be good enough. Also note that "TTL levels" means that the signal can go as high as 5V. I'm pretty sure (but check) that the pins on the Pi are NOT 5V-tolerant. If you only need output (and don't need to type stuff back in), you can just connect the TX pin on the Pi to the RX pin on the cable, and you should be fine (anything over 2.5V will register as "hi"). If you want to go bidirectional, make sure your cable puts out 3.3V, not 5V levels. One last word: you'll need to set up the proper configuration registers of the SoC to route the UART signals to the GPIO pins. 

Pi can drive a solid state relay directly without any issues.They are made to be operated directly from the pins.They are completely isolated and so won't damage the pi. Most solid state relays I have seen work on input voltages of 3-30V and so should be fine. Hope it helps. 

I use a PIR module setup in the following way and its working quite well.It is even much easier to setup than your connection. They can be powered from 5V and output 3V so can be connected directly to pins on the Piâ€™s GPIO header without any other components. Most PIR sensors can take input from anywhere between 5v to 9v so I think you should be good without the battery too. 

This option was introduced in the version 3.2.7 of motion and replaced which can be used if you are using the older version. When this is enabled the framerate option is used only to set the pace the Motion service the webcam port etc. Running Motion at framerate 2 is normally fine. The option is there in line 83 of your configuration document.Changing it there should be enough. PS-Restart the service for changes to take place. Hope it helps. 

I would say its perfectly possible to do this. I use my external hard drive for torrents and whenever I need to transfer unfinished torrents from pc to laptop I directly transfer by removing the hard disk.Never had a problem. Hope it helps. 

Motion has a configuration option defined in the manual which can be used to set the program to capture less than 1 frames per second and so can be used for your purpose. Here are the details for the option taken from the documentation. 

THe ACT and the OK leds are the same thing.The name was changed in the revision. From the raspberry pi website, 

I am assuming you are using server side driver ie. have the CUPS use the Samsung driver. You might be able to speed up the printing process by making the printer a RAW printer.DO this by selecting the Printer model as RAW when selecting the printer and installing the drivers on the computer.This will reduce the CPU load significantly. However setting the printer as a RAW printer, you won't be able to print from inside the Raspberry pi. Here is a nice tutorial which might be useful in setting this up. Hope it helps. 

My raspberry pi is placed where a lot of dust accumulates on the surface.I recently checked and there was a layer of dust settled on it. I cleaned up the device and restarted it. To my surprise, Its working a bit faster than before. I want to know if dust reduces heat dissipation considerably to warrant cleaning it regularly. 

Maybe you have a defective card. Did you try it other cards? Try dd-ing it back to your machine and comparing the image with what you put on it. If that passes, you can always bring up a linux VM under VirtualBox or VMWare (there are free versions of both for the mac), and try to mount the file systems to see what's on them. As @goldilocks pointed out, these are not hfs filesystems, so the mac can't check them (maybe it can check the vfat, but it can definitely not check ext[234]fs. There may also be a standalone ext[234] fsck for the mac, check brew or whatever package manager you are using. I run the same image on my 3 with no problems at all. 

Ask the person who gave you the machines for the contents of the card and/or the root password. Buy a new Pi. If you're doing this just to recover the hardware, it's really not worth it. 

There is no magic in the image file. It's simply a bit-for-bit copy of a chunk of the sd card. What you want to do is figure out exactly where the second partition ends, and copy from the device file representing the whole card (in this case: . Now, look at how your partitions are laid out: in your case, it's partition 1 followed by partition 2. Right click on sdb2, and select information. Note the last sector. It will be some number around 8 million (a "sector" is 512 bytes, you have four gigs, that makes eight million sectors). Let's say the number is 7666777. That's the last useful sector you care about. Since the first sector is sector 0, there will be a total of 7666778 sectors that you want to copy. So do something like: 

Now try to ssh from .33 to .42. Are you still having trouble connecting? If you do, the MTU was never the problem. If you can now connect, something really weird is going on, and it would help if you could collect tcpdump traces that could be analyzed. To answer your original question, the permanent way to change the MTU is to add a line to /etc/network/interfaces for the interface in question. If you are configuring over dhcp, edit /etc/dhcp/dhclient.conf to contain the line (or whatever). 

On .33, run From another window, run . Look at the tcpdump output and verify that the DF bit flag is set. On .33, add a host route to .42: On .42, run Repeat step 2. You should now see that the DF flag has disappeared. 

By far the easiest way to do this is to use a bluetooth dongle for the Pi (or use a Pi3), and one of these: $URL$ No fuss, no muss, no worrying about long cables introducing noise or static hazards, no coding to do.